// Code generated by capnpc-go. DO NOT EDIT.

package yieldstat

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	crop "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/crop"
	math "math"
)

type ResultId uint16

// ResultId_TypeID is the unique identifier for the type ResultId.
const ResultId_TypeID = 0xcfe218c48d227e0d

// Values of ResultId.
const (
	ResultId_primaryYield               ResultId = 0
	ResultId_dryMatter                  ResultId = 1
	ResultId_carbonInAboveGroundBiomass ResultId = 2
	ResultId_sumFertilizer              ResultId = 3
	ResultId_sumIrrigation              ResultId = 4
	ResultId_primaryYieldCU             ResultId = 5
)

// String returns the enum's constant name.
func (c ResultId) String() string {
	switch c {
	case ResultId_primaryYield:
		return "primaryYield"
	case ResultId_dryMatter:
		return "dryMatter"
	case ResultId_carbonInAboveGroundBiomass:
		return "carbonInAboveGroundBiomass"
	case ResultId_sumFertilizer:
		return "sumFertilizer"
	case ResultId_sumIrrigation:
		return "sumIrrigation"
	case ResultId_primaryYieldCU:
		return "primaryYieldCU"

	default:
		return ""
	}
}

// ResultIdFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultIdFromString(c string) ResultId {
	switch c {
	case "primaryYield":
		return ResultId_primaryYield
	case "dryMatter":
		return ResultId_dryMatter
	case "carbonInAboveGroundBiomass":
		return ResultId_carbonInAboveGroundBiomass
	case "sumFertilizer":
		return ResultId_sumFertilizer
	case "sumIrrigation":
		return ResultId_sumIrrigation
	case "primaryYieldCU":
		return ResultId_primaryYieldCU

	default:
		return 0
	}
}

type ResultId_List struct{ capnp.List }

func NewResultId_List(s *capnp.Segment, sz int32) (ResultId_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ResultId_List{l.List}, err
}

func (l ResultId_List) At(i int) ResultId {
	ul := capnp.UInt16List{List: l.List}
	return ResultId(ul.At(i))
}

func (l ResultId_List) Set(i int, v ResultId) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type RestInput struct{ capnp.Struct }

// RestInput_TypeID is the unique identifier for the type RestInput.
const RestInput_TypeID = 0xa47f8d65869200af

func NewRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput{st}, err
}

func NewRootRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput{st}, err
}

func ReadRootRestInput(msg *capnp.Message) (RestInput, error) {
	root, err := msg.Root()
	return RestInput{root.Struct()}, err
}

func (s RestInput) String() string {
	str, _ := text.Marshal(0xa47f8d65869200af, s.Struct)
	return str
}

func (s RestInput) UseDevTrend() bool {
	return s.Struct.Bit(0)
}

func (s RestInput) SetUseDevTrend(v bool) {
	s.Struct.SetBit(0, v)
}

func (s RestInput) UseCO2Increase() bool {
	return !s.Struct.Bit(1)
}

func (s RestInput) SetUseCO2Increase(v bool) {
	s.Struct.SetBit(1, !v)
}

func (s RestInput) Dgm() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s RestInput) SetDgm(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s RestInput) Hft() uint8 {
	return s.Struct.Uint8(1)
}

func (s RestInput) SetHft(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s RestInput) Nft() uint8 {
	return s.Struct.Uint8(2)
}

func (s RestInput) SetNft(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s RestInput) Sft() uint8 {
	return s.Struct.Uint8(3)
}

func (s RestInput) SetSft(v uint8) {
	s.Struct.SetUint8(3, v)
}

func (s RestInput) Slope() uint8 {
	return s.Struct.Uint8(4)
}

func (s RestInput) SetSlope(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s RestInput) Steino() uint8 {
	return s.Struct.Uint8(5)
}

func (s RestInput) SetSteino(v uint8) {
	s.Struct.SetUint8(5, v)
}

func (s RestInput) Az() uint8 {
	return s.Struct.Uint8(6)
}

func (s RestInput) SetAz(v uint8) {
	s.Struct.SetUint8(6, v)
}

func (s RestInput) Klz() uint8 {
	return s.Struct.Uint8(7)
}

func (s RestInput) SetKlz(v uint8) {
	s.Struct.SetUint8(7, v)
}

func (s RestInput) Stt() uint8 {
	return s.Struct.Uint8(16)
}

func (s RestInput) SetStt(v uint8) {
	s.Struct.SetUint8(16, v)
}

func (s RestInput) GermanFederalStates() int8 {
	return int8(s.Struct.Uint8(17) ^ 255)
}

func (s RestInput) SetGermanFederalStates(v int8) {
	s.Struct.SetUint8(17, uint8(v)^255)
}

func (s RestInput) GetDryYearWaterNeed() bool {
	return s.Struct.Bit(2)
}

func (s RestInput) SetGetDryYearWaterNeed(v bool) {
	s.Struct.SetBit(2, v)
}

// RestInput_List is a list of RestInput.
type RestInput_List struct{ capnp.List }

// NewRestInput creates a new list of RestInput.
func NewRestInput_List(s *capnp.Segment, sz int32) (RestInput_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return RestInput_List{l}, err
}

func (s RestInput_List) At(i int) RestInput { return RestInput{s.List.Struct(i)} }

func (s RestInput_List) Set(i int, v RestInput) error { return s.List.SetStruct(i, v.Struct) }

func (s RestInput_List) String() string {
	str, _ := text.MarshalList(0xa47f8d65869200af, s.List)
	return str
}

// RestInput_Future is a wrapper for a RestInput promised by a client call.
type RestInput_Future struct{ *capnp.Future }

func (p RestInput_Future) Struct() (RestInput, error) {
	s, err := p.Future.Struct()
	return RestInput{s}, err
}

type Result struct{ capnp.Struct }

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x8db55634a0e7d054

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Result{st}, err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Result{st}, err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result{root.Struct()}, err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x8db55634a0e7d054, s.Struct)
	return str
}

func (s Result) Cultivar() crop.Cultivar {
	return crop.Cultivar(s.Struct.Uint16(0))
}

func (s Result) SetCultivar(v crop.Cultivar) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Result) IsNoData() bool {
	return s.Struct.Bit(16)
}

func (s Result) SetIsNoData(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Result) Values() (Result_ResultToValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return Result_ResultToValue_List{List: p.List()}, err
}

func (s Result) HasValues() bool {
	return s.Struct.HasPtr(0)
}

func (s Result) SetValues(v Result_ResultToValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Result_ResultToValue_List, preferring placement in s's segment.
func (s Result) NewValues(n int32) (Result_ResultToValue_List, error) {
	l, err := NewResult_ResultToValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Result_ResultToValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Result_List is a list of Result.
type Result_List struct{ capnp.List }

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Result_List{l}, err
}

func (s Result_List) At(i int) Result { return Result{s.List.Struct(i)} }

func (s Result_List) Set(i int, v Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Result_List) String() string {
	str, _ := text.MarshalList(0x8db55634a0e7d054, s.List)
	return str
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (p Result_Future) Struct() (Result, error) {
	s, err := p.Future.Struct()
	return Result{s}, err
}

type Result_ResultToValue struct{ capnp.Struct }

// Result_ResultToValue_TypeID is the unique identifier for the type Result_ResultToValue.
const Result_ResultToValue_TypeID = 0x8d365bd4f0136fc0

func NewResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue{st}, err
}

func NewRootResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue{st}, err
}

func ReadRootResult_ResultToValue(msg *capnp.Message) (Result_ResultToValue, error) {
	root, err := msg.Root()
	return Result_ResultToValue{root.Struct()}, err
}

func (s Result_ResultToValue) String() string {
	str, _ := text.Marshal(0x8d365bd4f0136fc0, s.Struct)
	return str
}

func (s Result_ResultToValue) Id() ResultId {
	return ResultId(s.Struct.Uint16(0))
}

func (s Result_ResultToValue) SetId(v ResultId) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Result_ResultToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Result_ResultToValue) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Result_ResultToValue_List is a list of Result_ResultToValue.
type Result_ResultToValue_List struct{ capnp.List }

// NewResult_ResultToValue creates a new list of Result_ResultToValue.
func NewResult_ResultToValue_List(s *capnp.Segment, sz int32) (Result_ResultToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Result_ResultToValue_List{l}, err
}

func (s Result_ResultToValue_List) At(i int) Result_ResultToValue {
	return Result_ResultToValue{s.List.Struct(i)}
}

func (s Result_ResultToValue_List) Set(i int, v Result_ResultToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Result_ResultToValue_List) String() string {
	str, _ := text.MarshalList(0x8d365bd4f0136fc0, s.List)
	return str
}

// Result_ResultToValue_Future is a wrapper for a Result_ResultToValue promised by a client call.
type Result_ResultToValue_Future struct{ *capnp.Future }

func (p Result_ResultToValue_Future) Struct() (Result_ResultToValue, error) {
	s, err := p.Future.Struct()
	return Result_ResultToValue{s}, err
}

type Output struct{ capnp.Struct }

// Output_TypeID is the unique identifier for the type Output.
const Output_TypeID = 0x932a681f81b4be19

func NewOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output{st}, err
}

func NewRootOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output{st}, err
}

func ReadRootOutput(msg *capnp.Message) (Output, error) {
	root, err := msg.Root()
	return Output{root.Struct()}, err
}

func (s Output) String() string {
	str, _ := text.Marshal(0x932a681f81b4be19, s.Struct)
	return str
}

func (s Output) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Output) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Output) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Output) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Output) RunFailed() bool {
	return s.Struct.Bit(0)
}

func (s Output) SetRunFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Output) Reason() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Output) HasReason() bool {
	return s.Struct.HasPtr(1)
}

func (s Output) ReasonBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Output) SetReason(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Output) Results() (Output_YearToResult_List, error) {
	p, err := s.Struct.Ptr(2)
	return Output_YearToResult_List{List: p.List()}, err
}

func (s Output) HasResults() bool {
	return s.Struct.HasPtr(2)
}

func (s Output) SetResults(v Output_YearToResult_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewResults sets the results field to a newly
// allocated Output_YearToResult_List, preferring placement in s's segment.
func (s Output) NewResults(n int32) (Output_YearToResult_List, error) {
	l, err := NewOutput_YearToResult_List(s.Struct.Segment(), n)
	if err != nil {
		return Output_YearToResult_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Output_List is a list of Output.
type Output_List struct{ capnp.List }

// NewOutput creates a new list of Output.
func NewOutput_List(s *capnp.Segment, sz int32) (Output_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Output_List{l}, err
}

func (s Output_List) At(i int) Output { return Output{s.List.Struct(i)} }

func (s Output_List) Set(i int, v Output) error { return s.List.SetStruct(i, v.Struct) }

func (s Output_List) String() string {
	str, _ := text.MarshalList(0x932a681f81b4be19, s.List)
	return str
}

// Output_Future is a wrapper for a Output promised by a client call.
type Output_Future struct{ *capnp.Future }

func (p Output_Future) Struct() (Output, error) {
	s, err := p.Future.Struct()
	return Output{s}, err
}

type Output_YearToResult struct{ capnp.Struct }

// Output_YearToResult_TypeID is the unique identifier for the type Output_YearToResult.
const Output_YearToResult_TypeID = 0xa008c533888c3a5e

func NewOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult{st}, err
}

func NewRootOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult{st}, err
}

func ReadRootOutput_YearToResult(msg *capnp.Message) (Output_YearToResult, error) {
	root, err := msg.Root()
	return Output_YearToResult{root.Struct()}, err
}

func (s Output_YearToResult) String() string {
	str, _ := text.Marshal(0xa008c533888c3a5e, s.Struct)
	return str
}

func (s Output_YearToResult) Year() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Output_YearToResult) SetYear(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Output_YearToResult) Result() (Result, error) {
	p, err := s.Struct.Ptr(0)
	return Result{Struct: p.Struct()}, err
}

func (s Output_YearToResult) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s Output_YearToResult) SetResult(v Result) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s Output_YearToResult) NewResult() (Result, error) {
	ss, err := NewResult(s.Struct.Segment())
	if err != nil {
		return Result{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Output_YearToResult_List is a list of Output_YearToResult.
type Output_YearToResult_List struct{ capnp.List }

// NewOutput_YearToResult creates a new list of Output_YearToResult.
func NewOutput_YearToResult_List(s *capnp.Segment, sz int32) (Output_YearToResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Output_YearToResult_List{l}, err
}

func (s Output_YearToResult_List) At(i int) Output_YearToResult {
	return Output_YearToResult{s.List.Struct(i)}
}

func (s Output_YearToResult_List) Set(i int, v Output_YearToResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Output_YearToResult_List) String() string {
	str, _ := text.MarshalList(0xa008c533888c3a5e, s.List)
	return str
}

// Output_YearToResult_Future is a wrapper for a Output_YearToResult promised by a client call.
type Output_YearToResult_Future struct{ *capnp.Future }

func (p Output_YearToResult_Future) Struct() (Output_YearToResult, error) {
	s, err := p.Future.Struct()
	return Output_YearToResult{s}, err
}

func (p Output_YearToResult_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

const schema_b80c8fd14e523f9b = "x\xda|\x93Ah\x1d\xc5\x1f\xc7\x7f\xdf\x99}y\xaf" +
	"M\xfaO\x96]H\xff=\xf8\xa0x\xd0\x82\xb56U" +
	"l\xa0\xc4\xb6\xb1\x12\xb1m6/\xadF\xab0\xc9\x8e" +
	"}[\xf7\xed\xbe\xce\xce\xa6M\xa8\xb6\x85V\"4h" +
	"\xb5\"\"\x85 \x1e\x85z\xa8\xe0E\xf1\xa0\x07O*" +
	"(\x82 B/\xbdj\xefe\xe5\xb7\xf1\xbd\x0d\x11=" +
	"\xed\xecg~\xf3\x9b\xefw\xe6;{\xda\xe2)\xf1X" +
	"\xed\x17\x87(x\xb26P|\x9dz\x7f\xfc\xf4\xd2\x13" +
	"\xab\x14<\x00Q\xcc\xfepwm\xdf\xc9\xcfW\xc9\xa9" +
	"\x13\x8d\x05b\x1e\x9e\x16u\"O\x89s\x84j:\x18" +
	"\x05\x8a\x8f&f\x8e\xfd\xf8\xf6\xd0\x17T\x03\x97|)" +
	"\xeey\xdf\x89Q\"\xefgq\x8bP\xfc\xff\xab\xdb\x97" +
	"\x9b\xed]\xefm.\x96\\|U\xde\xf3\xaeK.\xbe" +
	")\xef\x12\x8aW\xc6\xaf\xad\x8c}\xdbXc\x19\x1b\x96" +
	"\x96\x9d\xc7\xae:/\xc2\xfb\x90%y\xef;\xe7\x08\xf7" +
	"o\xbd\xfb\xa6^\xbd\xf8I0\x0aY5.%\xff\xe9" +
	"l\x85\x87\x1a\x0f\xef;\xbf\x0bB\xb1\xed\x8d\x9d\xab\xdf" +
	"l\xbf\xf3=\xb9\xa3\xa2*&\x8c\xd5\x1a\x02\x9e\xdb\xe0" +
	"\xae\xdb\x1a\x1f\xd0\\\xd1IC\x1dg\x8f.9\x91\x8e" +
	"\xc3\xcc*\xbb{Au\x93\xee\xf8\x8c\xce\xf2\xd8\xee^" +
	"\xff\xcc\xa6'U=\xce\xf54\x104\xa4C\xe4\x80\xc8" +
	"}x\x07Q\xf0\xa0D\xb0G\xc0\x05|0|d/" +
	"Q\xf0\x90D\xb0O@F!\x86+-\x04\x0c\x13\x9a" +
	"\x8b*\xce5\x06I`\x90\xd0\xdf_l\xde\xbfY\xee" +
	"\x1c8@u].L\xd1SD\xcd\x93\xdc(\x18\xea" +
	"\xeby\xfaY\xa2`R\"\x98f=#>\x00\xb8G" +
	"\x19>'\x11\xbc \x00\xe1C\x10\xb9'\xc6\x89\x82i" +
	"\x89 \x16(\x16\xf2\xd8F\x8b\xca\x10\x11\x86\x8b\xdbw" +
	"\xc2\xc6\xccg\x97\x7f\xfb[l\x11e\xc7\xd2Ie\x15" +
	"\xcf\x82\x04@\x98(\x0dd\xf8\x1faZ\x02#\x95<" +
	"\x02\xc3\x7f\xb5t\xbc\x99\xdbn\xben\xa9\x7f\xf5.\xce" +
	"\x14sZ\x99\xd9tF\xd3piy\xa4\xefH\xf1\x09" +
	"\x9f\x92\x08\xda\x02\xe5\x01\x03\xae\x9e!\x0aB\x89\xa0+" +
	"\xe0\x0a\xac;\xea\xb0\xa3\xb6D`\x05\\)|H\"" +
	"\xf7\xec!\xa2 \x96\x08V\xd6\xafb\x88\x04\x86\x08\x85" +
	"\xc9\x93#*\x8a5!\xec{2Zei\xd2+\xb9" +
	"h\xcaC\xde\xe0\xb1\xafw\x93\xc7\xcd\xb19^Z\xdc" +
	"\xdds\x94\xe52\xb6\x9bR\xb3\xabJM?4\xe3U" +
	"h\x86\x97\xb42\x90$ K],\x04#\xd5+$" +
	"`d\x83\x00\xf9\xcf\xdc\xda\xa9\xa4\x9b[\"\xdew\xdf" +
	"\xfa\xbe\x80\xf72\xe6\x89Z\xa7 \xd1j\xa3\x17X\xc0" +
	"\xd3X&j\x85\xcc\xbb\xe8\x1d)\xe0u\xb0\x93\xa8\xd5" +
	"fn\x99K\xf8\x90\x80w\xb6\xe41\xf3\xf3\xcc\x1d\xe1" +
	"\xc3\x01\xbc\xbc\xe4]\xe6\x17\x98\xd7\xa4\x8f\x1a\xe0-\x95" +
	"\xdc2\xbf\xc4|\xc0\xf11\x00x\xafc/Q\xeb<" +
	"\xf3+\xcc\xeb5\x1fu\xc0\xbb\x8cq\xa2\xd6\x05\xe6+" +
	"\xcc\x1b\x03>\x1a\x80w\x15;\x88Z\x97\x98_c\xbe" +
	"\xa5\xeec\x0b\xe0\xbdU\xf6\xbf\xc2\xfc\x1d\xe6[G|" +
	"l\x05\xbc\xd5\x92\xaf0\xbf\xc1|\xd0\xf51\x08x\xd7" +
	"\xf11Q\xeb\x06\xf35\xe6C\xc2\xc7\x10\xe0\xdd,\xf9" +
	"\x1a\xf3O!P\xe4\x99\x9e\xd4\x8b\xb3\x86\xea:\xe9\xe7" +
	"\x84\xe9\xe1\xe3{\xa7\x12\x9aX\xe0\xc8h\x9e\xa8\xf1L" +
	"=<\xdd\xe9=\xeaz\xfbU\x8b\x01\x12\x18 \xd4\x93" +
	"\x0d\xe3\xac\x1a7\xb38\xed\xea\xde\xdfDfu\x94\xa4" +
	"\xbd_\xa9\x96\xfbk^\x8b\xabqf\xfb\xeb\x8b\xd3\xda" +
	"tTrD#\xd4F\xc5-\xab\xeaVg\x10$j" +
	"\xa2(\xa7\xed\xa4Y\x9a\xd3P\xe6ye\xb59V\xd7" +
	"\xba\xb2\xf1\x1f\xe9\xc9c;\x15\x96\xd9\xd9^>\xad\x83" +
	"g8r\xee\x81\x19\"\x08w\xff\xafD\x90\xee\x01C" +
	"\x04\xc7\xdd\xcf\x9f\x9a\xfb\xf82Q\xd15QG\x99\xa5" +
	"9\x1a\xe6\x9eEh\x96\x8e*k5\xc1\x14\x0b\xca\xcc" +
	"\xa7\xc9T\"\x0e\xce\xa7\x8b\xfa\x19\x93\xe6Ix(J" +
	";JfY\x91\xe5\x9d#\xda\xd8\x88\x9aq\xb4\xac\x0d" +
	"\xffO\x19\x13\x9d\xa6\xa6\xb2Q\x9aT}'\xb8\xef\xe1" +
	"\x13\x7f\x05\x00\x00\xff\xff\x99\xa9\x91\x94"

func init() {
	schemas.Register(schema_b80c8fd14e523f9b,
		0x8d365bd4f0136fc0,
		0x8db55634a0e7d054,
		0x932a681f81b4be19,
		0xa008c533888c3a5e,
		0xa47f8d65869200af,
		0xcfe218c48d227e0d)
}
