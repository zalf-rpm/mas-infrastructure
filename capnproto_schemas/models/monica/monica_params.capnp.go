// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	climate "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/management"
	math "math"
)

type CropSpec struct{ capnp.Struct }

// CropSpec_TypeID is the unique identifier for the type CropSpec.
const CropSpec_TypeID = 0xa74f5574681f9d55

func NewCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec{st}, err
}

func NewRootCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec{st}, err
}

func ReadRootCropSpec(msg *capnp.Message) (CropSpec, error) {
	root, err := msg.Root()
	return CropSpec{root.Struct()}, err
}

func (s CropSpec) String() string {
	str, _ := text.Marshal(0xa74f5574681f9d55, s.Struct)
	return str
}

func (s CropSpec) CropParams() (CropParameters, error) {
	p, err := s.Struct.Ptr(0)
	return CropParameters{Struct: p.Struct()}, err
}

func (s CropSpec) HasCropParams() bool {
	return s.Struct.HasPtr(0)
}

func (s CropSpec) SetCropParams(v CropParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropSpec) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(s.Struct.Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CropSpec) ResidueParams() (CropResidueParameters, error) {
	p, err := s.Struct.Ptr(1)
	return CropResidueParameters{Struct: p.Struct()}, err
}

func (s CropSpec) HasResidueParams() bool {
	return s.Struct.HasPtr(1)
}

func (s CropSpec) SetResidueParams(v CropResidueParameters) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropSpec) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(s.Struct.Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// CropSpec_List is a list of CropSpec.
type CropSpec_List struct{ capnp.List }

// NewCropSpec creates a new list of CropSpec.
func NewCropSpec_List(s *capnp.Segment, sz int32) (CropSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CropSpec_List{l}, err
}

func (s CropSpec_List) At(i int) CropSpec { return CropSpec{s.List.Struct(i)} }

func (s CropSpec_List) Set(i int, v CropSpec) error { return s.List.SetStruct(i, v.Struct) }

func (s CropSpec_List) String() string {
	str, _ := text.MarshalList(0xa74f5574681f9d55, s.List)
	return str
}

// CropSpec_Future is a wrapper for a CropSpec promised by a client call.
type CropSpec_Future struct{ *capnp.Future }

func (p CropSpec_Future) Struct() (CropSpec, error) {
	s, err := p.Future.Struct()
	return CropSpec{s}, err
}

func (p CropSpec_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(0, nil)}
}

func (p CropSpec_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(1, nil)}
}

type CropParameters struct{ capnp.Struct }

// CropParameters_TypeID is the unique identifier for the type CropParameters.
const CropParameters_TypeID = 0x8ac5cfb21988c168

func NewCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters{st}, err
}

func NewRootCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters{st}, err
}

func ReadRootCropParameters(msg *capnp.Message) (CropParameters, error) {
	root, err := msg.Root()
	return CropParameters{root.Struct()}, err
}

func (s CropParameters) String() string {
	str, _ := text.Marshal(0x8ac5cfb21988c168, s.Struct)
	return str
}

func (s CropParameters) SpeciesParams() (SpeciesParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SpeciesParameters{Struct: p.Struct()}, err
}

func (s CropParameters) HasSpeciesParams() bool {
	return s.Struct.HasPtr(0)
}

func (s CropParameters) SetSpeciesParams(v SpeciesParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropParameters) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(s.Struct.Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CropParameters) CultivarParams() (CultivarParameters, error) {
	p, err := s.Struct.Ptr(1)
	return CultivarParameters{Struct: p.Struct()}, err
}

func (s CropParameters) HasCultivarParams() bool {
	return s.Struct.HasPtr(1)
}

func (s CropParameters) SetCultivarParams(v CultivarParameters) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropParameters) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(s.Struct.Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// CropParameters_List is a list of CropParameters.
type CropParameters_List struct{ capnp.List }

// NewCropParameters creates a new list of CropParameters.
func NewCropParameters_List(s *capnp.Segment, sz int32) (CropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CropParameters_List{l}, err
}

func (s CropParameters_List) At(i int) CropParameters { return CropParameters{s.List.Struct(i)} }

func (s CropParameters_List) Set(i int, v CropParameters) error { return s.List.SetStruct(i, v.Struct) }

func (s CropParameters_List) String() string {
	str, _ := text.MarshalList(0x8ac5cfb21988c168, s.List)
	return str
}

// CropParameters_Future is a wrapper for a CropParameters promised by a client call.
type CropParameters_Future struct{ *capnp.Future }

func (p CropParameters_Future) Struct() (CropParameters, error) {
	s, err := p.Future.Struct()
	return CropParameters{s}, err
}

func (p CropParameters_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(0, nil)}
}

func (p CropParameters_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(1, nil)}
}

type SpeciesParameters struct{ capnp.Struct }

// SpeciesParameters_TypeID is the unique identifier for the type SpeciesParameters.
const SpeciesParameters_TypeID = 0xd2d587c796186e8b

func NewSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters{st}, err
}

func NewRootSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters{st}, err
}

func ReadRootSpeciesParameters(msg *capnp.Message) (SpeciesParameters, error) {
	root, err := msg.Root()
	return SpeciesParameters{root.Struct()}, err
}

func (s SpeciesParameters) String() string {
	str, _ := text.Marshal(0xd2d587c796186e8b, s.Struct)
	return str
}

func (s SpeciesParameters) SpeciesId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SpeciesParameters) HasSpeciesId() bool {
	return s.Struct.HasPtr(0)
}

func (s SpeciesParameters) SpeciesIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SpeciesParameters) SetSpeciesId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SpeciesParameters) CarboxylationPathway() uint8 {
	return s.Struct.Uint8(0)
}

func (s SpeciesParameters) SetCarboxylationPathway(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s SpeciesParameters) DefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SpeciesParameters) SetDefaultRadiationUseEfficiency(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SpeciesParameters) PartBiologicalNFixation() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SpeciesParameters) SetPartBiologicalNFixation(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SpeciesParameters) InitialKcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SpeciesParameters) SetInitialKcFactor(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SpeciesParameters) LuxuryNCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SpeciesParameters) SetLuxuryNCoeff(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SpeciesParameters) MaxCropDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SpeciesParameters) SetMaxCropDiameter(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SpeciesParameters) SetStageAtMaxHeight(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SpeciesParameters) SetStageAtMaxDiameter(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SpeciesParameters) SetMinimumNConcentration(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SpeciesParameters) SetMinimumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SpeciesParameters) OptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SpeciesParameters) SetOptimumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SpeciesParameters) MaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SpeciesParameters) SetMaximumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SpeciesParameters) SetNConcentrationAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationB0() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SpeciesParameters) SetNConcentrationB0(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationPN() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SpeciesParameters) SetNConcentrationPN(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s SpeciesParameters) SetNConcentrationRoot(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s SpeciesParameters) DevelopmentAccelerationByNitrogenStress() uint16 {
	return s.Struct.Uint16(2)
}

func (s SpeciesParameters) SetDevelopmentAccelerationByNitrogenStress(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s SpeciesParameters) FieldConditionModifier() float64 {
	return math.Float64frombits(s.Struct.Uint64(128) ^ 0x3ff0000000000000)
}

func (s SpeciesParameters) SetFieldConditionModifier(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SpeciesParameters) AssimilateReallocation() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s SpeciesParameters) SetAssimilateReallocation(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s SpeciesParameters) BaseTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasBaseTemperature() bool {
	return s.Struct.HasPtr(1)
}

func (s SpeciesParameters) SetBaseTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewBaseTemperature sets the baseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) OrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasOrganMaintenanceRespiration() bool {
	return s.Struct.HasPtr(2)
}

func (s SpeciesParameters) SetOrganMaintenanceRespiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewOrganMaintenanceRespiration sets the organMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) OrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasOrganGrowthRespiration() bool {
	return s.Struct.HasPtr(3)
}

func (s SpeciesParameters) SetOrganGrowthRespiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOrganGrowthRespiration sets the organGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) StageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasStageMaxRootNConcentration() bool {
	return s.Struct.HasPtr(4)
}

func (s SpeciesParameters) SetStageMaxRootNConcentration(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewStageMaxRootNConcentration sets the stageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) InitialOrganBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasInitialOrganBiomass() bool {
	return s.Struct.HasPtr(5)
}

func (s SpeciesParameters) SetInitialOrganBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewInitialOrganBiomass sets the initialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) CriticalOxygenContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasCriticalOxygenContent() bool {
	return s.Struct.HasPtr(6)
}

func (s SpeciesParameters) SetCriticalOxygenContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewCriticalOxygenContent sets the criticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) StageMobilFromStorageCoeff() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SpeciesParameters) HasStageMobilFromStorageCoeff() bool {
	return s.Struct.HasPtr(7)
}

func (s SpeciesParameters) SetStageMobilFromStorageCoeff(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewStageMobilFromStorageCoeff sets the stageMobilFromStorageCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMobilFromStorageCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) AbovegroundOrgan() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.BitList{List: p.List()}, err
}

func (s SpeciesParameters) HasAbovegroundOrgan() bool {
	return s.Struct.HasPtr(8)
}

func (s SpeciesParameters) SetAbovegroundOrgan(v capnp.BitList) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewAbovegroundOrgan sets the abovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) StorageOrgan() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.BitList{List: p.List()}, err
}

func (s SpeciesParameters) HasStorageOrgan() bool {
	return s.Struct.HasPtr(9)
}

func (s SpeciesParameters) SetStorageOrgan(v capnp.BitList) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewStorageOrgan sets the storageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SpeciesParameters) SamplingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s SpeciesParameters) SetSamplingDepth(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s SpeciesParameters) TargetNSamplingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s SpeciesParameters) SetTargetNSamplingDepth(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s SpeciesParameters) TargetN30() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s SpeciesParameters) SetTargetN30(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s SpeciesParameters) MaxNUptakeParam() float64 {
	return math.Float64frombits(s.Struct.Uint64(168))
}

func (s SpeciesParameters) SetMaxNUptakeParam(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v))
}

func (s SpeciesParameters) RootDistributionParam() float64 {
	return math.Float64frombits(s.Struct.Uint64(176))
}

func (s SpeciesParameters) SetRootDistributionParam(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v))
}

func (s SpeciesParameters) PlantDensity() uint16 {
	return s.Struct.Uint16(4)
}

func (s SpeciesParameters) SetPlantDensity(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s SpeciesParameters) RootGrowthLag() float64 {
	return math.Float64frombits(s.Struct.Uint64(184))
}

func (s SpeciesParameters) SetRootGrowthLag(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(s.Struct.Uint64(192))
}

func (s SpeciesParameters) SetMinimumTemperatureRootGrowth(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v))
}

func (s SpeciesParameters) InitialRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(200))
}

func (s SpeciesParameters) SetInitialRootingDepth(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v))
}

func (s SpeciesParameters) RootPenetrationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(208))
}

func (s SpeciesParameters) SetRootPenetrationRate(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v))
}

func (s SpeciesParameters) RootFormFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(216))
}

func (s SpeciesParameters) SetRootFormFactor(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v))
}

func (s SpeciesParameters) SpecificRootLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(224))
}

func (s SpeciesParameters) SetSpecificRootLength(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v))
}

func (s SpeciesParameters) StageAfterCut() uint16 {
	return s.Struct.Uint16(6)
}

func (s SpeciesParameters) SetStageAfterCut(v uint16) {
	s.Struct.SetUint16(6, v)
}

func (s SpeciesParameters) LimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(232))
}

func (s SpeciesParameters) SetLimitingTemperatureHeatStress(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v))
}

func (s SpeciesParameters) CuttingDelayDays() uint16 {
	return s.Struct.Uint16(240)
}

func (s SpeciesParameters) SetCuttingDelayDays(v uint16) {
	s.Struct.SetUint16(240, v)
}

func (s SpeciesParameters) DroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(248))
}

func (s SpeciesParameters) SetDroughtImpactOnFertilityFactor(v float64) {
	s.Struct.SetUint64(248, math.Float64bits(v))
}

func (s SpeciesParameters) EfMono() float64 {
	return math.Float64frombits(s.Struct.Uint64(256) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMono(v float64) {
	s.Struct.SetUint64(256, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfMonos() float64 {
	return math.Float64frombits(s.Struct.Uint64(264) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMonos(v float64) {
	s.Struct.SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfIso() float64 {
	return math.Float64frombits(s.Struct.Uint64(272))
}

func (s SpeciesParameters) SetEfIso(v float64) {
	s.Struct.SetUint64(272, math.Float64bits(v))
}

func (s SpeciesParameters) VcMax25() float64 {
	return math.Float64frombits(s.Struct.Uint64(280))
}

func (s SpeciesParameters) SetVcMax25(v float64) {
	s.Struct.SetUint64(280, math.Float64bits(v))
}

func (s SpeciesParameters) Aekc() float64 {
	return math.Float64frombits(s.Struct.Uint64(288) ^ 0x40f0108000000000)
}

func (s SpeciesParameters) SetAekc(v float64) {
	s.Struct.SetUint64(288, math.Float64bits(v)^0x40f0108000000000)
}

func (s SpeciesParameters) Aeko() float64 {
	return math.Float64frombits(s.Struct.Uint64(296) ^ 0x4095e00000000000)
}

func (s SpeciesParameters) SetAeko(v float64) {
	s.Struct.SetUint64(296, math.Float64bits(v)^0x4095e00000000000)
}

func (s SpeciesParameters) Aevc() float64 {
	return math.Float64frombits(s.Struct.Uint64(304) ^ 0x40f0cc0000000000)
}

func (s SpeciesParameters) SetAevc(v float64) {
	s.Struct.SetUint64(304, math.Float64bits(v)^0x40f0cc0000000000)
}

func (s SpeciesParameters) Kc25() float64 {
	return math.Float64frombits(s.Struct.Uint64(312) ^ 0x407cc00000000000)
}

func (s SpeciesParameters) SetKc25(v float64) {
	s.Struct.SetUint64(312, math.Float64bits(v)^0x407cc00000000000)
}

func (s SpeciesParameters) Ko25() float64 {
	return math.Float64frombits(s.Struct.Uint64(320) ^ 0x4074a00000000000)
}

func (s SpeciesParameters) SetKo25(v float64) {
	s.Struct.SetUint64(320, math.Float64bits(v)^0x4074a00000000000)
}

func (s SpeciesParameters) TransitionStageLeafExp() int16 {
	return int16(s.Struct.Uint16(242) ^ 65535)
}

func (s SpeciesParameters) SetTransitionStageLeafExp(v int16) {
	s.Struct.SetUint16(242, uint16(v)^65535)
}

// SpeciesParameters_List is a list of SpeciesParameters.
type SpeciesParameters_List struct{ capnp.List }

// NewSpeciesParameters creates a new list of SpeciesParameters.
func NewSpeciesParameters_List(s *capnp.Segment, sz int32) (SpeciesParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10}, sz)
	return SpeciesParameters_List{l}, err
}

func (s SpeciesParameters_List) At(i int) SpeciesParameters {
	return SpeciesParameters{s.List.Struct(i)}
}

func (s SpeciesParameters_List) Set(i int, v SpeciesParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SpeciesParameters_List) String() string {
	str, _ := text.MarshalList(0xd2d587c796186e8b, s.List)
	return str
}

// SpeciesParameters_Future is a wrapper for a SpeciesParameters promised by a client call.
type SpeciesParameters_Future struct{ *capnp.Future }

func (p SpeciesParameters_Future) Struct() (SpeciesParameters, error) {
	s, err := p.Future.Struct()
	return SpeciesParameters{s}, err
}

type CultivarParameters struct{ capnp.Struct }

// CultivarParameters_TypeID is the unique identifier for the type CultivarParameters.
const CultivarParameters_TypeID = 0xf206f12e39ab7f9b

func NewCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters{st}, err
}

func NewRootCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters{st}, err
}

func ReadRootCultivarParameters(msg *capnp.Message) (CultivarParameters, error) {
	root, err := msg.Root()
	return CultivarParameters{root.Struct()}, err
}

func (s CultivarParameters) String() string {
	str, _ := text.Marshal(0xf206f12e39ab7f9b, s.Struct)
	return str
}

func (s CultivarParameters) CultivarId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s CultivarParameters) HasCultivarId() bool {
	return s.Struct.HasPtr(0)
}

func (s CultivarParameters) CultivarIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetCultivarId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s CultivarParameters) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CultivarParameters) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s CultivarParameters) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

func (s CultivarParameters) Perennial() bool {
	return s.Struct.Bit(0)
}

func (s CultivarParameters) SetPerennial(v bool) {
	s.Struct.SetBit(0, v)
}

func (s CultivarParameters) MaxAssimilationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s CultivarParameters) SetMaxAssimilationRate(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s CultivarParameters) MaxCropHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s CultivarParameters) SetMaxCropHeight(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s CultivarParameters) ResidueNRatio() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s CultivarParameters) SetResidueNRatio(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s CultivarParameters) Lt50cultivar() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s CultivarParameters) SetLt50cultivar(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP1() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s CultivarParameters) SetCropHeightP1(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP2() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s CultivarParameters) SetCropHeightP2(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s CultivarParameters) CropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s CultivarParameters) SetCropSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s CultivarParameters) AssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.PointerList{List: p.List()}, err
}

func (s CultivarParameters) HasAssimilatePartitioningCoeff() bool {
	return s.Struct.HasPtr(2)
}

func (s CultivarParameters) SetAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewAssimilatePartitioningCoeff sets the assimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) OrganSenescenceRate() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.PointerList{List: p.List()}, err
}

func (s CultivarParameters) HasOrganSenescenceRate() bool {
	return s.Struct.HasPtr(3)
}

func (s CultivarParameters) SetOrganSenescenceRate(v capnp.PointerList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOrganSenescenceRate sets the organSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) BaseDaylength() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasBaseDaylength() bool {
	return s.Struct.HasPtr(4)
}

func (s CultivarParameters) SetBaseDaylength(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewBaseDaylength sets the baseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) OptimumTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasOptimumTemperature() bool {
	return s.Struct.HasPtr(5)
}

func (s CultivarParameters) SetOptimumTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewOptimumTemperature sets the optimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) DaylengthRequirement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasDaylengthRequirement() bool {
	return s.Struct.HasPtr(6)
}

func (s CultivarParameters) SetDaylengthRequirement(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewDaylengthRequirement sets the daylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) DroughtStressThreshold() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasDroughtStressThreshold() bool {
	return s.Struct.HasPtr(7)
}

func (s CultivarParameters) SetDroughtStressThreshold(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewDroughtStressThreshold sets the droughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) SpecificLeafArea() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasSpecificLeafArea() bool {
	return s.Struct.HasPtr(8)
}

func (s CultivarParameters) SetSpecificLeafArea(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewSpecificLeafArea sets the specificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) StageKcFactor() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasStageKcFactor() bool {
	return s.Struct.HasPtr(9)
}

func (s CultivarParameters) SetStageKcFactor(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewStageKcFactor sets the stageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) StageTemperatureSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasStageTemperatureSum() bool {
	return s.Struct.HasPtr(10)
}

func (s CultivarParameters) SetStageTemperatureSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewStageTemperatureSum sets the stageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) VernalisationRequirement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s CultivarParameters) HasVernalisationRequirement() bool {
	return s.Struct.HasPtr(11)
}

func (s CultivarParameters) SetVernalisationRequirement(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewVernalisationRequirement sets the vernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) HeatSumIrrigationStart() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s CultivarParameters) SetHeatSumIrrigationStart(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s CultivarParameters) HeatSumIrrigationEnd() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s CultivarParameters) SetHeatSumIrrigationEnd(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s CultivarParameters) CriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s CultivarParameters) SetCriticalTemperatureHeatStress(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s CultivarParameters) BeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s CultivarParameters) SetBeginSensitivePhaseHeatStress(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s CultivarParameters) EndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s CultivarParameters) SetEndSensitivePhaseHeatStress(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s CultivarParameters) FrostHardening() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s CultivarParameters) SetFrostHardening(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s CultivarParameters) FrostDehardening() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s CultivarParameters) SetFrostDehardening(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s CultivarParameters) LowTemperatureExposure() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s CultivarParameters) SetLowTemperatureExposure(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s CultivarParameters) RespiratoryStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s CultivarParameters) SetRespiratoryStress(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s CultivarParameters) LatestHarvestDoy() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s CultivarParameters) SetLatestHarvestDoy(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

func (s CultivarParameters) OrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(12)
	return YieldComponent_List{List: p.List()}, err
}

func (s CultivarParameters) HasOrganIdsForPrimaryYield() bool {
	return s.Struct.HasPtr(12)
}

func (s CultivarParameters) SetOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewOrganIdsForPrimaryYield sets the organIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) OrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(13)
	return YieldComponent_List{List: p.List()}, err
}

func (s CultivarParameters) HasOrganIdsForSecondaryYield() bool {
	return s.Struct.HasPtr(13)
}

func (s CultivarParameters) SetOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewOrganIdsForSecondaryYield sets the organIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) OrganIdsForCutting() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(14)
	return YieldComponent_List{List: p.List()}, err
}

func (s CultivarParameters) HasOrganIdsForCutting() bool {
	return s.Struct.HasPtr(14)
}

func (s CultivarParameters) SetOrganIdsForCutting(v YieldComponent_List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewOrganIdsForCutting sets the organIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s CultivarParameters) EarlyRefLeafExp() float64 {
	return math.Float64frombits(s.Struct.Uint64(136) ^ 0x4028000000000000)
}

func (s CultivarParameters) SetEarlyRefLeafExp(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v)^0x4028000000000000)
}

func (s CultivarParameters) RefLeafExp() float64 {
	return math.Float64frombits(s.Struct.Uint64(144) ^ 0x4034000000000000)
}

func (s CultivarParameters) SetRefLeafExp(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v)^0x4034000000000000)
}

func (s CultivarParameters) MinTempDevWE() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s CultivarParameters) SetMinTempDevWE(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s CultivarParameters) OptTempDevWE() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s CultivarParameters) SetOptTempDevWE(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s CultivarParameters) MaxTempDevWE() float64 {
	return math.Float64frombits(s.Struct.Uint64(168))
}

func (s CultivarParameters) SetMaxTempDevWE(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v))
}

func (s CultivarParameters) WinterCrop() bool {
	return s.Struct.Bit(1)
}

func (s CultivarParameters) SetWinterCrop(v bool) {
	s.Struct.SetBit(1, v)
}

// CultivarParameters_List is a list of CultivarParameters.
type CultivarParameters_List struct{ capnp.List }

// NewCultivarParameters creates a new list of CultivarParameters.
func NewCultivarParameters_List(s *capnp.Segment, sz int32) (CultivarParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15}, sz)
	return CultivarParameters_List{l}, err
}

func (s CultivarParameters_List) At(i int) CultivarParameters {
	return CultivarParameters{s.List.Struct(i)}
}

func (s CultivarParameters_List) Set(i int, v CultivarParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CultivarParameters_List) String() string {
	str, _ := text.MarshalList(0xf206f12e39ab7f9b, s.List)
	return str
}

// CultivarParameters_Future is a wrapper for a CultivarParameters promised by a client call.
type CultivarParameters_Future struct{ *capnp.Future }

func (p CultivarParameters_Future) Struct() (CultivarParameters, error) {
	s, err := p.Future.Struct()
	return CultivarParameters{s}, err
}

type YieldComponent struct{ capnp.Struct }

// YieldComponent_TypeID is the unique identifier for the type YieldComponent.
const YieldComponent_TypeID = 0xdbfe301c0ddefe4e

func NewYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent{st}, err
}

func NewRootYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent{st}, err
}

func ReadRootYieldComponent(msg *capnp.Message) (YieldComponent, error) {
	root, err := msg.Root()
	return YieldComponent{root.Struct()}, err
}

func (s YieldComponent) String() string {
	str, _ := text.Marshal(0xdbfe301c0ddefe4e, s.Struct)
	return str
}

func (s YieldComponent) OrganId() int64 {
	return int64(s.Struct.Uint64(0) ^ 18446744073709551615)
}

func (s YieldComponent) SetOrganId(v int64) {
	s.Struct.SetUint64(0, uint64(v)^18446744073709551615)
}

func (s YieldComponent) YieldPercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s YieldComponent) SetYieldPercentage(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s YieldComponent) YieldDryMatter() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s YieldComponent) SetYieldDryMatter(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// YieldComponent_List is a list of YieldComponent.
type YieldComponent_List struct{ capnp.List }

// NewYieldComponent creates a new list of YieldComponent.
func NewYieldComponent_List(s *capnp.Segment, sz int32) (YieldComponent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return YieldComponent_List{l}, err
}

func (s YieldComponent_List) At(i int) YieldComponent { return YieldComponent{s.List.Struct(i)} }

func (s YieldComponent_List) Set(i int, v YieldComponent) error { return s.List.SetStruct(i, v.Struct) }

func (s YieldComponent_List) String() string {
	str, _ := text.MarshalList(0xdbfe301c0ddefe4e, s.List)
	return str
}

// YieldComponent_Future is a wrapper for a YieldComponent promised by a client call.
type YieldComponent_Future struct{ *capnp.Future }

func (p YieldComponent_Future) Struct() (YieldComponent, error) {
	s, err := p.Future.Struct()
	return YieldComponent{s}, err
}

type AutomaticHarvestParameters struct{ capnp.Struct }

// AutomaticHarvestParameters_TypeID is the unique identifier for the type AutomaticHarvestParameters.
const AutomaticHarvestParameters_TypeID = 0xc5f724bd00c2f628

func NewAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters{st}, err
}

func NewRootAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters{st}, err
}

func ReadRootAutomaticHarvestParameters(msg *capnp.Message) (AutomaticHarvestParameters, error) {
	root, err := msg.Root()
	return AutomaticHarvestParameters{root.Struct()}, err
}

func (s AutomaticHarvestParameters) String() string {
	str, _ := text.Marshal(0xc5f724bd00c2f628, s.Struct)
	return str
}

func (s AutomaticHarvestParameters) HarvestTime() AutomaticHarvestParameters_HarvestTime {
	return AutomaticHarvestParameters_HarvestTime(s.Struct.Uint16(0) ^ 1)
}

func (s AutomaticHarvestParameters) SetHarvestTime(v AutomaticHarvestParameters_HarvestTime) {
	s.Struct.SetUint16(0, uint16(v)^1)
}

func (s AutomaticHarvestParameters) LatestHarvestDOY() int16 {
	return int16(s.Struct.Uint16(2) ^ 65535)
}

func (s AutomaticHarvestParameters) SetLatestHarvestDOY(v int16) {
	s.Struct.SetUint16(2, uint16(v)^65535)
}

// AutomaticHarvestParameters_List is a list of AutomaticHarvestParameters.
type AutomaticHarvestParameters_List struct{ capnp.List }

// NewAutomaticHarvestParameters creates a new list of AutomaticHarvestParameters.
func NewAutomaticHarvestParameters_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return AutomaticHarvestParameters_List{l}, err
}

func (s AutomaticHarvestParameters_List) At(i int) AutomaticHarvestParameters {
	return AutomaticHarvestParameters{s.List.Struct(i)}
}

func (s AutomaticHarvestParameters_List) Set(i int, v AutomaticHarvestParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AutomaticHarvestParameters_List) String() string {
	str, _ := text.MarshalList(0xc5f724bd00c2f628, s.List)
	return str
}

// AutomaticHarvestParameters_Future is a wrapper for a AutomaticHarvestParameters promised by a client call.
type AutomaticHarvestParameters_Future struct{ *capnp.Future }

func (p AutomaticHarvestParameters_Future) Struct() (AutomaticHarvestParameters, error) {
	s, err := p.Future.Struct()
	return AutomaticHarvestParameters{s}, err
}

type AutomaticHarvestParameters_HarvestTime uint16

// AutomaticHarvestParameters_HarvestTime_TypeID is the unique identifier for the type AutomaticHarvestParameters_HarvestTime.
const AutomaticHarvestParameters_HarvestTime_TypeID = 0x990bdcf2be83b604

// Values of AutomaticHarvestParameters_HarvestTime.
const (
	AutomaticHarvestParameters_HarvestTime_maturity AutomaticHarvestParameters_HarvestTime = 0
	AutomaticHarvestParameters_HarvestTime_unknown  AutomaticHarvestParameters_HarvestTime = 1
)

// String returns the enum's constant name.
func (c AutomaticHarvestParameters_HarvestTime) String() string {
	switch c {
	case AutomaticHarvestParameters_HarvestTime_maturity:
		return "maturity"
	case AutomaticHarvestParameters_HarvestTime_unknown:
		return "unknown"

	default:
		return ""
	}
}

// AutomaticHarvestParameters_HarvestTimeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AutomaticHarvestParameters_HarvestTimeFromString(c string) AutomaticHarvestParameters_HarvestTime {
	switch c {
	case "maturity":
		return AutomaticHarvestParameters_HarvestTime_maturity
	case "unknown":
		return AutomaticHarvestParameters_HarvestTime_unknown

	default:
		return 0
	}
}

type AutomaticHarvestParameters_HarvestTime_List struct{ capnp.List }

func NewAutomaticHarvestParameters_HarvestTime_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_HarvestTime_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return AutomaticHarvestParameters_HarvestTime_List{l.List}, err
}

func (l AutomaticHarvestParameters_HarvestTime_List) At(i int) AutomaticHarvestParameters_HarvestTime {
	ul := capnp.UInt16List{List: l.List}
	return AutomaticHarvestParameters_HarvestTime(ul.At(i))
}

func (l AutomaticHarvestParameters_HarvestTime_List) Set(i int, v AutomaticHarvestParameters_HarvestTime) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type NMinCropParameters struct{ capnp.Struct }

// NMinCropParameters_TypeID is the unique identifier for the type NMinCropParameters.
const NMinCropParameters_TypeID = 0xea9236083718fdc2

func NewNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters{st}, err
}

func NewRootNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters{st}, err
}

func ReadRootNMinCropParameters(msg *capnp.Message) (NMinCropParameters, error) {
	root, err := msg.Root()
	return NMinCropParameters{root.Struct()}, err
}

func (s NMinCropParameters) String() string {
	str, _ := text.Marshal(0xea9236083718fdc2, s.Struct)
	return str
}

func (s NMinCropParameters) SamplingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s NMinCropParameters) SetSamplingDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s NMinCropParameters) SetNTarget(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget30() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s NMinCropParameters) SetNTarget30(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// NMinCropParameters_List is a list of NMinCropParameters.
type NMinCropParameters_List struct{ capnp.List }

// NewNMinCropParameters creates a new list of NMinCropParameters.
func NewNMinCropParameters_List(s *capnp.Segment, sz int32) (NMinCropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return NMinCropParameters_List{l}, err
}

func (s NMinCropParameters_List) At(i int) NMinCropParameters {
	return NMinCropParameters{s.List.Struct(i)}
}

func (s NMinCropParameters_List) Set(i int, v NMinCropParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NMinCropParameters_List) String() string {
	str, _ := text.MarshalList(0xea9236083718fdc2, s.List)
	return str
}

// NMinCropParameters_Future is a wrapper for a NMinCropParameters promised by a client call.
type NMinCropParameters_Future struct{ *capnp.Future }

func (p NMinCropParameters_Future) Struct() (NMinCropParameters, error) {
	s, err := p.Future.Struct()
	return NMinCropParameters{s}, err
}

type NMinApplicationParameters struct{ capnp.Struct }

// NMinApplicationParameters_TypeID is the unique identifier for the type NMinApplicationParameters.
const NMinApplicationParameters_TypeID = 0xde7576c640b5ad18

func NewNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters{st}, err
}

func NewRootNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters{st}, err
}

func ReadRootNMinApplicationParameters(msg *capnp.Message) (NMinApplicationParameters, error) {
	root, err := msg.Root()
	return NMinApplicationParameters{root.Struct()}, err
}

func (s NMinApplicationParameters) String() string {
	str, _ := text.Marshal(0xde7576c640b5ad18, s.Struct)
	return str
}

func (s NMinApplicationParameters) Min() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s NMinApplicationParameters) SetMin(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s NMinApplicationParameters) Max() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s NMinApplicationParameters) SetMax(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s NMinApplicationParameters) DelayInDays() uint16 {
	return s.Struct.Uint16(16)
}

func (s NMinApplicationParameters) SetDelayInDays(v uint16) {
	s.Struct.SetUint16(16, v)
}

// NMinApplicationParameters_List is a list of NMinApplicationParameters.
type NMinApplicationParameters_List struct{ capnp.List }

// NewNMinApplicationParameters creates a new list of NMinApplicationParameters.
func NewNMinApplicationParameters_List(s *capnp.Segment, sz int32) (NMinApplicationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return NMinApplicationParameters_List{l}, err
}

func (s NMinApplicationParameters_List) At(i int) NMinApplicationParameters {
	return NMinApplicationParameters{s.List.Struct(i)}
}

func (s NMinApplicationParameters_List) Set(i int, v NMinApplicationParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s NMinApplicationParameters_List) String() string {
	str, _ := text.MarshalList(0xde7576c640b5ad18, s.List)
	return str
}

// NMinApplicationParameters_Future is a wrapper for a NMinApplicationParameters promised by a client call.
type NMinApplicationParameters_Future struct{ *capnp.Future }

func (p NMinApplicationParameters_Future) Struct() (NMinApplicationParameters, error) {
	s, err := p.Future.Struct()
	return NMinApplicationParameters{s}, err
}

type CropResidueParameters struct{ capnp.Struct }

// CropResidueParameters_TypeID is the unique identifier for the type CropResidueParameters.
const CropResidueParameters_TypeID = 0x8491dc2c2f94f1d1

func NewCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters{st}, err
}

func NewRootCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters{st}, err
}

func ReadRootCropResidueParameters(msg *capnp.Message) (CropResidueParameters, error) {
	root, err := msg.Root()
	return CropResidueParameters{root.Struct()}, err
}

func (s CropResidueParameters) String() string {
	str, _ := text.Marshal(0x8491dc2c2f94f1d1, s.Struct)
	return str
}

func (s CropResidueParameters) Params() (management.Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := s.Struct.Ptr(0)
	return management.Params_OrganicFertilization_OrganicMatterParameters{Struct: p.Struct()}, err
}

func (s CropResidueParameters) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s CropResidueParameters) SetParams(v management.Params_OrganicFertilization_OrganicMatterParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParams sets the params field to a newly
// allocated management.Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s CropResidueParameters) NewParams() (management.Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := management.NewParams_OrganicFertilization_OrganicMatterParameters(s.Struct.Segment())
	if err != nil {
		return management.Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CropResidueParameters) Species() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CropResidueParameters) HasSpecies() bool {
	return s.Struct.HasPtr(1)
}

func (s CropResidueParameters) SpeciesBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetSpecies(v string) error {
	return s.Struct.SetText(1, v)
}

func (s CropResidueParameters) ResidueType() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s CropResidueParameters) HasResidueType() bool {
	return s.Struct.HasPtr(2)
}

func (s CropResidueParameters) ResidueTypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetResidueType(v string) error {
	return s.Struct.SetText(2, v)
}

// CropResidueParameters_List is a list of CropResidueParameters.
type CropResidueParameters_List struct{ capnp.List }

// NewCropResidueParameters creates a new list of CropResidueParameters.
func NewCropResidueParameters_List(s *capnp.Segment, sz int32) (CropResidueParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return CropResidueParameters_List{l}, err
}

func (s CropResidueParameters_List) At(i int) CropResidueParameters {
	return CropResidueParameters{s.List.Struct(i)}
}

func (s CropResidueParameters_List) Set(i int, v CropResidueParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CropResidueParameters_List) String() string {
	str, _ := text.MarshalList(0x8491dc2c2f94f1d1, s.List)
	return str
}

// CropResidueParameters_Future is a wrapper for a CropResidueParameters promised by a client call.
type CropResidueParameters_Future struct{ *capnp.Future }

func (p CropResidueParameters_Future) Struct() (CropResidueParameters, error) {
	s, err := p.Future.Struct()
	return CropResidueParameters{s}, err
}

func (p CropResidueParameters_Future) Params() management.Params_OrganicFertilization_OrganicMatterParameters_Future {
	return management.Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilParameters struct{ capnp.Struct }

// SoilParameters_TypeID is the unique identifier for the type SoilParameters.
const SoilParameters_TypeID = 0xb42137d4b8ba3ef6

func NewSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters{st}, err
}

func NewRootSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters{st}, err
}

func ReadRootSoilParameters(msg *capnp.Message) (SoilParameters, error) {
	root, err := msg.Root()
	return SoilParameters{root.Struct()}, err
}

func (s SoilParameters) String() string {
	str, _ := text.Marshal(0xb42137d4b8ba3ef6, s.Struct)
	return str
}

func (s SoilParameters) SoilSandContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilSandContent(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilClayContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilClayContent(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilpH() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x401b99999999999a)
}

func (s SoilParameters) SetSoilpH(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x401b99999999999a)
}

func (s SoilParameters) SoilStoneContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilParameters) SetSoilStoneContent(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilParameters) Lambda() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetLambda(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) FieldCapacity() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetFieldCapacity(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) Saturation() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSaturation(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) PermanentWiltingPoint() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetPermanentWiltingPoint(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilTexture() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SoilParameters) HasSoilTexture() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilParameters) SoilTextureBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SoilParameters) SetSoilTexture(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SoilParameters) SoilAmmonium() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SetSoilAmmonium(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SoilNitrate() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x3f747ae147ae147b)
}

func (s SoilParameters) SetSoilNitrate(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x3f747ae147ae147b)
}

func (s SoilParameters) SoilCNRatio() float64 {
	return math.Float64frombits(s.Struct.Uint64(80) ^ 0x4024000000000000)
}

func (s SoilParameters) SetSoilCNRatio(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v)^0x4024000000000000)
}

func (s SoilParameters) SoilMoisturePercentFC() float64 {
	return math.Float64frombits(s.Struct.Uint64(88) ^ 0x4059000000000000)
}

func (s SoilParameters) SetSoilMoisturePercentFC(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v)^0x4059000000000000)
}

func (s SoilParameters) SoilRawDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilRawDensity(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilBulkDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(104) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilBulkDensity(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicCarbon() float64 {
	return math.Float64frombits(s.Struct.Uint64(112) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicCarbon(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicMatter() float64 {
	return math.Float64frombits(s.Struct.Uint64(120) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicMatter(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v)^0xbff0000000000000)
}

// SoilParameters_List is a list of SoilParameters.
type SoilParameters_List struct{ capnp.List }

// NewSoilParameters creates a new list of SoilParameters.
func NewSoilParameters_List(s *capnp.Segment, sz int32) (SoilParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1}, sz)
	return SoilParameters_List{l}, err
}

func (s SoilParameters_List) At(i int) SoilParameters { return SoilParameters{s.List.Struct(i)} }

func (s SoilParameters_List) Set(i int, v SoilParameters) error { return s.List.SetStruct(i, v.Struct) }

func (s SoilParameters_List) String() string {
	str, _ := text.MarshalList(0xb42137d4b8ba3ef6, s.List)
	return str
}

// SoilParameters_Future is a wrapper for a SoilParameters promised by a client call.
type SoilParameters_Future struct{ *capnp.Future }

func (p SoilParameters_Future) Struct() (SoilParameters, error) {
	s, err := p.Future.Struct()
	return SoilParameters{s}, err
}

type AutomaticIrrigationParameters struct{ capnp.Struct }

// AutomaticIrrigationParameters_TypeID is the unique identifier for the type AutomaticIrrigationParameters.
const AutomaticIrrigationParameters_TypeID = 0x8890f17a143c6896

func NewAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters{st}, err
}

func NewRootAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters{st}, err
}

func ReadRootAutomaticIrrigationParameters(msg *capnp.Message) (AutomaticIrrigationParameters, error) {
	root, err := msg.Root()
	return AutomaticIrrigationParameters{root.Struct()}, err
}

func (s AutomaticIrrigationParameters) String() string {
	str, _ := text.Marshal(0x8890f17a143c6896, s.Struct)
	return str
}

func (s AutomaticIrrigationParameters) Params() (management.Params_Irrigation_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return management.Params_Irrigation_Parameters{Struct: p.Struct()}, err
}

func (s AutomaticIrrigationParameters) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s AutomaticIrrigationParameters) SetParams(v management.Params_Irrigation_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParams sets the params field to a newly
// allocated management.Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s AutomaticIrrigationParameters) NewParams() (management.Params_Irrigation_Parameters, error) {
	ss, err := management.NewParams_Irrigation_Parameters(s.Struct.Segment())
	if err != nil {
		return management.Params_Irrigation_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AutomaticIrrigationParameters) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x4031000000000000)
}

func (s AutomaticIrrigationParameters) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x4031000000000000)
}

func (s AutomaticIrrigationParameters) Threshold() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3fd6666666666666)
}

func (s AutomaticIrrigationParameters) SetThreshold(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3fd6666666666666)
}

// AutomaticIrrigationParameters_List is a list of AutomaticIrrigationParameters.
type AutomaticIrrigationParameters_List struct{ capnp.List }

// NewAutomaticIrrigationParameters creates a new list of AutomaticIrrigationParameters.
func NewAutomaticIrrigationParameters_List(s *capnp.Segment, sz int32) (AutomaticIrrigationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return AutomaticIrrigationParameters_List{l}, err
}

func (s AutomaticIrrigationParameters_List) At(i int) AutomaticIrrigationParameters {
	return AutomaticIrrigationParameters{s.List.Struct(i)}
}

func (s AutomaticIrrigationParameters_List) Set(i int, v AutomaticIrrigationParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AutomaticIrrigationParameters_List) String() string {
	str, _ := text.MarshalList(0x8890f17a143c6896, s.List)
	return str
}

// AutomaticIrrigationParameters_Future is a wrapper for a AutomaticIrrigationParameters promised by a client call.
type AutomaticIrrigationParameters_Future struct{ *capnp.Future }

func (p AutomaticIrrigationParameters_Future) Struct() (AutomaticIrrigationParameters, error) {
	s, err := p.Future.Struct()
	return AutomaticIrrigationParameters{s}, err
}

func (p AutomaticIrrigationParameters_Future) Params() management.Params_Irrigation_Parameters_Future {
	return management.Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SiteParameters struct{ capnp.Struct }

// SiteParameters_TypeID is the unique identifier for the type SiteParameters.
const SiteParameters_TypeID = 0xb599bbd2f1465f9c

func NewSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters{st}, err
}

func NewRootSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters{st}, err
}

func ReadRootSiteParameters(msg *capnp.Message) (SiteParameters, error) {
	root, err := msg.Root()
	return SiteParameters{root.Struct()}, err
}

func (s SiteParameters) String() string {
	str, _ := text.Marshal(0xb599bbd2f1465f9c, s.Struct)
	return str
}

func (s SiteParameters) Latitude() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x404a400000000000)
}

func (s SiteParameters) SetLatitude(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x404a400000000000)
}

func (s SiteParameters) Slope() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3f847ae147ae147b)
}

func (s SiteParameters) SetSlope(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SiteParameters) HeightNN() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x4049000000000000)
}

func (s SiteParameters) SetHeightNN(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x4049000000000000)
}

func (s SiteParameters) GroundwaterDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x4051800000000000)
}

func (s SiteParameters) SetGroundwaterDepth(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x4051800000000000)
}

func (s SiteParameters) SoilCNRatio() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0x4024000000000000)
}

func (s SiteParameters) SetSoilCNRatio(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0x4024000000000000)
}

func (s SiteParameters) DrainageCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0x3ff0000000000000)
}

func (s SiteParameters) SetDrainageCoeff(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SiteParameters) VqNDeposition() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0x403e000000000000)
}

func (s SiteParameters) SetVqNDeposition(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0x403e000000000000)
}

func (s SiteParameters) MaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x4000000000000000)
}

func (s SiteParameters) SetMaxEffectiveRootingDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x4000000000000000)
}

func (s SiteParameters) ImpenetrableLayerDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0xbff0000000000000)
}

func (s SiteParameters) SetImpenetrableLayerDepth(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0xbff0000000000000)
}

func (s SiteParameters) SoilSpecificHumusBalanceCorrection() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SiteParameters) SetSoilSpecificHumusBalanceCorrection(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SiteParameters) SoilParameters() (SoilParameters_List, error) {
	p, err := s.Struct.Ptr(0)
	return SoilParameters_List{List: p.List()}, err
}

func (s SiteParameters) HasSoilParameters() bool {
	return s.Struct.HasPtr(0)
}

func (s SiteParameters) SetSoilParameters(v SoilParameters_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSoilParameters sets the soilParameters field to a newly
// allocated SoilParameters_List, preferring placement in s's segment.
func (s SiteParameters) NewSoilParameters(n int32) (SoilParameters_List, error) {
	l, err := NewSoilParameters_List(s.Struct.Segment(), n)
	if err != nil {
		return SoilParameters_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SiteParameters_List is a list of SiteParameters.
type SiteParameters_List struct{ capnp.List }

// NewSiteParameters creates a new list of SiteParameters.
func NewSiteParameters_List(s *capnp.Segment, sz int32) (SiteParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return SiteParameters_List{l}, err
}

func (s SiteParameters_List) At(i int) SiteParameters { return SiteParameters{s.List.Struct(i)} }

func (s SiteParameters_List) Set(i int, v SiteParameters) error { return s.List.SetStruct(i, v.Struct) }

func (s SiteParameters_List) String() string {
	str, _ := text.MarshalList(0xb599bbd2f1465f9c, s.List)
	return str
}

// SiteParameters_Future is a wrapper for a SiteParameters promised by a client call.
type SiteParameters_Future struct{ *capnp.Future }

func (p SiteParameters_Future) Struct() (SiteParameters, error) {
	s, err := p.Future.Struct()
	return SiteParameters{s}, err
}

type EnvironmentParameters struct{ capnp.Struct }

// EnvironmentParameters_TypeID is the unique identifier for the type EnvironmentParameters.
const EnvironmentParameters_TypeID = 0xc0ff4a277ca4be0a

func NewEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters{st}, err
}

func NewRootEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters{st}, err
}

func ReadRootEnvironmentParameters(msg *capnp.Message) (EnvironmentParameters, error) {
	root, err := msg.Root()
	return EnvironmentParameters{root.Struct()}, err
}

func (s EnvironmentParameters) String() string {
	str, _ := text.Marshal(0xc0ff4a277ca4be0a, s.Struct)
	return str
}

func (s EnvironmentParameters) Albedo() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) SetAlbedo(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) Rcp() climate.RCP {
	return climate.RCP(s.Struct.Uint16(66))
}

func (s EnvironmentParameters) SetRcp(v climate.RCP) {
	s.Struct.SetUint16(66, uint16(v))
}

func (s EnvironmentParameters) AtmosphericCO2() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s EnvironmentParameters) SetAtmosphericCO2(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericCO2s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return EnvironmentParameters_YearToValue_List{List: p.List()}, err
}

func (s EnvironmentParameters) HasAtmosphericCO2s() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvironmentParameters) SetAtmosphericCO2s(v EnvironmentParameters_YearToValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAtmosphericCO2s sets the atmosphericCO2s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericCO2s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(s.Struct.Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s EnvironmentParameters) AtmosphericO3() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s EnvironmentParameters) SetAtmosphericO3(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericO3s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := s.Struct.Ptr(1)
	return EnvironmentParameters_YearToValue_List{List: p.List()}, err
}

func (s EnvironmentParameters) HasAtmosphericO3s() bool {
	return s.Struct.HasPtr(1)
}

func (s EnvironmentParameters) SetAtmosphericO3s(v EnvironmentParameters_YearToValue_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAtmosphericO3s sets the atmosphericO3s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericO3s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(s.Struct.Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s EnvironmentParameters) WindSpeedHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x4000000000000000)
}

func (s EnvironmentParameters) SetWindSpeedHeight(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x4000000000000000)
}

func (s EnvironmentParameters) LeachingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s EnvironmentParameters) SetLeachingDepth(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s EnvironmentParameters) TimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s EnvironmentParameters) SetTimeStep(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s EnvironmentParameters) MaxGroundwaterDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0x4032000000000000)
}

func (s EnvironmentParameters) SetMaxGroundwaterDepth(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0x4032000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x4034000000000000)
}

func (s EnvironmentParameters) SetMinGroundwaterDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x4034000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepthMonth() uint8 {
	return s.Struct.Uint8(64) ^ 3
}

func (s EnvironmentParameters) SetMinGroundwaterDepthMonth(v uint8) {
	s.Struct.SetUint8(64, v^3)
}

// EnvironmentParameters_List is a list of EnvironmentParameters.
type EnvironmentParameters_List struct{ capnp.List }

// NewEnvironmentParameters creates a new list of EnvironmentParameters.
func NewEnvironmentParameters_List(s *capnp.Segment, sz int32) (EnvironmentParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2}, sz)
	return EnvironmentParameters_List{l}, err
}

func (s EnvironmentParameters_List) At(i int) EnvironmentParameters {
	return EnvironmentParameters{s.List.Struct(i)}
}

func (s EnvironmentParameters_List) Set(i int, v EnvironmentParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvironmentParameters_List) String() string {
	str, _ := text.MarshalList(0xc0ff4a277ca4be0a, s.List)
	return str
}

// EnvironmentParameters_Future is a wrapper for a EnvironmentParameters promised by a client call.
type EnvironmentParameters_Future struct{ *capnp.Future }

func (p EnvironmentParameters_Future) Struct() (EnvironmentParameters, error) {
	s, err := p.Future.Struct()
	return EnvironmentParameters{s}, err
}

type EnvironmentParameters_YearToValue struct{ capnp.Struct }

// EnvironmentParameters_YearToValue_TypeID is the unique identifier for the type EnvironmentParameters_YearToValue.
const EnvironmentParameters_YearToValue_TypeID = 0xe68d439455fd9cce

func NewEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue{st}, err
}

func NewRootEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue{st}, err
}

func ReadRootEnvironmentParameters_YearToValue(msg *capnp.Message) (EnvironmentParameters_YearToValue, error) {
	root, err := msg.Root()
	return EnvironmentParameters_YearToValue{root.Struct()}, err
}

func (s EnvironmentParameters_YearToValue) String() string {
	str, _ := text.Marshal(0xe68d439455fd9cce, s.Struct)
	return str
}

func (s EnvironmentParameters_YearToValue) Year() uint16 {
	return s.Struct.Uint16(0)
}

func (s EnvironmentParameters_YearToValue) SetYear(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s EnvironmentParameters_YearToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s EnvironmentParameters_YearToValue) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// EnvironmentParameters_YearToValue_List is a list of EnvironmentParameters_YearToValue.
type EnvironmentParameters_YearToValue_List struct{ capnp.List }

// NewEnvironmentParameters_YearToValue creates a new list of EnvironmentParameters_YearToValue.
func NewEnvironmentParameters_YearToValue_List(s *capnp.Segment, sz int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return EnvironmentParameters_YearToValue_List{l}, err
}

func (s EnvironmentParameters_YearToValue_List) At(i int) EnvironmentParameters_YearToValue {
	return EnvironmentParameters_YearToValue{s.List.Struct(i)}
}

func (s EnvironmentParameters_YearToValue_List) Set(i int, v EnvironmentParameters_YearToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvironmentParameters_YearToValue_List) String() string {
	str, _ := text.MarshalList(0xe68d439455fd9cce, s.List)
	return str
}

// EnvironmentParameters_YearToValue_Future is a wrapper for a EnvironmentParameters_YearToValue promised by a client call.
type EnvironmentParameters_YearToValue_Future struct{ *capnp.Future }

func (p EnvironmentParameters_YearToValue_Future) Struct() (EnvironmentParameters_YearToValue, error) {
	s, err := p.Future.Struct()
	return EnvironmentParameters_YearToValue{s}, err
}

type MeasuredGroundwaterTableInformation struct{ capnp.Struct }

// MeasuredGroundwaterTableInformation_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation.
const MeasuredGroundwaterTableInformation_TypeID = 0xc1092d6c4c110e29

func NewMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation{st}, err
}

func NewRootMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation{st}, err
}

func ReadRootMeasuredGroundwaterTableInformation(msg *capnp.Message) (MeasuredGroundwaterTableInformation, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation{root.Struct()}, err
}

func (s MeasuredGroundwaterTableInformation) String() string {
	str, _ := text.Marshal(0xc1092d6c4c110e29, s.Struct)
	return str
}

func (s MeasuredGroundwaterTableInformation) GroundwaterInformationAvailable() bool {
	return s.Struct.Bit(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInformationAvailable(v bool) {
	s.Struct.SetBit(0, v)
}

func (s MeasuredGroundwaterTableInformation) GroundwaterInfo() (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return MeasuredGroundwaterTableInformation_DateToValue_List{List: p.List()}, err
}

func (s MeasuredGroundwaterTableInformation) HasGroundwaterInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInfo(v MeasuredGroundwaterTableInformation_DateToValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewGroundwaterInfo sets the groundwaterInfo field to a newly
// allocated MeasuredGroundwaterTableInformation_DateToValue_List, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation) NewGroundwaterInfo(n int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := NewMeasuredGroundwaterTableInformation_DateToValue_List(s.Struct.Segment(), n)
	if err != nil {
		return MeasuredGroundwaterTableInformation_DateToValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// MeasuredGroundwaterTableInformation_List is a list of MeasuredGroundwaterTableInformation.
type MeasuredGroundwaterTableInformation_List struct{ capnp.List }

// NewMeasuredGroundwaterTableInformation creates a new list of MeasuredGroundwaterTableInformation.
func NewMeasuredGroundwaterTableInformation_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MeasuredGroundwaterTableInformation_List{l}, err
}

func (s MeasuredGroundwaterTableInformation_List) At(i int) MeasuredGroundwaterTableInformation {
	return MeasuredGroundwaterTableInformation{s.List.Struct(i)}
}

func (s MeasuredGroundwaterTableInformation_List) Set(i int, v MeasuredGroundwaterTableInformation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MeasuredGroundwaterTableInformation_List) String() string {
	str, _ := text.MarshalList(0xc1092d6c4c110e29, s.List)
	return str
}

// MeasuredGroundwaterTableInformation_Future is a wrapper for a MeasuredGroundwaterTableInformation promised by a client call.
type MeasuredGroundwaterTableInformation_Future struct{ *capnp.Future }

func (p MeasuredGroundwaterTableInformation_Future) Struct() (MeasuredGroundwaterTableInformation, error) {
	s, err := p.Future.Struct()
	return MeasuredGroundwaterTableInformation{s}, err
}

type MeasuredGroundwaterTableInformation_DateToValue struct{ capnp.Struct }

// MeasuredGroundwaterTableInformation_DateToValue_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation_DateToValue.
const MeasuredGroundwaterTableInformation_DateToValue_TypeID = 0x81b8ffeeb01d76f7

func NewMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue{st}, err
}

func NewRootMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue{st}, err
}

func ReadRootMeasuredGroundwaterTableInformation_DateToValue(msg *capnp.Message) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation_DateToValue{root.Struct()}, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) String() string {
	str, _ := text.Marshal(0x81b8ffeeb01d76f7, s.Struct)
	return str
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) HasDate() bool {
	return s.Struct.HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetDate(v common.Date) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation_DateToValue) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetValue(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// MeasuredGroundwaterTableInformation_DateToValue_List is a list of MeasuredGroundwaterTableInformation_DateToValue.
type MeasuredGroundwaterTableInformation_DateToValue_List struct{ capnp.List }

// NewMeasuredGroundwaterTableInformation_DateToValue creates a new list of MeasuredGroundwaterTableInformation_DateToValue.
func NewMeasuredGroundwaterTableInformation_DateToValue_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MeasuredGroundwaterTableInformation_DateToValue_List{l}, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue_List) At(i int) MeasuredGroundwaterTableInformation_DateToValue {
	return MeasuredGroundwaterTableInformation_DateToValue{s.List.Struct(i)}
}

func (s MeasuredGroundwaterTableInformation_DateToValue_List) Set(i int, v MeasuredGroundwaterTableInformation_DateToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MeasuredGroundwaterTableInformation_DateToValue_List) String() string {
	str, _ := text.MarshalList(0x81b8ffeeb01d76f7, s.List)
	return str
}

// MeasuredGroundwaterTableInformation_DateToValue_Future is a wrapper for a MeasuredGroundwaterTableInformation_DateToValue promised by a client call.
type MeasuredGroundwaterTableInformation_DateToValue_Future struct{ *capnp.Future }

func (p MeasuredGroundwaterTableInformation_DateToValue_Future) Struct() (MeasuredGroundwaterTableInformation_DateToValue, error) {
	s, err := p.Future.Struct()
	return MeasuredGroundwaterTableInformation_DateToValue{s}, err
}

func (p MeasuredGroundwaterTableInformation_DateToValue_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type SimulationParameters struct{ capnp.Struct }

// SimulationParameters_TypeID is the unique identifier for the type SimulationParameters.
const SimulationParameters_TypeID = 0xffac0fa5c7156a5d

func NewSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters{st}, err
}

func NewRootSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters{st}, err
}

func ReadRootSimulationParameters(msg *capnp.Message) (SimulationParameters, error) {
	root, err := msg.Root()
	return SimulationParameters{root.Struct()}, err
}

func (s SimulationParameters) String() string {
	str, _ := text.Marshal(0xffac0fa5c7156a5d, s.Struct)
	return str
}

func (s SimulationParameters) StartDate() (common.Date, error) {
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s SimulationParameters) HasStartDate() bool {
	return s.Struct.HasPtr(0)
}

func (s SimulationParameters) SetStartDate(v common.Date) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewStartDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SimulationParameters) EndDate() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s SimulationParameters) HasEndDate() bool {
	return s.Struct.HasPtr(1)
}

func (s SimulationParameters) SetEndDate(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewEndDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SimulationParameters) NitrogenResponseOn() bool {
	return !s.Struct.Bit(0)
}

func (s SimulationParameters) SetNitrogenResponseOn(v bool) {
	s.Struct.SetBit(0, !v)
}

func (s SimulationParameters) WaterDeficitResponseOn() bool {
	return !s.Struct.Bit(1)
}

func (s SimulationParameters) SetWaterDeficitResponseOn(v bool) {
	s.Struct.SetBit(1, !v)
}

func (s SimulationParameters) EmergenceFloodingControlOn() bool {
	return !s.Struct.Bit(2)
}

func (s SimulationParameters) SetEmergenceFloodingControlOn(v bool) {
	s.Struct.SetBit(2, !v)
}

func (s SimulationParameters) EmergenceMoistureControlOn() bool {
	return !s.Struct.Bit(3)
}

func (s SimulationParameters) SetEmergenceMoistureControlOn(v bool) {
	s.Struct.SetBit(3, !v)
}

func (s SimulationParameters) FrostKillOn() bool {
	return !s.Struct.Bit(4)
}

func (s SimulationParameters) SetFrostKillOn(v bool) {
	s.Struct.SetBit(4, !v)
}

func (s SimulationParameters) UseAutomaticIrrigation() bool {
	return s.Struct.Bit(5)
}

func (s SimulationParameters) SetUseAutomaticIrrigation(v bool) {
	s.Struct.SetBit(5, v)
}

func (s SimulationParameters) AutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	p, err := s.Struct.Ptr(2)
	return AutomaticIrrigationParameters{Struct: p.Struct()}, err
}

func (s SimulationParameters) HasAutoIrrigationParams() bool {
	return s.Struct.HasPtr(2)
}

func (s SimulationParameters) SetAutoIrrigationParams(v AutomaticIrrigationParameters) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewAutoIrrigationParams sets the autoIrrigationParams field to a newly
// allocated AutomaticIrrigationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewAutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	ss, err := NewAutomaticIrrigationParameters(s.Struct.Segment())
	if err != nil {
		return AutomaticIrrigationParameters{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SimulationParameters) UseNMinMineralFertilisingMethod() bool {
	return s.Struct.Bit(6)
}

func (s SimulationParameters) SetUseNMinMineralFertilisingMethod(v bool) {
	s.Struct.SetBit(6, v)
}

func (s SimulationParameters) NMinFertiliserPartition() (management.Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(3)
	return management.Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s SimulationParameters) HasNMinFertiliserPartition() bool {
	return s.Struct.HasPtr(3)
}

func (s SimulationParameters) SetNMinFertiliserPartition(v management.Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewNMinFertiliserPartition sets the nMinFertiliserPartition field to a newly
// allocated management.Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinFertiliserPartition() (management.Params_MineralFertilization_Parameters, error) {
	ss, err := management.NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return management.Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s SimulationParameters) NMinApplicationParams() (NMinApplicationParameters, error) {
	p, err := s.Struct.Ptr(4)
	return NMinApplicationParameters{Struct: p.Struct()}, err
}

func (s SimulationParameters) HasNMinApplicationParams() bool {
	return s.Struct.HasPtr(4)
}

func (s SimulationParameters) SetNMinApplicationParams(v NMinApplicationParameters) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewNMinApplicationParams sets the nMinApplicationParams field to a newly
// allocated NMinApplicationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinApplicationParams() (NMinApplicationParameters, error) {
	ss, err := NewNMinApplicationParameters(s.Struct.Segment())
	if err != nil {
		return NMinApplicationParameters{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s SimulationParameters) UseSecondaryYields() bool {
	return !s.Struct.Bit(7)
}

func (s SimulationParameters) SetUseSecondaryYields(v bool) {
	s.Struct.SetBit(7, !v)
}

func (s SimulationParameters) UseAutomaticHarvestTrigger() bool {
	return s.Struct.Bit(8)
}

func (s SimulationParameters) SetUseAutomaticHarvestTrigger(v bool) {
	s.Struct.SetBit(8, v)
}

func (s SimulationParameters) NumberOfLayers() uint16 {
	return s.Struct.Uint16(2) ^ 20
}

func (s SimulationParameters) SetNumberOfLayers(v uint16) {
	s.Struct.SetUint16(2, v^20)
}

func (s SimulationParameters) LayerThickness() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3fb999999999999a)
}

func (s SimulationParameters) SetLayerThickness(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SimulationParameters) StartPVIndex() uint16 {
	return s.Struct.Uint16(4)
}

func (s SimulationParameters) SetStartPVIndex(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s SimulationParameters) JulianDayAutomaticFertilising() uint16 {
	return s.Struct.Uint16(6)
}

func (s SimulationParameters) SetJulianDayAutomaticFertilising(v uint16) {
	s.Struct.SetUint16(6, v)
}

// SimulationParameters_List is a list of SimulationParameters.
type SimulationParameters_List struct{ capnp.List }

// NewSimulationParameters creates a new list of SimulationParameters.
func NewSimulationParameters_List(s *capnp.Segment, sz int32) (SimulationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return SimulationParameters_List{l}, err
}

func (s SimulationParameters_List) At(i int) SimulationParameters {
	return SimulationParameters{s.List.Struct(i)}
}

func (s SimulationParameters_List) Set(i int, v SimulationParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SimulationParameters_List) String() string {
	str, _ := text.MarshalList(0xffac0fa5c7156a5d, s.List)
	return str
}

// SimulationParameters_Future is a wrapper for a SimulationParameters promised by a client call.
type SimulationParameters_Future struct{ *capnp.Future }

func (p SimulationParameters_Future) Struct() (SimulationParameters, error) {
	s, err := p.Future.Struct()
	return SimulationParameters{s}, err
}

func (p SimulationParameters_Future) StartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

func (p SimulationParameters_Future) EndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p SimulationParameters_Future) AutoIrrigationParams() AutomaticIrrigationParameters_Future {
	return AutomaticIrrigationParameters_Future{Future: p.Future.Field(2, nil)}
}

func (p SimulationParameters_Future) NMinFertiliserPartition() management.Params_MineralFertilization_Parameters_Future {
	return management.Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(3, nil)}
}

func (p SimulationParameters_Future) NMinApplicationParams() NMinApplicationParameters_Future {
	return NMinApplicationParameters_Future{Future: p.Future.Field(4, nil)}
}

type CropModuleParameters struct{ capnp.Struct }

// CropModuleParameters_TypeID is the unique identifier for the type CropModuleParameters.
const CropModuleParameters_TypeID = 0xe4d6d0d9ae1553da

func NewCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters{st}, err
}

func NewRootCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters{st}, err
}

func ReadRootCropModuleParameters(msg *capnp.Message) (CropModuleParameters, error) {
	root, err := msg.Root()
	return CropModuleParameters{root.Struct()}, err
}

func (s CropModuleParameters) String() string {
	str, _ := text.Marshal(0xe4d6d0d9ae1553da, s.Struct)
	return str
}

func (s CropModuleParameters) CanopyReflectionCoefficient() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s CropModuleParameters) SetCanopyReflectionCoefficient(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceMaxAssimilationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s CropModuleParameters) SetReferenceMaxAssimilationRate(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceLeafAreaIndex() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s CropModuleParameters) SetReferenceLeafAreaIndex(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter1() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter1(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter2() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter2(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumNConcentrationRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s CropModuleParameters) SetMinimumNConcentrationRoot(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumAvailableN() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s CropModuleParameters) SetMinimumAvailableN(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceAlbedo() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s CropModuleParameters) SetReferenceAlbedo(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s CropModuleParameters) StomataConductanceAlpha() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s CropModuleParameters) SetStomataConductanceAlpha(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s CropModuleParameters) SaturationBeta() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s CropModuleParameters) SetSaturationBeta(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s CropModuleParameters) SetGrowthRespirationRedux(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s CropModuleParameters) MaxCropNDemand() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s CropModuleParameters) SetMaxCropNDemand(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter1() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s CropModuleParameters) SetGrowthRespirationParameter1(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter2() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s CropModuleParameters) SetGrowthRespirationParameter2(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s CropModuleParameters) Tortuosity() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s CropModuleParameters) SetTortuosity(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s CropModuleParameters) AdjustRootDepthForSoilProps() bool {
	return s.Struct.Bit(960)
}

func (s CropModuleParameters) SetAdjustRootDepthForSoilProps(v bool) {
	s.Struct.SetBit(960, v)
}

func (s CropModuleParameters) ExperimentalEnablePhenologyWangEngelTemperatureResponse() bool {
	return s.Struct.Bit(961)
}

func (s CropModuleParameters) SetExperimentalEnablePhenologyWangEngelTemperatureResponse(v bool) {
	s.Struct.SetBit(961, v)
}

func (s CropModuleParameters) ExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() bool {
	return s.Struct.Bit(962)
}

func (s CropModuleParameters) SetExperimentalEnablePhotosynthesisWangEngelTemperatureResponse(v bool) {
	s.Struct.SetBit(962, v)
}

func (s CropModuleParameters) ExperimentalEnableHourlyFvCBPhotosynthesis() bool {
	return s.Struct.Bit(963)
}

func (s CropModuleParameters) SetExperimentalEnableHourlyFvCBPhotosynthesis(v bool) {
	s.Struct.SetBit(963, v)
}

func (s CropModuleParameters) ExperimentalEnableTResponseLeafExpansion() bool {
	return s.Struct.Bit(964)
}

func (s CropModuleParameters) SetExperimentalEnableTResponseLeafExpansion(v bool) {
	s.Struct.SetBit(964, v)
}

func (s CropModuleParameters) ExperimentalDisableDailyRootBiomassToSoil() bool {
	return s.Struct.Bit(965)
}

func (s CropModuleParameters) SetExperimentalDisableDailyRootBiomassToSoil(v bool) {
	s.Struct.SetBit(965, v)
}

func (s CropModuleParameters) EnableVernalisationFactorFix() bool {
	return s.Struct.Bit(966)
}

func (s CropModuleParameters) SetEnableVernalisationFactorFix(v bool) {
	s.Struct.SetBit(966, v)
}

// CropModuleParameters_List is a list of CropModuleParameters.
type CropModuleParameters_List struct{ capnp.List }

// NewCropModuleParameters creates a new list of CropModuleParameters.
func NewCropModuleParameters_List(s *capnp.Segment, sz int32) (CropModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0}, sz)
	return CropModuleParameters_List{l}, err
}

func (s CropModuleParameters_List) At(i int) CropModuleParameters {
	return CropModuleParameters{s.List.Struct(i)}
}

func (s CropModuleParameters_List) Set(i int, v CropModuleParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CropModuleParameters_List) String() string {
	str, _ := text.MarshalList(0xe4d6d0d9ae1553da, s.List)
	return str
}

// CropModuleParameters_Future is a wrapper for a CropModuleParameters promised by a client call.
type CropModuleParameters_Future struct{ *capnp.Future }

func (p CropModuleParameters_Future) Struct() (CropModuleParameters, error) {
	s, err := p.Future.Struct()
	return CropModuleParameters{s}, err
}

type SoilMoistureModuleParameters struct{ capnp.Struct }

// SoilMoistureModuleParameters_TypeID is the unique identifier for the type SoilMoistureModuleParameters.
const SoilMoistureModuleParameters_TypeID = 0xcdff1b0306ea58cf

func NewSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters{st}, err
}

func NewRootSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters{st}, err
}

func ReadRootSoilMoistureModuleParameters(msg *capnp.Message) (SoilMoistureModuleParameters, error) {
	root, err := msg.Root()
	return SoilMoistureModuleParameters{root.Struct()}, err
}

func (s SoilMoistureModuleParameters) String() string {
	str, _ := text.Marshal(0xcdff1b0306ea58cf, s.Struct)
	return str
}

func (s SoilMoistureModuleParameters) CriticalMoistureDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilMoistureModuleParameters) SetCriticalMoistureDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SaturatedHydraulicConductivity() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilMoistureModuleParameters) SetSaturatedHydraulicConductivity(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SurfaceRoughness() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilMoistureModuleParameters) SetSurfaceRoughness(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) GroundwaterDischarge() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilMoistureModuleParameters) SetGroundwaterDischarge(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilMoistureModuleParameters) SetHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowAccumulationTresholdTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilMoistureModuleParameters) SetSnowAccumulationTresholdTemperature(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) KcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilMoistureModuleParameters) SetKcFactor(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SoilMoistureModuleParameters) SetTemperatureLimitForLiquidWater(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilMoistureModuleParameters) SetCorrectionSnow(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionRain() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilMoistureModuleParameters) SetCorrectionRain(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilMoistureModuleParameters) SetSnowMaxAdditionalDensity(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) NewSnowDensityMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SoilMoistureModuleParameters) SetNewSnowDensityMin(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMin(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter1() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter1(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter2() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter2(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s SoilMoistureModuleParameters) SetRefreezeTemperature(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMeltTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s SoilMoistureModuleParameters) SetSnowMeltTemperature(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowPacking() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s SoilMoistureModuleParameters) SetSnowPacking(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMax(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) EvaporationZeta() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s SoilMoistureModuleParameters) SetEvaporationZeta(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) XsaCriticalSoilMoisture() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s SoilMoistureModuleParameters) SetXsaCriticalSoilMoisture(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaximumEvaporationImpactDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(168))
}

func (s SoilMoistureModuleParameters) SetMaximumEvaporationImpactDepth(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaxPercolationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(176))
}

func (s SoilMoistureModuleParameters) SetMaxPercolationRate(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MoistureInitValue() float64 {
	return math.Float64frombits(s.Struct.Uint64(184))
}

func (s SoilMoistureModuleParameters) SetMoistureInitValue(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v))
}

// SoilMoistureModuleParameters_List is a list of SoilMoistureModuleParameters.
type SoilMoistureModuleParameters_List struct{ capnp.List }

// NewSoilMoistureModuleParameters creates a new list of SoilMoistureModuleParameters.
func NewSoilMoistureModuleParameters_List(s *capnp.Segment, sz int32) (SoilMoistureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0}, sz)
	return SoilMoistureModuleParameters_List{l}, err
}

func (s SoilMoistureModuleParameters_List) At(i int) SoilMoistureModuleParameters {
	return SoilMoistureModuleParameters{s.List.Struct(i)}
}

func (s SoilMoistureModuleParameters_List) Set(i int, v SoilMoistureModuleParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilMoistureModuleParameters_List) String() string {
	str, _ := text.MarshalList(0xcdff1b0306ea58cf, s.List)
	return str
}

// SoilMoistureModuleParameters_Future is a wrapper for a SoilMoistureModuleParameters promised by a client call.
type SoilMoistureModuleParameters_Future struct{ *capnp.Future }

func (p SoilMoistureModuleParameters_Future) Struct() (SoilMoistureModuleParameters, error) {
	s, err := p.Future.Struct()
	return SoilMoistureModuleParameters{s}, err
}

type SoilOrganicModuleParameters struct{ capnp.Struct }

// SoilOrganicModuleParameters_TypeID is the unique identifier for the type SoilOrganicModuleParameters.
const SoilOrganicModuleParameters_TypeID = 0xb3e73f8c19afd787

func NewSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters{st}, err
}

func NewRootSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters{st}, err
}

func ReadRootSoilOrganicModuleParameters(msg *capnp.Message) (SoilOrganicModuleParameters, error) {
	root, err := msg.Root()
	return SoilOrganicModuleParameters{root.Struct()}, err
}

func (s SoilOrganicModuleParameters) String() string {
	str, _ := text.Marshal(0xb3e73f8c19afd787, s.Struct)
	return str
}

func (s SoilOrganicModuleParameters) SomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SetSomSlowDecCoeffStandard(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SomFastDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SetSomFastDecCoeffStandard(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SmbSlowMaintRateStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowMaintRateStandard(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastMaintRateStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastMaintRateStandard(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbSlowDeathRateStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowDeathRateStandard(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastDeathRateStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastDeathRateStandard(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbUtilizationEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetSmbUtilizationEfficiency(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetSomSlowUtilizationEfficiency(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetSomFastUtilizationEfficiency(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) AomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomSlowUtilizationEfficiency(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(80) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomFastUtilizationEfficiency(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastMaxCtoN() float64 {
	return math.Float64frombits(s.Struct.Uint64(88) ^ 0x408f400000000000)
}

func (s SoilOrganicModuleParameters) SetAomFastMaxCtoN(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v)^0x408f400000000000)
}

func (s SoilOrganicModuleParameters) PartSOMFastToSOMSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSOMFastToSOMSlow(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBSlowToSOMFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(104) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBSlowToSOMFast(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBFastToSOMFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(112) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBFastToSOMFast(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(120) ^ 0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBSlow(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v)^0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(128) ^ 0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBFast(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v)^0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) CnRatioSMB() float64 {
	return math.Float64frombits(s.Struct.Uint64(136) ^ 0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) SetCnRatioSMB(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v)^0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) LimitClayEffect() float64 {
	return math.Float64frombits(s.Struct.Uint64(144) ^ 0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) SetLimitClayEffect(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) AmmoniaOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(152) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAmmoniaOxidationRateCoeffStandard(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) NitriteOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(160) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetNitriteOxidationRateCoeffStandard(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) TransportRateCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(168) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetTransportRateCoeff(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SpecAnaerobDenitrification() float64 {
	return math.Float64frombits(s.Struct.Uint64(176) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetSpecAnaerobDenitrification(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNO3() float64 {
	return math.Float64frombits(s.Struct.Uint64(184) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNO3(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNH4() float64 {
	return math.Float64frombits(s.Struct.Uint64(192) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNH4(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) Denit1() float64 {
	return math.Float64frombits(s.Struct.Uint64(200) ^ 0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit1(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) Denit2() float64 {
	return math.Float64frombits(s.Struct.Uint64(208) ^ 0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit2(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) Denit3() float64 {
	return math.Float64frombits(s.Struct.Uint64(216) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetDenit3(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) HydrolysisKM() float64 {
	return math.Float64frombits(s.Struct.Uint64(224) ^ 0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) SetHydrolysisKM(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v)^0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) ActivationEnergy() float64 {
	return math.Float64frombits(s.Struct.Uint64(232) ^ 0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) SetActivationEnergy(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v)^0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) HydrolysisP1() float64 {
	return math.Float64frombits(s.Struct.Uint64(240) ^ 0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP1(v float64) {
	s.Struct.SetUint64(240, math.Float64bits(v)^0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) HydrolysisP2() float64 {
	return math.Float64frombits(s.Struct.Uint64(248) ^ 0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP2(v float64) {
	s.Struct.SetUint64(248, math.Float64bits(v)^0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) AtmosphericResistance() float64 {
	return math.Float64frombits(s.Struct.Uint64(256) ^ 0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetAtmosphericResistance(v float64) {
	s.Struct.SetUint64(256, math.Float64bits(v)^0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) N2oProductionRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(264) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetN2oProductionRate(v float64) {
	s.Struct.SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) InhibitorNH3() float64 {
	return math.Float64frombits(s.Struct.Uint64(272) ^ 0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) SetInhibitorNH3(v float64) {
	s.Struct.SetUint64(272, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(280) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetPsMaxMineralisationDepth(v float64) {
	s.Struct.SetUint64(280, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SticsParams() (SticsParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SticsParameters{Struct: p.Struct()}, err
}

func (s SoilOrganicModuleParameters) HasSticsParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilOrganicModuleParameters) SetSticsParams(v SticsParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSticsParams sets the sticsParams field to a newly
// allocated SticsParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleParameters) NewSticsParams() (SticsParameters, error) {
	ss, err := NewSticsParameters(s.Struct.Segment())
	if err != nil {
		return SticsParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SoilOrganicModuleParameters_List is a list of SoilOrganicModuleParameters.
type SoilOrganicModuleParameters_List struct{ capnp.List }

// NewSoilOrganicModuleParameters creates a new list of SoilOrganicModuleParameters.
func NewSoilOrganicModuleParameters_List(s *capnp.Segment, sz int32) (SoilOrganicModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1}, sz)
	return SoilOrganicModuleParameters_List{l}, err
}

func (s SoilOrganicModuleParameters_List) At(i int) SoilOrganicModuleParameters {
	return SoilOrganicModuleParameters{s.List.Struct(i)}
}

func (s SoilOrganicModuleParameters_List) Set(i int, v SoilOrganicModuleParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilOrganicModuleParameters_List) String() string {
	str, _ := text.MarshalList(0xb3e73f8c19afd787, s.List)
	return str
}

// SoilOrganicModuleParameters_Future is a wrapper for a SoilOrganicModuleParameters promised by a client call.
type SoilOrganicModuleParameters_Future struct{ *capnp.Future }

func (p SoilOrganicModuleParameters_Future) Struct() (SoilOrganicModuleParameters, error) {
	s, err := p.Future.Struct()
	return SoilOrganicModuleParameters{s}, err
}

func (p SoilOrganicModuleParameters_Future) SticsParams() SticsParameters_Future {
	return SticsParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleParameters struct{ capnp.Struct }

// SoilTemperatureModuleParameters_TypeID is the unique identifier for the type SoilTemperatureModuleParameters.
const SoilTemperatureModuleParameters_TypeID = 0xf0c41d021228d929

func NewSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters{st}, err
}

func NewRootSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters{st}, err
}

func ReadRootSoilTemperatureModuleParameters(msg *capnp.Message) (SoilTemperatureModuleParameters, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleParameters{root.Struct()}, err
}

func (s SoilTemperatureModuleParameters) String() string {
	str, _ := text.Marshal(0xf0c41d021228d929, s.Struct)
	return str
}

func (s SoilTemperatureModuleParameters) NTau() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilTemperatureModuleParameters) SetNTau(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) InitialSurfaceTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilTemperatureModuleParameters) SetInitialSurfaceTemperature(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) BaseTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilTemperatureModuleParameters) SetBaseTemperature(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) QuartzRawDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilTemperatureModuleParameters) SetQuartzRawDensity(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityAir() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilTemperatureModuleParameters) SetDensityAir(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilTemperatureModuleParameters) SetDensityWater(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityHumus() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilTemperatureModuleParameters) SetDensityHumus(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityAir() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityAir(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityQuartz() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityQuartz(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityWater(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityHumus() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityHumus(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilAlbedo() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SoilTemperatureModuleParameters) SetSoilAlbedo(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilMoisture() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0x3fd0000000000000)
}

func (s SoilTemperatureModuleParameters) SetSoilMoisture(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0x3fd0000000000000)
}

// SoilTemperatureModuleParameters_List is a list of SoilTemperatureModuleParameters.
type SoilTemperatureModuleParameters_List struct{ capnp.List }

// NewSoilTemperatureModuleParameters creates a new list of SoilTemperatureModuleParameters.
func NewSoilTemperatureModuleParameters_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return SoilTemperatureModuleParameters_List{l}, err
}

func (s SoilTemperatureModuleParameters_List) At(i int) SoilTemperatureModuleParameters {
	return SoilTemperatureModuleParameters{s.List.Struct(i)}
}

func (s SoilTemperatureModuleParameters_List) Set(i int, v SoilTemperatureModuleParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilTemperatureModuleParameters_List) String() string {
	str, _ := text.MarshalList(0xf0c41d021228d929, s.List)
	return str
}

// SoilTemperatureModuleParameters_Future is a wrapper for a SoilTemperatureModuleParameters promised by a client call.
type SoilTemperatureModuleParameters_Future struct{ *capnp.Future }

func (p SoilTemperatureModuleParameters_Future) Struct() (SoilTemperatureModuleParameters, error) {
	s, err := p.Future.Struct()
	return SoilTemperatureModuleParameters{s}, err
}

type SoilTransportModuleParameters struct{ capnp.Struct }

// SoilTransportModuleParameters_TypeID is the unique identifier for the type SoilTransportModuleParameters.
const SoilTransportModuleParameters_TypeID = 0xc5cb65e585742338

func NewSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters{st}, err
}

func NewRootSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters{st}, err
}

func ReadRootSoilTransportModuleParameters(msg *capnp.Message) (SoilTransportModuleParameters, error) {
	root, err := msg.Root()
	return SoilTransportModuleParameters{root.Struct()}, err
}

func (s SoilTransportModuleParameters) String() string {
	str, _ := text.Marshal(0xc5cb65e585742338, s.Struct)
	return str
}

func (s SoilTransportModuleParameters) DispersionLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilTransportModuleParameters) SetDispersionLength(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) Ad() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilTransportModuleParameters) SetAd(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) DiffusionCoefficientStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilTransportModuleParameters) SetDiffusionCoefficientStandard(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) NDeposition() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilTransportModuleParameters) SetNDeposition(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

// SoilTransportModuleParameters_List is a list of SoilTransportModuleParameters.
type SoilTransportModuleParameters_List struct{ capnp.List }

// NewSoilTransportModuleParameters creates a new list of SoilTransportModuleParameters.
func NewSoilTransportModuleParameters_List(s *capnp.Segment, sz int32) (SoilTransportModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return SoilTransportModuleParameters_List{l}, err
}

func (s SoilTransportModuleParameters_List) At(i int) SoilTransportModuleParameters {
	return SoilTransportModuleParameters{s.List.Struct(i)}
}

func (s SoilTransportModuleParameters_List) Set(i int, v SoilTransportModuleParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilTransportModuleParameters_List) String() string {
	str, _ := text.MarshalList(0xc5cb65e585742338, s.List)
	return str
}

// SoilTransportModuleParameters_Future is a wrapper for a SoilTransportModuleParameters promised by a client call.
type SoilTransportModuleParameters_Future struct{ *capnp.Future }

func (p SoilTransportModuleParameters_Future) Struct() (SoilTransportModuleParameters, error) {
	s, err := p.Future.Struct()
	return SoilTransportModuleParameters{s}, err
}

type Voc struct{ capnp.Struct }

// Voc_TypeID is the unique identifier for the type Voc.
const Voc_TypeID = 0xb87956e2953771db

func NewVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc{st}, err
}

func NewRootVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc{st}, err
}

func ReadRootVoc(msg *capnp.Message) (Voc, error) {
	root, err := msg.Root()
	return Voc{root.Struct()}, err
}

func (s Voc) String() string {
	str, _ := text.Marshal(0xb87956e2953771db, s.Struct)
	return str
}

// Voc_List is a list of Voc.
type Voc_List struct{ capnp.List }

// NewVoc creates a new list of Voc.
func NewVoc_List(s *capnp.Segment, sz int32) (Voc_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Voc_List{l}, err
}

func (s Voc_List) At(i int) Voc { return Voc{s.List.Struct(i)} }

func (s Voc_List) Set(i int, v Voc) error { return s.List.SetStruct(i, v.Struct) }

func (s Voc_List) String() string {
	str, _ := text.MarshalList(0xb87956e2953771db, s.List)
	return str
}

// Voc_Future is a wrapper for a Voc promised by a client call.
type Voc_Future struct{ *capnp.Future }

func (p Voc_Future) Struct() (Voc, error) {
	s, err := p.Future.Struct()
	return Voc{s}, err
}

type Voc_Emissions struct{ capnp.Struct }

// Voc_Emissions_TypeID is the unique identifier for the type Voc_Emissions.
const Voc_Emissions_TypeID = 0xd9ed2c1c754d683e

func NewVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions{st}, err
}

func NewRootVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions{st}, err
}

func ReadRootVoc_Emissions(msg *capnp.Message) (Voc_Emissions, error) {
	root, err := msg.Root()
	return Voc_Emissions{root.Struct()}, err
}

func (s Voc_Emissions) String() string {
	str, _ := text.Marshal(0xd9ed2c1c754d683e, s.Struct)
	return str
}

func (s Voc_Emissions) SpeciesIdToIsopreneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := s.Struct.Ptr(0)
	return Voc_Emissions_SpeciesIdToEmission_List{List: p.List()}, err
}

func (s Voc_Emissions) HasSpeciesIdToIsopreneEmission() bool {
	return s.Struct.HasPtr(0)
}

func (s Voc_Emissions) SetSpeciesIdToIsopreneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSpeciesIdToIsopreneEmission sets the speciesIdToIsopreneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToIsopreneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(s.Struct.Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Voc_Emissions) SpeciesIdToMonoterpeneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := s.Struct.Ptr(1)
	return Voc_Emissions_SpeciesIdToEmission_List{List: p.List()}, err
}

func (s Voc_Emissions) HasSpeciesIdToMonoterpeneEmission() bool {
	return s.Struct.HasPtr(1)
}

func (s Voc_Emissions) SetSpeciesIdToMonoterpeneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSpeciesIdToMonoterpeneEmission sets the speciesIdToMonoterpeneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToMonoterpeneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(s.Struct.Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Voc_Emissions) IsopreneEmission() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_Emissions) SetIsopreneEmission(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_Emissions) MonoterpeneEmission() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_Emissions) SetMonoterpeneEmission(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_List is a list of Voc_Emissions.
type Voc_Emissions_List struct{ capnp.List }

// NewVoc_Emissions creates a new list of Voc_Emissions.
func NewVoc_Emissions_List(s *capnp.Segment, sz int32) (Voc_Emissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return Voc_Emissions_List{l}, err
}

func (s Voc_Emissions_List) At(i int) Voc_Emissions { return Voc_Emissions{s.List.Struct(i)} }

func (s Voc_Emissions_List) Set(i int, v Voc_Emissions) error { return s.List.SetStruct(i, v.Struct) }

func (s Voc_Emissions_List) String() string {
	str, _ := text.MarshalList(0xd9ed2c1c754d683e, s.List)
	return str
}

// Voc_Emissions_Future is a wrapper for a Voc_Emissions promised by a client call.
type Voc_Emissions_Future struct{ *capnp.Future }

func (p Voc_Emissions_Future) Struct() (Voc_Emissions, error) {
	s, err := p.Future.Struct()
	return Voc_Emissions{s}, err
}

type Voc_Emissions_SpeciesIdToEmission struct{ capnp.Struct }

// Voc_Emissions_SpeciesIdToEmission_TypeID is the unique identifier for the type Voc_Emissions_SpeciesIdToEmission.
const Voc_Emissions_SpeciesIdToEmission_TypeID = 0xd11f8d1479e2f010

func NewVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission{st}, err
}

func NewRootVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission{st}, err
}

func ReadRootVoc_Emissions_SpeciesIdToEmission(msg *capnp.Message) (Voc_Emissions_SpeciesIdToEmission, error) {
	root, err := msg.Root()
	return Voc_Emissions_SpeciesIdToEmission{root.Struct()}, err
}

func (s Voc_Emissions_SpeciesIdToEmission) String() string {
	str, _ := text.Marshal(0xd11f8d1479e2f010, s.Struct)
	return str
}

func (s Voc_Emissions_SpeciesIdToEmission) SpeciesId() uint64 {
	return s.Struct.Uint64(0)
}

func (s Voc_Emissions_SpeciesIdToEmission) SetSpeciesId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Voc_Emissions_SpeciesIdToEmission) Emission() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_Emissions_SpeciesIdToEmission) SetEmission(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_SpeciesIdToEmission_List is a list of Voc_Emissions_SpeciesIdToEmission.
type Voc_Emissions_SpeciesIdToEmission_List struct{ capnp.List }

// NewVoc_Emissions_SpeciesIdToEmission creates a new list of Voc_Emissions_SpeciesIdToEmission.
func NewVoc_Emissions_SpeciesIdToEmission_List(s *capnp.Segment, sz int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Voc_Emissions_SpeciesIdToEmission_List{l}, err
}

func (s Voc_Emissions_SpeciesIdToEmission_List) At(i int) Voc_Emissions_SpeciesIdToEmission {
	return Voc_Emissions_SpeciesIdToEmission{s.List.Struct(i)}
}

func (s Voc_Emissions_SpeciesIdToEmission_List) Set(i int, v Voc_Emissions_SpeciesIdToEmission) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_Emissions_SpeciesIdToEmission_List) String() string {
	str, _ := text.MarshalList(0xd11f8d1479e2f010, s.List)
	return str
}

// Voc_Emissions_SpeciesIdToEmission_Future is a wrapper for a Voc_Emissions_SpeciesIdToEmission promised by a client call.
type Voc_Emissions_SpeciesIdToEmission_Future struct{ *capnp.Future }

func (p Voc_Emissions_SpeciesIdToEmission_Future) Struct() (Voc_Emissions_SpeciesIdToEmission, error) {
	s, err := p.Future.Struct()
	return Voc_Emissions_SpeciesIdToEmission{s}, err
}

type Voc_SpeciesData struct{ capnp.Struct }

// Voc_SpeciesData_TypeID is the unique identifier for the type Voc_SpeciesData.
const Voc_SpeciesData_TypeID = 0x80d5a7b782142e87

func NewVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData{st}, err
}

func NewRootVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData{st}, err
}

func ReadRootVoc_SpeciesData(msg *capnp.Message) (Voc_SpeciesData, error) {
	root, err := msg.Root()
	return Voc_SpeciesData{root.Struct()}, err
}

func (s Voc_SpeciesData) String() string {
	str, _ := text.Marshal(0x80d5a7b782142e87, s.Struct)
	return str
}

func (s Voc_SpeciesData) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s Voc_SpeciesData) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Voc_SpeciesData) EfMonos() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_SpeciesData) SetEfMonos(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfMono() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Voc_SpeciesData) SetEfMono(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfIso() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Voc_SpeciesData) SetEfIso(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Voc_SpeciesData) Theta() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0x3feccccccccccccd)
}

func (s Voc_SpeciesData) SetTheta(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s Voc_SpeciesData) Fage() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetFage(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) CtIs() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Voc_SpeciesData) SetCtIs(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Voc_SpeciesData) CtMt() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Voc_SpeciesData) SetCtMt(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaIs() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s Voc_SpeciesData) SetHaIs(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaMt() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s Voc_SpeciesData) SetHaMt(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsIs() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s Voc_SpeciesData) SetDsIs(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsMt() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s Voc_SpeciesData) SetDsMt(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s Voc_SpeciesData) HdIs() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdIs(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) HdMt() float64 {
	return math.Float64frombits(s.Struct.Uint64(104) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdMt(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) Hdj() float64 {
	return math.Float64frombits(s.Struct.Uint64(112) ^ 0x410adb0000000000)
}

func (s Voc_SpeciesData) SetHdj(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v)^0x410adb0000000000)
}

func (s Voc_SpeciesData) Sdj() float64 {
	return math.Float64frombits(s.Struct.Uint64(120) ^ 0x4085f80000000000)
}

func (s Voc_SpeciesData) SetSdj(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v)^0x4085f80000000000)
}

func (s Voc_SpeciesData) Kc25() float64 {
	return math.Float64frombits(s.Struct.Uint64(128) ^ 0x4070400000000000)
}

func (s Voc_SpeciesData) SetKc25(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v)^0x4070400000000000)
}

func (s Voc_SpeciesData) Ko25() float64 {
	return math.Float64frombits(s.Struct.Uint64(136) ^ 0x4066600000000000)
}

func (s Voc_SpeciesData) SetKo25(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v)^0x4066600000000000)
}

func (s Voc_SpeciesData) VcMax25() float64 {
	return math.Float64frombits(s.Struct.Uint64(144) ^ 0x4054000000000000)
}

func (s Voc_SpeciesData) SetVcMax25(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v)^0x4054000000000000)
}

func (s Voc_SpeciesData) Qjvc() float64 {
	return math.Float64frombits(s.Struct.Uint64(152) ^ 0x4000000000000000)
}

func (s Voc_SpeciesData) SetQjvc(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v)^0x4000000000000000)
}

func (s Voc_SpeciesData) Aekc() float64 {
	return math.Float64frombits(s.Struct.Uint64(160) ^ 0x40ecfb8000000000)
}

func (s Voc_SpeciesData) SetAekc(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v)^0x40ecfb8000000000)
}

func (s Voc_SpeciesData) Aeko() float64 {
	return math.Float64frombits(s.Struct.Uint64(168) ^ 0x40e18d8000000000)
}

func (s Voc_SpeciesData) SetAeko(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v)^0x40e18d8000000000)
}

func (s Voc_SpeciesData) Aejm() float64 {
	return math.Float64frombits(s.Struct.Uint64(176) ^ 0x40e2110000000000)
}

func (s Voc_SpeciesData) SetAejm(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v)^0x40e2110000000000)
}

func (s Voc_SpeciesData) Aevc() float64 {
	return math.Float64frombits(s.Struct.Uint64(184) ^ 0x40ec930000000000)
}

func (s Voc_SpeciesData) SetAevc(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v)^0x40ec930000000000)
}

func (s Voc_SpeciesData) SlaMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(192) ^ 0x4034000000000000)
}

func (s Voc_SpeciesData) SetSlaMin(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v)^0x4034000000000000)
}

func (s Voc_SpeciesData) ScaleI() float64 {
	return math.Float64frombits(s.Struct.Uint64(200) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleI(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) ScaleM() float64 {
	return math.Float64frombits(s.Struct.Uint64(208) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleM(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) MFol() float64 {
	return math.Float64frombits(s.Struct.Uint64(216))
}

func (s Voc_SpeciesData) SetMFol(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v))
}

func (s Voc_SpeciesData) Lai() float64 {
	return math.Float64frombits(s.Struct.Uint64(224))
}

func (s Voc_SpeciesData) SetLai(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v))
}

func (s Voc_SpeciesData) Sla() float64 {
	return math.Float64frombits(s.Struct.Uint64(232))
}

func (s Voc_SpeciesData) SetSla(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v))
}

// Voc_SpeciesData_List is a list of Voc_SpeciesData.
type Voc_SpeciesData_List struct{ capnp.List }

// NewVoc_SpeciesData creates a new list of Voc_SpeciesData.
func NewVoc_SpeciesData_List(s *capnp.Segment, sz int32) (Voc_SpeciesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return Voc_SpeciesData_List{l}, err
}

func (s Voc_SpeciesData_List) At(i int) Voc_SpeciesData { return Voc_SpeciesData{s.List.Struct(i)} }

func (s Voc_SpeciesData_List) Set(i int, v Voc_SpeciesData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_SpeciesData_List) String() string {
	str, _ := text.MarshalList(0x80d5a7b782142e87, s.List)
	return str
}

// Voc_SpeciesData_Future is a wrapper for a Voc_SpeciesData promised by a client call.
type Voc_SpeciesData_Future struct{ *capnp.Future }

func (p Voc_SpeciesData_Future) Struct() (Voc_SpeciesData, error) {
	s, err := p.Future.Struct()
	return Voc_SpeciesData{s}, err
}

type Voc_CPData struct{ capnp.Struct }

// Voc_CPData_TypeID is the unique identifier for the type Voc_CPData.
const Voc_CPData_TypeID = 0xcf0f425c8bd69fa2

func NewVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData{st}, err
}

func NewRootVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData{st}, err
}

func ReadRootVoc_CPData(msg *capnp.Message) (Voc_CPData, error) {
	root, err := msg.Root()
	return Voc_CPData{root.Struct()}, err
}

func (s Voc_CPData) String() string {
	str, _ := text.Marshal(0xcf0f425c8bd69fa2, s.Struct)
	return str
}

func (s Voc_CPData) Kc() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_CPData) SetKc(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_CPData) Ko() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_CPData) SetKo(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Voc_CPData) Oi() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Voc_CPData) SetOi(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Voc_CPData) Ci() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Voc_CPData) SetCi(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Voc_CPData) Comp() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Voc_CPData) SetComp(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s Voc_CPData) VcMax() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s Voc_CPData) SetVcMax(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s Voc_CPData) JMax() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Voc_CPData) SetJMax(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Voc_CPData) Jj() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Voc_CPData) SetJj(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Voc_CPData) Jj1000() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s Voc_CPData) SetJj1000(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s Voc_CPData) Jv() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s Voc_CPData) SetJv(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

// Voc_CPData_List is a list of Voc_CPData.
type Voc_CPData_List struct{ capnp.List }

// NewVoc_CPData creates a new list of Voc_CPData.
func NewVoc_CPData_List(s *capnp.Segment, sz int32) (Voc_CPData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0}, sz)
	return Voc_CPData_List{l}, err
}

func (s Voc_CPData_List) At(i int) Voc_CPData { return Voc_CPData{s.List.Struct(i)} }

func (s Voc_CPData_List) Set(i int, v Voc_CPData) error { return s.List.SetStruct(i, v.Struct) }

func (s Voc_CPData_List) String() string {
	str, _ := text.MarshalList(0xcf0f425c8bd69fa2, s.List)
	return str
}

// Voc_CPData_Future is a wrapper for a Voc_CPData promised by a client call.
type Voc_CPData_Future struct{ *capnp.Future }

func (p Voc_CPData_Future) Struct() (Voc_CPData, error) {
	s, err := p.Future.Struct()
	return Voc_CPData{s}, err
}

type Voc_MicroClimateData struct{ capnp.Struct }

// Voc_MicroClimateData_TypeID is the unique identifier for the type Voc_MicroClimateData.
const Voc_MicroClimateData_TypeID = 0xf246442c7aee0af5

func NewVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData{st}, err
}

func NewRootVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData{st}, err
}

func ReadRootVoc_MicroClimateData(msg *capnp.Message) (Voc_MicroClimateData, error) {
	root, err := msg.Root()
	return Voc_MicroClimateData{root.Struct()}, err
}

func (s Voc_MicroClimateData) String() string {
	str, _ := text.Marshal(0xf246442c7aee0af5, s.Struct)
	return str
}

func (s Voc_MicroClimateData) Rad() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_MicroClimateData) SetRad(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad24() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_MicroClimateData) SetRad24(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad240() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Voc_MicroClimateData) SetRad240(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Voc_MicroClimateData) SetTFol(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol24() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Voc_MicroClimateData) SetTFol24(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol240() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s Voc_MicroClimateData) SetTFol240(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction24() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction24(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Co2concentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s Voc_MicroClimateData) SetCo2concentration(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

// Voc_MicroClimateData_List is a list of Voc_MicroClimateData.
type Voc_MicroClimateData_List struct{ capnp.List }

// NewVoc_MicroClimateData creates a new list of Voc_MicroClimateData.
func NewVoc_MicroClimateData_List(s *capnp.Segment, sz int32) (Voc_MicroClimateData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0}, sz)
	return Voc_MicroClimateData_List{l}, err
}

func (s Voc_MicroClimateData_List) At(i int) Voc_MicroClimateData {
	return Voc_MicroClimateData{s.List.Struct(i)}
}

func (s Voc_MicroClimateData_List) Set(i int, v Voc_MicroClimateData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_MicroClimateData_List) String() string {
	str, _ := text.MarshalList(0xf246442c7aee0af5, s.List)
	return str
}

// Voc_MicroClimateData_Future is a wrapper for a Voc_MicroClimateData promised by a client call.
type Voc_MicroClimateData_Future struct{ *capnp.Future }

func (p Voc_MicroClimateData_Future) Struct() (Voc_MicroClimateData, error) {
	s, err := p.Future.Struct()
	return Voc_MicroClimateData{s}, err
}

type Voc_PhotosynthT struct{ capnp.Struct }

// Voc_PhotosynthT_TypeID is the unique identifier for the type Voc_PhotosynthT.
const Voc_PhotosynthT_TypeID = 0xf95db11410e33efc

func NewVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT{st}, err
}

func NewRootVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT{st}, err
}

func ReadRootVoc_PhotosynthT(msg *capnp.Message) (Voc_PhotosynthT, error) {
	root, err := msg.Root()
	return Voc_PhotosynthT{root.Struct()}, err
}

func (s Voc_PhotosynthT) String() string {
	str, _ := text.Marshal(0xf95db11410e33efc, s.Struct)
	return str
}

func (s Voc_PhotosynthT) Par() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_PhotosynthT) SetPar(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par24() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_PhotosynthT) SetPar24(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par240() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Voc_PhotosynthT) SetPar240(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Voc_PhotosynthT_List is a list of Voc_PhotosynthT.
type Voc_PhotosynthT_List struct{ capnp.List }

// NewVoc_PhotosynthT creates a new list of Voc_PhotosynthT.
func NewVoc_PhotosynthT_List(s *capnp.Segment, sz int32) (Voc_PhotosynthT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Voc_PhotosynthT_List{l}, err
}

func (s Voc_PhotosynthT_List) At(i int) Voc_PhotosynthT { return Voc_PhotosynthT{s.List.Struct(i)} }

func (s Voc_PhotosynthT_List) Set(i int, v Voc_PhotosynthT) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_PhotosynthT_List) String() string {
	str, _ := text.MarshalList(0xf95db11410e33efc, s.List)
	return str
}

// Voc_PhotosynthT_Future is a wrapper for a Voc_PhotosynthT promised by a client call.
type Voc_PhotosynthT_Future struct{ *capnp.Future }

func (p Voc_PhotosynthT_Future) Struct() (Voc_PhotosynthT, error) {
	s, err := p.Future.Struct()
	return Voc_PhotosynthT{s}, err
}

type Voc_FoliageT struct{ capnp.Struct }

// Voc_FoliageT_TypeID is the unique identifier for the type Voc_FoliageT.
const Voc_FoliageT_TypeID = 0xee0b04cc3f52f33c

func NewVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT{st}, err
}

func NewRootVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT{st}, err
}

func ReadRootVoc_FoliageT(msg *capnp.Message) (Voc_FoliageT, error) {
	root, err := msg.Root()
	return Voc_FoliageT{root.Struct()}, err
}

func (s Voc_FoliageT) String() string {
	str, _ := text.Marshal(0xee0b04cc3f52f33c, s.Struct)
	return str
}

func (s Voc_FoliageT) TempK() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_FoliageT) SetTempK(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK24() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_FoliageT) SetTempK24(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK240() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Voc_FoliageT) SetTempK240(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Voc_FoliageT_List is a list of Voc_FoliageT.
type Voc_FoliageT_List struct{ capnp.List }

// NewVoc_FoliageT creates a new list of Voc_FoliageT.
func NewVoc_FoliageT_List(s *capnp.Segment, sz int32) (Voc_FoliageT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Voc_FoliageT_List{l}, err
}

func (s Voc_FoliageT_List) At(i int) Voc_FoliageT { return Voc_FoliageT{s.List.Struct(i)} }

func (s Voc_FoliageT_List) Set(i int, v Voc_FoliageT) error { return s.List.SetStruct(i, v.Struct) }

func (s Voc_FoliageT_List) String() string {
	str, _ := text.MarshalList(0xee0b04cc3f52f33c, s.List)
	return str
}

// Voc_FoliageT_Future is a wrapper for a Voc_FoliageT promised by a client call.
type Voc_FoliageT_Future struct{ *capnp.Future }

func (p Voc_FoliageT_Future) Struct() (Voc_FoliageT, error) {
	s, err := p.Future.Struct()
	return Voc_FoliageT{s}, err
}

type Voc_EnzymeActivityT struct{ capnp.Struct }

// Voc_EnzymeActivityT_TypeID is the unique identifier for the type Voc_EnzymeActivityT.
const Voc_EnzymeActivityT_TypeID = 0xc281c6e5be483337

func NewVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT{st}, err
}

func NewRootVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT{st}, err
}

func ReadRootVoc_EnzymeActivityT(msg *capnp.Message) (Voc_EnzymeActivityT, error) {
	root, err := msg.Root()
	return Voc_EnzymeActivityT{root.Struct()}, err
}

func (s Voc_EnzymeActivityT) String() string {
	str, _ := text.Marshal(0xc281c6e5be483337, s.Struct)
	return str
}

func (s Voc_EnzymeActivityT) EfIso() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_EnzymeActivityT) SetEfIso(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_EnzymeActivityT) EfMono() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_EnzymeActivityT) SetEfMono(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Voc_EnzymeActivityT_List is a list of Voc_EnzymeActivityT.
type Voc_EnzymeActivityT_List struct{ capnp.List }

// NewVoc_EnzymeActivityT creates a new list of Voc_EnzymeActivityT.
func NewVoc_EnzymeActivityT_List(s *capnp.Segment, sz int32) (Voc_EnzymeActivityT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Voc_EnzymeActivityT_List{l}, err
}

func (s Voc_EnzymeActivityT_List) At(i int) Voc_EnzymeActivityT {
	return Voc_EnzymeActivityT{s.List.Struct(i)}
}

func (s Voc_EnzymeActivityT_List) Set(i int, v Voc_EnzymeActivityT) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_EnzymeActivityT_List) String() string {
	str, _ := text.MarshalList(0xc281c6e5be483337, s.List)
	return str
}

// Voc_EnzymeActivityT_Future is a wrapper for a Voc_EnzymeActivityT promised by a client call.
type Voc_EnzymeActivityT_Future struct{ *capnp.Future }

func (p Voc_EnzymeActivityT_Future) Struct() (Voc_EnzymeActivityT, error) {
	s, err := p.Future.Struct()
	return Voc_EnzymeActivityT{s}, err
}

type Voc_LeafEmissionT struct{ capnp.Struct }

// Voc_LeafEmissionT_TypeID is the unique identifier for the type Voc_LeafEmissionT.
const Voc_LeafEmissionT_TypeID = 0xe82d760b257daddb

func NewVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT{st}, err
}

func NewRootVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT{st}, err
}

func ReadRootVoc_LeafEmissionT(msg *capnp.Message) (Voc_LeafEmissionT, error) {
	root, err := msg.Root()
	return Voc_LeafEmissionT{root.Struct()}, err
}

func (s Voc_LeafEmissionT) String() string {
	str, _ := text.Marshal(0xe82d760b257daddb, s.Struct)
	return str
}

func (s Voc_LeafEmissionT) FoliageLayer() uint16 {
	return s.Struct.Uint16(0)
}

func (s Voc_LeafEmissionT) SetFoliageLayer(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s Voc_LeafEmissionT) Pho() (Voc_PhotosynthT, error) {
	p, err := s.Struct.Ptr(0)
	return Voc_PhotosynthT{Struct: p.Struct()}, err
}

func (s Voc_LeafEmissionT) HasPho() bool {
	return s.Struct.HasPtr(0)
}

func (s Voc_LeafEmissionT) SetPho(v Voc_PhotosynthT) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPho sets the pho field to a newly
// allocated Voc_PhotosynthT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewPho() (Voc_PhotosynthT, error) {
	ss, err := NewVoc_PhotosynthT(s.Struct.Segment())
	if err != nil {
		return Voc_PhotosynthT{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) Fol() (Voc_FoliageT, error) {
	p, err := s.Struct.Ptr(1)
	return Voc_FoliageT{Struct: p.Struct()}, err
}

func (s Voc_LeafEmissionT) HasFol() bool {
	return s.Struct.HasPtr(1)
}

func (s Voc_LeafEmissionT) SetFol(v Voc_FoliageT) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewFol sets the fol field to a newly
// allocated Voc_FoliageT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewFol() (Voc_FoliageT, error) {
	ss, err := NewVoc_FoliageT(s.Struct.Segment())
	if err != nil {
		return Voc_FoliageT{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) EnzAct() (Voc_EnzymeActivityT, error) {
	p, err := s.Struct.Ptr(2)
	return Voc_EnzymeActivityT{Struct: p.Struct()}, err
}

func (s Voc_LeafEmissionT) HasEnzAct() bool {
	return s.Struct.HasPtr(2)
}

func (s Voc_LeafEmissionT) SetEnzAct(v Voc_EnzymeActivityT) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewEnzAct sets the enzAct field to a newly
// allocated Voc_EnzymeActivityT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewEnzAct() (Voc_EnzymeActivityT, error) {
	ss, err := NewVoc_EnzymeActivityT(s.Struct.Segment())
	if err != nil {
		return Voc_EnzymeActivityT{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Voc_LeafEmissionT_List is a list of Voc_LeafEmissionT.
type Voc_LeafEmissionT_List struct{ capnp.List }

// NewVoc_LeafEmissionT creates a new list of Voc_LeafEmissionT.
func NewVoc_LeafEmissionT_List(s *capnp.Segment, sz int32) (Voc_LeafEmissionT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Voc_LeafEmissionT_List{l}, err
}

func (s Voc_LeafEmissionT_List) At(i int) Voc_LeafEmissionT {
	return Voc_LeafEmissionT{s.List.Struct(i)}
}

func (s Voc_LeafEmissionT_List) Set(i int, v Voc_LeafEmissionT) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_LeafEmissionT_List) String() string {
	str, _ := text.MarshalList(0xe82d760b257daddb, s.List)
	return str
}

// Voc_LeafEmissionT_Future is a wrapper for a Voc_LeafEmissionT promised by a client call.
type Voc_LeafEmissionT_Future struct{ *capnp.Future }

func (p Voc_LeafEmissionT_Future) Struct() (Voc_LeafEmissionT, error) {
	s, err := p.Future.Struct()
	return Voc_LeafEmissionT{s}, err
}

func (p Voc_LeafEmissionT_Future) Pho() Voc_PhotosynthT_Future {
	return Voc_PhotosynthT_Future{Future: p.Future.Field(0, nil)}
}

func (p Voc_LeafEmissionT_Future) Fol() Voc_FoliageT_Future {
	return Voc_FoliageT_Future{Future: p.Future.Field(1, nil)}
}

func (p Voc_LeafEmissionT_Future) EnzAct() Voc_EnzymeActivityT_Future {
	return Voc_EnzymeActivityT_Future{Future: p.Future.Field(2, nil)}
}

type Voc_LeafEmissions struct{ capnp.Struct }

// Voc_LeafEmissions_TypeID is the unique identifier for the type Voc_LeafEmissions.
const Voc_LeafEmissions_TypeID = 0xc8aeb5222ac5ef40

func NewVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions{st}, err
}

func NewRootVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions{st}, err
}

func ReadRootVoc_LeafEmissions(msg *capnp.Message) (Voc_LeafEmissions, error) {
	root, err := msg.Root()
	return Voc_LeafEmissions{root.Struct()}, err
}

func (s Voc_LeafEmissions) String() string {
	str, _ := text.Marshal(0xc8aeb5222ac5ef40, s.Struct)
	return str
}

func (s Voc_LeafEmissions) Isoprene() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Voc_LeafEmissions) SetIsoprene(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Voc_LeafEmissions) Monoterp() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Voc_LeafEmissions) SetMonoterp(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Voc_LeafEmissions_List is a list of Voc_LeafEmissions.
type Voc_LeafEmissions_List struct{ capnp.List }

// NewVoc_LeafEmissions creates a new list of Voc_LeafEmissions.
func NewVoc_LeafEmissions_List(s *capnp.Segment, sz int32) (Voc_LeafEmissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Voc_LeafEmissions_List{l}, err
}

func (s Voc_LeafEmissions_List) At(i int) Voc_LeafEmissions {
	return Voc_LeafEmissions{s.List.Struct(i)}
}

func (s Voc_LeafEmissions_List) Set(i int, v Voc_LeafEmissions) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Voc_LeafEmissions_List) String() string {
	str, _ := text.MarshalList(0xc8aeb5222ac5ef40, s.List)
	return str
}

// Voc_LeafEmissions_Future is a wrapper for a Voc_LeafEmissions promised by a client call.
type Voc_LeafEmissions_Future struct{ *capnp.Future }

func (p Voc_LeafEmissions_Future) Struct() (Voc_LeafEmissions, error) {
	s, err := p.Future.Struct()
	return Voc_LeafEmissions{s}, err
}

type SticsParameters struct{ capnp.Struct }

// SticsParameters_TypeID is the unique identifier for the type SticsParameters.
const SticsParameters_TypeID = 0xce5b0091fd9acb21

func NewSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters{st}, err
}

func NewRootSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters{st}, err
}

func ReadRootSticsParameters(msg *capnp.Message) (SticsParameters, error) {
	root, err := msg.Root()
	return SticsParameters{root.Struct()}, err
}

func (s SticsParameters) String() string {
	str, _ := text.Marshal(0xce5b0091fd9acb21, s.Struct)
	return str
}

func (s SticsParameters) UseN2O() bool {
	return s.Struct.Bit(0)
}

func (s SticsParameters) SetUseN2O(v bool) {
	s.Struct.SetBit(0, v)
}

func (s SticsParameters) UseNit() bool {
	return s.Struct.Bit(1)
}

func (s SticsParameters) SetUseNit(v bool) {
	s.Struct.SetBit(1, v)
}

func (s SticsParameters) UseDenit() bool {
	return s.Struct.Bit(2)
}

func (s SticsParameters) SetUseDenit(v bool) {
	s.Struct.SetBit(2, v)
}

func (s SticsParameters) CodeVnit() uint8 {
	return s.Struct.Uint8(1) ^ 1
}

func (s SticsParameters) SetCodeVnit(v uint8) {
	s.Struct.SetUint8(1, v^1)
}

func (s SticsParameters) CodeTnit() uint8 {
	return s.Struct.Uint8(2) ^ 2
}

func (s SticsParameters) SetCodeTnit(v uint8) {
	s.Struct.SetUint8(2, v^2)
}

func (s SticsParameters) CodeRationit() uint8 {
	return s.Struct.Uint8(3) ^ 2
}

func (s SticsParameters) SetCodeRationit(v uint8) {
	s.Struct.SetUint8(3, v^2)
}

func (s SticsParameters) CodeHourlyWfpsNit() uint8 {
	return s.Struct.Uint8(4) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsNit(v uint8) {
	s.Struct.SetUint8(4, v^2)
}

func (s SticsParameters) CodePdenit() uint8 {
	return s.Struct.Uint8(5) ^ 1
}

func (s SticsParameters) SetCodePdenit(v uint8) {
	s.Struct.SetUint8(5, v^1)
}

func (s SticsParameters) CodeRatiodenit() uint8 {
	return s.Struct.Uint8(6) ^ 2
}

func (s SticsParameters) SetCodeRatiodenit(v uint8) {
	s.Struct.SetUint8(6, v^2)
}

func (s SticsParameters) CodeHourlyWfpsDenit() uint8 {
	return s.Struct.Uint8(7) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsDenit(v uint8) {
	s.Struct.SetUint8(7, v^2)
}

func (s SticsParameters) Hminn() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3fd3333333333333)
}

func (s SticsParameters) SetHminn(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SticsParameters) Hoptn() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x3feccccccccccccd)
}

func (s SticsParameters) SetHoptn(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SticsParameters) PHminnit() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x4010000000000000)
}

func (s SticsParameters) SetPHminnit(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x4010000000000000)
}

func (s SticsParameters) PHmaxnit() float64 {
	return math.Float64frombits(s.Struct.Uint64(32) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHmaxnit(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) Nh4Min() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetNh4Min(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) PHminden() float64 {
	return math.Float64frombits(s.Struct.Uint64(48) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHminden(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) PHmaxden() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x4022666666666666)
}

func (s SticsParameters) SetPHmaxden(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x4022666666666666)
}

func (s SticsParameters) Wfpsc() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) SetWfpsc(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) TdenitoptGauss() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x4047800000000000)
}

func (s SticsParameters) SetTdenitoptGauss(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x4047800000000000)
}

func (s SticsParameters) ScaleTdenitopt() float64 {
	return math.Float64frombits(s.Struct.Uint64(80) ^ 0x4039000000000000)
}

func (s SticsParameters) SetScaleTdenitopt(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v)^0x4039000000000000)
}

func (s SticsParameters) Kd() float64 {
	return math.Float64frombits(s.Struct.Uint64(88) ^ 0x4062800000000000)
}

func (s SticsParameters) SetKd(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v)^0x4062800000000000)
}

func (s SticsParameters) KDesat() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0x4008000000000000)
}

func (s SticsParameters) SetKDesat(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0x4008000000000000)
}

func (s SticsParameters) Fnx() float64 {
	return math.Float64frombits(s.Struct.Uint64(104) ^ 0x3fe999999999999a)
}

func (s SticsParameters) SetFnx(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SticsParameters) Vnitmax() float64 {
	return math.Float64frombits(s.Struct.Uint64(112) ^ 0x403b4ccccccccccd)
}

func (s SticsParameters) SetVnitmax(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v)^0x403b4ccccccccccd)
}

func (s SticsParameters) Kamm() float64 {
	return math.Float64frombits(s.Struct.Uint64(120) ^ 0x4038000000000000)
}

func (s SticsParameters) SetKamm(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v)^0x4038000000000000)
}

func (s SticsParameters) Tnitmin() float64 {
	return math.Float64frombits(s.Struct.Uint64(128) ^ 0x4014000000000000)
}

func (s SticsParameters) SetTnitmin(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v)^0x4014000000000000)
}

func (s SticsParameters) Tnitopt() float64 {
	return math.Float64frombits(s.Struct.Uint64(136) ^ 0x403e000000000000)
}

func (s SticsParameters) SetTnitopt(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v)^0x403e000000000000)
}

func (s SticsParameters) Tnitop2() float64 {
	return math.Float64frombits(s.Struct.Uint64(144) ^ 0x4041800000000000)
}

func (s SticsParameters) SetTnitop2(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v)^0x4041800000000000)
}

func (s SticsParameters) Tnitmax() float64 {
	return math.Float64frombits(s.Struct.Uint64(152) ^ 0x404d000000000000)
}

func (s SticsParameters) SetTnitmax(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v)^0x404d000000000000)
}

func (s SticsParameters) TnitoptGauss() float64 {
	return math.Float64frombits(s.Struct.Uint64(160) ^ 0x4040400000000000)
}

func (s SticsParameters) SetTnitoptGauss(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v)^0x4040400000000000)
}

func (s SticsParameters) ScaleTnitopt() float64 {
	return math.Float64frombits(s.Struct.Uint64(168) ^ 0x4030000000000000)
}

func (s SticsParameters) SetScaleTnitopt(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v)^0x4030000000000000)
}

func (s SticsParameters) Rationit() float64 {
	return math.Float64frombits(s.Struct.Uint64(176) ^ 0x3f5a36e2eb1c432d)
}

func (s SticsParameters) SetRationit(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v)^0x3f5a36e2eb1c432d)
}

func (s SticsParameters) CminPdenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(184) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetCminPdenit(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) CmaxPdenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(192) ^ 0x4018000000000000)
}

func (s SticsParameters) SetCmaxPdenit(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v)^0x4018000000000000)
}

func (s SticsParameters) MinPdenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(200) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetMinPdenit(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) MaxPdenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(208) ^ 0x4034000000000000)
}

func (s SticsParameters) SetMaxPdenit(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Ratiodenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(216) ^ 0x3fc999999999999a)
}

func (s SticsParameters) SetRatiodenit(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SticsParameters) Profdenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(224) ^ 0x4034000000000000)
}

func (s SticsParameters) SetProfdenit(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Vpotdenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(232) ^ 0x4000000000000000)
}

func (s SticsParameters) SetVpotdenit(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v)^0x4000000000000000)
}

// SticsParameters_List is a list of SticsParameters.
type SticsParameters_List struct{ capnp.List }

// NewSticsParameters creates a new list of SticsParameters.
func NewSticsParameters_List(s *capnp.Segment, sz int32) (SticsParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return SticsParameters_List{l}, err
}

func (s SticsParameters_List) At(i int) SticsParameters { return SticsParameters{s.List.Struct(i)} }

func (s SticsParameters_List) Set(i int, v SticsParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SticsParameters_List) String() string {
	str, _ := text.MarshalList(0xce5b0091fd9acb21, s.List)
	return str
}

// SticsParameters_Future is a wrapper for a SticsParameters promised by a client call.
type SticsParameters_Future struct{ *capnp.Future }

func (p SticsParameters_Future) Struct() (SticsParameters, error) {
	s, err := p.Future.Struct()
	return SticsParameters{s}, err
}

const schema_eef9ddc7a345de6d = "x\xda\x94\xbc{\x9c\x1c\xd5u\xe0\x7fOU?f\xf4" +
	"\xa0\xa7U-\x90\x84\xc4\xa0a\x04\x12Fx\x1e\xc2\x06" +
	"~\xc8=\xa3\x19\x09\x0d\x9e\x1eMO\x8f@`HT" +
	"\xd3}g\xba\xa4\xea\xaaVu\xb54\xad\x9f\xbc<\x02" +
	"\x9f(\x04\x12`E\x0c^\xd8\x05\x82?\x01/$\xc2" +
	"\x0b\xbb\xe0\x80#Xp`#\x12L \x80\x8d\x13A" +
	"p\x02\x04{%\x0218\x90\xde\xcf9\xb7\x1e\xb7[" +
	"-!\xf4\x8f\xa6\xbf\xf7\xd4\xad[\xb7\xee\xe3\xbcn\xf5" +
	"t.\x1bPz\xa3\xdfY\xc0X\xf6\xf5h\xac\xfe\xbb" +
	"\xe7\xa6\xae\xfb_\x7f\xf2\xea5,{&\x9cV\xff\xd9" +
	"\x8e\xaf\xdf\xfe\xf6\xa5\xb5\xc7Y$\xceX\x7fo\xfbm" +
	"\xa0\x8d\xb4\xe3\x9f\xeb\xdb\xbf\x13cP\xff\xf5\xcee\xfb" +
	"\x7fU\x7f\xfcZ\x96\xdd\x00P_uRr\xd4\\\xdd" +
	"\xfe4\x8b\x02\x89w\xdc\xa6h\x97w\xc4\x19\xd36w" +
	"\xecbP\xff\xc9\x91}_=\xe7\xcd[\xafg\xc9." +
	"\xa8\x97\xfe~\xfd\x1f\xff\xe5\xcf?\xfd\x15\x8b\xaa(\xfc" +
	"H\xc73\xa0\xbd@\xc2\xcfu\xfc\x19\x83\xfa\x1f\x15/" +
	"J\xed>r\xcb^\x96\xed\x02E\x92\xa6\xaa\xf5\xa4\xa2" +
	"h\xdfN\xa2t-\x89\xd2\xc5\xa7\xf7.\xfe\xc1\xdf<" +
	"wcS\xd5\x0a\x0a/\\p#h\xab\x17\xa0\xf0\xaa" +
	"\x05\xd8\x8e\xc8\xff\xfc\x9d\x1f}\xf8\xe6\xdc;Yr\xad" +
	"\xf2\xeb\x95\xff\xf6\xccS\xdd\xbf~\x8eA\xff\xcd\x0b." +
	"Q\xb4GH\xee\xe1\x05_gP\xdf|wg\xd1\xdd" +
	"\xbc\xe9OZU\xfa\xd8\x82+@{\x81\x84\x9f\xa3J" +
	"\x7f\xf7\xb5?[|S\xfa\x9f\xff\x07\xb6\xb7\xbb\xb9\xbd" +
	"\xab\xb4\x0fA[\xaf\xe1\x9f\x83Zg\x1b\x83\xfa\xbf}" +
	"\xe3\x87\x8f\xbf\xf2\xf5\xe5\x8f\xa2xG\xb3xt\xd9\x8d" +
	"\xa0-[\x86\x7f.^\xf6\x17*\x83\xfa]\xbf\xbd\xe1" +
	"\xc8\xcb\x7f~\xe7c(>\xa7Y|d\xf9\x8d\xa0\xe9" +
	"\xcb\xf1\xcf\xab\x96\xdb\x0a\x83\xf0\xbd5\xb4\x9c^\xe2\xaa" +
	"\xee>\xd0.\xe8\xfe\x0eS\xebs~t\xff\x9e\xb3." +
	"\xa9\x1f\xc0J\xdb\x9b\x1f\xf0{\xdd\xcf\x80\xf6T\xf7)" +
	"\x8c\xf5\xbf\xd0\xfd'Xi\xf0z\xb3]\x00\xcdmx" +
	"\xf5\xac>E\xfb\xf8\xacS\x18\xd3`%\xf6\xc7\xd7\xfb" +
	"7\xfe\xe8\x17?\xbe\xf6\x19\x1cHJ\xd3@\xfa\xf6\xca" +
	"\x1f\x80v\xfbJ\xec\xbc[I\xf8\xfc3\xdc\x1b~\xc1" +
	"\xff\xea9\xac:\xd2\xd4\xe0_\xaeT\x14\xad}\x15\x0a" +
	"GW\xfd3\x03\xff\x8d5\xb6\x82D\x8f\xacz\x1f\xb4" +
	"\xf9gc#\x16\x9f\x8d\xf5\x0e\xfc\xdf\xe7\xce\xeez\xec" +
	"O\x9fo\xd5\x88k\xcf\xbe\x0f\xb4;\xcf\xc6zo'" +
	"\xe1\xbf\xd9\xf2~L=\xb5\xfe\"6bQS\xcd\x9f" +
	"\x9e\xfd\x1b\xd0\x16~\x05\xffL~\xe5\xe2(\x83\x7fX" +
	"\xfeW\xdf\xfd\xfc\xd6o\xfdu\xb6\x0bNk\x92\xe5\xbd" +
	"\xb7\x81\xf6\xed^\xfc\xb3\xd6\xfb\x87\xf8\xb2\xef\xfbo\x7f" +
	"\xf7\xfbW\xaeK\xfc\x0d6cNS3\xde\xbbp\x1b" +
	"h\x9f_H7\xb9\xf0\xeb\xd8\xcf\x1d\x87\xdf\xae\xa5n" +
	"\xee\xfc\x09\xcb\xf6\x80R\xffF1S]z\xce/\xdf" +
	"\x10\xd2\xe7\xad\xedR\xb4\xcdk\xb1\xd1\xd9\xb5\xd8\xe8\xdf" +
	"\xb7\x16\xfd\xd1_\xfe\xee\xab/c\xa3WI/e\x0e" +
	"\x0d\xd2\xb5\xf7\x81\xf6\"J\xf7\xbf\xb061\x8fAX" +
	"[c\x87\x88W~\xef\xe8u\xa0=6\x8a\xdd\xf7\xdc" +
	"\xe8?3\xa8\x8f\xfd\xc7\xdf\xcf_\xda\xf3\x1f?\xc3\xca" +
	"\xd5\xa6\xa7|+s#h\x9ff\xb0%\x1fgp\x0a" +
	".z\xf8\xb1\x81\x1f\xef\xac\xfe}+\xe1\xdb\xc7\xde\x06" +
	"\xed\x911\x9aZc(\xfc\xd3\xdc\xc2?}\xe3\xa5\xbf" +
	"{\xa7i\xf8\x93\xf0\xc8\xa6\x1f\x82\xa6o\xa2\xe1\xbc\xe9" +
	"\xb5\x08\x83\xfa_\xdf\xf5\xf9\xe6}C7\xff\x13\xcb\x9e" +
	"\x0fJ8l\xc5X\xda\xdc\xa5hwo\xc6\xaa\xef\xdc" +
	"\x8c=\xf2\xb3\x87\xbf\xbdb\xee\xce\xd5\xef\xe2#J3" +
	"A,3\x1fo\xbe\x0f\xb4\xf9\x97\xa2t\xfb\xa5\xf8\x88" +
	"\xcf|\xbe\xe8\xebm_\xbb\xed\xfd\x96\x8fx\xe9\xf7A" +
	"\xfb\x94\x84?\xbe\x14[}\xd1\xbfN\xa4\x0fF\xe6\xfe" +
	"\x0a\xabV\x9b\xde\xe3\xed\x97\xed\x06\xed\xc1\xcbP\xf8{" +
	"\x97\xa1\xf0\xaa7V.P\x96={\x18k\x9e\xdfT" +
	"\xf3\xe0\x96\x05\x8a\xa6o\xa1G\xdc\xf2\x0f\xf8\xd2\xff\xcb" +
	"\xd5\xff\xfd\x82s\x8f\xc4>D\xe9\x93\xa5\xf7\x98\xa0\xb9" +
	"\xf8\xad\xef\x83\xf6\xd4\xb7\xf0\xcf'\xbeE#\xea\xe39" +
	"\xbf\xda}\xce\xf0\x86\x0f\xb1%\xedM-yz\xfa\x87" +
	"\xa0\xbd1M\xb3r\xba\x0e\x0c\xea\x9f}\xe3\x1f;R" +
	"\x8f\\\xf5i\xabv\xff\xb2x\x1bhQ\x03\xdb\x0d\x06" +
	"\xb6\xfb\xaam\x0b\xff\xf2{\x89\x87\xea\xcd\x0bo\x14\xa5" +
	"\xef4~\x08\xda#(\xdd\xff\xb0\xf1k\x95\xbd\\/" +
	"\xd9\x05nV\xbeZ\x8a\xda\x96\x91\xd7\xbfZ\xa2\xff~" +
	"\xbb\xac;z\xa9rn^/[\xe5\x0b/\xb5\xf3\xe7" +
	"\xe6\xca<o\xf0\xca\xb0\xee\x82>\x0e\x90\x9dU#\x8c" +
	"E\x801\xed\x02u\x09c\xb95\xaa\x0a\xb9\x01U\x81" +
	"$@\x0a\x90\xafU\xd71\x96;\x1f\xf90rEI" +
	"\x81\xc2\x986\xa8^\xc8X\xee\"\xe4\x1b\x91\xabj\x0a" +
	"T\xc6\xb4\xf5j\x1fc\xb9\x01\xe4\xa3\xc8#\x91\x14D" +
	"\x00\xb4\x11\xe2\xc3\xc8\xc7\x91G\xa3)\x88\x02h\x19\xf5" +
	"l\xc6r\x1b\x91O\"\x8f\xc5R\x10\xc3yE|\x14" +
	"\xf9\x16\xe4\xf1x\x0ah\x0f#>\x8e\xfcJ\xe4mm" +
	")hcL\xbb\x9c\xf8$\xf2\xad\xc8\xdb\xdbS\xd0\xce" +
	"\x98v\x15\xf1-\xc8\x0b\xc8\xe7\xccI\xc1\x1c\xc64\x9d" +
	"\xf8\x95\xc8\x8b\xc8\xe7\xceM\xc1\\\xc64N|+r" +
	"\x13\xf9\xbcy)\x98\x07\xa0\x19\xc4\x0b\xc8\xcb\xc8\xe7\xcf" +
	"O\xc1|\x00\xadD\xbc\x88\xdcE~\xd2I)8\x09" +
	"@\xdb\xa1v1\x963\x91\xcf\"O$R\x90\x00\xd0" +
	"\xaa\xc4\xcb\xc8\xf7 \xef\xe8HA\x07\x80V\xa3z\\" +
	"\xe4\xd7 O&S\xf8\x12\xb4o\x13\x9fE~=\xf2" +
	"\x05\x0bR\xb0\x00@\xbb\x96\xde\xcb\x1e\xe4{\x91kZ" +
	"\x0a4\x00\xed\x06\x92\xbf\x06\xf9M\xc8S\xa9\x14\xbeI" +
	"\xed\xf7\x88_\x8f\xfc\x16\xe4\x0b\x17\xa6`!\x80v3" +
	"\xf1\xbd\xc8\xf7!?\xf9\xe4\x14\x9c\x0c\xa0\xddJ\xfc&" +
	"\xe4w ?\xe5\x94\x14\x9c\x02\xa0\xddN\xfc\x16\xe4w" +
	"!_\xb4(\x05\x8b\x00\xb4;i<\xecC~\x0f\xf2" +
	"\xc5\x8bS\xb0\x18@\xbb\x9b\xf8\x1d\xc8\xefG\xbedI" +
	"\x0a\x96\x00h\xf7\x12\xbf\x0b\xf9\x03\xc8O=5\x05\xa7" +
	"\xe2\xac\xa5\xfa\xefA\xfe\x10\xf2\xa5KS\xb0\x941\xed" +
	"A\xea\xb7\xfb\x91\xefG\xbelY\x0a\x96\xe1BF\xfc" +
	"\x01\xe4\x8f\xaa\x0a\xa8F\x01\xda\x99\x02\xed\x0c\xae\xe6\xd3" +
	"\x19\xdb\xb2+0\x97)0\x97AZ\xfc\xf6\x7fv\xf2" +
	"\xe9\x91J\xf8\xcb-rW\x17\xbf\xea/\x1e\xc4\x7f\x1f" +
	"\xa4\x19c\x89i}\x86\x0b|\xe0p\x9a\xb1D\xde\x1d" +
	"\x09jL\xe4\xdd\x8c\x1b\xfc(\xeaRIQ\x97J\x0a" +
	"\x15\xa9\xa4P\x91\xaf)\xf8%\x87\x0f\xfdVr\x90\xb1" +
	"D\xb1\xe0\x17{$^,l\x13\xe0\xd0\xcf\xe6\xe0\xef" +
	"J\xf0\xfb\x93\x1b\x06\x18Kl\xcf\xf7\x9d\xe7\x81\x812" +
	"\x01;\x00[\xa7\x07\x18\xbbzg>\xa3\xcf\xfa\xec\xc0" +
	"$\xca\xec\xd8\xb63/~_\x83?u\xbe\xdd\xfby" +
	"\xf8\x9a\x7f\xff\xc0#\xb6On~K\x90m%\xaf\xda" +
	"\xe4\xdb\x02\xf8u\x1c\xfa\xcfxM\xbab\xea\x19\xc3\xf2" +
	"n\xb3\x86H^7\xf9\x88\xd4\x7f\x82d\xe4\x1e-m" +
	"\xb0M\xbfC\xe2\xa6n\x04\x7fWL\xdd\xff;X\xdf" +
	"\xda\x8f\xbd\xbee\xb8^\xa9:\xbcp\xb1cW\xad\xc2" +
	".\xdd\xe5\xce\xa4>e\xf2\x11k\xdavJ\xbak\xd8" +
	"\xd6\xb9\xc3\xba\xcb'\xedKu\xb3\x0a\x1c\xd7\xbf6\x7f" +
	"\xfdK\xae:\x9b\xb1l\xb7\x0a\xd9\x1e\x05\xbc\xb5/\xb9" +
	"\xba\x8f\xb1\xecJ\x15\xb2k\x14H\x14t\x97CG\xfd" +
	"\xe6d\x97\xfa\xd0\x7f\xfc\xd3w\x18\x03\xe8`\xd0\xb9S" +
	"7\xab\xfc\xa8f\xc6\x8e\xdd\xcc!\xc7.O\xf0\x8aQ" +
	"\xa8\xf2q\xe4\xdc\xe5N\x85ac\xe6\x05\x8dY\x7f!" +
	"c\xd9\x01\x15\xb2\xa3\xe1J\x9c\x1cY\xc7XvX\x85" +
	"\xecx\xb8\x0c'3S\x8ceGU\xc8nQ -" +
	"\xee\x03\x1d\xf5k/}\xfe\xee\xdd\x0b\xbf\xf2G^#" +
	"\xaf\xae\x88e\x1f\xe61\x05P\xffp\xc4\xfd'Y\xbc" +
	"V\xe6\x01\xf5\x1b\x1f?v\xe3\x07\xab\xae\x8d]\x99\x1f" +
	"q\x1cc\x86\xfa\xf4\x84\x1e\x82\x9e\x01 9r\xa1\xfc" +
	"\x0c\x90\x02\x05 \x99\x99h\xf5\x0c\xab\xff\xe0,\xe7\xf6" +
	"\x1f\xdd\xfa\x84\xf7\x0ci\xbddW-oj\x1c\xe8\x1d" +
	"`\xac\xee\x16\x1d^)\xda&\x83\x827q\xa7\xe9\xdf" +
	"\xdf\xe1\xc4=\x91\x1d\x11_\x85\xd4|\xd64\"\x9c\xf0" +
	"\xed\x07/\xa1w7c\xd9\x1e\x15\xb2\x17)P\xf7\xba" +
	"u\x9cu\xfa\x8d\x0e\xf4@\xd1\xe8z\xbej\xba\xc6N" +
	"\xdda\xe9q_$P1<\x11\xbf\x9dm'\xd0\xeb" +
	"\x1bug'\xaf\xb8a\x9b\xcf\xf5\xc8\xa4Q\xe2^\xfb" +
	"iX$/\xc1\xea\x93\xf3\xd7aG\xe8n\xd51\xdc" +
	"\x1ac\xec\xea\xaa\xb5\xdd\xb2wY\xc1M#\xc7\xef\x9c" +
	"\\Y\xe5\xf9\xa6^\xb9\xa2U\xaf8R\xaf\xe4\xbd^" +
	"e*=o`\x13z\xcf\xeb\x8d=\xa9\xd3\x02\x83\xb4" +
	"\xa9G\x8e3\x89r\xb6anrft\xcb\xc8g\xec" +
	"B\xd5\x14S\xa9\x93\xfa\x04\xdb\xbbO\xb4\x17@\xfb\\" +
	"}\x86\xb1\x89\x88\x0a\xb9y\x11\xbf\xc5\x00Z{\xe4\x19" +
	"\xc6r\xf3\x90/\x8a\xf8\xf3\x09@[\x18\xf9?\x8c\xe5" +
	"\x96\"_\x19\xf1\xd5\x1a\x00m\x05\xf1s\x90\x9f\x1f\x91" +
	"\xd4\x9a\xf3\x88_\x84|cDRk\xd6\x13\x1fE\xbe" +
	"%\xe2\xab5\x00\xdaf\xe2W\"/F|\xb5\x06@" +
	"\xe3\x91\xf7Q]@>\x1b\xf1\xd5\x1aT\x17\x88\xefA" +
	"\xbe7\xe2\xab5\xb8\xcd\x13\xbf\x09\xf9\x1d\x11_\xad\xc1" +
	"\xed\x99\xf8]\xc8\x1f\x88\xf8j\x0d\x80\xf6\xbd\xc8n\xdc" +
	">\x91\xef\x8fHj\xcd\xc3\x91\xef3\x96\xdb\x8f\xfc\xc9" +
	"\x88\xa4\xd6<A\xfcI\xe4\xcfG$\xb5\xe69\xe2\xcf" +
	"#\x7f%\"\xa95?\x89\xdc\xc8X\xee\x15\xe4\x87\"" +
	"\x92Z\xf3s\xe2\x87\x90\x7f\x10\x91\xd4\x9a\xf7\"W0" +
	"\x96{\x17\xf9G\x11I\xad9\x12\xb9\x8e\xb1\xdca\xe4" +
	"\x9fEB\xb5\xa6\xff\xd3\xc8\x02`,\x17\x89\xaa\x90\xeb" +
	"\x88\x86zM\xff\xfc(\x15,\xc2\x82\xee\xa8\xa4\xd8," +
	"\x8f~\x97\xb1\\7\xf2\x9e\xa8\xa4\xd8\xac\x8e\xfe\x14\x15" +
	"]\xe4\x03QI\xb1YK|\x18\xf9xTRl2" +
	"\xc4'\x91o\x8dJ\x8a\xcdUQT`\xb6 /D" +
	"%\xc5F'~%\xf2b\xd4Wl\xf0\x0d\x13\xdf\x8a" +
	"\xdc\x8c\xfa\x8a\x0d*\x96\xd1m\xa8@\"w\xa3\xbeb" +
	"\x83\x0ad\x14{\xceE~\x0d\xf2\xd3NK\xc1i\xa8" +
	"\x10\x92\xfc\x1e\xe4{\x91wv\xa6\xa0\x13G\x04\xf1\xeb" +
	"\x91\xdf\x82\xfc\xf4\xd3Sp:*x\xd1\x1f\xa0\xc2\x86" +
	"\xfc.\xe4\xcb\x97\xa7`9*l\xd1\xdbp\xa4 \x7f" +
	"\x00yWW\x0a\xbap\xa4P=\xf7#\xdf\x8f\xfc\x8c" +
	"3Rp\x06\x8e\x94(\x8e\xdcG\x91\x1f\x88*\x00\xdd" +
	")\xe8fL{*:\x85\x03\x05\xf1\xf3Q\\\x13\xed" +
	"R\xce\xb4w\x0d+<?d\xf3\xe9\xe9\x9c\xab[\x05" +
	"\xdd)0o\x89\xfe\xda\xae\x8f\xfe\xe2\xca\xdf\x8f\xd1\x12" +
	"]\xb1K\x1b\xf4\x8a{L\xd9\x97\xff\xfd\xc7\xaf\xfd\xd7" +
	"\xcb\xbb\x84li\x0a\xeb\xcd(\xbaa\xb9\x13\xba\xcb\x03" +
	"a_\xfa\xb3\x07\x8f\xbc\x9c\x99\x1a\xf7\xa5\xb1\xe6\xe3H" +
	"\xff\xff\xa9?\xbd\xf8\xad\xdd\xd7\xcbu\x0f+\\w\x8b" +
	"'Z\xf7q\xa4\x9b\xea\xde\xec\x1a\xa6\xa1\xec\xa6\xddr" +
	"\xfd\xf4\xb4\x917\xb8\x95\xaf\x05\xd2\xfd\xf4\xef\x1f\xfd\x1e" +
	"\xc1\x96lV\xf0\x12\xf9\x8a\x04^\xe2]\xf0\xdd;\xf1" +
	"\xdf\x1br\x17\x1e\xf7\x82\x03\x87\xd2\x8c\xd5\xf5/[\xb5" +
	"~\x02U{\x17<!_\x90ai}v\xc8\xb5\xc7" +
	"|\xa5\xf4\x0fq\xb3.\xeb\x8e\x9b\xdb\x94\xd9\x00z\xc5" +
	"\x9d\xb4s\x9b2\x09lMC\x17\xfc-\xd5B\x82\x99" +
	"u90\xed]B\x10+m\xd1W\x9e\xa0T\xe3\xf1" +
	"\x047e&\xc1\xc6zM{W\xd0\xf5\x8f\x9fv\xc3" +
	"\xbfd\x1f\xff\x83\xa3\xa5\xb0\xa6@j\xf5\xd0\xd2\x7fy" +
	"\xfbkg\x93T\xde\x9a\xc0\x9e\xc815\xb3\xae\xc1Z" +
	"X2\x80\xc5\xa6Q2\xdc!S\x87\xda\xfa\xe9i\x9e" +
	"w\xbd*\x0e\xbcDo\xa0\x84[\x99\xbeI\x9d5\x0a" +
	"\xd4\x9d8x\xe4\x81\x1f\xe81r\xafZ\x86\xeb\x18." +
	"?\x81\xab$\xb3\xa5\xee:\xbaU)\xdb\x0e\xb8\x9e\xb8" +
	":=\xdd\xa2r\xd4`\x06-\x9d+\x8e=5\xcc\xe9" +
	"V\xd3F^w\x0d\xd5\xb6Z\x88\x1b\xa5\x92=\x85\x83" +
	"\xb9\xd2\xd8\x921uS\xbf<\xd6\x8e-\xb7q\x8d$" +
	"\x97.\xe0-{\x1bn\xf4\x02\xdeH\x14\xf45\x14\xbc" +
	"\x17\x16\xf4\xb7x\xe0b\xad\xe0\xd8f\xad\xc2\x12F\xe5" +
	"\x9b\x9e}Q\x7f\xff\x07w\xbc\xbe\xe7\xca\xedbt\xe6" +
	"Q\x13s\x0d\xb0\xad\xf5\x16wf\x82\x09x(\xfa\xce" +
	"@S\x05\xe3~\x9b\xfe\xf6\xec9\xe7\x9c\xf7\xe7\xb7\xad" +
	"m\xbe\xc3\xb8\xdf\xb6\xdf:\xf9?\xedN>7K\x02" +
	"\xba[\xb2+\xe5\"\x07\xc7\xc8\xa3\x86_\xe9tu+" +
	"\xcf\x1b\x16\x85\x82x\xa7}\xf6\xb8c\x17\xaa\x90\xf7\xba" +
	"\x07xC\xf7YEc\xcapm\x96p\xc66\xf6K" +
	"\xb6R\xbd\\\xc9\xe8\xb3\x19\xc3R\xb8\xa3\x9b\x86\xe8\xdd" +
	"a^v\x8b\xc1`mX\x1c\\#_\x19\xd7\x1d\x16" +
	"'E\xcbw\x966\xa9Y\xd1\xe3\xabY\xcd\x0a\xf2p" +
	"\xa0Z\xbd\x08\xb8W\x1f\x04\x15r\xaf\x83\xa4[\xbdJ" +
	"\xfc\x15\xe4\x87@\xd2\xad~\x0e\xb8\x03\xbe\x8e\xfc\x1d\x90" +
	"\\Fo\x01\xeet\xef ?\x0c\x92n\xf5K\x92\x7f" +
	"\x17\xf9G \xe9VG\xc0A\x1d\x01\xf9g \xe9V" +
	"\x9f\x02\xea\x14\x9f \x8f(\x92n\x05\x0a\xee\x80\x11\x05" +
	"U\x07E\x01\xf0<F\xf3\x15\xdc\xb9\xe6!^\x84\xe2" +
	"\xedmB\xb5Z\xa8\xe0\x06\x98B~:\xf29\xedB" +
	"\xb5ZF\xf2K\x91\xafD>w\x8eP\xadV\x10\xef" +
	"F\xde\x83|\xde\\\xa1Z\xad\xa6\xdb\xf6 \xbf\x08\xf9" +
	"\xfcyB\xb5\xba@AU\xec|\xe4\xc3\xc8O\x9a/" +
	"T\xabA\x05\xbbm\x00\xf9(\xf2\xc4IB\xb5\x1aQ" +
	"p\xa3\x1eE\xbe\x05yGB\xa8V\x9b\x89oA^" +
	"Ph\xe75\xcc\x9cn\x15`\xc8\xb6\\n\x05k\xcf" +
	"\xe1\xbf\xa0}\xc20\x87L\xbd\xd6\xaa0\x8d\x85\xe5\x8d" +
	"\x0d\x03\xe8\xd4\x01\xe6]\x95sm\x0b\xb8\x7f\x19\x0b\xbc" +
	")\xa6^\x9a*\xe8\xf2=\xa6\x0dn\x16\x86\xf42\xeb" +
	"\xd4\xf3\x86[k\xb8=\xda \xbak\xb0`]\x11\xbc" +
	"\xcc\x9d\x92nq\x0b\xdc\xcb\x0c\xd35\xac\x99\xceq\xdb" +
	"\x08\xac\xbc\xa0\xe5\x93|\xd6e\xf1\xaa\x13\xda\xaaH\x07" +
	"K%\x9b%,\xa3Zj\xd8\xa5\x07\xd2~\xd3\xc7\x0c" +
	"\x17\xc7\xbe\xdb8\x05\xdd\xa0|hlBgq\xd7\xf0" +
	"\x1c\x1d\x07\xba\x07\xbc\x82\x8cmT\xc0\xad:|\x9c;" +
	"\xf9Nn\xb9\x1b\x86<\x91\xcb}\x91\x09}\xd70K" +
	"s\xab\xd2\xfc\xa4\xb6a\xae\xab\x9a\xdbaX\x94\x1d\xf5" +
	"\x16\xd0l\x01\xcb\xc8\x0f\xe9\xce\x94\x0d\xd6\xb1\x8a3\xba" +
	"\xebrp\xe4\xe2\x13\x99\xb0\x86\xcb\x9b'\xec9\xc1\x84" +
	"]\x01\x97\xe0H\xc5\x09\xd2#O\xd8\xd5\xd0\xc7Xn" +
	"%\xf25\xf2\x84\xed%\xf9\x1e\xe4\x17\x81d\x0c]@" +
	"\x13\xf6\"\xe4\x1b\xe5\x09\xbb\x1ep&\x0c#\x1f\x97'" +
	"l\x86&\xec(\xf2-\xf2\x84\xddL|\x12\xf9V\x90" +
	"&\xecU\x80\xaaf\x01y\x19$c\xa8\x04?d," +
	"WF\xbe\x07B\x1fo\x7f\x0d\x96\xa0\x0dp=\x16\xdc" +
	"\x82-\xf7|\xbc7\x03\xce\xb4\x9b\x10?\x00\x0a\xd4M" +
	"\xdd5\xdcj\x81\xb3`\xe9\x1f\xb8d\x80\xb1\xce\x8ai" +
	"\x97y\x0b\xdd\xad\xc8\x8d\x99\xa2;6\x16\xc8\x1f\x18\xc1" +
	"\xd7?\xe39\x98\xc0\xe5N\xc3\xe2{\xe8\x9a\xec\xc0\xf1" +
	"\x86V\xc1\xd1\x0dK\x9f\xe1\xac\x93vCya\xdf\xb9" +
	"cl\x98\x97\xed\x0a\xeb4pM\xf7\x8a\xbe1@\xf6" +
	"\xfb,)\x13\x8ak\xec\xe4\x13\xb6\x8d\xd3\xa4\xe1\xb6\xd7" +
	"\x0c\xd0\x96[\xe6\x16w\x1d\xd0\xa7L>\xaa\xd7xZ" +
	"\xb4\xady|\xe5\xca<\xaf\xe2&\xbf\xb1Z\xaaV\xd6" +
	"\xe9&nQC\xb6\xe3\xf0\xbc\xb4\xeb{3\x8c\xcc\xf8" +
	"\xb4\x18Lp\x12\x83q\x15\xa0#\x0c\x9a2@\x18\x8c" +
	"K\xf5X\xe3\xb2\x93\x82\x0f\xd9n\x90\"_\xc9\xc1\x89" +
	"0\xca\x9d\x1c\x9c\x0a\xa3s\xc9\xc1\x0b\xc3\xc0Jr\xed" +
	"\x8da\xdc\x04\xc5\x82\xe0Or\xf0\x920\xba\x99\x1c\xbc" +
	".\x8c8%\x07\x9d0\xe4\x88?\xd6\x97\x8cJ\xc5\xb0" +
	"-\x06\x95\xba\x1f\x01\xc1uAO\x0f\x8d\x0f\xeb\xae^" +
	"\xcf\x18y\xc7\x1e2\x0d(\xe9.G\xc2X}\xbch" +
	"\xbbv\xa5f\xb1\xb8[\x9c\xaco\xb0MC\x9f\xe1\x93" +
	"8,\xd6[\xbbk%>H/\xc4pk\x93l\x94" +
	"\xeb\xd3x\x8fN\xbc\xc9d\xdd\xff\xc9\xe8w\xe5D\xfc" +
	"\x19\xeb\xad\x9d\x86c[%nI\xce\x1d\x96\x8d\x80\x14" +
	"uK\xc2T\xfdr\xae;\x93\xf6\xa5:\x8b\x9bU\x9e" +
	"\xed\x09f\xf6 m\x95\xe1\x8cT\xbc\xe8\xcdz\x9a\x01" +
	"\xc1\x8c\x04U\x04o2\xb4C\xd3\x84,\xd2\x04V\xc4" +
	"N\xcciB\x86\x13/\x0a)\x880\xa6\x95\xa8\x1a\x13" +
	"\xf9^\x9a\xc0\xaa\x98\xd87P=\xc1\xbcK\xc6#\"" +
	"xs3\xd5C\x13\xef\x0e\x9a\xc0Q\x11\xbc\xb9\x9d\x16" +
	"\x94}\xc8\xef\xa1\x09\x1c\x13\x13\xfbn\xb8\x8f\xb1\xdc=" +
	"\xc8\x1fB>'.\xb6\xe2\x07\x89?\x84\xfcq\xe4s" +
	"\x07\xc4V\xfc\x18-\x10O\"\x7f\x9e\x16\xb2\xe5\"x" +
	"\xf3\x1ct1\x96;\x80\xfc (\x90\xd6\xcd)^\xf0" +
	"\xa6`}\xc7\xda9\xaf\xfdq\xf9\xc5\xb4\xac\xaa\xb1\xb4" +
	"c\xe4\x876\xf5\x05\xa3^\xd6\xe1\x866\xf5UX8" +
	"\xec\x83\x17\xe1\x0d\xfb\xa0\x8eN\xc7\xc8\xfb\xfa\xaf\xcc\xd3" +
	"\xc4+\xc7\xaea\x97a\x15re\xce\xa1\xb0\x91V\x1a" +
	"y>\x9b\\\xcf\x17\x0dk\x86uJ\xd3\x98A\xdd5" +
	"J<\xe7\xf22\x0b\xb7b\\!\xc8\xe9\x0d\xc2\xeb=" +
	"\xcc\xe3\xe1\xc4\xef\xa3%\xc4\xb0\x8e)\xb0F\x16P|" +
	"\x81\xb2[\xcc\xd8\x16\xad11\xa6Dc*\x83\xb8\x93" +
	"/C\xa2~p\xdf\xbc\xde\xd9\xf8\xbf\xfe\x01>D\xe2" +
	"\xc4\xbc\xc6\xc7\xf7\xccw\x92\x16Kc=Hd\xc1\xb1" +
	"\xee\xfb\xea\xc5X\x0f<\x90\xbd\xab\x14\x08\xbd\x8d\xbe\x07" +
	"\xf2\x82\xeb\x18\xcb\x9e\xafBvR\x81`\x81V]\xee" +
	"H\xde\xff\xc1\x9d\xbaa\xe2}\x19\x00S\x00\x184," +
	"\xe5()\xbd\xee\xa0-M\xab\xdc\x17DX\xfd\xc5\xc1" +
	"5:iqh\xf2\x9e\xf6\x85Q\x86\xc0{\xba\xfa\xc2" +
	"\xd0\xa5\xda\x18\x95j\x0aY\x9dH_\xa3\xca>\xe9\x19" +
	"\x7f\xae\xe4\x1b\x0d=\xf4\x1dAk\xf4\x1b\x19\xcb\x16T" +
	"\xc8\x96\xa5\xd6\x94\x960\x96-\xaa\x90u\xa50\xc3\x8e" +
	"\xf7\x19\xcb\xce\xaa\x90\xbd>\xd4\xdb\x93\xd7N1\x96\xbd" +
	"F\x85\xecM\x0a\xd4\x0bF\xa5\xcc\x9d\x0a\x9aW\xa3\xdc" +
	"\x9a\x09w'\x06\xaa^\x08\x9e\xa0`LOW+\x86" +
	"\xadX\xb4\x05\x92/\xc4EC6Q\xd0\x9dP\xcc\xa2" +
	"\xcd\xd0pY\xdc\x90\xb6\xa4\x13XH[\xbb\xca\x13\xf8" +
	"\xf04\xc2\xc2\xa4#\x98\xaa\xfb\xces\x167J\xc1\x08" +
	"\x03H\xae\x9aj\xf6q\x03${\xb1\xb3\xd6\xa8\x90\x1d" +
	"P\xa0^\x94\xaf\x84DX-\x83h\x02\x07\x96\xa9\xbb" +
	"\xbc\xe2n\xd4\x81\xe4\x867]\xce\x18\xa8L\x99\xaf\xd6" +
	"\xeb'>\x96\xfc\x8d\xa4b\xc4m\xab\xd24\x92.i" +
	"\xe5\x87\xbfD\xf2\xc3\x1b\x15\xbb\xecp\x8b7\xac\x14\xb6" +
	"e\xbb\xdci\\=N\xcc\xdd\x8e:1\xaa\xc4\xe1\x98" +
	"\xf2\x14\x03l\xd7\xd6 \x8f\xe0V\xb2z\xf6\xa1Ur" +
	"\x8f\"\xe5\x11\xdc\xad\xfc\x86\xb1\xdc\xfd\xc8\xf7+R\x1e" +
	"\xc1\xc3\x0a\xea\x92\xfb\x91?\xa9HF\xe1\x13\x0a9\xa0" +
	"\x91?\xaf\xf8:&.\xf1\xcaO\xd1\xe8D\xfe\xba\xe2" +
	"\xeb\x98\x8c\xf5\xbf\xaat\xa1\x0ex\x08\x0b>P\xa4D" +
	"\x82\xf7\x14\xdcs\xdeE\xfe\x91\"%\x12\x1c\xa1\x06}" +
	"\x82<\"'\x12\x80\xba\x9b\xb1\x09U\x85\xdc<9\x8f" +
	"\xa0\x1dq\xae\x0dyJ\xce#H\xaa\xb8\x15-B\xde" +
	"-\xe7\x11,W\xd1:\xebF\xde\x13\xe4\x110\xa6\xad" +
	"&\xf90\xcf\x82\x1c\xee\x94g\xf1\xdd\x86\xbc\x09r\xb8" +
	"3\xa6\x8d\x10\x0f\xf3 \xc8\xe1Ny\x10\xf75\xe45" +
	"\x90\xc3\x9d\xf2\x1a\xeek\xc8S \x87;n\xe1\xeaT" +
	"C>\x029\xdc\x19\xd3\xaa\xd4\x9e\xa6<\x02\xc6\xb4\x1b" +
	"\xd4\xeb\x1a\xf2\x05\xc8\xdf\x8e[\xbb\xfaLC\xfc\x9f\xdc" +
	"\xed\x8ciw\xaa\x1f6\xc4\xed\xc9\xddNq{l\xff" +
	"C\xc8\x1f\x0f\xf2\x08\x18\xd3\x1e\xa3\xfey\x1c\xf9\xb3*" +
	"E\x8d\x0c\xd7\xc8\xeb&\xf8\xe3\xaci\xdf\xf3,H\xae" +
	"\x146\xd6\x0a\x8e^5\x8d\xfc\x90m\x15\xaa\xf9\xb4\xd0" +
	"\xc2B\xc1\xaa3\xad\xe7\xf9\x04\xd8\xd5\x99\xa2\xc5+\x15" +
	"i\xa87h\xeeF%_L\xe8\xceL\x18\xbd-z" +
	"5+^\xd5\xa2\xe6\x09^P\xab\xb3a\xfd\x96\xbdk" +
	"0\x9f\xaf\xaa\xa5\xaaI\xdb\xca\xa4\x88B\x16&y\xa9" +
	"\xcc\x1d\xdd%;\xd5\x97\xde\x9e\xdf\xa0\xe7]\xdb\x91'" +
	"\x9c\xeb\x09*U\x87\x8f\x1a%\xc3\xdd`;\xa3\xc6\x8e" +
	"\xaa\x91.\\\x86{c \x98\xf7\xd4r\x96\xb6\xad\x9c" +
	"\xe5{K\x9b\x0a&t\xc3jh\\F\x9f\x1dT\x0a" +
	"\x05\xb2#t\xd37C\xc3\xdb[|\x17V6\x0c\xa2" +
	"$c@\xe3\xf5\x13\xdc\xe5\x8a\x85W\x0f\xe9e\xb2\xe4" +
	"3\x86%]\xef\xf0i\x87\xf3\xdd\x1c\xfc}Euz" +
	"\x8fW\xd8wta\xcb\xae\xa2\xb6s\xd3=v\xe9\xb8" +
	"\x9e\xdf\xce\xe2\x865\xf3E\xed\xd5g\xa5\xf6\xf2\x9dz" +
	"\xd9vt\x17\x0c\xdb\xba\x82\xbbzX2[\xd1\x87p" +
	"\xd8)y\xdd\x94\x97\xb8\x06\xcd\xca(UK\xeb\x15\xaf" +
	"\x0e\xc3\xb6FJe=\xef6\x8d\xce\x92>;\xce\x9d" +
	"\xbc\x0d\xa6\xe7\xf0T]9)@T\x0b#\x96\xe1\x8a" +
	"\xdc\x83\xa3\x16\xdf\xe3\xd9\xf4\x9e\x17O\xec\xe1@\xeb\xed" +
	"]\xc1z{^\x045\xff\x9e\x08\xda\xe8\x11i\xbd\xbd" +
	"\x80\xf8\x1a\xe4\x03\x11i\xbd]\x1b\xb9\xa4!`\xa9\x82" +
	"\xb0\xe9\xd7\x13\x1fF>\x1e\xf1L\x02\xb4\xe93\xc4\xc3" +
	"@f\xd4S\xfd7G\xb6\xa1\xed\x8e|+\x058#" +
	"\xc2\xa6\xbf*\x82\xf3z+r\x93\x02\x9cQa\xd3\x1b" +
	"\x14\xf0+\"w)\xc0\xe9\xa9\xfe;(0YF\xbe" +
	"\x87\x02\x9c\x9e\xea_\x8b\xdc\xd7\x10\xf8\x9c\x03B\xf5\xbf" +
	"!\xd2\xc7X\xee\x1a\xe47Q\x80S\x11^\xb8\xdf#" +
	"~=\xf2[(\xc0\xa9\x0a/\xdc\xcd\xd4\xfe0P:" +
	"?\"\xbcp\xb7\x13\xdf\x87\xfc\x1e\x0apF\x85\x17\xee" +
	"n\xea\xb7;\x90\xdfO\x01\xce\x98\xf0\xc2\xddK\xf2\xf7" +
	" \x7f\x88\x02\x9cq\xe1\x85{\x90\xf8\x03\xc8\x1f\xa5\x00" +
	"g\x9b\x08p>B\xedy\x08\xf9\xe3\x14\xe0l\x17\x01" +
	"\xce\xc7\xe8y\x1fE~\x80\x02\x9csD\xde\xd6S\xc4" +
	"\xc3\x80kj\xae\xc8\xdbz.\xb2\x04M\x1a\xe4\x07\x91" +
	"/\x9c'\xc2\x9b/P;\x9fE\xfe\x12\xf2\x93\xe7\x8b" +
	"\xf0\xe6\x8b\x91\xae\x86\x00\xed)'\x89\xf0\xe6O\"\xeb" +
	"p\xdfD\xfe:\xf2E\x09\x11\xde|5r6c\xb9" +
	"\x97\x90\xbf\x89|q\x87\x08o\xbeA\xf2a@wI" +
	"R\x847\x7fN\xfcu\xe4\xef ?u\x81\x08o\xbe" +
	"E\xfcM\xe4\xef\"_\xaa\x89\xf0\xe6/\x88\x87\x01\xe0" +
	"e)\x11\xde|\x8f\xc6O\x18\x00>m\xa1\x08o\x1e" +
	"!\x1e\x06\x80;O\x16\xe1\xcdO\xa9\x9f?A\x1e\xa1" +
	"\xf0\xe6)\"\xbc\x09\xd1+\x18\x9b\x88\xe2vM\xd1\xcd" +
	"E\"\xba\xd9\x8e8\xd7\x86<E\xd1\xcd\xc5\"\xba\x99" +
	"\x8cN0\x96\xeb@\xbe\x94\xa2\x9bKDts1\xf1" +
	"0\x8a\xdc}j\x0a\xba)\x8a\x8c\xf5\x9c\x8e\xfc\x1c\xe4" +
	"+\x96\xa6`\x05\x80\xb6\x8a\xe4W\"_\x83\xfc\xcce" +
	")8\x13@\xeb%\xde\x83\xfc\xa2\xa8\x02\xe9j\x85\x8f" +
	"\xf5m\xf2\xed\x0d\xfai\xb8\x81\xf9Q\xadp\x8a\xba\xe0" +
	"\xee\xe0\xb3\xbc]\xe0\x97z\x8cL/\x1fN\xcaP\xf1" +
	"\xe0\x84\xee\x1a,a[\x86\xdb\xc87\xdaU\x07\xcc\xda" +
	"e\xd3\xe5\xca\x98\x01M\x85\xe3\x05n1\xd5\xbf\x04\xe4" +
	"\xaa\xd26EX\x8eY\xd90\x8f\xcb\xc5\x9d\xc5\x92a" +
	"YGG\xf1:\x8bv\xd9\xb5Z\x84i\xca\x1b\xf1\x02" +
	"\xf1 \xc2\xfe\xec\x18\x10X\x9f\x95\xb1w\xd1\xd2\x01\xc6" +
	"X\xda*\xae\x09\xf3\xcaD\x1c\x04\xab\xc1\xa7h%/" +
	"jk(\x15\x89A]X\xda\xb9k\xba\\\xf1\xf2\xd6" +
	"\xea\xaf\xfdqy\xed\x9c\xd7D\x98\xd0\xa5'\xb7\xcb," +
	"\xed^\xacW+\x15\xdf\xa7w1\xf9\xf4\xf2\xba\xc9'" +
	"\x0b\x9c\xa5I\xc6\xf7P_0\xc0\x98\xba\xbd\xe0\x8bN" +
	"\x0d0\x96\xde>\xcc+\xba/\xd06\xc0X|\xda\x9a" +
	"=:\x94u\xf5N\xcbpK\xfa\xac\xdc\xfe\xd1\xff\x0f" +
	"[\x98\xd8\xae\x97<\x97\xf6\x81\xf3\x07\x18\xbb\xdaE\xc9" +
	"\xa0\x03R>\x0a\x9b\xf1\x8d\x10\xf5\xf9m\x19\x0c\xae\xf4" +
	"\xefq CYS\xe2\xca\x8bYBz\xc8\x81\x81\xf0" +
	"!-\x83%\xa4\xba{\xb0Dl}\xf2\xfb\x11A\xd1" +
	"+DP\xb4dX\xc1\x98\x92\xdeR\x1e\xb7\xc5F\xbe" +
	"\xc8\xf36 6\x184\x88{\xd2\x12^\x13\xdc\xbb\xa1" +
	"\x169TX/;\xf6t\x8b\xabv\x96m\xb7\x01\x93" +
	"W\xe5\x04\xf2\x9e\xd0\xf0\x1a\x1aO\x0c\xeb.eH\xaf" +
	"\x0cv\xdav\xc0\x958\x02*\xe4:@\xdai\xe7\x13" +
	"oC\x9e\x02i\xa7M\x12\x9f\x87|\x91\x1c\xeeZH" +
	"\xbc\x03\xf9R\x90,\x9b\xc5\x80+1\xee\xc6\xb9\xd3!" +
	"\xb4l\xb4e\xe4\x9d_\x84\xbc\x1b$\xc3f9\xc9/" +
	"E\xbe\x12$\xc3f\x05\xd5\x7f:\xf2s@2lV" +
	"\x91\x8f0\xf4\xfe\xfb\x96\xcdj\x92\x0f\xbc\xff\xaa\x9f\x09" +
	"\xca@\xdd\x1e\xb8\x1eT;\xc8\xcbT\xf3F\x98\x00k" +
	"\x97\xcaA\x0a-\xa5\x99\x06E\xdb\xa4\x1f\xea\xb6m\x81" +
	"Kc\xdb\xb6\xde\x9e\x9e\x9e\xb0d\xe7\x97\xf1n\x90\x87" +
	"\xc5\xf3\xe6V\xfcl\xf6\x91\xc2\xa4M0n\xd8V\x93" +
	"\x95<\xf1EV\xb2\x97\xc37\xc2 H\x1c\xaes\xdf" +
	"_\xdc\xc2J>\x9e\xa2\xe6\xa5\x03\x0aU-\xee\x99\xc6" +
	"o\x06\x03\xe8c\xda\x1b>\x8a\xaa0\x11\x0b<W\xda" +
	"\xe7\xd1\xef36\x11\xc3\x0d,\xe6'E\xe2h\x8b\xa1" +
	"=\xd5\x81|)r\xd5s\xd1.\x8e\xa1\xfd\xb5\x14\xf9" +
	"J\xe4\x11U\x8c\x9e\x151\xb4\xd7\xba\x91\xf7 \x8fF" +
	"\xc4\xe8Y\x1d\xc3\xfd\xf4\x1c\xe4\xe7#\x8fE\xc5\xe89" +
	"\x8f\xe4\xd7 \x1f@\x1e\x8f\x89\xd1\xb36\x86\xf6\xf8\x00" +
	"\xf2Q\xe4mq1zFbd\x87\"\xdf\x12\xf3\xa3" +
	"\xa5h\x87\xc6\xd0\xde\xdf\x82\xbc\x10\xf3\xa3\xa5\x8c\xf5\xeb" +
	"1\xca\xcb2\xb1`6\xe6\x87K\x19\xeb\xaf\x8a\x82k" +
	"\xb0\xe0\xa6\x98\x1f/e\xac\xff\xf7D\xc1>,\xb8'" +
	"\xe6\x07L\x19\xeb\xbf;6\x07\x0b\x1e\xc0\x82Gc~" +
	"\xc4\x941\xed\x11j\xeb\xa3\xc8\x0f\xc4\xfc\x88)c\xda" +
	"S\xc4\x0f ?\x18\xf3#\xa6\x8ci/\xd03\x1cD" +
	"\xfe:\xf2$\x90m\xdc\xffjl\x1d\xf9\x0e\xb0\xe0\x03" +
	",X\xd0!\x94\xb5\xf7b?d,\xf7\x01\xf2O\x90" +
	"kIa\x1c\x7fL\xfc\x13\xe4\x918*k \x8cc" +
	"\x88_\xc7\xd8D\x1c\xdf\x19\xe2\x85\x8a\xb0\x8d\x17\xc7\xdf" +
	"\xc6\x19\x89\xfc\"\xe4'\xab\xc26\xbe \x8e\xd5\\\x84" +
	"|\x0b\xf2S\"\xc26\xde\x1c\xff)c\xb9+\x91\xcf" +
	"\"_\x14M\xc1\"\xb4\xd5\xe3\xa8\x13\xcf\"\xdf\x87|" +
	"q,\x05\x8b\x19\xd3n\x8d\x93\xcf\x05\xf9~\xe4K\xe2" +
	")\x9c\xd3\xda\xc3T\xcf\xa3\xc8_B~j\x9b\xc8\xb1" +
	"\x7f1\x8e\xfd\xf3\x12\xf2\x0f\x90/m\x179\xf6\xef\xc5" +
	"I'C\x1eiC]m\x81\xc8\xb1\x876\x87\xb1\x89" +
	"6\x1c\xa2\x88O\xd3Rp\x1a\x0e\xd1\xb6\xef\xe3\x02\x87" +
	"|\x11\xf2\xceT\x0a:q\x81k\xc3q\x9eB~:" +
	"\xf2\xd3\x17\xa6\xe0t\\\xc8\xdap\xc8-E\xbe\x12\xf9" +
	"\xf2\x93S\xb0\x1c\x87n\x1b6\x7f%\xf25\xc8\xbb\x94" +
	"\x14t1\xa6\xf5\xb6asz\x90_\x84\xfc\x8cSR" +
	"p\x06v\x1b6'w>\xf2a\xe4\xdd\x8bD*\xda" +
	"`\xdb\xfb\x8c\xe56\"\x9fD\xbebq\x0aV0\xa6" +
	"e\xdb\xb0\xdb&\x91oE~\xe6\x92\x14\x9c\xc9\x98v" +
	"\x15\xf1\xad\xc8M\xe4g\x9d\x9a\x82\xb3\x18\xd3\x8c6T" +
	"\xc5\x8b\xc8]\xe4+\x97\xa6`%c\xda\x8e6\x1c>" +
	".\xf2k\x90\xafRS\xb0\x8a1\xed\xdb\xd4\x9e=\xc8" +
	"\xf7\"?{Y\x0a\x97f\xed\x866\x9c\xc27!\xbf" +
	"\x03\xf9WfS\xf0\x15\xc6\xb4\xdb\xdb\xb0\xfb\xef@~" +
	"?\xf2s:Sp\x0ec\xda\xbdm\xbf\xc1a\x8e\xfc" +
	"Q\xe4\xabOO\xc1j4%\xdap\xe1~\x08\xf9\xe3" +
	"\xc8\xcf]\x9e\x82s\xd1\x94hC\xd5z?\xf2'\x91" +
	"\x7f\xb5+\x05_eL{\xa2\x0d7\x8cG\x91\x1f@" +
	"\xdesF\x0azpZ\x90\xfc\xe3\xc8\x9fE\xde\xdb\x9d" +
	"\x82^\x00\xed\xe96\xdcH\x9eD\xfe<\xf2\xbe\x15)" +
	"\xe8C\xd3\x83\xf8\x01\xe4\x07\x91\xf7\x9f\x99\x82~4=" +
	"\x88?\x8b\xfc%\xe4k\xceJ\xc1\x1a4=\x88?\x8f" +
	"\xfc\x15\xe4\xe7\xadL\xc1yhz\x10?\x88\xfcu\xe4" +
	"_\xab\xa5\xe0khz\xb4\xe1\xf0\x7f\x1d\xf9;mM" +
	"K\xb1\x1f\xe7\xcf\xeb\xce\x94=[3\xc1\xcb5w\x13" +
	"\xc5]z\x0d\xf5O\x881\xa8\x17\xf8\xb4^5\xdd\x09" +
	"E/\x18$\xb1\xb9\xc2)I\xad\xd3\x08\x93\xd4\x18P" +
	"r\xd7:\xc36\x15{\xc6\xc8\xeb\xe6\xd8\x06c\x96\xc4" +
	"\xc3\xf5\xdd\xb0\x0c\xd7\xd0\xcdo\x82\xef\xb0\x09J\xcc\xea" +
	"l\xd5\xa9\x8d\x0d\xb1D\x18\xb4\x15&\xff\x90c\x97\x87" +
	"\xc1\x10\x86yxA\xc5\xd5g\xf8\xa0\x9b\x01}\xd6\x8b" +
	"\xeb\xb4,\x1b\xa6\x0bU\xc9\xdfS2,\xa3T-\x8d" +
	"\xc1\x90m\xe5\xb9\xe5:\"4\xd2\\>\xa9z\x0e\x92" +
	"\xaa\xc37\xd8\xce`\xa5b\x94\x0cr<H\x9e\x1c\xbb" +
	"\xec\x9e\xb0\xac\xe7\xe58!Y\xcbk\x9b*T\xc2\xc1" +
	"){'\x17n\xb5u\x86]\xd2\x1b\xdcm\xbe,\x08" +
	"\xd9u=\xc7.\x1b\x1f;v\xd9\x84\xad\xdan\x18A" +
	"\xe0;\xb9i\x97K\x11n\xb9\x83\xf9<7\xb9W{" +
	"m\xccp\x1d{\x86[9\xd7\xe1\x95\x0a\x838S " +
	"\xce\xc0\xcbK\xb1-\x10>\xb1\x8c\x9d.\x18\xd3\x06w" +
	"d\xddS\xf7\x1e\x16\\>\xc1u\xd3\xb4\xd3\xf9\xc6\xbe" +
	"\x9f\xd2+|\x92\x97\xca\xe0uP\x10)B\x81\x93\xb0" +
	"\xc3\x9d\x19\xdd\xca\xe8\x86b\xb9\xdc\xd2\xad<\x9f\xe0\x95" +
	"\xb2\xe1\xe8.\x850Z\x09_\xec\xd8\xb0\xcb-\x92\\" +
	"Z<D\xb3\x1c\x0d\x97\x8c>\xabL\xd8\xb6;\xe6\x0f" +
	"\x0b/?\xafI\xd6\x1b\xc1\x9b\x00\xeb\xc6\x97\x11\xd7+" +
	"\x95f\xa1\xc0\xcd\xbai\xb66\xc3\xad!\xbb\x93\xf2z" +
	"Z\xdf\xd7\x9eR\x0cs\x83c\x97r\xae\xed\xe83~" +
	"\x1aa\x93\xac\xee\x0d\x01\xa8Z\x05\xca\xc9gA\xdf@" +
	"P\x1d]\xbf\x89%\xb0\xfc\xa8R\xbdT6[\x85:" +
	"ug\x86\xbbc9\xf0\xca\x87\x13\xad\x8a\xfb\x19\xf4\xc8" +
	"#yls\xd9\xd5a\xbb\x88zI^K\xdbv\x87" +
	"\x8d\x8a\x0b\x8e1U\xc5\xae\xee$\x81p\x850u\xcb" +
	"\x1d\xe6\x16KPF\x8f?v\xf0\xb2\x8b\x1d{\x17\xeb" +
	"t\x8b\xa3\xfa\xccQSQ\x09\xa7\xcc\x04\x89&\xec]" +
	"R\x1b\xbdw2\x01~\xdaF\\~\x02\xac|\x9c[" +
	"\x1c\\o\xa0\x87\xb9J^\xe9\x06\xdb)\xb1\xb4X\x91" +
	"\xc25\x04\xd7\xc9i#\x0fx\xc7Qn\xcd\xa8\xb2\x9f" +
	"\x9c\x16\x98i\x97urg\xa8\xea\x06\x0fB\x99\xa9\x86" +
	"5\xa3L\x86-\xde\xc8u7\xd7I\xb3%t-W" +
	"]j)pS\xaf\x0d\xeb5\x9c\xcf~\x1d\x05\xc7\xae" +
	"\xce\x14\xdd\x11\x85\\\xa0\x9b\xac\x0d\xdcq\x0d\xd3pk" +
	"M-l\x08[RJc\xe3Y<B\x8d\x91\xce\xc6" +
	"3j\x0c\x1aN\xa4u\x1cn<\x91v\xe8\xd0\xedM" +
	"\xe7\xcf\x0e\x1en:\x09w`O\xd3I\xb8{\xdc\x01" +
	"?-\xd6\xa0$\xd0\x1cv\xd4h\x9a\xeb\xd3\xebg\xcb" +
	"_>6\x17X!\"K#8-\x9e\x84\xfb\xfc\x1c" +
	"\x93\x11\x90\x0d\x139\xee\xfa\xb6\x17b\xbd^\xb2J\xae" +
	"\xfd\x0dc\xd9\xbd*d\xefW\x00\xbc\xb0\xeb\xbd72" +
	"\x96\xbd_\x85\xec~\xdfS\xcbX\xf2\xe1\xfb\x18\xcb\xee" +
	"W!\xfb\xa4\xb4g*\x85I{\xc4\x0b\xf8\x05\xb7\x0c" +
	"\x83\xd9A\xf3\xbc`\xb6|Y\xc6\x8b\x09\xd2\x95i\xf1" +
	"T\xc7\xbe\xd2\x8f*B\x90Tstt\x11\x1a\x1a\xf1" +
	"%,\xa8\xcb\xc5J]*\xdb\x16%\x1bJ\x07\xca\x00" +
	"\x92\xeb\xd7\xb5:\x15w\x1dc\xd9\x8d\"\xf0\x1f\x84\xab" +
	"\xb3\xbb\x19\xcb\x8e\xab\x90\xbdR\x81\xabi\xad\x1d)@" +
	"\x94)\x10\xad\xfb\xff\x18c\xf5\x1a\xden\x9c;\x80\xab" +
	"\xaa>#\xf9\xfd\xa9d\xd8\xa9\xb14\xe5\xe19_&" +
	"X:\x961\xac\xc1r\xd94\xf2\xf2\xf98\xdf\x1c\x94" +
	"\xce\xc7u\xb5z\x9c.\xf9\x80\\\xdb\xd1\x87\xfc\xe2\xa5" +
	"0\xdc\x13/\x85&v\xbd\x80\x13v\xc4\x1afq\xbd" +
	"V\x09\xa6\xec\x09\x9e\x82k\x19\xd4\xdd\x12X\xae\x97+" +
	"h\xc0lUPS\x96\x83\xba\x86\x82\x1aw\x19\xf9\x1e" +
	"9\xa8[SP\xb3\xdb\x83|\xaf\x14\xd4\xed\xbfA!" +
	"K\xee\x16,\xb8K\x8a\xea\xf6\xdf)\x0a\xc2\xf0\xb0\xef" +
	"\xfcxXy\x19uY\xe4\x07\xe4\xa8\xeeS\x94\xfcz" +
	"\x00\xf9A9\xaa\xfb\x02%\xd1>\x8f\xfc\x15Er~" +
	"\xfcDA\xb3\xf9\x15\xe4\x87\x14\xc9\xf9\xf1sJ\xc6}" +
	"\x13\xf9\xbb\x8a\x14\xd6\xfd\x05=A\x185\xf6\xc3\xbaG" +
	"H\xfe0\xf2\xcf\x14)\xac\xfb)\xf6P\x185\xf6\xa3" +
	"\xba\xed*v\\\x07\xf2\xa5rTw\xb1z\x85\x1c5" +
	"\xeeM\x1cP\x85\xe9\xba\x9c.X\x89\x05k\xb0\xa0\xe3" +
	"i\x95l\xd7\xfe^\xf5\x19\x90\x0f\xd0\xf7&\x9fQ\x85" +
	"\xf5\x9aQ\xdf\x079\xe4\xdb\xbb\xe0\x7f\xab\x14\xdb\xed/" +
	"\xa9W\x80\x1c\xdc\xed\xd5\x9eU\xc9\x80\xed\xbfA\xbd\x04" +
	"\xe4\xe3\xda\xbd\xa9\xe7T2a\xfb\xefV'@\x0e\xd8" +
	"\xf6.\xfc\xb1*\xac\xd8\xc7T|\xd9Ob\xc1\xf3\x14" +
	"\xb1\xd5-\xbb\\\x9b\xe0\xca\xb4\xc9)\x8f\xdd\xcf\xe8\x88" +
	"s\xcb\x95c~\xdc\xe1V^A5FR)\xad\xc4" +
	"D\xc3f\xe7\x89\x01\x1f\xe5\xfa\xf4\xa0\xc3\xd3\xfa\x88U" +
	"\xe0\xb3\xd2\xcen\x90b\xa5J\x9a\x95|\xfa\xb4\xb7!" +
	"\x1f\xea\xf8\xb2}\xb2\xac\xa7s+\x92r\x85*\xa7\x0d" +
	"n\xb3\xcc \xf8\x09D0\xd6\xa2\xe1\x83\x94l&\xab" +
	"\xfavIw\xf5!E\xc4\x92Q%\x1c4\xcbE)" +
	"\xfe\x18dE\xa7mk]p\xfc\\\xc4\xa9I1\x04" +
	"\xbf\xedik\x82\x17\xaa\xb3\xcd\xc6\xc7\x18K\x0f\xf3\x92" +
	"n\x15\x8e\xbaRi~\xea8\x97\xa2\xb4\xc7\x93\x0a\xc3" +
	"\xb5\xae\xed\xb8U\xbbb0U\x0a\xaf\xeb\x85m\xd5\x8a" +
	";a+\xb6K\xda\xda\x06\xdb\xa1S\x02N\xdc.W" +
	"\x82 \x06\x9f-s\xc7(\xf1\x98\xe5\xea\xe6z\x0b\xfb" +
	"l\xbc\xc8-\xdb\xb4gj\x97\xe9\xd6\xcczk\x86\x9b" +
	"\x92&\x82o\xc9\xb6*RfV\xcb\x1aDF\xa6[" +
	"\xe4\x15\xa3r\xacj\x12X\xcfQ\xd5D\xc2j6\xda" +
	"U\xc7\xacm\xd89\xb4N\xaeP5*\xc7\xbbh\xd2" +
	"o\xe1\xa8P\x18P\x8d\xa0\xbd\xaf\xe55\xc3F\x05/" +
	"\x1a\xd6\x0d\xb3\x86J\x9ag\x1aM\xda9\xdb\x003\xbc" +
	"\x86\xaa\xbe\x94+\x8e\x15\x9c\xe6 M*\xe1l0f" +
	"\x03\xb1\x13\xf0\x8b\xb6\xcc\x1f=\xd7\xcf\x16\x8d\x9b\xd5\xe3" +
	"\x9cvO\xb6<\xee^\xe3\xba\xe3\xef\"\xc78\xe4\xfe" +
	"e\xb2\x97&\x9b2\xcf\xb61\x96\xdd\xaaB\xd6\x0cS" +
	"\xf8\x8c.)\x1b\xcds\x83&K]R6\x9a\xe7\x03" +
	"M\xee\xb8\x90\xb1\xac\xa9BvV\x81\xfa\xb4\xc8\xcc\x1d" +
	"e\x09\xbd\xc6\x83&\xc7\xcbE\x1b:\xc2\xd4aq\xe6" +
	"%>m\x9b\xd0\x11\xe6\x10{G\xcb\xb9\xb5{0\xef" +
	"BG\x98O|\xe2Gdp\xb7\x0f\xcf\x91'\xdc\xa3" +
	"\xb7yG\xda\xd1\xfdg\xcd\xack\xa5\xb5L\x84Z\xcb" +
	"\xb1\x8c\xa2\xab\xadI2{B[Y\xfcn\xb4\x82N" +
	",\xca\xb1\xc1N\x8b\xa4\xe6\xa6\x06\xf7\x9d\xf0\xc7\x07." +
	"\x09\xf5\x92N\x97\x97\xca\xdf\x0c\x9aI\xbf\xfa\xd64\xe4" +
	"\xbc|\xb3oMO+\x97\xfa\x17e3\x86\xf3\xbb)" +
	"\x9fQ\xe4B\xac\x09\xd4\x94\xab(\"\xb2\x05T\xc8\x15" +
	"\xe4\x08\x8d\x0e\xa8D\x14\x91\xbbr\x84f\x07\xa5/\x87" +
	"\xe7\x09\xfc\x08M\x8d\xce7\xec\x09\xd2\x9d\xfd\x08\xcd\x0d" +
	"t\xc0(Lw\xf6\x95\x94\x9ba[C\xba\xb3\xaf\xa4" +
	"\xdcN<Lw\xf6\x95\x94\xbb\xe1\x99\x86tg_I" +
	"y\x10~\xcaXn?\xf2'\xe5\x08\xcd\x13\xd4\xfe " +
	"\xad9PR^ \xfe\x12\xf27ARR\xde\xa0v" +
	"\x86\x07\xad\xfc\xc3\xdeoQ{\x0e!\xff\x00\x14HX" +
	"\x93z\xb5\xd9T\xcd)\"\x7f*\xecu)[\xe5h" +
	"'\x88_\xb2\xa3\xaa;\xee\xee\x09\x1dv\x1d\x9dpT" +
	"\x10d\x90\xa9\x86\xd3\x0c/c\x89\x86\x94'\x0fod" +
	"\x89j\xa9Z9\xca\xe4U\xd0d\xf5\xd3|\x06\x0d\xd9" +
	"\xe9\xd6J\"[\xd5\x1d\xd5\xdd}|\xa1\xcb\xf4\xf0\xa0" +
	"\xcd\xb1d6VKU\xa84\x9c\x8d\xc0\xed\x9e\xa9\x05" +
	"\xbb\x01fl\xa3\xc2\x12n\x90\xb8$\x0e~\x9e\x88\x12" +
	"\xee}(\xa2i\x19\x91\xf3|\xaeh\xc8\xe7\x09\xbe\xcf" +
	"\x14\x99\x92\xf3y<\xcbQ[\x1f\x99hH\xe7\xf1\x8c" +
	"G-Ci5\xe3\xc8\xaf\x0c\xd2|P\xc3\x8f88" +
	"u\x90\x17\x824\x1f\x9c:\xc4\xc3t\x9e\x98\x97\xe1o" +
	"P\x9aF\x98\xce\x13\xf72\xfcw\x10\x0f\xd3y(\xcd" +
	"\x07\xa7\x14\xf1Y\xe4\xd7\x07i>\x8ci\xd7FP\xdf" +
	"\xdd\x8b|\x1f\xa5\xf9(bh\xdfJ\x9c\xd2p\x9e\xa5" +
	"4\x1fU\x0c\xed\xa7\xa9\xfd\x94\xf6r\x98\xd2|\"B" +
	"\xff\xfe%\xb5\xf3\x03\xe4mQT\xc0\xa3B\x01\x8f\xd2" +
	"W\x00\xda\x82\xbc\x8e\x93bB\x01_\x1e\xfd\xbe\xffu" +
	"\x00\xfa\x0a@\".\xf4\xef\xb5Q\xd4\xfb\x07\x90_\x89" +
	"\xbc\xa3M\x84\x8e.\xa7\xd3\xf8t\xaa\x7f\x16y\xb2]" +
	"\xa4UV\xa3\x8e\x7fJ\x9fN\xdd/\x98#\xd2*o" +
	"\x8e\xde\xe7\x9f\xba\x7f\x08\xb96WD\x8e\x1e\xa4S\xf4" +
	"\xfb\x91\x1f\xa4\xcf\x18\xb4\x89\xc8\xd1\x0bt\xdf\x83\xc8_" +
	"\xa7\xaf\x18\xb4\x0b\xa5\xfbUj\xe7\xeb\xc8\xdf\xa1\xaf\x18" +
	"\xcc\x11\xa1\xa3\xb7\xa2\x1f\xa2}\x82\xfc#\xfa\x8a\xc1\\" +
	"\x11::B\xfc\x13\xe4\x91\x98\x02\xc9E\xf3D\xe8\x08" +
	"b\xd8\x9fm1\x15r)\xe4\x8b\xe7\x8b\xd0Q2\xb6" +
	"\xbb!\xcc\xb8\xe4$\x11:ZL!\xb40\xccxj" +
	"B\x84\x8eVP\xe4k%\xf25\xc8\x97v\x88\xd0Q" +
	"o\xec\xb6\x86p\xe22\x10i>\xcd\xe1\xc4\xd3\xe6\x89" +
	"\xd8\xd1\x08\x851)\x9cXD\xde9_\xc4\x8ex\xec" +
	"e?j\xb8\x17\xf9\xe9'\x89\xd8\xd1\x0d\x14\xba\xdb\x8b" +
	"\xfc~\xe4\xcb\x93\"\xcf\xe7^\x0ac\xde\x83\xfc!\xe4" +
	"]\x0bD\x9e\xcf\x83\xb1+\x1aB\x86gh\"v\xf4" +
	"\x08\x85C\xf7#\x7f\x12ywJ\xc4\x8e\x9e \xfe8" +
	"\xf2g\x91\xafX(bGO\x13\x0fC\x89g\x82\x88" +
	"\x1d\xbd@\xf5?\x8f\xfc\x95\x98\"}\xe8E\x1d\x09\x83" +
	"\x17\x05^\xc9;F\xd9\xcbb\xf7i\x19\xed\x05\xcb\xd0" +
	"\x99\xa4\x09\x96<\xdb\x08<\xe3\xa8\xd1\x13\xe8i\xfb\x1b" +
	"Y'\x85\x13$\xdb\x83>\xa52\xc6:\xe9Pz\x18" +
	"\xb1p\xcf\xeb\xc1\x06\xb1\x046)t\xeda\x1d\xdc\x98" +
	"a\x89\xa2;\xde\xdb\x1a\xf75\xe0\\\x99\xe7\x15\\\x0c" +
	"3\xfa\xecDK\x17\xa6\xef7W\xe8\xdc\xa1K\x0ev" +
	"\xc3\x9a\x19\xb2\xe3<\xf4\x14\xb7r~\xe7\xb8\x05\xbc\x92" +
	"\xe7h\xa2\xd1\xc3\xb6\x96\xc5\x1dgX\xaf\x99\xac\x93\x0e" +
	"\x15\x1cU\x95\x17\xe5\x00\x7f\xb7R\x1d\xde,S\xd0k" +
	"&^\x0c\xc5\x09\xbe\xa3j8<Qj\xe1\xf1\xf6|" +
	"\x9b9 w\xe8d\xd1I\x8b\xac\xde\xa3<\xe3\xbe\xf3" +
	"\xd5\xb3Su\xc6Z:\xcf\xbf\x99\xdf\xc0:\x85W\xb4" +
	"U\xf1$/\x81\xaf\xd5\xc4s\xd5R\xb3\xd0N.l" +
	"\x02E\x0c\x07\xd1\xf0\x928\x81\xdb$Z\xe4\xba\x9b\xab" +
	"\x96F\xc0\xff$S\xda\xca\xb9\xba\x13\x0e\x93\xa3\x04\x12" +
	"\xd6z\xc9d\xf4C\x02_\xe4\x19\x9e\xe23\x06\xbe6" +
	"\xa5b\xb8\xc6N>^\xd4+-\xe5\xb8U\xc8\xe1." +
	"\xae4J\xb9N\\\x96\x9av\xec\x8a\xbbQw\xc4\x91" +
	"~)\xa5\x97\x0a\x86y\x11tG\x94H\x9a\x84i\xef" +
	"\xa2F\x82h\xe5\xfa\xd9t\xd9\xae\xc8Y\xc2\x8eg\xed" +
	"\x83\xed\xd4(\x0c$m\xdaMG2\xecZ\xc3\x91\x0c" +
	"\xcfKXQ6\xd8\xce\xb8c\x94t\xa7F\xdeH\xe9" +
	"DP\xf0\x1dN\xcf\x15*_\x92\xe3y\xdb*x\x17" +
	"A\xe1\x8b/\x82\x0d\xb63Tu]C\xb5f\x8e-" +
	"\xcdu\xc7\xacM\xf0i\xf0\xccN?in%%F" +
	"\xf1i\xc2L\x9d-7\x1d\xe6\xc2^\x1af\x09\xbe\xf3" +
	"\xb2\xf5rD\xb0\x15.\xe9\xb3\xad\xf0.\xc3r\xb93" +
	"\xe40\xd5.\x1fe\x89~\x81\xe5\xe7\x1f\xa7,\xe9i" +
	"q\x9c\x12U\x99\xee\xc0\xc0\xf8%\xdat\xef\xaa\x90\xfd" +
	"H20\x8e\xa0\xd5\xf1\x81\x0a\xd9O$\x03\xe3c4" +
	"\xf4\x0e\xab\x90\xfdL:v\xf4)\xda\xae\x1f\xa90!" +
	"\xa9\xe6\xc9\xcfQ\xf2\x13\xdc\xf5d\xc5\x1c\x00\xcd\x96\xcf" +
	"P)\x90\xf5\xf2(\xfc\xa0!c\xcb\xd7\xcb\x93\xa4\x97" +
	"\x87\x19X\xbe^\xbe\x8c\xec\x81 \xa3*\xee\x84\x07\x9a" +
	":\x1d\xbd\x10\x9a9i\xfa\x15\x18b\x09W\xfa\xb4]" +
	"\x1a\x7f\x84\xa2W\x8b\x9f=\xd2\xb9\x05\xcb4\xdci\x1b" +
	"\xc8&\x9bv\xf4\xce|C\x00\xd2/W\xfcr*\xee" +
	"[\xc3\xa4S\x01}y\xdb\xcas\xf0\xbdX_.}" +
	"\x09\xdf\\\xe8\x11\x81\xc9\x13\xf1V\xf7\xb5\xb2\x0a/\x0c" +
	"m\xdbx9\xdc\x7f:\xcb\xba#u\x15\xfd\xea\xf9R" +
	"\xf9U\x86\x7f\xe4\xa2\xc9Q\xbd1\xd0\x92\xdf\x83\x89\x86" +
	"OF\xf8Z\xf2\x11\x1c\x08\xb9\x0f\x90\x7f\x02\x9e\x96\x0c" +
	"\xa0}\x0c\xdfm\xf8b\x84\x9f\x0c\x0f\xe4\xfd\x0d\xbe\x18" +
	"\x11$\xc3\xcf\xa7\xc3G\xe1\xa7!\xfcd\xf8e\xc4\xc3" +
	"O@\xf8\xc9\xf0\xab\xe9\xd3\x10\xe7 ?_\x91\xb4\xe4" +
	"\xf3\xa8\xfe\xf0\x13\x10m\x8a\x18h\x83t\xe8i\x18\xf9" +
	"\xb8\xe2\x9d\x8fmg\xac?\xa3(\xc0Xn\x12\x0b\xb6" +
	"\x92\x9bZ\x15j\xf2U\xe4\xd6\x0e\x1d\xf3s#BM" +
	"6\xe8\x14\x96\x89|\x96\xdc\xd4qa\x01V\x15|\xe0" +
	"Y\xe4\xd7\xd37)\xda\x84\x9a|-=\xc0^\xe4\xfb" +
	"\xe8\x9b\x14 \xb2\xe1o%ww\xe8\xafO\x80\xc8\x86" +
	"\xbf\x93\xf8\x1d\xc8\xef\xa7oR(BM\xbe\x97\xbe\x9d" +
	"q\x0f\xf2\x87\x90'\x85\x8fZ{P\xf9P>\xe5\x85" +
	"{\xa0\xe3\x0e\xeb.\x83\x16\xdfT\xbc\x9a[\x85\xe1\x96" +
	"_[\xa4\x8f\xe1\xd83\xdc\x02\xdf\x1d\xa7n\xb2pu" +
	"\x8a\xd2\xf2\xe4\x9d]\x9d\x06#o\xb8(\x91F\x11Y" +
	"\x82\x97\xb83C\xde\xe8\x0d\xa6m\x17HS\xb1\\\xc7" +
	"6\xd5\xd6R\xfe\x89\x90VR\xb4Q}\xd30Y\xdc" +
	"\x94q\xb5\xc2\xe9\x10\"\xf8\x9fIL\x8b\xef$\x06\x8b" +
	"\xa8^um\xe4\xe0\x7f?1\xe1}\x07/\xf8\xd6\xba" +
	"\xf7\xb0\xd5\x0a\x1f\xcb\x18VF5,\xee\xe8\xa6\x17m" +
	"\xad\x18\xd6L\x86\xbbE\xbb\x10:\x1f\xad\x8cA\xc1X" +
	"\x05\xcb\xb9\x13hb\x0c:\xeao-\x8c^\xa0\xff\xce" +
	"k\x9f\x05]\xe8\x85\xa7\xc0\x8fO\x05\xdf\xe1\x0b>\x1d" +
	"\x1d\xde\x9f\xb65\xf0\xf75\xb5P9\xfa9\x15\xe9\xb4" +
	"\xe5\xa4c\xcc\xcc\xa8\xdc\x09\x1bV-Mqg\xd34" +
	"K\x8f\xea5\xeeP\\*\x1aO\xd1n\\\xe3\xced" +
	"\xd1`\xe9\xfcv+P\x0c\x1a?N\x84\x83d\xfc\xd2" +
	"\x11\x96\xa0H\x80\x1f\xd2\xdaV5\x0d\xdd\x1a\xd6\x95Z" +
	"p\xd8StM'\xf5\x8d/\xf7\xff\x02\x00\x00\xff\xff" +
	"\xb5e\xf3\xb7"

func init() {
	schemas.Register(schema_eef9ddc7a345de6d,
		0x80d5a7b782142e87,
		0x81b8ffeeb01d76f7,
		0x8491dc2c2f94f1d1,
		0x8890f17a143c6896,
		0x8ac5cfb21988c168,
		0x990bdcf2be83b604,
		0xa74f5574681f9d55,
		0xb3e73f8c19afd787,
		0xb42137d4b8ba3ef6,
		0xb599bbd2f1465f9c,
		0xb87956e2953771db,
		0xc0ff4a277ca4be0a,
		0xc1092d6c4c110e29,
		0xc281c6e5be483337,
		0xc5cb65e585742338,
		0xc5f724bd00c2f628,
		0xc8aeb5222ac5ef40,
		0xcdff1b0306ea58cf,
		0xce5b0091fd9acb21,
		0xcf0f425c8bd69fa2,
		0xd11f8d1479e2f010,
		0xd2d587c796186e8b,
		0xd9ed2c1c754d683e,
		0xdbfe301c0ddefe4e,
		0xde7576c640b5ad18,
		0xe4d6d0d9ae1553da,
		0xe68d439455fd9cce,
		0xe82d760b257daddb,
		0xea9236083718fdc2,
		0xee0b04cc3f52f33c,
		0xf0c41d021228d929,
		0xf206f12e39ab7f9b,
		0xf246442c7aee0af5,
		0xf95db11410e33efc,
		0xffac0fa5c7156a5d)
}
