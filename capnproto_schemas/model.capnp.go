// Code generated by capnpc-go. DO NOT EDIT.

package model

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/management"
	soil "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/soil"
)

type XYResult struct{ capnp.Struct }

// XYResult_TypeID is the unique identifier for the type XYResult.
const XYResult_TypeID = 0x851d47c6ccdecf08

func NewXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func NewRootXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func ReadRootXYResult(msg *capnp.Message) (XYResult, error) {
	root, err := msg.Root()
	return XYResult{root.Struct()}, err
}

func (s XYResult) String() string {
	str, _ := text.Marshal(0x851d47c6ccdecf08, s.Struct)
	return str
}

func (s XYResult) Xs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasXs() bool {
	return s.Struct.HasPtr(0)
}

func (s XYResult) SetXs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewXs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s XYResult) Ys() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasYs() bool {
	return s.Struct.HasPtr(1)
}

func (s XYResult) SetYs(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewYs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYResult_List is a list of XYResult.
type XYResult_List struct{ capnp.List }

// NewXYResult creates a new list of XYResult.
func NewXYResult_List(s *capnp.Segment, sz int32) (XYResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYResult_List{l}, err
}

func (s XYResult_List) At(i int) XYResult { return XYResult{s.List.Struct(i)} }

func (s XYResult_List) Set(i int, v XYResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYResult_List) String() string {
	str, _ := text.MarshalList(0x851d47c6ccdecf08, s.List)
	return str
}

// XYResult_Future is a wrapper for a XYResult promised by a client call.
type XYResult_Future struct{ *capnp.Future }

func (p XYResult_Future) Struct() (XYResult, error) {
	s, err := p.Future.Struct()
	return XYResult{s}, err
}

type Stat struct{ capnp.Struct }

// Stat_TypeID is the unique identifier for the type Stat.
const Stat_TypeID = 0xa6be2e805ea10a68

func NewStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func NewRootStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func ReadRootStat(msg *capnp.Message) (Stat, error) {
	root, err := msg.Root()
	return Stat{root.Struct()}, err
}

func (s Stat) String() string {
	str, _ := text.Marshal(0xa6be2e805ea10a68, s.Struct)
	return str
}

func (s Stat) Type() Stat_Type {
	return Stat_Type(s.Struct.Uint16(0) ^ 3)
}

func (s Stat) SetType(v Stat_Type) {
	s.Struct.SetUint16(0, uint16(v)^3)
}

func (s Stat) Vs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Stat) HasVs() bool {
	return s.Struct.HasPtr(0)
}

func (s Stat) SetVs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVs sets the vs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Stat) NewVs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Stat_List is a list of Stat.
type Stat_List struct{ capnp.List }

// NewStat creates a new list of Stat.
func NewStat_List(s *capnp.Segment, sz int32) (Stat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Stat_List{l}, err
}

func (s Stat_List) At(i int) Stat { return Stat{s.List.Struct(i)} }

func (s Stat_List) Set(i int, v Stat) error { return s.List.SetStruct(i, v.Struct) }

func (s Stat_List) String() string {
	str, _ := text.MarshalList(0xa6be2e805ea10a68, s.List)
	return str
}

// Stat_Future is a wrapper for a Stat promised by a client call.
type Stat_Future struct{ *capnp.Future }

func (p Stat_Future) Struct() (Stat, error) {
	s, err := p.Future.Struct()
	return Stat{s}, err
}

type Stat_Type uint16

// Stat_Type_TypeID is the unique identifier for the type Stat_Type.
const Stat_Type_TypeID = 0xbd33bb6d8cbd9ed2

// Values of Stat_Type.
const (
	Stat_Type_min    Stat_Type = 0
	Stat_Type_max    Stat_Type = 1
	Stat_Type_sd     Stat_Type = 2
	Stat_Type_avg    Stat_Type = 3
	Stat_Type_median Stat_Type = 4
)

// String returns the enum's constant name.
func (c Stat_Type) String() string {
	switch c {
	case Stat_Type_min:
		return "min"
	case Stat_Type_max:
		return "max"
	case Stat_Type_sd:
		return "sd"
	case Stat_Type_avg:
		return "avg"
	case Stat_Type_median:
		return "median"

	default:
		return ""
	}
}

// Stat_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Stat_TypeFromString(c string) Stat_Type {
	switch c {
	case "min":
		return Stat_Type_min
	case "max":
		return Stat_Type_max
	case "sd":
		return Stat_Type_sd
	case "avg":
		return Stat_Type_avg
	case "median":
		return Stat_Type_median

	default:
		return 0
	}
}

type Stat_Type_List struct{ capnp.List }

func NewStat_Type_List(s *capnp.Segment, sz int32) (Stat_Type_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Stat_Type_List{l.List}, err
}

func (l Stat_Type_List) At(i int) Stat_Type {
	ul := capnp.UInt16List{List: l.List}
	return Stat_Type(ul.At(i))
}

func (l Stat_Type_List) Set(i int, v Stat_Type) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type XYPlusResult struct{ capnp.Struct }

// XYPlusResult_TypeID is the unique identifier for the type XYPlusResult.
const XYPlusResult_TypeID = 0x8f86b66260d02d1d

func NewXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func NewRootXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func ReadRootXYPlusResult(msg *capnp.Message) (XYPlusResult, error) {
	root, err := msg.Root()
	return XYPlusResult{root.Struct()}, err
}

func (s XYPlusResult) String() string {
	str, _ := text.Marshal(0x8f86b66260d02d1d, s.Struct)
	return str
}

func (s XYPlusResult) Xy() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s XYPlusResult) HasXy() bool {
	return s.Struct.HasPtr(0)
}

func (s XYPlusResult) SetXy(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewXy sets the xy field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s XYPlusResult) NewXy() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s XYPlusResult) Stats() (Stat_List, error) {
	p, err := s.Struct.Ptr(1)
	return Stat_List{List: p.List()}, err
}

func (s XYPlusResult) HasStats() bool {
	return s.Struct.HasPtr(1)
}

func (s XYPlusResult) SetStats(v Stat_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewStats sets the stats field to a newly
// allocated Stat_List, preferring placement in s's segment.
func (s XYPlusResult) NewStats(n int32) (Stat_List, error) {
	l, err := NewStat_List(s.Struct.Segment(), n)
	if err != nil {
		return Stat_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYPlusResult_List is a list of XYPlusResult.
type XYPlusResult_List struct{ capnp.List }

// NewXYPlusResult creates a new list of XYPlusResult.
func NewXYPlusResult_List(s *capnp.Segment, sz int32) (XYPlusResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYPlusResult_List{l}, err
}

func (s XYPlusResult_List) At(i int) XYPlusResult { return XYPlusResult{s.List.Struct(i)} }

func (s XYPlusResult_List) Set(i int, v XYPlusResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYPlusResult_List) String() string {
	str, _ := text.MarshalList(0x8f86b66260d02d1d, s.List)
	return str
}

// XYPlusResult_Future is a wrapper for a XYPlusResult promised by a client call.
type XYPlusResult_Future struct{ *capnp.Future }

func (p XYPlusResult_Future) Struct() (XYPlusResult, error) {
	s, err := p.Future.Struct()
	return XYPlusResult{s}, err
}

func (p XYPlusResult_Future) Xy() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance struct{ Client *capnp.Client }

// ClimateInstance_TypeID is the unique identifier for the type ClimateInstance.
const ClimateInstance_TypeID = 0xdfcfeb783c4948fc

func (c ClimateInstance) Run(ctx context.Context, params func(ClimateInstance_run_Params) error) (ClimateInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) RunSet(ctx context.Context, params func(ClimateInstance_runSet_Params) error) (ClimateInstance_runSet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_runSet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_runSet_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c ClimateInstance) AddRef() ClimateInstance {
	return ClimateInstance{
		Client: c.Client.AddRef(),
	}
}

func (c ClimateInstance) Release() {
	c.Client.Release()
}

// A ClimateInstance_Server is a ClimateInstance with a local implementation.
type ClimateInstance_Server interface {
	Run(context.Context, ClimateInstance_run) error

	RunSet(context.Context, ClimateInstance_runSet) error

	Info(context.Context, common.Identifiable_info) error
}

// ClimateInstance_NewServer creates a new Server from an implementation of ClimateInstance_Server.
func ClimateInstance_NewServer(s ClimateInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClimateInstance_Methods(nil, s), s, c, policy)
}

// ClimateInstance_ServerToClient creates a new Client from an implementation of ClimateInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func ClimateInstance_ServerToClient(s ClimateInstance_Server, policy *server.Policy) ClimateInstance {
	return ClimateInstance{Client: capnp.NewClient(ClimateInstance_NewServer(s, policy))}
}

// ClimateInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClimateInstance_Methods(methods []server.Method, s ClimateInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ClimateInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RunSet(ctx, ClimateInstance_runSet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ClimateInstance_run holds the state for a server call to ClimateInstance.run.
// See server.Call for documentation.
type ClimateInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_run) Args() ClimateInstance_run_Params {
	return ClimateInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_run) AllocResults() (ClimateInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{Struct: r}, err
}

// ClimateInstance_runSet holds the state for a server call to ClimateInstance.runSet.
// See server.Call for documentation.
type ClimateInstance_runSet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_runSet) Args() ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_runSet) AllocResults() (ClimateInstance_runSet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{Struct: r}, err
}

type ClimateInstance_run_Params struct{ capnp.Struct }

// ClimateInstance_run_Params_TypeID is the unique identifier for the type ClimateInstance_run_Params.
const ClimateInstance_run_Params_TypeID = 0xdf787fd9d51f235b

func NewClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func NewRootClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func ReadRootClimateInstance_run_Params(msg *capnp.Message) (ClimateInstance_run_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Params{root.Struct()}, err
}

func (s ClimateInstance_run_Params) String() string {
	str, _ := text.Marshal(0xdf787fd9d51f235b, s.Struct)
	return str
}

func (s ClimateInstance_run_Params) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s ClimateInstance_run_Params) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Params) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ClimateInstance_run_Params_List is a list of ClimateInstance_run_Params.
type ClimateInstance_run_Params_List struct{ capnp.List }

// NewClimateInstance_run_Params creates a new list of ClimateInstance_run_Params.
func NewClimateInstance_run_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Params_List{l}, err
}

func (s ClimateInstance_run_Params_List) At(i int) ClimateInstance_run_Params {
	return ClimateInstance_run_Params{s.List.Struct(i)}
}

func (s ClimateInstance_run_Params_List) Set(i int, v ClimateInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0xdf787fd9d51f235b, s.List)
	return str
}

// ClimateInstance_run_Params_Future is a wrapper for a ClimateInstance_run_Params promised by a client call.
type ClimateInstance_run_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Params_Future) Struct() (ClimateInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Params{s}, err
}

func (p ClimateInstance_run_Params_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type ClimateInstance_run_Results struct{ capnp.Struct }

// ClimateInstance_run_Results_TypeID is the unique identifier for the type ClimateInstance_run_Results.
const ClimateInstance_run_Results_TypeID = 0xcc39e47cdead74c4

func NewClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func NewRootClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func ReadRootClimateInstance_run_Results(msg *capnp.Message) (ClimateInstance_run_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Results{root.Struct()}, err
}

func (s ClimateInstance_run_Results) String() string {
	str, _ := text.Marshal(0xcc39e47cdead74c4, s.Struct)
	return str
}

func (s ClimateInstance_run_Results) Result() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Results) SetResult(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s ClimateInstance_run_Results) NewResult() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_run_Results_List is a list of ClimateInstance_run_Results.
type ClimateInstance_run_Results_List struct{ capnp.List }

// NewClimateInstance_run_Results creates a new list of ClimateInstance_run_Results.
func NewClimateInstance_run_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Results_List{l}, err
}

func (s ClimateInstance_run_Results_List) At(i int) ClimateInstance_run_Results {
	return ClimateInstance_run_Results{s.List.Struct(i)}
}

func (s ClimateInstance_run_Results_List) Set(i int, v ClimateInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xcc39e47cdead74c4, s.List)
	return str
}

// ClimateInstance_run_Results_Future is a wrapper for a ClimateInstance_run_Results promised by a client call.
type ClimateInstance_run_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Results_Future) Struct() (ClimateInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Results{s}, err
}

func (p ClimateInstance_run_Results_Future) Result() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance_runSet_Params struct{ capnp.Struct }

// ClimateInstance_runSet_Params_TypeID is the unique identifier for the type ClimateInstance_runSet_Params.
const ClimateInstance_runSet_Params_TypeID = 0xaa9d146226037822

func NewClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func NewRootClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func ReadRootClimateInstance_runSet_Params(msg *capnp.Message) (ClimateInstance_runSet_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Params{root.Struct()}, err
}

func (s ClimateInstance_runSet_Params) String() string {
	str, _ := text.Marshal(0xaa9d146226037822, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Params) Dataset() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s ClimateInstance_runSet_Params) HasDataset() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Params) SetDataset(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDataset sets the dataset field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ClimateInstance_runSet_Params) NewDataset(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ClimateInstance_runSet_Params_List is a list of ClimateInstance_runSet_Params.
type ClimateInstance_runSet_Params_List struct{ capnp.List }

// NewClimateInstance_runSet_Params creates a new list of ClimateInstance_runSet_Params.
func NewClimateInstance_runSet_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Params_List{l}, err
}

func (s ClimateInstance_runSet_Params_List) At(i int) ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Params_List) Set(i int, v ClimateInstance_runSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Params_List) String() string {
	str, _ := text.MarshalList(0xaa9d146226037822, s.List)
	return str
}

// ClimateInstance_runSet_Params_Future is a wrapper for a ClimateInstance_runSet_Params promised by a client call.
type ClimateInstance_runSet_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Params_Future) Struct() (ClimateInstance_runSet_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Params{s}, err
}

type ClimateInstance_runSet_Results struct{ capnp.Struct }

// ClimateInstance_runSet_Results_TypeID is the unique identifier for the type ClimateInstance_runSet_Results.
const ClimateInstance_runSet_Results_TypeID = 0xe22282cb3449bb4a

func NewClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func NewRootClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func ReadRootClimateInstance_runSet_Results(msg *capnp.Message) (ClimateInstance_runSet_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Results{root.Struct()}, err
}

func (s ClimateInstance_runSet_Results) String() string {
	str, _ := text.Marshal(0xe22282cb3449bb4a, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Results) Result() (XYPlusResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYPlusResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_runSet_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Results) SetResult(v XYPlusResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYPlusResult struct, preferring placement in s's segment.
func (s ClimateInstance_runSet_Results) NewResult() (XYPlusResult, error) {
	ss, err := NewXYPlusResult(s.Struct.Segment())
	if err != nil {
		return XYPlusResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_runSet_Results_List is a list of ClimateInstance_runSet_Results.
type ClimateInstance_runSet_Results_List struct{ capnp.List }

// NewClimateInstance_runSet_Results creates a new list of ClimateInstance_runSet_Results.
func NewClimateInstance_runSet_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Results_List{l}, err
}

func (s ClimateInstance_runSet_Results_List) At(i int) ClimateInstance_runSet_Results {
	return ClimateInstance_runSet_Results{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Results_List) Set(i int, v ClimateInstance_runSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Results_List) String() string {
	str, _ := text.MarshalList(0xe22282cb3449bb4a, s.List)
	return str
}

// ClimateInstance_runSet_Results_Future is a wrapper for a ClimateInstance_runSet_Results promised by a client call.
type ClimateInstance_runSet_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Results_Future) Struct() (ClimateInstance_runSet_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Results{s}, err
}

func (p ClimateInstance_runSet_Results_Future) Result() XYPlusResult_Future {
	return XYPlusResult_Future{Future: p.Future.Field(0, nil)}
}

type Env struct{ capnp.Struct }

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xb7fc866ef1127f7c

func NewEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func NewRootEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func ReadRootEnv(msg *capnp.Message) (Env, error) {
	root, err := msg.Root()
	return Env{root.Struct()}, err
}

func (s Env) String() string {
	str, _ := text.Marshal(0xb7fc866ef1127f7c, s.Struct)
	return str
}

func (s Env) Rest() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Env) HasRest() bool {
	return s.Struct.HasPtr(0)
}

func (s Env) SetRest(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Env) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(1)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s Env) HasTimeSeries() bool {
	return s.Struct.HasPtr(1)
}

func (s Env) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Env) SoilProfile() (soil.Profile, error) {
	p, err := s.Struct.Ptr(2)
	return soil.Profile{Struct: p.Struct()}, err
}

func (s Env) HasSoilProfile() bool {
	return s.Struct.HasPtr(2)
}

func (s Env) SetSoilProfile(v soil.Profile) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSoilProfile sets the soilProfile field to a newly
// allocated soil.Profile struct, preferring placement in s's segment.
func (s Env) NewSoilProfile() (soil.Profile, error) {
	ss, err := soil.NewProfile(s.Struct.Segment())
	if err != nil {
		return soil.Profile{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Env) MgmtEvents() (management.Event_List, error) {
	p, err := s.Struct.Ptr(3)
	return management.Event_List{List: p.List()}, err
}

func (s Env) HasMgmtEvents() bool {
	return s.Struct.HasPtr(3)
}

func (s Env) SetMgmtEvents(v management.Event_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMgmtEvents sets the mgmtEvents field to a newly
// allocated management.Event_List, preferring placement in s's segment.
func (s Env) NewMgmtEvents(n int32) (management.Event_List, error) {
	l, err := management.NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return management.Event_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Env_List is a list of Env.
type Env_List struct{ capnp.List }

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Env_List{l}, err
}

func (s Env_List) At(i int) Env { return Env{s.List.Struct(i)} }

func (s Env_List) Set(i int, v Env) error { return s.List.SetStruct(i, v.Struct) }

func (s Env_List) String() string {
	str, _ := text.MarshalList(0xb7fc866ef1127f7c, s.List)
	return str
}

// Env_Future is a wrapper for a Env promised by a client call.
type Env_Future struct{ *capnp.Future }

func (p Env_Future) Struct() (Env, error) {
	s, err := p.Future.Struct()
	return Env{s}, err
}

func (p Env_Future) Rest() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Env_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(1, nil).Client()}
}

func (p Env_Future) SoilProfile() soil.Profile_Future {
	return soil.Profile_Future{Future: p.Future.Field(2, nil)}
}

type EnvInstance struct{ Client *capnp.Client }

// EnvInstance_TypeID is the unique identifier for the type EnvInstance.
const EnvInstance_TypeID = 0xa5feedafa5ec5c4a

func (c EnvInstance) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstance) AddRef() EnvInstance {
	return EnvInstance{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstance) Release() {
	c.Client.Release()
}

// A EnvInstance_Server is a EnvInstance with a local implementation.
type EnvInstance_Server interface {
	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstance_NewServer creates a new Server from an implementation of EnvInstance_Server.
func EnvInstance_NewServer(s EnvInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstance_Methods(nil, s), s, c, policy)
}

// EnvInstance_ServerToClient creates a new Client from an implementation of EnvInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstance_ServerToClient(s EnvInstance_Server, policy *server.Policy) EnvInstance {
	return EnvInstance{Client: capnp.NewClient(EnvInstance_NewServer(s, policy))}
}

// EnvInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstance_Methods(methods []server.Method, s EnvInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstance_run holds the state for a server call to EnvInstance.run.
// See server.Call for documentation.
type EnvInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstance_run) Args() EnvInstance_run_Params {
	return EnvInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstance_run) AllocResults() (EnvInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{Struct: r}, err
}

type EnvInstance_run_Params struct{ capnp.Struct }

// EnvInstance_run_Params_TypeID is the unique identifier for the type EnvInstance_run_Params.
const EnvInstance_run_Params_TypeID = 0x811895634b6bd959

func NewEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func NewRootEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func ReadRootEnvInstance_run_Params(msg *capnp.Message) (EnvInstance_run_Params, error) {
	root, err := msg.Root()
	return EnvInstance_run_Params{root.Struct()}, err
}

func (s EnvInstance_run_Params) String() string {
	str, _ := text.Marshal(0x811895634b6bd959, s.Struct)
	return str
}

func (s EnvInstance_run_Params) Env() (Env, error) {
	p, err := s.Struct.Ptr(0)
	return Env{Struct: p.Struct()}, err
}

func (s EnvInstance_run_Params) HasEnv() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Params) SetEnv(v Env) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Env struct, preferring placement in s's segment.
func (s EnvInstance_run_Params) NewEnv() (Env, error) {
	ss, err := NewEnv(s.Struct.Segment())
	if err != nil {
		return Env{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EnvInstance_run_Params_List is a list of EnvInstance_run_Params.
type EnvInstance_run_Params_List struct{ capnp.List }

// NewEnvInstance_run_Params creates a new list of EnvInstance_run_Params.
func NewEnvInstance_run_Params_List(s *capnp.Segment, sz int32) (EnvInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Params_List{l}, err
}

func (s EnvInstance_run_Params_List) At(i int) EnvInstance_run_Params {
	return EnvInstance_run_Params{s.List.Struct(i)}
}

func (s EnvInstance_run_Params_List) Set(i int, v EnvInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0x811895634b6bd959, s.List)
	return str
}

// EnvInstance_run_Params_Future is a wrapper for a EnvInstance_run_Params promised by a client call.
type EnvInstance_run_Params_Future struct{ *capnp.Future }

func (p EnvInstance_run_Params_Future) Struct() (EnvInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Params{s}, err
}

func (p EnvInstance_run_Params_Future) Env() Env_Future {
	return Env_Future{Future: p.Future.Field(0, nil)}
}

type EnvInstance_run_Results struct{ capnp.Struct }

// EnvInstance_run_Results_TypeID is the unique identifier for the type EnvInstance_run_Results.
const EnvInstance_run_Results_TypeID = 0xa931ae5cae90ece0

func NewEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func NewRootEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func ReadRootEnvInstance_run_Results(msg *capnp.Message) (EnvInstance_run_Results, error) {
	root, err := msg.Root()
	return EnvInstance_run_Results{root.Struct()}, err
}

func (s EnvInstance_run_Results) String() string {
	str, _ := text.Marshal(0xa931ae5cae90ece0, s.Struct)
	return str
}

func (s EnvInstance_run_Results) Result() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s EnvInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Results) SetResult(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// EnvInstance_run_Results_List is a list of EnvInstance_run_Results.
type EnvInstance_run_Results_List struct{ capnp.List }

// NewEnvInstance_run_Results creates a new list of EnvInstance_run_Results.
func NewEnvInstance_run_Results_List(s *capnp.Segment, sz int32) (EnvInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Results_List{l}, err
}

func (s EnvInstance_run_Results_List) At(i int) EnvInstance_run_Results {
	return EnvInstance_run_Results{s.List.Struct(i)}
}

func (s EnvInstance_run_Results_List) Set(i int, v EnvInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xa931ae5cae90ece0, s.List)
	return str
}

// EnvInstance_run_Results_Future is a wrapper for a EnvInstance_run_Results promised by a client call.
type EnvInstance_run_Results_Future struct{ *capnp.Future }

func (p EnvInstance_run_Results_Future) Struct() (EnvInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Results{s}, err
}

func (p EnvInstance_run_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type EnvInstanceProxy struct{ Client *capnp.Client }

// EnvInstanceProxy_TypeID is the unique identifier for the type EnvInstanceProxy.
const EnvInstanceProxy_TypeID = 0x87cbebfc1164a24a

func (c EnvInstanceProxy) RegisterEnvInstance(ctx context.Context, params func(EnvInstanceProxy_registerEnvInstance_Params) error) (EnvInstanceProxy_registerEnvInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_registerEnvInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstanceProxy_registerEnvInstance_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstanceProxy) AddRef() EnvInstanceProxy {
	return EnvInstanceProxy{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstanceProxy) Release() {
	c.Client.Release()
}

// A EnvInstanceProxy_Server is a EnvInstanceProxy with a local implementation.
type EnvInstanceProxy_Server interface {
	RegisterEnvInstance(context.Context, EnvInstanceProxy_registerEnvInstance) error

	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstanceProxy_NewServer creates a new Server from an implementation of EnvInstanceProxy_Server.
func EnvInstanceProxy_NewServer(s EnvInstanceProxy_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Methods(nil, s), s, c, policy)
}

// EnvInstanceProxy_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_ServerToClient(s EnvInstanceProxy_Server, policy *server.Policy) EnvInstanceProxy {
	return EnvInstanceProxy{Client: capnp.NewClient(EnvInstanceProxy_NewServer(s, policy))}
}

// EnvInstanceProxy_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Methods(methods []server.Method, s EnvInstanceProxy_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterEnvInstance(ctx, EnvInstanceProxy_registerEnvInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstanceProxy_registerEnvInstance holds the state for a server call to EnvInstanceProxy.registerEnvInstance.
// See server.Call for documentation.
type EnvInstanceProxy_registerEnvInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_registerEnvInstance) Args() EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_registerEnvInstance) AllocResults() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{Struct: r}, err
}

type EnvInstanceProxy_registerEnvInstance_Params struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Params_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Params.
const EnvInstanceProxy_registerEnvInstance_Params_TypeID = 0xd10259a623f95bb4

func NewEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Params(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Params{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params) String() string {
	str, _ := text.Marshal(0xd10259a623f95bb4, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Instance() EnvInstance {
	p, _ := s.Struct.Ptr(0)
	return EnvInstance{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Params) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Params) SetInstance(v EnvInstance) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Params_List is a list of EnvInstanceProxy_registerEnvInstance_Params.
type EnvInstanceProxy_registerEnvInstance_Params_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Params creates a new list of EnvInstanceProxy_registerEnvInstance_Params.
func NewEnvInstanceProxy_registerEnvInstance_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Params_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) At(i int) EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) String() string {
	str, _ := text.MarshalList(0xd10259a623f95bb4, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Params_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Params promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Params_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Params{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Instance() EnvInstance {
	return EnvInstance{Client: p.Future.Field(0, nil).Client()}
}

type EnvInstanceProxy_registerEnvInstance_Results struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Results_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Results.
const EnvInstanceProxy_registerEnvInstance_Results_TypeID = 0xdf50acfa56a9674e

func NewEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Results(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Results{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results) String() string {
	str, _ := text.Marshal(0xdf50acfa56a9674e, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Unregister() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Results) SetUnregister(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Results_List is a list of EnvInstanceProxy_registerEnvInstance_Results.
type EnvInstanceProxy_registerEnvInstance_Results_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Results creates a new list of EnvInstanceProxy_registerEnvInstance_Results.
func NewEnvInstanceProxy_registerEnvInstance_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Results_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) At(i int) EnvInstanceProxy_registerEnvInstance_Results {
	return EnvInstanceProxy_registerEnvInstance_Results{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xdf50acfa56a9674e, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Results_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Results promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Results_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Results{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Unregister() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

type InstanceFactory struct{ Client *capnp.Client }

// InstanceFactory_TypeID is the unique identifier for the type InstanceFactory.
const InstanceFactory_TypeID = 0xce552eef738a45ea

func (c InstanceFactory) ModelInfo(ctx context.Context, params func(InstanceFactory_modelInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_modelInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstance(ctx context.Context, params func(InstanceFactory_newInstance_Params) error) (InstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstances(ctx context.Context, params func(InstanceFactory_newInstances_Params) error) (InstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstances_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c InstanceFactory) AddRef() InstanceFactory {
	return InstanceFactory{
		Client: c.Client.AddRef(),
	}
}

func (c InstanceFactory) Release() {
	c.Client.Release()
}

// A InstanceFactory_Server is a InstanceFactory with a local implementation.
type InstanceFactory_Server interface {
	ModelInfo(context.Context, InstanceFactory_modelInfo) error

	NewInstance(context.Context, InstanceFactory_newInstance) error

	NewInstances(context.Context, InstanceFactory_newInstances) error

	Info(context.Context, common.Identifiable_info) error
}

// InstanceFactory_NewServer creates a new Server from an implementation of InstanceFactory_Server.
func InstanceFactory_NewServer(s InstanceFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(InstanceFactory_Methods(nil, s), s, c, policy)
}

// InstanceFactory_ServerToClient creates a new Client from an implementation of InstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func InstanceFactory_ServerToClient(s InstanceFactory_Server, policy *server.Policy) InstanceFactory {
	return InstanceFactory{Client: capnp.NewClient(InstanceFactory_NewServer(s, policy))}
}

// InstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func InstanceFactory_Methods(methods []server.Method, s InstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelInfo(ctx, InstanceFactory_modelInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, InstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, InstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// InstanceFactory_modelInfo holds the state for a server call to InstanceFactory.modelInfo.
// See server.Call for documentation.
type InstanceFactory_modelInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_modelInfo) Args() InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_modelInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// InstanceFactory_newInstance holds the state for a server call to InstanceFactory.newInstance.
// See server.Call for documentation.
type InstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstance) Args() InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstance) AllocResults() (InstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{Struct: r}, err
}

// InstanceFactory_newInstances holds the state for a server call to InstanceFactory.newInstances.
// See server.Call for documentation.
type InstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstances) Args() InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstances) AllocResults() (InstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{Struct: r}, err
}

type InstanceFactory_modelInfo_Params struct{ capnp.Struct }

// InstanceFactory_modelInfo_Params_TypeID is the unique identifier for the type InstanceFactory_modelInfo_Params.
const InstanceFactory_modelInfo_Params_TypeID = 0xbf49e08cc9412aaf

func NewInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func NewRootInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func ReadRootInstanceFactory_modelInfo_Params(msg *capnp.Message) (InstanceFactory_modelInfo_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_modelInfo_Params{root.Struct()}, err
}

func (s InstanceFactory_modelInfo_Params) String() string {
	str, _ := text.Marshal(0xbf49e08cc9412aaf, s.Struct)
	return str
}

// InstanceFactory_modelInfo_Params_List is a list of InstanceFactory_modelInfo_Params.
type InstanceFactory_modelInfo_Params_List struct{ capnp.List }

// NewInstanceFactory_modelInfo_Params creates a new list of InstanceFactory_modelInfo_Params.
func NewInstanceFactory_modelInfo_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_modelInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_modelInfo_Params_List{l}, err
}

func (s InstanceFactory_modelInfo_Params_List) At(i int) InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{s.List.Struct(i)}
}

func (s InstanceFactory_modelInfo_Params_List) Set(i int, v InstanceFactory_modelInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_modelInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xbf49e08cc9412aaf, s.List)
	return str
}

// InstanceFactory_modelInfo_Params_Future is a wrapper for a InstanceFactory_modelInfo_Params promised by a client call.
type InstanceFactory_modelInfo_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_modelInfo_Params_Future) Struct() (InstanceFactory_modelInfo_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_modelInfo_Params{s}, err
}

type InstanceFactory_newInstance_Params struct{ capnp.Struct }

// InstanceFactory_newInstance_Params_TypeID is the unique identifier for the type InstanceFactory_newInstance_Params.
const InstanceFactory_newInstance_Params_TypeID = 0x9ee4515395213845

func NewInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func NewRootInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func ReadRootInstanceFactory_newInstance_Params(msg *capnp.Message) (InstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x9ee4515395213845, s.Struct)
	return str
}

// InstanceFactory_newInstance_Params_List is a list of InstanceFactory_newInstance_Params.
type InstanceFactory_newInstance_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Params creates a new list of InstanceFactory_newInstance_Params.
func NewInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_newInstance_Params_List{l}, err
}

func (s InstanceFactory_newInstance_Params_List) At(i int) InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Params_List) Set(i int, v InstanceFactory_newInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Params_List) String() string {
	str, _ := text.MarshalList(0x9ee4515395213845, s.List)
	return str
}

// InstanceFactory_newInstance_Params_Future is a wrapper for a InstanceFactory_newInstance_Params promised by a client call.
type InstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Params_Future) Struct() (InstanceFactory_newInstance_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Params{s}, err
}

type InstanceFactory_newInstance_Results struct{ capnp.Struct }

// InstanceFactory_newInstance_Results_TypeID is the unique identifier for the type InstanceFactory_newInstance_Results.
const InstanceFactory_newInstance_Results_TypeID = 0xf013eda158070488

func NewInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func NewRootInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func ReadRootInstanceFactory_newInstance_Results(msg *capnp.Message) (InstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf013eda158070488, s.Struct)
	return str
}

func (s InstanceFactory_newInstance_Results) Instance() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s InstanceFactory_newInstance_Results) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstance_Results) SetInstance(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// InstanceFactory_newInstance_Results_List is a list of InstanceFactory_newInstance_Results.
type InstanceFactory_newInstance_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Results creates a new list of InstanceFactory_newInstance_Results.
func NewInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstance_Results_List{l}, err
}

func (s InstanceFactory_newInstance_Results_List) At(i int) InstanceFactory_newInstance_Results {
	return InstanceFactory_newInstance_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Results_List) Set(i int, v InstanceFactory_newInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xf013eda158070488, s.List)
	return str
}

// InstanceFactory_newInstance_Results_Future is a wrapper for a InstanceFactory_newInstance_Results promised by a client call.
type InstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Results_Future) Struct() (InstanceFactory_newInstance_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Results{s}, err
}

func (p InstanceFactory_newInstance_Results_Future) Instance() *capnp.Future {
	return p.Future.Field(0, nil)
}

type InstanceFactory_newInstances_Params struct{ capnp.Struct }

// InstanceFactory_newInstances_Params_TypeID is the unique identifier for the type InstanceFactory_newInstances_Params.
const InstanceFactory_newInstances_Params_TypeID = 0xd9fa9ece71d1db50

func NewInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func NewRootInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func ReadRootInstanceFactory_newInstances_Params(msg *capnp.Message) (InstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0xd9fa9ece71d1db50, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s InstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// InstanceFactory_newInstances_Params_List is a list of InstanceFactory_newInstances_Params.
type InstanceFactory_newInstances_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Params creates a new list of InstanceFactory_newInstances_Params.
func NewInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return InstanceFactory_newInstances_Params_List{l}, err
}

func (s InstanceFactory_newInstances_Params_List) At(i int) InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Params_List) Set(i int, v InstanceFactory_newInstances_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Params_List) String() string {
	str, _ := text.MarshalList(0xd9fa9ece71d1db50, s.List)
	return str
}

// InstanceFactory_newInstances_Params_Future is a wrapper for a InstanceFactory_newInstances_Params promised by a client call.
type InstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Params_Future) Struct() (InstanceFactory_newInstances_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Params{s}, err
}

type InstanceFactory_newInstances_Results struct{ capnp.Struct }

// InstanceFactory_newInstances_Results_TypeID is the unique identifier for the type InstanceFactory_newInstances_Results.
const InstanceFactory_newInstances_Results_TypeID = 0xaf9a1cb72ba68156

func NewInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func NewRootInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func ReadRootInstanceFactory_newInstances_Results(msg *capnp.Message) (InstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xaf9a1cb72ba68156, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Results) Instances() (common.ListEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.ListEntry_List{List: p.List()}, err
}

func (s InstanceFactory_newInstances_Results) HasInstances() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstances_Results) SetInstances(v common.ListEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInstances sets the instances field to a newly
// allocated common.ListEntry_List, preferring placement in s's segment.
func (s InstanceFactory_newInstances_Results) NewInstances(n int32) (common.ListEntry_List, error) {
	l, err := common.NewListEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return common.ListEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// InstanceFactory_newInstances_Results_List is a list of InstanceFactory_newInstances_Results.
type InstanceFactory_newInstances_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Results creates a new list of InstanceFactory_newInstances_Results.
func NewInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstances_Results_List{l}, err
}

func (s InstanceFactory_newInstances_Results_List) At(i int) InstanceFactory_newInstances_Results {
	return InstanceFactory_newInstances_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Results_List) Set(i int, v InstanceFactory_newInstances_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Results_List) String() string {
	str, _ := text.MarshalList(0xaf9a1cb72ba68156, s.List)
	return str
}

// InstanceFactory_newInstances_Results_Future is a wrapper for a InstanceFactory_newInstances_Results promised by a client call.
type InstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Results_Future) Struct() (InstanceFactory_newInstances_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Results{s}, err
}

const schema_9273388a9624d430 = "x\xda\xacW]L\x1c\xd7\x15>g\xee\xae\x87\xb6\xd0" +
	"\x9d\xbb\xb3?6\x82 \xc8\xd2\x14W Sj\xc9E" +
	"\x8d\xd8\xa5%\x0eTjv\x964\x02\xc7\xa9<\xb0c" +
	"\xb2\xee\xce,\xec\xcc\x92\xa5JC\xb1\x94\xa4E\x89\xea" +
	"\xa6r\xa5D.Q\"\xe1*Vk$\xab\xaa\x1f," +
	"j\x15\xf5\xcf\xc6\xb5\xeb\xd6<\xd0\xca?B\x96Z\xf9" +
	"G\xb5\x1fm\xd9\x9e\xea\xce\xee\xcc\xce.K\xa1R\x9e" +
	"\x8c/g\xce\xf9\xeew\xbe\xf3\x9d\xcb\xae\x93\xdb\xa2\\" +
	"\xa7\xf7\xc3\xa7\x00\x06\x93\xe8\xddf\x0e\xaf~\xf7\x9b\xa3" +
	"G\xb7\xcf\x00\xdd\x8e\x00^\xe4\x05\xec\xda\xed\xabG@" +
	"\xf1Y_\x0f\xa0Ys\xe9\xda\x85?\xeem|\x13h" +
	"-\x9a\xbb\xaeD~6\xbbG\x7f\x0f\xbc\x1c\x0f \xbe" +
	"\xeb;!\x1e\xf5\xb1\x9f~\xe2{\x0d\xd0\x1c\xf88I" +
	"\x1f\xdd^~\x1bh-)\xc5\x02\x08(\xd6\x09\xb7\xc4" +
	"\x1d\x02\x0b\x0d\x0a{EU\x08\x8b\x8bB\xd8ll\xff" +
	"\xeb\x81\x91\xdf\xbc\xf5\xe3j\xc9\x17\x85\xf3\xe29\xeb\x8b" +
	"?\x08,y\xdf\x9e\xe6\xa3\x83\xd2\xcd9\xa0\x0d\x08\xe0" +
	"a@;\xe9\xf7\x10<\xe6\xc0\xfe;\xf3\x0bw\x9f\xcc" +
	"W)\xdbH\x97\xc4V\xca\x924\xd3\xbd\xe2\x04}F" +
	"\x9c\xa1a\xf3\xd5\xcf~\xf4\x9d\x1ft\xfc\xf68H\xb5" +
	"\xe8\xae\x8b,p\x86\xce\x8a?\xa2av)\xca\xea\xde" +
	"\xb8s\xe4\xe4\xfe\x93\x9d\x9f\xb8\x19zL[\x18C^" +
	"?c\xa8%O\xbe0\x12\xf8\xf9\x89\x020+IW" +
	"\xab?\xc1\x02:\xad\x80\x97f\x8e\x7f\xe9t\xc3\x07\x0b" +
	"N\x80\x80]\xb2\x7f\x96\x05LX\x01\xafO\xfb\xefk" +
	"o=:]A\x03\xbb\xa3\xb8\xe2?,\xae\xfa\x19\xb0" +
	"\x15\xff\xbf\x00\xc4\xab\xa2\xcf\xfc\xdb\xdc\xe2;\xea\x99\xae" +
	"E\xa0\x94+]\x06P\\\x11O\x89WE\x16\xbc*" +
	"N\x03\x9a\x0b;c\xe7\xde\xb9\xd1\x7f\xd6\xc5Y]\xe0" +
	"\x10\xe3\xec\xf7\xc6\xaf\xae\xbd~\xf3\xab\x17\xdc\xa0\x1f\x88" +
	"\xbd\x0c\x13\x06\x18\xa6[}\xb3\xfa\x7f:\xbe}\xb1\x0a" +
	"\xa9\xcd\x815\xb1=\xc0\xaa\xb4\x05\xfe$\xd2`X\xdc" +
	"\x11\xf4\x99\xbf~\xf9\xc1\xd3\xc7\x87\xb9\xcb@\x1b\x9d[" +
	"\xd2\xe0\x12\xcb\xd8\x1cd\x19\xe3\xff\xbc<qq\xee\xe1" +
	"*H\x0dh\xa3y7x\x98\x05\xbco\x05|k\xec" +
	"\x93\x97\x1e\xfe2~\xdd\x9d\xe1w\xc1\xf3,`\xc5\x0a" +
	"x\xf9\xe9\xa6\x95\xd5\xe9\xfc\xf52\xd0\xc1n\x0bt\x88" +
	"\x05<z\xbe\xffk\xf9\xdb\x97\xaeW\x80F\xb15\xb4" +
	"&v\x86\x18\xe4\xf6\xd0\xdb\xe2\xf7Ca\x00s\xe0L" +
	"\xffW\x96\x0f\xb7\xac\xb9\xb3\xa9\xa1},\xdb\x94\x95\xed" +
	"\x87\x1e~\xe8\xa3\xbb\xe2=w\xdf\xde\x0fY\x80\xe7C" +
	"=`\x82\x09k\xa6\x9aI*\xe9\x8eQ\x99\x8ck\xe3" +
	"\xdd}\xdad\xbf\xa6\x1b\xb26\xaatdsZ$." +
	"ge\xa2\xea\x92\x87x\x00<\x08@\xebZ\x00\xa4\x1a" +
	"\x82\xd278\xe4\x15m\x12\x85R\xf7\x01\xa2H\xb1I" +
	"\xf2p\xe8>\xa4\x18\x96<\x88\x88q\x82\xe8G,\xe9" +
	"\x1d\x00\x05@\x07\x022\x08C\xc3\x09\xc5\xa7\xe7\xd2F" +
	"\x1cQ\xaaq\xea\xb6\xd5\x03H\x11\x82R\x94C\x8a\x18" +
	"`\x1d\xa0\xcf\xb2\xc3=\x04\xa5\x179$y\x1d?\x0f" +
	"V\x8d\xcf\x01\xc7~$S\x95'N%\xae\xe2\xb2q" +
	"_6\x93\x9fb\x15=\xc4\x0b\xe0h\x01\xed\x96R\xfa" +
	"1@,\x80\xb1\x08\xd2\xdd\xbc\x99U\xc6R\xba\xa1d" +
	"\xd1\xce\xc1k\xa3\x8a}u\xc7E,\x8c\xd5\x0e\xa3\xc8" +
	"\x08)\xf1P\xa2\xcdE\x0d\xc5g\xa4\x1aF\x1b\xa3\x1b" +
	"Q\x12l\xf6\xecL\x00\xe8\xf7\x96\x1f\xc4j\x90z\x13" +
	"\xf43\xddfB\xd1\x8d~m<\x07h\xf4\xbc\x903" +
	"\xc6sF\xf9\xe5\x87\x86\xe3\xe9\x9c\x9eP\x18\xd3\x00\x1b" +
	"p\xbd\xcb\xc5u\xfb\x97\x01\xa4/\x16\x1aO\xf2S(" +
	"\x94\x9c\x15\x90\xb5\xb1I7d\xc3a\\p\xcfu\x19" +
	"\xf7\x1eV\xde&\xfe9y\xd4\xc8d\xa7:4\xe55" +
	"\xfb(\xd2\xc3T\xa7\xea\x1b6\x0bJ}\xb2\xdd\x1fm" +
	"\x93\xa3\xb4\x05 V\x8b\xb1\x06\xa4\xed<\x9f\xcdi\xeb" +
	"\x98-\xeb\x8a\xfb0\x8a\x8cos\xe5\xf9c\xc3\xcb\x97" +
	"\x17N\x01\x1b\xb1\xce\xb9{\\\xef\x1b\x17\xb7J\xad\xa5" +
	"\xe0AC6\x00\xac\x0e\x97\x8c\x0ew\xfa^\x9c\x1aW" +
	"l\x96\x11i\xdb\xce\x12\xcb\x0e\xc9\xf5%\x92}\xc6\xd4" +
	"\xb8\x82.\xb3\x04\xf4\xfa\x08 \x99\xdcP\xd6Ug\x98" +
	"\xf5\x98O\x1beC\xdc]\x1c\xe2\x00\x87=YK\x03" +
	"E)\xb9&\xd3_\xd9\xb3\xaf\xa7S\xaal(\xee\xe4" +
	"\x83\x8aay\x84\x8ae\xe9{\x8b\xe9#\x1cN'e" +
	"C\xd6\x15\xc3\x86L\xcd\x7f\xab\xda\x93\xe8\x87\x93\xbf\xa8" +
	"\xd4\x85w\x13]\xe8\x91\x82Zu\xc6m\xa9V\x02@" +
	"\xaa%(\x0dqh\xa6l\x85\xa0K\x87Oy\xa3W" +
	"\x9f;\x8bKe\xf6\xe4:\\gO\xce\xe6\x00(\x03" +
	"\x88Ev-\xfd\x09\x0e\x02\x99\xf5q?A\xe9U\xd7" +
	"\xb4(\xfb\x00\xa4$Ai\x9cC\xcaq\x01\xe4\x00\xa8" +
	":\x02 \xa5\x09Jy\x0e)!\x01$\x004\xc7\"" +
	"\x0d\x82\xd2\x11\x0e}YE7,\x0c.\xfb\xb4\x1aa" +
	"\xa4TeP\xc9\xa6\x80(z\x05\x87\x14\xd0\xd43\xa9" +
	"t<\x9b9\x08|*\xad\xa0`\xb6\x1d\x8b\xfdt~" +
	"i\xcc,\x8e\xa6\xa9\x8e\xa9F\xdf\xa4\xa2\x01qOh" +
	"\xef\x9f?\x18{|\xf7\x95c\xc5N\xc4<H1\xe1" +
	"\x96\xf7z]7u0\x153\x02\x0aW\xda\xddbA" +
	"hg\xffp\xb4\xb5\x1e\x00\x09md\xff\xf3\xd0`7" +
	"\x00\xaf\xa64^\x95\xf3DO\xf2\xf2\xe4X\x8f\xaa$" +
	"S\xb2\xf6\xbf\xbd\xc0\xfae\xbfv0\x13\x89\xcb\xbe2" +
	"'\xd8H\x86\x8e26\xd1\xf8:\xcf*\xf7\x187\x10" +
	">\x93\xb5\xf6A\xad\xe53\xf6;\x04\xff\xfe\x0f\xf2d" +
	"\xf9\x8d\xe5+TJ\x00\xc4\xe2\xac\xd0+<\x96\x1ew" +
	"h\xef\\*\x8dX\x01\xb1\x03H'x\xe4\x9c\xd7\x03" +
	"\xda\xaf)\xaa\x1c\x02\x88%1f }\x937\xed[" +
	"\x03fl\x91:B,\xb8\x93i\x0f\x03\xb8\xb7MY" +
	"\xd0\xa6_\xfa\xd8 \xfd?\x9fZ6\xe6\xb2DK$" +
	"\x87L\xc7\x8b-Wsh\xdcV\xb9W\xd9Z\xed\xb0" +
	"\xb7\xa5\xeb\x17\x05\xd7(o\xd8@q\x92\x0f\xb8'\x19" +
	"\x00\xa9\xdb\x96>\xb5Ui\xcd\xcd\xd6\xbd\xa7\x0a\xde\xf7" +
	"\x00X%\xa9\x81CS\xcb\xa9#J\xf6\x85\x83h\x7f" +
	"\x81:\x12\xe0\x90\xb8\x8al\x9d\x9c\xaaF\xb7\xafH\xcf" +
	"v\x0e\xcd\x9cV\xf8\x0c\x88\x92Ej\x86\xef\x9f\x95\xfe" +
	"\xe2i;b\xdbA\xd9>\xa86/\xc5\x15\xbbQ\xfa" +
	"M\xdc\xa6lh\xdc\xe9\x99.\x0bO\x0964\xf6k" +
	"\x17\xed\xb7:\xedl\x01\x8e\xb6\xb2y\xb1\xff\xe6@\xfb" +
	"\x11Kwt\x03G\xeb\xac\x95\x1d\xc5\x9e\xc2nY/" +
	"\xbf-m$\x8b>\xb2\xe9\xc6\x13J\x7f\xbeU\xb8\xc1" +
	"fr\xa8\xea7\x03.\x02\xdd\xf2\xad\\)~\xc0\xff" +
	"\x06\x00\x00\xff\xffK$)t"

func init() {
	schemas.Register(schema_9273388a9624d430,
		0x811895634b6bd959,
		0x851d47c6ccdecf08,
		0x87cbebfc1164a24a,
		0x8f86b66260d02d1d,
		0x9ee4515395213845,
		0xa5feedafa5ec5c4a,
		0xa6be2e805ea10a68,
		0xa931ae5cae90ece0,
		0xaa9d146226037822,
		0xaf9a1cb72ba68156,
		0xb7fc866ef1127f7c,
		0xbd33bb6d8cbd9ed2,
		0xbf49e08cc9412aaf,
		0xcc39e47cdead74c4,
		0xce552eef738a45ea,
		0xd10259a623f95bb4,
		0xd9fa9ece71d1db50,
		0xdf50acfa56a9674e,
		0xdf787fd9d51f235b,
		0xdfcfeb783c4948fc,
		0xe22282cb3449bb4a,
		0xf013eda158070488)
}
