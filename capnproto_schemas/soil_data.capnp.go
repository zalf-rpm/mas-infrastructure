// Code generated by capnpc-go. DO NOT EDIT.

package soil

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/capnp/persistence"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/geo"
	persistence2 "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/persistence"
	math "math"
	strconv "strconv"
)

type SType uint16

// SType_TypeID is the unique identifier for the type SType.
const SType_TypeID = 0xc2e4a3c8ff61b40a

// Values of SType.
const (
	SType_unknown SType = 0
	SType_ka5     SType = 1
)

// String returns the enum's constant name.
func (c SType) String() string {
	switch c {
	case SType_unknown:
		return "unknown"
	case SType_ka5:
		return "ka5"

	default:
		return ""
	}
}

// STypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func STypeFromString(c string) SType {
	switch c {
	case "unknown":
		return SType_unknown
	case "ka5":
		return SType_ka5

	default:
		return 0
	}
}

type SType_List struct{ capnp.List }

func NewSType_List(s *capnp.Segment, sz int32) (SType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SType_List{l.List}, err
}

func (l SType_List) At(i int) SType {
	ul := capnp.UInt16List{List: l.List}
	return SType(ul.At(i))
}

func (l SType_List) Set(i int, v SType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PropertyName uint16

// PropertyName_TypeID is the unique identifier for the type PropertyName.
const PropertyName_TypeID = 0x9e391ae1c6cd2567

// Values of PropertyName.
const (
	PropertyName_soilType                         PropertyName = 0
	PropertyName_sand                             PropertyName = 1
	PropertyName_clay                             PropertyName = 2
	PropertyName_silt                             PropertyName = 3
	PropertyName_pH                               PropertyName = 4
	PropertyName_sceleton                         PropertyName = 5
	PropertyName_organicCarbon                    PropertyName = 6
	PropertyName_organicMatter                    PropertyName = 7
	PropertyName_bulkDensity                      PropertyName = 8
	PropertyName_rawDensity                       PropertyName = 9
	PropertyName_fieldCapacity                    PropertyName = 10
	PropertyName_permanentWiltingPoint            PropertyName = 11
	PropertyName_saturation                       PropertyName = 12
	PropertyName_soilMoisture                     PropertyName = 13
	PropertyName_soilWaterConductivityCoefficient PropertyName = 14
	PropertyName_ammonium                         PropertyName = 15
	PropertyName_nitrate                          PropertyName = 16
	PropertyName_cnRatio                          PropertyName = 17
	PropertyName_inGroundwater                    PropertyName = 18
	PropertyName_impenetrable                     PropertyName = 19
)

// String returns the enum's constant name.
func (c PropertyName) String() string {
	switch c {
	case PropertyName_soilType:
		return "soilType"
	case PropertyName_sand:
		return "sand"
	case PropertyName_clay:
		return "clay"
	case PropertyName_silt:
		return "silt"
	case PropertyName_pH:
		return "pH"
	case PropertyName_sceleton:
		return "sceleton"
	case PropertyName_organicCarbon:
		return "organicCarbon"
	case PropertyName_organicMatter:
		return "organicMatter"
	case PropertyName_bulkDensity:
		return "bulkDensity"
	case PropertyName_rawDensity:
		return "rawDensity"
	case PropertyName_fieldCapacity:
		return "fieldCapacity"
	case PropertyName_permanentWiltingPoint:
		return "permanentWiltingPoint"
	case PropertyName_saturation:
		return "saturation"
	case PropertyName_soilMoisture:
		return "soilMoisture"
	case PropertyName_soilWaterConductivityCoefficient:
		return "soilWaterConductivityCoefficient"
	case PropertyName_ammonium:
		return "ammonium"
	case PropertyName_nitrate:
		return "nitrate"
	case PropertyName_cnRatio:
		return "cnRatio"
	case PropertyName_inGroundwater:
		return "inGroundwater"
	case PropertyName_impenetrable:
		return "impenetrable"

	default:
		return ""
	}
}

// PropertyNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropertyNameFromString(c string) PropertyName {
	switch c {
	case "soilType":
		return PropertyName_soilType
	case "sand":
		return PropertyName_sand
	case "clay":
		return PropertyName_clay
	case "silt":
		return PropertyName_silt
	case "pH":
		return PropertyName_pH
	case "sceleton":
		return PropertyName_sceleton
	case "organicCarbon":
		return PropertyName_organicCarbon
	case "organicMatter":
		return PropertyName_organicMatter
	case "bulkDensity":
		return PropertyName_bulkDensity
	case "rawDensity":
		return PropertyName_rawDensity
	case "fieldCapacity":
		return PropertyName_fieldCapacity
	case "permanentWiltingPoint":
		return PropertyName_permanentWiltingPoint
	case "saturation":
		return PropertyName_saturation
	case "soilMoisture":
		return PropertyName_soilMoisture
	case "soilWaterConductivityCoefficient":
		return PropertyName_soilWaterConductivityCoefficient
	case "ammonium":
		return PropertyName_ammonium
	case "nitrate":
		return PropertyName_nitrate
	case "cnRatio":
		return PropertyName_cnRatio
	case "inGroundwater":
		return PropertyName_inGroundwater
	case "impenetrable":
		return PropertyName_impenetrable

	default:
		return 0
	}
}

type PropertyName_List struct{ capnp.List }

func NewPropertyName_List(s *capnp.Segment, sz int32) (PropertyName_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PropertyName_List{l.List}, err
}

func (l PropertyName_List) At(i int) PropertyName {
	ul := capnp.UInt16List{List: l.List}
	return PropertyName(ul.At(i))
}

func (l PropertyName_List) Set(i int, v PropertyName) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Layer struct{ capnp.Struct }

// Layer_TypeID is the unique identifier for the type Layer.
const Layer_TypeID = 0x984640f05b3ada4f

func NewLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func NewRootLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func ReadRootLayer(msg *capnp.Message) (Layer, error) {
	root, err := msg.Root()
	return Layer{root.Struct()}, err
}

func (s Layer) String() string {
	str, _ := text.Marshal(0x984640f05b3ada4f, s.Struct)
	return str
}

func (s Layer) Properties() (Layer_Property_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_Property_List{List: p.List()}, err
}

func (s Layer) HasProperties() bool {
	return s.Struct.HasPtr(0)
}

func (s Layer) SetProperties(v Layer_Property_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Layer_Property_List, preferring placement in s's segment.
func (s Layer) NewProperties(n int32) (Layer_Property_List, error) {
	l, err := NewLayer_Property_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_Property_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Layer) Size() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Layer) SetSize(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Layer) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Layer) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s Layer) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Layer) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// Layer_List is a list of Layer.
type Layer_List struct{ capnp.List }

// NewLayer creates a new list of Layer.
func NewLayer_List(s *capnp.Segment, sz int32) (Layer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Layer_List{l}, err
}

func (s Layer_List) At(i int) Layer { return Layer{s.List.Struct(i)} }

func (s Layer_List) Set(i int, v Layer) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_List) String() string {
	str, _ := text.MarshalList(0x984640f05b3ada4f, s.List)
	return str
}

// Layer_Future is a wrapper for a Layer promised by a client call.
type Layer_Future struct{ *capnp.Future }

func (p Layer_Future) Struct() (Layer, error) {
	s, err := p.Future.Struct()
	return Layer{s}, err
}

type Layer_Property struct{ capnp.Struct }
type Layer_Property_Which uint16

const (
	Layer_Property_Which_f32Value Layer_Property_Which = 0
	Layer_Property_Which_bValue   Layer_Property_Which = 1
	Layer_Property_Which_type     Layer_Property_Which = 2
)

func (w Layer_Property_Which) String() string {
	const s = "f32ValuebValuetype"
	switch w {
	case Layer_Property_Which_f32Value:
		return s[0:8]
	case Layer_Property_Which_bValue:
		return s[8:14]
	case Layer_Property_Which_type:
		return s[14:18]

	}
	return "Layer_Property_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Layer_Property_TypeID is the unique identifier for the type Layer_Property.
const Layer_Property_TypeID = 0x92f4b81bcfdb71b0

func NewLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func NewRootLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func ReadRootLayer_Property(msg *capnp.Message) (Layer_Property, error) {
	root, err := msg.Root()
	return Layer_Property{root.Struct()}, err
}

func (s Layer_Property) String() string {
	str, _ := text.Marshal(0x92f4b81bcfdb71b0, s.Struct)
	return str
}

func (s Layer_Property) Which() Layer_Property_Which {
	return Layer_Property_Which(s.Struct.Uint16(2))
}
func (s Layer_Property) Name() PropertyName {
	return PropertyName(s.Struct.Uint16(0))
}

func (s Layer_Property) SetName(v PropertyName) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Layer_Property) F32Value() float32 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != f32Value")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Layer_Property) SetF32Value(v float32) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Layer_Property) BValue() bool {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bValue")
	}
	return s.Struct.Bit(32)
}

func (s Layer_Property) SetBValue(v bool) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetBit(32, v)
}

func (s Layer_Property) Type() (string, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != type")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Layer_Property) HasType() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Layer_Property) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Layer_Property) SetType(v string) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetText(0, v)
}

// Layer_Property_List is a list of Layer_Property.
type Layer_Property_List struct{ capnp.List }

// NewLayer_Property creates a new list of Layer_Property.
func NewLayer_Property_List(s *capnp.Segment, sz int32) (Layer_Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Layer_Property_List{l}, err
}

func (s Layer_Property_List) At(i int) Layer_Property { return Layer_Property{s.List.Struct(i)} }

func (s Layer_Property_List) Set(i int, v Layer_Property) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_Property_List) String() string {
	str, _ := text.MarshalList(0x92f4b81bcfdb71b0, s.List)
	return str
}

// Layer_Property_Future is a wrapper for a Layer_Property promised by a client call.
type Layer_Property_Future struct{ *capnp.Future }

func (p Layer_Property_Future) Struct() (Layer_Property, error) {
	s, err := p.Future.Struct()
	return Layer_Property{s}, err
}

type Query struct{ capnp.Struct }

// Query_TypeID is the unique identifier for the type Query.
const Query_TypeID = 0xbd4065087e22ca0d

func NewQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func NewRootQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func ReadRootQuery(msg *capnp.Message) (Query, error) {
	root, err := msg.Root()
	return Query{root.Struct()}, err
}

func (s Query) String() string {
	str, _ := text.Marshal(0xbd4065087e22ca0d, s.Struct)
	return str
}

func (s Query) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Query) OnlyRawData() bool {
	return !s.Struct.Bit(0)
}

func (s Query) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, !v)
}

// Query_List is a list of Query.
type Query_List struct{ capnp.List }

// NewQuery creates a new list of Query.
func NewQuery_List(s *capnp.Segment, sz int32) (Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_List{l}, err
}

func (s Query_List) At(i int) Query { return Query{s.List.Struct(i)} }

func (s Query_List) Set(i int, v Query) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_List) String() string {
	str, _ := text.MarshalList(0xbd4065087e22ca0d, s.List)
	return str
}

// Query_Future is a wrapper for a Query promised by a client call.
type Query_Future struct{ *capnp.Future }

func (p Query_Future) Struct() (Query, error) {
	s, err := p.Future.Struct()
	return Query{s}, err
}

type Query_Result struct{ capnp.Struct }

// Query_Result_TypeID is the unique identifier for the type Query_Result.
const Query_Result_TypeID = 0xbf4e1b07ad88943f

func NewQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func NewRootQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func ReadRootQuery_Result(msg *capnp.Message) (Query_Result, error) {
	root, err := msg.Root()
	return Query_Result{root.Struct()}, err
}

func (s Query_Result) String() string {
	str, _ := text.Marshal(0xbf4e1b07ad88943f, s.Struct)
	return str
}

func (s Query_Result) Failed() bool {
	return s.Struct.Bit(0)
}

func (s Query_Result) SetFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Query_Result) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query_Result) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query_Result) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query_Result) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Query_Result_List is a list of Query_Result.
type Query_Result_List struct{ capnp.List }

// NewQuery_Result creates a new list of Query_Result.
func NewQuery_Result_List(s *capnp.Segment, sz int32) (Query_Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_Result_List{l}, err
}

func (s Query_Result_List) At(i int) Query_Result { return Query_Result{s.List.Struct(i)} }

func (s Query_Result_List) Set(i int, v Query_Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_Result_List) String() string {
	str, _ := text.MarshalList(0xbf4e1b07ad88943f, s.List)
	return str
}

// Query_Result_Future is a wrapper for a Query_Result promised by a client call.
type Query_Result_Future struct{ *capnp.Future }

func (p Query_Result_Future) Struct() (Query_Result, error) {
	s, err := p.Future.Struct()
	return Query_Result{s}, err
}

type Profile struct{ capnp.Struct }

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0xff67c2a593419c29

func NewProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Profile{st}, err
}

func NewRootProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Profile{st}, err
}

func ReadRootProfile(msg *capnp.Message) (Profile, error) {
	root, err := msg.Root()
	return Profile{root.Struct()}, err
}

func (s Profile) String() string {
	str, _ := text.Marshal(0xff67c2a593419c29, s.Struct)
	return str
}

func (s Profile) Layers() (Layer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_List{List: p.List()}, err
}

func (s Profile) HasLayers() bool {
	return s.Struct.HasPtr(0)
}

func (s Profile) SetLayers(v Layer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated Layer_List, preferring placement in s's segment.
func (s Profile) NewLayers(n int32) (Layer_List, error) {
	l, err := NewLayer_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Profile) PercentageOfArea() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x42c80000)
}

func (s Profile) SetPercentageOfArea(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x42c80000)
}

// Profile_List is a list of Profile.
type Profile_List struct{ capnp.List }

// NewProfile creates a new list of Profile.
func NewProfile_List(s *capnp.Segment, sz int32) (Profile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Profile_List{l}, err
}

func (s Profile_List) At(i int) Profile { return Profile{s.List.Struct(i)} }

func (s Profile_List) Set(i int, v Profile) error { return s.List.SetStruct(i, v.Struct) }

func (s Profile_List) String() string {
	str, _ := text.MarshalList(0xff67c2a593419c29, s.List)
	return str
}

// Profile_Future is a wrapper for a Profile promised by a client call.
type Profile_Future struct{ *capnp.Future }

func (p Profile_Future) Struct() (Profile, error) {
	s, err := p.Future.Struct()
	return Profile{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xa09aa71427dc64e1

func (c Service) CheckAvailableParameters(ctx context.Context, params func(Query) error) (Query_Result_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil_data.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Query_Result_Future{Future: ans.Future()}, release
}
func (c Service) GetAllAvailableParameters(ctx context.Context, params func(Service_getAllAvailableParameters_Params) error) (Service_getAllAvailableParameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil_data.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAllAvailableParameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getAllAvailableParameters_Results_Future{Future: ans.Future()}, release
}
func (c Service) ProfilesAt(ctx context.Context, params func(Service_profilesAt_Params) error) (Service_profilesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil_data.capnp:Service",
			MethodName:    "profilesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_profilesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_profilesAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}
func (c Service) Restore(ctx context.Context, params func(persistence2.Restorer_restore_Params) error) (persistence2.Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence2.Restorer_restore_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence2.Restorer_restore_Results_Future{Future: ans.Future()}, release
}
func (c Service) Drop(ctx context.Context, params func(persistence2.Restorer_drop_Params) error) (persistence2.Restorer_drop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      1,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "drop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence2.Restorer_drop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence2.Restorer_drop_Results_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	CheckAvailableParameters(context.Context, Service_checkAvailableParameters) error

	GetAllAvailableParameters(context.Context, Service_getAllAvailableParameters) error

	ProfilesAt(context.Context, Service_profilesAt) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Restore(context.Context, persistence2.Restorer_restore) error

	Drop(context.Context, persistence2.Restorer_drop) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil_data.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CheckAvailableParameters(ctx, Service_checkAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil_data.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAllAvailableParameters(ctx, Service_getAllAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil_data.capnp:Service",
			MethodName:    "profilesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ProfilesAt(ctx, Service_profilesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, persistence2.Restorer_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      1,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "drop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Drop(ctx, persistence2.Restorer_drop{call})
		},
	})

	return methods
}

// Service_checkAvailableParameters holds the state for a server call to Service.checkAvailableParameters.
// See server.Call for documentation.
type Service_checkAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_checkAvailableParameters) Args() Query {
	return Query{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_checkAvailableParameters) AllocResults() (Query_Result, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{Struct: r}, err
}

// Service_getAllAvailableParameters holds the state for a server call to Service.getAllAvailableParameters.
// See server.Call for documentation.
type Service_getAllAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAllAvailableParameters) Args() Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getAllAvailableParameters) AllocResults() (Service_getAllAvailableParameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{Struct: r}, err
}

// Service_profilesAt holds the state for a server call to Service.profilesAt.
// See server.Call for documentation.
type Service_profilesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_profilesAt) Args() Service_profilesAt_Params {
	return Service_profilesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_profilesAt) AllocResults() (Service_profilesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{Struct: r}, err
}

type Service_getAllAvailableParameters_Params struct{ capnp.Struct }

// Service_getAllAvailableParameters_Params_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Params.
const Service_getAllAvailableParameters_Params_TypeID = 0x8dec5fd8eb3e7c27

func NewService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func NewRootService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func ReadRootService_getAllAvailableParameters_Params(msg *capnp.Message) (Service_getAllAvailableParameters_Params, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Params{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Params) String() string {
	str, _ := text.Marshal(0x8dec5fd8eb3e7c27, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Params) OnlyRawData() bool {
	return s.Struct.Bit(0)
}

func (s Service_getAllAvailableParameters_Params) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_getAllAvailableParameters_Params_List is a list of Service_getAllAvailableParameters_Params.
type Service_getAllAvailableParameters_Params_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Params creates a new list of Service_getAllAvailableParameters_Params.
func NewService_getAllAvailableParameters_Params_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Service_getAllAvailableParameters_Params_List{l}, err
}

func (s Service_getAllAvailableParameters_Params_List) At(i int) Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Params_List) Set(i int, v Service_getAllAvailableParameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Params_List) String() string {
	str, _ := text.MarshalList(0x8dec5fd8eb3e7c27, s.List)
	return str
}

// Service_getAllAvailableParameters_Params_Future is a wrapper for a Service_getAllAvailableParameters_Params promised by a client call.
type Service_getAllAvailableParameters_Params_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Params_Future) Struct() (Service_getAllAvailableParameters_Params, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Params{s}, err
}

type Service_getAllAvailableParameters_Results struct{ capnp.Struct }

// Service_getAllAvailableParameters_Results_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Results.
const Service_getAllAvailableParameters_Results_TypeID = 0x98a2bf8e6ad97ee3

func NewService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func NewRootService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func ReadRootService_getAllAvailableParameters_Results(msg *capnp.Message) (Service_getAllAvailableParameters_Results, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Results{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Results) String() string {
	str, _ := text.Marshal(0x98a2bf8e6ad97ee3, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Results) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getAllAvailableParameters_Results) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Service_getAllAvailableParameters_Results) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_getAllAvailableParameters_Results) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Service_getAllAvailableParameters_Results_List is a list of Service_getAllAvailableParameters_Results.
type Service_getAllAvailableParameters_Results_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Results creates a new list of Service_getAllAvailableParameters_Results.
func NewService_getAllAvailableParameters_Results_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_getAllAvailableParameters_Results_List{l}, err
}

func (s Service_getAllAvailableParameters_Results_List) At(i int) Service_getAllAvailableParameters_Results {
	return Service_getAllAvailableParameters_Results{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Results_List) Set(i int, v Service_getAllAvailableParameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Results_List) String() string {
	str, _ := text.MarshalList(0x98a2bf8e6ad97ee3, s.List)
	return str
}

// Service_getAllAvailableParameters_Results_Future is a wrapper for a Service_getAllAvailableParameters_Results promised by a client call.
type Service_getAllAvailableParameters_Results_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Results_Future) Struct() (Service_getAllAvailableParameters_Results, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Results{s}, err
}

type Service_profilesAt_Params struct{ capnp.Struct }

// Service_profilesAt_Params_TypeID is the unique identifier for the type Service_profilesAt_Params.
const Service_profilesAt_Params_TypeID = 0xdb97e739bf9693c1

func NewService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func NewRootService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func ReadRootService_profilesAt_Params(msg *capnp.Message) (Service_profilesAt_Params, error) {
	root, err := msg.Root()
	return Service_profilesAt_Params{root.Struct()}, err
}

func (s Service_profilesAt_Params) String() string {
	str, _ := text.Marshal(0xdb97e739bf9693c1, s.Struct)
	return str
}

func (s Service_profilesAt_Params) Coord() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasCoord() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Params) SetCoord(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCoord sets the coord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Service_profilesAt_Params) Query() (Query, error) {
	p, err := s.Struct.Ptr(1)
	return Query{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasQuery() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_profilesAt_Params) SetQuery(v Query) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Query struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewQuery() (Query, error) {
	ss, err := NewQuery(s.Struct.Segment())
	if err != nil {
		return Query{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Service_profilesAt_Params_List is a list of Service_profilesAt_Params.
type Service_profilesAt_Params_List struct{ capnp.List }

// NewService_profilesAt_Params creates a new list of Service_profilesAt_Params.
func NewService_profilesAt_Params_List(s *capnp.Segment, sz int32) (Service_profilesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_profilesAt_Params_List{l}, err
}

func (s Service_profilesAt_Params_List) At(i int) Service_profilesAt_Params {
	return Service_profilesAt_Params{s.List.Struct(i)}
}

func (s Service_profilesAt_Params_List) Set(i int, v Service_profilesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xdb97e739bf9693c1, s.List)
	return str
}

// Service_profilesAt_Params_Future is a wrapper for a Service_profilesAt_Params promised by a client call.
type Service_profilesAt_Params_Future struct{ *capnp.Future }

func (p Service_profilesAt_Params_Future) Struct() (Service_profilesAt_Params, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Params{s}, err
}

func (p Service_profilesAt_Params_Future) Coord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Service_profilesAt_Params_Future) Query() Query_Future {
	return Query_Future{Future: p.Future.Field(1, nil)}
}

type Service_profilesAt_Results struct{ capnp.Struct }

// Service_profilesAt_Results_TypeID is the unique identifier for the type Service_profilesAt_Results.
const Service_profilesAt_Results_TypeID = 0xa0915e668c9317ad

func NewService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func NewRootService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func ReadRootService_profilesAt_Results(msg *capnp.Message) (Service_profilesAt_Results, error) {
	root, err := msg.Root()
	return Service_profilesAt_Results{root.Struct()}, err
}

func (s Service_profilesAt_Results) String() string {
	str, _ := text.Marshal(0xa0915e668c9317ad, s.Struct)
	return str
}

func (s Service_profilesAt_Results) Profiles() (Profile_List, error) {
	p, err := s.Struct.Ptr(0)
	return Profile_List{List: p.List()}, err
}

func (s Service_profilesAt_Results) HasProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Results) SetProfiles(v Profile_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated Profile_List, preferring placement in s's segment.
func (s Service_profilesAt_Results) NewProfiles(n int32) (Profile_List, error) {
	l, err := NewProfile_List(s.Struct.Segment(), n)
	if err != nil {
		return Profile_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_profilesAt_Results_List is a list of Service_profilesAt_Results.
type Service_profilesAt_Results_List struct{ capnp.List }

// NewService_profilesAt_Results creates a new list of Service_profilesAt_Results.
func NewService_profilesAt_Results_List(s *capnp.Segment, sz int32) (Service_profilesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_profilesAt_Results_List{l}, err
}

func (s Service_profilesAt_Results_List) At(i int) Service_profilesAt_Results {
	return Service_profilesAt_Results{s.List.Struct(i)}
}

func (s Service_profilesAt_Results_List) Set(i int, v Service_profilesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xa0915e668c9317ad, s.List)
	return str
}

// Service_profilesAt_Results_Future is a wrapper for a Service_profilesAt_Results promised by a client call.
type Service_profilesAt_Results_Future struct{ *capnp.Future }

func (p Service_profilesAt_Results_Future) Struct() (Service_profilesAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Results{s}, err
}

const schema_ff3f350f11891951 = "x\xda\xacV_l\x14]\x15?\xe7\xce\x96\xd9mw" +
	"\xbb{\x9d*\xf8}\xf9\xb2\xf2\xe53\xfd>\x12*\x7f" +
	"lH\x1buwi\xab\xa5R\xe8-\x06\xa4\x82p\xbb" +
	"{\xb7\x0c\x9d\x9dYf\xee\xb6\xac!\xe0\x83\x0fj\xfc" +
	"\x13D\x14\x0d\x0ah\x88\xf2\xd0\xa0\x8d\x1a} \x84&" +
	"*\x01\x89\x91\x84DD\x1f\x88\x1a\"\xf2\xa0\x89>\xf8" +
	"\x07\xaf\xb9\xb3\x7f\xfb\x87D\x13\x9ef\xe6\xce\x99s\xce" +
	"\xef\x9c\xdf\xf9\x9d\xd92\x12\xc9\x92\xad\x1d\xf3\xdd\x00\xec" +
	"\xbb\x1d\xebT\xef\xa9\x0f\xfc\xf9\xd7G\x9e}\x1e\xd8\x06" +
	"D\x80\x88\x09\xb0}\xa3y\x07\x01\xad~3\x03\xa8\xbe" +
	"w\xe2\xd1/_\xfd\xf1\xdf\xbe\x04\xec\x1d\x88j\xefo" +
	"\x06?\xf6\x97\xec\x07/\xc0\x08\x9a\x06\xa2u\xd0\xfc\xa7" +
	"%L\x13\xc0\xe2\xe6\x13h{\xcfR\x88\x8a\xbd\xf33" +
	"4\xd9\x9fQ\xd0A\xb4\xc9@t\xd1\xcaE\xd7\x03X" +
	"\xe3\xd1\xeb\x80\xea\xf7\xa7\x1f\x1e\xff\xc2\xcdo]\x00\xba" +
	"\x01\xa1f\xb3\xfdy\xf4\xbe\x8eMc\xf3\x80j\xe6\xdd" +
	"\xf7~\xf6\xf8\x95\x81o\x02M\x91\x963@\xeb|\xec" +
	"\xa9u%\xa6\xed\xbf\x11{\x82\x80ja\xfd\xb9\xcf\x15" +
	"?~\xf6r\xdd\x15\xeaW\xb1\xae)\xed\xea\xed]\x1a" +
	"\xc6\xe3\xc2o{{\xbe\xf3\xf5\xcb@S\xc62W\xbb" +
	"\xba\x96,\xd6\xa5\xd3\x1b\xef\xfa\xb9\xf5\xb8k\x07\x80J" +
	"\xdcy\xfdtTdo\xac\x89\xe2`|\xd1\xe2q\x8d" +
	"\xc2\x8ek\x14\x99/\x7fz\xc1|u\xcf\xcdZ\x81\x9a" +
	"\x9f\xd6\x8c7'\x9eZ\x03\x09}\xd7\x9f\xd0\xc6\x9d?" +
	"\xe0\xea\xf6\xb7\xff\xb0\xb4\x0a\xd1\xdf\x13\x8b\xd6\xf3\xd0\xf0" +
	"\x1f\x89\x1d\x80\xea\xd6\xb9\xaf\xdc\x1cx\xf2\xd5G\xcbj" +
	"\x93\x98\xd4\x80b\xdd\xba6o]\xcc\x9d\xbb\xba4\xa3" +
	"V\xe6\xa8\xa1[\xa2{\xc9*u\xeb;\xbb{\x1e\x14" +
	"|X\x05\x9e\xed\x1c)p\xb9\x8e\xf7\xe5y\xd9-\x0f" +
	"\xee\x13\xfe\x9c\x9d\x17}3B\xe6\x1c'7\xc7m\x87" +
	"O;b\x82\xfb\xbc$\xa4\xf0\x837\xc2\xdb\x00\x80E" +
	"\x8c\x08@\x04\x01hb\x1a\x80\xc5\x0dd\x1b\x08*\xcf" +
	"u\xaa\x93|~\x18L.9\"\x10\xd4\x9dh\x04\"" +
	"\x8d@\xbbyU\xf8}\x13~\xc6+\x0b_V'\x10" +
	"Y\xaa\xe9\x90o\x02`\x87\x0cd\xc7\x08\xbe\x86Ja" +
	"\x8ff!\x15c\x00\xac` +\x13|\x8d\xfcG\xbd" +
	"\xab\x07\x09\x00-\x0d\x02\xb0c\x062I0a<W" +
	"=h\x00\xd0\x13\xda\x87c ;I0\xe9\xf2\x92\xc0" +
	"d\x8b9\x80\x98\x04T\xc5\xed\xdb\xf6s\xa7\"\x00\x00" +
	";\x81`'`f:<i$\x9e\x94\xd5\xb2\xc08" +
	"\x10\x8c\xb7\xa1\xc0\x06\x8at\x08\x83E\xb0m\"(\x8e" +
	"\xa9\x09\xbf\x06\x0b\xc2\xc24`\x8dL\x01\xb0a\x03\xd9" +
	"Q\x82X\xc7tX\xa7\xf9Q\x03Y\x81 %XC" +
	"\xc4uA\x8f\x1a\xc8\x1c\x82\xaa\\\xf3e\x83!\x02\xec" +
	"\x06\x9c0\x10S\xadp\x80\xfa0\x19\xd8\x9f\x10\x0d\x0c" +
	"\xaa \x82\xbco\x97%\x98\xb6\xe7\xae\xca\xfe\xffh\xf6" +
	"\xa4\x08*\x8e\xc4\x80E\x9b \xde\x9a\x04`o\x1a\xc8" +
	"\x86\x09\xd2\x06\x8a\x9c\xeeL\xd6@v\x88\xa0*q\xb7" +
	"\xc0\xa5\xe7\x03V\x1b\xf9./}7\xa0\xf2\xca\xd2\xf6" +
	"\\\xee\xe8\xd2\xbf\xd0h\x15k\x1auM\xee\xe1%\xa1" +
	"93\x11\xd6\xebOc\xfa\x0b\xfa\xc7M\x00H\xe8\xef" +
	"\xf4\xc5\xa0\x0f\xf4%B\xef\xbd\x02\x80\x1d\xf4\xa7\xdad" +
	"\x1d\xbd\xe5\x03\xa0Io\xe8K\x94\xfed\x1a\x00c\xf4" +
	"\x87S\xba\xff\xf4\xfb\xfa\xb0\x8b.,\x02`\x9c.\xe8" +
	"\xc3\x04\xbdv\\'\xb8\xf5j'\x02`\x92.h7" +
	")zm'\x00RzE_\xdeF\xbf\xa6?\xb4\xe8" +
	"\xf9\xe3\x00a\xca\x1f\xa9\x965\xa5\x92\x01w\x0b\xc9\xbc" +
	"\xc3\xab\xc9\xc0v\xa4Q\x1eUA^8Bz.\x00" +
	"(\xcf\x9f\xe1\xae\x9d\x1f\x824\xf7\xa7=\xb7\xf1<\x0e" +
	"i.\xa5\xf0\xd5t\xc5\x99\x1d\x16n\x00\xa6-\xab\xca" +
	"\xe7\xf3\xfa\xc1\x06CVU\xd1\x16Na\x88\x97!\xcd" +
	"\xf3\xfaeY\xf8%\xee\x0a\x17\xe5\x01\xdb\x91\xb6;\x93" +
	"\x9e\xf0lW\xaa\x80\xcb\x8a\xcf5u<7\xccl\xdc" +
	"\xb3\x03H\xca\x8a/\xc2\xc7\x03\\\x0a\xc3\x1f\xf2\xdcB" +
	"%/\xed9[V\x87<Q,\xday[\xb8\x12@" +
	"\xf1R\xc9s\xedJ\x09\x00\xce\xb8\xb6\xf4\xb9\x14g\xf2" +
	"\xee$\x97\xb6\xa7l\xf7C\xbeWq\x0b\x90\x9e\xe7:" +
	"]\xbbT\x16\xae\x90>$5\x87\x9a\xad\x8b\xac$[" +
	"\xd9\xf7\x8a\xb6#\x82\x9c\xac\xb1\xcb\x90A\xbb\x94\x8c\xd5" +
	"\xa5\xe4\xcd\x1a\xf3C\xd36\x8e\xa4Z\x0a\xf7\"\x8e\xd4" +
	"\x03\x81\xa6G\xdc\xe8h\x13nl\x882ew\x80P" +
	"f\"67\x1d6\xd6\x0e\x1d\xb9\x0f\x84\x8e\x98H\x9a" +
	"j\x8b\x8d=B\x07\xa6\x80\xd0\xad\xa6\xca\x1f\x13\xf9\xd9" +
	"\xdc\x1c'+'\x06 \x8b\xaa1Od\xe5@a\x90" +
	"mCe\xe4d\x16Y\x1cQ=\x18\xbdx\xf0\xee\xaf" +
	"\xae/jZ\x9c\xdd\x7f\xe9\xde{6\xde\xbd\x0d\xb9(" +
	"\xaa\xf7\xf5=\xec\xfd\xd4\xc6\x1f]\x82\xdc(RL\xb3" +
	"\x08\xc1\x96\x01\x00\xc5^\x16EDdQ\x03C\x05\xc5" +
	"\xfa\xb4\x93\x86u\xd3\x83\xb6^\xaf\x95\x0a\xc3B\xc6\x81" +
	"\xac!g\xac\"\xfcj(g\xcd\xfdEq0S\x93" +
	"\x81v%\x9bl)YS\x04\x0e\x8f\xd5U\xfb$A" +
	"$=H\x10iE+\x994\x90}\xf2\xa5\x0a\xc3\xaa" +
	"%\xd3\xb1\xf6\x96\x09\xf1\xf4M\x8a\xa4\xce\xbfF\x88&" +
	"\x84\xc1\xbad\xedn\x89\xf1.\x0dkt\xa5\x18\x8f\xd5" +
	"\xc5\xf8\x14\xc1L\x91\xdb\x8e(4\xd7\xda\xcb\x97\xbaV" +
	"/\xf6i\x19\xd19G\xc34\xe8\xceP\xe3b\xaf\x03" +
	"\x9c\xa9\xb8\xb3\xae7\xef\x9a\xb3\xbc\xff\x7f\x1a\xb4\x90\x80" +
	"\xcbU|\x1b\x00{\xc3@\xb6\xa5\xad\x81\x9b\xb7\xd5\xa5" +
	"\xfd\xbd\x04\xd3y\xcf\xf3\x0b\x98R\xff\xfa\xe2/\x06\xb6" +
	"\xfc\xfb\xaf\xcft\xf4\x14`\xfa\x84.)\xa6Z\xbf4" +
	"\xb5\xf35\xb5Z\xc7\x0f\xe7\xb0-\xf0`=p\xb6^" +
	"vD\xfa\xfe\xcf\xb6Z\x91q\xf4Fm[t\xcd\x7f" +
	"\xc7z\xa1\xca\xc2\xcf\x0bWr\x9c\x11{\x8b9_\xf0" +
	"\xda\xee\xbe\xd5y{'\xe0\x7f\x03\x00\x00\xff\xff\xad\x19" +
	"\xeb'"

func init() {
	schemas.Register(schema_ff3f350f11891951,
		0x8dec5fd8eb3e7c27,
		0x92f4b81bcfdb71b0,
		0x984640f05b3ada4f,
		0x98a2bf8e6ad97ee3,
		0x9e391ae1c6cd2567,
		0xa0915e668c9317ad,
		0xa09aa71427dc64e1,
		0xbd4065087e22ca0d,
		0xbf4e1b07ad88943f,
		0xc2e4a3c8ff61b40a,
		0xdb97e739bf9693c1,
		0xff67c2a593419c29)
}
