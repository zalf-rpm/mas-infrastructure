// Code generated by capnpc-go. DO NOT EDIT.

package crop

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/common"
)

type Cultivar uint16

// Cultivar_TypeID is the unique identifier for the type Cultivar.
const Cultivar_TypeID = 0xdd81b0520864e2b4

// Values of Cultivar.
const (
	Cultivar_alfalfaClovergrassLeyMix Cultivar = 0
	Cultivar_alfalfa                  Cultivar = 1
	Cultivar_bacharia                 Cultivar = 2
	Cultivar_barleySpring             Cultivar = 3
	Cultivar_barleyWinter             Cultivar = 4
	Cultivar_cloverGrassLey           Cultivar = 5
	Cultivar_cottonBrMid              Cultivar = 6
	Cultivar_cottonLong               Cultivar = 7
	Cultivar_cottonMid                Cultivar = 8
	Cultivar_cottonShort              Cultivar = 9
	Cultivar_einkorn                  Cultivar = 10
	Cultivar_emmer                    Cultivar = 11
	Cultivar_fieldPea24               Cultivar = 12
	Cultivar_fieldPea26               Cultivar = 13
	Cultivar_grapevine                Cultivar = 14
	Cultivar_maizeGrain               Cultivar = 15
	Cultivar_maizeSilage              Cultivar = 16
	Cultivar_mustard                  Cultivar = 17
	Cultivar_oatCompound              Cultivar = 18
	Cultivar_oilRadish                Cultivar = 19
	Cultivar_phacelia                 Cultivar = 20
	Cultivar_potatoModeratelyEarly    Cultivar = 21
	Cultivar_rapeWinter               Cultivar = 22
	Cultivar_ryeGrass                 Cultivar = 23
	Cultivar_ryeSilageWinter          Cultivar = 24
	Cultivar_ryeSpring                Cultivar = 25
	Cultivar_ryeWinter                Cultivar = 26
	Cultivar_sorghum                  Cultivar = 27
	Cultivar_soybean0                 Cultivar = 28
	Cultivar_soybean00                Cultivar = 29
	Cultivar_soybean000               Cultivar = 30
	Cultivar_soybean0000              Cultivar = 31
	Cultivar_soybeanI                 Cultivar = 32
	Cultivar_soybeanII                Cultivar = 33
	Cultivar_soybeanIII               Cultivar = 34
	Cultivar_soybeanIV                Cultivar = 35
	Cultivar_soybeanV                 Cultivar = 36
	Cultivar_soybeanVI                Cultivar = 37
	Cultivar_soybeanVII               Cultivar = 38
	Cultivar_soybeanVIII              Cultivar = 39
	Cultivar_soybeanIX                Cultivar = 40
	Cultivar_soybeanX                 Cultivar = 41
	Cultivar_soybeanXI                Cultivar = 42
	Cultivar_soybeanXII               Cultivar = 43
	Cultivar_sudanGrass               Cultivar = 44
	Cultivar_sugarBeet                Cultivar = 45
	Cultivar_sugarcaneTransplant      Cultivar = 46
	Cultivar_sugarcaneRatoon          Cultivar = 47
	Cultivar_tomatoField              Cultivar = 48
	Cultivar_triticaleSpring          Cultivar = 49
	Cultivar_triticaleWinter          Cultivar = 50
	Cultivar_wheatDurum               Cultivar = 51
	Cultivar_wheatSpring              Cultivar = 52
	Cultivar_wheatWinter              Cultivar = 53
)

// String returns the enum's constant name.
func (c Cultivar) String() string {
	switch c {
	case Cultivar_alfalfaClovergrassLeyMix:
		return "alfalfaClovergrassLeyMix"
	case Cultivar_alfalfa:
		return "alfalfa"
	case Cultivar_bacharia:
		return "bacharia"
	case Cultivar_barleySpring:
		return "barleySpring"
	case Cultivar_barleyWinter:
		return "barleyWinter"
	case Cultivar_cloverGrassLey:
		return "cloverGrassLey"
	case Cultivar_cottonBrMid:
		return "cottonBrMid"
	case Cultivar_cottonLong:
		return "cottonLong"
	case Cultivar_cottonMid:
		return "cottonMid"
	case Cultivar_cottonShort:
		return "cottonShort"
	case Cultivar_einkorn:
		return "einkorn"
	case Cultivar_emmer:
		return "emmer"
	case Cultivar_fieldPea24:
		return "fieldPea24"
	case Cultivar_fieldPea26:
		return "fieldPea26"
	case Cultivar_grapevine:
		return "grapevine"
	case Cultivar_maizeGrain:
		return "maizeGrain"
	case Cultivar_maizeSilage:
		return "maizeSilage"
	case Cultivar_mustard:
		return "mustard"
	case Cultivar_oatCompound:
		return "oatCompound"
	case Cultivar_oilRadish:
		return "oilRadish"
	case Cultivar_phacelia:
		return "phacelia"
	case Cultivar_potatoModeratelyEarly:
		return "potatoModeratelyEarly"
	case Cultivar_rapeWinter:
		return "rapeWinter"
	case Cultivar_ryeGrass:
		return "ryeGrass"
	case Cultivar_ryeSilageWinter:
		return "ryeSilageWinter"
	case Cultivar_ryeSpring:
		return "ryeSpring"
	case Cultivar_ryeWinter:
		return "ryeWinter"
	case Cultivar_sorghum:
		return "sorghum"
	case Cultivar_soybean0:
		return "soybean0"
	case Cultivar_soybean00:
		return "soybean00"
	case Cultivar_soybean000:
		return "soybean000"
	case Cultivar_soybean0000:
		return "soybean0000"
	case Cultivar_soybeanI:
		return "soybeanI"
	case Cultivar_soybeanII:
		return "soybeanII"
	case Cultivar_soybeanIII:
		return "soybeanIII"
	case Cultivar_soybeanIV:
		return "soybeanIV"
	case Cultivar_soybeanV:
		return "soybeanV"
	case Cultivar_soybeanVI:
		return "soybeanVI"
	case Cultivar_soybeanVII:
		return "soybeanVII"
	case Cultivar_soybeanVIII:
		return "soybeanVIII"
	case Cultivar_soybeanIX:
		return "soybeanIX"
	case Cultivar_soybeanX:
		return "soybeanX"
	case Cultivar_soybeanXI:
		return "soybeanXI"
	case Cultivar_soybeanXII:
		return "soybeanXII"
	case Cultivar_sudanGrass:
		return "sudanGrass"
	case Cultivar_sugarBeet:
		return "sugarBeet"
	case Cultivar_sugarcaneTransplant:
		return "sugarcaneTransplant"
	case Cultivar_sugarcaneRatoon:
		return "sugarcaneRatoon"
	case Cultivar_tomatoField:
		return "tomatoField"
	case Cultivar_triticaleSpring:
		return "triticaleSpring"
	case Cultivar_triticaleWinter:
		return "triticaleWinter"
	case Cultivar_wheatDurum:
		return "wheatDurum"
	case Cultivar_wheatSpring:
		return "wheatSpring"
	case Cultivar_wheatWinter:
		return "wheatWinter"

	default:
		return ""
	}
}

// CultivarFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CultivarFromString(c string) Cultivar {
	switch c {
	case "alfalfaClovergrassLeyMix":
		return Cultivar_alfalfaClovergrassLeyMix
	case "alfalfa":
		return Cultivar_alfalfa
	case "bacharia":
		return Cultivar_bacharia
	case "barleySpring":
		return Cultivar_barleySpring
	case "barleyWinter":
		return Cultivar_barleyWinter
	case "cloverGrassLey":
		return Cultivar_cloverGrassLey
	case "cottonBrMid":
		return Cultivar_cottonBrMid
	case "cottonLong":
		return Cultivar_cottonLong
	case "cottonMid":
		return Cultivar_cottonMid
	case "cottonShort":
		return Cultivar_cottonShort
	case "einkorn":
		return Cultivar_einkorn
	case "emmer":
		return Cultivar_emmer
	case "fieldPea24":
		return Cultivar_fieldPea24
	case "fieldPea26":
		return Cultivar_fieldPea26
	case "grapevine":
		return Cultivar_grapevine
	case "maizeGrain":
		return Cultivar_maizeGrain
	case "maizeSilage":
		return Cultivar_maizeSilage
	case "mustard":
		return Cultivar_mustard
	case "oatCompound":
		return Cultivar_oatCompound
	case "oilRadish":
		return Cultivar_oilRadish
	case "phacelia":
		return Cultivar_phacelia
	case "potatoModeratelyEarly":
		return Cultivar_potatoModeratelyEarly
	case "rapeWinter":
		return Cultivar_rapeWinter
	case "ryeGrass":
		return Cultivar_ryeGrass
	case "ryeSilageWinter":
		return Cultivar_ryeSilageWinter
	case "ryeSpring":
		return Cultivar_ryeSpring
	case "ryeWinter":
		return Cultivar_ryeWinter
	case "sorghum":
		return Cultivar_sorghum
	case "soybean0":
		return Cultivar_soybean0
	case "soybean00":
		return Cultivar_soybean00
	case "soybean000":
		return Cultivar_soybean000
	case "soybean0000":
		return Cultivar_soybean0000
	case "soybeanI":
		return Cultivar_soybeanI
	case "soybeanII":
		return Cultivar_soybeanII
	case "soybeanIII":
		return Cultivar_soybeanIII
	case "soybeanIV":
		return Cultivar_soybeanIV
	case "soybeanV":
		return Cultivar_soybeanV
	case "soybeanVI":
		return Cultivar_soybeanVI
	case "soybeanVII":
		return Cultivar_soybeanVII
	case "soybeanVIII":
		return Cultivar_soybeanVIII
	case "soybeanIX":
		return Cultivar_soybeanIX
	case "soybeanX":
		return Cultivar_soybeanX
	case "soybeanXI":
		return Cultivar_soybeanXI
	case "soybeanXII":
		return Cultivar_soybeanXII
	case "sudanGrass":
		return Cultivar_sudanGrass
	case "sugarBeet":
		return Cultivar_sugarBeet
	case "sugarcaneTransplant":
		return Cultivar_sugarcaneTransplant
	case "sugarcaneRatoon":
		return Cultivar_sugarcaneRatoon
	case "tomatoField":
		return Cultivar_tomatoField
	case "triticaleSpring":
		return Cultivar_triticaleSpring
	case "triticaleWinter":
		return Cultivar_triticaleWinter
	case "wheatDurum":
		return Cultivar_wheatDurum
	case "wheatSpring":
		return Cultivar_wheatSpring
	case "wheatWinter":
		return Cultivar_wheatWinter

	default:
		return 0
	}
}

type Cultivar_List struct{ capnp.List }

func NewCultivar_List(s *capnp.Segment, sz int32) (Cultivar_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Cultivar_List{l.List}, err
}

func (l Cultivar_List) At(i int) Cultivar {
	ul := capnp.UInt16List{List: l.List}
	return Cultivar(ul.At(i))
}

func (l Cultivar_List) Set(i int, v Cultivar) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Crop struct{ Client *capnp.Client }

// Crop_TypeID is the unique identifier for the type Crop.
const Crop_TypeID = 0xe88d97a324bf5c84

func (c Crop) Parameters(ctx context.Context, params func(Crop_parameters_Params) error) (Crop_parameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_parameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Crop_parameters_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Cultivar(ctx context.Context, params func(Crop_cultivar_Params) error) (Crop_cultivar_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_cultivar_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Crop_cultivar_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Crop) AddRef() Crop {
	return Crop{
		Client: c.Client.AddRef(),
	}
}

func (c Crop) Release() {
	c.Client.Release()
}

// A Crop_Server is a Crop with a local implementation.
type Crop_Server interface {
	Parameters(context.Context, Crop_parameters) error

	Cultivar(context.Context, Crop_cultivar) error

	Info(context.Context, common.Identifiable_info) error
}

// Crop_NewServer creates a new Server from an implementation of Crop_Server.
func Crop_NewServer(s Crop_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Crop_Methods(nil, s), s, c, policy)
}

// Crop_ServerToClient creates a new Client from an implementation of Crop_Server.
// The caller is responsible for calling Release on the returned Client.
func Crop_ServerToClient(s Crop_Server, policy *server.Policy) Crop {
	return Crop{Client: capnp.NewClient(Crop_NewServer(s, policy))}
}

// Crop_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Crop_Methods(methods []server.Method, s Crop_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Parameters(ctx, Crop_parameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cultivar(ctx, Crop_cultivar{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Crop_parameters holds the state for a server call to Crop.parameters.
// See server.Call for documentation.
type Crop_parameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_parameters) Args() Crop_parameters_Params {
	return Crop_parameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Crop_parameters) AllocResults() (Crop_parameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results{Struct: r}, err
}

// Crop_cultivar holds the state for a server call to Crop.cultivar.
// See server.Call for documentation.
type Crop_cultivar struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_cultivar) Args() Crop_cultivar_Params {
	return Crop_cultivar_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Crop_cultivar) AllocResults() (Crop_cultivar_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Crop_cultivar_Results{Struct: r}, err
}

type Crop_parameters_Params struct{ capnp.Struct }

// Crop_parameters_Params_TypeID is the unique identifier for the type Crop_parameters_Params.
const Crop_parameters_Params_TypeID = 0xc86e010e743c8e5b

func NewCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params{st}, err
}

func NewRootCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params{st}, err
}

func ReadRootCrop_parameters_Params(msg *capnp.Message) (Crop_parameters_Params, error) {
	root, err := msg.Root()
	return Crop_parameters_Params{root.Struct()}, err
}

func (s Crop_parameters_Params) String() string {
	str, _ := text.Marshal(0xc86e010e743c8e5b, s.Struct)
	return str
}

// Crop_parameters_Params_List is a list of Crop_parameters_Params.
type Crop_parameters_Params_List struct{ capnp.List }

// NewCrop_parameters_Params creates a new list of Crop_parameters_Params.
func NewCrop_parameters_Params_List(s *capnp.Segment, sz int32) (Crop_parameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Crop_parameters_Params_List{l}, err
}

func (s Crop_parameters_Params_List) At(i int) Crop_parameters_Params {
	return Crop_parameters_Params{s.List.Struct(i)}
}

func (s Crop_parameters_Params_List) Set(i int, v Crop_parameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_parameters_Params_List) String() string {
	str, _ := text.MarshalList(0xc86e010e743c8e5b, s.List)
	return str
}

// Crop_parameters_Params_Future is a wrapper for a Crop_parameters_Params promised by a client call.
type Crop_parameters_Params_Future struct{ *capnp.Future }

func (p Crop_parameters_Params_Future) Struct() (Crop_parameters_Params, error) {
	s, err := p.Future.Struct()
	return Crop_parameters_Params{s}, err
}

type Crop_parameters_Results struct{ capnp.Struct }

// Crop_parameters_Results_TypeID is the unique identifier for the type Crop_parameters_Results.
const Crop_parameters_Results_TypeID = 0xe4fafc722d515486

func NewCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results{st}, err
}

func NewRootCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results{st}, err
}

func ReadRootCrop_parameters_Results(msg *capnp.Message) (Crop_parameters_Results, error) {
	root, err := msg.Root()
	return Crop_parameters_Results{root.Struct()}, err
}

func (s Crop_parameters_Results) String() string {
	str, _ := text.Marshal(0xe4fafc722d515486, s.Struct)
	return str
}

func (s Crop_parameters_Results) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Crop_parameters_Results) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Crop_parameters_Results) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Crop_parameters_Results_List is a list of Crop_parameters_Results.
type Crop_parameters_Results_List struct{ capnp.List }

// NewCrop_parameters_Results creates a new list of Crop_parameters_Results.
func NewCrop_parameters_Results_List(s *capnp.Segment, sz int32) (Crop_parameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Crop_parameters_Results_List{l}, err
}

func (s Crop_parameters_Results_List) At(i int) Crop_parameters_Results {
	return Crop_parameters_Results{s.List.Struct(i)}
}

func (s Crop_parameters_Results_List) Set(i int, v Crop_parameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_parameters_Results_List) String() string {
	str, _ := text.MarshalList(0xe4fafc722d515486, s.List)
	return str
}

// Crop_parameters_Results_Future is a wrapper for a Crop_parameters_Results promised by a client call.
type Crop_parameters_Results_Future struct{ *capnp.Future }

func (p Crop_parameters_Results_Future) Struct() (Crop_parameters_Results, error) {
	s, err := p.Future.Struct()
	return Crop_parameters_Results{s}, err
}

func (p Crop_parameters_Results_Future) Params() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Crop_cultivar_Params struct{ capnp.Struct }

// Crop_cultivar_Params_TypeID is the unique identifier for the type Crop_cultivar_Params.
const Crop_cultivar_Params_TypeID = 0xf26ef117dfb4517a

func NewCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params{st}, err
}

func NewRootCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params{st}, err
}

func ReadRootCrop_cultivar_Params(msg *capnp.Message) (Crop_cultivar_Params, error) {
	root, err := msg.Root()
	return Crop_cultivar_Params{root.Struct()}, err
}

func (s Crop_cultivar_Params) String() string {
	str, _ := text.Marshal(0xf26ef117dfb4517a, s.Struct)
	return str
}

// Crop_cultivar_Params_List is a list of Crop_cultivar_Params.
type Crop_cultivar_Params_List struct{ capnp.List }

// NewCrop_cultivar_Params creates a new list of Crop_cultivar_Params.
func NewCrop_cultivar_Params_List(s *capnp.Segment, sz int32) (Crop_cultivar_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Crop_cultivar_Params_List{l}, err
}

func (s Crop_cultivar_Params_List) At(i int) Crop_cultivar_Params {
	return Crop_cultivar_Params{s.List.Struct(i)}
}

func (s Crop_cultivar_Params_List) Set(i int, v Crop_cultivar_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_cultivar_Params_List) String() string {
	str, _ := text.MarshalList(0xf26ef117dfb4517a, s.List)
	return str
}

// Crop_cultivar_Params_Future is a wrapper for a Crop_cultivar_Params promised by a client call.
type Crop_cultivar_Params_Future struct{ *capnp.Future }

func (p Crop_cultivar_Params_Future) Struct() (Crop_cultivar_Params, error) {
	s, err := p.Future.Struct()
	return Crop_cultivar_Params{s}, err
}

type Crop_cultivar_Results struct{ capnp.Struct }

// Crop_cultivar_Results_TypeID is the unique identifier for the type Crop_cultivar_Results.
const Crop_cultivar_Results_TypeID = 0xbf3704bba52494ba

func NewCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Crop_cultivar_Results{st}, err
}

func NewRootCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Crop_cultivar_Results{st}, err
}

func ReadRootCrop_cultivar_Results(msg *capnp.Message) (Crop_cultivar_Results, error) {
	root, err := msg.Root()
	return Crop_cultivar_Results{root.Struct()}, err
}

func (s Crop_cultivar_Results) String() string {
	str, _ := text.Marshal(0xbf3704bba52494ba, s.Struct)
	return str
}

func (s Crop_cultivar_Results) Cult() Cultivar {
	return Cultivar(s.Struct.Uint16(0))
}

func (s Crop_cultivar_Results) SetCult(v Cultivar) {
	s.Struct.SetUint16(0, uint16(v))
}

// Crop_cultivar_Results_List is a list of Crop_cultivar_Results.
type Crop_cultivar_Results_List struct{ capnp.List }

// NewCrop_cultivar_Results creates a new list of Crop_cultivar_Results.
func NewCrop_cultivar_Results_List(s *capnp.Segment, sz int32) (Crop_cultivar_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Crop_cultivar_Results_List{l}, err
}

func (s Crop_cultivar_Results_List) At(i int) Crop_cultivar_Results {
	return Crop_cultivar_Results{s.List.Struct(i)}
}

func (s Crop_cultivar_Results_List) Set(i int, v Crop_cultivar_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_cultivar_Results_List) String() string {
	str, _ := text.MarshalList(0xbf3704bba52494ba, s.List)
	return str
}

// Crop_cultivar_Results_Future is a wrapper for a Crop_cultivar_Results promised by a client call.
type Crop_cultivar_Results_Future struct{ *capnp.Future }

func (p Crop_cultivar_Results_Future) Struct() (Crop_cultivar_Results, error) {
	s, err := p.Future.Struct()
	return Crop_cultivar_Results{s}, err
}

const schema_f98a24e1969df972 = "x\xda|UM\x8c\x14U\x10\xaez=3\xbd\x800" +
	"\xcc\x16\xb0\x82\"\xa2\x83\x0a\x0a\xce\x02j$\x1aV\x10" +
	"q\x08\x9b0\xbb\xb0\xbb\xa2\x1e\xde\xce<fZ{\xba" +
	"\xdb\xd7=\xab\xb3\x89\xd9@T\x12\x13=\x19\xbd\xe8\x05" +
	"\xe3\x81\x83Q\x08\x1e\xd0\x10\xb2\x07\x13\x7f\xe2a\x0f\x9b" +
	"\xe8ac0\x9a\xe8\xc1\x03&\x1e\xd6\xb8y\xe6\xd5\xec" +
	"0M\x8c&\x9dT}\xf5}_\xd5\xeb\x97Nui" +
	"\x83\x18\x12\x83\xd9\xb3Y\x80\xcaP6g>\x7f\xa7\xf8" +
	"\xd1\x17\x99G\xaeBe-\"@\xc6\x05\xd8s^\xac" +
	"D@\xba \xf6\x03\x9ag\xdf~,Y\x83\xc1WP" +
	"X\xdb\xe5\xe7D?B\xc6\\\xfa\xa9\xd67\xf2\xe9\xe9" +
	"\x05(\xac\x12F/~\xf0\xee\xb5\xe2\x9b\x8b\x00H\x97" +
	"\xc59\x9a\x15VyE\x0cd\x01\xcd\x1b\xc7+;\xf5" +
	"\xdf\x7f\xfd\xdc\xe9\x91EK\xcd\xe76\xd9!\x0b9;" +
	"\xe4\xb5\xe7\xae\x16?|\xef\xad_\xa1\xb0\xca\xb9\xa9\xd5" +
	"R\xee\x0c\xa1\xeb\x02\xd0R\xee,\x9dp\x07\x00\xcct" +
	"\xe5\xd2\x8f\x03\xd7\x83?R':\xe4\x0a\x04m\xaa:" +
	"\x8cvUe\xe4\x04\xd1\xbe\x83\x9c\xb7\xfc\xc4\x9b\x92\xba" +
	"8\xa2\xe2\x96\x9f\xc4\x00\x95\x8c\x93\x01\xc8 @a\xf5" +
	"\x0e\x80J\x9f\x83\x95u\x02\xf3V\x89\xf9\xde;\x01b" +
	"\x1e\xf0\xdf\x1d#\xa9eS%J\xc7\xc5c6\xc5\xf8" +
	"\x86\x06\xad\xc6\x0et\xa7\xa4>\x86X\xf9\x1e\x05\x00\x9d" +
	"\x16\xdf\xd8n\xf4\xba8\x00\x80\x82^\x15G\x00\xd0\xa1" +
	"\xb6x\x01\x003\xd4\xe2\x98\xa5\x97\xc44\x00\xe6\xa8)" +
	"&\x01\xd0%O\x9c\x04\xc0>Rb\x04\x00W\x90\xe4" +
	"\xfaJz\x9e\xfb\xac\xa2\x13b7\x00\xdeB\xc3\xac[" +
	"Me\x8ek\xe8\x10\xeb\xf3\xf4\x04\xe3\xb5\xf48\xfb\x0a" +
	"\xf4(\xfb\xfai\x901\xd1N\xd6\xad\xa3\xed|\x9e\xf5" +
	"\xb4M\\\x04\xc0\x0d\xb4\x8d}\x03\xb4\x95\xeb\xb7\xd2f" +
	"q\x06\x007\xd2F\xd6o\xa2\xf5\x1co\xa3\x02\xf7\xbb" +
	"\x9dV\xb0n3e\xb9~\x07!\xfb\xb7\xd0\x12\xda9" +
	"w\xd2\"Z~+\xfd\x89\x96\xbf\x8b\xae\xa3\xe5\xef\xa6" +
	"\xdf\x19\x17\xe97\xe6\xb7\xd1/\x8c\xef\xa1k\xcc\xdfK" +
	"\x0b\xec\xbf\x8f~\xe0\xfav\x9ag\xdd\x0e\x9ac|?" +
	"}\xc7\xba\x07\xe8k\x8e;\xe9K\xae\xef\xa2Y<\x07" +
	"\x80\x0f\xd2,\xdas\x97\xe8\x0a\xf7\x19\xa4\xcb\x8cw\xd3" +
	"g\x1c\xf7\xd0\x05\xf6\xed\xa5\x8f\x99\x7f\x88\xce\xdbh\xa4" +
	"\x7f\xca>\x07\x85\x1fN)]\xd72\x8e\x8f\xaa\xf6\xb0" +
	"\xf7\x0a\xc0\xcc2g&e\xb5!\xb5'\x01\xc0LJ" +
	"\xed\xab\xf6h\x04y\xed\x05\xf5e8\xeeA>H\x94" +
	"6U\xeerX\xc3\xfeN\x1fS\x0d\x93$\x0c\x0eh" +
	"p\x87\xbd\xda2:\x1a\x82\x13\xd4\x97\xc1\xb0\x07\xd8%" +
	"F\x1b\xe0\x86:\x99Q^\xf0b\xa8\x83-\xaa\xd9T" +
	"\xda\x9c\xf2\x94_;\xa6$8\xbb\xf7\xa6\xc1\xc3\xa6\xae" +
	"e\xa4\xa6\xbc\x00P\x99\xa6\xf4\xa6\xd5a-\xc1\xf1\x82" +
	"\x0e\x18\xf5|pe]\xcd4[q\"u\xcd\x842" +
	"9\x186\xa3\x10\xdcVP3\xa1\xe7\x8f\xc8\x9a\x17\x03" +
	"6L\xd4\x90U\xe5w^0\x0a\x13\x99\x84\xc3!\xd6" +
	"\x94\x96\x89\xf2\xdb[\x0eI\xed\xb7\x8d\x9d5\xee\x05\x09" +
	"8J\x1b\xdd\xb6\xb3\xe2\xd8\x1at\xdb\x8e\x92u\xc1\xb4" +
	"\xd2`\x0b\x91\xf6\x02\xac[\x8e\x8b\x80z&\x0eu\xbd" +
	"\xd1j\x9a8lO*\x19\x94\xac\xf7F\x8e\xa5^\xee" +
	"\x94R\xc0-\xf5P9e)\x03\x96{\xb9SN\x01" +
	"\x1c\xeb\xe6c)\xc3X\xca0\x966\x8c\x81[\xbe\xc9" +
	">\xd1\xcd'R\xf6\x89\x94}\xa2co\xd5d\xc07" +
	"\x1e\xc7&n\xd5\xa5>\xa0\x14`\xd2\xc9\xab2@u" +
	"\\\xcb \x8e|W\x06\xbd\xaaP#2\x09\xc3\x00\x92" +
	"\xb0)\x93\xf0)\xcfU~\xcd$\xdaK\xbc\xaa\xf43" +
	"\x9d\xab\xabC\xb7\xd0\xbd\xd4\x97\x1bJ&O\xb6\xb4\xd3" +
	"j\x1a\xceG#\x0d\xae\xfd\x04\x19\x8d{\x01\xb8\xfc\x05" +
	"\xfe\xcf\x02\xe3\xa5\xe8$qz'\xee\xeb\xed\xc4\xfd," +
	"\x8d\xb1\x1f\x04\xf6\xa7v!.\xb7\x02\xbb\xe3\xfa\x9c," +
	"\xf6~\x12\xd8\xdd\xf4\x85\xc1\x93 \x0a\xdb\xdd\xd4\xba\xc6" +
	"\xee\xaf\xa6\xb0\xf9\x08\x88\xc2z\xd7t\x8f\x02\x8e\x8e\x87" +
	"\xd0t\x975\x00\x0ca%\x83h\xe6\x9f~\xff\x99o" +
	"\xe7>\xb9h\xef\xfd\xbfw;\xef\xe1\x18\xfe\x09\x00\x00" +
	"\xff\xff\x8cb\x02:"

func init() {
	schemas.Register(schema_f98a24e1969df972,
		0xbf3704bba52494ba,
		0xc86e010e743c8e5b,
		0xdd81b0520864e2b4,
		0xe4fafc722d515486,
		0xe88d97a324bf5c84,
		0xf26ef117dfb4517a)
}
