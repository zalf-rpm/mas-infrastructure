// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: a.capnp

#include "a.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<27> b_ba9eff6fb3abc84f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 200, 171, 179, 111, 255, 158, 186,
      8,   0,   0,   0,   3,   0,   0,   0,
    155, 183, 107, 130, 162, 104, 180, 196,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  71,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  46,  99,  97, 112, 110, 112,  58,
     65,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    247,  37, 104, 225, 192, 233,   6, 197,
    239, 117, 106,  48, 249,   8,  33, 158,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    109, 101, 116, 104, 111, 100,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ba9eff6fb3abc84f = b_ba9eff6fb3abc84f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ba9eff6fb3abc84f[] = {
  &s_9e2108f9306a75ef,
  &s_c506e9c0e16825f7,
};
static const uint16_t m_ba9eff6fb3abc84f[] = {0};
const ::capnp::_::RawSchema s_ba9eff6fb3abc84f = {
  0xba9eff6fb3abc84f, b_ba9eff6fb3abc84f.words, 27, d_ba9eff6fb3abc84f, m_ba9eff6fb3abc84f,
  2, 1, nullptr, nullptr, nullptr, { &s_ba9eff6fb3abc84f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_c506e9c0e16825f7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    247,  37, 104, 225, 192, 233,   6, 197,
     10,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  46,  99,  97, 112, 110, 112,  58,
     65,  46, 109, 101, 116, 104, 111, 100,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c506e9c0e16825f7 = b_c506e9c0e16825f7.words;
#if !CAPNP_LITE
static const uint16_t m_c506e9c0e16825f7[] = {0};
static const uint16_t i_c506e9c0e16825f7[] = {0};
const ::capnp::_::RawSchema s_c506e9c0e16825f7 = {
  0xc506e9c0e16825f7, b_c506e9c0e16825f7.words, 31, nullptr, m_c506e9c0e16825f7,
  0, 1, i_c506e9c0e16825f7, nullptr, nullptr, { &s_c506e9c0e16825f7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_9e2108f9306a75ef = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    239, 117, 106,  48, 249,   8,  33, 158,
     10,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  46,  99,  97, 112, 110, 112,  58,
     65,  46, 109, 101, 116, 104, 111, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e2108f9306a75ef = b_9e2108f9306a75ef.words;
#if !CAPNP_LITE
static const uint16_t m_9e2108f9306a75ef[] = {0};
static const uint16_t i_9e2108f9306a75ef[] = {0};
const ::capnp::_::RawSchema s_9e2108f9306a75ef = {
  0x9e2108f9306a75ef, b_9e2108f9306a75ef.words, 32, nullptr, m_9e2108f9306a75ef,
  0, 1, i_9e2108f9306a75ef, nullptr, nullptr, { &s_9e2108f9306a75ef, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace rpc {
namespace test {

#if !CAPNP_LITE
::capnp::Request< ::mas::rpc::test::A::MethodParams,  ::mas::rpc::test::A::MethodResults>
A::Client::methodRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::rpc::test::A::MethodParams,  ::mas::rpc::test::A::MethodResults>(
      0xba9eff6fb3abc84full, 0, sizeHint);
}
::kj::Promise<void> A::Server::method(MethodContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "a.capnp:A", "method",
      0xba9eff6fb3abc84full, 0);
}
::capnp::Capability::Server::DispatchCallResult A::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xba9eff6fb3abc84full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("a.capnp:A", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult A::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        method(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::rpc::test::A::MethodParams,  ::mas::rpc::test::A::MethodResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "a.capnp:A",
          0xba9eff6fb3abc84full, methodId);
  }
}
#endif  // !CAPNP_LITE

// A
#if !CAPNP_LITE
constexpr ::capnp::Kind A::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* A::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// A::MethodParams
constexpr uint16_t A::MethodParams::_capnpPrivate::dataWordSize;
constexpr uint16_t A::MethodParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind A::MethodParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* A::MethodParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// A::MethodResults
constexpr uint16_t A::MethodResults::_capnpPrivate::dataWordSize;
constexpr uint16_t A::MethodResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind A::MethodResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* A::MethodResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

