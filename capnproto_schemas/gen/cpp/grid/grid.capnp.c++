// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: grid.capnp

#include "grid.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<81> b_a5ecdc7767a6b301 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1, 179, 166, 103, 119, 220, 236, 165,
     11,   0,   0,   0,   2,   0,   0,   0,
     35, 170,  96, 148, 115, 233, 115, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  65, 103, 103, 114, 101,
    103,  97, 116, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     64,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111, 110, 101,   0,   0,   0,   0,
    119,  65, 118, 103,   0,   0,   0,   0,
    119,  77, 101, 100, 105,  97, 110,   0,
    109, 105, 110,   0,   0,   0,   0,   0,
    109,  97, 120,   0,   0,   0,   0,   0,
    115, 117, 109,   0,   0,   0,   0,   0,
    105,  65, 118, 103,   0,   0,   0,   0,
    105,  77, 101, 100, 105,  97, 110,   0,
     97, 118, 103,   0,   0,   0,   0,   0,
    109, 101, 100, 105,  97, 110,   0,   0,
    119,  83, 117, 109,   0,   0,   0,   0,
    105,  83, 117, 109,   0,   0,   0,   0,
    119,  77, 105, 110,   0,   0,   0,   0,
    105,  77, 105, 110,   0,   0,   0,   0,
    119,  77,  97, 120,   0,   0,   0,   0,
    105,  77,  97, 120,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a5ecdc7767a6b301 = b_a5ecdc7767a6b301.words;
#if !CAPNP_LITE
static const uint16_t m_a5ecdc7767a6b301[] = {8, 6, 15, 7, 13, 11, 4, 9, 3, 0, 5, 1, 14, 2, 12, 10};
const ::capnp::_::RawSchema s_a5ecdc7767a6b301 = {
  0xa5ecdc7767a6b301, b_a5ecdc7767a6b301.words, 81, nullptr, m_a5ecdc7767a6b301,
  0, 16, nullptr, nullptr, nullptr, { &s_a5ecdc7767a6b301, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Aggregation_a5ecdc7767a6b301, a5ecdc7767a6b301);
static const ::capnp::_::AlignedData<129> b_e42973b29661e3c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
     11,   0,   0,   0,   3,   0,   0,   0,
     35, 170,  96, 148, 115, 233, 115, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,   7,   2,   0,   0,
    197,   1,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,   0,
     24,   0,   0,   0,   1,   0,   1,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
     41,   0,   0,   0,  50,   0,   0,   0,
    123,  87, 231,  39, 221, 251, 182, 169,
     37,   0,   0,   0,  90,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
     37,   0,   0,   0,  58,   0,   0,   0,
     29,  58,  51, 239,  23,  70,  68, 172,
     33,   0,   0,   0, 130,   0,   0,   0,
    100, 141, 241, 158,  27, 207,  92, 181,
     33,   0,   0,   0,  74,   0,   0,   0,
    211,  85, 203, 128, 130,  81,  57, 214,
     33,   0,   0,   0,  74,   0,   0,   0,
     86,  97, 108, 117, 101,   0,   0,   0,
     82, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     82, 111, 119,  67, 111, 108,   0,   0,
     65, 103, 103, 114, 101, 103,  97, 116,
    105, 111, 110,  80,  97, 114, 116,   0,
     76, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     67,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    154,   7,  12,  97,  28, 111, 126, 235,
    176,  64,  53, 131,  99,   2, 189, 168,
    241,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    235,  45,  30, 126, 185, 220, 158, 247,
    154, 199, 120,   7,  73, 186, 215, 140,
    221,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    190, 141, 192,  12, 242,  90,   0, 166,
    111,  37,  16,  22, 107, 111, 164, 231,
    201,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    182,  84, 218,  42, 111, 167,   4, 248,
    207,  31,  27,  42, 189,  50, 193, 155,
    181,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     47, 151, 230, 214, 189, 242, 143, 148,
    148,  89, 113, 252,  62, 243,  30, 162,
    161,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    151, 189, 102,  36, 153,  56, 115, 243,
    119,  51,  68, 211,  87, 206, 127, 229,
    137,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    186, 219, 207, 253, 179, 209, 173, 217,
    210, 235, 167, 120,  43, 213, 141, 155,
    117,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     72, 103, 106, 187, 104,  67,  78, 187,
    251, 196, 159, 189, 109, 231, 112, 209,
     97,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
     99, 108, 111, 115, 101, 115, 116,  86,
     97, 108, 117, 101,  65, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 105, 109, 101, 110, 115, 105, 111,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    110, 111,  68,  97, 116,  97,  86,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    118,  97, 108, 117, 101,  65, 116,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108,  97, 116,  76, 111, 110,  66, 111,
    117, 110, 100, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116, 114, 101,  97, 109,  67, 101,
    108, 108, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 110, 105, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e42973b29661e3c6 = b_e42973b29661e3c6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e42973b29661e3c6[] = {
  &s_8cd7ba490778c79a,
  &s_948ff2bdd6e6972f,
  &s_9b8dd52b78a7ebd2,
  &s_9bc132bd2a1b1fcf,
  &s_a21ef33efc715994,
  &s_a6005af20cc08dbe,
  &s_a8bd0263833540b0,
  &s_b2afd1cb599c48d5,
  &s_bb4e4368bb6a6748,
  &s_c1a7daa0dc36cb65,
  &s_d170e76dbd9fc4fb,
  &s_d9add1b3fdcfdbba,
  &s_e57fce57d3443377,
  &s_e7a46f6b1610256f,
  &s_eb7e6f1c610c079a,
  &s_f37338992466bd97,
  &s_f79edcb97e1e2deb,
  &s_f804a76f2ada54b6,
};
static const uint16_t m_e42973b29661e3c6[] = {0, 2, 5, 3, 1, 6, 7, 4};
const ::capnp::_::RawSchema s_e42973b29661e3c6 = {
  0xe42973b29661e3c6, b_e42973b29661e3c6.words, 129, d_e42973b29661e3c6, m_e42973b29661e3c6,
  18, 8, nullptr, nullptr, nullptr, { &s_e42973b29661e3c6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_fe2e0dfae573d9d0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
     16,   0,   0,   0,   1,   0,   2,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
      0,   0,   7,   0,   0,   0,   4,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     86,  97, 108, 117, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    102,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe2e0dfae573d9d0 = b_fe2e0dfae573d9d0.words;
#if !CAPNP_LITE
static const uint16_t m_fe2e0dfae573d9d0[] = {0, 1, 3, 2};
static const uint16_t i_fe2e0dfae573d9d0[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_fe2e0dfae573d9d0 = {
  0xfe2e0dfae573d9d0, b_fe2e0dfae573d9d0.words, 77, nullptr, m_fe2e0dfae573d9d0,
  0, 4, i_fe2e0dfae573d9d0, nullptr, nullptr, { &s_fe2e0dfae573d9d0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_a9b6fbdd27e7577b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    123,  87, 231,  39, 221, 251, 182, 169,
     16,   0,   0,   0,   1,   0,   2,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
      0,   0,   7,   0,   0,   0,   2,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     82, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 116, 101, 114,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 103, 114, 101, 101,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9b6fbdd27e7577b = b_a9b6fbdd27e7577b.words;
#if !CAPNP_LITE
static const uint16_t m_a9b6fbdd27e7577b[] = {1, 0};
static const uint16_t i_a9b6fbdd27e7577b[] = {0, 1};
const ::capnp::_::RawSchema s_a9b6fbdd27e7577b = {
  0xa9b6fbdd27e7577b, b_a9b6fbdd27e7577b.words, 48, nullptr, m_a9b6fbdd27e7577b,
  0, 2, i_a9b6fbdd27e7577b, nullptr, nullptr, { &s_a9b6fbdd27e7577b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_b9e2d85d086206ff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
     16,   0,   0,   0,   1,   0,   2,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     82, 111, 119,  67, 111, 108,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    114, 111, 119,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 108,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9e2d85d086206ff = b_b9e2d85d086206ff.words;
#if !CAPNP_LITE
static const uint16_t m_b9e2d85d086206ff[] = {1, 0};
static const uint16_t i_b9e2d85d086206ff[] = {0, 1};
const ::capnp::_::RawSchema s_b9e2d85d086206ff = {
  0xb9e2d85d086206ff, b_b9e2d85d086206ff.words, 47, nullptr, m_b9e2d85d086206ff,
  0, 2, i_b9e2d85d086206ff, nullptr, nullptr, { &s_b9e2d85d086206ff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<79> b_ac444617ef333a1d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     29,  58,  51, 239,  23,  70,  68, 172,
     16,   0,   0,   0,   1,   0,   2,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     65, 103, 103, 114, 101, 103,  97, 116,
    105, 111, 110,  80,  97, 114, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 119,  67, 111, 108,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 114, 101,  97,  70, 114,  97,  99,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,  86,  97, 108, 117, 101,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ac444617ef333a1d = b_ac444617ef333a1d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac444617ef333a1d[] = {
  &s_b9e2d85d086206ff,
  &s_fe2e0dfae573d9d0,
};
static const uint16_t m_ac444617ef333a1d[] = {2, 3, 1, 0};
static const uint16_t i_ac444617ef333a1d[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_ac444617ef333a1d = {
  0xac444617ef333a1d, b_ac444617ef333a1d.words, 79, d_ac444617ef333a1d, m_ac444617ef333a1d,
  2, 4, i_ac444617ef333a1d, nullptr, nullptr, { &s_ac444617ef333a1d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_b55ccf1b9ef18d64 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    100, 141, 241, 158,  27, 207,  92, 181,
     16,   0,   0,   0,   1,   0,   0,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     76, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    108,  97, 116,  76, 111, 110,  67, 111,
    111, 114, 100,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 111, 119,  67, 111, 108,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b55ccf1b9ef18d64 = b_b55ccf1b9ef18d64.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b55ccf1b9ef18d64[] = {
  &s_b9e2d85d086206ff,
  &s_ecf1fc3039cc8ffb,
  &s_fe2e0dfae573d9d0,
};
static const uint16_t m_b55ccf1b9ef18d64[] = {0, 1, 2};
static const uint16_t i_b55ccf1b9ef18d64[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b55ccf1b9ef18d64 = {
  0xb55ccf1b9ef18d64, b_b55ccf1b9ef18d64.words, 64, d_b55ccf1b9ef18d64, m_b55ccf1b9ef18d64,
  3, 3, i_b55ccf1b9ef18d64, nullptr, nullptr, { &s_b55ccf1b9ef18d64, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_d639518280cb55d3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211,  85, 203, 128, 130,  81,  57, 214,
     16,   0,   0,   0,   3,   0,   0,   0,
    198, 227,  97, 150, 178, 115,  41, 228,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     67,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    187, 246, 104, 143, 113, 199, 176, 233,
    121,  37, 139,  89, 110, 111,  83, 142,
     17,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,  67, 101, 108, 108,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d639518280cb55d3 = b_d639518280cb55d3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d639518280cb55d3[] = {
  &s_8e536f6e598b2579,
  &s_e9b0c7718f68f6bb,
};
static const uint16_t m_d639518280cb55d3[] = {0};
const ::capnp::_::RawSchema s_d639518280cb55d3 = {
  0xd639518280cb55d3, b_d639518280cb55d3.words, 30, d_d639518280cb55d3, m_d639518280cb55d3,
  2, 1, nullptr, nullptr, nullptr, { &s_d639518280cb55d3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e9b0c7718f68f6bb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    187, 246, 104, 143, 113, 199, 176, 233,
     25,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     67,  97, 108, 108,  98,  97,  99, 107,
     46, 115, 101, 110, 100,  67, 101, 108,
    108, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    109,  97, 120,  67, 111, 117, 110, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e9b0c7718f68f6bb = b_e9b0c7718f68f6bb.words;
#if !CAPNP_LITE
static const uint16_t m_e9b0c7718f68f6bb[] = {0};
static const uint16_t i_e9b0c7718f68f6bb[] = {0};
const ::capnp::_::RawSchema s_e9b0c7718f68f6bb = {
  0xe9b0c7718f68f6bb, b_e9b0c7718f68f6bb.words, 35, nullptr, m_e9b0c7718f68f6bb,
  0, 1, i_e9b0c7718f68f6bb, nullptr, nullptr, { &s_e9b0c7718f68f6bb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_8e536f6e598b2579 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    121,  37, 139,  89, 110, 111,  83, 142,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     67,  97, 108, 108,  98,  97,  99, 107,
     46, 115, 101, 110, 100,  67, 101, 108,
    108, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    100, 141, 241, 158,  27, 207,  92, 181,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e536f6e598b2579 = b_8e536f6e598b2579.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8e536f6e598b2579[] = {
  &s_b55ccf1b9ef18d64,
};
static const uint16_t m_8e536f6e598b2579[] = {0};
static const uint16_t i_8e536f6e598b2579[] = {0};
const ::capnp::_::RawSchema s_8e536f6e598b2579 = {
  0x8e536f6e598b2579, b_8e536f6e598b2579.words, 39, d_8e536f6e598b2579, m_8e536f6e598b2579,
  1, 1, i_8e536f6e598b2579, nullptr, nullptr, { &s_8e536f6e598b2579, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<113> b_eb7e6f1c610c079a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154,   7,  12,  97,  28, 111, 126, 235,
     16,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     99, 108, 111, 115, 101, 115, 116,  86,
     97, 108, 117, 101,  65, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
      5,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    189,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   0,   0,   0,   3,   0,   1,   0,
    200,   0,   0,   0,   2,   0,   1,   0,
    108,  97, 116, 108, 111, 110,  67, 111,
    111, 114, 100,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 103, 110, 111, 114, 101,  78, 111,
     68,  97, 116,  97,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    123,  87, 231,  39, 221, 251, 182, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 103, 103,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      1, 179, 166, 103, 119, 220, 236, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 116, 117, 114, 110,  82, 111,
    119,  67, 111, 108, 115,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  99, 108, 117, 100, 101,  65,
    103, 103,  80,  97, 114, 116, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb7e6f1c610c079a = b_eb7e6f1c610c079a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eb7e6f1c610c079a[] = {
  &s_a5ecdc7767a6b301,
  &s_a9b6fbdd27e7577b,
  &s_ecf1fc3039cc8ffb,
};
static const uint16_t m_eb7e6f1c610c079a[] = {3, 1, 5, 0, 2, 4};
static const uint16_t i_eb7e6f1c610c079a[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_eb7e6f1c610c079a = {
  0xeb7e6f1c610c079a, b_eb7e6f1c610c079a.words, 113, d_eb7e6f1c610c079a, m_eb7e6f1c610c079a,
  3, 6, i_eb7e6f1c610c079a, nullptr, nullptr, { &s_eb7e6f1c610c079a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<83> b_a8bd0263833540b0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176,  64,  53, 131,  99,   2, 189, 168,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
     99, 108, 111, 115, 101, 115, 116,  86,
     97, 108, 117, 101,  65, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 108,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 103, 103,  80,  97, 114, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     29,  58,  51, 239,  23,  70,  68, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8bd0263833540b0 = b_a8bd0263833540b0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8bd0263833540b0[] = {
  &s_ac444617ef333a1d,
  &s_b9e2d85d086206ff,
  &s_fe2e0dfae573d9d0,
};
static const uint16_t m_a8bd0263833540b0[] = {3, 2, 1, 0};
static const uint16_t i_a8bd0263833540b0[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_a8bd0263833540b0 = {
  0xa8bd0263833540b0, b_a8bd0263833540b0.words, 83, d_a8bd0263833540b0, m_a8bd0263833540b0,
  3, 4, i_a8bd0263833540b0, nullptr, nullptr, { &s_a8bd0263833540b0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_f79edcb97e1e2deb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    235,  45,  30, 126, 185, 220, 158, 247,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f79edcb97e1e2deb = b_f79edcb97e1e2deb.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f79edcb97e1e2deb = {
  0xf79edcb97e1e2deb, b_f79edcb97e1e2deb.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f79edcb97e1e2deb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_8cd7ba490778c79a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154, 199, 120,   7,  73, 186, 215, 140,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    123,  87, 231,  39, 221, 251, 182, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cd7ba490778c79a = b_8cd7ba490778c79a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8cd7ba490778c79a[] = {
  &s_a9b6fbdd27e7577b,
};
static const uint16_t m_8cd7ba490778c79a[] = {0};
static const uint16_t i_8cd7ba490778c79a[] = {0};
const ::capnp::_::RawSchema s_8cd7ba490778c79a = {
  0x8cd7ba490778c79a, b_8cd7ba490778c79a.words, 33, d_8cd7ba490778c79a, m_8cd7ba490778c79a,
  1, 1, i_8cd7ba490778c79a, nullptr, nullptr, { &s_8cd7ba490778c79a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_a6005af20cc08dbe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 141, 192,  12, 242,  90,   0, 166,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    100, 105, 109, 101, 110, 115, 105, 111,
    110,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a6005af20cc08dbe = b_a6005af20cc08dbe.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a6005af20cc08dbe = {
  0xa6005af20cc08dbe, b_a6005af20cc08dbe.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a6005af20cc08dbe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_e7a46f6b1610256f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111,  37,  16,  22, 107, 111, 164, 231,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    100, 105, 109, 101, 110, 115, 105, 111,
    110,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    114, 111, 119, 115,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 108, 115,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e7a46f6b1610256f = b_e7a46f6b1610256f.words;
#if !CAPNP_LITE
static const uint16_t m_e7a46f6b1610256f[] = {1, 0};
static const uint16_t i_e7a46f6b1610256f[] = {0, 1};
const ::capnp::_::RawSchema s_e7a46f6b1610256f = {
  0xe7a46f6b1610256f, b_e7a46f6b1610256f.words, 48, nullptr, m_e7a46f6b1610256f,
  0, 2, i_e7a46f6b1610256f, nullptr, nullptr, { &s_e7a46f6b1610256f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_f804a76f2ada54b6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    182,  84, 218,  42, 111, 167,   4, 248,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    110, 111,  68,  97, 116,  97,  86,  97,
    108, 117, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f804a76f2ada54b6 = b_f804a76f2ada54b6.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f804a76f2ada54b6 = {
  0xf804a76f2ada54b6, b_f804a76f2ada54b6.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f804a76f2ada54b6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_9bc132bd2a1b1fcf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207,  31,  27,  42, 189,  50, 193, 155,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    110, 111,  68,  97, 116,  97,  86,  97,
    108, 117, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 100,  97, 116,  97,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9bc132bd2a1b1fcf = b_9bc132bd2a1b1fcf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9bc132bd2a1b1fcf[] = {
  &s_fe2e0dfae573d9d0,
};
static const uint16_t m_9bc132bd2a1b1fcf[] = {0};
static const uint16_t i_9bc132bd2a1b1fcf[] = {0};
const ::capnp::_::RawSchema s_9bc132bd2a1b1fcf = {
  0x9bc132bd2a1b1fcf, b_9bc132bd2a1b1fcf.words, 33, d_9bc132bd2a1b1fcf, m_9bc132bd2a1b1fcf,
  1, 1, i_9bc132bd2a1b1fcf, nullptr, nullptr, { &s_9bc132bd2a1b1fcf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<94> b_948ff2bdd6e6972f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     47, 151, 230, 214, 189, 242, 143, 148,
     16,   0,   0,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    118,  97, 108, 117, 101,  65, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   8,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
      4,   0,   0,   0, 144,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    144,   0,   0,   0,   3,   0,   1,   0,
    156,   0,   0,   0,   2,   0,   1,   0,
    114, 111, 119,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 108,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    123,  87, 231,  39, 221, 251, 182, 169,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 103, 103,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      1, 179, 166, 103, 119, 220, 236, 165,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110,  99, 108, 117, 100, 101,  65,
    103, 103,  80,  97, 114, 116, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_948ff2bdd6e6972f = b_948ff2bdd6e6972f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_948ff2bdd6e6972f[] = {
  &s_a5ecdc7767a6b301,
  &s_a9b6fbdd27e7577b,
};
static const uint16_t m_948ff2bdd6e6972f[] = {3, 1, 4, 2, 0};
static const uint16_t i_948ff2bdd6e6972f[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_948ff2bdd6e6972f = {
  0x948ff2bdd6e6972f, b_948ff2bdd6e6972f.words, 94, d_948ff2bdd6e6972f, m_948ff2bdd6e6972f,
  2, 5, i_948ff2bdd6e6972f, nullptr, nullptr, { &s_948ff2bdd6e6972f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_a21ef33efc715994 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,  89, 113, 252,  62, 243,  30, 162,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    118,  97, 108, 117, 101,  65, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    208, 217, 115, 229, 250,  13,  46, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 103, 103,  80,  97, 114, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     29,  58,  51, 239,  23,  70,  68, 172,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a21ef33efc715994 = b_a21ef33efc715994.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a21ef33efc715994[] = {
  &s_ac444617ef333a1d,
  &s_fe2e0dfae573d9d0,
};
static const uint16_t m_a21ef33efc715994[] = {1, 0};
static const uint16_t i_a21ef33efc715994[] = {0, 1};
const ::capnp::_::RawSchema s_a21ef33efc715994 = {
  0xa21ef33efc715994, b_a21ef33efc715994.words, 52, d_a21ef33efc715994, m_a21ef33efc715994,
  2, 2, i_a21ef33efc715994, nullptr, nullptr, { &s_a21ef33efc715994, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f37338992466bd97 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 189, 102,  36, 153,  56, 115, 243,
     16,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    108,  97, 116,  76, 111, 110,  66, 111,
    117, 110, 100, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    117, 115, 101,  67, 101, 108, 108,  67,
    101, 110, 116, 101, 114,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f37338992466bd97 = b_f37338992466bd97.words;
#if !CAPNP_LITE
static const uint16_t m_f37338992466bd97[] = {0};
static const uint16_t i_f37338992466bd97[] = {0};
const ::capnp::_::RawSchema s_f37338992466bd97 = {
  0xf37338992466bd97, b_f37338992466bd97.words, 34, nullptr, m_f37338992466bd97,
  0, 1, i_f37338992466bd97, nullptr, nullptr, { &s_f37338992466bd97, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<78> b_e57fce57d3443377 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    119,  51,  68, 211,  87, 206, 127, 229,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    108,  97, 116,  76, 111, 110,  66, 111,
    117, 110, 100, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    116, 108,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 114,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 114,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 108,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e57fce57d3443377 = b_e57fce57d3443377.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e57fce57d3443377[] = {
  &s_ecf1fc3039cc8ffb,
};
static const uint16_t m_e57fce57d3443377[] = {3, 2, 0, 1};
static const uint16_t i_e57fce57d3443377[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_e57fce57d3443377 = {
  0xe57fce57d3443377, b_e57fce57d3443377.words, 78, d_e57fce57d3443377, m_e57fce57d3443377,
  1, 4, i_e57fce57d3443377, nullptr, nullptr, { &s_e57fce57d3443377, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_d9add1b3fdcfdbba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 219, 207, 253, 179, 209, 173, 217,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    115, 116, 114, 101,  97, 109,  67, 101,
    108, 108, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    116, 111, 112,  76, 101, 102, 116,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 116, 116, 111, 109,  82, 105,
    103, 104, 116,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    255,   6,  98,   8,  93, 216, 226, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d9add1b3fdcfdbba = b_d9add1b3fdcfdbba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d9add1b3fdcfdbba[] = {
  &s_b9e2d85d086206ff,
};
static const uint16_t m_d9add1b3fdcfdbba[] = {1, 0};
static const uint16_t i_d9add1b3fdcfdbba[] = {0, 1};
const ::capnp::_::RawSchema s_d9add1b3fdcfdbba = {
  0xd9add1b3fdcfdbba, b_d9add1b3fdcfdbba.words, 49, d_d9add1b3fdcfdbba, m_d9add1b3fdcfdbba,
  1, 2, i_d9add1b3fdcfdbba, nullptr, nullptr, { &s_d9add1b3fdcfdbba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9b8dd52b78a7ebd2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210, 235, 167, 120,  43, 213, 141, 155,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    115, 116, 114, 101,  97, 109,  67, 101,
    108, 108, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 108, 108,  98,  97,  99, 107,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    211,  85, 203, 128, 130,  81,  57, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9b8dd52b78a7ebd2 = b_9b8dd52b78a7ebd2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9b8dd52b78a7ebd2[] = {
  &s_d639518280cb55d3,
};
static const uint16_t m_9b8dd52b78a7ebd2[] = {0};
static const uint16_t i_9b8dd52b78a7ebd2[] = {0};
const ::capnp::_::RawSchema s_9b8dd52b78a7ebd2 = {
  0x9b8dd52b78a7ebd2, b_9b8dd52b78a7ebd2.words, 34, d_9b8dd52b78a7ebd2, m_9b8dd52b78a7ebd2,
  1, 1, i_9b8dd52b78a7ebd2, nullptr, nullptr, { &s_9b8dd52b78a7ebd2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_bb4e4368bb6a6748 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72, 103, 106, 187, 104,  67,  78, 187,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    117, 110, 105, 116,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb4e4368bb6a6748 = b_bb4e4368bb6a6748.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_bb4e4368bb6a6748 = {
  0xbb4e4368bb6a6748, b_bb4e4368bb6a6748.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_bb4e4368bb6a6748, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_d170e76dbd9fc4fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 196, 159, 189, 109, 231, 112, 209,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    103, 114, 105, 100,  46,  99,  97, 112,
    110, 112,  58,  71, 114, 105, 100,  46,
    117, 110, 105, 116,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 105, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d170e76dbd9fc4fb = b_d170e76dbd9fc4fb.words;
#if !CAPNP_LITE
static const uint16_t m_d170e76dbd9fc4fb[] = {0};
static const uint16_t i_d170e76dbd9fc4fb[] = {0};
const ::capnp::_::RawSchema s_d170e76dbd9fc4fb = {
  0xd170e76dbd9fc4fb, b_d170e76dbd9fc4fb.words, 32, nullptr, m_d170e76dbd9fc4fb,
  0, 1, i_d170e76dbd9fc4fb, nullptr, nullptr, { &s_d170e76dbd9fc4fb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace grid {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::grid::Grid::ClosestValueAtParams,  ::mas::schema::grid::Grid::ClosestValueAtResults>
Grid::Client::closestValueAtRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::ClosestValueAtParams,  ::mas::schema::grid::Grid::ClosestValueAtResults>(
      0xe42973b29661e3c6ull, 0, sizeHint);
}
::kj::Promise<void> Grid::Server::closestValueAt(ClosestValueAtContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "closestValueAt",
      0xe42973b29661e3c6ull, 0);
}
::capnp::Request< ::mas::schema::grid::Grid::ResolutionParams,  ::mas::schema::grid::Grid::ResolutionResults>
Grid::Client::resolutionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::ResolutionParams,  ::mas::schema::grid::Grid::ResolutionResults>(
      0xe42973b29661e3c6ull, 1, sizeHint);
}
::kj::Promise<void> Grid::Server::resolution(ResolutionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "resolution",
      0xe42973b29661e3c6ull, 1);
}
::capnp::Request< ::mas::schema::grid::Grid::DimensionParams,  ::mas::schema::grid::Grid::DimensionResults>
Grid::Client::dimensionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::DimensionParams,  ::mas::schema::grid::Grid::DimensionResults>(
      0xe42973b29661e3c6ull, 2, sizeHint);
}
::kj::Promise<void> Grid::Server::dimension(DimensionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "dimension",
      0xe42973b29661e3c6ull, 2);
}
::capnp::Request< ::mas::schema::grid::Grid::NoDataValueParams,  ::mas::schema::grid::Grid::NoDataValueResults>
Grid::Client::noDataValueRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::NoDataValueParams,  ::mas::schema::grid::Grid::NoDataValueResults>(
      0xe42973b29661e3c6ull, 3, sizeHint);
}
::kj::Promise<void> Grid::Server::noDataValue(NoDataValueContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "noDataValue",
      0xe42973b29661e3c6ull, 3);
}
::capnp::Request< ::mas::schema::grid::Grid::ValueAtParams,  ::mas::schema::grid::Grid::ValueAtResults>
Grid::Client::valueAtRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::ValueAtParams,  ::mas::schema::grid::Grid::ValueAtResults>(
      0xe42973b29661e3c6ull, 4, sizeHint);
}
::kj::Promise<void> Grid::Server::valueAt(ValueAtContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "valueAt",
      0xe42973b29661e3c6ull, 4);
}
::capnp::Request< ::mas::schema::grid::Grid::LatLonBoundsParams,  ::mas::schema::grid::Grid::LatLonBoundsResults>
Grid::Client::latLonBoundsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::LatLonBoundsParams,  ::mas::schema::grid::Grid::LatLonBoundsResults>(
      0xe42973b29661e3c6ull, 5, sizeHint);
}
::kj::Promise<void> Grid::Server::latLonBounds(LatLonBoundsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "latLonBounds",
      0xe42973b29661e3c6ull, 5);
}
::capnp::Request< ::mas::schema::grid::Grid::StreamCellsParams,  ::mas::schema::grid::Grid::StreamCellsResults>
Grid::Client::streamCellsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::StreamCellsParams,  ::mas::schema::grid::Grid::StreamCellsResults>(
      0xe42973b29661e3c6ull, 6, sizeHint);
}
::kj::Promise<void> Grid::Server::streamCells(StreamCellsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "streamCells",
      0xe42973b29661e3c6ull, 6);
}
::capnp::Request< ::mas::schema::grid::Grid::UnitParams,  ::mas::schema::grid::Grid::UnitResults>
Grid::Client::unitRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::UnitParams,  ::mas::schema::grid::Grid::UnitResults>(
      0xe42973b29661e3c6ull, 7, sizeHint);
}
::kj::Promise<void> Grid::Server::unit(UnitContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid", "unit",
      0xe42973b29661e3c6ull, 7);
}
::capnp::Capability::Server::DispatchCallResult Grid::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe42973b29661e3c6ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("grid.capnp:Grid", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Grid::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        closestValueAt(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::ClosestValueAtParams,  ::mas::schema::grid::Grid::ClosestValueAtResults>(context)),
        false
      };
    case 1:
      return {
        resolution(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::ResolutionParams,  ::mas::schema::grid::Grid::ResolutionResults>(context)),
        false
      };
    case 2:
      return {
        dimension(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::DimensionParams,  ::mas::schema::grid::Grid::DimensionResults>(context)),
        false
      };
    case 3:
      return {
        noDataValue(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::NoDataValueParams,  ::mas::schema::grid::Grid::NoDataValueResults>(context)),
        false
      };
    case 4:
      return {
        valueAt(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::ValueAtParams,  ::mas::schema::grid::Grid::ValueAtResults>(context)),
        false
      };
    case 5:
      return {
        latLonBounds(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::LatLonBoundsParams,  ::mas::schema::grid::Grid::LatLonBoundsResults>(context)),
        false
      };
    case 6:
      return {
        streamCells(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::StreamCellsParams,  ::mas::schema::grid::Grid::StreamCellsResults>(context)),
        false
      };
    case 7:
      return {
        unit(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::UnitParams,  ::mas::schema::grid::Grid::UnitResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "grid.capnp:Grid",
          0xe42973b29661e3c6ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Grid
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::Value
constexpr uint16_t Grid::Value::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::Value::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::Value::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::Resolution
constexpr uint16_t Grid::Resolution::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::Resolution::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::Resolution::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::Resolution::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::RowCol
constexpr uint16_t Grid::RowCol::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::RowCol::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::RowCol::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::RowCol::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::AggregationPart
constexpr uint16_t Grid::AggregationPart::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::AggregationPart::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::AggregationPart::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::AggregationPart::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::Location
constexpr uint16_t Grid::Location::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::Location::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::Location::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::Location::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::grid::Grid::Callback::SendCellsParams,  ::mas::schema::grid::Grid::Callback::SendCellsResults>
Grid::Callback::Client::sendCellsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::grid::Grid::Callback::SendCellsParams,  ::mas::schema::grid::Grid::Callback::SendCellsResults>(
      0xd639518280cb55d3ull, 0, sizeHint);
}
::kj::Promise<void> Grid::Callback::Server::sendCells(SendCellsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "grid.capnp:Grid.Callback", "sendCells",
      0xd639518280cb55d3ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Grid::Callback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd639518280cb55d3ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("grid.capnp:Grid.Callback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Grid::Callback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        sendCells(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::grid::Grid::Callback::SendCellsParams,  ::mas::schema::grid::Grid::Callback::SendCellsResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "grid.capnp:Grid.Callback",
          0xd639518280cb55d3ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Grid::Callback
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::Callback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::Callback::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::Callback::SendCellsParams
constexpr uint16_t Grid::Callback::SendCellsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::Callback::SendCellsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::Callback::SendCellsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::Callback::SendCellsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::Callback::SendCellsResults
constexpr uint16_t Grid::Callback::SendCellsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::Callback::SendCellsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::Callback::SendCellsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::Callback::SendCellsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::ClosestValueAtParams
constexpr uint16_t Grid::ClosestValueAtParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::ClosestValueAtParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::ClosestValueAtParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::ClosestValueAtParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::ClosestValueAtResults
constexpr uint16_t Grid::ClosestValueAtResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::ClosestValueAtResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::ClosestValueAtResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::ClosestValueAtResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::ResolutionParams
constexpr uint16_t Grid::ResolutionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::ResolutionParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::ResolutionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::ResolutionParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::ResolutionResults
constexpr uint16_t Grid::ResolutionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::ResolutionResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::ResolutionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::ResolutionResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::DimensionParams
constexpr uint16_t Grid::DimensionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::DimensionParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::DimensionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::DimensionParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::DimensionResults
constexpr uint16_t Grid::DimensionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::DimensionResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::DimensionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::DimensionResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::NoDataValueParams
constexpr uint16_t Grid::NoDataValueParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::NoDataValueParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::NoDataValueParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::NoDataValueParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::NoDataValueResults
constexpr uint16_t Grid::NoDataValueResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::NoDataValueResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::NoDataValueResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::NoDataValueResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::ValueAtParams
constexpr uint16_t Grid::ValueAtParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::ValueAtParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::ValueAtParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::ValueAtParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::ValueAtResults
constexpr uint16_t Grid::ValueAtResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::ValueAtResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::ValueAtResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::ValueAtResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::LatLonBoundsParams
constexpr uint16_t Grid::LatLonBoundsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::LatLonBoundsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::LatLonBoundsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::LatLonBoundsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::LatLonBoundsResults
constexpr uint16_t Grid::LatLonBoundsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::LatLonBoundsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::LatLonBoundsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::LatLonBoundsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::StreamCellsParams
constexpr uint16_t Grid::StreamCellsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::StreamCellsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::StreamCellsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::StreamCellsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::StreamCellsResults
constexpr uint16_t Grid::StreamCellsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::StreamCellsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::StreamCellsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::StreamCellsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::UnitParams
constexpr uint16_t Grid::UnitParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::UnitParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::UnitParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::UnitParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Grid::UnitResults
constexpr uint16_t Grid::UnitResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Grid::UnitResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Grid::UnitResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Grid::UnitResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

