// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: fbp.capnp

#include "fbp.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<43> b_d717ff7d6815a6b0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176, 166,  21, 104, 125, 255,  23, 215,
     10,   0,   0,   0,   3,   0,   0,   0,
     47, 178, 219, 104,  72,  44,  96, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 135,   0,   0,   0,
    125,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    101,  79,  60, 108,  24, 149, 112, 247,
      1,   0,   0,   0,  90,   0,   0,   0,
     78,  97, 109, 101,  84, 111,  80, 111,
    114, 116,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96, 237, 167, 251, 215,  87, 178, 245,
    166, 223, 177, 195, 142,  96,  88, 218,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    116,  70, 229,  29, 186, 185,  91, 190,
      5,  81, 231, 118,  90, 106,  12, 190,
     29,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 116, 117, 112,  80, 111, 114,
    116, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d717ff7d6815a6b0 = b_d717ff7d6815a6b0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d717ff7d6815a6b0[] = {
  &s_be0c6a5a76e75105,
  &s_be5bb9ba1de54674,
  &s_da58608ec3b1dfa6,
  &s_f5b257d7fba7ed60,
};
static const uint16_t m_d717ff7d6815a6b0[] = {0, 1};
const ::capnp::_::RawSchema s_d717ff7d6815a6b0 = {
  0xd717ff7d6815a6b0, b_d717ff7d6815a6b0.words, 43, d_d717ff7d6815a6b0, m_d717ff7d6815a6b0,
  4, 2, nullptr, nullptr, nullptr, { &s_d717ff7d6815a6b0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_f77095186c3c4f65 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101,  79,  60, 108,  24, 149, 112, 247,
     20,   0,   0,   0,   1,   0,   0,   0,
    176, 166,  21, 104, 125, 255,  23, 215,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,  46,  78,  97, 109, 101,
     84, 111,  80, 111, 114, 116,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 114, 116,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f77095186c3c4f65 = b_f77095186c3c4f65.words;
#if !CAPNP_LITE
static const uint16_t m_f77095186c3c4f65[] = {0, 1};
static const uint16_t i_f77095186c3c4f65[] = {0, 1};
const ::capnp::_::RawSchema s_f77095186c3c4f65 = {
  0xf77095186c3c4f65, b_f77095186c3c4f65.words, 48, nullptr, m_f77095186c3c4f65,
  0, 2, i_f77095186c3c4f65, nullptr, nullptr, { &s_f77095186c3c4f65, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<57> b_f5b257d7fba7ed60 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     96, 237, 167, 251, 215,  87, 178, 245,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,  46, 115, 101, 116, 117,
    112,  80, 111, 114, 116, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    105, 110,  80, 111, 114, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101,  79,  60, 108,  24, 149, 112, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116,  80, 111, 114, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    101,  79,  60, 108,  24, 149, 112, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f5b257d7fba7ed60 = b_f5b257d7fba7ed60.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f5b257d7fba7ed60[] = {
  &s_f77095186c3c4f65,
};
static const uint16_t m_f5b257d7fba7ed60[] = {0, 1};
static const uint16_t i_f5b257d7fba7ed60[] = {0, 1};
const ::capnp::_::RawSchema s_f5b257d7fba7ed60 = {
  0xf5b257d7fba7ed60, b_f5b257d7fba7ed60.words, 57, d_f5b257d7fba7ed60, m_f5b257d7fba7ed60,
  1, 2, i_f5b257d7fba7ed60, nullptr, nullptr, { &s_f5b257d7fba7ed60, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_da58608ec3b1dfa6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    166, 223, 177, 195, 142,  96,  88, 218,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,  46, 115, 101, 116, 117,
    112,  80, 111, 114, 116, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_da58608ec3b1dfa6 = b_da58608ec3b1dfa6.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_da58608ec3b1dfa6 = {
  0xda58608ec3b1dfa6, b_da58608ec3b1dfa6.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_da58608ec3b1dfa6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_be5bb9ba1de54674 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116,  70, 229,  29, 186, 185,  91, 190,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,  46, 115, 116, 111, 112,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_be5bb9ba1de54674 = b_be5bb9ba1de54674.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_be5bb9ba1de54674 = {
  0xbe5bb9ba1de54674, b_be5bb9ba1de54674.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_be5bb9ba1de54674, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_be0c6a5a76e75105 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5,  81, 231, 118,  90, 106,  12, 190,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  67, 111, 109, 112, 111, 110,
    101, 110, 116,  46, 115, 116, 111, 112,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_be0c6a5a76e75105 = b_be0c6a5a76e75105.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_be0c6a5a76e75105 = {
  0xbe0c6a5a76e75105, b_be0c6a5a76e75105.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_be0c6a5a76e75105, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_9f6bf783c59ae53f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     63, 229, 154, 197, 131, 247, 107, 159,
     10,   0,   0,   0,   3,   0,   0,   0,
     47, 178, 219, 104,  72,  44,  96, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    128,  61,  14, 208, 204,  23,  24, 210,
      9,   0,   0,   0,  58,   0,   0,   0,
    138,   2, 130, 234,  31,  24, 155, 251,
      5,   0,   0,   0,  58,   0,   0,   0,
     82, 101,  97, 100, 101, 114,   0,   0,
     87, 114, 105, 116, 101, 114,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9, 155, 108, 104,  14,  55, 102, 223,
    130,  66,  53, 100, 171,  86,  37, 157,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99, 108, 111, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9f6bf783c59ae53f = b_9f6bf783c59ae53f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f6bf783c59ae53f[] = {
  &s_9d2556ab64354282,
  &s_df66370e686c9b09,
};
static const uint16_t m_9f6bf783c59ae53f[] = {0};
const ::capnp::_::RawSchema s_9f6bf783c59ae53f = {
  0x9f6bf783c59ae53f, b_9f6bf783c59ae53f.words, 33, d_9f6bf783c59ae53f, m_9f6bf783c59ae53f,
  2, 1, nullptr, nullptr, nullptr, { &s_9f6bf783c59ae53f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_d21817ccd00e3d80 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    128,  61,  14, 208, 204,  23,  24, 210,
     16,   0,   0,   0,   3,   0,   0,   0,
     63, 229, 154, 197, 131, 247, 107, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,  31,   0,   0,   0,
     65,   0,   0,   0,  71,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     82, 101,  97, 100, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    206, 145, 241, 254, 121, 167, 100, 242,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  82,   0,   0,   0,
     73, 110, 112,  82, 101,  97, 100, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    170, 198, 199,  50, 193, 137, 155, 173,
    115, 150, 147, 193, 228, 245,  99, 216,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_d21817ccd00e3d80 = b_d21817ccd00e3d80.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d21817ccd00e3d80[] = {
  &s_ad9b89c132c7c6aa,
  &s_d863f5e4c1939673,
};
static const uint16_t m_d21817ccd00e3d80[] = {0};
const ::capnp::_::RawSchema s_d21817ccd00e3d80 = {
  0xd21817ccd00e3d80, b_d21817ccd00e3d80.words, 38, d_d21817ccd00e3d80, m_d21817ccd00e3d80,
  2, 1, nullptr, nullptr, nullptr, { &s_d21817ccd00e3d80, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ad9b89c132c7c6aa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    170, 198, 199,  50, 193, 137, 155, 173,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     82, 101,  97, 100, 101, 114,  46, 114,
    101,  97, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ad9b89c132c7c6aa = b_ad9b89c132c7c6aa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ad9b89c132c7c6aa = {
  0xad9b89c132c7c6aa, b_ad9b89c132c7c6aa.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ad9b89c132c7c6aa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_d863f5e4c1939673 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    115, 150, 147, 193, 228, 245,  99, 216,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     82, 101,  97, 100, 101, 114,  46, 114,
    101,  97, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d863f5e4c1939673 = b_d863f5e4c1939673.words;
#if !CAPNP_LITE
static const uint16_t m_d863f5e4c1939673[] = {0};
static const uint16_t i_d863f5e4c1939673[] = {0};
const ::capnp::_::RawSchema s_d863f5e4c1939673 = {
  0xd863f5e4c1939673, b_d863f5e4c1939673.words, 33, nullptr, m_d863f5e4c1939673,
  0, 1, i_d863f5e4c1939673, nullptr, nullptr, { &s_d863f5e4c1939673, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_fb9b181fea82028a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138,   2, 130, 234,  31,  24, 155, 251,
     16,   0,   0,   0,   3,   0,   0,   0,
     63, 229, 154, 197, 131, 247, 107, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
     29,   0,   0,   0,  31,   0,   0,   0,
     65,   0,   0,   0,  71,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     87, 114, 105, 116, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    206, 145, 241, 254, 121, 167, 100, 242,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  82,   0,   0,   0,
     73, 110, 112,  87, 114, 105, 116, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,  34, 240, 119,  84, 127, 164, 229,
     24, 121, 252, 221, 101,  92, 151, 205,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_fb9b181fea82028a = b_fb9b181fea82028a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fb9b181fea82028a[] = {
  &s_cd975c65ddfc7918,
  &s_e5a47f5477f0222d,
};
static const uint16_t m_fb9b181fea82028a[] = {0};
const ::capnp::_::RawSchema s_fb9b181fea82028a = {
  0xfb9b181fea82028a, b_fb9b181fea82028a.words, 38, d_fb9b181fea82028a, m_fb9b181fea82028a,
  2, 1, nullptr, nullptr, nullptr, { &s_fb9b181fea82028a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e5a47f5477f0222d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     45,  34, 240, 119,  84, 127, 164, 229,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     87, 114, 105, 116, 101, 114,  46, 119,
    114, 105, 116, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5a47f5477f0222d = b_e5a47f5477f0222d.words;
#if !CAPNP_LITE
static const uint16_t m_e5a47f5477f0222d[] = {0};
static const uint16_t i_e5a47f5477f0222d[] = {0};
const ::capnp::_::RawSchema s_e5a47f5477f0222d = {
  0xe5a47f5477f0222d, b_e5a47f5477f0222d.words, 33, nullptr, m_e5a47f5477f0222d,
  0, 1, i_e5a47f5477f0222d, nullptr, nullptr, { &s_e5a47f5477f0222d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_cd975c65ddfc7918 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     24, 121, 252, 221, 101,  92, 151, 205,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     87, 114, 105, 116, 101, 114,  46, 119,
    114, 105, 116, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd975c65ddfc7918 = b_cd975c65ddfc7918.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cd975c65ddfc7918 = {
  0xcd975c65ddfc7918, b_cd975c65ddfc7918.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cd975c65ddfc7918, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_df66370e686c9b09 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 155, 108, 104,  14,  55, 102, 223,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     99, 108, 111, 115, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df66370e686c9b09 = b_df66370e686c9b09.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_df66370e686c9b09 = {
  0xdf66370e686c9b09, b_df66370e686c9b09.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_df66370e686c9b09, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_9d2556ab64354282 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    130,  66,  53, 100, 171,  86,  37, 157,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
     99, 108, 111, 115, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_9d2556ab64354282 = b_9d2556ab64354282.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9d2556ab64354282 = {
  0x9d2556ab64354282, b_9d2556ab64354282.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9d2556ab64354282, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_9dc72eab4c0686c7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    199, 134,   6,  76, 171,  46, 199, 157,
     10,   0,   0,   0,   3,   0,   0,   0,
     47, 178, 219, 104,  72,  44,  96, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  65,
    114, 114,  97, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    233, 231, 140,  21,  50,  50, 247, 214,
    179, 161,  91, 168,  80, 202, 125, 162,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     42, 199, 117, 204, 106, 111, 234, 163,
    120, 139, 216, 173,  54, 145,  67, 232,
     25,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    115, 101, 110, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 111, 115, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9dc72eab4c0686c7 = b_9dc72eab4c0686c7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9dc72eab4c0686c7[] = {
  &s_a27dca50a85ba1b3,
  &s_a3ea6f6acc75c72a,
  &s_d6f73232158ce7e9,
  &s_e8439136add88b78,
};
static const uint16_t m_9dc72eab4c0686c7[] = {1, 0};
const ::capnp::_::RawSchema s_9dc72eab4c0686c7 = {
  0x9dc72eab4c0686c7, b_9dc72eab4c0686c7.words, 38, d_9dc72eab4c0686c7, m_9dc72eab4c0686c7,
  4, 2, nullptr, nullptr, nullptr, { &s_9dc72eab4c0686c7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_d6f73232158ce7e9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 231, 140,  21,  50,  50, 247, 214,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  65,
    114, 114,  97, 121,  46, 115, 101, 110,
    100,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     97, 116,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6f73232158ce7e9 = b_d6f73232158ce7e9.words;
#if !CAPNP_LITE
static const uint16_t m_d6f73232158ce7e9[] = {0, 1};
static const uint16_t i_d6f73232158ce7e9[] = {0, 1};
const ::capnp::_::RawSchema s_d6f73232158ce7e9 = {
  0xd6f73232158ce7e9, b_d6f73232158ce7e9.words, 48, nullptr, m_d6f73232158ce7e9,
  0, 2, i_d6f73232158ce7e9, nullptr, nullptr, { &s_d6f73232158ce7e9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_a27dca50a85ba1b3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    179, 161,  91, 168,  80, 202, 125, 162,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  65,
    114, 114,  97, 121,  46, 115, 101, 110,
    100,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a27dca50a85ba1b3 = b_a27dca50a85ba1b3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a27dca50a85ba1b3 = {
  0xa27dca50a85ba1b3, b_a27dca50a85ba1b3.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a27dca50a85ba1b3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_a3ea6f6acc75c72a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 199, 117, 204, 106, 111, 234, 163,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  65,
    114, 114,  97, 121,  46,  99, 108, 111,
    115, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     97, 116,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a3ea6f6acc75c72a = b_a3ea6f6acc75c72a.words;
#if !CAPNP_LITE
static const uint16_t m_a3ea6f6acc75c72a[] = {0};
static const uint16_t i_a3ea6f6acc75c72a[] = {0};
const ::capnp::_::RawSchema s_a3ea6f6acc75c72a = {
  0xa3ea6f6acc75c72a, b_a3ea6f6acc75c72a.words, 33, nullptr, m_a3ea6f6acc75c72a,
  0, 1, i_a3ea6f6acc75c72a, nullptr, nullptr, { &s_a3ea6f6acc75c72a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_e8439136add88b78 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120, 139, 216, 173,  54, 145,  67, 232,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  65,
    114, 114,  97, 121,  46,  99, 108, 111,
    115, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8439136add88b78 = b_e8439136add88b78.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e8439136add88b78 = {
  0xe8439136add88b78, b_e8439136add88b78.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e8439136add88b78, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace fbp {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::Component::SetupPortsParams,  ::mas::schema::fbp::Component::SetupPortsResults>
Component::Client::setupPortsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Component::SetupPortsParams,  ::mas::schema::fbp::Component::SetupPortsResults>(
      0xd717ff7d6815a6b0ull, 0, sizeHint);
}
::kj::Promise<void> Component::Server::setupPorts(SetupPortsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Component", "setupPorts",
      0xd717ff7d6815a6b0ull, 0);
}
::capnp::Request< ::mas::schema::fbp::Component::StopParams,  ::mas::schema::fbp::Component::StopResults>
Component::Client::stopRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Component::StopParams,  ::mas::schema::fbp::Component::StopResults>(
      0xd717ff7d6815a6b0ull, 1, sizeHint);
}
::kj::Promise<void> Component::Server::stop(StopContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Component", "stop",
      0xd717ff7d6815a6b0ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Component::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd717ff7d6815a6b0ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:Component", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Component::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        setupPorts(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Component::SetupPortsParams,  ::mas::schema::fbp::Component::SetupPortsResults>(context)),
        false
      };
    case 1:
      return {
        stop(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Component::StopParams,  ::mas::schema::fbp::Component::StopResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:Component",
          0xd717ff7d6815a6b0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Component
#if !CAPNP_LITE
constexpr ::capnp::Kind Component::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Component::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Component::NameToPort
constexpr uint16_t Component::NameToPort::_capnpPrivate::dataWordSize;
constexpr uint16_t Component::NameToPort::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Component::NameToPort::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Component::NameToPort::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Component::SetupPortsParams
constexpr uint16_t Component::SetupPortsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Component::SetupPortsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Component::SetupPortsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Component::SetupPortsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Component::SetupPortsResults
constexpr uint16_t Component::SetupPortsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Component::SetupPortsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Component::SetupPortsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Component::SetupPortsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Component::StopParams
constexpr uint16_t Component::StopParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Component::StopParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Component::StopParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Component::StopParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Component::StopResults
constexpr uint16_t Component::StopResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Component::StopResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Component::StopResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Component::StopResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::Input::CloseParams,  ::mas::schema::fbp::Input::CloseResults>
Input::Client::closeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Input::CloseParams,  ::mas::schema::fbp::Input::CloseResults>(
      0x9f6bf783c59ae53full, 0, sizeHint);
}
::kj::Promise<void> Input::Server::close(CloseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Input", "close",
      0x9f6bf783c59ae53full, 0);
}
::capnp::Capability::Server::DispatchCallResult Input::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9f6bf783c59ae53full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:Input", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Input::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        close(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Input::CloseParams,  ::mas::schema::fbp::Input::CloseResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:Input",
          0x9f6bf783c59ae53full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Input
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::Input::InpReader::ReadParams,  ::mas::schema::fbp::Input::InpReader::ReadResults>
Input::InpReader::Client::readRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Input::InpReader::ReadParams,  ::mas::schema::fbp::Input::InpReader::ReadResults>(
      0xd21817ccd00e3d80ull, 0, sizeHint);
}
::kj::Promise<void> Input::InpReader::Server::read(ReadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Input.Reader", "read",
      0xd21817ccd00e3d80ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Input::InpReader::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xd21817ccd00e3d80ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:Input.Reader", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Input::InpReader::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        read(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Input::InpReader::ReadParams,  ::mas::schema::fbp::Input::InpReader::ReadResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:Input.Reader",
          0xd21817ccd00e3d80ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Input::InpReader
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InpReader::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InpReader::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::InpReader::ReadParams
constexpr uint16_t Input::InpReader::ReadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::InpReader::ReadParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InpReader::ReadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InpReader::ReadParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::InpReader::ReadResults
constexpr uint16_t Input::InpReader::ReadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::InpReader::ReadResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InpReader::ReadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InpReader::ReadResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::Input::InpWriter::WriteParams,  ::mas::schema::fbp::Input::InpWriter::WriteResults>
Input::InpWriter::Client::writeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Input::InpWriter::WriteParams,  ::mas::schema::fbp::Input::InpWriter::WriteResults>(
      0xfb9b181fea82028aull, 0, sizeHint);
}
::kj::Promise<void> Input::InpWriter::Server::write(WriteContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Input.Writer", "write",
      0xfb9b181fea82028aull, 0);
}
::capnp::Capability::Server::DispatchCallResult Input::InpWriter::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfb9b181fea82028aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:Input.Writer", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Input::InpWriter::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        write(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Input::InpWriter::WriteParams,  ::mas::schema::fbp::Input::InpWriter::WriteResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:Input.Writer",
          0xfb9b181fea82028aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Input::InpWriter
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InpWriter::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InpWriter::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::InpWriter::WriteParams
constexpr uint16_t Input::InpWriter::WriteParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::InpWriter::WriteParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InpWriter::WriteParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InpWriter::WriteParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::InpWriter::WriteResults
constexpr uint16_t Input::InpWriter::WriteResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::InpWriter::WriteResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InpWriter::WriteResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InpWriter::WriteResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::CloseParams
constexpr uint16_t Input::CloseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::CloseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::CloseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::CloseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::CloseResults
constexpr uint16_t Input::CloseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::CloseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::CloseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::CloseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::InputArray::SendParams,  ::mas::schema::fbp::InputArray::SendResults>
InputArray::Client::sendRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::InputArray::SendParams,  ::mas::schema::fbp::InputArray::SendResults>(
      0x9dc72eab4c0686c7ull, 0, sizeHint);
}
::kj::Promise<void> InputArray::Server::send(SendContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:InputArray", "send",
      0x9dc72eab4c0686c7ull, 0);
}
::capnp::Request< ::mas::schema::fbp::InputArray::CloseParams,  ::mas::schema::fbp::InputArray::CloseResults>
InputArray::Client::closeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::InputArray::CloseParams,  ::mas::schema::fbp::InputArray::CloseResults>(
      0x9dc72eab4c0686c7ull, 1, sizeHint);
}
::kj::Promise<void> InputArray::Server::close(CloseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:InputArray", "close",
      0x9dc72eab4c0686c7ull, 1);
}
::capnp::Capability::Server::DispatchCallResult InputArray::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9dc72eab4c0686c7ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:InputArray", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult InputArray::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        send(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::InputArray::SendParams,  ::mas::schema::fbp::InputArray::SendResults>(context)),
        false
      };
    case 1:
      return {
        close(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::InputArray::CloseParams,  ::mas::schema::fbp::InputArray::CloseResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:InputArray",
          0x9dc72eab4c0686c7ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// InputArray
#if !CAPNP_LITE
constexpr ::capnp::Kind InputArray::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* InputArray::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// InputArray::SendParams
constexpr uint16_t InputArray::SendParams::_capnpPrivate::dataWordSize;
constexpr uint16_t InputArray::SendParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind InputArray::SendParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* InputArray::SendParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// InputArray::SendResults
constexpr uint16_t InputArray::SendResults::_capnpPrivate::dataWordSize;
constexpr uint16_t InputArray::SendResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind InputArray::SendResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* InputArray::SendResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// InputArray::CloseParams
constexpr uint16_t InputArray::CloseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t InputArray::CloseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind InputArray::CloseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* InputArray::CloseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// InputArray::CloseResults
constexpr uint16_t InputArray::CloseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t InputArray::CloseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind InputArray::CloseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* InputArray::CloseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

