// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: fbp.capnp

#include "fbp.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<27> b_9f6bf783c59ae53f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     63, 229, 154, 197, 131, 247, 107, 159,
     10,   0,   0,   0,   3,   0,   0,   0,
     47, 178, 219, 104,  72,  44,  96, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  71,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9, 155, 108, 104,  14,  55, 102, 223,
    130,  66,  53, 100, 171,  86,  37, 157,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    105, 110, 112, 117, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9f6bf783c59ae53f = b_9f6bf783c59ae53f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f6bf783c59ae53f[] = {
  &s_9d2556ab64354282,
  &s_df66370e686c9b09,
};
static const uint16_t m_9f6bf783c59ae53f[] = {0};
const ::capnp::_::RawSchema s_9f6bf783c59ae53f = {
  0x9f6bf783c59ae53f, b_9f6bf783c59ae53f.words, 27, d_9f6bf783c59ae53f, m_9f6bf783c59ae53f,
  2, 1, nullptr, nullptr, nullptr, { &s_9f6bf783c59ae53f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_df66370e686c9b09 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      9, 155, 108, 104,  14,  55, 102, 223,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
    105, 110, 112, 117, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df66370e686c9b09 = b_df66370e686c9b09.words;
#if !CAPNP_LITE
static const uint16_t m_df66370e686c9b09[] = {0};
static const uint16_t i_df66370e686c9b09[] = {0};
const ::capnp::_::RawSchema s_df66370e686c9b09 = {
  0xdf66370e686c9b09, b_df66370e686c9b09.words, 32, nullptr, m_df66370e686c9b09,
  0, 1, i_df66370e686c9b09, nullptr, nullptr, { &s_df66370e686c9b09, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_9d2556ab64354282 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    130,  66,  53, 100, 171,  86,  37, 157,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  73, 110, 112, 117, 116,  46,
    105, 110, 112, 117, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_9d2556ab64354282 = b_9d2556ab64354282.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9d2556ab64354282 = {
  0x9d2556ab64354282, b_9d2556ab64354282.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9d2556ab64354282, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_f92ba4cc25099ed7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    215, 158,   9,  37, 204, 164,  43, 249,
     10,   0,   0,   0,   3,   0,   0,   0,
     47, 178, 219, 104,  72,  44,  96, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  79, 117, 116, 112, 117, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,  94, 240, 193, 178, 247,  65, 192,
     57,  54, 245, 102,  77, 225, 255, 177,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    111, 117, 116, 112, 117, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_f92ba4cc25099ed7 = b_f92ba4cc25099ed7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f92ba4cc25099ed7[] = {
  &s_b1ffe14d66f53639,
  &s_c041f7b2c1f05e54,
};
static const uint16_t m_f92ba4cc25099ed7[] = {0};
const ::capnp::_::RawSchema s_f92ba4cc25099ed7 = {
  0xf92ba4cc25099ed7, b_f92ba4cc25099ed7.words, 28, d_f92ba4cc25099ed7, m_f92ba4cc25099ed7,
  2, 1, nullptr, nullptr, nullptr, { &s_f92ba4cc25099ed7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_c041f7b2c1f05e54 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84,  94, 240, 193, 178, 247,  65, 192,
     17,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  79, 117, 116, 112, 117, 116,
     46, 111, 117, 116, 112, 117, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c041f7b2c1f05e54 = b_c041f7b2c1f05e54.words;
#if !CAPNP_LITE
static const uint16_t m_c041f7b2c1f05e54[] = {0};
static const uint16_t i_c041f7b2c1f05e54[] = {0};
const ::capnp::_::RawSchema s_c041f7b2c1f05e54 = {
  0xc041f7b2c1f05e54, b_c041f7b2c1f05e54.words, 32, nullptr, m_c041f7b2c1f05e54,
  0, 1, i_c041f7b2c1f05e54, nullptr, nullptr, { &s_c041f7b2c1f05e54, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_b1ffe14d66f53639 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     57,  54, 245, 102,  77, 225, 255, 177,
     17,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,  46,  99,  97, 112, 110,
    112,  58,  79, 117, 116, 112, 117, 116,
     46, 111, 117, 116, 112, 117, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_b1ffe14d66f53639 = b_b1ffe14d66f53639.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b1ffe14d66f53639 = {
  0xb1ffe14d66f53639, b_b1ffe14d66f53639.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b1ffe14d66f53639, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace fbp {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::Input::InputParams,  ::mas::schema::fbp::Input::InputResults>
Input::Client::inputRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Input::InputParams,  ::mas::schema::fbp::Input::InputResults>(
      0x9f6bf783c59ae53full, 0, sizeHint);
}
::kj::Promise<void> Input::Server::input(InputContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Input", "input",
      0x9f6bf783c59ae53full, 0);
}
::capnp::Capability::Server::DispatchCallResult Input::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9f6bf783c59ae53full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:Input", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Input::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        input(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Input::InputParams,  ::mas::schema::fbp::Input::InputResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:Input",
          0x9f6bf783c59ae53full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Input
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::InputParams
constexpr uint16_t Input::InputParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::InputParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InputParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InputParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Input::InputResults
constexpr uint16_t Input::InputResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::InputResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Input::InputResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::InputResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::fbp::Output::OutputParams,  ::mas::schema::fbp::Output::OutputResults>
Output::Client::outputRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::fbp::Output::OutputParams,  ::mas::schema::fbp::Output::OutputResults>(
      0xf92ba4cc25099ed7ull, 0, sizeHint);
}
::kj::Promise<void> Output::Server::output(OutputContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "fbp.capnp:Output", "output",
      0xf92ba4cc25099ed7ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Output::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf92ba4cc25099ed7ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("fbp.capnp:Output", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Output::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        output(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::fbp::Output::OutputParams,  ::mas::schema::fbp::Output::OutputResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "fbp.capnp:Output",
          0xf92ba4cc25099ed7ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Output
#if !CAPNP_LITE
constexpr ::capnp::Kind Output::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Output::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Output::OutputParams
constexpr uint16_t Output::OutputParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Output::OutputParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Output::OutputParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Output::OutputParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Output::OutputResults
constexpr uint16_t Output::OutputResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Output::OutputResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Output::OutputResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Output::OutputResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

