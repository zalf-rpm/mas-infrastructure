// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: climate_data.capnp

#include "climate_data.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<77> b_ce396869eede9f10 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     16, 159, 222, 238, 105, 104,  57, 206,
     19,   0,   0,   0,   2,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  39,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  71,  67,  77,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     48,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  99,  99, 109,  97,  67,  97, 110,
     69, 115, 109,  50,   0,   0,   0,   0,
    105,  99, 104, 101,  99,  69,  99,  69,
     97, 114, 116, 104,   0,   0,   0,   0,
    105, 112, 115, 108,  73, 112, 115, 108,
     67, 109,  53,  65,  77, 114,   0,   0,
    109, 105, 114, 111,  99,  77, 105, 114,
    111,  99,  53,   0,   0,   0,   0,   0,
    109, 112, 105,  77,  77, 112, 105,  69,
    115, 109,  76, 114,   0,   0,   0,   0,
    103, 102, 100, 108,  69, 115, 109,  52,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 112, 115, 108,  67, 109,  54,  97,
     76, 114,   0,   0,   0,   0,   0,   0,
    109, 112, 105,  69, 115, 109,  49,  50,
     72, 114,   0,   0,   0,   0,   0,   0,
    109, 114, 105,  69, 115, 109,  50,  48,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 107, 101, 115, 109,  49,  48,  76,
    108,   0,   0,   0,   0,   0,   0,   0,
    103, 115, 119, 112,  51,  87,  53,  69,
     53,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 104,  99,  72,  97, 100,  71,
    101, 109,  50,  69, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ce396869eede9f10 = b_ce396869eede9f10.words;
#if !CAPNP_LITE
static const uint16_t m_ce396869eede9f10[] = {0, 5, 10, 1, 6, 2, 3, 11, 7, 4, 8, 9};
const ::capnp::_::RawSchema s_ce396869eede9f10 = {
  0xce396869eede9f10, b_ce396869eede9f10.words, 77, nullptr, m_ce396869eede9f10,
  0, 12, nullptr, nullptr, nullptr, { &s_ce396869eede9f10, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(GCM_ce396869eede9f10, ce396869eede9f10);
static const ::capnp::_::AlignedData<53> b_8671dec53083e351 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     81, 227, 131,  48, 197, 222, 113, 134,
     19,   0,   0,   0,   2,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  82,  67,  77,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 109,  99, 111, 109,  67,  99,
    108, 109,  52,  56,  49,  55,   0,   0,
    103, 101, 114, 105,  99, 115,  82, 101,
    109, 111,  50,  48,  49,  53,   0,   0,
    107, 110, 109, 105,  82,  97,  99, 109,
    111,  50,  50,  69,   0,   0,   0,   0,
    115, 109, 104, 105,  82,  99,  97,  52,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 109,  99, 111, 109,  66, 116,
    117,  67,  99, 108, 109,  52,  56,  49,
     55,   0,   0,   0,   0,   0,   0,   0,
    109, 112, 105,  67, 115,  99,  82, 101,
    109, 111,  50,  48,  48,  57,   0,   0,
    117, 104, 111, 104,  87, 114, 102,  51,
     54,  49,  72,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8671dec53083e351 = b_8671dec53083e351.words;
#if !CAPNP_LITE
static const uint16_t m_8671dec53083e351[] = {4, 0, 1, 2, 5, 3, 6};
const ::capnp::_::RawSchema s_8671dec53083e351 = {
  0x8671dec53083e351, b_8671dec53083e351.words, 53, nullptr, m_8671dec53083e351,
  0, 7, nullptr, nullptr, nullptr, { &s_8671dec53083e351, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(RCM_8671dec53083e351, 8671dec53083e351);
static const ::capnp::_::AlignedData<37> b_d3780ae416347aee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238, 122,  52,  22, 228,  10, 120, 211,
     19,   0,   0,   0,   2,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 127,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  83,  83,  80,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 115, 112,  49,   0,   0,   0,   0,
    115, 115, 112,  50,   0,   0,   0,   0,
    115, 115, 112,  51,   0,   0,   0,   0,
    115, 115, 112,  52,   0,   0,   0,   0,
    115, 115, 112,  53,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d3780ae416347aee = b_d3780ae416347aee.words;
#if !CAPNP_LITE
static const uint16_t m_d3780ae416347aee[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_d3780ae416347aee = {
  0xd3780ae416347aee, b_d3780ae416347aee.words, 37, nullptr, m_d3780ae416347aee,
  0, 5, nullptr, nullptr, nullptr, { &s_d3780ae416347aee, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(SSP_d3780ae416347aee, d3780ae416347aee);
static const ::capnp::_::AlignedData<45> b_8ef30778310c94cc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 148,  12,  49, 120,   7, 243, 142,
     19,   0,   0,   0,   2,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  82,  67,  80,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  99, 112,  49,  57,   0,   0,   0,
    114,  99, 112,  50,  54,   0,   0,   0,
    114,  99, 112,  51,  52,   0,   0,   0,
    114,  99, 112,  52,  53,   0,   0,   0,
    114,  99, 112,  54,  48,   0,   0,   0,
    114,  99, 112,  55,  48,   0,   0,   0,
    114,  99, 112,  56,  53,   0,   0,   0, }
};
::capnp::word const* const bp_8ef30778310c94cc = b_8ef30778310c94cc.words;
#if !CAPNP_LITE
static const uint16_t m_8ef30778310c94cc[] = {0, 1, 2, 3, 4, 5, 6};
const ::capnp::_::RawSchema s_8ef30778310c94cc = {
  0x8ef30778310c94cc, b_8ef30778310c94cc.words, 45, nullptr, m_8ef30778310c94cc,
  0, 7, nullptr, nullptr, nullptr, { &s_8ef30778310c94cc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(RCP_8ef30778310c94cc, 8ef30778310c94cc);
static const ::capnp::_::AlignedData<64> b_c8caacd1cd5da434 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52, 164,  93, 205, 209, 172, 202, 200,
     19,   0,   0,   0,   1,   0,   1,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  69, 110, 115, 101, 109,
     98, 108, 101,  77, 101, 109,  98, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    114,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c8caacd1cd5da434 = b_c8caacd1cd5da434.words;
#if !CAPNP_LITE
static const uint16_t m_c8caacd1cd5da434[] = {1, 2, 0};
static const uint16_t i_c8caacd1cd5da434[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c8caacd1cd5da434 = {
  0xc8caacd1cd5da434, b_c8caacd1cd5da434.words, 64, nullptr, m_c8caacd1cd5da434,
  0, 3, i_c8caacd1cd5da434, nullptr, nullptr, { &s_c8caacd1cd5da434, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_fb36d2e966556db0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
     19,   0,   0,   0,   1,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   1,   0,   1,   0,
      1,  46, 114,  48,  75,  68,   6, 171,
     25,   0,   0,   0,  82,   0,   0,   0,
    219,  52, 162, 104, 201,  36, 142, 196,
     25,   0,   0,   0,  50,   0,   0,   0,
     12, 130, 208,   6, 234, 127, 175, 133,
     21,   0,   0,   0,  50,   0,   0,   0,
    183,  12,  22, 184, 234, 237, 129, 199,
     17,   0,   0,   0,  98,   0,   0,   0,
     83, 117, 112, 112, 111, 114, 116, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
     86,  97, 108, 117, 101,   0,   0,   0,
     69, 110, 116, 114, 121,   0,   0,   0,
     73, 110, 102, 111, 114, 109,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     12, 130, 208,   6, 234, 127, 175, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    183,  12,  22, 184, 234, 237, 129, 199,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb36d2e966556db0 = b_fb36d2e966556db0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fb36d2e966556db0[] = {
  &s_85af7fea06d0820c,
  &s_c781edeab8160cb7,
};
static const uint16_t m_fb36d2e966556db0[] = {0, 1};
static const uint16_t i_fb36d2e966556db0[] = {0, 1};
const ::capnp::_::RawSchema s_fb36d2e966556db0 = {
  0xfb36d2e966556db0, b_fb36d2e966556db0.words, 66, d_fb36d2e966556db0, m_fb36d2e966556db0,
  2, 2, i_fb36d2e966556db0, nullptr, nullptr, { &s_fb36d2e966556db0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_ab06444b30722e01 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1,  46, 114,  48,  75,  68,   6, 171,
     28,   0,   0,   0,   3,   0,   0,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  83, 117, 112, 112,
    111, 114, 116, 101, 100,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    130,  86,  59,  41, 119, 118, 136, 149,
     64,  75, 195, 169, 142, 131, 158, 228,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8, 226, 247,   5, 156,  50, 210, 198,
     21, 247, 112, 102, 243,  31, 167, 224,
     29,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 116, 101, 103, 111, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117, 112, 112, 111, 114, 116, 101,
    100,  86,  97, 108, 117, 101, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ab06444b30722e01 = b_ab06444b30722e01.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ab06444b30722e01[] = {
  &s_95887677293b5682,
  &s_c6d2329c05f7e208,
  &s_e0a71ff36670f715,
  &s_e49e838ea9c34b40,
};
static const uint16_t m_ab06444b30722e01[] = {0, 1};
const ::capnp::_::RawSchema s_ab06444b30722e01 = {
  0xab06444b30722e01, b_ab06444b30722e01.words, 42, d_ab06444b30722e01, m_ab06444b30722e01,
  4, 2, nullptr, nullptr, nullptr, { &s_ab06444b30722e01, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_95887677293b5682 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    130,  86,  59,  41, 119, 118, 136, 149,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  83, 117, 112, 112,
    111, 114, 116, 101, 100,  46,  99,  97,
    116, 101, 103, 111, 114, 105, 101, 115,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_95887677293b5682 = b_95887677293b5682.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_95887677293b5682 = {
  0x95887677293b5682, b_95887677293b5682.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_95887677293b5682, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_e49e838ea9c34b40 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64,  75, 195, 169, 142, 131, 158, 228,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  83, 117, 112, 112,
    111, 114, 116, 101, 100,  46,  99,  97,
    116, 101, 103, 111, 114, 105, 101, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e49e838ea9c34b40 = b_e49e838ea9c34b40.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e49e838ea9c34b40[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_e49e838ea9c34b40[] = {0};
static const uint16_t i_e49e838ea9c34b40[] = {0};
const ::capnp::_::RawSchema s_e49e838ea9c34b40 = {
  0xe49e838ea9c34b40, b_e49e838ea9c34b40.words, 40, d_e49e838ea9c34b40, m_e49e838ea9c34b40,
  1, 1, i_e49e838ea9c34b40, nullptr, nullptr, { &s_e49e838ea9c34b40, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_c6d2329c05f7e208 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8, 226, 247,   5, 156,  50, 210, 198,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  83, 117, 112, 112,
    111, 114, 116, 101, 100,  46, 115, 117,
    112, 112, 111, 114, 116, 101, 100,  86,
     97, 108, 117, 101, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 121, 112, 101,  73, 100,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c6d2329c05f7e208 = b_c6d2329c05f7e208.words;
#if !CAPNP_LITE
static const uint16_t m_c6d2329c05f7e208[] = {0};
static const uint16_t i_c6d2329c05f7e208[] = {0};
const ::capnp::_::RawSchema s_c6d2329c05f7e208 = {
  0xc6d2329c05f7e208, b_c6d2329c05f7e208.words, 36, nullptr, m_c6d2329c05f7e208,
  0, 1, i_c6d2329c05f7e208, nullptr, nullptr, { &s_c6d2329c05f7e208, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_e0a71ff36670f715 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 247, 112, 102, 243,  31, 167, 224,
     38,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  83, 117, 112, 112,
    111, 114, 116, 101, 100,  46, 115, 117,
    112, 112, 111, 114, 116, 101, 100,  86,
     97, 108, 117, 101, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e0a71ff36670f715 = b_e0a71ff36670f715.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e0a71ff36670f715[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_e0a71ff36670f715[] = {0};
static const uint16_t i_e0a71ff36670f715[] = {0};
const ::capnp::_::RawSchema s_e0a71ff36670f715 = {
  0xe0a71ff36670f715, b_e0a71ff36670f715.words, 40, d_e0a71ff36670f715, m_e0a71ff36670f715,
  1, 1, i_e0a71ff36670f715, nullptr, nullptr, { &s_e0a71ff36670f715, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<94> b_c48e24c968a234db = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    219,  52, 162, 104, 201,  36, 142, 196,
     28,   0,   0,   0,   1,   0,   2,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
      1,   0,   7,   0,   0,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  31,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,   0,   0,   0,   3,   0,   1,   0,
    132,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    124,   0,   0,   0,   3,   0,   1,   0,
    136,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    128,   0,   0,   0,   3,   0,   1,   0,
    140,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,  64,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   0,   0,   0,   3,   0,   1,   0,
    144,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136,   0,   0,   0,   3,   0,   1,   0,
    148,   0,   0,   0,   2,   0,   1,   0,
    116, 101, 120, 116,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 111, 108,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116, 101,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c48e24c968a234db = b_c48e24c968a234db.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c48e24c968a234db[] = {
  &s_97e6feac0322118d,
};
static const uint16_t m_c48e24c968a234db[] = {3, 4, 1, 2, 0};
static const uint16_t i_c48e24c968a234db[] = {0, 1, 2, 3, 4};
const ::capnp::_::RawSchema s_c48e24c968a234db = {
  0xc48e24c968a234db, b_c48e24c968a234db.words, 94, d_c48e24c968a234db, m_c48e24c968a234db,
  1, 5, i_c48e24c968a234db, nullptr, nullptr, { &s_c48e24c968a234db, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<202> b_85af7fea06d0820c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     12, 130, 208,   6, 234, 127, 175, 133,
     28,   0,   0,   0,   1,   0,   1,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
      1,   0,   7,   0,   0,   0,  12,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 167,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  69, 110, 116, 114,
    121,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     48,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   1,   0,   0,   3,   0,   1,   0,
     72,   1,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   1,   0,   0,   3,   0,   1,   0,
     76,   1,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   1,   0,   0,   3,   0,   1,   0,
     84,   1,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   1,   0,   0,   3,   0,   1,   0,
     88,   1,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   1,   0,   0,   3,   0,   1,   0,
     92,   1,   0,   0,   2,   0,   1,   0,
      5,   0, 250, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   1,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   1,   0,   0,   3,   0,   1,   0,
     96,   1,   0,   0,   2,   0,   1,   0,
      6,   0, 249, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   1,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88,   1,   0,   0,   3,   0,   1,   0,
    100,   1,   0,   0,   2,   0,   1,   0,
      7,   0, 248, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   1,   0,   0,   3,   0,   1,   0,
    104,   1,   0,   0,   2,   0,   1,   0,
      8,   0, 247, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   1,   0,   0,   3,   0,   1,   0,
    108,   1,   0,   0,   2,   0,   1,   0,
      9,   0, 246, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   1,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   1,   0,   0,   3,   0,   1,   0,
    112,   1,   0,   0,   2,   0,   1,   0,
     10,   0, 245, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   1,   0,   0,   3,   0,   1,   0,
    120,   1,   0,   0,   2,   0,   1,   0,
     11,   0, 244, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   1,   0,   0,   3,   0,   1,   0,
    128,   1,   0,   0,   2,   0,   1,   0,
    103,  99, 109,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     16, 159, 222, 238, 105, 104,  57, 206,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  99, 109,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     81, 227, 131,  48, 197, 222, 113, 134,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 105, 115, 116, 111, 114, 105,  99,
     97, 108,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114,  99, 112,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    204, 148,  12,  49, 120,   7, 243, 142,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 115, 112,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    238, 122,  52,  22, 228,  10, 120, 211,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 115,  77, 101, 109,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     52, 164,  93, 205, 209, 172, 202, 200,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 115, 105, 111, 110,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111,  50,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 105,  99, 111, 110, 116, 114, 111,
    108,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 114, 105, 112, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85af7fea06d0820c = b_85af7fea06d0820c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_85af7fea06d0820c[] = {
  &s_8671dec53083e351,
  &s_8ef30778310c94cc,
  &s_97e6feac0322118d,
  &s_c8caacd1cd5da434,
  &s_ce396869eede9f10,
  &s_d3780ae416347aee,
};
static const uint16_t m_85af7fea06d0820c[] = {9, 11, 8, 5, 0, 2, 10, 1, 3, 4, 7, 6};
static const uint16_t i_85af7fea06d0820c[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
const ::capnp::_::RawSchema s_85af7fea06d0820c = {
  0x85af7fea06d0820c, b_85af7fea06d0820c.words, 202, d_85af7fea06d0820c, m_85af7fea06d0820c,
  6, 12, i_85af7fea06d0820c, nullptr, nullptr, { &s_85af7fea06d0820c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_c781edeab8160cb7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    183,  12,  22, 184, 234, 237, 129, 199,
     28,   0,   0,   0,   3,   0,   0,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 135,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  73, 110, 102, 111,
    114, 109,  97, 116, 105, 111, 110,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6, 213, 183, 224, 241,  94, 112, 223,
    211, 218,   3, 254, 203, 126, 203, 212,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     10,  51, 250, 145, 156, 212,  70, 226,
    120, 237,  95, 165,  11,   3,  53, 159,
     25,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   7,   0,   0,   0,
    102, 111, 114,  79, 110, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 111, 114,  65, 108, 108,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c781edeab8160cb7 = b_c781edeab8160cb7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c781edeab8160cb7[] = {
  &s_9f35030ba55fed78,
  &s_d4cb7ecbfe03dad3,
  &s_df705ef1e0b7d506,
  &s_e246d49c91fa330a,
};
static const uint16_t m_c781edeab8160cb7[] = {1, 0};
const ::capnp::_::RawSchema s_c781edeab8160cb7 = {
  0xc781edeab8160cb7, b_c781edeab8160cb7.words, 40, d_c781edeab8160cb7, m_c781edeab8160cb7,
  4, 2, nullptr, nullptr, nullptr, { &s_c781edeab8160cb7, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_df705ef1e0b7d506 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 213, 183, 224, 241,  94, 112, 223,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  73, 110, 102, 111,
    114, 109,  97, 116, 105, 111, 110,  46,
    102, 111, 114,  79, 110, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 121,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     12, 130, 208,   6, 234, 127, 175, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_df705ef1e0b7d506 = b_df705ef1e0b7d506.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_df705ef1e0b7d506[] = {
  &s_85af7fea06d0820c,
};
static const uint16_t m_df705ef1e0b7d506[] = {0};
static const uint16_t i_df705ef1e0b7d506[] = {0};
const ::capnp::_::RawSchema s_df705ef1e0b7d506 = {
  0xdf705ef1e0b7d506, b_df705ef1e0b7d506.words, 35, d_df705ef1e0b7d506, m_df705ef1e0b7d506,
  1, 1, i_df705ef1e0b7d506, nullptr, nullptr, { &s_df705ef1e0b7d506, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_e246d49c91fa330a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10,  51, 250, 145, 156, 212,  70, 226,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  73, 110, 102, 111,
    114, 109,  97, 116, 105, 111, 110,  46,
    102, 111, 114,  65, 108, 108,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_e246d49c91fa330a = b_e246d49c91fa330a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e246d49c91fa330a = {
  0xe246d49c91fa330a, b_e246d49c91fa330a.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e246d49c91fa330a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<57> b_9f35030ba55fed78 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120, 237,  95, 165,  11,   3,  53, 159,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97, 100,
     97, 116,  97,  46,  73, 110, 102, 111,
    114, 109,  97, 116, 105, 111, 110,  46,
    102, 111, 114,  65, 108, 108,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
     97, 108, 108,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     12, 130, 208,   6, 234, 127, 175, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f35030ba55fed78 = b_9f35030ba55fed78.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f35030ba55fed78[] = {
  &s_b9d4864725174733,
};
static const uint16_t m_9f35030ba55fed78[] = {0};
static const uint16_t i_9f35030ba55fed78[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_9f35030ba55fed78[] = {
  { 16777216,  ::mas::schema::common::Pair< ::mas::schema::climate::Metadata::Entry,  ::mas::schema::common::IdInformation>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_9f35030ba55fed78 = {
  0x9f35030ba55fed78, b_9f35030ba55fed78.words, 57, d_9f35030ba55fed78, m_9f35030ba55fed78,
  1, 1, i_9f35030ba55fed78, nullptr, nullptr, { &s_9f35030ba55fed78, nullptr, bd_9f35030ba55fed78, 0, sizeof(bd_9f35030ba55fed78) / sizeof(bd_9f35030ba55fed78[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_f635fdd1f05960f0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    240,  96,  89, 240, 209, 253,  53, 246,
     19,   0,   0,   0,   3,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   1,   0,   0,
    209,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,  72, 232, 110, 144,  70, 195, 180,
    176, 109,  85, 102, 233, 210,  54, 251,
    113,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     19,  74,  79,  40,  61, 111,  73, 176,
     30, 106, 175,   3, 170,  95, 238, 237,
     93,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    127,  93, 161, 162, 176, 103, 248, 217,
     92, 115, 194,  91, 110,  70,  12, 227,
     77,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    186, 212,  40, 108, 133,  46, 160, 210,
    221,  95,  29,  64, 220, 252, 140, 170,
     57,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
    109, 101, 116,  97, 100,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 111, 115, 101, 115, 116,  84,
    105, 109, 101,  83, 101, 114, 105, 101,
    115,  65, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  65, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f635fdd1f05960f0 = b_f635fdd1f05960f0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f635fdd1f05960f0[] = {
  &s_aa8cfcdc401d5fdd,
  &s_b0496f3d284f4a13,
  &s_b2afd1cb599c48d5,
  &s_b4c346906ee84815,
  &s_c1a7daa0dc36cb65,
  &s_d2a02e856c28d4ba,
  &s_d9f867b0a2a15d7f,
  &s_e30c466e5bc2735c,
  &s_edee5faa03af6a1e,
  &s_fb36d2e966556db0,
};
static const uint16_t m_f635fdd1f05960f0[] = {1, 3, 0, 2};
const ::capnp::_::RawSchema s_f635fdd1f05960f0 = {
  0xf635fdd1f05960f0, b_f635fdd1f05960f0.words, 68, d_f635fdd1f05960f0, m_f635fdd1f05960f0,
  10, 4, nullptr, nullptr, nullptr, { &s_f635fdd1f05960f0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_b4c346906ee84815 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21,  72, 232, 110, 144,  70, 195, 180,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46, 109, 101, 116,  97, 100,
     97, 116,  97,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4c346906ee84815 = b_b4c346906ee84815.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b4c346906ee84815 = {
  0xb4c346906ee84815, b_b4c346906ee84815.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b4c346906ee84815, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b0496f3d284f4a13 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19,  74,  79,  40,  61, 111,  73, 176,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46,  99, 108, 111, 115, 101,
    115, 116,  84, 105, 109, 101,  83, 101,
    114, 105, 101, 115,  65, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    108,  97, 116, 108, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b0496f3d284f4a13 = b_b0496f3d284f4a13.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b0496f3d284f4a13[] = {
  &s_ecf1fc3039cc8ffb,
};
static const uint16_t m_b0496f3d284f4a13[] = {0};
static const uint16_t i_b0496f3d284f4a13[] = {0};
const ::capnp::_::RawSchema s_b0496f3d284f4a13 = {
  0xb0496f3d284f4a13, b_b0496f3d284f4a13.words, 35, d_b0496f3d284f4a13, m_b0496f3d284f4a13,
  1, 1, i_b0496f3d284f4a13, nullptr, nullptr, { &s_b0496f3d284f4a13, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_edee5faa03af6a1e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30, 106, 175,   3, 170,  95, 238, 237,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46,  99, 108, 111, 115, 101,
    115, 116,  84, 105, 109, 101,  83, 101,
    114, 105, 101, 115,  65, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_edee5faa03af6a1e = b_edee5faa03af6a1e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_edee5faa03af6a1e[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_edee5faa03af6a1e[] = {0};
static const uint16_t i_edee5faa03af6a1e[] = {0};
const ::capnp::_::RawSchema s_edee5faa03af6a1e = {
  0xedee5faa03af6a1e, b_edee5faa03af6a1e.words, 36, d_edee5faa03af6a1e, m_edee5faa03af6a1e,
  1, 1, i_edee5faa03af6a1e, nullptr, nullptr, { &s_edee5faa03af6a1e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d9f867b0a2a15d7f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127,  93, 161, 162, 176, 103, 248, 217,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46, 116, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  65, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d9f867b0a2a15d7f = b_d9f867b0a2a15d7f.words;
#if !CAPNP_LITE
static const uint16_t m_d9f867b0a2a15d7f[] = {0};
static const uint16_t i_d9f867b0a2a15d7f[] = {0};
const ::capnp::_::RawSchema s_d9f867b0a2a15d7f = {
  0xd9f867b0a2a15d7f, b_d9f867b0a2a15d7f.words, 35, nullptr, m_d9f867b0a2a15d7f,
  0, 1, i_d9f867b0a2a15d7f, nullptr, nullptr, { &s_d9f867b0a2a15d7f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_e30c466e5bc2735c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     92, 115, 194,  91, 110,  70,  12, 227,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46, 116, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  65, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e30c466e5bc2735c = b_e30c466e5bc2735c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e30c466e5bc2735c[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_e30c466e5bc2735c[] = {0};
static const uint16_t i_e30c466e5bc2735c[] = {0};
const ::capnp::_::RawSchema s_e30c466e5bc2735c = {
  0xe30c466e5bc2735c, b_e30c466e5bc2735c.words, 35, d_e30c466e5bc2735c, m_e30c466e5bc2735c,
  1, 1, i_e30c466e5bc2735c, nullptr, nullptr, { &s_e30c466e5bc2735c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_d2a02e856c28d4ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 212,  40, 108, 133,  46, 160, 210,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46, 108, 111,  99,  97, 116,
    105, 111, 110, 115,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d2a02e856c28d4ba = b_d2a02e856c28d4ba.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d2a02e856c28d4ba = {
  0xd2a02e856c28d4ba, b_d2a02e856c28d4ba.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d2a02e856c28d4ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_aa8cfcdc401d5fdd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    221,  95,  29,  64, 220, 252, 140, 170,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  68,  97, 116,  97, 115,
    101, 116,  46, 108, 111,  99,  97, 116,
    105, 111, 110, 115,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     25, 254,  19, 243, 133, 115, 186, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa8cfcdc401d5fdd = b_aa8cfcdc401d5fdd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aa8cfcdc401d5fdd[] = {
  &s_85ba7385f313fe19,
};
static const uint16_t m_aa8cfcdc401d5fdd[] = {0};
static const uint16_t i_aa8cfcdc401d5fdd[] = {0};
const ::capnp::_::RawSchema s_aa8cfcdc401d5fdd = {
  0xaa8cfcdc401d5fdd, b_aa8cfcdc401d5fdd.words, 39, d_aa8cfcdc401d5fdd, m_aa8cfcdc401d5fdd,
  1, 1, i_aa8cfcdc401d5fdd, nullptr, nullptr, { &s_aa8cfcdc401d5fdd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_d7a67fec5f22e5a0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    160, 229,  34,  95, 236, 127, 166, 215,
     19,   0,   0,   0,   1,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  77, 101, 116,  97,  80,
    108, 117, 115,  68,  97, 116,  97,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    109, 101, 116,  97,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    240,  96,  89, 240, 209, 253,  53, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7a67fec5f22e5a0 = b_d7a67fec5f22e5a0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d7a67fec5f22e5a0[] = {
  &s_f635fdd1f05960f0,
  &s_fb36d2e966556db0,
};
static const uint16_t m_d7a67fec5f22e5a0[] = {1, 0};
static const uint16_t i_d7a67fec5f22e5a0[] = {0, 1};
const ::capnp::_::RawSchema s_d7a67fec5f22e5a0 = {
  0xd7a67fec5f22e5a0, b_d7a67fec5f22e5a0.words, 48, d_d7a67fec5f22e5a0, m_d7a67fec5f22e5a0,
  2, 2, i_d7a67fec5f22e5a0, nullptr, nullptr, { &s_d7a67fec5f22e5a0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_e35760b4db5ab564 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    100, 181,  90, 219, 180,  96,  87, 227,
     19,   0,   0,   0,   2,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 111,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  69, 108, 101, 109, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     60,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    133,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 109, 105, 110,   0,   0,   0,   0,
    116,  97, 118, 103,   0,   0,   0,   0,
    116, 109,  97, 120,   0,   0,   0,   0,
    112, 114, 101,  99, 105, 112,   0,   0,
    103, 108, 111,  98, 114,  97, 100,   0,
    119, 105, 110, 100,   0,   0,   0,   0,
    115, 117, 110, 104, 111, 117, 114, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 111, 117, 100,  97, 109, 111,
    117, 110, 116,   0,   0,   0,   0,   0,
    114, 101, 108, 104, 117, 109, 105, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 105, 114, 112, 114, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 112, 111, 114, 112, 114, 101,
    115, 115,   0,   0,   0,   0,   0,   0,
     99, 111,  50,   0,   0,   0,   0,   0,
    111,  51,   0,   0,   0,   0,   0,   0,
    101, 116,  48,   0,   0,   0,   0,   0,
    100, 101, 119, 112, 111, 105, 110, 116,
     84, 101, 109, 112,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e35760b4db5ab564 = b_e35760b4db5ab564.words;
#if !CAPNP_LITE
static const uint16_t m_e35760b4db5ab564[] = {9, 7, 11, 14, 13, 4, 12, 3, 8, 6, 1, 2, 0, 10, 5};
const ::capnp::_::RawSchema s_e35760b4db5ab564 = {
  0xe35760b4db5ab564, b_e35760b4db5ab564.words, 84, nullptr, m_e35760b4db5ab564,
  0, 15, nullptr, nullptr, nullptr, { &s_e35760b4db5ab564, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Element_e35760b4db5ab564, e35760b4db5ab564);
static const ::capnp::_::AlignedData<80> b_85ba7385f313fe19 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     25, 254,  19, 243, 133, 115, 186, 133,
     19,   0,   0,   0,   1,   0,   1,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  76, 111,  99,  97, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,  78,  78,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,  97, 116, 108, 111, 110,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    251, 143, 204,  57,  48, 252, 241, 236,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_85ba7385f313fe19 = b_85ba7385f313fe19.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_85ba7385f313fe19[] = {
  &s_a7769f40fe6e6de8,
  &s_d4cb7ecbfe03dad3,
  &s_ecf1fc3039cc8ffb,
};
static const uint16_t m_85ba7385f313fe19[] = {1, 0, 2, 3};
static const uint16_t i_85ba7385f313fe19[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_85ba7385f313fe19 = {
  0x85ba7385f313fe19, b_85ba7385f313fe19.words, 80, d_85ba7385f313fe19, m_85ba7385f313fe19,
  3, 4, i_85ba7385f313fe19, nullptr, nullptr, { &s_85ba7385f313fe19, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<122> b_a7769f40fe6e6de8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
     19,   0,   0,   0,   3,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  71,   2,   0,   0,
    169,   1,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    194,   3, 236,  99, 207, 202, 102, 180,
      1,   0,   0,   0,  90,   0,   0,   0,
     82, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    209, 253, 114, 210,  25,   5,  63, 234,
    214, 110, 166, 161, 217, 173,  14, 205,
     17,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   1,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     22, 201,  35, 107,  12, 207, 107, 255,
     27,  44,   2, 118, 244,  39, 236, 185,
    253,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    161, 151, 138, 174,   2, 112, 215, 143,
     80, 160,  79,  20, 111,  20, 118, 137,
    229,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    217,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    205, 125,  93, 196, 107, 152, 120, 142,
    233, 234,  62, 215,  72,  52,  61, 156,
    205,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     37,  53, 133, 177,  35, 249, 248, 239,
    251, 148, 234, 166, 192, 222, 224, 194,
    181,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    238, 111,  73, 226, 111,  91, 170, 248,
     50, 183,   9, 125,  20, 231, 223, 247,
    157,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    149,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    184, 147, 246, 232, 222, 100, 195, 140,
    223, 128, 232, 202,  99, 129,  35, 195,
    137,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
     52, 102, 149,  92,  34, 196,  44, 206,
    176, 109,  85, 102, 233, 210,  54, 251,
    117,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
     19, 163,  15,  27, 176, 158,  50, 203,
     25, 254,  19, 243, 133, 115, 186, 133,
     97,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114,  97, 110, 103, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    104, 101,  97, 100, 101, 114,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100,  97, 116,  97,  84,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 114,  97, 110, 103, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 117,  98, 104, 101,  97, 100, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 101, 116,  97, 100,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 111,  99,  97, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a7769f40fe6e6de8 = b_a7769f40fe6e6de8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a7769f40fe6e6de8[] = {
  &s_85ba7385f313fe19,
  &s_8976146f144fa050,
  &s_8cc364dee8f693b8,
  &s_8e78986bc45d7dcd,
  &s_8fd77002ae8a97a1,
  &s_9c3d3448d73eeae9,
  &s_b2afd1cb599c48d5,
  &s_b9ec27f476022c1b,
  &s_c1a7daa0dc36cb65,
  &s_c2e0dec0a6ea94fb,
  &s_c3238163cae880df,
  &s_cb329eb01b0fa313,
  &s_cd0eadd9a1a66ed6,
  &s_ce2cc4225c956634,
  &s_ea3f0519d272fdd1,
  &s_eff8f923b1853525,
  &s_f7dfe7147d09b732,
  &s_f8aa5b6fe2496fee,
  &s_fb36d2e966556db0,
  &s_ff6bcf0c6b23c916,
};
static const uint16_t m_a7769f40fe6e6de8[] = {3, 4, 2, 8, 7, 1, 0, 6, 5};
const ::capnp::_::RawSchema s_a7769f40fe6e6de8 = {
  0xa7769f40fe6e6de8, b_a7769f40fe6e6de8.words, 122, d_a7769f40fe6e6de8, m_a7769f40fe6e6de8,
  20, 9, nullptr, nullptr, nullptr, { &s_a7769f40fe6e6de8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_b466cacf63ec03c2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    194,   3, 236,  99, 207, 202, 102, 180,
     30,   0,   0,   0,   2,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46,  82, 101,
    115, 111, 108, 117, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 105, 108, 121,   0,   0,   0,
    104, 111, 117, 114, 108, 121,   0,   0, }
};
::capnp::word const* const bp_b466cacf63ec03c2 = b_b466cacf63ec03c2.words;
#if !CAPNP_LITE
static const uint16_t m_b466cacf63ec03c2[] = {0, 1};
const ::capnp::_::RawSchema s_b466cacf63ec03c2 = {
  0xb466cacf63ec03c2, b_b466cacf63ec03c2.words, 28, nullptr, m_b466cacf63ec03c2,
  0, 2, nullptr, nullptr, nullptr, { &s_b466cacf63ec03c2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Resolution_b466cacf63ec03c2, b466cacf63ec03c2);
static const ::capnp::_::AlignedData<18> b_ea3f0519d272fdd1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    209, 253, 114, 210,  25,   5,  63, 234,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 114, 101,
    115, 111, 108, 117, 116, 105, 111, 110,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_ea3f0519d272fdd1 = b_ea3f0519d272fdd1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ea3f0519d272fdd1 = {
  0xea3f0519d272fdd1, b_ea3f0519d272fdd1.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ea3f0519d272fdd1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_cd0eadd9a1a66ed6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    214, 110, 166, 161, 217, 173,  14, 205,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 114, 101,
    115, 111, 108, 117, 116, 105, 111, 110,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 111, 108, 117, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    194,   3, 236,  99, 207, 202, 102, 180,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd0eadd9a1a66ed6 = b_cd0eadd9a1a66ed6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cd0eadd9a1a66ed6[] = {
  &s_b466cacf63ec03c2,
};
static const uint16_t m_cd0eadd9a1a66ed6[] = {0};
static const uint16_t i_cd0eadd9a1a66ed6[] = {0};
const ::capnp::_::RawSchema s_cd0eadd9a1a66ed6 = {
  0xcd0eadd9a1a66ed6, b_cd0eadd9a1a66ed6.words, 36, d_cd0eadd9a1a66ed6, m_cd0eadd9a1a66ed6,
  1, 1, i_cd0eadd9a1a66ed6, nullptr, nullptr, { &s_cd0eadd9a1a66ed6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ff6bcf0c6b23c916 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 201,  35, 107,  12, 207, 107, 255,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 114,  97,
    110, 103, 101,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff6bcf0c6b23c916 = b_ff6bcf0c6b23c916.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ff6bcf0c6b23c916 = {
  0xff6bcf0c6b23c916, b_ff6bcf0c6b23c916.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ff6bcf0c6b23c916, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_b9ec27f476022c1b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     27,  44,   2, 118, 244,  39, 236, 185,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 114,  97,
    110, 103, 101,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    115, 116,  97, 114, 116,  68,  97, 116,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 100,  68,  97, 116, 101,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9ec27f476022c1b = b_b9ec27f476022c1b.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b9ec27f476022c1b[] = {
  &s_97e6feac0322118d,
};
static const uint16_t m_b9ec27f476022c1b[] = {1, 0};
static const uint16_t i_b9ec27f476022c1b[] = {0, 1};
const ::capnp::_::RawSchema s_b9ec27f476022c1b = {
  0xb9ec27f476022c1b, b_b9ec27f476022c1b.words, 50, d_b9ec27f476022c1b, m_b9ec27f476022c1b,
  1, 2, i_b9ec27f476022c1b, nullptr, nullptr, { &s_b9ec27f476022c1b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8fd77002ae8a97a1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    161, 151, 138, 174,   2, 112, 215, 143,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 104, 101,
     97, 100, 101, 114,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8fd77002ae8a97a1 = b_8fd77002ae8a97a1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8fd77002ae8a97a1 = {
  0x8fd77002ae8a97a1, b_8fd77002ae8a97a1.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8fd77002ae8a97a1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_8976146f144fa050 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     80, 160,  79,  20, 111,  20, 118, 137,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 104, 101,
     97, 100, 101, 114,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100, 101, 114,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    100, 181,  90, 219, 180,  96,  87, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8976146f144fa050 = b_8976146f144fa050.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8976146f144fa050[] = {
  &s_e35760b4db5ab564,
};
static const uint16_t m_8976146f144fa050[] = {0};
static const uint16_t i_8976146f144fa050[] = {0};
const ::capnp::_::RawSchema s_8976146f144fa050 = {
  0x8976146f144fa050, b_8976146f144fa050.words, 38, d_8976146f144fa050, m_8976146f144fa050,
  1, 1, i_8976146f144fa050, nullptr, nullptr, { &s_8976146f144fa050, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8e78986bc45d7dcd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    205, 125,  93, 196, 107, 152, 120, 142,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 100,  97,
    116,  97,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8e78986bc45d7dcd = b_8e78986bc45d7dcd.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8e78986bc45d7dcd = {
  0x8e78986bc45d7dcd, b_8e78986bc45d7dcd.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8e78986bc45d7dcd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_9c3d3448d73eeae9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 234,  62, 215,  72,  52,  61, 156,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 100,  97,
    116,  97,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c3d3448d73eeae9 = b_9c3d3448d73eeae9.words;
#if !CAPNP_LITE
static const uint16_t m_9c3d3448d73eeae9[] = {0};
static const uint16_t i_9c3d3448d73eeae9[] = {0};
const ::capnp::_::RawSchema s_9c3d3448d73eeae9 = {
  0x9c3d3448d73eeae9, b_9c3d3448d73eeae9.words, 42, nullptr, m_9c3d3448d73eeae9,
  0, 1, i_9c3d3448d73eeae9, nullptr, nullptr, { &s_9c3d3448d73eeae9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_eff8f923b1853525 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     37,  53, 133, 177,  35, 249, 248, 239,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 100,  97,
    116,  97,  84,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eff8f923b1853525 = b_eff8f923b1853525.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_eff8f923b1853525 = {
  0xeff8f923b1853525, b_eff8f923b1853525.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_eff8f923b1853525, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_c2e0dec0a6ea94fb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    251, 148, 234, 166, 192, 222, 224, 194,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 100,  97,
    116,  97,  84,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c2e0dec0a6ea94fb = b_c2e0dec0a6ea94fb.words;
#if !CAPNP_LITE
static const uint16_t m_c2e0dec0a6ea94fb[] = {0};
static const uint16_t i_c2e0dec0a6ea94fb[] = {0};
const ::capnp::_::RawSchema s_c2e0dec0a6ea94fb = {
  0xc2e0dec0a6ea94fb, b_c2e0dec0a6ea94fb.words, 42, nullptr, m_c2e0dec0a6ea94fb,
  0, 1, i_c2e0dec0a6ea94fb, nullptr, nullptr, { &s_c2e0dec0a6ea94fb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_f8aa5b6fe2496fee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238, 111,  73, 226, 111,  91, 170, 248,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 115, 117,
     98, 114,  97, 110, 103, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102, 114, 111, 109,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    141,  17,  34,   3, 172, 254, 230, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8aa5b6fe2496fee = b_f8aa5b6fe2496fee.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f8aa5b6fe2496fee[] = {
  &s_97e6feac0322118d,
};
static const uint16_t m_f8aa5b6fe2496fee[] = {0, 1};
static const uint16_t i_f8aa5b6fe2496fee[] = {0, 1};
const ::capnp::_::RawSchema s_f8aa5b6fe2496fee = {
  0xf8aa5b6fe2496fee, b_f8aa5b6fe2496fee.words, 49, d_f8aa5b6fe2496fee, m_f8aa5b6fe2496fee,
  1, 2, i_f8aa5b6fe2496fee, nullptr, nullptr, { &s_f8aa5b6fe2496fee, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f7dfe7147d09b732 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     50, 183,   9, 125,  20, 231, 223, 247,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 115, 117,
     98, 114,  97, 110, 103, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f7dfe7147d09b732 = b_f7dfe7147d09b732.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f7dfe7147d09b732[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_f7dfe7147d09b732[] = {0};
static const uint16_t i_f7dfe7147d09b732[] = {0};
const ::capnp::_::RawSchema s_f7dfe7147d09b732 = {
  0xf7dfe7147d09b732, b_f7dfe7147d09b732.words, 35, d_f7dfe7147d09b732, m_f7dfe7147d09b732,
  1, 1, i_f7dfe7147d09b732, nullptr, nullptr, { &s_f7dfe7147d09b732, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_8cc364dee8f693b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184, 147, 246, 232, 222, 100, 195, 140,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 115, 117,
     98, 104, 101,  97, 100, 101, 114,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    101, 108, 101, 109, 101, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    100, 181,  90, 219, 180,  96,  87, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8cc364dee8f693b8 = b_8cc364dee8f693b8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8cc364dee8f693b8[] = {
  &s_e35760b4db5ab564,
};
static const uint16_t m_8cc364dee8f693b8[] = {0};
static const uint16_t i_8cc364dee8f693b8[] = {0};
const ::capnp::_::RawSchema s_8cc364dee8f693b8 = {
  0x8cc364dee8f693b8, b_8cc364dee8f693b8.words, 39, d_8cc364dee8f693b8, m_8cc364dee8f693b8,
  1, 1, i_8cc364dee8f693b8, nullptr, nullptr, { &s_8cc364dee8f693b8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c3238163cae880df = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    223, 128, 232, 202,  99, 129,  35, 195,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 115, 117,
     98, 104, 101,  97, 100, 101, 114,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c3238163cae880df = b_c3238163cae880df.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c3238163cae880df[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_c3238163cae880df[] = {0};
static const uint16_t i_c3238163cae880df[] = {0};
const ::capnp::_::RawSchema s_c3238163cae880df = {
  0xc3238163cae880df, b_c3238163cae880df.words, 35, d_c3238163cae880df, m_c3238163cae880df,
  1, 1, i_c3238163cae880df, nullptr, nullptr, { &s_c3238163cae880df, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ce2cc4225c956634 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52, 102, 149,  92,  34, 196,  44, 206,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 109, 101,
    116,  97, 100,  97, 116,  97,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ce2cc4225c956634 = b_ce2cc4225c956634.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ce2cc4225c956634 = {
  0xce2cc4225c956634, b_ce2cc4225c956634.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ce2cc4225c956634, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_cb329eb01b0fa313 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19, 163,  15,  27, 176, 158,  50, 203,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  84, 105, 109, 101,  83,
    101, 114, 105, 101, 115,  46, 108, 111,
     99,  97, 116, 105, 111, 110,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_cb329eb01b0fa313 = b_cb329eb01b0fa313.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cb329eb01b0fa313 = {
  0xcb329eb01b0fa313, b_cb329eb01b0fa313.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cb329eb01b0fa313, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<44> b_fe7d08d4352b0c5f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95,  12,  43,  53, 212,   8, 125, 254,
     19,   0,   0,   0,   3,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   0,   0,   0,
    121,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81, 212,   5, 148,  72, 202,  76, 128,
    232, 198,  53, 148, 133, 128, 104, 145,
     49,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    219, 230, 163, 221, 131,  31, 125, 157,
    176, 234, 176, 116, 145, 247, 149, 205,
     33,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  65, 118,  97, 105, 108,
     97,  98, 108, 101,  68,  97, 116,  97,
    115, 101, 116, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  68,  97, 116,  97, 115,
    101, 116, 115,  70, 111, 114,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe7d08d4352b0c5f = b_fe7d08d4352b0c5f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fe7d08d4352b0c5f[] = {
  &s_804cca489405d451,
  &s_916880859435c6e8,
  &s_9d7d1f83dda3e6db,
  &s_b2afd1cb599c48d5,
  &s_cd95f79174b0eab0,
};
static const uint16_t m_fe7d08d4352b0c5f[] = {0, 1};
const ::capnp::_::RawSchema s_fe7d08d4352b0c5f = {
  0xfe7d08d4352b0c5f, b_fe7d08d4352b0c5f.words, 44, d_fe7d08d4352b0c5f, m_fe7d08d4352b0c5f,
  5, 2, nullptr, nullptr, nullptr, { &s_fe7d08d4352b0c5f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_804cca489405d451 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     81, 212,   5, 148,  72, 202,  76, 128,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,  46, 103, 101, 116,  65, 118,
     97, 105, 108,  97,  98, 108, 101,  68,
     97, 116,  97, 115, 101, 116, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_804cca489405d451 = b_804cca489405d451.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_804cca489405d451 = {
  0x804cca489405d451, b_804cca489405d451.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_804cca489405d451, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_916880859435c6e8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    232, 198,  53, 148, 133, 128, 104, 145,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,  46, 103, 101, 116,  65, 118,
     97, 105, 108,  97,  98, 108, 101,  68,
     97, 116,  97, 115, 101, 116, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97, 115, 101, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    160, 229,  34,  95, 236, 127, 166, 215,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_916880859435c6e8 = b_916880859435c6e8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_916880859435c6e8[] = {
  &s_d7a67fec5f22e5a0,
};
static const uint16_t m_916880859435c6e8[] = {0};
static const uint16_t i_916880859435c6e8[] = {0};
const ::capnp::_::RawSchema s_916880859435c6e8 = {
  0x916880859435c6e8, b_916880859435c6e8.words, 40, d_916880859435c6e8, m_916880859435c6e8,
  1, 1, i_916880859435c6e8, nullptr, nullptr, { &s_916880859435c6e8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_9d7d1f83dda3e6db = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    219, 230, 163, 221, 131,  31, 125, 157,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,  46, 103, 101, 116,  68,  97,
    116,  97, 115, 101, 116, 115,  70, 111,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 101, 109, 112, 108,  97, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    176, 109,  85, 102, 233, 210,  54, 251,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9d7d1f83dda3e6db = b_9d7d1f83dda3e6db.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9d7d1f83dda3e6db[] = {
  &s_fb36d2e966556db0,
};
static const uint16_t m_9d7d1f83dda3e6db[] = {0};
static const uint16_t i_9d7d1f83dda3e6db[] = {0};
const ::capnp::_::RawSchema s_9d7d1f83dda3e6db = {
  0x9d7d1f83dda3e6db, b_9d7d1f83dda3e6db.words, 36, d_9d7d1f83dda3e6db, m_9d7d1f83dda3e6db,
  1, 1, i_9d7d1f83dda3e6db, nullptr, nullptr, { &s_9d7d1f83dda3e6db, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_cd95f79174b0eab0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176, 234, 176, 116, 145, 247, 149, 205,
     27,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,  46, 103, 101, 116,  68,  97,
    116,  97, 115, 101, 116, 115,  70, 111,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97, 115, 101, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    240,  96,  89, 240, 209, 253,  53, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cd95f79174b0eab0 = b_cd95f79174b0eab0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cd95f79174b0eab0[] = {
  &s_f635fdd1f05960f0,
};
static const uint16_t m_cd95f79174b0eab0[] = {0};
static const uint16_t i_cd95f79174b0eab0[] = {0};
const ::capnp::_::RawSchema s_cd95f79174b0eab0 = {
  0xcd95f79174b0eab0, b_cd95f79174b0eab0.words, 40, d_cd95f79174b0eab0, m_cd95f79174b0eab0,
  1, 1, i_cd95f79174b0eab0, nullptr, nullptr, { &s_cd95f79174b0eab0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_a418c26cc59929d9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217,  41, 153, 197, 108, 194,  24, 164,
     19,   0,   0,   0,   3,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  71,   0,   0,   0,
     89,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  67,  83,  86,  84, 105,
    109, 101,  83, 101, 114, 105, 101, 115,
     70,  97,  99, 116, 111, 114, 121,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    184, 144, 102, 244, 169,  28, 168, 235,
      1,   0,   0,   0,  82,   0,   0,   0,
     67,  83,  86,  67, 111, 110, 102, 105,
    103,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     71,   5, 117,   1,  38, 141, 170, 207,
     52,  85, 174, 200, 235, 175, 239, 239,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99, 114, 101,  97, 116, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a418c26cc59929d9 = b_a418c26cc59929d9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a418c26cc59929d9[] = {
  &s_b2afd1cb599c48d5,
  &s_cfaa8d2601750547,
  &s_efefafebc8ae5534,
};
static const uint16_t m_a418c26cc59929d9[] = {0};
const ::capnp::_::RawSchema s_a418c26cc59929d9 = {
  0xa418c26cc59929d9, b_a418c26cc59929d9.words, 36, d_a418c26cc59929d9, m_a418c26cc59929d9,
  3, 1, nullptr, nullptr, nullptr, { &s_a418c26cc59929d9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<110> b_eba81ca9f46690b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184, 144, 102, 244, 169,  28, 168, 235,
     40,   0,   0,   0,   1,   0,   1,   0,
    217,  41, 153, 197, 108, 194,  24, 164,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  67,  83,  86,  84, 105,
    109, 101,  83, 101, 114, 105, 101, 115,
     70,  97,  99, 116, 111, 114, 121,  46,
     67,  83,  86,  67, 111, 110, 102, 105,
    103,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   0,   0,   0,   3,   0,   1,   0,
    216,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    213,   0,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    220,   0,   0,   0,   3,   0,   1,   0,
    232,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 112,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   0,   0,
    104, 101,  97, 100, 101, 114,  77,  97,
    112,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 107, 105, 112,  76, 105, 110, 101,
    115,  84, 111,  72, 101,  97, 100, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 107, 105, 112,  76, 105, 110, 101,
    115,  70, 114, 111, 109,  72, 101,  97,
    100, 101, 114,  84, 111,  68,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eba81ca9f46690b8 = b_eba81ca9f46690b8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_eba81ca9f46690b8[] = {
  &s_b9d4864725174733,
};
static const uint16_t m_eba81ca9f46690b8[] = {1, 0, 3, 2};
static const uint16_t i_eba81ca9f46690b8[] = {0, 1, 2, 3};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_eba81ca9f46690b8[] = {
  { 16777217,  ::mas::schema::common::Pair< ::capnp::Text,  ::capnp::Text>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_eba81ca9f46690b8 = {
  0xeba81ca9f46690b8, b_eba81ca9f46690b8.words, 110, d_eba81ca9f46690b8, m_eba81ca9f46690b8,
  1, 4, i_eba81ca9f46690b8, nullptr, nullptr, { &s_eba81ca9f46690b8, nullptr, bd_eba81ca9f46690b8, 0, sizeof(bd_eba81ca9f46690b8) / sizeof(bd_eba81ca9f46690b8[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_cfaa8d2601750547 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71,   5, 117,   1,  38, 141, 170, 207,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  67,  83,  86,  84, 105,
    109, 101,  83, 101, 114, 105, 101, 115,
     70,  97,  99, 116, 111, 114, 121,  46,
     99, 114, 101,  97, 116, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
     99, 115, 118,  68,  97, 116,  97,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 102, 105, 103,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    184, 144, 102, 244, 169,  28, 168, 235,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cfaa8d2601750547 = b_cfaa8d2601750547.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cfaa8d2601750547[] = {
  &s_eba81ca9f46690b8,
};
static const uint16_t m_cfaa8d2601750547[] = {1, 0};
static const uint16_t i_cfaa8d2601750547[] = {0, 1};
const ::capnp::_::RawSchema s_cfaa8d2601750547 = {
  0xcfaa8d2601750547, b_cfaa8d2601750547.words, 50, d_cfaa8d2601750547, m_cfaa8d2601750547,
  1, 2, i_cfaa8d2601750547, nullptr, nullptr, { &s_cfaa8d2601750547, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_efefafebc8ae5534 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52,  85, 174, 200, 235, 175, 239, 239,
     40,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  67,  83,  86,  84, 105,
    109, 101,  83, 101, 114, 105, 101, 115,
     70,  97,  99, 116, 111, 114, 121,  46,
     99, 114, 101,  97, 116, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 115, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_efefafebc8ae5534 = b_efefafebc8ae5534.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_efefafebc8ae5534[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_efefafebc8ae5534[] = {1, 0};
static const uint16_t i_efefafebc8ae5534[] = {0, 1};
const ::capnp::_::RawSchema s_efefafebc8ae5534 = {
  0xefefafebc8ae5534, b_efefafebc8ae5534.words, 51, d_efefafebc8ae5534, m_efefafebc8ae5534,
  1, 2, i_efefafebc8ae5534, nullptr, nullptr, { &s_efefafebc8ae5534, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<73> b_e1f480ef979784b2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    178, 132, 151, 151, 239, 128, 244, 225,
     19,   0,   0,   0,   3,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,   7,   1,   0,   0,
    237,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    197, 190, 144, 243, 186, 185, 133, 208,
      9,   0,   0,   0,  66,   0,   0,   0,
    202,  88, 195,   7,  81, 120, 221, 181,
      5,   0,   0,   0,  82,   0,   0,   0,
     65, 108, 116, 101, 114, 101, 100,   0,
     65, 108, 116, 101, 114,  84, 121, 112,
    101,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,  54, 251, 217, 238,  38,  31, 227,
    170, 247, 144, 143, 181, 221,  46, 251,
    113,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    158, 134,  65, 218,  12,  34, 160, 203,
    102,  23, 113, 188, 181, 117,  91, 221,
     97,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    228, 230,  41,  41, 156,  30, 107, 211,
     28, 132, 190, 128,  98, 236, 161, 196,
     77,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     83, 255,  69,  77, 254, 252, 123, 219,
     59,   0,  19,  48, 178, 128,  73, 244,
     53,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
    119, 114,  97, 112, 112, 101, 100,  84,
    105, 109, 101,  83, 101, 114, 105, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 108, 116, 101, 114, 101, 100,  69,
    108, 101, 109, 101, 110, 116, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 108, 116, 101, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1f480ef979784b2 = b_e1f480ef979784b2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e1f480ef979784b2[] = {
  &s_a7769f40fe6e6de8,
  &s_c4a1ec6280be841c,
  &s_cba0220cda41869e,
  &s_d36b1e9c2929e6e4,
  &s_db7bfcfe4d45ff53,
  &s_dd5b75b5bc711766,
  &s_e31f26eed9fb36a9,
  &s_f44980b23013003b,
  &s_fb2eddb58f90f7aa,
};
static const uint16_t m_e1f480ef979784b2[] = {2, 1, 3, 0};
const ::capnp::_::RawSchema s_e1f480ef979784b2 = {
  0xe1f480ef979784b2, b_e1f480ef979784b2.words, 73, d_e1f480ef979784b2, m_e1f480ef979784b2,
  9, 4, nullptr, nullptr, nullptr, { &s_e1f480ef979784b2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<66> b_d085b9baf390bec5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 190, 144, 243, 186, 185, 133, 208,
     42,   0,   0,   0,   1,   0,   1,   0,
    178, 132, 151, 151, 239, 128, 244, 225,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46,  65, 108, 116, 101, 114, 101,
    100,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    101, 108, 101, 109, 101, 110, 116,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    100, 181,  90, 219, 180,  96,  87, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    202,  88, 195,   7,  81, 120, 221, 181,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d085b9baf390bec5 = b_d085b9baf390bec5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d085b9baf390bec5[] = {
  &s_b5dd785107c358ca,
  &s_e35760b4db5ab564,
};
static const uint16_t m_d085b9baf390bec5[] = {0, 2, 1};
static const uint16_t i_d085b9baf390bec5[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d085b9baf390bec5 = {
  0xd085b9baf390bec5, b_d085b9baf390bec5.words, 66, d_d085b9baf390bec5, m_d085b9baf390bec5,
  2, 3, i_d085b9baf390bec5, nullptr, nullptr, { &s_d085b9baf390bec5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_b5dd785107c358ca = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    202,  88, 195,   7,  81, 120, 221, 181,
     42,   0,   0,   0,   2,   0,   0,   0,
    178, 132, 151, 151, 239, 128, 244, 225,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46,  65, 108, 116, 101, 114,  84,
    121, 112, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,   0,   0,   0,   0,   0,
    109, 117, 108,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5dd785107c358ca = b_b5dd785107c358ca.words;
#if !CAPNP_LITE
static const uint16_t m_b5dd785107c358ca[] = {0, 1};
const ::capnp::_::RawSchema s_b5dd785107c358ca = {
  0xb5dd785107c358ca, b_b5dd785107c358ca.words, 29, nullptr, m_b5dd785107c358ca,
  0, 2, nullptr, nullptr, nullptr, { &s_b5dd785107c358ca, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(AlterType_b5dd785107c358ca, b5dd785107c358ca);
static const ::capnp::_::AlignedData<21> b_e31f26eed9fb36a9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169,  54, 251, 217, 238,  38,  31, 227,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46, 119, 114,  97, 112, 112, 101,
    100,  84, 105, 109, 101,  83, 101, 114,
    105, 101, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e31f26eed9fb36a9 = b_e31f26eed9fb36a9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e31f26eed9fb36a9 = {
  0xe31f26eed9fb36a9, b_e31f26eed9fb36a9.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e31f26eed9fb36a9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_fb2eddb58f90f7aa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    170, 247, 144, 143, 181, 221,  46, 251,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46, 119, 114,  97, 112, 112, 101,
    100,  84, 105, 109, 101,  83, 101, 114,
    105, 101, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fb2eddb58f90f7aa = b_fb2eddb58f90f7aa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fb2eddb58f90f7aa[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_fb2eddb58f90f7aa[] = {0};
static const uint16_t i_fb2eddb58f90f7aa[] = {0};
const ::capnp::_::RawSchema s_fb2eddb58f90f7aa = {
  0xfb2eddb58f90f7aa, b_fb2eddb58f90f7aa.words, 38, d_fb2eddb58f90f7aa, m_fb2eddb58f90f7aa,
  1, 1, i_fb2eddb58f90f7aa, nullptr, nullptr, { &s_fb2eddb58f90f7aa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_cba0220cda41869e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 134,  65, 218,  12,  34, 160, 203,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46,  97, 108, 116, 101, 114, 101,
    100,  69, 108, 101, 109, 101, 110, 116,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cba0220cda41869e = b_cba0220cda41869e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cba0220cda41869e = {
  0xcba0220cda41869e, b_cba0220cda41869e.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cba0220cda41869e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_dd5b75b5bc711766 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102,  23, 113, 188, 181, 117,  91, 221,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46,  97, 108, 116, 101, 114, 101,
    100,  69, 108, 101, 109, 101, 110, 116,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    108, 105, 115, 116,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197, 190, 144, 243, 186, 185, 133, 208,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd5b75b5bc711766 = b_dd5b75b5bc711766.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dd5b75b5bc711766[] = {
  &s_d085b9baf390bec5,
};
static const uint16_t m_dd5b75b5bc711766[] = {0};
static const uint16_t i_dd5b75b5bc711766[] = {0};
const ::capnp::_::RawSchema s_dd5b75b5bc711766 = {
  0xdd5b75b5bc711766, b_dd5b75b5bc711766.words, 41, d_dd5b75b5bc711766, m_dd5b75b5bc711766,
  1, 1, i_dd5b75b5bc711766, nullptr, nullptr, { &s_dd5b75b5bc711766, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_d36b1e9c2929e6e4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    228, 230,  41,  41, 156,  30, 107, 211,
     42,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46,  97, 108, 116, 101, 114,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    100, 101, 115,  99,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197, 190, 144, 243, 186, 185, 133, 208,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 115,  78, 101, 119,  84, 105, 109,
    101,  83, 101, 114, 105, 101, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d36b1e9c2929e6e4 = b_d36b1e9c2929e6e4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d36b1e9c2929e6e4[] = {
  &s_d085b9baf390bec5,
};
static const uint16_t m_d36b1e9c2929e6e4[] = {1, 0};
static const uint16_t i_d36b1e9c2929e6e4[] = {0, 1};
const ::capnp::_::RawSchema s_d36b1e9c2929e6e4 = {
  0xd36b1e9c2929e6e4, b_d36b1e9c2929e6e4.words, 51, d_d36b1e9c2929e6e4, m_d36b1e9c2929e6e4,
  1, 2, i_d36b1e9c2929e6e4, nullptr, nullptr, { &s_d36b1e9c2929e6e4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_c4a1ec6280be841c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     28, 132, 190, 128,  98, 236, 161, 196,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46,  97, 108, 116, 101, 114,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c4a1ec6280be841c = b_c4a1ec6280be841c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c4a1ec6280be841c[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_c4a1ec6280be841c[] = {0};
static const uint16_t i_c4a1ec6280be841c[] = {0};
const ::capnp::_::RawSchema s_c4a1ec6280be841c = {
  0xc4a1ec6280be841c, b_c4a1ec6280be841c.words, 36, d_c4a1ec6280be841c, m_c4a1ec6280be841c,
  1, 1, i_c4a1ec6280be841c, nullptr, nullptr, { &s_c4a1ec6280be841c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_db7bfcfe4d45ff53 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 255,  69,  77, 254, 252, 123, 219,
     42,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46, 114, 101, 109, 111, 118, 101,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     97, 108, 116, 101, 114, 101, 100,  69,
    108, 101, 109, 101, 110, 116,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    100, 181,  90, 219, 180,  96,  87, 227,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db7bfcfe4d45ff53 = b_db7bfcfe4d45ff53.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_db7bfcfe4d45ff53[] = {
  &s_e35760b4db5ab564,
};
static const uint16_t m_db7bfcfe4d45ff53[] = {0};
static const uint16_t i_db7bfcfe4d45ff53[] = {0};
const ::capnp::_::RawSchema s_db7bfcfe4d45ff53 = {
  0xdb7bfcfe4d45ff53, b_db7bfcfe4d45ff53.words, 36, d_db7bfcfe4d45ff53, m_db7bfcfe4d45ff53,
  1, 1, i_db7bfcfe4d45ff53, nullptr, nullptr, { &s_db7bfcfe4d45ff53, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_f44980b23013003b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     59,   0,  19,  48, 178, 128,  73, 244,
     42,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  46, 114, 101, 109, 111, 118, 101,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f44980b23013003b = b_f44980b23013003b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f44980b23013003b = {
  0xf44980b23013003b, b_f44980b23013003b.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f44980b23013003b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c5f12df0a2a52744 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  39, 165, 162, 240,  45, 241, 197,
     19,   0,   0,   0,   3,   0,   0,   0,
     24,  69, 235,  16, 228,  58,  29, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  70,  97,  99, 116, 111, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    254, 139,   1, 220,   6,  72,   6, 149,
     17,  93, 205, 155, 172, 130, 137, 180,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    119, 114,  97, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5f12df0a2a52744 = b_c5f12df0a2a52744.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c5f12df0a2a52744[] = {
  &s_95064806dc018bfe,
  &s_b2afd1cb599c48d5,
  &s_b48982ac9bcd5d11,
};
static const uint16_t m_c5f12df0a2a52744[] = {0};
const ::capnp::_::RawSchema s_c5f12df0a2a52744 = {
  0xc5f12df0a2a52744, b_c5f12df0a2a52744.words, 34, d_c5f12df0a2a52744, m_c5f12df0a2a52744,
  3, 1, nullptr, nullptr, nullptr, { &s_c5f12df0a2a52744, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_95064806dc018bfe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    254, 139,   1, 220,   6,  72,   6, 149,
     49,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  70,  97,  99, 116, 111, 114, 121,
     46, 119, 114,  97, 112,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,  83, 101, 114, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    232, 109, 110, 254,  64, 159, 118, 167,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_95064806dc018bfe = b_95064806dc018bfe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_95064806dc018bfe[] = {
  &s_a7769f40fe6e6de8,
};
static const uint16_t m_95064806dc018bfe[] = {0};
static const uint16_t i_95064806dc018bfe[] = {0};
const ::capnp::_::RawSchema s_95064806dc018bfe = {
  0x95064806dc018bfe, b_95064806dc018bfe.words, 37, d_95064806dc018bfe, m_95064806dc018bfe,
  1, 1, i_95064806dc018bfe, nullptr, nullptr, { &s_95064806dc018bfe, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_b48982ac9bcd5d11 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17,  93, 205, 155, 172, 130, 137, 180,
     49,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 105, 109,  97, 116, 101,  95,
    100,  97, 116,  97,  46,  99,  97, 112,
    110, 112,  58,  65, 108, 116, 101, 114,
     84, 105, 109, 101,  83, 101, 114, 105,
    101, 115,  87, 114,  97, 112, 112, 101,
    114,  70,  97,  99, 116, 111, 114, 121,
     46, 119, 114,  97, 112,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    119, 114,  97, 112, 112, 101, 114,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    178, 132, 151, 151, 239, 128, 244, 225,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b48982ac9bcd5d11 = b_b48982ac9bcd5d11.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b48982ac9bcd5d11[] = {
  &s_e1f480ef979784b2,
};
static const uint16_t m_b48982ac9bcd5d11[] = {0};
static const uint16_t i_b48982ac9bcd5d11[] = {0};
const ::capnp::_::RawSchema s_b48982ac9bcd5d11 = {
  0xb48982ac9bcd5d11, b_b48982ac9bcd5d11.words, 36, d_b48982ac9bcd5d11, m_b48982ac9bcd5d11,
  1, 1, i_b48982ac9bcd5d11, nullptr, nullptr, { &s_b48982ac9bcd5d11, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace climate {

// EnsembleMember
constexpr uint16_t EnsembleMember::_capnpPrivate::dataWordSize;
constexpr uint16_t EnsembleMember::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind EnsembleMember::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* EnsembleMember::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata
constexpr uint16_t Metadata::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::Metadata::Supported::CategoriesParams,  ::mas::schema::climate::Metadata::Supported::CategoriesResults>
Metadata::Supported::Client::categoriesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Metadata::Supported::CategoriesParams,  ::mas::schema::climate::Metadata::Supported::CategoriesResults>(
      0xab06444b30722e01ull, 0, sizeHint);
}
::kj::Promise<void> Metadata::Supported::Server::categories(CategoriesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Metadata.Supported", "categories",
      0xab06444b30722e01ull, 0);
}
::capnp::Request< ::mas::schema::climate::Metadata::Supported::SupportedValuesParams,  ::mas::schema::climate::Metadata::Supported::SupportedValuesResults>
Metadata::Supported::Client::supportedValuesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Metadata::Supported::SupportedValuesParams,  ::mas::schema::climate::Metadata::Supported::SupportedValuesResults>(
      0xab06444b30722e01ull, 1, sizeHint);
}
::kj::Promise<void> Metadata::Supported::Server::supportedValues(SupportedValuesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Metadata.Supported", "supportedValues",
      0xab06444b30722e01ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Metadata::Supported::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xab06444b30722e01ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:Metadata.Supported", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Metadata::Supported::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        categories(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Metadata::Supported::CategoriesParams,  ::mas::schema::climate::Metadata::Supported::CategoriesResults>(context)),
        false
      };
    case 1:
      return {
        supportedValues(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Metadata::Supported::SupportedValuesParams,  ::mas::schema::climate::Metadata::Supported::SupportedValuesResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:Metadata.Supported",
          0xab06444b30722e01ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Metadata::Supported
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Supported::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Supported::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Supported::CategoriesParams
constexpr uint16_t Metadata::Supported::CategoriesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Supported::CategoriesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Supported::CategoriesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Supported::CategoriesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Supported::CategoriesResults
constexpr uint16_t Metadata::Supported::CategoriesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Supported::CategoriesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Supported::CategoriesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Supported::CategoriesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Supported::SupportedValuesParams
constexpr uint16_t Metadata::Supported::SupportedValuesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Supported::SupportedValuesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Supported::SupportedValuesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Supported::SupportedValuesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Supported::SupportedValuesResults
constexpr uint16_t Metadata::Supported::SupportedValuesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Supported::SupportedValuesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Supported::SupportedValuesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Supported::SupportedValuesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Value
constexpr uint16_t Metadata::Value::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Value::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Value::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Entry
constexpr uint16_t Metadata::Entry::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Entry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Entry::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::Metadata::Information::ForOneParams,  ::mas::schema::common::IdInformation>
Metadata::Information::Client::forOneRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Metadata::Information::ForOneParams,  ::mas::schema::common::IdInformation>(
      0xc781edeab8160cb7ull, 0, sizeHint);
}
::kj::Promise<void> Metadata::Information::Server::forOne(ForOneContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Metadata.Information", "forOne",
      0xc781edeab8160cb7ull, 0);
}
::capnp::Request< ::mas::schema::climate::Metadata::Information::ForAllParams,  ::mas::schema::climate::Metadata::Information::ForAllResults>
Metadata::Information::Client::forAllRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Metadata::Information::ForAllParams,  ::mas::schema::climate::Metadata::Information::ForAllResults>(
      0xc781edeab8160cb7ull, 1, sizeHint);
}
::kj::Promise<void> Metadata::Information::Server::forAll(ForAllContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Metadata.Information", "forAll",
      0xc781edeab8160cb7ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Metadata::Information::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc781edeab8160cb7ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:Metadata.Information", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Metadata::Information::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        forOne(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Metadata::Information::ForOneParams,  ::mas::schema::common::IdInformation>(context)),
        false
      };
    case 1:
      return {
        forAll(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Metadata::Information::ForAllParams,  ::mas::schema::climate::Metadata::Information::ForAllResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:Metadata.Information",
          0xc781edeab8160cb7ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Metadata::Information
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Information::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Information::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Information::ForOneParams
constexpr uint16_t Metadata::Information::ForOneParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Information::ForOneParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Information::ForOneParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Information::ForOneParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Information::ForAllParams
constexpr uint16_t Metadata::Information::ForAllParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Information::ForAllParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Information::ForAllParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Information::ForAllParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Metadata::Information::ForAllResults
constexpr uint16_t Metadata::Information::ForAllResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Metadata::Information::ForAllResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Metadata::Information::ForAllResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Metadata::Information::ForAllResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::Dataset::MetadataParams,  ::mas::schema::climate::Metadata>
Dataset::Client::metadataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Dataset::MetadataParams,  ::mas::schema::climate::Metadata>(
      0xf635fdd1f05960f0ull, 0, sizeHint);
}
::kj::Promise<void> Dataset::Server::metadata(MetadataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Dataset", "metadata",
      0xf635fdd1f05960f0ull, 0);
}
::capnp::Request< ::mas::schema::climate::Dataset::ClosestTimeSeriesAtParams,  ::mas::schema::climate::Dataset::ClosestTimeSeriesAtResults>
Dataset::Client::closestTimeSeriesAtRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Dataset::ClosestTimeSeriesAtParams,  ::mas::schema::climate::Dataset::ClosestTimeSeriesAtResults>(
      0xf635fdd1f05960f0ull, 1, sizeHint);
}
::kj::Promise<void> Dataset::Server::closestTimeSeriesAt(ClosestTimeSeriesAtContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Dataset", "closestTimeSeriesAt",
      0xf635fdd1f05960f0ull, 1);
}
::capnp::Request< ::mas::schema::climate::Dataset::TimeSeriesAtParams,  ::mas::schema::climate::Dataset::TimeSeriesAtResults>
Dataset::Client::timeSeriesAtRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Dataset::TimeSeriesAtParams,  ::mas::schema::climate::Dataset::TimeSeriesAtResults>(
      0xf635fdd1f05960f0ull, 2, sizeHint);
}
::kj::Promise<void> Dataset::Server::timeSeriesAt(TimeSeriesAtContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Dataset", "timeSeriesAt",
      0xf635fdd1f05960f0ull, 2);
}
::capnp::Request< ::mas::schema::climate::Dataset::LocationsParams,  ::mas::schema::climate::Dataset::LocationsResults>
Dataset::Client::locationsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Dataset::LocationsParams,  ::mas::schema::climate::Dataset::LocationsResults>(
      0xf635fdd1f05960f0ull, 3, sizeHint);
}
::kj::Promise<void> Dataset::Server::locations(LocationsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Dataset", "locations",
      0xf635fdd1f05960f0ull, 3);
}
::capnp::Capability::Server::DispatchCallResult Dataset::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf635fdd1f05960f0ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:Dataset", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Dataset::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        metadata(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Dataset::MetadataParams,  ::mas::schema::climate::Metadata>(context)),
        false
      };
    case 1:
      return {
        closestTimeSeriesAt(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Dataset::ClosestTimeSeriesAtParams,  ::mas::schema::climate::Dataset::ClosestTimeSeriesAtResults>(context)),
        false
      };
    case 2:
      return {
        timeSeriesAt(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Dataset::TimeSeriesAtParams,  ::mas::schema::climate::Dataset::TimeSeriesAtResults>(context)),
        false
      };
    case 3:
      return {
        locations(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Dataset::LocationsParams,  ::mas::schema::climate::Dataset::LocationsResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:Dataset",
          0xf635fdd1f05960f0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Dataset
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::MetadataParams
constexpr uint16_t Dataset::MetadataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::MetadataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::MetadataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::MetadataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::ClosestTimeSeriesAtParams
constexpr uint16_t Dataset::ClosestTimeSeriesAtParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::ClosestTimeSeriesAtParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::ClosestTimeSeriesAtParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::ClosestTimeSeriesAtParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::ClosestTimeSeriesAtResults
constexpr uint16_t Dataset::ClosestTimeSeriesAtResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::ClosestTimeSeriesAtResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::ClosestTimeSeriesAtResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::ClosestTimeSeriesAtResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::TimeSeriesAtParams
constexpr uint16_t Dataset::TimeSeriesAtParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::TimeSeriesAtParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::TimeSeriesAtParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::TimeSeriesAtParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::TimeSeriesAtResults
constexpr uint16_t Dataset::TimeSeriesAtResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::TimeSeriesAtResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::TimeSeriesAtResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::TimeSeriesAtResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::LocationsParams
constexpr uint16_t Dataset::LocationsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::LocationsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::LocationsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::LocationsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Dataset::LocationsResults
constexpr uint16_t Dataset::LocationsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Dataset::LocationsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Dataset::LocationsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Dataset::LocationsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// MetaPlusData
constexpr uint16_t MetaPlusData::_capnpPrivate::dataWordSize;
constexpr uint16_t MetaPlusData::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind MetaPlusData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MetaPlusData::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Location
constexpr uint16_t Location::_capnpPrivate::dataWordSize;
constexpr uint16_t Location::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Location::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Location::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::TimeSeries::ResolutionParams,  ::mas::schema::climate::TimeSeries::ResolutionResults>
TimeSeries::Client::resolutionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::ResolutionParams,  ::mas::schema::climate::TimeSeries::ResolutionResults>(
      0xa7769f40fe6e6de8ull, 0, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::resolution(ResolutionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "resolution",
      0xa7769f40fe6e6de8ull, 0);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::RangeParams,  ::mas::schema::climate::TimeSeries::RangeResults>
TimeSeries::Client::rangeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::RangeParams,  ::mas::schema::climate::TimeSeries::RangeResults>(
      0xa7769f40fe6e6de8ull, 1, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::range(RangeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "range",
      0xa7769f40fe6e6de8ull, 1);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::HeaderParams,  ::mas::schema::climate::TimeSeries::HeaderResults>
TimeSeries::Client::headerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::HeaderParams,  ::mas::schema::climate::TimeSeries::HeaderResults>(
      0xa7769f40fe6e6de8ull, 2, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::header(HeaderContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "header",
      0xa7769f40fe6e6de8ull, 2);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::DataParams,  ::mas::schema::climate::TimeSeries::DataResults>
TimeSeries::Client::dataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::DataParams,  ::mas::schema::climate::TimeSeries::DataResults>(
      0xa7769f40fe6e6de8ull, 3, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::data(DataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "data",
      0xa7769f40fe6e6de8ull, 3);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::DataTParams,  ::mas::schema::climate::TimeSeries::DataTResults>
TimeSeries::Client::dataTRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::DataTParams,  ::mas::schema::climate::TimeSeries::DataTResults>(
      0xa7769f40fe6e6de8ull, 4, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::dataT(DataTContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "dataT",
      0xa7769f40fe6e6de8ull, 4);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::SubrangeParams,  ::mas::schema::climate::TimeSeries::SubrangeResults>
TimeSeries::Client::subrangeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::SubrangeParams,  ::mas::schema::climate::TimeSeries::SubrangeResults>(
      0xa7769f40fe6e6de8ull, 5, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::subrange(SubrangeContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "subrange",
      0xa7769f40fe6e6de8ull, 5);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::SubheaderParams,  ::mas::schema::climate::TimeSeries::SubheaderResults>
TimeSeries::Client::subheaderRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::SubheaderParams,  ::mas::schema::climate::TimeSeries::SubheaderResults>(
      0xa7769f40fe6e6de8ull, 6, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::subheader(SubheaderContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "subheader",
      0xa7769f40fe6e6de8ull, 6);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::MetadataParams,  ::mas::schema::climate::Metadata>
TimeSeries::Client::metadataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::MetadataParams,  ::mas::schema::climate::Metadata>(
      0xa7769f40fe6e6de8ull, 7, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::metadata(MetadataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "metadata",
      0xa7769f40fe6e6de8ull, 7);
}
::capnp::Request< ::mas::schema::climate::TimeSeries::LocationParams,  ::mas::schema::climate::Location>
TimeSeries::Client::locationRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::TimeSeries::LocationParams,  ::mas::schema::climate::Location>(
      0xa7769f40fe6e6de8ull, 8, sizeHint);
}
::kj::Promise<void> TimeSeries::Server::location(LocationContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:TimeSeries", "location",
      0xa7769f40fe6e6de8ull, 8);
}
::capnp::Capability::Server::DispatchCallResult TimeSeries::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa7769f40fe6e6de8ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:TimeSeries", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult TimeSeries::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        resolution(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::ResolutionParams,  ::mas::schema::climate::TimeSeries::ResolutionResults>(context)),
        false
      };
    case 1:
      return {
        range(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::RangeParams,  ::mas::schema::climate::TimeSeries::RangeResults>(context)),
        false
      };
    case 2:
      return {
        header(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::HeaderParams,  ::mas::schema::climate::TimeSeries::HeaderResults>(context)),
        false
      };
    case 3:
      return {
        data(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::DataParams,  ::mas::schema::climate::TimeSeries::DataResults>(context)),
        false
      };
    case 4:
      return {
        dataT(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::DataTParams,  ::mas::schema::climate::TimeSeries::DataTResults>(context)),
        false
      };
    case 5:
      return {
        subrange(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::SubrangeParams,  ::mas::schema::climate::TimeSeries::SubrangeResults>(context)),
        false
      };
    case 6:
      return {
        subheader(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::SubheaderParams,  ::mas::schema::climate::TimeSeries::SubheaderResults>(context)),
        false
      };
    case 7:
      return {
        metadata(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::MetadataParams,  ::mas::schema::climate::Metadata>(context)),
        false
      };
    case 8:
      return {
        location(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::TimeSeries::LocationParams,  ::mas::schema::climate::Location>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:TimeSeries",
          0xa7769f40fe6e6de8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// TimeSeries
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::ResolutionParams
constexpr uint16_t TimeSeries::ResolutionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::ResolutionParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::ResolutionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::ResolutionParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::ResolutionResults
constexpr uint16_t TimeSeries::ResolutionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::ResolutionResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::ResolutionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::ResolutionResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::RangeParams
constexpr uint16_t TimeSeries::RangeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::RangeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::RangeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::RangeParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::RangeResults
constexpr uint16_t TimeSeries::RangeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::RangeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::RangeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::RangeResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::HeaderParams
constexpr uint16_t TimeSeries::HeaderParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::HeaderParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::HeaderParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::HeaderParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::HeaderResults
constexpr uint16_t TimeSeries::HeaderResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::HeaderResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::HeaderResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::HeaderResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::DataParams
constexpr uint16_t TimeSeries::DataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::DataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::DataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::DataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::DataResults
constexpr uint16_t TimeSeries::DataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::DataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::DataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::DataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::DataTParams
constexpr uint16_t TimeSeries::DataTParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::DataTParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::DataTParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::DataTParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::DataTResults
constexpr uint16_t TimeSeries::DataTResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::DataTResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::DataTResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::DataTResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::SubrangeParams
constexpr uint16_t TimeSeries::SubrangeParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::SubrangeParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::SubrangeParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::SubrangeParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::SubrangeResults
constexpr uint16_t TimeSeries::SubrangeResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::SubrangeResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::SubrangeResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::SubrangeResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::SubheaderParams
constexpr uint16_t TimeSeries::SubheaderParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::SubheaderParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::SubheaderParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::SubheaderParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::SubheaderResults
constexpr uint16_t TimeSeries::SubheaderResults::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::SubheaderResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::SubheaderResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::SubheaderResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::MetadataParams
constexpr uint16_t TimeSeries::MetadataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::MetadataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::MetadataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::MetadataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// TimeSeries::LocationParams
constexpr uint16_t TimeSeries::LocationParams::_capnpPrivate::dataWordSize;
constexpr uint16_t TimeSeries::LocationParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind TimeSeries::LocationParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* TimeSeries::LocationParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::Service::GetAvailableDatasetsParams,  ::mas::schema::climate::Service::GetAvailableDatasetsResults>
Service::Client::getAvailableDatasetsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Service::GetAvailableDatasetsParams,  ::mas::schema::climate::Service::GetAvailableDatasetsResults>(
      0xfe7d08d4352b0c5full, 0, sizeHint);
}
::kj::Promise<void> Service::Server::getAvailableDatasets(GetAvailableDatasetsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Service", "getAvailableDatasets",
      0xfe7d08d4352b0c5full, 0);
}
::capnp::Request< ::mas::schema::climate::Service::GetDatasetsForParams,  ::mas::schema::climate::Service::GetDatasetsForResults>
Service::Client::getDatasetsForRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::Service::GetDatasetsForParams,  ::mas::schema::climate::Service::GetDatasetsForResults>(
      0xfe7d08d4352b0c5full, 1, sizeHint);
}
::kj::Promise<void> Service::Server::getDatasetsFor(GetDatasetsForContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:Service", "getDatasetsFor",
      0xfe7d08d4352b0c5full, 1);
}
::capnp::Capability::Server::DispatchCallResult Service::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfe7d08d4352b0c5full:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:Service", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Service::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        getAvailableDatasets(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Service::GetAvailableDatasetsParams,  ::mas::schema::climate::Service::GetAvailableDatasetsResults>(context)),
        false
      };
    case 1:
      return {
        getDatasetsFor(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::Service::GetDatasetsForParams,  ::mas::schema::climate::Service::GetDatasetsForResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:Service",
          0xfe7d08d4352b0c5full, methodId);
  }
}
#endif  // !CAPNP_LITE

// Service
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Service::GetAvailableDatasetsParams
constexpr uint16_t Service::GetAvailableDatasetsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Service::GetAvailableDatasetsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::GetAvailableDatasetsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::GetAvailableDatasetsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Service::GetAvailableDatasetsResults
constexpr uint16_t Service::GetAvailableDatasetsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Service::GetAvailableDatasetsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::GetAvailableDatasetsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::GetAvailableDatasetsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Service::GetDatasetsForParams
constexpr uint16_t Service::GetDatasetsForParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Service::GetDatasetsForParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::GetDatasetsForParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::GetDatasetsForParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Service::GetDatasetsForResults
constexpr uint16_t Service::GetDatasetsForResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Service::GetDatasetsForResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::GetDatasetsForResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::GetDatasetsForResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::CSVTimeSeriesFactory::CreateParams,  ::mas::schema::climate::CSVTimeSeriesFactory::CreateResults>
CSVTimeSeriesFactory::Client::createRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::CSVTimeSeriesFactory::CreateParams,  ::mas::schema::climate::CSVTimeSeriesFactory::CreateResults>(
      0xa418c26cc59929d9ull, 0, sizeHint);
}
::kj::Promise<void> CSVTimeSeriesFactory::Server::create(CreateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:CSVTimeSeriesFactory", "create",
      0xa418c26cc59929d9ull, 0);
}
::capnp::Capability::Server::DispatchCallResult CSVTimeSeriesFactory::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa418c26cc59929d9ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:CSVTimeSeriesFactory", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult CSVTimeSeriesFactory::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        create(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::CSVTimeSeriesFactory::CreateParams,  ::mas::schema::climate::CSVTimeSeriesFactory::CreateResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:CSVTimeSeriesFactory",
          0xa418c26cc59929d9ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// CSVTimeSeriesFactory
#if !CAPNP_LITE
constexpr ::capnp::Kind CSVTimeSeriesFactory::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CSVTimeSeriesFactory::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CSVTimeSeriesFactory::CSVConfig
constexpr uint16_t CSVTimeSeriesFactory::CSVConfig::_capnpPrivate::dataWordSize;
constexpr uint16_t CSVTimeSeriesFactory::CSVConfig::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CSVTimeSeriesFactory::CSVConfig::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CSVTimeSeriesFactory::CSVConfig::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CSVTimeSeriesFactory::CreateParams
constexpr uint16_t CSVTimeSeriesFactory::CreateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t CSVTimeSeriesFactory::CreateParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CSVTimeSeriesFactory::CreateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CSVTimeSeriesFactory::CreateParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// CSVTimeSeriesFactory::CreateResults
constexpr uint16_t CSVTimeSeriesFactory::CreateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t CSVTimeSeriesFactory::CreateResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind CSVTimeSeriesFactory::CreateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* CSVTimeSeriesFactory::CreateResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::AlterTimeSeriesWrapper::WrappedTimeSeriesParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::WrappedTimeSeriesResults>
AlterTimeSeriesWrapper::Client::wrappedTimeSeriesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::AlterTimeSeriesWrapper::WrappedTimeSeriesParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::WrappedTimeSeriesResults>(
      0xe1f480ef979784b2ull, 0, sizeHint);
}
::kj::Promise<void> AlterTimeSeriesWrapper::Server::wrappedTimeSeries(WrappedTimeSeriesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:AlterTimeSeriesWrapper", "wrappedTimeSeries",
      0xe1f480ef979784b2ull, 0);
}
::capnp::Request< ::mas::schema::climate::AlterTimeSeriesWrapper::AlteredElementsParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::AlteredElementsResults>
AlterTimeSeriesWrapper::Client::alteredElementsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::AlterTimeSeriesWrapper::AlteredElementsParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::AlteredElementsResults>(
      0xe1f480ef979784b2ull, 1, sizeHint);
}
::kj::Promise<void> AlterTimeSeriesWrapper::Server::alteredElements(AlteredElementsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:AlterTimeSeriesWrapper", "alteredElements",
      0xe1f480ef979784b2ull, 1);
}
::capnp::Request< ::mas::schema::climate::AlterTimeSeriesWrapper::AlterParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::AlterResults>
AlterTimeSeriesWrapper::Client::alterRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::AlterTimeSeriesWrapper::AlterParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::AlterResults>(
      0xe1f480ef979784b2ull, 2, sizeHint);
}
::kj::Promise<void> AlterTimeSeriesWrapper::Server::alter(AlterContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:AlterTimeSeriesWrapper", "alter",
      0xe1f480ef979784b2ull, 2);
}
::capnp::Request< ::mas::schema::climate::AlterTimeSeriesWrapper::RemoveParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::RemoveResults>
AlterTimeSeriesWrapper::Client::removeRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::AlterTimeSeriesWrapper::RemoveParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::RemoveResults>(
      0xe1f480ef979784b2ull, 3, sizeHint);
}
::kj::Promise<void> AlterTimeSeriesWrapper::Server::remove(RemoveContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:AlterTimeSeriesWrapper", "remove",
      0xe1f480ef979784b2ull, 3);
}
::capnp::Capability::Server::DispatchCallResult AlterTimeSeriesWrapper::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe1f480ef979784b2ull:
      return dispatchCallInternal(methodId, context);
    case 0xa7769f40fe6e6de8ull:
      return  ::mas::schema::climate::TimeSeries::Server::dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:AlterTimeSeriesWrapper", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult AlterTimeSeriesWrapper::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        wrappedTimeSeries(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::AlterTimeSeriesWrapper::WrappedTimeSeriesParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::WrappedTimeSeriesResults>(context)),
        false
      };
    case 1:
      return {
        alteredElements(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::AlterTimeSeriesWrapper::AlteredElementsParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::AlteredElementsResults>(context)),
        false
      };
    case 2:
      return {
        alter(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::AlterTimeSeriesWrapper::AlterParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::AlterResults>(context)),
        false
      };
    case 3:
      return {
        remove(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::AlterTimeSeriesWrapper::RemoveParams,  ::mas::schema::climate::AlterTimeSeriesWrapper::RemoveResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:AlterTimeSeriesWrapper",
          0xe1f480ef979784b2ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::Altered
constexpr uint16_t AlterTimeSeriesWrapper::Altered::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::Altered::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::Altered::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::Altered::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::WrappedTimeSeriesParams
constexpr uint16_t AlterTimeSeriesWrapper::WrappedTimeSeriesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::WrappedTimeSeriesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::WrappedTimeSeriesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::WrappedTimeSeriesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::WrappedTimeSeriesResults
constexpr uint16_t AlterTimeSeriesWrapper::WrappedTimeSeriesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::WrappedTimeSeriesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::WrappedTimeSeriesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::WrappedTimeSeriesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::AlteredElementsParams
constexpr uint16_t AlterTimeSeriesWrapper::AlteredElementsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::AlteredElementsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::AlteredElementsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::AlteredElementsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::AlteredElementsResults
constexpr uint16_t AlterTimeSeriesWrapper::AlteredElementsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::AlteredElementsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::AlteredElementsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::AlteredElementsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::AlterParams
constexpr uint16_t AlterTimeSeriesWrapper::AlterParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::AlterParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::AlterParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::AlterParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::AlterResults
constexpr uint16_t AlterTimeSeriesWrapper::AlterResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::AlterResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::AlterResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::AlterResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::RemoveParams
constexpr uint16_t AlterTimeSeriesWrapper::RemoveParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::RemoveParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::RemoveParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::RemoveParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapper::RemoveResults
constexpr uint16_t AlterTimeSeriesWrapper::RemoveResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapper::RemoveResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapper::RemoveResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapper::RemoveResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::climate::AlterTimeSeriesWrapperFactory::WrapParams,  ::mas::schema::climate::AlterTimeSeriesWrapperFactory::WrapResults>
AlterTimeSeriesWrapperFactory::Client::wrapRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::climate::AlterTimeSeriesWrapperFactory::WrapParams,  ::mas::schema::climate::AlterTimeSeriesWrapperFactory::WrapResults>(
      0xc5f12df0a2a52744ull, 0, sizeHint);
}
::kj::Promise<void> AlterTimeSeriesWrapperFactory::Server::wrap(WrapContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "climate_data.capnp:AlterTimeSeriesWrapperFactory", "wrap",
      0xc5f12df0a2a52744ull, 0);
}
::capnp::Capability::Server::DispatchCallResult AlterTimeSeriesWrapperFactory::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc5f12df0a2a52744ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("climate_data.capnp:AlterTimeSeriesWrapperFactory", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult AlterTimeSeriesWrapperFactory::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        wrap(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::climate::AlterTimeSeriesWrapperFactory::WrapParams,  ::mas::schema::climate::AlterTimeSeriesWrapperFactory::WrapResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "climate_data.capnp:AlterTimeSeriesWrapperFactory",
          0xc5f12df0a2a52744ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapperFactory
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapperFactory::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapperFactory::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapperFactory::WrapParams
constexpr uint16_t AlterTimeSeriesWrapperFactory::WrapParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapperFactory::WrapParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapperFactory::WrapParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapperFactory::WrapParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AlterTimeSeriesWrapperFactory::WrapResults
constexpr uint16_t AlterTimeSeriesWrapperFactory::WrapResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AlterTimeSeriesWrapperFactory::WrapResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AlterTimeSeriesWrapperFactory::WrapResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AlterTimeSeriesWrapperFactory::WrapResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

