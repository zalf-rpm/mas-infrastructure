// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: common.capnp

#include "common.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<64> b_d4cb7ecbfe03dad3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100,  73,
    110, 102, 111, 114, 109,  97, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 114, 105, 112, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4cb7ecbfe03dad3 = b_d4cb7ecbfe03dad3.words;
#if !CAPNP_LITE
static const uint16_t m_d4cb7ecbfe03dad3[] = {2, 0, 1};
static const uint16_t i_d4cb7ecbfe03dad3[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d4cb7ecbfe03dad3 = {
  0xd4cb7ecbfe03dad3, b_d4cb7ecbfe03dad3.words, 64, nullptr, m_d4cb7ecbfe03dad3,
  0, 3, i_d4cb7ecbfe03dad3, nullptr, nullptr, { &s_d4cb7ecbfe03dad3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_b2afd1cb599c48d5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177, 222,  73,  30, 207, 161, 138, 157,
    211, 218,   3, 254, 203, 126, 203, 212,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b2afd1cb599c48d5 = b_b2afd1cb599c48d5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2afd1cb599c48d5[] = {
  &s_9d8aa1cf1e49deb1,
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_b2afd1cb599c48d5[] = {0};
const ::capnp::_::RawSchema s_b2afd1cb599c48d5 = {
  0xb2afd1cb599c48d5, b_b2afd1cb599c48d5.words, 29, d_b2afd1cb599c48d5, m_b2afd1cb599c48d5,
  2, 1, nullptr, nullptr, nullptr, { &s_b2afd1cb599c48d5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_9d8aa1cf1e49deb1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 222,  73,  30, 207, 161, 138, 157,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  46, 105, 110, 102, 111,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_9d8aa1cf1e49deb1 = b_9d8aa1cf1e49deb1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9d8aa1cf1e49deb1 = {
  0x9d8aa1cf1e49deb1, b_9d8aa1cf1e49deb1.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9d8aa1cf1e49deb1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_ed6c098b67cad454 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 212, 202, 103, 139,   9, 108, 237,
     13,   0,   0,   0,   1,   0,   1,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 114,
    117,  99, 116, 117, 114, 101, 100,  84,
    101, 120, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    204,  98, 194, 177,  82, 245, 203, 232,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 117,  99, 116, 117, 114,
    101,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed6c098b67cad454 = b_ed6c098b67cad454.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ed6c098b67cad454[] = {
  &s_e8cbf552b1c262cc,
};
static const uint16_t m_ed6c098b67cad454[] = {1, 0};
static const uint16_t i_ed6c098b67cad454[] = {0, 1};
const ::capnp::_::RawSchema s_ed6c098b67cad454 = {
  0xed6c098b67cad454, b_ed6c098b67cad454.words, 42, d_ed6c098b67cad454, m_ed6c098b67cad454,
  1, 2, i_ed6c098b67cad454, nullptr, nullptr, { &s_ed6c098b67cad454, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<63> b_e8cbf552b1c262cc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204,  98, 194, 177,  82, 245, 203, 232,
     28,   0,   0,   0,   1,   0,   1,   0,
     84, 212, 202, 103, 139,   9, 108, 237,
      1,   0,   7,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 114,
    117,  99, 116, 117, 114, 101, 100,  84,
    101, 120, 116,  46, 115, 116, 114, 117,
     99, 116, 117, 114, 101,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 115, 111, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120, 109, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8cbf552b1c262cc = b_e8cbf552b1c262cc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8cbf552b1c262cc[] = {
  &s_ed6c098b67cad454,
};
static const uint16_t m_e8cbf552b1c262cc[] = {1, 0, 2};
static const uint16_t i_e8cbf552b1c262cc[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e8cbf552b1c262cc = {
  0xe8cbf552b1c262cc, b_e8cbf552b1c262cc.words, 63, d_e8cbf552b1c262cc, m_e8cbf552b1c262cc,
  1, 3, i_e8cbf552b1c262cc, nullptr, nullptr, { &s_e8cbf552b1c262cc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_902904cd51bff117 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     23, 241, 191,  81, 205,   4,  41, 144,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 108,
    108,  98,  97,  99, 107,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     71, 203, 203, 137,  57,  53, 180, 131,
    207, 138, 139, 207, 132,  97, 107, 177,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 108, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_902904cd51bff117 = b_902904cd51bff117.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_902904cd51bff117[] = {
  &s_83b4353989cbcb47,
  &s_b16b6184cf8b8acf,
};
static const uint16_t m_902904cd51bff117[] = {0};
const ::capnp::_::RawSchema s_902904cd51bff117 = {
  0x902904cd51bff117, b_902904cd51bff117.words, 28, d_902904cd51bff117, m_902904cd51bff117,
  2, 1, nullptr, nullptr, nullptr, { &s_902904cd51bff117, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_83b4353989cbcb47 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71, 203, 203, 137,  57,  53, 180, 131,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 108,
    108,  98,  97,  99, 107,  46,  99,  97,
    108, 108,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_83b4353989cbcb47 = b_83b4353989cbcb47.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_83b4353989cbcb47 = {
  0x83b4353989cbcb47, b_83b4353989cbcb47.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_83b4353989cbcb47, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_b16b6184cf8b8acf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 138, 139, 207, 132,  97, 107, 177,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 108,
    108,  98,  97,  99, 107,  46,  99,  97,
    108, 108,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b16b6184cf8b8acf = b_b16b6184cf8b8acf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b16b6184cf8b8acf = {
  0xb16b6184cf8b8acf, b_b16b6184cf8b8acf.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b16b6184cf8b8acf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_9dd4e2c3d76e4587 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135,  69, 110, 215, 195, 226, 212, 157,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65,  99, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    198, 208, 160, 123,  49,  58,   3, 249,
    255, 221, 153,  26, 222,  13,   4, 204,
     17,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    100, 111,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9dd4e2c3d76e4587 = b_9dd4e2c3d76e4587.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9dd4e2c3d76e4587[] = {
  &s_c1a7daa0dc36cb65,
  &s_cc040dde1a99ddff,
  &s_f9033a317ba0d0c6,
};
static const uint16_t m_9dd4e2c3d76e4587[] = {0};
const ::capnp::_::RawSchema s_9dd4e2c3d76e4587 = {
  0x9dd4e2c3d76e4587, b_9dd4e2c3d76e4587.words, 30, d_9dd4e2c3d76e4587, m_9dd4e2c3d76e4587,
  3, 1, nullptr, nullptr, nullptr, { &s_9dd4e2c3d76e4587, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_f9033a317ba0d0c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 208, 160, 123,  49,  58,   3, 249,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65,  99, 116,
    105, 111, 110,  46, 100, 111,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_f9033a317ba0d0c6 = b_f9033a317ba0d0c6.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f9033a317ba0d0c6 = {
  0xf9033a317ba0d0c6, b_f9033a317ba0d0c6.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f9033a317ba0d0c6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_cc040dde1a99ddff = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    255, 221, 153,  26, 222,  13,   4, 204,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65,  99, 116,
    105, 111, 110,  46, 100, 111,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_cc040dde1a99ddff = b_cc040dde1a99ddff.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_cc040dde1a99ddff = {
  0xcc040dde1a99ddff, b_cc040dde1a99ddff.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_cc040dde1a99ddff, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_c12db9a9ae07a763 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     99, 167,   7, 174, 169, 185,  45, 193,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65,  99, 116,
    105, 111, 110,  49,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    218,   1,  37,  17, 177,  23, 235, 161,
    250,  71,  47, 127, 205, 195, 101, 253,
     17,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    100, 111,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c12db9a9ae07a763 = b_c12db9a9ae07a763.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c12db9a9ae07a763[] = {
  &s_a1eb17b1112501da,
  &s_c1a7daa0dc36cb65,
  &s_fd65c3cd7f2f47fa,
};
static const uint16_t m_c12db9a9ae07a763[] = {0};
const ::capnp::_::RawSchema s_c12db9a9ae07a763 = {
  0xc12db9a9ae07a763, b_c12db9a9ae07a763.words, 30, d_c12db9a9ae07a763, m_c12db9a9ae07a763,
  3, 1, nullptr, nullptr, nullptr, { &s_c12db9a9ae07a763, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_a1eb17b1112501da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218,   1,  37,  17, 177,  23, 235, 161,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65,  99, 116,
    105, 111, 110,  49,  46, 100, 111,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a1eb17b1112501da = b_a1eb17b1112501da.words;
#if !CAPNP_LITE
static const uint16_t m_a1eb17b1112501da[] = {0};
static const uint16_t i_a1eb17b1112501da[] = {0};
const ::capnp::_::RawSchema s_a1eb17b1112501da = {
  0xa1eb17b1112501da, b_a1eb17b1112501da.words, 32, nullptr, m_a1eb17b1112501da,
  0, 1, i_a1eb17b1112501da, nullptr, nullptr, { &s_a1eb17b1112501da, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_fd65c3cd7f2f47fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250,  71,  47, 127, 205, 195, 101, 253,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65,  99, 116,
    105, 111, 110,  49,  46, 100, 111,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_fd65c3cd7f2f47fa = b_fd65c3cd7f2f47fa.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fd65c3cd7f2f47fa = {
  0xfd65c3cd7f2f47fa, b_fd65c3cd7f2f47fa.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fd65c3cd7f2f47fa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<43> b_a869f50b8c586ed9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    217, 110,  88, 140,  11, 245, 105, 168,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
    105,   0,   0,   0,  23,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  70,  97,  99,
    116, 111, 114, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   8, 149,  31, 189, 139,   5, 253,
     34,   5, 223,  27, 127, 247,  16, 208,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
    112, 114, 111, 100, 117,  99, 101,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    217, 110,  88, 140,  11, 245, 105, 168,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    217, 110,  88, 140,  11, 245, 105, 168,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   1,   0,
      5,   0,   0,   0,  50,   0,   0,   0,
      5,   0,   0,   0,  58,   0,   0,   0,
     73, 110, 112, 117, 116,   0,   0,   0,
     79, 117, 116, 112, 117, 116,   0,   0, }
};
::capnp::word const* const bp_a869f50b8c586ed9 = b_a869f50b8c586ed9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a869f50b8c586ed9[] = {
  &s_d010f77f1bdf0522,
  &s_fd058bbd1f9508cd,
};
static const uint16_t m_a869f50b8c586ed9[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_a869f50b8c586ed9[] = {
  { 33554432,  ::mas::schema::common::Factory< ::capnp::AnyPointer,  ::capnp::AnyPointer>::ProduceParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::Factory< ::capnp::AnyPointer,  ::capnp::AnyPointer>::ProduceResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_a869f50b8c586ed9 = {
  0xa869f50b8c586ed9, b_a869f50b8c586ed9.words, 43, d_a869f50b8c586ed9, m_a869f50b8c586ed9,
  2, 1, nullptr, nullptr, nullptr, { &s_a869f50b8c586ed9, nullptr, bd_a869f50b8c586ed9, 0, sizeof(bd_a869f50b8c586ed9) / sizeof(bd_a869f50b8c586ed9[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_fd058bbd1f9508cd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    205,   8, 149,  31, 189, 139,   5, 253,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  70,  97,  99,
    116, 111, 114, 121,  46, 112, 114, 111,
    100, 117,  99, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    217, 110,  88, 140,  11, 245, 105, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd058bbd1f9508cd = b_fd058bbd1f9508cd.words;
#if !CAPNP_LITE
static const uint16_t m_fd058bbd1f9508cd[] = {0};
static const uint16_t i_fd058bbd1f9508cd[] = {0};
const ::capnp::_::RawSchema s_fd058bbd1f9508cd = {
  0xfd058bbd1f9508cd, b_fd058bbd1f9508cd.words, 33, nullptr, m_fd058bbd1f9508cd,
  0, 1, i_fd058bbd1f9508cd, nullptr, nullptr, { &s_fd058bbd1f9508cd, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_d010f77f1bdf0522 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34,   5, 223,  27, 127, 247,  16, 208,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  70,  97,  99,
    116, 111, 114, 121,  46, 112, 114, 111,
    100, 117,  99, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 117, 116,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
    217, 110,  88, 140,  11, 245, 105, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d010f77f1bdf0522 = b_d010f77f1bdf0522.words;
#if !CAPNP_LITE
static const uint16_t m_d010f77f1bdf0522[] = {0};
static const uint16_t i_d010f77f1bdf0522[] = {0};
const ::capnp::_::RawSchema s_d010f77f1bdf0522 = {
  0xd010f77f1bdf0522, b_d010f77f1bdf0522.words, 33, nullptr, m_d010f77f1bdf0522,
  0, 1, i_d010f77f1bdf0522, nullptr, nullptr, { &s_d010f77f1bdf0522, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_fe04fe97ba25a27e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    126, 162,  37, 186, 151, 254,   4, 254,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  90, 109, 113,
     80, 105, 112, 101, 108, 105, 110, 101,
     65, 100, 100, 114, 101, 115, 115, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 112, 117, 116,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 117, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe04fe97ba25a27e = b_fe04fe97ba25a27e.words;
#if !CAPNP_LITE
static const uint16_t m_fe04fe97ba25a27e[] = {0, 1};
static const uint16_t i_fe04fe97ba25a27e[] = {0, 1};
const ::capnp::_::RawSchema s_fe04fe97ba25a27e = {
  0xfe04fe97ba25a27e, b_fe04fe97ba25a27e.words, 49, nullptr, m_fe04fe97ba25a27e,
  0, 2, i_fe04fe97ba25a27e, nullptr, nullptr, { &s_fe04fe97ba25a27e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<44> b_f1c80d9ce9dfd993 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    147, 217, 223, 233, 156,  13, 200, 241,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
    109,   0,   0,   0,  23,   0,   0,   0,
    117,   0,   0,   0,  15,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  86,  97, 108,
    117, 101,  72, 111, 108, 100, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,  10,  40, 176,  61, 140,  82, 251,
    227, 158, 234, 113, 105, 212, 233, 173,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    147, 217, 223, 233, 156,  13, 200, 241,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    147, 217, 223, 233, 156,  13, 200, 241,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     84,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f1c80d9ce9dfd993 = b_f1c80d9ce9dfd993.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f1c80d9ce9dfd993[] = {
  &s_ade9d46971ea9ee3,
  &s_c1a7daa0dc36cb65,
  &s_fb528c3db0280a11,
};
static const uint16_t m_f1c80d9ce9dfd993[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_f1c80d9ce9dfd993[] = {
  { 33554432,  ::mas::schema::common::ValueHolder< ::capnp::AnyPointer>::ValueParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::ValueHolder< ::capnp::AnyPointer>::ValueResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_f1c80d9ce9dfd993 = {
  0xf1c80d9ce9dfd993, b_f1c80d9ce9dfd993.words, 44, d_f1c80d9ce9dfd993, m_f1c80d9ce9dfd993,
  3, 1, nullptr, nullptr, nullptr, { &s_f1c80d9ce9dfd993, nullptr, bd_f1c80d9ce9dfd993, 0, sizeof(bd_f1c80d9ce9dfd993) / sizeof(bd_f1c80d9ce9dfd993[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_fb528c3db0280a11 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17,  10,  40, 176,  61, 140,  82, 251,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  86,  97, 108,
    117, 101,  72, 111, 108, 100, 101, 114,
     46, 118,  97, 108, 117, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_fb528c3db0280a11 = b_fb528c3db0280a11.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fb528c3db0280a11 = {
  0xfb528c3db0280a11, b_fb528c3db0280a11.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fb528c3db0280a11, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_ade9d46971ea9ee3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    227, 158, 234, 113, 105, 212, 233, 173,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  86,  97, 108,
    117, 101,  72, 111, 108, 100, 101, 114,
     46, 118,  97, 108, 117, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    147, 217, 223, 233, 156,  13, 200, 241,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ade9d46971ea9ee3 = b_ade9d46971ea9ee3.words;
#if !CAPNP_LITE
static const uint16_t m_ade9d46971ea9ee3[] = {0};
static const uint16_t i_ade9d46971ea9ee3[] = {0};
const ::capnp::_::RawSchema s_ade9d46971ea9ee3 = {
  0xade9d46971ea9ee3, b_ade9d46971ea9ee3.words, 33, nullptr, m_ade9d46971ea9ee3,
  0, 1, i_ade9d46971ea9ee3, nullptr, nullptr, { &s_ade9d46971ea9ee3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_89f6c5dd387cc101 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1, 193, 124,  56, 221, 197, 246, 137,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65, 110, 121,
     86,  97, 108, 117, 101,  72, 111, 108,
    100, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     66, 255,  10, 215,  34,  18, 133, 201,
    113,  62, 229,  20, 103, 164, 252, 181,
     17,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_89f6c5dd387cc101 = b_89f6c5dd387cc101.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_89f6c5dd387cc101[] = {
  &s_b5fca46714e53e71,
  &s_c1a7daa0dc36cb65,
  &s_c9851222d70aff42,
};
static const uint16_t m_89f6c5dd387cc101[] = {0};
const ::capnp::_::RawSchema s_89f6c5dd387cc101 = {
  0x89f6c5dd387cc101, b_89f6c5dd387cc101.words, 31, d_89f6c5dd387cc101, m_89f6c5dd387cc101,
  3, 1, nullptr, nullptr, nullptr, { &s_89f6c5dd387cc101, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_c9851222d70aff42 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     66, 255,  10, 215,  34,  18, 133, 201,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65, 110, 121,
     86,  97, 108, 117, 101,  72, 111, 108,
    100, 101, 114,  46, 118,  97, 108, 117,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9851222d70aff42 = b_c9851222d70aff42.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c9851222d70aff42 = {
  0xc9851222d70aff42, b_c9851222d70aff42.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c9851222d70aff42, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b5fca46714e53e71 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    113,  62, 229,  20, 103, 164, 252, 181,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  65, 110, 121,
     86,  97, 108, 117, 101,  72, 111, 108,
    100, 101, 114,  46, 118,  97, 108, 117,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b5fca46714e53e71 = b_b5fca46714e53e71.words;
#if !CAPNP_LITE
static const uint16_t m_b5fca46714e53e71[] = {0};
static const uint16_t i_b5fca46714e53e71[] = {0};
const ::capnp::_::RawSchema s_b5fca46714e53e71 = {
  0xb5fca46714e53e71, b_b5fca46714e53e71.words, 34, nullptr, m_b5fca46714e53e71,
  0, 1, i_b5fca46714e53e71, nullptr, nullptr, { &s_b5fca46714e53e71, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<71> b_cac9c6537df1a097 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 160, 241, 125,  83, 198, 201, 202,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 135,   0,   0,   0,
    225,   0,   0,   0,   7,   0,   0,   0,
    225,   0,   0,   0,  15,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 112,
     72, 111, 108, 100, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20, 168, 127, 147,  77, 179,  82, 218,
     31, 105, 149,  53,  72,  15, 155, 220,
     49,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   1,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,  18, 253, 212,   8, 151,  68, 130,
     83,  43,  30, 160, 204,  76,  55, 193,
     65,   0,   0,   0,  66,   0,   0,   0,
     65,   0,   0,   0,  31,   0,   0,   0,
    100,   0,   0,   0,   0,   0,   1,   0,
    116,   0,   0,   0,   0,   0,   1,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    151, 160, 241, 125,  83, 198, 201, 202,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    151, 160, 241, 125,  83, 198, 201, 202,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108, 101,  97, 115, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    241, 141,  47,  23,  18,  96, 185, 194,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  90,   0,   0,   0,
    114, 101, 108, 101,  97, 115, 101,  67,
     97, 112,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    151, 160, 241, 125,  83, 198, 201, 202,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    151, 160, 241, 125,  83, 198, 201, 202,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  58,   0,   0,   0,
     79,  98, 106, 101,  99, 116,   0,   0, }
};
::capnp::word const* const bp_cac9c6537df1a097 = b_cac9c6537df1a097.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_cac9c6537df1a097[] = {
  &s_82449708d4fd120d,
  &s_c1374ccca01e2b53,
  &s_da52b34d937fa814,
  &s_dc9b0f483595691f,
};
static const uint16_t m_cac9c6537df1a097[] = {0, 1};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_cac9c6537df1a097[] = {
  { 33554432,  ::mas::schema::common::CapHolder< ::capnp::AnyPointer>::CapParams::_capnpPrivate::brand() },
  { 33554433,  ::mas::schema::common::CapHolder< ::capnp::AnyPointer>::ReleaseParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::CapHolder< ::capnp::AnyPointer>::CapResults::_capnpPrivate::brand() },
  { 50331649,  ::mas::schema::common::CapHolder< ::capnp::AnyPointer>::ReleaseResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_cac9c6537df1a097 = {
  0xcac9c6537df1a097, b_cac9c6537df1a097.words, 71, d_cac9c6537df1a097, m_cac9c6537df1a097,
  4, 2, nullptr, nullptr, nullptr, { &s_cac9c6537df1a097, nullptr, bd_cac9c6537df1a097, 0, sizeof(bd_cac9c6537df1a097) / sizeof(bd_cac9c6537df1a097[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_da52b34d937fa814 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     20, 168, 127, 147,  77, 179,  82, 218,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 112,
     72, 111, 108, 100, 101, 114,  46,  99,
     97, 112,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_da52b34d937fa814 = b_da52b34d937fa814.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_da52b34d937fa814 = {
  0xda52b34d937fa814, b_da52b34d937fa814.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_da52b34d937fa814, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_dc9b0f483595691f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     31, 105, 149,  53,  72,  15, 155, 220,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 112,
     72, 111, 108, 100, 101, 114,  46,  99,
     97, 112,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    151, 160, 241, 125,  83, 198, 201, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc9b0f483595691f = b_dc9b0f483595691f.words;
#if !CAPNP_LITE
static const uint16_t m_dc9b0f483595691f[] = {0};
static const uint16_t i_dc9b0f483595691f[] = {0};
const ::capnp::_::RawSchema s_dc9b0f483595691f = {
  0xdc9b0f483595691f, b_dc9b0f483595691f.words, 33, nullptr, m_dc9b0f483595691f,
  0, 1, i_dc9b0f483595691f, nullptr, nullptr, { &s_dc9b0f483595691f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_82449708d4fd120d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13,  18, 253, 212,   8, 151,  68, 130,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 112,
     72, 111, 108, 100, 101, 114,  46, 114,
    101, 108, 101,  97, 115, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_82449708d4fd120d = b_82449708d4fd120d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_82449708d4fd120d = {
  0x82449708d4fd120d, b_82449708d4fd120d.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_82449708d4fd120d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_c1374ccca01e2b53 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83,  43,  30, 160, 204,  76,  55, 193,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67,  97, 112,
     72, 111, 108, 100, 101, 114,  46, 114,
    101, 108, 101,  97, 115, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_c1374ccca01e2b53 = b_c1374ccca01e2b53.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c1374ccca01e2b53 = {
  0xc1374ccca01e2b53, b_c1374ccca01e2b53.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c1374ccca01e2b53, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_ee543d7c305d56f6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    246,  86,  93,  48, 124,  61,  84, 238,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 135,   0,   0,   0,
    149,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  72, 111, 108, 100, 101, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    187, 207, 202, 107, 230, 176, 161, 147,
    204, 189, 173, 124, 109,  89, 254, 185,
     49,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    175, 250, 227, 239, 161,  45, 159, 214,
    123, 146, 227, 125, 219,  89, 161, 140,
     25,   0,   0,   0,  66,   0,   0,   0,
     25,   0,   0,   0,  31,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108, 101,  97, 115, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    241, 141,  47,  23,  18,  96, 185, 194,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  90,   0,   0,   0,
    114, 101, 108, 101,  97, 115, 101,  67,
     97, 112,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee543d7c305d56f6 = b_ee543d7c305d56f6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ee543d7c305d56f6[] = {
  &s_8ca159db7de3927b,
  &s_93a1b0e66bcacfbb,
  &s_b2afd1cb599c48d5,
  &s_b9fe596d7cadbdcc,
  &s_d69f2da1efe3faaf,
};
static const uint16_t m_ee543d7c305d56f6[] = {0, 1};
const ::capnp::_::RawSchema s_ee543d7c305d56f6 = {
  0xee543d7c305d56f6, b_ee543d7c305d56f6.words, 51, d_ee543d7c305d56f6, m_ee543d7c305d56f6,
  5, 2, nullptr, nullptr, nullptr, { &s_ee543d7c305d56f6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_93a1b0e66bcacfbb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    187, 207, 202, 107, 230, 176, 161, 147,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  72, 111, 108, 100, 101, 114,  46,
     99,  97, 112,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93a1b0e66bcacfbb = b_93a1b0e66bcacfbb.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_93a1b0e66bcacfbb = {
  0x93a1b0e66bcacfbb, b_93a1b0e66bcacfbb.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_93a1b0e66bcacfbb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_b9fe596d7cadbdcc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204, 189, 173, 124, 109,  89, 254, 185,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  72, 111, 108, 100, 101, 114,  46,
     99,  97, 112,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9fe596d7cadbdcc = b_b9fe596d7cadbdcc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b9fe596d7cadbdcc[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_b9fe596d7cadbdcc[] = {0};
static const uint16_t i_b9fe596d7cadbdcc[] = {0};
const ::capnp::_::RawSchema s_b9fe596d7cadbdcc = {
  0xb9fe596d7cadbdcc, b_b9fe596d7cadbdcc.words, 34, d_b9fe596d7cadbdcc, m_b9fe596d7cadbdcc,
  1, 1, i_b9fe596d7cadbdcc, nullptr, nullptr, { &s_b9fe596d7cadbdcc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_d69f2da1efe3faaf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    175, 250, 227, 239, 161,  45, 159, 214,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  72, 111, 108, 100, 101, 114,  46,
    114, 101, 108, 101,  97, 115, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_d69f2da1efe3faaf = b_d69f2da1efe3faaf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d69f2da1efe3faaf = {
  0xd69f2da1efe3faaf, b_d69f2da1efe3faaf.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d69f2da1efe3faaf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_8ca159db7de3927b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    123, 146, 227, 125, 219,  89, 161, 140,
     32,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  72, 111, 108, 100, 101, 114,  46,
    114, 101, 108, 101,  97, 115, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_8ca159db7de3927b = b_8ca159db7de3927b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8ca159db7de3927b = {
  0x8ca159db7de3927b, b_8ca159db7de3927b.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8ca159db7de3927b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_c201bf46dd40051e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     30,   5,  64, 221,  70, 191,   1, 194,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  15,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  76, 105, 115,
    116,  69, 110, 116, 114, 121,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 121,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     30,   5,  64, 221,  70, 191,   1, 194,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  98,   0,   0,   0,
     80, 111, 105, 110, 116, 101, 114,  84,
    121, 112, 101,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c201bf46dd40051e = b_c201bf46dd40051e.words;
#if !CAPNP_LITE
static const uint16_t m_c201bf46dd40051e[] = {0};
static const uint16_t i_c201bf46dd40051e[] = {0};
const ::capnp::_::RawSchema s_c201bf46dd40051e = {
  0xc201bf46dd40051e, b_c201bf46dd40051e.words, 36, nullptr, m_c201bf46dd40051e,
  0, 1, i_c201bf46dd40051e, nullptr, nullptr, { &s_c201bf46dd40051e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_ce7e4202f09e314a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     74,  49, 158, 240,   2,  66, 126, 206,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 111,
    112,  97,  98, 108, 101,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,  87,  49, 118, 148, 124, 162, 152,
     92, 106,   5, 170,  74, 178, 163, 211,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    115, 116, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ce7e4202f09e314a = b_ce7e4202f09e314a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ce7e4202f09e314a[] = {
  &s_98a27c9476315729,
  &s_d3a3b24aaa056a5c,
};
static const uint16_t m_ce7e4202f09e314a[] = {0};
const ::capnp::_::RawSchema s_ce7e4202f09e314a = {
  0xce7e4202f09e314a, b_ce7e4202f09e314a.words, 28, d_ce7e4202f09e314a, m_ce7e4202f09e314a,
  2, 1, nullptr, nullptr, nullptr, { &s_ce7e4202f09e314a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_98a27c9476315729 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41,  87,  49, 118, 148, 124, 162, 152,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 111,
    112,  97,  98, 108, 101,  46, 115, 116,
    111, 112,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98a27c9476315729 = b_98a27c9476315729.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_98a27c9476315729 = {
  0x98a27c9476315729, b_98a27c9476315729.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_98a27c9476315729, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_d3a3b24aaa056a5c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     92, 106,   5, 170,  74, 178, 163, 211,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 111,
    112,  97,  98, 108, 101,  46, 115, 116,
    111, 112,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d3a3b24aaa056a5c = b_d3a3b24aaa056a5c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d3a3b24aaa056a5c = {
  0xd3a3b24aaa056a5c, b_d3a3b24aaa056a5c.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d3a3b24aaa056a5c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_b9d4864725174733 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  23,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 105,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102, 115, 116,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 110, 100,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   1,   0,
      5,   0,   0,   0,  18,   0,   0,   0,
      5,   0,   0,   0,  18,   0,   0,   0,
     70,   0,   0,   0,   0,   0,   0,   0,
     83,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9d4864725174733 = b_b9d4864725174733.words;
#if !CAPNP_LITE
static const uint16_t m_b9d4864725174733[] = {0, 1};
static const uint16_t i_b9d4864725174733[] = {0, 1};
const ::capnp::_::RawSchema s_b9d4864725174733 = {
  0xb9d4864725174733, b_b9d4864725174733.words, 52, nullptr, m_b9d4864725174733,
  0, 2, i_b9d4864725174733, nullptr, nullptr, { &s_b9d4864725174733, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<51> b_d67792aa3fc241be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190,  65, 194,  63, 170, 146, 119, 214,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,  23,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  76,  76,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    104, 101,  97, 100,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    190,  65, 194,  63, 170, 146, 119, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,  97, 105, 108,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
    190,  65, 194,  63, 170, 146, 119, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   1,   0,
      5,   0,   0,   0,  18,   0,   0,   0,
      5,   0,   0,   0,  18,   0,   0,   0,
     72,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d67792aa3fc241be = b_d67792aa3fc241be.words;
#if !CAPNP_LITE
static const uint16_t m_d67792aa3fc241be[] = {0, 1};
static const uint16_t i_d67792aa3fc241be[] = {0, 1};
const ::capnp::_::RawSchema s_d67792aa3fc241be = {
  0xd67792aa3fc241be, b_d67792aa3fc241be.words, 51, nullptr, m_d67792aa3fc241be,
  0, 2, i_d67792aa3fc241be, nullptr, nullptr, { &s_d67792aa3fc241be, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_a8b91e2c1f8c929a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    154, 146, 140,  31,  44,  30, 185, 168,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
    105,   0,   0,   0,  15,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 108, 111,
     99, 107,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8, 161, 125,  26, 132,  53,   7, 253,
    175,  63,  41, 182, 184, 237,  83, 201,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   1,   0,
     28,   0,   0,   0,   0,   0,   1,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
    116, 105,  99, 107,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    154, 146, 140,  31,  44,  30, 185, 168,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    154, 146, 140,  31,  44,  30, 185, 168,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     84,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8b91e2c1f8c929a = b_a8b91e2c1f8c929a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8b91e2c1f8c929a[] = {
  &s_c953edb8b6293faf,
  &s_fd0735841a7da108,
};
static const uint16_t m_a8b91e2c1f8c929a[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_a8b91e2c1f8c929a[] = {
  { 33554432,  ::mas::schema::common::Clock< ::capnp::AnyPointer>::TickParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::Clock< ::capnp::AnyPointer>::TickResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_a8b91e2c1f8c929a = {
  0xa8b91e2c1f8c929a, b_a8b91e2c1f8c929a.words, 41, d_a8b91e2c1f8c929a, m_a8b91e2c1f8c929a,
  2, 1, nullptr, nullptr, nullptr, { &s_a8b91e2c1f8c929a, nullptr, bd_a8b91e2c1f8c929a, 0, sizeof(bd_a8b91e2c1f8c929a) / sizeof(bd_a8b91e2c1f8c929a[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_fd0735841a7da108 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8, 161, 125,  26, 132,  53,   7, 253,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 108, 111,
     99, 107,  46, 116, 105,  99, 107,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    154, 146, 140,  31,  44,  30, 185, 168,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd0735841a7da108 = b_fd0735841a7da108.words;
#if !CAPNP_LITE
static const uint16_t m_fd0735841a7da108[] = {0};
static const uint16_t i_fd0735841a7da108[] = {0};
const ::capnp::_::RawSchema s_fd0735841a7da108 = {
  0xfd0735841a7da108, b_fd0735841a7da108.words, 32, nullptr, m_fd0735841a7da108,
  0, 1, i_fd0735841a7da108, nullptr, nullptr, { &s_fd0735841a7da108, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_c953edb8b6293faf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    175,  63,  41, 182, 184, 237,  83, 201,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 108, 111,
     99, 107,  46, 116, 105,  99, 107,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_c953edb8b6293faf = b_c953edb8b6293faf.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c953edb8b6293faf = {
  0xc953edb8b6293faf, b_c953edb8b6293faf.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c953edb8b6293faf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_d39ff99bbab1a74e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78, 167, 177, 186, 155, 249, 159, 211,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73,  80,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    197, 170, 216,  74,  24, 136, 117, 176,
      1,   0,   0,   0,  26,   0,   0,   0,
     75,  86,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
     97, 116, 116, 114, 105,  98, 117, 116,
    101, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    197, 170, 216,  74,  24, 136, 117, 176,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 116, 101, 110, 116,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d39ff99bbab1a74e = b_d39ff99bbab1a74e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d39ff99bbab1a74e[] = {
  &s_b07588184ad8aac5,
};
static const uint16_t m_d39ff99bbab1a74e[] = {0, 1};
static const uint16_t i_d39ff99bbab1a74e[] = {0, 1};
const ::capnp::_::RawSchema s_d39ff99bbab1a74e = {
  0xd39ff99bbab1a74e, b_d39ff99bbab1a74e.words, 54, d_d39ff99bbab1a74e, m_d39ff99bbab1a74e,
  1, 2, i_d39ff99bbab1a74e, nullptr, nullptr, { &s_d39ff99bbab1a74e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_b07588184ad8aac5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 170, 216,  74,  24, 136, 117, 176,
     16,   0,   0,   0,   1,   0,   0,   0,
     78, 167, 177, 186, 155, 249, 159, 211,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73,  80,  46,
     75,  86,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b07588184ad8aac5 = b_b07588184ad8aac5.words;
#if !CAPNP_LITE
static const uint16_t m_b07588184ad8aac5[] = {0, 1};
static const uint16_t i_b07588184ad8aac5[] = {0, 1};
const ::capnp::_::RawSchema s_b07588184ad8aac5 = {
  0xb07588184ad8aac5, b_b07588184ad8aac5.words, 47, nullptr, m_b07588184ad8aac5,
  0, 2, i_b07588184ad8aac5, nullptr, nullptr, { &s_b07588184ad8aac5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<158> b_f0c0f9413a3083be = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 135,   1,   0,   0,
     61,   2,   0,   0,   7,   0,   0,   0,
     61,   2,   0,   0,  15,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,   0,   0,   0,   0,
     16,   0,   0,   0,   1,   0,   1,   0,
     33, 178, 214,  26, 242, 227, 110, 149,
     25,   0,   0,   0, 122,   0,   0,   0,
    178, 230,  57, 104,  44,  66, 107, 135,
     25,   0,   0,   0,  34,   0,   0,   0,
    215, 236,  13, 179,  16, 104, 101, 156,
     21,   0,   0,   0,  58,   0,   0,   0,
     88, 244, 192,  77, 148,  68,  88, 155,
     17,   0,   0,   0,  58,   0,   0,   0,
     67, 108, 111, 115, 101,  83, 101, 109,
     97, 110, 116, 105,  99, 115,   0,   0,
     77, 115, 103,   0,   0,   0,   0,   0,
     82, 101,  97, 100, 101, 114,   0,   0,
     87, 114, 105, 116, 101, 114,   0,   0,
     24,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     83, 184,  50, 143,  49, 143,  55, 238,
    139, 164, 217,  43, 198,  29, 211, 171,
    177,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   0,   0,   1,   0,
    192,   0,   0,   0,   0,   0,   1,   0,
    209,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    169, 238, 109,  67,  20,  49,  86, 182,
    238,  98, 220,  89, 173, 236, 174, 137,
    197,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   0,   0,   1,   0,
    208,   0,   0,   0,   0,   0,   1,   0,
    225,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    161, 230, 172, 166, 127, 246, 130, 152,
    135, 233, 102, 113,  95, 105, 227, 215,
    213,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    208,   0,   0,   0,   0,   0,   1,   0,
    224,   0,   0,   0,   0,   0,   1,   0,
    241,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     93, 172, 187, 137,  22,   0,  31, 219,
     48,  35,  48,  80,  67, 188, 161, 200,
    229,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   0,   0,   0,   0,   0,   1,   0,
    244,   0,   0,   0,   0,   0,   1,   0,
      5,   1,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    212,  30, 104,  64,  84, 123, 114, 216,
     60, 162,  23, 235,   0, 131, 186, 232,
    249,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    252,   0,   0,   0,   0,   0,   1,   0,
     12,   1,   0,   0,   0,   0,   1,   0,
     29,   1,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    245, 214, 212, 164, 116,  71,  34, 248,
     19,  14, 138, 236, 220, 250,  13, 242,
     17,   1,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   1,   0,   0,   0,   0,   1,   0,
     28,   1,   0,   0,   0,   0,   1,   0,
     45,   1,   0,   0,   7,   0,   0,   0,
    115, 101, 116,  66, 117, 102, 102, 101,
    114,  83, 105, 122, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101,  97, 100, 101, 114,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    119, 114, 105, 116, 101, 114,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 110, 100, 112, 111, 105, 110, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  65, 117, 116, 111,  67,
    108, 111, 115, 101,  83, 101, 109,  97,
    110, 116, 105,  99, 115,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 111, 115, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     86,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f0c0f9413a3083be = b_f0c0f9413a3083be.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f0c0f9413a3083be[] = {
  &s_89aeecad59dc62ee,
  &s_9882f67fa6ace6a1,
  &s_abd31dc62bd9a48b,
  &s_b6563114436deea9,
  &s_c8a1bc4350302330,
  &s_d7e3695f7166e987,
  &s_d8727b5440681ed4,
  &s_db1f001689bbac5d,
  &s_e8ba8300eb17a23c,
  &s_ee378f318f32b853,
  &s_f20dfadcec8a0e13,
  &s_f8224774a4d4d6f5,
};
static const uint16_t m_f0c0f9413a3083be[] = {5, 3, 1, 4, 0, 2};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_f0c0f9413a3083be[] = {
  { 33554432,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::SetBufferSizeParams::_capnpPrivate::brand() },
  { 33554433,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ReaderParams::_capnpPrivate::brand() },
  { 33554434,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::WriterParams::_capnpPrivate::brand() },
  { 33554435,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::EndpointsParams::_capnpPrivate::brand() },
  { 33554436,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::SetAutoCloseSemanticsParams::_capnpPrivate::brand() },
  { 33554437,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::CloseParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::SetBufferSizeResults::_capnpPrivate::brand() },
  { 50331649,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ReaderResults::_capnpPrivate::brand() },
  { 50331650,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::WriterResults::_capnpPrivate::brand() },
  { 50331651,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::EndpointsResults::_capnpPrivate::brand() },
  { 50331652,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::SetAutoCloseSemanticsResults::_capnpPrivate::brand() },
  { 50331653,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::CloseResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_f0c0f9413a3083be = {
  0xf0c0f9413a3083be, b_f0c0f9413a3083be.words, 158, d_f0c0f9413a3083be, m_f0c0f9413a3083be,
  12, 6, nullptr, nullptr, nullptr, { &s_f0c0f9413a3083be, nullptr, bd_f0c0f9413a3083be, 0, sizeof(bd_f0c0f9413a3083be) / sizeof(bd_f0c0f9413a3083be[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_956ee3f21ad6b221 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 178, 214,  26, 242, 227, 110, 149,
     21,   0,   0,   0,   2,   0,   0,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  67, 108, 111,
    115, 101,  83, 101, 109,  97, 110, 116,
    105,  99, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102,  98, 112,   0,   0,   0,   0,   0,
    110, 111,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_956ee3f21ad6b221 = b_956ee3f21ad6b221.words;
#if !CAPNP_LITE
static const uint16_t m_956ee3f21ad6b221[] = {0, 1};
const ::capnp::_::RawSchema s_956ee3f21ad6b221 = {
  0x956ee3f21ad6b221, b_956ee3f21ad6b221.words, 27, nullptr, m_956ee3f21ad6b221,
  0, 2, nullptr, nullptr, nullptr, { &s_956ee3f21ad6b221, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(CloseSemantics_956ee3f21ad6b221, 956ee3f21ad6b221);
static const ::capnp::_::AlignedData<48> b_876b422c6839e6b2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    178, 230,  57, 104,  44,  66, 107, 135,
     21,   0,   0,   0,   1,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   7,   0,   0,   0,   2,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  77, 115, 103,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 111, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_876b422c6839e6b2 = b_876b422c6839e6b2.words;
#if !CAPNP_LITE
static const uint16_t m_876b422c6839e6b2[] = {1, 0};
static const uint16_t i_876b422c6839e6b2[] = {0, 1};
const ::capnp::_::RawSchema s_876b422c6839e6b2 = {
  0x876b422c6839e6b2, b_876b422c6839e6b2.words, 48, nullptr, m_876b422c6839e6b2,
  0, 2, i_876b422c6839e6b2, nullptr, nullptr, { &s_876b422c6839e6b2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_9c656810b30decd7 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    215, 236,  13, 179,  16, 104, 101, 156,
     21,   0,   0,   0,   3,   0,   0,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     69,   0,   0,   0, 135,   0,   0,   0,
    229,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  82, 101,  97,
    100, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    206, 145, 241, 254, 121, 167, 100, 242,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  90,   0,   0,   0,
     67, 104,  97, 110,  82, 101,  97, 100,
    101, 114,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     47, 168,  14, 214, 178,   0, 220, 248,
    178, 230,  57, 104,  44,  66, 107, 135,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   1,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     31,  67, 141, 200, 180,   7,  97, 146,
     58, 159,  15, 154, 228,  39,  13, 236,
     65,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     76,   0,   0,   0,   0,   0,   1,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 111, 115, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9c656810b30decd7 = b_9c656810b30decd7.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9c656810b30decd7[] = {
  &s_876b422c6839e6b2,
  &s_926107b4c88d431f,
  &s_ec0d27e49a0f9f3a,
  &s_f8dc00b2d60ea82f,
};
static const uint16_t m_9c656810b30decd7[] = {1, 0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_9c656810b30decd7[] = {
  { 33554432,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanReader::ReadParams::_capnpPrivate::brand() },
  { 33554433,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanReader::CloseParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::Msg::_capnpPrivate::brand() },
  { 50331649,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanReader::CloseResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_9c656810b30decd7 = {
  0x9c656810b30decd7, b_9c656810b30decd7.words, 69, d_9c656810b30decd7, m_9c656810b30decd7,
  4, 2, nullptr, nullptr, nullptr, { &s_9c656810b30decd7, nullptr, bd_9c656810b30decd7, 0, sizeof(bd_9c656810b30decd7) / sizeof(bd_9c656810b30decd7[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_f8dc00b2d60ea82f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     47, 168,  14, 214, 178,   0, 220, 248,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  82, 101,  97,
    100, 101, 114,  46, 114, 101,  97, 100,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_f8dc00b2d60ea82f = b_f8dc00b2d60ea82f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f8dc00b2d60ea82f = {
  0xf8dc00b2d60ea82f, b_f8dc00b2d60ea82f.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f8dc00b2d60ea82f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_926107b4c88d431f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     31,  67, 141, 200, 180,   7,  97, 146,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  82, 101,  97,
    100, 101, 114,  46,  99, 108, 111, 115,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_926107b4c88d431f = b_926107b4c88d431f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_926107b4c88d431f = {
  0x926107b4c88d431f, b_926107b4c88d431f.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_926107b4c88d431f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_ec0d27e49a0f9f3a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     58, 159,  15, 154, 228,  39,  13, 236,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  82, 101,  97,
    100, 101, 114,  46,  99, 108, 111, 115,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec0d27e49a0f9f3a = b_ec0d27e49a0f9f3a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ec0d27e49a0f9f3a = {
  0xec0d27e49a0f9f3a, b_ec0d27e49a0f9f3a.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ec0d27e49a0f9f3a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<69> b_9b5844944dc0f458 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     88, 244, 192,  77, 148,  68,  88, 155,
     21,   0,   0,   0,   3,   0,   0,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
     33,   0,   0,   0,  31,   0,   0,   0,
     69,   0,   0,   0, 135,   0,   0,   0,
    229,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  87, 114, 105,
    116, 101, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    206, 145, 241, 254, 121, 167, 100, 242,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  90,   0,   0,   0,
     67, 104,  97, 110,  87, 114, 105, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    178, 230,  57, 104,  44,  66, 107, 135,
    185, 110,  60, 181,  11, 131, 190, 152,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   1,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    236, 235, 123, 172, 231, 238, 111, 184,
    133, 251,  10, 127, 148,  94,  33, 134,
     65,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     76,   0,   0,   0,   0,   0,   1,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
    119, 114, 105, 116, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 111, 115, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_9b5844944dc0f458 = b_9b5844944dc0f458.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9b5844944dc0f458[] = {
  &s_86215e947f0afb85,
  &s_876b422c6839e6b2,
  &s_98be830bb53c6eb9,
  &s_b86feee7ac7bebec,
};
static const uint16_t m_9b5844944dc0f458[] = {1, 0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_9b5844944dc0f458[] = {
  { 33554432,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::Msg::_capnpPrivate::brand() },
  { 33554433,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanWriter::CloseParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanWriter::WriteResults::_capnpPrivate::brand() },
  { 50331649,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanWriter::CloseResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_9b5844944dc0f458 = {
  0x9b5844944dc0f458, b_9b5844944dc0f458.words, 69, d_9b5844944dc0f458, m_9b5844944dc0f458,
  4, 2, nullptr, nullptr, nullptr, { &s_9b5844944dc0f458, nullptr, bd_9b5844944dc0f458, 0, sizeof(bd_9b5844944dc0f458) / sizeof(bd_9b5844944dc0f458[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_98be830bb53c6eb9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    185, 110,  60, 181,  11, 131, 190, 152,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  87, 114, 105,
    116, 101, 114,  46, 119, 114, 105, 116,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98be830bb53c6eb9 = b_98be830bb53c6eb9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_98be830bb53c6eb9 = {
  0x98be830bb53c6eb9, b_98be830bb53c6eb9.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_98be830bb53c6eb9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_b86feee7ac7bebec = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    236, 235, 123, 172, 231, 238, 111, 184,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  87, 114, 105,
    116, 101, 114,  46,  99, 108, 111, 115,
    101,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b86feee7ac7bebec = b_b86feee7ac7bebec.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b86feee7ac7bebec = {
  0xb86feee7ac7bebec, b_b86feee7ac7bebec.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b86feee7ac7bebec, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_86215e947f0afb85 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    133, 251,  10, 127, 148,  94,  33, 134,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  87, 114, 105,
    116, 101, 114,  46,  99, 108, 111, 115,
    101,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86215e947f0afb85 = b_86215e947f0afb85.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_86215e947f0afb85 = {
  0x86215e947f0afb85, b_86215e947f0afb85.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_86215e947f0afb85, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ee378f318f32b853 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 184,  50, 143,  49, 143,  55, 238,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 115, 101, 116,
     66, 117, 102, 102, 101, 114,  83, 105,
    122, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 105, 122, 101,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee378f318f32b853 = b_ee378f318f32b853.words;
#if !CAPNP_LITE
static const uint16_t m_ee378f318f32b853[] = {0};
static const uint16_t i_ee378f318f32b853[] = {0};
const ::capnp::_::RawSchema s_ee378f318f32b853 = {
  0xee378f318f32b853, b_ee378f318f32b853.words, 34, nullptr, m_ee378f318f32b853,
  0, 1, i_ee378f318f32b853, nullptr, nullptr, { &s_ee378f318f32b853, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_abd31dc62bd9a48b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    139, 164, 217,  43, 198,  29, 211, 171,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 115, 101, 116,
     66, 117, 102, 102, 101, 114,  83, 105,
    122, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abd31dc62bd9a48b = b_abd31dc62bd9a48b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_abd31dc62bd9a48b = {
  0xabd31dc62bd9a48b, b_abd31dc62bd9a48b.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_abd31dc62bd9a48b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_b6563114436deea9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    169, 238, 109,  67,  20,  49,  86, 182,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 114, 101,  97,
    100, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b6563114436deea9 = b_b6563114436deea9.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b6563114436deea9 = {
  0xb6563114436deea9, b_b6563114436deea9.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b6563114436deea9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_89aeecad59dc62ee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238,  98, 220,  89, 173, 236, 174, 137,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 114, 101,  97,
    100, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    215, 236,  13, 179,  16, 104, 101, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_89aeecad59dc62ee = b_89aeecad59dc62ee.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_89aeecad59dc62ee[] = {
  &s_9c656810b30decd7,
};
static const uint16_t m_89aeecad59dc62ee[] = {0};
static const uint16_t i_89aeecad59dc62ee[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_89aeecad59dc62ee[] = {
  { 16777216,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanReader::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_89aeecad59dc62ee = {
  0x89aeecad59dc62ee, b_89aeecad59dc62ee.words, 38, d_89aeecad59dc62ee, m_89aeecad59dc62ee,
  1, 1, i_89aeecad59dc62ee, nullptr, nullptr, { &s_89aeecad59dc62ee, nullptr, bd_89aeecad59dc62ee, 0, sizeof(bd_89aeecad59dc62ee) / sizeof(bd_89aeecad59dc62ee[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_9882f67fa6ace6a1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    161, 230, 172, 166, 127, 246, 130, 152,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 119, 114, 105,
    116, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9882f67fa6ace6a1 = b_9882f67fa6ace6a1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9882f67fa6ace6a1 = {
  0x9882f67fa6ace6a1, b_9882f67fa6ace6a1.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9882f67fa6ace6a1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_d7e3695f7166e987 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135, 233, 102, 113,  95, 105, 227, 215,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 119, 114, 105,
    116, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    119,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     88, 244, 192,  77, 148,  68,  88, 155,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d7e3695f7166e987 = b_d7e3695f7166e987.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d7e3695f7166e987[] = {
  &s_9b5844944dc0f458,
};
static const uint16_t m_d7e3695f7166e987[] = {0};
static const uint16_t i_d7e3695f7166e987[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_d7e3695f7166e987[] = {
  { 16777216,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanWriter::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_d7e3695f7166e987 = {
  0xd7e3695f7166e987, b_d7e3695f7166e987.words, 38, d_d7e3695f7166e987, m_d7e3695f7166e987,
  1, 1, i_d7e3695f7166e987, nullptr, nullptr, { &s_d7e3695f7166e987, nullptr, bd_d7e3695f7166e987, 0, sizeof(bd_d7e3695f7166e987) / sizeof(bd_d7e3695f7166e987[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_db1f001689bbac5d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     93, 172, 187, 137,  22,   0,  31, 219,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 101, 110, 100,
    112, 111, 105, 110, 116, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_db1f001689bbac5d = b_db1f001689bbac5d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_db1f001689bbac5d = {
  0xdb1f001689bbac5d, b_db1f001689bbac5d.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_db1f001689bbac5d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<58> b_c8a1bc4350302330 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48,  35,  48,  80,  67, 188, 161, 200,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 101, 110, 100,
    112, 111, 105, 110, 116, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    215, 236,  13, 179,  16, 104, 101, 156,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     88, 244, 192,  77, 148,  68,  88, 155,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c8a1bc4350302330 = b_c8a1bc4350302330.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c8a1bc4350302330[] = {
  &s_9b5844944dc0f458,
  &s_9c656810b30decd7,
};
static const uint16_t m_c8a1bc4350302330[] = {0, 1};
static const uint16_t i_c8a1bc4350302330[] = {0, 1};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_c8a1bc4350302330[] = {
  { 16777216,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanReader::_capnpPrivate::brand() },
  { 16777217,  ::mas::schema::common::Channel< ::capnp::AnyPointer>::ChanWriter::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_c8a1bc4350302330 = {
  0xc8a1bc4350302330, b_c8a1bc4350302330.words, 58, d_c8a1bc4350302330, m_c8a1bc4350302330,
  2, 2, i_c8a1bc4350302330, nullptr, nullptr, { &s_c8a1bc4350302330, nullptr, bd_c8a1bc4350302330, 0, sizeof(bd_c8a1bc4350302330) / sizeof(bd_c8a1bc4350302330[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_d8727b5440681ed4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212,  30, 104,  64,  84, 123, 114, 216,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 115, 101, 116,
     65, 117, 116, 111,  67, 108, 111, 115,
    101,  83, 101, 109,  97, 110, 116, 105,
     99, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
     99, 115,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     33, 178, 214,  26, 242, 227, 110, 149,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    190, 131,  48,  58,  65, 249, 192, 240,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d8727b5440681ed4 = b_d8727b5440681ed4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d8727b5440681ed4[] = {
  &s_956ee3f21ad6b221,
};
static const uint16_t m_d8727b5440681ed4[] = {0};
static const uint16_t i_d8727b5440681ed4[] = {0};
const ::capnp::_::RawSchema s_d8727b5440681ed4 = {
  0xd8727b5440681ed4, b_d8727b5440681ed4.words, 40, d_d8727b5440681ed4, m_d8727b5440681ed4,
  1, 1, i_d8727b5440681ed4, nullptr, nullptr, { &s_d8727b5440681ed4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_e8ba8300eb17a23c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60, 162,  23, 235,   0, 131, 186, 232,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46, 115, 101, 116,
     65, 117, 116, 111,  67, 108, 111, 115,
    101,  83, 101, 109,  97, 110, 116, 105,
     99, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8ba8300eb17a23c = b_e8ba8300eb17a23c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e8ba8300eb17a23c = {
  0xe8ba8300eb17a23c, b_e8ba8300eb17a23c.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e8ba8300eb17a23c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f8224774a4d4d6f5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    245, 214, 212, 164, 116,  71,  34, 248,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  99, 108, 111,
    115, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     28,   0,   0,   0,   2,   0,   1,   0,
    119,  97, 105, 116,  70, 111, 114,  69,
    109, 112, 116, 121,  66, 117, 102, 102,
    101, 114,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f8224774a4d4d6f5 = b_f8224774a4d4d6f5.words;
#if !CAPNP_LITE
static const uint16_t m_f8224774a4d4d6f5[] = {0};
static const uint16_t i_f8224774a4d4d6f5[] = {0};
const ::capnp::_::RawSchema s_f8224774a4d4d6f5 = {
  0xf8224774a4d4d6f5, b_f8224774a4d4d6f5.words, 35, nullptr, m_f8224774a4d4d6f5,
  0, 1, i_f8224774a4d4d6f5, nullptr, nullptr, { &s_f8224774a4d4d6f5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_f20dfadcec8a0e13 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19,  14, 138, 236, 220, 250,  13, 242,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  67, 104,  97,
    110, 110, 101, 108,  46,  99, 108, 111,
    115, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f20dfadcec8a0e13 = b_f20dfadcec8a0e13.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f20dfadcec8a0e13 = {
  0xf20dfadcec8a0e13, b_f20dfadcec8a0e13.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f20dfadcec8a0e13, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace common {

// IdInformation
constexpr uint16_t IdInformation::_capnpPrivate::dataWordSize;
constexpr uint16_t IdInformation::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IdInformation::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdInformation::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation>
Identifiable::Client::infoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation>(
      0xb2afd1cb599c48d5ull, 0, sizeHint);
}
::kj::Promise<void> Identifiable::Server::info(InfoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:Identifiable", "info",
      0xb2afd1cb599c48d5ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Identifiable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb2afd1cb599c48d5ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:Identifiable", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Identifiable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        info(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:Identifiable",
          0xb2afd1cb599c48d5ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Identifiable
#if !CAPNP_LITE
constexpr ::capnp::Kind Identifiable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identifiable::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Identifiable::InfoParams
constexpr uint16_t Identifiable::InfoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Identifiable::InfoParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Identifiable::InfoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identifiable::InfoParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// StructuredText
constexpr uint16_t StructuredText::_capnpPrivate::dataWordSize;
constexpr uint16_t StructuredText::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StructuredText::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StructuredText::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// StructuredText::Structure
constexpr uint16_t StructuredText::Structure::_capnpPrivate::dataWordSize;
constexpr uint16_t StructuredText::Structure::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StructuredText::Structure::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StructuredText::Structure::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::Callback::CallParams,  ::mas::schema::common::Callback::CallResults>
Callback::Client::callRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::Callback::CallParams,  ::mas::schema::common::Callback::CallResults>(
      0x902904cd51bff117ull, 0, sizeHint);
}
::kj::Promise<void> Callback::Server::call(CallContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:Callback", "call",
      0x902904cd51bff117ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Callback::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x902904cd51bff117ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:Callback", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Callback::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        call(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::Callback::CallParams,  ::mas::schema::common::Callback::CallResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:Callback",
          0x902904cd51bff117ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Callback
#if !CAPNP_LITE
constexpr ::capnp::Kind Callback::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callback::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Callback::CallParams
constexpr uint16_t Callback::CallParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Callback::CallParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Callback::CallParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callback::CallParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Callback::CallResults
constexpr uint16_t Callback::CallResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Callback::CallResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Callback::CallResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Callback::CallResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::Action::DoParams,  ::mas::schema::common::Action::DoResults>
Action::Client::doRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::Action::DoParams,  ::mas::schema::common::Action::DoResults>(
      0x9dd4e2c3d76e4587ull, 0, sizeHint);
}
::kj::Promise<void> Action::Server::do_(DoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:Action", "do",
      0x9dd4e2c3d76e4587ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Action::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x9dd4e2c3d76e4587ull:
      return dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:Action", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Action::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        do_(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::Action::DoParams,  ::mas::schema::common::Action::DoResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:Action",
          0x9dd4e2c3d76e4587ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Action
#if !CAPNP_LITE
constexpr ::capnp::Kind Action::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Action::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Action::DoParams
constexpr uint16_t Action::DoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Action::DoParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Action::DoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Action::DoParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Action::DoResults
constexpr uint16_t Action::DoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Action::DoResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Action::DoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Action::DoResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::Action1::DoParams,  ::mas::schema::common::Action1::DoResults>
Action1::Client::doRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::Action1::DoParams,  ::mas::schema::common::Action1::DoResults>(
      0xc12db9a9ae07a763ull, 0, sizeHint);
}
::kj::Promise<void> Action1::Server::do_(DoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:Action1", "do",
      0xc12db9a9ae07a763ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Action1::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc12db9a9ae07a763ull:
      return dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:Action1", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Action1::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        do_(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::Action1::DoParams,  ::mas::schema::common::Action1::DoResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:Action1",
          0xc12db9a9ae07a763ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Action1
#if !CAPNP_LITE
constexpr ::capnp::Kind Action1::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Action1::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Action1::DoParams
constexpr uint16_t Action1::DoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Action1::DoParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Action1::DoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Action1::DoParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Action1::DoResults
constexpr uint16_t Action1::DoResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Action1::DoResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Action1::DoResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Action1::DoResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ZmqPipelineAddresses
constexpr uint16_t ZmqPipelineAddresses::_capnpPrivate::dataWordSize;
constexpr uint16_t ZmqPipelineAddresses::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ZmqPipelineAddresses::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ZmqPipelineAddresses::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::AnyValueHolder::ValueParams,  ::mas::schema::common::AnyValueHolder::ValueResults>
AnyValueHolder::Client::valueRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::AnyValueHolder::ValueParams,  ::mas::schema::common::AnyValueHolder::ValueResults>(
      0x89f6c5dd387cc101ull, 0, sizeHint);
}
::kj::Promise<void> AnyValueHolder::Server::value(ValueContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:AnyValueHolder", "value",
      0x89f6c5dd387cc101ull, 0);
}
::capnp::Capability::Server::DispatchCallResult AnyValueHolder::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x89f6c5dd387cc101ull:
      return dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:AnyValueHolder", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult AnyValueHolder::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        value(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::AnyValueHolder::ValueParams,  ::mas::schema::common::AnyValueHolder::ValueResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:AnyValueHolder",
          0x89f6c5dd387cc101ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// AnyValueHolder
#if !CAPNP_LITE
constexpr ::capnp::Kind AnyValueHolder::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AnyValueHolder::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AnyValueHolder::ValueParams
constexpr uint16_t AnyValueHolder::ValueParams::_capnpPrivate::dataWordSize;
constexpr uint16_t AnyValueHolder::ValueParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AnyValueHolder::ValueParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AnyValueHolder::ValueParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// AnyValueHolder::ValueResults
constexpr uint16_t AnyValueHolder::ValueResults::_capnpPrivate::dataWordSize;
constexpr uint16_t AnyValueHolder::ValueResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind AnyValueHolder::ValueResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* AnyValueHolder::ValueResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::IdentifiableHolder::CapParams,  ::mas::schema::common::IdentifiableHolder::CapResults>
IdentifiableHolder::Client::capRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::IdentifiableHolder::CapParams,  ::mas::schema::common::IdentifiableHolder::CapResults>(
      0xee543d7c305d56f6ull, 0, sizeHint);
}
::kj::Promise<void> IdentifiableHolder::Server::cap(CapContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:IdentifiableHolder", "cap",
      0xee543d7c305d56f6ull, 0);
}
::capnp::Request< ::mas::schema::common::IdentifiableHolder::ReleaseParams,  ::mas::schema::common::IdentifiableHolder::ReleaseResults>
IdentifiableHolder::Client::releaseRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::IdentifiableHolder::ReleaseParams,  ::mas::schema::common::IdentifiableHolder::ReleaseResults>(
      0xee543d7c305d56f6ull, 1, sizeHint);
}
::kj::Promise<void> IdentifiableHolder::Server::release(ReleaseContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:IdentifiableHolder", "release",
      0xee543d7c305d56f6ull, 1);
}
::capnp::Capability::Server::DispatchCallResult IdentifiableHolder::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xee543d7c305d56f6ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:IdentifiableHolder", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult IdentifiableHolder::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        cap(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::IdentifiableHolder::CapParams,  ::mas::schema::common::IdentifiableHolder::CapResults>(context)),
        false
      };
    case 1:
      return {
        release(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::IdentifiableHolder::ReleaseParams,  ::mas::schema::common::IdentifiableHolder::ReleaseResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:IdentifiableHolder",
          0xee543d7c305d56f6ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// IdentifiableHolder
#if !CAPNP_LITE
constexpr ::capnp::Kind IdentifiableHolder::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdentifiableHolder::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// IdentifiableHolder::CapParams
constexpr uint16_t IdentifiableHolder::CapParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IdentifiableHolder::CapParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IdentifiableHolder::CapParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdentifiableHolder::CapParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// IdentifiableHolder::CapResults
constexpr uint16_t IdentifiableHolder::CapResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IdentifiableHolder::CapResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IdentifiableHolder::CapResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdentifiableHolder::CapResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// IdentifiableHolder::ReleaseParams
constexpr uint16_t IdentifiableHolder::ReleaseParams::_capnpPrivate::dataWordSize;
constexpr uint16_t IdentifiableHolder::ReleaseParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IdentifiableHolder::ReleaseParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdentifiableHolder::ReleaseParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// IdentifiableHolder::ReleaseResults
constexpr uint16_t IdentifiableHolder::ReleaseResults::_capnpPrivate::dataWordSize;
constexpr uint16_t IdentifiableHolder::ReleaseResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IdentifiableHolder::ReleaseResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdentifiableHolder::ReleaseResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::Stopable::StopParams,  ::mas::schema::common::Stopable::StopResults>
Stopable::Client::stopRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::Stopable::StopParams,  ::mas::schema::common::Stopable::StopResults>(
      0xce7e4202f09e314aull, 0, sizeHint);
}
::kj::Promise<void> Stopable::Server::stop(StopContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:Stopable", "stop",
      0xce7e4202f09e314aull, 0);
}
::capnp::Capability::Server::DispatchCallResult Stopable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xce7e4202f09e314aull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:Stopable", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Stopable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        stop(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::Stopable::StopParams,  ::mas::schema::common::Stopable::StopResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:Stopable",
          0xce7e4202f09e314aull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Stopable
#if !CAPNP_LITE
constexpr ::capnp::Kind Stopable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Stopable::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Stopable::StopParams
constexpr uint16_t Stopable::StopParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Stopable::StopParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Stopable::StopParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Stopable::StopParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Stopable::StopResults
constexpr uint16_t Stopable::StopResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Stopable::StopResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Stopable::StopResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Stopable::StopResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// IP
constexpr uint16_t IP::_capnpPrivate::dataWordSize;
constexpr uint16_t IP::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IP::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IP::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// IP::KV
constexpr uint16_t IP::KV::_capnpPrivate::dataWordSize;
constexpr uint16_t IP::KV::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind IP::KV::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IP::KV::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

