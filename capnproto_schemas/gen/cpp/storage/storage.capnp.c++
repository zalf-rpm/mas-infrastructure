// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: storage.capnp

#include "storage.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<86> b_e69f958aa2386f06 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 111,  56, 162, 138, 149, 159, 230,
     14,   0,   0,   0,   3,   0,   0,   0,
    157, 179, 157,  75, 179, 208,  85, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  71,   1,   0,   0,
     25,   1,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      9,   0,   0,   0,  82,   0,   0,   0,
     66, 241, 210, 239,  44,  38, 125, 132,
      9,   0,   0,   0, 138,   0,   0,   0,
     67, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     73, 109, 112, 111, 114, 116,  69, 120,
    112, 111, 114, 116,  68,  97, 116,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    246, 155,  43, 103,  77, 184,  76, 188,
    172, 151, 153,  58, 191,  73,  35, 243,
    145,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     68,  39, 141, 159, 199, 190,  23, 245,
    229,  69,  84, 218, 174,  38, 175, 178,
    125,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    110, 206, 252, 102,  33, 233, 102, 164,
    249,  86, 162,  93, 104,  38,  36, 248,
    105,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     82,  36, 182, 127, 158,  79, 190, 191,
     14,   0, 133,  38,  56,  96,   4, 170,
     85,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     50, 171,  23,   2, 196,  94,  62, 186,
    207, 137, 172, 117,  38,  26, 143, 137,
     65,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,   7,   0,   0,   0,
    110, 101, 119,  67, 111, 110, 116,  97,
    105, 110, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,  87, 105, 116, 104,  73, 100,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116,  67, 111, 110, 116,
     97, 105, 110, 101, 114, 115,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  67, 111,
    110, 116,  97, 105, 110, 101, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 109, 112, 111, 114, 116,  67, 111,
    110, 116,  97, 105, 110, 101, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e69f958aa2386f06 = b_e69f958aa2386f06.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e69f958aa2386f06[] = {
  &s_898f1a2675ac89cf,
  &s_a466e92166fcce6e,
  &s_aa0460382685000e,
  &s_b2af26aeda5445e5,
  &s_b2afd1cb599c48d5,
  &s_ba3e5ec40217ab32,
  &s_bc4cb84d672b9bf6,
  &s_bfbe4f9e7fb62452,
  &s_c1a7daa0dc36cb65,
  &s_f32349bf3a9997ac,
  &s_f517bec79f8d2744,
  &s_f82426685da256f9,
};
static const uint16_t m_e69f958aa2386f06[] = {1, 4, 2, 0, 3};
const ::capnp::_::RawSchema s_e69f958aa2386f06 = {
  0xe69f958aa2386f06, b_e69f958aa2386f06.words, 86, d_e69f958aa2386f06, m_e69f958aa2386f06,
  12, 5, nullptr, nullptr, nullptr, { &s_e69f958aa2386f06, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<101> b_878131f45567ae62 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
     20,   0,   0,   0,   3,   0,   0,   0,
      6, 111,  56, 162, 138, 149, 159, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 199,   1,   0,   0,
     85,   1,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    192, 120, 244, 123,  62,  36,  26, 250,
      1,   0,   0,   0,  50,   0,   0,   0,
     69, 110, 116, 114, 121,   0,   0,   0,
     28,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     94, 204,  34, 190, 137, 136,  19, 158,
    238, 201,  81, 115,  77, 132,  20, 169,
    209,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    148,   9,  99, 142,  23,  20, 252, 147,
    102, 209,   1, 196, 154,  49, 228, 255,
    185,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    177,  51, 105, 140,  40,  10, 247, 219,
    114,  56,   8,   3, 186, 211,  40, 160,
    165,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    157,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    105, 214,  58, 180,  93,  29,  22, 196,
     70, 184, 112, 169, 100, 215, 193, 155,
    145,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    206, 197, 122, 178, 112, 145, 233, 253,
    191, 183, 100,  95, 201,  56, 217, 251,
    125,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    123, 130, 123, 214, 248, 113,  28, 195,
    173, 255, 155, 194, 223,  39, 111, 235,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     18, 131, 156, 237, 253,   0, 239, 251,
     84, 158, 186, 127, 115,  87,  59, 136,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
    101, 120, 112, 111, 114, 116,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 111, 119, 110, 108, 111,  97, 100,
     69, 110, 116, 114, 105, 101, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116,  69, 110, 116, 114,
    105, 101, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  69, 110, 116, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  69, 110,
    116, 114, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 101,  97, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 100,  69, 110, 116, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_878131f45567ae62 = b_878131f45567ae62.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_878131f45567ae62[] = {
  &s_883b57737fba9e54,
  &s_93fc14178e630994,
  &s_9bc1d764a970b846,
  &s_9e138889be22cc5e,
  &s_a028d3ba03083872,
  &s_a914844d7351c9ee,
  &s_b2afd1cb599c48d5,
  &s_c1a7daa0dc36cb65,
  &s_c31c71f8d67b827b,
  &s_c4161d5db43ad669,
  &s_dbf70a288c6933b1,
  &s_eb6f27dfc29bffad,
  &s_fbd938c95f64b7bf,
  &s_fbef00fded9c8312,
  &s_fde99170b27ac5ce,
  &s_ffe4319ac401d166,
};
static const uint16_t m_878131f45567ae62[] = {6, 5, 1, 0, 3, 2, 4};
const ::capnp::_::RawSchema s_878131f45567ae62 = {
  0x878131f45567ae62, b_878131f45567ae62.words, 101, d_878131f45567ae62, m_878131f45567ae62,
  16, 7, nullptr, nullptr, nullptr, { &s_878131f45567ae62, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_fa1a243e7bf478c0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    192, 120, 244, 123,  62,  36,  26, 250,
     30,   0,   0,   0,   3,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 199,   0,   0,   0,
    173,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
      1,   0,   0,   0,  50,   0,   0,   0,
     86,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10, 208,  66, 169, 254, 127, 100, 224,
    135,  63, 100, 144, 153, 126, 251, 219,
     81,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    144, 178,  56, 130, 213,   6,  60, 146,
     14,  86,   5, 159,  75,   2, 230, 197,
     57,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    175, 235,  13, 127, 170,  36, 255, 164,
      1, 174, 155,   8, 126, 185, 103, 214,
     37,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
    103, 101, 116,  75, 101, 121,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_fa1a243e7bf478c0 = b_fa1a243e7bf478c0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fa1a243e7bf478c0[] = {
  &s_923c06d58238b290,
  &s_a4ff24aa7f0debaf,
  &s_c5e6024b9f05560e,
  &s_d667b97e089bae01,
  &s_dbfb7e9990643f87,
  &s_e0647ffea942d00a,
};
static const uint16_t m_fa1a243e7bf478c0[] = {0, 1, 2};
const ::capnp::_::RawSchema s_fa1a243e7bf478c0 = {
  0xfa1a243e7bf478c0, b_fa1a243e7bf478c0.words, 55, d_fa1a243e7bf478c0, m_fa1a243e7bf478c0,
  6, 3, nullptr, nullptr, nullptr, { &s_fa1a243e7bf478c0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<506> b_e2185cc449928f5c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
     36,   0,   0,   0,   1,   0,   2,   0,
    192, 120, 244, 123,  62,  36,  26, 250,
      1,   0,   7,   0,   0,   0,  27,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 239,   5,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
    108,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   2,   0,   0,   3,   0,   1,   0,
    240,   2,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   2,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    236,   2,   0,   0,   3,   0,   1,   0,
      8,   3,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   3,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   3,   0,   0,   3,   0,   1,   0,
     16,   3,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   3,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   3,   0,   0,   3,   0,   1,   0,
     40,   3,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   3,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   3,   0,   0,   3,   0,   1,   0,
     48,   3,   0,   0,   2,   0,   1,   0,
      5,   0, 250, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   3,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   3,   0,   0,   3,   0,   1,   0,
     72,   3,   0,   0,   2,   0,   1,   0,
      6,   0, 249, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   3,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   3,   0,   0,   3,   0,   1,   0,
     80,   3,   0,   0,   2,   0,   1,   0,
      7,   0, 248, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   3,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   3,   0,   0,   3,   0,   1,   0,
    104,   3,   0,   0,   2,   0,   1,   0,
      8,   0, 247, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   8,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   3,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   3,   0,   0,   3,   0,   1,   0,
    112,   3,   0,   0,   2,   0,   1,   0,
      9,   0, 246, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   9,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   3,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   3,   0,   0,   3,   0,   1,   0,
    136,   3,   0,   0,   2,   0,   1,   0,
     10,   0, 245, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    133,   3,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    132,   3,   0,   0,   3,   0,   1,   0,
    144,   3,   0,   0,   2,   0,   1,   0,
     11,   0, 244, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  11,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   3,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   3,   0,   0,   3,   0,   1,   0,
    168,   3,   0,   0,   2,   0,   1,   0,
     12,   0, 243, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  12,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   3,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   3,   0,   0,   3,   0,   1,   0,
    176,   3,   0,   0,   2,   0,   1,   0,
     13,   0, 242, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  13,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    173,   3,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    172,   3,   0,   0,   3,   0,   1,   0,
    200,   3,   0,   0,   2,   0,   1,   0,
     14,   0, 241, 255,   1,   0,   0,   0,
      0,   0,   1,   0,  14,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    197,   3,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   3,   0,   0,   3,   0,   1,   0,
    208,   3,   0,   0,   2,   0,   1,   0,
     15,   0, 240, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  15,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    205,   3,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    204,   3,   0,   0,   3,   0,   1,   0,
    232,   3,   0,   0,   2,   0,   1,   0,
     16,   0, 239, 255,   1,   0,   0,   0,
      0,   0,   1,   0,  16,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    229,   3,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    228,   3,   0,   0,   3,   0,   1,   0,
    240,   3,   0,   0,   2,   0,   1,   0,
     17,   0, 238, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  17,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    237,   3,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    236,   3,   0,   0,   3,   0,   1,   0,
      8,   4,   0,   0,   2,   0,   1,   0,
     18,   0, 237, 255,   1,   0,   0,   0,
      0,   0,   1,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   4,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   4,   0,   0,   3,   0,   1,   0,
     16,   4,   0,   0,   2,   0,   1,   0,
     19,   0, 236, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  19,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   4,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   4,   0,   0,   3,   0,   1,   0,
     44,   4,   0,   0,   2,   0,   1,   0,
     20,   0, 235, 255,   1,   0,   0,   0,
      0,   0,   1,   0,  20,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   4,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   4,   0,   0,   3,   0,   1,   0,
     52,   4,   0,   0,   2,   0,   1,   0,
     21,   0, 234, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  21,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   4,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   4,   0,   0,   3,   0,   1,   0,
     80,   4,   0,   0,   2,   0,   1,   0,
     22,   0, 233, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  22,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   4,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   4,   0,   0,   3,   0,   1,   0,
     88,   4,   0,   0,   2,   0,   1,   0,
     23,   0, 232, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   4,   0,   0,   3,   0,   1,   0,
    112,   4,   0,   0,   2,   0,   1,   0,
     24,   0, 231, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  24,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   4,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   4,   0,   0,   3,   0,   1,   0,
    120,   4,   0,   0,   2,   0,   1,   0,
     25,   0, 230, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  25,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   4,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116,   4,   0,   0,   3,   0,   1,   0,
    144,   4,   0,   0,   2,   0,   1,   0,
     26,   0, 229, 255,   0,   0,   0,   0,
      0,   0,   1,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   4,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    140,   4,   0,   0,   3,   0,   1,   0,
    152,   4,   0,   0,   2,   0,   1,   0,
     98, 111, 111, 108,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 111, 108,  76, 105, 115, 116,
     86,  97, 108, 117, 101,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  56,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  56,  76, 105, 115, 116,
     86,  97, 108, 117, 101,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  49,  54,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  49,  54,  76, 105, 115,
    116,  86,  97, 108, 117, 101,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  51,  50,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  51,  50,  76, 105, 115,
    116,  86,  97, 108, 117, 101,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  54,  52,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  54,  52,  76, 105, 115,
    116,  86,  97, 108, 117, 101,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  56,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  56,  76, 105, 115,
    116,  86,  97, 108, 117, 101,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  49,  54,  86,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  49,  54,  76, 105,
    115, 116,  86,  97, 108, 117, 101,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  51,  50,  86,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  51,  50,  76, 105,
    115, 116,  86,  97, 108, 117, 101,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  54,  52,  86,  97,
    108, 117, 101,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 105, 110, 116,  54,  52,  76, 105,
    115, 116,  86,  97, 108, 117, 101,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  51,  50,  86,
     97, 108, 117, 101,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  51,  50,  76,
    105, 115, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  54,  52,  86,
     97, 108, 117, 101,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  54,  52,  76,
    105, 115, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,  76, 105, 115, 116,
     86,  97, 108, 117, 101,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  76, 105, 115, 116,
     86,  97, 108, 117, 101,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110, 121,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e2185cc449928f5c = b_e2185cc449928f5c.words;
#if !CAPNP_LITE
static const uint16_t m_e2185cc449928f5c[] = {26, 1, 0, 25, 24, 19, 18, 21, 20, 5, 4, 7, 6, 9, 8, 3, 2, 23, 22, 13, 12, 15, 14, 17, 16, 11, 10};
static const uint16_t i_e2185cc449928f5c[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26};
const ::capnp::_::RawSchema s_e2185cc449928f5c = {
  0xe2185cc449928f5c, b_e2185cc449928f5c.words, 506, nullptr, m_e2185cc449928f5c,
  0, 27, i_e2185cc449928f5c, nullptr, nullptr, { &s_e2185cc449928f5c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_e0647ffea942d00a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     10, 208,  66, 169, 254, 127, 100, 224,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46, 103, 101, 116,  75,
    101, 121,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e0647ffea942d00a = b_e0647ffea942d00a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e0647ffea942d00a = {
  0xe0647ffea942d00a, b_e0647ffea942d00a.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e0647ffea942d00a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_dbfb7e9990643f87 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135,  63, 100, 144, 153, 126, 251, 219,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46, 103, 101, 116,  75,
    101, 121,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbfb7e9990643f87 = b_dbfb7e9990643f87.words;
#if !CAPNP_LITE
static const uint16_t m_dbfb7e9990643f87[] = {0};
static const uint16_t i_dbfb7e9990643f87[] = {0};
const ::capnp::_::RawSchema s_dbfb7e9990643f87 = {
  0xdbfb7e9990643f87, b_dbfb7e9990643f87.words, 35, nullptr, m_dbfb7e9990643f87,
  0, 1, i_dbfb7e9990643f87, nullptr, nullptr, { &s_dbfb7e9990643f87, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_923c06d58238b290 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    144, 178,  56, 130, 213,   6,  60, 146,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46, 103, 101, 116,  86,
     97, 108, 117, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_923c06d58238b290 = b_923c06d58238b290.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_923c06d58238b290 = {
  0x923c06d58238b290, b_923c06d58238b290.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_923c06d58238b290, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_c5e6024b9f05560e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14,  86,   5, 159,  75,   2, 230, 197,
     36,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46, 103, 101, 116,  86,
     97, 108, 117, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 115,  85, 110, 115, 101, 116,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c5e6024b9f05560e = b_c5e6024b9f05560e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c5e6024b9f05560e[] = {
  &s_e2185cc449928f5c,
};
static const uint16_t m_c5e6024b9f05560e[] = {1, 0};
static const uint16_t i_c5e6024b9f05560e[] = {0, 1};
const ::capnp::_::RawSchema s_c5e6024b9f05560e = {
  0xc5e6024b9f05560e, b_c5e6024b9f05560e.words, 50, d_c5e6024b9f05560e, m_c5e6024b9f05560e,
  1, 2, i_c5e6024b9f05560e, nullptr, nullptr, { &s_c5e6024b9f05560e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a4ff24aa7f0debaf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    175, 235,  13, 127, 170,  36, 255, 164,
     36,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46, 115, 101, 116,  86,
     97, 108, 117, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a4ff24aa7f0debaf = b_a4ff24aa7f0debaf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a4ff24aa7f0debaf[] = {
  &s_e2185cc449928f5c,
};
static const uint16_t m_a4ff24aa7f0debaf[] = {0};
static const uint16_t i_a4ff24aa7f0debaf[] = {0};
const ::capnp::_::RawSchema s_a4ff24aa7f0debaf = {
  0xa4ff24aa7f0debaf, b_a4ff24aa7f0debaf.words, 35, d_a4ff24aa7f0debaf, m_a4ff24aa7f0debaf,
  1, 1, i_a4ff24aa7f0debaf, nullptr, nullptr, { &s_a4ff24aa7f0debaf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_d667b97e089bae01 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      1, 174, 155,   8, 126, 185, 103, 214,
     36,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  69, 110,
    116, 114, 121,  46, 115, 101, 116,  86,
     97, 108, 117, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d667b97e089bae01 = b_d667b97e089bae01.words;
#if !CAPNP_LITE
static const uint16_t m_d667b97e089bae01[] = {0};
static const uint16_t i_d667b97e089bae01[] = {0};
const ::capnp::_::RawSchema s_d667b97e089bae01 = {
  0xd667b97e089bae01, b_d667b97e089bae01.words, 35, nullptr, m_d667b97e089bae01,
  0, 1, i_d667b97e089bae01, nullptr, nullptr, { &s_d667b97e089bae01, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_9e138889be22cc5e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     94, 204,  34, 190, 137, 136,  19, 158,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 101, 120,
    112, 111, 114, 116,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e138889be22cc5e = b_9e138889be22cc5e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9e138889be22cc5e = {
  0x9e138889be22cc5e, b_9e138889be22cc5e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9e138889be22cc5e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_a914844d7351c9ee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238, 201,  81, 115,  77, 132,  20, 169,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 101, 120,
    112, 111, 114, 116,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 115, 111, 110,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a914844d7351c9ee = b_a914844d7351c9ee.words;
#if !CAPNP_LITE
static const uint16_t m_a914844d7351c9ee[] = {0};
static const uint16_t i_a914844d7351c9ee[] = {0};
const ::capnp::_::RawSchema s_a914844d7351c9ee = {
  0xa914844d7351c9ee, b_a914844d7351c9ee.words, 34, nullptr, m_a914844d7351c9ee,
  0, 1, i_a914844d7351c9ee, nullptr, nullptr, { &s_a914844d7351c9ee, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_93fc14178e630994 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,   9,  99, 142,  23,  20, 252, 147,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 100, 111,
    119, 110, 108, 111,  97, 100,  69, 110,
    116, 114, 105, 101, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93fc14178e630994 = b_93fc14178e630994.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_93fc14178e630994 = {
  0x93fc14178e630994, b_93fc14178e630994.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_93fc14178e630994, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<57> b_ffe4319ac401d166 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102, 209,   1, 196, 154,  49, 228, 255,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 100, 111,
    119, 110, 108, 111,  97, 100,  69, 110,
    116, 114, 105, 101, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ffe4319ac401d166 = b_ffe4319ac401d166.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ffe4319ac401d166[] = {
  &s_b9d4864725174733,
};
static const uint16_t m_ffe4319ac401d166[] = {0};
static const uint16_t i_ffe4319ac401d166[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_ffe4319ac401d166[] = {
  { 16777216,  ::mas::schema::common::Pair< ::capnp::Text,  ::mas::schema::storage::Store::Container::Entry::Value>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_ffe4319ac401d166 = {
  0xffe4319ac401d166, b_ffe4319ac401d166.words, 57, d_ffe4319ac401d166, m_ffe4319ac401d166,
  1, 1, i_ffe4319ac401d166, nullptr, nullptr, { &s_ffe4319ac401d166, nullptr, bd_ffe4319ac401d166, 0, sizeof(bd_ffe4319ac401d166) / sizeof(bd_ffe4319ac401d166[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_dbf70a288c6933b1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177,  51, 105, 140,  40,  10, 247, 219,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 108, 105,
    115, 116,  69, 110, 116, 114, 105, 101,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbf70a288c6933b1 = b_dbf70a288c6933b1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dbf70a288c6933b1 = {
  0xdbf70a288c6933b1, b_dbf70a288c6933b1.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dbf70a288c6933b1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_a028d3ba03083872 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    114,  56,   8,   3, 186, 211,  40, 160,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 108, 105,
    115, 116,  69, 110, 116, 114, 105, 101,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    192, 120, 244, 123,  62,  36,  26, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a028d3ba03083872 = b_a028d3ba03083872.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a028d3ba03083872[] = {
  &s_fa1a243e7bf478c0,
};
static const uint16_t m_a028d3ba03083872[] = {0};
static const uint16_t i_a028d3ba03083872[] = {0};
const ::capnp::_::RawSchema s_a028d3ba03083872 = {
  0xa028d3ba03083872, b_a028d3ba03083872.words, 39, d_a028d3ba03083872, m_a028d3ba03083872,
  1, 1, i_a028d3ba03083872, nullptr, nullptr, { &s_a028d3ba03083872, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c4161d5db43ad669 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    105, 214,  58, 180,  93,  29,  22, 196,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 103, 101,
    116,  69, 110, 116, 114, 121,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c4161d5db43ad669 = b_c4161d5db43ad669.words;
#if !CAPNP_LITE
static const uint16_t m_c4161d5db43ad669[] = {0};
static const uint16_t i_c4161d5db43ad669[] = {0};
const ::capnp::_::RawSchema s_c4161d5db43ad669 = {
  0xc4161d5db43ad669, b_c4161d5db43ad669.words, 34, nullptr, m_c4161d5db43ad669,
  0, 1, i_c4161d5db43ad669, nullptr, nullptr, { &s_c4161d5db43ad669, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9bc1d764a970b846 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70, 184, 112, 169, 100, 215, 193, 155,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 103, 101,
    116,  69, 110, 116, 114, 121,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 121,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    192, 120, 244, 123,  62,  36,  26, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9bc1d764a970b846 = b_9bc1d764a970b846.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9bc1d764a970b846[] = {
  &s_fa1a243e7bf478c0,
};
static const uint16_t m_9bc1d764a970b846[] = {0};
static const uint16_t i_9bc1d764a970b846[] = {0};
const ::capnp::_::RawSchema s_9bc1d764a970b846 = {
  0x9bc1d764a970b846, b_9bc1d764a970b846.words, 34, d_9bc1d764a970b846, m_9bc1d764a970b846,
  1, 1, i_9bc1d764a970b846, nullptr, nullptr, { &s_9bc1d764a970b846, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fde99170b27ac5ce = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    206, 197, 122, 178, 112, 145, 233, 253,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 114, 101,
    109, 111, 118, 101,  69, 110, 116, 114,
    121,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fde99170b27ac5ce = b_fde99170b27ac5ce.words;
#if !CAPNP_LITE
static const uint16_t m_fde99170b27ac5ce[] = {0};
static const uint16_t i_fde99170b27ac5ce[] = {0};
const ::capnp::_::RawSchema s_fde99170b27ac5ce = {
  0xfde99170b27ac5ce, b_fde99170b27ac5ce.words, 35, nullptr, m_fde99170b27ac5ce,
  0, 1, i_fde99170b27ac5ce, nullptr, nullptr, { &s_fde99170b27ac5ce, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_fbd938c95f64b7bf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    191, 183, 100,  95, 201,  56, 217, 251,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 114, 101,
    109, 111, 118, 101,  69, 110, 116, 114,
    121,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbd938c95f64b7bf = b_fbd938c95f64b7bf.words;
#if !CAPNP_LITE
static const uint16_t m_fbd938c95f64b7bf[] = {0};
static const uint16_t i_fbd938c95f64b7bf[] = {0};
const ::capnp::_::RawSchema s_fbd938c95f64b7bf = {
  0xfbd938c95f64b7bf, b_fbd938c95f64b7bf.words, 35, nullptr, m_fbd938c95f64b7bf,
  0, 1, i_fbd938c95f64b7bf, nullptr, nullptr, { &s_fbd938c95f64b7bf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_c31c71f8d67b827b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    123, 130, 123, 214, 248, 113,  28, 195,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  99, 108,
    101,  97, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c31c71f8d67b827b = b_c31c71f8d67b827b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c31c71f8d67b827b = {
  0xc31c71f8d67b827b, b_c31c71f8d67b827b.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c31c71f8d67b827b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_eb6f27dfc29bffad = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    173, 255, 155, 194, 223,  39, 111, 235,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  99, 108,
    101,  97, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb6f27dfc29bffad = b_eb6f27dfc29bffad.words;
#if !CAPNP_LITE
static const uint16_t m_eb6f27dfc29bffad[] = {0};
static const uint16_t i_eb6f27dfc29bffad[] = {0};
const ::capnp::_::RawSchema s_eb6f27dfc29bffad = {
  0xeb6f27dfc29bffad, b_eb6f27dfc29bffad.words, 34, nullptr, m_eb6f27dfc29bffad,
  0, 1, i_eb6f27dfc29bffad, nullptr, nullptr, { &s_eb6f27dfc29bffad, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_fbef00fded9c8312 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 131, 156, 237, 253,   0, 239, 251,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  97, 100,
    100,  69, 110, 116, 114, 121,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 112, 108,  97,  99, 101,  69,
    120, 105, 115, 116, 105, 110, 103,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbef00fded9c8312 = b_fbef00fded9c8312.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fbef00fded9c8312[] = {
  &s_e2185cc449928f5c,
};
static const uint16_t m_fbef00fded9c8312[] = {0, 2, 1};
static const uint16_t i_fbef00fded9c8312[] = {0, 1, 2};
const ::capnp::_::RawSchema s_fbef00fded9c8312 = {
  0xfbef00fded9c8312, b_fbef00fded9c8312.words, 65, d_fbef00fded9c8312, m_fbef00fded9c8312,
  1, 3, i_fbef00fded9c8312, nullptr, nullptr, { &s_fbef00fded9c8312, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_883b57737fba9e54 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 158, 186, 127, 115,  87,  59, 136,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  97, 100,
    100,  69, 110, 116, 114, 121,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 121,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    192, 120, 244, 123,  62,  36,  26, 250,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_883b57737fba9e54 = b_883b57737fba9e54.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_883b57737fba9e54[] = {
  &s_fa1a243e7bf478c0,
};
static const uint16_t m_883b57737fba9e54[] = {0, 1};
static const uint16_t i_883b57737fba9e54[] = {0, 1};
const ::capnp::_::RawSchema s_883b57737fba9e54 = {
  0x883b57737fba9e54, b_883b57737fba9e54.words, 49, d_883b57737fba9e54, m_883b57737fba9e54,
  1, 2, i_883b57737fba9e54, nullptr, nullptr, { &s_883b57737fba9e54, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<91> b_847d262cefd2f142 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     66, 241, 210, 239,  44,  38, 125, 132,
     20,   0,   0,   0,   1,   0,   0,   0,
      6, 111,  56, 162, 138, 149, 159, 230,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  73, 109, 112, 111,
    114, 116,  69, 120, 112, 111, 114, 116,
     68,  97, 116,  97,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
    168,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    165,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    164,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     92, 143, 146,  73, 196,  92,  24, 226,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 115,  65, 110, 121,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_847d262cefd2f142 = b_847d262cefd2f142.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_847d262cefd2f142[] = {
  &s_b9d4864725174733,
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_847d262cefd2f142[] = {1, 0, 2};
static const uint16_t i_847d262cefd2f142[] = {0, 1, 2};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_847d262cefd2f142[] = {
  { 16777217,  ::mas::schema::common::Pair< ::capnp::Text,  ::mas::schema::storage::Store::Container::Entry::Value>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_847d262cefd2f142 = {
  0x847d262cefd2f142, b_847d262cefd2f142.words, 91, d_847d262cefd2f142, m_847d262cefd2f142,
  2, 3, i_847d262cefd2f142, nullptr, nullptr, { &s_847d262cefd2f142, nullptr, bd_847d262cefd2f142, 0, sizeof(bd_847d262cefd2f142) / sizeof(bd_847d262cefd2f142[0]), nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_bc4cb84d672b9bf6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    246, 155,  43, 103,  77, 184,  76, 188,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 110, 101, 119,  67,
    111, 110, 116,  97, 105, 110, 101, 114,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 114, 105, 112, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bc4cb84d672b9bf6 = b_bc4cb84d672b9bf6.words;
#if !CAPNP_LITE
static const uint16_t m_bc4cb84d672b9bf6[] = {1, 0};
static const uint16_t i_bc4cb84d672b9bf6[] = {0, 1};
const ::capnp::_::RawSchema s_bc4cb84d672b9bf6 = {
  0xbc4cb84d672b9bf6, b_bc4cb84d672b9bf6.words, 49, nullptr, m_bc4cb84d672b9bf6,
  0, 2, i_bc4cb84d672b9bf6, nullptr, nullptr, { &s_bc4cb84d672b9bf6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f32349bf3a9997ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 151, 153,  58, 191,  73,  35, 243,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 110, 101, 119,  67,
    111, 110, 116,  97, 105, 110, 101, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f32349bf3a9997ac = b_f32349bf3a9997ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f32349bf3a9997ac[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_f32349bf3a9997ac[] = {0};
static const uint16_t i_f32349bf3a9997ac[] = {0};
const ::capnp::_::RawSchema s_f32349bf3a9997ac = {
  0xf32349bf3a9997ac, b_f32349bf3a9997ac.words, 35, d_f32349bf3a9997ac, m_f32349bf3a9997ac,
  1, 1, i_f32349bf3a9997ac, nullptr, nullptr, { &s_f32349bf3a9997ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f517bec79f8d2744 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  39, 141, 159, 199, 190,  23, 245,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  99, 111, 110, 116,
     97, 105, 110, 101, 114,  87, 105, 116,
    104,  73, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f517bec79f8d2744 = b_f517bec79f8d2744.words;
#if !CAPNP_LITE
static const uint16_t m_f517bec79f8d2744[] = {0};
static const uint16_t i_f517bec79f8d2744[] = {0};
const ::capnp::_::RawSchema s_f517bec79f8d2744 = {
  0xf517bec79f8d2744, b_f517bec79f8d2744.words, 34, nullptr, m_f517bec79f8d2744,
  0, 1, i_f517bec79f8d2744, nullptr, nullptr, { &s_f517bec79f8d2744, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b2af26aeda5445e5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    229,  69,  84, 218, 174,  38, 175, 178,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  99, 111, 110, 116,
     97, 105, 110, 101, 114,  87, 105, 116,
    104,  73, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2af26aeda5445e5 = b_b2af26aeda5445e5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2af26aeda5445e5[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_b2af26aeda5445e5[] = {0};
static const uint16_t i_b2af26aeda5445e5[] = {0};
const ::capnp::_::RawSchema s_b2af26aeda5445e5 = {
  0xb2af26aeda5445e5, b_b2af26aeda5445e5.words, 35, d_b2af26aeda5445e5, m_b2af26aeda5445e5,
  1, 1, i_b2af26aeda5445e5, nullptr, nullptr, { &s_b2af26aeda5445e5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a466e92166fcce6e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110, 206, 252, 102,  33, 233, 102, 164,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 108, 105, 115, 116,
     67, 111, 110, 116,  97, 105, 110, 101,
    114, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a466e92166fcce6e = b_a466e92166fcce6e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a466e92166fcce6e = {
  0xa466e92166fcce6e, b_a466e92166fcce6e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a466e92166fcce6e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_f82426685da256f9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    249,  86, 162,  93, 104,  38,  36, 248,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 108, 105, 115, 116,
     67, 111, 110, 116,  97, 105, 110, 101,
    114, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f82426685da256f9 = b_f82426685da256f9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f82426685da256f9[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_f82426685da256f9[] = {0};
static const uint16_t i_f82426685da256f9[] = {0};
const ::capnp::_::RawSchema s_f82426685da256f9 = {
  0xf82426685da256f9, b_f82426685da256f9.words, 39, d_f82426685da256f9, m_f82426685da256f9,
  1, 1, i_f82426685da256f9, nullptr, nullptr, { &s_f82426685da256f9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bfbe4f9e7fb62452 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     82,  36, 182, 127, 158,  79, 190, 191,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 114, 101, 109, 111,
    118, 101,  67, 111, 110, 116,  97, 105,
    110, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bfbe4f9e7fb62452 = b_bfbe4f9e7fb62452.words;
#if !CAPNP_LITE
static const uint16_t m_bfbe4f9e7fb62452[] = {0};
static const uint16_t i_bfbe4f9e7fb62452[] = {0};
const ::capnp::_::RawSchema s_bfbe4f9e7fb62452 = {
  0xbfbe4f9e7fb62452, b_bfbe4f9e7fb62452.words, 34, nullptr, m_bfbe4f9e7fb62452,
  0, 1, i_bfbe4f9e7fb62452, nullptr, nullptr, { &s_bfbe4f9e7fb62452, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_aa0460382685000e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14,   0, 133,  38,  56,  96,   4, 170,
     20,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 114, 101, 109, 111,
    118, 101,  67, 111, 110, 116,  97, 105,
    110, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa0460382685000e = b_aa0460382685000e.words;
#if !CAPNP_LITE
static const uint16_t m_aa0460382685000e[] = {0};
static const uint16_t i_aa0460382685000e[] = {0};
const ::capnp::_::RawSchema s_aa0460382685000e = {
  0xaa0460382685000e, b_aa0460382685000e.words, 34, nullptr, m_aa0460382685000e,
  0, 1, i_aa0460382685000e, nullptr, nullptr, { &s_aa0460382685000e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ba3e5ec40217ab32 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     50, 171,  23,   2, 196,  94,  62, 186,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 105, 109, 112, 111,
    114, 116,  67, 111, 110, 116,  97, 105,
    110, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 115, 111, 110,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ba3e5ec40217ab32 = b_ba3e5ec40217ab32.words;
#if !CAPNP_LITE
static const uint16_t m_ba3e5ec40217ab32[] = {0};
static const uint16_t i_ba3e5ec40217ab32[] = {0};
const ::capnp::_::RawSchema s_ba3e5ec40217ab32 = {
  0xba3e5ec40217ab32, b_ba3e5ec40217ab32.words, 34, nullptr, m_ba3e5ec40217ab32,
  0, 1, i_ba3e5ec40217ab32, nullptr, nullptr, { &s_ba3e5ec40217ab32, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_898f1a2675ac89cf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    207, 137, 172, 117,  38,  26, 143, 137,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 105, 109, 112, 111,
    114, 116,  67, 111, 110, 116,  97, 105,
    110, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_898f1a2675ac89cf = b_898f1a2675ac89cf.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_898f1a2675ac89cf[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_898f1a2675ac89cf[] = {0};
static const uint16_t i_898f1a2675ac89cf[] = {0};
const ::capnp::_::RawSchema s_898f1a2675ac89cf = {
  0x898f1a2675ac89cf, b_898f1a2675ac89cf.words, 35, d_898f1a2675ac89cf, m_898f1a2675ac89cf,
  1, 1, i_898f1a2675ac89cf, nullptr, nullptr, { &s_898f1a2675ac89cf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace storage {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::storage::Store::NewContainerParams,  ::mas::schema::storage::Store::NewContainerResults>
Store::Client::newContainerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::NewContainerParams,  ::mas::schema::storage::Store::NewContainerResults>(
      0xe69f958aa2386f06ull, 0, sizeHint);
}
::kj::Promise<void> Store::Server::newContainer(NewContainerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "newContainer",
      0xe69f958aa2386f06ull, 0);
}
::capnp::Request< ::mas::schema::storage::Store::ContainerWithIdParams,  ::mas::schema::storage::Store::ContainerWithIdResults>
Store::Client::containerWithIdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::ContainerWithIdParams,  ::mas::schema::storage::Store::ContainerWithIdResults>(
      0xe69f958aa2386f06ull, 1, sizeHint);
}
::kj::Promise<void> Store::Server::containerWithId(ContainerWithIdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "containerWithId",
      0xe69f958aa2386f06ull, 1);
}
::capnp::Request< ::mas::schema::storage::Store::ListContainersParams,  ::mas::schema::storage::Store::ListContainersResults>
Store::Client::listContainersRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::ListContainersParams,  ::mas::schema::storage::Store::ListContainersResults>(
      0xe69f958aa2386f06ull, 2, sizeHint);
}
::kj::Promise<void> Store::Server::listContainers(ListContainersContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "listContainers",
      0xe69f958aa2386f06ull, 2);
}
::capnp::Request< ::mas::schema::storage::Store::RemoveContainerParams,  ::mas::schema::storage::Store::RemoveContainerResults>
Store::Client::removeContainerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::RemoveContainerParams,  ::mas::schema::storage::Store::RemoveContainerResults>(
      0xe69f958aa2386f06ull, 3, sizeHint);
}
::kj::Promise<void> Store::Server::removeContainer(RemoveContainerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "removeContainer",
      0xe69f958aa2386f06ull, 3);
}
::capnp::Request< ::mas::schema::storage::Store::ImportContainerParams,  ::mas::schema::storage::Store::ImportContainerResults>
Store::Client::importContainerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::ImportContainerParams,  ::mas::schema::storage::Store::ImportContainerResults>(
      0xe69f958aa2386f06ull, 4, sizeHint);
}
::kj::Promise<void> Store::Server::importContainer(ImportContainerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "importContainer",
      0xe69f958aa2386f06ull, 4);
}
::capnp::Capability::Server::DispatchCallResult Store::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe69f958aa2386f06ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("storage.capnp:Store", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Store::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        newContainer(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::NewContainerParams,  ::mas::schema::storage::Store::NewContainerResults>(context)),
        false
      };
    case 1:
      return {
        containerWithId(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::ContainerWithIdParams,  ::mas::schema::storage::Store::ContainerWithIdResults>(context)),
        false
      };
    case 2:
      return {
        listContainers(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::ListContainersParams,  ::mas::schema::storage::Store::ListContainersResults>(context)),
        false
      };
    case 3:
      return {
        removeContainer(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::RemoveContainerParams,  ::mas::schema::storage::Store::RemoveContainerResults>(context)),
        false
      };
    case 4:
      return {
        importContainer(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::ImportContainerParams,  ::mas::schema::storage::Store::ImportContainerResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "storage.capnp:Store",
          0xe69f958aa2386f06ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Store
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::storage::Store::Container::ExportParams,  ::mas::schema::storage::Store::Container::ExportResults>
Store::Container::Client::exportRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ExportParams,  ::mas::schema::storage::Store::Container::ExportResults>(
      0x878131f45567ae62ull, 0, sizeHint);
}
::kj::Promise<void> Store::Container::Server::export_(ExportContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "export",
      0x878131f45567ae62ull, 0);
}
::capnp::Request< ::mas::schema::storage::Store::Container::DownloadEntriesParams,  ::mas::schema::storage::Store::Container::DownloadEntriesResults>
Store::Container::Client::downloadEntriesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::DownloadEntriesParams,  ::mas::schema::storage::Store::Container::DownloadEntriesResults>(
      0x878131f45567ae62ull, 1, sizeHint);
}
::kj::Promise<void> Store::Container::Server::downloadEntries(DownloadEntriesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "downloadEntries",
      0x878131f45567ae62ull, 1);
}
::capnp::Request< ::mas::schema::storage::Store::Container::ListEntriesParams,  ::mas::schema::storage::Store::Container::ListEntriesResults>
Store::Container::Client::listEntriesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ListEntriesParams,  ::mas::schema::storage::Store::Container::ListEntriesResults>(
      0x878131f45567ae62ull, 2, sizeHint);
}
::kj::Promise<void> Store::Container::Server::listEntries(ListEntriesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "listEntries",
      0x878131f45567ae62ull, 2);
}
::capnp::Request< ::mas::schema::storage::Store::Container::GetEntryParams,  ::mas::schema::storage::Store::Container::GetEntryResults>
Store::Container::Client::getEntryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::GetEntryParams,  ::mas::schema::storage::Store::Container::GetEntryResults>(
      0x878131f45567ae62ull, 3, sizeHint);
}
::kj::Promise<void> Store::Container::Server::getEntry(GetEntryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "getEntry",
      0x878131f45567ae62ull, 3);
}
::capnp::Request< ::mas::schema::storage::Store::Container::RemoveEntryParams,  ::mas::schema::storage::Store::Container::RemoveEntryResults>
Store::Container::Client::removeEntryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::RemoveEntryParams,  ::mas::schema::storage::Store::Container::RemoveEntryResults>(
      0x878131f45567ae62ull, 4, sizeHint);
}
::kj::Promise<void> Store::Container::Server::removeEntry(RemoveEntryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "removeEntry",
      0x878131f45567ae62ull, 4);
}
::capnp::Request< ::mas::schema::storage::Store::Container::ClearParams,  ::mas::schema::storage::Store::Container::ClearResults>
Store::Container::Client::clearRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ClearParams,  ::mas::schema::storage::Store::Container::ClearResults>(
      0x878131f45567ae62ull, 5, sizeHint);
}
::kj::Promise<void> Store::Container::Server::clear(ClearContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "clear",
      0x878131f45567ae62ull, 5);
}
::capnp::Request< ::mas::schema::storage::Store::Container::AddEntryParams,  ::mas::schema::storage::Store::Container::AddEntryResults>
Store::Container::Client::addEntryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::AddEntryParams,  ::mas::schema::storage::Store::Container::AddEntryResults>(
      0x878131f45567ae62ull, 6, sizeHint);
}
::kj::Promise<void> Store::Container::Server::addEntry(AddEntryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "addEntry",
      0x878131f45567ae62ull, 6);
}
::capnp::Capability::Server::DispatchCallResult Store::Container::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x878131f45567ae62ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("storage.capnp:Store.Container", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Store::Container::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        export_(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ExportParams,  ::mas::schema::storage::Store::Container::ExportResults>(context)),
        false
      };
    case 1:
      return {
        downloadEntries(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::DownloadEntriesParams,  ::mas::schema::storage::Store::Container::DownloadEntriesResults>(context)),
        false
      };
    case 2:
      return {
        listEntries(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ListEntriesParams,  ::mas::schema::storage::Store::Container::ListEntriesResults>(context)),
        false
      };
    case 3:
      return {
        getEntry(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::GetEntryParams,  ::mas::schema::storage::Store::Container::GetEntryResults>(context)),
        false
      };
    case 4:
      return {
        removeEntry(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::RemoveEntryParams,  ::mas::schema::storage::Store::Container::RemoveEntryResults>(context)),
        false
      };
    case 5:
      return {
        clear(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ClearParams,  ::mas::schema::storage::Store::Container::ClearResults>(context)),
        false
      };
    case 6:
      return {
        addEntry(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::AddEntryParams,  ::mas::schema::storage::Store::Container::AddEntryResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "storage.capnp:Store.Container",
          0x878131f45567ae62ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Store::Container
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::storage::Store::Container::Entry::GetKeyParams,  ::mas::schema::storage::Store::Container::Entry::GetKeyResults>
Store::Container::Entry::Client::getKeyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::Entry::GetKeyParams,  ::mas::schema::storage::Store::Container::Entry::GetKeyResults>(
      0xfa1a243e7bf478c0ull, 0, sizeHint);
}
::kj::Promise<void> Store::Container::Entry::Server::getKey(GetKeyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container.Entry", "getKey",
      0xfa1a243e7bf478c0ull, 0);
}
::capnp::Request< ::mas::schema::storage::Store::Container::Entry::GetValueParams,  ::mas::schema::storage::Store::Container::Entry::GetValueResults>
Store::Container::Entry::Client::getValueRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::Entry::GetValueParams,  ::mas::schema::storage::Store::Container::Entry::GetValueResults>(
      0xfa1a243e7bf478c0ull, 1, sizeHint);
}
::kj::Promise<void> Store::Container::Entry::Server::getValue(GetValueContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container.Entry", "getValue",
      0xfa1a243e7bf478c0ull, 1);
}
::capnp::Request< ::mas::schema::storage::Store::Container::Entry::SetValueParams,  ::mas::schema::storage::Store::Container::Entry::SetValueResults>
Store::Container::Entry::Client::setValueRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::Entry::SetValueParams,  ::mas::schema::storage::Store::Container::Entry::SetValueResults>(
      0xfa1a243e7bf478c0ull, 2, sizeHint);
}
::kj::Promise<void> Store::Container::Entry::Server::setValue(SetValueContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container.Entry", "setValue",
      0xfa1a243e7bf478c0ull, 2);
}
::capnp::Capability::Server::DispatchCallResult Store::Container::Entry::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfa1a243e7bf478c0ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("storage.capnp:Store.Container.Entry", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Store::Container::Entry::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        getKey(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::Entry::GetKeyParams,  ::mas::schema::storage::Store::Container::Entry::GetKeyResults>(context)),
        false
      };
    case 1:
      return {
        getValue(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::Entry::GetValueParams,  ::mas::schema::storage::Store::Container::Entry::GetValueResults>(context)),
        false
      };
    case 2:
      return {
        setValue(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::Entry::SetValueParams,  ::mas::schema::storage::Store::Container::Entry::SetValueResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "storage.capnp:Store.Container.Entry",
          0xfa1a243e7bf478c0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Store::Container::Entry
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::Value
constexpr uint16_t Store::Container::Entry::Value::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::Value::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::Value::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::GetKeyParams
constexpr uint16_t Store::Container::Entry::GetKeyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::GetKeyParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::GetKeyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::GetKeyParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::GetKeyResults
constexpr uint16_t Store::Container::Entry::GetKeyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::GetKeyResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::GetKeyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::GetKeyResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::GetValueParams
constexpr uint16_t Store::Container::Entry::GetValueParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::GetValueParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::GetValueParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::GetValueParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::GetValueResults
constexpr uint16_t Store::Container::Entry::GetValueResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::GetValueResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::GetValueResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::GetValueResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::SetValueParams
constexpr uint16_t Store::Container::Entry::SetValueParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::SetValueParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::SetValueParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::SetValueParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Entry::SetValueResults
constexpr uint16_t Store::Container::Entry::SetValueResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Entry::SetValueResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Entry::SetValueResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Entry::SetValueResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ExportParams
constexpr uint16_t Store::Container::ExportParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ExportParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ExportParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ExportParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ExportResults
constexpr uint16_t Store::Container::ExportResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ExportResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ExportResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ExportResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::DownloadEntriesParams
constexpr uint16_t Store::Container::DownloadEntriesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::DownloadEntriesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::DownloadEntriesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::DownloadEntriesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::DownloadEntriesResults
constexpr uint16_t Store::Container::DownloadEntriesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::DownloadEntriesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::DownloadEntriesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::DownloadEntriesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ListEntriesParams
constexpr uint16_t Store::Container::ListEntriesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ListEntriesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ListEntriesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ListEntriesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ListEntriesResults
constexpr uint16_t Store::Container::ListEntriesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ListEntriesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ListEntriesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ListEntriesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::GetEntryParams
constexpr uint16_t Store::Container::GetEntryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::GetEntryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::GetEntryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::GetEntryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::GetEntryResults
constexpr uint16_t Store::Container::GetEntryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::GetEntryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::GetEntryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::GetEntryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::RemoveEntryParams
constexpr uint16_t Store::Container::RemoveEntryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::RemoveEntryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::RemoveEntryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::RemoveEntryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::RemoveEntryResults
constexpr uint16_t Store::Container::RemoveEntryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::RemoveEntryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::RemoveEntryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::RemoveEntryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ClearParams
constexpr uint16_t Store::Container::ClearParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ClearParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ClearParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ClearParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ClearResults
constexpr uint16_t Store::Container::ClearResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ClearResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ClearResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ClearResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::AddEntryParams
constexpr uint16_t Store::Container::AddEntryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::AddEntryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::AddEntryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::AddEntryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::AddEntryResults
constexpr uint16_t Store::Container::AddEntryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::AddEntryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::AddEntryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::AddEntryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ImportExportData
constexpr uint16_t Store::ImportExportData::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ImportExportData::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ImportExportData::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ImportExportData::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::NewContainerParams
constexpr uint16_t Store::NewContainerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::NewContainerParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::NewContainerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::NewContainerParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::NewContainerResults
constexpr uint16_t Store::NewContainerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::NewContainerResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::NewContainerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::NewContainerResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ContainerWithIdParams
constexpr uint16_t Store::ContainerWithIdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ContainerWithIdParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ContainerWithIdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ContainerWithIdParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ContainerWithIdResults
constexpr uint16_t Store::ContainerWithIdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ContainerWithIdResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ContainerWithIdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ContainerWithIdResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ListContainersParams
constexpr uint16_t Store::ListContainersParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ListContainersParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ListContainersParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ListContainersParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ListContainersResults
constexpr uint16_t Store::ListContainersResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ListContainersResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ListContainersResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ListContainersResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::RemoveContainerParams
constexpr uint16_t Store::RemoveContainerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::RemoveContainerParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::RemoveContainerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::RemoveContainerParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::RemoveContainerResults
constexpr uint16_t Store::RemoveContainerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::RemoveContainerResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::RemoveContainerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::RemoveContainerResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ImportContainerParams
constexpr uint16_t Store::ImportContainerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ImportContainerParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ImportContainerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ImportContainerParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ImportContainerResults
constexpr uint16_t Store::ImportContainerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ImportContainerResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ImportContainerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ImportContainerResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

