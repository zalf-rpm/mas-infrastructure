// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: storage.capnp

#include "storage.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<66> b_e69f958aa2386f06 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      6, 111,  56, 162, 138, 149, 159, 230,
     14,   0,   0,   0,   3,   0,   0,   0,
    157, 179, 157,  75, 179, 208,  85, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   1,   0,   0,
    217,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      1,   0,   0,   0,  82,   0,   0,   0,
     67, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
    172, 151, 153,  58, 191,  73,  35, 243,
    113,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     68,  39, 141, 159, 199, 190,  23, 245,
    229,  69,  84, 218, 174,  38, 175, 178,
     93,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    110, 206, 252, 102,  33, 233, 102, 164,
    249,  86, 162,  93, 104,  38,  36, 248,
     73,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     82,  36, 182, 127, 158,  79, 190, 191,
     14,   0, 133,  38,  56,  96,   4, 170,
     53,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
    110, 101, 119,  67, 111, 110, 116,  97,
    105, 110, 101, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,  87, 105, 116, 104,  73, 100,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116,  67, 111, 110, 116,
     97, 105, 110, 101, 114, 115,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  67, 111,
    110, 116,  97, 105, 110, 101, 114,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e69f958aa2386f06 = b_e69f958aa2386f06.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e69f958aa2386f06[] = {
  &s_a466e92166fcce6e,
  &s_aa0460382685000e,
  &s_b2af26aeda5445e5,
  &s_bfbe4f9e7fb62452,
  &s_d4cb7ecbfe03dad3,
  &s_f32349bf3a9997ac,
  &s_f517bec79f8d2744,
  &s_f82426685da256f9,
};
static const uint16_t m_e69f958aa2386f06[] = {1, 2, 0, 3};
const ::capnp::_::RawSchema s_e69f958aa2386f06 = {
  0xe69f958aa2386f06, b_e69f958aa2386f06.words, 66, d_e69f958aa2386f06, m_e69f958aa2386f06,
  8, 4, nullptr, nullptr, nullptr, { &s_e69f958aa2386f06, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<102> b_878131f45567ae62 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
     20,   0,   0,   0,   3,   0,   0,   0,
      6, 111,  56, 162, 138, 149, 159, 230,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 199,   1,   0,   0,
     89,   1,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    174, 248,  80,  70, 245,  35,  92, 170,
      1,   0,   0,   0,  58,   0,   0,   0,
     79,  98, 106, 101,  99, 116,   0,   0,
     28,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     94, 204,  34, 190, 137, 136,  19, 158,
    238, 201,  81, 115,  77, 132,  20, 169,
    209,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    148,   9,  99, 142,  23,  20, 252, 147,
    102, 209,   1, 196, 154,  49, 228, 255,
    189,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    177,  51, 105, 140,  40,  10, 247, 219,
    114,  56,   8,   3, 186, 211,  40, 160,
    169,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    105, 214,  58, 180,  93,  29,  22, 196,
     70, 184, 112, 169, 100, 215, 193, 155,
    149,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    206, 197, 122, 178, 112, 145, 233, 253,
    191, 183, 100,  95, 201,  56, 217, 251,
    129,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    123, 130, 123, 214, 248, 113,  28, 195,
    173, 255, 155, 194, 223,  39, 111, 235,
    109,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
     18, 131, 156, 237, 253,   0, 239, 251,
     84, 158, 186, 127, 115,  87,  59, 136,
     89,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
    105, 109, 112, 111, 114, 116,  68,  97,
    116,  97,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 120, 112, 111, 114, 116,  68,  97,
    116,  97,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    108, 105, 115, 116,  79,  98, 106, 101,
     99, 116, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  79,  98, 106, 101,  99,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 100, 100,  79,  98, 106, 101,  99,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  79,  98,
    106, 101,  99, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 108, 101,  97, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_878131f45567ae62 = b_878131f45567ae62.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_878131f45567ae62[] = {
  &s_883b57737fba9e54,
  &s_93fc14178e630994,
  &s_9bc1d764a970b846,
  &s_9e138889be22cc5e,
  &s_a028d3ba03083872,
  &s_a914844d7351c9ee,
  &s_b2afd1cb599c48d5,
  &s_c1a7daa0dc36cb65,
  &s_c31c71f8d67b827b,
  &s_c4161d5db43ad669,
  &s_dbf70a288c6933b1,
  &s_eb6f27dfc29bffad,
  &s_fbd938c95f64b7bf,
  &s_fbef00fded9c8312,
  &s_fde99170b27ac5ce,
  &s_ffe4319ac401d166,
};
static const uint16_t m_878131f45567ae62[] = {4, 6, 1, 3, 0, 2, 5};
const ::capnp::_::RawSchema s_878131f45567ae62 = {
  0x878131f45567ae62, b_878131f45567ae62.words, 102, d_878131f45567ae62, m_878131f45567ae62,
  16, 7, nullptr, nullptr, nullptr, { &s_878131f45567ae62, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_aa5c23f54650f8ae = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    174, 248,  80,  70, 245,  35,  92, 170,
     30,   0,   0,   0,   1,   0,   2,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  79,  98,
    106, 101,  99, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     95,  78,  27, 242, 252,  63,  58, 231,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0, }
};
::capnp::word const* const bp_aa5c23f54650f8ae = b_aa5c23f54650f8ae.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aa5c23f54650f8ae[] = {
  &s_e73a3ffcf21b4e5f,
};
static const uint16_t m_aa5c23f54650f8ae[] = {0, 1};
static const uint16_t i_aa5c23f54650f8ae[] = {0, 1};
const ::capnp::_::RawSchema s_aa5c23f54650f8ae = {
  0xaa5c23f54650f8ae, b_aa5c23f54650f8ae.words, 42, d_aa5c23f54650f8ae, m_aa5c23f54650f8ae,
  1, 2, i_aa5c23f54650f8ae, nullptr, nullptr, { &s_aa5c23f54650f8ae, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<115> b_e73a3ffcf21b4e5f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95,  78,  27, 242, 252,  63,  58, 231,
     37,   0,   0,   0,   1,   0,   2,   0,
    174, 248,  80,  70, 245,  35,  92, 170,
      2,   0,   7,   0,   1,   0,   6,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  87,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  79,  98,
    106, 101,  99, 116,  46, 118,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    152,   0,   0,   0,   3,   0,   1,   0,
    164,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    161,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    160,   0,   0,   0,   3,   0,   1,   0,
    172,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    168,   0,   0,   0,   3,   0,   1,   0,
    180,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    176,   0,   0,   0,   3,   0,   1,   0,
    188,   0,   0,   0,   2,   0,   1,   0,
      4,   0, 251, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   5,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    185,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    184,   0,   0,   0,   3,   0,   1,   0,
    196,   0,   0,   0,   2,   0,   1,   0,
      5,   0, 250, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   6,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    193,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    192,   0,   0,   0,   3,   0,   1,   0,
    204,   0,   0,   0,   2,   0,   1,   0,
     98, 111, 111, 108,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    102, 108, 111,  97, 116,  86,  97, 108,
    117, 101,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 101, 120, 116,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 110, 121,  86,  97, 108, 117, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e73a3ffcf21b4e5f = b_e73a3ffcf21b4e5f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e73a3ffcf21b4e5f[] = {
  &s_aa5c23f54650f8ae,
};
static const uint16_t m_e73a3ffcf21b4e5f[] = {5, 0, 4, 2, 1, 3};
static const uint16_t i_e73a3ffcf21b4e5f[] = {0, 1, 2, 3, 4, 5};
const ::capnp::_::RawSchema s_e73a3ffcf21b4e5f = {
  0xe73a3ffcf21b4e5f, b_e73a3ffcf21b4e5f.words, 115, d_e73a3ffcf21b4e5f, m_e73a3ffcf21b4e5f,
  1, 6, i_e73a3ffcf21b4e5f, nullptr, nullptr, { &s_e73a3ffcf21b4e5f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9e138889be22cc5e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     94, 204,  34, 190, 137, 136,  19, 158,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 105, 109,
    112, 111, 114, 116,  68,  97, 116,  97,
     36,  80,  97, 114,  97, 109, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9e138889be22cc5e = b_9e138889be22cc5e.words;
#if !CAPNP_LITE
static const uint16_t m_9e138889be22cc5e[] = {0};
static const uint16_t i_9e138889be22cc5e[] = {0};
const ::capnp::_::RawSchema s_9e138889be22cc5e = {
  0x9e138889be22cc5e, b_9e138889be22cc5e.words, 34, nullptr, m_9e138889be22cc5e,
  0, 1, i_9e138889be22cc5e, nullptr, nullptr, { &s_9e138889be22cc5e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_a914844d7351c9ee = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    238, 201,  81, 115,  77, 132,  20, 169,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 105, 109,
    112, 111, 114, 116,  68,  97, 116,  97,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a914844d7351c9ee = b_a914844d7351c9ee.words;
#if !CAPNP_LITE
static const uint16_t m_a914844d7351c9ee[] = {0};
static const uint16_t i_a914844d7351c9ee[] = {0};
const ::capnp::_::RawSchema s_a914844d7351c9ee = {
  0xa914844d7351c9ee, b_a914844d7351c9ee.words, 35, nullptr, m_a914844d7351c9ee,
  0, 1, i_a914844d7351c9ee, nullptr, nullptr, { &s_a914844d7351c9ee, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_93fc14178e630994 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,   9,  99, 142,  23,  20, 252, 147,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 101, 120,
    112, 111, 114, 116,  68,  97, 116,  97,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_93fc14178e630994 = b_93fc14178e630994.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_93fc14178e630994 = {
  0x93fc14178e630994, b_93fc14178e630994.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_93fc14178e630994, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_ffe4319ac401d166 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102, 209,   1, 196, 154,  49, 228, 255,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 101, 120,
    112, 111, 114, 116,  68,  97, 116,  97,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ffe4319ac401d166 = b_ffe4319ac401d166.words;
#if !CAPNP_LITE
static const uint16_t m_ffe4319ac401d166[] = {0};
static const uint16_t i_ffe4319ac401d166[] = {0};
const ::capnp::_::RawSchema s_ffe4319ac401d166 = {
  0xffe4319ac401d166, b_ffe4319ac401d166.words, 35, nullptr, m_ffe4319ac401d166,
  0, 1, i_ffe4319ac401d166, nullptr, nullptr, { &s_ffe4319ac401d166, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_dbf70a288c6933b1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177,  51, 105, 140,  40,  10, 247, 219,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 108, 105,
    115, 116,  79,  98, 106, 101,  99, 116,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dbf70a288c6933b1 = b_dbf70a288c6933b1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dbf70a288c6933b1 = {
  0xdbf70a288c6933b1, b_dbf70a288c6933b1.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dbf70a288c6933b1, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_a028d3ba03083872 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    114,  56,   8,   3, 186, 211,  40, 160,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 108, 105,
    115, 116,  79,  98, 106, 101,  99, 116,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    174, 248,  80,  70, 245,  35,  92, 170,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a028d3ba03083872 = b_a028d3ba03083872.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a028d3ba03083872[] = {
  &s_aa5c23f54650f8ae,
};
static const uint16_t m_a028d3ba03083872[] = {0};
static const uint16_t i_a028d3ba03083872[] = {0};
const ::capnp::_::RawSchema s_a028d3ba03083872 = {
  0xa028d3ba03083872, b_a028d3ba03083872.words, 39, d_a028d3ba03083872, m_a028d3ba03083872,
  1, 1, i_a028d3ba03083872, nullptr, nullptr, { &s_a028d3ba03083872, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_c4161d5db43ad669 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    105, 214,  58, 180,  93,  29,  22, 196,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 103, 101,
    116,  79,  98, 106, 101,  99, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c4161d5db43ad669 = b_c4161d5db43ad669.words;
#if !CAPNP_LITE
static const uint16_t m_c4161d5db43ad669[] = {0};
static const uint16_t i_c4161d5db43ad669[] = {0};
const ::capnp::_::RawSchema s_c4161d5db43ad669 = {
  0xc4161d5db43ad669, b_c4161d5db43ad669.words, 34, nullptr, m_c4161d5db43ad669,
  0, 1, i_c4161d5db43ad669, nullptr, nullptr, { &s_c4161d5db43ad669, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9bc1d764a970b846 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     70, 184, 112, 169, 100, 215, 193, 155,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 103, 101,
    116,  79,  98, 106, 101,  99, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    174, 248,  80,  70, 245,  35,  92, 170,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9bc1d764a970b846 = b_9bc1d764a970b846.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9bc1d764a970b846[] = {
  &s_aa5c23f54650f8ae,
};
static const uint16_t m_9bc1d764a970b846[] = {0};
static const uint16_t i_9bc1d764a970b846[] = {0};
const ::capnp::_::RawSchema s_9bc1d764a970b846 = {
  0x9bc1d764a970b846, b_9bc1d764a970b846.words, 34, d_9bc1d764a970b846, m_9bc1d764a970b846,
  1, 1, i_9bc1d764a970b846, nullptr, nullptr, { &s_9bc1d764a970b846, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fde99170b27ac5ce = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    206, 197, 122, 178, 112, 145, 233, 253,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  97, 100,
    100,  79,  98, 106, 101,  99, 116,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    174, 248,  80,  70, 245,  35,  92, 170,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fde99170b27ac5ce = b_fde99170b27ac5ce.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fde99170b27ac5ce[] = {
  &s_aa5c23f54650f8ae,
};
static const uint16_t m_fde99170b27ac5ce[] = {0};
static const uint16_t i_fde99170b27ac5ce[] = {0};
const ::capnp::_::RawSchema s_fde99170b27ac5ce = {
  0xfde99170b27ac5ce, b_fde99170b27ac5ce.words, 34, d_fde99170b27ac5ce, m_fde99170b27ac5ce,
  1, 1, i_fde99170b27ac5ce, nullptr, nullptr, { &s_fde99170b27ac5ce, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fbd938c95f64b7bf = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    191, 183, 100,  95, 201,  56, 217, 251,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  97, 100,
    100,  79,  98, 106, 101,  99, 116,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbd938c95f64b7bf = b_fbd938c95f64b7bf.words;
#if !CAPNP_LITE
static const uint16_t m_fbd938c95f64b7bf[] = {0};
static const uint16_t i_fbd938c95f64b7bf[] = {0};
const ::capnp::_::RawSchema s_fbd938c95f64b7bf = {
  0xfbd938c95f64b7bf, b_fbd938c95f64b7bf.words, 34, nullptr, m_fbd938c95f64b7bf,
  0, 1, i_fbd938c95f64b7bf, nullptr, nullptr, { &s_fbd938c95f64b7bf, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c31c71f8d67b827b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    123, 130, 123, 214, 248, 113,  28, 195,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 114, 101,
    109, 111, 118, 101,  79,  98, 106, 101,
     99, 116,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    107, 101, 121,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c31c71f8d67b827b = b_c31c71f8d67b827b.words;
#if !CAPNP_LITE
static const uint16_t m_c31c71f8d67b827b[] = {0};
static const uint16_t i_c31c71f8d67b827b[] = {0};
const ::capnp::_::RawSchema s_c31c71f8d67b827b = {
  0xc31c71f8d67b827b, b_c31c71f8d67b827b.words, 35, nullptr, m_c31c71f8d67b827b,
  0, 1, i_c31c71f8d67b827b, nullptr, nullptr, { &s_c31c71f8d67b827b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_eb6f27dfc29bffad = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    173, 255, 155, 194, 223,  39, 111, 235,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46, 114, 101,
    109, 111, 118, 101,  79,  98, 106, 101,
     99, 116,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb6f27dfc29bffad = b_eb6f27dfc29bffad.words;
#if !CAPNP_LITE
static const uint16_t m_eb6f27dfc29bffad[] = {0};
static const uint16_t i_eb6f27dfc29bffad[] = {0};
const ::capnp::_::RawSchema s_eb6f27dfc29bffad = {
  0xeb6f27dfc29bffad, b_eb6f27dfc29bffad.words, 35, nullptr, m_eb6f27dfc29bffad,
  0, 1, i_eb6f27dfc29bffad, nullptr, nullptr, { &s_eb6f27dfc29bffad, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_fbef00fded9c8312 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 131, 156, 237, 253,   0, 239, 251,
     30,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  99, 108,
    101,  97, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fbef00fded9c8312 = b_fbef00fded9c8312.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fbef00fded9c8312 = {
  0xfbef00fded9c8312, b_fbef00fded9c8312.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fbef00fded9c8312, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_883b57737fba9e54 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 158, 186, 127, 115,  87,  59, 136,
     30,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  67, 111, 110, 116,
     97, 105, 110, 101, 114,  46,  99, 108,
    101,  97, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_883b57737fba9e54 = b_883b57737fba9e54.words;
#if !CAPNP_LITE
static const uint16_t m_883b57737fba9e54[] = {0};
static const uint16_t i_883b57737fba9e54[] = {0};
const ::capnp::_::RawSchema s_883b57737fba9e54 = {
  0x883b57737fba9e54, b_883b57737fba9e54.words, 34, nullptr, m_883b57737fba9e54,
  0, 1, i_883b57737fba9e54, nullptr, nullptr, { &s_883b57737fba9e54, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_f32349bf3a9997ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 151, 153,  58, 191,  73,  35, 243,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 110, 101, 119,  67,
    111, 110, 116,  97, 105, 110, 101, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f32349bf3a9997ac = b_f32349bf3a9997ac.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f32349bf3a9997ac[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_f32349bf3a9997ac[] = {0};
static const uint16_t i_f32349bf3a9997ac[] = {0};
const ::capnp::_::RawSchema s_f32349bf3a9997ac = {
  0xf32349bf3a9997ac, b_f32349bf3a9997ac.words, 35, d_f32349bf3a9997ac, m_f32349bf3a9997ac,
  1, 1, i_f32349bf3a9997ac, nullptr, nullptr, { &s_f32349bf3a9997ac, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_f517bec79f8d2744 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     68,  39, 141, 159, 199, 190,  23, 245,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  99, 111, 110, 116,
     97, 105, 110, 101, 114,  87, 105, 116,
    104,  73, 100,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f517bec79f8d2744 = b_f517bec79f8d2744.words;
#if !CAPNP_LITE
static const uint16_t m_f517bec79f8d2744[] = {0};
static const uint16_t i_f517bec79f8d2744[] = {0};
const ::capnp::_::RawSchema s_f517bec79f8d2744 = {
  0xf517bec79f8d2744, b_f517bec79f8d2744.words, 34, nullptr, m_f517bec79f8d2744,
  0, 1, i_f517bec79f8d2744, nullptr, nullptr, { &s_f517bec79f8d2744, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_b2af26aeda5445e5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    229,  69,  84, 218, 174,  38, 175, 178,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46,  99, 111, 110, 116,
     97, 105, 110, 101, 114,  87, 105, 116,
    104,  73, 100,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2af26aeda5445e5 = b_b2af26aeda5445e5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2af26aeda5445e5[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_b2af26aeda5445e5[] = {0};
static const uint16_t i_b2af26aeda5445e5[] = {0};
const ::capnp::_::RawSchema s_b2af26aeda5445e5 = {
  0xb2af26aeda5445e5, b_b2af26aeda5445e5.words, 35, d_b2af26aeda5445e5, m_b2af26aeda5445e5,
  1, 1, i_b2af26aeda5445e5, nullptr, nullptr, { &s_b2af26aeda5445e5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a466e92166fcce6e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    110, 206, 252, 102,  33, 233, 102, 164,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 108, 105, 115, 116,
     67, 111, 110, 116,  97, 105, 110, 101,
    114, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a466e92166fcce6e = b_a466e92166fcce6e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a466e92166fcce6e = {
  0xa466e92166fcce6e, b_a466e92166fcce6e.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a466e92166fcce6e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_f82426685da256f9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    249,  86, 162,  93, 104,  38,  36, 248,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 108, 105, 115, 116,
     67, 111, 110, 116,  97, 105, 110, 101,
    114, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 110, 116,  97, 105, 110, 101,
    114, 115,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     98, 174, 103,  85, 244,  49, 129, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f82426685da256f9 = b_f82426685da256f9.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f82426685da256f9[] = {
  &s_878131f45567ae62,
};
static const uint16_t m_f82426685da256f9[] = {0};
static const uint16_t i_f82426685da256f9[] = {0};
const ::capnp::_::RawSchema s_f82426685da256f9 = {
  0xf82426685da256f9, b_f82426685da256f9.words, 39, d_f82426685da256f9, m_f82426685da256f9,
  1, 1, i_f82426685da256f9, nullptr, nullptr, { &s_f82426685da256f9, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bfbe4f9e7fb62452 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     82,  36, 182, 127, 158,  79, 190, 191,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 114, 101, 109, 111,
    118, 101,  67, 111, 110, 116,  97, 105,
    110, 101, 114,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bfbe4f9e7fb62452 = b_bfbe4f9e7fb62452.words;
#if !CAPNP_LITE
static const uint16_t m_bfbe4f9e7fb62452[] = {0};
static const uint16_t i_bfbe4f9e7fb62452[] = {0};
const ::capnp::_::RawSchema s_bfbe4f9e7fb62452 = {
  0xbfbe4f9e7fb62452, b_bfbe4f9e7fb62452.words, 34, nullptr, m_bfbe4f9e7fb62452,
  0, 1, i_bfbe4f9e7fb62452, nullptr, nullptr, { &s_bfbe4f9e7fb62452, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_aa0460382685000e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     14,   0, 133,  38,  56,  96,   4, 170,
     20,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 111, 114,  97, 103, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 114, 101,  46, 114, 101, 109, 111,
    118, 101,  67, 111, 110, 116,  97, 105,
    110, 101, 114,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aa0460382685000e = b_aa0460382685000e.words;
#if !CAPNP_LITE
static const uint16_t m_aa0460382685000e[] = {0};
static const uint16_t i_aa0460382685000e[] = {0};
const ::capnp::_::RawSchema s_aa0460382685000e = {
  0xaa0460382685000e, b_aa0460382685000e.words, 34, nullptr, m_aa0460382685000e,
  0, 1, i_aa0460382685000e, nullptr, nullptr, { &s_aa0460382685000e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace storage {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::IdInformation,  ::mas::schema::storage::Store::NewContainerResults>
Store::Client::newContainerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::IdInformation,  ::mas::schema::storage::Store::NewContainerResults>(
      0xe69f958aa2386f06ull, 0, sizeHint);
}
::kj::Promise<void> Store::Server::newContainer(NewContainerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "newContainer",
      0xe69f958aa2386f06ull, 0);
}
::capnp::Request< ::mas::schema::storage::Store::ContainerWithIdParams,  ::mas::schema::storage::Store::ContainerWithIdResults>
Store::Client::containerWithIdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::ContainerWithIdParams,  ::mas::schema::storage::Store::ContainerWithIdResults>(
      0xe69f958aa2386f06ull, 1, sizeHint);
}
::kj::Promise<void> Store::Server::containerWithId(ContainerWithIdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "containerWithId",
      0xe69f958aa2386f06ull, 1);
}
::capnp::Request< ::mas::schema::storage::Store::ListContainersParams,  ::mas::schema::storage::Store::ListContainersResults>
Store::Client::listContainersRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::ListContainersParams,  ::mas::schema::storage::Store::ListContainersResults>(
      0xe69f958aa2386f06ull, 2, sizeHint);
}
::kj::Promise<void> Store::Server::listContainers(ListContainersContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "listContainers",
      0xe69f958aa2386f06ull, 2);
}
::capnp::Request< ::mas::schema::storage::Store::RemoveContainerParams,  ::mas::schema::storage::Store::RemoveContainerResults>
Store::Client::removeContainerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::RemoveContainerParams,  ::mas::schema::storage::Store::RemoveContainerResults>(
      0xe69f958aa2386f06ull, 3, sizeHint);
}
::kj::Promise<void> Store::Server::removeContainer(RemoveContainerContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store", "removeContainer",
      0xe69f958aa2386f06ull, 3);
}
::capnp::Capability::Server::DispatchCallResult Store::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe69f958aa2386f06ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("storage.capnp:Store", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Store::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        newContainer(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::IdInformation,  ::mas::schema::storage::Store::NewContainerResults>(context)),
        false
      };
    case 1:
      return {
        containerWithId(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::ContainerWithIdParams,  ::mas::schema::storage::Store::ContainerWithIdResults>(context)),
        false
      };
    case 2:
      return {
        listContainers(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::ListContainersParams,  ::mas::schema::storage::Store::ListContainersResults>(context)),
        false
      };
    case 3:
      return {
        removeContainer(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::RemoveContainerParams,  ::mas::schema::storage::Store::RemoveContainerResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "storage.capnp:Store",
          0xe69f958aa2386f06ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Store
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::storage::Store::Container::ImportDataParams,  ::mas::schema::storage::Store::Container::ImportDataResults>
Store::Container::Client::importDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ImportDataParams,  ::mas::schema::storage::Store::Container::ImportDataResults>(
      0x878131f45567ae62ull, 0, sizeHint);
}
::kj::Promise<void> Store::Container::Server::importData(ImportDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "importData",
      0x878131f45567ae62ull, 0);
}
::capnp::Request< ::mas::schema::storage::Store::Container::ExportDataParams,  ::mas::schema::storage::Store::Container::ExportDataResults>
Store::Container::Client::exportDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ExportDataParams,  ::mas::schema::storage::Store::Container::ExportDataResults>(
      0x878131f45567ae62ull, 1, sizeHint);
}
::kj::Promise<void> Store::Container::Server::exportData(ExportDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "exportData",
      0x878131f45567ae62ull, 1);
}
::capnp::Request< ::mas::schema::storage::Store::Container::ListObjectsParams,  ::mas::schema::storage::Store::Container::ListObjectsResults>
Store::Container::Client::listObjectsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ListObjectsParams,  ::mas::schema::storage::Store::Container::ListObjectsResults>(
      0x878131f45567ae62ull, 2, sizeHint);
}
::kj::Promise<void> Store::Container::Server::listObjects(ListObjectsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "listObjects",
      0x878131f45567ae62ull, 2);
}
::capnp::Request< ::mas::schema::storage::Store::Container::GetObjectParams,  ::mas::schema::storage::Store::Container::GetObjectResults>
Store::Container::Client::getObjectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::GetObjectParams,  ::mas::schema::storage::Store::Container::GetObjectResults>(
      0x878131f45567ae62ull, 3, sizeHint);
}
::kj::Promise<void> Store::Container::Server::getObject(GetObjectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "getObject",
      0x878131f45567ae62ull, 3);
}
::capnp::Request< ::mas::schema::storage::Store::Container::AddObjectParams,  ::mas::schema::storage::Store::Container::AddObjectResults>
Store::Container::Client::addObjectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::AddObjectParams,  ::mas::schema::storage::Store::Container::AddObjectResults>(
      0x878131f45567ae62ull, 4, sizeHint);
}
::kj::Promise<void> Store::Container::Server::addObject(AddObjectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "addObject",
      0x878131f45567ae62ull, 4);
}
::capnp::Request< ::mas::schema::storage::Store::Container::RemoveObjectParams,  ::mas::schema::storage::Store::Container::RemoveObjectResults>
Store::Container::Client::removeObjectRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::RemoveObjectParams,  ::mas::schema::storage::Store::Container::RemoveObjectResults>(
      0x878131f45567ae62ull, 5, sizeHint);
}
::kj::Promise<void> Store::Container::Server::removeObject(RemoveObjectContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "removeObject",
      0x878131f45567ae62ull, 5);
}
::capnp::Request< ::mas::schema::storage::Store::Container::ClearParams,  ::mas::schema::storage::Store::Container::ClearResults>
Store::Container::Client::clearRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::storage::Store::Container::ClearParams,  ::mas::schema::storage::Store::Container::ClearResults>(
      0x878131f45567ae62ull, 6, sizeHint);
}
::kj::Promise<void> Store::Container::Server::clear(ClearContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "storage.capnp:Store.Container", "clear",
      0x878131f45567ae62ull, 6);
}
::capnp::Capability::Server::DispatchCallResult Store::Container::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x878131f45567ae62ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("storage.capnp:Store.Container", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Store::Container::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        importData(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ImportDataParams,  ::mas::schema::storage::Store::Container::ImportDataResults>(context)),
        false
      };
    case 1:
      return {
        exportData(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ExportDataParams,  ::mas::schema::storage::Store::Container::ExportDataResults>(context)),
        false
      };
    case 2:
      return {
        listObjects(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ListObjectsParams,  ::mas::schema::storage::Store::Container::ListObjectsResults>(context)),
        false
      };
    case 3:
      return {
        getObject(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::GetObjectParams,  ::mas::schema::storage::Store::Container::GetObjectResults>(context)),
        false
      };
    case 4:
      return {
        addObject(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::AddObjectParams,  ::mas::schema::storage::Store::Container::AddObjectResults>(context)),
        false
      };
    case 5:
      return {
        removeObject(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::RemoveObjectParams,  ::mas::schema::storage::Store::Container::RemoveObjectResults>(context)),
        false
      };
    case 6:
      return {
        clear(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::storage::Store::Container::ClearParams,  ::mas::schema::storage::Store::Container::ClearResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "storage.capnp:Store.Container",
          0x878131f45567ae62ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Store::Container
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Object
constexpr uint16_t Store::Container::Object::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Object::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Object::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Object::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::Object::Value
constexpr uint16_t Store::Container::Object::Value::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::Object::Value::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::Object::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::Object::Value::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ImportDataParams
constexpr uint16_t Store::Container::ImportDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ImportDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ImportDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ImportDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ImportDataResults
constexpr uint16_t Store::Container::ImportDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ImportDataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ImportDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ImportDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ExportDataParams
constexpr uint16_t Store::Container::ExportDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ExportDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ExportDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ExportDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ExportDataResults
constexpr uint16_t Store::Container::ExportDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ExportDataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ExportDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ExportDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ListObjectsParams
constexpr uint16_t Store::Container::ListObjectsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ListObjectsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ListObjectsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ListObjectsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ListObjectsResults
constexpr uint16_t Store::Container::ListObjectsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ListObjectsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ListObjectsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ListObjectsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::GetObjectParams
constexpr uint16_t Store::Container::GetObjectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::GetObjectParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::GetObjectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::GetObjectParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::GetObjectResults
constexpr uint16_t Store::Container::GetObjectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::GetObjectResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::GetObjectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::GetObjectResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::AddObjectParams
constexpr uint16_t Store::Container::AddObjectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::AddObjectParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::AddObjectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::AddObjectParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::AddObjectResults
constexpr uint16_t Store::Container::AddObjectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::AddObjectResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::AddObjectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::AddObjectResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::RemoveObjectParams
constexpr uint16_t Store::Container::RemoveObjectParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::RemoveObjectParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::RemoveObjectParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::RemoveObjectParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::RemoveObjectResults
constexpr uint16_t Store::Container::RemoveObjectResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::RemoveObjectResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::RemoveObjectResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::RemoveObjectResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ClearParams
constexpr uint16_t Store::Container::ClearParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ClearParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ClearParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ClearParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::Container::ClearResults
constexpr uint16_t Store::Container::ClearResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::Container::ClearResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::Container::ClearResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::Container::ClearResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::NewContainerResults
constexpr uint16_t Store::NewContainerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::NewContainerResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::NewContainerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::NewContainerResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ContainerWithIdParams
constexpr uint16_t Store::ContainerWithIdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ContainerWithIdParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ContainerWithIdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ContainerWithIdParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ContainerWithIdResults
constexpr uint16_t Store::ContainerWithIdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ContainerWithIdResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ContainerWithIdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ContainerWithIdResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ListContainersParams
constexpr uint16_t Store::ListContainersParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ListContainersParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ListContainersParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ListContainersParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::ListContainersResults
constexpr uint16_t Store::ListContainersResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::ListContainersResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::ListContainersResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::ListContainersResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::RemoveContainerParams
constexpr uint16_t Store::RemoveContainerParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::RemoveContainerParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::RemoveContainerParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::RemoveContainerParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Store::RemoveContainerResults
constexpr uint16_t Store::RemoveContainerResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Store::RemoveContainerResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Store::RemoveContainerResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Store::RemoveContainerResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

