// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: config.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 10000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(860d660620aefcda);
CAPNP_DECLARE_SCHEMA(8a931778446b73d8);
CAPNP_DECLARE_SCHEMA(b0cc157dd72bb20b);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace config {

template <typename C = ::capnp::AnyPointer>
struct Service {
  Service() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct CreateConfigParams;
  struct CreateConfigResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(860d660620aefcda)
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, C>::brand(); }
  };
  #endif  // !CAPNP_LITE
};

template <typename C>
struct Service<C>::CreateConfigParams {
  CreateConfigParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8a931778446b73d8, 0, 0)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, C>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename C>
struct Service<C>::CreateConfigResults {
  CreateConfigResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b0cc157dd72bb20b, 1, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, C>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
template <typename C>
class Service<C>::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Service Calls;
  typedef Service Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  template <typename C2 = ::capnp::AnyPointer>
  typename Service<C2>::Client asGeneric() {
    return castAs<Service<C2>>();
  }

  CAPNP_AUTO_IF_MSVC(::capnp::Request<typename  ::mas::schema::config::Service<C>::CreateConfigParams, typename  ::mas::schema::config::Service<C>::CreateConfigResults>) createConfigRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

template <typename C>
class Service<C>::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Service Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef typename  ::mas::schema::config::Service<C>::CreateConfigParams CreateConfigParams;
  typedef typename  ::mas::schema::config::Service<C>::CreateConfigResults CreateConfigResults;
  typedef ::capnp::CallContext<CreateConfigParams, CreateConfigResults> CreateConfigContext;
  virtual ::kj::Promise<void> createConfig(CreateConfigContext context);

  inline typename  ::mas::schema::config::Service<C>::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::mas::schema::config::Service<C>>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename C>
class Service<C>::CreateConfigParams::Reader {
public:
  typedef CreateConfigParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename C2 = ::capnp::AnyPointer>
  typename Service<C2>::CreateConfigParams::Reader asServiceGeneric() {
    return typename Service<C2>::CreateConfigParams::Reader(_reader);
  }

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename C>
class Service<C>::CreateConfigParams::Builder {
public:
  typedef CreateConfigParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename C2 = ::capnp::AnyPointer>
  typename Service<C2>::CreateConfigParams::Builder asServiceGeneric() {
    return typename Service<C2>::CreateConfigParams::Builder(_builder);
  }

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename C>
class Service<C>::CreateConfigParams::Pipeline {
public:
  typedef CreateConfigParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename C>
class Service<C>::CreateConfigResults::Reader {
public:
  typedef CreateConfigResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename C2 = ::capnp::AnyPointer>
  typename Service<C2>::CreateConfigResults::Reader asServiceGeneric() {
    return typename Service<C2>::CreateConfigResults::Reader(_reader);
  }

  inline bool hasConfig() const;
  inline  ::capnp::ReaderFor<C> getConfig() const;

  inline bool getNoFurtherConfigs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename C>
class Service<C>::CreateConfigResults::Builder {
public:
  typedef CreateConfigResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename C2 = ::capnp::AnyPointer>
  typename Service<C2>::CreateConfigResults::Builder asServiceGeneric() {
    return typename Service<C2>::CreateConfigResults::Builder(_builder);
  }

  inline bool hasConfig();
  inline  ::capnp::BuilderFor<C> getConfig();
  inline void setConfig( ::capnp::ReaderFor<C> value);
  inline  ::capnp::BuilderFor<C> initConfig();
  inline  ::capnp::BuilderFor<C> initConfig(unsigned int size);
  inline void adoptConfig(::capnp::Orphan<C>&& value);
  inline ::capnp::Orphan<C> disownConfig();

  inline bool getNoFurtherConfigs();
  inline void setNoFurtherConfigs(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename C>
class Service<C>::CreateConfigResults::Pipeline {
public:
  typedef CreateConfigResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<C> getConfig();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
template <typename C>
inline Service<C>::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
template <typename C>
inline Service<C>::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename C>
template <typename _t, typename>
inline Service<C>::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename C>
template <typename _t, typename>
inline Service<C>::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
template <typename C>
inline Service<C>::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
template <typename C>
inline typename  ::mas::schema::config::Service<C>::Client& Service<C>::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
template <typename C>
inline typename  ::mas::schema::config::Service<C>::Client& Service<C>::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
// Service<C>::CreateConfigParams
template <typename C>
constexpr uint16_t Service<C>::CreateConfigParams::_capnpPrivate::dataWordSize;
template <typename C>
constexpr uint16_t Service<C>::CreateConfigParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename C>
constexpr ::capnp::Kind Service<C>::CreateConfigParams::_capnpPrivate::kind;
template <typename C>
constexpr ::capnp::_::RawSchema const* Service<C>::CreateConfigParams::_capnpPrivate::schema;
template <typename C>
const ::capnp::_::RawBrandedSchema::Scope Service<C>::CreateConfigParams::_capnpPrivate::brandScopes[] = {
  { 0x860d660620aefcda, brandBindings + 0, 1, false},
};
template <typename C>
const ::capnp::_::RawBrandedSchema::Binding Service<C>::CreateConfigParams::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<C>(),
};
template <typename C>
const ::capnp::_::RawBrandedSchema Service<C>::CreateConfigParams::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_8a931778446b73d8, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

template <typename C>
inline bool Service<C>::CreateConfigResults::Reader::hasConfig() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename C>
inline bool Service<C>::CreateConfigResults::Builder::hasConfig() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename C>
inline  ::capnp::ReaderFor<C> Service<C>::CreateConfigResults::Reader::getConfig() const {
  return ::capnp::_::PointerHelpers<C>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename C>
inline  ::capnp::BuilderFor<C> Service<C>::CreateConfigResults::Builder::getConfig() {
  return ::capnp::_::PointerHelpers<C>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename C>
inline  ::capnp::PipelineFor<C> Service<C>::CreateConfigResults::Pipeline::getConfig() {
  return  ::capnp::PipelineFor<C>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename C>
inline void Service<C>::CreateConfigResults::Builder::setConfig( ::capnp::ReaderFor<C> value) {
  ::capnp::_::PointerHelpers<C>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename C>
inline  ::capnp::BuilderFor<C> Service<C>::CreateConfigResults::Builder::initConfig() {
  return ::capnp::_::PointerHelpers<C>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename C>
inline  ::capnp::BuilderFor<C> Service<C>::CreateConfigResults::Builder::initConfig(unsigned int size) {
  return ::capnp::_::PointerHelpers<C>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename C>
inline void Service<C>::CreateConfigResults::Builder::adoptConfig(
    ::capnp::Orphan<C>&& value) {
  ::capnp::_::PointerHelpers<C>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename C>
inline ::capnp::Orphan<C> Service<C>::CreateConfigResults::Builder::disownConfig() {
  return ::capnp::_::PointerHelpers<C>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename C>
inline bool Service<C>::CreateConfigResults::Reader::getNoFurtherConfigs() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

template <typename C>
inline bool Service<C>::CreateConfigResults::Builder::getNoFurtherConfigs() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
template <typename C>
inline void Service<C>::CreateConfigResults::Builder::setNoFurtherConfigs(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

// Service<C>::CreateConfigResults
template <typename C>
constexpr uint16_t Service<C>::CreateConfigResults::_capnpPrivate::dataWordSize;
template <typename C>
constexpr uint16_t Service<C>::CreateConfigResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename C>
constexpr ::capnp::Kind Service<C>::CreateConfigResults::_capnpPrivate::kind;
template <typename C>
constexpr ::capnp::_::RawSchema const* Service<C>::CreateConfigResults::_capnpPrivate::schema;
template <typename C>
const ::capnp::_::RawBrandedSchema::Scope Service<C>::CreateConfigResults::_capnpPrivate::brandScopes[] = {
  { 0x860d660620aefcda, brandBindings + 0, 1, false},
};
template <typename C>
const ::capnp::_::RawBrandedSchema::Binding Service<C>::CreateConfigResults::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<C>(),
};
template <typename C>
const ::capnp::_::RawBrandedSchema Service<C>::CreateConfigResults::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b0cc157dd72bb20b, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
template <typename C>
CAPNP_AUTO_IF_MSVC(::capnp::Request<typename  ::mas::schema::config::Service<C>::CreateConfigParams, typename  ::mas::schema::config::Service<C>::CreateConfigResults>)
Service<C>::Client::createConfigRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall<typename  ::mas::schema::config::Service<C>::CreateConfigParams, typename  ::mas::schema::config::Service<C>::CreateConfigResults>(
      0x860d660620aefcdaull, 0, sizeHint);
}
template <typename C>
::kj::Promise<void> Service<C>::Server::createConfig(CreateConfigContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "config.capnp:Service", "createConfig",
      0x860d660620aefcdaull, 0);
}
template <typename C>
::capnp::Capability::Server::DispatchCallResult Service<C>::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x860d660620aefcdaull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("config.capnp:Service", interfaceId);
  }
}
template <typename C>
::capnp::Capability::Server::DispatchCallResult Service<C>::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        createConfig(::capnp::Capability::Server::internalGetTypedContext<
            typename  ::mas::schema::config::Service<C>::CreateConfigParams, typename  ::mas::schema::config::Service<C>::CreateConfigResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "config.capnp:Service",
          0x860d660620aefcdaull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Service<C>
#if !CAPNP_LITE
template <typename C>
constexpr ::capnp::Kind Service<C>::_capnpPrivate::kind;
template <typename C>
constexpr ::capnp::_::RawSchema const* Service<C>::_capnpPrivate::schema;
template <typename C>
const ::capnp::_::RawBrandedSchema::Scope Service<C>::_capnpPrivate::brandScopes[] = {
  { 0x860d660620aefcda, brandBindings + 0, 1, false},
};
template <typename C>
const ::capnp::_::RawBrandedSchema::Binding Service<C>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<C>(),
};
template <typename C>
const ::capnp::_::RawBrandedSchema::Dependency Service<C>::_capnpPrivate::brandDependencies[] = {
  { 33554432,  ::mas::schema::config::Service<C>::CreateConfigParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::config::Service<C>::CreateConfigResults::_capnpPrivate::brand() },
};
template <typename C>
const ::capnp::_::RawBrandedSchema Service<C>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_860d660620aefcda, brandScopes, brandDependencies,
  1, 2, nullptr
};
#endif  // !CAPNP_LITE

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

