// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: crop.capnp

#include "crop.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<286> b_dd81b0520864e2b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180, 226, 100,   8,  82, 176, 129, 221,
     11,   0,   0,   0,   2,   0,   0,   0,
    114, 249, 157, 150, 225,  36, 138, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  23,   5,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 117, 108, 116, 105,
    118,  97, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
    216,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   2,   0,   0, 202,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    133,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    125,   2,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    121,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    117,   2,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
    113,   2,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    109,   2,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
    105,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
    101,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     97,   2,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
     93,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
     85,   2,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
     77,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,   0,   0,   0,   0,
     73,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
     69,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     65,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     61,   2,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     57,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
     49,   2,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     19,   0,   0,   0,   0,   0,   0,   0,
     45,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     20,   0,   0,   0,   0,   0,   0,   0,
     41,   2,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   0,   0,   0,   0,
     37,   2,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     22,   0,   0,   0,   0,   0,   0,   0,
     37,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     23,   0,   0,   0,   0,   0,   0,   0,
     33,   2,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     24,   0,   0,   0,   0,   0,   0,   0,
     29,   2,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   0,   0,   0,   0,
     25,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     26,   0,   0,   0,   0,   0,   0,   0,
     21,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     27,   0,   0,   0,   0,   0,   0,   0,
     17,   2,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   0,   0,   0,   0,
      9,   2,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   0,   0,   0,   0,
      5,   2,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     30,   0,   0,   0,   0,   0,   0,   0,
      1,   2,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     31,   0,   0,   0,   0,   0,   0,   0,
    253,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     32,   0,   0,   0,   0,   0,   0,   0,
    249,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   0,   0,   0,   0,
    245,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     34,   0,   0,   0,   0,   0,   0,   0,
    241,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     35,   0,   0,   0,   0,   0,   0,   0,
    237,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   0,   0,   0,   0,
    233,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,   0,   0,   0,   0,
    229,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     38,   0,   0,   0,   0,   0,   0,   0,
    225,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     39,   0,   0,   0,   0,   0,   0,   0,
    221,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   0,   0,   0,   0,
    217,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   0,   0,   0,   0,
    213,   1,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     42,   0,   0,   0,   0,   0,   0,   0,
    209,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     43,   0,   0,   0,   0,   0,   0,   0,
    205,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   0,   0,
    201,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,   0,   0,   0,   0,
    197,   1,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     46,   0,   0,   0,   0,   0,   0,   0,
    193,   1,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     47,   0,   0,   0,   0,   0,   0,   0,
    193,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   0,   0,   0,   0,
    189,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   0,   0,   0,   0,
    185,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     50,   0,   0,   0,   0,   0,   0,   0,
    181,   1,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     51,   0,   0,   0,   0,   0,   0,   0,
    177,   1,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   0,   0,   0,   0,
    173,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   0,   0,   0,   0,
    169,   1,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 108, 102,  97, 108, 102,  97,  67,
    108, 111, 118, 101, 114, 103, 114,  97,
    115, 115,  76, 101, 121,  77, 105, 120,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 108, 102,  97, 108, 102,  97,   0,
     98,  97,  99, 104,  97, 114, 105,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
     98,  97, 114, 108, 101, 121,  83, 112,
    114, 105, 110, 103,   0,   0,   0,   0,
     98,  97, 114, 108, 101, 121,  87, 105,
    110, 116, 101, 114,   0,   0,   0,   0,
     99, 108, 111, 118, 101, 114,  71, 114,
     97, 115, 115,  76, 101, 121,   0,   0,
     99, 111, 116, 116, 111, 110,  66, 114,
     77, 105, 100,   0,   0,   0,   0,   0,
     99, 111, 116, 116, 111, 110,  76, 111,
    110, 103,   0,   0,   0,   0,   0,   0,
     99, 111, 116, 116, 111, 110,  77, 105,
    100,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 116, 116, 111, 110,  83, 104,
    111, 114, 116,   0,   0,   0,   0,   0,
    101, 105, 110, 107, 111, 114, 110,   0,
    101, 109, 109, 101, 114,   0,   0,   0,
    102, 105, 101, 108, 100,  80, 101,  97,
     50,  52,   0,   0,   0,   0,   0,   0,
    102, 105, 101, 108, 100,  80, 101,  97,
     50,  54,   0,   0,   0,   0,   0,   0,
    103, 114,  97, 112, 101, 118, 105, 110,
    101,   0,   0,   0,   0,   0,   0,   0,
    109,  97, 105, 122, 101,  71, 114,  97,
    105, 110,   0,   0,   0,   0,   0,   0,
    109,  97, 105, 122, 101,  83, 105, 108,
     97, 103, 101,   0,   0,   0,   0,   0,
    109, 117, 115, 116,  97, 114, 100,   0,
    111,  97, 116,  67, 111, 109, 112, 111,
    117, 110, 100,   0,   0,   0,   0,   0,
    111, 105, 108,  82,  97, 100, 105, 115,
    104,   0,   0,   0,   0,   0,   0,   0,
    112, 104,  97,  99, 101, 108, 105,  97,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 111, 116,  97, 116, 111,  77, 111,
    100, 101, 114,  97, 116, 101, 108, 121,
     69,  97, 114, 108, 121,   0,   0,   0,
    114,  97, 112, 101,  87, 105, 110, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
    114, 121, 101,  71, 114,  97, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 121, 101,  83, 105, 108,  97, 103,
    101,  87, 105, 110, 116, 101, 114,   0,
    114, 121, 101,  83, 112, 114, 105, 110,
    103,   0,   0,   0,   0,   0,   0,   0,
    114, 121, 101,  87, 105, 110, 116, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 114, 103, 104, 117, 109,   0,
    115, 111, 121,  98, 101,  97, 110,  48,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  48,
     48,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  48,
     48,  48,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  48,
     48,  48,  48,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  73,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  73,
     73,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  73,
     73,  73,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  73,
     86,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  86,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  86,
     73,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  86,
     73,  73,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  86,
     73,  73,  73,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  73,
     88,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  88,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  88,
     73,   0,   0,   0,   0,   0,   0,   0,
    115, 111, 121,  98, 101,  97, 110,  88,
     73,  73,   0,   0,   0,   0,   0,   0,
    115, 117, 100,  97, 110,  71, 114,  97,
    115, 115,   0,   0,   0,   0,   0,   0,
    115, 117, 103,  97, 114,  66, 101, 101,
    116,   0,   0,   0,   0,   0,   0,   0,
    115, 117, 103,  97, 114,  99,  97, 110,
    101,  84, 114,  97, 110, 115, 112, 108,
     97, 110, 116,   0,   0,   0,   0,   0,
    115, 117, 103,  97, 114,  99,  97, 110,
    101,  82,  97, 116, 111, 111, 110,   0,
    116, 111, 109,  97, 116, 111,  70, 105,
    101, 108, 100,   0,   0,   0,   0,   0,
    116, 114, 105, 116, 105,  99,  97, 108,
    101,  83, 112, 114, 105, 110, 103,   0,
    116, 114, 105, 116, 105,  99,  97, 108,
    101,  87, 105, 110, 116, 101, 114,   0,
    119, 104, 101,  97, 116,  68, 117, 114,
    117, 109,   0,   0,   0,   0,   0,   0,
    119, 104, 101,  97, 116,  83, 112, 114,
    105, 110, 103,   0,   0,   0,   0,   0,
    119, 104, 101,  97, 116,  87, 105, 110,
    116, 101, 114,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dd81b0520864e2b4 = b_dd81b0520864e2b4.words;
#if !CAPNP_LITE
static const uint16_t m_dd81b0520864e2b4[] = {1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53};
const ::capnp::_::RawSchema s_dd81b0520864e2b4 = {
  0xdd81b0520864e2b4, b_dd81b0520864e2b4.words, 286, nullptr, m_dd81b0520864e2b4,
  0, 54, nullptr, nullptr, nullptr, { &s_dd81b0520864e2b4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Cultivar_dd81b0520864e2b4, dd81b0520864e2b4);
static const ::capnp::_::AlignedData<41> b_e88d97a324bf5c84 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132,  92, 191,  36, 163, 151, 141, 232,
     11,   0,   0,   0,   3,   0,   0,   0,
    114, 249, 157, 150, 225,  36, 138, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 135,   0,   0,   0,
    109,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     91, 142,  60, 116,  14,   1, 110, 200,
    134,  84,  81,  45, 114, 252, 250, 228,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    122,  81, 180, 223,  23, 241, 110, 242,
    186, 148,  36, 165, 187,   4,  55, 191,
     29,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 108, 116, 105, 118,  97, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e88d97a324bf5c84 = b_e88d97a324bf5c84.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e88d97a324bf5c84[] = {
  &s_b2afd1cb599c48d5,
  &s_bf3704bba52494ba,
  &s_c86e010e743c8e5b,
  &s_e4fafc722d515486,
  &s_f26ef117dfb4517a,
};
static const uint16_t m_e88d97a324bf5c84[] = {1, 0};
const ::capnp::_::RawSchema s_e88d97a324bf5c84 = {
  0xe88d97a324bf5c84, b_e88d97a324bf5c84.words, 41, d_e88d97a324bf5c84, m_e88d97a324bf5c84,
  5, 2, nullptr, nullptr, nullptr, { &s_e88d97a324bf5c84, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_c86e010e743c8e5b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     91, 142,  60, 116,  14,   1, 110, 200,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c86e010e743c8e5b = b_c86e010e743c8e5b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c86e010e743c8e5b = {
  0xc86e010e743c8e5b, b_c86e010e743c8e5b.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c86e010e743c8e5b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e4fafc722d515486 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    134,  84,  81,  45, 114, 252, 250, 228,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4fafc722d515486 = b_e4fafc722d515486.words;
#if !CAPNP_LITE
static const uint16_t m_e4fafc722d515486[] = {0};
static const uint16_t i_e4fafc722d515486[] = {0};
const ::capnp::_::RawSchema s_e4fafc722d515486 = {
  0xe4fafc722d515486, b_e4fafc722d515486.words, 33, nullptr, m_e4fafc722d515486,
  0, 1, i_e4fafc722d515486, nullptr, nullptr, { &s_e4fafc722d515486, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_f26ef117dfb4517a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    122,  81, 180, 223,  23, 241, 110, 242,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
     99, 117, 108, 116, 105, 118,  97, 114,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_f26ef117dfb4517a = b_f26ef117dfb4517a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f26ef117dfb4517a = {
  0xf26ef117dfb4517a, b_f26ef117dfb4517a.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f26ef117dfb4517a, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_bf3704bba52494ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 148,  36, 165, 187,   4,  55, 191,
     16,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
     99, 117, 108, 116, 105, 118,  97, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 117, 108, 116,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    180, 226, 100,   8,  82, 176, 129, 221,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bf3704bba52494ba = b_bf3704bba52494ba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bf3704bba52494ba[] = {
  &s_dd81b0520864e2b4,
};
static const uint16_t m_bf3704bba52494ba[] = {0};
static const uint16_t i_bf3704bba52494ba[] = {0};
const ::capnp::_::RawSchema s_bf3704bba52494ba = {
  0xbf3704bba52494ba, b_bf3704bba52494ba.words, 33, d_bf3704bba52494ba, m_bf3704bba52494ba,
  1, 1, i_bf3704bba52494ba, nullptr, nullptr, { &s_bf3704bba52494ba, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace crop {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::crop::Crop::ParametersParams,  ::mas::schema::crop::Crop::ParametersResults>
Crop::Client::parametersRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::crop::Crop::ParametersParams,  ::mas::schema::crop::Crop::ParametersResults>(
      0xe88d97a324bf5c84ull, 0, sizeHint);
}
::kj::Promise<void> Crop::Server::parameters(ParametersContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "crop.capnp:Crop", "parameters",
      0xe88d97a324bf5c84ull, 0);
}
::capnp::Request< ::mas::schema::crop::Crop::CultivarParams,  ::mas::schema::crop::Crop::CultivarResults>
Crop::Client::cultivarRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::crop::Crop::CultivarParams,  ::mas::schema::crop::Crop::CultivarResults>(
      0xe88d97a324bf5c84ull, 1, sizeHint);
}
::kj::Promise<void> Crop::Server::cultivar(CultivarContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "crop.capnp:Crop", "cultivar",
      0xe88d97a324bf5c84ull, 1);
}
::capnp::Capability::Server::DispatchCallResult Crop::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe88d97a324bf5c84ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("crop.capnp:Crop", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Crop::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        parameters(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::crop::Crop::ParametersParams,  ::mas::schema::crop::Crop::ParametersResults>(context)),
        false
      };
    case 1:
      return {
        cultivar(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::crop::Crop::CultivarParams,  ::mas::schema::crop::Crop::CultivarResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "crop.capnp:Crop",
          0xe88d97a324bf5c84ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Crop
#if !CAPNP_LITE
constexpr ::capnp::Kind Crop::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Crop::ParametersParams
constexpr uint16_t Crop::ParametersParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::ParametersParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Crop::ParametersParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::ParametersParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Crop::ParametersResults
constexpr uint16_t Crop::ParametersResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::ParametersResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Crop::ParametersResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::ParametersResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Crop::CultivarParams
constexpr uint16_t Crop::CultivarParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::CultivarParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Crop::CultivarParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::CultivarParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Crop::CultivarResults
constexpr uint16_t Crop::CultivarResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::CultivarResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Crop::CultivarResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::CultivarResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

