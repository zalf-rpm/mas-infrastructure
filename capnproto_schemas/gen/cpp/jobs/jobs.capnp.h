// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: jobs.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 10000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a05b60b71ca38848);
CAPNP_DECLARE_SCHEMA(b8745454d013cbf0);
CAPNP_DECLARE_SCHEMA(ea3ba97e764a031c);
CAPNP_DECLARE_SCHEMA(e067ec22521ebebb);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace jobs {

template <typename Payload = ::capnp::AnyPointer>
struct Job {
  Job() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a05b60b71ca38848, 1, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Payload>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct Service {
  Service() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct NextJobParams;
  struct NextJobResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b8745454d013cbf0)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct Service::NextJobParams {
  NextJobParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea3ba97e764a031c, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Service::NextJobResults {
  NextJobResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e067ec22521ebebb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Payload>
class Job<Payload>::Reader {
public:
  typedef Job Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Payload2 = ::capnp::AnyPointer>
  typename Job<Payload2>::Reader asGeneric() {
    return typename Job<Payload2>::Reader(_reader);
  }

  inline bool hasData() const;
  inline  ::capnp::ReaderFor<Payload> getData() const;

  inline bool getNoFurtherJobs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Payload>
class Job<Payload>::Builder {
public:
  typedef Job Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Payload2 = ::capnp::AnyPointer>
  typename Job<Payload2>::Builder asGeneric() {
    return typename Job<Payload2>::Builder(_builder);
  }

  inline bool hasData();
  inline  ::capnp::BuilderFor<Payload> getData();
  inline void setData( ::capnp::ReaderFor<Payload> value);
  inline  ::capnp::BuilderFor<Payload> initData();
  inline  ::capnp::BuilderFor<Payload> initData(unsigned int size);
  inline void adoptData(::capnp::Orphan<Payload>&& value);
  inline ::capnp::Orphan<Payload> disownData();

  inline bool getNoFurtherJobs();
  inline void setNoFurtherJobs(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Payload>
class Job<Payload>::Pipeline {
public:
  typedef Job Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Payload> getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class Service::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Service Calls;
  typedef Service Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::mas::schema::jobs::Service::NextJobParams,  ::mas::schema::jobs::Service::NextJobResults> nextJobRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Service::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Service Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::mas::schema::jobs::Service::NextJobParams NextJobParams;
  typedef  ::mas::schema::jobs::Service::NextJobResults NextJobResults;
  typedef ::capnp::CallContext<NextJobParams, NextJobResults> NextJobContext;
  virtual ::kj::Promise<void> nextJob(NextJobContext context);

  inline  ::mas::schema::jobs::Service::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::mas::schema::jobs::Service>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Service::NextJobParams::Reader {
public:
  typedef NextJobParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Service::NextJobParams::Builder {
public:
  typedef NextJobParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Service::NextJobParams::Pipeline {
public:
  typedef NextJobParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Service::NextJobResults::Reader {
public:
  typedef NextJobResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasJob() const;
  inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Reader getJob() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Service::NextJobResults::Builder {
public:
  typedef NextJobResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasJob();
  inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Builder getJob();
  inline void setJob( ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Reader value);
  inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Builder initJob();
  inline void adoptJob(::capnp::Orphan< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>&& value);
  inline ::capnp::Orphan< ::mas::schema::jobs::Job< ::capnp::AnyPointer>> disownJob();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Service::NextJobResults::Pipeline {
public:
  typedef NextJobResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Pipeline getJob();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Payload>
inline bool Job<Payload>::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Payload>
inline bool Job<Payload>::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Payload>
inline  ::capnp::ReaderFor<Payload> Job<Payload>::Reader::getData() const {
  return ::capnp::_::PointerHelpers<Payload>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Payload>
inline  ::capnp::BuilderFor<Payload> Job<Payload>::Builder::getData() {
  return ::capnp::_::PointerHelpers<Payload>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Payload>
inline  ::capnp::PipelineFor<Payload> Job<Payload>::Pipeline::getData() {
  return  ::capnp::PipelineFor<Payload>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Payload>
inline void Job<Payload>::Builder::setData( ::capnp::ReaderFor<Payload> value) {
  ::capnp::_::PointerHelpers<Payload>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Payload>
inline  ::capnp::BuilderFor<Payload> Job<Payload>::Builder::initData() {
  return ::capnp::_::PointerHelpers<Payload>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Payload>
inline  ::capnp::BuilderFor<Payload> Job<Payload>::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers<Payload>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Payload>
inline void Job<Payload>::Builder::adoptData(
    ::capnp::Orphan<Payload>&& value) {
  ::capnp::_::PointerHelpers<Payload>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Payload>
inline ::capnp::Orphan<Payload> Job<Payload>::Builder::disownData() {
  return ::capnp::_::PointerHelpers<Payload>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Payload>
inline bool Job<Payload>::Reader::getNoFurtherJobs() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

template <typename Payload>
inline bool Job<Payload>::Builder::getNoFurtherJobs() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
template <typename Payload>
inline void Job<Payload>::Builder::setNoFurtherJobs(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

// Job<Payload>
template <typename Payload>
constexpr uint16_t Job<Payload>::_capnpPrivate::dataWordSize;
template <typename Payload>
constexpr uint16_t Job<Payload>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename Payload>
constexpr ::capnp::Kind Job<Payload>::_capnpPrivate::kind;
template <typename Payload>
constexpr ::capnp::_::RawSchema const* Job<Payload>::_capnpPrivate::schema;
template <typename Payload>
const ::capnp::_::RawBrandedSchema::Scope Job<Payload>::_capnpPrivate::brandScopes[] = {
  { 0xa05b60b71ca38848, brandBindings + 0, 1, false},
};
template <typename Payload>
const ::capnp::_::RawBrandedSchema::Binding Job<Payload>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Payload>(),
};
template <typename Payload>
const ::capnp::_::RawBrandedSchema Job<Payload>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_a05b60b71ca38848, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
inline Service::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Service::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Service::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Service::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Service::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::mas::schema::jobs::Service::Client& Service::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::mas::schema::jobs::Service::Client& Service::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool Service::NextJobResults::Reader::hasJob() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Service::NextJobResults::Builder::hasJob() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Reader Service::NextJobResults::Reader::getJob() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Builder Service::NextJobResults::Builder::getJob() {
  return ::capnp::_::PointerHelpers< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Pipeline Service::NextJobResults::Pipeline::getJob() {
  return  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Service::NextJobResults::Builder::setJob( ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::jobs::Job< ::capnp::AnyPointer>::Builder Service::NextJobResults::Builder::initJob() {
  return ::capnp::_::PointerHelpers< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Service::NextJobResults::Builder::adoptJob(
    ::capnp::Orphan< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::jobs::Job< ::capnp::AnyPointer>> Service::NextJobResults::Builder::disownJob() {
  return ::capnp::_::PointerHelpers< ::mas::schema::jobs::Job< ::capnp::AnyPointer>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

