// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: jobs.capnp

#include "jobs.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<50> b_a05b60b71ca38848 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72, 136, 163,  28, 183,  96,  91, 160,
     11,   0,   0,   0,   1,   0,   1,   0,
     12, 102,  46, 199, 237, 226, 231, 231,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 122,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  15,   0,   0,   0,
    106, 111,  98, 115,  46,  99,  97, 112,
    110, 112,  58,  74, 111,  98,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    100,  97, 116,  97,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     72, 136, 163,  28, 183,  96,  91, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 111,  70, 117, 114, 116, 104, 101,
    114,  74, 111,  98, 115,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  66,   0,   0,   0,
     80,  97, 121, 108, 111,  97, 100,   0, }
};
::capnp::word const* const bp_a05b60b71ca38848 = b_a05b60b71ca38848.words;
#if !CAPNP_LITE
static const uint16_t m_a05b60b71ca38848[] = {0, 1};
static const uint16_t i_a05b60b71ca38848[] = {0, 1};
const ::capnp::_::RawSchema s_a05b60b71ca38848 = {
  0xa05b60b71ca38848, b_a05b60b71ca38848.words, 50, nullptr, m_a05b60b71ca38848,
  0, 2, i_a05b60b71ca38848, nullptr, nullptr, { &s_a05b60b71ca38848, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_b8745454d013cbf0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    240, 203,  19, 208,  84,  84, 116, 184,
     11,   0,   0,   0,   3,   0,   0,   0,
     12, 102,  46, 199, 237, 226, 231, 231,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 111,  98, 115,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     28,   3,  74, 118, 126, 169,  59, 234,
    187, 190,  30,  82,  34, 236, 103, 224,
     17,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    110, 101, 120, 116,  74, 111,  98,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b8745454d013cbf0 = b_b8745454d013cbf0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b8745454d013cbf0[] = {
  &s_e067ec22521ebebb,
  &s_ea3ba97e764a031c,
};
static const uint16_t m_b8745454d013cbf0[] = {0};
const ::capnp::_::RawSchema s_b8745454d013cbf0 = {
  0xb8745454d013cbf0, b_b8745454d013cbf0.words, 28, d_b8745454d013cbf0, m_b8745454d013cbf0,
  2, 1, nullptr, nullptr, nullptr, { &s_b8745454d013cbf0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ea3ba97e764a031c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     28,   3,  74, 118, 126, 169,  59, 234,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 111,  98, 115,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,  46, 110, 101, 120, 116,  74,
    111,  98,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ea3ba97e764a031c = b_ea3ba97e764a031c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ea3ba97e764a031c = {
  0xea3ba97e764a031c, b_ea3ba97e764a031c.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ea3ba97e764a031c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e067ec22521ebebb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    187, 190,  30,  82,  34, 236, 103, 224,
     19,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 111,  98, 115,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,  46, 110, 101, 120, 116,  74,
    111,  98,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    106, 111,  98,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     72, 136, 163,  28, 183,  96,  91, 160,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e067ec22521ebebb = b_e067ec22521ebebb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e067ec22521ebebb[] = {
  &s_a05b60b71ca38848,
};
static const uint16_t m_e067ec22521ebebb[] = {0};
static const uint16_t i_e067ec22521ebebb[] = {0};
const ::capnp::_::RawSchema s_e067ec22521ebebb = {
  0xe067ec22521ebebb, b_e067ec22521ebebb.words, 33, d_e067ec22521ebebb, m_e067ec22521ebebb,
  1, 1, i_e067ec22521ebebb, nullptr, nullptr, { &s_e067ec22521ebebb, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace jobs {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::jobs::Service::NextJobParams,  ::mas::schema::jobs::Service::NextJobResults>
Service::Client::nextJobRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::jobs::Service::NextJobParams,  ::mas::schema::jobs::Service::NextJobResults>(
      0xb8745454d013cbf0ull, 0, sizeHint);
}
::kj::Promise<void> Service::Server::nextJob(NextJobContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "jobs.capnp:Service", "nextJob",
      0xb8745454d013cbf0ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Service::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb8745454d013cbf0ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("jobs.capnp:Service", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Service::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        nextJob(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::jobs::Service::NextJobParams,  ::mas::schema::jobs::Service::NextJobResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "jobs.capnp:Service",
          0xb8745454d013cbf0ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Service
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Service::NextJobParams
constexpr uint16_t Service::NextJobParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Service::NextJobParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::NextJobParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::NextJobParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Service::NextJobResults
constexpr uint16_t Service::NextJobResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Service::NextJobResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Service::NextJobResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::NextJobResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

