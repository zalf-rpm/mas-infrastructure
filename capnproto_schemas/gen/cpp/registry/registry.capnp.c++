// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: registry.capnp

#include "registry.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<75> b_f503f3237666574e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78,  87, 102, 118,  35, 243,   3, 245,
     15,   0,   0,   0,   3,   0,   0,   0,
    105, 130, 126, 156, 195, 224,  27, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   1,   0,   0,
    245,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    246, 134, 132, 177, 251, 212,  22, 219,
    181,  53, 114, 122,  47, 131,  61, 189,
    145,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    214, 222, 128,   1, 142,  27, 190, 213,
      5, 143, 108,  16,   3, 161, 172, 169,
    125,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    195, 219,  90, 128,  12, 213, 191, 142,
     95, 244, 211, 126, 154, 215, 135, 216,
    105,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    163, 225, 126, 238, 126, 177, 165, 150,
    180,  13, 187,  86,   6, 246, 146, 160,
     85,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    181,  33, 137,  20, 207, 248,  44, 238,
    173, 253, 125, 171, 239, 202,  98, 254,
     65,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,   7,   0,   0,   0,
     97, 100, 100,  67,  97, 116, 101, 103,
    111, 114, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  67,  97,
    116, 101, 103, 111, 114, 121,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 111, 118, 101,  79,  98, 106, 101,
     99, 116, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 109, 111, 118, 101,  79,  98,
    106, 101,  99, 116, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f503f3237666574e = b_f503f3237666574e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f503f3237666574e[] = {
  &s_8ebfd50c805adbc3,
  &s_96a5b17eee7ee1a3,
  &s_a092f60656bb0db4,
  &s_a9aca103106c8f05,
  &s_b2afd1cb599c48d5,
  &s_bd3d832f7a7235b5,
  &s_d5be1b8e0180ded6,
  &s_d887d79a7ed3f45f,
  &s_db16d4fbb18486f6,
  &s_ee2cf8cf148921b5,
  &s_fe62caefab7dfdad,
};
static const uint16_t m_f503f3237666574e[] = {0, 2, 4, 1, 3};
const ::capnp::_::RawSchema s_f503f3237666574e = {
  0xf503f3237666574e, b_f503f3237666574e.words, 75, d_f503f3237666574e, m_f503f3237666574e,
  11, 5, nullptr, nullptr, nullptr, { &s_f503f3237666574e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_db16d4fbb18486f6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    246, 134, 132, 177, 251, 212,  22, 219,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46,  97, 100, 100,
     67,  97, 116, 101, 103, 111, 114, 121,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117, 112, 115, 101, 114, 116,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_db16d4fbb18486f6 = b_db16d4fbb18486f6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_db16d4fbb18486f6[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_db16d4fbb18486f6[] = {0, 1};
static const uint16_t i_db16d4fbb18486f6[] = {0, 1};
const ::capnp::_::RawSchema s_db16d4fbb18486f6 = {
  0xdb16d4fbb18486f6, b_db16d4fbb18486f6.words, 49, d_db16d4fbb18486f6, m_db16d4fbb18486f6,
  1, 2, i_db16d4fbb18486f6, nullptr, nullptr, { &s_db16d4fbb18486f6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_bd3d832f7a7235b5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    181,  53, 114, 122,  47, 131,  61, 189,
     21,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46,  97, 100, 100,
     67,  97, 116, 101, 103, 111, 114, 121,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bd3d832f7a7235b5 = b_bd3d832f7a7235b5.words;
#if !CAPNP_LITE
static const uint16_t m_bd3d832f7a7235b5[] = {0};
static const uint16_t i_bd3d832f7a7235b5[] = {0};
const ::capnp::_::RawSchema s_bd3d832f7a7235b5 = {
  0xbd3d832f7a7235b5, b_bd3d832f7a7235b5.words, 34, nullptr, m_bd3d832f7a7235b5,
  0, 1, i_bd3d832f7a7235b5, nullptr, nullptr, { &s_bd3d832f7a7235b5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_d5be1b8e0180ded6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    214, 222, 128,   1, 142,  27, 190, 213,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 114, 101, 109,
    111, 118, 101,  67,  97, 116, 101, 103,
    111, 114, 121,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 118, 101,  79,  98, 106, 101,
     99, 116, 115,  84, 111,  67,  97, 116,
    101, 103, 111, 114, 121,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d5be1b8e0180ded6 = b_d5be1b8e0180ded6.words;
#if !CAPNP_LITE
static const uint16_t m_d5be1b8e0180ded6[] = {0, 1};
static const uint16_t i_d5be1b8e0180ded6[] = {0, 1};
const ::capnp::_::RawSchema s_d5be1b8e0180ded6 = {
  0xd5be1b8e0180ded6, b_d5be1b8e0180ded6.words, 52, nullptr, m_d5be1b8e0180ded6,
  0, 2, i_d5be1b8e0180ded6, nullptr, nullptr, { &s_d5be1b8e0180ded6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_a9aca103106c8f05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 143, 108,  16,   3, 161, 172, 169,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 114, 101, 109,
    111, 118, 101,  67,  97, 116, 101, 103,
    111, 114, 121,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 109, 111, 118, 101, 100,  79,
     98, 106, 101,  99, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a9aca103106c8f05 = b_a9aca103106c8f05.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a9aca103106c8f05[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_a9aca103106c8f05[] = {0};
static const uint16_t i_a9aca103106c8f05[] = {0};
const ::capnp::_::RawSchema s_a9aca103106c8f05 = {
  0xa9aca103106c8f05, b_a9aca103106c8f05.words, 39, d_a9aca103106c8f05, m_a9aca103106c8f05,
  1, 1, i_a9aca103106c8f05, nullptr, nullptr, { &s_a9aca103106c8f05, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_8ebfd50c805adbc3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195, 219,  90, 128,  12, 213, 191, 142,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 109, 111, 118,
    101,  79,  98, 106, 101,  99, 116, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     65,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,  73, 100,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 111,  67,  97, 116,  73, 100,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8ebfd50c805adbc3 = b_8ebfd50c805adbc3.words;
#if !CAPNP_LITE
static const uint16_t m_8ebfd50c805adbc3[] = {0, 1};
static const uint16_t i_8ebfd50c805adbc3[] = {0, 1};
const ::capnp::_::RawSchema s_8ebfd50c805adbc3 = {
  0x8ebfd50c805adbc3, b_8ebfd50c805adbc3.words, 53, nullptr, m_8ebfd50c805adbc3,
  0, 2, i_8ebfd50c805adbc3, nullptr, nullptr, { &s_8ebfd50c805adbc3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_d887d79a7ed3f45f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     95, 244, 211, 126, 154, 215, 135, 216,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 109, 111, 118,
    101,  79,  98, 106, 101,  99, 116, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    109, 111, 118, 101, 100,  79,  98, 106,
    101,  99, 116,  73, 100, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d887d79a7ed3f45f = b_d887d79a7ed3f45f.words;
#if !CAPNP_LITE
static const uint16_t m_d887d79a7ed3f45f[] = {0};
static const uint16_t i_d887d79a7ed3f45f[] = {0};
const ::capnp::_::RawSchema s_d887d79a7ed3f45f = {
  0xd887d79a7ed3f45f, b_d887d79a7ed3f45f.words, 39, nullptr, m_d887d79a7ed3f45f,
  0, 1, i_d887d79a7ed3f45f, nullptr, nullptr, { &s_d887d79a7ed3f45f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_96a5b17eee7ee1a3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    163, 225, 126, 238, 126, 177, 165, 150,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 114, 101, 109,
    111, 118, 101,  79,  98, 106, 101,  99,
    116, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    111,  98, 106, 101,  99, 116,  73, 100,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_96a5b17eee7ee1a3 = b_96a5b17eee7ee1a3.words;
#if !CAPNP_LITE
static const uint16_t m_96a5b17eee7ee1a3[] = {0};
static const uint16_t i_96a5b17eee7ee1a3[] = {0};
const ::capnp::_::RawSchema s_96a5b17eee7ee1a3 = {
  0x96a5b17eee7ee1a3, b_96a5b17eee7ee1a3.words, 39, nullptr, m_96a5b17eee7ee1a3,
  0, 1, i_96a5b17eee7ee1a3, nullptr, nullptr, { &s_96a5b17eee7ee1a3, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_a092f60656bb0db4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180,  13, 187,  86,   6, 246, 146, 160,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 114, 101, 109,
    111, 118, 101,  79,  98, 106, 101,  99,
    116, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 109, 111, 118, 101, 100,  79,
     98, 106, 101,  99, 116, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a092f60656bb0db4 = b_a092f60656bb0db4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a092f60656bb0db4[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_a092f60656bb0db4[] = {0};
static const uint16_t i_a092f60656bb0db4[] = {0};
const ::capnp::_::RawSchema s_a092f60656bb0db4 = {
  0xa092f60656bb0db4, b_a092f60656bb0db4.words, 39, d_a092f60656bb0db4, m_a092f60656bb0db4,
  1, 1, i_a092f60656bb0db4, nullptr, nullptr, { &s_a092f60656bb0db4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ee2cf8cf148921b5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    181,  33, 137,  20, 207, 248,  44, 238,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 114, 101, 103,
    105, 115, 116, 114, 121,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ee2cf8cf148921b5 = b_ee2cf8cf148921b5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ee2cf8cf148921b5 = {
  0xee2cf8cf148921b5, b_ee2cf8cf148921b5.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ee2cf8cf148921b5, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_fe62caefab7dfdad = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    173, 253, 125, 171, 239, 202,  98, 254,
     21,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  65,
    100, 109, 105, 110,  46, 114, 101, 103,
    105, 115, 116, 114, 121,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    184,  51,   6,  96, 209,  75, 123, 202,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe62caefab7dfdad = b_fe62caefab7dfdad.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fe62caefab7dfdad[] = {
  &s_ca7b4bd1600633b8,
};
static const uint16_t m_fe62caefab7dfdad[] = {0};
static const uint16_t i_fe62caefab7dfdad[] = {0};
const ::capnp::_::RawSchema s_fe62caefab7dfdad = {
  0xfe62caefab7dfdad, b_fe62caefab7dfdad.words, 34, d_fe62caefab7dfdad, m_fe62caefab7dfdad,
  1, 1, i_fe62caefab7dfdad, nullptr, nullptr, { &s_fe62caefab7dfdad, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_ca7b4bd1600633b8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    184,  51,   6,  96, 209,  75, 123, 202,
     15,   0,   0,   0,   3,   0,   0,   0,
    105, 130, 126, 156, 195, 224,  27, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 199,   0,   0,   0,
    169,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     19, 172, 247,  12,  81, 135, 121, 193,
      1,   0,   0,   0,  50,   0,   0,   0,
     69, 110, 116, 114, 121,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    155, 194,  52,  94, 230, 230,  73, 156,
    176,  48, 115, 129, 181,  96, 191, 178,
     81,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    157, 188,  72, 178, 225, 131,  18, 137,
    211, 218,   3, 254, 203, 126, 203, 212,
     65,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    250, 197,  81,  97, 113,  83, 252, 159,
     77,   6, 134, 180, 110, 245, 234, 228,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
    115, 117, 112, 112, 111, 114, 116, 101,
    100,  67,  97, 116, 101, 103, 111, 114,
    105, 101, 115,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca7b4bd1600633b8 = b_ca7b4bd1600633b8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca7b4bd1600633b8[] = {
  &s_891283e1b248bc9d,
  &s_9c49e6e65e34c29b,
  &s_9ffc53716151c5fa,
  &s_b2afd1cb599c48d5,
  &s_b2bf60b5817330b0,
  &s_d4cb7ecbfe03dad3,
  &s_e4eaf56eb486064d,
};
static const uint16_t m_ca7b4bd1600633b8[] = {1, 2, 0};
const ::capnp::_::RawSchema s_ca7b4bd1600633b8 = {
  0xca7b4bd1600633b8, b_ca7b4bd1600633b8.words, 56, d_ca7b4bd1600633b8, m_ca7b4bd1600633b8,
  7, 3, nullptr, nullptr, nullptr, { &s_ca7b4bd1600633b8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<64> b_c17987510cf7ac13 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     19, 172, 247,  12,  81, 135, 121, 193,
     24,   0,   0,   0,   1,   0,   0,   0,
    184,  51,   6,  96, 209,  75, 123, 202,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  46,
     69, 110, 116, 114, 121,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 102,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c17987510cf7ac13 = b_c17987510cf7ac13.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c17987510cf7ac13[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_c17987510cf7ac13[] = {0, 2, 1};
static const uint16_t i_c17987510cf7ac13[] = {0, 1, 2};
const ::capnp::_::RawSchema s_c17987510cf7ac13 = {
  0xc17987510cf7ac13, b_c17987510cf7ac13.words, 64, d_c17987510cf7ac13, m_c17987510cf7ac13,
  1, 3, i_c17987510cf7ac13, nullptr, nullptr, { &s_c17987510cf7ac13, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_9c49e6e65e34c29b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    155, 194,  52,  94, 230, 230,  73, 156,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  46,
    115, 117, 112, 112, 111, 114, 116, 101,
    100,  67,  97, 116, 101, 103, 111, 114,
    105, 101, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9c49e6e65e34c29b = b_9c49e6e65e34c29b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9c49e6e65e34c29b = {
  0x9c49e6e65e34c29b, b_9c49e6e65e34c29b.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9c49e6e65e34c29b, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_b2bf60b5817330b0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    176,  48, 115, 129, 181,  96, 191, 178,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  46,
    115, 117, 112, 112, 111, 114, 116, 101,
    100,  67,  97, 116, 101, 103, 111, 114,
    105, 101, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2bf60b5817330b0 = b_b2bf60b5817330b0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2bf60b5817330b0[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_b2bf60b5817330b0[] = {0};
static const uint16_t i_b2bf60b5817330b0[] = {0};
const ::capnp::_::RawSchema s_b2bf60b5817330b0 = {
  0xb2bf60b5817330b0, b_b2bf60b5817330b0.words, 39, d_b2bf60b5817330b0, m_b2bf60b5817330b0,
  1, 1, i_b2bf60b5817330b0, nullptr, nullptr, { &s_b2bf60b5817330b0, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_891283e1b248bc9d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    157, 188,  72, 178, 225, 131,  18, 137,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  46,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 110, 102, 111,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_891283e1b248bc9d = b_891283e1b248bc9d.words;
#if !CAPNP_LITE
static const uint16_t m_891283e1b248bc9d[] = {0};
static const uint16_t i_891283e1b248bc9d[] = {0};
const ::capnp::_::RawSchema s_891283e1b248bc9d = {
  0x891283e1b248bc9d, b_891283e1b248bc9d.words, 35, nullptr, m_891283e1b248bc9d,
  0, 1, i_891283e1b248bc9d, nullptr, nullptr, { &s_891283e1b248bc9d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_9ffc53716151c5fa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    250, 197,  81,  97, 113,  83, 252, 159,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  46,
    101, 110, 116, 114, 105, 101, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9ffc53716151c5fa = b_9ffc53716151c5fa.words;
#if !CAPNP_LITE
static const uint16_t m_9ffc53716151c5fa[] = {0};
static const uint16_t i_9ffc53716151c5fa[] = {0};
const ::capnp::_::RawSchema s_9ffc53716151c5fa = {
  0x9ffc53716151c5fa, b_9ffc53716151c5fa.words, 34, nullptr, m_9ffc53716151c5fa,
  0, 1, i_9ffc53716151c5fa, nullptr, nullptr, { &s_9ffc53716151c5fa, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_e4eaf56eb486064d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     77,   6, 134, 180, 110, 245, 234, 228,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114, 121,  46,
    101, 110, 116, 114, 105, 101, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    101, 110, 116, 114, 105, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     19, 172, 247,  12,  81, 135, 121, 193,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4eaf56eb486064d = b_e4eaf56eb486064d.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e4eaf56eb486064d[] = {
  &s_c17987510cf7ac13,
};
static const uint16_t m_e4eaf56eb486064d[] = {0};
static const uint16_t i_e4eaf56eb486064d[] = {0};
const ::capnp::_::RawSchema s_e4eaf56eb486064d = {
  0xe4eaf56eb486064d, b_e4eaf56eb486064d.words, 37, d_e4eaf56eb486064d, m_e4eaf56eb486064d,
  1, 1, i_e4eaf56eb486064d, nullptr, nullptr, { &s_e4eaf56eb486064d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_abaef93c36f2d1ea = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    234, 209, 242,  54,  60, 249, 174, 171,
     15,   0,   0,   0,   3,   0,   0,   0,
    105, 130, 126, 156, 195, 224,  27, 254,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114,  97, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    188,   9,  32, 150, 160,  12, 238, 152,
     60,   1, 196, 240, 128, 176, 169, 178,
     17,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_abaef93c36f2d1ea = b_abaef93c36f2d1ea.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_abaef93c36f2d1ea[] = {
  &s_98ee0ca0962009bc,
  &s_b2a9b080f0c4013c,
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_abaef93c36f2d1ea[] = {0};
const ::capnp::_::RawSchema s_abaef93c36f2d1ea = {
  0xabaef93c36f2d1ea, b_abaef93c36f2d1ea.words, 32, d_abaef93c36f2d1ea, m_abaef93c36f2d1ea,
  3, 1, nullptr, nullptr, nullptr, { &s_abaef93c36f2d1ea, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<65> b_98ee0ca0962009bc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    188,   9,  32, 150, 160,  12, 238, 152,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114,  97, 114,
     46, 114, 101, 103, 105, 115, 116, 101,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103,  78,  97, 109, 101,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 116, 101, 103, 111, 114, 121,
     73, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_98ee0ca0962009bc = b_98ee0ca0962009bc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_98ee0ca0962009bc[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_98ee0ca0962009bc[] = {0, 2, 1};
static const uint16_t i_98ee0ca0962009bc[] = {0, 1, 2};
const ::capnp::_::RawSchema s_98ee0ca0962009bc = {
  0x98ee0ca0962009bc, b_98ee0ca0962009bc.words, 65, d_98ee0ca0962009bc, m_98ee0ca0962009bc,
  1, 3, i_98ee0ca0962009bc, nullptr, nullptr, { &s_98ee0ca0962009bc, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_b2a9b080f0c4013c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60,   1, 196, 240, 128, 176, 169, 178,
     25,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114, 121,
     46,  99,  97, 112, 110, 112,  58,  82,
    101, 103, 105, 115, 116, 114,  97, 114,
     46, 114, 101, 103, 105, 115, 116, 101,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 114, 101, 103,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    135,  69, 110, 215, 195, 226, 212, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 114, 101, 103,  83,  82,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b2a9b080f0c4013c = b_b2a9b080f0c4013c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2a9b080f0c4013c[] = {
  &s_9dd4e2c3d76e4587,
};
static const uint16_t m_b2a9b080f0c4013c[] = {1, 0};
static const uint16_t i_b2a9b080f0c4013c[] = {0, 1};
const ::capnp::_::RawSchema s_b2a9b080f0c4013c = {
  0xb2a9b080f0c4013c, b_b2a9b080f0c4013c.words, 49, d_b2a9b080f0c4013c, m_b2a9b080f0c4013c,
  1, 2, i_b2a9b080f0c4013c, nullptr, nullptr, { &s_b2a9b080f0c4013c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace registry {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::registry::Admin::AddCategoryParams,  ::mas::schema::registry::Admin::AddCategoryResults>
Admin::Client::addCategoryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Admin::AddCategoryParams,  ::mas::schema::registry::Admin::AddCategoryResults>(
      0xf503f3237666574eull, 0, sizeHint);
}
::kj::Promise<void> Admin::Server::addCategory(AddCategoryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Admin", "addCategory",
      0xf503f3237666574eull, 0);
}
::capnp::Request< ::mas::schema::registry::Admin::RemoveCategoryParams,  ::mas::schema::registry::Admin::RemoveCategoryResults>
Admin::Client::removeCategoryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Admin::RemoveCategoryParams,  ::mas::schema::registry::Admin::RemoveCategoryResults>(
      0xf503f3237666574eull, 1, sizeHint);
}
::kj::Promise<void> Admin::Server::removeCategory(RemoveCategoryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Admin", "removeCategory",
      0xf503f3237666574eull, 1);
}
::capnp::Request< ::mas::schema::registry::Admin::MoveObjectsParams,  ::mas::schema::registry::Admin::MoveObjectsResults>
Admin::Client::moveObjectsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Admin::MoveObjectsParams,  ::mas::schema::registry::Admin::MoveObjectsResults>(
      0xf503f3237666574eull, 2, sizeHint);
}
::kj::Promise<void> Admin::Server::moveObjects(MoveObjectsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Admin", "moveObjects",
      0xf503f3237666574eull, 2);
}
::capnp::Request< ::mas::schema::registry::Admin::RemoveObjectsParams,  ::mas::schema::registry::Admin::RemoveObjectsResults>
Admin::Client::removeObjectsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Admin::RemoveObjectsParams,  ::mas::schema::registry::Admin::RemoveObjectsResults>(
      0xf503f3237666574eull, 3, sizeHint);
}
::kj::Promise<void> Admin::Server::removeObjects(RemoveObjectsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Admin", "removeObjects",
      0xf503f3237666574eull, 3);
}
::capnp::Request< ::mas::schema::registry::Admin::RegistryParams,  ::mas::schema::registry::Admin::RegistryResults>
Admin::Client::registryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Admin::RegistryParams,  ::mas::schema::registry::Admin::RegistryResults>(
      0xf503f3237666574eull, 4, sizeHint);
}
::kj::Promise<void> Admin::Server::registry(RegistryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Admin", "registry",
      0xf503f3237666574eull, 4);
}
::capnp::Capability::Server::DispatchCallResult Admin::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf503f3237666574eull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("registry.capnp:Admin", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Admin::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        addCategory(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Admin::AddCategoryParams,  ::mas::schema::registry::Admin::AddCategoryResults>(context)),
        false
      };
    case 1:
      return {
        removeCategory(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Admin::RemoveCategoryParams,  ::mas::schema::registry::Admin::RemoveCategoryResults>(context)),
        false
      };
    case 2:
      return {
        moveObjects(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Admin::MoveObjectsParams,  ::mas::schema::registry::Admin::MoveObjectsResults>(context)),
        false
      };
    case 3:
      return {
        removeObjects(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Admin::RemoveObjectsParams,  ::mas::schema::registry::Admin::RemoveObjectsResults>(context)),
        false
      };
    case 4:
      return {
        registry(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Admin::RegistryParams,  ::mas::schema::registry::Admin::RegistryResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "registry.capnp:Admin",
          0xf503f3237666574eull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Admin
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::AddCategoryParams
constexpr uint16_t Admin::AddCategoryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::AddCategoryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::AddCategoryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::AddCategoryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::AddCategoryResults
constexpr uint16_t Admin::AddCategoryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::AddCategoryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::AddCategoryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::AddCategoryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::RemoveCategoryParams
constexpr uint16_t Admin::RemoveCategoryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::RemoveCategoryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::RemoveCategoryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::RemoveCategoryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::RemoveCategoryResults
constexpr uint16_t Admin::RemoveCategoryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::RemoveCategoryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::RemoveCategoryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::RemoveCategoryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::MoveObjectsParams
constexpr uint16_t Admin::MoveObjectsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::MoveObjectsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::MoveObjectsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::MoveObjectsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::MoveObjectsResults
constexpr uint16_t Admin::MoveObjectsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::MoveObjectsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::MoveObjectsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::MoveObjectsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::RemoveObjectsParams
constexpr uint16_t Admin::RemoveObjectsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::RemoveObjectsParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::RemoveObjectsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::RemoveObjectsParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::RemoveObjectsResults
constexpr uint16_t Admin::RemoveObjectsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::RemoveObjectsResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::RemoveObjectsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::RemoveObjectsResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::RegistryParams
constexpr uint16_t Admin::RegistryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::RegistryParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::RegistryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::RegistryParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Admin::RegistryResults
constexpr uint16_t Admin::RegistryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::RegistryResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Admin::RegistryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::RegistryResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::registry::Registry::SupportedCategoriesParams,  ::mas::schema::registry::Registry::SupportedCategoriesResults>
Registry::Client::supportedCategoriesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Registry::SupportedCategoriesParams,  ::mas::schema::registry::Registry::SupportedCategoriesResults>(
      0xca7b4bd1600633b8ull, 0, sizeHint);
}
::kj::Promise<void> Registry::Server::supportedCategories(SupportedCategoriesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Registry", "supportedCategories",
      0xca7b4bd1600633b8ull, 0);
}
::capnp::Request< ::mas::schema::registry::Registry::CategoryInfoParams,  ::mas::schema::common::IdInformation>
Registry::Client::categoryInfoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Registry::CategoryInfoParams,  ::mas::schema::common::IdInformation>(
      0xca7b4bd1600633b8ull, 1, sizeHint);
}
::kj::Promise<void> Registry::Server::categoryInfo(CategoryInfoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Registry", "categoryInfo",
      0xca7b4bd1600633b8ull, 1);
}
::capnp::Request< ::mas::schema::registry::Registry::EntriesParams,  ::mas::schema::registry::Registry::EntriesResults>
Registry::Client::entriesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Registry::EntriesParams,  ::mas::schema::registry::Registry::EntriesResults>(
      0xca7b4bd1600633b8ull, 2, sizeHint);
}
::kj::Promise<void> Registry::Server::entries(EntriesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Registry", "entries",
      0xca7b4bd1600633b8ull, 2);
}
::capnp::Capability::Server::DispatchCallResult Registry::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xca7b4bd1600633b8ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("registry.capnp:Registry", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Registry::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        supportedCategories(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Registry::SupportedCategoriesParams,  ::mas::schema::registry::Registry::SupportedCategoriesResults>(context)),
        false
      };
    case 1:
      return {
        categoryInfo(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Registry::CategoryInfoParams,  ::mas::schema::common::IdInformation>(context)),
        false
      };
    case 2:
      return {
        entries(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Registry::EntriesParams,  ::mas::schema::registry::Registry::EntriesResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "registry.capnp:Registry",
          0xca7b4bd1600633b8ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Registry
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registry::Entry
constexpr uint16_t Registry::Entry::_capnpPrivate::dataWordSize;
constexpr uint16_t Registry::Entry::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::Entry::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::Entry::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registry::SupportedCategoriesParams
constexpr uint16_t Registry::SupportedCategoriesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Registry::SupportedCategoriesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::SupportedCategoriesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::SupportedCategoriesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registry::SupportedCategoriesResults
constexpr uint16_t Registry::SupportedCategoriesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Registry::SupportedCategoriesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::SupportedCategoriesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::SupportedCategoriesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registry::CategoryInfoParams
constexpr uint16_t Registry::CategoryInfoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Registry::CategoryInfoParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::CategoryInfoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::CategoryInfoParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registry::EntriesParams
constexpr uint16_t Registry::EntriesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Registry::EntriesParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::EntriesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::EntriesParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registry::EntriesResults
constexpr uint16_t Registry::EntriesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Registry::EntriesResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registry::EntriesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registry::EntriesResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::registry::Registrar::RegisterParams,  ::mas::schema::registry::Registrar::RegisterResults>
Registrar::Client::registerRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::registry::Registrar::RegisterParams,  ::mas::schema::registry::Registrar::RegisterResults>(
      0xabaef93c36f2d1eaull, 0, sizeHint);
}
::kj::Promise<void> Registrar::Server::register_(RegisterContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "registry.capnp:Registrar", "register",
      0xabaef93c36f2d1eaull, 0);
}
::capnp::Capability::Server::DispatchCallResult Registrar::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xabaef93c36f2d1eaull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("registry.capnp:Registrar", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Registrar::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        register_(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::registry::Registrar::RegisterParams,  ::mas::schema::registry::Registrar::RegisterResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "registry.capnp:Registrar",
          0xabaef93c36f2d1eaull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Registrar
#if !CAPNP_LITE
constexpr ::capnp::Kind Registrar::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registrar::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registrar::RegisterParams
constexpr uint16_t Registrar::RegisterParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Registrar::RegisterParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registrar::RegisterParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registrar::RegisterParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// Registrar::RegisterResults
constexpr uint16_t Registrar::RegisterResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Registrar::RegisterResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind Registrar::RegisterResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Registrar::RegisterResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

