// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: yieldstat.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../../crop.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cfe218c48d227e0d);
enum class ResultId_cfe218c48d227e0d: uint16_t {
  PRIMARY_YIELD,
  DRY_MATTER,
  CARBON_IN_ABOVE_GROUND_BIOMASS,
  SUM_FERTILIZER,
  SUM_IRRIGATION,
  PRIMARY_YIELD_C_U,
};
CAPNP_DECLARE_ENUM(ResultId, cfe218c48d227e0d);
CAPNP_DECLARE_SCHEMA(a47f8d65869200af);
CAPNP_DECLARE_SCHEMA(8db55634a0e7d054);
CAPNP_DECLARE_SCHEMA(8d365bd4f0136fc0);
CAPNP_DECLARE_SCHEMA(932a681f81b4be19);
CAPNP_DECLARE_SCHEMA(a008c533888c3a5e);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace model {
namespace yieldstat {

typedef ::capnp::schemas::ResultId_cfe218c48d227e0d ResultId;

struct RestInput {
  RestInput() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a47f8d65869200af, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Result {
  Result() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct ResultToValue;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8db55634a0e7d054, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Result::ResultToValue {
  ResultToValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8d365bd4f0136fc0, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Output {
  Output() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct YearToResult;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(932a681f81b4be19, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Output::YearToResult {
  YearToResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a008c533888c3a5e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RestInput::Reader {
public:
  typedef RestInput Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getUseDevTrend() const;

  inline bool getUseCO2Increase() const;

  inline double getDgm() const;

  inline  ::uint8_t getHft() const;

  inline  ::uint8_t getNft() const;

  inline  ::uint8_t getSft() const;

  inline  ::uint8_t getSlope() const;

  inline  ::uint8_t getSteino() const;

  inline  ::uint8_t getAz() const;

  inline  ::uint8_t getKlz() const;

  inline  ::uint8_t getStt() const;

  inline  ::int8_t getGermanFederalStates() const;

  inline bool getGetDryYearWaterNeed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RestInput::Builder {
public:
  typedef RestInput Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getUseDevTrend();
  inline void setUseDevTrend(bool value);

  inline bool getUseCO2Increase();
  inline void setUseCO2Increase(bool value);

  inline double getDgm();
  inline void setDgm(double value);

  inline  ::uint8_t getHft();
  inline void setHft( ::uint8_t value);

  inline  ::uint8_t getNft();
  inline void setNft( ::uint8_t value);

  inline  ::uint8_t getSft();
  inline void setSft( ::uint8_t value);

  inline  ::uint8_t getSlope();
  inline void setSlope( ::uint8_t value);

  inline  ::uint8_t getSteino();
  inline void setSteino( ::uint8_t value);

  inline  ::uint8_t getAz();
  inline void setAz( ::uint8_t value);

  inline  ::uint8_t getKlz();
  inline void setKlz( ::uint8_t value);

  inline  ::uint8_t getStt();
  inline void setStt( ::uint8_t value);

  inline  ::int8_t getGermanFederalStates();
  inline void setGermanFederalStates( ::int8_t value);

  inline bool getGetDryYearWaterNeed();
  inline void setGetDryYearWaterNeed(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RestInput::Pipeline {
public:
  typedef RestInput Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Result::Reader {
public:
  typedef Result Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::crop::Cultivar getCultivar() const;

  inline bool getIsNoData() const;

  inline bool hasValues() const;
  inline  ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Reader getValues() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Result::Builder {
public:
  typedef Result Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::crop::Cultivar getCultivar();
  inline void setCultivar( ::mas::schema::crop::Cultivar value);

  inline bool getIsNoData();
  inline void setIsNoData(bool value);

  inline bool hasValues();
  inline  ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Builder getValues();
  inline void setValues( ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Builder initValues(unsigned int size);
  inline void adoptValues(::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>> disownValues();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Result::Pipeline {
public:
  typedef Result Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Result::ResultToValue::Reader {
public:
  typedef ResultToValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::yieldstat::ResultId getId() const;

  inline double getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Result::ResultToValue::Builder {
public:
  typedef ResultToValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::yieldstat::ResultId getId();
  inline void setId( ::mas::schema::model::yieldstat::ResultId value);

  inline double getValue();
  inline void setValue(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Result::ResultToValue::Pipeline {
public:
  typedef ResultToValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Output::Reader {
public:
  typedef Output Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool getRunFailed() const;

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

  inline bool hasResults() const;
  inline  ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Reader getResults() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Output::Builder {
public:
  typedef Output Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool getRunFailed();
  inline void setRunFailed(bool value);

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

  inline bool hasResults();
  inline  ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Builder getResults();
  inline void setResults( ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Builder initResults(unsigned int size);
  inline void adoptResults(::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>> disownResults();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Output::Pipeline {
public:
  typedef Output Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Output::YearToResult::Reader {
public:
  typedef YearToResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getYear() const;

  inline bool hasResult() const;
  inline  ::mas::schema::model::yieldstat::Result::Reader getResult() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Output::YearToResult::Builder {
public:
  typedef YearToResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getYear();
  inline void setYear( ::int16_t value);

  inline bool hasResult();
  inline  ::mas::schema::model::yieldstat::Result::Builder getResult();
  inline void setResult( ::mas::schema::model::yieldstat::Result::Reader value);
  inline  ::mas::schema::model::yieldstat::Result::Builder initResult();
  inline void adoptResult(::capnp::Orphan< ::mas::schema::model::yieldstat::Result>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::yieldstat::Result> disownResult();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Output::YearToResult::Pipeline {
public:
  typedef YearToResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::yieldstat::Result::Pipeline getResult();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool RestInput::Reader::getUseDevTrend() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool RestInput::Builder::getUseDevTrend() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setUseDevTrend(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RestInput::Reader::getUseCO2Increase() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, true);
}

inline bool RestInput::Builder::getUseCO2Increase() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, true);
}
inline void RestInput::Builder::setUseCO2Increase(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, true);
}

inline double RestInput::Reader::getDgm() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double RestInput::Builder::getDgm() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setDgm(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getHft() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getHft() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setHft( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getNft() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getNft() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setNft( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getSft() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getSft() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setSft( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getSlope() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getSlope() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setSlope( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getSteino() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getSteino() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setSteino( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getAz() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getAz() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setAz( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getKlz() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getKlz() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setKlz( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RestInput::Reader::getStt() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RestInput::Builder::getStt() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setStt( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::int8_t RestInput::Reader::getGermanFederalStates() const {
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, -1);
}

inline  ::int8_t RestInput::Builder::getGermanFederalStates() {
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, -1);
}
inline void RestInput::Builder::setGermanFederalStates( ::int8_t value) {
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value, -1);
}

inline bool RestInput::Reader::getGetDryYearWaterNeed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool RestInput::Builder::getGetDryYearWaterNeed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RestInput::Builder::setGetDryYearWaterNeed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::crop::Cultivar Result::Reader::getCultivar() const {
  return _reader.getDataField< ::mas::schema::crop::Cultivar>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::crop::Cultivar Result::Builder::getCultivar() {
  return _builder.getDataField< ::mas::schema::crop::Cultivar>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Result::Builder::setCultivar( ::mas::schema::crop::Cultivar value) {
  _builder.setDataField< ::mas::schema::crop::Cultivar>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Result::Reader::getIsNoData() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool Result::Builder::getIsNoData() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void Result::Builder::setIsNoData(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool Result::Reader::hasValues() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Result::Builder::hasValues() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Reader Result::Reader::getValues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Builder Result::Builder::getValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Result::Builder::setValues( ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>::Builder Result::Builder::initValues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Result::Builder::adoptValues(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>> Result::Builder::disownValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Result::ResultToValue,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::mas::schema::model::yieldstat::ResultId Result::ResultToValue::Reader::getId() const {
  return _reader.getDataField< ::mas::schema::model::yieldstat::ResultId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::yieldstat::ResultId Result::ResultToValue::Builder::getId() {
  return _builder.getDataField< ::mas::schema::model::yieldstat::ResultId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Result::ResultToValue::Builder::setId( ::mas::schema::model::yieldstat::ResultId value) {
  _builder.setDataField< ::mas::schema::model::yieldstat::ResultId>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Result::ResultToValue::Reader::getValue() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Result::ResultToValue::Builder::getValue() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Result::ResultToValue::Builder::setValue(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Output::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Output::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Output::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Output::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Output::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Output::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Output::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Output::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Output::Reader::getRunFailed() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Output::Builder::getRunFailed() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Output::Builder::setRunFailed(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Output::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Output::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Output::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Output::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Output::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Output::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Output::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Output::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Output::Reader::hasResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Output::Builder::hasResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Reader Output::Reader::getResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Builder Output::Builder::getResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Output::Builder::setResults( ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>::Builder Output::Builder::initResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Output::Builder::adoptResults(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>> Output::Builder::disownResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::yieldstat::Output::YearToResult,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int16_t Output::YearToResult::Reader::getYear() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Output::YearToResult::Builder::getYear() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Output::YearToResult::Builder::setYear( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Output::YearToResult::Reader::hasResult() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Output::YearToResult::Builder::hasResult() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::yieldstat::Result::Reader Output::YearToResult::Reader::getResult() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::yieldstat::Result>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::yieldstat::Result::Builder Output::YearToResult::Builder::getResult() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::yieldstat::Result>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::yieldstat::Result::Pipeline Output::YearToResult::Pipeline::getResult() {
  return  ::mas::schema::model::yieldstat::Result::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Output::YearToResult::Builder::setResult( ::mas::schema::model::yieldstat::Result::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::yieldstat::Result>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::yieldstat::Result::Builder Output::YearToResult::Builder::initResult() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::yieldstat::Result>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Output::YearToResult::Builder::adoptResult(
    ::capnp::Orphan< ::mas::schema::model::yieldstat::Result>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::yieldstat::Result>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::yieldstat::Result> Output::YearToResult::Builder::disownResult() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::yieldstat::Result>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

