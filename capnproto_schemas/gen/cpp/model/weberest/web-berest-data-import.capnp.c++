// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: web-berest-data-import.capnp

#include "web-berest-data-import.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<33> b_a1a4ad9d143eaa6f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    111, 170,  62,  20, 157, 173, 164, 161,
     44,   0,   0,   0,   3,   0,   0,   0,
    155, 183, 107, 130, 162, 104, 180, 196,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
     45,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  71,   0,   0,   0,
     85,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 100, 101, 108,  47, 119, 101,
     98, 101, 114, 101, 115, 116,  47, 119,
    101,  98,  45,  98, 101, 114, 101, 115,
    116,  45, 100,  97, 116,  97,  45, 105,
    109, 112, 111, 114, 116,  46,  99,  97,
    112, 110, 112,  58,  68,  87,  76,  65,
     66,  73, 109, 112, 111, 114, 116,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    210, 199,  35, 170,  44, 151,   3, 235,
      7, 202, 252,  73, 140,  86, 188, 185,
     17,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    105, 109, 112, 111, 114, 116,  68,  97,
    116,  97,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_a1a4ad9d143eaa6f = b_a1a4ad9d143eaa6f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a1a4ad9d143eaa6f[] = {
  &s_b9bc568c49fcca07,
  &s_eb03972caa23c7d2,
};
static const uint16_t m_a1a4ad9d143eaa6f[] = {0};
const ::capnp::_::RawSchema s_a1a4ad9d143eaa6f = {
  0xa1a4ad9d143eaa6f, b_a1a4ad9d143eaa6f.words, 33, d_a1a4ad9d143eaa6f, m_a1a4ad9d143eaa6f,
  2, 1, nullptr, nullptr, nullptr, { &s_a1a4ad9d143eaa6f, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<68> b_eb03972caa23c7d2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210, 199,  35, 170,  44, 151,   3, 235,
     56,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 100, 101, 108,  47, 119, 101,
     98, 101, 114, 101, 115, 116,  47, 119,
    101,  98,  45,  98, 101, 114, 101, 115,
    116,  45, 100,  97, 116,  97,  45, 105,
    109, 112, 111, 114, 116,  46,  99,  97,
    112, 110, 112,  58,  68,  87,  76,  65,
     66,  73, 109, 112, 111, 114, 116,  46,
    105, 109, 112, 111, 114, 116,  68,  97,
    116,  97,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 119, 108,  97,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 119, 108,  98,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_eb03972caa23c7d2 = b_eb03972caa23c7d2.words;
#if !CAPNP_LITE
static const uint16_t m_eb03972caa23c7d2[] = {1, 2, 0};
static const uint16_t i_eb03972caa23c7d2[] = {0, 1, 2};
const ::capnp::_::RawSchema s_eb03972caa23c7d2 = {
  0xeb03972caa23c7d2, b_eb03972caa23c7d2.words, 68, nullptr, m_eb03972caa23c7d2,
  0, 3, i_eb03972caa23c7d2, nullptr, nullptr, { &s_eb03972caa23c7d2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_b9bc568c49fcca07 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      7, 202, 252,  73, 140,  86, 188, 185,
     56,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 111, 100, 101, 108,  47, 119, 101,
     98, 101, 114, 101, 115, 116,  47, 119,
    101,  98,  45,  98, 101, 114, 101, 115,
    116,  45, 100,  97, 116,  97,  45, 105,
    109, 112, 111, 114, 116,  46,  99,  97,
    112, 110, 112,  58,  68,  87,  76,  65,
     66,  73, 109, 112, 111, 114, 116,  46,
    105, 109, 112, 111, 114, 116,  68,  97,
    116,  97,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     80,   0,   0,   0,   3,   0,   1,   0,
     92,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117,  99,  99, 101, 115, 115,  65,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 117,  99,  99, 101, 115, 115,  66,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9bc568c49fcca07 = b_b9bc568c49fcca07.words;
#if !CAPNP_LITE
static const uint16_t m_b9bc568c49fcca07[] = {0, 1, 2};
static const uint16_t i_b9bc568c49fcca07[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b9bc568c49fcca07 = {
  0xb9bc568c49fcca07, b_b9bc568c49fcca07.words, 70, nullptr, m_b9bc568c49fcca07,
  0, 3, i_b9bc568c49fcca07, nullptr, nullptr, { &s_b9bc568c49fcca07, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace model {
namespace weberest {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::model::weberest::DWLABImport::ImportDataParams,  ::mas::schema::model::weberest::DWLABImport::ImportDataResults>
DWLABImport::Client::importDataRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::model::weberest::DWLABImport::ImportDataParams,  ::mas::schema::model::weberest::DWLABImport::ImportDataResults>(
      0xa1a4ad9d143eaa6full, 0, sizeHint);
}
::kj::Promise<void> DWLABImport::Server::importData(ImportDataContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "model/weberest/web-berest-data-import.capnp:DWLABImport", "importData",
      0xa1a4ad9d143eaa6full, 0);
}
::capnp::Capability::Server::DispatchCallResult DWLABImport::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xa1a4ad9d143eaa6full:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("model/weberest/web-berest-data-import.capnp:DWLABImport", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult DWLABImport::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        importData(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::model::weberest::DWLABImport::ImportDataParams,  ::mas::schema::model::weberest::DWLABImport::ImportDataResults>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "model/weberest/web-berest-data-import.capnp:DWLABImport",
          0xa1a4ad9d143eaa6full, methodId);
  }
}
#endif  // !CAPNP_LITE

// DWLABImport
#if !CAPNP_LITE
constexpr ::capnp::Kind DWLABImport::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DWLABImport::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// DWLABImport::ImportDataParams
constexpr uint16_t DWLABImport::ImportDataParams::_capnpPrivate::dataWordSize;
constexpr uint16_t DWLABImport::ImportDataParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DWLABImport::ImportDataParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DWLABImport::ImportDataParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// DWLABImport::ImportDataResults
constexpr uint16_t DWLABImport::ImportDataResults::_capnpPrivate::dataWordSize;
constexpr uint16_t DWLABImport::ImportDataResults::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind DWLABImport::ImportDataResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* DWLABImport::ImportDataResults::_capnpPrivate::schema;
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace
}  // namespace

