// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: monica_params.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 10000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../../climate_data.capnp.h"
#include "../../date.capnp.h"
#include "../../management.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a74f5574681f9d55);
CAPNP_DECLARE_SCHEMA(8ac5cfb21988c168);
CAPNP_DECLARE_SCHEMA(d2d587c796186e8b);
CAPNP_DECLARE_SCHEMA(f206f12e39ab7f9b);
CAPNP_DECLARE_SCHEMA(dbfe301c0ddefe4e);
CAPNP_DECLARE_SCHEMA(c5f724bd00c2f628);
CAPNP_DECLARE_SCHEMA(990bdcf2be83b604);
enum class HarvestTime_990bdcf2be83b604: uint16_t {
  MATURITY,
  UNKNOWN,
};
CAPNP_DECLARE_ENUM(HarvestTime, 990bdcf2be83b604);
CAPNP_DECLARE_SCHEMA(ea9236083718fdc2);
CAPNP_DECLARE_SCHEMA(de7576c640b5ad18);
CAPNP_DECLARE_SCHEMA(8491dc2c2f94f1d1);
CAPNP_DECLARE_SCHEMA(b42137d4b8ba3ef6);
CAPNP_DECLARE_SCHEMA(8890f17a143c6896);
CAPNP_DECLARE_SCHEMA(b599bbd2f1465f9c);
CAPNP_DECLARE_SCHEMA(c0ff4a277ca4be0a);
CAPNP_DECLARE_SCHEMA(e68d439455fd9cce);
CAPNP_DECLARE_SCHEMA(c1092d6c4c110e29);
CAPNP_DECLARE_SCHEMA(81b8ffeeb01d76f7);
CAPNP_DECLARE_SCHEMA(ffac0fa5c7156a5d);
CAPNP_DECLARE_SCHEMA(e4d6d0d9ae1553da);
CAPNP_DECLARE_SCHEMA(cdff1b0306ea58cf);
CAPNP_DECLARE_SCHEMA(b3e73f8c19afd787);
CAPNP_DECLARE_SCHEMA(f0c41d021228d929);
CAPNP_DECLARE_SCHEMA(c5cb65e585742338);
CAPNP_DECLARE_SCHEMA(b87956e2953771db);
CAPNP_DECLARE_SCHEMA(d9ed2c1c754d683e);
CAPNP_DECLARE_SCHEMA(d11f8d1479e2f010);
CAPNP_DECLARE_SCHEMA(80d5a7b782142e87);
CAPNP_DECLARE_SCHEMA(cf0f425c8bd69fa2);
CAPNP_DECLARE_SCHEMA(f246442c7aee0af5);
CAPNP_DECLARE_SCHEMA(f95db11410e33efc);
CAPNP_DECLARE_SCHEMA(ee0b04cc3f52f33c);
CAPNP_DECLARE_SCHEMA(c281c6e5be483337);
CAPNP_DECLARE_SCHEMA(e82d760b257daddb);
CAPNP_DECLARE_SCHEMA(c8aeb5222ac5ef40);
CAPNP_DECLARE_SCHEMA(ce5b0091fd9acb21);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace model {
namespace monica {

struct CropSpec {
  CropSpec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a74f5574681f9d55, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CropParameters {
  CropParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8ac5cfb21988c168, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SpeciesParameters {
  SpeciesParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2d587c796186e8b, 41, 10)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CultivarParameters {
  CultivarParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f206f12e39ab7f9b, 22, 15)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YieldComponent {
  YieldComponent() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dbfe301c0ddefe4e, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AutomaticHarvestParameters {
  AutomaticHarvestParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::HarvestTime_990bdcf2be83b604 HarvestTime;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c5f724bd00c2f628, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NMinCropParameters {
  NMinCropParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea9236083718fdc2, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NMinApplicationParameters {
  NMinApplicationParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de7576c640b5ad18, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CropResidueParameters {
  CropResidueParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8491dc2c2f94f1d1, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoilParameters {
  SoilParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b42137d4b8ba3ef6, 16, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AutomaticIrrigationParameters {
  AutomaticIrrigationParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8890f17a143c6896, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SiteParameters {
  SiteParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b599bbd2f1465f9c, 10, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EnvironmentParameters {
  EnvironmentParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct YearToValue;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0ff4a277ca4be0a, 9, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct EnvironmentParameters::YearToValue {
  YearToValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e68d439455fd9cce, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MeasuredGroundwaterTableInformation {
  MeasuredGroundwaterTableInformation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct DateToValue;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c1092d6c4c110e29, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MeasuredGroundwaterTableInformation::DateToValue {
  DateToValue() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(81b8ffeeb01d76f7, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SimulationParameters {
  SimulationParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ffac0fa5c7156a5d, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CropModuleParameters {
  CropModuleParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e4d6d0d9ae1553da, 16, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoilMoistureModuleParameters {
  SoilMoistureModuleParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cdff1b0306ea58cf, 24, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoilOrganicModuleParameters {
  SoilOrganicModuleParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b3e73f8c19afd787, 36, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoilTemperatureModuleParameters {
  SoilTemperatureModuleParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0c41d021228d929, 13, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SoilTransportModuleParameters {
  SoilTransportModuleParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c5cb65e585742338, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc {
  Voc() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Emissions;
  struct SpeciesData;
  struct CPData;
  struct MicroClimateData;
  struct PhotosynthT;
  struct FoliageT;
  struct EnzymeActivityT;
  struct LeafEmissionT;
  struct LeafEmissions;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b87956e2953771db, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::Emissions {
  Emissions() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SpeciesIdToEmission;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d9ed2c1c754d683e, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::Emissions::SpeciesIdToEmission {
  SpeciesIdToEmission() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d11f8d1479e2f010, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::SpeciesData {
  SpeciesData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(80d5a7b782142e87, 30, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::CPData {
  CPData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf0f425c8bd69fa2, 10, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::MicroClimateData {
  MicroClimateData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f246442c7aee0af5, 9, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::PhotosynthT {
  PhotosynthT() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f95db11410e33efc, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::FoliageT {
  FoliageT() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee0b04cc3f52f33c, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::EnzymeActivityT {
  EnzymeActivityT() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c281c6e5be483337, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::LeafEmissionT {
  LeafEmissionT() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e82d760b257daddb, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Voc::LeafEmissions {
  LeafEmissions() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8aeb5222ac5ef40, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SticsParameters {
  SticsParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce5b0091fd9acb21, 30, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class CropSpec::Reader {
public:
  typedef CropSpec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCropParams() const;
  inline  ::mas::schema::model::monica::CropParameters::Reader getCropParams() const;

  inline bool hasResidueParams() const;
  inline  ::mas::schema::model::monica::CropResidueParameters::Reader getResidueParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CropSpec::Builder {
public:
  typedef CropSpec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCropParams();
  inline  ::mas::schema::model::monica::CropParameters::Builder getCropParams();
  inline void setCropParams( ::mas::schema::model::monica::CropParameters::Reader value);
  inline  ::mas::schema::model::monica::CropParameters::Builder initCropParams();
  inline void adoptCropParams(::capnp::Orphan< ::mas::schema::model::monica::CropParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::CropParameters> disownCropParams();

  inline bool hasResidueParams();
  inline  ::mas::schema::model::monica::CropResidueParameters::Builder getResidueParams();
  inline void setResidueParams( ::mas::schema::model::monica::CropResidueParameters::Reader value);
  inline  ::mas::schema::model::monica::CropResidueParameters::Builder initResidueParams();
  inline void adoptResidueParams(::capnp::Orphan< ::mas::schema::model::monica::CropResidueParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::CropResidueParameters> disownResidueParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CropSpec::Pipeline {
public:
  typedef CropSpec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::CropParameters::Pipeline getCropParams();
  inline  ::mas::schema::model::monica::CropResidueParameters::Pipeline getResidueParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CropParameters::Reader {
public:
  typedef CropParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSpeciesParams() const;
  inline  ::mas::schema::model::monica::SpeciesParameters::Reader getSpeciesParams() const;

  inline bool hasCultivarParams() const;
  inline  ::mas::schema::model::monica::CultivarParameters::Reader getCultivarParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CropParameters::Builder {
public:
  typedef CropParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSpeciesParams();
  inline  ::mas::schema::model::monica::SpeciesParameters::Builder getSpeciesParams();
  inline void setSpeciesParams( ::mas::schema::model::monica::SpeciesParameters::Reader value);
  inline  ::mas::schema::model::monica::SpeciesParameters::Builder initSpeciesParams();
  inline void adoptSpeciesParams(::capnp::Orphan< ::mas::schema::model::monica::SpeciesParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::SpeciesParameters> disownSpeciesParams();

  inline bool hasCultivarParams();
  inline  ::mas::schema::model::monica::CultivarParameters::Builder getCultivarParams();
  inline void setCultivarParams( ::mas::schema::model::monica::CultivarParameters::Reader value);
  inline  ::mas::schema::model::monica::CultivarParameters::Builder initCultivarParams();
  inline void adoptCultivarParams(::capnp::Orphan< ::mas::schema::model::monica::CultivarParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::CultivarParameters> disownCultivarParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CropParameters::Pipeline {
public:
  typedef CropParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::SpeciesParameters::Pipeline getSpeciesParams();
  inline  ::mas::schema::model::monica::CultivarParameters::Pipeline getCultivarParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SpeciesParameters::Reader {
public:
  typedef SpeciesParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSpeciesId() const;
  inline  ::capnp::Text::Reader getSpeciesId() const;

  inline  ::uint8_t getCarboxylationPathway() const;

  inline double getDefaultRadiationUseEfficiency() const;

  inline double getPartBiologicalNFixation() const;

  inline double getInitialKcFactor() const;

  inline double getLuxuryNCoeff() const;

  inline double getMaxCropDiameter() const;

  inline double getStageAtMaxHeight() const;

  inline double getStageAtMaxDiameter() const;

  inline double getMinimumNConcentration() const;

  inline double getMinimumTemperatureForAssimilation() const;

  inline double getOptimumTemperatureForAssimilation() const;

  inline double getMaximumTemperatureForAssimilation() const;

  inline double getNConcentrationAbovegroundBiomass() const;

  inline double getNConcentrationB0() const;

  inline double getNConcentrationPN() const;

  inline double getNConcentrationRoot() const;

  inline  ::uint16_t getDevelopmentAccelerationByNitrogenStress() const;

  inline double getFieldConditionModifier() const;

  inline double getAssimilateReallocation() const;

  inline bool hasBaseTemperature() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getBaseTemperature() const;

  inline bool hasOrganMaintenanceRespiration() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getOrganMaintenanceRespiration() const;

  inline bool hasOrganGrowthRespiration() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getOrganGrowthRespiration() const;

  inline bool hasStageMaxRootNConcentration() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStageMaxRootNConcentration() const;

  inline bool hasInitialOrganBiomass() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getInitialOrganBiomass() const;

  inline bool hasCriticalOxygenContent() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getCriticalOxygenContent() const;

  inline bool hasStageMobilFromStorageCoeff() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStageMobilFromStorageCoeff() const;

  inline bool hasAbovegroundOrgan() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getAbovegroundOrgan() const;

  inline bool hasStorageOrgan() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getStorageOrgan() const;

  inline double getSamplingDepth() const;

  inline double getTargetNSamplingDepth() const;

  inline double getTargetN30() const;

  inline double getMaxNUptakeParam() const;

  inline double getRootDistributionParam() const;

  inline  ::uint16_t getPlantDensity() const;

  inline double getRootGrowthLag() const;

  inline double getMinimumTemperatureRootGrowth() const;

  inline double getInitialRootingDepth() const;

  inline double getRootPenetrationRate() const;

  inline double getRootFormFactor() const;

  inline double getSpecificRootLength() const;

  inline  ::uint16_t getStageAfterCut() const;

  inline double getLimitingTemperatureHeatStress() const;

  inline  ::uint16_t getCuttingDelayDays() const;

  inline double getDroughtImpactOnFertilityFactor() const;

  inline double getEfMono() const;

  inline double getEfMonos() const;

  inline double getEfIso() const;

  inline double getVcMax25() const;

  inline double getAekc() const;

  inline double getAeko() const;

  inline double getAevc() const;

  inline double getKc25() const;

  inline double getKo25() const;

  inline  ::int16_t getTransitionStageLeafExp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SpeciesParameters::Builder {
public:
  typedef SpeciesParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSpeciesId();
  inline  ::capnp::Text::Builder getSpeciesId();
  inline void setSpeciesId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSpeciesId(unsigned int size);
  inline void adoptSpeciesId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSpeciesId();

  inline  ::uint8_t getCarboxylationPathway();
  inline void setCarboxylationPathway( ::uint8_t value);

  inline double getDefaultRadiationUseEfficiency();
  inline void setDefaultRadiationUseEfficiency(double value);

  inline double getPartBiologicalNFixation();
  inline void setPartBiologicalNFixation(double value);

  inline double getInitialKcFactor();
  inline void setInitialKcFactor(double value);

  inline double getLuxuryNCoeff();
  inline void setLuxuryNCoeff(double value);

  inline double getMaxCropDiameter();
  inline void setMaxCropDiameter(double value);

  inline double getStageAtMaxHeight();
  inline void setStageAtMaxHeight(double value);

  inline double getStageAtMaxDiameter();
  inline void setStageAtMaxDiameter(double value);

  inline double getMinimumNConcentration();
  inline void setMinimumNConcentration(double value);

  inline double getMinimumTemperatureForAssimilation();
  inline void setMinimumTemperatureForAssimilation(double value);

  inline double getOptimumTemperatureForAssimilation();
  inline void setOptimumTemperatureForAssimilation(double value);

  inline double getMaximumTemperatureForAssimilation();
  inline void setMaximumTemperatureForAssimilation(double value);

  inline double getNConcentrationAbovegroundBiomass();
  inline void setNConcentrationAbovegroundBiomass(double value);

  inline double getNConcentrationB0();
  inline void setNConcentrationB0(double value);

  inline double getNConcentrationPN();
  inline void setNConcentrationPN(double value);

  inline double getNConcentrationRoot();
  inline void setNConcentrationRoot(double value);

  inline  ::uint16_t getDevelopmentAccelerationByNitrogenStress();
  inline void setDevelopmentAccelerationByNitrogenStress( ::uint16_t value);

  inline double getFieldConditionModifier();
  inline void setFieldConditionModifier(double value);

  inline double getAssimilateReallocation();
  inline void setAssimilateReallocation(double value);

  inline bool hasBaseTemperature();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getBaseTemperature();
  inline void setBaseTemperature( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBaseTemperature(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initBaseTemperature(unsigned int size);
  inline void adoptBaseTemperature(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownBaseTemperature();

  inline bool hasOrganMaintenanceRespiration();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getOrganMaintenanceRespiration();
  inline void setOrganMaintenanceRespiration( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOrganMaintenanceRespiration(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initOrganMaintenanceRespiration(unsigned int size);
  inline void adoptOrganMaintenanceRespiration(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownOrganMaintenanceRespiration();

  inline bool hasOrganGrowthRespiration();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getOrganGrowthRespiration();
  inline void setOrganGrowthRespiration( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOrganGrowthRespiration(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initOrganGrowthRespiration(unsigned int size);
  inline void adoptOrganGrowthRespiration(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownOrganGrowthRespiration();

  inline bool hasStageMaxRootNConcentration();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStageMaxRootNConcentration();
  inline void setStageMaxRootNConcentration( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStageMaxRootNConcentration(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStageMaxRootNConcentration(unsigned int size);
  inline void adoptStageMaxRootNConcentration(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStageMaxRootNConcentration();

  inline bool hasInitialOrganBiomass();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getInitialOrganBiomass();
  inline void setInitialOrganBiomass( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInitialOrganBiomass(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initInitialOrganBiomass(unsigned int size);
  inline void adoptInitialOrganBiomass(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownInitialOrganBiomass();

  inline bool hasCriticalOxygenContent();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getCriticalOxygenContent();
  inline void setCriticalOxygenContent( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCriticalOxygenContent(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initCriticalOxygenContent(unsigned int size);
  inline void adoptCriticalOxygenContent(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownCriticalOxygenContent();

  inline bool hasStageMobilFromStorageCoeff();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStageMobilFromStorageCoeff();
  inline void setStageMobilFromStorageCoeff( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStageMobilFromStorageCoeff(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStageMobilFromStorageCoeff(unsigned int size);
  inline void adoptStageMobilFromStorageCoeff(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStageMobilFromStorageCoeff();

  inline bool hasAbovegroundOrgan();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getAbovegroundOrgan();
  inline void setAbovegroundOrgan( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setAbovegroundOrgan(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initAbovegroundOrgan(unsigned int size);
  inline void adoptAbovegroundOrgan(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownAbovegroundOrgan();

  inline bool hasStorageOrgan();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getStorageOrgan();
  inline void setStorageOrgan( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStorageOrgan(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initStorageOrgan(unsigned int size);
  inline void adoptStorageOrgan(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownStorageOrgan();

  inline double getSamplingDepth();
  inline void setSamplingDepth(double value);

  inline double getTargetNSamplingDepth();
  inline void setTargetNSamplingDepth(double value);

  inline double getTargetN30();
  inline void setTargetN30(double value);

  inline double getMaxNUptakeParam();
  inline void setMaxNUptakeParam(double value);

  inline double getRootDistributionParam();
  inline void setRootDistributionParam(double value);

  inline  ::uint16_t getPlantDensity();
  inline void setPlantDensity( ::uint16_t value);

  inline double getRootGrowthLag();
  inline void setRootGrowthLag(double value);

  inline double getMinimumTemperatureRootGrowth();
  inline void setMinimumTemperatureRootGrowth(double value);

  inline double getInitialRootingDepth();
  inline void setInitialRootingDepth(double value);

  inline double getRootPenetrationRate();
  inline void setRootPenetrationRate(double value);

  inline double getRootFormFactor();
  inline void setRootFormFactor(double value);

  inline double getSpecificRootLength();
  inline void setSpecificRootLength(double value);

  inline  ::uint16_t getStageAfterCut();
  inline void setStageAfterCut( ::uint16_t value);

  inline double getLimitingTemperatureHeatStress();
  inline void setLimitingTemperatureHeatStress(double value);

  inline  ::uint16_t getCuttingDelayDays();
  inline void setCuttingDelayDays( ::uint16_t value);

  inline double getDroughtImpactOnFertilityFactor();
  inline void setDroughtImpactOnFertilityFactor(double value);

  inline double getEfMono();
  inline void setEfMono(double value);

  inline double getEfMonos();
  inline void setEfMonos(double value);

  inline double getEfIso();
  inline void setEfIso(double value);

  inline double getVcMax25();
  inline void setVcMax25(double value);

  inline double getAekc();
  inline void setAekc(double value);

  inline double getAeko();
  inline void setAeko(double value);

  inline double getAevc();
  inline void setAevc(double value);

  inline double getKc25();
  inline void setKc25(double value);

  inline double getKo25();
  inline void setKo25(double value);

  inline  ::int16_t getTransitionStageLeafExp();
  inline void setTransitionStageLeafExp( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SpeciesParameters::Pipeline {
public:
  typedef SpeciesParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CultivarParameters::Reader {
public:
  typedef CultivarParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCultivarId() const;
  inline  ::capnp::Text::Reader getCultivarId() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

  inline bool getPerennial() const;

  inline double getMaxAssimilationRate() const;

  inline double getMaxCropHeight() const;

  inline double getResidueNRatio() const;

  inline double getLt50cultivar() const;

  inline double getCropHeightP1() const;

  inline double getCropHeightP2() const;

  inline double getCropSpecificMaxRootingDepth() const;

  inline bool hasAssimilatePartitioningCoeff() const;
  inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getAssimilatePartitioningCoeff() const;

  inline bool hasOrganSenescenceRate() const;
  inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getOrganSenescenceRate() const;

  inline bool hasBaseDaylength() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getBaseDaylength() const;

  inline bool hasOptimumTemperature() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getOptimumTemperature() const;

  inline bool hasDaylengthRequirement() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getDaylengthRequirement() const;

  inline bool hasDroughtStressThreshold() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getDroughtStressThreshold() const;

  inline bool hasSpecificLeafArea() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getSpecificLeafArea() const;

  inline bool hasStageKcFactor() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStageKcFactor() const;

  inline bool hasStageTemperatureSum() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getStageTemperatureSum() const;

  inline bool hasVernalisationRequirement() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getVernalisationRequirement() const;

  inline double getHeatSumIrrigationStart() const;

  inline double getHeatSumIrrigationEnd() const;

  inline double getCriticalTemperatureHeatStress() const;

  inline double getBeginSensitivePhaseHeatStress() const;

  inline double getEndSensitivePhaseHeatStress() const;

  inline double getFrostHardening() const;

  inline double getFrostDehardening() const;

  inline double getLowTemperatureExposure() const;

  inline double getRespiratoryStress() const;

  inline  ::int16_t getLatestHarvestDoy() const;

  inline bool hasOrganIdsForPrimaryYield() const;
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader getOrganIdsForPrimaryYield() const;

  inline bool hasOrganIdsForSecondaryYield() const;
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader getOrganIdsForSecondaryYield() const;

  inline bool hasOrganIdsForCutting() const;
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader getOrganIdsForCutting() const;

  inline double getEarlyRefLeafExp() const;

  inline double getRefLeafExp() const;

  inline double getMinTempDevWE() const;

  inline double getOptTempDevWE() const;

  inline double getMaxTempDevWE() const;

  inline bool getWinterCrop() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CultivarParameters::Builder {
public:
  typedef CultivarParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCultivarId();
  inline  ::capnp::Text::Builder getCultivarId();
  inline void setCultivarId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCultivarId(unsigned int size);
  inline void adoptCultivarId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCultivarId();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

  inline bool getPerennial();
  inline void setPerennial(bool value);

  inline double getMaxAssimilationRate();
  inline void setMaxAssimilationRate(double value);

  inline double getMaxCropHeight();
  inline void setMaxCropHeight(double value);

  inline double getResidueNRatio();
  inline void setResidueNRatio(double value);

  inline double getLt50cultivar();
  inline void setLt50cultivar(double value);

  inline double getCropHeightP1();
  inline void setCropHeightP1(double value);

  inline double getCropHeightP2();
  inline void setCropHeightP2(double value);

  inline double getCropSpecificMaxRootingDepth();
  inline void setCropSpecificMaxRootingDepth(double value);

  inline bool hasAssimilatePartitioningCoeff();
  inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getAssimilatePartitioningCoeff();
  inline void setAssimilatePartitioningCoeff( ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setAssimilatePartitioningCoeff(::kj::ArrayPtr<const  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initAssimilatePartitioningCoeff(unsigned int size);
  inline void adoptAssimilatePartitioningCoeff(::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownAssimilatePartitioningCoeff();

  inline bool hasOrganSenescenceRate();
  inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getOrganSenescenceRate();
  inline void setOrganSenescenceRate( ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setOrganSenescenceRate(::kj::ArrayPtr<const  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initOrganSenescenceRate(unsigned int size);
  inline void adoptOrganSenescenceRate(::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownOrganSenescenceRate();

  inline bool hasBaseDaylength();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getBaseDaylength();
  inline void setBaseDaylength( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBaseDaylength(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initBaseDaylength(unsigned int size);
  inline void adoptBaseDaylength(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownBaseDaylength();

  inline bool hasOptimumTemperature();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getOptimumTemperature();
  inline void setOptimumTemperature( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOptimumTemperature(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initOptimumTemperature(unsigned int size);
  inline void adoptOptimumTemperature(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownOptimumTemperature();

  inline bool hasDaylengthRequirement();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getDaylengthRequirement();
  inline void setDaylengthRequirement( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDaylengthRequirement(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initDaylengthRequirement(unsigned int size);
  inline void adoptDaylengthRequirement(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownDaylengthRequirement();

  inline bool hasDroughtStressThreshold();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getDroughtStressThreshold();
  inline void setDroughtStressThreshold( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDroughtStressThreshold(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initDroughtStressThreshold(unsigned int size);
  inline void adoptDroughtStressThreshold(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownDroughtStressThreshold();

  inline bool hasSpecificLeafArea();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getSpecificLeafArea();
  inline void setSpecificLeafArea( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSpecificLeafArea(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initSpecificLeafArea(unsigned int size);
  inline void adoptSpecificLeafArea(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownSpecificLeafArea();

  inline bool hasStageKcFactor();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStageKcFactor();
  inline void setStageKcFactor( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStageKcFactor(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStageKcFactor(unsigned int size);
  inline void adoptStageKcFactor(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStageKcFactor();

  inline bool hasStageTemperatureSum();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getStageTemperatureSum();
  inline void setStageTemperatureSum( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setStageTemperatureSum(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initStageTemperatureSum(unsigned int size);
  inline void adoptStageTemperatureSum(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownStageTemperatureSum();

  inline bool hasVernalisationRequirement();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getVernalisationRequirement();
  inline void setVernalisationRequirement( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setVernalisationRequirement(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initVernalisationRequirement(unsigned int size);
  inline void adoptVernalisationRequirement(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownVernalisationRequirement();

  inline double getHeatSumIrrigationStart();
  inline void setHeatSumIrrigationStart(double value);

  inline double getHeatSumIrrigationEnd();
  inline void setHeatSumIrrigationEnd(double value);

  inline double getCriticalTemperatureHeatStress();
  inline void setCriticalTemperatureHeatStress(double value);

  inline double getBeginSensitivePhaseHeatStress();
  inline void setBeginSensitivePhaseHeatStress(double value);

  inline double getEndSensitivePhaseHeatStress();
  inline void setEndSensitivePhaseHeatStress(double value);

  inline double getFrostHardening();
  inline void setFrostHardening(double value);

  inline double getFrostDehardening();
  inline void setFrostDehardening(double value);

  inline double getLowTemperatureExposure();
  inline void setLowTemperatureExposure(double value);

  inline double getRespiratoryStress();
  inline void setRespiratoryStress(double value);

  inline  ::int16_t getLatestHarvestDoy();
  inline void setLatestHarvestDoy( ::int16_t value);

  inline bool hasOrganIdsForPrimaryYield();
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder getOrganIdsForPrimaryYield();
  inline void setOrganIdsForPrimaryYield( ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder initOrganIdsForPrimaryYield(unsigned int size);
  inline void adoptOrganIdsForPrimaryYield(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>> disownOrganIdsForPrimaryYield();

  inline bool hasOrganIdsForSecondaryYield();
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder getOrganIdsForSecondaryYield();
  inline void setOrganIdsForSecondaryYield( ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder initOrganIdsForSecondaryYield(unsigned int size);
  inline void adoptOrganIdsForSecondaryYield(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>> disownOrganIdsForSecondaryYield();

  inline bool hasOrganIdsForCutting();
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder getOrganIdsForCutting();
  inline void setOrganIdsForCutting( ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder initOrganIdsForCutting(unsigned int size);
  inline void adoptOrganIdsForCutting(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>> disownOrganIdsForCutting();

  inline double getEarlyRefLeafExp();
  inline void setEarlyRefLeafExp(double value);

  inline double getRefLeafExp();
  inline void setRefLeafExp(double value);

  inline double getMinTempDevWE();
  inline void setMinTempDevWE(double value);

  inline double getOptTempDevWE();
  inline void setOptTempDevWE(double value);

  inline double getMaxTempDevWE();
  inline void setMaxTempDevWE(double value);

  inline bool getWinterCrop();
  inline void setWinterCrop(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CultivarParameters::Pipeline {
public:
  typedef CultivarParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YieldComponent::Reader {
public:
  typedef YieldComponent Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int64_t getOrganId() const;

  inline double getYieldPercentage() const;

  inline double getYieldDryMatter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YieldComponent::Builder {
public:
  typedef YieldComponent Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int64_t getOrganId();
  inline void setOrganId( ::int64_t value);

  inline double getYieldPercentage();
  inline void setYieldPercentage(double value);

  inline double getYieldDryMatter();
  inline void setYieldDryMatter(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YieldComponent::Pipeline {
public:
  typedef YieldComponent Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AutomaticHarvestParameters::Reader {
public:
  typedef AutomaticHarvestParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime getHarvestTime() const;

  inline  ::int16_t getLatestHarvestDOY() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AutomaticHarvestParameters::Builder {
public:
  typedef AutomaticHarvestParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime getHarvestTime();
  inline void setHarvestTime( ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime value);

  inline  ::int16_t getLatestHarvestDOY();
  inline void setLatestHarvestDOY( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AutomaticHarvestParameters::Pipeline {
public:
  typedef AutomaticHarvestParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NMinCropParameters::Reader {
public:
  typedef NMinCropParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getSamplingDepth() const;

  inline double getNTarget() const;

  inline double getNTarget30() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NMinCropParameters::Builder {
public:
  typedef NMinCropParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getSamplingDepth();
  inline void setSamplingDepth(double value);

  inline double getNTarget();
  inline void setNTarget(double value);

  inline double getNTarget30();
  inline void setNTarget30(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NMinCropParameters::Pipeline {
public:
  typedef NMinCropParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NMinApplicationParameters::Reader {
public:
  typedef NMinApplicationParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getMin() const;

  inline double getMax() const;

  inline  ::uint16_t getDelayInDays() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NMinApplicationParameters::Builder {
public:
  typedef NMinApplicationParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getMin();
  inline void setMin(double value);

  inline double getMax();
  inline void setMax(double value);

  inline  ::uint16_t getDelayInDays();
  inline void setDelayInDays( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NMinApplicationParameters::Pipeline {
public:
  typedef NMinApplicationParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CropResidueParameters::Reader {
public:
  typedef CropResidueParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Reader getParams() const;

  inline bool hasSpecies() const;
  inline  ::capnp::Text::Reader getSpecies() const;

  inline bool hasResidueType() const;
  inline  ::capnp::Text::Reader getResidueType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CropResidueParameters::Builder {
public:
  typedef CropResidueParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Builder getParams();
  inline void setParams( ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Reader value);
  inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters> disownParams();

  inline bool hasSpecies();
  inline  ::capnp::Text::Builder getSpecies();
  inline void setSpecies( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSpecies(unsigned int size);
  inline void adoptSpecies(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSpecies();

  inline bool hasResidueType();
  inline  ::capnp::Text::Builder getResidueType();
  inline void setResidueType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initResidueType(unsigned int size);
  inline void adoptResidueType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownResidueType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CropResidueParameters::Pipeline {
public:
  typedef CropResidueParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoilParameters::Reader {
public:
  typedef SoilParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getSoilSandContent() const;

  inline double getSoilClayContent() const;

  inline double getSoilpH() const;

  inline double getSoilStoneContent() const;

  inline double getLambda() const;

  inline double getFieldCapacity() const;

  inline double getSaturation() const;

  inline double getPermanentWiltingPoint() const;

  inline bool hasSoilTexture() const;
  inline  ::capnp::Text::Reader getSoilTexture() const;

  inline double getSoilAmmonium() const;

  inline double getSoilNitrate() const;

  inline double getSoilCNRatio() const;

  inline double getSoilMoisturePercentFC() const;

  inline double getSoilRawDensity() const;

  inline double getSoilBulkDensity() const;

  inline double getSoilOrganicCarbon() const;

  inline double getSoilOrganicMatter() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoilParameters::Builder {
public:
  typedef SoilParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getSoilSandContent();
  inline void setSoilSandContent(double value);

  inline double getSoilClayContent();
  inline void setSoilClayContent(double value);

  inline double getSoilpH();
  inline void setSoilpH(double value);

  inline double getSoilStoneContent();
  inline void setSoilStoneContent(double value);

  inline double getLambda();
  inline void setLambda(double value);

  inline double getFieldCapacity();
  inline void setFieldCapacity(double value);

  inline double getSaturation();
  inline void setSaturation(double value);

  inline double getPermanentWiltingPoint();
  inline void setPermanentWiltingPoint(double value);

  inline bool hasSoilTexture();
  inline  ::capnp::Text::Builder getSoilTexture();
  inline void setSoilTexture( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSoilTexture(unsigned int size);
  inline void adoptSoilTexture(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSoilTexture();

  inline double getSoilAmmonium();
  inline void setSoilAmmonium(double value);

  inline double getSoilNitrate();
  inline void setSoilNitrate(double value);

  inline double getSoilCNRatio();
  inline void setSoilCNRatio(double value);

  inline double getSoilMoisturePercentFC();
  inline void setSoilMoisturePercentFC(double value);

  inline double getSoilRawDensity();
  inline void setSoilRawDensity(double value);

  inline double getSoilBulkDensity();
  inline void setSoilBulkDensity(double value);

  inline double getSoilOrganicCarbon();
  inline void setSoilOrganicCarbon(double value);

  inline double getSoilOrganicMatter();
  inline void setSoilOrganicMatter(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoilParameters::Pipeline {
public:
  typedef SoilParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AutomaticIrrigationParameters::Reader {
public:
  typedef AutomaticIrrigationParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::mas::schema::management::Params::Irrigation::Parameters::Reader getParams() const;

  inline double getAmount() const;

  inline double getThreshold() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AutomaticIrrigationParameters::Builder {
public:
  typedef AutomaticIrrigationParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::mas::schema::management::Params::Irrigation::Parameters::Builder getParams();
  inline void setParams( ::mas::schema::management::Params::Irrigation::Parameters::Reader value);
  inline  ::mas::schema::management::Params::Irrigation::Parameters::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::mas::schema::management::Params::Irrigation::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::management::Params::Irrigation::Parameters> disownParams();

  inline double getAmount();
  inline void setAmount(double value);

  inline double getThreshold();
  inline void setThreshold(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AutomaticIrrigationParameters::Pipeline {
public:
  typedef AutomaticIrrigationParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::management::Params::Irrigation::Parameters::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SiteParameters::Reader {
public:
  typedef SiteParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getLatitude() const;

  inline double getSlope() const;

  inline double getHeightNN() const;

  inline double getGroundwaterDepth() const;

  inline double getSoilCNRatio() const;

  inline double getDrainageCoeff() const;

  inline double getVqNDeposition() const;

  inline double getMaxEffectiveRootingDepth() const;

  inline double getImpenetrableLayerDepth() const;

  inline double getSoilSpecificHumusBalanceCorrection() const;

  inline bool hasSoilParameters() const;
  inline  ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Reader getSoilParameters() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SiteParameters::Builder {
public:
  typedef SiteParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getLatitude();
  inline void setLatitude(double value);

  inline double getSlope();
  inline void setSlope(double value);

  inline double getHeightNN();
  inline void setHeightNN(double value);

  inline double getGroundwaterDepth();
  inline void setGroundwaterDepth(double value);

  inline double getSoilCNRatio();
  inline void setSoilCNRatio(double value);

  inline double getDrainageCoeff();
  inline void setDrainageCoeff(double value);

  inline double getVqNDeposition();
  inline void setVqNDeposition(double value);

  inline double getMaxEffectiveRootingDepth();
  inline void setMaxEffectiveRootingDepth(double value);

  inline double getImpenetrableLayerDepth();
  inline void setImpenetrableLayerDepth(double value);

  inline double getSoilSpecificHumusBalanceCorrection();
  inline void setSoilSpecificHumusBalanceCorrection(double value);

  inline bool hasSoilParameters();
  inline  ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Builder getSoilParameters();
  inline void setSoilParameters( ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Builder initSoilParameters(unsigned int size);
  inline void adoptSoilParameters(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>> disownSoilParameters();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SiteParameters::Pipeline {
public:
  typedef SiteParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EnvironmentParameters::Reader {
public:
  typedef EnvironmentParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getAlbedo() const;

  inline double getAtmosphericCO2() const;

  inline bool hasAtmosphericCO2s() const;
  inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader getAtmosphericCO2s() const;

  inline double getAtmosphericO3() const;

  inline bool hasAtmosphericO3s() const;
  inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader getAtmosphericO3s() const;

  inline double getWindSpeedHeight() const;

  inline double getLeachingDepth() const;

  inline double getTimeStep() const;

  inline double getMaxGroundwaterDepth() const;

  inline double getMinGroundwaterDepth() const;

  inline  ::uint8_t getMinGroundwaterDepthMonth() const;

  inline  ::mas::schema::climate::RCP getRcp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EnvironmentParameters::Builder {
public:
  typedef EnvironmentParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getAlbedo();
  inline void setAlbedo(double value);

  inline double getAtmosphericCO2();
  inline void setAtmosphericCO2(double value);

  inline bool hasAtmosphericCO2s();
  inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder getAtmosphericCO2s();
  inline void setAtmosphericCO2s( ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder initAtmosphericCO2s(unsigned int size);
  inline void adoptAtmosphericCO2s(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>> disownAtmosphericCO2s();

  inline double getAtmosphericO3();
  inline void setAtmosphericO3(double value);

  inline bool hasAtmosphericO3s();
  inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder getAtmosphericO3s();
  inline void setAtmosphericO3s( ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder initAtmosphericO3s(unsigned int size);
  inline void adoptAtmosphericO3s(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>> disownAtmosphericO3s();

  inline double getWindSpeedHeight();
  inline void setWindSpeedHeight(double value);

  inline double getLeachingDepth();
  inline void setLeachingDepth(double value);

  inline double getTimeStep();
  inline void setTimeStep(double value);

  inline double getMaxGroundwaterDepth();
  inline void setMaxGroundwaterDepth(double value);

  inline double getMinGroundwaterDepth();
  inline void setMinGroundwaterDepth(double value);

  inline  ::uint8_t getMinGroundwaterDepthMonth();
  inline void setMinGroundwaterDepthMonth( ::uint8_t value);

  inline  ::mas::schema::climate::RCP getRcp();
  inline void setRcp( ::mas::schema::climate::RCP value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EnvironmentParameters::Pipeline {
public:
  typedef EnvironmentParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class EnvironmentParameters::YearToValue::Reader {
public:
  typedef YearToValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getYear() const;

  inline double getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class EnvironmentParameters::YearToValue::Builder {
public:
  typedef YearToValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getYear();
  inline void setYear( ::uint16_t value);

  inline double getValue();
  inline void setValue(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class EnvironmentParameters::YearToValue::Pipeline {
public:
  typedef YearToValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MeasuredGroundwaterTableInformation::Reader {
public:
  typedef MeasuredGroundwaterTableInformation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getGroundwaterInformationAvailable() const;

  inline bool hasGroundwaterInfo() const;
  inline  ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Reader getGroundwaterInfo() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MeasuredGroundwaterTableInformation::Builder {
public:
  typedef MeasuredGroundwaterTableInformation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getGroundwaterInformationAvailable();
  inline void setGroundwaterInformationAvailable(bool value);

  inline bool hasGroundwaterInfo();
  inline  ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Builder getGroundwaterInfo();
  inline void setGroundwaterInfo( ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Builder initGroundwaterInfo(unsigned int size);
  inline void adoptGroundwaterInfo(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>> disownGroundwaterInfo();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MeasuredGroundwaterTableInformation::Pipeline {
public:
  typedef MeasuredGroundwaterTableInformation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MeasuredGroundwaterTableInformation::DateToValue::Reader {
public:
  typedef DateToValue Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

  inline double getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MeasuredGroundwaterTableInformation::DateToValue::Builder {
public:
  typedef DateToValue Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

  inline double getValue();
  inline void setValue(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MeasuredGroundwaterTableInformation::DateToValue::Pipeline {
public:
  typedef DateToValue Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SimulationParameters::Reader {
public:
  typedef SimulationParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStartDate() const;
  inline  ::mas::schema::common::Date::Reader getStartDate() const;

  inline bool hasEndDate() const;
  inline  ::mas::schema::common::Date::Reader getEndDate() const;

  inline bool getNitrogenResponseOn() const;

  inline bool getWaterDeficitResponseOn() const;

  inline bool getEmergenceFloodingControlOn() const;

  inline bool getEmergenceMoistureControlOn() const;

  inline bool getFrostKillOn() const;

  inline bool getUseAutomaticIrrigation() const;

  inline bool hasAutoIrrigationParams() const;
  inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Reader getAutoIrrigationParams() const;

  inline bool getUseNMinMineralFertilisingMethod() const;

  inline bool hasNMinFertiliserPartition() const;
  inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Reader getNMinFertiliserPartition() const;

  inline bool hasNMinApplicationParams() const;
  inline  ::mas::schema::model::monica::NMinApplicationParameters::Reader getNMinApplicationParams() const;

  inline bool getUseSecondaryYields() const;

  inline bool getUseAutomaticHarvestTrigger() const;

  inline  ::uint16_t getNumberOfLayers() const;

  inline double getLayerThickness() const;

  inline  ::uint16_t getStartPVIndex() const;

  inline  ::uint16_t getJulianDayAutomaticFertilising() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SimulationParameters::Builder {
public:
  typedef SimulationParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStartDate();
  inline  ::mas::schema::common::Date::Builder getStartDate();
  inline void setStartDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initStartDate();
  inline void adoptStartDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownStartDate();

  inline bool hasEndDate();
  inline  ::mas::schema::common::Date::Builder getEndDate();
  inline void setEndDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initEndDate();
  inline void adoptEndDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownEndDate();

  inline bool getNitrogenResponseOn();
  inline void setNitrogenResponseOn(bool value);

  inline bool getWaterDeficitResponseOn();
  inline void setWaterDeficitResponseOn(bool value);

  inline bool getEmergenceFloodingControlOn();
  inline void setEmergenceFloodingControlOn(bool value);

  inline bool getEmergenceMoistureControlOn();
  inline void setEmergenceMoistureControlOn(bool value);

  inline bool getFrostKillOn();
  inline void setFrostKillOn(bool value);

  inline bool getUseAutomaticIrrigation();
  inline void setUseAutomaticIrrigation(bool value);

  inline bool hasAutoIrrigationParams();
  inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Builder getAutoIrrigationParams();
  inline void setAutoIrrigationParams( ::mas::schema::model::monica::AutomaticIrrigationParameters::Reader value);
  inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Builder initAutoIrrigationParams();
  inline void adoptAutoIrrigationParams(::capnp::Orphan< ::mas::schema::model::monica::AutomaticIrrigationParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::AutomaticIrrigationParameters> disownAutoIrrigationParams();

  inline bool getUseNMinMineralFertilisingMethod();
  inline void setUseNMinMineralFertilisingMethod(bool value);

  inline bool hasNMinFertiliserPartition();
  inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Builder getNMinFertiliserPartition();
  inline void setNMinFertiliserPartition( ::mas::schema::management::Params::MineralFertilization::Parameters::Reader value);
  inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Builder initNMinFertiliserPartition();
  inline void adoptNMinFertiliserPartition(::capnp::Orphan< ::mas::schema::management::Params::MineralFertilization::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::management::Params::MineralFertilization::Parameters> disownNMinFertiliserPartition();

  inline bool hasNMinApplicationParams();
  inline  ::mas::schema::model::monica::NMinApplicationParameters::Builder getNMinApplicationParams();
  inline void setNMinApplicationParams( ::mas::schema::model::monica::NMinApplicationParameters::Reader value);
  inline  ::mas::schema::model::monica::NMinApplicationParameters::Builder initNMinApplicationParams();
  inline void adoptNMinApplicationParams(::capnp::Orphan< ::mas::schema::model::monica::NMinApplicationParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::NMinApplicationParameters> disownNMinApplicationParams();

  inline bool getUseSecondaryYields();
  inline void setUseSecondaryYields(bool value);

  inline bool getUseAutomaticHarvestTrigger();
  inline void setUseAutomaticHarvestTrigger(bool value);

  inline  ::uint16_t getNumberOfLayers();
  inline void setNumberOfLayers( ::uint16_t value);

  inline double getLayerThickness();
  inline void setLayerThickness(double value);

  inline  ::uint16_t getStartPVIndex();
  inline void setStartPVIndex( ::uint16_t value);

  inline  ::uint16_t getJulianDayAutomaticFertilising();
  inline void setJulianDayAutomaticFertilising( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SimulationParameters::Pipeline {
public:
  typedef SimulationParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getStartDate();
  inline  ::mas::schema::common::Date::Pipeline getEndDate();
  inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Pipeline getAutoIrrigationParams();
  inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Pipeline getNMinFertiliserPartition();
  inline  ::mas::schema::model::monica::NMinApplicationParameters::Pipeline getNMinApplicationParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CropModuleParameters::Reader {
public:
  typedef CropModuleParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getCanopyReflectionCoefficient() const;

  inline double getReferenceMaxAssimilationRate() const;

  inline double getReferenceLeafAreaIndex() const;

  inline double getMaintenanceRespirationParameter1() const;

  inline double getMaintenanceRespirationParameter2() const;

  inline double getMinimumNConcentrationRoot() const;

  inline double getMinimumAvailableN() const;

  inline double getReferenceAlbedo() const;

  inline double getStomataConductanceAlpha() const;

  inline double getSaturationBeta() const;

  inline double getGrowthRespirationRedux() const;

  inline double getMaxCropNDemand() const;

  inline double getGrowthRespirationParameter1() const;

  inline double getGrowthRespirationParameter2() const;

  inline double getTortuosity() const;

  inline bool getAdjustRootDepthForSoilProps() const;

  inline bool getExperimentalEnablePhenologyWangEngelTemperatureResponse() const;

  inline bool getExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() const;

  inline bool getExperimentalEnableHourlyFvCBPhotosynthesis() const;

  inline bool getExperimentalEnableTResponseLeafExpansion() const;

  inline bool getExperimentalDisableDailyRootBiomassToSoil() const;

  inline bool getEnableVernalisationFactorFix() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CropModuleParameters::Builder {
public:
  typedef CropModuleParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getCanopyReflectionCoefficient();
  inline void setCanopyReflectionCoefficient(double value);

  inline double getReferenceMaxAssimilationRate();
  inline void setReferenceMaxAssimilationRate(double value);

  inline double getReferenceLeafAreaIndex();
  inline void setReferenceLeafAreaIndex(double value);

  inline double getMaintenanceRespirationParameter1();
  inline void setMaintenanceRespirationParameter1(double value);

  inline double getMaintenanceRespirationParameter2();
  inline void setMaintenanceRespirationParameter2(double value);

  inline double getMinimumNConcentrationRoot();
  inline void setMinimumNConcentrationRoot(double value);

  inline double getMinimumAvailableN();
  inline void setMinimumAvailableN(double value);

  inline double getReferenceAlbedo();
  inline void setReferenceAlbedo(double value);

  inline double getStomataConductanceAlpha();
  inline void setStomataConductanceAlpha(double value);

  inline double getSaturationBeta();
  inline void setSaturationBeta(double value);

  inline double getGrowthRespirationRedux();
  inline void setGrowthRespirationRedux(double value);

  inline double getMaxCropNDemand();
  inline void setMaxCropNDemand(double value);

  inline double getGrowthRespirationParameter1();
  inline void setGrowthRespirationParameter1(double value);

  inline double getGrowthRespirationParameter2();
  inline void setGrowthRespirationParameter2(double value);

  inline double getTortuosity();
  inline void setTortuosity(double value);

  inline bool getAdjustRootDepthForSoilProps();
  inline void setAdjustRootDepthForSoilProps(bool value);

  inline bool getExperimentalEnablePhenologyWangEngelTemperatureResponse();
  inline void setExperimentalEnablePhenologyWangEngelTemperatureResponse(bool value);

  inline bool getExperimentalEnablePhotosynthesisWangEngelTemperatureResponse();
  inline void setExperimentalEnablePhotosynthesisWangEngelTemperatureResponse(bool value);

  inline bool getExperimentalEnableHourlyFvCBPhotosynthesis();
  inline void setExperimentalEnableHourlyFvCBPhotosynthesis(bool value);

  inline bool getExperimentalEnableTResponseLeafExpansion();
  inline void setExperimentalEnableTResponseLeafExpansion(bool value);

  inline bool getExperimentalDisableDailyRootBiomassToSoil();
  inline void setExperimentalDisableDailyRootBiomassToSoil(bool value);

  inline bool getEnableVernalisationFactorFix();
  inline void setEnableVernalisationFactorFix(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CropModuleParameters::Pipeline {
public:
  typedef CropModuleParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoilMoistureModuleParameters::Reader {
public:
  typedef SoilMoistureModuleParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getCriticalMoistureDepth() const;

  inline double getSaturatedHydraulicConductivity() const;

  inline double getSurfaceRoughness() const;

  inline double getGroundwaterDischarge() const;

  inline double getHydraulicConductivityRedux() const;

  inline double getSnowAccumulationTresholdTemperature() const;

  inline double getKcFactor() const;

  inline double getTemperatureLimitForLiquidWater() const;

  inline double getCorrectionSnow() const;

  inline double getCorrectionRain() const;

  inline double getSnowMaxAdditionalDensity() const;

  inline double getNewSnowDensityMin() const;

  inline double getSnowRetentionCapacityMin() const;

  inline double getRefreezeParameter1() const;

  inline double getRefreezeParameter2() const;

  inline double getRefreezeTemperature() const;

  inline double getSnowMeltTemperature() const;

  inline double getSnowPacking() const;

  inline double getSnowRetentionCapacityMax() const;

  inline double getEvaporationZeta() const;

  inline double getXsaCriticalSoilMoisture() const;

  inline double getMaximumEvaporationImpactDepth() const;

  inline double getMaxPercolationRate() const;

  inline double getMoistureInitValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoilMoistureModuleParameters::Builder {
public:
  typedef SoilMoistureModuleParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getCriticalMoistureDepth();
  inline void setCriticalMoistureDepth(double value);

  inline double getSaturatedHydraulicConductivity();
  inline void setSaturatedHydraulicConductivity(double value);

  inline double getSurfaceRoughness();
  inline void setSurfaceRoughness(double value);

  inline double getGroundwaterDischarge();
  inline void setGroundwaterDischarge(double value);

  inline double getHydraulicConductivityRedux();
  inline void setHydraulicConductivityRedux(double value);

  inline double getSnowAccumulationTresholdTemperature();
  inline void setSnowAccumulationTresholdTemperature(double value);

  inline double getKcFactor();
  inline void setKcFactor(double value);

  inline double getTemperatureLimitForLiquidWater();
  inline void setTemperatureLimitForLiquidWater(double value);

  inline double getCorrectionSnow();
  inline void setCorrectionSnow(double value);

  inline double getCorrectionRain();
  inline void setCorrectionRain(double value);

  inline double getSnowMaxAdditionalDensity();
  inline void setSnowMaxAdditionalDensity(double value);

  inline double getNewSnowDensityMin();
  inline void setNewSnowDensityMin(double value);

  inline double getSnowRetentionCapacityMin();
  inline void setSnowRetentionCapacityMin(double value);

  inline double getRefreezeParameter1();
  inline void setRefreezeParameter1(double value);

  inline double getRefreezeParameter2();
  inline void setRefreezeParameter2(double value);

  inline double getRefreezeTemperature();
  inline void setRefreezeTemperature(double value);

  inline double getSnowMeltTemperature();
  inline void setSnowMeltTemperature(double value);

  inline double getSnowPacking();
  inline void setSnowPacking(double value);

  inline double getSnowRetentionCapacityMax();
  inline void setSnowRetentionCapacityMax(double value);

  inline double getEvaporationZeta();
  inline void setEvaporationZeta(double value);

  inline double getXsaCriticalSoilMoisture();
  inline void setXsaCriticalSoilMoisture(double value);

  inline double getMaximumEvaporationImpactDepth();
  inline void setMaximumEvaporationImpactDepth(double value);

  inline double getMaxPercolationRate();
  inline void setMaxPercolationRate(double value);

  inline double getMoistureInitValue();
  inline void setMoistureInitValue(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoilMoistureModuleParameters::Pipeline {
public:
  typedef SoilMoistureModuleParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoilOrganicModuleParameters::Reader {
public:
  typedef SoilOrganicModuleParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getSomSlowDecCoeffStandard() const;

  inline double getSomFastDecCoeffStandard() const;

  inline double getSmbSlowMaintRateStandard() const;

  inline double getSmbFastMaintRateStandard() const;

  inline double getSmbSlowDeathRateStandard() const;

  inline double getSmbFastDeathRateStandard() const;

  inline double getSmbUtilizationEfficiency() const;

  inline double getSomSlowUtilizationEfficiency() const;

  inline double getSomFastUtilizationEfficiency() const;

  inline double getAomSlowUtilizationEfficiency() const;

  inline double getAomFastUtilizationEfficiency() const;

  inline double getAomFastMaxCtoN() const;

  inline double getPartSOMFastToSOMSlow() const;

  inline double getPartSMBSlowToSOMFast() const;

  inline double getPartSMBFastToSOMFast() const;

  inline double getPartSOMToSMBSlow() const;

  inline double getPartSOMToSMBFast() const;

  inline double getCnRatioSMB() const;

  inline double getLimitClayEffect() const;

  inline double getAmmoniaOxidationRateCoeffStandard() const;

  inline double getNitriteOxidationRateCoeffStandard() const;

  inline double getTransportRateCoeff() const;

  inline double getSpecAnaerobDenitrification() const;

  inline double getImmobilisationRateCoeffNO3() const;

  inline double getImmobilisationRateCoeffNH4() const;

  inline double getDenit1() const;

  inline double getDenit2() const;

  inline double getDenit3() const;

  inline double getHydrolysisKM() const;

  inline double getActivationEnergy() const;

  inline double getHydrolysisP1() const;

  inline double getHydrolysisP2() const;

  inline double getAtmosphericResistance() const;

  inline double getN2oProductionRate() const;

  inline double getInhibitorNH3() const;

  inline double getPsMaxMineralisationDepth() const;

  inline bool hasSticsParams() const;
  inline  ::mas::schema::model::monica::SticsParameters::Reader getSticsParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoilOrganicModuleParameters::Builder {
public:
  typedef SoilOrganicModuleParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getSomSlowDecCoeffStandard();
  inline void setSomSlowDecCoeffStandard(double value);

  inline double getSomFastDecCoeffStandard();
  inline void setSomFastDecCoeffStandard(double value);

  inline double getSmbSlowMaintRateStandard();
  inline void setSmbSlowMaintRateStandard(double value);

  inline double getSmbFastMaintRateStandard();
  inline void setSmbFastMaintRateStandard(double value);

  inline double getSmbSlowDeathRateStandard();
  inline void setSmbSlowDeathRateStandard(double value);

  inline double getSmbFastDeathRateStandard();
  inline void setSmbFastDeathRateStandard(double value);

  inline double getSmbUtilizationEfficiency();
  inline void setSmbUtilizationEfficiency(double value);

  inline double getSomSlowUtilizationEfficiency();
  inline void setSomSlowUtilizationEfficiency(double value);

  inline double getSomFastUtilizationEfficiency();
  inline void setSomFastUtilizationEfficiency(double value);

  inline double getAomSlowUtilizationEfficiency();
  inline void setAomSlowUtilizationEfficiency(double value);

  inline double getAomFastUtilizationEfficiency();
  inline void setAomFastUtilizationEfficiency(double value);

  inline double getAomFastMaxCtoN();
  inline void setAomFastMaxCtoN(double value);

  inline double getPartSOMFastToSOMSlow();
  inline void setPartSOMFastToSOMSlow(double value);

  inline double getPartSMBSlowToSOMFast();
  inline void setPartSMBSlowToSOMFast(double value);

  inline double getPartSMBFastToSOMFast();
  inline void setPartSMBFastToSOMFast(double value);

  inline double getPartSOMToSMBSlow();
  inline void setPartSOMToSMBSlow(double value);

  inline double getPartSOMToSMBFast();
  inline void setPartSOMToSMBFast(double value);

  inline double getCnRatioSMB();
  inline void setCnRatioSMB(double value);

  inline double getLimitClayEffect();
  inline void setLimitClayEffect(double value);

  inline double getAmmoniaOxidationRateCoeffStandard();
  inline void setAmmoniaOxidationRateCoeffStandard(double value);

  inline double getNitriteOxidationRateCoeffStandard();
  inline void setNitriteOxidationRateCoeffStandard(double value);

  inline double getTransportRateCoeff();
  inline void setTransportRateCoeff(double value);

  inline double getSpecAnaerobDenitrification();
  inline void setSpecAnaerobDenitrification(double value);

  inline double getImmobilisationRateCoeffNO3();
  inline void setImmobilisationRateCoeffNO3(double value);

  inline double getImmobilisationRateCoeffNH4();
  inline void setImmobilisationRateCoeffNH4(double value);

  inline double getDenit1();
  inline void setDenit1(double value);

  inline double getDenit2();
  inline void setDenit2(double value);

  inline double getDenit3();
  inline void setDenit3(double value);

  inline double getHydrolysisKM();
  inline void setHydrolysisKM(double value);

  inline double getActivationEnergy();
  inline void setActivationEnergy(double value);

  inline double getHydrolysisP1();
  inline void setHydrolysisP1(double value);

  inline double getHydrolysisP2();
  inline void setHydrolysisP2(double value);

  inline double getAtmosphericResistance();
  inline void setAtmosphericResistance(double value);

  inline double getN2oProductionRate();
  inline void setN2oProductionRate(double value);

  inline double getInhibitorNH3();
  inline void setInhibitorNH3(double value);

  inline double getPsMaxMineralisationDepth();
  inline void setPsMaxMineralisationDepth(double value);

  inline bool hasSticsParams();
  inline  ::mas::schema::model::monica::SticsParameters::Builder getSticsParams();
  inline void setSticsParams( ::mas::schema::model::monica::SticsParameters::Reader value);
  inline  ::mas::schema::model::monica::SticsParameters::Builder initSticsParams();
  inline void adoptSticsParams(::capnp::Orphan< ::mas::schema::model::monica::SticsParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::SticsParameters> disownSticsParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoilOrganicModuleParameters::Pipeline {
public:
  typedef SoilOrganicModuleParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::SticsParameters::Pipeline getSticsParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoilTemperatureModuleParameters::Reader {
public:
  typedef SoilTemperatureModuleParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getNTau() const;

  inline double getInitialSurfaceTemperature() const;

  inline double getBaseTemperature() const;

  inline double getQuartzRawDensity() const;

  inline double getDensityAir() const;

  inline double getDensityWater() const;

  inline double getDensityHumus() const;

  inline double getSpecificHeatCapacityAir() const;

  inline double getSpecificHeatCapacityQuartz() const;

  inline double getSpecificHeatCapacityWater() const;

  inline double getSpecificHeatCapacityHumus() const;

  inline double getSoilAlbedo() const;

  inline double getSoilMoisture() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoilTemperatureModuleParameters::Builder {
public:
  typedef SoilTemperatureModuleParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getNTau();
  inline void setNTau(double value);

  inline double getInitialSurfaceTemperature();
  inline void setInitialSurfaceTemperature(double value);

  inline double getBaseTemperature();
  inline void setBaseTemperature(double value);

  inline double getQuartzRawDensity();
  inline void setQuartzRawDensity(double value);

  inline double getDensityAir();
  inline void setDensityAir(double value);

  inline double getDensityWater();
  inline void setDensityWater(double value);

  inline double getDensityHumus();
  inline void setDensityHumus(double value);

  inline double getSpecificHeatCapacityAir();
  inline void setSpecificHeatCapacityAir(double value);

  inline double getSpecificHeatCapacityQuartz();
  inline void setSpecificHeatCapacityQuartz(double value);

  inline double getSpecificHeatCapacityWater();
  inline void setSpecificHeatCapacityWater(double value);

  inline double getSpecificHeatCapacityHumus();
  inline void setSpecificHeatCapacityHumus(double value);

  inline double getSoilAlbedo();
  inline void setSoilAlbedo(double value);

  inline double getSoilMoisture();
  inline void setSoilMoisture(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoilTemperatureModuleParameters::Pipeline {
public:
  typedef SoilTemperatureModuleParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SoilTransportModuleParameters::Reader {
public:
  typedef SoilTransportModuleParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getDispersionLength() const;

  inline double getAd() const;

  inline double getDiffusionCoefficientStandard() const;

  inline double getNDeposition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SoilTransportModuleParameters::Builder {
public:
  typedef SoilTransportModuleParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getDispersionLength();
  inline void setDispersionLength(double value);

  inline double getAd();
  inline void setAd(double value);

  inline double getDiffusionCoefficientStandard();
  inline void setDiffusionCoefficientStandard(double value);

  inline double getNDeposition();
  inline void setNDeposition(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SoilTransportModuleParameters::Pipeline {
public:
  typedef SoilTransportModuleParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::Reader {
public:
  typedef Voc Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::Builder {
public:
  typedef Voc Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::Pipeline {
public:
  typedef Voc Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::Emissions::Reader {
public:
  typedef Emissions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSpeciesIdToIsopreneEmission() const;
  inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader getSpeciesIdToIsopreneEmission() const;

  inline bool hasSpeciesIdToMonoterpeneEmission() const;
  inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader getSpeciesIdToMonoterpeneEmission() const;

  inline double getIsopreneEmission() const;

  inline double getMonoterpeneEmission() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::Emissions::Builder {
public:
  typedef Emissions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSpeciesIdToIsopreneEmission();
  inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder getSpeciesIdToIsopreneEmission();
  inline void setSpeciesIdToIsopreneEmission( ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder initSpeciesIdToIsopreneEmission(unsigned int size);
  inline void adoptSpeciesIdToIsopreneEmission(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>> disownSpeciesIdToIsopreneEmission();

  inline bool hasSpeciesIdToMonoterpeneEmission();
  inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder getSpeciesIdToMonoterpeneEmission();
  inline void setSpeciesIdToMonoterpeneEmission( ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder initSpeciesIdToMonoterpeneEmission(unsigned int size);
  inline void adoptSpeciesIdToMonoterpeneEmission(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>> disownSpeciesIdToMonoterpeneEmission();

  inline double getIsopreneEmission();
  inline void setIsopreneEmission(double value);

  inline double getMonoterpeneEmission();
  inline void setMonoterpeneEmission(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::Emissions::Pipeline {
public:
  typedef Emissions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::Emissions::SpeciesIdToEmission::Reader {
public:
  typedef SpeciesIdToEmission Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSpeciesId() const;

  inline double getEmission() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::Emissions::SpeciesIdToEmission::Builder {
public:
  typedef SpeciesIdToEmission Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSpeciesId();
  inline void setSpeciesId( ::uint64_t value);

  inline double getEmission();
  inline void setEmission(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::Emissions::SpeciesIdToEmission::Pipeline {
public:
  typedef SpeciesIdToEmission Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::SpeciesData::Reader {
public:
  typedef SpeciesData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId() const;

  inline double getEfMonos() const;

  inline double getEfMono() const;

  inline double getEfIso() const;

  inline double getTheta() const;

  inline double getFage() const;

  inline double getCtIs() const;

  inline double getCtMt() const;

  inline double getHaIs() const;

  inline double getHaMt() const;

  inline double getDsIs() const;

  inline double getDsMt() const;

  inline double getHdIs() const;

  inline double getHdMt() const;

  inline double getHdj() const;

  inline double getSdj() const;

  inline double getKc25() const;

  inline double getKo25() const;

  inline double getVcMax25() const;

  inline double getQjvc() const;

  inline double getAekc() const;

  inline double getAeko() const;

  inline double getAejm() const;

  inline double getAevc() const;

  inline double getSlaMin() const;

  inline double getScaleI() const;

  inline double getScaleM() const;

  inline double getMFol() const;

  inline double getLai() const;

  inline double getSla() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::SpeciesData::Builder {
public:
  typedef SpeciesData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline double getEfMonos();
  inline void setEfMonos(double value);

  inline double getEfMono();
  inline void setEfMono(double value);

  inline double getEfIso();
  inline void setEfIso(double value);

  inline double getTheta();
  inline void setTheta(double value);

  inline double getFage();
  inline void setFage(double value);

  inline double getCtIs();
  inline void setCtIs(double value);

  inline double getCtMt();
  inline void setCtMt(double value);

  inline double getHaIs();
  inline void setHaIs(double value);

  inline double getHaMt();
  inline void setHaMt(double value);

  inline double getDsIs();
  inline void setDsIs(double value);

  inline double getDsMt();
  inline void setDsMt(double value);

  inline double getHdIs();
  inline void setHdIs(double value);

  inline double getHdMt();
  inline void setHdMt(double value);

  inline double getHdj();
  inline void setHdj(double value);

  inline double getSdj();
  inline void setSdj(double value);

  inline double getKc25();
  inline void setKc25(double value);

  inline double getKo25();
  inline void setKo25(double value);

  inline double getVcMax25();
  inline void setVcMax25(double value);

  inline double getQjvc();
  inline void setQjvc(double value);

  inline double getAekc();
  inline void setAekc(double value);

  inline double getAeko();
  inline void setAeko(double value);

  inline double getAejm();
  inline void setAejm(double value);

  inline double getAevc();
  inline void setAevc(double value);

  inline double getSlaMin();
  inline void setSlaMin(double value);

  inline double getScaleI();
  inline void setScaleI(double value);

  inline double getScaleM();
  inline void setScaleM(double value);

  inline double getMFol();
  inline void setMFol(double value);

  inline double getLai();
  inline void setLai(double value);

  inline double getSla();
  inline void setSla(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::SpeciesData::Pipeline {
public:
  typedef SpeciesData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::CPData::Reader {
public:
  typedef CPData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getKc() const;

  inline double getKo() const;

  inline double getOi() const;

  inline double getCi() const;

  inline double getComp() const;

  inline double getVcMax() const;

  inline double getJMax() const;

  inline double getJj() const;

  inline double getJj1000() const;

  inline double getJv() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::CPData::Builder {
public:
  typedef CPData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getKc();
  inline void setKc(double value);

  inline double getKo();
  inline void setKo(double value);

  inline double getOi();
  inline void setOi(double value);

  inline double getCi();
  inline void setCi(double value);

  inline double getComp();
  inline void setComp(double value);

  inline double getVcMax();
  inline void setVcMax(double value);

  inline double getJMax();
  inline void setJMax(double value);

  inline double getJj();
  inline void setJj(double value);

  inline double getJj1000();
  inline void setJj1000(double value);

  inline double getJv();
  inline void setJv(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::CPData::Pipeline {
public:
  typedef CPData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::MicroClimateData::Reader {
public:
  typedef MicroClimateData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRad() const;

  inline double getRad24() const;

  inline double getRad240() const;

  inline double getTFol() const;

  inline double getTFol24() const;

  inline double getTFol240() const;

  inline double getSunlitfoliagefraction() const;

  inline double getSunlitfoliagefraction24() const;

  inline double getCo2concentration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::MicroClimateData::Builder {
public:
  typedef MicroClimateData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRad();
  inline void setRad(double value);

  inline double getRad24();
  inline void setRad24(double value);

  inline double getRad240();
  inline void setRad240(double value);

  inline double getTFol();
  inline void setTFol(double value);

  inline double getTFol24();
  inline void setTFol24(double value);

  inline double getTFol240();
  inline void setTFol240(double value);

  inline double getSunlitfoliagefraction();
  inline void setSunlitfoliagefraction(double value);

  inline double getSunlitfoliagefraction24();
  inline void setSunlitfoliagefraction24(double value);

  inline double getCo2concentration();
  inline void setCo2concentration(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::MicroClimateData::Pipeline {
public:
  typedef MicroClimateData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::PhotosynthT::Reader {
public:
  typedef PhotosynthT Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getPar() const;

  inline double getPar24() const;

  inline double getPar240() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::PhotosynthT::Builder {
public:
  typedef PhotosynthT Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getPar();
  inline void setPar(double value);

  inline double getPar24();
  inline void setPar24(double value);

  inline double getPar240();
  inline void setPar240(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::PhotosynthT::Pipeline {
public:
  typedef PhotosynthT Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::FoliageT::Reader {
public:
  typedef FoliageT Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getTempK() const;

  inline double getTempK24() const;

  inline double getTempK240() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::FoliageT::Builder {
public:
  typedef FoliageT Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getTempK();
  inline void setTempK(double value);

  inline double getTempK24();
  inline void setTempK24(double value);

  inline double getTempK240();
  inline void setTempK240(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::FoliageT::Pipeline {
public:
  typedef FoliageT Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::EnzymeActivityT::Reader {
public:
  typedef EnzymeActivityT Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getEfIso() const;

  inline double getEfMono() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::EnzymeActivityT::Builder {
public:
  typedef EnzymeActivityT Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getEfIso();
  inline void setEfIso(double value);

  inline double getEfMono();
  inline void setEfMono(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::EnzymeActivityT::Pipeline {
public:
  typedef EnzymeActivityT Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::LeafEmissionT::Reader {
public:
  typedef LeafEmissionT Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFoliageLayer() const;

  inline bool hasPho() const;
  inline  ::mas::schema::model::monica::Voc::PhotosynthT::Reader getPho() const;

  inline bool hasFol() const;
  inline  ::mas::schema::model::monica::Voc::FoliageT::Reader getFol() const;

  inline bool hasEnzAct() const;
  inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Reader getEnzAct() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::LeafEmissionT::Builder {
public:
  typedef LeafEmissionT Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getFoliageLayer();
  inline void setFoliageLayer( ::uint16_t value);

  inline bool hasPho();
  inline  ::mas::schema::model::monica::Voc::PhotosynthT::Builder getPho();
  inline void setPho( ::mas::schema::model::monica::Voc::PhotosynthT::Reader value);
  inline  ::mas::schema::model::monica::Voc::PhotosynthT::Builder initPho();
  inline void adoptPho(::capnp::Orphan< ::mas::schema::model::monica::Voc::PhotosynthT>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Voc::PhotosynthT> disownPho();

  inline bool hasFol();
  inline  ::mas::schema::model::monica::Voc::FoliageT::Builder getFol();
  inline void setFol( ::mas::schema::model::monica::Voc::FoliageT::Reader value);
  inline  ::mas::schema::model::monica::Voc::FoliageT::Builder initFol();
  inline void adoptFol(::capnp::Orphan< ::mas::schema::model::monica::Voc::FoliageT>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Voc::FoliageT> disownFol();

  inline bool hasEnzAct();
  inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Builder getEnzAct();
  inline void setEnzAct( ::mas::schema::model::monica::Voc::EnzymeActivityT::Reader value);
  inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Builder initEnzAct();
  inline void adoptEnzAct(::capnp::Orphan< ::mas::schema::model::monica::Voc::EnzymeActivityT>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Voc::EnzymeActivityT> disownEnzAct();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::LeafEmissionT::Pipeline {
public:
  typedef LeafEmissionT Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Voc::PhotosynthT::Pipeline getPho();
  inline  ::mas::schema::model::monica::Voc::FoliageT::Pipeline getFol();
  inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Pipeline getEnzAct();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Voc::LeafEmissions::Reader {
public:
  typedef LeafEmissions Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getIsoprene() const;

  inline double getMonoterp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Voc::LeafEmissions::Builder {
public:
  typedef LeafEmissions Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getIsoprene();
  inline void setIsoprene(double value);

  inline double getMonoterp();
  inline void setMonoterp(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Voc::LeafEmissions::Pipeline {
public:
  typedef LeafEmissions Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SticsParameters::Reader {
public:
  typedef SticsParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getUseN2O() const;

  inline bool getUseNit() const;

  inline bool getUseDenit() const;

  inline  ::uint8_t getCodeVnit() const;

  inline  ::uint8_t getCodeTnit() const;

  inline  ::uint8_t getCodeRationit() const;

  inline  ::uint8_t getCodeHourlyWfpsNit() const;

  inline  ::uint8_t getCodePdenit() const;

  inline  ::uint8_t getCodeRatiodenit() const;

  inline  ::uint8_t getCodeHourlyWfpsDenit() const;

  inline double getHminn() const;

  inline double getHoptn() const;

  inline double getPHminnit() const;

  inline double getPHmaxnit() const;

  inline double getNh4Min() const;

  inline double getPHminden() const;

  inline double getPHmaxden() const;

  inline double getWfpsc() const;

  inline double getTdenitoptGauss() const;

  inline double getScaleTdenitopt() const;

  inline double getKd() const;

  inline double getKDesat() const;

  inline double getFnx() const;

  inline double getVnitmax() const;

  inline double getKamm() const;

  inline double getTnitmin() const;

  inline double getTnitopt() const;

  inline double getTnitop2() const;

  inline double getTnitmax() const;

  inline double getTnitoptGauss() const;

  inline double getScaleTnitopt() const;

  inline double getRationit() const;

  inline double getCminPdenit() const;

  inline double getCmaxPdenit() const;

  inline double getMinPdenit() const;

  inline double getMaxPdenit() const;

  inline double getRatiodenit() const;

  inline double getProfdenit() const;

  inline double getVpotdenit() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SticsParameters::Builder {
public:
  typedef SticsParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getUseN2O();
  inline void setUseN2O(bool value);

  inline bool getUseNit();
  inline void setUseNit(bool value);

  inline bool getUseDenit();
  inline void setUseDenit(bool value);

  inline  ::uint8_t getCodeVnit();
  inline void setCodeVnit( ::uint8_t value);

  inline  ::uint8_t getCodeTnit();
  inline void setCodeTnit( ::uint8_t value);

  inline  ::uint8_t getCodeRationit();
  inline void setCodeRationit( ::uint8_t value);

  inline  ::uint8_t getCodeHourlyWfpsNit();
  inline void setCodeHourlyWfpsNit( ::uint8_t value);

  inline  ::uint8_t getCodePdenit();
  inline void setCodePdenit( ::uint8_t value);

  inline  ::uint8_t getCodeRatiodenit();
  inline void setCodeRatiodenit( ::uint8_t value);

  inline  ::uint8_t getCodeHourlyWfpsDenit();
  inline void setCodeHourlyWfpsDenit( ::uint8_t value);

  inline double getHminn();
  inline void setHminn(double value);

  inline double getHoptn();
  inline void setHoptn(double value);

  inline double getPHminnit();
  inline void setPHminnit(double value);

  inline double getPHmaxnit();
  inline void setPHmaxnit(double value);

  inline double getNh4Min();
  inline void setNh4Min(double value);

  inline double getPHminden();
  inline void setPHminden(double value);

  inline double getPHmaxden();
  inline void setPHmaxden(double value);

  inline double getWfpsc();
  inline void setWfpsc(double value);

  inline double getTdenitoptGauss();
  inline void setTdenitoptGauss(double value);

  inline double getScaleTdenitopt();
  inline void setScaleTdenitopt(double value);

  inline double getKd();
  inline void setKd(double value);

  inline double getKDesat();
  inline void setKDesat(double value);

  inline double getFnx();
  inline void setFnx(double value);

  inline double getVnitmax();
  inline void setVnitmax(double value);

  inline double getKamm();
  inline void setKamm(double value);

  inline double getTnitmin();
  inline void setTnitmin(double value);

  inline double getTnitopt();
  inline void setTnitopt(double value);

  inline double getTnitop2();
  inline void setTnitop2(double value);

  inline double getTnitmax();
  inline void setTnitmax(double value);

  inline double getTnitoptGauss();
  inline void setTnitoptGauss(double value);

  inline double getScaleTnitopt();
  inline void setScaleTnitopt(double value);

  inline double getRationit();
  inline void setRationit(double value);

  inline double getCminPdenit();
  inline void setCminPdenit(double value);

  inline double getCmaxPdenit();
  inline void setCmaxPdenit(double value);

  inline double getMinPdenit();
  inline void setMinPdenit(double value);

  inline double getMaxPdenit();
  inline void setMaxPdenit(double value);

  inline double getRatiodenit();
  inline void setRatiodenit(double value);

  inline double getProfdenit();
  inline void setProfdenit(double value);

  inline double getVpotdenit();
  inline void setVpotdenit(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SticsParameters::Pipeline {
public:
  typedef SticsParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool CropSpec::Reader::hasCropParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CropSpec::Builder::hasCropParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::CropParameters::Reader CropSpec::Reader::getCropParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::CropParameters::Builder CropSpec::Builder::getCropParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::CropParameters::Pipeline CropSpec::Pipeline::getCropParams() {
  return  ::mas::schema::model::monica::CropParameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CropSpec::Builder::setCropParams( ::mas::schema::model::monica::CropParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::CropParameters::Builder CropSpec::Builder::initCropParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CropSpec::Builder::adoptCropParams(
    ::capnp::Orphan< ::mas::schema::model::monica::CropParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::CropParameters> CropSpec::Builder::disownCropParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CropSpec::Reader::hasResidueParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CropSpec::Builder::hasResidueParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::CropResidueParameters::Reader CropSpec::Reader::getResidueParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropResidueParameters>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::CropResidueParameters::Builder CropSpec::Builder::getResidueParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropResidueParameters>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::CropResidueParameters::Pipeline CropSpec::Pipeline::getResidueParams() {
  return  ::mas::schema::model::monica::CropResidueParameters::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CropSpec::Builder::setResidueParams( ::mas::schema::model::monica::CropResidueParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropResidueParameters>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::CropResidueParameters::Builder CropSpec::Builder::initResidueParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropResidueParameters>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CropSpec::Builder::adoptResidueParams(
    ::capnp::Orphan< ::mas::schema::model::monica::CropResidueParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropResidueParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::CropResidueParameters> CropSpec::Builder::disownResidueParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CropResidueParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CropParameters::Reader::hasSpeciesParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CropParameters::Builder::hasSpeciesParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::SpeciesParameters::Reader CropParameters::Reader::getSpeciesParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SpeciesParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::SpeciesParameters::Builder CropParameters::Builder::getSpeciesParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SpeciesParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::SpeciesParameters::Pipeline CropParameters::Pipeline::getSpeciesParams() {
  return  ::mas::schema::model::monica::SpeciesParameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CropParameters::Builder::setSpeciesParams( ::mas::schema::model::monica::SpeciesParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SpeciesParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::SpeciesParameters::Builder CropParameters::Builder::initSpeciesParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SpeciesParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CropParameters::Builder::adoptSpeciesParams(
    ::capnp::Orphan< ::mas::schema::model::monica::SpeciesParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SpeciesParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::SpeciesParameters> CropParameters::Builder::disownSpeciesParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SpeciesParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CropParameters::Reader::hasCultivarParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CropParameters::Builder::hasCultivarParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::CultivarParameters::Reader CropParameters::Reader::getCultivarParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CultivarParameters>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::CultivarParameters::Builder CropParameters::Builder::getCultivarParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CultivarParameters>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::CultivarParameters::Pipeline CropParameters::Pipeline::getCultivarParams() {
  return  ::mas::schema::model::monica::CultivarParameters::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CropParameters::Builder::setCultivarParams( ::mas::schema::model::monica::CultivarParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CultivarParameters>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::CultivarParameters::Builder CropParameters::Builder::initCultivarParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CultivarParameters>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CropParameters::Builder::adoptCultivarParams(
    ::capnp::Orphan< ::mas::schema::model::monica::CultivarParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CultivarParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::CultivarParameters> CropParameters::Builder::disownCultivarParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::CultivarParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasSpeciesId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasSpeciesId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SpeciesParameters::Reader::getSpeciesId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SpeciesParameters::Builder::getSpeciesId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setSpeciesId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SpeciesParameters::Builder::initSpeciesId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptSpeciesId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SpeciesParameters::Builder::disownSpeciesId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint8_t SpeciesParameters::Reader::getCarboxylationPathway() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SpeciesParameters::Builder::getCarboxylationPathway() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setCarboxylationPathway( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getDefaultRadiationUseEfficiency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getDefaultRadiationUseEfficiency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setDefaultRadiationUseEfficiency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getPartBiologicalNFixation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getPartBiologicalNFixation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setPartBiologicalNFixation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getInitialKcFactor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getInitialKcFactor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setInitialKcFactor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getLuxuryNCoeff() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getLuxuryNCoeff() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setLuxuryNCoeff(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getMaxCropDiameter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getMaxCropDiameter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setMaxCropDiameter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getStageAtMaxHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getStageAtMaxHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setStageAtMaxHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getStageAtMaxDiameter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getStageAtMaxDiameter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setStageAtMaxDiameter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getMinimumNConcentration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getMinimumNConcentration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setMinimumNConcentration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getMinimumTemperatureForAssimilation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getMinimumTemperatureForAssimilation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setMinimumTemperatureForAssimilation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getOptimumTemperatureForAssimilation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getOptimumTemperatureForAssimilation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setOptimumTemperatureForAssimilation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getMaximumTemperatureForAssimilation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getMaximumTemperatureForAssimilation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setMaximumTemperatureForAssimilation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getNConcentrationAbovegroundBiomass() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getNConcentrationAbovegroundBiomass() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setNConcentrationAbovegroundBiomass(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getNConcentrationB0() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getNConcentrationB0() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setNConcentrationB0(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getNConcentrationPN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getNConcentrationPN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setNConcentrationPN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getNConcentrationRoot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getNConcentrationRoot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setNConcentrationRoot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpeciesParameters::Reader::getDevelopmentAccelerationByNitrogenStress() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpeciesParameters::Builder::getDevelopmentAccelerationByNitrogenStress() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setDevelopmentAccelerationByNitrogenStress( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getFieldConditionModifier() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double SpeciesParameters::Builder::getFieldConditionModifier() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void SpeciesParameters::Builder::setFieldConditionModifier(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double SpeciesParameters::Reader::getAssimilateReallocation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getAssimilateReallocation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setAssimilateReallocation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool SpeciesParameters::Reader::hasBaseTemperature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasBaseTemperature() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getBaseTemperature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getBaseTemperature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setBaseTemperature( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setBaseTemperature(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initBaseTemperature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptBaseTemperature(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownBaseTemperature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasOrganMaintenanceRespiration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasOrganMaintenanceRespiration() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getOrganMaintenanceRespiration() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getOrganMaintenanceRespiration() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setOrganMaintenanceRespiration( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setOrganMaintenanceRespiration(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initOrganMaintenanceRespiration(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptOrganMaintenanceRespiration(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownOrganMaintenanceRespiration() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasOrganGrowthRespiration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasOrganGrowthRespiration() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getOrganGrowthRespiration() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getOrganGrowthRespiration() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setOrganGrowthRespiration( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setOrganGrowthRespiration(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initOrganGrowthRespiration(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptOrganGrowthRespiration(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownOrganGrowthRespiration() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasStageMaxRootNConcentration() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasStageMaxRootNConcentration() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getStageMaxRootNConcentration() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getStageMaxRootNConcentration() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setStageMaxRootNConcentration( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setStageMaxRootNConcentration(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initStageMaxRootNConcentration(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptStageMaxRootNConcentration(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownStageMaxRootNConcentration() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasInitialOrganBiomass() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasInitialOrganBiomass() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getInitialOrganBiomass() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getInitialOrganBiomass() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setInitialOrganBiomass( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setInitialOrganBiomass(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initInitialOrganBiomass(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptInitialOrganBiomass(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownInitialOrganBiomass() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasCriticalOxygenContent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasCriticalOxygenContent() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getCriticalOxygenContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getCriticalOxygenContent() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setCriticalOxygenContent( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setCriticalOxygenContent(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initCriticalOxygenContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptCriticalOxygenContent(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownCriticalOxygenContent() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasStageMobilFromStorageCoeff() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasStageMobilFromStorageCoeff() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getStageMobilFromStorageCoeff() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getStageMobilFromStorageCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setStageMobilFromStorageCoeff( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setStageMobilFromStorageCoeff(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initStageMobilFromStorageCoeff(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptStageMobilFromStorageCoeff(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownStageMobilFromStorageCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasAbovegroundOrgan() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasAbovegroundOrgan() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getAbovegroundOrgan() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getAbovegroundOrgan() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setAbovegroundOrgan( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setAbovegroundOrgan(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initAbovegroundOrgan(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptAbovegroundOrgan(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownAbovegroundOrgan() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool SpeciesParameters::Reader::hasStorageOrgan() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool SpeciesParameters::Builder::hasStorageOrgan() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader SpeciesParameters::Reader::getStorageOrgan() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::getStorageOrgan() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void SpeciesParameters::Builder::setStorageOrgan( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void SpeciesParameters::Builder::setStorageOrgan(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder SpeciesParameters::Builder::initStorageOrgan(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void SpeciesParameters::Builder::adoptStorageOrgan(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> SpeciesParameters::Builder::disownStorageOrgan() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline double SpeciesParameters::Reader::getSamplingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getSamplingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setSamplingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getTargetNSamplingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getTargetNSamplingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setTargetNSamplingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getTargetN30() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getTargetN30() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setTargetN30(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getMaxNUptakeParam() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getMaxNUptakeParam() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setMaxNUptakeParam(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getRootDistributionParam() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getRootDistributionParam() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setRootDistributionParam(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpeciesParameters::Reader::getPlantDensity() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpeciesParameters::Builder::getPlantDensity() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setPlantDensity( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getRootGrowthLag() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getRootGrowthLag() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setRootGrowthLag(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getMinimumTemperatureRootGrowth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getMinimumTemperatureRootGrowth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setMinimumTemperatureRootGrowth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getInitialRootingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getInitialRootingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setInitialRootingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getRootPenetrationRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getRootPenetrationRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setRootPenetrationRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getRootFormFactor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getRootFormFactor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setRootFormFactor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getSpecificRootLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getSpecificRootLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setSpecificRootLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpeciesParameters::Reader::getStageAfterCut() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpeciesParameters::Builder::getStageAfterCut() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setStageAfterCut( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getLimitingTemperatureHeatStress() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getLimitingTemperatureHeatStress() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setLimitingTemperatureHeatStress(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpeciesParameters::Reader::getCuttingDelayDays() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpeciesParameters::Builder::getCuttingDelayDays() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setCuttingDelayDays( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getDroughtImpactOnFertilityFactor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getDroughtImpactOnFertilityFactor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setDroughtImpactOnFertilityFactor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getEfMono() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}

inline double SpeciesParameters::Builder::getEfMono() {
  return _builder.getDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}
inline void SpeciesParameters::Builder::setEfMono(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value, 4602678819172646912ull);
}

inline double SpeciesParameters::Reader::getEfMonos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}

inline double SpeciesParameters::Builder::getEfMonos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}
inline void SpeciesParameters::Builder::setEfMonos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value, 4602678819172646912ull);
}

inline double SpeciesParameters::Reader::getEfIso() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getEfIso() {
  return _builder.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setEfIso(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getVcMax25() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}

inline double SpeciesParameters::Builder::getVcMax25() {
  return _builder.getDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS);
}
inline void SpeciesParameters::Builder::setVcMax25(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value);
}

inline double SpeciesParameters::Reader::getAekc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, 4679258154779803648ull);
}

inline double SpeciesParameters::Builder::getAekc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, 4679258154779803648ull);
}
inline void SpeciesParameters::Builder::setAekc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value, 4679258154779803648ull);
}

inline double SpeciesParameters::Reader::getAeko() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, 4653872080561897472ull);
}

inline double SpeciesParameters::Builder::getAeko() {
  return _builder.getDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, 4653872080561897472ull);
}
inline void SpeciesParameters::Builder::setAeko(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value, 4653872080561897472ull);
}

inline double SpeciesParameters::Reader::getAevc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, 4679464313210011648ull);
}

inline double SpeciesParameters::Builder::getAevc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, 4679464313210011648ull);
}
inline void SpeciesParameters::Builder::setAevc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<38>() * ::capnp::ELEMENTS, value, 4679464313210011648ull);
}

inline double SpeciesParameters::Reader::getKc25() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, 4646800021772042240ull);
}

inline double SpeciesParameters::Builder::getKc25() {
  return _builder.getDataField<double>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, 4646800021772042240ull);
}
inline void SpeciesParameters::Builder::setKc25(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<39>() * ::capnp::ELEMENTS, value, 4646800021772042240ull);
}

inline double SpeciesParameters::Reader::getKo25() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, 4644513037586268160ull);
}

inline double SpeciesParameters::Builder::getKo25() {
  return _builder.getDataField<double>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, 4644513037586268160ull);
}
inline void SpeciesParameters::Builder::setKo25(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<40>() * ::capnp::ELEMENTS, value, 4644513037586268160ull);
}

inline  ::int16_t SpeciesParameters::Reader::getTransitionStageLeafExp() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t SpeciesParameters::Builder::getTransitionStageLeafExp() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, -1);
}
inline void SpeciesParameters::Builder::setTransitionStageLeafExp( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, value, -1);
}

inline bool CultivarParameters::Reader::hasCultivarId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasCultivarId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CultivarParameters::Reader::getCultivarId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CultivarParameters::Builder::getCultivarId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setCultivarId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CultivarParameters::Builder::initCultivarId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptCultivarId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CultivarParameters::Builder::disownCultivarId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CultivarParameters::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CultivarParameters::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CultivarParameters::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CultivarParameters::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::getPerennial() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool CultivarParameters::Builder::getPerennial() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setPerennial(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getMaxAssimilationRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getMaxAssimilationRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setMaxAssimilationRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getMaxCropHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getMaxCropHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setMaxCropHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getResidueNRatio() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getResidueNRatio() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setResidueNRatio(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getLt50cultivar() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getLt50cultivar() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setLt50cultivar(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getCropHeightP1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getCropHeightP1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setCropHeightP1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getCropHeightP2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getCropHeightP2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setCropHeightP2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getCropSpecificMaxRootingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getCropSpecificMaxRootingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setCropSpecificMaxRootingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool CultivarParameters::Reader::hasAssimilatePartitioningCoeff() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasAssimilatePartitioningCoeff() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader CultivarParameters::Reader::getAssimilatePartitioningCoeff() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder CultivarParameters::Builder::getAssimilatePartitioningCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setAssimilatePartitioningCoeff( ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setAssimilatePartitioningCoeff(::kj::ArrayPtr<const  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder CultivarParameters::Builder::initAssimilatePartitioningCoeff(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptAssimilatePartitioningCoeff(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> CultivarParameters::Builder::disownAssimilatePartitioningCoeff() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasOrganSenescenceRate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasOrganSenescenceRate() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader CultivarParameters::Reader::getOrganSenescenceRate() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder CultivarParameters::Builder::getOrganSenescenceRate() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setOrganSenescenceRate( ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setOrganSenescenceRate(::kj::ArrayPtr<const  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder CultivarParameters::Builder::initOrganSenescenceRate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptOrganSenescenceRate(
    ::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> CultivarParameters::Builder::disownOrganSenescenceRate() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasBaseDaylength() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasBaseDaylength() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getBaseDaylength() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getBaseDaylength() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setBaseDaylength( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setBaseDaylength(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initBaseDaylength(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptBaseDaylength(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownBaseDaylength() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasOptimumTemperature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasOptimumTemperature() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getOptimumTemperature() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getOptimumTemperature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setOptimumTemperature( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setOptimumTemperature(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initOptimumTemperature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptOptimumTemperature(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownOptimumTemperature() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasDaylengthRequirement() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasDaylengthRequirement() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getDaylengthRequirement() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getDaylengthRequirement() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setDaylengthRequirement( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setDaylengthRequirement(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initDaylengthRequirement(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptDaylengthRequirement(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownDaylengthRequirement() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasDroughtStressThreshold() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasDroughtStressThreshold() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getDroughtStressThreshold() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getDroughtStressThreshold() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setDroughtStressThreshold( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setDroughtStressThreshold(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initDroughtStressThreshold(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptDroughtStressThreshold(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownDroughtStressThreshold() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasSpecificLeafArea() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasSpecificLeafArea() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getSpecificLeafArea() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getSpecificLeafArea() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setSpecificLeafArea( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setSpecificLeafArea(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initSpecificLeafArea(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptSpecificLeafArea(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownSpecificLeafArea() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasStageKcFactor() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasStageKcFactor() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getStageKcFactor() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getStageKcFactor() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setStageKcFactor( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setStageKcFactor(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initStageKcFactor(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptStageKcFactor(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownStageKcFactor() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasStageTemperatureSum() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasStageTemperatureSum() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getStageTemperatureSum() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getStageTemperatureSum() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setStageTemperatureSum( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setStageTemperatureSum(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initStageTemperatureSum(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptStageTemperatureSum(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownStageTemperatureSum() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasVernalisationRequirement() const {
  return !_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasVernalisationRequirement() {
  return !_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader CultivarParameters::Reader::getVernalisationRequirement() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::getVernalisationRequirement() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setVernalisationRequirement( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline void CultivarParameters::Builder::setVernalisationRequirement(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder CultivarParameters::Builder::initVernalisationRequirement(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptVernalisationRequirement(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> CultivarParameters::Builder::disownVernalisationRequirement() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<11>() * ::capnp::POINTERS));
}

inline double CultivarParameters::Reader::getHeatSumIrrigationStart() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getHeatSumIrrigationStart() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setHeatSumIrrigationStart(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getHeatSumIrrigationEnd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getHeatSumIrrigationEnd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setHeatSumIrrigationEnd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getCriticalTemperatureHeatStress() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getCriticalTemperatureHeatStress() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setCriticalTemperatureHeatStress(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getBeginSensitivePhaseHeatStress() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getBeginSensitivePhaseHeatStress() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setBeginSensitivePhaseHeatStress(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getEndSensitivePhaseHeatStress() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getEndSensitivePhaseHeatStress() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setEndSensitivePhaseHeatStress(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getFrostHardening() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getFrostHardening() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setFrostHardening(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getFrostDehardening() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getFrostDehardening() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setFrostDehardening(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getLowTemperatureExposure() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getLowTemperatureExposure() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setLowTemperatureExposure(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getRespiratoryStress() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getRespiratoryStress() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setRespiratoryStress(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t CultivarParameters::Reader::getLatestHarvestDoy() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t CultivarParameters::Builder::getLatestHarvestDoy() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void CultivarParameters::Builder::setLatestHarvestDoy( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline bool CultivarParameters::Reader::hasOrganIdsForPrimaryYield() const {
  return !_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasOrganIdsForPrimaryYield() {
  return !_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader CultivarParameters::Reader::getOrganIdsForPrimaryYield() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder CultivarParameters::Builder::getOrganIdsForPrimaryYield() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setOrganIdsForPrimaryYield( ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder CultivarParameters::Builder::initOrganIdsForPrimaryYield(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptOrganIdsForPrimaryYield(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>> CultivarParameters::Builder::disownOrganIdsForPrimaryYield() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<12>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasOrganIdsForSecondaryYield() const {
  return !_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasOrganIdsForSecondaryYield() {
  return !_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader CultivarParameters::Reader::getOrganIdsForSecondaryYield() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder CultivarParameters::Builder::getOrganIdsForSecondaryYield() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setOrganIdsForSecondaryYield( ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder CultivarParameters::Builder::initOrganIdsForSecondaryYield(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptOrganIdsForSecondaryYield(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>> CultivarParameters::Builder::disownOrganIdsForSecondaryYield() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<13>() * ::capnp::POINTERS));
}

inline bool CultivarParameters::Reader::hasOrganIdsForCutting() const {
  return !_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline bool CultivarParameters::Builder::hasOrganIdsForCutting() {
  return !_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader CultivarParameters::Reader::getOrganIdsForCutting() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder CultivarParameters::Builder::getOrganIdsForCutting() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}
inline void CultivarParameters::Builder::setOrganIdsForCutting( ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>::Builder CultivarParameters::Builder::initOrganIdsForCutting(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), size);
}
inline void CultivarParameters::Builder::adoptOrganIdsForCutting(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>> CultivarParameters::Builder::disownOrganIdsForCutting() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::YieldComponent,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<14>() * ::capnp::POINTERS));
}

inline double CultivarParameters::Reader::getEarlyRefLeafExp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4622945017495814144ull);
}

inline double CultivarParameters::Builder::getEarlyRefLeafExp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4622945017495814144ull);
}
inline void CultivarParameters::Builder::setEarlyRefLeafExp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value, 4622945017495814144ull);
}

inline double CultivarParameters::Reader::getRefLeafExp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}

inline double CultivarParameters::Builder::getRefLeafExp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}
inline void CultivarParameters::Builder::setRefLeafExp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 4626322717216342016ull);
}

inline double CultivarParameters::Reader::getMinTempDevWE() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getMinTempDevWE() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setMinTempDevWE(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getOptTempDevWE() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getOptTempDevWE() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setOptTempDevWE(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double CultivarParameters::Reader::getMaxTempDevWE() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double CultivarParameters::Builder::getMaxTempDevWE() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setMaxTempDevWE(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool CultivarParameters::Reader::getWinterCrop() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool CultivarParameters::Builder::getWinterCrop() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CultivarParameters::Builder::setWinterCrop(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t YieldComponent::Reader::getOrganId() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1ll);
}

inline  ::int64_t YieldComponent::Builder::getOrganId() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, -1ll);
}
inline void YieldComponent::Builder::setOrganId( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, -1ll);
}

inline double YieldComponent::Reader::getYieldPercentage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double YieldComponent::Builder::getYieldPercentage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YieldComponent::Builder::setYieldPercentage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double YieldComponent::Reader::getYieldDryMatter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double YieldComponent::Builder::getYieldDryMatter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void YieldComponent::Builder::setYieldDryMatter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime AutomaticHarvestParameters::Reader::getHarvestTime() const {
  return _reader.getDataField< ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}

inline  ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime AutomaticHarvestParameters::Builder::getHarvestTime() {
  return _builder.getDataField< ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 1u);
}
inline void AutomaticHarvestParameters::Builder::setHarvestTime( ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime value) {
  _builder.setDataField< ::mas::schema::model::monica::AutomaticHarvestParameters::HarvestTime>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 1u);
}

inline  ::int16_t AutomaticHarvestParameters::Reader::getLatestHarvestDOY() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}

inline  ::int16_t AutomaticHarvestParameters::Builder::getLatestHarvestDOY() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, -1);
}
inline void AutomaticHarvestParameters::Builder::setLatestHarvestDOY( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, -1);
}

inline double NMinCropParameters::Reader::getSamplingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NMinCropParameters::Builder::getSamplingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NMinCropParameters::Builder::setSamplingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NMinCropParameters::Reader::getNTarget() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NMinCropParameters::Builder::getNTarget() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NMinCropParameters::Builder::setNTarget(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double NMinCropParameters::Reader::getNTarget30() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double NMinCropParameters::Builder::getNTarget30() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void NMinCropParameters::Builder::setNTarget30(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double NMinApplicationParameters::Reader::getMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double NMinApplicationParameters::Builder::getMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NMinApplicationParameters::Builder::setMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double NMinApplicationParameters::Reader::getMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double NMinApplicationParameters::Builder::getMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void NMinApplicationParameters::Builder::setMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t NMinApplicationParameters::Reader::getDelayInDays() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t NMinApplicationParameters::Builder::getDelayInDays() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void NMinApplicationParameters::Builder::setDelayInDays( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool CropResidueParameters::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CropResidueParameters::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Reader CropResidueParameters::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Builder CropResidueParameters::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Pipeline CropResidueParameters::Pipeline::getParams() {
  return  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void CropResidueParameters::Builder::setParams( ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters::Builder CropResidueParameters::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CropResidueParameters::Builder::adoptParams(
    ::capnp::Orphan< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters> CropResidueParameters::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::OrganicFertilization::OrganicMatterParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CropResidueParameters::Reader::hasSpecies() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CropResidueParameters::Builder::hasSpecies() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CropResidueParameters::Reader::getSpecies() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CropResidueParameters::Builder::getSpecies() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CropResidueParameters::Builder::setSpecies( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CropResidueParameters::Builder::initSpecies(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void CropResidueParameters::Builder::adoptSpecies(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CropResidueParameters::Builder::disownSpecies() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool CropResidueParameters::Reader::hasResidueType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool CropResidueParameters::Builder::hasResidueType() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CropResidueParameters::Reader::getResidueType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CropResidueParameters::Builder::getResidueType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void CropResidueParameters::Builder::setResidueType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CropResidueParameters::Builder::initResidueType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void CropResidueParameters::Builder::adoptResidueType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CropResidueParameters::Builder::disownResidueType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double SoilParameters::Reader::getSoilSandContent() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSoilSandContent() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSoilSandContent(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getSoilClayContent() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSoilClayContent() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSoilClayContent(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getSoilpH() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4619454727784602010ull);
}

inline double SoilParameters::Builder::getSoilpH() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4619454727784602010ull);
}
inline void SoilParameters::Builder::setSoilpH(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4619454727784602010ull);
}

inline double SoilParameters::Reader::getSoilStoneContent() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double SoilParameters::Builder::getSoilStoneContent() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SoilParameters::Builder::setSoilStoneContent(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double SoilParameters::Reader::getLambda() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getLambda() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setLambda(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getFieldCapacity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getFieldCapacity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setFieldCapacity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getSaturation() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSaturation() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSaturation(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getPermanentWiltingPoint() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getPermanentWiltingPoint() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setPermanentWiltingPoint(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool SoilParameters::Reader::hasSoilTexture() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SoilParameters::Builder::hasSoilTexture() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader SoilParameters::Reader::getSoilTexture() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder SoilParameters::Builder::getSoilTexture() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SoilParameters::Builder::setSoilTexture( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder SoilParameters::Builder::initSoilTexture(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SoilParameters::Builder::adoptSoilTexture(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> SoilParameters::Builder::disownSoilTexture() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double SoilParameters::Reader::getSoilAmmonium() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4557750909289998844ull);
}

inline double SoilParameters::Builder::getSoilAmmonium() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4557750909289998844ull);
}
inline void SoilParameters::Builder::setSoilAmmonium(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 4557750909289998844ull);
}

inline double SoilParameters::Reader::getSoilNitrate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4572414629676717179ull);
}

inline double SoilParameters::Builder::getSoilNitrate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4572414629676717179ull);
}
inline void SoilParameters::Builder::setSoilNitrate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value, 4572414629676717179ull);
}

inline double SoilParameters::Reader::getSoilCNRatio() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4621819117588971520ull);
}

inline double SoilParameters::Builder::getSoilCNRatio() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4621819117588971520ull);
}
inline void SoilParameters::Builder::setSoilCNRatio(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, 4621819117588971520ull);
}

inline double SoilParameters::Reader::getSoilMoisturePercentFC() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}

inline double SoilParameters::Builder::getSoilMoisturePercentFC() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}
inline void SoilParameters::Builder::setSoilMoisturePercentFC(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value, 4636737291354636288ull);
}

inline double SoilParameters::Reader::getSoilRawDensity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSoilRawDensity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSoilRawDensity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getSoilBulkDensity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSoilBulkDensity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSoilBulkDensity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getSoilOrganicCarbon() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSoilOrganicCarbon() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSoilOrganicCarbon(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SoilParameters::Reader::getSoilOrganicMatter() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SoilParameters::Builder::getSoilOrganicMatter() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SoilParameters::Builder::setSoilOrganicMatter(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline bool AutomaticIrrigationParameters::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AutomaticIrrigationParameters::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::management::Params::Irrigation::Parameters::Reader AutomaticIrrigationParameters::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::Irrigation::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::management::Params::Irrigation::Parameters::Builder AutomaticIrrigationParameters::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::Irrigation::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::management::Params::Irrigation::Parameters::Pipeline AutomaticIrrigationParameters::Pipeline::getParams() {
  return  ::mas::schema::management::Params::Irrigation::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void AutomaticIrrigationParameters::Builder::setParams( ::mas::schema::management::Params::Irrigation::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::management::Params::Irrigation::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::management::Params::Irrigation::Parameters::Builder AutomaticIrrigationParameters::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::Irrigation::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AutomaticIrrigationParameters::Builder::adoptParams(
    ::capnp::Orphan< ::mas::schema::management::Params::Irrigation::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::management::Params::Irrigation::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::management::Params::Irrigation::Parameters> AutomaticIrrigationParameters::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::Irrigation::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double AutomaticIrrigationParameters::Reader::getAmount() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4625478292286210048ull);
}

inline double AutomaticIrrigationParameters::Builder::getAmount() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4625478292286210048ull);
}
inline void AutomaticIrrigationParameters::Builder::setAmount(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4625478292286210048ull);
}

inline double AutomaticIrrigationParameters::Reader::getThreshold() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4599976659396224614ull);
}

inline double AutomaticIrrigationParameters::Builder::getThreshold() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4599976659396224614ull);
}
inline void AutomaticIrrigationParameters::Builder::setThreshold(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4599976659396224614ull);
}

inline double SiteParameters::Reader::getLatitude() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4632585535448154112ull);
}

inline double SiteParameters::Builder::getLatitude() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4632585535448154112ull);
}
inline void SiteParameters::Builder::setLatitude(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4632585535448154112ull);
}

inline double SiteParameters::Reader::getSlope() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4576918229304087675ull);
}

inline double SiteParameters::Builder::getSlope() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4576918229304087675ull);
}
inline void SiteParameters::Builder::setSlope(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4576918229304087675ull);
}

inline double SiteParameters::Reader::getHeightNN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4632233691727265792ull);
}

inline double SiteParameters::Builder::getHeightNN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4632233691727265792ull);
}
inline void SiteParameters::Builder::setHeightNN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4632233691727265792ull);
}

inline double SiteParameters::Reader::getGroundwaterDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4634626229029306368ull);
}

inline double SiteParameters::Builder::getGroundwaterDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4634626229029306368ull);
}
inline void SiteParameters::Builder::setGroundwaterDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4634626229029306368ull);
}

inline double SiteParameters::Reader::getSoilCNRatio() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4621819117588971520ull);
}

inline double SiteParameters::Builder::getSoilCNRatio() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4621819117588971520ull);
}
inline void SiteParameters::Builder::setSoilCNRatio(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 4621819117588971520ull);
}

inline double SiteParameters::Reader::getDrainageCoeff() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double SiteParameters::Builder::getDrainageCoeff() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void SiteParameters::Builder::setDrainageCoeff(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double SiteParameters::Reader::getVqNDeposition() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4629137466983448576ull);
}

inline double SiteParameters::Builder::getVqNDeposition() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4629137466983448576ull);
}
inline void SiteParameters::Builder::setVqNDeposition(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 4629137466983448576ull);
}

inline double SiteParameters::Reader::getMaxEffectiveRootingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}

inline double SiteParameters::Builder::getMaxEffectiveRootingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}
inline void SiteParameters::Builder::setMaxEffectiveRootingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 4611686018427387904ull);
}

inline double SiteParameters::Reader::getImpenetrableLayerDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}

inline double SiteParameters::Builder::getImpenetrableLayerDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 13830554455654793216ull);
}
inline void SiteParameters::Builder::setImpenetrableLayerDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 13830554455654793216ull);
}

inline double SiteParameters::Reader::getSoilSpecificHumusBalanceCorrection() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double SiteParameters::Builder::getSoilSpecificHumusBalanceCorrection() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SiteParameters::Builder::setSoilSpecificHumusBalanceCorrection(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline bool SiteParameters::Reader::hasSoilParameters() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SiteParameters::Builder::hasSoilParameters() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Reader SiteParameters::Reader::getSoilParameters() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Builder SiteParameters::Builder::getSoilParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SiteParameters::Builder::setSoilParameters( ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>::Builder SiteParameters::Builder::initSoilParameters(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SiteParameters::Builder::adoptSoilParameters(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>> SiteParameters::Builder::disownSoilParameters() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::SoilParameters,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double EnvironmentParameters::Reader::getAlbedo() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4597454643604897137ull);
}

inline double EnvironmentParameters::Builder::getAlbedo() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4597454643604897137ull);
}
inline void EnvironmentParameters::Builder::setAlbedo(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4597454643604897137ull);
}

inline double EnvironmentParameters::Reader::getAtmosphericCO2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double EnvironmentParameters::Builder::getAtmosphericCO2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::Builder::setAtmosphericCO2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool EnvironmentParameters::Reader::hasAtmosphericCO2s() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentParameters::Builder::hasAtmosphericCO2s() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader EnvironmentParameters::Reader::getAtmosphericCO2s() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder EnvironmentParameters::Builder::getAtmosphericCO2s() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void EnvironmentParameters::Builder::setAtmosphericCO2s( ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder EnvironmentParameters::Builder::initAtmosphericCO2s(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void EnvironmentParameters::Builder::adoptAtmosphericCO2s(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>> EnvironmentParameters::Builder::disownAtmosphericCO2s() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double EnvironmentParameters::Reader::getAtmosphericO3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double EnvironmentParameters::Builder::getAtmosphericO3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::Builder::setAtmosphericO3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool EnvironmentParameters::Reader::hasAtmosphericO3s() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool EnvironmentParameters::Builder::hasAtmosphericO3s() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader EnvironmentParameters::Reader::getAtmosphericO3s() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder EnvironmentParameters::Builder::getAtmosphericO3s() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void EnvironmentParameters::Builder::setAtmosphericO3s( ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>::Builder EnvironmentParameters::Builder::initAtmosphericO3s(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void EnvironmentParameters::Builder::adoptAtmosphericO3s(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>> EnvironmentParameters::Builder::disownAtmosphericO3s() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::EnvironmentParameters::YearToValue,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double EnvironmentParameters::Reader::getWindSpeedHeight() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}

inline double EnvironmentParameters::Builder::getWindSpeedHeight() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}
inline void EnvironmentParameters::Builder::setWindSpeedHeight(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4611686018427387904ull);
}

inline double EnvironmentParameters::Reader::getLeachingDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double EnvironmentParameters::Builder::getLeachingDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::Builder::setLeachingDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double EnvironmentParameters::Reader::getTimeStep() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double EnvironmentParameters::Builder::getTimeStep() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::Builder::setTimeStep(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double EnvironmentParameters::Reader::getMaxGroundwaterDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4625759767262920704ull);
}

inline double EnvironmentParameters::Builder::getMaxGroundwaterDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4625759767262920704ull);
}
inline void EnvironmentParameters::Builder::setMaxGroundwaterDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 4625759767262920704ull);
}

inline double EnvironmentParameters::Reader::getMinGroundwaterDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}

inline double EnvironmentParameters::Builder::getMinGroundwaterDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}
inline void EnvironmentParameters::Builder::setMinGroundwaterDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 4626322717216342016ull);
}

inline  ::uint8_t EnvironmentParameters::Reader::getMinGroundwaterDepthMonth() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, 3u);
}

inline  ::uint8_t EnvironmentParameters::Builder::getMinGroundwaterDepthMonth() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, 3u);
}
inline void EnvironmentParameters::Builder::setMinGroundwaterDepthMonth( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value, 3u);
}

inline  ::mas::schema::climate::RCP EnvironmentParameters::Reader::getRcp() const {
  return _reader.getDataField< ::mas::schema::climate::RCP>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::climate::RCP EnvironmentParameters::Builder::getRcp() {
  return _builder.getDataField< ::mas::schema::climate::RCP>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::Builder::setRcp( ::mas::schema::climate::RCP value) {
  _builder.setDataField< ::mas::schema::climate::RCP>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t EnvironmentParameters::YearToValue::Reader::getYear() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t EnvironmentParameters::YearToValue::Builder::getYear() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::YearToValue::Builder::setYear( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double EnvironmentParameters::YearToValue::Reader::getValue() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double EnvironmentParameters::YearToValue::Builder::getValue() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void EnvironmentParameters::YearToValue::Builder::setValue(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool MeasuredGroundwaterTableInformation::Reader::getGroundwaterInformationAvailable() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool MeasuredGroundwaterTableInformation::Builder::getGroundwaterInformationAvailable() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MeasuredGroundwaterTableInformation::Builder::setGroundwaterInformationAvailable(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool MeasuredGroundwaterTableInformation::Reader::hasGroundwaterInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MeasuredGroundwaterTableInformation::Builder::hasGroundwaterInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Reader MeasuredGroundwaterTableInformation::Reader::getGroundwaterInfo() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Builder MeasuredGroundwaterTableInformation::Builder::getGroundwaterInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MeasuredGroundwaterTableInformation::Builder::setGroundwaterInfo( ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>::Builder MeasuredGroundwaterTableInformation::Builder::initGroundwaterInfo(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void MeasuredGroundwaterTableInformation::Builder::adoptGroundwaterInfo(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>> MeasuredGroundwaterTableInformation::Builder::disownGroundwaterInfo() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::MeasuredGroundwaterTableInformation::DateToValue,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MeasuredGroundwaterTableInformation::DateToValue::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MeasuredGroundwaterTableInformation::DateToValue::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader MeasuredGroundwaterTableInformation::DateToValue::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder MeasuredGroundwaterTableInformation::DateToValue::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline MeasuredGroundwaterTableInformation::DateToValue::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void MeasuredGroundwaterTableInformation::DateToValue::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder MeasuredGroundwaterTableInformation::DateToValue::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MeasuredGroundwaterTableInformation::DateToValue::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> MeasuredGroundwaterTableInformation::DateToValue::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double MeasuredGroundwaterTableInformation::DateToValue::Reader::getValue() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double MeasuredGroundwaterTableInformation::DateToValue::Builder::getValue() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MeasuredGroundwaterTableInformation::DateToValue::Builder::setValue(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SimulationParameters::Reader::hasStartDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SimulationParameters::Builder::hasStartDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader SimulationParameters::Reader::getStartDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder SimulationParameters::Builder::getStartDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline SimulationParameters::Pipeline::getStartDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SimulationParameters::Builder::setStartDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder SimulationParameters::Builder::initStartDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SimulationParameters::Builder::adoptStartDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> SimulationParameters::Builder::disownStartDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SimulationParameters::Reader::hasEndDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SimulationParameters::Builder::hasEndDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader SimulationParameters::Reader::getEndDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder SimulationParameters::Builder::getEndDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline SimulationParameters::Pipeline::getEndDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void SimulationParameters::Builder::setEndDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder SimulationParameters::Builder::initEndDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SimulationParameters::Builder::adoptEndDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> SimulationParameters::Builder::disownEndDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SimulationParameters::Reader::getNitrogenResponseOn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}

inline bool SimulationParameters::Builder::getNitrogenResponseOn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}
inline void SimulationParameters::Builder::setNitrogenResponseOn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, true);
}

inline bool SimulationParameters::Reader::getWaterDeficitResponseOn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, true);
}

inline bool SimulationParameters::Builder::getWaterDeficitResponseOn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, true);
}
inline void SimulationParameters::Builder::setWaterDeficitResponseOn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, true);
}

inline bool SimulationParameters::Reader::getEmergenceFloodingControlOn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, true);
}

inline bool SimulationParameters::Builder::getEmergenceFloodingControlOn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, true);
}
inline void SimulationParameters::Builder::setEmergenceFloodingControlOn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, true);
}

inline bool SimulationParameters::Reader::getEmergenceMoistureControlOn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, true);
}

inline bool SimulationParameters::Builder::getEmergenceMoistureControlOn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, true);
}
inline void SimulationParameters::Builder::setEmergenceMoistureControlOn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, true);
}

inline bool SimulationParameters::Reader::getFrostKillOn() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, true);
}

inline bool SimulationParameters::Builder::getFrostKillOn() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, true);
}
inline void SimulationParameters::Builder::setFrostKillOn(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, true);
}

inline bool SimulationParameters::Reader::getUseAutomaticIrrigation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline bool SimulationParameters::Builder::getUseAutomaticIrrigation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SimulationParameters::Builder::setUseAutomaticIrrigation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool SimulationParameters::Reader::hasAutoIrrigationParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SimulationParameters::Builder::hasAutoIrrigationParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Reader SimulationParameters::Reader::getAutoIrrigationParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::AutomaticIrrigationParameters>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Builder SimulationParameters::Builder::getAutoIrrigationParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::AutomaticIrrigationParameters>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Pipeline SimulationParameters::Pipeline::getAutoIrrigationParams() {
  return  ::mas::schema::model::monica::AutomaticIrrigationParameters::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void SimulationParameters::Builder::setAutoIrrigationParams( ::mas::schema::model::monica::AutomaticIrrigationParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::AutomaticIrrigationParameters>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::AutomaticIrrigationParameters::Builder SimulationParameters::Builder::initAutoIrrigationParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::AutomaticIrrigationParameters>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SimulationParameters::Builder::adoptAutoIrrigationParams(
    ::capnp::Orphan< ::mas::schema::model::monica::AutomaticIrrigationParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::AutomaticIrrigationParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::AutomaticIrrigationParameters> SimulationParameters::Builder::disownAutoIrrigationParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::AutomaticIrrigationParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SimulationParameters::Reader::getUseNMinMineralFertilisingMethod() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline bool SimulationParameters::Builder::getUseNMinMineralFertilisingMethod() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SimulationParameters::Builder::setUseNMinMineralFertilisingMethod(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool SimulationParameters::Reader::hasNMinFertiliserPartition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SimulationParameters::Builder::hasNMinFertiliserPartition() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Reader SimulationParameters::Reader::getNMinFertiliserPartition() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::MineralFertilization::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Builder SimulationParameters::Builder::getNMinFertiliserPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::MineralFertilization::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Pipeline SimulationParameters::Pipeline::getNMinFertiliserPartition() {
  return  ::mas::schema::management::Params::MineralFertilization::Parameters::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SimulationParameters::Builder::setNMinFertiliserPartition( ::mas::schema::management::Params::MineralFertilization::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::management::Params::MineralFertilization::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::management::Params::MineralFertilization::Parameters::Builder SimulationParameters::Builder::initNMinFertiliserPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::MineralFertilization::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SimulationParameters::Builder::adoptNMinFertiliserPartition(
    ::capnp::Orphan< ::mas::schema::management::Params::MineralFertilization::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::management::Params::MineralFertilization::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::management::Params::MineralFertilization::Parameters> SimulationParameters::Builder::disownNMinFertiliserPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::management::Params::MineralFertilization::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SimulationParameters::Reader::hasNMinApplicationParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SimulationParameters::Builder::hasNMinApplicationParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::NMinApplicationParameters::Reader SimulationParameters::Reader::getNMinApplicationParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::NMinApplicationParameters>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::NMinApplicationParameters::Builder SimulationParameters::Builder::getNMinApplicationParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::NMinApplicationParameters>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::NMinApplicationParameters::Pipeline SimulationParameters::Pipeline::getNMinApplicationParams() {
  return  ::mas::schema::model::monica::NMinApplicationParameters::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SimulationParameters::Builder::setNMinApplicationParams( ::mas::schema::model::monica::NMinApplicationParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::NMinApplicationParameters>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::NMinApplicationParameters::Builder SimulationParameters::Builder::initNMinApplicationParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::NMinApplicationParameters>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SimulationParameters::Builder::adoptNMinApplicationParams(
    ::capnp::Orphan< ::mas::schema::model::monica::NMinApplicationParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::NMinApplicationParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::NMinApplicationParameters> SimulationParameters::Builder::disownNMinApplicationParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::NMinApplicationParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SimulationParameters::Reader::getUseSecondaryYields() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, true);
}

inline bool SimulationParameters::Builder::getUseSecondaryYields() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, true);
}
inline void SimulationParameters::Builder::setUseSecondaryYields(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, true);
}

inline bool SimulationParameters::Reader::getUseAutomaticHarvestTrigger() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline bool SimulationParameters::Builder::getUseAutomaticHarvestTrigger() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void SimulationParameters::Builder::setUseAutomaticHarvestTrigger(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SimulationParameters::Reader::getNumberOfLayers() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 20u);
}

inline  ::uint16_t SimulationParameters::Builder::getNumberOfLayers() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 20u);
}
inline void SimulationParameters::Builder::setNumberOfLayers( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 20u);
}

inline double SimulationParameters::Reader::getLayerThickness() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}

inline double SimulationParameters::Builder::getLayerThickness() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}
inline void SimulationParameters::Builder::setLayerThickness(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4591870180066957722ull);
}

inline  ::uint16_t SimulationParameters::Reader::getStartPVIndex() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SimulationParameters::Builder::getStartPVIndex() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SimulationParameters::Builder::setStartPVIndex( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SimulationParameters::Reader::getJulianDayAutomaticFertilising() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SimulationParameters::Builder::getJulianDayAutomaticFertilising() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SimulationParameters::Builder::setJulianDayAutomaticFertilising( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getCanopyReflectionCoefficient() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getCanopyReflectionCoefficient() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setCanopyReflectionCoefficient(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getReferenceMaxAssimilationRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getReferenceMaxAssimilationRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setReferenceMaxAssimilationRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getReferenceLeafAreaIndex() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getReferenceLeafAreaIndex() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setReferenceLeafAreaIndex(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getMaintenanceRespirationParameter1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getMaintenanceRespirationParameter1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setMaintenanceRespirationParameter1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getMaintenanceRespirationParameter2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getMaintenanceRespirationParameter2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setMaintenanceRespirationParameter2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getMinimumNConcentrationRoot() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getMinimumNConcentrationRoot() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setMinimumNConcentrationRoot(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getMinimumAvailableN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getMinimumAvailableN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setMinimumAvailableN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getReferenceAlbedo() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getReferenceAlbedo() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setReferenceAlbedo(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getStomataConductanceAlpha() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getStomataConductanceAlpha() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setStomataConductanceAlpha(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getSaturationBeta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getSaturationBeta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setSaturationBeta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getGrowthRespirationRedux() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getGrowthRespirationRedux() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setGrowthRespirationRedux(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getMaxCropNDemand() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getMaxCropNDemand() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setMaxCropNDemand(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getGrowthRespirationParameter1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getGrowthRespirationParameter1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setGrowthRespirationParameter1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getGrowthRespirationParameter2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getGrowthRespirationParameter2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setGrowthRespirationParameter2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double CropModuleParameters::Reader::getTortuosity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double CropModuleParameters::Builder::getTortuosity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setTortuosity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getAdjustRootDepthForSoilProps() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<960>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getAdjustRootDepthForSoilProps() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<960>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setAdjustRootDepthForSoilProps(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<960>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getExperimentalEnablePhenologyWangEngelTemperatureResponse() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<961>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getExperimentalEnablePhenologyWangEngelTemperatureResponse() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<961>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setExperimentalEnablePhenologyWangEngelTemperatureResponse(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<961>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<962>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<962>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setExperimentalEnablePhotosynthesisWangEngelTemperatureResponse(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<962>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getExperimentalEnableHourlyFvCBPhotosynthesis() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<963>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getExperimentalEnableHourlyFvCBPhotosynthesis() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<963>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setExperimentalEnableHourlyFvCBPhotosynthesis(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<963>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getExperimentalEnableTResponseLeafExpansion() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<964>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getExperimentalEnableTResponseLeafExpansion() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<964>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setExperimentalEnableTResponseLeafExpansion(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<964>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getExperimentalDisableDailyRootBiomassToSoil() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<965>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getExperimentalDisableDailyRootBiomassToSoil() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<965>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setExperimentalDisableDailyRootBiomassToSoil(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<965>() * ::capnp::ELEMENTS, value);
}

inline bool CropModuleParameters::Reader::getEnableVernalisationFactorFix() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<966>() * ::capnp::ELEMENTS);
}

inline bool CropModuleParameters::Builder::getEnableVernalisationFactorFix() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<966>() * ::capnp::ELEMENTS);
}
inline void CropModuleParameters::Builder::setEnableVernalisationFactorFix(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<966>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getCriticalMoistureDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getCriticalMoistureDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setCriticalMoistureDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSaturatedHydraulicConductivity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSaturatedHydraulicConductivity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSaturatedHydraulicConductivity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSurfaceRoughness() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSurfaceRoughness() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSurfaceRoughness(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getGroundwaterDischarge() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getGroundwaterDischarge() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setGroundwaterDischarge(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getHydraulicConductivityRedux() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getHydraulicConductivityRedux() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setHydraulicConductivityRedux(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSnowAccumulationTresholdTemperature() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSnowAccumulationTresholdTemperature() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSnowAccumulationTresholdTemperature(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getKcFactor() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getKcFactor() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setKcFactor(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getTemperatureLimitForLiquidWater() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getTemperatureLimitForLiquidWater() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setTemperatureLimitForLiquidWater(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getCorrectionSnow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getCorrectionSnow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setCorrectionSnow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getCorrectionRain() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getCorrectionRain() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setCorrectionRain(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSnowMaxAdditionalDensity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSnowMaxAdditionalDensity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSnowMaxAdditionalDensity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getNewSnowDensityMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getNewSnowDensityMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setNewSnowDensityMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSnowRetentionCapacityMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSnowRetentionCapacityMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSnowRetentionCapacityMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getRefreezeParameter1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getRefreezeParameter1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setRefreezeParameter1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getRefreezeParameter2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getRefreezeParameter2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setRefreezeParameter2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getRefreezeTemperature() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getRefreezeTemperature() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setRefreezeTemperature(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSnowMeltTemperature() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSnowMeltTemperature() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSnowMeltTemperature(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSnowPacking() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSnowPacking() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSnowPacking(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getSnowRetentionCapacityMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getSnowRetentionCapacityMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setSnowRetentionCapacityMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getEvaporationZeta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getEvaporationZeta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setEvaporationZeta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getXsaCriticalSoilMoisture() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getXsaCriticalSoilMoisture() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setXsaCriticalSoilMoisture(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getMaximumEvaporationImpactDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getMaximumEvaporationImpactDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setMaximumEvaporationImpactDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getMaxPercolationRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getMaxPercolationRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setMaxPercolationRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline double SoilMoistureModuleParameters::Reader::getMoistureInitValue() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline double SoilMoistureModuleParameters::Builder::getMoistureInitValue() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void SoilMoistureModuleParameters::Builder::setMoistureInitValue(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline double SoilOrganicModuleParameters::Reader::getSomSlowDecCoeffStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4541470504723445558ull);
}

inline double SoilOrganicModuleParameters::Builder::getSomSlowDecCoeffStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4541470504723445558ull);
}
inline void SoilOrganicModuleParameters::Builder::setSomSlowDecCoeffStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4541470504723445558ull);
}

inline double SoilOrganicModuleParameters::Reader::getSomFastDecCoeffStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4549297112357469138ull);
}

inline double SoilOrganicModuleParameters::Builder::getSomFastDecCoeffStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4549297112357469138ull);
}
inline void SoilOrganicModuleParameters::Builder::setSomFastDecCoeffStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4549297112357469138ull);
}

inline double SoilOrganicModuleParameters::Reader::getSmbSlowMaintRateStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4562254508917369340ull);
}

inline double SoilOrganicModuleParameters::Builder::getSmbSlowMaintRateStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4562254508917369340ull);
}
inline void SoilOrganicModuleParameters::Builder::setSmbSlowMaintRateStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4562254508917369340ull);
}

inline double SoilOrganicModuleParameters::Reader::getSmbFastMaintRateStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4576918229304087675ull);
}

inline double SoilOrganicModuleParameters::Builder::getSmbFastMaintRateStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4576918229304087675ull);
}
inline void SoilOrganicModuleParameters::Builder::setSmbFastMaintRateStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4576918229304087675ull);
}

inline double SoilOrganicModuleParameters::Reader::getSmbSlowDeathRateStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4562254508917369340ull);
}

inline double SoilOrganicModuleParameters::Builder::getSmbSlowDeathRateStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4562254508917369340ull);
}
inline void SoilOrganicModuleParameters::Builder::setSmbSlowDeathRateStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 4562254508917369340ull);
}

inline double SoilOrganicModuleParameters::Reader::getSmbFastDeathRateStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4576918229304087675ull);
}

inline double SoilOrganicModuleParameters::Builder::getSmbFastDeathRateStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4576918229304087675ull);
}
inline void SoilOrganicModuleParameters::Builder::setSmbFastDeathRateStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 4576918229304087675ull);
}

inline double SoilOrganicModuleParameters::Reader::getSmbUtilizationEfficiency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4603579539098121011ull);
}

inline double SoilOrganicModuleParameters::Builder::getSmbUtilizationEfficiency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4603579539098121011ull);
}
inline void SoilOrganicModuleParameters::Builder::setSmbUtilizationEfficiency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 4603579539098121011ull);
}

inline double SoilOrganicModuleParameters::Reader::getSomSlowUtilizationEfficiency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}

inline double SoilOrganicModuleParameters::Builder::getSomSlowUtilizationEfficiency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}
inline void SoilOrganicModuleParameters::Builder::setSomSlowUtilizationEfficiency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 4600877379321698714ull);
}

inline double SoilOrganicModuleParameters::Reader::getSomFastUtilizationEfficiency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Builder::getSomFastUtilizationEfficiency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}
inline void SoilOrganicModuleParameters::Builder::setSomFastUtilizationEfficiency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Reader::getAomSlowUtilizationEfficiency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}

inline double SoilOrganicModuleParameters::Builder::getAomSlowUtilizationEfficiency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}
inline void SoilOrganicModuleParameters::Builder::setAomSlowUtilizationEfficiency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value, 4600877379321698714ull);
}

inline double SoilOrganicModuleParameters::Reader::getAomFastUtilizationEfficiency() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Builder::getAomFastUtilizationEfficiency() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}
inline void SoilOrganicModuleParameters::Builder::setAomFastUtilizationEfficiency(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Reader::getAomFastMaxCtoN() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, 4652007308841189376ull);
}

inline double SoilOrganicModuleParameters::Builder::getAomFastMaxCtoN() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, 4652007308841189376ull);
}
inline void SoilOrganicModuleParameters::Builder::setAomFastMaxCtoN(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value, 4652007308841189376ull);
}

inline double SoilOrganicModuleParameters::Reader::getPartSOMFastToSOMSlow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}

inline double SoilOrganicModuleParameters::Builder::getPartSOMFastToSOMSlow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}
inline void SoilOrganicModuleParameters::Builder::setPartSOMFastToSOMSlow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value, 4599075939470750515ull);
}

inline double SoilOrganicModuleParameters::Reader::getPartSMBSlowToSOMFast() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 4603579539098121011ull);
}

inline double SoilOrganicModuleParameters::Builder::getPartSMBSlowToSOMFast() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 4603579539098121011ull);
}
inline void SoilOrganicModuleParameters::Builder::setPartSMBSlowToSOMFast(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value, 4603579539098121011ull);
}

inline double SoilOrganicModuleParameters::Reader::getPartSMBFastToSOMFast() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 4603579539098121011ull);
}

inline double SoilOrganicModuleParameters::Builder::getPartSMBFastToSOMFast() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 4603579539098121011ull);
}
inline void SoilOrganicModuleParameters::Builder::setPartSMBFastToSOMFast(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value, 4603579539098121011ull);
}

inline double SoilOrganicModuleParameters::Reader::getPartSOMToSMBSlow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 4579800533065604792ull);
}

inline double SoilOrganicModuleParameters::Builder::getPartSOMToSMBSlow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 4579800533065604792ull);
}
inline void SoilOrganicModuleParameters::Builder::setPartSOMToSMBSlow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value, 4579800533065604792ull);
}

inline double SoilOrganicModuleParameters::Reader::getPartSOMToSMBFast() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4551510721646314285ull);
}

inline double SoilOrganicModuleParameters::Builder::getPartSOMToSMBFast() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4551510721646314285ull);
}
inline void SoilOrganicModuleParameters::Builder::setPartSOMToSMBFast(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, 4551510721646314285ull);
}

inline double SoilOrganicModuleParameters::Reader::getCnRatioSMB() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4619229547803233485ull);
}

inline double SoilOrganicModuleParameters::Builder::getCnRatioSMB() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4619229547803233485ull);
}
inline void SoilOrganicModuleParameters::Builder::setCnRatioSMB(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value, 4619229547803233485ull);
}

inline double SoilOrganicModuleParameters::Reader::getLimitClayEffect() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4598175219545276416ull);
}

inline double SoilOrganicModuleParameters::Builder::getLimitClayEffect() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4598175219545276416ull);
}
inline void SoilOrganicModuleParameters::Builder::setLimitClayEffect(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 4598175219545276416ull);
}

inline double SoilOrganicModuleParameters::Reader::getAmmoniaOxidationRateCoeffStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Builder::getAmmoniaOxidationRateCoeffStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}
inline void SoilOrganicModuleParameters::Builder::setAmmoniaOxidationRateCoeffStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Reader::getNitriteOxidationRateCoeffStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}

inline double SoilOrganicModuleParameters::Builder::getNitriteOxidationRateCoeffStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}
inline void SoilOrganicModuleParameters::Builder::setNitriteOxidationRateCoeffStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value, 4606281698874543309ull);
}

inline double SoilOrganicModuleParameters::Reader::getTransportRateCoeff() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Builder::getTransportRateCoeff() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}
inline void SoilOrganicModuleParameters::Builder::setTransportRateCoeff(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Reader::getSpecAnaerobDenitrification() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Builder::getSpecAnaerobDenitrification() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, 4591870180066957722ull);
}
inline void SoilOrganicModuleParameters::Builder::setSpecAnaerobDenitrification(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value, 4591870180066957722ull);
}

inline double SoilOrganicModuleParameters::Reader::getImmobilisationRateCoeffNO3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Builder::getImmobilisationRateCoeffNO3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}
inline void SoilOrganicModuleParameters::Builder::setImmobilisationRateCoeffNO3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Reader::getImmobilisationRateCoeffNH4() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Builder::getImmobilisationRateCoeffNH4() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}
inline void SoilOrganicModuleParameters::Builder::setImmobilisationRateCoeffNH4(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Reader::getDenit1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 4596373779694328218ull);
}

inline double SoilOrganicModuleParameters::Builder::getDenit1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 4596373779694328218ull);
}
inline void SoilOrganicModuleParameters::Builder::setDenit1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value, 4596373779694328218ull);
}

inline double SoilOrganicModuleParameters::Reader::getDenit2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 4605380978949069210ull);
}

inline double SoilOrganicModuleParameters::Builder::getDenit2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 4605380978949069210ull);
}
inline void SoilOrganicModuleParameters::Builder::setDenit2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value, 4605380978949069210ull);
}

inline double SoilOrganicModuleParameters::Reader::getDenit3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}

inline double SoilOrganicModuleParameters::Builder::getDenit3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}
inline void SoilOrganicModuleParameters::Builder::setDenit3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value, 4606281698874543309ull);
}

inline double SoilOrganicModuleParameters::Reader::getHydrolysisKM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, 4569847938177086186ull);
}

inline double SoilOrganicModuleParameters::Builder::getHydrolysisKM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, 4569847938177086186ull);
}
inline void SoilOrganicModuleParameters::Builder::setHydrolysisKM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value, 4569847938177086186ull);
}

inline double SoilOrganicModuleParameters::Reader::getActivationEnergy() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, 4675867810675556352ull);
}

inline double SoilOrganicModuleParameters::Builder::getActivationEnergy() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, 4675867810675556352ull);
}
inline void SoilOrganicModuleParameters::Builder::setActivationEnergy(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value, 4675867810675556352ull);
}

inline double SoilOrganicModuleParameters::Reader::getHydrolysisP1() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, 4436814419959884499ull);
}

inline double SoilOrganicModuleParameters::Builder::getHydrolysisP1() {
  return _builder.getDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, 4436814419959884499ull);
}
inline void SoilOrganicModuleParameters::Builder::setHydrolysisP1(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<30>() * ::capnp::ELEMENTS, value, 4436814419959884499ull);
}

inline double SoilOrganicModuleParameters::Reader::getHydrolysisP2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, 4429506912379082334ull);
}

inline double SoilOrganicModuleParameters::Builder::getHydrolysisP2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, 4429506912379082334ull);
}
inline void SoilOrganicModuleParameters::Builder::setHydrolysisP2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<31>() * ::capnp::ELEMENTS, value, 4429506912379082334ull);
}

inline double SoilOrganicModuleParameters::Reader::getAtmosphericResistance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, 4567911030049346683ull);
}

inline double SoilOrganicModuleParameters::Builder::getAtmosphericResistance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, 4567911030049346683ull);
}
inline void SoilOrganicModuleParameters::Builder::setAtmosphericResistance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value, 4567911030049346683ull);
}

inline double SoilOrganicModuleParameters::Reader::getN2oProductionRate() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Builder::getN2oProductionRate() {
  return _builder.getDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, 4602678819172646912ull);
}
inline void SoilOrganicModuleParameters::Builder::setN2oProductionRate(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value, 4602678819172646912ull);
}

inline double SoilOrganicModuleParameters::Reader::getInhibitorNH3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double SoilOrganicModuleParameters::Builder::getInhibitorNH3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void SoilOrganicModuleParameters::Builder::setInhibitorNH3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<34>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double SoilOrganicModuleParameters::Reader::getPsMaxMineralisationDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}

inline double SoilOrganicModuleParameters::Builder::getPsMaxMineralisationDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, 4600877379321698714ull);
}
inline void SoilOrganicModuleParameters::Builder::setPsMaxMineralisationDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<35>() * ::capnp::ELEMENTS, value, 4600877379321698714ull);
}

inline bool SoilOrganicModuleParameters::Reader::hasSticsParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SoilOrganicModuleParameters::Builder::hasSticsParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::SticsParameters::Reader SoilOrganicModuleParameters::Reader::getSticsParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SticsParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::SticsParameters::Builder SoilOrganicModuleParameters::Builder::getSticsParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SticsParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::SticsParameters::Pipeline SoilOrganicModuleParameters::Pipeline::getSticsParams() {
  return  ::mas::schema::model::monica::SticsParameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SoilOrganicModuleParameters::Builder::setSticsParams( ::mas::schema::model::monica::SticsParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SticsParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::SticsParameters::Builder SoilOrganicModuleParameters::Builder::initSticsParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SticsParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SoilOrganicModuleParameters::Builder::adoptSticsParams(
    ::capnp::Orphan< ::mas::schema::model::monica::SticsParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SticsParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::SticsParameters> SoilOrganicModuleParameters::Builder::disownSticsParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::SticsParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double SoilTemperatureModuleParameters::Reader::getNTau() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getNTau() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setNTau(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getInitialSurfaceTemperature() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getInitialSurfaceTemperature() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setInitialSurfaceTemperature(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getBaseTemperature() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getBaseTemperature() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setBaseTemperature(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getQuartzRawDensity() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getQuartzRawDensity() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setQuartzRawDensity(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getDensityAir() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getDensityAir() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setDensityAir(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getDensityWater() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getDensityWater() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setDensityWater(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getDensityHumus() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getDensityHumus() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setDensityHumus(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getSpecificHeatCapacityAir() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getSpecificHeatCapacityAir() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setSpecificHeatCapacityAir(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getSpecificHeatCapacityQuartz() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getSpecificHeatCapacityQuartz() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setSpecificHeatCapacityQuartz(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getSpecificHeatCapacityWater() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getSpecificHeatCapacityWater() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setSpecificHeatCapacityWater(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getSpecificHeatCapacityHumus() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getSpecificHeatCapacityHumus() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setSpecificHeatCapacityHumus(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getSoilAlbedo() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double SoilTemperatureModuleParameters::Builder::getSoilAlbedo() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void SoilTemperatureModuleParameters::Builder::setSoilAlbedo(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double SoilTemperatureModuleParameters::Reader::getSoilMoisture() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4598175219545276416ull);
}

inline double SoilTemperatureModuleParameters::Builder::getSoilMoisture() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4598175219545276416ull);
}
inline void SoilTemperatureModuleParameters::Builder::setSoilMoisture(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value, 4598175219545276416ull);
}

inline double SoilTransportModuleParameters::Reader::getDispersionLength() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double SoilTransportModuleParameters::Builder::getDispersionLength() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SoilTransportModuleParameters::Builder::setDispersionLength(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double SoilTransportModuleParameters::Reader::getAd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double SoilTransportModuleParameters::Builder::getAd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SoilTransportModuleParameters::Builder::setAd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double SoilTransportModuleParameters::Reader::getDiffusionCoefficientStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double SoilTransportModuleParameters::Builder::getDiffusionCoefficientStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SoilTransportModuleParameters::Builder::setDiffusionCoefficientStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double SoilTransportModuleParameters::Reader::getNDeposition() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double SoilTransportModuleParameters::Builder::getNDeposition() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SoilTransportModuleParameters::Builder::setNDeposition(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Voc::Emissions::Reader::hasSpeciesIdToIsopreneEmission() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Voc::Emissions::Builder::hasSpeciesIdToIsopreneEmission() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader Voc::Emissions::Reader::getSpeciesIdToIsopreneEmission() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder Voc::Emissions::Builder::getSpeciesIdToIsopreneEmission() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Voc::Emissions::Builder::setSpeciesIdToIsopreneEmission( ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder Voc::Emissions::Builder::initSpeciesIdToIsopreneEmission(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Voc::Emissions::Builder::adoptSpeciesIdToIsopreneEmission(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>> Voc::Emissions::Builder::disownSpeciesIdToIsopreneEmission() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Voc::Emissions::Reader::hasSpeciesIdToMonoterpeneEmission() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Voc::Emissions::Builder::hasSpeciesIdToMonoterpeneEmission() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader Voc::Emissions::Reader::getSpeciesIdToMonoterpeneEmission() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder Voc::Emissions::Builder::getSpeciesIdToMonoterpeneEmission() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Voc::Emissions::Builder::setSpeciesIdToMonoterpeneEmission( ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>::Builder Voc::Emissions::Builder::initSpeciesIdToMonoterpeneEmission(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Voc::Emissions::Builder::adoptSpeciesIdToMonoterpeneEmission(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>> Voc::Emissions::Builder::disownSpeciesIdToMonoterpeneEmission() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Voc::Emissions::SpeciesIdToEmission,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Voc::Emissions::Reader::getIsopreneEmission() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::Emissions::Builder::getIsopreneEmission() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::Emissions::Builder::setIsopreneEmission(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::Emissions::Reader::getMonoterpeneEmission() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::Emissions::Builder::getMonoterpeneEmission() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::Emissions::Builder::setMonoterpeneEmission(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Voc::Emissions::SpeciesIdToEmission::Reader::getSpeciesId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Voc::Emissions::SpeciesIdToEmission::Builder::getSpeciesId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::Emissions::SpeciesIdToEmission::Builder::setSpeciesId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::Emissions::SpeciesIdToEmission::Reader::getEmission() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::Emissions::SpeciesIdToEmission::Builder::getEmission() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::Emissions::SpeciesIdToEmission::Builder::setEmission(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t Voc::SpeciesData::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Voc::SpeciesData::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getEfMonos() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getEfMonos() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setEfMonos(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getEfMono() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getEfMono() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setEfMono(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getEfIso() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getEfIso() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setEfIso(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getTheta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}

inline double Voc::SpeciesData::Builder::getTheta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}
inline void Voc::SpeciesData::Builder::setTheta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 4606281698874543309ull);
}

inline double Voc::SpeciesData::Reader::getFage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Voc::SpeciesData::Builder::getFage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Voc::SpeciesData::Builder::setFage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Voc::SpeciesData::Reader::getCtIs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getCtIs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setCtIs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getCtMt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getCtMt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setCtMt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getHaIs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getHaIs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setHaIs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getHaMt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getHaMt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setHaMt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getDsIs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getDsIs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setDsIs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getDsMt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getDsMt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setDsMt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getHdIs() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4688633003235082240ull);
}

inline double Voc::SpeciesData::Builder::getHdIs() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4688633003235082240ull);
}
inline void Voc::SpeciesData::Builder::setHdIs(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value, 4688633003235082240ull);
}

inline double Voc::SpeciesData::Reader::getHdMt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 4688633003235082240ull);
}

inline double Voc::SpeciesData::Builder::getHdMt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 4688633003235082240ull);
}
inline void Voc::SpeciesData::Builder::setHdMt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value, 4688633003235082240ull);
}

inline double Voc::SpeciesData::Reader::getHdj() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 4686799155278905344ull);
}

inline double Voc::SpeciesData::Builder::getHdj() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 4686799155278905344ull);
}
inline void Voc::SpeciesData::Builder::setHdj(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value, 4686799155278905344ull);
}

inline double Voc::SpeciesData::Reader::getSdj() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 4649394869213593600ull);
}

inline double Voc::SpeciesData::Builder::getSdj() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 4649394869213593600ull);
}
inline void Voc::SpeciesData::Builder::setSdj(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value, 4649394869213593600ull);
}

inline double Voc::SpeciesData::Reader::getKc25() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4643281584563159040ull);
}

inline double Voc::SpeciesData::Builder::getKc25() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4643281584563159040ull);
}
inline void Voc::SpeciesData::Builder::setKc25(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, 4643281584563159040ull);
}

inline double Voc::SpeciesData::Reader::getKo25() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4640502019168141312ull);
}

inline double Voc::SpeciesData::Builder::getKo25() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4640502019168141312ull);
}
inline void Voc::SpeciesData::Builder::setKo25(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value, 4640502019168141312ull);
}

inline double Voc::SpeciesData::Reader::getVcMax25() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4635329916471083008ull);
}

inline double Voc::SpeciesData::Builder::getVcMax25() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4635329916471083008ull);
}
inline void Voc::SpeciesData::Builder::setVcMax25(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 4635329916471083008ull);
}

inline double Voc::SpeciesData::Reader::getQjvc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}

inline double Voc::SpeciesData::Builder::getQjvc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}
inline void Voc::SpeciesData::Builder::setQjvc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value, 4611686018427387904ull);
}

inline double Voc::SpeciesData::Reader::getAekc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, 4678390640105488384ull);
}

inline double Voc::SpeciesData::Builder::getAekc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, 4678390640105488384ull);
}
inline void Voc::SpeciesData::Builder::setAekc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value, 4678390640105488384ull);
}

inline double Voc::SpeciesData::Reader::getAeko() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, 4675173469082615808ull);
}

inline double Voc::SpeciesData::Builder::getAeko() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, 4675173469082615808ull);
}
inline void Voc::SpeciesData::Builder::setAeko(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value, 4675173469082615808ull);
}

inline double Voc::SpeciesData::Reader::getAejm() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, 4675318054861668352ull);
}

inline double Voc::SpeciesData::Builder::getAejm() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, 4675318054861668352ull);
}
inline void Voc::SpeciesData::Builder::setAejm(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value, 4675318054861668352ull);
}

inline double Voc::SpeciesData::Reader::getAevc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, 4678275741140385792ull);
}

inline double Voc::SpeciesData::Builder::getAevc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, 4678275741140385792ull);
}
inline void Voc::SpeciesData::Builder::setAevc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value, 4678275741140385792ull);
}

inline double Voc::SpeciesData::Reader::getSlaMin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}

inline double Voc::SpeciesData::Builder::getSlaMin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}
inline void Voc::SpeciesData::Builder::setSlaMin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value, 4626322717216342016ull);
}

inline double Voc::SpeciesData::Reader::getScaleI() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Voc::SpeciesData::Builder::getScaleI() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Voc::SpeciesData::Builder::setScaleI(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Voc::SpeciesData::Reader::getScaleM() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double Voc::SpeciesData::Builder::getScaleM() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void Voc::SpeciesData::Builder::setScaleM(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double Voc::SpeciesData::Reader::getMFol() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getMFol() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setMFol(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getLai() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getLai() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setLai(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value);
}

inline double Voc::SpeciesData::Reader::getSla() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}

inline double Voc::SpeciesData::Builder::getSla() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS);
}
inline void Voc::SpeciesData::Builder::setSla(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getKc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getKc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setKc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getKo() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getKo() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setKo(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getOi() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getOi() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setOi(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getCi() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getCi() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setCi(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getComp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getComp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setComp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getVcMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getVcMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setVcMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getJMax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getJMax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setJMax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getJj() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getJj() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setJj(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getJj1000() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getJj1000() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setJj1000(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double Voc::CPData::Reader::getJv() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double Voc::CPData::Builder::getJv() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Voc::CPData::Builder::setJv(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getRad() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getRad() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setRad(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getRad24() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getRad24() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setRad24(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getRad240() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getRad240() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setRad240(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getTFol() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getTFol() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setTFol(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getTFol24() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getTFol24() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setTFol24(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getTFol240() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getTFol240() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setTFol240(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getSunlitfoliagefraction() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getSunlitfoliagefraction() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setSunlitfoliagefraction(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getSunlitfoliagefraction24() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getSunlitfoliagefraction24() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setSunlitfoliagefraction24(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double Voc::MicroClimateData::Reader::getCo2concentration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double Voc::MicroClimateData::Builder::getCo2concentration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Voc::MicroClimateData::Builder::setCo2concentration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double Voc::PhotosynthT::Reader::getPar() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::PhotosynthT::Builder::getPar() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::PhotosynthT::Builder::setPar(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::PhotosynthT::Reader::getPar24() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::PhotosynthT::Builder::getPar24() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::PhotosynthT::Builder::setPar24(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Voc::PhotosynthT::Reader::getPar240() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Voc::PhotosynthT::Builder::getPar240() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Voc::PhotosynthT::Builder::setPar240(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Voc::FoliageT::Reader::getTempK() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::FoliageT::Builder::getTempK() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::FoliageT::Builder::setTempK(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::FoliageT::Reader::getTempK24() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::FoliageT::Builder::getTempK24() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::FoliageT::Builder::setTempK24(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Voc::FoliageT::Reader::getTempK240() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Voc::FoliageT::Builder::getTempK240() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Voc::FoliageT::Builder::setTempK240(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Voc::EnzymeActivityT::Reader::getEfIso() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::EnzymeActivityT::Builder::getEfIso() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::EnzymeActivityT::Builder::setEfIso(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::EnzymeActivityT::Reader::getEfMono() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::EnzymeActivityT::Builder::getEfMono() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::EnzymeActivityT::Builder::setEfMono(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Voc::LeafEmissionT::Reader::getFoliageLayer() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Voc::LeafEmissionT::Builder::getFoliageLayer() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::LeafEmissionT::Builder::setFoliageLayer( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Voc::LeafEmissionT::Reader::hasPho() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Voc::LeafEmissionT::Builder::hasPho() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Voc::PhotosynthT::Reader Voc::LeafEmissionT::Reader::getPho() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::PhotosynthT>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Voc::PhotosynthT::Builder Voc::LeafEmissionT::Builder::getPho() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::PhotosynthT>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Voc::PhotosynthT::Pipeline Voc::LeafEmissionT::Pipeline::getPho() {
  return  ::mas::schema::model::monica::Voc::PhotosynthT::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Voc::LeafEmissionT::Builder::setPho( ::mas::schema::model::monica::Voc::PhotosynthT::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::PhotosynthT>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Voc::PhotosynthT::Builder Voc::LeafEmissionT::Builder::initPho() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::PhotosynthT>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Voc::LeafEmissionT::Builder::adoptPho(
    ::capnp::Orphan< ::mas::schema::model::monica::Voc::PhotosynthT>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::PhotosynthT>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Voc::PhotosynthT> Voc::LeafEmissionT::Builder::disownPho() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::PhotosynthT>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Voc::LeafEmissionT::Reader::hasFol() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Voc::LeafEmissionT::Builder::hasFol() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Voc::FoliageT::Reader Voc::LeafEmissionT::Reader::getFol() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::FoliageT>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Voc::FoliageT::Builder Voc::LeafEmissionT::Builder::getFol() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::FoliageT>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Voc::FoliageT::Pipeline Voc::LeafEmissionT::Pipeline::getFol() {
  return  ::mas::schema::model::monica::Voc::FoliageT::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Voc::LeafEmissionT::Builder::setFol( ::mas::schema::model::monica::Voc::FoliageT::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::FoliageT>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Voc::FoliageT::Builder Voc::LeafEmissionT::Builder::initFol() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::FoliageT>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Voc::LeafEmissionT::Builder::adoptFol(
    ::capnp::Orphan< ::mas::schema::model::monica::Voc::FoliageT>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::FoliageT>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Voc::FoliageT> Voc::LeafEmissionT::Builder::disownFol() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::FoliageT>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Voc::LeafEmissionT::Reader::hasEnzAct() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Voc::LeafEmissionT::Builder::hasEnzAct() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Reader Voc::LeafEmissionT::Reader::getEnzAct() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::EnzymeActivityT>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Builder Voc::LeafEmissionT::Builder::getEnzAct() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::EnzymeActivityT>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Pipeline Voc::LeafEmissionT::Pipeline::getEnzAct() {
  return  ::mas::schema::model::monica::Voc::EnzymeActivityT::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Voc::LeafEmissionT::Builder::setEnzAct( ::mas::schema::model::monica::Voc::EnzymeActivityT::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::EnzymeActivityT>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Voc::EnzymeActivityT::Builder Voc::LeafEmissionT::Builder::initEnzAct() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::EnzymeActivityT>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Voc::LeafEmissionT::Builder::adoptEnzAct(
    ::capnp::Orphan< ::mas::schema::model::monica::Voc::EnzymeActivityT>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::EnzymeActivityT>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Voc::EnzymeActivityT> Voc::LeafEmissionT::Builder::disownEnzAct() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Voc::EnzymeActivityT>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double Voc::LeafEmissions::Reader::getIsoprene() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Voc::LeafEmissions::Builder::getIsoprene() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Voc::LeafEmissions::Builder::setIsoprene(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Voc::LeafEmissions::Reader::getMonoterp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Voc::LeafEmissions::Builder::getMonoterp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Voc::LeafEmissions::Builder::setMonoterp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SticsParameters::Reader::getUseN2O() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool SticsParameters::Builder::getUseN2O() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SticsParameters::Builder::setUseN2O(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool SticsParameters::Reader::getUseNit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool SticsParameters::Builder::getUseNit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SticsParameters::Builder::setUseNit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SticsParameters::Reader::getUseDenit() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool SticsParameters::Builder::getUseDenit() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SticsParameters::Builder::setUseDenit(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SticsParameters::Reader::getCodeVnit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint8_t SticsParameters::Builder::getCodeVnit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1u);
}
inline void SticsParameters::Builder::setCodeVnit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1u);
}

inline  ::uint8_t SticsParameters::Reader::getCodeTnit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 2u);
}

inline  ::uint8_t SticsParameters::Builder::getCodeTnit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 2u);
}
inline void SticsParameters::Builder::setCodeTnit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 2u);
}

inline  ::uint8_t SticsParameters::Reader::getCodeRationit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 2u);
}

inline  ::uint8_t SticsParameters::Builder::getCodeRationit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 2u);
}
inline void SticsParameters::Builder::setCodeRationit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 2u);
}

inline  ::uint8_t SticsParameters::Reader::getCodeHourlyWfpsNit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 2u);
}

inline  ::uint8_t SticsParameters::Builder::getCodeHourlyWfpsNit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 2u);
}
inline void SticsParameters::Builder::setCodeHourlyWfpsNit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 2u);
}

inline  ::uint8_t SticsParameters::Reader::getCodePdenit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint8_t SticsParameters::Builder::getCodePdenit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 1u);
}
inline void SticsParameters::Builder::setCodePdenit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 1u);
}

inline  ::uint8_t SticsParameters::Reader::getCodeRatiodenit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 2u);
}

inline  ::uint8_t SticsParameters::Builder::getCodeRatiodenit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 2u);
}
inline void SticsParameters::Builder::setCodeRatiodenit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 2u);
}

inline  ::uint8_t SticsParameters::Reader::getCodeHourlyWfpsDenit() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 2u);
}

inline  ::uint8_t SticsParameters::Builder::getCodeHourlyWfpsDenit() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 2u);
}
inline void SticsParameters::Builder::setCodeHourlyWfpsDenit( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 2u);
}

inline double SticsParameters::Reader::getHminn() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}

inline double SticsParameters::Builder::getHminn() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}
inline void SticsParameters::Builder::setHminn(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4599075939470750515ull);
}

inline double SticsParameters::Reader::getHoptn() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}

inline double SticsParameters::Builder::getHoptn() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4606281698874543309ull);
}
inline void SticsParameters::Builder::setHoptn(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4606281698874543309ull);
}

inline double SticsParameters::Reader::getPHminnit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4616189618054758400ull);
}

inline double SticsParameters::Builder::getPHminnit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4616189618054758400ull);
}
inline void SticsParameters::Builder::setPHminnit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4616189618054758400ull);
}

inline double SticsParameters::Reader::getPHmaxnit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4619792497756654797ull);
}

inline double SticsParameters::Builder::getPHmaxnit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, 4619792497756654797ull);
}
inline void SticsParameters::Builder::setPHmaxnit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value, 4619792497756654797ull);
}

inline double SticsParameters::Reader::getNh4Min() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double SticsParameters::Builder::getNh4Min() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void SticsParameters::Builder::setNh4Min(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double SticsParameters::Reader::getPHminden() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4619792497756654797ull);
}

inline double SticsParameters::Builder::getPHminden() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, 4619792497756654797ull);
}
inline void SticsParameters::Builder::setPHminden(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value, 4619792497756654797ull);
}

inline double SticsParameters::Reader::getPHmaxden() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4621368757626234470ull);
}

inline double SticsParameters::Builder::getPHmaxden() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, 4621368757626234470ull);
}
inline void SticsParameters::Builder::setPHmaxden(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value, 4621368757626234470ull);
}

inline double SticsParameters::Reader::getWfpsc() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4603759683083215831ull);
}

inline double SticsParameters::Builder::getWfpsc() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, 4603759683083215831ull);
}
inline void SticsParameters::Builder::setWfpsc(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value, 4603759683083215831ull);
}

inline double SticsParameters::Reader::getTdenitoptGauss() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4631811479262199808ull);
}

inline double SticsParameters::Builder::getTdenitoptGauss() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, 4631811479262199808ull);
}
inline void SticsParameters::Builder::setTdenitoptGauss(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value, 4631811479262199808ull);
}

inline double SticsParameters::Reader::getScaleTdenitopt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4627730092099895296ull);
}

inline double SticsParameters::Builder::getScaleTdenitopt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, 4627730092099895296ull);
}
inline void SticsParameters::Builder::setScaleTdenitopt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value, 4627730092099895296ull);
}

inline double SticsParameters::Reader::getKd() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, 4639411303633387520ull);
}

inline double SticsParameters::Builder::getKd() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, 4639411303633387520ull);
}
inline void SticsParameters::Builder::setKd(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value, 4639411303633387520ull);
}

inline double SticsParameters::Reader::getKDesat() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4613937818241073152ull);
}

inline double SticsParameters::Builder::getKDesat() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, 4613937818241073152ull);
}
inline void SticsParameters::Builder::setKDesat(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value, 4613937818241073152ull);
}

inline double SticsParameters::Reader::getFnx() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 4605380978949069210ull);
}

inline double SticsParameters::Builder::getFnx() {
  return _builder.getDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, 4605380978949069210ull);
}
inline void SticsParameters::Builder::setFnx(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value, 4605380978949069210ull);
}

inline double SticsParameters::Reader::getVnitmax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 4628377484546329805ull);
}

inline double SticsParameters::Builder::getVnitmax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, 4628377484546329805ull);
}
inline void SticsParameters::Builder::setVnitmax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value, 4628377484546329805ull);
}

inline double SticsParameters::Reader::getKamm() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 4627448617123184640ull);
}

inline double SticsParameters::Builder::getKamm() {
  return _builder.getDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, 4627448617123184640ull);
}
inline void SticsParameters::Builder::setKamm(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value, 4627448617123184640ull);
}

inline double SticsParameters::Reader::getTnitmin() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4617315517961601024ull);
}

inline double SticsParameters::Builder::getTnitmin() {
  return _builder.getDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 4617315517961601024ull);
}
inline void SticsParameters::Builder::setTnitmin(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, 4617315517961601024ull);
}

inline double SticsParameters::Reader::getTnitopt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4629137466983448576ull);
}

inline double SticsParameters::Builder::getTnitopt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, 4629137466983448576ull);
}
inline void SticsParameters::Builder::setTnitopt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value, 4629137466983448576ull);
}

inline double SticsParameters::Reader::getTnitop2() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4630122629401935872ull);
}

inline double SticsParameters::Builder::getTnitop2() {
  return _builder.getDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, 4630122629401935872ull);
}
inline void SticsParameters::Builder::setTnitop2(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value, 4630122629401935872ull);
}

inline double SticsParameters::Reader::getTnitmax() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, 4633359591634108416ull);
}

inline double SticsParameters::Builder::getTnitmax() {
  return _builder.getDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, 4633359591634108416ull);
}
inline void SticsParameters::Builder::setTnitmax(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value, 4633359591634108416ull);
}

inline double SticsParameters::Reader::getTnitoptGauss() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, 4629770785681047552ull);
}

inline double SticsParameters::Builder::getTnitoptGauss() {
  return _builder.getDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, 4629770785681047552ull);
}
inline void SticsParameters::Builder::setTnitoptGauss(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value, 4629770785681047552ull);
}

inline double SticsParameters::Reader::getScaleTnitopt() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, 4625196817309499392ull);
}

inline double SticsParameters::Builder::getScaleTnitopt() {
  return _builder.getDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, 4625196817309499392ull);
}
inline void SticsParameters::Builder::setScaleTnitopt(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value, 4625196817309499392ull);
}

inline double SticsParameters::Reader::getRationit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, 4565021520528425773ull);
}

inline double SticsParameters::Builder::getRationit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, 4565021520528425773ull);
}
inline void SticsParameters::Builder::setRationit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value, 4565021520528425773ull);
}

inline double SticsParameters::Reader::getCminPdenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double SticsParameters::Builder::getCminPdenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void SticsParameters::Builder::setCminPdenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double SticsParameters::Reader::getCmaxPdenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 4618441417868443648ull);
}

inline double SticsParameters::Builder::getCmaxPdenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 4618441417868443648ull);
}
inline void SticsParameters::Builder::setCmaxPdenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value, 4618441417868443648ull);
}

inline double SticsParameters::Reader::getMinPdenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}

inline double SticsParameters::Builder::getMinPdenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 4607182418800017408ull);
}
inline void SticsParameters::Builder::setMinPdenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value, 4607182418800017408ull);
}

inline double SticsParameters::Reader::getMaxPdenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}

inline double SticsParameters::Builder::getMaxPdenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}
inline void SticsParameters::Builder::setMaxPdenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value, 4626322717216342016ull);
}

inline double SticsParameters::Reader::getRatiodenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, 4596373779694328218ull);
}

inline double SticsParameters::Builder::getRatiodenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, 4596373779694328218ull);
}
inline void SticsParameters::Builder::setRatiodenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<27>() * ::capnp::ELEMENTS, value, 4596373779694328218ull);
}

inline double SticsParameters::Reader::getProfdenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}

inline double SticsParameters::Builder::getProfdenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, 4626322717216342016ull);
}
inline void SticsParameters::Builder::setProfdenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<28>() * ::capnp::ELEMENTS, value, 4626322717216342016ull);
}

inline double SticsParameters::Reader::getVpotdenit() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}

inline double SticsParameters::Builder::getVpotdenit() {
  return _builder.getDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, 4611686018427387904ull);
}
inline void SticsParameters::Builder::setVpotdenit(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<29>() * ::capnp::ELEMENTS, value, 4611686018427387904ull);
}

}  // namespace
}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

