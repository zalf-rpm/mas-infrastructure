// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: monica_management.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 10000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../../common.capnp.h"
#include "../../crop.capnp.h"
#include "../../date.capnp.h"
#include "../../geo.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a1f99f32eea02590);
CAPNP_DECLARE_SCHEMA(94aa9c195abf0a1a);
enum class MineralFertilizer_94aa9c195abf0a1a: uint16_t {
  AHLS,
  ALZON,
  AN,
  AP,
  AS,
  ASH,
  CF4,
  CP1,
  CP2,
  CP3,
  NPK,
  NS,
  U,
  UAN,
  UAS,
  UNI,
};
CAPNP_DECLARE_ENUM(MineralFertilizer, 94aa9c195abf0a1a);
CAPNP_DECLARE_SCHEMA(fd676465ae0b8cf0);
enum class OrganicFertilizer_fd676465ae0b8cf0: uint16_t {
  ASH,
  CADLM,
  CAM,
  CAS,
  CAU,
  DGDLM,
  GWC,
  HODLM,
  MC,
  MS,
  OIC,
  PIDLM,
  PIM,
  PIS,
  PIU,
  PIUDK,
  PLW,
  PODLM,
  POM,
  SOY,
  SS,
  TUDLM,
  WEEDS,
  WS,
};
CAPNP_DECLARE_ENUM(OrganicFertilizer, fd676465ae0b8cf0);
CAPNP_DECLARE_SCHEMA(d0290daf8de9f2b0);
enum class EventType_d0290daf8de9f2b0: uint16_t {
  SOWING,
  AUTOMATIC_SOWING,
  HARVEST,
  AUTOMATIC_HARVEST,
  IRRIGATION,
  TILLAGE,
  ORGANIC_FERTILIZATION,
  MINERAL_FERTILIZATION,
  N_DEMAND_FERTILIZATION,
  CUTTING,
  SET_VALUE,
  SAVE_STATE,
};
CAPNP_DECLARE_ENUM(EventType, d0290daf8de9f2b0);
CAPNP_DECLARE_SCHEMA(b33447204cdf022c);
enum class PlantOrgan_b33447204cdf022c: uint16_t {
  ROOT,
  LEAF,
  SHOOT,
  FRUIT,
  STRUKT,
  SUGAR,
};
CAPNP_DECLARE_ENUM(PlantOrgan, b33447204cdf022c);
CAPNP_DECLARE_SCHEMA(cf672ab379467704);
CAPNP_DECLARE_SCHEMA(e5484dc513ee11e0);
enum class ExternalType_e5484dc513ee11e0: uint16_t {
  SOWING,
  AUTOMATIC_SOWING,
  HARVEST,
  AUTOMATIC_HARVEST,
  IRRIGATION,
  TILLAGE,
  ORGANIC_FERTILIZATION,
  MINERAL_FERTILIZATION,
  N_DEMAND_FERTILIZATION,
  CUTTING,
};
CAPNP_DECLARE_ENUM(ExternalType, e5484dc513ee11e0);
CAPNP_DECLARE_SCHEMA(b2bf3a5557791bc1);
enum class PhenoStage_b2bf3a5557791bc1: uint16_t {
  EMERGENCE,
  FLOWERING,
  ANTHESIS,
  MATURITY,
};
CAPNP_DECLARE_ENUM(PhenoStage, b2bf3a5557791bc1);
CAPNP_DECLARE_SCHEMA(b91010c363e568a4);
CAPNP_DECLARE_SCHEMA(db4674cbf3154bfa);
CAPNP_DECLARE_SCHEMA(c8479e0f1798b1fc);
CAPNP_DECLARE_SCHEMA(beb6ab7b0e6b585e);
CAPNP_DECLARE_SCHEMA(cb20e21466098705);
CAPNP_DECLARE_SCHEMA(c6880d1c13ec14dc);
CAPNP_DECLARE_SCHEMA(d1bfc1c9617d9453);
CAPNP_DECLARE_SCHEMA(846f567433b186d1);
CAPNP_DECLARE_SCHEMA(8feb941d70f2a468);
CAPNP_DECLARE_SCHEMA(a9a9bc941e963701);
enum class CropUsage_a9a9bc941e963701: uint16_t {
  GREEN_MANURE,
  BIOMASS_PRODUCTION,
};
CAPNP_DECLARE_ENUM(CropUsage, a9a9bc941e963701);
CAPNP_DECLARE_SCHEMA(af49ab9bbe76e375);
CAPNP_DECLARE_SCHEMA(f805d22fabb80702);
CAPNP_DECLARE_SCHEMA(8460dac6abff7ed9);
CAPNP_DECLARE_SCHEMA(e444f780b29541a7);
enum class CL_e444f780b29541a7: uint16_t {
  CUT,
  LEFT,
};
CAPNP_DECLARE_ENUM(CL, e444f780b29541a7);
CAPNP_DECLARE_SCHEMA(94d32947f136655e);
enum class Unit_94d32947f136655e: uint16_t {
  PERCENTAGE,
  BIOMASS,
  LAI,
};
CAPNP_DECLARE_ENUM(Unit, 94d32947f136655e);
CAPNP_DECLARE_SCHEMA(fae5dcfccbb93a23);
CAPNP_DECLARE_SCHEMA(a363d226e178debd);
CAPNP_DECLARE_SCHEMA(c75b5ef2e9b05c2d);
CAPNP_DECLARE_SCHEMA(c7c14e92e0cd461c);
CAPNP_DECLARE_SCHEMA(b492838c7fed50b0);
CAPNP_DECLARE_SCHEMA(95cdc661a6600137);
CAPNP_DECLARE_SCHEMA(ba0c11cf818d29fd);
CAPNP_DECLARE_SCHEMA(aa49811a4e3e2c59);
CAPNP_DECLARE_SCHEMA(d90939a58e404ff8);
CAPNP_DECLARE_SCHEMA(aec9e089e87f1599);
CAPNP_DECLARE_SCHEMA(e3da81cc36d5741d);
CAPNP_DECLARE_SCHEMA(f54586500e2b72cd);
CAPNP_DECLARE_SCHEMA(ba3900305e908e31);
CAPNP_DECLARE_SCHEMA(bdb5eaa658c7abab);
CAPNP_DECLARE_SCHEMA(ead8c24402f189b4);
CAPNP_DECLARE_SCHEMA(f6b53f1a4cf29599);
CAPNP_DECLARE_SCHEMA(a9b89d473e06f2c7);
CAPNP_DECLARE_SCHEMA(bd608077a7cec156);
CAPNP_DECLARE_SCHEMA(9437da695f7567e7);
CAPNP_DECLARE_SCHEMA(ab49546abd2a478a);
CAPNP_DECLARE_SCHEMA(9ead0b36096d9073);
CAPNP_DECLARE_SCHEMA(82a3c6bf1cc5ad84);
CAPNP_DECLARE_SCHEMA(d945095e4d1d3ad4);
CAPNP_DECLARE_SCHEMA(cf94305221c00752);
CAPNP_DECLARE_SCHEMA(bfda1920aff38c07);
CAPNP_DECLARE_SCHEMA(f32d7a3fdc567bdb);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace model {
namespace monica {

struct ILRDates {
  ILRDates() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a1f99f32eea02590, 0, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::MineralFertilizer_94aa9c195abf0a1a MineralFertilizer;

typedef ::capnp::schemas::OrganicFertilizer_fd676465ae0b8cf0 OrganicFertilizer;

typedef ::capnp::schemas::EventType_d0290daf8de9f2b0 EventType;

typedef ::capnp::schemas::PlantOrgan_b33447204cdf022c PlantOrgan;

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    AT,
    BETWEEN,
    AFTER,
  };
  typedef ::capnp::schemas::ExternalType_e5484dc513ee11e0 ExternalType;

  typedef ::capnp::schemas::PhenoStage_b2bf3a5557791bc1 PhenoStage;

  struct Type;
  struct At;
  struct Between;
  struct After;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf672ab379467704, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event::Type {
  Type() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    EXTERNAL,
    INTERNAL,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b91010c363e568a4, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event::At {
  At() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(db4674cbf3154bfa, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event::Between {
  Between() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c8479e0f1798b1fc, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event::After {
  After() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(beb6ab7b0e6b585e, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params {
  Params() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Sowing;
  struct AutomaticSowing;
  struct Harvest;
  struct AutomaticHarvest;
  struct Cutting;
  struct MineralFertilization;
  struct NDemandFertilization;
  struct OrganicFertilization;
  struct Tillage;
  struct Irrigation;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb20e21466098705, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Sowing {
  Sowing() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6880d1c13ec14dc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::AutomaticSowing {
  AutomaticSowing() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct AvgSoilTemp;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1bfc1c9617d9453, 8, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::AutomaticSowing::AvgSoilTemp {
  AvgSoilTemp() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(846f567433b186d1, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Harvest {
  Harvest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CropUsage_a9a9bc941e963701 CropUsage;

  struct OptCarbonMgmtData;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8feb941d70f2a468, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Harvest::OptCarbonMgmtData {
  OptCarbonMgmtData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(af49ab9bbe76e375, 5, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::AutomaticHarvest {
  AutomaticHarvest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f805d22fabb80702, 5, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Cutting {
  Cutting() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::CL_e444f780b29541a7 CL;

  typedef ::capnp::schemas::Unit_94d32947f136655e Unit;

  struct Spec;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8460dac6abff7ed9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Cutting::Spec {
  Spec() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fae5dcfccbb93a23, 3, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::MineralFertilization {
  MineralFertilization() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Parameters;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a363d226e178debd, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::MineralFertilization::Parameters {
  Parameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c75b5ef2e9b05c2d, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::NDemandFertilization {
  NDemandFertilization() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c7c14e92e0cd461c, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::OrganicFertilization {
  OrganicFertilization() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct OrganicMatterParameters;
  struct Parameters;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b492838c7fed50b0, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::OrganicFertilization::OrganicMatterParameters {
  OrganicMatterParameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(95cdc661a6600137, 13, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::OrganicFertilization::Parameters {
  Parameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba0c11cf818d29fd, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Tillage {
  Tillage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aa49811a4e3e2c59, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Irrigation {
  Irrigation() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Parameters;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d90939a58e404ff8, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Params::Irrigation::Parameters {
  Parameters() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aec9e089e87f1599, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService {
  FertilizerService() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  template <typename T = ::capnp::AnyPointer>
  struct Entry;
  struct MineralFertilizerPartitionForParams;
  struct MineralFertilizerPartitionForResults;
  struct OrganicFertilizerParametersForParams;
  struct OrganicFertilizerParametersForResults;
  struct AvailableMineralFertilizersParams;
  struct AvailableMineralFertilizersResults;
  struct AvailableOrganicFertilizersParams;
  struct AvailableOrganicFertilizersResults;
  struct MineralFertilizerParams;
  struct MineralFertilizerResults;
  struct OrganicFertilizerParams;
  struct OrganicFertilizerResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(e3da81cc36d5741d)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

template <typename T>
struct FertilizerService::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f54586500e2b72cd, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, T>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::MineralFertilizerPartitionForParams {
  MineralFertilizerPartitionForParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ba3900305e908e31, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::MineralFertilizerPartitionForResults {
  MineralFertilizerPartitionForResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bdb5eaa658c7abab, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::OrganicFertilizerParametersForParams {
  OrganicFertilizerParametersForParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ead8c24402f189b4, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::OrganicFertilizerParametersForResults {
  OrganicFertilizerParametersForResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6b53f1a4cf29599, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::AvailableMineralFertilizersParams {
  AvailableMineralFertilizersParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a9b89d473e06f2c7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::AvailableMineralFertilizersResults {
  AvailableMineralFertilizersResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd608077a7cec156, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::AvailableOrganicFertilizersParams {
  AvailableOrganicFertilizersParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9437da695f7567e7, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::AvailableOrganicFertilizersResults {
  AvailableOrganicFertilizersResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab49546abd2a478a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::MineralFertilizerParams {
  MineralFertilizerParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ead0b36096d9073, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::MineralFertilizerResults {
  MineralFertilizerResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82a3c6bf1cc5ad84, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::OrganicFertilizerParams {
  OrganicFertilizerParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d945095e4d1d3ad4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FertilizerService::OrganicFertilizerResults {
  OrganicFertilizerResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf94305221c00752, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Service {
  Service() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct ManagementAtResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(bfda1920aff38c07)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct Service::ManagementAtResults {
  ManagementAtResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f32d7a3fdc567bdb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ILRDates::Reader {
public:
  typedef ILRDates Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSowing() const;
  inline  ::mas::schema::common::Date::Reader getSowing() const;

  inline bool hasEarliestSowing() const;
  inline  ::mas::schema::common::Date::Reader getEarliestSowing() const;

  inline bool hasLatestSowing() const;
  inline  ::mas::schema::common::Date::Reader getLatestSowing() const;

  inline bool hasHarvest() const;
  inline  ::mas::schema::common::Date::Reader getHarvest() const;

  inline bool hasLatestHarvest() const;
  inline  ::mas::schema::common::Date::Reader getLatestHarvest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ILRDates::Builder {
public:
  typedef ILRDates Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSowing();
  inline  ::mas::schema::common::Date::Builder getSowing();
  inline void setSowing( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initSowing();
  inline void adoptSowing(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownSowing();

  inline bool hasEarliestSowing();
  inline  ::mas::schema::common::Date::Builder getEarliestSowing();
  inline void setEarliestSowing( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initEarliestSowing();
  inline void adoptEarliestSowing(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownEarliestSowing();

  inline bool hasLatestSowing();
  inline  ::mas::schema::common::Date::Builder getLatestSowing();
  inline void setLatestSowing( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initLatestSowing();
  inline void adoptLatestSowing(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownLatestSowing();

  inline bool hasHarvest();
  inline  ::mas::schema::common::Date::Builder getHarvest();
  inline void setHarvest( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initHarvest();
  inline void adoptHarvest(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownHarvest();

  inline bool hasLatestHarvest();
  inline  ::mas::schema::common::Date::Builder getLatestHarvest();
  inline void setLatestHarvest( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initLatestHarvest();
  inline void adoptLatestHarvest(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownLatestHarvest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ILRDates::Pipeline {
public:
  typedef ILRDates Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getSowing();
  inline  ::mas::schema::common::Date::Pipeline getEarliestSowing();
  inline  ::mas::schema::common::Date::Pipeline getLatestSowing();
  inline  ::mas::schema::common::Date::Pipeline getHarvest();
  inline  ::mas::schema::common::Date::Pipeline getLatestHarvest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::mas::schema::model::monica::Event::ExternalType getType() const;

  inline bool hasInfo() const;
  inline  ::mas::schema::common::IdInformation::Reader getInfo() const;

  inline bool isAt() const;
  inline typename At::Reader getAt() const;

  inline bool isBetween() const;
  inline typename Between::Reader getBetween() const;

  inline bool isAfter() const;
  inline typename After::Reader getAfter() const;

  inline bool hasParams() const;
  inline ::capnp::AnyPointer::Reader getParams() const;

  inline bool getRunAtStartOfDay() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::mas::schema::model::monica::Event::ExternalType getType();
  inline void setType( ::mas::schema::model::monica::Event::ExternalType value);

  inline bool hasInfo();
  inline  ::mas::schema::common::IdInformation::Builder getInfo();
  inline void setInfo( ::mas::schema::common::IdInformation::Reader value);
  inline  ::mas::schema::common::IdInformation::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::mas::schema::common::IdInformation>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::IdInformation> disownInfo();

  inline bool isAt();
  inline typename At::Builder getAt();
  inline typename At::Builder initAt();

  inline bool isBetween();
  inline typename Between::Builder getBetween();
  inline typename Between::Builder initBetween();

  inline bool isAfter();
  inline typename After::Builder getAfter();
  inline typename After::Builder initAfter();

  inline bool hasParams();
  inline ::capnp::AnyPointer::Builder getParams();
  inline ::capnp::AnyPointer::Builder initParams();

  inline bool getRunAtStartOfDay();
  inline void setRunAtStartOfDay(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::IdInformation::Pipeline getInfo();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Type::Reader {
public:
  typedef Type Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isExternal() const;
  inline  ::mas::schema::model::monica::Event::ExternalType getExternal() const;

  inline bool isInternal() const;
  inline  ::mas::schema::model::monica::Event::PhenoStage getInternal() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Type::Builder {
public:
  typedef Type Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isExternal();
  inline  ::mas::schema::model::monica::Event::ExternalType getExternal();
  inline void setExternal( ::mas::schema::model::monica::Event::ExternalType value);

  inline bool isInternal();
  inline  ::mas::schema::model::monica::Event::PhenoStage getInternal();
  inline void setInternal( ::mas::schema::model::monica::Event::PhenoStage value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Type::Pipeline {
public:
  typedef Type Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::At::Reader {
public:
  typedef At Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDate() const;
  inline  ::mas::schema::common::Date::Reader getDate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::At::Builder {
public:
  typedef At Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDate();
  inline  ::mas::schema::common::Date::Builder getDate();
  inline void setDate( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initDate();
  inline void adoptDate(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownDate();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::At::Pipeline {
public:
  typedef At Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getDate();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Between::Reader {
public:
  typedef Between Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEarliest() const;
  inline  ::mas::schema::common::Date::Reader getEarliest() const;

  inline bool hasLatest() const;
  inline  ::mas::schema::common::Date::Reader getLatest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Between::Builder {
public:
  typedef Between Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEarliest();
  inline  ::mas::schema::common::Date::Builder getEarliest();
  inline void setEarliest( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initEarliest();
  inline void adoptEarliest(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownEarliest();

  inline bool hasLatest();
  inline  ::mas::schema::common::Date::Builder getLatest();
  inline void setLatest( ::mas::schema::common::Date::Reader value);
  inline  ::mas::schema::common::Date::Builder initLatest();
  inline void adoptLatest(::capnp::Orphan< ::mas::schema::common::Date>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::Date> disownLatest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Between::Pipeline {
public:
  typedef Between Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::Date::Pipeline getEarliest();
  inline  ::mas::schema::common::Date::Pipeline getLatest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::After::Reader {
public:
  typedef After Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEvent() const;
  inline  ::mas::schema::model::monica::Event::Type::Reader getEvent() const;

  inline  ::uint16_t getDays() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::After::Builder {
public:
  typedef After Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvent();
  inline  ::mas::schema::model::monica::Event::Type::Builder getEvent();
  inline void setEvent( ::mas::schema::model::monica::Event::Type::Reader value);
  inline  ::mas::schema::model::monica::Event::Type::Builder initEvent();
  inline void adoptEvent(::capnp::Orphan< ::mas::schema::model::monica::Event::Type>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Event::Type> disownEvent();

  inline  ::uint16_t getDays();
  inline void setDays( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::After::Pipeline {
public:
  typedef After Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Event::Type::Pipeline getEvent();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Reader {
public:
  typedef Params Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Builder {
public:
  typedef Params Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Pipeline {
public:
  typedef Params Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Sowing::Reader {
public:
  typedef Sowing Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::crop::Cultivar getCultivar() const;

  inline  ::uint16_t getPlantDensity() const;

  inline bool hasCrop() const;
#if !CAPNP_LITE
  inline  ::mas::schema::crop::Crop::Client getCrop() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Sowing::Builder {
public:
  typedef Sowing Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::crop::Cultivar getCultivar();
  inline void setCultivar( ::mas::schema::crop::Cultivar value);

  inline  ::uint16_t getPlantDensity();
  inline void setPlantDensity( ::uint16_t value);

  inline bool hasCrop();
#if !CAPNP_LITE
  inline  ::mas::schema::crop::Crop::Client getCrop();
  inline void setCrop( ::mas::schema::crop::Crop::Client&& value);
  inline void setCrop( ::mas::schema::crop::Crop::Client& value);
  inline void adoptCrop(::capnp::Orphan< ::mas::schema::crop::Crop>&& value);
  inline ::capnp::Orphan< ::mas::schema::crop::Crop> disownCrop();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Sowing::Pipeline {
public:
  typedef Sowing Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::crop::Crop::Client getCrop();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::AutomaticSowing::Reader {
public:
  typedef AutomaticSowing Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getMinTempThreshold() const;

  inline  ::uint16_t getDaysInTempWindow() const;

  inline double getMinPercentASW() const;

  inline double getMaxPercentASW() const;

  inline double getMax3dayPrecipSum() const;

  inline double getMaxCurrentDayPrecipSum() const;

  inline double getTempSumAboveBaseTemp() const;

  inline double getBaseTemp() const;

  inline bool hasAvgSoilTemp() const;
  inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Reader getAvgSoilTemp() const;

  inline bool hasSowing() const;
  inline  ::mas::schema::model::monica::Params::Sowing::Reader getSowing() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::AutomaticSowing::Builder {
public:
  typedef AutomaticSowing Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getMinTempThreshold();
  inline void setMinTempThreshold(double value);

  inline  ::uint16_t getDaysInTempWindow();
  inline void setDaysInTempWindow( ::uint16_t value);

  inline double getMinPercentASW();
  inline void setMinPercentASW(double value);

  inline double getMaxPercentASW();
  inline void setMaxPercentASW(double value);

  inline double getMax3dayPrecipSum();
  inline void setMax3dayPrecipSum(double value);

  inline double getMaxCurrentDayPrecipSum();
  inline void setMaxCurrentDayPrecipSum(double value);

  inline double getTempSumAboveBaseTemp();
  inline void setTempSumAboveBaseTemp(double value);

  inline double getBaseTemp();
  inline void setBaseTemp(double value);

  inline bool hasAvgSoilTemp();
  inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Builder getAvgSoilTemp();
  inline void setAvgSoilTemp( ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Reader value);
  inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Builder initAvgSoilTemp();
  inline void adoptAvgSoilTemp(::capnp::Orphan< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp> disownAvgSoilTemp();

  inline bool hasSowing();
  inline  ::mas::schema::model::monica::Params::Sowing::Builder getSowing();
  inline void setSowing( ::mas::schema::model::monica::Params::Sowing::Reader value);
  inline  ::mas::schema::model::monica::Params::Sowing::Builder initSowing();
  inline void adoptSowing(::capnp::Orphan< ::mas::schema::model::monica::Params::Sowing>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Sowing> disownSowing();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::AutomaticSowing::Pipeline {
public:
  typedef AutomaticSowing Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Pipeline getAvgSoilTemp();
  inline  ::mas::schema::model::monica::Params::Sowing::Pipeline getSowing();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::AutomaticSowing::AvgSoilTemp::Reader {
public:
  typedef AvgSoilTemp Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getSoilDepthForAveraging() const;

  inline  ::uint16_t getDaysInSoilTempWindow() const;

  inline double getSowingIfAboveAvgSoilTemp() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::AutomaticSowing::AvgSoilTemp::Builder {
public:
  typedef AvgSoilTemp Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getSoilDepthForAveraging();
  inline void setSoilDepthForAveraging(double value);

  inline  ::uint16_t getDaysInSoilTempWindow();
  inline void setDaysInSoilTempWindow( ::uint16_t value);

  inline double getSowingIfAboveAvgSoilTemp();
  inline void setSowingIfAboveAvgSoilTemp(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::AutomaticSowing::AvgSoilTemp::Pipeline {
public:
  typedef AvgSoilTemp Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Harvest::Reader {
public:
  typedef Harvest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getExported() const;

  inline bool hasOptCarbMgmtData() const;
  inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Reader getOptCarbMgmtData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Harvest::Builder {
public:
  typedef Harvest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getExported();
  inline void setExported(bool value);

  inline bool hasOptCarbMgmtData();
  inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Builder getOptCarbMgmtData();
  inline void setOptCarbMgmtData( ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Reader value);
  inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Builder initOptCarbMgmtData();
  inline void adoptOptCarbMgmtData(::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData> disownOptCarbMgmtData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Harvest::Pipeline {
public:
  typedef Harvest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Pipeline getOptCarbMgmtData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Harvest::OptCarbonMgmtData::Reader {
public:
  typedef OptCarbonMgmtData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getOptCarbonConservation() const;

  inline double getCropImpactOnHumusBalance() const;

  inline  ::mas::schema::model::monica::Params::Harvest::CropUsage getCropUsage() const;

  inline double getResidueHeq() const;

  inline double getOrganicFertilizerHeq() const;

  inline double getMaxResidueRecoverFraction() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Harvest::OptCarbonMgmtData::Builder {
public:
  typedef OptCarbonMgmtData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getOptCarbonConservation();
  inline void setOptCarbonConservation(bool value);

  inline double getCropImpactOnHumusBalance();
  inline void setCropImpactOnHumusBalance(double value);

  inline  ::mas::schema::model::monica::Params::Harvest::CropUsage getCropUsage();
  inline void setCropUsage( ::mas::schema::model::monica::Params::Harvest::CropUsage value);

  inline double getResidueHeq();
  inline void setResidueHeq(double value);

  inline double getOrganicFertilizerHeq();
  inline void setOrganicFertilizerHeq(double value);

  inline double getMaxResidueRecoverFraction();
  inline void setMaxResidueRecoverFraction(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Harvest::OptCarbonMgmtData::Pipeline {
public:
  typedef OptCarbonMgmtData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::AutomaticHarvest::Reader {
public:
  typedef AutomaticHarvest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getMinPercentASW() const;

  inline double getMaxPercentASW() const;

  inline double getMax3dayPrecipSum() const;

  inline double getMaxCurrentDayPrecipSum() const;

  inline  ::mas::schema::model::monica::Event::PhenoStage getHarvestTime() const;

  inline bool hasHarvest() const;
  inline  ::mas::schema::model::monica::Params::Harvest::Reader getHarvest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::AutomaticHarvest::Builder {
public:
  typedef AutomaticHarvest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getMinPercentASW();
  inline void setMinPercentASW(double value);

  inline double getMaxPercentASW();
  inline void setMaxPercentASW(double value);

  inline double getMax3dayPrecipSum();
  inline void setMax3dayPrecipSum(double value);

  inline double getMaxCurrentDayPrecipSum();
  inline void setMaxCurrentDayPrecipSum(double value);

  inline  ::mas::schema::model::monica::Event::PhenoStage getHarvestTime();
  inline void setHarvestTime( ::mas::schema::model::monica::Event::PhenoStage value);

  inline bool hasHarvest();
  inline  ::mas::schema::model::monica::Params::Harvest::Builder getHarvest();
  inline void setHarvest( ::mas::schema::model::monica::Params::Harvest::Reader value);
  inline  ::mas::schema::model::monica::Params::Harvest::Builder initHarvest();
  inline void adoptHarvest(::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest> disownHarvest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::AutomaticHarvest::Pipeline {
public:
  typedef AutomaticHarvest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::Harvest::Pipeline getHarvest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Cutting::Reader {
public:
  typedef Cutting Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCuttingSpec() const;
  inline  ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Reader getCuttingSpec() const;

  inline double getCutMaxAssimilationRatePercentage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Cutting::Builder {
public:
  typedef Cutting Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCuttingSpec();
  inline  ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Builder getCuttingSpec();
  inline void setCuttingSpec( ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Builder initCuttingSpec(unsigned int size);
  inline void adoptCuttingSpec(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>> disownCuttingSpec();

  inline double getCutMaxAssimilationRatePercentage();
  inline void setCutMaxAssimilationRatePercentage(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Cutting::Pipeline {
public:
  typedef Cutting Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Cutting::Spec::Reader {
public:
  typedef Spec Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::PlantOrgan getOrgan() const;

  inline double getValue() const;

  inline  ::mas::schema::model::monica::Params::Cutting::Unit getUnit() const;

  inline  ::mas::schema::model::monica::Params::Cutting::CL getCutOrLeft() const;

  inline double getExportPercentage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Cutting::Spec::Builder {
public:
  typedef Spec Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::PlantOrgan getOrgan();
  inline void setOrgan( ::mas::schema::model::monica::PlantOrgan value);

  inline double getValue();
  inline void setValue(double value);

  inline  ::mas::schema::model::monica::Params::Cutting::Unit getUnit();
  inline void setUnit( ::mas::schema::model::monica::Params::Cutting::Unit value);

  inline  ::mas::schema::model::monica::Params::Cutting::CL getCutOrLeft();
  inline void setCutOrLeft( ::mas::schema::model::monica::Params::Cutting::CL value);

  inline double getExportPercentage();
  inline void setExportPercentage(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Cutting::Spec::Pipeline {
public:
  typedef Spec Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::MineralFertilization::Reader {
public:
  typedef MineralFertilization Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPartition() const;
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader getPartition() const;

  inline double getAmount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::MineralFertilization::Builder {
public:
  typedef MineralFertilization Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPartition();
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder getPartition();
  inline void setPartition( ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader value);
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder initPartition();
  inline void adoptPartition(::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters> disownPartition();

  inline double getAmount();
  inline void setAmount(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::MineralFertilization::Pipeline {
public:
  typedef MineralFertilization Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline getPartition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::MineralFertilization::Parameters::Reader {
public:
  typedef Parameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline double getCarbamid() const;

  inline double getNh4() const;

  inline double getNo3() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::MineralFertilization::Parameters::Builder {
public:
  typedef Parameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline double getCarbamid();
  inline void setCarbamid(double value);

  inline double getNh4();
  inline void setNh4(double value);

  inline double getNo3();
  inline void setNo3(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::MineralFertilization::Parameters::Pipeline {
public:
  typedef Parameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::NDemandFertilization::Reader {
public:
  typedef NDemandFertilization Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getNDemand() const;

  inline bool hasPartition() const;
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader getPartition() const;

  inline double getDepth() const;

  inline  ::uint8_t getStage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::NDemandFertilization::Builder {
public:
  typedef NDemandFertilization Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getNDemand();
  inline void setNDemand(double value);

  inline bool hasPartition();
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder getPartition();
  inline void setPartition( ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader value);
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder initPartition();
  inline void adoptPartition(::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters> disownPartition();

  inline double getDepth();
  inline void setDepth(double value);

  inline  ::uint8_t getStage();
  inline void setStage( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::NDemandFertilization::Pipeline {
public:
  typedef NDemandFertilization Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline getPartition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::OrganicFertilization::Reader {
public:
  typedef OrganicFertilization Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader getParams() const;

  inline double getAmount() const;

  inline bool getIncorporation() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::OrganicFertilization::Builder {
public:
  typedef OrganicFertilization Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder getParams();
  inline void setParams( ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader value);
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters> disownParams();

  inline double getAmount();
  inline void setAmount(double value);

  inline bool getIncorporation();
  inline void setIncorporation(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::OrganicFertilization::Pipeline {
public:
  typedef OrganicFertilization Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::OrganicFertilization::OrganicMatterParameters::Reader {
public:
  typedef OrganicMatterParameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getAomDryMatterContent() const;

  inline double getAomNH4Content() const;

  inline double getAomNO3Content() const;

  inline double getAomCarbamidContent() const;

  inline double getAomSlowDecCoeffStandard() const;

  inline double getAomFastDecCoeffStandard() const;

  inline double getPartAOMToAOMSlow() const;

  inline double getPartAOMToAOMFast() const;

  inline double getCnRatioAOMSlow() const;

  inline double getCnRatioAOMFast() const;

  inline double getPartAOMSlowToSMBSlow() const;

  inline double getPartAOMSlowToSMBFast() const;

  inline double getNConcentration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::OrganicFertilization::OrganicMatterParameters::Builder {
public:
  typedef OrganicMatterParameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getAomDryMatterContent();
  inline void setAomDryMatterContent(double value);

  inline double getAomNH4Content();
  inline void setAomNH4Content(double value);

  inline double getAomNO3Content();
  inline void setAomNO3Content(double value);

  inline double getAomCarbamidContent();
  inline void setAomCarbamidContent(double value);

  inline double getAomSlowDecCoeffStandard();
  inline void setAomSlowDecCoeffStandard(double value);

  inline double getAomFastDecCoeffStandard();
  inline void setAomFastDecCoeffStandard(double value);

  inline double getPartAOMToAOMSlow();
  inline void setPartAOMToAOMSlow(double value);

  inline double getPartAOMToAOMFast();
  inline void setPartAOMToAOMFast(double value);

  inline double getCnRatioAOMSlow();
  inline void setCnRatioAOMSlow(double value);

  inline double getCnRatioAOMFast();
  inline void setCnRatioAOMFast(double value);

  inline double getPartAOMSlowToSMBSlow();
  inline void setPartAOMSlowToSMBSlow(double value);

  inline double getPartAOMSlowToSMBFast();
  inline void setPartAOMSlowToSMBFast(double value);

  inline double getNConcentration();
  inline void setNConcentration(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::OrganicFertilization::OrganicMatterParameters::Pipeline {
public:
  typedef OrganicMatterParameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::OrganicFertilization::Parameters::Reader {
public:
  typedef Parameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader getParams() const;

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::OrganicFertilization::Parameters::Builder {
public:
  typedef Parameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder getParams();
  inline void setParams( ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader value);
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters> disownParams();

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::OrganicFertilization::Parameters::Pipeline {
public:
  typedef Parameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Tillage::Reader {
public:
  typedef Tillage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getDepth() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Tillage::Builder {
public:
  typedef Tillage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getDepth();
  inline void setDepth(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Tillage::Pipeline {
public:
  typedef Tillage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Irrigation::Reader {
public:
  typedef Irrigation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getAmount() const;

  inline bool hasParams() const;
  inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Irrigation::Builder {
public:
  typedef Irrigation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getAmount();
  inline void setAmount(double value);

  inline bool hasParams();
  inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Builder getParams();
  inline void setParams( ::mas::schema::model::monica::Params::Irrigation::Parameters::Reader value);
  inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::mas::schema::model::monica::Params::Irrigation::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Irrigation::Parameters> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Irrigation::Pipeline {
public:
  typedef Irrigation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Params::Irrigation::Parameters::Reader {
public:
  typedef Parameters Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getNitrateConcentration() const;

  inline double getSulfateConcentration() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Params::Irrigation::Parameters::Builder {
public:
  typedef Parameters Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getNitrateConcentration();
  inline void setNitrateConcentration(double value);

  inline double getSulfateConcentration();
  inline void setSulfateConcentration(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Params::Irrigation::Parameters::Pipeline {
public:
  typedef Parameters Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class FertilizerService::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::mas::schema::common::Identifiable::Client {
public:
  typedef FertilizerService Calls;
  typedef FertilizerService Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::mas::schema::model::monica::FertilizerService::MineralFertilizerPartitionForParams,  ::mas::schema::model::monica::FertilizerService::MineralFertilizerPartitionForResults> mineralFertilizerPartitionForRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::mas::schema::model::monica::FertilizerService::OrganicFertilizerParametersForParams,  ::mas::schema::model::monica::FertilizerService::OrganicFertilizerParametersForResults> organicFertilizerParametersForRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::mas::schema::model::monica::FertilizerService::AvailableMineralFertilizersParams,  ::mas::schema::model::monica::FertilizerService::AvailableMineralFertilizersResults> availableMineralFertilizersRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::mas::schema::model::monica::FertilizerService::AvailableOrganicFertilizersParams,  ::mas::schema::model::monica::FertilizerService::AvailableOrganicFertilizersResults> availableOrganicFertilizersRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::mas::schema::model::monica::FertilizerService::MineralFertilizerParams,  ::mas::schema::model::monica::FertilizerService::MineralFertilizerResults> mineralFertilizerRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::mas::schema::model::monica::FertilizerService::OrganicFertilizerParams,  ::mas::schema::model::monica::FertilizerService::OrganicFertilizerResults> organicFertilizerRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class FertilizerService::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::mas::schema::common::Identifiable::Server {
public:
  typedef FertilizerService Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::mas::schema::model::monica::FertilizerService::MineralFertilizerPartitionForParams MineralFertilizerPartitionForParams;
  typedef  ::mas::schema::model::monica::FertilizerService::MineralFertilizerPartitionForResults MineralFertilizerPartitionForResults;
  typedef ::capnp::CallContext<MineralFertilizerPartitionForParams, MineralFertilizerPartitionForResults> MineralFertilizerPartitionForContext;
  virtual ::kj::Promise<void> mineralFertilizerPartitionFor(MineralFertilizerPartitionForContext context);
  typedef  ::mas::schema::model::monica::FertilizerService::OrganicFertilizerParametersForParams OrganicFertilizerParametersForParams;
  typedef  ::mas::schema::model::monica::FertilizerService::OrganicFertilizerParametersForResults OrganicFertilizerParametersForResults;
  typedef ::capnp::CallContext<OrganicFertilizerParametersForParams, OrganicFertilizerParametersForResults> OrganicFertilizerParametersForContext;
  virtual ::kj::Promise<void> organicFertilizerParametersFor(OrganicFertilizerParametersForContext context);
  typedef  ::mas::schema::model::monica::FertilizerService::AvailableMineralFertilizersParams AvailableMineralFertilizersParams;
  typedef  ::mas::schema::model::monica::FertilizerService::AvailableMineralFertilizersResults AvailableMineralFertilizersResults;
  typedef ::capnp::CallContext<AvailableMineralFertilizersParams, AvailableMineralFertilizersResults> AvailableMineralFertilizersContext;
  virtual ::kj::Promise<void> availableMineralFertilizers(AvailableMineralFertilizersContext context);
  typedef  ::mas::schema::model::monica::FertilizerService::AvailableOrganicFertilizersParams AvailableOrganicFertilizersParams;
  typedef  ::mas::schema::model::monica::FertilizerService::AvailableOrganicFertilizersResults AvailableOrganicFertilizersResults;
  typedef ::capnp::CallContext<AvailableOrganicFertilizersParams, AvailableOrganicFertilizersResults> AvailableOrganicFertilizersContext;
  virtual ::kj::Promise<void> availableOrganicFertilizers(AvailableOrganicFertilizersContext context);
  typedef  ::mas::schema::model::monica::FertilizerService::MineralFertilizerParams MineralFertilizerParams;
  typedef  ::mas::schema::model::monica::FertilizerService::MineralFertilizerResults MineralFertilizerResults;
  typedef ::capnp::CallContext<MineralFertilizerParams, MineralFertilizerResults> MineralFertilizerContext;
  virtual ::kj::Promise<void> mineralFertilizer(MineralFertilizerContext context);
  typedef  ::mas::schema::model::monica::FertilizerService::OrganicFertilizerParams OrganicFertilizerParams;
  typedef  ::mas::schema::model::monica::FertilizerService::OrganicFertilizerResults OrganicFertilizerResults;
  typedef ::capnp::CallContext<OrganicFertilizerParams, OrganicFertilizerResults> OrganicFertilizerContext;
  virtual ::kj::Promise<void> organicFertilizer(OrganicFertilizerContext context);

  inline  ::mas::schema::model::monica::FertilizerService::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::mas::schema::model::monica::FertilizerService>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

template <typename T>
class FertilizerService::Entry<T>::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Entry<T2>::Reader asGeneric() {
    return typename Entry<T2>::Reader(_reader);
  }

  inline bool hasInfo() const;
  inline  ::mas::schema::common::IdInformation::Reader getInfo() const;

  inline bool hasRef() const;
#if !CAPNP_LITE
  inline typename  ::mas::schema::common::ValueHolder<T>::Client getRef() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename T>
class FertilizerService::Entry<T>::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename T2 = ::capnp::AnyPointer>
  typename Entry<T2>::Builder asGeneric() {
    return typename Entry<T2>::Builder(_builder);
  }

  inline bool hasInfo();
  inline  ::mas::schema::common::IdInformation::Builder getInfo();
  inline void setInfo( ::mas::schema::common::IdInformation::Reader value);
  inline  ::mas::schema::common::IdInformation::Builder initInfo();
  inline void adoptInfo(::capnp::Orphan< ::mas::schema::common::IdInformation>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::IdInformation> disownInfo();

  inline bool hasRef();
#if !CAPNP_LITE
  inline typename  ::mas::schema::common::ValueHolder<T>::Client getRef();
  inline void setRef(typename  ::mas::schema::common::ValueHolder<T>::Client&& value);
  inline void setRef(typename  ::mas::schema::common::ValueHolder<T>::Client& value);
  inline void adoptRef(::capnp::Orphan< ::mas::schema::common::ValueHolder<T>>&& value);
  inline ::capnp::Orphan< ::mas::schema::common::ValueHolder<T>> disownRef();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename T>
class FertilizerService::Entry<T>::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::common::IdInformation::Pipeline getInfo();
  inline typename  ::mas::schema::common::ValueHolder<T>::Client getRef();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::MineralFertilizerPartitionForParams::Reader {
public:
  typedef MineralFertilizerPartitionForParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::MineralFertilizer getMinFert() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::MineralFertilizerPartitionForParams::Builder {
public:
  typedef MineralFertilizerPartitionForParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::MineralFertilizer getMinFert();
  inline void setMinFert( ::mas::schema::model::monica::MineralFertilizer value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::MineralFertilizerPartitionForParams::Pipeline {
public:
  typedef MineralFertilizerPartitionForParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::MineralFertilizerPartitionForResults::Reader {
public:
  typedef MineralFertilizerPartitionForResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPartition() const;
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader getPartition() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::MineralFertilizerPartitionForResults::Builder {
public:
  typedef MineralFertilizerPartitionForResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPartition();
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder getPartition();
  inline void setPartition( ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader value);
  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder initPartition();
  inline void adoptPartition(::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters> disownPartition();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::MineralFertilizerPartitionForResults::Pipeline {
public:
  typedef MineralFertilizerPartitionForResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline getPartition();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::OrganicFertilizerParametersForParams::Reader {
public:
  typedef OrganicFertilizerParametersForParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::OrganicFertilizer getOrgFert() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::OrganicFertilizerParametersForParams::Builder {
public:
  typedef OrganicFertilizerParametersForParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::mas::schema::model::monica::OrganicFertilizer getOrgFert();
  inline void setOrgFert( ::mas::schema::model::monica::OrganicFertilizer value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::OrganicFertilizerParametersForParams::Pipeline {
public:
  typedef OrganicFertilizerParametersForParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::OrganicFertilizerParametersForResults::Reader {
public:
  typedef OrganicFertilizerParametersForResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasParams() const;
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader getParams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::OrganicFertilizerParametersForResults::Builder {
public:
  typedef OrganicFertilizerParametersForResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasParams();
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder getParams();
  inline void setParams( ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader value);
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder initParams();
  inline void adoptParams(::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters> disownParams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::OrganicFertilizerParametersForResults::Pipeline {
public:
  typedef OrganicFertilizerParametersForResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Pipeline getParams();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::AvailableMineralFertilizersParams::Reader {
public:
  typedef AvailableMineralFertilizersParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::AvailableMineralFertilizersParams::Builder {
public:
  typedef AvailableMineralFertilizersParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::AvailableMineralFertilizersParams::Pipeline {
public:
  typedef AvailableMineralFertilizersParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::AvailableMineralFertilizersResults::Reader {
public:
  typedef AvailableMineralFertilizersResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::AvailableMineralFertilizersResults::Builder {
public:
  typedef AvailableMineralFertilizersResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries( ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::AvailableMineralFertilizersResults::Pipeline {
public:
  typedef AvailableMineralFertilizersResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::AvailableOrganicFertilizersParams::Reader {
public:
  typedef AvailableOrganicFertilizersParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::AvailableOrganicFertilizersParams::Builder {
public:
  typedef AvailableOrganicFertilizersParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::AvailableOrganicFertilizersParams::Pipeline {
public:
  typedef AvailableOrganicFertilizersParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::AvailableOrganicFertilizersResults::Reader {
public:
  typedef AvailableOrganicFertilizersResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasEntries() const;
  inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::AvailableOrganicFertilizersResults::Builder {
public:
  typedef AvailableOrganicFertilizersResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEntries();
  inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries( ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::AvailableOrganicFertilizersResults::Pipeline {
public:
  typedef AvailableOrganicFertilizersResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::MineralFertilizerParams::Reader {
public:
  typedef MineralFertilizerParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::MineralFertilizerParams::Builder {
public:
  typedef MineralFertilizerParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::MineralFertilizerParams::Pipeline {
public:
  typedef MineralFertilizerParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::MineralFertilizerResults::Reader {
public:
  typedef MineralFertilizerResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFert() const;
  inline  ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Reader getFert() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::MineralFertilizerResults::Builder {
public:
  typedef MineralFertilizerResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFert();
  inline  ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Builder getFert();
  inline void setFert( ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Builder initFert(unsigned int size);
  inline void adoptFert(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>> disownFert();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::MineralFertilizerResults::Pipeline {
public:
  typedef MineralFertilizerResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::OrganicFertilizerParams::Reader {
public:
  typedef OrganicFertilizerParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::OrganicFertilizerParams::Builder {
public:
  typedef OrganicFertilizerParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::OrganicFertilizerParams::Pipeline {
public:
  typedef OrganicFertilizerParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FertilizerService::OrganicFertilizerResults::Reader {
public:
  typedef OrganicFertilizerResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFert() const;
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader getFert() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FertilizerService::OrganicFertilizerResults::Builder {
public:
  typedef OrganicFertilizerResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFert();
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder getFert();
  inline void setFert( ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader value);
  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder initFert();
  inline void adoptFert(::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>&& value);
  inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters> disownFert();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FertilizerService::OrganicFertilizerResults::Pipeline {
public:
  typedef OrganicFertilizerResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Pipeline getFert();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class Service::Client
    : public virtual ::capnp::Capability::Client,
      public virtual  ::mas::schema::common::Identifiable::Client {
public:
  typedef Service Calls;
  typedef Service Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::mas::schema::geo::LatLonCoord,  ::mas::schema::model::monica::Service::ManagementAtResults> managementAtRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Service::Server
    : public virtual ::capnp::Capability::Server,
      public virtual  ::mas::schema::common::Identifiable::Server {
public:
  typedef Service Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::mas::schema::model::monica::Service::ManagementAtResults ManagementAtResults;
  typedef ::capnp::CallContext< ::mas::schema::geo::LatLonCoord, ManagementAtResults> ManagementAtContext;
  virtual ::kj::Promise<void> managementAt(ManagementAtContext context);

  inline  ::mas::schema::model::monica::Service::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::mas::schema::model::monica::Service>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Service::ManagementAtResults::Reader {
public:
  typedef ManagementAtResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMgmt() const;
  inline  ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Reader getMgmt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Service::ManagementAtResults::Builder {
public:
  typedef ManagementAtResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMgmt();
  inline  ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Builder getMgmt();
  inline void setMgmt( ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Builder initMgmt(unsigned int size);
  inline void adoptMgmt(::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>> disownMgmt();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Service::ManagementAtResults::Pipeline {
public:
  typedef ManagementAtResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ILRDates::Reader::hasSowing() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ILRDates::Builder::hasSowing() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader ILRDates::Reader::getSowing() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::getSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline ILRDates::Pipeline::getSowing() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ILRDates::Builder::setSowing( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::initSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ILRDates::Builder::adoptSowing(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> ILRDates::Builder::disownSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ILRDates::Reader::hasEarliestSowing() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ILRDates::Builder::hasEarliestSowing() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader ILRDates::Reader::getEarliestSowing() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::getEarliestSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline ILRDates::Pipeline::getEarliestSowing() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void ILRDates::Builder::setEarliestSowing( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::initEarliestSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ILRDates::Builder::adoptEarliestSowing(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> ILRDates::Builder::disownEarliestSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ILRDates::Reader::hasLatestSowing() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ILRDates::Builder::hasLatestSowing() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader ILRDates::Reader::getLatestSowing() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::getLatestSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline ILRDates::Pipeline::getLatestSowing() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void ILRDates::Builder::setLatestSowing( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::initLatestSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ILRDates::Builder::adoptLatestSowing(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> ILRDates::Builder::disownLatestSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ILRDates::Reader::hasHarvest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ILRDates::Builder::hasHarvest() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader ILRDates::Reader::getHarvest() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::getHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline ILRDates::Pipeline::getHarvest() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void ILRDates::Builder::setHarvest( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::initHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ILRDates::Builder::adoptHarvest(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> ILRDates::Builder::disownHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool ILRDates::Reader::hasLatestHarvest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ILRDates::Builder::hasLatestHarvest() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader ILRDates::Reader::getLatestHarvest() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::getLatestHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline ILRDates::Pipeline::getLatestHarvest() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void ILRDates::Builder::setLatestHarvest( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder ILRDates::Builder::initLatestHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ILRDates::Builder::adoptLatestHarvest(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> ILRDates::Builder::disownLatestHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::mas::schema::model::monica::Event::Which Event::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::mas::schema::model::monica::Event::Which Event::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::Event::ExternalType Event::Reader::getType() const {
  return _reader.getDataField< ::mas::schema::model::monica::Event::ExternalType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::Event::ExternalType Event::Builder::getType() {
  return _builder.getDataField< ::mas::schema::model::monica::Event::ExternalType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setType( ::mas::schema::model::monica::Event::ExternalType value) {
  _builder.setDataField< ::mas::schema::model::monica::Event::ExternalType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::hasInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::IdInformation::Reader Event::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::IdInformation::Builder Event::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::IdInformation::Pipeline Event::Pipeline::getInfo() {
  return  ::mas::schema::common::IdInformation::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Event::Builder::setInfo( ::mas::schema::common::IdInformation::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::IdInformation::Builder Event::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::adoptInfo(
    ::capnp::Orphan< ::mas::schema::common::IdInformation>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::IdInformation> Event::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Event::Reader::isAt() const {
  return which() == Event::AT;
}
inline bool Event::Builder::isAt() {
  return which() == Event::AT;
}
inline typename Event::At::Reader Event::Reader::getAt() const {
  KJ_IREQUIRE((which() == Event::AT),
              "Must check which() before get()ing a union member.");
  return typename Event::At::Reader(_reader);
}
inline typename Event::At::Builder Event::Builder::getAt() {
  KJ_IREQUIRE((which() == Event::AT),
              "Must check which() before get()ing a union member.");
  return typename Event::At::Builder(_builder);
}
inline typename Event::At::Builder Event::Builder::initAt() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Event::AT);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Event::At::Builder(_builder);
}
inline bool Event::Reader::isBetween() const {
  return which() == Event::BETWEEN;
}
inline bool Event::Builder::isBetween() {
  return which() == Event::BETWEEN;
}
inline typename Event::Between::Reader Event::Reader::getBetween() const {
  KJ_IREQUIRE((which() == Event::BETWEEN),
              "Must check which() before get()ing a union member.");
  return typename Event::Between::Reader(_reader);
}
inline typename Event::Between::Builder Event::Builder::getBetween() {
  KJ_IREQUIRE((which() == Event::BETWEEN),
              "Must check which() before get()ing a union member.");
  return typename Event::Between::Builder(_builder);
}
inline typename Event::Between::Builder Event::Builder::initBetween() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Event::BETWEEN);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<2>() * ::capnp::POINTERS).clear();
  return typename Event::Between::Builder(_builder);
}
inline bool Event::Reader::isAfter() const {
  return which() == Event::AFTER;
}
inline bool Event::Builder::isAfter() {
  return which() == Event::AFTER;
}
inline typename Event::After::Reader Event::Reader::getAfter() const {
  KJ_IREQUIRE((which() == Event::AFTER),
              "Must check which() before get()ing a union member.");
  return typename Event::After::Reader(_reader);
}
inline typename Event::After::Builder Event::Builder::getAfter() {
  KJ_IREQUIRE((which() == Event::AFTER),
              "Must check which() before get()ing a union member.");
  return typename Event::After::Builder(_builder);
}
inline typename Event::After::Builder Event::Builder::initAfter() {
  _builder.setDataField<Event::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Event::AFTER);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename Event::After::Builder(_builder);
}
inline bool Event::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader Event::Reader::getParams() const {
  return ::capnp::AnyPointer::Reader(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder Event::Builder::getParams() {
  return ::capnp::AnyPointer::Builder(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder Event::Builder::initParams() {
  auto result = ::capnp::AnyPointer::Builder(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool Event::Reader::getRunAtStartOfDay() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}

inline bool Event::Builder::getRunAtStartOfDay() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setRunAtStartOfDay(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<48>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::Event::Type::Which Event::Type::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline  ::mas::schema::model::monica::Event::Type::Which Event::Type::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline bool Event::Type::Reader::isExternal() const {
  return which() == Event::Type::EXTERNAL;
}
inline bool Event::Type::Builder::isExternal() {
  return which() == Event::Type::EXTERNAL;
}
inline  ::mas::schema::model::monica::Event::ExternalType Event::Type::Reader::getExternal() const {
  KJ_IREQUIRE((which() == Event::Type::EXTERNAL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::mas::schema::model::monica::Event::ExternalType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::Event::ExternalType Event::Type::Builder::getExternal() {
  KJ_IREQUIRE((which() == Event::Type::EXTERNAL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::mas::schema::model::monica::Event::ExternalType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Type::Builder::setExternal( ::mas::schema::model::monica::Event::ExternalType value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Event::Type::EXTERNAL);
  _builder.setDataField< ::mas::schema::model::monica::Event::ExternalType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Type::Reader::isInternal() const {
  return which() == Event::Type::INTERNAL;
}
inline bool Event::Type::Builder::isInternal() {
  return which() == Event::Type::INTERNAL;
}
inline  ::mas::schema::model::monica::Event::PhenoStage Event::Type::Reader::getInternal() const {
  KJ_IREQUIRE((which() == Event::Type::INTERNAL),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::mas::schema::model::monica::Event::PhenoStage>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::Event::PhenoStage Event::Type::Builder::getInternal() {
  KJ_IREQUIRE((which() == Event::Type::INTERNAL),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::mas::schema::model::monica::Event::PhenoStage>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Type::Builder::setInternal( ::mas::schema::model::monica::Event::PhenoStage value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, Event::Type::INTERNAL);
  _builder.setDataField< ::mas::schema::model::monica::Event::PhenoStage>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::At::Reader::hasDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Event::At::Builder::hasDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader Event::At::Reader::getDate() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder Event::At::Builder::getDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline Event::At::Pipeline::getDate() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Event::At::Builder::setDate( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder Event::At::Builder::initDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Event::At::Builder::adoptDate(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> Event::At::Builder::disownDate() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Event::Between::Reader::hasEarliest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Between::Builder::hasEarliest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader Event::Between::Reader::getEarliest() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder Event::Between::Builder::getEarliest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline Event::Between::Pipeline::getEarliest() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Event::Between::Builder::setEarliest( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder Event::Between::Builder::initEarliest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Event::Between::Builder::adoptEarliest(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> Event::Between::Builder::disownEarliest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Event::Between::Reader::hasLatest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Between::Builder::hasLatest() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::common::Date::Reader Event::Between::Reader::getLatest() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::mas::schema::common::Date::Builder Event::Between::Builder::getLatest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::common::Date::Pipeline Event::Between::Pipeline::getLatest() {
  return  ::mas::schema::common::Date::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void Event::Between::Builder::setLatest( ::mas::schema::common::Date::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::common::Date::Builder Event::Between::Builder::initLatest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Event::Between::Builder::adoptLatest(
    ::capnp::Orphan< ::mas::schema::common::Date>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::common::Date> Event::Between::Builder::disownLatest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::Date>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool Event::After::Reader::hasEvent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Event::After::Builder::hasEvent() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Event::Type::Reader Event::After::Reader::getEvent() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Event::Type>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Event::Type::Builder Event::After::Builder::getEvent() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Event::Type>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Event::Type::Pipeline Event::After::Pipeline::getEvent() {
  return  ::mas::schema::model::monica::Event::Type::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Event::After::Builder::setEvent( ::mas::schema::model::monica::Event::Type::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Event::Type>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Event::Type::Builder Event::After::Builder::initEvent() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Event::Type>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Event::After::Builder::adoptEvent(
    ::capnp::Orphan< ::mas::schema::model::monica::Event::Type>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Event::Type>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Event::Type> Event::After::Builder::disownEvent() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Event::Type>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint16_t Event::After::Reader::getDays() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::After::Builder::getDays() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Event::After::Builder::setDays( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::crop::Cultivar Params::Sowing::Reader::getCultivar() const {
  return _reader.getDataField< ::mas::schema::crop::Cultivar>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::crop::Cultivar Params::Sowing::Builder::getCultivar() {
  return _builder.getDataField< ::mas::schema::crop::Cultivar>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::Sowing::Builder::setCultivar( ::mas::schema::crop::Cultivar value) {
  _builder.setDataField< ::mas::schema::crop::Cultivar>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Params::Sowing::Reader::getPlantDensity() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Params::Sowing::Builder::getPlantDensity() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::Sowing::Builder::setPlantDensity( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Params::Sowing::Reader::hasCrop() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::Sowing::Builder::hasCrop() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::mas::schema::crop::Crop::Client Params::Sowing::Reader::getCrop() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::crop::Crop>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::crop::Crop::Client Params::Sowing::Builder::getCrop() {
  return ::capnp::_::PointerHelpers< ::mas::schema::crop::Crop>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::crop::Crop::Client Params::Sowing::Pipeline::getCrop() {
  return  ::mas::schema::crop::Crop::Client(_typeless.getPointerField(0).asCap());
}
inline void Params::Sowing::Builder::setCrop( ::mas::schema::crop::Crop::Client&& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::crop::Crop>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void Params::Sowing::Builder::setCrop( ::mas::schema::crop::Crop::Client& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::crop::Crop>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void Params::Sowing::Builder::adoptCrop(
    ::capnp::Orphan< ::mas::schema::crop::Crop>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::crop::Crop>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::crop::Crop> Params::Sowing::Builder::disownCrop() {
  return ::capnp::_::PointerHelpers< ::mas::schema::crop::Crop>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline double Params::AutomaticSowing::Reader::getMinTempThreshold() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::Builder::getMinTempThreshold() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setMinTempThreshold(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Params::AutomaticSowing::Reader::getDaysInTempWindow() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Params::AutomaticSowing::Builder::getDaysInTempWindow() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setDaysInTempWindow( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticSowing::Reader::getMinPercentASW() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::Builder::getMinPercentASW() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setMinPercentASW(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticSowing::Reader::getMaxPercentASW() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}

inline double Params::AutomaticSowing::Builder::getMaxPercentASW() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}
inline void Params::AutomaticSowing::Builder::setMaxPercentASW(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value, 4636737291354636288ull);
}

inline double Params::AutomaticSowing::Reader::getMax3dayPrecipSum() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::Builder::getMax3dayPrecipSum() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setMax3dayPrecipSum(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticSowing::Reader::getMaxCurrentDayPrecipSum() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::Builder::getMaxCurrentDayPrecipSum() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setMaxCurrentDayPrecipSum(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticSowing::Reader::getTempSumAboveBaseTemp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::Builder::getTempSumAboveBaseTemp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setTempSumAboveBaseTemp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticSowing::Reader::getBaseTemp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::Builder::getBaseTemp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::Builder::setBaseTemp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool Params::AutomaticSowing::Reader::hasAvgSoilTemp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::AutomaticSowing::Builder::hasAvgSoilTemp() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Reader Params::AutomaticSowing::Reader::getAvgSoilTemp() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Builder Params::AutomaticSowing::Builder::getAvgSoilTemp() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Pipeline Params::AutomaticSowing::Pipeline::getAvgSoilTemp() {
  return  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::AutomaticSowing::Builder::setAvgSoilTemp( ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp::Builder Params::AutomaticSowing::Builder::initAvgSoilTemp() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::AutomaticSowing::Builder::adoptAvgSoilTemp(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp> Params::AutomaticSowing::Builder::disownAvgSoilTemp() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::AutomaticSowing::AvgSoilTemp>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Params::AutomaticSowing::Reader::hasSowing() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Params::AutomaticSowing::Builder::hasSowing() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::Sowing::Reader Params::AutomaticSowing::Reader::getSowing() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Sowing>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::Sowing::Builder Params::AutomaticSowing::Builder::getSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Sowing>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::Sowing::Pipeline Params::AutomaticSowing::Pipeline::getSowing() {
  return  ::mas::schema::model::monica::Params::Sowing::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Params::AutomaticSowing::Builder::setSowing( ::mas::schema::model::monica::Params::Sowing::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Sowing>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::Sowing::Builder Params::AutomaticSowing::Builder::initSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Sowing>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Params::AutomaticSowing::Builder::adoptSowing(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::Sowing>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Sowing>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Sowing> Params::AutomaticSowing::Builder::disownSowing() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Sowing>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Params::AutomaticSowing::AvgSoilTemp::Reader::getSoilDepthForAveraging() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}

inline double Params::AutomaticSowing::AvgSoilTemp::Builder::getSoilDepthForAveraging() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}
inline void Params::AutomaticSowing::AvgSoilTemp::Builder::setSoilDepthForAveraging(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4599075939470750515ull);
}

inline  ::uint16_t Params::AutomaticSowing::AvgSoilTemp::Reader::getDaysInSoilTempWindow() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Params::AutomaticSowing::AvgSoilTemp::Builder::getDaysInSoilTempWindow() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::AvgSoilTemp::Builder::setDaysInSoilTempWindow( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticSowing::AvgSoilTemp::Reader::getSowingIfAboveAvgSoilTemp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticSowing::AvgSoilTemp::Builder::getSowingIfAboveAvgSoilTemp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticSowing::AvgSoilTemp::Builder::setSowingIfAboveAvgSoilTemp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Params::Harvest::Reader::getExported() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}

inline bool Params::Harvest::Builder::getExported() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, true);
}
inline void Params::Harvest::Builder::setExported(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, true);
}

inline bool Params::Harvest::Reader::hasOptCarbMgmtData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::Harvest::Builder::hasOptCarbMgmtData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Reader Params::Harvest::Reader::getOptCarbMgmtData() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Builder Params::Harvest::Builder::getOptCarbMgmtData() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Pipeline Params::Harvest::Pipeline::getOptCarbMgmtData() {
  return  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::Harvest::Builder::setOptCarbMgmtData( ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData::Builder Params::Harvest::Builder::initOptCarbMgmtData() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::Harvest::Builder::adoptOptCarbMgmtData(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData> Params::Harvest::Builder::disownOptCarbMgmtData() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest::OptCarbonMgmtData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Params::Harvest::OptCarbonMgmtData::Reader::getOptCarbonConservation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Params::Harvest::OptCarbonMgmtData::Builder::getOptCarbonConservation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::Harvest::OptCarbonMgmtData::Builder::setOptCarbonConservation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Params::Harvest::OptCarbonMgmtData::Reader::getCropImpactOnHumusBalance() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Params::Harvest::OptCarbonMgmtData::Builder::getCropImpactOnHumusBalance() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::Harvest::OptCarbonMgmtData::Builder::setCropImpactOnHumusBalance(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::Params::Harvest::CropUsage Params::Harvest::OptCarbonMgmtData::Reader::getCropUsage() const {
  return _reader.getDataField< ::mas::schema::model::monica::Params::Harvest::CropUsage>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1u);
}

inline  ::mas::schema::model::monica::Params::Harvest::CropUsage Params::Harvest::OptCarbonMgmtData::Builder::getCropUsage() {
  return _builder.getDataField< ::mas::schema::model::monica::Params::Harvest::CropUsage>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 1u);
}
inline void Params::Harvest::OptCarbonMgmtData::Builder::setCropUsage( ::mas::schema::model::monica::Params::Harvest::CropUsage value) {
  _builder.setDataField< ::mas::schema::model::monica::Params::Harvest::CropUsage>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 1u);
}

inline double Params::Harvest::OptCarbonMgmtData::Reader::getResidueHeq() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Params::Harvest::OptCarbonMgmtData::Builder::getResidueHeq() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::Harvest::OptCarbonMgmtData::Builder::setResidueHeq(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Params::Harvest::OptCarbonMgmtData::Reader::getOrganicFertilizerHeq() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Params::Harvest::OptCarbonMgmtData::Builder::getOrganicFertilizerHeq() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Params::Harvest::OptCarbonMgmtData::Builder::setOrganicFertilizerHeq(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Params::Harvest::OptCarbonMgmtData::Reader::getMaxResidueRecoverFraction() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Params::Harvest::OptCarbonMgmtData::Builder::getMaxResidueRecoverFraction() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Params::Harvest::OptCarbonMgmtData::Builder::setMaxResidueRecoverFraction(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticHarvest::Reader::getMinPercentASW() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticHarvest::Builder::getMinPercentASW() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticHarvest::Builder::setMinPercentASW(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticHarvest::Reader::getMaxPercentASW() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}

inline double Params::AutomaticHarvest::Builder::getMaxPercentASW() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}
inline void Params::AutomaticHarvest::Builder::setMaxPercentASW(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value, 4636737291354636288ull);
}

inline double Params::AutomaticHarvest::Reader::getMax3dayPrecipSum() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticHarvest::Builder::getMax3dayPrecipSum() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticHarvest::Builder::setMax3dayPrecipSum(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Params::AutomaticHarvest::Reader::getMaxCurrentDayPrecipSum() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Params::AutomaticHarvest::Builder::getMaxCurrentDayPrecipSum() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Params::AutomaticHarvest::Builder::setMaxCurrentDayPrecipSum(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::Event::PhenoStage Params::AutomaticHarvest::Reader::getHarvestTime() const {
  return _reader.getDataField< ::mas::schema::model::monica::Event::PhenoStage>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 3u);
}

inline  ::mas::schema::model::monica::Event::PhenoStage Params::AutomaticHarvest::Builder::getHarvestTime() {
  return _builder.getDataField< ::mas::schema::model::monica::Event::PhenoStage>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 3u);
}
inline void Params::AutomaticHarvest::Builder::setHarvestTime( ::mas::schema::model::monica::Event::PhenoStage value) {
  _builder.setDataField< ::mas::schema::model::monica::Event::PhenoStage>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, 3u);
}

inline bool Params::AutomaticHarvest::Reader::hasHarvest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::AutomaticHarvest::Builder::hasHarvest() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::Harvest::Reader Params::AutomaticHarvest::Reader::getHarvest() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::Harvest::Builder Params::AutomaticHarvest::Builder::getHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::Harvest::Pipeline Params::AutomaticHarvest::Pipeline::getHarvest() {
  return  ::mas::schema::model::monica::Params::Harvest::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::AutomaticHarvest::Builder::setHarvest( ::mas::schema::model::monica::Params::Harvest::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::Harvest::Builder Params::AutomaticHarvest::Builder::initHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::AutomaticHarvest::Builder::adoptHarvest(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Harvest> Params::AutomaticHarvest::Builder::disownHarvest() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Harvest>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Params::Cutting::Reader::hasCuttingSpec() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::Cutting::Builder::hasCuttingSpec() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Reader Params::Cutting::Reader::getCuttingSpec() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Builder Params::Cutting::Builder::getCuttingSpec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::Cutting::Builder::setCuttingSpec( ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>::Builder Params::Cutting::Builder::initCuttingSpec(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Params::Cutting::Builder::adoptCuttingSpec(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>> Params::Cutting::Builder::disownCuttingSpec() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::Cutting::Spec,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Params::Cutting::Reader::getCutMaxAssimilationRatePercentage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::Cutting::Builder::getCutMaxAssimilationRatePercentage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::Cutting::Builder::setCutMaxAssimilationRatePercentage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::PlantOrgan Params::Cutting::Spec::Reader::getOrgan() const {
  return _reader.getDataField< ::mas::schema::model::monica::PlantOrgan>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::PlantOrgan Params::Cutting::Spec::Builder::getOrgan() {
  return _builder.getDataField< ::mas::schema::model::monica::PlantOrgan>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::Cutting::Spec::Builder::setOrgan( ::mas::schema::model::monica::PlantOrgan value) {
  _builder.setDataField< ::mas::schema::model::monica::PlantOrgan>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Params::Cutting::Spec::Reader::getValue() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Params::Cutting::Spec::Builder::getValue() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::Cutting::Spec::Builder::setValue(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::Params::Cutting::Unit Params::Cutting::Spec::Reader::getUnit() const {
  return _reader.getDataField< ::mas::schema::model::monica::Params::Cutting::Unit>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::Params::Cutting::Unit Params::Cutting::Spec::Builder::getUnit() {
  return _builder.getDataField< ::mas::schema::model::monica::Params::Cutting::Unit>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::Cutting::Spec::Builder::setUnit( ::mas::schema::model::monica::Params::Cutting::Unit value) {
  _builder.setDataField< ::mas::schema::model::monica::Params::Cutting::Unit>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::model::monica::Params::Cutting::CL Params::Cutting::Spec::Reader::getCutOrLeft() const {
  return _reader.getDataField< ::mas::schema::model::monica::Params::Cutting::CL>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::Params::Cutting::CL Params::Cutting::Spec::Builder::getCutOrLeft() {
  return _builder.getDataField< ::mas::schema::model::monica::Params::Cutting::CL>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::Cutting::Spec::Builder::setCutOrLeft( ::mas::schema::model::monica::Params::Cutting::CL value) {
  _builder.setDataField< ::mas::schema::model::monica::Params::Cutting::CL>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Params::Cutting::Spec::Reader::getExportPercentage() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}

inline double Params::Cutting::Spec::Builder::getExportPercentage() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, 4636737291354636288ull);
}
inline void Params::Cutting::Spec::Builder::setExportPercentage(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value, 4636737291354636288ull);
}

inline bool Params::MineralFertilization::Reader::hasPartition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::MineralFertilization::Builder::hasPartition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader Params::MineralFertilization::Reader::getPartition() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder Params::MineralFertilization::Builder::getPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline Params::MineralFertilization::Pipeline::getPartition() {
  return  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::MineralFertilization::Builder::setPartition( ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder Params::MineralFertilization::Builder::initPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::MineralFertilization::Builder::adoptPartition(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters> Params::MineralFertilization::Builder::disownPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Params::MineralFertilization::Reader::getAmount() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::MineralFertilization::Builder::getAmount() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::MineralFertilization::Builder::setAmount(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Params::MineralFertilization::Parameters::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::MineralFertilization::Parameters::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Params::MineralFertilization::Parameters::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Params::MineralFertilization::Parameters::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::MineralFertilization::Parameters::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Params::MineralFertilization::Parameters::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Params::MineralFertilization::Parameters::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Params::MineralFertilization::Parameters::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Params::MineralFertilization::Parameters::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Params::MineralFertilization::Parameters::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Params::MineralFertilization::Parameters::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Params::MineralFertilization::Parameters::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Params::MineralFertilization::Parameters::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Params::MineralFertilization::Parameters::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Params::MineralFertilization::Parameters::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Params::MineralFertilization::Parameters::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline double Params::MineralFertilization::Parameters::Reader::getCarbamid() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::MineralFertilization::Parameters::Builder::getCarbamid() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::MineralFertilization::Parameters::Builder::setCarbamid(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Params::MineralFertilization::Parameters::Reader::getNh4() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Params::MineralFertilization::Parameters::Builder::getNh4() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::MineralFertilization::Parameters::Builder::setNh4(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Params::MineralFertilization::Parameters::Reader::getNo3() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Params::MineralFertilization::Parameters::Builder::getNo3() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::MineralFertilization::Parameters::Builder::setNo3(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Params::NDemandFertilization::Reader::getNDemand() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::NDemandFertilization::Builder::getNDemand() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::NDemandFertilization::Builder::setNDemand(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Params::NDemandFertilization::Reader::hasPartition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::NDemandFertilization::Builder::hasPartition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader Params::NDemandFertilization::Reader::getPartition() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder Params::NDemandFertilization::Builder::getPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline Params::NDemandFertilization::Pipeline::getPartition() {
  return  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::NDemandFertilization::Builder::setPartition( ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder Params::NDemandFertilization::Builder::initPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::NDemandFertilization::Builder::adoptPartition(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters> Params::NDemandFertilization::Builder::disownPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Params::NDemandFertilization::Reader::getDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Params::NDemandFertilization::Builder::getDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::NDemandFertilization::Builder::setDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t Params::NDemandFertilization::Reader::getStage() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint8_t Params::NDemandFertilization::Builder::getStage() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, 1u);
}
inline void Params::NDemandFertilization::Builder::setStage( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value, 1u);
}

inline bool Params::OrganicFertilization::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::OrganicFertilization::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader Params::OrganicFertilization::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder Params::OrganicFertilization::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Pipeline Params::OrganicFertilization::Pipeline::getParams() {
  return  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::OrganicFertilization::Builder::setParams( ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder Params::OrganicFertilization::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::OrganicFertilization::Builder::adoptParams(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters> Params::OrganicFertilization::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Params::OrganicFertilization::Reader::getAmount() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::Builder::getAmount() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::Builder::setAmount(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Params::OrganicFertilization::Reader::getIncorporation() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool Params::OrganicFertilization::Builder::getIncorporation() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::Builder::setIncorporation(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getAomDryMatterContent() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getAomDryMatterContent() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setAomDryMatterContent(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getAomNH4Content() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getAomNH4Content() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setAomNH4Content(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getAomNO3Content() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getAomNO3Content() {
  return _builder.getDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setAomNO3Content(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getAomCarbamidContent() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getAomCarbamidContent() {
  return _builder.getDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setAomCarbamidContent(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getAomSlowDecCoeffStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getAomSlowDecCoeffStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setAomSlowDecCoeffStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getAomFastDecCoeffStandard() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getAomFastDecCoeffStandard() {
  return _builder.getDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setAomFastDecCoeffStandard(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getPartAOMToAOMSlow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getPartAOMToAOMSlow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setPartAOMToAOMSlow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getPartAOMToAOMFast() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getPartAOMToAOMFast() {
  return _builder.getDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setPartAOMToAOMFast(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getCnRatioAOMSlow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getCnRatioAOMSlow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setCnRatioAOMSlow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getCnRatioAOMFast() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getCnRatioAOMFast() {
  return _builder.getDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setCnRatioAOMFast(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getPartAOMSlowToSMBSlow() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getPartAOMSlowToSMBSlow() {
  return _builder.getDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setPartAOMSlowToSMBSlow(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getPartAOMSlowToSMBFast() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getPartAOMSlowToSMBFast() {
  return _builder.getDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setPartAOMSlowToSMBFast(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Reader::getNConcentration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline double Params::OrganicFertilization::OrganicMatterParameters::Builder::getNConcentration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void Params::OrganicFertilization::OrganicMatterParameters::Builder::setNConcentration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline bool Params::OrganicFertilization::Parameters::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::OrganicFertilization::Parameters::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader Params::OrganicFertilization::Parameters::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder Params::OrganicFertilization::Parameters::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Pipeline Params::OrganicFertilization::Parameters::Pipeline::getParams() {
  return  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::OrganicFertilization::Parameters::Builder::setParams( ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder Params::OrganicFertilization::Parameters::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::OrganicFertilization::Parameters::Builder::adoptParams(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters> Params::OrganicFertilization::Parameters::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Params::OrganicFertilization::Parameters::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Params::OrganicFertilization::Parameters::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Params::OrganicFertilization::Parameters::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Params::OrganicFertilization::Parameters::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Params::OrganicFertilization::Parameters::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Params::OrganicFertilization::Parameters::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Params::OrganicFertilization::Parameters::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Params::OrganicFertilization::Parameters::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Params::OrganicFertilization::Parameters::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Params::OrganicFertilization::Parameters::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Params::OrganicFertilization::Parameters::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Params::OrganicFertilization::Parameters::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Params::OrganicFertilization::Parameters::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Params::OrganicFertilization::Parameters::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Params::OrganicFertilization::Parameters::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Params::OrganicFertilization::Parameters::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double Params::Tillage::Reader::getDepth() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}

inline double Params::Tillage::Builder::getDepth() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, 4599075939470750515ull);
}
inline void Params::Tillage::Builder::setDepth(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value, 4599075939470750515ull);
}

inline double Params::Irrigation::Reader::getAmount() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::Irrigation::Builder::getAmount() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::Irrigation::Builder::setAmount(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Params::Irrigation::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Params::Irrigation::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Reader Params::Irrigation::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Irrigation::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Builder Params::Irrigation::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Irrigation::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Pipeline Params::Irrigation::Pipeline::getParams() {
  return  ::mas::schema::model::monica::Params::Irrigation::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Params::Irrigation::Builder::setParams( ::mas::schema::model::monica::Params::Irrigation::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Irrigation::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::Irrigation::Parameters::Builder Params::Irrigation::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Irrigation::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Params::Irrigation::Builder::adoptParams(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::Irrigation::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Irrigation::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::Irrigation::Parameters> Params::Irrigation::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::Irrigation::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double Params::Irrigation::Parameters::Reader::getNitrateConcentration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Params::Irrigation::Parameters::Builder::getNitrateConcentration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Params::Irrigation::Parameters::Builder::setNitrateConcentration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double Params::Irrigation::Parameters::Reader::getSulfateConcentration() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double Params::Irrigation::Parameters::Builder::getSulfateConcentration() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Params::Irrigation::Parameters::Builder::setSulfateConcentration(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

#if !CAPNP_LITE
inline FertilizerService::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline FertilizerService::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline FertilizerService::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline FertilizerService::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline FertilizerService::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::mas::schema::model::monica::FertilizerService::Client& FertilizerService::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::mas::schema::model::monica::FertilizerService::Client& FertilizerService::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
template <typename T>
inline bool FertilizerService::Entry<T>::Reader::hasInfo() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool FertilizerService::Entry<T>::Builder::hasInfo() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline  ::mas::schema::common::IdInformation::Reader FertilizerService::Entry<T>::Reader::getInfo() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline  ::mas::schema::common::IdInformation::Builder FertilizerService::Entry<T>::Builder::getInfo() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename T>
inline  ::mas::schema::common::IdInformation::Pipeline FertilizerService::Entry<T>::Pipeline::getInfo() {
  return  ::mas::schema::common::IdInformation::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename T>
inline void FertilizerService::Entry<T>::Builder::setInfo( ::mas::schema::common::IdInformation::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename T>
inline  ::mas::schema::common::IdInformation::Builder FertilizerService::Entry<T>::Builder::initInfo() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename T>
inline void FertilizerService::Entry<T>::Builder::adoptInfo(
    ::capnp::Orphan< ::mas::schema::common::IdInformation>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan< ::mas::schema::common::IdInformation> FertilizerService::Entry<T>::Builder::disownInfo() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::IdInformation>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename T>
inline bool FertilizerService::Entry<T>::Reader::hasRef() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename T>
inline bool FertilizerService::Entry<T>::Builder::hasRef() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
template <typename T>
inline typename  ::mas::schema::common::ValueHolder<T>::Client FertilizerService::Entry<T>::Reader::getRef() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::ValueHolder<T>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::mas::schema::common::ValueHolder<T>::Client FertilizerService::Entry<T>::Builder::getRef() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::ValueHolder<T>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename T>
inline typename  ::mas::schema::common::ValueHolder<T>::Client FertilizerService::Entry<T>::Pipeline::getRef() {
  return typename  ::mas::schema::common::ValueHolder<T>::Client(_typeless.getPointerField(1).asCap());
}
template <typename T>
inline void FertilizerService::Entry<T>::Builder::setRef(typename  ::mas::schema::common::ValueHolder<T>::Client&& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::ValueHolder<T>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(cap));
}
template <typename T>
inline void FertilizerService::Entry<T>::Builder::setRef(typename  ::mas::schema::common::ValueHolder<T>::Client& cap) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::ValueHolder<T>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), cap);
}
template <typename T>
inline void FertilizerService::Entry<T>::Builder::adoptRef(
    ::capnp::Orphan< ::mas::schema::common::ValueHolder<T>>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::common::ValueHolder<T>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename T>
inline ::capnp::Orphan< ::mas::schema::common::ValueHolder<T>> FertilizerService::Entry<T>::Builder::disownRef() {
  return ::capnp::_::PointerHelpers< ::mas::schema::common::ValueHolder<T>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

// FertilizerService::Entry<T>
template <typename T>
constexpr uint16_t FertilizerService::Entry<T>::_capnpPrivate::dataWordSize;
template <typename T>
constexpr uint16_t FertilizerService::Entry<T>::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
template <typename T>
constexpr ::capnp::Kind FertilizerService::Entry<T>::_capnpPrivate::kind;
template <typename T>
constexpr ::capnp::_::RawSchema const* FertilizerService::Entry<T>::_capnpPrivate::schema;
template <typename T>
const ::capnp::_::RawBrandedSchema::Scope FertilizerService::Entry<T>::_capnpPrivate::brandScopes[] = {
  { 0xf54586500e2b72cd, brandBindings + 0, 1, false},
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Binding FertilizerService::Entry<T>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<T>(),
};
template <typename T>
const ::capnp::_::RawBrandedSchema::Dependency FertilizerService::Entry<T>::_capnpPrivate::brandDependencies[] = {
  { 16777217,  ::mas::schema::common::ValueHolder<T>::_capnpPrivate::brand() },
};
template <typename T>
const ::capnp::_::RawBrandedSchema FertilizerService::Entry<T>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_f54586500e2b72cd, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

inline  ::mas::schema::model::monica::MineralFertilizer FertilizerService::MineralFertilizerPartitionForParams::Reader::getMinFert() const {
  return _reader.getDataField< ::mas::schema::model::monica::MineralFertilizer>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::MineralFertilizer FertilizerService::MineralFertilizerPartitionForParams::Builder::getMinFert() {
  return _builder.getDataField< ::mas::schema::model::monica::MineralFertilizer>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FertilizerService::MineralFertilizerPartitionForParams::Builder::setMinFert( ::mas::schema::model::monica::MineralFertilizer value) {
  _builder.setDataField< ::mas::schema::model::monica::MineralFertilizer>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FertilizerService::MineralFertilizerPartitionForResults::Reader::hasPartition() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::MineralFertilizerPartitionForResults::Builder::hasPartition() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader FertilizerService::MineralFertilizerPartitionForResults::Reader::getPartition() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder FertilizerService::MineralFertilizerPartitionForResults::Builder::getPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline FertilizerService::MineralFertilizerPartitionForResults::Pipeline::getPartition() {
  return  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FertilizerService::MineralFertilizerPartitionForResults::Builder::setPartition( ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::MineralFertilization::Parameters::Builder FertilizerService::MineralFertilizerPartitionForResults::Builder::initPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::MineralFertilizerPartitionForResults::Builder::adoptPartition(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::MineralFertilization::Parameters> FertilizerService::MineralFertilizerPartitionForResults::Builder::disownPartition() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::mas::schema::model::monica::OrganicFertilizer FertilizerService::OrganicFertilizerParametersForParams::Reader::getOrgFert() const {
  return _reader.getDataField< ::mas::schema::model::monica::OrganicFertilizer>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::mas::schema::model::monica::OrganicFertilizer FertilizerService::OrganicFertilizerParametersForParams::Builder::getOrgFert() {
  return _builder.getDataField< ::mas::schema::model::monica::OrganicFertilizer>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FertilizerService::OrganicFertilizerParametersForParams::Builder::setOrgFert( ::mas::schema::model::monica::OrganicFertilizer value) {
  _builder.setDataField< ::mas::schema::model::monica::OrganicFertilizer>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FertilizerService::OrganicFertilizerParametersForResults::Reader::hasParams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::OrganicFertilizerParametersForResults::Builder::hasParams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader FertilizerService::OrganicFertilizerParametersForResults::Reader::getParams() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder FertilizerService::OrganicFertilizerParametersForResults::Builder::getParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Pipeline FertilizerService::OrganicFertilizerParametersForResults::Pipeline::getParams() {
  return  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FertilizerService::OrganicFertilizerParametersForResults::Builder::setParams( ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::Parameters::Builder FertilizerService::OrganicFertilizerParametersForResults::Builder::initParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::OrganicFertilizerParametersForResults::Builder::adoptParams(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters> FertilizerService::OrganicFertilizerParametersForResults::Builder::disownParams() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::Parameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerService::AvailableMineralFertilizersResults::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::AvailableMineralFertilizersResults::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Reader FertilizerService::AvailableMineralFertilizersResults::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Builder FertilizerService::AvailableMineralFertilizersResults::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::AvailableMineralFertilizersResults::Builder::setEntries( ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>::Builder FertilizerService::AvailableMineralFertilizersResults::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FertilizerService::AvailableMineralFertilizersResults::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>> FertilizerService::AvailableMineralFertilizersResults::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::MineralFertilization::Parameters>,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerService::AvailableOrganicFertilizersResults::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::AvailableOrganicFertilizersResults::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Reader FertilizerService::AvailableOrganicFertilizersResults::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Builder FertilizerService::AvailableOrganicFertilizersResults::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::AvailableOrganicFertilizersResults::Builder::setEntries( ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>::Builder FertilizerService::AvailableOrganicFertilizersResults::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FertilizerService::AvailableOrganicFertilizersResults::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>> FertilizerService::AvailableOrganicFertilizersResults::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::FertilizerService::Entry< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerService::MineralFertilizerParams::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::MineralFertilizerParams::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerService::MineralFertilizerParams::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerService::MineralFertilizerParams::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::MineralFertilizerParams::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerService::MineralFertilizerParams::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FertilizerService::MineralFertilizerParams::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerService::MineralFertilizerParams::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerService::MineralFertilizerResults::Reader::hasFert() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::MineralFertilizerResults::Builder::hasFert() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Reader FertilizerService::MineralFertilizerResults::Reader::getFert() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Builder FertilizerService::MineralFertilizerResults::Builder::getFert() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::MineralFertilizerResults::Builder::setFert( ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>::Builder FertilizerService::MineralFertilizerResults::Builder::initFert(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FertilizerService::MineralFertilizerResults::Builder::adoptFert(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>> FertilizerService::MineralFertilizerResults::Builder::disownFert() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Params::MineralFertilization::Parameters,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerService::OrganicFertilizerParams::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::OrganicFertilizerParams::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FertilizerService::OrganicFertilizerParams::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FertilizerService::OrganicFertilizerParams::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::OrganicFertilizerParams::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FertilizerService::OrganicFertilizerParams::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FertilizerService::OrganicFertilizerParams::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FertilizerService::OrganicFertilizerParams::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool FertilizerService::OrganicFertilizerResults::Reader::hasFert() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FertilizerService::OrganicFertilizerResults::Builder::hasFert() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader FertilizerService::OrganicFertilizerResults::Reader::getFert() const {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder FertilizerService::OrganicFertilizerResults::Builder::getFert() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Pipeline FertilizerService::OrganicFertilizerResults::Pipeline::getFert() {
  return  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void FertilizerService::OrganicFertilizerResults::Builder::setFert( ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Reader value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters::Builder FertilizerService::OrganicFertilizerResults::Builder::initFert() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FertilizerService::OrganicFertilizerResults::Builder::adoptFert(
    ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>&& value) {
  ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters> FertilizerService::OrganicFertilizerResults::Builder::disownFert() {
  return ::capnp::_::PointerHelpers< ::mas::schema::model::monica::Params::OrganicFertilization::OrganicMatterParameters>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline Service::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Service::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Service::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Service::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Service::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::mas::schema::model::monica::Service::Client& Service::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::mas::schema::model::monica::Service::Client& Service::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool Service::ManagementAtResults::Reader::hasMgmt() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Service::ManagementAtResults::Builder::hasMgmt() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Reader Service::ManagementAtResults::Reader::getMgmt() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Builder Service::ManagementAtResults::Builder::getMgmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Service::ManagementAtResults::Builder::setMgmt( ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>::Builder Service::ManagementAtResults::Builder::initMgmt(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Service::ManagementAtResults::Builder::adoptMgmt(
    ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>> Service::ManagementAtResults::Builder::disownMgmt() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::mas::schema::model::monica::Event,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

