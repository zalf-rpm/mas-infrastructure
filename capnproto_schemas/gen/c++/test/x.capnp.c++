// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: x.capnp

#include "x.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<31> b_d227ef68de0bc647 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     71, 198,  11, 222, 104, 239,  39, 210,
      8,   0,   0,   0,   1,   0,   0,   0,
    123,  23,  38, 240, 242, 106, 208, 255,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     83,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
     21, 230,  77, 250, 129, 142, 242, 220,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d227ef68de0bc647 = b_d227ef68de0bc647.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d227ef68de0bc647[] = {
  &s_dcf28e81fa4de615,
};
static const uint16_t m_d227ef68de0bc647[] = {0};
static const uint16_t i_d227ef68de0bc647[] = {0};
const ::capnp::_::RawSchema s_d227ef68de0bc647 = {
  0xd227ef68de0bc647, b_d227ef68de0bc647.words, 31, d_d227ef68de0bc647, m_d227ef68de0bc647,
  1, 1, i_d227ef68de0bc647, nullptr, nullptr, { &s_d227ef68de0bc647, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_dcf28e81fa4de615 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 230,  77, 250, 129, 142, 242, 220,
      8,   0,   0,   0,   3,   0,   0,   0,
    123,  23,  38, 240, 242, 106, 208, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  71,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     88,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,  42, 218,  90, 105,  99, 133, 198,
     13, 151,  26, 238, 188, 230, 170, 134,
     17,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    109,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_dcf28e81fa4de615 = b_dcf28e81fa4de615.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dcf28e81fa4de615[] = {
  &s_86aae6bcee1a970d,
  &s_c68563695ada2a40,
};
static const uint16_t m_dcf28e81fa4de615[] = {0};
const ::capnp::_::RawSchema s_dcf28e81fa4de615 = {
  0xdcf28e81fa4de615, b_dcf28e81fa4de615.words, 27, d_dcf28e81fa4de615, m_dcf28e81fa4de615,
  2, 1, nullptr, nullptr, nullptr, { &s_dcf28e81fa4de615, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_c68563695ada2a40 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     64,  42, 218,  90, 105,  99, 133, 198,
     10,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     88,  46, 109,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c68563695ada2a40 = b_c68563695ada2a40.words;
#if !CAPNP_LITE
static const uint16_t m_c68563695ada2a40[] = {0};
static const uint16_t i_c68563695ada2a40[] = {0};
const ::capnp::_::RawSchema s_c68563695ada2a40 = {
  0xc68563695ada2a40, b_c68563695ada2a40.words, 31, nullptr, m_c68563695ada2a40,
  0, 1, i_c68563695ada2a40, nullptr, nullptr, { &s_c68563695ada2a40, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_86aae6bcee1a970d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     13, 151,  26, 238, 188, 230, 170, 134,
     10,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     88,  46, 109,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    116,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_86aae6bcee1a970d = b_86aae6bcee1a970d.words;
#if !CAPNP_LITE
static const uint16_t m_86aae6bcee1a970d[] = {0};
static const uint16_t i_86aae6bcee1a970d[] = {0};
const ::capnp::_::RawSchema s_86aae6bcee1a970d = {
  0x86aae6bcee1a970d, b_86aae6bcee1a970d.words, 31, nullptr, m_86aae6bcee1a970d,
  0, 1, i_86aae6bcee1a970d, nullptr, nullptr, { &s_86aae6bcee1a970d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_ac121e5aa82ca6bd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    189, 166,  44, 168,  90,  30,  18, 172,
      8,   0,   0,   0,   3,   0,   0,   0,
    123,  23,  38, 240, 242, 106, 208, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  71,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     89,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    146, 224, 172, 167, 156, 187,   2, 193,
     18, 104,  84, 239, 155, 139, 245, 220,
     17,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    109,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ac121e5aa82ca6bd = b_ac121e5aa82ca6bd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ac121e5aa82ca6bd[] = {
  &s_c102bb9ca7ace092,
  &s_dcf58b9bef546812,
};
static const uint16_t m_ac121e5aa82ca6bd[] = {0};
const ::capnp::_::RawSchema s_ac121e5aa82ca6bd = {
  0xac121e5aa82ca6bd, b_ac121e5aa82ca6bd.words, 27, d_ac121e5aa82ca6bd, m_ac121e5aa82ca6bd,
  2, 1, nullptr, nullptr, nullptr, { &s_ac121e5aa82ca6bd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_c102bb9ca7ace092 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    146, 224, 172, 167, 156, 187,   2, 193,
     10,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     89,  46, 109,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    104, 101, 108, 108, 111,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c102bb9ca7ace092 = b_c102bb9ca7ace092.words;
#if !CAPNP_LITE
static const uint16_t m_c102bb9ca7ace092[] = {0};
static const uint16_t i_c102bb9ca7ace092[] = {0};
const ::capnp::_::RawSchema s_c102bb9ca7ace092 = {
  0xc102bb9ca7ace092, b_c102bb9ca7ace092.words, 31, nullptr, m_c102bb9ca7ace092,
  0, 1, i_c102bb9ca7ace092, nullptr, nullptr, { &s_c102bb9ca7ace092, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<15> b_dcf58b9bef546812 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     18, 104,  84, 239, 155, 139, 245, 220,
     10,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     89,  46, 109,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dcf58b9bef546812 = b_dcf58b9bef546812.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_dcf58b9bef546812 = {
  0xdcf58b9bef546812, b_dcf58b9bef546812.words, 15, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_dcf58b9bef546812, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<27> b_c64526206425c2ab = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    171, 194,  37, 100,  32,  38,  69, 198,
      8,   0,   0,   0,   3,   0,   0,   0,
    123,  23,  38, 240, 242, 106, 208, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  71,   0,   0,   0,
     61,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     90,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201, 140, 201, 109, 201,   8,  29, 240,
     83, 107,  26,  83,  99, 166,  68, 212,
     17,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    109,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c64526206425c2ab = b_c64526206425c2ab.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c64526206425c2ab[] = {
  &s_d444a663531a6b53,
  &s_f01d08c96dc98cc9,
};
static const uint16_t m_c64526206425c2ab[] = {0};
const ::capnp::_::RawSchema s_c64526206425c2ab = {
  0xc64526206425c2ab, b_c64526206425c2ab.words, 27, d_c64526206425c2ab, m_c64526206425c2ab,
  2, 1, nullptr, nullptr, nullptr, { &s_c64526206425c2ab, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_f01d08c96dc98cc9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    201, 140, 201, 109, 201,   8,  29, 240,
     10,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     90,  46, 109,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    110,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f01d08c96dc98cc9 = b_f01d08c96dc98cc9.words;
#if !CAPNP_LITE
static const uint16_t m_f01d08c96dc98cc9[] = {0};
static const uint16_t i_f01d08c96dc98cc9[] = {0};
const ::capnp::_::RawSchema s_f01d08c96dc98cc9 = {
  0xf01d08c96dc98cc9, b_f01d08c96dc98cc9.words, 31, nullptr, m_f01d08c96dc98cc9,
  0, 1, i_f01d08c96dc98cc9, nullptr, nullptr, { &s_f01d08c96dc98cc9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_d444a663531a6b53 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     83, 107,  26,  83,  99, 166,  68, 212,
     10,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120,  46,  99,  97, 112, 110, 112,  58,
     90,  46, 109,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    114,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d444a663531a6b53 = b_d444a663531a6b53.words;
#if !CAPNP_LITE
static const uint16_t m_d444a663531a6b53[] = {0};
static const uint16_t i_d444a663531a6b53[] = {0};
const ::capnp::_::RawSchema s_d444a663531a6b53 = {
  0xd444a663531a6b53, b_d444a663531a6b53.words, 31, nullptr, m_d444a663531a6b53,
  0, 1, i_d444a663531a6b53, nullptr, nullptr, { &s_d444a663531a6b53, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace test {

// S
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t S::_capnpPrivate::dataWordSize;
constexpr uint16_t S::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind S::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* S::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::test::X::MParams,  ::mas::schema::test::X::MResults>
X::Client::mRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::test::X::MParams,  ::mas::schema::test::X::MResults>(
      0xdcf28e81fa4de615ull, 0, sizeHint, {true});
}
::kj::Promise<void> X::Server::m(MContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "x.capnp:X", "m",
      0xdcf28e81fa4de615ull, 0);
}
::capnp::Capability::Server::DispatchCallResult X::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xdcf28e81fa4de615ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("x.capnp:X", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult X::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        m(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::test::X::MParams,  ::mas::schema::test::X::MResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "x.capnp:X",
          0xdcf28e81fa4de615ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// X
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind X::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* X::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// X::MParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t X::MParams::_capnpPrivate::dataWordSize;
constexpr uint16_t X::MParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind X::MParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* X::MParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// X::MResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t X::MResults::_capnpPrivate::dataWordSize;
constexpr uint16_t X::MResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind X::MResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* X::MResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::test::Y::MParams,  ::mas::schema::test::Y::MResults>
Y::Client::mRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::test::Y::MParams,  ::mas::schema::test::Y::MResults>(
      0xac121e5aa82ca6bdull, 0, sizeHint, {true});
}
::kj::Promise<void> Y::Server::m(MContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "x.capnp:Y", "m",
      0xac121e5aa82ca6bdull, 0);
}
::capnp::Capability::Server::DispatchCallResult Y::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xac121e5aa82ca6bdull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("x.capnp:Y", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Y::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        m(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::test::Y::MParams,  ::mas::schema::test::Y::MResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "x.capnp:Y",
          0xac121e5aa82ca6bdull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Y
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Y::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Y::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Y::MParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Y::MParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Y::MParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Y::MParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Y::MParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Y::MResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Y::MResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Y::MResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Y::MResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Y::MResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::test::Z::MParams,  ::mas::schema::test::Z::MResults>
Z::Client::mRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::test::Z::MParams,  ::mas::schema::test::Z::MResults>(
      0xc64526206425c2abull, 0, sizeHint, {true});
}
::kj::Promise<void> Z::Server::m(MContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "x.capnp:Z", "m",
      0xc64526206425c2abull, 0);
}
::capnp::Capability::Server::DispatchCallResult Z::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc64526206425c2abull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("x.capnp:Z", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Z::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        m(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::test::Z::MParams,  ::mas::schema::test::Z::MResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "x.capnp:Z",
          0xc64526206425c2abull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Z
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Z::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Z::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Z::MParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Z::MParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Z::MParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Z::MParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Z::MParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Z::MResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Z::MResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Z::MResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Z::MResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Z::MResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

