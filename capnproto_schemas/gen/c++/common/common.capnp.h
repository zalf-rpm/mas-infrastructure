// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: common.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d4cb7ecbfe03dad3);
CAPNP_DECLARE_SCHEMA(b2afd1cb599c48d5);
CAPNP_DECLARE_SCHEMA(9d8aa1cf1e49deb1);
CAPNP_DECLARE_SCHEMA(ed6c098b67cad454);
CAPNP_DECLARE_SCHEMA(e8cbf552b1c262cc);
CAPNP_DECLARE_SCHEMA(e17592335373b246);
CAPNP_DECLARE_SCHEMA(b9d4864725174733);

}  // namespace schemas
}  // namespace capnp

namespace mas {
namespace schema {
namespace common {

struct IdInformation {
  IdInformation() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d4cb7ecbfe03dad3, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Identifiable {
  Identifiable() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  struct InfoParams;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(b2afd1cb599c48d5)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct Identifiable::InfoParams {
  InfoParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9d8aa1cf1e49deb1, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StructuredText {
  StructuredText() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Structure;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed6c098b67cad454, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StructuredText::Structure {
  Structure() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    NONE,
    JSON,
    XML,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e8cbf552b1c262cc, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Value {
  Value() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    F64,
    F32,
    I64,
    I32,
    I16,
    I8,
    UI64,
    UI32,
    UI16,
    UI8,
    B,
    T,
    D,
    P,
    CAP,
    LF64,
    LF32,
    LI64,
    LI32,
    LI16,
    LI8,
    LUI64,
    LUI32,
    LUI16,
    LUI8,
    LB,
    LT,
    LD,
    LCAP,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e17592335373b246, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

template <typename F = ::capnp::AnyPointer, typename S = ::capnp::AnyPointer>
struct Pair {
  Pair() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9d4864725174733, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, F, S>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class IdInformation::Reader {
public:
  typedef IdInformation Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class IdInformation::Builder {
public:
  typedef IdInformation Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class IdInformation::Pipeline {
public:
  typedef IdInformation Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
class Identifiable::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Identifiable Calls;
  typedef Identifiable Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation> infoRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Identifiable::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Identifiable Serves;

  ::capnp::Capability::Server::DispatchCallResult dispatchCall(
      uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::mas::schema::common::Identifiable::InfoParams InfoParams;
  typedef ::capnp::CallContext<InfoParams,  ::mas::schema::common::IdInformation> InfoContext;
  virtual ::kj::Promise<void> info(InfoContext context);

  inline  ::mas::schema::common::Identifiable::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::mas::schema::common::Identifiable>();
  }

  ::capnp::Capability::Server::DispatchCallResult dispatchCallInternal(
      uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Identifiable::InfoParams::Reader {
public:
  typedef InfoParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Identifiable::InfoParams::Builder {
public:
  typedef InfoParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Identifiable::InfoParams::Pipeline {
public:
  typedef InfoParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StructuredText::Reader {
public:
  typedef StructuredText Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasValue() const;
  inline  ::capnp::Text::Reader getValue() const;

  inline typename Structure::Reader getStructure() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StructuredText::Builder {
public:
  typedef StructuredText Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasValue();
  inline  ::capnp::Text::Builder getValue();
  inline void setValue( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownValue();

  inline typename Structure::Builder getStructure();
  inline typename Structure::Builder initStructure();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StructuredText::Pipeline {
public:
  typedef StructuredText Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Structure::Pipeline getStructure();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StructuredText::Structure::Reader {
public:
  typedef Structure Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isNone() const;
  inline  ::capnp::Void getNone() const;

  inline bool isJson() const;
  inline  ::capnp::Void getJson() const;

  inline bool isXml() const;
  inline  ::capnp::Void getXml() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StructuredText::Structure::Builder {
public:
  typedef Structure Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isNone();
  inline  ::capnp::Void getNone();
  inline void setNone( ::capnp::Void value = ::capnp::VOID);

  inline bool isJson();
  inline  ::capnp::Void getJson();
  inline void setJson( ::capnp::Void value = ::capnp::VOID);

  inline bool isXml();
  inline  ::capnp::Void getXml();
  inline void setXml( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StructuredText::Structure::Pipeline {
public:
  typedef Structure Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Value::Reader {
public:
  typedef Value Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isF64() const;
  inline double getF64() const;

  inline bool isF32() const;
  inline float getF32() const;

  inline bool isI64() const;
  inline  ::int64_t getI64() const;

  inline bool isI32() const;
  inline  ::int32_t getI32() const;

  inline bool isI16() const;
  inline  ::int16_t getI16() const;

  inline bool isI8() const;
  inline  ::int8_t getI8() const;

  inline bool isUi64() const;
  inline  ::uint64_t getUi64() const;

  inline bool isUi32() const;
  inline  ::uint32_t getUi32() const;

  inline bool isUi16() const;
  inline  ::uint16_t getUi16() const;

  inline bool isUi8() const;
  inline  ::uint8_t getUi8() const;

  inline bool isB() const;
  inline bool getB() const;

  inline bool isT() const;
  inline bool hasT() const;
  inline  ::capnp::Text::Reader getT() const;

  inline bool isD() const;
  inline bool hasD() const;
  inline  ::capnp::Data::Reader getD() const;

  inline bool isP() const;
  inline bool hasP() const;
  inline ::capnp::AnyPointer::Reader getP() const;

  inline bool isCap() const;
  inline bool hasCap() const;
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap() const;
#endif  // !CAPNP_LITE

  inline bool isLf64() const;
  inline bool hasLf64() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getLf64() const;

  inline bool isLf32() const;
  inline bool hasLf32() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getLf32() const;

  inline bool isLi64() const;
  inline bool hasLi64() const;
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLi64() const;

  inline bool isLi32() const;
  inline bool hasLi32() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLi32() const;

  inline bool isLi16() const;
  inline bool hasLi16() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getLi16() const;

  inline bool isLi8() const;
  inline bool hasLi8() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getLi8() const;

  inline bool isLui64() const;
  inline bool hasLui64() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLui64() const;

  inline bool isLui32() const;
  inline bool hasLui32() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLui32() const;

  inline bool isLui16() const;
  inline bool hasLui16() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getLui16() const;

  inline bool isLui8() const;
  inline bool hasLui8() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getLui8() const;

  inline bool isLb() const;
  inline bool hasLb() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getLb() const;

  inline bool isLt() const;
  inline bool hasLt() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getLt() const;

  inline bool isLd() const;
  inline bool hasLd() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getLd() const;

  inline bool isLcap() const;
  inline bool hasLcap() const;
#if !CAPNP_LITE
  inline  ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Reader getLcap() const;
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Value::Builder {
public:
  typedef Value Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isF64();
  inline double getF64();
  inline void setF64(double value);

  inline bool isF32();
  inline float getF32();
  inline void setF32(float value);

  inline bool isI64();
  inline  ::int64_t getI64();
  inline void setI64( ::int64_t value);

  inline bool isI32();
  inline  ::int32_t getI32();
  inline void setI32( ::int32_t value);

  inline bool isI16();
  inline  ::int16_t getI16();
  inline void setI16( ::int16_t value);

  inline bool isI8();
  inline  ::int8_t getI8();
  inline void setI8( ::int8_t value);

  inline bool isUi64();
  inline  ::uint64_t getUi64();
  inline void setUi64( ::uint64_t value);

  inline bool isUi32();
  inline  ::uint32_t getUi32();
  inline void setUi32( ::uint32_t value);

  inline bool isUi16();
  inline  ::uint16_t getUi16();
  inline void setUi16( ::uint16_t value);

  inline bool isUi8();
  inline  ::uint8_t getUi8();
  inline void setUi8( ::uint8_t value);

  inline bool isB();
  inline bool getB();
  inline void setB(bool value);

  inline bool isT();
  inline bool hasT();
  inline  ::capnp::Text::Builder getT();
  inline void setT( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initT(unsigned int size);
  inline void adoptT(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownT();

  inline bool isD();
  inline bool hasD();
  inline  ::capnp::Data::Builder getD();
  inline void setD( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initD(unsigned int size);
  inline void adoptD(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownD();

  inline bool isP();
  inline bool hasP();
  inline ::capnp::AnyPointer::Builder getP();
  inline ::capnp::AnyPointer::Builder initP();

  inline bool isCap();
  inline bool hasCap();
#if !CAPNP_LITE
  inline  ::capnp::Capability::Client getCap();
  inline void setCap( ::capnp::Capability::Client&& value);
  inline void setCap( ::capnp::Capability::Client& value);
  inline void adoptCap(::capnp::Orphan< ::capnp::Capability>&& value);
  inline ::capnp::Orphan< ::capnp::Capability> disownCap();
#endif  // !CAPNP_LITE

  inline bool isLf64();
  inline bool hasLf64();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getLf64();
  inline void setLf64( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLf64(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initLf64(unsigned int size);
  inline void adoptLf64(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownLf64();

  inline bool isLf32();
  inline bool hasLf32();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getLf32();
  inline void setLf32( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLf32(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initLf32(unsigned int size);
  inline void adoptLf32(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownLf32();

  inline bool isLi64();
  inline bool hasLi64();
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLi64();
  inline void setLi64( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLi64(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLi64(unsigned int size);
  inline void adoptLi64(::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> disownLi64();

  inline bool isLi32();
  inline bool hasLi32();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLi32();
  inline void setLi32( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLi32(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLi32(unsigned int size);
  inline void adoptLi32(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownLi32();

  inline bool isLi16();
  inline bool hasLi16();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getLi16();
  inline void setLi16( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLi16(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initLi16(unsigned int size);
  inline void adoptLi16(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownLi16();

  inline bool isLi8();
  inline bool hasLi8();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getLi8();
  inline void setLi8( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLi8(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initLi8(unsigned int size);
  inline void adoptLi8(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownLi8();

  inline bool isLui64();
  inline bool hasLui64();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLui64();
  inline void setLui64( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLui64(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLui64(unsigned int size);
  inline void adoptLui64(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLui64();

  inline bool isLui32();
  inline bool hasLui32();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLui32();
  inline void setLui32( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLui32(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLui32(unsigned int size);
  inline void adoptLui32(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownLui32();

  inline bool isLui16();
  inline bool hasLui16();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getLui16();
  inline void setLui16( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLui16(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initLui16(unsigned int size);
  inline void adoptLui16(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownLui16();

  inline bool isLui8();
  inline bool hasLui8();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getLui8();
  inline void setLui8( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLui8(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initLui8(unsigned int size);
  inline void adoptLui8(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownLui8();

  inline bool isLb();
  inline bool hasLb();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getLb();
  inline void setLb( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLb(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initLb(unsigned int size);
  inline void adoptLb(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownLb();

  inline bool isLt();
  inline bool hasLt();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getLt();
  inline void setLt( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setLt(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initLt(unsigned int size);
  inline void adoptLt(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownLt();

  inline bool isLd();
  inline bool hasLd();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getLd();
  inline void setLd( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setLd(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initLd(unsigned int size);
  inline void adoptLd(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownLd();

  inline bool isLcap();
  inline bool hasLcap();
#if !CAPNP_LITE
  inline  ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Builder getLcap();
  inline void setLcap( ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Reader value);
  inline  ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Builder initLcap(unsigned int size);
  inline void adoptLcap(::capnp::Orphan< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>> disownLcap();
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Value::Pipeline {
public:
  typedef Value Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename F, typename S>
class Pair<F, S>::Reader {
public:
  typedef Pair Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename F2 = ::capnp::AnyPointer, typename S2 = ::capnp::AnyPointer>
  typename Pair<F2, S2>::Reader asGeneric() {
    return typename Pair<F2, S2>::Reader(_reader);
  }

  inline bool hasFst() const;
  inline  ::capnp::ReaderFor<F> getFst() const;

  inline bool hasSnd() const;
  inline  ::capnp::ReaderFor<S> getSnd() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename F, typename S>
class Pair<F, S>::Builder {
public:
  typedef Pair Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename F2 = ::capnp::AnyPointer, typename S2 = ::capnp::AnyPointer>
  typename Pair<F2, S2>::Builder asGeneric() {
    return typename Pair<F2, S2>::Builder(_builder);
  }

  inline bool hasFst();
  inline  ::capnp::BuilderFor<F> getFst();
  inline void setFst( ::capnp::ReaderFor<F> value);
  inline  ::capnp::BuilderFor<F> initFst();
  inline  ::capnp::BuilderFor<F> initFst(unsigned int size);
  inline void adoptFst(::capnp::Orphan<F>&& value);
  inline ::capnp::Orphan<F> disownFst();

  inline bool hasSnd();
  inline  ::capnp::BuilderFor<S> getSnd();
  inline void setSnd( ::capnp::ReaderFor<S> value);
  inline  ::capnp::BuilderFor<S> initSnd();
  inline  ::capnp::BuilderFor<S> initSnd(unsigned int size);
  inline void adoptSnd(::capnp::Orphan<S>&& value);
  inline ::capnp::Orphan<S> disownSnd();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename F, typename S>
class Pair<F, S>::Pipeline {
public:
  typedef Pair Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<F> getFst();
  inline  ::capnp::PipelineFor<S> getSnd();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool IdInformation::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool IdInformation::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IdInformation::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IdInformation::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void IdInformation::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IdInformation::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void IdInformation::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IdInformation::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool IdInformation::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool IdInformation::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IdInformation::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IdInformation::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void IdInformation::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IdInformation::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void IdInformation::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IdInformation::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool IdInformation::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool IdInformation::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader IdInformation::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder IdInformation::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void IdInformation::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder IdInformation::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void IdInformation::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> IdInformation::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

#if !CAPNP_LITE
inline Identifiable::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Identifiable::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Identifiable::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Identifiable::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Identifiable::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::mas::schema::common::Identifiable::Client& Identifiable::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::mas::schema::common::Identifiable::Client& Identifiable::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool StructuredText::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StructuredText::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StructuredText::Reader::getValue() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StructuredText::Builder::getValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StructuredText::Builder::setValue( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StructuredText::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StructuredText::Builder::adoptValue(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StructuredText::Builder::disownValue() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename StructuredText::Structure::Reader StructuredText::Reader::getStructure() const {
  return typename StructuredText::Structure::Reader(_reader);
}
inline typename StructuredText::Structure::Builder StructuredText::Builder::getStructure() {
  return typename StructuredText::Structure::Builder(_builder);
}
#if !CAPNP_LITE
inline typename StructuredText::Structure::Pipeline StructuredText::Pipeline::getStructure() {
  return typename StructuredText::Structure::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename StructuredText::Structure::Builder StructuredText::Builder::initStructure() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  return typename StructuredText::Structure::Builder(_builder);
}
inline  ::mas::schema::common::StructuredText::Structure::Which StructuredText::Structure::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::mas::schema::common::StructuredText::Structure::Which StructuredText::Structure::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool StructuredText::Structure::Reader::isNone() const {
  return which() == StructuredText::Structure::NONE;
}
inline bool StructuredText::Structure::Builder::isNone() {
  return which() == StructuredText::Structure::NONE;
}
inline  ::capnp::Void StructuredText::Structure::Reader::getNone() const {
  KJ_IREQUIRE((which() == StructuredText::Structure::NONE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StructuredText::Structure::Builder::getNone() {
  KJ_IREQUIRE((which() == StructuredText::Structure::NONE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StructuredText::Structure::Builder::setNone( ::capnp::Void value) {
  _builder.setDataField<StructuredText::Structure::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, StructuredText::Structure::NONE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StructuredText::Structure::Reader::isJson() const {
  return which() == StructuredText::Structure::JSON;
}
inline bool StructuredText::Structure::Builder::isJson() {
  return which() == StructuredText::Structure::JSON;
}
inline  ::capnp::Void StructuredText::Structure::Reader::getJson() const {
  KJ_IREQUIRE((which() == StructuredText::Structure::JSON),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StructuredText::Structure::Builder::getJson() {
  KJ_IREQUIRE((which() == StructuredText::Structure::JSON),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StructuredText::Structure::Builder::setJson( ::capnp::Void value) {
  _builder.setDataField<StructuredText::Structure::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, StructuredText::Structure::JSON);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool StructuredText::Structure::Reader::isXml() const {
  return which() == StructuredText::Structure::XML;
}
inline bool StructuredText::Structure::Builder::isXml() {
  return which() == StructuredText::Structure::XML;
}
inline  ::capnp::Void StructuredText::Structure::Reader::getXml() const {
  KJ_IREQUIRE((which() == StructuredText::Structure::XML),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void StructuredText::Structure::Builder::getXml() {
  KJ_IREQUIRE((which() == StructuredText::Structure::XML),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void StructuredText::Structure::Builder::setXml( ::capnp::Void value) {
  _builder.setDataField<StructuredText::Structure::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, StructuredText::Structure::XML);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::mas::schema::common::Value::Which Value::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::mas::schema::common::Value::Which Value::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool Value::Reader::isF64() const {
  return which() == Value::F64;
}
inline bool Value::Builder::isF64() {
  return which() == Value::F64;
}
inline double Value::Reader::getF64() const {
  KJ_IREQUIRE((which() == Value::F64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double Value::Builder::getF64() {
  KJ_IREQUIRE((which() == Value::F64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setF64(double value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::F64);
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isF32() const {
  return which() == Value::F32;
}
inline bool Value::Builder::isF32() {
  return which() == Value::F32;
}
inline float Value::Reader::getF32() const {
  KJ_IREQUIRE((which() == Value::F32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float Value::Builder::getF32() {
  KJ_IREQUIRE((which() == Value::F32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setF32(float value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::F32);
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isI64() const {
  return which() == Value::I64;
}
inline bool Value::Builder::isI64() {
  return which() == Value::I64;
}
inline  ::int64_t Value::Reader::getI64() const {
  KJ_IREQUIRE((which() == Value::I64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t Value::Builder::getI64() {
  KJ_IREQUIRE((which() == Value::I64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setI64( ::int64_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::I64);
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isI32() const {
  return which() == Value::I32;
}
inline bool Value::Builder::isI32() {
  return which() == Value::I32;
}
inline  ::int32_t Value::Reader::getI32() const {
  KJ_IREQUIRE((which() == Value::I32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Value::Builder::getI32() {
  KJ_IREQUIRE((which() == Value::I32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setI32( ::int32_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::I32);
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isI16() const {
  return which() == Value::I16;
}
inline bool Value::Builder::isI16() {
  return which() == Value::I16;
}
inline  ::int16_t Value::Reader::getI16() const {
  KJ_IREQUIRE((which() == Value::I16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Value::Builder::getI16() {
  KJ_IREQUIRE((which() == Value::I16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setI16( ::int16_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::I16);
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isI8() const {
  return which() == Value::I8;
}
inline bool Value::Builder::isI8() {
  return which() == Value::I8;
}
inline  ::int8_t Value::Reader::getI8() const {
  KJ_IREQUIRE((which() == Value::I8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int8_t Value::Builder::getI8() {
  KJ_IREQUIRE((which() == Value::I8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setI8( ::int8_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::I8);
  _builder.setDataField< ::int8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isUi64() const {
  return which() == Value::UI64;
}
inline bool Value::Builder::isUi64() {
  return which() == Value::UI64;
}
inline  ::uint64_t Value::Reader::getUi64() const {
  KJ_IREQUIRE((which() == Value::UI64),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t Value::Builder::getUi64() {
  KJ_IREQUIRE((which() == Value::UI64),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setUi64( ::uint64_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::UI64);
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isUi32() const {
  return which() == Value::UI32;
}
inline bool Value::Builder::isUi32() {
  return which() == Value::UI32;
}
inline  ::uint32_t Value::Reader::getUi32() const {
  KJ_IREQUIRE((which() == Value::UI32),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Value::Builder::getUi32() {
  KJ_IREQUIRE((which() == Value::UI32),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setUi32( ::uint32_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::UI32);
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isUi16() const {
  return which() == Value::UI16;
}
inline bool Value::Builder::isUi16() {
  return which() == Value::UI16;
}
inline  ::uint16_t Value::Reader::getUi16() const {
  KJ_IREQUIRE((which() == Value::UI16),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Value::Builder::getUi16() {
  KJ_IREQUIRE((which() == Value::UI16),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setUi16( ::uint16_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::UI16);
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isUi8() const {
  return which() == Value::UI8;
}
inline bool Value::Builder::isUi8() {
  return which() == Value::UI8;
}
inline  ::uint8_t Value::Reader::getUi8() const {
  KJ_IREQUIRE((which() == Value::UI8),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t Value::Builder::getUi8() {
  KJ_IREQUIRE((which() == Value::UI8),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setUi8( ::uint8_t value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::UI8);
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isB() const {
  return which() == Value::B;
}
inline bool Value::Builder::isB() {
  return which() == Value::B;
}
inline bool Value::Reader::getB() const {
  KJ_IREQUIRE((which() == Value::B),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Value::Builder::getB() {
  KJ_IREQUIRE((which() == Value::B),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Value::Builder::setB(bool value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::B);
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Value::Reader::isT() const {
  return which() == Value::T;
}
inline bool Value::Builder::isT() {
  return which() == Value::T;
}
inline bool Value::Reader::hasT() const {
  if (which() != Value::T) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasT() {
  if (which() != Value::T) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Value::Reader::getT() const {
  KJ_IREQUIRE((which() == Value::T),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Value::Builder::getT() {
  KJ_IREQUIRE((which() == Value::T),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setT( ::capnp::Text::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::T);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Value::Builder::initT(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::T);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptT(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::T);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Value::Builder::disownT() {
  KJ_IREQUIRE((which() == Value::T),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isD() const {
  return which() == Value::D;
}
inline bool Value::Builder::isD() {
  return which() == Value::D;
}
inline bool Value::Reader::hasD() const {
  if (which() != Value::D) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasD() {
  if (which() != Value::D) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Value::Reader::getD() const {
  KJ_IREQUIRE((which() == Value::D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Value::Builder::getD() {
  KJ_IREQUIRE((which() == Value::D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setD( ::capnp::Data::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::D);
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Value::Builder::initD(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::D);
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptD(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::D);
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Value::Builder::disownD() {
  KJ_IREQUIRE((which() == Value::D),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isP() const {
  return which() == Value::P;
}
inline bool Value::Builder::isP() {
  return which() == Value::P;
}
inline bool Value::Reader::hasP() const {
  if (which() != Value::P) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasP() {
  if (which() != Value::P) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline ::capnp::AnyPointer::Reader Value::Reader::getP() const {
  KJ_IREQUIRE((which() == Value::P),
              "Must check which() before get()ing a union member.");
  return ::capnp::AnyPointer::Reader(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder Value::Builder::getP() {
  KJ_IREQUIRE((which() == Value::P),
              "Must check which() before get()ing a union member.");
  return ::capnp::AnyPointer::Builder(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::AnyPointer::Builder Value::Builder::initP() {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::P);
  auto result = ::capnp::AnyPointer::Builder(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
  result.clear();
  return result;
}

inline bool Value::Reader::isCap() const {
  return which() == Value::CAP;
}
inline bool Value::Builder::isCap() {
  return which() == Value::CAP;
}
inline bool Value::Reader::hasCap() const {
  if (which() != Value::CAP) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasCap() {
  if (which() != Value::CAP) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::Capability::Client Value::Reader::getCap() const {
  KJ_IREQUIRE((which() == Value::CAP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Capability::Client Value::Builder::getCap() {
  KJ_IREQUIRE((which() == Value::CAP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setCap( ::capnp::Capability::Client&& cap) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::CAP);
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(cap));
}
inline void Value::Builder::setCap( ::capnp::Capability::Client& cap) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::CAP);
  ::capnp::_::PointerHelpers< ::capnp::Capability>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), cap);
}
inline void Value::Builder::adoptCap(
    ::capnp::Orphan< ::capnp::Capability>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::CAP);
  ::capnp::_::PointerHelpers< ::capnp::Capability>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Capability> Value::Builder::disownCap() {
  KJ_IREQUIRE((which() == Value::CAP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Capability>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

inline bool Value::Reader::isLf64() const {
  return which() == Value::LF64;
}
inline bool Value::Builder::isLf64() {
  return which() == Value::LF64;
}
inline bool Value::Reader::hasLf64() const {
  if (which() != Value::LF64) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLf64() {
  if (which() != Value::LF64) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLf64() const {
  KJ_IREQUIRE((which() == Value::LF64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLf64() {
  KJ_IREQUIRE((which() == Value::LF64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLf64( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF64);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLf64(::kj::ArrayPtr<const double> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF64);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLf64(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF64);
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLf64(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF64);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLf64() {
  KJ_IREQUIRE((which() == Value::LF64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLf32() const {
  return which() == Value::LF32;
}
inline bool Value::Builder::isLf32() {
  return which() == Value::LF32;
}
inline bool Value::Reader::hasLf32() const {
  if (which() != Value::LF32) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLf32() {
  if (which() != Value::LF32) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLf32() const {
  KJ_IREQUIRE((which() == Value::LF32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLf32() {
  KJ_IREQUIRE((which() == Value::LF32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLf32( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF32);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLf32(::kj::ArrayPtr<const float> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF32);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLf32(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF32);
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLf32(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LF32);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLf32() {
  KJ_IREQUIRE((which() == Value::LF32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLi64() const {
  return which() == Value::LI64;
}
inline bool Value::Builder::isLi64() {
  return which() == Value::LI64;
}
inline bool Value::Reader::hasLi64() const {
  if (which() != Value::LI64) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLi64() {
  if (which() != Value::LI64) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLi64() const {
  KJ_IREQUIRE((which() == Value::LI64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLi64() {
  KJ_IREQUIRE((which() == Value::LI64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLi64( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI64);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLi64(::kj::ArrayPtr<const  ::int64_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI64);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLi64(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI64);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLi64(
    ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI64);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLi64() {
  KJ_IREQUIRE((which() == Value::LI64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLi32() const {
  return which() == Value::LI32;
}
inline bool Value::Builder::isLi32() {
  return which() == Value::LI32;
}
inline bool Value::Reader::hasLi32() const {
  if (which() != Value::LI32) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLi32() {
  if (which() != Value::LI32) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLi32() const {
  KJ_IREQUIRE((which() == Value::LI32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLi32() {
  KJ_IREQUIRE((which() == Value::LI32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLi32( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI32);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLi32(::kj::ArrayPtr<const  ::int32_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI32);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLi32(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI32);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLi32(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI32);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLi32() {
  KJ_IREQUIRE((which() == Value::LI32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLi16() const {
  return which() == Value::LI16;
}
inline bool Value::Builder::isLi16() {
  return which() == Value::LI16;
}
inline bool Value::Reader::hasLi16() const {
  if (which() != Value::LI16) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLi16() {
  if (which() != Value::LI16) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLi16() const {
  KJ_IREQUIRE((which() == Value::LI16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLi16() {
  KJ_IREQUIRE((which() == Value::LI16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLi16( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI16);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLi16(::kj::ArrayPtr<const  ::int16_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI16);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLi16(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI16);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLi16(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI16);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLi16() {
  KJ_IREQUIRE((which() == Value::LI16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLi8() const {
  return which() == Value::LI8;
}
inline bool Value::Builder::isLi8() {
  return which() == Value::LI8;
}
inline bool Value::Reader::hasLi8() const {
  if (which() != Value::LI8) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLi8() {
  if (which() != Value::LI8) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLi8() const {
  KJ_IREQUIRE((which() == Value::LI8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLi8() {
  KJ_IREQUIRE((which() == Value::LI8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLi8( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI8);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLi8(::kj::ArrayPtr<const  ::int8_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI8);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLi8(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI8);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLi8(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LI8);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLi8() {
  KJ_IREQUIRE((which() == Value::LI8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLui64() const {
  return which() == Value::LUI64;
}
inline bool Value::Builder::isLui64() {
  return which() == Value::LUI64;
}
inline bool Value::Reader::hasLui64() const {
  if (which() != Value::LUI64) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLui64() {
  if (which() != Value::LUI64) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLui64() const {
  KJ_IREQUIRE((which() == Value::LUI64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLui64() {
  KJ_IREQUIRE((which() == Value::LUI64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLui64( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI64);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLui64(::kj::ArrayPtr<const  ::uint64_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI64);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLui64(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI64);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLui64(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI64);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLui64() {
  KJ_IREQUIRE((which() == Value::LUI64),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLui32() const {
  return which() == Value::LUI32;
}
inline bool Value::Builder::isLui32() {
  return which() == Value::LUI32;
}
inline bool Value::Reader::hasLui32() const {
  if (which() != Value::LUI32) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLui32() {
  if (which() != Value::LUI32) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLui32() const {
  KJ_IREQUIRE((which() == Value::LUI32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLui32() {
  KJ_IREQUIRE((which() == Value::LUI32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLui32( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI32);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLui32(::kj::ArrayPtr<const  ::uint32_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI32);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLui32(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI32);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLui32(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI32);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLui32() {
  KJ_IREQUIRE((which() == Value::LUI32),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLui16() const {
  return which() == Value::LUI16;
}
inline bool Value::Builder::isLui16() {
  return which() == Value::LUI16;
}
inline bool Value::Reader::hasLui16() const {
  if (which() != Value::LUI16) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLui16() {
  if (which() != Value::LUI16) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLui16() const {
  KJ_IREQUIRE((which() == Value::LUI16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLui16() {
  KJ_IREQUIRE((which() == Value::LUI16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLui16( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI16);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLui16(::kj::ArrayPtr<const  ::uint16_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI16);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLui16(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI16);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLui16(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI16);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLui16() {
  KJ_IREQUIRE((which() == Value::LUI16),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLui8() const {
  return which() == Value::LUI8;
}
inline bool Value::Builder::isLui8() {
  return which() == Value::LUI8;
}
inline bool Value::Reader::hasLui8() const {
  if (which() != Value::LUI8) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLui8() {
  if (which() != Value::LUI8) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLui8() const {
  KJ_IREQUIRE((which() == Value::LUI8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLui8() {
  KJ_IREQUIRE((which() == Value::LUI8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLui8( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI8);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLui8(::kj::ArrayPtr<const  ::uint8_t> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI8);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLui8(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI8);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLui8(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LUI8);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLui8() {
  KJ_IREQUIRE((which() == Value::LUI8),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLb() const {
  return which() == Value::LB;
}
inline bool Value::Builder::isLb() {
  return which() == Value::LB;
}
inline bool Value::Reader::hasLb() const {
  if (which() != Value::LB) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLb() {
  if (which() != Value::LB) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader Value::Reader::getLb() const {
  KJ_IREQUIRE((which() == Value::LB),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::getLb() {
  KJ_IREQUIRE((which() == Value::LB),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLb( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LB);
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLb(::kj::ArrayPtr<const bool> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LB);
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder Value::Builder::initLb(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LB);
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLb(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LB);
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> Value::Builder::disownLb() {
  KJ_IREQUIRE((which() == Value::LB),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLt() const {
  return which() == Value::LT;
}
inline bool Value::Builder::isLt() {
  return which() == Value::LT;
}
inline bool Value::Reader::hasLt() const {
  if (which() != Value::LT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLt() {
  if (which() != Value::LT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader Value::Reader::getLt() const {
  KJ_IREQUIRE((which() == Value::LT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Value::Builder::getLt() {
  KJ_IREQUIRE((which() == Value::LT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLt( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLt(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder Value::Builder::initLt(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LT);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLt(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LT);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> Value::Builder::disownLt() {
  KJ_IREQUIRE((which() == Value::LT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLd() const {
  return which() == Value::LD;
}
inline bool Value::Builder::isLd() {
  return which() == Value::LD;
}
inline bool Value::Reader::hasLd() const {
  if (which() != Value::LD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLd() {
  if (which() != Value::LD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader Value::Reader::getLd() const {
  KJ_IREQUIRE((which() == Value::LD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder Value::Builder::getLd() {
  KJ_IREQUIRE((which() == Value::LD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLd( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LD);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void Value::Builder::setLd(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LD);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder Value::Builder::initLd(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LD);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLd(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LD);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> Value::Builder::disownLd() {
  KJ_IREQUIRE((which() == Value::LD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Value::Reader::isLcap() const {
  return which() == Value::LCAP;
}
inline bool Value::Builder::isLcap() {
  return which() == Value::LCAP;
}
inline bool Value::Reader::hasLcap() const {
  if (which() != Value::LCAP) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Value::Builder::hasLcap() {
  if (which() != Value::LCAP) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
#if !CAPNP_LITE
inline  ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Reader Value::Reader::getLcap() const {
  KJ_IREQUIRE((which() == Value::LCAP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Builder Value::Builder::getLcap() {
  KJ_IREQUIRE((which() == Value::LCAP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Value::Builder::setLcap( ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Reader value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LCAP);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>::Builder Value::Builder::initLcap(unsigned int size) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LCAP);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Value::Builder::adoptLcap(
    ::capnp::Orphan< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>&& value) {
  _builder.setDataField<Value::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, Value::LCAP);
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>> Value::Builder::disownLcap() {
  KJ_IREQUIRE((which() == Value::LCAP),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Capability,  ::capnp::Kind::INTERFACE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#endif  // !CAPNP_LITE

template <typename F, typename S>
inline bool Pair<F, S>::Reader::hasFst() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename F, typename S>
inline bool Pair<F, S>::Builder::hasFst() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename F, typename S>
inline  ::capnp::ReaderFor<F> Pair<F, S>::Reader::getFst() const {
  return ::capnp::_::PointerHelpers<F>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename F, typename S>
inline  ::capnp::BuilderFor<F> Pair<F, S>::Builder::getFst() {
  return ::capnp::_::PointerHelpers<F>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename F, typename S>
inline  ::capnp::PipelineFor<F> Pair<F, S>::Pipeline::getFst() {
  return  ::capnp::PipelineFor<F>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename F, typename S>
inline void Pair<F, S>::Builder::setFst( ::capnp::ReaderFor<F> value) {
  ::capnp::_::PointerHelpers<F>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename F, typename S>
inline  ::capnp::BuilderFor<F> Pair<F, S>::Builder::initFst() {
  return ::capnp::_::PointerHelpers<F>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename F, typename S>
inline  ::capnp::BuilderFor<F> Pair<F, S>::Builder::initFst(unsigned int size) {
  return ::capnp::_::PointerHelpers<F>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename F, typename S>
inline void Pair<F, S>::Builder::adoptFst(
    ::capnp::Orphan<F>&& value) {
  ::capnp::_::PointerHelpers<F>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename F, typename S>
inline ::capnp::Orphan<F> Pair<F, S>::Builder::disownFst() {
  return ::capnp::_::PointerHelpers<F>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename F, typename S>
inline bool Pair<F, S>::Reader::hasSnd() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename F, typename S>
inline bool Pair<F, S>::Builder::hasSnd() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename F, typename S>
inline  ::capnp::ReaderFor<S> Pair<F, S>::Reader::getSnd() const {
  return ::capnp::_::PointerHelpers<S>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename F, typename S>
inline  ::capnp::BuilderFor<S> Pair<F, S>::Builder::getSnd() {
  return ::capnp::_::PointerHelpers<S>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename F, typename S>
inline  ::capnp::PipelineFor<S> Pair<F, S>::Pipeline::getSnd() {
  return  ::capnp::PipelineFor<S>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename F, typename S>
inline void Pair<F, S>::Builder::setSnd( ::capnp::ReaderFor<S> value) {
  ::capnp::_::PointerHelpers<S>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename F, typename S>
inline  ::capnp::BuilderFor<S> Pair<F, S>::Builder::initSnd() {
  return ::capnp::_::PointerHelpers<S>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename F, typename S>
inline  ::capnp::BuilderFor<S> Pair<F, S>::Builder::initSnd(unsigned int size) {
  return ::capnp::_::PointerHelpers<S>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename F, typename S>
inline void Pair<F, S>::Builder::adoptSnd(
    ::capnp::Orphan<S>&& value) {
  ::capnp::_::PointerHelpers<S>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename F, typename S>
inline ::capnp::Orphan<S> Pair<F, S>::Builder::disownSnd() {
  return ::capnp::_::PointerHelpers<S>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Pair<F, S>
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename F, typename S>
constexpr uint16_t Pair<F, S>::_capnpPrivate::dataWordSize;
template <typename F, typename S>
constexpr uint16_t Pair<F, S>::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename F, typename S>
constexpr ::capnp::Kind Pair<F, S>::_capnpPrivate::kind;
template <typename F, typename S>
constexpr ::capnp::_::RawSchema const* Pair<F, S>::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename F, typename S>
const ::capnp::_::RawBrandedSchema::Scope Pair<F, S>::_capnpPrivate::brandScopes[] = {
  { 0xb9d4864725174733, brandBindings + 0, 2, false},
};
template <typename F, typename S>
const ::capnp::_::RawBrandedSchema::Binding Pair<F, S>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<F>(),
  ::capnp::_::brandBindingFor<S>(),
};
template <typename F, typename S>
const ::capnp::_::RawBrandedSchema Pair<F, S>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_b9d4864725174733, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

