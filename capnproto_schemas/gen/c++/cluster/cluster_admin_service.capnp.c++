// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: cluster_admin_service.capnp

#include "cluster_admin_service.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<47> b_f7485d56d6f20e7d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
     28,   0,   0,   0,   1,   0,   0,   0,
    250, 208, 169, 109, 125, 178, 193, 243,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
     37,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,   0,   0,   0,   0,   0,
     28,   0,   0,   0,   1,   0,   1,   0,
    190,  27, 101, 146, 161, 247, 177, 232,
     49,   0,   0,   0,  90,   0,   0,   0,
    206,  51, 246, 101, 140,  39,  36, 191,
     49,   0,   0,   0,  98,   0,   0,   0,
     96,  75,  53,  40, 223, 198,  66, 236,
     49,   0,   0,   0,  90,   0,   0,   0,
    118,  71,  92, 234, 143, 132,  73, 248,
     49,   0,   0,   0,  66,   0,   0,   0,
    100,  42, 204, 190, 162,  75,   3, 201,
     45,   0,   0,   0, 170,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
     49,   0,   0,   0,  98,   0,   0,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
     49,   0,   0,   0, 170,   0,   0,   0,
     85, 110, 114, 101, 103, 105, 115, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
     65, 100, 109, 105, 110,  77,  97, 115,
    116, 101, 114,   0,   0,   0,   0,   0,
     85, 115, 101, 114,  77,  97, 115, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
     82, 117, 110, 116, 105, 109, 101,   0,
     90, 109, 113,  80, 105, 112, 101, 108,
    105, 110, 101,  65, 100, 100, 114, 101,
    115, 115, 101, 115,   0,   0,   0,   0,
     86,  97, 108, 117, 101,  72, 111, 108,
    100, 101, 114,   0,   0,   0,   0,   0,
     77, 111, 100, 101, 108,  73, 110, 115,
    116,  97, 110,  99, 101,  70,  97,  99,
    116, 111, 114, 121,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f7485d56d6f20e7d = b_f7485d56d6f20e7d.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f7485d56d6f20e7d = {
  0xf7485d56d6f20e7d, b_f7485d56d6f20e7d.words, 47, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f7485d56d6f20e7d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_e8b1f7a192651bbe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190,  27, 101, 146, 161, 247, 177, 232,
     36,   0,   0,   0,   3,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  85, 110, 114, 101,
    103, 105, 115, 116, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    163, 174, 247, 169,  50, 137, 183, 225,
    143,  51,  79, 113, 243, 110, 169, 187,
     17,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
    117, 110, 114, 101, 103, 105, 115, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e8b1f7a192651bbe = b_e8b1f7a192651bbe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8b1f7a192651bbe[] = {
  &s_bba96ef3714f338f,
  &s_e1b78932a9f7aea3,
};
static const uint16_t m_e8b1f7a192651bbe[] = {0};
const ::capnp::_::RawSchema s_e8b1f7a192651bbe = {
  0xe8b1f7a192651bbe, b_e8b1f7a192651bbe.words, 32, d_e8b1f7a192651bbe, m_e8b1f7a192651bbe,
  2, 1, nullptr, nullptr, nullptr, { &s_e8b1f7a192651bbe, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e1b78932a9f7aea3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    163, 174, 247, 169,  50, 137, 183, 225,
     47,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  85, 110, 114, 101,
    103, 105, 115, 116, 101, 114,  46, 117,
    110, 114, 101, 103, 105, 115, 116, 101,
    114,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e1b78932a9f7aea3 = b_e1b78932a9f7aea3.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e1b78932a9f7aea3 = {
  0xe1b78932a9f7aea3, b_e1b78932a9f7aea3.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e1b78932a9f7aea3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_bba96ef3714f338f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143,  51,  79, 113, 243, 110, 169, 187,
     47,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  85, 110, 114, 101,
    103, 105, 115, 116, 101, 114,  46, 117,
    110, 114, 101, 103, 105, 115, 116, 101,
    114,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 117,  99,  99, 101, 115, 115,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bba96ef3714f338f = b_bba96ef3714f338f.words;
#if !CAPNP_LITE
static const uint16_t m_bba96ef3714f338f[] = {0};
static const uint16_t i_bba96ef3714f338f[] = {0};
const ::capnp::_::RawSchema s_bba96ef3714f338f = {
  0xbba96ef3714f338f, b_bba96ef3714f338f.words, 37, nullptr, m_bba96ef3714f338f,
  0, 1, i_bba96ef3714f338f, nullptr, nullptr, { &s_bba96ef3714f338f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<47> b_bf24278c65f633ce = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    206,  51, 246, 101, 140,  39,  36, 191,
     36,   0,   0,   0,   3,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 135,   0,   0,   0,
    133,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  65, 100, 109, 105,
    110,  77,  97, 115, 116, 101, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16, 230,  77, 111, 238,  84,  59, 148,
    222, 227, 177, 226, 129,  79,  67, 231,
     49,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    142, 204, 166, 107, 101, 155, 102, 160,
    143,   0, 196, 167,   1, 206, 190, 212,
     37,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     77, 111, 100, 101, 108,  73, 110, 115,
    116,  97, 110,  99, 101,  70,  97,  99,
    116, 111, 114, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 111, 100, 101, 108, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bf24278c65f633ce = b_bf24278c65f633ce.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bf24278c65f633ce[] = {
  &s_943b54ee6f4de610,
  &s_a0669b656ba6cc8e,
  &s_b2afd1cb599c48d5,
  &s_d4bece01a7c4008f,
  &s_e7434f81e2b1e3de,
};
static const uint16_t m_bf24278c65f633ce[] = {1, 0};
const ::capnp::_::RawSchema s_bf24278c65f633ce = {
  0xbf24278c65f633ce, b_bf24278c65f633ce.words, 47, d_bf24278c65f633ce, m_bf24278c65f633ce,
  5, 2, nullptr, nullptr, nullptr, { &s_bf24278c65f633ce, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<56> b_943b54ee6f4de610 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     16, 230,  77, 111, 238,  84,  59, 148,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  65, 100, 109, 105,
    110,  77,  97, 115, 116, 101, 114,  46,
    114, 101, 103, 105, 115, 116, 101, 114,
     77, 111, 100, 101, 108,  73, 110, 115,
    116,  97, 110,  99, 101,  70,  97,  99,
    116, 111, 114, 121,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
     97,  77, 111, 100, 101, 108,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  70,  97,  99, 116, 111, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_943b54ee6f4de610 = b_943b54ee6f4de610.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_943b54ee6f4de610[] = {
  &s_fd9959998f9f0ebe,
};
static const uint16_t m_943b54ee6f4de610[] = {1, 0};
static const uint16_t i_943b54ee6f4de610[] = {0, 1};
const ::capnp::_::RawSchema s_943b54ee6f4de610 = {
  0x943b54ee6f4de610, b_943b54ee6f4de610.words, 56, d_943b54ee6f4de610, m_943b54ee6f4de610,
  1, 2, i_943b54ee6f4de610, nullptr, nullptr, { &s_943b54ee6f4de610, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_e7434f81e2b1e3de = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    222, 227, 177, 226, 129,  79,  67, 231,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  65, 100, 109, 105,
    110,  77,  97, 115, 116, 101, 114,  46,
    114, 101, 103, 105, 115, 116, 101, 114,
     77, 111, 100, 101, 108,  73, 110, 115,
    116,  97, 110,  99, 101,  70,  97,  99,
    116, 111, 114, 121,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 114, 101, 103, 105, 115, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  27, 101, 146, 161, 247, 177, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e7434f81e2b1e3de = b_e7434f81e2b1e3de.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e7434f81e2b1e3de[] = {
  &s_e8b1f7a192651bbe,
};
static const uint16_t m_e7434f81e2b1e3de[] = {0};
static const uint16_t i_e7434f81e2b1e3de[] = {0};
const ::capnp::_::RawSchema s_e7434f81e2b1e3de = {
  0xe7434f81e2b1e3de, b_e7434f81e2b1e3de.words, 40, d_e7434f81e2b1e3de, m_e7434f81e2b1e3de,
  1, 1, i_e7434f81e2b1e3de, nullptr, nullptr, { &s_e7434f81e2b1e3de, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_a0669b656ba6cc8e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    142, 204, 166, 107, 101, 155, 102, 160,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  65, 100, 109, 105,
    110,  77,  97, 115, 116, 101, 114,  46,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 111, 100, 101, 108, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_a0669b656ba6cc8e = b_a0669b656ba6cc8e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a0669b656ba6cc8e = {
  0xa0669b656ba6cc8e, b_a0669b656ba6cc8e.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a0669b656ba6cc8e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_d4bece01a7c4008f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    143,   0, 196, 167,   1, 206, 190, 212,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  65, 100, 109, 105,
    110,  77,  97, 115, 116, 101, 114,  46,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 111, 100, 101, 108, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    102,  97,  99, 116, 111, 114, 105, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4bece01a7c4008f = b_d4bece01a7c4008f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d4bece01a7c4008f[] = {
  &s_fd9959998f9f0ebe,
};
static const uint16_t m_d4bece01a7c4008f[] = {0};
static const uint16_t i_d4bece01a7c4008f[] = {0};
const ::capnp::_::RawSchema s_d4bece01a7c4008f = {
  0xd4bece01a7c4008f, b_d4bece01a7c4008f.words, 42, d_d4bece01a7c4008f, m_d4bece01a7c4008f,
  1, 1, i_d4bece01a7c4008f, nullptr, nullptr, { &s_d4bece01a7c4008f, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_ec42c6df28354b60 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     96,  75,  53,  40, 223, 198,  66, 236,
     36,   0,   0,   0,   3,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   0,   0,   0,
     81,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  85, 115, 101, 114,
     77,  97, 115, 116, 101, 114,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 224, 234, 133, 192, 239, 128, 154,
    218,  27,   8, 247, 251, 228,  71, 177,
     17,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   7,   0,   0,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 111, 100, 101, 108, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ec42c6df28354b60 = b_ec42c6df28354b60.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ec42c6df28354b60[] = {
  &s_9a80efc085eae065,
  &s_b147e4fbf7081bda,
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_ec42c6df28354b60[] = {0};
const ::capnp::_::RawSchema s_ec42c6df28354b60 = {
  0xec42c6df28354b60, b_ec42c6df28354b60.words, 34, d_ec42c6df28354b60, m_ec42c6df28354b60,
  3, 1, nullptr, nullptr, nullptr, { &s_ec42c6df28354b60, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_9a80efc085eae065 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 224, 234, 133, 192, 239, 128, 154,
     47,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  85, 115, 101, 114,
     77,  97, 115, 116, 101, 114,  46,  97,
    118,  97, 105, 108,  97,  98, 108, 101,
     77, 111, 100, 101, 108, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_9a80efc085eae065 = b_9a80efc085eae065.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9a80efc085eae065 = {
  0x9a80efc085eae065, b_9a80efc085eae065.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9a80efc085eae065, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_b147e4fbf7081bda = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218,  27,   8, 247, 251, 228,  71, 177,
     47,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  85, 115, 101, 114,
     77,  97, 115, 116, 101, 114,  46,  97,
    118,  97, 105, 108,  97,  98, 108, 101,
     77, 111, 100, 101, 108, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    102,  97,  99, 116, 111, 114, 105, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b147e4fbf7081bda = b_b147e4fbf7081bda.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b147e4fbf7081bda[] = {
  &s_fd9959998f9f0ebe,
};
static const uint16_t m_b147e4fbf7081bda[] = {0};
static const uint16_t i_b147e4fbf7081bda[] = {0};
const ::capnp::_::RawSchema s_b147e4fbf7081bda = {
  0xb147e4fbf7081bda, b_b147e4fbf7081bda.words, 42, d_b147e4fbf7081bda, m_b147e4fbf7081bda,
  1, 1, i_b147e4fbf7081bda, nullptr, nullptr, { &s_b147e4fbf7081bda, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<82> b_f849848fea5c4776 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    118,  71,  92, 234, 143, 132,  73, 248,
     36,   0,   0,   0,   3,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  71,   1,   0,   0,
     17,   1,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    136, 206,  70, 121, 143, 138, 102, 195,
    212,  75, 102, 136, 123, 171, 223, 168,
    145,   0,   0,   0, 234,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    145,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     26, 221,  26,  18, 190, 170,  53, 254,
     41, 205, 238, 182, 245, 179, 189, 147,
    133,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    125,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    108, 118,  84,  80,  12,  44,  61, 155,
    127,  13,  37, 154, 159,  88, 178, 230,
    113,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     78, 182, 137,  96, 255, 183,  36, 194,
    198, 114,  33,  48,  50, 174,   4, 240,
     93,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    233, 157,  17,  42,  48,  11, 208, 180,
    187,  76,  98, 234, 140, 221, 216, 188,
     77,   0,   0,   0, 170,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     77, 111, 100, 101, 108,  73, 110, 115,
    116,  97, 110,  99, 101,  70,  97,  99,
    116, 111, 114, 121,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     97, 118,  97, 105, 108,  97,  98, 108,
    101,  77, 111, 100, 101, 108, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    110, 117, 109,  98, 101, 114,  79, 102,
     67, 111, 114, 101, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    102, 114, 101, 101,  78, 117, 109,  98,
    101, 114,  79, 102,  67, 111, 114, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 115, 101, 114, 118, 101,  78,
    117, 109,  98, 101, 114,  79, 102,  67,
    111, 114, 101, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f849848fea5c4776 = b_f849848fea5c4776.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f849848fea5c4776[] = {
  &s_93bdb3f5b6eecd29,
  &s_9b3d2c0c5054766c,
  &s_a8dfab7b88664bd4,
  &s_b2afd1cb599c48d5,
  &s_b4d00b302a119de9,
  &s_bcd8dd8cea624cbb,
  &s_c224b7ff6089b64e,
  &s_c3668a8f7946ce88,
  &s_e6b2589f9a250d7f,
  &s_f004ae32302172c6,
  &s_fe35aabe121add1a,
};
static const uint16_t m_f849848fea5c4776[] = {1, 3, 2, 0, 4};
const ::capnp::_::RawSchema s_f849848fea5c4776 = {
  0xf849848fea5c4776, b_f849848fea5c4776.words, 82, d_f849848fea5c4776, m_f849848fea5c4776,
  11, 5, nullptr, nullptr, nullptr, { &s_f849848fea5c4776, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_c3668a8f7946ce88 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    136, 206,  70, 121, 143, 138, 102, 195,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 114, 101, 103, 105,
    115, 116, 101, 114,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
     97,  77, 111, 100, 101, 108,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  70,  97,  99, 116, 111, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c3668a8f7946ce88 = b_c3668a8f7946ce88.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c3668a8f7946ce88[] = {
  &s_fd9959998f9f0ebe,
};
static const uint16_t m_c3668a8f7946ce88[] = {1, 0};
static const uint16_t i_c3668a8f7946ce88[] = {0, 1};
const ::capnp::_::RawSchema s_c3668a8f7946ce88 = {
  0xc3668a8f7946ce88, b_c3668a8f7946ce88.words, 55, d_c3668a8f7946ce88, m_c3668a8f7946ce88,
  1, 2, i_c3668a8f7946ce88, nullptr, nullptr, { &s_c3668a8f7946ce88, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_a8dfab7b88664bd4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212,  75, 102, 136, 123, 171, 223, 168,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 114, 101, 103, 105,
    115, 116, 101, 114,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 114, 101, 103, 105, 115, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  27, 101, 146, 161, 247, 177, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8dfab7b88664bd4 = b_a8dfab7b88664bd4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a8dfab7b88664bd4[] = {
  &s_e8b1f7a192651bbe,
};
static const uint16_t m_a8dfab7b88664bd4[] = {0};
static const uint16_t i_a8dfab7b88664bd4[] = {0};
const ::capnp::_::RawSchema s_a8dfab7b88664bd4 = {
  0xa8dfab7b88664bd4, b_a8dfab7b88664bd4.words, 40, d_a8dfab7b88664bd4, m_a8dfab7b88664bd4,
  1, 1, i_a8dfab7b88664bd4, nullptr, nullptr, { &s_a8dfab7b88664bd4, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_fe35aabe121add1a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     26, 221,  26,  18, 190, 170,  53, 254,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46,  97, 118,  97, 105,
    108,  97,  98, 108, 101,  77, 111, 100,
    101, 108, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fe35aabe121add1a = b_fe35aabe121add1a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_fe35aabe121add1a = {
  0xfe35aabe121add1a, b_fe35aabe121add1a.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_fe35aabe121add1a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_93bdb3f5b6eecd29 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     41, 205, 238, 182, 245, 179, 189, 147,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46,  97, 118,  97, 105,
    108,  97,  98, 108, 101,  77, 111, 100,
    101, 108, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    102,  97,  99, 116, 111, 114, 105, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_93bdb3f5b6eecd29 = b_93bdb3f5b6eecd29.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_93bdb3f5b6eecd29[] = {
  &s_fd9959998f9f0ebe,
};
static const uint16_t m_93bdb3f5b6eecd29[] = {0};
static const uint16_t i_93bdb3f5b6eecd29[] = {0};
const ::capnp::_::RawSchema s_93bdb3f5b6eecd29 = {
  0x93bdb3f5b6eecd29, b_93bdb3f5b6eecd29.words, 42, d_93bdb3f5b6eecd29, m_93bdb3f5b6eecd29,
  1, 1, i_93bdb3f5b6eecd29, nullptr, nullptr, { &s_93bdb3f5b6eecd29, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_9b3d2c0c5054766c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    108, 118,  84,  80,  12,  44,  61, 155,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 110, 117, 109,  98,
    101, 114,  79, 102,  67, 111, 114, 101,
    115,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9b3d2c0c5054766c = b_9b3d2c0c5054766c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9b3d2c0c5054766c = {
  0x9b3d2c0c5054766c, b_9b3d2c0c5054766c.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9b3d2c0c5054766c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_e6b2589f9a250d7f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127,  13,  37, 154, 159,  88, 178, 230,
     44,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 110, 117, 109,  98,
    101, 114,  79, 102,  67, 111, 114, 101,
    115,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 114, 101, 115,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e6b2589f9a250d7f = b_e6b2589f9a250d7f.words;
#if !CAPNP_LITE
static const uint16_t m_e6b2589f9a250d7f[] = {0};
static const uint16_t i_e6b2589f9a250d7f[] = {0};
const ::capnp::_::RawSchema s_e6b2589f9a250d7f = {
  0xe6b2589f9a250d7f, b_e6b2589f9a250d7f.words, 37, nullptr, m_e6b2589f9a250d7f,
  0, 1, i_e6b2589f9a250d7f, nullptr, nullptr, { &s_e6b2589f9a250d7f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_c224b7ff6089b64e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     78, 182, 137,  96, 255, 183,  36, 194,
     44,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 102, 114, 101, 101,
     78, 117, 109,  98, 101, 114,  79, 102,
     67, 111, 114, 101, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c224b7ff6089b64e = b_c224b7ff6089b64e.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c224b7ff6089b64e = {
  0xc224b7ff6089b64e, b_c224b7ff6089b64e.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c224b7ff6089b64e, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_f004ae32302172c6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198, 114,  33,  48,  50, 174,   4, 240,
     44,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 102, 114, 101, 101,
     78, 117, 109,  98, 101, 114,  79, 102,
     67, 111, 114, 101, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99, 111, 114, 101, 115,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f004ae32302172c6 = b_f004ae32302172c6.words;
#if !CAPNP_LITE
static const uint16_t m_f004ae32302172c6[] = {0};
static const uint16_t i_f004ae32302172c6[] = {0};
const ::capnp::_::RawSchema s_f004ae32302172c6 = {
  0xf004ae32302172c6, b_f004ae32302172c6.words, 37, nullptr, m_f004ae32302172c6,
  0, 1, i_f004ae32302172c6, nullptr, nullptr, { &s_f004ae32302172c6, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_b4d00b302a119de9 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    233, 157,  17,  42,  48,  11, 208, 180,
     44,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 114, 101, 115, 101,
    114, 118, 101,  78, 117, 109,  98, 101,
    114,  79, 102,  67, 111, 114, 101, 115,
     36,  80,  97, 114,  97, 109, 115,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 101, 114, 118, 101,  67,
    111, 114, 101, 115,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,  77, 111, 100, 101, 108,  73, 100,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4d00b302a119de9 = b_b4d00b302a119de9.words;
#if !CAPNP_LITE
static const uint16_t m_b4d00b302a119de9[] = {1, 0};
static const uint16_t i_b4d00b302a119de9[] = {0, 1};
const ::capnp::_::RawSchema s_b4d00b302a119de9 = {
  0xb4d00b302a119de9, b_b4d00b302a119de9.words, 54, nullptr, m_b4d00b302a119de9,
  0, 2, i_b4d00b302a119de9, nullptr, nullptr, { &s_b4d00b302a119de9, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_bcd8dd8cea624cbb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    187,  76,  98, 234, 140, 221, 216, 188,
     44,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  82, 117, 110, 116,
    105, 109, 101,  46, 114, 101, 115, 101,
    114, 118, 101,  78, 117, 109,  98, 101,
    114,  79, 102,  67, 111, 114, 101, 115,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 114,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    114, 101, 115, 101, 114, 118, 101, 100,
     67, 111, 114, 101, 115,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bcd8dd8cea624cbb = b_bcd8dd8cea624cbb.words;
#if !CAPNP_LITE
static const uint16_t m_bcd8dd8cea624cbb[] = {0};
static const uint16_t i_bcd8dd8cea624cbb[] = {0};
const ::capnp::_::RawSchema s_bcd8dd8cea624cbb = {
  0xbcd8dd8cea624cbb, b_bcd8dd8cea624cbb.words, 39, nullptr, m_bcd8dd8cea624cbb,
  0, 1, i_bcd8dd8cea624cbb, nullptr, nullptr, { &s_bcd8dd8cea624cbb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_c9034ba2becc2a64 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    100,  42, 204, 190, 162,  75,   3, 201,
     36,   0,   0,   0,   1,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  90, 109, 113,  80,
    105, 112, 101, 108, 105, 110, 101,  65,
    100, 100, 114, 101, 115, 115, 101, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 112, 117, 116,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    111, 117, 116, 112, 117, 116,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c9034ba2becc2a64 = b_c9034ba2becc2a64.words;
#if !CAPNP_LITE
static const uint16_t m_c9034ba2becc2a64[] = {0, 1};
static const uint16_t i_c9034ba2becc2a64[] = {0, 1};
const ::capnp::_::RawSchema s_c9034ba2becc2a64 = {
  0xc9034ba2becc2a64, b_c9034ba2becc2a64.words, 52, nullptr, m_c9034ba2becc2a64,
  0, 2, i_c9034ba2becc2a64, nullptr, nullptr, { &s_c9034ba2becc2a64, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<74> b_d6acf080dcf2b4c8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
     36,   0,   0,   0,   3,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 135,   0,   0,   0,
    237,   0,   0,   0,   7,   0,   0,   0,
    237,   0,   0,   0,  15,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  86,  97, 108, 117,
    101,  72, 111, 108, 100, 101, 114,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     79, 232,   1, 202, 156,  86, 166, 139,
    108, 218, 241, 120, 247, 137,  94, 129,
     49,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   1,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    150, 136,  39,  10, 176, 200, 103, 169,
    197, 224,  59,  89,  24, 154, 189, 221,
     65,   0,   0,   0,  66,   0,   0,   0,
     65,   0,   0,   0,  31,   0,   0,   0,
    100,   0,   0,   0,   0,   0,   1,   0,
    116,   0,   0,   0,   0,   0,   1,   0,
    133,   0,   0,   0,   7,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 108, 101,  97, 115, 101,   0,
      4,   0,   0,   0,   1,   0,   2,   0,
    241, 141,  47,  23,  18,  96, 185, 194,
      4,   0,   0,   0,   2,   0,   1,   0,
     20,   0,   0,   0,   0,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0, 106,   0,   0,   0,
    114, 101, 108, 101,  97, 115, 101,  86,
     97, 108, 117, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  18,   0,   0,   0,
     84,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d6acf080dcf2b4c8 = b_d6acf080dcf2b4c8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d6acf080dcf2b4c8[] = {
  &s_815e89f778f1da6c,
  &s_8ba6569cca01e84f,
  &s_a967c8b00a278896,
  &s_ddbd9a18593be0c5,
};
static const uint16_t m_d6acf080dcf2b4c8[] = {1, 0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_d6acf080dcf2b4c8[] = {
  { 33554432,  ::mas::schema::cluster::Cluster::ValueHolder< ::capnp::AnyPointer>::ValueParams::_capnpPrivate::brand() },
  { 33554433,  ::mas::schema::cluster::Cluster::ValueHolder< ::capnp::AnyPointer>::ReleaseParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::cluster::Cluster::ValueHolder< ::capnp::AnyPointer>::ValueResults::_capnpPrivate::brand() },
  { 50331649,  ::mas::schema::cluster::Cluster::ValueHolder< ::capnp::AnyPointer>::ReleaseResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_d6acf080dcf2b4c8 = {
  0xd6acf080dcf2b4c8, b_d6acf080dcf2b4c8.words, 74, d_d6acf080dcf2b4c8, m_d6acf080dcf2b4c8,
  4, 2, nullptr, nullptr, nullptr, { &s_d6acf080dcf2b4c8, nullptr, bd_d6acf080dcf2b4c8, 0, sizeof(bd_d6acf080dcf2b4c8) / sizeof(bd_d6acf080dcf2b4c8[0]), nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_8ba6569cca01e84f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     79, 232,   1, 202, 156,  86, 166, 139,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 234,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  86,  97, 108, 117,
    101,  72, 111, 108, 100, 101, 114,  46,
    118,  97, 108, 117, 101,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8ba6569cca01e84f = b_8ba6569cca01e84f.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8ba6569cca01e84f = {
  0x8ba6569cca01e84f, b_8ba6569cca01e84f.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8ba6569cca01e84f, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_815e89f778f1da6c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    108, 218, 241, 120, 247, 137,  94, 129,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 242,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  86,  97, 108, 117,
    101,  72, 111, 108, 100, 101, 114,  46,
    118,  97, 108, 117, 101,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_815e89f778f1da6c = b_815e89f778f1da6c.words;
#if !CAPNP_LITE
static const uint16_t m_815e89f778f1da6c[] = {0};
static const uint16_t i_815e89f778f1da6c[] = {0};
const ::capnp::_::RawSchema s_815e89f778f1da6c = {
  0x815e89f778f1da6c, b_815e89f778f1da6c.words, 36, nullptr, m_815e89f778f1da6c,
  0, 1, i_815e89f778f1da6c, nullptr, nullptr, { &s_815e89f778f1da6c, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_a967c8b00a278896 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150, 136,  39,  10, 176, 200, 103, 169,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 250,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  86,  97, 108, 117,
    101,  72, 111, 108, 100, 101, 114,  46,
    114, 101, 108, 101,  97, 115, 101,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_a967c8b00a278896 = b_a967c8b00a278896.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a967c8b00a278896 = {
  0xa967c8b00a278896, b_a967c8b00a278896.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a967c8b00a278896, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_ddbd9a18593be0c5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    197, 224,  59,  89,  24, 154, 189, 221,
     48,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,   2,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  86,  97, 108, 117,
    101,  72, 111, 108, 100, 101, 114,  46,
    114, 101, 108, 101,  97, 115, 101,  36,
     82, 101, 115, 117, 108, 116, 115,   0, }
};
::capnp::word const* const bp_ddbd9a18593be0c5 = b_ddbd9a18593be0c5.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ddbd9a18593be0c5 = {
  0xddbd9a18593be0c5, b_ddbd9a18593be0c5.words, 20, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ddbd9a18593be0c5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<106> b_fd9959998f9f0ebe = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    190,  14, 159, 143, 153,  89, 153, 253,
     36,   0,   0,   0,   3,   0,   0,   0,
    125,  14, 242, 214,  86,  93,  72, 247,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 202,   1,   0,   0,
     49,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 199,   1,   0,   0,
    113,   1,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     28,   0,   0,   0,   3,   0,   5,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    116,  18, 241, 210, 100,  18, 248, 139,
     28, 132,  95,  81, 220, 177, 104, 244,
    209,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    201,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      4, 226, 215, 226, 162, 131,  93, 152,
    147, 161,  13, 231, 221, 246, 172, 188,
    189,   0,   0,   0, 106,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     22, 195,  87, 207,  81, 130,  93, 139,
     92, 153,  77,  29, 198,  83,  16, 168,
    169,   0,   0,   0, 242,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    169,   0,   0,   0,   7,   0,   0,   0,
      5,   0,   0,   0,   0,   0,   0,   0,
     33, 118, 182, 152, 249, 195, 164, 254,
     25,  48, 103, 245, 161, 121, 249, 186,
    157,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    153,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    216, 116, 196, 251,  43, 234, 182, 228,
    218, 230,   3, 231,  64,  90, 207, 227,
    141,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    129,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    196,   1, 193, 135,  68,  29, 164, 190,
      8,  95, 110, 193, 164, 178, 143, 202,
    117,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,   7,   0,   0,   0,
      6,   0,   0,   0,   0,   0,   0,   0,
    125, 188, 226, 204, 120,  63, 138, 216,
    253,  92,  44,  70, 240, 251, 205, 229,
    101,   0,   0,   0, 138,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,   7,   0,   0,   0,
    110, 101, 119,  73, 110, 115, 116,  97,
    110,  99, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    110, 101, 119,  73, 110, 115, 116,  97,
    110,  99, 101, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    110, 101, 119,  67, 108, 111, 117, 100,
     86, 105,  97,  90, 109, 113,  80, 105,
    112, 101, 108, 105, 110, 101,  80, 114,
    111, 120, 105, 101, 115,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    110, 101, 119,  67, 108, 111, 117, 100,
     86, 105,  97,  80, 114, 111, 120, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    109, 111, 100, 101, 108,  73, 100,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 103, 105, 115, 116, 101, 114,
     77, 111, 100, 101, 108,  73, 110, 115,
    116,  97, 110,  99, 101,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    114, 101, 115, 116, 111, 114, 101,  83,
    116, 117, 114, 100, 121,  82, 101, 102,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fd9959998f9f0ebe = b_fd9959998f9f0ebe.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fd9959998f9f0ebe[] = {
  &s_8b5d8251cf57c316,
  &s_8bf81264d2f11274,
  &s_985d83a2e2d7e204,
  &s_a81053c61d4d995c,
  &s_b2afd1cb599c48d5,
  &s_baf979a1f5673019,
  &s_bcacf6dde70da193,
  &s_bea41d4487c101c4,
  &s_ca8fb2a4c16e5f08,
  &s_d88a3f78cce2bc7d,
  &s_e3cf5a40e703e6da,
  &s_e4b6ea2bfbc474d8,
  &s_e5cdfbf0462c5cfd,
  &s_f468b1dc515f841c,
  &s_fea4c3f998b67621,
};
static const uint16_t m_fd9959998f9f0ebe[] = {4, 3, 2, 0, 1, 5, 6};
const ::capnp::_::RawSchema s_fd9959998f9f0ebe = {
  0xfd9959998f9f0ebe, b_fd9959998f9f0ebe.words, 106, d_fd9959998f9f0ebe, m_fd9959998f9f0ebe,
  15, 7, nullptr, nullptr, nullptr, { &s_fd9959998f9f0ebe, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<22> b_8bf81264d2f11274 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    116,  18, 241, 210, 100,  18, 248, 139,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  73, 110, 115, 116,
     97, 110,  99, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8bf81264d2f11274 = b_8bf81264d2f11274.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_8bf81264d2f11274 = {
  0x8bf81264d2f11274, b_8bf81264d2f11274.words, 22, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_8bf81264d2f11274, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_f468b1dc515f841c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     28, 132,  95,  81, 220, 177, 104, 244,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  73, 110, 115, 116,
     97, 110,  99, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f468b1dc515f841c = b_f468b1dc515f841c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f468b1dc515f841c[] = {
  &s_d6acf080dcf2b4c8,
};
static const uint16_t m_f468b1dc515f841c[] = {0};
static const uint16_t i_f468b1dc515f841c[] = {0};
const ::capnp::_::RawSchema s_f468b1dc515f841c = {
  0xf468b1dc515f841c, b_f468b1dc515f841c.words, 39, d_f468b1dc515f841c, m_f468b1dc515f841c,
  1, 1, i_f468b1dc515f841c, nullptr, nullptr, { &s_f468b1dc515f841c, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_985d83a2e2d7e204 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      4, 226, 215, 226, 162, 131,  93, 152,
     57,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  73, 110, 115, 116,
     97, 110,  99, 101, 115,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     28,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,  79, 102,
     73, 110, 115, 116,  97, 110,  99, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_985d83a2e2d7e204 = b_985d83a2e2d7e204.words;
#if !CAPNP_LITE
static const uint16_t m_985d83a2e2d7e204[] = {0};
static const uint16_t i_985d83a2e2d7e204[] = {0};
const ::capnp::_::RawSchema s_985d83a2e2d7e204 = {
  0x985d83a2e2d7e204, b_985d83a2e2d7e204.words, 40, nullptr, m_985d83a2e2d7e204,
  0, 1, i_985d83a2e2d7e204, nullptr, nullptr, { &s_985d83a2e2d7e204, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_bcacf6dde70da193 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    147, 161,  13, 231, 221, 246, 172, 188,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  73, 110, 115, 116,
     97, 110,  99, 101, 115,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bcacf6dde70da193 = b_bcacf6dde70da193.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bcacf6dde70da193[] = {
  &s_d6acf080dcf2b4c8,
};
static const uint16_t m_bcacf6dde70da193[] = {0};
static const uint16_t i_bcacf6dde70da193[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_bcacf6dde70da193[] = {
  { 16777216,  ::mas::schema::cluster::Cluster::ValueHolder< ::capnp::List< ::mas::schema::cluster::Cluster::ValueHolder< ::capnp::AnyPointer>,  ::capnp::Kind::INTERFACE>>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_bcacf6dde70da193 = {
  0xbcacf6dde70da193, b_bcacf6dde70da193.words, 55, d_bcacf6dde70da193, m_bcacf6dde70da193,
  1, 1, i_bcacf6dde70da193, nullptr, nullptr, { &s_bcacf6dde70da193, nullptr, bd_bcacf6dde70da193, 0, sizeof(bd_bcacf6dde70da193) / sizeof(bd_bcacf6dde70da193[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_8b5d8251cf57c316 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     22, 195,  87, 207,  81, 130,  93, 139,
     57,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  67, 108, 111, 117,
    100,  86, 105,  97,  90, 109, 113,  80,
    105, 112, 101, 108, 105, 110, 101,  80,
    114, 111, 120, 105, 101, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     28,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,  79, 102,
     73, 110, 115, 116,  97, 110,  99, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8b5d8251cf57c316 = b_8b5d8251cf57c316.words;
#if !CAPNP_LITE
static const uint16_t m_8b5d8251cf57c316[] = {0};
static const uint16_t i_8b5d8251cf57c316[] = {0};
const ::capnp::_::RawSchema s_8b5d8251cf57c316 = {
  0x8b5d8251cf57c316, b_8b5d8251cf57c316.words, 42, nullptr, m_8b5d8251cf57c316,
  0, 1, i_8b5d8251cf57c316, nullptr, nullptr, { &s_8b5d8251cf57c316, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<53> b_a81053c61d4d995c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     92, 153,  77,  29, 198,  83,  16, 168,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  67, 108, 111, 117,
    100,  86, 105,  97,  90, 109, 113,  80,
    105, 112, 101, 108, 105, 110, 101,  80,
    114, 111, 120, 105, 101, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 120, 121,  65, 100, 100,
    114, 101, 115, 115, 101, 115,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  23,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    100,  42, 204, 190, 162,  75,   3, 201,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a81053c61d4d995c = b_a81053c61d4d995c.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a81053c61d4d995c[] = {
  &s_d6acf080dcf2b4c8,
};
static const uint16_t m_a81053c61d4d995c[] = {0};
static const uint16_t i_a81053c61d4d995c[] = {0};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_a81053c61d4d995c[] = {
  { 16777216,  ::mas::schema::cluster::Cluster::ValueHolder< ::mas::schema::cluster::Cluster::ZmqPipelineAddresses>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_a81053c61d4d995c = {
  0xa81053c61d4d995c, b_a81053c61d4d995c.words, 53, d_a81053c61d4d995c, m_a81053c61d4d995c,
  1, 1, i_a81053c61d4d995c, nullptr, nullptr, { &s_a81053c61d4d995c, nullptr, bd_a81053c61d4d995c, 0, sizeof(bd_a81053c61d4d995c) / sizeof(bd_a81053c61d4d995c[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<41> b_fea4c3f998b67621 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     33, 118, 182, 152, 249, 195, 164, 254,
     57,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  67, 108, 111, 117,
    100,  86, 105,  97,  80, 114, 111, 120,
    121,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     28,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  98, 101, 114,  79, 102,
     73, 110, 115, 116,  97, 110,  99, 101,
    115,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fea4c3f998b67621 = b_fea4c3f998b67621.words;
#if !CAPNP_LITE
static const uint16_t m_fea4c3f998b67621[] = {0};
static const uint16_t i_fea4c3f998b67621[] = {0};
const ::capnp::_::RawSchema s_fea4c3f998b67621 = {
  0xfea4c3f998b67621, b_fea4c3f998b67621.words, 41, nullptr, m_fea4c3f998b67621,
  0, 1, i_fea4c3f998b67621, nullptr, nullptr, { &s_fea4c3f998b67621, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_baf979a1f5673019 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     25,  48, 103, 245, 161, 121, 249, 186,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 110, 101, 119,  67, 108, 111, 117,
    100,  86, 105,  97,  80, 114, 111, 120,
    121,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 111, 120, 121,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_baf979a1f5673019 = b_baf979a1f5673019.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_baf979a1f5673019[] = {
  &s_d6acf080dcf2b4c8,
};
static const uint16_t m_baf979a1f5673019[] = {0};
static const uint16_t i_baf979a1f5673019[] = {0};
const ::capnp::_::RawSchema s_baf979a1f5673019 = {
  0xbaf979a1f5673019, b_baf979a1f5673019.words, 39, d_baf979a1f5673019, m_baf979a1f5673019,
  1, 1, i_baf979a1f5673019, nullptr, nullptr, { &s_baf979a1f5673019, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<21> b_e4b6ea2bfbc474d8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    216, 116, 196, 251,  43, 234, 182, 228,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 109, 111, 100, 101, 108,  73, 100,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_e4b6ea2bfbc474d8 = b_e4b6ea2bfbc474d8.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e4b6ea2bfbc474d8 = {
  0xe4b6ea2bfbc474d8, b_e4b6ea2bfbc474d8.words, 21, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e4b6ea2bfbc474d8, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_e3cf5a40e703e6da = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    218, 230,   3, 231,  64,  90, 207, 227,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 109, 111, 100, 101, 108,  73, 100,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e3cf5a40e703e6da = b_e3cf5a40e703e6da.words;
#if !CAPNP_LITE
static const uint16_t m_e3cf5a40e703e6da[] = {0};
static const uint16_t i_e3cf5a40e703e6da[] = {0};
const ::capnp::_::RawSchema s_e3cf5a40e703e6da = {
  0xe3cf5a40e703e6da, b_e3cf5a40e703e6da.words, 38, nullptr, m_e3cf5a40e703e6da,
  0, 1, i_e3cf5a40e703e6da, nullptr, nullptr, { &s_e3cf5a40e703e6da, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<58> b_bea41d4487c101c4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196,   1, 193, 135,  68,  29, 164, 190,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 178,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 114, 101, 103, 105, 115, 116, 101,
    114,  77, 111, 100, 101, 108,  73, 110,
    115, 116,  97, 110,  99, 101,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 115, 116,  97, 110,  99, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 101, 103, 105, 115, 116, 114,  97,
    116, 105, 111, 110,  84, 111, 107, 101,
    110,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  10,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bea41d4487c101c4 = b_bea41d4487c101c4.words;
#if !CAPNP_LITE
static const uint16_t m_bea41d4487c101c4[] = {0, 1};
static const uint16_t i_bea41d4487c101c4[] = {0, 1};
const ::capnp::_::RawSchema s_bea41d4487c101c4 = {
  0xbea41d4487c101c4, b_bea41d4487c101c4.words, 58, nullptr, m_bea41d4487c101c4,
  0, 2, i_bea41d4487c101c4, nullptr, nullptr, { &s_bea41d4487c101c4, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_ca8fb2a4c16e5f08 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      8,  95, 110, 193, 164, 178, 143, 202,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 114, 101, 103, 105, 115, 116, 101,
    114,  77, 111, 100, 101, 108,  73, 110,
    115, 116,  97, 110,  99, 101,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 114, 101, 103, 105, 115, 116,
    101, 114,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    190,  27, 101, 146, 161, 247, 177, 232,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ca8fb2a4c16e5f08 = b_ca8fb2a4c16e5f08.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ca8fb2a4c16e5f08[] = {
  &s_e8b1f7a192651bbe,
};
static const uint16_t m_ca8fb2a4c16e5f08[] = {0};
static const uint16_t i_ca8fb2a4c16e5f08[] = {0};
const ::capnp::_::RawSchema s_ca8fb2a4c16e5f08 = {
  0xca8fb2a4c16e5f08, b_ca8fb2a4c16e5f08.words, 40, d_ca8fb2a4c16e5f08, m_ca8fb2a4c16e5f08,
  1, 1, i_ca8fb2a4c16e5f08, nullptr, nullptr, { &s_ca8fb2a4c16e5f08, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<40> b_d88a3f78cce2bc7d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    125, 188, 226, 204, 120,  63, 138, 216,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 114, 101, 115, 116, 111, 114, 101,
     83, 116, 117, 114, 100, 121,  82, 101,
    102,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    115, 116, 117, 114, 100, 121,  82, 101,
    102,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d88a3f78cce2bc7d = b_d88a3f78cce2bc7d.words;
#if !CAPNP_LITE
static const uint16_t m_d88a3f78cce2bc7d[] = {0};
static const uint16_t i_d88a3f78cce2bc7d[] = {0};
const ::capnp::_::RawSchema s_d88a3f78cce2bc7d = {
  0xd88a3f78cce2bc7d, b_d88a3f78cce2bc7d.words, 40, nullptr, m_d88a3f78cce2bc7d,
  0, 1, i_d88a3f78cce2bc7d, nullptr, nullptr, { &s_d88a3f78cce2bc7d, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_e5cdfbf0462c5cfd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    253,  92,  44,  70, 240, 251, 205, 229,
     57,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   2,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 108, 117, 115, 116, 101, 114,  95,
     97, 100, 109, 105, 110,  95, 115, 101,
    114, 118, 105,  99, 101,  46,  99,  97,
    112, 110, 112,  58,  67, 108, 117, 115,
    116, 101, 114,  46,  77, 111, 100, 101,
    108,  73, 110, 115, 116,  97, 110,  99,
    101,  70,  97,  99, 116, 111, 114, 121,
     46, 114, 101, 115, 116, 111, 114, 101,
     83, 116, 117, 114, 100, 121,  82, 101,
    102,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    200, 180, 242, 220, 128, 240, 172, 214,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e5cdfbf0462c5cfd = b_e5cdfbf0462c5cfd.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e5cdfbf0462c5cfd[] = {
  &s_d6acf080dcf2b4c8,
};
static const uint16_t m_e5cdfbf0462c5cfd[] = {0};
static const uint16_t i_e5cdfbf0462c5cfd[] = {0};
const ::capnp::_::RawSchema s_e5cdfbf0462c5cfd = {
  0xe5cdfbf0462c5cfd, b_e5cdfbf0462c5cfd.words, 39, d_e5cdfbf0462c5cfd, m_e5cdfbf0462c5cfd,
  1, 1, i_e5cdfbf0462c5cfd, nullptr, nullptr, { &s_e5cdfbf0462c5cfd, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace cluster {

// Cluster
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::cluster::Cluster::Unregister::UnregisterParams,  ::mas::schema::cluster::Cluster::Unregister::UnregisterResults>
Cluster::Unregister::Client::unregisterRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::Unregister::UnregisterParams,  ::mas::schema::cluster::Cluster::Unregister::UnregisterResults>(
      0xe8b1f7a192651bbeull, 0, sizeHint, {true});
}
::kj::Promise<void> Cluster::Unregister::Server::unregister(UnregisterContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.Unregister", "unregister",
      0xe8b1f7a192651bbeull, 0);
}
::capnp::Capability::Server::DispatchCallResult Cluster::Unregister::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe8b1f7a192651bbeull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cluster_admin_service.capnp:Cluster.Unregister", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Cluster::Unregister::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        unregister(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::Unregister::UnregisterParams,  ::mas::schema::cluster::Cluster::Unregister::UnregisterResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cluster_admin_service.capnp:Cluster.Unregister",
          0xe8b1f7a192651bbeull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Cluster::Unregister
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Unregister::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Unregister::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Unregister::UnregisterParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Unregister::UnregisterParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Unregister::UnregisterParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Unregister::UnregisterParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Unregister::UnregisterParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Unregister::UnregisterResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Unregister::UnregisterResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Unregister::UnregisterResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Unregister::UnregisterResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Unregister::UnregisterResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::cluster::Cluster::AdminMaster::RegisterModelInstanceFactoryParams,  ::mas::schema::cluster::Cluster::AdminMaster::RegisterModelInstanceFactoryResults>
Cluster::AdminMaster::Client::registerModelInstanceFactoryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::AdminMaster::RegisterModelInstanceFactoryParams,  ::mas::schema::cluster::Cluster::AdminMaster::RegisterModelInstanceFactoryResults>(
      0xbf24278c65f633ceull, 0, sizeHint, {false});
}
::kj::Promise<void> Cluster::AdminMaster::Server::registerModelInstanceFactory(RegisterModelInstanceFactoryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.AdminMaster", "registerModelInstanceFactory",
      0xbf24278c65f633ceull, 0);
}
::capnp::Request< ::mas::schema::cluster::Cluster::AdminMaster::AvailableModelsParams,  ::mas::schema::cluster::Cluster::AdminMaster::AvailableModelsResults>
Cluster::AdminMaster::Client::availableModelsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::AdminMaster::AvailableModelsParams,  ::mas::schema::cluster::Cluster::AdminMaster::AvailableModelsResults>(
      0xbf24278c65f633ceull, 1, sizeHint, {false});
}
::kj::Promise<void> Cluster::AdminMaster::Server::availableModels(AvailableModelsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.AdminMaster", "availableModels",
      0xbf24278c65f633ceull, 1);
}
::capnp::Capability::Server::DispatchCallResult Cluster::AdminMaster::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xbf24278c65f633ceull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cluster_admin_service.capnp:Cluster.AdminMaster", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Cluster::AdminMaster::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        registerModelInstanceFactory(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::AdminMaster::RegisterModelInstanceFactoryParams,  ::mas::schema::cluster::Cluster::AdminMaster::RegisterModelInstanceFactoryResults>(context)),
        false,
        false
      };
    case 1:
      return {
        availableModels(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::AdminMaster::AvailableModelsParams,  ::mas::schema::cluster::Cluster::AdminMaster::AvailableModelsResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cluster_admin_service.capnp:Cluster.AdminMaster",
          0xbf24278c65f633ceull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Cluster::AdminMaster
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::AdminMaster::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::AdminMaster::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::AdminMaster::RegisterModelInstanceFactoryParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::AdminMaster::RegisterModelInstanceFactoryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::AdminMaster::RegisterModelInstanceFactoryParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::AdminMaster::RegisterModelInstanceFactoryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::AdminMaster::RegisterModelInstanceFactoryParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::AdminMaster::RegisterModelInstanceFactoryResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::AdminMaster::RegisterModelInstanceFactoryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::AdminMaster::RegisterModelInstanceFactoryResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::AdminMaster::RegisterModelInstanceFactoryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::AdminMaster::RegisterModelInstanceFactoryResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::AdminMaster::AvailableModelsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::AdminMaster::AvailableModelsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::AdminMaster::AvailableModelsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::AdminMaster::AvailableModelsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::AdminMaster::AvailableModelsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::AdminMaster::AvailableModelsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::AdminMaster::AvailableModelsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::AdminMaster::AvailableModelsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::AdminMaster::AvailableModelsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::AdminMaster::AvailableModelsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::cluster::Cluster::UserMaster::AvailableModelsParams,  ::mas::schema::cluster::Cluster::UserMaster::AvailableModelsResults>
Cluster::UserMaster::Client::availableModelsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::UserMaster::AvailableModelsParams,  ::mas::schema::cluster::Cluster::UserMaster::AvailableModelsResults>(
      0xec42c6df28354b60ull, 0, sizeHint, {false});
}
::kj::Promise<void> Cluster::UserMaster::Server::availableModels(AvailableModelsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.UserMaster", "availableModels",
      0xec42c6df28354b60ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Cluster::UserMaster::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xec42c6df28354b60ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cluster_admin_service.capnp:Cluster.UserMaster", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Cluster::UserMaster::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        availableModels(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::UserMaster::AvailableModelsParams,  ::mas::schema::cluster::Cluster::UserMaster::AvailableModelsResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cluster_admin_service.capnp:Cluster.UserMaster",
          0xec42c6df28354b60ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Cluster::UserMaster
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::UserMaster::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::UserMaster::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::UserMaster::AvailableModelsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::UserMaster::AvailableModelsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::UserMaster::AvailableModelsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::UserMaster::AvailableModelsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::UserMaster::AvailableModelsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::UserMaster::AvailableModelsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::UserMaster::AvailableModelsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::UserMaster::AvailableModelsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::UserMaster::AvailableModelsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::UserMaster::AvailableModelsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::cluster::Cluster::Runtime::RegisterModelInstanceFactoryParams,  ::mas::schema::cluster::Cluster::Runtime::RegisterModelInstanceFactoryResults>
Cluster::Runtime::Client::registerModelInstanceFactoryRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::Runtime::RegisterModelInstanceFactoryParams,  ::mas::schema::cluster::Cluster::Runtime::RegisterModelInstanceFactoryResults>(
      0xf849848fea5c4776ull, 0, sizeHint, {false});
}
::kj::Promise<void> Cluster::Runtime::Server::registerModelInstanceFactory(RegisterModelInstanceFactoryContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.Runtime", "registerModelInstanceFactory",
      0xf849848fea5c4776ull, 0);
}
::capnp::Request< ::mas::schema::cluster::Cluster::Runtime::AvailableModelsParams,  ::mas::schema::cluster::Cluster::Runtime::AvailableModelsResults>
Cluster::Runtime::Client::availableModelsRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::Runtime::AvailableModelsParams,  ::mas::schema::cluster::Cluster::Runtime::AvailableModelsResults>(
      0xf849848fea5c4776ull, 1, sizeHint, {false});
}
::kj::Promise<void> Cluster::Runtime::Server::availableModels(AvailableModelsContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.Runtime", "availableModels",
      0xf849848fea5c4776ull, 1);
}
::capnp::Request< ::mas::schema::cluster::Cluster::Runtime::NumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::NumberOfCoresResults>
Cluster::Runtime::Client::numberOfCoresRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::Runtime::NumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::NumberOfCoresResults>(
      0xf849848fea5c4776ull, 2, sizeHint, {true});
}
::kj::Promise<void> Cluster::Runtime::Server::numberOfCores(NumberOfCoresContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.Runtime", "numberOfCores",
      0xf849848fea5c4776ull, 2);
}
::capnp::Request< ::mas::schema::cluster::Cluster::Runtime::FreeNumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::FreeNumberOfCoresResults>
Cluster::Runtime::Client::freeNumberOfCoresRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::Runtime::FreeNumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::FreeNumberOfCoresResults>(
      0xf849848fea5c4776ull, 3, sizeHint, {true});
}
::kj::Promise<void> Cluster::Runtime::Server::freeNumberOfCores(FreeNumberOfCoresContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.Runtime", "freeNumberOfCores",
      0xf849848fea5c4776ull, 3);
}
::capnp::Request< ::mas::schema::cluster::Cluster::Runtime::ReserveNumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::ReserveNumberOfCoresResults>
Cluster::Runtime::Client::reserveNumberOfCoresRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::Runtime::ReserveNumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::ReserveNumberOfCoresResults>(
      0xf849848fea5c4776ull, 4, sizeHint, {true});
}
::kj::Promise<void> Cluster::Runtime::Server::reserveNumberOfCores(ReserveNumberOfCoresContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.Runtime", "reserveNumberOfCores",
      0xf849848fea5c4776ull, 4);
}
::capnp::Capability::Server::DispatchCallResult Cluster::Runtime::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xf849848fea5c4776ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cluster_admin_service.capnp:Cluster.Runtime", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Cluster::Runtime::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        registerModelInstanceFactory(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::Runtime::RegisterModelInstanceFactoryParams,  ::mas::schema::cluster::Cluster::Runtime::RegisterModelInstanceFactoryResults>(context)),
        false,
        false
      };
    case 1:
      return {
        availableModels(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::Runtime::AvailableModelsParams,  ::mas::schema::cluster::Cluster::Runtime::AvailableModelsResults>(context)),
        false,
        false
      };
    case 2:
      return {
        numberOfCores(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::Runtime::NumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::NumberOfCoresResults>(context)),
        false,
        false
      };
    case 3:
      return {
        freeNumberOfCores(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::Runtime::FreeNumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::FreeNumberOfCoresResults>(context)),
        false,
        false
      };
    case 4:
      return {
        reserveNumberOfCores(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::Runtime::ReserveNumberOfCoresParams,  ::mas::schema::cluster::Cluster::Runtime::ReserveNumberOfCoresResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cluster_admin_service.capnp:Cluster.Runtime",
          0xf849848fea5c4776ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Cluster::Runtime
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::RegisterModelInstanceFactoryParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::RegisterModelInstanceFactoryParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::RegisterModelInstanceFactoryParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::RegisterModelInstanceFactoryParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::RegisterModelInstanceFactoryParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::RegisterModelInstanceFactoryResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::RegisterModelInstanceFactoryResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::RegisterModelInstanceFactoryResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::RegisterModelInstanceFactoryResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::RegisterModelInstanceFactoryResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::AvailableModelsParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::AvailableModelsParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::AvailableModelsParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::AvailableModelsParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::AvailableModelsParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::AvailableModelsResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::AvailableModelsResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::AvailableModelsResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::AvailableModelsResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::AvailableModelsResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::NumberOfCoresParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::NumberOfCoresParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::NumberOfCoresParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::NumberOfCoresParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::NumberOfCoresParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::NumberOfCoresResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::NumberOfCoresResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::NumberOfCoresResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::NumberOfCoresResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::NumberOfCoresResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::FreeNumberOfCoresParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::FreeNumberOfCoresParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::FreeNumberOfCoresParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::FreeNumberOfCoresParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::FreeNumberOfCoresParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::FreeNumberOfCoresResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::FreeNumberOfCoresResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::FreeNumberOfCoresResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::FreeNumberOfCoresResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::FreeNumberOfCoresResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::ReserveNumberOfCoresParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::ReserveNumberOfCoresParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::ReserveNumberOfCoresParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::ReserveNumberOfCoresParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::ReserveNumberOfCoresParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::Runtime::ReserveNumberOfCoresResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::Runtime::ReserveNumberOfCoresResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::Runtime::ReserveNumberOfCoresResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::Runtime::ReserveNumberOfCoresResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::Runtime::ReserveNumberOfCoresResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ZmqPipelineAddresses
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ZmqPipelineAddresses::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ZmqPipelineAddresses::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ZmqPipelineAddresses::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ZmqPipelineAddresses::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstanceParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstanceResults>
Cluster::ModelInstanceFactory::Client::newInstanceRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstanceParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstanceResults>(
      0xfd9959998f9f0ebeull, 0, sizeHint, {false});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::newInstance(NewInstanceContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "newInstance",
      0xfd9959998f9f0ebeull, 0);
}
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstancesParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstancesResults>
Cluster::ModelInstanceFactory::Client::newInstancesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstancesParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstancesResults>(
      0xfd9959998f9f0ebeull, 1, sizeHint, {false});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::newInstances(NewInstancesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "newInstances",
      0xfd9959998f9f0ebeull, 1);
}
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults>
Cluster::ModelInstanceFactory::Client::newCloudViaZmqPipelineProxiesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults>(
      0xfd9959998f9f0ebeull, 2, sizeHint, {false});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::newCloudViaZmqPipelineProxies(NewCloudViaZmqPipelineProxiesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "newCloudViaZmqPipelineProxies",
      0xfd9959998f9f0ebeull, 2);
}
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaProxyParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaProxyResults>
Cluster::ModelInstanceFactory::Client::newCloudViaProxyRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaProxyParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaProxyResults>(
      0xfd9959998f9f0ebeull, 3, sizeHint, {false});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::newCloudViaProxy(NewCloudViaProxyContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "newCloudViaProxy",
      0xfd9959998f9f0ebeull, 3);
}
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::ModelIdParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::ModelIdResults>
Cluster::ModelInstanceFactory::Client::modelIdRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::ModelIdParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::ModelIdResults>(
      0xfd9959998f9f0ebeull, 4, sizeHint, {true});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::modelId(ModelIdContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "modelId",
      0xfd9959998f9f0ebeull, 4);
}
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::RegisterModelInstanceParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::RegisterModelInstanceResults>
Cluster::ModelInstanceFactory::Client::registerModelInstanceRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::RegisterModelInstanceParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::RegisterModelInstanceResults>(
      0xfd9959998f9f0ebeull, 5, sizeHint, {false});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::registerModelInstance(RegisterModelInstanceContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "registerModelInstance",
      0xfd9959998f9f0ebeull, 5);
}
::capnp::Request< ::mas::schema::cluster::Cluster::ModelInstanceFactory::RestoreSturdyRefParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::RestoreSturdyRefResults>
Cluster::ModelInstanceFactory::Client::restoreSturdyRefRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::cluster::Cluster::ModelInstanceFactory::RestoreSturdyRefParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::RestoreSturdyRefResults>(
      0xfd9959998f9f0ebeull, 6, sizeHint, {false});
}
::kj::Promise<void> Cluster::ModelInstanceFactory::Server::restoreSturdyRef(RestoreSturdyRefContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "cluster_admin_service.capnp:Cluster.ModelInstanceFactory", "restoreSturdyRef",
      0xfd9959998f9f0ebeull, 6);
}
::capnp::Capability::Server::DispatchCallResult Cluster::ModelInstanceFactory::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfd9959998f9f0ebeull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("cluster_admin_service.capnp:Cluster.ModelInstanceFactory", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Cluster::ModelInstanceFactory::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        newInstance(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstanceParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstanceResults>(context)),
        false,
        false
      };
    case 1:
      return {
        newInstances(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstancesParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewInstancesResults>(context)),
        false,
        false
      };
    case 2:
      return {
        newCloudViaZmqPipelineProxies(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults>(context)),
        false,
        false
      };
    case 3:
      return {
        newCloudViaProxy(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaProxyParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::NewCloudViaProxyResults>(context)),
        false,
        false
      };
    case 4:
      return {
        modelId(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::ModelIdParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::ModelIdResults>(context)),
        false,
        false
      };
    case 5:
      return {
        registerModelInstance(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::RegisterModelInstanceParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::RegisterModelInstanceResults>(context)),
        false,
        false
      };
    case 6:
      return {
        restoreSturdyRef(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::cluster::Cluster::ModelInstanceFactory::RestoreSturdyRefParams,  ::mas::schema::cluster::Cluster::ModelInstanceFactory::RestoreSturdyRefResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
          0xfd9959998f9f0ebeull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewInstanceParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstanceParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstanceParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewInstanceParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewInstanceParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewInstanceResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstanceResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstanceResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewInstanceResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewInstanceResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewInstancesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstancesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstancesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewInstancesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewInstancesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewInstancesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstancesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewInstancesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewInstancesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewInstancesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewCloudViaZmqPipelineProxiesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewCloudViaProxyParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaProxyParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaProxyParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewCloudViaProxyParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewCloudViaProxyParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::NewCloudViaProxyResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaProxyResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::NewCloudViaProxyResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::NewCloudViaProxyResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::NewCloudViaProxyResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::ModelIdParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::ModelIdParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::ModelIdParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::ModelIdParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::ModelIdParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::ModelIdResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::ModelIdResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::ModelIdResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::ModelIdResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::ModelIdResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::RegisterModelInstanceParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::RegisterModelInstanceParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::RegisterModelInstanceParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::RegisterModelInstanceParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::RegisterModelInstanceParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::RegisterModelInstanceResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::RegisterModelInstanceResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::RegisterModelInstanceResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::RegisterModelInstanceResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::RegisterModelInstanceResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::RestoreSturdyRefParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::RestoreSturdyRefParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::RestoreSturdyRefParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::RestoreSturdyRefParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::RestoreSturdyRefParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Cluster::ModelInstanceFactory::RestoreSturdyRefResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Cluster::ModelInstanceFactory::RestoreSturdyRefResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Cluster::ModelInstanceFactory::RestoreSturdyRefResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Cluster::ModelInstanceFactory::RestoreSturdyRefResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Cluster::ModelInstanceFactory::RestoreSturdyRefResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

