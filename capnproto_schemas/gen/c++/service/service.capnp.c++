// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: service.capnp

#include "service.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<74> b_fec1f88b198df649 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     73, 246, 141,  25, 139, 248, 193, 254,
     14,   0,   0,   0,   3,   0,   0,   0,
    192, 198, 187, 210, 152, 223,  42, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   1,   0,   0,
    241,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     20,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     52, 242, 231, 218,  27, 243,  39, 214,
     89, 151,  84, 174, 144,  34,  28, 224,
    145,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    137,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    253,  16,  17, 105, 138,  53, 191, 154,
    193,  75, 199,  26,  74,  25, 253, 214,
    125,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    117,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
    120,  91, 239,  55, 205, 211, 195, 221,
    135, 151, 117,  62,   6,  26,  42, 206,
    105,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     93,   0,   0,   0,   7,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
    150,  88,  41, 141,  98, 113,  66, 255,
    152, 179, 219, 120, 133,  61,  66, 245,
     81,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
    131, 186, 104, 182, 249, 114, 132, 220,
     44, 171, 226,   8, 219, 121,  94, 177,
     61,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
    104, 101,  97, 114, 116,  98, 101,  97,
    116,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 116,  84, 105, 109, 101, 111,
    117, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 116, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    105, 100, 101, 110, 116, 105, 116, 105,
    101, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    117, 112, 100,  97, 116, 101,  73, 100,
    101, 110, 116, 105, 116, 121,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fec1f88b198df649 = b_fec1f88b198df649.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fec1f88b198df649[] = {
  &s_9abf358a691110fd,
  &s_b15e79db08e2ab2c,
  &s_b2afd1cb599c48d5,
  &s_ce2a1a063e759787,
  &s_d627f31bdae7f234,
  &s_d6fd194a1ac74bc1,
  &s_dc8472f9b668ba83,
  &s_ddc3d3cd37ef5b78,
  &s_e01c2290ae549759,
  &s_f5423d8578dbb398,
  &s_ff4271628d295896,
};
static const uint16_t m_fec1f88b198df649[] = {0, 3, 1, 2, 4};
const ::capnp::_::RawSchema s_fec1f88b198df649 = {
  0xfec1f88b198df649, b_fec1f88b198df649.words, 74, d_fec1f88b198df649, m_fec1f88b198df649,
  11, 5, nullptr, nullptr, nullptr, { &s_fec1f88b198df649, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_d627f31bdae7f234 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52, 242, 231, 218,  27, 243,  39, 214,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 104, 101,  97, 114,
    116,  98, 101,  97, 116,  36,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d627f31bdae7f234 = b_d627f31bdae7f234.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d627f31bdae7f234 = {
  0xd627f31bdae7f234, b_d627f31bdae7f234.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d627f31bdae7f234, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_e01c2290ae549759 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     89, 151,  84, 174, 144,  34,  28, 224,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 104, 101,  97, 114,
    116,  98, 101,  97, 116,  36,  82, 101,
    115, 117, 108, 116, 115,   0,   0,   0, }
};
::capnp::word const* const bp_e01c2290ae549759 = b_e01c2290ae549759.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_e01c2290ae549759 = {
  0xe01c2290ae549759, b_e01c2290ae549759.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_e01c2290ae549759, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_9abf358a691110fd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    253,  16,  17, 105, 138,  53, 191, 154,
     20,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 115, 101, 116,  84,
    105, 109, 101, 111, 117, 116,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    115, 101,  99, 111, 110, 100, 115,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9abf358a691110fd = b_9abf358a691110fd.words;
#if !CAPNP_LITE
static const uint16_t m_9abf358a691110fd[] = {0};
static const uint16_t i_9abf358a691110fd[] = {0};
const ::capnp::_::RawSchema s_9abf358a691110fd = {
  0x9abf358a691110fd, b_9abf358a691110fd.words, 33, nullptr, m_9abf358a691110fd,
  0, 1, i_9abf358a691110fd, nullptr, nullptr, { &s_9abf358a691110fd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_d6fd194a1ac74bc1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    193,  75, 199,  26,  74,  25, 253, 214,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 115, 101, 116,  84,
    105, 109, 101, 111, 117, 116,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0, }
};
::capnp::word const* const bp_d6fd194a1ac74bc1 = b_d6fd194a1ac74bc1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d6fd194a1ac74bc1 = {
  0xd6fd194a1ac74bc1, b_d6fd194a1ac74bc1.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d6fd194a1ac74bc1, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_ddc3d3cd37ef5b78 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    120,  91, 239,  55, 205, 211, 195, 221,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 115, 116, 111, 112,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_ddc3d3cd37ef5b78 = b_ddc3d3cd37ef5b78.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ddc3d3cd37ef5b78 = {
  0xddc3d3cd37ef5b78, b_ddc3d3cd37ef5b78.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ddc3d3cd37ef5b78, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ce2a1a063e759787 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    135, 151, 117,  62,   6,  26,  42, 206,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 115, 116, 111, 112,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ce2a1a063e759787 = b_ce2a1a063e759787.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ce2a1a063e759787 = {
  0xce2a1a063e759787, b_ce2a1a063e759787.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ce2a1a063e759787, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_ff4271628d295896 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    150,  88,  41, 141,  98, 113,  66, 255,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 105, 100, 101, 110,
    116, 105, 116, 105, 101, 115,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_ff4271628d295896 = b_ff4271628d295896.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_ff4271628d295896 = {
  0xff4271628d295896, b_ff4271628d295896.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_ff4271628d295896, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_f5423d8578dbb398 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    152, 179, 219, 120, 133,  61,  66, 245,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 105, 100, 101, 110,
    116, 105, 116, 105, 101, 115,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f5423d8578dbb398 = b_f5423d8578dbb398.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f5423d8578dbb398[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_f5423d8578dbb398[] = {0};
static const uint16_t i_f5423d8578dbb398[] = {0};
const ::capnp::_::RawSchema s_f5423d8578dbb398 = {
  0xf5423d8578dbb398, b_f5423d8578dbb398.words, 37, d_f5423d8578dbb398, m_f5423d8578dbb398,
  1, 1, i_f5423d8578dbb398, nullptr, nullptr, { &s_f5423d8578dbb398, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<49> b_dc8472f9b668ba83 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    131, 186, 104, 182, 249, 114, 132, 220,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 117, 112, 100,  97,
    116, 101,  73, 100, 101, 110, 116, 105,
    116, 121,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    111, 108, 100,  73, 100,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 119,  73, 110, 102, 111,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_dc8472f9b668ba83 = b_dc8472f9b668ba83.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_dc8472f9b668ba83[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_dc8472f9b668ba83[] = {1, 0};
static const uint16_t i_dc8472f9b668ba83[] = {0, 1};
const ::capnp::_::RawSchema s_dc8472f9b668ba83 = {
  0xdc8472f9b668ba83, b_dc8472f9b668ba83.words, 49, d_dc8472f9b668ba83, m_dc8472f9b668ba83,
  1, 2, i_dc8472f9b668ba83, nullptr, nullptr, { &s_dc8472f9b668ba83, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_b15e79db08e2ab2c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     44, 171, 226,   8, 219, 121,  94, 177,
     20,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  65, 100,
    109, 105, 110,  46, 117, 112, 100,  97,
    116, 101,  73, 100, 101, 110, 116, 105,
    116, 121,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b15e79db08e2ab2c = b_b15e79db08e2ab2c.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_b15e79db08e2ab2c = {
  0xb15e79db08e2ab2c, b_b15e79db08e2ab2c.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_b15e79db08e2ab2c, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_aba5829222c213cb = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    203,  19, 194,  34, 146, 130, 165, 171,
     14,   0,   0,   0,   3,   0,   0,   0,
    192, 198, 187, 210, 152, 223,  42, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 105,
    109, 112, 108, 101,  70,  97,  99, 116,
    111, 114, 121,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    221, 182, 220,  96, 220, 111,  41, 168,
    170,  30, 222, 224,  40,  56, 163, 137,
     17,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99, 114, 101,  97, 116, 101,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_aba5829222c213cb = b_aba5829222c213cb.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_aba5829222c213cb[] = {
  &s_89a33828e0de1eaa,
  &s_a8296fdc60dcb6dd,
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_aba5829222c213cb[] = {0};
const ::capnp::_::RawSchema s_aba5829222c213cb = {
  0xaba5829222c213cb, b_aba5829222c213cb.words, 31, d_aba5829222c213cb, m_aba5829222c213cb,
  3, 1, nullptr, nullptr, nullptr, { &s_aba5829222c213cb, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_a8296fdc60dcb6dd = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    221, 182, 220,  96, 220, 111,  41, 168,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  82,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 105,
    109, 112, 108, 101,  70,  97,  99, 116,
    111, 114, 121,  46,  99, 114, 101,  97,
    116, 101,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a8296fdc60dcb6dd = b_a8296fdc60dcb6dd.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_a8296fdc60dcb6dd = {
  0xa8296fdc60dcb6dd, b_a8296fdc60dcb6dd.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_a8296fdc60dcb6dd, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<38> b_89a33828e0de1eaa = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    170,  30, 222, 224,  40,  56, 163, 137,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  90,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 105,
    109, 112, 108, 101,  70,  97,  99, 116,
    111, 114, 121,  46,  99, 114, 101,  97,
    116, 101,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
     99,  97, 112, 115,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_89a33828e0de1eaa = b_89a33828e0de1eaa.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_89a33828e0de1eaa[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_89a33828e0de1eaa[] = {0};
static const uint16_t i_89a33828e0de1eaa[] = {0};
const ::capnp::_::RawSchema s_89a33828e0de1eaa = {
  0x89a33828e0de1eaa, b_89a33828e0de1eaa.words, 38, d_89a33828e0de1eaa, m_89a33828e0de1eaa,
  1, 1, i_89a33828e0de1eaa, nullptr, nullptr, { &s_89a33828e0de1eaa, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<73> b_8ab0ecb99c269c7f = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
     14,   0,   0,   0,   3,   0,   0,   0,
    192, 198, 187, 210, 152, 223,  42, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 178,   0,   0,   0,
     29,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     57,   0,   0,   0, 135,   0,   0,   0,
    225,   0,   0,   0,  23,   0,   0,   0,
    233,   0,   0,   0,  15,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  70,  97,
     99, 116, 111, 114, 121,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    151, 145, 170, 204,  23, 133, 184, 194,
      9,   0,   0,   0, 106,   0,   0,   0,
     46, 182, 124, 223,  83, 106, 129, 185,
      9,   0,   0,   0,  90,   0,   0,   0,
     67, 114, 101,  97, 116, 101,  80,  97,
    114,  97, 109, 115,   0,   0,   0,   0,
     65,  99,  99, 101, 115, 115,  73, 110,
    102, 111,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    151, 145, 170, 204,  23, 133, 184, 194,
     46, 182, 124, 223,  83, 106, 129, 185,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   0,   0,   1,   0,
     60,   0,   0,   0,   0,   0,   1,   0,
     77,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     42, 136, 179,  42,  53, 103, 213, 212,
      5, 207, 220, 181,  39, 193,  98, 169,
     65,   0,   0,   0, 178,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   0,   0,   1,   0,
     84,   0,   0,   0,   0,   0,   1,   0,
    101,   0,   0,   0,   7,   0,   0,   0,
     99, 114, 101,  97, 116, 101,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 101, 114, 118, 105,  99, 101,  73,
    110, 116, 101, 114, 102,  97,  99, 101,
     78,  97, 109, 101, 115,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  66,   0,   0,   0,
     80,  97, 121, 108, 111,  97, 100,   0, }
};
::capnp::word const* const bp_8ab0ecb99c269c7f = b_8ab0ecb99c269c7f.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8ab0ecb99c269c7f[] = {
  &s_a962c127b5dccf05,
  &s_b2afd1cb599c48d5,
  &s_b9816a53df7cb62e,
  &s_c2b88517ccaa9197,
  &s_d4d567352ab3882a,
};
static const uint16_t m_8ab0ecb99c269c7f[] = {0, 1};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_8ab0ecb99c269c7f[] = {
  { 33554432,  ::mas::schema::service::Factory< ::capnp::AnyPointer>::CreateParams::_capnpPrivate::brand() },
  { 33554433,  ::mas::schema::service::Factory< ::capnp::AnyPointer>::ServiceInterfaceNamesParams::_capnpPrivate::brand() },
  { 50331648,  ::mas::schema::service::Factory< ::capnp::AnyPointer>::AccessInfo::_capnpPrivate::brand() },
  { 50331649,  ::mas::schema::service::Factory< ::capnp::AnyPointer>::ServiceInterfaceNamesResults::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_8ab0ecb99c269c7f = {
  0x8ab0ecb99c269c7f, b_8ab0ecb99c269c7f.words, 73, d_8ab0ecb99c269c7f, m_8ab0ecb99c269c7f,
  5, 2, nullptr, nullptr, nullptr, { &s_8ab0ecb99c269c7f, nullptr, bd_8ab0ecb99c269c7f, 0, sizeof(bd_8ab0ecb99c269c7f) / sizeof(bd_8ab0ecb99c269c7f[0]), nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<91> b_c2b88517ccaa9197 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    151, 145, 170, 204,  23, 133, 184, 194,
     22,   0,   0,   0,   1,   0,   1,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  70,  97,
     99, 116, 111, 114, 121,  46,  67, 114,
    101,  97, 116, 101,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0, 210,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
    184,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    181,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,   0,   0,   0,   3,   0,   1,   0,
    192,   0,   0,   0,   2,   0,   1,   0,
    116, 105, 109, 101, 111, 117, 116,  83,
    101,  99, 111, 110, 100, 115,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      9,   0,   0,   0,   0,   0,   0,   0,
     16,  14,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 116, 101, 114, 102,  97,  99,
    101,  78,  97, 109, 101,  84, 111,  82,
    101, 103, 105, 115, 116, 114, 121,  83,
     82,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      1,   0,   0,   0,  31,   0,   0,   0,
      4,   0,   0,   0,   2,   0,   1,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,  39,   0,   0,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 115, 103,  80,  97, 121, 108, 111,
     97, 100,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c2b88517ccaa9197 = b_c2b88517ccaa9197.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c2b88517ccaa9197[] = {
  &s_b9d4864725174733,
};
static const uint16_t m_c2b88517ccaa9197[] = {1, 2, 0};
static const uint16_t i_c2b88517ccaa9197[] = {0, 1, 2};
KJ_CONSTEXPR(const) ::capnp::_::RawBrandedSchema::Dependency bd_c2b88517ccaa9197[] = {
  { 16777217,  ::mas::schema::common::Pair< ::capnp::Text,  ::capnp::Text>::_capnpPrivate::brand() },
};
const ::capnp::_::RawSchema s_c2b88517ccaa9197 = {
  0xc2b88517ccaa9197, b_c2b88517ccaa9197.words, 91, d_c2b88517ccaa9197, m_c2b88517ccaa9197,
  1, 3, i_c2b88517ccaa9197, nullptr, nullptr, { &s_c2b88517ccaa9197, nullptr, bd_c2b88517ccaa9197, 0, sizeof(bd_c2b88517ccaa9197) / sizeof(bd_c2b88517ccaa9197[0]), nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<70> b_b9816a53df7cb62e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     46, 182, 124, 223,  83, 106, 129, 185,
     22,   0,   0,   0,   1,   0,   0,   0,
    127, 156,  38, 156, 185, 236, 176, 138,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  70,  97,
     99, 116, 111, 114, 121,  46,  65,  99,
     99, 101, 115, 115,  73, 110, 102, 111,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
     97, 100, 109, 105, 110,  67,  97, 112,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   3,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  67,
     97, 112, 115,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9816a53df7cb62e = b_b9816a53df7cb62e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b9816a53df7cb62e[] = {
  &s_b2afd1cb599c48d5,
};
static const uint16_t m_b9816a53df7cb62e[] = {0, 2, 1};
static const uint16_t i_b9816a53df7cb62e[] = {0, 1, 2};
const ::capnp::_::RawSchema s_b9816a53df7cb62e = {
  0xb9816a53df7cb62e, b_b9816a53df7cb62e.words, 70, d_b9816a53df7cb62e, m_b9816a53df7cb62e,
  1, 3, i_b9816a53df7cb62e, nullptr, nullptr, { &s_b9816a53df7cb62e, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<19> b_d4d567352ab3882a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     42, 136, 179,  42,  53, 103, 213, 212,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 154,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  70,  97,
     99, 116, 111, 114, 121,  46, 115, 101,
    114, 118, 105,  99, 101,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  78,  97,
    109, 101, 115,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4d567352ab3882a = b_d4d567352ab3882a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d4d567352ab3882a = {
  0xd4d567352ab3882a, b_d4d567352ab3882a.words, 19, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d4d567352ab3882a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_a962c127b5dccf05 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 207, 220, 181,  39, 193,  98, 169,
     22,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 162,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  70,  97,
     99, 116, 111, 114, 121,  46, 115, 101,
    114, 118, 105,  99, 101,  73, 110, 116,
    101, 114, 102,  97,  99, 101,  78,  97,
    109, 101, 115,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    110,  97, 109, 101, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a962c127b5dccf05 = b_a962c127b5dccf05.words;
#if !CAPNP_LITE
static const uint16_t m_a962c127b5dccf05[] = {0};
static const uint16_t i_a962c127b5dccf05[] = {0};
const ::capnp::_::RawSchema s_a962c127b5dccf05 = {
  0xa962c127b5dccf05, b_a962c127b5dccf05.words, 39, nullptr, m_a962c127b5dccf05,
  0, 1, i_a962c127b5dccf05, nullptr, nullptr, { &s_a962c127b5dccf05, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<28> b_e9d1be2a6e9016e5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    229,  22, 144, 110,  42, 190, 209, 233,
     14,   0,   0,   0,   3,   0,   0,   0,
    192, 198, 187, 210, 152, 223,  42, 245,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 186,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  71,   0,   0,   0,
     65,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 112,  97,  98, 108, 101,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5, 183, 183, 105,   6, 242, 228, 210,
    172, 241, 206, 226,  88, 128,  54, 150,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    115, 116, 111, 112,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_e9d1be2a6e9016e5 = b_e9d1be2a6e9016e5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e9d1be2a6e9016e5[] = {
  &s_96368058e2cef1ac,
  &s_d2e4f20669b7b705,
};
static const uint16_t m_e9d1be2a6e9016e5[] = {0};
const ::capnp::_::RawSchema s_e9d1be2a6e9016e5 = {
  0xe9d1be2a6e9016e5, b_e9d1be2a6e9016e5.words, 28, d_e9d1be2a6e9016e5, m_e9d1be2a6e9016e5,
  2, 1, nullptr, nullptr, nullptr, { &s_e9d1be2a6e9016e5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_d2e4f20669b7b705 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
      5, 183, 183, 105,   6, 242, 228, 210,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 112,  97,  98, 108, 101,  46, 115,
    116, 111, 112,  36,  80,  97, 114,  97,
    109, 115,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d2e4f20669b7b705 = b_d2e4f20669b7b705.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d2e4f20669b7b705 = {
  0xd2e4f20669b7b705, b_d2e4f20669b7b705.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d2e4f20669b7b705, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_96368058e2cef1ac = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    172, 241, 206, 226,  88, 128,  54, 150,
     23,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  34,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 101, 114, 118, 105,  99, 101,  46,
     99,  97, 112, 110, 112,  58,  83, 116,
    111, 112,  97,  98, 108, 101,  46, 115,
    116, 111, 112,  36,  82, 101, 115, 117,
    108, 116, 115,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_96368058e2cef1ac = b_96368058e2cef1ac.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_96368058e2cef1ac = {
  0x96368058e2cef1ac, b_96368058e2cef1ac.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_96368058e2cef1ac, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace service {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::service::Admin::HeartbeatParams,  ::mas::schema::service::Admin::HeartbeatResults>
Admin::Client::heartbeatRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::Admin::HeartbeatParams,  ::mas::schema::service::Admin::HeartbeatResults>(
      0xfec1f88b198df649ull, 0, sizeHint, {true});
}
::kj::Promise<void> Admin::Server::heartbeat(HeartbeatContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:Admin", "heartbeat",
      0xfec1f88b198df649ull, 0);
}
::capnp::Request< ::mas::schema::service::Admin::SetTimeoutParams,  ::mas::schema::service::Admin::SetTimeoutResults>
Admin::Client::setTimeoutRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::Admin::SetTimeoutParams,  ::mas::schema::service::Admin::SetTimeoutResults>(
      0xfec1f88b198df649ull, 1, sizeHint, {true});
}
::kj::Promise<void> Admin::Server::setTimeout(SetTimeoutContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:Admin", "setTimeout",
      0xfec1f88b198df649ull, 1);
}
::capnp::Request< ::mas::schema::service::Admin::StopParams,  ::mas::schema::service::Admin::StopResults>
Admin::Client::stopRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::Admin::StopParams,  ::mas::schema::service::Admin::StopResults>(
      0xfec1f88b198df649ull, 2, sizeHint, {true});
}
::kj::Promise<void> Admin::Server::stop(StopContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:Admin", "stop",
      0xfec1f88b198df649ull, 2);
}
::capnp::Request< ::mas::schema::service::Admin::IdentitiesParams,  ::mas::schema::service::Admin::IdentitiesResults>
Admin::Client::identitiesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::Admin::IdentitiesParams,  ::mas::schema::service::Admin::IdentitiesResults>(
      0xfec1f88b198df649ull, 3, sizeHint, {true});
}
::kj::Promise<void> Admin::Server::identities(IdentitiesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:Admin", "identities",
      0xfec1f88b198df649ull, 3);
}
::capnp::Request< ::mas::schema::service::Admin::UpdateIdentityParams,  ::mas::schema::service::Admin::UpdateIdentityResults>
Admin::Client::updateIdentityRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::Admin::UpdateIdentityParams,  ::mas::schema::service::Admin::UpdateIdentityResults>(
      0xfec1f88b198df649ull, 4, sizeHint, {true});
}
::kj::Promise<void> Admin::Server::updateIdentity(UpdateIdentityContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:Admin", "updateIdentity",
      0xfec1f88b198df649ull, 4);
}
::capnp::Capability::Server::DispatchCallResult Admin::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xfec1f88b198df649ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("service.capnp:Admin", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Admin::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        heartbeat(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::Admin::HeartbeatParams,  ::mas::schema::service::Admin::HeartbeatResults>(context)),
        false,
        false
      };
    case 1:
      return {
        setTimeout(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::Admin::SetTimeoutParams,  ::mas::schema::service::Admin::SetTimeoutResults>(context)),
        false,
        false
      };
    case 2:
      return {
        stop(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::Admin::StopParams,  ::mas::schema::service::Admin::StopResults>(context)),
        false,
        false
      };
    case 3:
      return {
        identities(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::Admin::IdentitiesParams,  ::mas::schema::service::Admin::IdentitiesResults>(context)),
        false,
        false
      };
    case 4:
      return {
        updateIdentity(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::Admin::UpdateIdentityParams,  ::mas::schema::service::Admin::UpdateIdentityResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "service.capnp:Admin",
          0xfec1f88b198df649ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Admin
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::HeartbeatParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::HeartbeatParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::HeartbeatParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::HeartbeatParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::HeartbeatParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::HeartbeatResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::HeartbeatResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::HeartbeatResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::HeartbeatResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::HeartbeatResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::SetTimeoutParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::SetTimeoutParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::SetTimeoutParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::SetTimeoutParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::SetTimeoutParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::SetTimeoutResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::SetTimeoutResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::SetTimeoutResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::SetTimeoutResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::SetTimeoutResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::StopParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::StopParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::StopParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::StopParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::StopParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::StopResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::StopResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::StopResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::StopResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::StopResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::IdentitiesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::IdentitiesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::IdentitiesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::IdentitiesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::IdentitiesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::IdentitiesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::IdentitiesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::IdentitiesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::IdentitiesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::IdentitiesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::UpdateIdentityParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::UpdateIdentityParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::UpdateIdentityParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::UpdateIdentityParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::UpdateIdentityParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Admin::UpdateIdentityResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Admin::UpdateIdentityResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Admin::UpdateIdentityResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Admin::UpdateIdentityResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Admin::UpdateIdentityResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::service::SimpleFactory::CreateParams,  ::mas::schema::service::SimpleFactory::CreateResults>
SimpleFactory::Client::createRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::SimpleFactory::CreateParams,  ::mas::schema::service::SimpleFactory::CreateResults>(
      0xaba5829222c213cbull, 0, sizeHint, {false});
}
::kj::Promise<void> SimpleFactory::Server::create(CreateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:SimpleFactory", "create",
      0xaba5829222c213cbull, 0);
}
::capnp::Capability::Server::DispatchCallResult SimpleFactory::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xaba5829222c213cbull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("service.capnp:SimpleFactory", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult SimpleFactory::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        create(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::SimpleFactory::CreateParams,  ::mas::schema::service::SimpleFactory::CreateResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "service.capnp:SimpleFactory",
          0xaba5829222c213cbull, methodId);
  }
}
#endif  // !CAPNP_LITE

// SimpleFactory
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SimpleFactory::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SimpleFactory::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SimpleFactory::CreateParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SimpleFactory::CreateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t SimpleFactory::CreateParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SimpleFactory::CreateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SimpleFactory::CreateParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// SimpleFactory::CreateResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t SimpleFactory::CreateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t SimpleFactory::CreateResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind SimpleFactory::CreateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SimpleFactory::CreateResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::service::Stopable::StopParams,  ::mas::schema::service::Stopable::StopResults>
Stopable::Client::stopRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::service::Stopable::StopParams,  ::mas::schema::service::Stopable::StopResults>(
      0xe9d1be2a6e9016e5ull, 0, sizeHint, {true});
}
::kj::Promise<void> Stopable::Server::stop(StopContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "service.capnp:Stopable", "stop",
      0xe9d1be2a6e9016e5ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Stopable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe9d1be2a6e9016e5ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("service.capnp:Stopable", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Stopable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        stop(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::service::Stopable::StopParams,  ::mas::schema::service::Stopable::StopResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "service.capnp:Stopable",
          0xe9d1be2a6e9016e5ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Stopable
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Stopable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Stopable::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Stopable::StopParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Stopable::StopParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Stopable::StopParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Stopable::StopParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Stopable::StopParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Stopable::StopResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Stopable::StopResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Stopable::StopResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Stopable::StopResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Stopable::StopResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

