// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: crop.capnp

#include "crop.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<53> b_e88d97a324bf5c84 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    132,  92, 191,  36, 163, 151, 141, 232,
     11,   0,   0,   0,   3,   0,   0,   0,
    114, 249, 157, 150, 225,  36, 138, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 199,   0,   0,   0,
    149,   0,   0,   0,  39,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     91, 142,  60, 116,  14,   1, 110, 200,
    134,  84,  81,  45, 114, 252, 250, 228,
     81,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    122,  81, 180, 223,  23, 241, 110, 242,
    186, 148,  36, 165, 187,   4,  55, 191,
     61,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    180,  48,  49,  42,  50,  28, 221, 244,
     72, 100, 222, 238,  94, 137, 170, 180,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 117, 108, 116, 105, 118,  97, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    115, 112, 101,  99, 105, 101, 115,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      8,   0,   0,   0,   1,   0,   1,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 203,  54, 220, 160, 218, 167, 193,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e88d97a324bf5c84 = b_e88d97a324bf5c84.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e88d97a324bf5c84[] = {
  &s_b2afd1cb599c48d5,
  &s_b4aa895eeede6448,
  &s_bf3704bba52494ba,
  &s_c1a7daa0dc36cb65,
  &s_c86e010e743c8e5b,
  &s_e4fafc722d515486,
  &s_f26ef117dfb4517a,
  &s_f4dd1c322a3130b4,
};
static const uint16_t m_e88d97a324bf5c84[] = {1, 0, 2};
const ::capnp::_::RawSchema s_e88d97a324bf5c84 = {
  0xe88d97a324bf5c84, b_e88d97a324bf5c84.words, 53, d_e88d97a324bf5c84, m_e88d97a324bf5c84,
  8, 3, nullptr, nullptr, nullptr, { &s_e88d97a324bf5c84, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_c86e010e743c8e5b = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     91, 142,  60, 116,  14,   1, 110, 200,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,  36,  80,  97, 114,  97, 109,
    115,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c86e010e743c8e5b = b_c86e010e743c8e5b.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_c86e010e743c8e5b = {
  0xc86e010e743c8e5b, b_c86e010e743c8e5b.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_c86e010e743c8e5b, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_e4fafc722d515486 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    134,  84,  81,  45, 114, 252, 250, 228,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  26,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
    112,  97, 114,  97, 109, 101, 116, 101,
    114, 115,  36,  82, 101, 115, 117, 108,
    116, 115,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e4fafc722d515486 = b_e4fafc722d515486.words;
#if !CAPNP_LITE
static const uint16_t m_e4fafc722d515486[] = {0};
static const uint16_t i_e4fafc722d515486[] = {0};
const ::capnp::_::RawSchema s_e4fafc722d515486 = {
  0xe4fafc722d515486, b_e4fafc722d515486.words, 33, nullptr, m_e4fafc722d515486,
  0, 1, i_e4fafc722d515486, nullptr, nullptr, { &s_e4fafc722d515486, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_f26ef117dfb4517a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    122,  81, 180, 223,  23, 241, 110, 242,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
     99, 117, 108, 116, 105, 118,  97, 114,
     36,  80,  97, 114,  97, 109, 115,   0, }
};
::capnp::word const* const bp_f26ef117dfb4517a = b_f26ef117dfb4517a.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f26ef117dfb4517a = {
  0xf26ef117dfb4517a, b_f26ef117dfb4517a.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f26ef117dfb4517a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<33> b_bf3704bba52494ba = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    186, 148,  36, 165, 187,   4,  55, 191,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
     99, 117, 108, 116, 105, 118,  97, 114,
     36,  82, 101, 115, 117, 108, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bf3704bba52494ba = b_bf3704bba52494ba.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bf3704bba52494ba[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_bf3704bba52494ba[] = {0};
static const uint16_t i_bf3704bba52494ba[] = {0};
const ::capnp::_::RawSchema s_bf3704bba52494ba = {
  0xbf3704bba52494ba, b_bf3704bba52494ba.words, 33, d_bf3704bba52494ba, m_bf3704bba52494ba,
  1, 1, i_bf3704bba52494ba, nullptr, nullptr, { &s_bf3704bba52494ba, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<16> b_f4dd1c322a3130b4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    180,  48,  49,  42,  50,  28, 221, 244,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 250,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
    115, 112, 101,  99, 105, 101, 115,  36,
     80,  97, 114,  97, 109, 115,   0,   0, }
};
::capnp::word const* const bp_f4dd1c322a3130b4 = b_f4dd1c322a3130b4.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_f4dd1c322a3130b4 = {
  0xf4dd1c322a3130b4, b_f4dd1c322a3130b4.words, 16, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_f4dd1c322a3130b4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<32> b_b4aa895eeede6448 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     72, 100, 222, 238,  94, 137, 170, 180,
     16,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   2,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  67, 114, 111, 112,  46,
    115, 112, 101,  99, 105, 101, 115,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b4aa895eeede6448 = b_b4aa895eeede6448.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b4aa895eeede6448[] = {
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_b4aa895eeede6448[] = {0};
static const uint16_t i_b4aa895eeede6448[] = {0};
const ::capnp::_::RawSchema s_b4aa895eeede6448 = {
  0xb4aa895eeede6448, b_b4aa895eeede6448.words, 32, d_b4aa895eeede6448, m_b4aa895eeede6448,
  1, 1, i_b4aa895eeede6448, nullptr, nullptr, { &s_b4aa895eeede6448, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<20> b_8ddcc2b6c0386bc4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    196, 107,  56, 192, 182, 194, 220, 141,
     11,   0,   0,   0,   3,   0,   0,   0,
    114, 249, 157, 150, 225,  36, 138, 249,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,   7,   0,   0,   0,
     25,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 114, 111, 112,  46,  99,  97, 112,
    110, 112,  58,  83, 101, 114, 118, 105,
     99, 101,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   3,   0,   5,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    184,  51,   6,  96, 209,  75, 123, 202,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8ddcc2b6c0386bc4 = b_8ddcc2b6c0386bc4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8ddcc2b6c0386bc4[] = {
  &s_ca7b4bd1600633b8,
};
const ::capnp::_::RawSchema s_8ddcc2b6c0386bc4 = {
  0x8ddcc2b6c0386bc4, b_8ddcc2b6c0386bc4.words, 20, d_8ddcc2b6c0386bc4, nullptr,
  1, 0, nullptr, nullptr, nullptr, { &s_8ddcc2b6c0386bc4, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace crop {

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::crop::Crop::ParametersParams,  ::mas::schema::crop::Crop::ParametersResults>
Crop::Client::parametersRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::crop::Crop::ParametersParams,  ::mas::schema::crop::Crop::ParametersResults>(
      0xe88d97a324bf5c84ull, 0, sizeHint, {false});
}
::kj::Promise<void> Crop::Server::parameters(ParametersContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "crop.capnp:Crop", "parameters",
      0xe88d97a324bf5c84ull, 0);
}
::capnp::Request< ::mas::schema::crop::Crop::CultivarParams,  ::mas::schema::crop::Crop::CultivarResults>
Crop::Client::cultivarRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::crop::Crop::CultivarParams,  ::mas::schema::crop::Crop::CultivarResults>(
      0xe88d97a324bf5c84ull, 1, sizeHint, {true});
}
::kj::Promise<void> Crop::Server::cultivar(CultivarContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "crop.capnp:Crop", "cultivar",
      0xe88d97a324bf5c84ull, 1);
}
::capnp::Request< ::mas::schema::crop::Crop::SpeciesParams,  ::mas::schema::crop::Crop::SpeciesResults>
Crop::Client::speciesRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::crop::Crop::SpeciesParams,  ::mas::schema::crop::Crop::SpeciesResults>(
      0xe88d97a324bf5c84ull, 2, sizeHint, {true});
}
::kj::Promise<void> Crop::Server::species(SpeciesContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "crop.capnp:Crop", "species",
      0xe88d97a324bf5c84ull, 2);
}
::capnp::Capability::Server::DispatchCallResult Crop::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xe88d97a324bf5c84ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xc1a7daa0dc36cb65ull:
      return  ::mas::schema::persistence::Persistent::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("crop.capnp:Crop", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Crop::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        parameters(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::crop::Crop::ParametersParams,  ::mas::schema::crop::Crop::ParametersResults>(context)),
        false,
        false
      };
    case 1:
      return {
        cultivar(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::crop::Crop::CultivarParams,  ::mas::schema::crop::Crop::CultivarResults>(context)),
        false,
        false
      };
    case 2:
      return {
        species(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::crop::Crop::SpeciesParams,  ::mas::schema::crop::Crop::SpeciesResults>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "crop.capnp:Crop",
          0xe88d97a324bf5c84ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Crop
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Crop::ParametersParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Crop::ParametersParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::ParametersParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::ParametersParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::ParametersParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Crop::ParametersResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Crop::ParametersResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::ParametersResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::ParametersResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::ParametersResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Crop::CultivarParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Crop::CultivarParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::CultivarParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::CultivarParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::CultivarParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Crop::CultivarResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Crop::CultivarResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::CultivarResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::CultivarResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::CultivarResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Crop::SpeciesParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Crop::SpeciesParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::SpeciesParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::SpeciesParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::SpeciesParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Crop::SpeciesResults
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Crop::SpeciesResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Crop::SpeciesResults::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Crop::SpeciesResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Crop::SpeciesResults::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Capability::Server::DispatchCallResult Service::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x8ddcc2b6c0386bc4ull:
      return dispatchCallInternal(methodId, context);
    case 0xb2afd1cb599c48d5ull:
      return  ::mas::schema::common::Identifiable::Server::dispatchCallInternal(methodId, context);
    case 0xca7b4bd1600633b8ull:
      return  ::mas::schema::registry::Registry::Server::dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("crop.capnp:Service", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Service::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "crop.capnp:Service",
          0x8ddcc2b6c0386bc4ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Service
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Service::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Service::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

