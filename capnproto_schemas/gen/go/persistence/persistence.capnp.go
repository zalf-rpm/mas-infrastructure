// Code generated by capnpc-go. DO NOT EDIT.

package persistence

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	strconv "strconv"
)

type VatId struct{ capnp.Struct }

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xe10a5d74d58bd18d

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId{root.Struct()}, err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xe10a5d74d58bd18d, s.Struct)
	return str
}

func (s VatId) PublicKey0() uint64 {
	return s.Struct.Uint64(0)
}

func (s VatId) SetPublicKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s VatId) PublicKey1() uint64 {
	return s.Struct.Uint64(8)
}

func (s VatId) SetPublicKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s VatId) PublicKey2() uint64 {
	return s.Struct.Uint64(16)
}

func (s VatId) SetPublicKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s VatId) PublicKey3() uint64 {
	return s.Struct.Uint64(24)
}

func (s VatId) SetPublicKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// VatId_List is a list of VatId.
type VatId_List struct{ capnp.List }

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return VatId_List{l}, err
}

func (s VatId_List) At(i int) VatId { return VatId{s.List.Struct(i)} }

func (s VatId_List) Set(i int, v VatId) error { return s.List.SetStruct(i, v.Struct) }

func (s VatId_List) String() string {
	str, _ := text.MarshalList(0xe10a5d74d58bd18d, s.List)
	return str
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (p VatId_Future) Struct() (VatId, error) {
	s, err := p.Future.Struct()
	return VatId{s}, err
}

type Address struct{ capnp.Struct }
type Address_ip6 Address
type Address_Which uint16

const (
	Address_Which_ip6  Address_Which = 0
	Address_Which_host Address_Which = 1
)

func (w Address_Which) String() string {
	const s = "ip6host"
	switch w {
	case Address_Which_ip6:
		return s[0:3]
	case Address_Which_host:
		return s[3:7]

	}
	return "Address_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0xfb47810671a05b0d

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.Root()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0xfb47810671a05b0d, s.Struct)
	return str
}

func (s Address) Which() Address_Which {
	return Address_Which(s.Struct.Uint16(18))
}
func (s Address) Ip6() Address_ip6 { return Address_ip6(s) }

func (s Address) SetIp6() {
	s.Struct.SetUint16(18, 0)
}

func (s Address_ip6) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s Address_ip6) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Address_ip6) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s Address_ip6) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Address) Host() (string, error) {
	if s.Struct.Uint16(18) != 1 {
		panic("Which() != host")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasHost() bool {
	if s.Struct.Uint16(18) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Address) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetHost(v string) error {
	s.Struct.SetUint16(18, 1)
	return s.Struct.SetText(0, v)
}

func (s Address) Port() uint16 {
	return s.Struct.Uint16(16)
}

func (s Address) SetPort(v uint16) {
	s.Struct.SetUint16(16, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0xfb47810671a05b0d, s.List)
	return str
}

// Address_Future is a wrapper for a Address promised by a client call.
type Address_Future struct{ *capnp.Future }

func (p Address_Future) Struct() (Address, error) {
	s, err := p.Future.Struct()
	return Address{s}, err
}

func (p Address_Future) Ip6() Address_ip6_Future { return Address_ip6_Future{p.Future} }

// Address_ip6_Future is a wrapper for a Address_ip6 promised by a client call.
type Address_ip6_Future struct{ *capnp.Future }

func (p Address_ip6_Future) Struct() (Address_ip6, error) {
	s, err := p.Future.Struct()
	return Address_ip6{s}, err
}

type VatPath struct{ capnp.Struct }

// VatPath_TypeID is the unique identifier for the type VatPath.
const VatPath_TypeID = 0xd9eccdf2dbc48087

func NewVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func NewRootVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func ReadRootVatPath(msg *capnp.Message) (VatPath, error) {
	root, err := msg.Root()
	return VatPath{root.Struct()}, err
}

func (s VatPath) String() string {
	str, _ := text.Marshal(0xd9eccdf2dbc48087, s.Struct)
	return str
}

func (s VatPath) Id() (VatId, error) {
	p, err := s.Struct.Ptr(0)
	return VatId{Struct: p.Struct()}, err
}

func (s VatPath) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s VatPath) SetId(v VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated VatId struct, preferring placement in s's segment.
func (s VatPath) NewId() (VatId, error) {
	ss, err := NewVatId(s.Struct.Segment())
	if err != nil {
		return VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VatPath) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s VatPath) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s VatPath) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s VatPath) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VatPath_List is a list of VatPath.
type VatPath_List struct{ capnp.List }

// NewVatPath creates a new list of VatPath.
func NewVatPath_List(s *capnp.Segment, sz int32) (VatPath_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VatPath_List{l}, err
}

func (s VatPath_List) At(i int) VatPath { return VatPath{s.List.Struct(i)} }

func (s VatPath_List) Set(i int, v VatPath) error { return s.List.SetStruct(i, v.Struct) }

func (s VatPath_List) String() string {
	str, _ := text.MarshalList(0xd9eccdf2dbc48087, s.List)
	return str
}

// VatPath_Future is a wrapper for a VatPath promised by a client call.
type VatPath_Future struct{ *capnp.Future }

func (p VatPath_Future) Struct() (VatPath, error) {
	s, err := p.Future.Struct()
	return VatPath{s}, err
}

func (p VatPath_Future) Id() VatId_Future {
	return VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p VatPath_Future) Address() Address_Future {
	return Address_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef struct{ capnp.Struct }

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0x886d68271d83de4d

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef{st}, err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef{st}, err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef{root.Struct()}, err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0x886d68271d83de4d, s.Struct)
	return str
}

func (s SturdyRef) Vat() (VatPath, error) {
	p, err := s.Struct.Ptr(0)
	return VatPath{Struct: p.Struct()}, err
}

func (s SturdyRef) HasVat() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetVat(v VatPath) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVat sets the vat field to a newly
// allocated VatPath struct, preferring placement in s's segment.
func (s SturdyRef) NewVat() (VatPath, error) {
	ss, err := NewVatPath(s.Struct.Segment())
	if err != nil {
		return VatPath{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef) LocalRef() (SturdyRef_Token, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef_Token{Struct: p.Struct()}, err
}

func (s SturdyRef) HasLocalRef() bool {
	return s.Struct.HasPtr(1)
}

func (s SturdyRef) SetLocalRef(v SturdyRef_Token) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLocalRef sets the localRef field to a newly
// allocated SturdyRef_Token struct, preferring placement in s's segment.
func (s SturdyRef) NewLocalRef() (SturdyRef_Token, error) {
	ss, err := NewSturdyRef_Token(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Token{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List struct{ capnp.List }

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SturdyRef_List{l}, err
}

func (s SturdyRef_List) At(i int) SturdyRef { return SturdyRef{s.List.Struct(i)} }

func (s SturdyRef_List) Set(i int, v SturdyRef) error { return s.List.SetStruct(i, v.Struct) }

func (s SturdyRef_List) String() string {
	str, _ := text.MarshalList(0x886d68271d83de4d, s.List)
	return str
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (p SturdyRef_Future) Struct() (SturdyRef, error) {
	s, err := p.Future.Struct()
	return SturdyRef{s}, err
}

func (p SturdyRef_Future) Vat() VatPath_Future {
	return VatPath_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Future) LocalRef() SturdyRef_Token_Future {
	return SturdyRef_Token_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef_Owner struct{ capnp.Struct }

// SturdyRef_Owner_TypeID is the unique identifier for the type SturdyRef_Owner.
const SturdyRef_Owner_TypeID = 0xfdd799ed60c87723

func NewSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func NewRootSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func ReadRootSturdyRef_Owner(msg *capnp.Message) (SturdyRef_Owner, error) {
	root, err := msg.Root()
	return SturdyRef_Owner{root.Struct()}, err
}

func (s SturdyRef_Owner) String() string {
	str, _ := text.Marshal(0xfdd799ed60c87723, s.Struct)
	return str
}

func (s SturdyRef_Owner) Guid() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Owner) HasGuid() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Owner) GuidBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Owner) SetGuid(v string) error {
	return s.Struct.SetText(0, v)
}

// SturdyRef_Owner_List is a list of SturdyRef_Owner.
type SturdyRef_Owner_List struct{ capnp.List }

// NewSturdyRef_Owner creates a new list of SturdyRef_Owner.
func NewSturdyRef_Owner_List(s *capnp.Segment, sz int32) (SturdyRef_Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SturdyRef_Owner_List{l}, err
}

func (s SturdyRef_Owner_List) At(i int) SturdyRef_Owner { return SturdyRef_Owner{s.List.Struct(i)} }

func (s SturdyRef_Owner_List) Set(i int, v SturdyRef_Owner) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Owner_List) String() string {
	str, _ := text.MarshalList(0xfdd799ed60c87723, s.List)
	return str
}

// SturdyRef_Owner_Future is a wrapper for a SturdyRef_Owner promised by a client call.
type SturdyRef_Owner_Future struct{ *capnp.Future }

func (p SturdyRef_Owner_Future) Struct() (SturdyRef_Owner, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Owner{s}, err
}

type SturdyRef_Token struct{ capnp.Struct }
type SturdyRef_Token_Which uint16

const (
	SturdyRef_Token_Which_text SturdyRef_Token_Which = 0
	SturdyRef_Token_Which_data SturdyRef_Token_Which = 1
)

func (w SturdyRef_Token_Which) String() string {
	const s = "textdata"
	switch w {
	case SturdyRef_Token_Which_text:
		return s[0:4]
	case SturdyRef_Token_Which_data:
		return s[4:8]

	}
	return "SturdyRef_Token_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_Token_TypeID is the unique identifier for the type SturdyRef_Token.
const SturdyRef_Token_TypeID = 0xfa412bb47f11b488

func NewSturdyRef_Token(s *capnp.Segment) (SturdyRef_Token, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef_Token{st}, err
}

func NewRootSturdyRef_Token(s *capnp.Segment) (SturdyRef_Token, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef_Token{st}, err
}

func ReadRootSturdyRef_Token(msg *capnp.Message) (SturdyRef_Token, error) {
	root, err := msg.Root()
	return SturdyRef_Token{root.Struct()}, err
}

func (s SturdyRef_Token) String() string {
	str, _ := text.Marshal(0xfa412bb47f11b488, s.Struct)
	return str
}

func (s SturdyRef_Token) Which() SturdyRef_Token_Which {
	return SturdyRef_Token_Which(s.Struct.Uint16(0))
}
func (s SturdyRef_Token) Text() (string, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Token) HasText() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Token) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Token) SetText(v string) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetText(0, v)
}

func (s SturdyRef_Token) Data() ([]byte, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != data")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SturdyRef_Token) HasData() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Token) SetData(v []byte) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetData(0, v)
}

// SturdyRef_Token_List is a list of SturdyRef_Token.
type SturdyRef_Token_List struct{ capnp.List }

// NewSturdyRef_Token creates a new list of SturdyRef_Token.
func NewSturdyRef_Token_List(s *capnp.Segment, sz int32) (SturdyRef_Token_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SturdyRef_Token_List{l}, err
}

func (s SturdyRef_Token_List) At(i int) SturdyRef_Token { return SturdyRef_Token{s.List.Struct(i)} }

func (s SturdyRef_Token_List) Set(i int, v SturdyRef_Token) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Token_List) String() string {
	str, _ := text.MarshalList(0xfa412bb47f11b488, s.List)
	return str
}

// SturdyRef_Token_Future is a wrapper for a SturdyRef_Token promised by a client call.
type SturdyRef_Token_Future struct{ *capnp.Future }

func (p SturdyRef_Token_Future) Struct() (SturdyRef_Token, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Token{s}, err
}

type Heartbeat struct{ Client *capnp.Client }

// Heartbeat_TypeID is the unique identifier for the type Heartbeat.
const Heartbeat_TypeID = 0x9fb3bdfad147ca3a

func (c Heartbeat) Beat(ctx context.Context, params func(Heartbeat_beat_Params) error) (Heartbeat_beat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb3bdfad147ca3a,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Heartbeat",
			MethodName:    "beat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Heartbeat_beat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Heartbeat_beat_Results_Future{Future: ans.Future()}, release
}

func (c Heartbeat) AddRef() Heartbeat {
	return Heartbeat{
		Client: c.Client.AddRef(),
	}
}

func (c Heartbeat) Release() {
	c.Client.Release()
}

// A Heartbeat_Server is a Heartbeat with a local implementation.
type Heartbeat_Server interface {
	Beat(context.Context, Heartbeat_beat) error
}

// Heartbeat_NewServer creates a new Server from an implementation of Heartbeat_Server.
func Heartbeat_NewServer(s Heartbeat_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Heartbeat_Methods(nil, s), s, c, policy)
}

// Heartbeat_ServerToClient creates a new Client from an implementation of Heartbeat_Server.
// The caller is responsible for calling Release on the returned Client.
func Heartbeat_ServerToClient(s Heartbeat_Server, policy *server.Policy) Heartbeat {
	return Heartbeat{Client: capnp.NewClient(Heartbeat_NewServer(s, policy))}
}

// Heartbeat_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Heartbeat_Methods(methods []server.Method, s Heartbeat_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb3bdfad147ca3a,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Heartbeat",
			MethodName:    "beat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Beat(ctx, Heartbeat_beat{call})
		},
	})

	return methods
}

// Heartbeat_beat holds the state for a server call to Heartbeat.beat.
// See server.Call for documentation.
type Heartbeat_beat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Heartbeat_beat) Args() Heartbeat_beat_Params {
	return Heartbeat_beat_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Heartbeat_beat) AllocResults() (Heartbeat_beat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Heartbeat_beat_Results{Struct: r}, err
}

type Heartbeat_beat_Params struct{ capnp.Struct }

// Heartbeat_beat_Params_TypeID is the unique identifier for the type Heartbeat_beat_Params.
const Heartbeat_beat_Params_TypeID = 0x8ab68adabfa134ca

func NewHeartbeat_beat_Params(s *capnp.Segment) (Heartbeat_beat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Heartbeat_beat_Params{st}, err
}

func NewRootHeartbeat_beat_Params(s *capnp.Segment) (Heartbeat_beat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Heartbeat_beat_Params{st}, err
}

func ReadRootHeartbeat_beat_Params(msg *capnp.Message) (Heartbeat_beat_Params, error) {
	root, err := msg.Root()
	return Heartbeat_beat_Params{root.Struct()}, err
}

func (s Heartbeat_beat_Params) String() string {
	str, _ := text.Marshal(0x8ab68adabfa134ca, s.Struct)
	return str
}

// Heartbeat_beat_Params_List is a list of Heartbeat_beat_Params.
type Heartbeat_beat_Params_List struct{ capnp.List }

// NewHeartbeat_beat_Params creates a new list of Heartbeat_beat_Params.
func NewHeartbeat_beat_Params_List(s *capnp.Segment, sz int32) (Heartbeat_beat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Heartbeat_beat_Params_List{l}, err
}

func (s Heartbeat_beat_Params_List) At(i int) Heartbeat_beat_Params {
	return Heartbeat_beat_Params{s.List.Struct(i)}
}

func (s Heartbeat_beat_Params_List) Set(i int, v Heartbeat_beat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Heartbeat_beat_Params_List) String() string {
	str, _ := text.MarshalList(0x8ab68adabfa134ca, s.List)
	return str
}

// Heartbeat_beat_Params_Future is a wrapper for a Heartbeat_beat_Params promised by a client call.
type Heartbeat_beat_Params_Future struct{ *capnp.Future }

func (p Heartbeat_beat_Params_Future) Struct() (Heartbeat_beat_Params, error) {
	s, err := p.Future.Struct()
	return Heartbeat_beat_Params{s}, err
}

type Heartbeat_beat_Results struct{ capnp.Struct }

// Heartbeat_beat_Results_TypeID is the unique identifier for the type Heartbeat_beat_Results.
const Heartbeat_beat_Results_TypeID = 0xf43682c2a6e815f8

func NewHeartbeat_beat_Results(s *capnp.Segment) (Heartbeat_beat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Heartbeat_beat_Results{st}, err
}

func NewRootHeartbeat_beat_Results(s *capnp.Segment) (Heartbeat_beat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Heartbeat_beat_Results{st}, err
}

func ReadRootHeartbeat_beat_Results(msg *capnp.Message) (Heartbeat_beat_Results, error) {
	root, err := msg.Root()
	return Heartbeat_beat_Results{root.Struct()}, err
}

func (s Heartbeat_beat_Results) String() string {
	str, _ := text.Marshal(0xf43682c2a6e815f8, s.Struct)
	return str
}

// Heartbeat_beat_Results_List is a list of Heartbeat_beat_Results.
type Heartbeat_beat_Results_List struct{ capnp.List }

// NewHeartbeat_beat_Results creates a new list of Heartbeat_beat_Results.
func NewHeartbeat_beat_Results_List(s *capnp.Segment, sz int32) (Heartbeat_beat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Heartbeat_beat_Results_List{l}, err
}

func (s Heartbeat_beat_Results_List) At(i int) Heartbeat_beat_Results {
	return Heartbeat_beat_Results{s.List.Struct(i)}
}

func (s Heartbeat_beat_Results_List) Set(i int, v Heartbeat_beat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Heartbeat_beat_Results_List) String() string {
	str, _ := text.MarshalList(0xf43682c2a6e815f8, s.List)
	return str
}

// Heartbeat_beat_Results_Future is a wrapper for a Heartbeat_beat_Results promised by a client call.
type Heartbeat_beat_Results_Future struct{ *capnp.Future }

func (p Heartbeat_beat_Results_Future) Struct() (Heartbeat_beat_Results, error) {
	s, err := p.Future.Struct()
	return Heartbeat_beat_Results{s}, err
}

type Persistent struct{ Client *capnp.Client }

// Persistent_TypeID is the unique identifier for the type Persistent.
const Persistent_TypeID = 0xc1a7daa0dc36cb65

func (c Persistent) Save(ctx context.Context, params func(Persistent_SaveParams) error) (Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Persistent) AddRef() Persistent {
	return Persistent{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent) Release() {
	c.Client.Release()
}

// A Persistent_Server is a Persistent with a local implementation.
type Persistent_Server interface {
	Save(context.Context, Persistent_save) error
}

// Persistent_NewServer creates a new Server from an implementation of Persistent_Server.
func Persistent_NewServer(s Persistent_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_Methods(nil, s), s, c, policy)
}

// Persistent_ServerToClient creates a new Client from an implementation of Persistent_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ServerToClient(s Persistent_Server, policy *server.Policy) Persistent {
	return Persistent{Client: capnp.NewClient(Persistent_NewServer(s, policy))}
}

// Persistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_Methods(methods []server.Method, s Persistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, Persistent_save{call})
		},
	})

	return methods
}

// Persistent_save holds the state for a server call to Persistent.save.
// See server.Call for documentation.
type Persistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_save) Args() Persistent_SaveParams {
	return Persistent_SaveParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_save) AllocResults() (Persistent_SaveResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{Struct: r}, err
}

type Persistent_SaveParams struct{ capnp.Struct }

// Persistent_SaveParams_TypeID is the unique identifier for the type Persistent_SaveParams.
const Persistent_SaveParams_TypeID = 0xd5e0aac4225e0343

func NewPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func NewRootPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func ReadRootPersistent_SaveParams(msg *capnp.Message) (Persistent_SaveParams, error) {
	root, err := msg.Root()
	return Persistent_SaveParams{root.Struct()}, err
}

func (s Persistent_SaveParams) String() string {
	str, _ := text.Marshal(0xd5e0aac4225e0343, s.Struct)
	return str
}

func (s Persistent_SaveParams) SealFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Persistent_SaveParams) HasSealFor() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveParams) SetSealFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSealFor sets the sealFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Persistent_SaveParams) NewSealFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveParams_List is a list of Persistent_SaveParams.
type Persistent_SaveParams_List struct{ capnp.List }

// NewPersistent_SaveParams creates a new list of Persistent_SaveParams.
func NewPersistent_SaveParams_List(s *capnp.Segment, sz int32) (Persistent_SaveParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Persistent_SaveParams_List{l}, err
}

func (s Persistent_SaveParams_List) At(i int) Persistent_SaveParams {
	return Persistent_SaveParams{s.List.Struct(i)}
}

func (s Persistent_SaveParams_List) Set(i int, v Persistent_SaveParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveParams_List) String() string {
	str, _ := text.MarshalList(0xd5e0aac4225e0343, s.List)
	return str
}

// Persistent_SaveParams_Future is a wrapper for a Persistent_SaveParams promised by a client call.
type Persistent_SaveParams_Future struct{ *capnp.Future }

func (p Persistent_SaveParams_Future) Struct() (Persistent_SaveParams, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveParams{s}, err
}

func (p Persistent_SaveParams_Future) SealFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(0, nil)}
}

type Persistent_SaveResults struct{ capnp.Struct }

// Persistent_SaveResults_TypeID is the unique identifier for the type Persistent_SaveResults.
const Persistent_SaveResults_TypeID = 0xdc5bd1ef982cec13

func NewPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func NewRootPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func ReadRootPersistent_SaveResults(msg *capnp.Message) (Persistent_SaveResults, error) {
	root, err := msg.Root()
	return Persistent_SaveResults{root.Struct()}, err
}

func (s Persistent_SaveResults) String() string {
	str, _ := text.Marshal(0xdc5bd1ef982cec13, s.Struct)
	return str
}

func (s Persistent_SaveResults) SturdyRef() (SturdyRef, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasSturdyRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveResults) SetSturdyRef(v SturdyRef) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Persistent_SaveResults) UnsaveSR() (SturdyRef, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasUnsaveSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Persistent_SaveResults) SetUnsaveSR(v SturdyRef) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewUnsaveSR sets the unsaveSR field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewUnsaveSR() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveResults_List is a list of Persistent_SaveResults.
type Persistent_SaveResults_List struct{ capnp.List }

// NewPersistent_SaveResults creates a new list of Persistent_SaveResults.
func NewPersistent_SaveResults_List(s *capnp.Segment, sz int32) (Persistent_SaveResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Persistent_SaveResults_List{l}, err
}

func (s Persistent_SaveResults_List) At(i int) Persistent_SaveResults {
	return Persistent_SaveResults{s.List.Struct(i)}
}

func (s Persistent_SaveResults_List) Set(i int, v Persistent_SaveResults) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveResults_List) String() string {
	str, _ := text.MarshalList(0xdc5bd1ef982cec13, s.List)
	return str
}

// Persistent_SaveResults_Future is a wrapper for a Persistent_SaveResults promised by a client call.
type Persistent_SaveResults_Future struct{ *capnp.Future }

func (p Persistent_SaveResults_Future) Struct() (Persistent_SaveResults, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveResults{s}, err
}

func (p Persistent_SaveResults_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}

func (p Persistent_SaveResults_Future) UnsaveSR() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

type Persistent_ReleaseSturdyRef struct{ Client *capnp.Client }

// Persistent_ReleaseSturdyRef_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef.
const Persistent_ReleaseSturdyRef_TypeID = 0x8f700f81169f2e52

func (c Persistent_ReleaseSturdyRef) ReleaseSR(ctx context.Context, params func(Persistent_ReleaseSturdyRef_releaseSR_Params) error) (Persistent_ReleaseSturdyRef_releaseSR_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_ReleaseSturdyRef_releaseSR_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_Future{Future: ans.Future()}, release
}

func (c Persistent_ReleaseSturdyRef) AddRef() Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent_ReleaseSturdyRef) Release() {
	c.Client.Release()
}

// A Persistent_ReleaseSturdyRef_Server is a Persistent_ReleaseSturdyRef with a local implementation.
type Persistent_ReleaseSturdyRef_Server interface {
	ReleaseSR(context.Context, Persistent_ReleaseSturdyRef_releaseSR) error
}

// Persistent_ReleaseSturdyRef_NewServer creates a new Server from an implementation of Persistent_ReleaseSturdyRef_Server.
func Persistent_ReleaseSturdyRef_NewServer(s Persistent_ReleaseSturdyRef_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_ReleaseSturdyRef_Methods(nil, s), s, c, policy)
}

// Persistent_ReleaseSturdyRef_ServerToClient creates a new Client from an implementation of Persistent_ReleaseSturdyRef_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ReleaseSturdyRef_ServerToClient(s Persistent_ReleaseSturdyRef_Server, policy *server.Policy) Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef{Client: capnp.NewClient(Persistent_ReleaseSturdyRef_NewServer(s, policy))}
}

// Persistent_ReleaseSturdyRef_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_ReleaseSturdyRef_Methods(methods []server.Method, s Persistent_ReleaseSturdyRef_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseSR(ctx, Persistent_ReleaseSturdyRef_releaseSR{call})
		},
	})

	return methods
}

// Persistent_ReleaseSturdyRef_releaseSR holds the state for a server call to Persistent_ReleaseSturdyRef.releaseSR.
// See server.Call for documentation.
type Persistent_ReleaseSturdyRef_releaseSR struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_ReleaseSturdyRef_releaseSR) Args() Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_ReleaseSturdyRef_releaseSR) AllocResults() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{Struct: r}, err
}

type Persistent_ReleaseSturdyRef_releaseSR_Params struct{ capnp.Struct }

// Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Params.
const Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID = 0xa4db8c20d9807c15

func NewPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params{st}, err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params{st}, err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Params(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Params{root.Struct()}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) String() string {
	str, _ := text.Marshal(0xa4db8c20d9807c15, s.Struct)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Params.
type Persistent_ReleaseSturdyRef_releaseSR_Params_List struct{ capnp.List }

// NewPersistent_ReleaseSturdyRef_releaseSR_Params creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Params.
func NewPersistent_ReleaseSturdyRef_releaseSR_Params_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Persistent_ReleaseSturdyRef_releaseSR_Params_List{l}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) At(i int) Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params{s.List.Struct(i)}
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) Set(i int, v Persistent_ReleaseSturdyRef_releaseSR_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) String() string {
	str, _ := text.MarshalList(0xa4db8c20d9807c15, s.List)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Params promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Params_Future struct{ *capnp.Future }

func (p Persistent_ReleaseSturdyRef_releaseSR_Params_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	s, err := p.Future.Struct()
	return Persistent_ReleaseSturdyRef_releaseSR_Params{s}, err
}

type Persistent_ReleaseSturdyRef_releaseSR_Results struct{ capnp.Struct }

// Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Results.
const Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID = 0x932d6ee32410e853

func NewPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{st}, err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{st}, err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Results(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Results{root.Struct()}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) String() string {
	str, _ := text.Marshal(0x932d6ee32410e853, s.Struct)
	return str
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Results.
type Persistent_ReleaseSturdyRef_releaseSR_Results_List struct{ capnp.List }

// NewPersistent_ReleaseSturdyRef_releaseSR_Results creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Results.
func NewPersistent_ReleaseSturdyRef_releaseSR_Results_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_List{l}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) At(i int) Persistent_ReleaseSturdyRef_releaseSR_Results {
	return Persistent_ReleaseSturdyRef_releaseSR_Results{s.List.Struct(i)}
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) Set(i int, v Persistent_ReleaseSturdyRef_releaseSR_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) String() string {
	str, _ := text.MarshalList(0x932d6ee32410e853, s.List)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Results promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Results_Future struct{ *capnp.Future }

func (p Persistent_ReleaseSturdyRef_releaseSR_Results_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	s, err := p.Future.Struct()
	return Persistent_ReleaseSturdyRef_releaseSR_Results{s}, err
}

type Restorer struct{ Client *capnp.Client }

// Restorer_TypeID is the unique identifier for the type Restorer.
const Restorer_TypeID = 0x9fb6218427d92e3c

func (c Restorer) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c Restorer) AddRef() Restorer {
	return Restorer{
		Client: c.Client.AddRef(),
	}
}

func (c Restorer) Release() {
	c.Client.Release()
}

// A Restorer_Server is a Restorer with a local implementation.
type Restorer_Server interface {
	Restore(context.Context, Restorer_restore) error
}

// Restorer_NewServer creates a new Server from an implementation of Restorer_Server.
func Restorer_NewServer(s Restorer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Restorer_Methods(nil, s), s, c, policy)
}

// Restorer_ServerToClient creates a new Client from an implementation of Restorer_Server.
// The caller is responsible for calling Release on the returned Client.
func Restorer_ServerToClient(s Restorer_Server, policy *server.Policy) Restorer {
	return Restorer{Client: capnp.NewClient(Restorer_NewServer(s, policy))}
}

// Restorer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Restorer_Methods(methods []server.Method, s Restorer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Restorer_restore holds the state for a server call to Restorer.restore.
// See server.Call for documentation.
type Restorer_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Restorer_restore) Args() Restorer_RestoreParams {
	return Restorer_RestoreParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Restorer_restore) AllocResults() (Restorer_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{Struct: r}, err
}

type Restorer_RestoreParams struct{ capnp.Struct }

// Restorer_RestoreParams_TypeID is the unique identifier for the type Restorer_RestoreParams.
const Restorer_RestoreParams_TypeID = 0xc541e5764a37d73a

func NewRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func NewRootRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func ReadRootRestorer_RestoreParams(msg *capnp.Message) (Restorer_RestoreParams, error) {
	root, err := msg.Root()
	return Restorer_RestoreParams{root.Struct()}, err
}

func (s Restorer_RestoreParams) String() string {
	str, _ := text.Marshal(0xc541e5764a37d73a, s.Struct)
	return str
}

func (s Restorer_RestoreParams) LocalRef() (SturdyRef_Token, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Token{Struct: p.Struct()}, err
}

func (s Restorer_RestoreParams) HasLocalRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_RestoreParams) SetLocalRef(v SturdyRef_Token) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewLocalRef sets the localRef field to a newly
// allocated SturdyRef_Token struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewLocalRef() (SturdyRef_Token, error) {
	ss, err := NewSturdyRef_Token(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Token{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Restorer_RestoreParams) SealedBy() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Restorer_RestoreParams) HasSealedBy() bool {
	return s.Struct.HasPtr(1)
}

func (s Restorer_RestoreParams) SetSealedBy(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSealedBy sets the sealedBy field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewSealedBy() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Restorer_RestoreParams_List is a list of Restorer_RestoreParams.
type Restorer_RestoreParams_List struct{ capnp.List }

// NewRestorer_RestoreParams creates a new list of Restorer_RestoreParams.
func NewRestorer_RestoreParams_List(s *capnp.Segment, sz int32) (Restorer_RestoreParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Restorer_RestoreParams_List{l}, err
}

func (s Restorer_RestoreParams_List) At(i int) Restorer_RestoreParams {
	return Restorer_RestoreParams{s.List.Struct(i)}
}

func (s Restorer_RestoreParams_List) Set(i int, v Restorer_RestoreParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_RestoreParams_List) String() string {
	str, _ := text.MarshalList(0xc541e5764a37d73a, s.List)
	return str
}

// Restorer_RestoreParams_Future is a wrapper for a Restorer_RestoreParams promised by a client call.
type Restorer_RestoreParams_Future struct{ *capnp.Future }

func (p Restorer_RestoreParams_Future) Struct() (Restorer_RestoreParams, error) {
	s, err := p.Future.Struct()
	return Restorer_RestoreParams{s}, err
}

func (p Restorer_RestoreParams_Future) LocalRef() SturdyRef_Token_Future {
	return SturdyRef_Token_Future{Future: p.Future.Field(0, nil)}
}

func (p Restorer_RestoreParams_Future) SealedBy() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(1, nil)}
}

type Restorer_restore_Results struct{ capnp.Struct }

// Restorer_restore_Results_TypeID is the unique identifier for the type Restorer_restore_Results.
const Restorer_restore_Results_TypeID = 0xda966d1d252e4d25

func NewRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func NewRootRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func ReadRootRestorer_restore_Results(msg *capnp.Message) (Restorer_restore_Results, error) {
	root, err := msg.Root()
	return Restorer_restore_Results{root.Struct()}, err
}

func (s Restorer_restore_Results) String() string {
	str, _ := text.Marshal(0xda966d1d252e4d25, s.Struct)
	return str
}

func (s Restorer_restore_Results) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_restore_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_restore_Results) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Restorer_restore_Results_List is a list of Restorer_restore_Results.
type Restorer_restore_Results_List struct{ capnp.List }

// NewRestorer_restore_Results creates a new list of Restorer_restore_Results.
func NewRestorer_restore_Results_List(s *capnp.Segment, sz int32) (Restorer_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Restorer_restore_Results_List{l}, err
}

func (s Restorer_restore_Results_List) At(i int) Restorer_restore_Results {
	return Restorer_restore_Results{s.List.Struct(i)}
}

func (s Restorer_restore_Results_List) Set(i int, v Restorer_restore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_restore_Results_List) String() string {
	str, _ := text.MarshalList(0xda966d1d252e4d25, s.List)
	return str
}

// Restorer_restore_Results_Future is a wrapper for a Restorer_restore_Results promised by a client call.
type Restorer_restore_Results_Future struct{ *capnp.Future }

func (p Restorer_restore_Results_Future) Struct() (Restorer_restore_Results, error) {
	s, err := p.Future.Struct()
	return Restorer_restore_Results{s}, err
}

func (p Restorer_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type HostPortResolver struct{ Client *capnp.Client }

// HostPortResolver_TypeID is the unique identifier for the type HostPortResolver.
const HostPortResolver_TypeID = 0xaa8d91fab6d01d9f

func (c HostPortResolver) ResolveIdent(ctx context.Context, params func(HostPortResolver_ResolveIdent_Params) error) (HostPortResolver_ResolveIdent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_ResolveIdent_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_ResolveIdent_Results_Future{Future: ans.Future()}, release
}
func (c HostPortResolver) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c HostPortResolver) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver) AddRef() HostPortResolver {
	return HostPortResolver{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver) Release() {
	c.Client.Release()
}

// A HostPortResolver_Server is a HostPortResolver with a local implementation.
type HostPortResolver_Server interface {
	ResolveIdent(context.Context, HostPortResolver_ResolveIdent) error

	Info(context.Context, common.Identifiable_info) error

	Restore(context.Context, Restorer_restore) error
}

// HostPortResolver_NewServer creates a new Server from an implementation of HostPortResolver_Server.
func HostPortResolver_NewServer(s HostPortResolver_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Methods(nil, s), s, c, policy)
}

// HostPortResolver_ServerToClient creates a new Client from an implementation of HostPortResolver_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_ServerToClient(s HostPortResolver_Server, policy *server.Policy) HostPortResolver {
	return HostPortResolver{Client: capnp.NewClient(HostPortResolver_NewServer(s, policy))}
}

// HostPortResolver_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Methods(methods []server.Method, s HostPortResolver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ResolveIdent(ctx, HostPortResolver_ResolveIdent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// HostPortResolver_ResolveIdent holds the state for a server call to HostPortResolver.ResolveIdent.
// See server.Call for documentation.
type HostPortResolver_ResolveIdent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_ResolveIdent) Args() HostPortResolver_ResolveIdent_Params {
	return HostPortResolver_ResolveIdent_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_ResolveIdent) AllocResults() (HostPortResolver_ResolveIdent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Results{Struct: r}, err
}

type HostPortResolver_Registrar struct{ Client *capnp.Client }

// HostPortResolver_Registrar_TypeID is the unique identifier for the type HostPortResolver_Registrar.
const HostPortResolver_Registrar_TypeID = 0xb0caf775704690b2

func (c HostPortResolver_Registrar) Register(ctx context.Context, params func(HostPortResolver_Registrar_RegisterParams) error) (HostPortResolver_Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_RegisterParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_Registrar_register_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver_Registrar) AddRef() HostPortResolver_Registrar {
	return HostPortResolver_Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver_Registrar) Release() {
	c.Client.Release()
}

// A HostPortResolver_Registrar_Server is a HostPortResolver_Registrar with a local implementation.
type HostPortResolver_Registrar_Server interface {
	Register(context.Context, HostPortResolver_Registrar_register) error
}

// HostPortResolver_Registrar_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Server.
func HostPortResolver_Registrar_NewServer(s HostPortResolver_Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Methods(nil, s), s, c, policy)
}

// HostPortResolver_Registrar_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_ServerToClient(s HostPortResolver_Registrar_Server, policy *server.Policy) HostPortResolver_Registrar {
	return HostPortResolver_Registrar{Client: capnp.NewClient(HostPortResolver_Registrar_NewServer(s, policy))}
}

// HostPortResolver_Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Methods(methods []server.Method, s HostPortResolver_Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, HostPortResolver_Registrar_register{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_register holds the state for a server call to HostPortResolver_Registrar.register.
// See server.Call for documentation.
type HostPortResolver_Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_register) Args() HostPortResolver_Registrar_RegisterParams {
	return HostPortResolver_Registrar_RegisterParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_register) AllocResults() (HostPortResolver_Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{Struct: r}, err
}

type HostPortResolver_Registrar_RegisterParams struct{ capnp.Struct }

// HostPortResolver_Registrar_RegisterParams_TypeID is the unique identifier for the type HostPortResolver_Registrar_RegisterParams.
const HostPortResolver_Registrar_RegisterParams_TypeID = 0xbf018f62ff460d0f

func NewHostPortResolver_Registrar_RegisterParams(s *capnp.Segment) (HostPortResolver_Registrar_RegisterParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_RegisterParams{st}, err
}

func NewRootHostPortResolver_Registrar_RegisterParams(s *capnp.Segment) (HostPortResolver_Registrar_RegisterParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_RegisterParams{st}, err
}

func ReadRootHostPortResolver_Registrar_RegisterParams(msg *capnp.Message) (HostPortResolver_Registrar_RegisterParams, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_RegisterParams{root.Struct()}, err
}

func (s HostPortResolver_Registrar_RegisterParams) String() string {
	str, _ := text.Marshal(0xbf018f62ff460d0f, s.Struct)
	return str
}

func (s HostPortResolver_Registrar_RegisterParams) Base64VatId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasBase64VatId() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_Registrar_RegisterParams) Base64VatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetBase64VatId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Host() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasHost() bool {
	return s.Struct.HasPtr(1)
}

func (s HostPortResolver_Registrar_RegisterParams) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetHost(v string) error {
	return s.Struct.SetText(1, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostPortResolver_Registrar_RegisterParams) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Alias() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasAlias() bool {
	return s.Struct.HasPtr(2)
}

func (s HostPortResolver_Registrar_RegisterParams) AliasBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetAlias(v string) error {
	return s.Struct.SetText(2, v)
}

// HostPortResolver_Registrar_RegisterParams_List is a list of HostPortResolver_Registrar_RegisterParams.
type HostPortResolver_Registrar_RegisterParams_List struct{ capnp.List }

// NewHostPortResolver_Registrar_RegisterParams creates a new list of HostPortResolver_Registrar_RegisterParams.
func NewHostPortResolver_Registrar_RegisterParams_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_RegisterParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return HostPortResolver_Registrar_RegisterParams_List{l}, err
}

func (s HostPortResolver_Registrar_RegisterParams_List) At(i int) HostPortResolver_Registrar_RegisterParams {
	return HostPortResolver_Registrar_RegisterParams{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_RegisterParams_List) Set(i int, v HostPortResolver_Registrar_RegisterParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_RegisterParams_List) String() string {
	str, _ := text.MarshalList(0xbf018f62ff460d0f, s.List)
	return str
}

// HostPortResolver_Registrar_RegisterParams_Future is a wrapper for a HostPortResolver_Registrar_RegisterParams promised by a client call.
type HostPortResolver_Registrar_RegisterParams_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_RegisterParams_Future) Struct() (HostPortResolver_Registrar_RegisterParams, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_RegisterParams{s}, err
}

type HostPortResolver_Registrar_register_Results struct{ capnp.Struct }

// HostPortResolver_Registrar_register_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_register_Results.
const HostPortResolver_Registrar_register_Results_TypeID = 0xfafc816633f98bb9

func NewHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{st}, err
}

func NewRootHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{st}, err
}

func ReadRootHostPortResolver_Registrar_register_Results(msg *capnp.Message) (HostPortResolver_Registrar_register_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_register_Results{root.Struct()}, err
}

func (s HostPortResolver_Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xfafc816633f98bb9, s.Struct)
	return str
}

func (s HostPortResolver_Registrar_register_Results) Heartbeat() Heartbeat {
	p, _ := s.Struct.Ptr(0)
	return Heartbeat{Client: p.Interface().Client()}
}

func (s HostPortResolver_Registrar_register_Results) HasHeartbeat() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_Registrar_register_Results) SetHeartbeat(v Heartbeat) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s HostPortResolver_Registrar_register_Results) SecsHeartbeatInterval() uint32 {
	return s.Struct.Uint32(0)
}

func (s HostPortResolver_Registrar_register_Results) SetSecsHeartbeatInterval(v uint32) {
	s.Struct.SetUint32(0, v)
}

// HostPortResolver_Registrar_register_Results_List is a list of HostPortResolver_Registrar_register_Results.
type HostPortResolver_Registrar_register_Results_List struct{ capnp.List }

// NewHostPortResolver_Registrar_register_Results creates a new list of HostPortResolver_Registrar_register_Results.
func NewHostPortResolver_Registrar_register_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HostPortResolver_Registrar_register_Results_List{l}, err
}

func (s HostPortResolver_Registrar_register_Results_List) At(i int) HostPortResolver_Registrar_register_Results {
	return HostPortResolver_Registrar_register_Results{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_register_Results_List) Set(i int, v HostPortResolver_Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xfafc816633f98bb9, s.List)
	return str
}

// HostPortResolver_Registrar_register_Results_Future is a wrapper for a HostPortResolver_Registrar_register_Results promised by a client call.
type HostPortResolver_Registrar_register_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_register_Results_Future) Struct() (HostPortResolver_Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_register_Results{s}, err
}

func (p HostPortResolver_Registrar_register_Results_Future) Heartbeat() Heartbeat {
	return Heartbeat{Client: p.Future.Field(0, nil).Client()}
}

type HostPortResolver_ResolveIdent_Params struct{ capnp.Struct }

// HostPortResolver_ResolveIdent_Params_TypeID is the unique identifier for the type HostPortResolver_ResolveIdent_Params.
const HostPortResolver_ResolveIdent_Params_TypeID = 0xe6f8966f0f2cbb33

func NewHostPortResolver_ResolveIdent_Params(s *capnp.Segment) (HostPortResolver_ResolveIdent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Params{st}, err
}

func NewRootHostPortResolver_ResolveIdent_Params(s *capnp.Segment) (HostPortResolver_ResolveIdent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Params{st}, err
}

func ReadRootHostPortResolver_ResolveIdent_Params(msg *capnp.Message) (HostPortResolver_ResolveIdent_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_ResolveIdent_Params{root.Struct()}, err
}

func (s HostPortResolver_ResolveIdent_Params) String() string {
	str, _ := text.Marshal(0xe6f8966f0f2cbb33, s.Struct)
	return str
}

func (s HostPortResolver_ResolveIdent_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_ResolveIdent_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_ResolveIdent_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_ResolveIdent_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// HostPortResolver_ResolveIdent_Params_List is a list of HostPortResolver_ResolveIdent_Params.
type HostPortResolver_ResolveIdent_Params_List struct{ capnp.List }

// NewHostPortResolver_ResolveIdent_Params creates a new list of HostPortResolver_ResolveIdent_Params.
func NewHostPortResolver_ResolveIdent_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_ResolveIdent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HostPortResolver_ResolveIdent_Params_List{l}, err
}

func (s HostPortResolver_ResolveIdent_Params_List) At(i int) HostPortResolver_ResolveIdent_Params {
	return HostPortResolver_ResolveIdent_Params{s.List.Struct(i)}
}

func (s HostPortResolver_ResolveIdent_Params_List) Set(i int, v HostPortResolver_ResolveIdent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_ResolveIdent_Params_List) String() string {
	str, _ := text.MarshalList(0xe6f8966f0f2cbb33, s.List)
	return str
}

// HostPortResolver_ResolveIdent_Params_Future is a wrapper for a HostPortResolver_ResolveIdent_Params promised by a client call.
type HostPortResolver_ResolveIdent_Params_Future struct{ *capnp.Future }

func (p HostPortResolver_ResolveIdent_Params_Future) Struct() (HostPortResolver_ResolveIdent_Params, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_ResolveIdent_Params{s}, err
}

type HostPortResolver_ResolveIdent_Results struct{ capnp.Struct }

// HostPortResolver_ResolveIdent_Results_TypeID is the unique identifier for the type HostPortResolver_ResolveIdent_Results.
const HostPortResolver_ResolveIdent_Results_TypeID = 0xfc185f518d220b8c

func NewHostPortResolver_ResolveIdent_Results(s *capnp.Segment) (HostPortResolver_ResolveIdent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Results{st}, err
}

func NewRootHostPortResolver_ResolveIdent_Results(s *capnp.Segment) (HostPortResolver_ResolveIdent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Results{st}, err
}

func ReadRootHostPortResolver_ResolveIdent_Results(msg *capnp.Message) (HostPortResolver_ResolveIdent_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_ResolveIdent_Results{root.Struct()}, err
}

func (s HostPortResolver_ResolveIdent_Results) String() string {
	str, _ := text.Marshal(0xfc185f518d220b8c, s.Struct)
	return str
}

func (s HostPortResolver_ResolveIdent_Results) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_ResolveIdent_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_ResolveIdent_Results) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_ResolveIdent_Results) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HostPortResolver_ResolveIdent_Results) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostPortResolver_ResolveIdent_Results) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

// HostPortResolver_ResolveIdent_Results_List is a list of HostPortResolver_ResolveIdent_Results.
type HostPortResolver_ResolveIdent_Results_List struct{ capnp.List }

// NewHostPortResolver_ResolveIdent_Results creates a new list of HostPortResolver_ResolveIdent_Results.
func NewHostPortResolver_ResolveIdent_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_ResolveIdent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HostPortResolver_ResolveIdent_Results_List{l}, err
}

func (s HostPortResolver_ResolveIdent_Results_List) At(i int) HostPortResolver_ResolveIdent_Results {
	return HostPortResolver_ResolveIdent_Results{s.List.Struct(i)}
}

func (s HostPortResolver_ResolveIdent_Results_List) Set(i int, v HostPortResolver_ResolveIdent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_ResolveIdent_Results_List) String() string {
	str, _ := text.MarshalList(0xfc185f518d220b8c, s.List)
	return str
}

// HostPortResolver_ResolveIdent_Results_Future is a wrapper for a HostPortResolver_ResolveIdent_Results promised by a client call.
type HostPortResolver_ResolveIdent_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_ResolveIdent_Results_Future) Struct() (HostPortResolver_ResolveIdent_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_ResolveIdent_Results{s}, err
}

type Gateway struct{ Client *capnp.Client }

// Gateway_TypeID is the unique identifier for the type Gateway.
const Gateway_TypeID = 0x8f9c2c0a602f27ed

func (c Gateway) Register(ctx context.Context, params func(Gateway_register_Params) error) (Gateway_RegResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f9c2c0a602f27ed,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Gateway",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Gateway_register_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Gateway_RegResults_Future{Future: ans.Future()}, release
}
func (c Gateway) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Gateway) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c Gateway) AddRef() Gateway {
	return Gateway{
		Client: c.Client.AddRef(),
	}
}

func (c Gateway) Release() {
	c.Client.Release()
}

// A Gateway_Server is a Gateway with a local implementation.
type Gateway_Server interface {
	Register(context.Context, Gateway_register) error

	Info(context.Context, common.Identifiable_info) error

	Restore(context.Context, Restorer_restore) error
}

// Gateway_NewServer creates a new Server from an implementation of Gateway_Server.
func Gateway_NewServer(s Gateway_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Gateway_Methods(nil, s), s, c, policy)
}

// Gateway_ServerToClient creates a new Client from an implementation of Gateway_Server.
// The caller is responsible for calling Release on the returned Client.
func Gateway_ServerToClient(s Gateway_Server, policy *server.Policy) Gateway {
	return Gateway{Client: capnp.NewClient(Gateway_NewServer(s, policy))}
}

// Gateway_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Gateway_Methods(methods []server.Method, s Gateway_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f9c2c0a602f27ed,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Gateway",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Gateway_register{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Gateway_register holds the state for a server call to Gateway.register.
// See server.Call for documentation.
type Gateway_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Gateway_register) Args() Gateway_register_Params {
	return Gateway_register_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Gateway_register) AllocResults() (Gateway_RegResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Gateway_RegResults{Struct: r}, err
}

type Gateway_RegResults struct{ capnp.Struct }

// Gateway_RegResults_TypeID is the unique identifier for the type Gateway_RegResults.
const Gateway_RegResults_TypeID = 0xa232c65d79e97faa

func NewGateway_RegResults(s *capnp.Segment) (Gateway_RegResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Gateway_RegResults{st}, err
}

func NewRootGateway_RegResults(s *capnp.Segment) (Gateway_RegResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Gateway_RegResults{st}, err
}

func ReadRootGateway_RegResults(msg *capnp.Message) (Gateway_RegResults, error) {
	root, err := msg.Root()
	return Gateway_RegResults{root.Struct()}, err
}

func (s Gateway_RegResults) String() string {
	str, _ := text.Marshal(0xa232c65d79e97faa, s.Struct)
	return str
}

func (s Gateway_RegResults) SturdyRef() (SturdyRef, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Gateway_RegResults) HasSturdyRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Gateway_RegResults) SetSturdyRef(v SturdyRef) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Gateway_RegResults) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Gateway_RegResults) Heartbeat() Heartbeat {
	p, _ := s.Struct.Ptr(1)
	return Heartbeat{Client: p.Interface().Client()}
}

func (s Gateway_RegResults) HasHeartbeat() bool {
	return s.Struct.HasPtr(1)
}

func (s Gateway_RegResults) SetHeartbeat(v Heartbeat) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Gateway_RegResults) SecsHeartbeatInterval() uint32 {
	return s.Struct.Uint32(0)
}

func (s Gateway_RegResults) SetSecsHeartbeatInterval(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Gateway_RegResults_List is a list of Gateway_RegResults.
type Gateway_RegResults_List struct{ capnp.List }

// NewGateway_RegResults creates a new list of Gateway_RegResults.
func NewGateway_RegResults_List(s *capnp.Segment, sz int32) (Gateway_RegResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Gateway_RegResults_List{l}, err
}

func (s Gateway_RegResults_List) At(i int) Gateway_RegResults {
	return Gateway_RegResults{s.List.Struct(i)}
}

func (s Gateway_RegResults_List) Set(i int, v Gateway_RegResults) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Gateway_RegResults_List) String() string {
	str, _ := text.MarshalList(0xa232c65d79e97faa, s.List)
	return str
}

// Gateway_RegResults_Future is a wrapper for a Gateway_RegResults promised by a client call.
type Gateway_RegResults_Future struct{ *capnp.Future }

func (p Gateway_RegResults_Future) Struct() (Gateway_RegResults, error) {
	s, err := p.Future.Struct()
	return Gateway_RegResults{s}, err
}

func (p Gateway_RegResults_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}

func (p Gateway_RegResults_Future) Heartbeat() Heartbeat {
	return Heartbeat{Client: p.Future.Field(1, nil).Client()}
}

type Gateway_register_Params struct{ capnp.Struct }

// Gateway_register_Params_TypeID is the unique identifier for the type Gateway_register_Params.
const Gateway_register_Params_TypeID = 0xc78c1529af44abab

func NewGateway_register_Params(s *capnp.Segment) (Gateway_register_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Gateway_register_Params{st}, err
}

func NewRootGateway_register_Params(s *capnp.Segment) (Gateway_register_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Gateway_register_Params{st}, err
}

func ReadRootGateway_register_Params(msg *capnp.Message) (Gateway_register_Params, error) {
	root, err := msg.Root()
	return Gateway_register_Params{root.Struct()}, err
}

func (s Gateway_register_Params) String() string {
	str, _ := text.Marshal(0xc78c1529af44abab, s.Struct)
	return str
}

func (s Gateway_register_Params) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Gateway_register_Params) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Gateway_register_Params) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Gateway_register_Params_List is a list of Gateway_register_Params.
type Gateway_register_Params_List struct{ capnp.List }

// NewGateway_register_Params creates a new list of Gateway_register_Params.
func NewGateway_register_Params_List(s *capnp.Segment, sz int32) (Gateway_register_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Gateway_register_Params_List{l}, err
}

func (s Gateway_register_Params_List) At(i int) Gateway_register_Params {
	return Gateway_register_Params{s.List.Struct(i)}
}

func (s Gateway_register_Params_List) Set(i int, v Gateway_register_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Gateway_register_Params_List) String() string {
	str, _ := text.MarshalList(0xc78c1529af44abab, s.List)
	return str
}

// Gateway_register_Params_Future is a wrapper for a Gateway_register_Params promised by a client call.
type Gateway_register_Params_Future struct{ *capnp.Future }

func (p Gateway_register_Params_Future) Struct() (Gateway_register_Params, error) {
	s, err := p.Future.Struct()
	return Gateway_register_Params{s}, err
}

func (p Gateway_register_Params_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_855efed3475f6b26 = "x\xda\xacX}l[W\x15?\xe7=;\xcfN\xec" +
	"877a\x10\x16\x85\xa5)YB\xeb\xb5I\x96\xa1" +
	"jR\x9b\xb0\xd6M \xc2\xd7\x81i\xcd\xd4\xad/\xf1" +
	"M\xe3\xcd\xb1\xdd\xf7\x9e\x93z\x1a\xca\x0a\x9bX\xbbF" +
	"% M\x14\xb5\xea\x86\xf8\xd0:Uee\xabT\xa1" +
	"jZ5\xbe:!\xd1\xa2jj7!(\x02\xd6i" +
	"\x15Z\x85\xc4(\xdb\x1e\xba\xef\xf9}\xc4q\x12\x86\xfa" +
	"Od\xdfw\xde9\xe7\xfe\xce\xef\xfc\xceq6t\x05" +
	"\xb7H\x1b\x83\xf9(\x00;\x12\xac1G\xfe\xf8\xad\xd6" +
	"\xce\xa9\xe9\xa7\x814\xa2\xf9\xf9G\x1fN\xfc\xe1\xe3\x87" +
	"\x9e\x82\xa0\xa4\x00\xd0\xa35W\xe9\x0b5\x9d\x00\xf4l" +
	"\xcd,\xa0y\xbe\xef\xf9W\xaf\x1c8}\x00\xc8\xed\x08" +
	"\x10P\x00z[\x95A\x84\x80\x99\x8a\x1f\xfb\xd4\xbeX" +
	"\xe1\x10\x90V\xd9\xe4o\xf4\xbf\xfd\xdc\x95\x9f\xbe\x06\x80" +
	"\xbdAEC\xfa\x19ExkV\x12\x94\x8bO\xe6\xf5" +
	"\xce\xbbv\xd5\xae;r\x08H\xa3\xec\xc5\x04\xa4#\xca" +
	"E\xbaC\xb9\x0d\x80r%A\x17\x94N\x003s`" +
	"\xff\x9d\x81\x9d\xa7\x0e\x01kA\xd9\x8c>\xf8\xdc\x9e\x9a" +
	"}\x89\xff@3*\x08@\xf7+7\x00\xe9\xbc\"\xd2" +
	"\x1b}\xa7\xa1\xe3/\xb9\xf5\xdf\x03\x16G'\xbfk\xca" +
	"\x0d\x04\xa4\x1f)\x9b\x01\xcdM\xe7\x13\x17n\x9e\xfd\xf9" +
	"\xb1%q[CWiWH$\xb96\x94\xa0#\xe2" +
	"\x93yo\xfcr\xe7\x93w\x9c^j|w\xe8\x0a\x1d" +
	"\x08\x89$GB\x09Z\xb4\x8c\x8f\xcf]+\xed\xfcU" +
	"\xcf\x0fE\x92\xe8\xdd\xcf\x82\xb1wg\xa8\x1b\xe9\xb4\xe5" +
	">\x13:\x09h6?\xfe\xc4\xe5\xcf\x1d|\xebG@" +
	"\xe2N\x9e$\xfc\xae\xc0\xf1X\xeb\xefO\xdf\\\x98?" +
	"^\x19\xb47\x18nA\xda\x1c\x16Q\xef\x08'\xe8\x9e" +
	"\xb0\x80\xe6\xd4w\xb6\x15\x8a\xff:\xff3 kd\xef" +
	"U\xc0\xdeL\xf8\x11\xa4\xdf\xb0\xac\xf7\x87\x13\xf4\x95\xb0" +
	"\xc81\x16\xddf\x8e\x1f\xc2W\x81\xadG\xf4\xde\x0d\xca" +
	"\"\xfe\xd1\xf0U\xa4g\x84\x1d}%\xfcw@\xaf\x88" +
	"\x95\xd7\x9f\xaf}\x97\x1e\xae\xbd\x07\x80\xfe\xb66A\xdf" +
	"\xaf\x15\xae7\xbdy\xcf\xf0\xcc_\x07~\x09\xe4\xb3\xe8" +
	"\x01g\xdf\xfer\xed0\xd2\xeb\xc2\x8c^\xab\x15ez" +
	"\xf1\xc5\xfbNv5\x1f\xfc5\x90\x16\x04\x08\xa20\x1a" +
	"\xa9K\x892\xed\xa8\x13e\xfa\x92\xfcP\xfb\xeb\xc7\xff" +
	"t\x09H\xab/\x0f\xdb\xb0T7\x88t\x7f\x9d\xf0\xf6" +
	"\x94e\xfc\xed'^\x7f\xeb\xc6\xef\xde\xbb\\\x8d\xbf?" +
	"\xae\xbbH_\xb2lO\xd4\x89\xc8kG\xe2k[\xa7" +
	"\x9f\xbd\"\xd2t\"\x87#c\"rsD8\xa3\xef" +
	"\xad\xfb\xfe?.<\xf8vEd\xeb\x1ewG\x86\x91" +
	"\x0eE\x84\xb7\xad\x11\xe1m\xfe\xc23\x97\x8c\x9d\xb5\x7f" +
	"\x06\xd6\x88\x01/\xb4('}!r\x8e\xbed\xd9\x9e" +
	"\x88\x084{\x7f\xb1.\x96\x7f\xf6\x83\xbf\x01Y\xe3F" +
	"^\x88~WD~>*\"\x7f\xd0\xfc\xceO\xce}" +
	"\xb3\xff\x9f\xbe\xd6z-:,(\xf1\xf4\xcbd\xee\xe5" +
	"/\x0c\xdc\x04v;\xa2\xd7\xae[Q\x91\x00zOD" +
	"\x1b\x91\x9e\x8d\x8aHg\xa2\"\xab3\xcf\xfc\xbbwr" +
	"\xdf\x877\xad*;\xa1\x9a\xeb\xad.\xe8\xaa\x17\x16n" +
	"\x0b\xb1F\xf4\x95V8\xc40]\xa8\xbfH\x8f\xd6\x0b" +
	"\x7f\x87\xeb\x05W\x0f\xd6\xb5\xcf\xb3\x87?\xfd!\xb05" +
	">\x7f\xb1\x1f\x08\x7fkc\xc2\xdf\x9a\xd9\xdf\xec\xba~" +
	"\xf8\xcd\x8fD\xea^~\xb6\xe1\xbeX#\xd2\x85\x98p" +
	"7\x1f\xdb\x0c\x8f\x99\x05\xae\xe9\x19\xdd\xe0Rn\x82\xc7" +
	"'\xd4B\xae\xb0i\xd4(j\xe9\x92\x92\xe2\x93,\x84" +
	"~w\xe1\x1e\xef\xf2$\xd8\xd3\xf6\xd5\xd9\x1c\xd7\xda\xbe" +
	"\x96\x7f\x94\xe7XH\x0e\x00\x04\x10\x80t\xb5\x03\xb0\x0e" +
	"\x19\xd9\x06\x09\x09b\x93\xc8\x92\xac\x1f\x06`\xebdd" +
	"_\x94P\x99Q\x0dl\xf0\x88\x02\x88\x0d\x80f6?" +
	"\xa1fS|\x12\x00\xb0\xc1\x0bT~\xea\xe4\x19\xf6\xf2" +
	"\xdc\xceU\xcd\x18\xe7\xaa\x11\x17\x7f:\x92\xaa\xa6N\xeb" +
	"\xe0\x18zvI\xe7\xc4\x88\xa7x\x96\xab:\x177l" +
	"K\x97R|2\x89\xc8\x02r\x10\xc0\xd5\x00tT\x8b" +
	"\x90AB\xda\x00\xc9zeN\xb3\xdfc\x01\x94\xcc\xf7" +
	"\xe7\xef\xba\xadq\xd7\x99s\xc0\x02\x12\x0e4!F\x00" +
	"\x08\xa6\xcc\xb2\xcd(`\x0a`\x0b&\x11\xab\x81\x9bP" +
	"\x0d>\xabb\x89\x05\x10=\x95\"8f\xa6\xf8\xee\x14" +
	"\xd7\x8bY\x90\x0d\xbd\x9c\x93\xd3\x99\xe8\x18\x122\x0c\x12" +
	"\x09+\xa6\xc6w\x0b\xc7\x1a\x88PV\x99.m?\xb2" +
	"\xe3\x8d\x0b'O\x81_*\x01\xaa\xe50\x90Nk\\" +
	"o\xd3\xe3\x99B\xbf\xbfp\x83\xd5\x0a'\x0e\xef\x94\x91" +
	"\xf5I8\x97\xcd\xcfr\xad\xbf\x0f\xc3 a\x18p\xae" +
	"X(\xf8\xbf\xbb\xb1jV\x03\xdf\xc2>^F\xac#" +
	"\xc5\xdb\xf4b\xd6\xba\xb5\x93KT\x84\x0d\xc9\xc8\x9a$" +
	"\x9c\xd3\x8b\x13\x13\\\xd7\x11AB\x84\xaa\xb0\xda\\P" +
	"\xb8jx\x15u\xa6#:\xbdLH7H$\xa8\xc4" +
	"\x04_\x96\xadP\x8a\xebF^\x93\xb9f\x95\xc8SR" +
	"\xd4L\xfb\x11OB\x9b\xc5\xb5r\x1c\xc7\x04\x1d9#" +
	"d\xd0\x8a3\xa7\xd9\xf6\x8bC\xc9\x95d(\xc5\xed\xd2" +
	"\xc7\x04\x06\"\xfd\x88\x0b\xc3\xd6\x14\x00\xbbOF\x96\xf4" +
	"\x95dD\x1c~EF\xf6\x80\x84(5\xa1\x04@\xbe" +
	"~\x0a\x80= #KKh\xeae\x84\x01'\xb1\xc1" +
	"S\x80r'M\x95\xdb\x06\xd0@\xe2\x8d`@$\x80" +
	"\xa6\xce't\x01&Z\x9d5\x943\xda\xb86\xa3f" +
	"1\x04\x12\x86\xfe\xff\x12'\xd5\x98@\xac\x1a\x08\xdb\xf3" +
	"\xba\x91\xcckF\x8a\xeb\xf9\xec\x8c\x83\xbb7J1%" +
	"Z#\xa3\x1b\x9a\x0a\xa8\x951w\xf4\x1b\x1d9\\\xdc" +
	"\xad\xc2\xd3J\xdd\xfa\x88iG\xe3C\x10K\xf3\x9c\xf1" +
	"?wQ`\xb9\xbc\xb9\x16\xb7\xb2\x8c\x19\x9aj\xdf\xc0" +
	"\x1d\xef\x04\x1f+\xdf\x80k\xb09\xe9\xa7\x8ec\x83\xce" +
	"\x94\xa8\xde\xe0~\xfa\xd4\xac\x96\x81H \xee\xc4K\xaa" +
	"\x9a\xa2N[\xacjpY\xa5\x8e\x03\xb0]2\xb2\xac" +
	"\x8fU\x99n\x00\x96\x96\x91\x15<VM\x8b\xb3)\x19" +
	"\x99!!\x91\xa5&\x94\x01\xc8\x9e\x1e\x00\x96\x95\x91\xed" +
	"\x95\xd0\x1cWu\xde\xdfw\xbf\x0a\x8a1\x94\xc6\x08H" +
	"\x18\x01\x8cM\xe5u\xc3\xfdR\xc8k\x06* \xa1\x02" +
	"\xd8\xa6f3\xaa\xee<\xaa\xd6}6\x99b\x82M," +
	"\x82\xfe\xdd\x83\x8c\xf9\xd6\x012\xee[q\xc9\x01sT" +
	"\x9d\xe1\x02Y\x90\xa7u\xeb\x8b\x90RP\xb2\x86n:" +
	"\x9cD\x87\x94\x00e\xf4\x1d\xdf\xe8\xf8u\x05BWg" +
	"*\xba6P)\x10\x16\xdc\xb6\x1c\xd8\x83\x07\x04\xc8>" +
	"5\x1d\xf6\x84\xd3\x05y\xa38\xdc #\xbbWZm" +
	"\xe0\xe9\\\xcd\xf2\xf4`\xc9~\xea\x0e\xe1\x8aq\x18X" +
	"*&\x0es\xec\x81\x88\x8bT\xb5\xddSUeB-" +
	"`c@\x06\xc4\xc6\xea\x0e}}\xed\xc0;\xad\x83\xad" +
	"\xaf\xd5u\x9a\xab\xd9mym\x85t}\x85\xbe_5" +
	"\x92\xaa\x81S\x15\xa8\xb5\xac2\x83\xe4L\x1a\x1b\xbcU" +
	"\xcf\xf6?\xa7Z\x13M\xc7\x06o\x99Z\x1e(\xb7~" +
	"ey\xee\xb0\xc6\xael\xdc2\xa4,\x7f\xc6RF\xa4" +
	"Vc\xc4\xca\xc2]\xcc\x09Z\x8e\xa6lFT>\xad" +
	"\x0e\xf1P\x1a*z\x7f\xacZ\xef\x8f\xf9\xfa\\*7" +
	"\xff\x1eqX\x90\x91=.\x9a_\xb6\x9b\xbf$\x0e\xf7" +
	"\xca\xc8\x9e\x94\xd0,\x14\xc7\xb3\x99\x89/s\x90K\x1b" +
	"\xbc\x1d\xc0;\xdcX\xed\xb0\xa7\xdaa\xef\x92\x15\"\xb8" +
	"\x82\xcc\x95\xf5\xbd\x1a\xc1[\xbc\xb2\x09\xa6T\x0aM`" +
	"\xd9\xed\xd1\xadY\xb5\x11\xe5\xcd3\xb1\xecb\xae\\\xd7" +
	"\x88i\xda\x85\xed\xf6H\x1b\xc5\x8f\xcd2k\xbb\xbdr" +
	"\xc7\x0c\xbe\xd7S\xc4\xb4j\xa8\x18\x05\x09\xa3\xf0Iu" +
	"\xddmnwg\xaa\xce/\x97^b/\xe8\x93\x91m" +
	"\x91n\xd5\xe4_\xb2H\xa2\xb3\xb4DL\x13\xd1\xfb\xff" +
	"\x00\xd9\xda\x0e\x12\x91B6\x9d\xfcp\xd8 \x09>m" +
	"\xec\xf6\xfd.\xc8\x14\xfa\x17M\x8bEs\xe4\x131\xc3" +
	"\xedh\x1f:\xbe\"\xb9\xc2\xe2/\xd1\xb2CkeF" +
	"\x88\x1fA\xa8U\xa8b\xb7G\xc3\xd8\xee\xa2G\xc4\xff" +
	"\x06\x00\x00\xff\xff\x0c\x82\x0d\xb8"

func init() {
	schemas.Register(schema_855efed3475f6b26,
		0x886d68271d83de4d,
		0x8ab68adabfa134ca,
		0x8f700f81169f2e52,
		0x8f9c2c0a602f27ed,
		0x8fb25d0428898a69,
		0x932d6ee32410e853,
		0x9fb3bdfad147ca3a,
		0x9fb6218427d92e3c,
		0xa232c65d79e97faa,
		0xa4db8c20d9807c15,
		0xaa8d91fab6d01d9f,
		0xb0caf775704690b2,
		0xbf018f62ff460d0f,
		0xc1a7daa0dc36cb65,
		0xc541e5764a37d73a,
		0xc78c1529af44abab,
		0xd5e0aac4225e0343,
		0xd9eccdf2dbc48087,
		0xda966d1d252e4d25,
		0xdc5bd1ef982cec13,
		0xe10a5d74d58bd18d,
		0xe6f8966f0f2cbb33,
		0xf43682c2a6e815f8,
		0xfa412bb47f11b488,
		0xfafc816633f98bb9,
		0xfb47810671a05b0d,
		0xfc185f518d220b8c,
		0xfdd799ed60c87723)
}
