// Code generated by capnpc-go. DO NOT EDIT.

package persistence

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type VatId struct{ capnp.Struct }

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xe10a5d74d58bd18d

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId{root.Struct()}, err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xe10a5d74d58bd18d, s.Struct)
	return str
}

func (s VatId) PublicKey0() uint64 {
	return s.Struct.Uint64(0)
}

func (s VatId) SetPublicKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s VatId) PublicKey1() uint64 {
	return s.Struct.Uint64(8)
}

func (s VatId) SetPublicKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s VatId) PublicKey2() uint64 {
	return s.Struct.Uint64(16)
}

func (s VatId) SetPublicKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s VatId) PublicKey3() uint64 {
	return s.Struct.Uint64(24)
}

func (s VatId) SetPublicKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// VatId_List is a list of VatId.
type VatId_List struct{ capnp.List }

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return VatId_List{l}, err
}

func (s VatId_List) At(i int) VatId { return VatId{s.List.Struct(i)} }

func (s VatId_List) Set(i int, v VatId) error { return s.List.SetStruct(i, v.Struct) }

func (s VatId_List) String() string {
	str, _ := text.MarshalList(0xe10a5d74d58bd18d, s.List)
	return str
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (p VatId_Future) Struct() (VatId, error) {
	s, err := p.Future.Struct()
	return VatId{s}, err
}

type Address struct{ capnp.Struct }
type Address_ip6 Address
type Address_Which uint16

const (
	Address_Which_ip6  Address_Which = 0
	Address_Which_host Address_Which = 1
)

func (w Address_Which) String() string {
	const s = "ip6host"
	switch w {
	case Address_Which_ip6:
		return s[0:3]
	case Address_Which_host:
		return s[3:7]

	}
	return "Address_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0xfb47810671a05b0d

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.Root()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0xfb47810671a05b0d, s.Struct)
	return str
}

func (s Address) Which() Address_Which {
	return Address_Which(s.Struct.Uint16(18))
}
func (s Address) Ip6() Address_ip6 { return Address_ip6(s) }

func (s Address) SetIp6() {
	s.Struct.SetUint16(18, 0)
}

func (s Address_ip6) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s Address_ip6) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Address_ip6) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s Address_ip6) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Address) Host() (string, error) {
	if s.Struct.Uint16(18) != 1 {
		panic("Which() != host")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasHost() bool {
	if s.Struct.Uint16(18) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Address) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetHost(v string) error {
	s.Struct.SetUint16(18, 1)
	return s.Struct.SetText(0, v)
}

func (s Address) Port() uint16 {
	return s.Struct.Uint16(16)
}

func (s Address) SetPort(v uint16) {
	s.Struct.SetUint16(16, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0xfb47810671a05b0d, s.List)
	return str
}

// Address_Future is a wrapper for a Address promised by a client call.
type Address_Future struct{ *capnp.Future }

func (p Address_Future) Struct() (Address, error) {
	s, err := p.Future.Struct()
	return Address{s}, err
}

func (p Address_Future) Ip6() Address_ip6_Future { return Address_ip6_Future{p.Future} }

// Address_ip6_Future is a wrapper for a Address_ip6 promised by a client call.
type Address_ip6_Future struct{ *capnp.Future }

func (p Address_ip6_Future) Struct() (Address_ip6, error) {
	s, err := p.Future.Struct()
	return Address_ip6{s}, err
}

type VatPath struct{ capnp.Struct }

// VatPath_TypeID is the unique identifier for the type VatPath.
const VatPath_TypeID = 0xd9eccdf2dbc48087

func NewVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func NewRootVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func ReadRootVatPath(msg *capnp.Message) (VatPath, error) {
	root, err := msg.Root()
	return VatPath{root.Struct()}, err
}

func (s VatPath) String() string {
	str, _ := text.Marshal(0xd9eccdf2dbc48087, s.Struct)
	return str
}

func (s VatPath) Id() (VatId, error) {
	p, err := s.Struct.Ptr(0)
	return VatId{Struct: p.Struct()}, err
}

func (s VatPath) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s VatPath) SetId(v VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated VatId struct, preferring placement in s's segment.
func (s VatPath) NewId() (VatId, error) {
	ss, err := NewVatId(s.Struct.Segment())
	if err != nil {
		return VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VatPath) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s VatPath) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s VatPath) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s VatPath) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VatPath_List is a list of VatPath.
type VatPath_List struct{ capnp.List }

// NewVatPath creates a new list of VatPath.
func NewVatPath_List(s *capnp.Segment, sz int32) (VatPath_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VatPath_List{l}, err
}

func (s VatPath_List) At(i int) VatPath { return VatPath{s.List.Struct(i)} }

func (s VatPath_List) Set(i int, v VatPath) error { return s.List.SetStruct(i, v.Struct) }

func (s VatPath_List) String() string {
	str, _ := text.MarshalList(0xd9eccdf2dbc48087, s.List)
	return str
}

// VatPath_Future is a wrapper for a VatPath promised by a client call.
type VatPath_Future struct{ *capnp.Future }

func (p VatPath_Future) Struct() (VatPath, error) {
	s, err := p.Future.Struct()
	return VatPath{s}, err
}

func (p VatPath_Future) Id() VatId_Future {
	return VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p VatPath_Future) Address() Address_Future {
	return Address_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef struct{ capnp.Struct }
type SturdyRef_Which uint16

const (
	SturdyRef_Which_transient SturdyRef_Which = 0
	SturdyRef_Which_stored    SturdyRef_Which = 1
)

func (w SturdyRef_Which) String() string {
	const s = "transientstored"
	switch w {
	case SturdyRef_Which_transient:
		return s[0:9]
	case SturdyRef_Which_stored:
		return s[9:15]

	}
	return "SturdyRef_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0x886d68271d83de4d

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef{root.Struct()}, err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0x886d68271d83de4d, s.Struct)
	return str
}

func (s SturdyRef) Which() SturdyRef_Which {
	return SturdyRef_Which(s.Struct.Uint16(0))
}
func (s SturdyRef) Transient() (SturdyRef_Transient, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != transient")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Transient{Struct: p.Struct()}, err
}

func (s SturdyRef) HasTransient() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetTransient(v SturdyRef_Transient) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransient sets the transient field to a newly
// allocated SturdyRef_Transient struct, preferring placement in s's segment.
func (s SturdyRef) NewTransient() (SturdyRef_Transient, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewSturdyRef_Transient(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Transient{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef) Stored() (SturdyRef_Stored, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stored")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Stored{Struct: p.Struct()}, err
}

func (s SturdyRef) HasStored() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetStored(v SturdyRef_Stored) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStored sets the stored field to a newly
// allocated SturdyRef_Stored struct, preferring placement in s's segment.
func (s SturdyRef) NewStored() (SturdyRef_Stored, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSturdyRef_Stored(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List struct{ capnp.List }

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SturdyRef_List{l}, err
}

func (s SturdyRef_List) At(i int) SturdyRef { return SturdyRef{s.List.Struct(i)} }

func (s SturdyRef_List) Set(i int, v SturdyRef) error { return s.List.SetStruct(i, v.Struct) }

func (s SturdyRef_List) String() string {
	str, _ := text.MarshalList(0x886d68271d83de4d, s.List)
	return str
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (p SturdyRef_Future) Struct() (SturdyRef, error) {
	s, err := p.Future.Struct()
	return SturdyRef{s}, err
}

func (p SturdyRef_Future) Transient() SturdyRef_Transient_Future {
	return SturdyRef_Transient_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Future) Stored() SturdyRef_Stored_Future {
	return SturdyRef_Stored_Future{Future: p.Future.Field(0, nil)}
}

type SturdyRef_Owner struct{ capnp.Struct }

// SturdyRef_Owner_TypeID is the unique identifier for the type SturdyRef_Owner.
const SturdyRef_Owner_TypeID = 0xfdd799ed60c87723

func NewSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func NewRootSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func ReadRootSturdyRef_Owner(msg *capnp.Message) (SturdyRef_Owner, error) {
	root, err := msg.Root()
	return SturdyRef_Owner{root.Struct()}, err
}

func (s SturdyRef_Owner) String() string {
	str, _ := text.Marshal(0xfdd799ed60c87723, s.Struct)
	return str
}

func (s SturdyRef_Owner) Guid() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Owner) HasGuid() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Owner) GuidBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Owner) SetGuid(v string) error {
	return s.Struct.SetText(0, v)
}

// SturdyRef_Owner_List is a list of SturdyRef_Owner.
type SturdyRef_Owner_List struct{ capnp.List }

// NewSturdyRef_Owner creates a new list of SturdyRef_Owner.
func NewSturdyRef_Owner_List(s *capnp.Segment, sz int32) (SturdyRef_Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SturdyRef_Owner_List{l}, err
}

func (s SturdyRef_Owner_List) At(i int) SturdyRef_Owner { return SturdyRef_Owner{s.List.Struct(i)} }

func (s SturdyRef_Owner_List) Set(i int, v SturdyRef_Owner) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Owner_List) String() string {
	str, _ := text.MarshalList(0xfdd799ed60c87723, s.List)
	return str
}

// SturdyRef_Owner_Future is a wrapper for a SturdyRef_Owner promised by a client call.
type SturdyRef_Owner_Future struct{ *capnp.Future }

func (p SturdyRef_Owner_Future) Struct() (SturdyRef_Owner, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Owner{s}, err
}

type SturdyRef_Transient struct{ capnp.Struct }

// SturdyRef_Transient_TypeID is the unique identifier for the type SturdyRef_Transient.
const SturdyRef_Transient_TypeID = 0xa42bd461f2a8a3c8

func NewSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func NewRootSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func ReadRootSturdyRef_Transient(msg *capnp.Message) (SturdyRef_Transient, error) {
	root, err := msg.Root()
	return SturdyRef_Transient{root.Struct()}, err
}

func (s SturdyRef_Transient) String() string {
	str, _ := text.Marshal(0xa42bd461f2a8a3c8, s.Struct)
	return str
}

func (s SturdyRef_Transient) Vat() (VatPath, error) {
	p, err := s.Struct.Ptr(0)
	return VatPath{Struct: p.Struct()}, err
}

func (s SturdyRef_Transient) HasVat() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Transient) SetVat(v VatPath) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVat sets the vat field to a newly
// allocated VatPath struct, preferring placement in s's segment.
func (s SturdyRef_Transient) NewVat() (VatPath, error) {
	ss, err := NewVatPath(s.Struct.Segment())
	if err != nil {
		return VatPath{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef_Transient) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s SturdyRef_Transient) HasLocalRef() bool {
	return s.Struct.HasPtr(1)
}

func (s SturdyRef_Transient) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// SturdyRef_Transient_List is a list of SturdyRef_Transient.
type SturdyRef_Transient_List struct{ capnp.List }

// NewSturdyRef_Transient creates a new list of SturdyRef_Transient.
func NewSturdyRef_Transient_List(s *capnp.Segment, sz int32) (SturdyRef_Transient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SturdyRef_Transient_List{l}, err
}

func (s SturdyRef_Transient_List) At(i int) SturdyRef_Transient {
	return SturdyRef_Transient{s.List.Struct(i)}
}

func (s SturdyRef_Transient_List) Set(i int, v SturdyRef_Transient) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Transient_List) String() string {
	str, _ := text.MarshalList(0xa42bd461f2a8a3c8, s.List)
	return str
}

// SturdyRef_Transient_Future is a wrapper for a SturdyRef_Transient promised by a client call.
type SturdyRef_Transient_Future struct{ *capnp.Future }

func (p SturdyRef_Transient_Future) Struct() (SturdyRef_Transient, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Transient{s}, err
}

func (p SturdyRef_Transient_Future) Vat() VatPath_Future {
	return VatPath_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Transient_Future) LocalRef() *capnp.Future {
	return p.Future.Field(1, nil)
}

type SturdyRef_Stored struct{ capnp.Struct }

// SturdyRef_Stored_TypeID is the unique identifier for the type SturdyRef_Stored.
const SturdyRef_Stored_TypeID = 0xcbe679a401315eb8

func NewSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func NewRootSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func ReadRootSturdyRef_Stored(msg *capnp.Message) (SturdyRef_Stored, error) {
	root, err := msg.Root()
	return SturdyRef_Stored{root.Struct()}, err
}

func (s SturdyRef_Stored) String() string {
	str, _ := text.Marshal(0xcbe679a401315eb8, s.Struct)
	return str
}

func (s SturdyRef_Stored) Key0() uint64 {
	return s.Struct.Uint64(0)
}

func (s SturdyRef_Stored) SetKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SturdyRef_Stored) Key1() uint64 {
	return s.Struct.Uint64(8)
}

func (s SturdyRef_Stored) SetKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SturdyRef_Stored) Key2() uint64 {
	return s.Struct.Uint64(16)
}

func (s SturdyRef_Stored) SetKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s SturdyRef_Stored) Key3() uint64 {
	return s.Struct.Uint64(24)
}

func (s SturdyRef_Stored) SetKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// SturdyRef_Stored_List is a list of SturdyRef_Stored.
type SturdyRef_Stored_List struct{ capnp.List }

// NewSturdyRef_Stored creates a new list of SturdyRef_Stored.
func NewSturdyRef_Stored_List(s *capnp.Segment, sz int32) (SturdyRef_Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return SturdyRef_Stored_List{l}, err
}

func (s SturdyRef_Stored_List) At(i int) SturdyRef_Stored { return SturdyRef_Stored{s.List.Struct(i)} }

func (s SturdyRef_Stored_List) Set(i int, v SturdyRef_Stored) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Stored_List) String() string {
	str, _ := text.MarshalList(0xcbe679a401315eb8, s.List)
	return str
}

// SturdyRef_Stored_Future is a wrapper for a SturdyRef_Stored promised by a client call.
type SturdyRef_Stored_Future struct{ *capnp.Future }

func (p SturdyRef_Stored_Future) Struct() (SturdyRef_Stored, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Stored{s}, err
}

type Persistent struct{ Client *capnp.Client }

// Persistent_TypeID is the unique identifier for the type Persistent.
const Persistent_TypeID = 0xc1a7daa0dc36cb65

func (c Persistent) Save(ctx context.Context, params func(Persistent_save_Params) error) (Persistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_save_Results_Future{Future: ans.Future()}, release
}

func (c Persistent) AddRef() Persistent {
	return Persistent{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent) Release() {
	c.Client.Release()
}

// A Persistent_Server is a Persistent with a local implementation.
type Persistent_Server interface {
	Save(context.Context, Persistent_save) error
}

// Persistent_NewServer creates a new Server from an implementation of Persistent_Server.
func Persistent_NewServer(s Persistent_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_Methods(nil, s), s, c, policy)
}

// Persistent_ServerToClient creates a new Client from an implementation of Persistent_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ServerToClient(s Persistent_Server, policy *server.Policy) Persistent {
	return Persistent{Client: capnp.NewClient(Persistent_NewServer(s, policy))}
}

// Persistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_Methods(methods []server.Method, s Persistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, Persistent_save{call})
		},
	})

	return methods
}

// Persistent_save holds the state for a server call to Persistent.save.
// See server.Call for documentation.
type Persistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_save) Args() Persistent_save_Params {
	return Persistent_save_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_save) AllocResults() (Persistent_save_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_save_Results{Struct: r}, err
}

type Persistent_save_Params struct{ capnp.Struct }

// Persistent_save_Params_TypeID is the unique identifier for the type Persistent_save_Params.
const Persistent_save_Params_TypeID = 0xffc59cb2d8a71502

func NewPersistent_save_Params(s *capnp.Segment) (Persistent_save_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_save_Params{st}, err
}

func NewRootPersistent_save_Params(s *capnp.Segment) (Persistent_save_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_save_Params{st}, err
}

func ReadRootPersistent_save_Params(msg *capnp.Message) (Persistent_save_Params, error) {
	root, err := msg.Root()
	return Persistent_save_Params{root.Struct()}, err
}

func (s Persistent_save_Params) String() string {
	str, _ := text.Marshal(0xffc59cb2d8a71502, s.Struct)
	return str
}

// Persistent_save_Params_List is a list of Persistent_save_Params.
type Persistent_save_Params_List struct{ capnp.List }

// NewPersistent_save_Params creates a new list of Persistent_save_Params.
func NewPersistent_save_Params_List(s *capnp.Segment, sz int32) (Persistent_save_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Persistent_save_Params_List{l}, err
}

func (s Persistent_save_Params_List) At(i int) Persistent_save_Params {
	return Persistent_save_Params{s.List.Struct(i)}
}

func (s Persistent_save_Params_List) Set(i int, v Persistent_save_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_save_Params_List) String() string {
	str, _ := text.MarshalList(0xffc59cb2d8a71502, s.List)
	return str
}

// Persistent_save_Params_Future is a wrapper for a Persistent_save_Params promised by a client call.
type Persistent_save_Params_Future struct{ *capnp.Future }

func (p Persistent_save_Params_Future) Struct() (Persistent_save_Params, error) {
	s, err := p.Future.Struct()
	return Persistent_save_Params{s}, err
}

type Persistent_save_Results struct{ capnp.Struct }

// Persistent_save_Results_TypeID is the unique identifier for the type Persistent_save_Results.
const Persistent_save_Results_TypeID = 0xef80b08e84155cc2

func NewPersistent_save_Results(s *capnp.Segment) (Persistent_save_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_save_Results{st}, err
}

func NewRootPersistent_save_Results(s *capnp.Segment) (Persistent_save_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_save_Results{st}, err
}

func ReadRootPersistent_save_Results(msg *capnp.Message) (Persistent_save_Results, error) {
	root, err := msg.Root()
	return Persistent_save_Results{root.Struct()}, err
}

func (s Persistent_save_Results) String() string {
	str, _ := text.Marshal(0xef80b08e84155cc2, s.Struct)
	return str
}

func (s Persistent_save_Results) SturdyRef() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Persistent_save_Results) HasSturdyRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_save_Results) SturdyRefBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Persistent_save_Results) SetSturdyRef(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Persistent_save_Results) UnsaveSR() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Persistent_save_Results) HasUnsaveSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Persistent_save_Results) UnsaveSRBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Persistent_save_Results) SetUnsaveSR(v string) error {
	return s.Struct.SetText(1, v)
}

// Persistent_save_Results_List is a list of Persistent_save_Results.
type Persistent_save_Results_List struct{ capnp.List }

// NewPersistent_save_Results creates a new list of Persistent_save_Results.
func NewPersistent_save_Results_List(s *capnp.Segment, sz int32) (Persistent_save_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Persistent_save_Results_List{l}, err
}

func (s Persistent_save_Results_List) At(i int) Persistent_save_Results {
	return Persistent_save_Results{s.List.Struct(i)}
}

func (s Persistent_save_Results_List) Set(i int, v Persistent_save_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_save_Results_List) String() string {
	str, _ := text.MarshalList(0xef80b08e84155cc2, s.List)
	return str
}

// Persistent_save_Results_Future is a wrapper for a Persistent_save_Results promised by a client call.
type Persistent_save_Results_Future struct{ *capnp.Future }

func (p Persistent_save_Results_Future) Struct() (Persistent_save_Results, error) {
	s, err := p.Future.Struct()
	return Persistent_save_Results{s}, err
}

type Restorer struct{ Client *capnp.Client }

// Restorer_TypeID is the unique identifier for the type Restorer.
const Restorer_TypeID = 0x9fb6218427d92e3c

func (c Restorer) Restore(ctx context.Context, params func(Restorer_restore_Params) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_restore_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c Restorer) AddRef() Restorer {
	return Restorer{
		Client: c.Client.AddRef(),
	}
}

func (c Restorer) Release() {
	c.Client.Release()
}

// A Restorer_Server is a Restorer with a local implementation.
type Restorer_Server interface {
	Restore(context.Context, Restorer_restore) error
}

// Restorer_NewServer creates a new Server from an implementation of Restorer_Server.
func Restorer_NewServer(s Restorer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Restorer_Methods(nil, s), s, c, policy)
}

// Restorer_ServerToClient creates a new Client from an implementation of Restorer_Server.
// The caller is responsible for calling Release on the returned Client.
func Restorer_ServerToClient(s Restorer_Server, policy *server.Policy) Restorer {
	return Restorer{Client: capnp.NewClient(Restorer_NewServer(s, policy))}
}

// Restorer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Restorer_Methods(methods []server.Method, s Restorer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Restorer_restore holds the state for a server call to Restorer.restore.
// See server.Call for documentation.
type Restorer_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Restorer_restore) Args() Restorer_restore_Params {
	return Restorer_restore_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Restorer_restore) AllocResults() (Restorer_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{Struct: r}, err
}

type Restorer_restore_Params struct{ capnp.Struct }

// Restorer_restore_Params_TypeID is the unique identifier for the type Restorer_restore_Params.
const Restorer_restore_Params_TypeID = 0x8071b2eb61aac3f0

func NewRestorer_restore_Params(s *capnp.Segment) (Restorer_restore_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Params{st}, err
}

func NewRootRestorer_restore_Params(s *capnp.Segment) (Restorer_restore_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Params{st}, err
}

func ReadRootRestorer_restore_Params(msg *capnp.Message) (Restorer_restore_Params, error) {
	root, err := msg.Root()
	return Restorer_restore_Params{root.Struct()}, err
}

func (s Restorer_restore_Params) String() string {
	str, _ := text.Marshal(0x8071b2eb61aac3f0, s.Struct)
	return str
}

func (s Restorer_restore_Params) SrToken() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Restorer_restore_Params) HasSrToken() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_restore_Params) SrTokenBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Restorer_restore_Params) SetSrToken(v string) error {
	return s.Struct.SetText(0, v)
}

// Restorer_restore_Params_List is a list of Restorer_restore_Params.
type Restorer_restore_Params_List struct{ capnp.List }

// NewRestorer_restore_Params creates a new list of Restorer_restore_Params.
func NewRestorer_restore_Params_List(s *capnp.Segment, sz int32) (Restorer_restore_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Restorer_restore_Params_List{l}, err
}

func (s Restorer_restore_Params_List) At(i int) Restorer_restore_Params {
	return Restorer_restore_Params{s.List.Struct(i)}
}

func (s Restorer_restore_Params_List) Set(i int, v Restorer_restore_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_restore_Params_List) String() string {
	str, _ := text.MarshalList(0x8071b2eb61aac3f0, s.List)
	return str
}

// Restorer_restore_Params_Future is a wrapper for a Restorer_restore_Params promised by a client call.
type Restorer_restore_Params_Future struct{ *capnp.Future }

func (p Restorer_restore_Params_Future) Struct() (Restorer_restore_Params, error) {
	s, err := p.Future.Struct()
	return Restorer_restore_Params{s}, err
}

type Restorer_restore_Results struct{ capnp.Struct }

// Restorer_restore_Results_TypeID is the unique identifier for the type Restorer_restore_Results.
const Restorer_restore_Results_TypeID = 0xda966d1d252e4d25

func NewRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func NewRootRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func ReadRootRestorer_restore_Results(msg *capnp.Message) (Restorer_restore_Results, error) {
	root, err := msg.Root()
	return Restorer_restore_Results{root.Struct()}, err
}

func (s Restorer_restore_Results) String() string {
	str, _ := text.Marshal(0xda966d1d252e4d25, s.Struct)
	return str
}

func (s Restorer_restore_Results) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_restore_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_restore_Results) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Restorer_restore_Results_List is a list of Restorer_restore_Results.
type Restorer_restore_Results_List struct{ capnp.List }

// NewRestorer_restore_Results creates a new list of Restorer_restore_Results.
func NewRestorer_restore_Results_List(s *capnp.Segment, sz int32) (Restorer_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Restorer_restore_Results_List{l}, err
}

func (s Restorer_restore_Results_List) At(i int) Restorer_restore_Results {
	return Restorer_restore_Results{s.List.Struct(i)}
}

func (s Restorer_restore_Results_List) Set(i int, v Restorer_restore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_restore_Results_List) String() string {
	str, _ := text.MarshalList(0xda966d1d252e4d25, s.List)
	return str
}

// Restorer_restore_Results_Future is a wrapper for a Restorer_restore_Results promised by a client call.
type Restorer_restore_Results_Future struct{ *capnp.Future }

func (p Restorer_restore_Results_Future) Struct() (Restorer_restore_Results, error) {
	s, err := p.Future.Struct()
	return Restorer_restore_Results{s}, err
}

func (p Restorer_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_855efed3475f6b26 = "x\xda\x8c\x95]h\x1cU\x14\xc7\xcf\xff\xde\x99\x9d\xad" +
	"$lf'y\xb06\x94\xd6\xd6\xb6\xd1.\xd9\xb4D" +
	")\x85\xd4@\x0dV\x8a{7\xb5`lj\xc7\xec\xc4" +
	"\x0c\xd9\xecNff\x1b\x03J\x12L\xd0(U|\x11" +
	"\x0a\x8a\x05+\x15_\x94\x80\xe2k\xabB\xa1\xf8`U" +
	"4Q\x84\x0aZ\xf0\x035oE\xda\x91;\xbb\xd9\x99" +
	"n\xd6\xe8\xdb\xbdg\xef\xfe\xcf9\xbf\xf31\xdd\x17\xd9" +
	"!\x96U\xaf'\x88DNM\x04\x7f~\xf2\x9e\xf9\xeb" +
	"\xd2\xe4,\xe9w\x81H\x85F\xb4\xefq\x9e\x07\xc1\xb0" +
	"x\x1f!8\xfa\xc3\xf3\x9d\xbb\xc6&^$\x91\x06\x82" +
	"{\xc6\x9f\x1c\xf8\xf2\xd6\xc9\x05:\x0c\x8d\x11\x19\x0b\xfc" +
	"G\xe35~?\x91\xf1!\x9f\"\x04\xf6K\x8b\xbb\x95" +
	"\xe1\xa5WIl\x06\x0fZ\x9f87\x99\x98\x1b\xf8\x9b" +
	":\xa0\x81\xc8\xe8PV\x09\xc6\x9d\x8a|y0\xb3\xbc" +
	"k~\xdbGo\x91\x9e\xe6\x91,\xc1\xa8(+\xc6\x9c" +
	"\xa2\x11\x19\xcf)\x03\xc6;\xf2\x14\\~\xfb\xddU\xf3" +
	"\xab{\xcf\x93\xbe%\x16\x91\xcad\xb4g\x94\x1e\x18o" +
	"\x86\x7f8\x1b*[Wz\xbf?\xb7r\xe1\xe2:\xe5" +
	"\x1b\xca/\x86\xaa\xca\x87P\x07\x8c=\xf2\x14||2" +
	"\x8b\xf3\xd3?_!\xb1\x05J$-\xe5\xf6\xe9\xeaf" +
	"\x18\xdb\xc2?t\xaa\xd7\x09\xc1\x0b\xb3\x9f~\xb7\xfa\xf9" +
	"o\xcb\xa4\xa7c(\xc20\x8c\xbf\xd4\xab\xc6\xcd\xf0\xed" +
	"\x0dUF\xb1\xf3hfg\xe7\xc4\xeb+q\xb0\x8f%" +
	"\x86$X3!\xc1\x9e\xf9\xe2\xe5\xaf\xfd\xe1;\xaeI" +
	"\xb0J\xa4\x16&2\x97\xb8d,&\xe4i!!\x1d" +
	"_:\xd11\xff\xca\x07\xb3\x7f\x90\xde)\xc5\xc2\xbcm" +
	"-\xacRE\x93\xde\xea\xa4E\x1a\xfc\xf6*a\x93\xb1" +
	"\xac]5~\xd2\xa4\xdc5\xed}Bp\xf7\xd4\xe5S" +
	"\xbf\x9f\xfd\xe6f\x03\xce0\xc6\xe1d\x1a\xc6DR>" +
	"\xb6\x932N\xd6q\xe1\xdb\xa57>\x0b\xaa\xbeC0" +
	"\x8b\xc9#\xa0\x87\x02\xc7r=\xdb\xf3-\xa54be" +
	"FL\xa7\xe4\x1c\xc8[\x9e_v-7\xe3V\x0f;" +
	"r\xa6kN\xc0\x13\x0aW\x88\x14\x10\xe9\xad\xfdD\"" +
	"\xc9!\xda\x19f<\xf7Xy\xdc*\xa1\x85\x18Z\x08" +
	"uI\x16I\x0e\xfa\x15\xb70\xad\xe5\xadQ\xd1\x82x" +
	"\xeczO\xac/Z\xf3Q)\xf5\xd6\x03[\x1f\x9d*" +
	"Ynp\xcc5K\x9em\x95\x08~\xdf\xa0\x8c\xa7 " +
	"\x92\\i\x09\x820\x92=y\"\xb1\x9bC\xecgh" +
	"\xc5\xad\xa0\x1d\xd2\x9a=@$\xee\xe3\x10\x0f0\x04~" +
	"$\x80\xb6\xc8\x1d\x01m\x84\xbe0\xc5\x02\xda\"\xd7\xd5" +
	"\x1f\x9a\xa5\xf1`\xa1\xe0Z\xdeV/c;\xbd2\x88" +
	"\x1a\x8d=\x92\xc6\x0e\x0e\xd1\xcd\xa0\x03\xd5\x10\xf6\xf6G" +
	"\x81\xcd\x14\xcbS\x96\xdb\xbb\x1f\x9b\x88a\x13a\xa6\xe2" +
	"8\xf1{3_\xd5*p\xcb\xcd\x01B\xe1*Q}" +
	"\xce\xb1\xd6\x97\xba\xdeOLW\xb5\x99Z\xa5\x0e!\x87" +
	"H\x8c7\xf2\xcf[\xa3\x19Is\xab\xa4\xe1K\xddX" +
	"\x0e\xdb\x9b\xe5p$\xc2\xa8\x9d6%\xbe\xfa\xf8\xd4(" +
	"\x15\xcb#f1o\x8d\x12\x11\xd2\xc4\x90n\x9eM." +
	"4\xa5\xfc\x9a\xdfj>k]\x89\xb5\xd1\xd0\xf5\xae0" +
	"\x9f\x94g\x9e\xfe?\xc9\x0c\x86\x84\x0aR\xb1\xad\x9e\x89" +
	"\xd9E$Np\x88\xb1X&\x964\x9e\xe2\x10E\x06" +
	"\x9d\xb1v0\"\xdd\x96\xc6\x02\x87p\x18t\xce\xdb\xc1" +
	"\x89\xf4\x09i\x1c\xe3\x10>Cj\xdc\x9a\xee^+\x92" +
	"\xbcd\xe3\x97\x9e\xf8e\xdfF\xb5<n\xfa9\xd3\xc7" +
	"X\x03\xf2\xcd\xff\xd16\xdc\x96}Y\xdf1U\xe23" +
	"f\xd8\x84\x1e\xda\xa2\x85\xd1\xd0\xb1\x1b\xcdr\xde\xf2*" +
	"E\xee\xdf6\xcc\xdb\xa3a\xd6FL\x07i\x85\x13\xfe" +
	"\xad\x92\xc7M\xff\xe1\x025 \x1f\x8a\xd1]\xcb\xc4\x1e" +
	"\x8a@\xd6\x91OJ\xa3\xc3!\x9e\x8d!\x9f\x96\xc6g" +
	"8\xc4<C\xe0T\x9e*\xda#\x8fX\xc4#\xf4q" +
	"c\xb6\x99\xb1\xa7\x99q}I\x94\xc6\x86\x94\xfd\x98\x91" +
	"\xcdV\xe5\xe2\xc3\x8b\xd7'\xb6Z\xeaYe\xe5Ht" +
	"s\x88\x83\x0c\x81W\xebD\xc2h}\xfbUJRo" +
	"0/\x07b\x83\x8dX]%\xf0$\xc8\x96p\x9d!" +
	"\xf6\xe5\xd5\x0fo'\xa6\xb3d\x15\xda\xde\xae\xc6\x1d'" +
	"\xa9e\xbbb\xc3i;\xbd)\xa7\xec\xfa\xd0\x88A#" +
	"\xa4\xc6\xca\x9e\xbf\xce\x7f\xd3!\x92[\x16\xb5-So" +
	"\x89\xae\xa8%ROW\xec\xc2:\xa9\x0dP\x86\x9f\x0b" +
	"\x8f\xe8\x9f\x00\x00\x00\xff\xff\x08\xe8?_"

func init() {
	schemas.Register(schema_855efed3475f6b26,
		0x8071b2eb61aac3f0,
		0x886d68271d83de4d,
		0x8fb25d0428898a69,
		0x9fb6218427d92e3c,
		0xa42bd461f2a8a3c8,
		0xc1a7daa0dc36cb65,
		0xcbe679a401315eb8,
		0xd9eccdf2dbc48087,
		0xda966d1d252e4d25,
		0xe10a5d74d58bd18d,
		0xef80b08e84155cc2,
		0xfb47810671a05b0d,
		0xfdd799ed60c87723,
		0xffc59cb2d8a71502)
}
