// Code generated by capnpc-go. DO NOT EDIT.

package persistence

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type VatId struct{ capnp.Struct }

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xe10a5d74d58bd18d

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId{root.Struct()}, err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xe10a5d74d58bd18d, s.Struct)
	return str
}

func (s VatId) PublicKey0() uint64 {
	return s.Struct.Uint64(0)
}

func (s VatId) SetPublicKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s VatId) PublicKey1() uint64 {
	return s.Struct.Uint64(8)
}

func (s VatId) SetPublicKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s VatId) PublicKey2() uint64 {
	return s.Struct.Uint64(16)
}

func (s VatId) SetPublicKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s VatId) PublicKey3() uint64 {
	return s.Struct.Uint64(24)
}

func (s VatId) SetPublicKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// VatId_List is a list of VatId.
type VatId_List struct{ capnp.List }

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return VatId_List{l}, err
}

func (s VatId_List) At(i int) VatId { return VatId{s.List.Struct(i)} }

func (s VatId_List) Set(i int, v VatId) error { return s.List.SetStruct(i, v.Struct) }

func (s VatId_List) String() string {
	str, _ := text.MarshalList(0xe10a5d74d58bd18d, s.List)
	return str
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (p VatId_Future) Struct() (VatId, error) {
	s, err := p.Future.Struct()
	return VatId{s}, err
}

type Address struct{ capnp.Struct }
type Address_ip6 Address
type Address_Which uint16

const (
	Address_Which_ip6  Address_Which = 0
	Address_Which_host Address_Which = 1
)

func (w Address_Which) String() string {
	const s = "ip6host"
	switch w {
	case Address_Which_ip6:
		return s[0:3]
	case Address_Which_host:
		return s[3:7]

	}
	return "Address_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0xfb47810671a05b0d

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.Root()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0xfb47810671a05b0d, s.Struct)
	return str
}

func (s Address) Which() Address_Which {
	return Address_Which(s.Struct.Uint16(18))
}
func (s Address) Ip6() Address_ip6 { return Address_ip6(s) }

func (s Address) SetIp6() {
	s.Struct.SetUint16(18, 0)
}

func (s Address_ip6) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s Address_ip6) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Address_ip6) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s Address_ip6) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Address) Host() (string, error) {
	if s.Struct.Uint16(18) != 1 {
		panic("Which() != host")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasHost() bool {
	if s.Struct.Uint16(18) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Address) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetHost(v string) error {
	s.Struct.SetUint16(18, 1)
	return s.Struct.SetText(0, v)
}

func (s Address) Port() uint16 {
	return s.Struct.Uint16(16)
}

func (s Address) SetPort(v uint16) {
	s.Struct.SetUint16(16, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0xfb47810671a05b0d, s.List)
	return str
}

// Address_Future is a wrapper for a Address promised by a client call.
type Address_Future struct{ *capnp.Future }

func (p Address_Future) Struct() (Address, error) {
	s, err := p.Future.Struct()
	return Address{s}, err
}

func (p Address_Future) Ip6() Address_ip6_Future { return Address_ip6_Future{p.Future} }

// Address_ip6_Future is a wrapper for a Address_ip6 promised by a client call.
type Address_ip6_Future struct{ *capnp.Future }

func (p Address_ip6_Future) Struct() (Address_ip6, error) {
	s, err := p.Future.Struct()
	return Address_ip6{s}, err
}

type VatPath struct{ capnp.Struct }

// VatPath_TypeID is the unique identifier for the type VatPath.
const VatPath_TypeID = 0xd9eccdf2dbc48087

func NewVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func NewRootVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func ReadRootVatPath(msg *capnp.Message) (VatPath, error) {
	root, err := msg.Root()
	return VatPath{root.Struct()}, err
}

func (s VatPath) String() string {
	str, _ := text.Marshal(0xd9eccdf2dbc48087, s.Struct)
	return str
}

func (s VatPath) Id() (VatId, error) {
	p, err := s.Struct.Ptr(0)
	return VatId{Struct: p.Struct()}, err
}

func (s VatPath) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s VatPath) SetId(v VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated VatId struct, preferring placement in s's segment.
func (s VatPath) NewId() (VatId, error) {
	ss, err := NewVatId(s.Struct.Segment())
	if err != nil {
		return VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VatPath) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s VatPath) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s VatPath) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s VatPath) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VatPath_List is a list of VatPath.
type VatPath_List struct{ capnp.List }

// NewVatPath creates a new list of VatPath.
func NewVatPath_List(s *capnp.Segment, sz int32) (VatPath_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VatPath_List{l}, err
}

func (s VatPath_List) At(i int) VatPath { return VatPath{s.List.Struct(i)} }

func (s VatPath_List) Set(i int, v VatPath) error { return s.List.SetStruct(i, v.Struct) }

func (s VatPath_List) String() string {
	str, _ := text.MarshalList(0xd9eccdf2dbc48087, s.List)
	return str
}

// VatPath_Future is a wrapper for a VatPath promised by a client call.
type VatPath_Future struct{ *capnp.Future }

func (p VatPath_Future) Struct() (VatPath, error) {
	s, err := p.Future.Struct()
	return VatPath{s}, err
}

func (p VatPath_Future) Id() VatId_Future {
	return VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p VatPath_Future) Address() Address_Future {
	return Address_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef struct{ capnp.Struct }
type SturdyRef_Which uint16

const (
	SturdyRef_Which_transient SturdyRef_Which = 0
	SturdyRef_Which_stored    SturdyRef_Which = 1
)

func (w SturdyRef_Which) String() string {
	const s = "transientstored"
	switch w {
	case SturdyRef_Which_transient:
		return s[0:9]
	case SturdyRef_Which_stored:
		return s[9:15]

	}
	return "SturdyRef_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0x886d68271d83de4d

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef{root.Struct()}, err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0x886d68271d83de4d, s.Struct)
	return str
}

func (s SturdyRef) Which() SturdyRef_Which {
	return SturdyRef_Which(s.Struct.Uint16(0))
}
func (s SturdyRef) Transient() (SturdyRef_Transient, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != transient")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Transient{Struct: p.Struct()}, err
}

func (s SturdyRef) HasTransient() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetTransient(v SturdyRef_Transient) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransient sets the transient field to a newly
// allocated SturdyRef_Transient struct, preferring placement in s's segment.
func (s SturdyRef) NewTransient() (SturdyRef_Transient, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewSturdyRef_Transient(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Transient{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef) Stored() (SturdyRef_Stored, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stored")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Stored{Struct: p.Struct()}, err
}

func (s SturdyRef) HasStored() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetStored(v SturdyRef_Stored) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStored sets the stored field to a newly
// allocated SturdyRef_Stored struct, preferring placement in s's segment.
func (s SturdyRef) NewStored() (SturdyRef_Stored, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSturdyRef_Stored(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List struct{ capnp.List }

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SturdyRef_List{l}, err
}

func (s SturdyRef_List) At(i int) SturdyRef { return SturdyRef{s.List.Struct(i)} }

func (s SturdyRef_List) Set(i int, v SturdyRef) error { return s.List.SetStruct(i, v.Struct) }

func (s SturdyRef_List) String() string {
	str, _ := text.MarshalList(0x886d68271d83de4d, s.List)
	return str
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (p SturdyRef_Future) Struct() (SturdyRef, error) {
	s, err := p.Future.Struct()
	return SturdyRef{s}, err
}

func (p SturdyRef_Future) Transient() SturdyRef_Transient_Future {
	return SturdyRef_Transient_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Future) Stored() SturdyRef_Stored_Future {
	return SturdyRef_Stored_Future{Future: p.Future.Field(0, nil)}
}

type SturdyRef_Owner struct{ capnp.Struct }

// SturdyRef_Owner_TypeID is the unique identifier for the type SturdyRef_Owner.
const SturdyRef_Owner_TypeID = 0xfdd799ed60c87723

func NewSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func NewRootSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func ReadRootSturdyRef_Owner(msg *capnp.Message) (SturdyRef_Owner, error) {
	root, err := msg.Root()
	return SturdyRef_Owner{root.Struct()}, err
}

func (s SturdyRef_Owner) String() string {
	str, _ := text.Marshal(0xfdd799ed60c87723, s.Struct)
	return str
}

func (s SturdyRef_Owner) Guid() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Owner) HasGuid() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Owner) GuidBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Owner) SetGuid(v string) error {
	return s.Struct.SetText(0, v)
}

// SturdyRef_Owner_List is a list of SturdyRef_Owner.
type SturdyRef_Owner_List struct{ capnp.List }

// NewSturdyRef_Owner creates a new list of SturdyRef_Owner.
func NewSturdyRef_Owner_List(s *capnp.Segment, sz int32) (SturdyRef_Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SturdyRef_Owner_List{l}, err
}

func (s SturdyRef_Owner_List) At(i int) SturdyRef_Owner { return SturdyRef_Owner{s.List.Struct(i)} }

func (s SturdyRef_Owner_List) Set(i int, v SturdyRef_Owner) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Owner_List) String() string {
	str, _ := text.MarshalList(0xfdd799ed60c87723, s.List)
	return str
}

// SturdyRef_Owner_Future is a wrapper for a SturdyRef_Owner promised by a client call.
type SturdyRef_Owner_Future struct{ *capnp.Future }

func (p SturdyRef_Owner_Future) Struct() (SturdyRef_Owner, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Owner{s}, err
}

type SturdyRef_Transient struct{ capnp.Struct }

// SturdyRef_Transient_TypeID is the unique identifier for the type SturdyRef_Transient.
const SturdyRef_Transient_TypeID = 0xa42bd461f2a8a3c8

func NewSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func NewRootSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func ReadRootSturdyRef_Transient(msg *capnp.Message) (SturdyRef_Transient, error) {
	root, err := msg.Root()
	return SturdyRef_Transient{root.Struct()}, err
}

func (s SturdyRef_Transient) String() string {
	str, _ := text.Marshal(0xa42bd461f2a8a3c8, s.Struct)
	return str
}

func (s SturdyRef_Transient) Vat() (VatPath, error) {
	p, err := s.Struct.Ptr(0)
	return VatPath{Struct: p.Struct()}, err
}

func (s SturdyRef_Transient) HasVat() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Transient) SetVat(v VatPath) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVat sets the vat field to a newly
// allocated VatPath struct, preferring placement in s's segment.
func (s SturdyRef_Transient) NewVat() (VatPath, error) {
	ss, err := NewVatPath(s.Struct.Segment())
	if err != nil {
		return VatPath{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef_Transient) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s SturdyRef_Transient) HasLocalRef() bool {
	return s.Struct.HasPtr(1)
}

func (s SturdyRef_Transient) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// SturdyRef_Transient_List is a list of SturdyRef_Transient.
type SturdyRef_Transient_List struct{ capnp.List }

// NewSturdyRef_Transient creates a new list of SturdyRef_Transient.
func NewSturdyRef_Transient_List(s *capnp.Segment, sz int32) (SturdyRef_Transient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SturdyRef_Transient_List{l}, err
}

func (s SturdyRef_Transient_List) At(i int) SturdyRef_Transient {
	return SturdyRef_Transient{s.List.Struct(i)}
}

func (s SturdyRef_Transient_List) Set(i int, v SturdyRef_Transient) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Transient_List) String() string {
	str, _ := text.MarshalList(0xa42bd461f2a8a3c8, s.List)
	return str
}

// SturdyRef_Transient_Future is a wrapper for a SturdyRef_Transient promised by a client call.
type SturdyRef_Transient_Future struct{ *capnp.Future }

func (p SturdyRef_Transient_Future) Struct() (SturdyRef_Transient, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Transient{s}, err
}

func (p SturdyRef_Transient_Future) Vat() VatPath_Future {
	return VatPath_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Transient_Future) LocalRef() *capnp.Future {
	return p.Future.Field(1, nil)
}

type SturdyRef_Stored struct{ capnp.Struct }

// SturdyRef_Stored_TypeID is the unique identifier for the type SturdyRef_Stored.
const SturdyRef_Stored_TypeID = 0xcbe679a401315eb8

func NewSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func NewRootSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func ReadRootSturdyRef_Stored(msg *capnp.Message) (SturdyRef_Stored, error) {
	root, err := msg.Root()
	return SturdyRef_Stored{root.Struct()}, err
}

func (s SturdyRef_Stored) String() string {
	str, _ := text.Marshal(0xcbe679a401315eb8, s.Struct)
	return str
}

func (s SturdyRef_Stored) Key0() uint64 {
	return s.Struct.Uint64(0)
}

func (s SturdyRef_Stored) SetKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SturdyRef_Stored) Key1() uint64 {
	return s.Struct.Uint64(8)
}

func (s SturdyRef_Stored) SetKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SturdyRef_Stored) Key2() uint64 {
	return s.Struct.Uint64(16)
}

func (s SturdyRef_Stored) SetKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s SturdyRef_Stored) Key3() uint64 {
	return s.Struct.Uint64(24)
}

func (s SturdyRef_Stored) SetKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// SturdyRef_Stored_List is a list of SturdyRef_Stored.
type SturdyRef_Stored_List struct{ capnp.List }

// NewSturdyRef_Stored creates a new list of SturdyRef_Stored.
func NewSturdyRef_Stored_List(s *capnp.Segment, sz int32) (SturdyRef_Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return SturdyRef_Stored_List{l}, err
}

func (s SturdyRef_Stored_List) At(i int) SturdyRef_Stored { return SturdyRef_Stored{s.List.Struct(i)} }

func (s SturdyRef_Stored_List) Set(i int, v SturdyRef_Stored) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Stored_List) String() string {
	str, _ := text.MarshalList(0xcbe679a401315eb8, s.List)
	return str
}

// SturdyRef_Stored_Future is a wrapper for a SturdyRef_Stored promised by a client call.
type SturdyRef_Stored_Future struct{ *capnp.Future }

func (p SturdyRef_Stored_Future) Struct() (SturdyRef_Stored, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Stored{s}, err
}

type Persistent struct{ Client *capnp.Client }

// Persistent_TypeID is the unique identifier for the type Persistent.
const Persistent_TypeID = 0xc1a7daa0dc36cb65

func (c Persistent) Save(ctx context.Context, params func(Persistent_SaveParams) error) (Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Persistent) AddRef() Persistent {
	return Persistent{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent) Release() {
	c.Client.Release()
}

// A Persistent_Server is a Persistent with a local implementation.
type Persistent_Server interface {
	Save(context.Context, Persistent_save) error
}

// Persistent_NewServer creates a new Server from an implementation of Persistent_Server.
func Persistent_NewServer(s Persistent_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_Methods(nil, s), s, c, policy)
}

// Persistent_ServerToClient creates a new Client from an implementation of Persistent_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ServerToClient(s Persistent_Server, policy *server.Policy) Persistent {
	return Persistent{Client: capnp.NewClient(Persistent_NewServer(s, policy))}
}

// Persistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_Methods(methods []server.Method, s Persistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, Persistent_save{call})
		},
	})

	return methods
}

// Persistent_save holds the state for a server call to Persistent.save.
// See server.Call for documentation.
type Persistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_save) Args() Persistent_SaveParams {
	return Persistent_SaveParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_save) AllocResults() (Persistent_SaveResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{Struct: r}, err
}

type Persistent_SaveParams struct{ capnp.Struct }

// Persistent_SaveParams_TypeID is the unique identifier for the type Persistent_SaveParams.
const Persistent_SaveParams_TypeID = 0xd5e0aac4225e0343

func NewPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func NewRootPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func ReadRootPersistent_SaveParams(msg *capnp.Message) (Persistent_SaveParams, error) {
	root, err := msg.Root()
	return Persistent_SaveParams{root.Struct()}, err
}

func (s Persistent_SaveParams) String() string {
	str, _ := text.Marshal(0xd5e0aac4225e0343, s.Struct)
	return str
}

func (s Persistent_SaveParams) SealFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Persistent_SaveParams) HasSealFor() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveParams) SetSealFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSealFor sets the sealFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Persistent_SaveParams) NewSealFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveParams_List is a list of Persistent_SaveParams.
type Persistent_SaveParams_List struct{ capnp.List }

// NewPersistent_SaveParams creates a new list of Persistent_SaveParams.
func NewPersistent_SaveParams_List(s *capnp.Segment, sz int32) (Persistent_SaveParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Persistent_SaveParams_List{l}, err
}

func (s Persistent_SaveParams_List) At(i int) Persistent_SaveParams {
	return Persistent_SaveParams{s.List.Struct(i)}
}

func (s Persistent_SaveParams_List) Set(i int, v Persistent_SaveParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveParams_List) String() string {
	str, _ := text.MarshalList(0xd5e0aac4225e0343, s.List)
	return str
}

// Persistent_SaveParams_Future is a wrapper for a Persistent_SaveParams promised by a client call.
type Persistent_SaveParams_Future struct{ *capnp.Future }

func (p Persistent_SaveParams_Future) Struct() (Persistent_SaveParams, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveParams{s}, err
}

func (p Persistent_SaveParams_Future) SealFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(0, nil)}
}

type Persistent_SaveResults struct{ capnp.Struct }

// Persistent_SaveResults_TypeID is the unique identifier for the type Persistent_SaveResults.
const Persistent_SaveResults_TypeID = 0xdc5bd1ef982cec13

func NewPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func NewRootPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func ReadRootPersistent_SaveResults(msg *capnp.Message) (Persistent_SaveResults, error) {
	root, err := msg.Root()
	return Persistent_SaveResults{root.Struct()}, err
}

func (s Persistent_SaveResults) String() string {
	str, _ := text.Marshal(0xdc5bd1ef982cec13, s.Struct)
	return str
}

func (s Persistent_SaveResults) SturdyRef() (SturdyRef, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasSturdyRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveResults) SetSturdyRef(v SturdyRef) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Persistent_SaveResults) UnsaveSR() (SturdyRef, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasUnsaveSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Persistent_SaveResults) SetUnsaveSR(v SturdyRef) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewUnsaveSR sets the unsaveSR field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewUnsaveSR() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveResults_List is a list of Persistent_SaveResults.
type Persistent_SaveResults_List struct{ capnp.List }

// NewPersistent_SaveResults creates a new list of Persistent_SaveResults.
func NewPersistent_SaveResults_List(s *capnp.Segment, sz int32) (Persistent_SaveResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Persistent_SaveResults_List{l}, err
}

func (s Persistent_SaveResults_List) At(i int) Persistent_SaveResults {
	return Persistent_SaveResults{s.List.Struct(i)}
}

func (s Persistent_SaveResults_List) Set(i int, v Persistent_SaveResults) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveResults_List) String() string {
	str, _ := text.MarshalList(0xdc5bd1ef982cec13, s.List)
	return str
}

// Persistent_SaveResults_Future is a wrapper for a Persistent_SaveResults promised by a client call.
type Persistent_SaveResults_Future struct{ *capnp.Future }

func (p Persistent_SaveResults_Future) Struct() (Persistent_SaveResults, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveResults{s}, err
}

func (p Persistent_SaveResults_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}

func (p Persistent_SaveResults_Future) UnsaveSR() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

type Restorer struct{ Client *capnp.Client }

// Restorer_TypeID is the unique identifier for the type Restorer.
const Restorer_TypeID = 0x9fb6218427d92e3c

func (c Restorer) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c Restorer) AddRef() Restorer {
	return Restorer{
		Client: c.Client.AddRef(),
	}
}

func (c Restorer) Release() {
	c.Client.Release()
}

// A Restorer_Server is a Restorer with a local implementation.
type Restorer_Server interface {
	Restore(context.Context, Restorer_restore) error
}

// Restorer_NewServer creates a new Server from an implementation of Restorer_Server.
func Restorer_NewServer(s Restorer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Restorer_Methods(nil, s), s, c, policy)
}

// Restorer_ServerToClient creates a new Client from an implementation of Restorer_Server.
// The caller is responsible for calling Release on the returned Client.
func Restorer_ServerToClient(s Restorer_Server, policy *server.Policy) Restorer {
	return Restorer{Client: capnp.NewClient(Restorer_NewServer(s, policy))}
}

// Restorer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Restorer_Methods(methods []server.Method, s Restorer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Restorer_restore holds the state for a server call to Restorer.restore.
// See server.Call for documentation.
type Restorer_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Restorer_restore) Args() Restorer_RestoreParams {
	return Restorer_RestoreParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Restorer_restore) AllocResults() (Restorer_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{Struct: r}, err
}

type Restorer_RestoreParams struct{ capnp.Struct }

// Restorer_RestoreParams_TypeID is the unique identifier for the type Restorer_RestoreParams.
const Restorer_RestoreParams_TypeID = 0xc541e5764a37d73a

func NewRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func NewRootRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func ReadRootRestorer_RestoreParams(msg *capnp.Message) (Restorer_RestoreParams, error) {
	root, err := msg.Root()
	return Restorer_RestoreParams{root.Struct()}, err
}

func (s Restorer_RestoreParams) String() string {
	str, _ := text.Marshal(0xc541e5764a37d73a, s.Struct)
	return str
}

func (s Restorer_RestoreParams) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_RestoreParams) HasLocalRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_RestoreParams) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Restorer_RestoreParams) SealedFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Restorer_RestoreParams) HasSealedFor() bool {
	return s.Struct.HasPtr(1)
}

func (s Restorer_RestoreParams) SetSealedFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSealedFor sets the sealedFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewSealedFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Restorer_RestoreParams_List is a list of Restorer_RestoreParams.
type Restorer_RestoreParams_List struct{ capnp.List }

// NewRestorer_RestoreParams creates a new list of Restorer_RestoreParams.
func NewRestorer_RestoreParams_List(s *capnp.Segment, sz int32) (Restorer_RestoreParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Restorer_RestoreParams_List{l}, err
}

func (s Restorer_RestoreParams_List) At(i int) Restorer_RestoreParams {
	return Restorer_RestoreParams{s.List.Struct(i)}
}

func (s Restorer_RestoreParams_List) Set(i int, v Restorer_RestoreParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_RestoreParams_List) String() string {
	str, _ := text.MarshalList(0xc541e5764a37d73a, s.List)
	return str
}

// Restorer_RestoreParams_Future is a wrapper for a Restorer_RestoreParams promised by a client call.
type Restorer_RestoreParams_Future struct{ *capnp.Future }

func (p Restorer_RestoreParams_Future) Struct() (Restorer_RestoreParams, error) {
	s, err := p.Future.Struct()
	return Restorer_RestoreParams{s}, err
}

func (p Restorer_RestoreParams_Future) LocalRef() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Restorer_RestoreParams_Future) SealedFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(1, nil)}
}

type Restorer_restore_Results struct{ capnp.Struct }

// Restorer_restore_Results_TypeID is the unique identifier for the type Restorer_restore_Results.
const Restorer_restore_Results_TypeID = 0xda966d1d252e4d25

func NewRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func NewRootRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func ReadRootRestorer_restore_Results(msg *capnp.Message) (Restorer_restore_Results, error) {
	root, err := msg.Root()
	return Restorer_restore_Results{root.Struct()}, err
}

func (s Restorer_restore_Results) String() string {
	str, _ := text.Marshal(0xda966d1d252e4d25, s.Struct)
	return str
}

func (s Restorer_restore_Results) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_restore_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_restore_Results) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Restorer_restore_Results_List is a list of Restorer_restore_Results.
type Restorer_restore_Results_List struct{ capnp.List }

// NewRestorer_restore_Results creates a new list of Restorer_restore_Results.
func NewRestorer_restore_Results_List(s *capnp.Segment, sz int32) (Restorer_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Restorer_restore_Results_List{l}, err
}

func (s Restorer_restore_Results_List) At(i int) Restorer_restore_Results {
	return Restorer_restore_Results{s.List.Struct(i)}
}

func (s Restorer_restore_Results_List) Set(i int, v Restorer_restore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_restore_Results_List) String() string {
	str, _ := text.MarshalList(0xda966d1d252e4d25, s.List)
	return str
}

// Restorer_restore_Results_Future is a wrapper for a Restorer_restore_Results promised by a client call.
type Restorer_restore_Results_Future struct{ *capnp.Future }

func (p Restorer_restore_Results_Future) Struct() (Restorer_restore_Results, error) {
	s, err := p.Future.Struct()
	return Restorer_restore_Results{s}, err
}

func (p Restorer_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_855efed3475f6b26 = "x\xda\x84V]h\x1cU\x14>\xe7\xde\x99\x9d]I" +
	"\xd8\x9d\xbd\x09Bl\x08\xc6\xc6\xb4\xb1Y\xb2IM5" +
	"\x14\xd2\xa6\xb4\xa1+\xc5\xbd\x1b\x15Lm\xec4{c" +
	"\x96\xee\xcfdf61\xa0\xc4`E\xa3\x14\x9f*\xe6" +
	"\xa1\xd8bA\xf1E\xf0A|U*\x14\x8a\x0f\xad\x96" +
	"\xd2XE\x05-\x95\x16%o\"v\xe4\xcefw\xa6" +
	"\x93m\xfbx\xcf\x9c\xfd\xcew\xbe\xf3\x9d{w\xe0o" +
	"\xb2\x87\xa4\xd5\x1b\x11\x00\x9eU#\xee\xa1\x9f\xdf\xec\xec" +
	"\x9d-\xbd\x03<\x89\xe8>~\xfc\xe5\xf1\xef\xefL\xbd" +
	"\x05\xfbQ#\x00\xecE\xfa\x1b\x13t\x17\x00[\xa1\x0b" +
	"\x80n\xe1\xdd\x95m\xca\x91/\xde\x07\xde\x81\xd4m=" +
	"|f.\xb2<\xfe/\xb4\xa3\x86\x00\xec&]\x07d" +
	"\xb7\xbd\xcc\xdd\xa9k\xbd'\x1e\xfd\xf2#\xd0\x93\xd4\x87" +
	"\x05d\x07\x955\xf6\xbc\xf20\x003\x94q\xb6\xa2h" +
	"\x00\xee\x85\x8f?]7~x\xe2\x1c\xe8[\xd0g\xa4" +
	"\x12\x0d`hN\x19D\xb6,\xd3\xd8\xeb\x8aD\x16\x17" +
	"\x87\xaf\x9fY\xfb\xe4\xebM\xc8?)\x7f\xb2\x9bJ/" +
	"\x00S\xd5q\xd6\xafJ\xe4\x91\xab\xbb2\xf3\xbf\xef\xfd" +
	"\x16\xf4G\x02\x9cj\xc8\xedj\x06\xd9v\x99\xc6zT" +
	"\x89\xfc\xd5T\x1a\xcf-\xfeq\x11\xf8\x16T|\x1e\xb2" +
	"\xf6\xd0\x8a\xda\x81l\xd5K>\xa5\xde\x00t\xf7\xd1\xa9" +
	"\xee\xf3\x9f\xfdr\x05\xf4\xce\x00'\x15er!2\x86" +
	"l1\"\x93\xab\x91Q@\xf7\xed7\xce\xff\xb8\xfe\xdd" +
	"\xadk\xa0'\x03\"{4\xd8\xa9\xc8ev\xd6\xcb=" +
	"\x1d\x91,z\x0e\xa5z:K\x1f\xacI\xca\xb0\x01\xf8" +
	"Od\x12\x01\x99\xaaI0vk\xc7\x87\x7f]:|" +
	"=T\xd9\xeb\xa9G\xcb {Z\x93hOj\x12\xed" +
	"\xe4\xa5\xf7\xae8G\x1e\xfaU\xceW\xf1K{z\xae" +
	"j\xdf\xb0\xb3^\xeeiM\xb6\xd4\x98'O\"\xbd\xdb" +
	"\x0b\x18c\xcb\xd1\xcb\xecdTf\xafD?\x07t\x1f" +
	"[\xb8p\xf4\xf6\xea\xd5\xffBC\xf3\xf8\xaa\xb1$\xb2" +
	"\xf6\x98L\xd6c\xa3\xb0\xcf5\x85e\x17lG\x90\xf2" +
	"\xb4HM\x1bf\xd9\x1c\x99p\xaaV~Q\xcb\x89\x19" +
	"\xde\x82A8}0`\x88\xd6\x9c?\x16\xbdu\xa4\xeb" +
	"\xd9\x85\xb2\xb0\xdc\xe7,\xa3l\x17D\x19\xd0\x19\x9dp" +
	"*\x96\xc8\xf3(UZ\\WA\x00}{\x0e\x80o" +
	"\xa3\xc8w\x12l\xc5;n\x1b\xcahz\x04\x80\xef\xa0" +
	"\xc8\x9f\"\xe8:>\x00&\xfcr\x80\x98\x00\x1c\xb5=" +
	"HL\xf8\xa5k\x1f\x9a\xb5\xb17\x9f\xb7\x84\xdde\xa7" +
	"\x0a\xe6\xb0$\x01P\xe30\x06\xc0\xb7R\xe4\x03\x04u" +
	"\xc4\x1a\x85\xfe1\x9f\xd8R\xb1\xb2 \xac\xe1\x9d\x18\x03" +
	"\x821\xc0\xa5\xaai\x06\xcf\xcdj\xe5\x84dF\x85\xc5" +
	"\x15\xc4\x80\xb7\xd1rk\x9fD\x16\xba\x0c\xcb(\xd9\\" +
	"\xa1j\xc0\xfeX7\x95\xae\x8f\x01\xd1Um\xc9\xaa\xe5" +
	"\xef\xc1,\xfa\xa5hx:91\x93\x92ZwI\xad" +
	"\x9c,b\xb0\xc3\xeef\x1df|\x91\xb5yC\x8a\xdb" +
	"\xf0\xfe\x86\x86\xc5\xca\xb4Q\xcc\x89\x19\x00\xc0$\x10L" +
	"6\xef5\xeb\x85\xe2\x8e(;<\x8a\xc1}\x8bM\x06" +
	"V v\xcc\x9d0\xe6E\xd6\xb0\x0c\xa0%\xdb;\xe4" +
	"\x84]\x05\xad\xe8\xd4U\xa8\xff\x14\xeb?\xd3\xf5>O" +
	"\x85\xb8m\xcc\x87$P\xc2j\x0b+U\xd7\xd6S\x16" +
	" $C\xc6\x9fiC\x86\xb4t\xe0\x00E\xbe\x9b4" +
	"o\xd8\x16FQ\xe4\x0fT\x00-L\xf8\xde\x0f\xd9\xac" +
	"\xe9<&<\x0b\xe4%\x8bD\x83\x85\xd1\x07\xc0_\xa2" +
	"\xc8g\x03,\x84\x0c\x1e\xa5\xc8\x8b\x04uB\xda\x90\x00" +
	"\xe8\x05\x19\xccS\xe4&A\x9d\xd26\xa4\x00zI\x06" +
	"g)r\x87`\xfc\xb8X\x1c\xa8\xbbP\x1e\xd2\xc1\xc3" +
	"`\xf00\xb4\xc9\xacJx\x80r~\xa9\xfa\x84J\xb6" +
	"'\x9e\xd2\xa0\xdd*\x17\"J\x91\xb7\x11\\\x92\x9a\x1c" +
	"\xa8\xdcO\x8f\x80=^0\x9c\xac\xe1\xe0lh\x18\x1d" +
	"\x0f\xd8:Z\x90k\xdd\xb8\x14k\xf8K\x86\xb7\xc36" +
	"&\xfc+0T\xb9\x99-6Vh\xab\xb4[\x91z" +
	"nk\xf4\xd5\xed\xf7\xa5M\x1b&&\x15\x0ax\x97\xd5" +
	"\xef\xad\x94\x87\xe7l6Z\xae\x99\xd12\x01\xa3\xd9\x1b" +
	"\x1e\x01\x9c\xc1\x84\x7f%o\xb4R-K\xb7O\xe4\xa4" +
	"\x0d7\x7fm.\xf1\xc1<\x84|6\x19\xb0T\x9dD" +
	"a\xd2wO\xc3gs2hR\xe4\xaf\x05|\xb6(" +
	"\x83\xafR\xe4'\x08\xbaf\xf5X\xb10\xfd\x8c\x00\xea" +
	"\xfb-\x18L7\x0b\x0e6\x0b\x0e\xdd\xef\xd2\xac]\xd0" +
	"h\xcbFZ\xbcG\x02\x03\x7fd\xf4\xfd\xdd@t\x12" +
	"\xad\x91\xee\xef\x0b\xbf\x1c\x92u\xba/p\xa9\x15\xcc\xe1" +
	"\xb8Y\xb1\x1c\xd4\x80\xa0\x06\x18\x9f\xad\xd8\x0e\xb6\x00\xc1" +
	"\x96\x07m\xae|\xbb\xd0\x0am@\x9f\xef\x94\xf8+\xd5" +
	"B\xbe\x0e\xf5\x7f\x00\x00\x00\xff\xff6\x87\x91\x86"

func init() {
	schemas.Register(schema_855efed3475f6b26,
		0x886d68271d83de4d,
		0x8fb25d0428898a69,
		0x9fb6218427d92e3c,
		0xa42bd461f2a8a3c8,
		0xc1a7daa0dc36cb65,
		0xc541e5764a37d73a,
		0xcbe679a401315eb8,
		0xd5e0aac4225e0343,
		0xd9eccdf2dbc48087,
		0xda966d1d252e4d25,
		0xdc5bd1ef982cec13,
		0xe10a5d74d58bd18d,
		0xfb47810671a05b0d,
		0xfdd799ed60c87723)
}
