// Code generated by capnpc-go. DO NOT EDIT.

package persistence

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	strconv "strconv"
)

type VatId struct{ capnp.Struct }

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xe10a5d74d58bd18d

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId{root.Struct()}, err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xe10a5d74d58bd18d, s.Struct)
	return str
}

func (s VatId) PublicKey0() uint64 {
	return s.Struct.Uint64(0)
}

func (s VatId) SetPublicKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s VatId) PublicKey1() uint64 {
	return s.Struct.Uint64(8)
}

func (s VatId) SetPublicKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s VatId) PublicKey2() uint64 {
	return s.Struct.Uint64(16)
}

func (s VatId) SetPublicKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s VatId) PublicKey3() uint64 {
	return s.Struct.Uint64(24)
}

func (s VatId) SetPublicKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// VatId_List is a list of VatId.
type VatId_List struct{ capnp.List }

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return VatId_List{l}, err
}

func (s VatId_List) At(i int) VatId { return VatId{s.List.Struct(i)} }

func (s VatId_List) Set(i int, v VatId) error { return s.List.SetStruct(i, v.Struct) }

func (s VatId_List) String() string {
	str, _ := text.MarshalList(0xe10a5d74d58bd18d, s.List)
	return str
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (p VatId_Future) Struct() (VatId, error) {
	s, err := p.Future.Struct()
	return VatId{s}, err
}

type Address struct{ capnp.Struct }
type Address_ip6 Address
type Address_Which uint16

const (
	Address_Which_ip6  Address_Which = 0
	Address_Which_host Address_Which = 1
)

func (w Address_Which) String() string {
	const s = "ip6host"
	switch w {
	case Address_Which_ip6:
		return s[0:3]
	case Address_Which_host:
		return s[3:7]

	}
	return "Address_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0xfb47810671a05b0d

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.Root()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0xfb47810671a05b0d, s.Struct)
	return str
}

func (s Address) Which() Address_Which {
	return Address_Which(s.Struct.Uint16(18))
}
func (s Address) Ip6() Address_ip6 { return Address_ip6(s) }

func (s Address) SetIp6() {
	s.Struct.SetUint16(18, 0)
}

func (s Address_ip6) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s Address_ip6) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Address_ip6) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s Address_ip6) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Address) Host() (string, error) {
	if s.Struct.Uint16(18) != 1 {
		panic("Which() != host")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasHost() bool {
	if s.Struct.Uint16(18) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Address) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetHost(v string) error {
	s.Struct.SetUint16(18, 1)
	return s.Struct.SetText(0, v)
}

func (s Address) Port() uint16 {
	return s.Struct.Uint16(16)
}

func (s Address) SetPort(v uint16) {
	s.Struct.SetUint16(16, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0xfb47810671a05b0d, s.List)
	return str
}

// Address_Future is a wrapper for a Address promised by a client call.
type Address_Future struct{ *capnp.Future }

func (p Address_Future) Struct() (Address, error) {
	s, err := p.Future.Struct()
	return Address{s}, err
}

func (p Address_Future) Ip6() Address_ip6_Future { return Address_ip6_Future{p.Future} }

// Address_ip6_Future is a wrapper for a Address_ip6 promised by a client call.
type Address_ip6_Future struct{ *capnp.Future }

func (p Address_ip6_Future) Struct() (Address_ip6, error) {
	s, err := p.Future.Struct()
	return Address_ip6{s}, err
}

type VatPath struct{ capnp.Struct }

// VatPath_TypeID is the unique identifier for the type VatPath.
const VatPath_TypeID = 0xd9eccdf2dbc48087

func NewVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func NewRootVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func ReadRootVatPath(msg *capnp.Message) (VatPath, error) {
	root, err := msg.Root()
	return VatPath{root.Struct()}, err
}

func (s VatPath) String() string {
	str, _ := text.Marshal(0xd9eccdf2dbc48087, s.Struct)
	return str
}

func (s VatPath) Id() (VatId, error) {
	p, err := s.Struct.Ptr(0)
	return VatId{Struct: p.Struct()}, err
}

func (s VatPath) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s VatPath) SetId(v VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated VatId struct, preferring placement in s's segment.
func (s VatPath) NewId() (VatId, error) {
	ss, err := NewVatId(s.Struct.Segment())
	if err != nil {
		return VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VatPath) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s VatPath) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s VatPath) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s VatPath) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VatPath_List is a list of VatPath.
type VatPath_List struct{ capnp.List }

// NewVatPath creates a new list of VatPath.
func NewVatPath_List(s *capnp.Segment, sz int32) (VatPath_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VatPath_List{l}, err
}

func (s VatPath_List) At(i int) VatPath { return VatPath{s.List.Struct(i)} }

func (s VatPath_List) Set(i int, v VatPath) error { return s.List.SetStruct(i, v.Struct) }

func (s VatPath_List) String() string {
	str, _ := text.MarshalList(0xd9eccdf2dbc48087, s.List)
	return str
}

// VatPath_Future is a wrapper for a VatPath promised by a client call.
type VatPath_Future struct{ *capnp.Future }

func (p VatPath_Future) Struct() (VatPath, error) {
	s, err := p.Future.Struct()
	return VatPath{s}, err
}

func (p VatPath_Future) Id() VatId_Future {
	return VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p VatPath_Future) Address() Address_Future {
	return Address_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef struct{ capnp.Struct }
type SturdyRef_Which uint16

const (
	SturdyRef_Which_transient SturdyRef_Which = 0
	SturdyRef_Which_stored    SturdyRef_Which = 1
)

func (w SturdyRef_Which) String() string {
	const s = "transientstored"
	switch w {
	case SturdyRef_Which_transient:
		return s[0:9]
	case SturdyRef_Which_stored:
		return s[9:15]

	}
	return "SturdyRef_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0x886d68271d83de4d

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef{root.Struct()}, err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0x886d68271d83de4d, s.Struct)
	return str
}

func (s SturdyRef) Which() SturdyRef_Which {
	return SturdyRef_Which(s.Struct.Uint16(0))
}
func (s SturdyRef) Transient() (SturdyRef_Transient, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != transient")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Transient{Struct: p.Struct()}, err
}

func (s SturdyRef) HasTransient() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetTransient(v SturdyRef_Transient) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransient sets the transient field to a newly
// allocated SturdyRef_Transient struct, preferring placement in s's segment.
func (s SturdyRef) NewTransient() (SturdyRef_Transient, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewSturdyRef_Transient(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Transient{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef) Stored() (SturdyRef_Stored, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stored")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Stored{Struct: p.Struct()}, err
}

func (s SturdyRef) HasStored() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetStored(v SturdyRef_Stored) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStored sets the stored field to a newly
// allocated SturdyRef_Stored struct, preferring placement in s's segment.
func (s SturdyRef) NewStored() (SturdyRef_Stored, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSturdyRef_Stored(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List struct{ capnp.List }

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SturdyRef_List{l}, err
}

func (s SturdyRef_List) At(i int) SturdyRef { return SturdyRef{s.List.Struct(i)} }

func (s SturdyRef_List) Set(i int, v SturdyRef) error { return s.List.SetStruct(i, v.Struct) }

func (s SturdyRef_List) String() string {
	str, _ := text.MarshalList(0x886d68271d83de4d, s.List)
	return str
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (p SturdyRef_Future) Struct() (SturdyRef, error) {
	s, err := p.Future.Struct()
	return SturdyRef{s}, err
}

func (p SturdyRef_Future) Transient() SturdyRef_Transient_Future {
	return SturdyRef_Transient_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Future) Stored() SturdyRef_Stored_Future {
	return SturdyRef_Stored_Future{Future: p.Future.Field(0, nil)}
}

type SturdyRef_Owner struct{ capnp.Struct }

// SturdyRef_Owner_TypeID is the unique identifier for the type SturdyRef_Owner.
const SturdyRef_Owner_TypeID = 0xfdd799ed60c87723

func NewSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func NewRootSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func ReadRootSturdyRef_Owner(msg *capnp.Message) (SturdyRef_Owner, error) {
	root, err := msg.Root()
	return SturdyRef_Owner{root.Struct()}, err
}

func (s SturdyRef_Owner) String() string {
	str, _ := text.Marshal(0xfdd799ed60c87723, s.Struct)
	return str
}

func (s SturdyRef_Owner) Guid() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Owner) HasGuid() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Owner) GuidBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Owner) SetGuid(v string) error {
	return s.Struct.SetText(0, v)
}

// SturdyRef_Owner_List is a list of SturdyRef_Owner.
type SturdyRef_Owner_List struct{ capnp.List }

// NewSturdyRef_Owner creates a new list of SturdyRef_Owner.
func NewSturdyRef_Owner_List(s *capnp.Segment, sz int32) (SturdyRef_Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SturdyRef_Owner_List{l}, err
}

func (s SturdyRef_Owner_List) At(i int) SturdyRef_Owner { return SturdyRef_Owner{s.List.Struct(i)} }

func (s SturdyRef_Owner_List) Set(i int, v SturdyRef_Owner) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Owner_List) String() string {
	str, _ := text.MarshalList(0xfdd799ed60c87723, s.List)
	return str
}

// SturdyRef_Owner_Future is a wrapper for a SturdyRef_Owner promised by a client call.
type SturdyRef_Owner_Future struct{ *capnp.Future }

func (p SturdyRef_Owner_Future) Struct() (SturdyRef_Owner, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Owner{s}, err
}

type SturdyRef_Transient struct{ capnp.Struct }

// SturdyRef_Transient_TypeID is the unique identifier for the type SturdyRef_Transient.
const SturdyRef_Transient_TypeID = 0xa42bd461f2a8a3c8

func NewSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func NewRootSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func ReadRootSturdyRef_Transient(msg *capnp.Message) (SturdyRef_Transient, error) {
	root, err := msg.Root()
	return SturdyRef_Transient{root.Struct()}, err
}

func (s SturdyRef_Transient) String() string {
	str, _ := text.Marshal(0xa42bd461f2a8a3c8, s.Struct)
	return str
}

func (s SturdyRef_Transient) Vat() (VatPath, error) {
	p, err := s.Struct.Ptr(0)
	return VatPath{Struct: p.Struct()}, err
}

func (s SturdyRef_Transient) HasVat() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Transient) SetVat(v VatPath) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVat sets the vat field to a newly
// allocated VatPath struct, preferring placement in s's segment.
func (s SturdyRef_Transient) NewVat() (VatPath, error) {
	ss, err := NewVatPath(s.Struct.Segment())
	if err != nil {
		return VatPath{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef_Transient) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s SturdyRef_Transient) HasLocalRef() bool {
	return s.Struct.HasPtr(1)
}

func (s SturdyRef_Transient) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// SturdyRef_Transient_List is a list of SturdyRef_Transient.
type SturdyRef_Transient_List struct{ capnp.List }

// NewSturdyRef_Transient creates a new list of SturdyRef_Transient.
func NewSturdyRef_Transient_List(s *capnp.Segment, sz int32) (SturdyRef_Transient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SturdyRef_Transient_List{l}, err
}

func (s SturdyRef_Transient_List) At(i int) SturdyRef_Transient {
	return SturdyRef_Transient{s.List.Struct(i)}
}

func (s SturdyRef_Transient_List) Set(i int, v SturdyRef_Transient) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Transient_List) String() string {
	str, _ := text.MarshalList(0xa42bd461f2a8a3c8, s.List)
	return str
}

// SturdyRef_Transient_Future is a wrapper for a SturdyRef_Transient promised by a client call.
type SturdyRef_Transient_Future struct{ *capnp.Future }

func (p SturdyRef_Transient_Future) Struct() (SturdyRef_Transient, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Transient{s}, err
}

func (p SturdyRef_Transient_Future) Vat() VatPath_Future {
	return VatPath_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Transient_Future) LocalRef() *capnp.Future {
	return p.Future.Field(1, nil)
}

type SturdyRef_Stored struct{ capnp.Struct }

// SturdyRef_Stored_TypeID is the unique identifier for the type SturdyRef_Stored.
const SturdyRef_Stored_TypeID = 0xcbe679a401315eb8

func NewSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func NewRootSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func ReadRootSturdyRef_Stored(msg *capnp.Message) (SturdyRef_Stored, error) {
	root, err := msg.Root()
	return SturdyRef_Stored{root.Struct()}, err
}

func (s SturdyRef_Stored) String() string {
	str, _ := text.Marshal(0xcbe679a401315eb8, s.Struct)
	return str
}

func (s SturdyRef_Stored) Key0() uint64 {
	return s.Struct.Uint64(0)
}

func (s SturdyRef_Stored) SetKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SturdyRef_Stored) Key1() uint64 {
	return s.Struct.Uint64(8)
}

func (s SturdyRef_Stored) SetKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SturdyRef_Stored) Key2() uint64 {
	return s.Struct.Uint64(16)
}

func (s SturdyRef_Stored) SetKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s SturdyRef_Stored) Key3() uint64 {
	return s.Struct.Uint64(24)
}

func (s SturdyRef_Stored) SetKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// SturdyRef_Stored_List is a list of SturdyRef_Stored.
type SturdyRef_Stored_List struct{ capnp.List }

// NewSturdyRef_Stored creates a new list of SturdyRef_Stored.
func NewSturdyRef_Stored_List(s *capnp.Segment, sz int32) (SturdyRef_Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return SturdyRef_Stored_List{l}, err
}

func (s SturdyRef_Stored_List) At(i int) SturdyRef_Stored { return SturdyRef_Stored{s.List.Struct(i)} }

func (s SturdyRef_Stored_List) Set(i int, v SturdyRef_Stored) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Stored_List) String() string {
	str, _ := text.MarshalList(0xcbe679a401315eb8, s.List)
	return str
}

// SturdyRef_Stored_Future is a wrapper for a SturdyRef_Stored promised by a client call.
type SturdyRef_Stored_Future struct{ *capnp.Future }

func (p SturdyRef_Stored_Future) Struct() (SturdyRef_Stored, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Stored{s}, err
}

type Persistent struct{ Client *capnp.Client }

// Persistent_TypeID is the unique identifier for the type Persistent.
const Persistent_TypeID = 0xc1a7daa0dc36cb65

func (c Persistent) Save(ctx context.Context, params func(Persistent_SaveParams) error) (Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Persistent) AddRef() Persistent {
	return Persistent{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent) Release() {
	c.Client.Release()
}

// A Persistent_Server is a Persistent with a local implementation.
type Persistent_Server interface {
	Save(context.Context, Persistent_save) error
}

// Persistent_NewServer creates a new Server from an implementation of Persistent_Server.
func Persistent_NewServer(s Persistent_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_Methods(nil, s), s, c, policy)
}

// Persistent_ServerToClient creates a new Client from an implementation of Persistent_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ServerToClient(s Persistent_Server, policy *server.Policy) Persistent {
	return Persistent{Client: capnp.NewClient(Persistent_NewServer(s, policy))}
}

// Persistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_Methods(methods []server.Method, s Persistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, Persistent_save{call})
		},
	})

	return methods
}

// Persistent_save holds the state for a server call to Persistent.save.
// See server.Call for documentation.
type Persistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_save) Args() Persistent_SaveParams {
	return Persistent_SaveParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_save) AllocResults() (Persistent_SaveResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{Struct: r}, err
}

type Persistent_SaveParams struct{ capnp.Struct }

// Persistent_SaveParams_TypeID is the unique identifier for the type Persistent_SaveParams.
const Persistent_SaveParams_TypeID = 0xd5e0aac4225e0343

func NewPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func NewRootPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func ReadRootPersistent_SaveParams(msg *capnp.Message) (Persistent_SaveParams, error) {
	root, err := msg.Root()
	return Persistent_SaveParams{root.Struct()}, err
}

func (s Persistent_SaveParams) String() string {
	str, _ := text.Marshal(0xd5e0aac4225e0343, s.Struct)
	return str
}

func (s Persistent_SaveParams) SealFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Persistent_SaveParams) HasSealFor() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveParams) SetSealFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSealFor sets the sealFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Persistent_SaveParams) NewSealFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveParams_List is a list of Persistent_SaveParams.
type Persistent_SaveParams_List struct{ capnp.List }

// NewPersistent_SaveParams creates a new list of Persistent_SaveParams.
func NewPersistent_SaveParams_List(s *capnp.Segment, sz int32) (Persistent_SaveParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Persistent_SaveParams_List{l}, err
}

func (s Persistent_SaveParams_List) At(i int) Persistent_SaveParams {
	return Persistent_SaveParams{s.List.Struct(i)}
}

func (s Persistent_SaveParams_List) Set(i int, v Persistent_SaveParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveParams_List) String() string {
	str, _ := text.MarshalList(0xd5e0aac4225e0343, s.List)
	return str
}

// Persistent_SaveParams_Future is a wrapper for a Persistent_SaveParams promised by a client call.
type Persistent_SaveParams_Future struct{ *capnp.Future }

func (p Persistent_SaveParams_Future) Struct() (Persistent_SaveParams, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveParams{s}, err
}

func (p Persistent_SaveParams_Future) SealFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(0, nil)}
}

type Persistent_SaveResults struct{ capnp.Struct }

// Persistent_SaveResults_TypeID is the unique identifier for the type Persistent_SaveResults.
const Persistent_SaveResults_TypeID = 0xdc5bd1ef982cec13

func NewPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func NewRootPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func ReadRootPersistent_SaveResults(msg *capnp.Message) (Persistent_SaveResults, error) {
	root, err := msg.Root()
	return Persistent_SaveResults{root.Struct()}, err
}

func (s Persistent_SaveResults) String() string {
	str, _ := text.Marshal(0xdc5bd1ef982cec13, s.Struct)
	return str
}

func (s Persistent_SaveResults) SturdyRef() (SturdyRef, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasSturdyRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveResults) SetSturdyRef(v SturdyRef) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Persistent_SaveResults) UnsaveSR() (SturdyRef, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasUnsaveSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Persistent_SaveResults) SetUnsaveSR(v SturdyRef) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewUnsaveSR sets the unsaveSR field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewUnsaveSR() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveResults_List is a list of Persistent_SaveResults.
type Persistent_SaveResults_List struct{ capnp.List }

// NewPersistent_SaveResults creates a new list of Persistent_SaveResults.
func NewPersistent_SaveResults_List(s *capnp.Segment, sz int32) (Persistent_SaveResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Persistent_SaveResults_List{l}, err
}

func (s Persistent_SaveResults_List) At(i int) Persistent_SaveResults {
	return Persistent_SaveResults{s.List.Struct(i)}
}

func (s Persistent_SaveResults_List) Set(i int, v Persistent_SaveResults) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveResults_List) String() string {
	str, _ := text.MarshalList(0xdc5bd1ef982cec13, s.List)
	return str
}

// Persistent_SaveResults_Future is a wrapper for a Persistent_SaveResults promised by a client call.
type Persistent_SaveResults_Future struct{ *capnp.Future }

func (p Persistent_SaveResults_Future) Struct() (Persistent_SaveResults, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveResults{s}, err
}

func (p Persistent_SaveResults_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}

func (p Persistent_SaveResults_Future) UnsaveSR() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

type Persistent_ReleaseSturdyRef struct{ Client *capnp.Client }

// Persistent_ReleaseSturdyRef_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef.
const Persistent_ReleaseSturdyRef_TypeID = 0x8f700f81169f2e52

func (c Persistent_ReleaseSturdyRef) ReleaseSR(ctx context.Context, params func(Persistent_ReleaseSturdyRef_releaseSR_Params) error) (Persistent_ReleaseSturdyRef_releaseSR_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_ReleaseSturdyRef_releaseSR_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_Future{Future: ans.Future()}, release
}

func (c Persistent_ReleaseSturdyRef) AddRef() Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent_ReleaseSturdyRef) Release() {
	c.Client.Release()
}

// A Persistent_ReleaseSturdyRef_Server is a Persistent_ReleaseSturdyRef with a local implementation.
type Persistent_ReleaseSturdyRef_Server interface {
	ReleaseSR(context.Context, Persistent_ReleaseSturdyRef_releaseSR) error
}

// Persistent_ReleaseSturdyRef_NewServer creates a new Server from an implementation of Persistent_ReleaseSturdyRef_Server.
func Persistent_ReleaseSturdyRef_NewServer(s Persistent_ReleaseSturdyRef_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_ReleaseSturdyRef_Methods(nil, s), s, c, policy)
}

// Persistent_ReleaseSturdyRef_ServerToClient creates a new Client from an implementation of Persistent_ReleaseSturdyRef_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ReleaseSturdyRef_ServerToClient(s Persistent_ReleaseSturdyRef_Server, policy *server.Policy) Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef{Client: capnp.NewClient(Persistent_ReleaseSturdyRef_NewServer(s, policy))}
}

// Persistent_ReleaseSturdyRef_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_ReleaseSturdyRef_Methods(methods []server.Method, s Persistent_ReleaseSturdyRef_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseSR(ctx, Persistent_ReleaseSturdyRef_releaseSR{call})
		},
	})

	return methods
}

// Persistent_ReleaseSturdyRef_releaseSR holds the state for a server call to Persistent_ReleaseSturdyRef.releaseSR.
// See server.Call for documentation.
type Persistent_ReleaseSturdyRef_releaseSR struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_ReleaseSturdyRef_releaseSR) Args() Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_ReleaseSturdyRef_releaseSR) AllocResults() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{Struct: r}, err
}

type Persistent_ReleaseSturdyRef_releaseSR_Params struct{ capnp.Struct }

// Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Params.
const Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID = 0xa4db8c20d9807c15

func NewPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params{st}, err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params{st}, err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Params(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Params{root.Struct()}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) String() string {
	str, _ := text.Marshal(0xa4db8c20d9807c15, s.Struct)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Params.
type Persistent_ReleaseSturdyRef_releaseSR_Params_List struct{ capnp.List }

// NewPersistent_ReleaseSturdyRef_releaseSR_Params creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Params.
func NewPersistent_ReleaseSturdyRef_releaseSR_Params_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Persistent_ReleaseSturdyRef_releaseSR_Params_List{l}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) At(i int) Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params{s.List.Struct(i)}
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) Set(i int, v Persistent_ReleaseSturdyRef_releaseSR_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) String() string {
	str, _ := text.MarshalList(0xa4db8c20d9807c15, s.List)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Params promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Params_Future struct{ *capnp.Future }

func (p Persistent_ReleaseSturdyRef_releaseSR_Params_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	s, err := p.Future.Struct()
	return Persistent_ReleaseSturdyRef_releaseSR_Params{s}, err
}

type Persistent_ReleaseSturdyRef_releaseSR_Results struct{ capnp.Struct }

// Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Results.
const Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID = 0x932d6ee32410e853

func NewPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{st}, err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{st}, err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Results(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Results{root.Struct()}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) String() string {
	str, _ := text.Marshal(0x932d6ee32410e853, s.Struct)
	return str
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Results.
type Persistent_ReleaseSturdyRef_releaseSR_Results_List struct{ capnp.List }

// NewPersistent_ReleaseSturdyRef_releaseSR_Results creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Results.
func NewPersistent_ReleaseSturdyRef_releaseSR_Results_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_List{l}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) At(i int) Persistent_ReleaseSturdyRef_releaseSR_Results {
	return Persistent_ReleaseSturdyRef_releaseSR_Results{s.List.Struct(i)}
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) Set(i int, v Persistent_ReleaseSturdyRef_releaseSR_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) String() string {
	str, _ := text.MarshalList(0x932d6ee32410e853, s.List)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Results promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Results_Future struct{ *capnp.Future }

func (p Persistent_ReleaseSturdyRef_releaseSR_Results_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	s, err := p.Future.Struct()
	return Persistent_ReleaseSturdyRef_releaseSR_Results{s}, err
}

type Restorer struct{ Client *capnp.Client }

// Restorer_TypeID is the unique identifier for the type Restorer.
const Restorer_TypeID = 0x9fb6218427d92e3c

func (c Restorer) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c Restorer) AddRef() Restorer {
	return Restorer{
		Client: c.Client.AddRef(),
	}
}

func (c Restorer) Release() {
	c.Client.Release()
}

// A Restorer_Server is a Restorer with a local implementation.
type Restorer_Server interface {
	Restore(context.Context, Restorer_restore) error
}

// Restorer_NewServer creates a new Server from an implementation of Restorer_Server.
func Restorer_NewServer(s Restorer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Restorer_Methods(nil, s), s, c, policy)
}

// Restorer_ServerToClient creates a new Client from an implementation of Restorer_Server.
// The caller is responsible for calling Release on the returned Client.
func Restorer_ServerToClient(s Restorer_Server, policy *server.Policy) Restorer {
	return Restorer{Client: capnp.NewClient(Restorer_NewServer(s, policy))}
}

// Restorer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Restorer_Methods(methods []server.Method, s Restorer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Restorer_restore holds the state for a server call to Restorer.restore.
// See server.Call for documentation.
type Restorer_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Restorer_restore) Args() Restorer_RestoreParams {
	return Restorer_RestoreParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Restorer_restore) AllocResults() (Restorer_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{Struct: r}, err
}

type Restorer_RestoreParams struct{ capnp.Struct }

// Restorer_RestoreParams_TypeID is the unique identifier for the type Restorer_RestoreParams.
const Restorer_RestoreParams_TypeID = 0xc541e5764a37d73a

func NewRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func NewRootRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func ReadRootRestorer_RestoreParams(msg *capnp.Message) (Restorer_RestoreParams, error) {
	root, err := msg.Root()
	return Restorer_RestoreParams{root.Struct()}, err
}

func (s Restorer_RestoreParams) String() string {
	str, _ := text.Marshal(0xc541e5764a37d73a, s.Struct)
	return str
}

func (s Restorer_RestoreParams) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_RestoreParams) HasLocalRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_RestoreParams) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Restorer_RestoreParams) SealedFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Restorer_RestoreParams) HasSealedFor() bool {
	return s.Struct.HasPtr(1)
}

func (s Restorer_RestoreParams) SetSealedFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSealedFor sets the sealedFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewSealedFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Restorer_RestoreParams_List is a list of Restorer_RestoreParams.
type Restorer_RestoreParams_List struct{ capnp.List }

// NewRestorer_RestoreParams creates a new list of Restorer_RestoreParams.
func NewRestorer_RestoreParams_List(s *capnp.Segment, sz int32) (Restorer_RestoreParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Restorer_RestoreParams_List{l}, err
}

func (s Restorer_RestoreParams_List) At(i int) Restorer_RestoreParams {
	return Restorer_RestoreParams{s.List.Struct(i)}
}

func (s Restorer_RestoreParams_List) Set(i int, v Restorer_RestoreParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_RestoreParams_List) String() string {
	str, _ := text.MarshalList(0xc541e5764a37d73a, s.List)
	return str
}

// Restorer_RestoreParams_Future is a wrapper for a Restorer_RestoreParams promised by a client call.
type Restorer_RestoreParams_Future struct{ *capnp.Future }

func (p Restorer_RestoreParams_Future) Struct() (Restorer_RestoreParams, error) {
	s, err := p.Future.Struct()
	return Restorer_RestoreParams{s}, err
}

func (p Restorer_RestoreParams_Future) LocalRef() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Restorer_RestoreParams_Future) SealedFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(1, nil)}
}

type Restorer_restore_Results struct{ capnp.Struct }

// Restorer_restore_Results_TypeID is the unique identifier for the type Restorer_restore_Results.
const Restorer_restore_Results_TypeID = 0xda966d1d252e4d25

func NewRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func NewRootRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func ReadRootRestorer_restore_Results(msg *capnp.Message) (Restorer_restore_Results, error) {
	root, err := msg.Root()
	return Restorer_restore_Results{root.Struct()}, err
}

func (s Restorer_restore_Results) String() string {
	str, _ := text.Marshal(0xda966d1d252e4d25, s.Struct)
	return str
}

func (s Restorer_restore_Results) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_restore_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_restore_Results) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Restorer_restore_Results_List is a list of Restorer_restore_Results.
type Restorer_restore_Results_List struct{ capnp.List }

// NewRestorer_restore_Results creates a new list of Restorer_restore_Results.
func NewRestorer_restore_Results_List(s *capnp.Segment, sz int32) (Restorer_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Restorer_restore_Results_List{l}, err
}

func (s Restorer_restore_Results_List) At(i int) Restorer_restore_Results {
	return Restorer_restore_Results{s.List.Struct(i)}
}

func (s Restorer_restore_Results_List) Set(i int, v Restorer_restore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_restore_Results_List) String() string {
	str, _ := text.MarshalList(0xda966d1d252e4d25, s.List)
	return str
}

// Restorer_restore_Results_Future is a wrapper for a Restorer_restore_Results promised by a client call.
type Restorer_restore_Results_Future struct{ *capnp.Future }

func (p Restorer_restore_Results_Future) Struct() (Restorer_restore_Results, error) {
	s, err := p.Future.Struct()
	return Restorer_restore_Results{s}, err
}

func (p Restorer_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type HostPortResolver struct{ Client *capnp.Client }

// HostPortResolver_TypeID is the unique identifier for the type HostPortResolver.
const HostPortResolver_TypeID = 0xaa8d91fab6d01d9f

func (c HostPortResolver) Resolve(ctx context.Context, params func(HostPortResolver_resolve_Params) error) (HostPortResolver_resolve_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_resolve_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_resolve_Results_Future{Future: ans.Future()}, release
}
func (c HostPortResolver) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c HostPortResolver) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver) AddRef() HostPortResolver {
	return HostPortResolver{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver) Release() {
	c.Client.Release()
}

// A HostPortResolver_Server is a HostPortResolver with a local implementation.
type HostPortResolver_Server interface {
	Resolve(context.Context, HostPortResolver_resolve) error

	Info(context.Context, common.Identifiable_info) error

	Restore(context.Context, Restorer_restore) error
}

// HostPortResolver_NewServer creates a new Server from an implementation of HostPortResolver_Server.
func HostPortResolver_NewServer(s HostPortResolver_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Methods(nil, s), s, c, policy)
}

// HostPortResolver_ServerToClient creates a new Client from an implementation of HostPortResolver_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_ServerToClient(s HostPortResolver_Server, policy *server.Policy) HostPortResolver {
	return HostPortResolver{Client: capnp.NewClient(HostPortResolver_NewServer(s, policy))}
}

// HostPortResolver_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Methods(methods []server.Method, s HostPortResolver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolve(ctx, HostPortResolver_resolve{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// HostPortResolver_resolve holds the state for a server call to HostPortResolver.resolve.
// See server.Call for documentation.
type HostPortResolver_resolve struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_resolve) Args() HostPortResolver_resolve_Params {
	return HostPortResolver_resolve_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_resolve) AllocResults() (HostPortResolver_resolve_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_resolve_Results{Struct: r}, err
}

type HostPortResolver_Registrar struct{ Client *capnp.Client }

// HostPortResolver_Registrar_TypeID is the unique identifier for the type HostPortResolver_Registrar.
const HostPortResolver_Registrar_TypeID = 0xb0caf775704690b2

func (c HostPortResolver_Registrar) Register(ctx context.Context, params func(HostPortResolver_Registrar_RegisterParams) error) (HostPortResolver_Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_RegisterParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_Registrar_register_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver_Registrar) AddRef() HostPortResolver_Registrar {
	return HostPortResolver_Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver_Registrar) Release() {
	c.Client.Release()
}

// A HostPortResolver_Registrar_Server is a HostPortResolver_Registrar with a local implementation.
type HostPortResolver_Registrar_Server interface {
	Register(context.Context, HostPortResolver_Registrar_register) error
}

// HostPortResolver_Registrar_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Server.
func HostPortResolver_Registrar_NewServer(s HostPortResolver_Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Methods(nil, s), s, c, policy)
}

// HostPortResolver_Registrar_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_ServerToClient(s HostPortResolver_Registrar_Server, policy *server.Policy) HostPortResolver_Registrar {
	return HostPortResolver_Registrar{Client: capnp.NewClient(HostPortResolver_Registrar_NewServer(s, policy))}
}

// HostPortResolver_Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Methods(methods []server.Method, s HostPortResolver_Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, HostPortResolver_Registrar_register{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_register holds the state for a server call to HostPortResolver_Registrar.register.
// See server.Call for documentation.
type HostPortResolver_Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_register) Args() HostPortResolver_Registrar_RegisterParams {
	return HostPortResolver_Registrar_RegisterParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_register) AllocResults() (HostPortResolver_Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{Struct: r}, err
}

type HostPortResolver_Registrar_Heartbeat struct{ Client *capnp.Client }

// HostPortResolver_Registrar_Heartbeat_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat.
const HostPortResolver_Registrar_Heartbeat_TypeID = 0x87de92d2d68df26f

func (c HostPortResolver_Registrar_Heartbeat) Beat(ctx context.Context, params func(HostPortResolver_Registrar_Heartbeat_beat_Params) error) (HostPortResolver_Registrar_Heartbeat_beat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87de92d2d68df26f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar.Heartbeat",
			MethodName:    "beat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_Heartbeat_beat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_Registrar_Heartbeat_beat_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver_Registrar_Heartbeat) AddRef() HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver_Registrar_Heartbeat) Release() {
	c.Client.Release()
}

// A HostPortResolver_Registrar_Heartbeat_Server is a HostPortResolver_Registrar_Heartbeat with a local implementation.
type HostPortResolver_Registrar_Heartbeat_Server interface {
	Beat(context.Context, HostPortResolver_Registrar_Heartbeat_beat) error
}

// HostPortResolver_Registrar_Heartbeat_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Heartbeat_Server.
func HostPortResolver_Registrar_Heartbeat_NewServer(s HostPortResolver_Registrar_Heartbeat_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Heartbeat_Methods(nil, s), s, c, policy)
}

// HostPortResolver_Registrar_Heartbeat_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Heartbeat_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_Heartbeat_ServerToClient(s HostPortResolver_Registrar_Heartbeat_Server, policy *server.Policy) HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat{Client: capnp.NewClient(HostPortResolver_Registrar_Heartbeat_NewServer(s, policy))}
}

// HostPortResolver_Registrar_Heartbeat_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Heartbeat_Methods(methods []server.Method, s HostPortResolver_Registrar_Heartbeat_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87de92d2d68df26f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar.Heartbeat",
			MethodName:    "beat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Beat(ctx, HostPortResolver_Registrar_Heartbeat_beat{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_Heartbeat_beat holds the state for a server call to HostPortResolver_Registrar_Heartbeat.beat.
// See server.Call for documentation.
type HostPortResolver_Registrar_Heartbeat_beat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_Heartbeat_beat) Args() HostPortResolver_Registrar_Heartbeat_beat_Params {
	return HostPortResolver_Registrar_Heartbeat_beat_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_Heartbeat_beat) AllocResults() (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results{Struct: r}, err
}

type HostPortResolver_Registrar_Heartbeat_beat_Params struct{ capnp.Struct }

// HostPortResolver_Registrar_Heartbeat_beat_Params_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat_beat_Params.
const HostPortResolver_Registrar_Heartbeat_beat_Params_TypeID = 0xebff70497e0ba555

func NewHostPortResolver_Registrar_Heartbeat_beat_Params(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Params{st}, err
}

func NewRootHostPortResolver_Registrar_Heartbeat_beat_Params(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Params{st}, err
}

func ReadRootHostPortResolver_Registrar_Heartbeat_beat_Params(msg *capnp.Message) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_Heartbeat_beat_Params{root.Struct()}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) String() string {
	str, _ := text.Marshal(0xebff70497e0ba555, s.Struct)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Params_List is a list of HostPortResolver_Registrar_Heartbeat_beat_Params.
type HostPortResolver_Registrar_Heartbeat_beat_Params_List struct{ capnp.List }

// NewHostPortResolver_Registrar_Heartbeat_beat_Params creates a new list of HostPortResolver_Registrar_Heartbeat_beat_Params.
func NewHostPortResolver_Registrar_Heartbeat_beat_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_beat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return HostPortResolver_Registrar_Heartbeat_beat_Params_List{l}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params_List) At(i int) HostPortResolver_Registrar_Heartbeat_beat_Params {
	return HostPortResolver_Registrar_Heartbeat_beat_Params{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params_List) Set(i int, v HostPortResolver_Registrar_Heartbeat_beat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params_List) String() string {
	str, _ := text.MarshalList(0xebff70497e0ba555, s.List)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Params_Future is a wrapper for a HostPortResolver_Registrar_Heartbeat_beat_Params promised by a client call.
type HostPortResolver_Registrar_Heartbeat_beat_Params_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_Heartbeat_beat_Params_Future) Struct() (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_Heartbeat_beat_Params{s}, err
}

type HostPortResolver_Registrar_Heartbeat_beat_Results struct{ capnp.Struct }

// HostPortResolver_Registrar_Heartbeat_beat_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat_beat_Results.
const HostPortResolver_Registrar_Heartbeat_beat_Results_TypeID = 0x9510c22fa544a65e

func NewHostPortResolver_Registrar_Heartbeat_beat_Results(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results{st}, err
}

func NewRootHostPortResolver_Registrar_Heartbeat_beat_Results(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results{st}, err
}

func ReadRootHostPortResolver_Registrar_Heartbeat_beat_Results(msg *capnp.Message) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_Heartbeat_beat_Results{root.Struct()}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) String() string {
	str, _ := text.Marshal(0x9510c22fa544a65e, s.Struct)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Results_List is a list of HostPortResolver_Registrar_Heartbeat_beat_Results.
type HostPortResolver_Registrar_Heartbeat_beat_Results_List struct{ capnp.List }

// NewHostPortResolver_Registrar_Heartbeat_beat_Results creates a new list of HostPortResolver_Registrar_Heartbeat_beat_Results.
func NewHostPortResolver_Registrar_Heartbeat_beat_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_beat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return HostPortResolver_Registrar_Heartbeat_beat_Results_List{l}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results_List) At(i int) HostPortResolver_Registrar_Heartbeat_beat_Results {
	return HostPortResolver_Registrar_Heartbeat_beat_Results{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results_List) Set(i int, v HostPortResolver_Registrar_Heartbeat_beat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results_List) String() string {
	str, _ := text.MarshalList(0x9510c22fa544a65e, s.List)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Results_Future is a wrapper for a HostPortResolver_Registrar_Heartbeat_beat_Results promised by a client call.
type HostPortResolver_Registrar_Heartbeat_beat_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_Heartbeat_beat_Results_Future) Struct() (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_Heartbeat_beat_Results{s}, err
}

type HostPortResolver_Registrar_RegisterParams struct{ capnp.Struct }

// HostPortResolver_Registrar_RegisterParams_TypeID is the unique identifier for the type HostPortResolver_Registrar_RegisterParams.
const HostPortResolver_Registrar_RegisterParams_TypeID = 0xbf018f62ff460d0f

func NewHostPortResolver_Registrar_RegisterParams(s *capnp.Segment) (HostPortResolver_Registrar_RegisterParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_RegisterParams{st}, err
}

func NewRootHostPortResolver_Registrar_RegisterParams(s *capnp.Segment) (HostPortResolver_Registrar_RegisterParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_RegisterParams{st}, err
}

func ReadRootHostPortResolver_Registrar_RegisterParams(msg *capnp.Message) (HostPortResolver_Registrar_RegisterParams, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_RegisterParams{root.Struct()}, err
}

func (s HostPortResolver_Registrar_RegisterParams) String() string {
	str, _ := text.Marshal(0xbf018f62ff460d0f, s.Struct)
	return str
}

func (s HostPortResolver_Registrar_RegisterParams) Base64VatId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasBase64VatId() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_Registrar_RegisterParams) Base64VatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetBase64VatId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Host() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasHost() bool {
	return s.Struct.HasPtr(1)
}

func (s HostPortResolver_Registrar_RegisterParams) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetHost(v string) error {
	return s.Struct.SetText(1, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostPortResolver_Registrar_RegisterParams) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Alias() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasAlias() bool {
	return s.Struct.HasPtr(2)
}

func (s HostPortResolver_Registrar_RegisterParams) AliasBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetAlias(v string) error {
	return s.Struct.SetText(2, v)
}

// HostPortResolver_Registrar_RegisterParams_List is a list of HostPortResolver_Registrar_RegisterParams.
type HostPortResolver_Registrar_RegisterParams_List struct{ capnp.List }

// NewHostPortResolver_Registrar_RegisterParams creates a new list of HostPortResolver_Registrar_RegisterParams.
func NewHostPortResolver_Registrar_RegisterParams_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_RegisterParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return HostPortResolver_Registrar_RegisterParams_List{l}, err
}

func (s HostPortResolver_Registrar_RegisterParams_List) At(i int) HostPortResolver_Registrar_RegisterParams {
	return HostPortResolver_Registrar_RegisterParams{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_RegisterParams_List) Set(i int, v HostPortResolver_Registrar_RegisterParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_RegisterParams_List) String() string {
	str, _ := text.MarshalList(0xbf018f62ff460d0f, s.List)
	return str
}

// HostPortResolver_Registrar_RegisterParams_Future is a wrapper for a HostPortResolver_Registrar_RegisterParams promised by a client call.
type HostPortResolver_Registrar_RegisterParams_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_RegisterParams_Future) Struct() (HostPortResolver_Registrar_RegisterParams, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_RegisterParams{s}, err
}

type HostPortResolver_Registrar_register_Results struct{ capnp.Struct }

// HostPortResolver_Registrar_register_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_register_Results.
const HostPortResolver_Registrar_register_Results_TypeID = 0xfafc816633f98bb9

func NewHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{st}, err
}

func NewRootHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{st}, err
}

func ReadRootHostPortResolver_Registrar_register_Results(msg *capnp.Message) (HostPortResolver_Registrar_register_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_register_Results{root.Struct()}, err
}

func (s HostPortResolver_Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xfafc816633f98bb9, s.Struct)
	return str
}

func (s HostPortResolver_Registrar_register_Results) Heartbeat() HostPortResolver_Registrar_Heartbeat {
	p, _ := s.Struct.Ptr(0)
	return HostPortResolver_Registrar_Heartbeat{Client: p.Interface().Client()}
}

func (s HostPortResolver_Registrar_register_Results) HasHeartbeat() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_Registrar_register_Results) SetHeartbeat(v HostPortResolver_Registrar_Heartbeat) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s HostPortResolver_Registrar_register_Results) SecsHeartbeatInterval() uint32 {
	return s.Struct.Uint32(0)
}

func (s HostPortResolver_Registrar_register_Results) SetSecsHeartbeatInterval(v uint32) {
	s.Struct.SetUint32(0, v)
}

// HostPortResolver_Registrar_register_Results_List is a list of HostPortResolver_Registrar_register_Results.
type HostPortResolver_Registrar_register_Results_List struct{ capnp.List }

// NewHostPortResolver_Registrar_register_Results creates a new list of HostPortResolver_Registrar_register_Results.
func NewHostPortResolver_Registrar_register_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HostPortResolver_Registrar_register_Results_List{l}, err
}

func (s HostPortResolver_Registrar_register_Results_List) At(i int) HostPortResolver_Registrar_register_Results {
	return HostPortResolver_Registrar_register_Results{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_register_Results_List) Set(i int, v HostPortResolver_Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xfafc816633f98bb9, s.List)
	return str
}

// HostPortResolver_Registrar_register_Results_Future is a wrapper for a HostPortResolver_Registrar_register_Results promised by a client call.
type HostPortResolver_Registrar_register_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_register_Results_Future) Struct() (HostPortResolver_Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_register_Results{s}, err
}

func (p HostPortResolver_Registrar_register_Results_Future) Heartbeat() HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat{Client: p.Future.Field(0, nil).Client()}
}

type HostPortResolver_resolve_Params struct{ capnp.Struct }

// HostPortResolver_resolve_Params_TypeID is the unique identifier for the type HostPortResolver_resolve_Params.
const HostPortResolver_resolve_Params_TypeID = 0xe6f8966f0f2cbb33

func NewHostPortResolver_resolve_Params(s *capnp.Segment) (HostPortResolver_resolve_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_resolve_Params{st}, err
}

func NewRootHostPortResolver_resolve_Params(s *capnp.Segment) (HostPortResolver_resolve_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_resolve_Params{st}, err
}

func ReadRootHostPortResolver_resolve_Params(msg *capnp.Message) (HostPortResolver_resolve_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_resolve_Params{root.Struct()}, err
}

func (s HostPortResolver_resolve_Params) String() string {
	str, _ := text.Marshal(0xe6f8966f0f2cbb33, s.Struct)
	return str
}

func (s HostPortResolver_resolve_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_resolve_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_resolve_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_resolve_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// HostPortResolver_resolve_Params_List is a list of HostPortResolver_resolve_Params.
type HostPortResolver_resolve_Params_List struct{ capnp.List }

// NewHostPortResolver_resolve_Params creates a new list of HostPortResolver_resolve_Params.
func NewHostPortResolver_resolve_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_resolve_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HostPortResolver_resolve_Params_List{l}, err
}

func (s HostPortResolver_resolve_Params_List) At(i int) HostPortResolver_resolve_Params {
	return HostPortResolver_resolve_Params{s.List.Struct(i)}
}

func (s HostPortResolver_resolve_Params_List) Set(i int, v HostPortResolver_resolve_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_resolve_Params_List) String() string {
	str, _ := text.MarshalList(0xe6f8966f0f2cbb33, s.List)
	return str
}

// HostPortResolver_resolve_Params_Future is a wrapper for a HostPortResolver_resolve_Params promised by a client call.
type HostPortResolver_resolve_Params_Future struct{ *capnp.Future }

func (p HostPortResolver_resolve_Params_Future) Struct() (HostPortResolver_resolve_Params, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_resolve_Params{s}, err
}

type HostPortResolver_resolve_Results struct{ capnp.Struct }

// HostPortResolver_resolve_Results_TypeID is the unique identifier for the type HostPortResolver_resolve_Results.
const HostPortResolver_resolve_Results_TypeID = 0xfc185f518d220b8c

func NewHostPortResolver_resolve_Results(s *capnp.Segment) (HostPortResolver_resolve_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_resolve_Results{st}, err
}

func NewRootHostPortResolver_resolve_Results(s *capnp.Segment) (HostPortResolver_resolve_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_resolve_Results{st}, err
}

func ReadRootHostPortResolver_resolve_Results(msg *capnp.Message) (HostPortResolver_resolve_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_resolve_Results{root.Struct()}, err
}

func (s HostPortResolver_resolve_Results) String() string {
	str, _ := text.Marshal(0xfc185f518d220b8c, s.Struct)
	return str
}

func (s HostPortResolver_resolve_Results) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_resolve_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_resolve_Results) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_resolve_Results) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HostPortResolver_resolve_Results) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostPortResolver_resolve_Results) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

// HostPortResolver_resolve_Results_List is a list of HostPortResolver_resolve_Results.
type HostPortResolver_resolve_Results_List struct{ capnp.List }

// NewHostPortResolver_resolve_Results creates a new list of HostPortResolver_resolve_Results.
func NewHostPortResolver_resolve_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_resolve_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HostPortResolver_resolve_Results_List{l}, err
}

func (s HostPortResolver_resolve_Results_List) At(i int) HostPortResolver_resolve_Results {
	return HostPortResolver_resolve_Results{s.List.Struct(i)}
}

func (s HostPortResolver_resolve_Results_List) Set(i int, v HostPortResolver_resolve_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_resolve_Results_List) String() string {
	str, _ := text.MarshalList(0xfc185f518d220b8c, s.List)
	return str
}

// HostPortResolver_resolve_Results_Future is a wrapper for a HostPortResolver_resolve_Results promised by a client call.
type HostPortResolver_resolve_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_resolve_Results_Future) Struct() (HostPortResolver_resolve_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_resolve_Results{s}, err
}

const schema_855efed3475f6b26 = "x\xda\x9cW\x7fl[\xd5\x15>\xe7]\xdb\xcfN\xec" +
	"\xd8\xd77\x8c)#\xf2\x92\x86\x95f\x8di\x92.\x9d" +
	"*\xa4\xb4\xd9\xda\xb4\x99\xd0|_\x06R\xcbZ\xfa\x12" +
	"\xdf\x10\x0f\xc7v\xde{N\x09b\x0b\xd5@l@\xd4" +
	"\x95\xadh\x99\x86\xca\xb4v\x9b\x90&\xa6JC\xeb\xf6" +
	"\x07\xa2\x02\x09\xadBZ\xbbu\xa8\x05\xa1\x8d\x0961" +
	"\xaa\x89H\x88\xc1\x18o\xba\xcf~\xbe/\xae[:\xfe" +
	"\x89\xf2\xee;\xef\xfc\xfa\xbe\xf3\x9d\xebM\xef\x85\xb6i" +
	"\x83\xe1g\xe3\x00\xfc\x07\xe1\x88[^]\xfe\xf3\xb9\xc7" +
	"^{\x08\xe8\x00qO~og\xa5\xfa\xde\xef\x7f\x05" +
	"\x80\xc3;\"\xbfE\xb6/\xa2\x03\xb0=\x91qvH" +
	"\xfe\xe7\xde\xfa\xda\xb7\xbb\xd7\xcf\xce}\x07x\x1a\xd1\xfd" +
	"\xdc\xddw\x8e\xff\xf1\xa3\xfd\x0f\xc2\x0e\xd45\x00V\x88" +
	"\xbc\xce\xaa\x91-\x00l%r\x10\xd05\xb2\xc7>u" +
	"(Y9\x0c\xb4\x9b\xb8\xe2\xcc\xc8\xabO^\xfc\xf9s" +
	"\xd2\xf7\xfb\x11\x0bYB\x97\xbec\xfa8\xdb#\xffs" +
	"\x0b\x0f\x7f\xf7\xa6\xd0\xbe\x93\x87\x81w!q\x13w<" +
	"9\x1f94\xfe\x1f\xb8\x0eu\x04`\xdb\xf5U@\xb6" +
	"C\x97~'\xff\x91\xea\xfb[i\xe0\xfb\xc0\xb3\x88\x00" +
	"!\x1d`\xf8'\xfa*\x02\xb2_\xeb\xa3\x80\xee\xfe\x9f" +
	"}\xf9\xc4\xcd\xa7SG\x81n\xf1\xdf\x9f\xd7{5\x08" +
	"\xb9\xb7d/\xac\x7f\xa0\xe7\x99c@\xd3D\xe5\x0f\xc8" +
	"^\xd2/\xb2\x0b\xfa\xf5\x00\xec\x0d}\x9c%\xa22\xa3" +
	"\x17\x7f\xfa\x8bU\xf3O\x9f?\x0e\xf4\x06T\xa5\x875" +
	"\xe9\xef]}\x08YX\x9a1\x8c\xca\xa4\xae\xbb\xef\xfe" +
	"\x0b\x9f}\xf4\x95\xe3@\xb3~L3\xfa\x16B\xc8=" +
	"\xd6\xfd\x87g>8\xb2\xfcTs\xcc\xe1\xdb\xa2]\xc8" +
	"DT\x06\x9d\x8f\x8e\xb3\x95\xe8z\x00\x85\x01]G\xd4" +
	"\xa7\x80\xc3G\xa2\xdf@vB\xda\xb0\xe7\xa2\xe3\xec\x92" +
	"\x97b2\xb1\xd3\x9d:\x8c\xcf\x02\x1f@T\xdf\x86\x89" +
	"Ws\xf4ud\xefx9^\x8a\xfe\x1dPa\xd0\\" +
	"\xfd\x0b\xb1\xb7\xd8\xd9\x98D\x0e\xdb\xc6\xd9\x866\xe9z" +
	"\xeb\xcb[&\x16\xde\xd8\xfe\x02\xd0\xcf\xa0\xea[\xadz" +
	"\xda6\x81\xecFi\xc6z\xdad\xf5\xbf\xd9?\x88\xc7" +
	"\x17\xdf<\x03\xfc\x06\x0c\xa9^ymx\xb0\xad\x0b\xd9" +
	"Q\xcf\xf8H\x9bL\xe3Kd\x7f\xef\xf3O\xfd\xe5<" +
	"\xd0\xee@Na\x94\xc6\xa2}\x0cY\xb5]\x1a\xcf\xb7" +
	"K,\x1f\xba\xff\xf9WV_z\xfb\x02\xd0t\x80q" +
	"^\x1a\xecH\xfb9\xf6\x84g\xbb\xd2.\xb3\xb8\xf1\xd6" +
	"\xec\x8d\xdds\x8f_\x94)C\xdd\xe1\xbb\xed{%1" +
	"0.\x9d\xb1\xb77\xfe\xf0_g\xefx\xb5)\xb2W" +
	"SO|\x02\xd9\x17\xe2\xd2\xdb`\\z[>\xfb\xc8" +
	"yg_\xdb_%\xd9C*\xb4\xac\x89\x1d\x8d\x9ff" +
	"Ox\xb6+qY\xd2\xf0\xef6&\xcb\x8f\xff\xfbM" +
	"\xa0\xeb\x1a\x91\xbf\x99xLF^N\xc8\xc8\xb7\x9dh" +
	"\xff\xd6\xee\x8a\xfb\xcf\x00%\x7f\x99\xe8\x92\x94<\xf5\xc8" +
	"\xfb\xc33\x87>\xfc\xc0\x83\xd0\xff\xf6D\xc2\xa3\xf3\xa9" +
	"\x84L\xa41\x0b<\x8dd\xed\xd4a\x8c\xf5t\x9cc" +
	"\x03\x1d2\x95\x0d\x1dO\x03\xba\x8f\xb6\xf7.\xf3;?" +
	"\xfd!\xf0u\x01\x7f\x1d?\xf2\xc6\xa3C\xfa[w\xf0" +
	"\xc5\x03\x97V^\xfeo\x13\xaf=C\x9aL#\xebI" +
	"Jw\xdd\xc9Q\xb8\xd7\xad\x08\xcb.\xd8\x8e\x08\x97\xa6" +
	"Ev\xda\xac\x94*[w\x95m'W\xb6\x1cC\xd8" +
	"\xe5\xe2\x82\xb0\xb2\x86\xb8\xab`;\x96iew\x09s" +
	"\xd4r\xa6\x84\xe9\xe4\x10y\x88\x84\x01\x1a\xa5\xa3?\x96" +
	"\x94\xf6\x83F\xc3zR\xdam\xc3\x1cb#\x8a\xa6\xa2" +
	"L:U+\xbf\xa8\x1bb\x86\xc71\x984\x1d\x0aL" +
	"f\xc2P\xdc\xa3\x89\xad\x99\xaf\x1e,\x09\xcb\xfd\x9ae" +
	"\x96\xec\x82(\x01:\xa3\x93N\xd9\x12y\x1e%\xa1\xb8" +
	"\xeb\x86\x10\x80n0\x00\xf8M\x04\xf9f\x0d\x13\xf8\x91" +
	"\xdb)\xfbD\x07\xb7\x02\xf0\x8d\x04\xf9\x175t\x1d\xe5" +
	"\x00S*\x1c \xa6\x00Gm\xcf%\xa6T\xe8\xda\x8b" +
	"F\x19!UF\xae~Tr\xb2\x86(\x0a\xd3\x16\xb2" +
	"\xb0L~\xd1\x103\xaaG\xbez\xa0\xafm\x94\x8eQ" +
	"\x9a\x01\xa4\x03\xfa\x92U\xfb\x8e\x87Ps\xdfY\xbe\xf9" +
	"\xfa\xf4\x81S\xa7\x81\x874\xdc\xde\x89\x18\x07\xa0h\xb8" +
	"u\x9bI@\x03\xe0\x8a=\xdd\x9e\xcf[\xc2\xce\xd8\xd9" +
	"BeDv\x04\xa0\xd6\x901\x00\xdeG\x90o\xd2\x90" +
	"\"\xd6\xfa10\xa6\xba\xb4T,\x1f\x14\xd6\xc8f\x8c" +
	"\x81\x861\xc0\xa5j\xa5\x12|n\xc4\x8a|\\\xe1^" +
	"\xdd\xd9z\xb6}\x86\xc8\xd8\xd5\xa2c\xf3P#\x97\x84" +
	"\x0c\x1b%\xc8;5\\\xb2\xab\xd3\xd3\xc2\xb6\x11AC" +
	"\x0c\x84\xd1\xaf\x95\x8c5.f\xe5\x9f>C\xd8U\xbd" +
	"\xe8\xd8\xad\x1ac\x08\x89)\x11\x16\x0f!\x06\xa4\x0f-" +
	"\xb7\xf6J\xe4 cZ\xe6\x9c]\x07\xcc7A_s" +
	"(\x1d\xf3H\xbdd\xd5\xec\xd7b@\x9ay-\xbb " +
	"Y\x9a\x91,\xf3\x86%\x00Go+8&\x14=\xf5" +
	"\x05S\xd2\xb2!\x8du\xf6\x15\xcb\xd3f\xd1\x103\x00" +
	"\x80i\xd00\xfd\xc9\x81\xc9\x99IYl\xab\xfc\xd76" +
	"\xdco\x99Z[h\xb8>\x04\x80V\xbd]\xbe>\xa2" +
	"\xafN\xc1vI\xdc\xb6!\x8f\"\xba\xe7w\xfdx\xcf" +
	"\x99\xb3O\x9f\x04\x00\xb5s\x00Z\x0dVk\xe0\x93\x12" +
	"y\xcf\x95\xba\xd9\xc4\x0c\xb5'i\xec^\xd7\xe7\x05\xa0" +
	"SOUX0\x9a\x0b\xc2\xeb\xdb\xa3\xaf\xce\x94N\x80" +
	"Fc\xbak\xf9\x1f4\x8fY\xe4\x9a8\xe9\xc7\xcb\x99" +
	"\x96n\xce\xd9\x12\xf8T\x03xs\x0a\x80\x1f \xc8\x8b" +
	"\x01\xe0\x0b\xfd\x00<O\x90W4D\xad\x135\x00:" +
	"'\xcff\x09rGCJ\xb4N$\x00t~\x08\x80" +
	"\x17\x09\xf2{4t\xa7L[\x8cl\xbe\xdd\x04\xdd\xd9" +
	"\x9d\xc78h\x18\x07L\xce\x96m\xa7\xf1P)[\x0e" +
	"\xea\xa0\xa1\x0e\x981\x8b\x05\xd3\xf6_\xb5\x9a\x90\x1ak" +
	"\x92\x926\x9e\x1e\xab%N\xf7\x06\xf6*\x9d\x0a\\\xfb" +
	"\xe8\xc3\xee\xa4\xb9 dg\x81\xcc\xd9\xde\x83\x9cB\xf0" +
	"\xc6\xd0'\x1f\xfa\xec\x03\xa8w\xdf\xf7\x8d\xbe\xdf\xc6\xc6" +
	"\xb0\xcd\x85\xa6\xc9\x0a5\x0f\xb1\xd7\xee\xda\xc8z\x88\x02" +
	"4M\xd7\x84\xd2\xb5F\x93\x07\xe5J\xd8D\x90\xdf\xa2" +
	"\xb5\x9e#[\x98E\x91\xdfY\x06\xb40\xa5\x96Q\x93" +
	"\xee\xb7\x1c\xf3IOY\xf2MPK\x04\xbfN\x90\xcf" +
	"\x06\xb2\x10\xfd\x01\xfc\xb5:\xd6A\xfc)!5\xac\x83" +
	"\x04H\xde-\x167\xf9J,\x1f\x06\x83\x0fC\xc1\x87" +
	"\xe1\xcb\x04\xbb\xf5\xa6\xf2Q\x9b\xb3\xa1\xb6\xa3Z\xab\xb3" +
	"0\x8b;\xcbW\xebG\x80?\xb7\x9bN\xcetp\xb6" +
	"\x09\x8c\xae\x8f\xd9<\xa4 \xf7l\xe3*V\xf3\xbfd" +
	"z{\xcc\xc6\x94\xba\x1b]y\x037hQWfo" +
	"\x11\x14\xc9\xda\xad\xd3\xab\xea\xd2\xa7\xcd\x0a\xa6C\x04p" +
	"\x8d\x82^\xb9S\x9e?\xe7r\xa2\x19\xad\x886\x11 " +
	"\x9a]\xe7\x08\xe0\x0c\xa6\xd4M\xac^J\xb5$\xd9>" +
	"iH\x1a^\xfe\xb6u\x8bw\xe7\xa1\x89g{[I" +
	"\xca\xde\x80|\xf8<\x9b\x97\x87\x15\x82\xfc\xbe\x00\xcf\x16" +
	"\xe5\xe1=\x04\xf9\x03\x1a\xba\x95\xeaT\xb10\xfd\x15\x01" +
	"D\xf1-x8\xd8\xeap\xa8\xd5\xe1\xe5<\xbc\xda\xf5" +
	"\xb2\xbe\"\xfa<F\xe2\x1a\xd8\xba\x14l\x92)\xcd\xfa" +
	"\xf5\x89\xee\x092\x0c\x09\xec\xbek\x13v\x7f/\xa8;" +
	"Mk&4\x88p\x12\x80o&\xc8\xb7i\xe8\xce\xaa" +
	"\x8d\x84Tm.@\xa4\x9e\xf6L\xdb2G\xf4\x92\xdc" +
	"]r2\xc2Z0\x8b\x18\x05\x0d\xa3p\x95\x8b\x1ez" +
	"\xfb%\xee\xdd|\x11\xd5/l\xba\xa3\x174\xaaEk" +
	"\xc0\x0f\xf47_\x87%\xf2\x83\xfd\x81\xfbF\xa12\xb2" +
	"f]\xacY$\xff\x17\x86\x8d\xd9\x0bt\xa7_i@" +
	"C\x02\x029]yk]]w\xe5O\x01\xb4\x9a\xf4" +
	"\xab_\x11&yWUQ\xe6\x7f\x01\x00\x00\xff\xff\x9c" +
	"\x19\xd4\x80"

func init() {
	schemas.Register(schema_855efed3475f6b26,
		0x87de92d2d68df26f,
		0x886d68271d83de4d,
		0x8f700f81169f2e52,
		0x8fb25d0428898a69,
		0x932d6ee32410e853,
		0x9510c22fa544a65e,
		0x9fb6218427d92e3c,
		0xa42bd461f2a8a3c8,
		0xa4db8c20d9807c15,
		0xaa8d91fab6d01d9f,
		0xb0caf775704690b2,
		0xbf018f62ff460d0f,
		0xc1a7daa0dc36cb65,
		0xc541e5764a37d73a,
		0xcbe679a401315eb8,
		0xd5e0aac4225e0343,
		0xd9eccdf2dbc48087,
		0xda966d1d252e4d25,
		0xdc5bd1ef982cec13,
		0xe10a5d74d58bd18d,
		0xe6f8966f0f2cbb33,
		0xebff70497e0ba555,
		0xfafc816633f98bb9,
		0xfb47810671a05b0d,
		0xfc185f518d220b8c,
		0xfdd799ed60c87723)
}
