// Code generated by capnpc-go. DO NOT EDIT.

package persistence

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	strconv "strconv"
)

type VatId struct{ capnp.Struct }

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xe10a5d74d58bd18d

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId{st}, err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId{root.Struct()}, err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xe10a5d74d58bd18d, s.Struct)
	return str
}

func (s VatId) PublicKey0() uint64 {
	return s.Struct.Uint64(0)
}

func (s VatId) SetPublicKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s VatId) PublicKey1() uint64 {
	return s.Struct.Uint64(8)
}

func (s VatId) SetPublicKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s VatId) PublicKey2() uint64 {
	return s.Struct.Uint64(16)
}

func (s VatId) SetPublicKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s VatId) PublicKey3() uint64 {
	return s.Struct.Uint64(24)
}

func (s VatId) SetPublicKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// VatId_List is a list of VatId.
type VatId_List struct{ capnp.List }

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return VatId_List{l}, err
}

func (s VatId_List) At(i int) VatId { return VatId{s.List.Struct(i)} }

func (s VatId_List) Set(i int, v VatId) error { return s.List.SetStruct(i, v.Struct) }

func (s VatId_List) String() string {
	str, _ := text.MarshalList(0xe10a5d74d58bd18d, s.List)
	return str
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (p VatId_Future) Struct() (VatId, error) {
	s, err := p.Future.Struct()
	return VatId{s}, err
}

type Address struct{ capnp.Struct }
type Address_ip6 Address
type Address_Which uint16

const (
	Address_Which_ip6  Address_Which = 0
	Address_Which_host Address_Which = 1
)

func (w Address_Which) String() string {
	const s = "ip6host"
	switch w {
	case Address_Which_ip6:
		return s[0:3]
	case Address_Which_host:
		return s[3:7]

	}
	return "Address_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0xfb47810671a05b0d

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address{st}, err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.Root()
	return Address{root.Struct()}, err
}

func (s Address) String() string {
	str, _ := text.Marshal(0xfb47810671a05b0d, s.Struct)
	return str
}

func (s Address) Which() Address_Which {
	return Address_Which(s.Struct.Uint16(18))
}
func (s Address) Ip6() Address_ip6 { return Address_ip6(s) }

func (s Address) SetIp6() {
	s.Struct.SetUint16(18, 0)
}

func (s Address_ip6) Lower64() uint64 {
	return s.Struct.Uint64(0)
}

func (s Address_ip6) SetLower64(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Address_ip6) Upper64() uint64 {
	return s.Struct.Uint64(8)
}

func (s Address_ip6) SetUpper64(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s Address) Host() (string, error) {
	if s.Struct.Uint16(18) != 1 {
		panic("Which() != host")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Address) HasHost() bool {
	if s.Struct.Uint16(18) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Address) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetHost(v string) error {
	s.Struct.SetUint16(18, 1)
	return s.Struct.SetText(0, v)
}

func (s Address) Port() uint16 {
	return s.Struct.Uint16(16)
}

func (s Address) SetPort(v uint16) {
	s.Struct.SetUint16(16, v)
}

// Address_List is a list of Address.
type Address_List struct{ capnp.List }

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Address_List{l}, err
}

func (s Address_List) At(i int) Address { return Address{s.List.Struct(i)} }

func (s Address_List) Set(i int, v Address) error { return s.List.SetStruct(i, v.Struct) }

func (s Address_List) String() string {
	str, _ := text.MarshalList(0xfb47810671a05b0d, s.List)
	return str
}

// Address_Future is a wrapper for a Address promised by a client call.
type Address_Future struct{ *capnp.Future }

func (p Address_Future) Struct() (Address, error) {
	s, err := p.Future.Struct()
	return Address{s}, err
}

func (p Address_Future) Ip6() Address_ip6_Future { return Address_ip6_Future{p.Future} }

// Address_ip6_Future is a wrapper for a Address_ip6 promised by a client call.
type Address_ip6_Future struct{ *capnp.Future }

func (p Address_ip6_Future) Struct() (Address_ip6, error) {
	s, err := p.Future.Struct()
	return Address_ip6{s}, err
}

type VatPath struct{ capnp.Struct }

// VatPath_TypeID is the unique identifier for the type VatPath.
const VatPath_TypeID = 0xd9eccdf2dbc48087

func NewVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func NewRootVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath{st}, err
}

func ReadRootVatPath(msg *capnp.Message) (VatPath, error) {
	root, err := msg.Root()
	return VatPath{root.Struct()}, err
}

func (s VatPath) String() string {
	str, _ := text.Marshal(0xd9eccdf2dbc48087, s.Struct)
	return str
}

func (s VatPath) Id() (VatId, error) {
	p, err := s.Struct.Ptr(0)
	return VatId{Struct: p.Struct()}, err
}

func (s VatPath) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s VatPath) SetId(v VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated VatId struct, preferring placement in s's segment.
func (s VatPath) NewId() (VatId, error) {
	ss, err := NewVatId(s.Struct.Segment())
	if err != nil {
		return VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s VatPath) Address() (Address, error) {
	p, err := s.Struct.Ptr(1)
	return Address{Struct: p.Struct()}, err
}

func (s VatPath) HasAddress() bool {
	return s.Struct.HasPtr(1)
}

func (s VatPath) SetAddress(v Address) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s VatPath) NewAddress() (Address, error) {
	ss, err := NewAddress(s.Struct.Segment())
	if err != nil {
		return Address{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// VatPath_List is a list of VatPath.
type VatPath_List struct{ capnp.List }

// NewVatPath creates a new list of VatPath.
func NewVatPath_List(s *capnp.Segment, sz int32) (VatPath_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return VatPath_List{l}, err
}

func (s VatPath_List) At(i int) VatPath { return VatPath{s.List.Struct(i)} }

func (s VatPath_List) Set(i int, v VatPath) error { return s.List.SetStruct(i, v.Struct) }

func (s VatPath_List) String() string {
	str, _ := text.MarshalList(0xd9eccdf2dbc48087, s.List)
	return str
}

// VatPath_Future is a wrapper for a VatPath promised by a client call.
type VatPath_Future struct{ *capnp.Future }

func (p VatPath_Future) Struct() (VatPath, error) {
	s, err := p.Future.Struct()
	return VatPath{s}, err
}

func (p VatPath_Future) Id() VatId_Future {
	return VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p VatPath_Future) Address() Address_Future {
	return Address_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef struct{ capnp.Struct }
type SturdyRef_Which uint16

const (
	SturdyRef_Which_transient SturdyRef_Which = 0
	SturdyRef_Which_stored    SturdyRef_Which = 1
)

func (w SturdyRef_Which) String() string {
	const s = "transientstored"
	switch w {
	case SturdyRef_Which_transient:
		return s[0:9]
	case SturdyRef_Which_stored:
		return s[9:15]

	}
	return "SturdyRef_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0x886d68271d83de4d

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef{st}, err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef{root.Struct()}, err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0x886d68271d83de4d, s.Struct)
	return str
}

func (s SturdyRef) Which() SturdyRef_Which {
	return SturdyRef_Which(s.Struct.Uint16(0))
}
func (s SturdyRef) Transient() (SturdyRef_Transient, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != transient")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Transient{Struct: p.Struct()}, err
}

func (s SturdyRef) HasTransient() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetTransient(v SturdyRef_Transient) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransient sets the transient field to a newly
// allocated SturdyRef_Transient struct, preferring placement in s's segment.
func (s SturdyRef) NewTransient() (SturdyRef_Transient, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewSturdyRef_Transient(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Transient{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef) Stored() (SturdyRef_Stored, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != stored")
	}
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Stored{Struct: p.Struct()}, err
}

func (s SturdyRef) HasStored() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s SturdyRef) SetStored(v SturdyRef_Stored) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStored sets the stored field to a newly
// allocated SturdyRef_Stored struct, preferring placement in s's segment.
func (s SturdyRef) NewStored() (SturdyRef_Stored, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSturdyRef_Stored(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Stored{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List struct{ capnp.List }

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SturdyRef_List{l}, err
}

func (s SturdyRef_List) At(i int) SturdyRef { return SturdyRef{s.List.Struct(i)} }

func (s SturdyRef_List) Set(i int, v SturdyRef) error { return s.List.SetStruct(i, v.Struct) }

func (s SturdyRef_List) String() string {
	str, _ := text.MarshalList(0x886d68271d83de4d, s.List)
	return str
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (p SturdyRef_Future) Struct() (SturdyRef, error) {
	s, err := p.Future.Struct()
	return SturdyRef{s}, err
}

func (p SturdyRef_Future) Transient() SturdyRef_Transient_Future {
	return SturdyRef_Transient_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Future) Stored() SturdyRef_Stored_Future {
	return SturdyRef_Stored_Future{Future: p.Future.Field(0, nil)}
}

type SturdyRef_Owner struct{ capnp.Struct }

// SturdyRef_Owner_TypeID is the unique identifier for the type SturdyRef_Owner.
const SturdyRef_Owner_TypeID = 0xfdd799ed60c87723

func NewSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func NewRootSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner{st}, err
}

func ReadRootSturdyRef_Owner(msg *capnp.Message) (SturdyRef_Owner, error) {
	root, err := msg.Root()
	return SturdyRef_Owner{root.Struct()}, err
}

func (s SturdyRef_Owner) String() string {
	str, _ := text.Marshal(0xfdd799ed60c87723, s.Struct)
	return str
}

func (s SturdyRef_Owner) Guid() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Owner) HasGuid() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Owner) GuidBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Owner) SetGuid(v string) error {
	return s.Struct.SetText(0, v)
}

// SturdyRef_Owner_List is a list of SturdyRef_Owner.
type SturdyRef_Owner_List struct{ capnp.List }

// NewSturdyRef_Owner creates a new list of SturdyRef_Owner.
func NewSturdyRef_Owner_List(s *capnp.Segment, sz int32) (SturdyRef_Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SturdyRef_Owner_List{l}, err
}

func (s SturdyRef_Owner_List) At(i int) SturdyRef_Owner { return SturdyRef_Owner{s.List.Struct(i)} }

func (s SturdyRef_Owner_List) Set(i int, v SturdyRef_Owner) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Owner_List) String() string {
	str, _ := text.MarshalList(0xfdd799ed60c87723, s.List)
	return str
}

// SturdyRef_Owner_Future is a wrapper for a SturdyRef_Owner promised by a client call.
type SturdyRef_Owner_Future struct{ *capnp.Future }

func (p SturdyRef_Owner_Future) Struct() (SturdyRef_Owner, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Owner{s}, err
}

type SturdyRef_Transient struct{ capnp.Struct }

// SturdyRef_Transient_TypeID is the unique identifier for the type SturdyRef_Transient.
const SturdyRef_Transient_TypeID = 0xa42bd461f2a8a3c8

func NewSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func NewRootSturdyRef_Transient(s *capnp.Segment) (SturdyRef_Transient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef_Transient{st}, err
}

func ReadRootSturdyRef_Transient(msg *capnp.Message) (SturdyRef_Transient, error) {
	root, err := msg.Root()
	return SturdyRef_Transient{root.Struct()}, err
}

func (s SturdyRef_Transient) String() string {
	str, _ := text.Marshal(0xa42bd461f2a8a3c8, s.Struct)
	return str
}

func (s SturdyRef_Transient) Vat() (VatPath, error) {
	p, err := s.Struct.Ptr(0)
	return VatPath{Struct: p.Struct()}, err
}

func (s SturdyRef_Transient) HasVat() bool {
	return s.Struct.HasPtr(0)
}

func (s SturdyRef_Transient) SetVat(v VatPath) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVat sets the vat field to a newly
// allocated VatPath struct, preferring placement in s's segment.
func (s SturdyRef_Transient) NewVat() (VatPath, error) {
	ss, err := NewVatPath(s.Struct.Segment())
	if err != nil {
		return VatPath{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SturdyRef_Transient) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s SturdyRef_Transient) HasLocalRef() bool {
	return s.Struct.HasPtr(1)
}

func (s SturdyRef_Transient) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// SturdyRef_Transient_List is a list of SturdyRef_Transient.
type SturdyRef_Transient_List struct{ capnp.List }

// NewSturdyRef_Transient creates a new list of SturdyRef_Transient.
func NewSturdyRef_Transient_List(s *capnp.Segment, sz int32) (SturdyRef_Transient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return SturdyRef_Transient_List{l}, err
}

func (s SturdyRef_Transient_List) At(i int) SturdyRef_Transient {
	return SturdyRef_Transient{s.List.Struct(i)}
}

func (s SturdyRef_Transient_List) Set(i int, v SturdyRef_Transient) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Transient_List) String() string {
	str, _ := text.MarshalList(0xa42bd461f2a8a3c8, s.List)
	return str
}

// SturdyRef_Transient_Future is a wrapper for a SturdyRef_Transient promised by a client call.
type SturdyRef_Transient_Future struct{ *capnp.Future }

func (p SturdyRef_Transient_Future) Struct() (SturdyRef_Transient, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Transient{s}, err
}

func (p SturdyRef_Transient_Future) Vat() VatPath_Future {
	return VatPath_Future{Future: p.Future.Field(0, nil)}
}

func (p SturdyRef_Transient_Future) LocalRef() *capnp.Future {
	return p.Future.Field(1, nil)
}

type SturdyRef_Stored struct{ capnp.Struct }

// SturdyRef_Stored_TypeID is the unique identifier for the type SturdyRef_Stored.
const SturdyRef_Stored_TypeID = 0xcbe679a401315eb8

func NewSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func NewRootSturdyRef_Stored(s *capnp.Segment) (SturdyRef_Stored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SturdyRef_Stored{st}, err
}

func ReadRootSturdyRef_Stored(msg *capnp.Message) (SturdyRef_Stored, error) {
	root, err := msg.Root()
	return SturdyRef_Stored{root.Struct()}, err
}

func (s SturdyRef_Stored) String() string {
	str, _ := text.Marshal(0xcbe679a401315eb8, s.Struct)
	return str
}

func (s SturdyRef_Stored) Key0() uint64 {
	return s.Struct.Uint64(0)
}

func (s SturdyRef_Stored) SetKey0(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SturdyRef_Stored) Key1() uint64 {
	return s.Struct.Uint64(8)
}

func (s SturdyRef_Stored) SetKey1(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s SturdyRef_Stored) Key2() uint64 {
	return s.Struct.Uint64(16)
}

func (s SturdyRef_Stored) SetKey2(v uint64) {
	s.Struct.SetUint64(16, v)
}

func (s SturdyRef_Stored) Key3() uint64 {
	return s.Struct.Uint64(24)
}

func (s SturdyRef_Stored) SetKey3(v uint64) {
	s.Struct.SetUint64(24, v)
}

// SturdyRef_Stored_List is a list of SturdyRef_Stored.
type SturdyRef_Stored_List struct{ capnp.List }

// NewSturdyRef_Stored creates a new list of SturdyRef_Stored.
func NewSturdyRef_Stored_List(s *capnp.Segment, sz int32) (SturdyRef_Stored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return SturdyRef_Stored_List{l}, err
}

func (s SturdyRef_Stored_List) At(i int) SturdyRef_Stored { return SturdyRef_Stored{s.List.Struct(i)} }

func (s SturdyRef_Stored_List) Set(i int, v SturdyRef_Stored) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SturdyRef_Stored_List) String() string {
	str, _ := text.MarshalList(0xcbe679a401315eb8, s.List)
	return str
}

// SturdyRef_Stored_Future is a wrapper for a SturdyRef_Stored promised by a client call.
type SturdyRef_Stored_Future struct{ *capnp.Future }

func (p SturdyRef_Stored_Future) Struct() (SturdyRef_Stored, error) {
	s, err := p.Future.Struct()
	return SturdyRef_Stored{s}, err
}

type Persistent struct{ Client *capnp.Client }

// Persistent_TypeID is the unique identifier for the type Persistent.
const Persistent_TypeID = 0xc1a7daa0dc36cb65

func (c Persistent) Save(ctx context.Context, params func(Persistent_SaveParams) error) (Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Persistent) AddRef() Persistent {
	return Persistent{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent) Release() {
	c.Client.Release()
}

// A Persistent_Server is a Persistent with a local implementation.
type Persistent_Server interface {
	Save(context.Context, Persistent_save) error
}

// Persistent_NewServer creates a new Server from an implementation of Persistent_Server.
func Persistent_NewServer(s Persistent_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_Methods(nil, s), s, c, policy)
}

// Persistent_ServerToClient creates a new Client from an implementation of Persistent_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ServerToClient(s Persistent_Server, policy *server.Policy) Persistent {
	return Persistent{Client: capnp.NewClient(Persistent_NewServer(s, policy))}
}

// Persistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_Methods(methods []server.Method, s Persistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, Persistent_save{call})
		},
	})

	return methods
}

// Persistent_save holds the state for a server call to Persistent.save.
// See server.Call for documentation.
type Persistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_save) Args() Persistent_SaveParams {
	return Persistent_SaveParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_save) AllocResults() (Persistent_SaveResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{Struct: r}, err
}

type Persistent_SaveParams struct{ capnp.Struct }

// Persistent_SaveParams_TypeID is the unique identifier for the type Persistent_SaveParams.
const Persistent_SaveParams_TypeID = 0xd5e0aac4225e0343

func NewPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func NewRootPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams{st}, err
}

func ReadRootPersistent_SaveParams(msg *capnp.Message) (Persistent_SaveParams, error) {
	root, err := msg.Root()
	return Persistent_SaveParams{root.Struct()}, err
}

func (s Persistent_SaveParams) String() string {
	str, _ := text.Marshal(0xd5e0aac4225e0343, s.Struct)
	return str
}

func (s Persistent_SaveParams) SealFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Persistent_SaveParams) HasSealFor() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveParams) SetSealFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSealFor sets the sealFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Persistent_SaveParams) NewSealFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveParams_List is a list of Persistent_SaveParams.
type Persistent_SaveParams_List struct{ capnp.List }

// NewPersistent_SaveParams creates a new list of Persistent_SaveParams.
func NewPersistent_SaveParams_List(s *capnp.Segment, sz int32) (Persistent_SaveParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Persistent_SaveParams_List{l}, err
}

func (s Persistent_SaveParams_List) At(i int) Persistent_SaveParams {
	return Persistent_SaveParams{s.List.Struct(i)}
}

func (s Persistent_SaveParams_List) Set(i int, v Persistent_SaveParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveParams_List) String() string {
	str, _ := text.MarshalList(0xd5e0aac4225e0343, s.List)
	return str
}

// Persistent_SaveParams_Future is a wrapper for a Persistent_SaveParams promised by a client call.
type Persistent_SaveParams_Future struct{ *capnp.Future }

func (p Persistent_SaveParams_Future) Struct() (Persistent_SaveParams, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveParams{s}, err
}

func (p Persistent_SaveParams_Future) SealFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(0, nil)}
}

type Persistent_SaveResults struct{ capnp.Struct }

// Persistent_SaveResults_TypeID is the unique identifier for the type Persistent_SaveResults.
const Persistent_SaveResults_TypeID = 0xdc5bd1ef982cec13

func NewPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func NewRootPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults{st}, err
}

func ReadRootPersistent_SaveResults(msg *capnp.Message) (Persistent_SaveResults, error) {
	root, err := msg.Root()
	return Persistent_SaveResults{root.Struct()}, err
}

func (s Persistent_SaveResults) String() string {
	str, _ := text.Marshal(0xdc5bd1ef982cec13, s.Struct)
	return str
}

func (s Persistent_SaveResults) SturdyRef() (SturdyRef, error) {
	p, err := s.Struct.Ptr(0)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasSturdyRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Persistent_SaveResults) SetSturdyRef(v SturdyRef) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Persistent_SaveResults) UnsaveSR() (SturdyRef, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef{Struct: p.Struct()}, err
}

func (s Persistent_SaveResults) HasUnsaveSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Persistent_SaveResults) SetUnsaveSR(v SturdyRef) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewUnsaveSR sets the unsaveSR field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewUnsaveSR() (SturdyRef, error) {
	ss, err := NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Persistent_SaveResults_List is a list of Persistent_SaveResults.
type Persistent_SaveResults_List struct{ capnp.List }

// NewPersistent_SaveResults creates a new list of Persistent_SaveResults.
func NewPersistent_SaveResults_List(s *capnp.Segment, sz int32) (Persistent_SaveResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Persistent_SaveResults_List{l}, err
}

func (s Persistent_SaveResults_List) At(i int) Persistent_SaveResults {
	return Persistent_SaveResults{s.List.Struct(i)}
}

func (s Persistent_SaveResults_List) Set(i int, v Persistent_SaveResults) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_SaveResults_List) String() string {
	str, _ := text.MarshalList(0xdc5bd1ef982cec13, s.List)
	return str
}

// Persistent_SaveResults_Future is a wrapper for a Persistent_SaveResults promised by a client call.
type Persistent_SaveResults_Future struct{ *capnp.Future }

func (p Persistent_SaveResults_Future) Struct() (Persistent_SaveResults, error) {
	s, err := p.Future.Struct()
	return Persistent_SaveResults{s}, err
}

func (p Persistent_SaveResults_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}

func (p Persistent_SaveResults_Future) UnsaveSR() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

type Persistent_ReleaseSturdyRef struct{ Client *capnp.Client }

// Persistent_ReleaseSturdyRef_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef.
const Persistent_ReleaseSturdyRef_TypeID = 0x8f700f81169f2e52

func (c Persistent_ReleaseSturdyRef) ReleaseSR(ctx context.Context, params func(Persistent_ReleaseSturdyRef_releaseSR_Params) error) (Persistent_ReleaseSturdyRef_releaseSR_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_ReleaseSturdyRef_releaseSR_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_Future{Future: ans.Future()}, release
}

func (c Persistent_ReleaseSturdyRef) AddRef() Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef{
		Client: c.Client.AddRef(),
	}
}

func (c Persistent_ReleaseSturdyRef) Release() {
	c.Client.Release()
}

// A Persistent_ReleaseSturdyRef_Server is a Persistent_ReleaseSturdyRef with a local implementation.
type Persistent_ReleaseSturdyRef_Server interface {
	ReleaseSR(context.Context, Persistent_ReleaseSturdyRef_releaseSR) error
}

// Persistent_ReleaseSturdyRef_NewServer creates a new Server from an implementation of Persistent_ReleaseSturdyRef_Server.
func Persistent_ReleaseSturdyRef_NewServer(s Persistent_ReleaseSturdyRef_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_ReleaseSturdyRef_Methods(nil, s), s, c, policy)
}

// Persistent_ReleaseSturdyRef_ServerToClient creates a new Client from an implementation of Persistent_ReleaseSturdyRef_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ReleaseSturdyRef_ServerToClient(s Persistent_ReleaseSturdyRef_Server, policy *server.Policy) Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef{Client: capnp.NewClient(Persistent_ReleaseSturdyRef_NewServer(s, policy))}
}

// Persistent_ReleaseSturdyRef_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_ReleaseSturdyRef_Methods(methods []server.Method, s Persistent_ReleaseSturdyRef_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseSR(ctx, Persistent_ReleaseSturdyRef_releaseSR{call})
		},
	})

	return methods
}

// Persistent_ReleaseSturdyRef_releaseSR holds the state for a server call to Persistent_ReleaseSturdyRef.releaseSR.
// See server.Call for documentation.
type Persistent_ReleaseSturdyRef_releaseSR struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_ReleaseSturdyRef_releaseSR) Args() Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Persistent_ReleaseSturdyRef_releaseSR) AllocResults() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{Struct: r}, err
}

type Persistent_ReleaseSturdyRef_releaseSR_Params struct{ capnp.Struct }

// Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Params.
const Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID = 0xa4db8c20d9807c15

func NewPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params{st}, err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params{st}, err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Params(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Params{root.Struct()}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) String() string {
	str, _ := text.Marshal(0xa4db8c20d9807c15, s.Struct)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Params.
type Persistent_ReleaseSturdyRef_releaseSR_Params_List struct{ capnp.List }

// NewPersistent_ReleaseSturdyRef_releaseSR_Params creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Params.
func NewPersistent_ReleaseSturdyRef_releaseSR_Params_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Persistent_ReleaseSturdyRef_releaseSR_Params_List{l}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) At(i int) Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params{s.List.Struct(i)}
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) Set(i int, v Persistent_ReleaseSturdyRef_releaseSR_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params_List) String() string {
	str, _ := text.MarshalList(0xa4db8c20d9807c15, s.List)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Params promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Params_Future struct{ *capnp.Future }

func (p Persistent_ReleaseSturdyRef_releaseSR_Params_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	s, err := p.Future.Struct()
	return Persistent_ReleaseSturdyRef_releaseSR_Params{s}, err
}

type Persistent_ReleaseSturdyRef_releaseSR_Results struct{ capnp.Struct }

// Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Results.
const Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID = 0x932d6ee32410e853

func NewPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{st}, err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results{st}, err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Results(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Results{root.Struct()}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) String() string {
	str, _ := text.Marshal(0x932d6ee32410e853, s.Struct)
	return str
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Results.
type Persistent_ReleaseSturdyRef_releaseSR_Results_List struct{ capnp.List }

// NewPersistent_ReleaseSturdyRef_releaseSR_Results creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Results.
func NewPersistent_ReleaseSturdyRef_releaseSR_Results_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_List{l}, err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) At(i int) Persistent_ReleaseSturdyRef_releaseSR_Results {
	return Persistent_ReleaseSturdyRef_releaseSR_Results{s.List.Struct(i)}
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) Set(i int, v Persistent_ReleaseSturdyRef_releaseSR_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results_List) String() string {
	str, _ := text.MarshalList(0x932d6ee32410e853, s.List)
	return str
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Results promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Results_Future struct{ *capnp.Future }

func (p Persistent_ReleaseSturdyRef_releaseSR_Results_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	s, err := p.Future.Struct()
	return Persistent_ReleaseSturdyRef_releaseSR_Results{s}, err
}

type Restorer struct{ Client *capnp.Client }

// Restorer_TypeID is the unique identifier for the type Restorer.
const Restorer_TypeID = 0x9fb6218427d92e3c

func (c Restorer) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c Restorer) AddRef() Restorer {
	return Restorer{
		Client: c.Client.AddRef(),
	}
}

func (c Restorer) Release() {
	c.Client.Release()
}

// A Restorer_Server is a Restorer with a local implementation.
type Restorer_Server interface {
	Restore(context.Context, Restorer_restore) error
}

// Restorer_NewServer creates a new Server from an implementation of Restorer_Server.
func Restorer_NewServer(s Restorer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Restorer_Methods(nil, s), s, c, policy)
}

// Restorer_ServerToClient creates a new Client from an implementation of Restorer_Server.
// The caller is responsible for calling Release on the returned Client.
func Restorer_ServerToClient(s Restorer_Server, policy *server.Policy) Restorer {
	return Restorer{Client: capnp.NewClient(Restorer_NewServer(s, policy))}
}

// Restorer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Restorer_Methods(methods []server.Method, s Restorer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Restorer_restore holds the state for a server call to Restorer.restore.
// See server.Call for documentation.
type Restorer_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Restorer_restore) Args() Restorer_RestoreParams {
	return Restorer_RestoreParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Restorer_restore) AllocResults() (Restorer_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{Struct: r}, err
}

type Restorer_RestoreParams struct{ capnp.Struct }

// Restorer_RestoreParams_TypeID is the unique identifier for the type Restorer_RestoreParams.
const Restorer_RestoreParams_TypeID = 0xc541e5764a37d73a

func NewRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func NewRootRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams{st}, err
}

func ReadRootRestorer_RestoreParams(msg *capnp.Message) (Restorer_RestoreParams, error) {
	root, err := msg.Root()
	return Restorer_RestoreParams{root.Struct()}, err
}

func (s Restorer_RestoreParams) String() string {
	str, _ := text.Marshal(0xc541e5764a37d73a, s.Struct)
	return str
}

func (s Restorer_RestoreParams) LocalRef() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_RestoreParams) HasLocalRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_RestoreParams) SetLocalRef(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Restorer_RestoreParams) SealedFor() (SturdyRef_Owner, error) {
	p, err := s.Struct.Ptr(1)
	return SturdyRef_Owner{Struct: p.Struct()}, err
}

func (s Restorer_RestoreParams) HasSealedFor() bool {
	return s.Struct.HasPtr(1)
}

func (s Restorer_RestoreParams) SetSealedFor(v SturdyRef_Owner) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSealedFor sets the sealedFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewSealedFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(s.Struct.Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Restorer_RestoreParams_List is a list of Restorer_RestoreParams.
type Restorer_RestoreParams_List struct{ capnp.List }

// NewRestorer_RestoreParams creates a new list of Restorer_RestoreParams.
func NewRestorer_RestoreParams_List(s *capnp.Segment, sz int32) (Restorer_RestoreParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Restorer_RestoreParams_List{l}, err
}

func (s Restorer_RestoreParams_List) At(i int) Restorer_RestoreParams {
	return Restorer_RestoreParams{s.List.Struct(i)}
}

func (s Restorer_RestoreParams_List) Set(i int, v Restorer_RestoreParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_RestoreParams_List) String() string {
	str, _ := text.MarshalList(0xc541e5764a37d73a, s.List)
	return str
}

// Restorer_RestoreParams_Future is a wrapper for a Restorer_RestoreParams promised by a client call.
type Restorer_RestoreParams_Future struct{ *capnp.Future }

func (p Restorer_RestoreParams_Future) Struct() (Restorer_RestoreParams, error) {
	s, err := p.Future.Struct()
	return Restorer_RestoreParams{s}, err
}

func (p Restorer_RestoreParams_Future) LocalRef() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Restorer_RestoreParams_Future) SealedFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(1, nil)}
}

type Restorer_restore_Results struct{ capnp.Struct }

// Restorer_restore_Results_TypeID is the unique identifier for the type Restorer_restore_Results.
const Restorer_restore_Results_TypeID = 0xda966d1d252e4d25

func NewRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func NewRootRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results{st}, err
}

func ReadRootRestorer_restore_Results(msg *capnp.Message) (Restorer_restore_Results, error) {
	root, err := msg.Root()
	return Restorer_restore_Results{root.Struct()}, err
}

func (s Restorer_restore_Results) String() string {
	str, _ := text.Marshal(0xda966d1d252e4d25, s.Struct)
	return str
}

func (s Restorer_restore_Results) Cap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Restorer_restore_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Restorer_restore_Results) SetCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Restorer_restore_Results_List is a list of Restorer_restore_Results.
type Restorer_restore_Results_List struct{ capnp.List }

// NewRestorer_restore_Results creates a new list of Restorer_restore_Results.
func NewRestorer_restore_Results_List(s *capnp.Segment, sz int32) (Restorer_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Restorer_restore_Results_List{l}, err
}

func (s Restorer_restore_Results_List) At(i int) Restorer_restore_Results {
	return Restorer_restore_Results{s.List.Struct(i)}
}

func (s Restorer_restore_Results_List) Set(i int, v Restorer_restore_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Restorer_restore_Results_List) String() string {
	str, _ := text.MarshalList(0xda966d1d252e4d25, s.List)
	return str
}

// Restorer_restore_Results_Future is a wrapper for a Restorer_restore_Results promised by a client call.
type Restorer_restore_Results_Future struct{ *capnp.Future }

func (p Restorer_restore_Results_Future) Struct() (Restorer_restore_Results, error) {
	s, err := p.Future.Struct()
	return Restorer_restore_Results{s}, err
}

func (p Restorer_restore_Results_Future) Cap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type HostPortResolver struct{ Client *capnp.Client }

// HostPortResolver_TypeID is the unique identifier for the type HostPortResolver.
const HostPortResolver_TypeID = 0xaa8d91fab6d01d9f

func (c HostPortResolver) Resolve(ctx context.Context, params func(HostPortResolver_resolve_Params) error) (HostPortResolver_resolve_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_resolve_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_resolve_Results_Future{Future: ans.Future()}, release
}
func (c HostPortResolver) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c HostPortResolver) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver) AddRef() HostPortResolver {
	return HostPortResolver{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver) Release() {
	c.Client.Release()
}

// A HostPortResolver_Server is a HostPortResolver with a local implementation.
type HostPortResolver_Server interface {
	Resolve(context.Context, HostPortResolver_resolve) error

	Info(context.Context, common.Identifiable_info) error

	Restore(context.Context, Restorer_restore) error
}

// HostPortResolver_NewServer creates a new Server from an implementation of HostPortResolver_Server.
func HostPortResolver_NewServer(s HostPortResolver_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Methods(nil, s), s, c, policy)
}

// HostPortResolver_ServerToClient creates a new Client from an implementation of HostPortResolver_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_ServerToClient(s HostPortResolver_Server, policy *server.Policy) HostPortResolver {
	return HostPortResolver{Client: capnp.NewClient(HostPortResolver_NewServer(s, policy))}
}

// HostPortResolver_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Methods(methods []server.Method, s HostPortResolver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolve(ctx, HostPortResolver_resolve{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// HostPortResolver_resolve holds the state for a server call to HostPortResolver.resolve.
// See server.Call for documentation.
type HostPortResolver_resolve struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_resolve) Args() HostPortResolver_resolve_Params {
	return HostPortResolver_resolve_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_resolve) AllocResults() (HostPortResolver_resolve_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_resolve_Results{Struct: r}, err
}

type HostPortResolver_Registrar struct{ Client *capnp.Client }

// HostPortResolver_Registrar_TypeID is the unique identifier for the type HostPortResolver_Registrar.
const HostPortResolver_Registrar_TypeID = 0xb0caf775704690b2

func (c HostPortResolver_Registrar) Register(ctx context.Context, params func(HostPortResolver_Registrar_register_Params) error) (HostPortResolver_Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_register_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_Registrar_register_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver_Registrar) AddRef() HostPortResolver_Registrar {
	return HostPortResolver_Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver_Registrar) Release() {
	c.Client.Release()
}

// A HostPortResolver_Registrar_Server is a HostPortResolver_Registrar with a local implementation.
type HostPortResolver_Registrar_Server interface {
	Register(context.Context, HostPortResolver_Registrar_register) error
}

// HostPortResolver_Registrar_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Server.
func HostPortResolver_Registrar_NewServer(s HostPortResolver_Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Methods(nil, s), s, c, policy)
}

// HostPortResolver_Registrar_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_ServerToClient(s HostPortResolver_Registrar_Server, policy *server.Policy) HostPortResolver_Registrar {
	return HostPortResolver_Registrar{Client: capnp.NewClient(HostPortResolver_Registrar_NewServer(s, policy))}
}

// HostPortResolver_Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Methods(methods []server.Method, s HostPortResolver_Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, HostPortResolver_Registrar_register{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_register holds the state for a server call to HostPortResolver_Registrar.register.
// See server.Call for documentation.
type HostPortResolver_Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_register) Args() HostPortResolver_Registrar_register_Params {
	return HostPortResolver_Registrar_register_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_register) AllocResults() (HostPortResolver_Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{Struct: r}, err
}

type HostPortResolver_Registrar_Heartbeat struct{ Client *capnp.Client }

// HostPortResolver_Registrar_Heartbeat_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat.
const HostPortResolver_Registrar_Heartbeat_TypeID = 0x87de92d2d68df26f

func (c HostPortResolver_Registrar_Heartbeat) Beat(ctx context.Context, params func(HostPortResolver_Registrar_Heartbeat_beat_Params) error) (HostPortResolver_Registrar_Heartbeat_beat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87de92d2d68df26f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar.Heartbeat",
			MethodName:    "beat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_Heartbeat_beat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return HostPortResolver_Registrar_Heartbeat_beat_Results_Future{Future: ans.Future()}, release
}

func (c HostPortResolver_Registrar_Heartbeat) AddRef() HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat{
		Client: c.Client.AddRef(),
	}
}

func (c HostPortResolver_Registrar_Heartbeat) Release() {
	c.Client.Release()
}

// A HostPortResolver_Registrar_Heartbeat_Server is a HostPortResolver_Registrar_Heartbeat with a local implementation.
type HostPortResolver_Registrar_Heartbeat_Server interface {
	Beat(context.Context, HostPortResolver_Registrar_Heartbeat_beat) error
}

// HostPortResolver_Registrar_Heartbeat_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Heartbeat_Server.
func HostPortResolver_Registrar_Heartbeat_NewServer(s HostPortResolver_Registrar_Heartbeat_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Heartbeat_Methods(nil, s), s, c, policy)
}

// HostPortResolver_Registrar_Heartbeat_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Heartbeat_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_Heartbeat_ServerToClient(s HostPortResolver_Registrar_Heartbeat_Server, policy *server.Policy) HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat{Client: capnp.NewClient(HostPortResolver_Registrar_Heartbeat_NewServer(s, policy))}
}

// HostPortResolver_Registrar_Heartbeat_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Heartbeat_Methods(methods []server.Method, s HostPortResolver_Registrar_Heartbeat_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87de92d2d68df26f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar.Heartbeat",
			MethodName:    "beat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Beat(ctx, HostPortResolver_Registrar_Heartbeat_beat{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_Heartbeat_beat holds the state for a server call to HostPortResolver_Registrar_Heartbeat.beat.
// See server.Call for documentation.
type HostPortResolver_Registrar_Heartbeat_beat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_Heartbeat_beat) Args() HostPortResolver_Registrar_Heartbeat_beat_Params {
	return HostPortResolver_Registrar_Heartbeat_beat_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_Heartbeat_beat) AllocResults() (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results{Struct: r}, err
}

type HostPortResolver_Registrar_Heartbeat_beat_Params struct{ capnp.Struct }

// HostPortResolver_Registrar_Heartbeat_beat_Params_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat_beat_Params.
const HostPortResolver_Registrar_Heartbeat_beat_Params_TypeID = 0xebff70497e0ba555

func NewHostPortResolver_Registrar_Heartbeat_beat_Params(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Params{st}, err
}

func NewRootHostPortResolver_Registrar_Heartbeat_beat_Params(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Params{st}, err
}

func ReadRootHostPortResolver_Registrar_Heartbeat_beat_Params(msg *capnp.Message) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_Heartbeat_beat_Params{root.Struct()}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) String() string {
	str, _ := text.Marshal(0xebff70497e0ba555, s.Struct)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Params_List is a list of HostPortResolver_Registrar_Heartbeat_beat_Params.
type HostPortResolver_Registrar_Heartbeat_beat_Params_List struct{ capnp.List }

// NewHostPortResolver_Registrar_Heartbeat_beat_Params creates a new list of HostPortResolver_Registrar_Heartbeat_beat_Params.
func NewHostPortResolver_Registrar_Heartbeat_beat_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_beat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return HostPortResolver_Registrar_Heartbeat_beat_Params_List{l}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params_List) At(i int) HostPortResolver_Registrar_Heartbeat_beat_Params {
	return HostPortResolver_Registrar_Heartbeat_beat_Params{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params_List) Set(i int, v HostPortResolver_Registrar_Heartbeat_beat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params_List) String() string {
	str, _ := text.MarshalList(0xebff70497e0ba555, s.List)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Params_Future is a wrapper for a HostPortResolver_Registrar_Heartbeat_beat_Params promised by a client call.
type HostPortResolver_Registrar_Heartbeat_beat_Params_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_Heartbeat_beat_Params_Future) Struct() (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_Heartbeat_beat_Params{s}, err
}

type HostPortResolver_Registrar_Heartbeat_beat_Results struct{ capnp.Struct }

// HostPortResolver_Registrar_Heartbeat_beat_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat_beat_Results.
const HostPortResolver_Registrar_Heartbeat_beat_Results_TypeID = 0x9510c22fa544a65e

func NewHostPortResolver_Registrar_Heartbeat_beat_Results(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results{st}, err
}

func NewRootHostPortResolver_Registrar_Heartbeat_beat_Results(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results{st}, err
}

func ReadRootHostPortResolver_Registrar_Heartbeat_beat_Results(msg *capnp.Message) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_Heartbeat_beat_Results{root.Struct()}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) String() string {
	str, _ := text.Marshal(0x9510c22fa544a65e, s.Struct)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Results_List is a list of HostPortResolver_Registrar_Heartbeat_beat_Results.
type HostPortResolver_Registrar_Heartbeat_beat_Results_List struct{ capnp.List }

// NewHostPortResolver_Registrar_Heartbeat_beat_Results creates a new list of HostPortResolver_Registrar_Heartbeat_beat_Results.
func NewHostPortResolver_Registrar_Heartbeat_beat_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_beat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return HostPortResolver_Registrar_Heartbeat_beat_Results_List{l}, err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results_List) At(i int) HostPortResolver_Registrar_Heartbeat_beat_Results {
	return HostPortResolver_Registrar_Heartbeat_beat_Results{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results_List) Set(i int, v HostPortResolver_Registrar_Heartbeat_beat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results_List) String() string {
	str, _ := text.MarshalList(0x9510c22fa544a65e, s.List)
	return str
}

// HostPortResolver_Registrar_Heartbeat_beat_Results_Future is a wrapper for a HostPortResolver_Registrar_Heartbeat_beat_Results promised by a client call.
type HostPortResolver_Registrar_Heartbeat_beat_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_Heartbeat_beat_Results_Future) Struct() (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_Heartbeat_beat_Results{s}, err
}

type HostPortResolver_Registrar_register_Params struct{ capnp.Struct }

// HostPortResolver_Registrar_register_Params_TypeID is the unique identifier for the type HostPortResolver_Registrar_register_Params.
const HostPortResolver_Registrar_register_Params_TypeID = 0xb5f200df6e0373e6

func NewHostPortResolver_Registrar_register_Params(s *capnp.Segment) (HostPortResolver_Registrar_register_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_register_Params{st}, err
}

func NewRootHostPortResolver_Registrar_register_Params(s *capnp.Segment) (HostPortResolver_Registrar_register_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_register_Params{st}, err
}

func ReadRootHostPortResolver_Registrar_register_Params(msg *capnp.Message) (HostPortResolver_Registrar_register_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_register_Params{root.Struct()}, err
}

func (s HostPortResolver_Registrar_register_Params) String() string {
	str, _ := text.Marshal(0xb5f200df6e0373e6, s.Struct)
	return str
}

func (s HostPortResolver_Registrar_register_Params) Base64VatId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_register_Params) HasBase64VatId() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_Registrar_register_Params) Base64VatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_register_Params) SetBase64VatId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HostPortResolver_Registrar_register_Params) Host() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_register_Params) HasHost() bool {
	return s.Struct.HasPtr(1)
}

func (s HostPortResolver_Registrar_register_Params) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_register_Params) SetHost(v string) error {
	return s.Struct.SetText(1, v)
}

func (s HostPortResolver_Registrar_register_Params) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostPortResolver_Registrar_register_Params) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostPortResolver_Registrar_register_Params) Alias() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_register_Params) HasAlias() bool {
	return s.Struct.HasPtr(2)
}

func (s HostPortResolver_Registrar_register_Params) AliasBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_register_Params) SetAlias(v string) error {
	return s.Struct.SetText(2, v)
}

// HostPortResolver_Registrar_register_Params_List is a list of HostPortResolver_Registrar_register_Params.
type HostPortResolver_Registrar_register_Params_List struct{ capnp.List }

// NewHostPortResolver_Registrar_register_Params creates a new list of HostPortResolver_Registrar_register_Params.
func NewHostPortResolver_Registrar_register_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_register_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return HostPortResolver_Registrar_register_Params_List{l}, err
}

func (s HostPortResolver_Registrar_register_Params_List) At(i int) HostPortResolver_Registrar_register_Params {
	return HostPortResolver_Registrar_register_Params{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_register_Params_List) Set(i int, v HostPortResolver_Registrar_register_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_register_Params_List) String() string {
	str, _ := text.MarshalList(0xb5f200df6e0373e6, s.List)
	return str
}

// HostPortResolver_Registrar_register_Params_Future is a wrapper for a HostPortResolver_Registrar_register_Params promised by a client call.
type HostPortResolver_Registrar_register_Params_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_register_Params_Future) Struct() (HostPortResolver_Registrar_register_Params, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_register_Params{s}, err
}

type HostPortResolver_Registrar_register_Results struct{ capnp.Struct }

// HostPortResolver_Registrar_register_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_register_Results.
const HostPortResolver_Registrar_register_Results_TypeID = 0xfafc816633f98bb9

func NewHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{st}, err
}

func NewRootHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results{st}, err
}

func ReadRootHostPortResolver_Registrar_register_Results(msg *capnp.Message) (HostPortResolver_Registrar_register_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_register_Results{root.Struct()}, err
}

func (s HostPortResolver_Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xfafc816633f98bb9, s.Struct)
	return str
}

func (s HostPortResolver_Registrar_register_Results) Heartbeat() HostPortResolver_Registrar_Heartbeat {
	p, _ := s.Struct.Ptr(0)
	return HostPortResolver_Registrar_Heartbeat{Client: p.Interface().Client()}
}

func (s HostPortResolver_Registrar_register_Results) HasHeartbeat() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_Registrar_register_Results) SetHeartbeat(v HostPortResolver_Registrar_Heartbeat) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s HostPortResolver_Registrar_register_Results) SecsHeartbeatInterval() uint32 {
	return s.Struct.Uint32(0)
}

func (s HostPortResolver_Registrar_register_Results) SetSecsHeartbeatInterval(v uint32) {
	s.Struct.SetUint32(0, v)
}

// HostPortResolver_Registrar_register_Results_List is a list of HostPortResolver_Registrar_register_Results.
type HostPortResolver_Registrar_register_Results_List struct{ capnp.List }

// NewHostPortResolver_Registrar_register_Results creates a new list of HostPortResolver_Registrar_register_Results.
func NewHostPortResolver_Registrar_register_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HostPortResolver_Registrar_register_Results_List{l}, err
}

func (s HostPortResolver_Registrar_register_Results_List) At(i int) HostPortResolver_Registrar_register_Results {
	return HostPortResolver_Registrar_register_Results{s.List.Struct(i)}
}

func (s HostPortResolver_Registrar_register_Results_List) Set(i int, v HostPortResolver_Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xfafc816633f98bb9, s.List)
	return str
}

// HostPortResolver_Registrar_register_Results_Future is a wrapper for a HostPortResolver_Registrar_register_Results promised by a client call.
type HostPortResolver_Registrar_register_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_Registrar_register_Results_Future) Struct() (HostPortResolver_Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_Registrar_register_Results{s}, err
}

func (p HostPortResolver_Registrar_register_Results_Future) Heartbeat() HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat{Client: p.Future.Field(0, nil).Client()}
}

type HostPortResolver_resolve_Params struct{ capnp.Struct }

// HostPortResolver_resolve_Params_TypeID is the unique identifier for the type HostPortResolver_resolve_Params.
const HostPortResolver_resolve_Params_TypeID = 0xe6f8966f0f2cbb33

func NewHostPortResolver_resolve_Params(s *capnp.Segment) (HostPortResolver_resolve_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_resolve_Params{st}, err
}

func NewRootHostPortResolver_resolve_Params(s *capnp.Segment) (HostPortResolver_resolve_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_resolve_Params{st}, err
}

func ReadRootHostPortResolver_resolve_Params(msg *capnp.Message) (HostPortResolver_resolve_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_resolve_Params{root.Struct()}, err
}

func (s HostPortResolver_resolve_Params) String() string {
	str, _ := text.Marshal(0xe6f8966f0f2cbb33, s.Struct)
	return str
}

func (s HostPortResolver_resolve_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_resolve_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_resolve_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_resolve_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

// HostPortResolver_resolve_Params_List is a list of HostPortResolver_resolve_Params.
type HostPortResolver_resolve_Params_List struct{ capnp.List }

// NewHostPortResolver_resolve_Params creates a new list of HostPortResolver_resolve_Params.
func NewHostPortResolver_resolve_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_resolve_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return HostPortResolver_resolve_Params_List{l}, err
}

func (s HostPortResolver_resolve_Params_List) At(i int) HostPortResolver_resolve_Params {
	return HostPortResolver_resolve_Params{s.List.Struct(i)}
}

func (s HostPortResolver_resolve_Params_List) Set(i int, v HostPortResolver_resolve_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_resolve_Params_List) String() string {
	str, _ := text.MarshalList(0xe6f8966f0f2cbb33, s.List)
	return str
}

// HostPortResolver_resolve_Params_Future is a wrapper for a HostPortResolver_resolve_Params promised by a client call.
type HostPortResolver_resolve_Params_Future struct{ *capnp.Future }

func (p HostPortResolver_resolve_Params_Future) Struct() (HostPortResolver_resolve_Params, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_resolve_Params{s}, err
}

type HostPortResolver_resolve_Results struct{ capnp.Struct }

// HostPortResolver_resolve_Results_TypeID is the unique identifier for the type HostPortResolver_resolve_Results.
const HostPortResolver_resolve_Results_TypeID = 0xfc185f518d220b8c

func NewHostPortResolver_resolve_Results(s *capnp.Segment) (HostPortResolver_resolve_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_resolve_Results{st}, err
}

func NewRootHostPortResolver_resolve_Results(s *capnp.Segment) (HostPortResolver_resolve_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_resolve_Results{st}, err
}

func ReadRootHostPortResolver_resolve_Results(msg *capnp.Message) (HostPortResolver_resolve_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_resolve_Results{root.Struct()}, err
}

func (s HostPortResolver_resolve_Results) String() string {
	str, _ := text.Marshal(0xfc185f518d220b8c, s.Struct)
	return str
}

func (s HostPortResolver_resolve_Results) Host() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_resolve_Results) HasHost() bool {
	return s.Struct.HasPtr(0)
}

func (s HostPortResolver_resolve_Results) HostBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_resolve_Results) SetHost(v string) error {
	return s.Struct.SetText(0, v)
}

func (s HostPortResolver_resolve_Results) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostPortResolver_resolve_Results) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

// HostPortResolver_resolve_Results_List is a list of HostPortResolver_resolve_Results.
type HostPortResolver_resolve_Results_List struct{ capnp.List }

// NewHostPortResolver_resolve_Results creates a new list of HostPortResolver_resolve_Results.
func NewHostPortResolver_resolve_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_resolve_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return HostPortResolver_resolve_Results_List{l}, err
}

func (s HostPortResolver_resolve_Results_List) At(i int) HostPortResolver_resolve_Results {
	return HostPortResolver_resolve_Results{s.List.Struct(i)}
}

func (s HostPortResolver_resolve_Results_List) Set(i int, v HostPortResolver_resolve_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s HostPortResolver_resolve_Results_List) String() string {
	str, _ := text.MarshalList(0xfc185f518d220b8c, s.List)
	return str
}

// HostPortResolver_resolve_Results_Future is a wrapper for a HostPortResolver_resolve_Results promised by a client call.
type HostPortResolver_resolve_Results_Future struct{ *capnp.Future }

func (p HostPortResolver_resolve_Results_Future) Struct() (HostPortResolver_resolve_Results, error) {
	s, err := p.Future.Struct()
	return HostPortResolver_resolve_Results{s}, err
}

const schema_855efed3475f6b26 = "x\xda\x9cW\x7fl\x1cG\x15~o\xe7|{g\xdf" +
	"\xf9nn\x1c\x0a\xa6\xd6Q\xc7%\xc5\xc4\xd7\xd8\x8e\x1c" +
	"\x14UrbH\x9c\x18Ux\xd6\xb4RR\x92f\xed" +
	"\x1b\xd7G\xcfw\xe7\xdd=\xa7F-\xaeE\xa3\x92\xb6" +
	"VI\x81\x8a \xa4\xb4\"\x01\xd4\x7fJ#\xb5\xa2 " +
	"\x84\x88Z\xa9\"\xaaD\x02\xa1rZZ\x0aj@\xa5" +
	"\x11\xc2\x12\x82\x96\xa6[\xcd\xde\xed\xce\xfarI\x7f\xfc" +
	"c\xdd\xce\xce\xbe_\xdf\xf7\xbe\xf7\xbci5\xb2M\xeb" +
	"o\xf9M\x02\x80\x7f\xaf%\xea\x96W\x97\xfft\xf6\x91" +
	"W\xef\x07\xdaG\xdc\x93\xdf\xd9Y\xa9\xfe\xf7w?\x07" +
	"\xc0\xc1\x1d\xd1_\"\xdb\x17\xd5\x01\xd8\x9e\xe8([\x92" +
	"\xbf\xdc\x9b_\xfdV\xd7\x86\x99\xd9o\x03\xcf \xba\x9f" +
	"\xbd\xf3\xf6\xd1?\xbc\xb7\xff\x10\xec@]\x03`\x85\xe8" +
	"_Y5\xba\x05\x80\x1d\x8d\x1e\x04t\x8d\xdc\xb1O," +
	"\xa5*\x0f\x03\xed\"\xae8=\xf4\xcac\xe7\x7f\xfa[" +
	"i\xfb\xed\xa8\x85,\xa9K\xdbq}\x94\xed\x91\xbf\xdc" +
	"\xc2\x03\x87o\x88\xec;\xf90\xf0N$n\xf2\xb6\xc7" +
	"\xe6\xa2K\xa3\xff\x87u\xa8#\x00\xdb\xae\xaf\x02\xb2\x1d" +
	"\xba\xb4;\xf1\x8ft\xcf\xdfJ}\xdf\x05\x9eC\x04\x88" +
	"\xe8\x00\x83\x8f\xeb\xab\x08\xc8\x9e\xd6\x87\x01\xdd\xfd?\xf9" +
	"\xd2\x89\x1bO\xa5\xbf\x0ft\x8b\xff\xfe\x9c\xde\xadA\xc4" +
	"\xbd)\xb7\xb2\xe1\xbe\xeb\x9e9\x064CT\xfc\x80\xec" +
	"E\xfd<[\xd1\xaf\x01`o\xe8\xa3,\x19\x93\x11\xbd" +
	"\xf0\xe3\x9f\xad\x9a\x7f\xfc\xfcq\xa0\xd7\xa2J\xbdE\x93" +
	"\xf6\xfe\xa3\x0f k\x91\xd7\x18\xc6dP\xeb\xee\xbew" +
	"\xe53\x0f\xbd|\x1ch\xce\xf7i\xc6\xdeD\x88\xb8\xc7" +
	"\xba~\xff\xcc;G\x96\x9fh\xf49xK\xac\x13\x99" +
	"\x88I\xa7s\xb1Qv4\xb6\x01@a@\xd7\x13\xf5" +
	")\xe0\xe0\x91\xd8\xd7\x91\x9d\xf0n?\x15\x1be\x7f\x96" +
	"\xbe_\xbb`\x93\xd2k\xabO\xf3>Y\x88\x16\"\xbd" +
	">/\xbd\"[\x89\xfd\x1dPU\xbd1\xdf\xa7\xe2o" +
	"\xb2_\xc7%V\x17\xe3\xa3l]\xab\xccw\xebK[" +
	"\xc6\xe6\xdf\xd8\xfe<\xd0O\xa3\xaaT-\xdfK\xf11" +
	"dT^c\xc9V\x99\xef/\xf6\xf7\xe3\xf1\x85\x0b\xa7" +
	"\x81_\x8b\x11U\x1d/\xf1\xb9\xd6NdK\xde\xe5{" +
	"Ze\x18_$\xfb\xbb\x9f{\xe2/\xe7\x80v\x85b" +
	"jAy\x99\xb7\x8d 3\xdb\xe4\xe5}m\x12\xbd\xfb" +
	"\xef}\xee\xe5\xd5\x17\xdfZ\x01\x9a\x09q\xcc\x0b\x83\xdd" +
	"\xd3v\x96\x1d\xf6\xee\x1ej\x93Q\\\x7fs\xee\xfa\xae" +
	"\xd9G\xcf\xcb\x90\xa1n\xf0\xf5\xb6\xbd\xb2\x00\x17=c" +
	"\xec\xad\x8d?\xf8\xd7\x99\xdb^i\xf0\xec\xe5\x94L\x8c" +
	"!\xbb.!\xadu%\xa4\xb5\xe53\x0f\x9es\xf6\xb5" +
	"\xbe.\xe9\x1dQ\xaeeNl)q\x8a\x1d\xf6\xee\x1e" +
	"J\xc8\x94\x06\x7f\xb51U~\xf4\x7f\x17\x80\xae\x0f<" +
	"\x17\x92\x8fH\xcf\x0bI\xe9\xf9\x96\x13m\xdf\xdc]q" +
	"\xff\x19\"\xe1\xd1d\xa7$\xe1\xb3\x0f\xbe=8\xbd\xf4" +
	"\xee;P\x87\xcd\xfb\xf6H\xd2#\xf0\x89\xa4\x0c$`" +
	"?\xcf Y\xdbg\x18g\xc9\xf6\xb3\xecS\xed2\x94" +
	"u\xedO\x02\xba\x0f\xb5u/\xf3\xdb?\xf9.\xf0\xf5" +
	"!{\xed?\x94\xf6\x1eo\x97\xf6\xd6\x1f|\xe1\xc0\xc5" +
	"\xa3/]j`\xb2w\xf1R{\x06Y2\xe55c" +
	"j\x18\xbe\xe1V\x84e\x17lG\xb4\x94\xa6Dn\xca" +
	"\xac\x94*[w\x95mg\xbcl9\x86\xb0\xcb\xc5y" +
	"a\xe5\x0cqG\xc1v,\xd3\xca\xed\x12\xe6\xb0\xe5L" +
	"\x0a\xd3\x19G\xe4\x11\xd2\x02\x10\xa4\x8e~#R\xda\x0b" +
	"\x1am\xd1S\xf2\xde6\x1cG\x0c\xbch\xca\xcb\x84S" +
	"\xb5\xf2\x0b\xba!\xa6y\x02\xc3A\xd3\x81P/&\x0d" +
	"\xc5=\x9a\xdc\x9a\xfd\xca\xc1\x92\xb0\xdc\xafZf\xc9." +
	"\x88\x12\xa03<\xe1\x94-\x91\xe71\x12I\xb8n\x04" +
	"\x01\xe8\xe7\x0c\x00~\x03A\xbeY\xc3$\xbe\xe7v\xc8" +
	":\xd1\xfe\xad\x00|#A\xfe\x05\x0d]G\x19\xc0\xb4" +
	"r\x07\x88i\xc0a\xdb3\x89i\xe5\xba\xf6\"H#" +
	"\xa2\xd2\x18\xaf\x1f\x95\x9c\x9c!\x8a\xc2\xb4\x85L,\x9b" +
	"_0\xc4\xb4\xaa\x91\xaf\x17\xe8\xab\x19\xa5#\x94f\x01" +
	"i\x9f\xbeh\xd5\xbe\xe3\x11\xd4\xdc\x7f/\xdfxM\xe6" +
	"\xc0\xb3\xa7\x80G4\xdc\xde\x81\x98\x00\xa0h\xb8\xf5;" +
	"\x13\x80\x06\xc0\x15k\xba=\x9f\xb7\x84\x9d\xb5s\x85\xca" +
	"\x90\xac\x08@\xad #\x00\xbc\x87 \xdf\xa4!E\xac" +
	"\xd5\xa3oDUi\xb1X>(\xac\xa1\xcd\x18\x07\x0d" +
	"\xe3\x80\x8b\xd5J%\xfc\x1c\xf8\x8a~P\xe2^\xde\xb9" +
	"z\xb4=\x86\xc8\xda\xd5\xa2c\xf3H\x10KR\xba\x8d" +
	"\x11\xe4\x1d\x1a.\xda\xd5\xa9)a\xdb\x88\xa0!\x86\xdc" +
	"\xe8\x1f\x96\x8c5.\xe6\xe4\x9f\x1eC\xd8U\xbd\xe8\xd8" +
	"\xcd\x0ac\x08\x89)\x11\x16\x8f \x86\xa4\x0f-\xb7\xf6" +
	"J\x8cC\xd6\xb4\xccY\xbb\x0e\x98\x7f\x05}\xcd\xa1t" +
	"\xc4#\xf5\xa2U\xbb\xbf\x16\x03\xd2\xc8kY\x05\xc9\xd2" +
	"\xacd\x99\xd7,!8\xba\x9b\xc11\xa6\xe8\xa9\xcf\x9b" +
	"\x92\x96\x814\xd6\xd9W,O\x99ECL\x03\x00f" +
	"@\xc3\xcc\xc7\x07f\xdcL\xc9d\x9b\xc5\xbf\xb6\xe0~" +
	"\xc9\xd4\xa0B\xc3\xf5!\x00\xb4\xea\xe5\xf2\xf5\x11}u" +
	"\x0a\x97K\xe2\xb6\x0dy\x0c\xd1=\xb7\xebG{N\x9f" +
	"y\xf2$\x00\xa8\x99\x03\xd0\xac\xb1\x9a\x03\x9f\x92\xc8{" +
	"\x11\xa9]\x06\x0d\xd7\xa7\x02\xa0S\x8b\xc8\x9f\x95J~" +
	")\x1d\x03\x8d\xc6u\xd7\xf2\xa2\x17\x1646R\xf4C" +
	"\xb1\xce\xff\xdc\xaf!O\x07\xc0\x9a\x93\x00\xfc\x00A^" +
	"\x0c\x01[\xe8\x05\xe0y\x82\xbc\xa2!j\x1d\xa8\x01\xd0" +
	"Yy6C\x90;\x1aR\xa2u \x01\xa0s\x03\x00" +
	"\xbcH\x90\xdf\xa5\xa1;i\xdabh\xf3\xad&\xe8\xce" +
	"\xee<&@\xc3\x04`j\xa6l;\xc1C\xa5l9" +
	"\xa8\x83\x86:`\xd6,\x16L\xdb\x7f\xd5\xac\x03j\xac" +
	"HIZxz\xab\x864\xdd\x1b\x9a\x9bt2\xb4\xc8" +
	"\xd1\x07\xdc\x09s^\x8c\x9b\x96\x09d\xd6\xf6\x1ed\x97" +
	"\x81\xd7f>\xb9\xd0g\x17@\x9d\x0d\xbem\xf4\xed\x06" +
	"\x13\xc16\xe7\x1b:'\xd2\xd8\xa4^\xb1k-\xe95" +
	"$@C\xf7\x8c)\xdd\x0a\x8a\xdc/%\x7f\x13A~" +
	"\x93\xd6\xbcOla\x16E~g\x19\xd0\xc2\xb4\x1a6" +
	"\x0d\xba\xde\xb4\x8d'<\xe5\xc8\xcb(BPK\x04\xbf" +
	"F\x90\xcf\x84\xa2\x10\xbd!\xfc\xb5:\xd6a\xfc)!" +
	"5\xac\xc3\x04H\xdd)\x166\xf9J+\x1f\xfa\xc3\x0f" +
	"\x03\xe1\x87\xc1\xcb\x04\xb9\xf9$\xf2Q\x9b\xb5\xa16\x83" +
	"\x9a\xab\xaf0\x8b;\xcbW\xabG\x88?\xb7\x9a\xce\xb8" +
	"\xe9\xe0L\x03\x18\x9d\x1f0YHA\xce\xd1`\xd5\xaa" +
	"\xd9_4\xbd9ecZ\xed>W\x9e\xb0\x01-\xea" +
	"\xca\xeb\x09}\x91\xac\x9d*\xdd*/}\xca\xac`&" +
	"B\x00\xd7(\xe4\x95+\xe5\xd9s.'\x9a\xd1\x8ch" +
	"c!\xa2\xd9u\x8e\x00NcZmZ\xf5T\xaa%" +
	"\xc9\xf6\x09C\xd2\xf0\xf2\xb7\xcdK\xbc;\x0f\x0d<\xdb" +
	"\xdbLR\xf6\x86\xe4\xc3\xe7\xd9\x9c<\xac\x10\xe4w\x87" +
	"x\xb6 \x0f\xef\"\xc8\xef\xd3\xd0\xadT'\x8b\x85\xa9" +
	"/\x0b \x8ao\xe1\xc3\xfef\x87\x03\xcd\x0e/\xe7\xe1" +
	"\xd5\xd6\xc7\xfa\x08\xe8\xf1\x18\x89k`\xebT\xb0I\xa6" +
	"4\xea\xd7\xc7\xda\x03\xa4\x1b\x12\x9am\x1fQ\xd6\x83\x9d" +
	"\xa59\x13\x02\"\x9c\x04\xe0\x9b\x09\xf2m\x1a\xba3j" +
	"\xfc U\x93\x09\x10\xa9\xa7=S\xb6\x8c\x11\xbd w" +
	"\x97\x9c\xac\xb0\xe6\xcd\"\xc6@\xc3\x18\\e\x91C[" +
	"\x92!\xe1m\xb6\x88\xea\x7ff\xba\xa3\x1b4\xaa\xc5j" +
	"\xc0\xf7\xf56\xae\xbb\x12\xf9\xfe\xde\xd0>Q\xa8\x0c\xad" +
	"\x19\x17k\x06\xc9G\xc20\xe8\xbdPuz\x95\x06\x04" +
	"\x12\x10\x8a\xe9\xcaS\xeb\xea\xba+W}\xb4\x1a\xf4\xab" +
	"W\x11&uGUQ\xe6\xfd\x00\x00\x00\xff\xff=\xaa" +
	"\xc5\xf4"

func init() {
	schemas.Register(schema_855efed3475f6b26,
		0x87de92d2d68df26f,
		0x886d68271d83de4d,
		0x8f700f81169f2e52,
		0x8fb25d0428898a69,
		0x932d6ee32410e853,
		0x9510c22fa544a65e,
		0x9fb6218427d92e3c,
		0xa42bd461f2a8a3c8,
		0xa4db8c20d9807c15,
		0xaa8d91fab6d01d9f,
		0xb0caf775704690b2,
		0xb5f200df6e0373e6,
		0xc1a7daa0dc36cb65,
		0xc541e5764a37d73a,
		0xcbe679a401315eb8,
		0xd5e0aac4225e0343,
		0xd9eccdf2dbc48087,
		0xda966d1d252e4d25,
		0xdc5bd1ef982cec13,
		0xe10a5d74d58bd18d,
		0xe6f8966f0f2cbb33,
		0xebff70497e0ba555,
		0xfafc816633f98bb9,
		0xfb47810671a05b0d,
		0xfc185f518d220b8c,
		0xfdd799ed60c87723)
}
