// Code generated by capnpc-go. DO NOT EDIT.

package config

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0x860d660620aefcda

func (c Service) NextConfig(ctx context.Context, params func(Service_nextConfig_Params) error) (Service_nextConfig_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x860d660620aefcda,
			MethodID:      0,
			InterfaceName: "config.capnp:Service",
			MethodName:    "nextConfig",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_nextConfig_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_nextConfig_Results_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	NextConfig(context.Context, Service_nextConfig) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x860d660620aefcda,
			MethodID:      0,
			InterfaceName: "config.capnp:Service",
			MethodName:    "nextConfig",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextConfig(ctx, Service_nextConfig{call})
		},
	})

	return methods
}

// Service_nextConfig holds the state for a server call to Service.nextConfig.
// See server.Call for documentation.
type Service_nextConfig struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_nextConfig) Args() Service_nextConfig_Params {
	return Service_nextConfig_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_nextConfig) AllocResults() (Service_nextConfig_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Service_nextConfig_Results{Struct: r}, err
}

type Service_nextConfig_Params struct{ capnp.Struct }

// Service_nextConfig_Params_TypeID is the unique identifier for the type Service_nextConfig_Params.
const Service_nextConfig_Params_TypeID = 0x8a931778446b73d8

func NewService_nextConfig_Params(s *capnp.Segment) (Service_nextConfig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextConfig_Params{st}, err
}

func NewRootService_nextConfig_Params(s *capnp.Segment) (Service_nextConfig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextConfig_Params{st}, err
}

func ReadRootService_nextConfig_Params(msg *capnp.Message) (Service_nextConfig_Params, error) {
	root, err := msg.Root()
	return Service_nextConfig_Params{root.Struct()}, err
}

func (s Service_nextConfig_Params) String() string {
	str, _ := text.Marshal(0x8a931778446b73d8, s.Struct)
	return str
}

// Service_nextConfig_Params_List is a list of Service_nextConfig_Params.
type Service_nextConfig_Params_List struct{ capnp.List }

// NewService_nextConfig_Params creates a new list of Service_nextConfig_Params.
func NewService_nextConfig_Params_List(s *capnp.Segment, sz int32) (Service_nextConfig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Service_nextConfig_Params_List{l}, err
}

func (s Service_nextConfig_Params_List) At(i int) Service_nextConfig_Params {
	return Service_nextConfig_Params{s.List.Struct(i)}
}

func (s Service_nextConfig_Params_List) Set(i int, v Service_nextConfig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextConfig_Params_List) String() string {
	str, _ := text.MarshalList(0x8a931778446b73d8, s.List)
	return str
}

// Service_nextConfig_Params_Future is a wrapper for a Service_nextConfig_Params promised by a client call.
type Service_nextConfig_Params_Future struct{ *capnp.Future }

func (p Service_nextConfig_Params_Future) Struct() (Service_nextConfig_Params, error) {
	s, err := p.Future.Struct()
	return Service_nextConfig_Params{s}, err
}

type Service_nextConfig_Results struct{ capnp.Struct }

// Service_nextConfig_Results_TypeID is the unique identifier for the type Service_nextConfig_Results.
const Service_nextConfig_Results_TypeID = 0xb0cc157dd72bb20b

func NewService_nextConfig_Results(s *capnp.Segment) (Service_nextConfig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Service_nextConfig_Results{st}, err
}

func NewRootService_nextConfig_Results(s *capnp.Segment) (Service_nextConfig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Service_nextConfig_Results{st}, err
}

func ReadRootService_nextConfig_Results(msg *capnp.Message) (Service_nextConfig_Results, error) {
	root, err := msg.Root()
	return Service_nextConfig_Results{root.Struct()}, err
}

func (s Service_nextConfig_Results) String() string {
	str, _ := text.Marshal(0xb0cc157dd72bb20b, s.Struct)
	return str
}

func (s Service_nextConfig_Results) Config() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Service_nextConfig_Results) HasConfig() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_nextConfig_Results) SetConfig(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Service_nextConfig_Results) NoFurtherConfigs() bool {
	return s.Struct.Bit(0)
}

func (s Service_nextConfig_Results) SetNoFurtherConfigs(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_nextConfig_Results_List is a list of Service_nextConfig_Results.
type Service_nextConfig_Results_List struct{ capnp.List }

// NewService_nextConfig_Results creates a new list of Service_nextConfig_Results.
func NewService_nextConfig_Results_List(s *capnp.Segment, sz int32) (Service_nextConfig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Service_nextConfig_Results_List{l}, err
}

func (s Service_nextConfig_Results_List) At(i int) Service_nextConfig_Results {
	return Service_nextConfig_Results{s.List.Struct(i)}
}

func (s Service_nextConfig_Results_List) Set(i int, v Service_nextConfig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextConfig_Results_List) String() string {
	str, _ := text.MarshalList(0xb0cc157dd72bb20b, s.List)
	return str
}

// Service_nextConfig_Results_Future is a wrapper for a Service_nextConfig_Results promised by a client call.
type Service_nextConfig_Results_Future struct{ *capnp.Future }

func (p Service_nextConfig_Results_Future) Struct() (Service_nextConfig_Results, error) {
	s, err := p.Future.Struct()
	return Service_nextConfig_Results{s}, err
}

func (p Service_nextConfig_Results_Future) Config() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_9c934ced19460717 = "x\xdat\x90\xb1N\"Q\x14\x86\xff\x7f\xee\x1df\x93" +
	"\x0da.\xb3\x84l\x05\x05\xcdf#\x81\xd8\x11\x13@" +
	"\x0c6\x16\\\xed\xec\x08\x19p\xa2\x0ed\x06\x14\x0bZ" +
	"\x0bZZ_@\x0b\x83\xbe\x81\xbd\xd4\x1a\xdf\xc170" +
	"\x193!\x80\x85\xb6\xe7\xfc\xf9\xfe\xef\x1c{^3\xca" +
	"fN\x00\xba`&\xa2\xb7\x8f\xfb|\xa2\x9b\xbc\x86J" +
	"\x8a(k5\xff\xbe\x1f\xccn\x00\xd8tF\xbcs&" +
	"\xb4\x00\xe7\x8a\xfb\xce\x82\x96\xb3`*z\x0dO\xf7\xc6" +
	"\xd9\xd9\x14*C@Z6\xb7\x9fX!d\xf4\xfb\xf1" +
	"\xff\xcb$\xf3<\x87\xce\x90\x80\xc9xw\xcb]\x82\xce" +
	"\x03/\xd1\x88:}\xbf\xeb\xf5\x8a\x1d\xb6\x07\xfe\xa0r" +
	"\xe4\x06\xa9\x0b\xaf\xe3\xb6H-\x85\x09\xac\xd9\\\xa1\x94" +
	":\x06\xea6\xeby\xaa\xb2\x15\xf9\xeex\xd8\xe8\xfb]" +
	"\x08\xaf\xa7\x98\xd3\xd2\xe0\xe6\x80\xb8\xf3\xdba\x8d-\xb2" +
	".\xa9\x98\xe6\xc6A\xac\x1cb\x85\xe2\x8a\xec\xf5\x0a\xd5" +
	"V;h\x9f\x87\xeb\xa0\xfc)x\xe8\x86\xa3\xb3a\x08" +
	"\xfdKH@\xc6\xf5\xff*\xf1[\x05u\xc9 \xf9\x87" +
	"$\xd5\xd6\x14\xd0%A\xbdc\xb0\xba\x842\xcd/\x8e" +
	"\x00\xd3`\xe4\xf7\x9b\xa3`x\xe22X\xf2C\xc4\xf6" +
	"\x06\x09~\x06\x00\x00\xff\xff\xd27s\xf9"

func init() {
	schemas.Register(schema_9c934ced19460717,
		0x860d660620aefcda,
		0x8a931778446b73d8,
		0xb0cc157dd72bb20b)
}
