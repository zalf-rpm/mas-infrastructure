// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
)

type Admin struct{ Client *capnp.Client }

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xfec1f88b198df649

func (c Admin) Heartbeat(ctx context.Context, params func(Admin_heartbeat_Params) error) (Admin_heartbeat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_heartbeat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_heartbeat_Results_Future{Future: ans.Future()}, release
}
func (c Admin) SetTimeout(ctx context.Context, params func(Admin_setTimeout_Params) error) (Admin_setTimeout_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_setTimeout_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_setTimeout_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Stop(ctx context.Context, params func(Admin_stop_Params) error) (Admin_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_stop_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Identities(ctx context.Context, params func(Admin_identities_Params) error) (Admin_identities_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identities",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_identities_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_identities_Results_Future{Future: ans.Future()}, release
}
func (c Admin) UpdateIdentity(ctx context.Context, params func(Admin_updateIdentity_Params) error) (Admin_updateIdentity_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_updateIdentity_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_updateIdentity_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Admin) AddRef() Admin {
	return Admin{
		Client: c.Client.AddRef(),
	}
}

func (c Admin) Release() {
	c.Client.Release()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	Heartbeat(context.Context, Admin_heartbeat) error

	SetTimeout(context.Context, Admin_setTimeout) error

	Stop(context.Context, Admin_stop) error

	Identities(context.Context, Admin_identities) error

	UpdateIdentity(context.Context, Admin_updateIdentity) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c, policy)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server, policy *server.Policy) Admin {
	return Admin{Client: capnp.NewClient(Admin_NewServer(s, policy))}
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Heartbeat(ctx, Admin_heartbeat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetTimeout(ctx, Admin_setTimeout{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Admin_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identities",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Identities(ctx, Admin_identities{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UpdateIdentity(ctx, Admin_updateIdentity{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_heartbeat holds the state for a server call to Admin.heartbeat.
// See server.Call for documentation.
type Admin_heartbeat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_heartbeat) Args() Admin_heartbeat_Params {
	return Admin_heartbeat_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_heartbeat) AllocResults() (Admin_heartbeat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results{Struct: r}, err
}

// Admin_setTimeout holds the state for a server call to Admin.setTimeout.
// See server.Call for documentation.
type Admin_setTimeout struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_setTimeout) Args() Admin_setTimeout_Params {
	return Admin_setTimeout_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_setTimeout) AllocResults() (Admin_setTimeout_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results{Struct: r}, err
}

// Admin_stop holds the state for a server call to Admin.stop.
// See server.Call for documentation.
type Admin_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_stop) Args() Admin_stop_Params {
	return Admin_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_stop) AllocResults() (Admin_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results{Struct: r}, err
}

// Admin_identities holds the state for a server call to Admin.identities.
// See server.Call for documentation.
type Admin_identities struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_identities) Args() Admin_identities_Params {
	return Admin_identities_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_identities) AllocResults() (Admin_identities_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results{Struct: r}, err
}

// Admin_updateIdentity holds the state for a server call to Admin.updateIdentity.
// See server.Call for documentation.
type Admin_updateIdentity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_updateIdentity) Args() Admin_updateIdentity_Params {
	return Admin_updateIdentity_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_updateIdentity) AllocResults() (Admin_updateIdentity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results{Struct: r}, err
}

type Admin_heartbeat_Params struct{ capnp.Struct }

// Admin_heartbeat_Params_TypeID is the unique identifier for the type Admin_heartbeat_Params.
const Admin_heartbeat_Params_TypeID = 0xd627f31bdae7f234

func NewAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params{st}, err
}

func NewRootAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params{st}, err
}

func ReadRootAdmin_heartbeat_Params(msg *capnp.Message) (Admin_heartbeat_Params, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Params{root.Struct()}, err
}

func (s Admin_heartbeat_Params) String() string {
	str, _ := text.Marshal(0xd627f31bdae7f234, s.Struct)
	return str
}

// Admin_heartbeat_Params_List is a list of Admin_heartbeat_Params.
type Admin_heartbeat_Params_List struct{ capnp.List }

// NewAdmin_heartbeat_Params creates a new list of Admin_heartbeat_Params.
func NewAdmin_heartbeat_Params_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_heartbeat_Params_List{l}, err
}

func (s Admin_heartbeat_Params_List) At(i int) Admin_heartbeat_Params {
	return Admin_heartbeat_Params{s.List.Struct(i)}
}

func (s Admin_heartbeat_Params_List) Set(i int, v Admin_heartbeat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_heartbeat_Params_List) String() string {
	str, _ := text.MarshalList(0xd627f31bdae7f234, s.List)
	return str
}

// Admin_heartbeat_Params_Future is a wrapper for a Admin_heartbeat_Params promised by a client call.
type Admin_heartbeat_Params_Future struct{ *capnp.Future }

func (p Admin_heartbeat_Params_Future) Struct() (Admin_heartbeat_Params, error) {
	s, err := p.Future.Struct()
	return Admin_heartbeat_Params{s}, err
}

type Admin_heartbeat_Results struct{ capnp.Struct }

// Admin_heartbeat_Results_TypeID is the unique identifier for the type Admin_heartbeat_Results.
const Admin_heartbeat_Results_TypeID = 0xe01c2290ae549759

func NewAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results{st}, err
}

func NewRootAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results{st}, err
}

func ReadRootAdmin_heartbeat_Results(msg *capnp.Message) (Admin_heartbeat_Results, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Results{root.Struct()}, err
}

func (s Admin_heartbeat_Results) String() string {
	str, _ := text.Marshal(0xe01c2290ae549759, s.Struct)
	return str
}

// Admin_heartbeat_Results_List is a list of Admin_heartbeat_Results.
type Admin_heartbeat_Results_List struct{ capnp.List }

// NewAdmin_heartbeat_Results creates a new list of Admin_heartbeat_Results.
func NewAdmin_heartbeat_Results_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_heartbeat_Results_List{l}, err
}

func (s Admin_heartbeat_Results_List) At(i int) Admin_heartbeat_Results {
	return Admin_heartbeat_Results{s.List.Struct(i)}
}

func (s Admin_heartbeat_Results_List) Set(i int, v Admin_heartbeat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_heartbeat_Results_List) String() string {
	str, _ := text.MarshalList(0xe01c2290ae549759, s.List)
	return str
}

// Admin_heartbeat_Results_Future is a wrapper for a Admin_heartbeat_Results promised by a client call.
type Admin_heartbeat_Results_Future struct{ *capnp.Future }

func (p Admin_heartbeat_Results_Future) Struct() (Admin_heartbeat_Results, error) {
	s, err := p.Future.Struct()
	return Admin_heartbeat_Results{s}, err
}

type Admin_setTimeout_Params struct{ capnp.Struct }

// Admin_setTimeout_Params_TypeID is the unique identifier for the type Admin_setTimeout_Params.
const Admin_setTimeout_Params_TypeID = 0x9abf358a691110fd

func NewAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params{st}, err
}

func NewRootAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params{st}, err
}

func ReadRootAdmin_setTimeout_Params(msg *capnp.Message) (Admin_setTimeout_Params, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Params{root.Struct()}, err
}

func (s Admin_setTimeout_Params) String() string {
	str, _ := text.Marshal(0x9abf358a691110fd, s.Struct)
	return str
}

func (s Admin_setTimeout_Params) Seconds() uint64 {
	return s.Struct.Uint64(0)
}

func (s Admin_setTimeout_Params) SetSeconds(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Admin_setTimeout_Params_List is a list of Admin_setTimeout_Params.
type Admin_setTimeout_Params_List struct{ capnp.List }

// NewAdmin_setTimeout_Params creates a new list of Admin_setTimeout_Params.
func NewAdmin_setTimeout_Params_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Admin_setTimeout_Params_List{l}, err
}

func (s Admin_setTimeout_Params_List) At(i int) Admin_setTimeout_Params {
	return Admin_setTimeout_Params{s.List.Struct(i)}
}

func (s Admin_setTimeout_Params_List) Set(i int, v Admin_setTimeout_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_setTimeout_Params_List) String() string {
	str, _ := text.MarshalList(0x9abf358a691110fd, s.List)
	return str
}

// Admin_setTimeout_Params_Future is a wrapper for a Admin_setTimeout_Params promised by a client call.
type Admin_setTimeout_Params_Future struct{ *capnp.Future }

func (p Admin_setTimeout_Params_Future) Struct() (Admin_setTimeout_Params, error) {
	s, err := p.Future.Struct()
	return Admin_setTimeout_Params{s}, err
}

type Admin_setTimeout_Results struct{ capnp.Struct }

// Admin_setTimeout_Results_TypeID is the unique identifier for the type Admin_setTimeout_Results.
const Admin_setTimeout_Results_TypeID = 0xd6fd194a1ac74bc1

func NewAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results{st}, err
}

func NewRootAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results{st}, err
}

func ReadRootAdmin_setTimeout_Results(msg *capnp.Message) (Admin_setTimeout_Results, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Results{root.Struct()}, err
}

func (s Admin_setTimeout_Results) String() string {
	str, _ := text.Marshal(0xd6fd194a1ac74bc1, s.Struct)
	return str
}

// Admin_setTimeout_Results_List is a list of Admin_setTimeout_Results.
type Admin_setTimeout_Results_List struct{ capnp.List }

// NewAdmin_setTimeout_Results creates a new list of Admin_setTimeout_Results.
func NewAdmin_setTimeout_Results_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_setTimeout_Results_List{l}, err
}

func (s Admin_setTimeout_Results_List) At(i int) Admin_setTimeout_Results {
	return Admin_setTimeout_Results{s.List.Struct(i)}
}

func (s Admin_setTimeout_Results_List) Set(i int, v Admin_setTimeout_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_setTimeout_Results_List) String() string {
	str, _ := text.MarshalList(0xd6fd194a1ac74bc1, s.List)
	return str
}

// Admin_setTimeout_Results_Future is a wrapper for a Admin_setTimeout_Results promised by a client call.
type Admin_setTimeout_Results_Future struct{ *capnp.Future }

func (p Admin_setTimeout_Results_Future) Struct() (Admin_setTimeout_Results, error) {
	s, err := p.Future.Struct()
	return Admin_setTimeout_Results{s}, err
}

type Admin_stop_Params struct{ capnp.Struct }

// Admin_stop_Params_TypeID is the unique identifier for the type Admin_stop_Params.
const Admin_stop_Params_TypeID = 0xddc3d3cd37ef5b78

func NewAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params{st}, err
}

func NewRootAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params{st}, err
}

func ReadRootAdmin_stop_Params(msg *capnp.Message) (Admin_stop_Params, error) {
	root, err := msg.Root()
	return Admin_stop_Params{root.Struct()}, err
}

func (s Admin_stop_Params) String() string {
	str, _ := text.Marshal(0xddc3d3cd37ef5b78, s.Struct)
	return str
}

// Admin_stop_Params_List is a list of Admin_stop_Params.
type Admin_stop_Params_List struct{ capnp.List }

// NewAdmin_stop_Params creates a new list of Admin_stop_Params.
func NewAdmin_stop_Params_List(s *capnp.Segment, sz int32) (Admin_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_stop_Params_List{l}, err
}

func (s Admin_stop_Params_List) At(i int) Admin_stop_Params {
	return Admin_stop_Params{s.List.Struct(i)}
}

func (s Admin_stop_Params_List) Set(i int, v Admin_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_stop_Params_List) String() string {
	str, _ := text.MarshalList(0xddc3d3cd37ef5b78, s.List)
	return str
}

// Admin_stop_Params_Future is a wrapper for a Admin_stop_Params promised by a client call.
type Admin_stop_Params_Future struct{ *capnp.Future }

func (p Admin_stop_Params_Future) Struct() (Admin_stop_Params, error) {
	s, err := p.Future.Struct()
	return Admin_stop_Params{s}, err
}

type Admin_stop_Results struct{ capnp.Struct }

// Admin_stop_Results_TypeID is the unique identifier for the type Admin_stop_Results.
const Admin_stop_Results_TypeID = 0xce2a1a063e759787

func NewAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results{st}, err
}

func NewRootAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results{st}, err
}

func ReadRootAdmin_stop_Results(msg *capnp.Message) (Admin_stop_Results, error) {
	root, err := msg.Root()
	return Admin_stop_Results{root.Struct()}, err
}

func (s Admin_stop_Results) String() string {
	str, _ := text.Marshal(0xce2a1a063e759787, s.Struct)
	return str
}

// Admin_stop_Results_List is a list of Admin_stop_Results.
type Admin_stop_Results_List struct{ capnp.List }

// NewAdmin_stop_Results creates a new list of Admin_stop_Results.
func NewAdmin_stop_Results_List(s *capnp.Segment, sz int32) (Admin_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_stop_Results_List{l}, err
}

func (s Admin_stop_Results_List) At(i int) Admin_stop_Results {
	return Admin_stop_Results{s.List.Struct(i)}
}

func (s Admin_stop_Results_List) Set(i int, v Admin_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_stop_Results_List) String() string {
	str, _ := text.MarshalList(0xce2a1a063e759787, s.List)
	return str
}

// Admin_stop_Results_Future is a wrapper for a Admin_stop_Results promised by a client call.
type Admin_stop_Results_Future struct{ *capnp.Future }

func (p Admin_stop_Results_Future) Struct() (Admin_stop_Results, error) {
	s, err := p.Future.Struct()
	return Admin_stop_Results{s}, err
}

type Admin_identities_Params struct{ capnp.Struct }

// Admin_identities_Params_TypeID is the unique identifier for the type Admin_identities_Params.
const Admin_identities_Params_TypeID = 0xff4271628d295896

func NewAdmin_identities_Params(s *capnp.Segment) (Admin_identities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identities_Params{st}, err
}

func NewRootAdmin_identities_Params(s *capnp.Segment) (Admin_identities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identities_Params{st}, err
}

func ReadRootAdmin_identities_Params(msg *capnp.Message) (Admin_identities_Params, error) {
	root, err := msg.Root()
	return Admin_identities_Params{root.Struct()}, err
}

func (s Admin_identities_Params) String() string {
	str, _ := text.Marshal(0xff4271628d295896, s.Struct)
	return str
}

// Admin_identities_Params_List is a list of Admin_identities_Params.
type Admin_identities_Params_List struct{ capnp.List }

// NewAdmin_identities_Params creates a new list of Admin_identities_Params.
func NewAdmin_identities_Params_List(s *capnp.Segment, sz int32) (Admin_identities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_identities_Params_List{l}, err
}

func (s Admin_identities_Params_List) At(i int) Admin_identities_Params {
	return Admin_identities_Params{s.List.Struct(i)}
}

func (s Admin_identities_Params_List) Set(i int, v Admin_identities_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_identities_Params_List) String() string {
	str, _ := text.MarshalList(0xff4271628d295896, s.List)
	return str
}

// Admin_identities_Params_Future is a wrapper for a Admin_identities_Params promised by a client call.
type Admin_identities_Params_Future struct{ *capnp.Future }

func (p Admin_identities_Params_Future) Struct() (Admin_identities_Params, error) {
	s, err := p.Future.Struct()
	return Admin_identities_Params{s}, err
}

type Admin_identities_Results struct{ capnp.Struct }

// Admin_identities_Results_TypeID is the unique identifier for the type Admin_identities_Results.
const Admin_identities_Results_TypeID = 0xf5423d8578dbb398

func NewAdmin_identities_Results(s *capnp.Segment) (Admin_identities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results{st}, err
}

func NewRootAdmin_identities_Results(s *capnp.Segment) (Admin_identities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results{st}, err
}

func ReadRootAdmin_identities_Results(msg *capnp.Message) (Admin_identities_Results, error) {
	root, err := msg.Root()
	return Admin_identities_Results{root.Struct()}, err
}

func (s Admin_identities_Results) String() string {
	str, _ := text.Marshal(0xf5423d8578dbb398, s.Struct)
	return str
}

func (s Admin_identities_Results) Infos() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Admin_identities_Results) HasInfos() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_identities_Results) SetInfos(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Admin_identities_Results) NewInfos(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_identities_Results_List is a list of Admin_identities_Results.
type Admin_identities_Results_List struct{ capnp.List }

// NewAdmin_identities_Results creates a new list of Admin_identities_Results.
func NewAdmin_identities_Results_List(s *capnp.Segment, sz int32) (Admin_identities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_identities_Results_List{l}, err
}

func (s Admin_identities_Results_List) At(i int) Admin_identities_Results {
	return Admin_identities_Results{s.List.Struct(i)}
}

func (s Admin_identities_Results_List) Set(i int, v Admin_identities_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_identities_Results_List) String() string {
	str, _ := text.MarshalList(0xf5423d8578dbb398, s.List)
	return str
}

// Admin_identities_Results_Future is a wrapper for a Admin_identities_Results promised by a client call.
type Admin_identities_Results_Future struct{ *capnp.Future }

func (p Admin_identities_Results_Future) Struct() (Admin_identities_Results, error) {
	s, err := p.Future.Struct()
	return Admin_identities_Results{s}, err
}

type Admin_updateIdentity_Params struct{ capnp.Struct }

// Admin_updateIdentity_Params_TypeID is the unique identifier for the type Admin_updateIdentity_Params.
const Admin_updateIdentity_Params_TypeID = 0xdc8472f9b668ba83

func NewAdmin_updateIdentity_Params(s *capnp.Segment) (Admin_updateIdentity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_updateIdentity_Params{st}, err
}

func NewRootAdmin_updateIdentity_Params(s *capnp.Segment) (Admin_updateIdentity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_updateIdentity_Params{st}, err
}

func ReadRootAdmin_updateIdentity_Params(msg *capnp.Message) (Admin_updateIdentity_Params, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Params{root.Struct()}, err
}

func (s Admin_updateIdentity_Params) String() string {
	str, _ := text.Marshal(0xdc8472f9b668ba83, s.Struct)
	return str
}

func (s Admin_updateIdentity_Params) OldId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Admin_updateIdentity_Params) HasOldId() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_updateIdentity_Params) OldIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_updateIdentity_Params) SetOldId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Admin_updateIdentity_Params) NewInfo() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(1)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Admin_updateIdentity_Params) HasNewInfo() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_updateIdentity_Params) SetNewInfo(v common.IdInformation) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewNewInfo sets the newInfo field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_updateIdentity_Params) NewNewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Admin_updateIdentity_Params_List is a list of Admin_updateIdentity_Params.
type Admin_updateIdentity_Params_List struct{ capnp.List }

// NewAdmin_updateIdentity_Params creates a new list of Admin_updateIdentity_Params.
func NewAdmin_updateIdentity_Params_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_updateIdentity_Params_List{l}, err
}

func (s Admin_updateIdentity_Params_List) At(i int) Admin_updateIdentity_Params {
	return Admin_updateIdentity_Params{s.List.Struct(i)}
}

func (s Admin_updateIdentity_Params_List) Set(i int, v Admin_updateIdentity_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_updateIdentity_Params_List) String() string {
	str, _ := text.MarshalList(0xdc8472f9b668ba83, s.List)
	return str
}

// Admin_updateIdentity_Params_Future is a wrapper for a Admin_updateIdentity_Params promised by a client call.
type Admin_updateIdentity_Params_Future struct{ *capnp.Future }

func (p Admin_updateIdentity_Params_Future) Struct() (Admin_updateIdentity_Params, error) {
	s, err := p.Future.Struct()
	return Admin_updateIdentity_Params{s}, err
}

func (p Admin_updateIdentity_Params_Future) NewInfo() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(1, nil)}
}

type Admin_updateIdentity_Results struct{ capnp.Struct }

// Admin_updateIdentity_Results_TypeID is the unique identifier for the type Admin_updateIdentity_Results.
const Admin_updateIdentity_Results_TypeID = 0xb15e79db08e2ab2c

func NewAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results{st}, err
}

func NewRootAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results{st}, err
}

func ReadRootAdmin_updateIdentity_Results(msg *capnp.Message) (Admin_updateIdentity_Results, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Results{root.Struct()}, err
}

func (s Admin_updateIdentity_Results) String() string {
	str, _ := text.Marshal(0xb15e79db08e2ab2c, s.Struct)
	return str
}

// Admin_updateIdentity_Results_List is a list of Admin_updateIdentity_Results.
type Admin_updateIdentity_Results_List struct{ capnp.List }

// NewAdmin_updateIdentity_Results creates a new list of Admin_updateIdentity_Results.
func NewAdmin_updateIdentity_Results_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_updateIdentity_Results_List{l}, err
}

func (s Admin_updateIdentity_Results_List) At(i int) Admin_updateIdentity_Results {
	return Admin_updateIdentity_Results{s.List.Struct(i)}
}

func (s Admin_updateIdentity_Results_List) Set(i int, v Admin_updateIdentity_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_updateIdentity_Results_List) String() string {
	str, _ := text.MarshalList(0xb15e79db08e2ab2c, s.List)
	return str
}

// Admin_updateIdentity_Results_Future is a wrapper for a Admin_updateIdentity_Results promised by a client call.
type Admin_updateIdentity_Results_Future struct{ *capnp.Future }

func (p Admin_updateIdentity_Results_Future) Struct() (Admin_updateIdentity_Results, error) {
	s, err := p.Future.Struct()
	return Admin_updateIdentity_Results{s}, err
}

type SimpleFactory struct{ Client *capnp.Client }

// SimpleFactory_TypeID is the unique identifier for the type SimpleFactory.
const SimpleFactory_TypeID = 0xaba5829222c213cb

func (c SimpleFactory) Create(ctx context.Context, params func(SimpleFactory_create_Params) error) (SimpleFactory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaba5829222c213cb,
			MethodID:      0,
			InterfaceName: "service.capnp:SimpleFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SimpleFactory_create_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return SimpleFactory_create_Results_Future{Future: ans.Future()}, release
}
func (c SimpleFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c SimpleFactory) AddRef() SimpleFactory {
	return SimpleFactory{
		Client: c.Client.AddRef(),
	}
}

func (c SimpleFactory) Release() {
	c.Client.Release()
}

// A SimpleFactory_Server is a SimpleFactory with a local implementation.
type SimpleFactory_Server interface {
	Create(context.Context, SimpleFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// SimpleFactory_NewServer creates a new Server from an implementation of SimpleFactory_Server.
func SimpleFactory_NewServer(s SimpleFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SimpleFactory_Methods(nil, s), s, c, policy)
}

// SimpleFactory_ServerToClient creates a new Client from an implementation of SimpleFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func SimpleFactory_ServerToClient(s SimpleFactory_Server, policy *server.Policy) SimpleFactory {
	return SimpleFactory{Client: capnp.NewClient(SimpleFactory_NewServer(s, policy))}
}

// SimpleFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SimpleFactory_Methods(methods []server.Method, s SimpleFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaba5829222c213cb,
			MethodID:      0,
			InterfaceName: "service.capnp:SimpleFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, SimpleFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// SimpleFactory_create holds the state for a server call to SimpleFactory.create.
// See server.Call for documentation.
type SimpleFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SimpleFactory_create) Args() SimpleFactory_create_Params {
	return SimpleFactory_create_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c SimpleFactory_create) AllocResults() (SimpleFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results{Struct: r}, err
}

type SimpleFactory_create_Params struct{ capnp.Struct }

// SimpleFactory_create_Params_TypeID is the unique identifier for the type SimpleFactory_create_Params.
const SimpleFactory_create_Params_TypeID = 0xa8296fdc60dcb6dd

func NewSimpleFactory_create_Params(s *capnp.Segment) (SimpleFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SimpleFactory_create_Params{st}, err
}

func NewRootSimpleFactory_create_Params(s *capnp.Segment) (SimpleFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SimpleFactory_create_Params{st}, err
}

func ReadRootSimpleFactory_create_Params(msg *capnp.Message) (SimpleFactory_create_Params, error) {
	root, err := msg.Root()
	return SimpleFactory_create_Params{root.Struct()}, err
}

func (s SimpleFactory_create_Params) String() string {
	str, _ := text.Marshal(0xa8296fdc60dcb6dd, s.Struct)
	return str
}

// SimpleFactory_create_Params_List is a list of SimpleFactory_create_Params.
type SimpleFactory_create_Params_List struct{ capnp.List }

// NewSimpleFactory_create_Params creates a new list of SimpleFactory_create_Params.
func NewSimpleFactory_create_Params_List(s *capnp.Segment, sz int32) (SimpleFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SimpleFactory_create_Params_List{l}, err
}

func (s SimpleFactory_create_Params_List) At(i int) SimpleFactory_create_Params {
	return SimpleFactory_create_Params{s.List.Struct(i)}
}

func (s SimpleFactory_create_Params_List) Set(i int, v SimpleFactory_create_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SimpleFactory_create_Params_List) String() string {
	str, _ := text.MarshalList(0xa8296fdc60dcb6dd, s.List)
	return str
}

// SimpleFactory_create_Params_Future is a wrapper for a SimpleFactory_create_Params promised by a client call.
type SimpleFactory_create_Params_Future struct{ *capnp.Future }

func (p SimpleFactory_create_Params_Future) Struct() (SimpleFactory_create_Params, error) {
	s, err := p.Future.Struct()
	return SimpleFactory_create_Params{s}, err
}

type SimpleFactory_create_Results struct{ capnp.Struct }

// SimpleFactory_create_Results_TypeID is the unique identifier for the type SimpleFactory_create_Results.
const SimpleFactory_create_Results_TypeID = 0x89a33828e0de1eaa

func NewSimpleFactory_create_Results(s *capnp.Segment) (SimpleFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results{st}, err
}

func NewRootSimpleFactory_create_Results(s *capnp.Segment) (SimpleFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results{st}, err
}

func ReadRootSimpleFactory_create_Results(msg *capnp.Message) (SimpleFactory_create_Results, error) {
	root, err := msg.Root()
	return SimpleFactory_create_Results{root.Struct()}, err
}

func (s SimpleFactory_create_Results) String() string {
	str, _ := text.Marshal(0x89a33828e0de1eaa, s.Struct)
	return str
}

func (s SimpleFactory_create_Results) Caps() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s SimpleFactory_create_Results) HasCaps() bool {
	return s.Struct.HasPtr(0)
}

func (s SimpleFactory_create_Results) SetCaps(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s SimpleFactory_create_Results) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SimpleFactory_create_Results_List is a list of SimpleFactory_create_Results.
type SimpleFactory_create_Results_List struct{ capnp.List }

// NewSimpleFactory_create_Results creates a new list of SimpleFactory_create_Results.
func NewSimpleFactory_create_Results_List(s *capnp.Segment, sz int32) (SimpleFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SimpleFactory_create_Results_List{l}, err
}

func (s SimpleFactory_create_Results_List) At(i int) SimpleFactory_create_Results {
	return SimpleFactory_create_Results{s.List.Struct(i)}
}

func (s SimpleFactory_create_Results_List) Set(i int, v SimpleFactory_create_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SimpleFactory_create_Results_List) String() string {
	str, _ := text.MarshalList(0x89a33828e0de1eaa, s.List)
	return str
}

// SimpleFactory_create_Results_Future is a wrapper for a SimpleFactory_create_Results promised by a client call.
type SimpleFactory_create_Results_Future struct{ *capnp.Future }

func (p SimpleFactory_create_Results_Future) Struct() (SimpleFactory_create_Results, error) {
	s, err := p.Future.Struct()
	return SimpleFactory_create_Results{s}, err
}

type Factory struct{ Client *capnp.Client }

// Factory_TypeID is the unique identifier for the type Factory.
const Factory_TypeID = 0x8ab0ecb99c269c7f

func (c Factory) Create(ctx context.Context, params func(Factory_CreateParams) error) (Factory_AccessInfo_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_CreateParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Factory_AccessInfo_Future{Future: ans.Future()}, release
}
func (c Factory) ServiceInterfaceNames(ctx context.Context, params func(Factory_serviceInterfaceNames_Params) error) (Factory_serviceInterfaceNames_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      1,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "serviceInterfaceNames",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_serviceInterfaceNames_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Factory_serviceInterfaceNames_Results_Future{Future: ans.Future()}, release
}
func (c Factory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Factory) AddRef() Factory {
	return Factory{
		Client: c.Client.AddRef(),
	}
}

func (c Factory) Release() {
	c.Client.Release()
}

// A Factory_Server is a Factory with a local implementation.
type Factory_Server interface {
	Create(context.Context, Factory_create) error

	ServiceInterfaceNames(context.Context, Factory_serviceInterfaceNames) error

	Info(context.Context, common.Identifiable_info) error
}

// Factory_NewServer creates a new Server from an implementation of Factory_Server.
func Factory_NewServer(s Factory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Factory_Methods(nil, s), s, c, policy)
}

// Factory_ServerToClient creates a new Client from an implementation of Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func Factory_ServerToClient(s Factory_Server, policy *server.Policy) Factory {
	return Factory{Client: capnp.NewClient(Factory_NewServer(s, policy))}
}

// Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Factory_Methods(methods []server.Method, s Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Factory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      1,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "serviceInterfaceNames",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ServiceInterfaceNames(ctx, Factory_serviceInterfaceNames{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Factory_create holds the state for a server call to Factory.create.
// See server.Call for documentation.
type Factory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_create) Args() Factory_CreateParams {
	return Factory_CreateParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Factory_create) AllocResults() (Factory_AccessInfo, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo{Struct: r}, err
}

// Factory_serviceInterfaceNames holds the state for a server call to Factory.serviceInterfaceNames.
// See server.Call for documentation.
type Factory_serviceInterfaceNames struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_serviceInterfaceNames) Args() Factory_serviceInterfaceNames_Params {
	return Factory_serviceInterfaceNames_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Factory_serviceInterfaceNames) AllocResults() (Factory_serviceInterfaceNames_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results{Struct: r}, err
}

type Factory_CreateParams struct{ capnp.Struct }

// Factory_CreateParams_TypeID is the unique identifier for the type Factory_CreateParams.
const Factory_CreateParams_TypeID = 0xc2b88517ccaa9197

func NewFactory_CreateParams(s *capnp.Segment) (Factory_CreateParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Factory_CreateParams{st}, err
}

func NewRootFactory_CreateParams(s *capnp.Segment) (Factory_CreateParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Factory_CreateParams{st}, err
}

func ReadRootFactory_CreateParams(msg *capnp.Message) (Factory_CreateParams, error) {
	root, err := msg.Root()
	return Factory_CreateParams{root.Struct()}, err
}

func (s Factory_CreateParams) String() string {
	str, _ := text.Marshal(0xc2b88517ccaa9197, s.Struct)
	return str
}

func (s Factory_CreateParams) TimeoutSeconds() uint64 {
	return s.Struct.Uint64(0) ^ 3600
}

func (s Factory_CreateParams) SetTimeoutSeconds(v uint64) {
	s.Struct.SetUint64(0, v^3600)
}

func (s Factory_CreateParams) InterfaceNameToRegistrySR() (common.Pair_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.Pair_List{List: p.List()}, err
}

func (s Factory_CreateParams) HasInterfaceNameToRegistrySR() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_CreateParams) SetInterfaceNameToRegistrySR(v common.Pair_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInterfaceNameToRegistrySR sets the interfaceNameToRegistrySR field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Factory_CreateParams) NewInterfaceNameToRegistrySR(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(s.Struct.Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Factory_CreateParams) MsgPayload() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Factory_CreateParams) HasMsgPayload() bool {
	return s.Struct.HasPtr(1)
}

func (s Factory_CreateParams) SetMsgPayload(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Factory_CreateParams_List is a list of Factory_CreateParams.
type Factory_CreateParams_List struct{ capnp.List }

// NewFactory_CreateParams creates a new list of Factory_CreateParams.
func NewFactory_CreateParams_List(s *capnp.Segment, sz int32) (Factory_CreateParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Factory_CreateParams_List{l}, err
}

func (s Factory_CreateParams_List) At(i int) Factory_CreateParams {
	return Factory_CreateParams{s.List.Struct(i)}
}

func (s Factory_CreateParams_List) Set(i int, v Factory_CreateParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_CreateParams_List) String() string {
	str, _ := text.MarshalList(0xc2b88517ccaa9197, s.List)
	return str
}

// Factory_CreateParams_Future is a wrapper for a Factory_CreateParams promised by a client call.
type Factory_CreateParams_Future struct{ *capnp.Future }

func (p Factory_CreateParams_Future) Struct() (Factory_CreateParams, error) {
	s, err := p.Future.Struct()
	return Factory_CreateParams{s}, err
}

func (p Factory_CreateParams_Future) MsgPayload() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Factory_AccessInfo struct{ capnp.Struct }

// Factory_AccessInfo_TypeID is the unique identifier for the type Factory_AccessInfo.
const Factory_AccessInfo_TypeID = 0xb9816a53df7cb62e

func NewFactory_AccessInfo(s *capnp.Segment) (Factory_AccessInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo{st}, err
}

func NewRootFactory_AccessInfo(s *capnp.Segment) (Factory_AccessInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo{st}, err
}

func ReadRootFactory_AccessInfo(msg *capnp.Message) (Factory_AccessInfo, error) {
	root, err := msg.Root()
	return Factory_AccessInfo{root.Struct()}, err
}

func (s Factory_AccessInfo) String() string {
	str, _ := text.Marshal(0xb9816a53df7cb62e, s.Struct)
	return str
}

func (s Factory_AccessInfo) AdminCap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Factory_AccessInfo) HasAdminCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_AccessInfo) SetAdminCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Factory_AccessInfo) ServiceCaps() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.PointerList{List: p.List()}, err
}

func (s Factory_AccessInfo) HasServiceCaps() bool {
	return s.Struct.HasPtr(1)
}

func (s Factory_AccessInfo) SetServiceCaps(v capnp.PointerList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewServiceCaps sets the serviceCaps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Factory_AccessInfo) NewServiceCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Factory_AccessInfo) Error() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Factory_AccessInfo) HasError() bool {
	return s.Struct.HasPtr(2)
}

func (s Factory_AccessInfo) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Factory_AccessInfo) SetError(v string) error {
	return s.Struct.SetText(2, v)
}

// Factory_AccessInfo_List is a list of Factory_AccessInfo.
type Factory_AccessInfo_List struct{ capnp.List }

// NewFactory_AccessInfo creates a new list of Factory_AccessInfo.
func NewFactory_AccessInfo_List(s *capnp.Segment, sz int32) (Factory_AccessInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Factory_AccessInfo_List{l}, err
}

func (s Factory_AccessInfo_List) At(i int) Factory_AccessInfo {
	return Factory_AccessInfo{s.List.Struct(i)}
}

func (s Factory_AccessInfo_List) Set(i int, v Factory_AccessInfo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_AccessInfo_List) String() string {
	str, _ := text.MarshalList(0xb9816a53df7cb62e, s.List)
	return str
}

// Factory_AccessInfo_Future is a wrapper for a Factory_AccessInfo promised by a client call.
type Factory_AccessInfo_Future struct{ *capnp.Future }

func (p Factory_AccessInfo_Future) Struct() (Factory_AccessInfo, error) {
	s, err := p.Future.Struct()
	return Factory_AccessInfo{s}, err
}

func (p Factory_AccessInfo_Future) AdminCap() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Factory_serviceInterfaceNames_Params struct{ capnp.Struct }

// Factory_serviceInterfaceNames_Params_TypeID is the unique identifier for the type Factory_serviceInterfaceNames_Params.
const Factory_serviceInterfaceNames_Params_TypeID = 0xd4d567352ab3882a

func NewFactory_serviceInterfaceNames_Params(s *capnp.Segment) (Factory_serviceInterfaceNames_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_serviceInterfaceNames_Params{st}, err
}

func NewRootFactory_serviceInterfaceNames_Params(s *capnp.Segment) (Factory_serviceInterfaceNames_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_serviceInterfaceNames_Params{st}, err
}

func ReadRootFactory_serviceInterfaceNames_Params(msg *capnp.Message) (Factory_serviceInterfaceNames_Params, error) {
	root, err := msg.Root()
	return Factory_serviceInterfaceNames_Params{root.Struct()}, err
}

func (s Factory_serviceInterfaceNames_Params) String() string {
	str, _ := text.Marshal(0xd4d567352ab3882a, s.Struct)
	return str
}

// Factory_serviceInterfaceNames_Params_List is a list of Factory_serviceInterfaceNames_Params.
type Factory_serviceInterfaceNames_Params_List struct{ capnp.List }

// NewFactory_serviceInterfaceNames_Params creates a new list of Factory_serviceInterfaceNames_Params.
func NewFactory_serviceInterfaceNames_Params_List(s *capnp.Segment, sz int32) (Factory_serviceInterfaceNames_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Factory_serviceInterfaceNames_Params_List{l}, err
}

func (s Factory_serviceInterfaceNames_Params_List) At(i int) Factory_serviceInterfaceNames_Params {
	return Factory_serviceInterfaceNames_Params{s.List.Struct(i)}
}

func (s Factory_serviceInterfaceNames_Params_List) Set(i int, v Factory_serviceInterfaceNames_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_serviceInterfaceNames_Params_List) String() string {
	str, _ := text.MarshalList(0xd4d567352ab3882a, s.List)
	return str
}

// Factory_serviceInterfaceNames_Params_Future is a wrapper for a Factory_serviceInterfaceNames_Params promised by a client call.
type Factory_serviceInterfaceNames_Params_Future struct{ *capnp.Future }

func (p Factory_serviceInterfaceNames_Params_Future) Struct() (Factory_serviceInterfaceNames_Params, error) {
	s, err := p.Future.Struct()
	return Factory_serviceInterfaceNames_Params{s}, err
}

type Factory_serviceInterfaceNames_Results struct{ capnp.Struct }

// Factory_serviceInterfaceNames_Results_TypeID is the unique identifier for the type Factory_serviceInterfaceNames_Results.
const Factory_serviceInterfaceNames_Results_TypeID = 0xa962c127b5dccf05

func NewFactory_serviceInterfaceNames_Results(s *capnp.Segment) (Factory_serviceInterfaceNames_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results{st}, err
}

func NewRootFactory_serviceInterfaceNames_Results(s *capnp.Segment) (Factory_serviceInterfaceNames_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results{st}, err
}

func ReadRootFactory_serviceInterfaceNames_Results(msg *capnp.Message) (Factory_serviceInterfaceNames_Results, error) {
	root, err := msg.Root()
	return Factory_serviceInterfaceNames_Results{root.Struct()}, err
}

func (s Factory_serviceInterfaceNames_Results) String() string {
	str, _ := text.Marshal(0xa962c127b5dccf05, s.Struct)
	return str
}

func (s Factory_serviceInterfaceNames_Results) Names() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Factory_serviceInterfaceNames_Results) HasNames() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_serviceInterfaceNames_Results) SetNames(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Factory_serviceInterfaceNames_Results) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Factory_serviceInterfaceNames_Results_List is a list of Factory_serviceInterfaceNames_Results.
type Factory_serviceInterfaceNames_Results_List struct{ capnp.List }

// NewFactory_serviceInterfaceNames_Results creates a new list of Factory_serviceInterfaceNames_Results.
func NewFactory_serviceInterfaceNames_Results_List(s *capnp.Segment, sz int32) (Factory_serviceInterfaceNames_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Factory_serviceInterfaceNames_Results_List{l}, err
}

func (s Factory_serviceInterfaceNames_Results_List) At(i int) Factory_serviceInterfaceNames_Results {
	return Factory_serviceInterfaceNames_Results{s.List.Struct(i)}
}

func (s Factory_serviceInterfaceNames_Results_List) Set(i int, v Factory_serviceInterfaceNames_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_serviceInterfaceNames_Results_List) String() string {
	str, _ := text.MarshalList(0xa962c127b5dccf05, s.List)
	return str
}

// Factory_serviceInterfaceNames_Results_Future is a wrapper for a Factory_serviceInterfaceNames_Results promised by a client call.
type Factory_serviceInterfaceNames_Results_Future struct{ *capnp.Future }

func (p Factory_serviceInterfaceNames_Results_Future) Struct() (Factory_serviceInterfaceNames_Results, error) {
	s, err := p.Future.Struct()
	return Factory_serviceInterfaceNames_Results{s}, err
}

type Stopable struct{ Client *capnp.Client }

// Stopable_TypeID is the unique identifier for the type Stopable.
const Stopable_TypeID = 0xe9d1be2a6e9016e5

func (c Stopable) Stop(ctx context.Context, params func(Stopable_stop_Params) error) (Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c Stopable) AddRef() Stopable {
	return Stopable{
		Client: c.Client.AddRef(),
	}
}

func (c Stopable) Release() {
	c.Client.Release()
}

// A Stopable_Server is a Stopable with a local implementation.
type Stopable_Server interface {
	Stop(context.Context, Stopable_stop) error
}

// Stopable_NewServer creates a new Server from an implementation of Stopable_Server.
func Stopable_NewServer(s Stopable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stopable_Methods(nil, s), s, c, policy)
}

// Stopable_ServerToClient creates a new Client from an implementation of Stopable_Server.
// The caller is responsible for calling Release on the returned Client.
func Stopable_ServerToClient(s Stopable_Server, policy *server.Policy) Stopable {
	return Stopable{Client: capnp.NewClient(Stopable_NewServer(s, policy))}
}

// Stopable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stopable_Methods(methods []server.Method, s Stopable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Stopable_stop{call})
		},
	})

	return methods
}

// Stopable_stop holds the state for a server call to Stopable.stop.
// See server.Call for documentation.
type Stopable_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stopable_stop) Args() Stopable_stop_Params {
	return Stopable_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Stopable_stop) AllocResults() (Stopable_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{Struct: r}, err
}

type Stopable_stop_Params struct{ capnp.Struct }

// Stopable_stop_Params_TypeID is the unique identifier for the type Stopable_stop_Params.
const Stopable_stop_Params_TypeID = 0xd2e4f20669b7b705

func NewStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func NewRootStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func ReadRootStopable_stop_Params(msg *capnp.Message) (Stopable_stop_Params, error) {
	root, err := msg.Root()
	return Stopable_stop_Params{root.Struct()}, err
}

func (s Stopable_stop_Params) String() string {
	str, _ := text.Marshal(0xd2e4f20669b7b705, s.Struct)
	return str
}

// Stopable_stop_Params_List is a list of Stopable_stop_Params.
type Stopable_stop_Params_List struct{ capnp.List }

// NewStopable_stop_Params creates a new list of Stopable_stop_Params.
func NewStopable_stop_Params_List(s *capnp.Segment, sz int32) (Stopable_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Params_List{l}, err
}

func (s Stopable_stop_Params_List) At(i int) Stopable_stop_Params {
	return Stopable_stop_Params{s.List.Struct(i)}
}

func (s Stopable_stop_Params_List) Set(i int, v Stopable_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Params_List) String() string {
	str, _ := text.MarshalList(0xd2e4f20669b7b705, s.List)
	return str
}

// Stopable_stop_Params_Future is a wrapper for a Stopable_stop_Params promised by a client call.
type Stopable_stop_Params_Future struct{ *capnp.Future }

func (p Stopable_stop_Params_Future) Struct() (Stopable_stop_Params, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Params{s}, err
}

type Stopable_stop_Results struct{ capnp.Struct }

// Stopable_stop_Results_TypeID is the unique identifier for the type Stopable_stop_Results.
const Stopable_stop_Results_TypeID = 0x96368058e2cef1ac

func NewStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func NewRootStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func ReadRootStopable_stop_Results(msg *capnp.Message) (Stopable_stop_Results, error) {
	root, err := msg.Root()
	return Stopable_stop_Results{root.Struct()}, err
}

func (s Stopable_stop_Results) String() string {
	str, _ := text.Marshal(0x96368058e2cef1ac, s.Struct)
	return str
}

// Stopable_stop_Results_List is a list of Stopable_stop_Results.
type Stopable_stop_Results_List struct{ capnp.List }

// NewStopable_stop_Results creates a new list of Stopable_stop_Results.
func NewStopable_stop_Results_List(s *capnp.Segment, sz int32) (Stopable_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Results_List{l}, err
}

func (s Stopable_stop_Results_List) At(i int) Stopable_stop_Results {
	return Stopable_stop_Results{s.List.Struct(i)}
}

func (s Stopable_stop_Results_List) Set(i int, v Stopable_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Results_List) String() string {
	str, _ := text.MarshalList(0x96368058e2cef1ac, s.List)
	return str
}

// Stopable_stop_Results_Future is a wrapper for a Stopable_stop_Results promised by a client call.
type Stopable_stop_Results_Future struct{ *capnp.Future }

func (p Stopable_stop_Results_Future) Struct() (Stopable_stop_Results, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Results{s}, err
}

const schema_f52adf98d2bbc6c0 = "x\xda\x94Vkl\x14e\x17>gf\xe7R>>" +
	"\xba/\xd3\xd0\xd0\x8f|\x9b\x90~_a\x83\x0d\xb4\xa0" +
	"\xa6\x11\xdb-\x97Z\x14\xb3\xb3\xad\x09\xd4\xa8Lw\xa7" +
	"0dwg\xd9\x99\x0aK\xc4\x8a\x82X\x0c\x09\x98p" +
	"\x0d\xfc\x10\xd3D@DA\xaeF\xa5\x18\xf5G\x15\xc3" +
	"\xcdD(r\x89\xc6\x98h\x0c\x98\x1a\xfd\x01c\xde\x99" +
	"}w\x87mA\xf97\x99\xf3\xbe\xe7<\xe79\xcf9" +
	"\xe7\x9d\xba\x80o\xe2\xa6\x09\xcf\xfd\x0b@]#\x88\xce" +
	"\xde\xff~wu\xd2\xc3o\xf5\x02\x99\x80\x00\x02J\x00" +
	"\xf5\x9b\x85\x0e\x04T\xde\x14\x1a\x01\x9d\x9e\x9d\xff\xdfy" +
	"\xfc\xe7\xf7\xd6\x03\x19\xc3;'?\xff\xf0\xec\xb6+\xe1" +
	"!\x00\x08\xa2rF8\xa8|+\xd4\x00(C\xc2:" +
	"e\x97X\xa9\xf4\x89\xe5\xce;7N__\xf0\xd2\x83" +
	"[\x80T\"@\x80:\xdc.ND\x088\xb7\x82\xc4" +
	"X?\xe3\x93\x1d\xa0V 3\xad\x16\xebh\xac^\x91" +
	"\xc6\xba|dp\xd1\xa09\xf9m\x0f\x8ck\xdf#\xc6" +
	"\xe8U\xe1\xeb\xc1\xc35\xfd\x9d{\x80\x8c\xf3`\x06\xb1" +
	"~\xb3\xb8\x9b^\xeds\xaf\x0e(\xa7&\xbe\xf1r\xdf" +
	"\xbe\x12\x98\xa8\\\x10\xaf+\xd7D\x09@\xb9,\xb6(" +
	"\x82T\x09\xe0L\xd9w]\xbe\x94{\xf6} \x15," +
	"\xce\x90\xd8A\xe3\xd4\x1ey\xe1J\xdb\xd2\xd5\xc7i\x9c" +
	"b\xea\x02O\xe3]\x13G\xa1r\xc3u\xf5\x8bx\x00" +
	"\xd0\xd9\xbai\xef\x97\x95k\x8f\x9d\x02u\x1c\xfaOs" +
	"\xf4\xf4.\xa9\x0a\x95\xfd\x12=\xbdG\xa2\xa7\xd7m\xed" +
	"~T\xac\x0a\x9f\xf6\x05\xdd/\x8fr\x93;z\xd4\x10" +
	"o~\x7f\xd6\xc7\xd8f\xb9\x8aZ\xc2\xaf\x1d\x0a\xcfX" +
	"|\xe1\xbc\x97v\x80\xfa]%\xef\xa0\x96\xe97\x7f\xbc" +
	"\xf8\x9f\xdfj\xbe\xf1yK\xc9aj\xe9\x7f\xfc\x8b\xaa" +
	"y\xe3o\xf9-O\xc9\x0d\xd4\xf2\xca\x89%G\xfe\xcc" +
	"\xae\x19\xf4,\x02GM3\xe5\x18%\xb1U^\x0e\xe8" +
	"\xacx\xfa\xd7\x87\xbe:\xf7\xe9e\xdf\xd5>\x99\xa3W" +
	"\x17nm\x7fw\xe3\xc4\x09W}\x96^\xb9\x8eZ~" +
	"\x18\xb71\x1d\xfe\xf8\xccO\xc3\x88_&\x9fPr2" +
	"\xcd\xbf[nQv\xd1/g\xdb\xa1K+\xd6\xcel" +
	"\x1e\xca#p\xd5\xb6\x96\x82Ce\x83L\xcb\xd8\xfa\xfb" +
	"\x86\xf1\xaf\xff\xd1\x7f{\x98\xb7\x8f\xe4\xdd\xcag\xd4G" +
	"}\xbf\xdc\x82\xca\xf62Z\xc7-\x0b&o\xe8\\\xd6" +
	"\xec\xf8Q\x95\xd5!\xacr,=\xfb\xbc\x11\xd7k\x03" +
	"q-\x93\xce4\xb4\x19\xa9LR\x9f\xab\xc5m3\x9b" +
	"\xab\x8dgu\xcd\xd6\xabc\xba\xd5\x9d\xe4mK\x0d\xf0" +
	"\x01\x80\x00\x02\x90\x7f\x87\x01T\x99G\xb5\x9a\xc3\xf2\xb8" +
	"\x96\xb1p\x0c`\x94G$\xce\x85\xc7v.\x1c8s" +
	"\xe0 \x00\xd2\x9f\x85\x08\xe8E\x98\xab\x85\\\xe7\xaa\x8c" +
	">a\x90\xb2\xa5>I\x95u8\xb3\xdc\xd0Q\x0d\xca" +
	"\xb3Z\xcar\"\xf1\xb8nY\xadi\xe0\xbbLU\xe6" +
	"\x05\x80\xc2]d\xf7\xc8\xb4\x06\x80\xc8\x14\x8c<\x82d" +
	"\xbe\x84X\x10\x05\xb2\xa6 \x91\x83\x00\x91\xd9\x18iG" +
	"\xa2K\x8d^z\x04Cj\x80\xf3\xc9\x92\xb6\xdc\x88?" +
	"\x9b\x0a\xc9\xb4b\xda\xd6\xb3]Z\\\x0f=\xa9\xa5t" +
	"\xeb~|\xa8\x01D\x1fI\x10\x09 \xc1\xe6\x9e\xa8\x96" +
	"K\x9aZ\xa2@\x17\x9f/\x88mf\xb4\xce\xa4^k" +
	"\xd9f\xc6\xad\x84\x94\xb4\xad\xd2S\x91D\xcaH\xd7Z" +
	"\xba\xddn\xa4t\xb3\xdb\xae\x8e\x864\xca\x9b\xbfb\xcd" +
	"\xf9\x8aUp\xd8c\xe9q3\x9d\xb0\xb0\x0c8,\xf3" +
	"\xd5\xe8^*\x88R\x8fX\x0c-\xb0zz\xa7\x183" +
	"\x8c\x18\x97\x97\x02`?\x90\xba\xa2tBiz\x8ai" +
	"g4pw(\x86+E#\x99\xd9\\\x14Q\x0d\xb8" +
	"\x02`C\x10\xd9h&\xa4\x018\"\xb0\xc2\x0e\xa7\xba" +
	"4O\x8f\xb6\xeeLB\xb3\xf5\xd6\x84\x9e\xb6\x0d;W" +
	"P{)\xc7,Q&\xc5.\x13\x80\x82\x19]\xc8l" +
	"\xce<\x00u6\x8fj\x94C\x82\xe8\xcen2\xbf\x13" +
	"@}\x82Gu\x09\x87\x84\xe3*\x90\x03 :\xe5`" +
	"\x11\x8fj\x92CG\xa3(fi\x19\x00\xc0\xb1\x01\x1e" +
	"\x10\xc7\x16I\x98\x05\xd2\xbd\xba+\xa4g\xb3f\xd6e" +
	"n\xb4\x8f\xb9\x12\xc8\xac\x99\xb2\x1a\x9f\xb2|\x98\x11\xc9" +
	"\x9c\x95E\xcc\x05\xc8g\x01\xd4v\x1e\xd5c\x142z" +
	"\x90\x0fw\x00\xa8\x1f\xf0\xa8\x9e\xe4\xd0\xb1=\x99\xb5A" +
	"\xa3_H|p\x0c\x80c\xe4\x15\xc0\xb9\x12h7c" +
	"\xfab\xc3\xb2\xb3\xb96\x8c\xb14\x82N}K\xe5\xff" +
	"Z^=\x7f\x1chG\xb0F\xf1\xfd$XC\x07\x04" +
	"\"U\x0a\xa2\x1a\xcc\xcb\x83I$e-v\x1b\x06x" +
	"-\x81c\xfdK\x85\x928\x9c\x89|\x83\xb0\x1eJ\xda" +
	"\x96O\x0d#\xb6Z\x9e\xad\xfb\x93{\xe9\xa5;\xa2/" +
	"\xd1\xb5\xac\xdd\xa9kvuT\xf3\xa6\xda\xdfuq\xac" +
	"\xd1\xc3\xfa\x8ft\x9b\xefOU.\xe8q2UY5" +
	"\x8f\xeaT\x9f\x1e\x1f\xa0s`\x12\x8f\xeat\x0eCf" +
	"2\xd1\x9a`\xea\xe9I\xeb\xcb\xa9\xac1\xe8\x9c\xbb\xc8" +
	"\xdf\x1exq\xe0<UY\xd0\xc7\xa64\x8cM7\xaa" +
	"\x05\xec\xc0\xc8\xf9\xc6\xf4\xd0\x9dy c\xbc\xd1\xa3\xbc" +
	"\xd8\xd4l\xc5#{\x1d\x11\x12v\x9b\xba\x9c\x86k\xc2" +
	"(\xde\xa5\xb6\x86\xc7\x83A\x87N\x9e\xb6\xbb\x0d\x1d#" +
	"\xddeZE-\xfa\x93\x1daaE\x12R\xcaHS" +
	"\x84\x15.B\xf6\xa0@\xb6\xea\xc9\xa6\x18p\xa4\x97n" +
	"\x1c\xf6pC\xf6\xb6 \xab:\x80#\xdd\x12r\x857" +
	"\x03\xb2\xf7\x0d1hf\xcfH\xc8\x17\xf63\xb2\xbdO" +
	"Tz\xafU\xc2\xe2c\x04\xd9c\x8c\xcc\\\x09\x1c\x99" +
	"!9\x8c`@\xdb]M\x9en\x80\xef\xb6\x9b0O" +
	"\x97\xc3h\x01^\xb7\x9a\xd0a\x9a\x81FO5\xf7\x98" +
	"\x91wc7\xbfZ\xfe\x0a\x00\x00\xff\xff\xdcKf\xe8"

func init() {
	schemas.Register(schema_f52adf98d2bbc6c0,
		0x89a33828e0de1eaa,
		0x8ab0ecb99c269c7f,
		0x96368058e2cef1ac,
		0x9abf358a691110fd,
		0xa8296fdc60dcb6dd,
		0xa962c127b5dccf05,
		0xaba5829222c213cb,
		0xb15e79db08e2ab2c,
		0xb9816a53df7cb62e,
		0xc2b88517ccaa9197,
		0xce2a1a063e759787,
		0xd2e4f20669b7b705,
		0xd4d567352ab3882a,
		0xd627f31bdae7f234,
		0xd6fd194a1ac74bc1,
		0xdc8472f9b668ba83,
		0xddc3d3cd37ef5b78,
		0xe01c2290ae549759,
		0xe9d1be2a6e9016e5,
		0xf5423d8578dbb398,
		0xfec1f88b198df649,
		0xff4271628d295896)
}
