// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
)

type Admin struct{ Client *capnp.Client }

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xfec1f88b198df649

func (c Admin) Heartbeat(ctx context.Context, params func(Admin_heartbeat_Params) error) (Admin_heartbeat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_heartbeat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_heartbeat_Results_Future{Future: ans.Future()}, release
}
func (c Admin) SetTimeout(ctx context.Context, params func(Admin_setTimeout_Params) error) (Admin_setTimeout_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_setTimeout_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_setTimeout_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Stop(ctx context.Context, params func(Admin_stop_Params) error) (Admin_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_stop_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Identity(ctx context.Context, params func(Admin_identity_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_identity_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Admin) UpdateIdentity(ctx context.Context, params func(common.IdInformation) error) (Admin_updateIdentity_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.IdInformation{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_updateIdentity_Results_Future{Future: ans.Future()}, release
}

func (c Admin) AddRef() Admin {
	return Admin{
		Client: c.Client.AddRef(),
	}
}

func (c Admin) Release() {
	c.Client.Release()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	Heartbeat(context.Context, Admin_heartbeat) error

	SetTimeout(context.Context, Admin_setTimeout) error

	Stop(context.Context, Admin_stop) error

	Identity(context.Context, Admin_identity) error

	UpdateIdentity(context.Context, Admin_updateIdentity) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c, policy)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server, policy *server.Policy) Admin {
	return Admin{Client: capnp.NewClient(Admin_NewServer(s, policy))}
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Heartbeat(ctx, Admin_heartbeat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetTimeout(ctx, Admin_setTimeout{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Admin_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Identity(ctx, Admin_identity{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UpdateIdentity(ctx, Admin_updateIdentity{call})
		},
	})

	return methods
}

// Admin_heartbeat holds the state for a server call to Admin.heartbeat.
// See server.Call for documentation.
type Admin_heartbeat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_heartbeat) Args() Admin_heartbeat_Params {
	return Admin_heartbeat_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_heartbeat) AllocResults() (Admin_heartbeat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results{Struct: r}, err
}

// Admin_setTimeout holds the state for a server call to Admin.setTimeout.
// See server.Call for documentation.
type Admin_setTimeout struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_setTimeout) Args() Admin_setTimeout_Params {
	return Admin_setTimeout_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_setTimeout) AllocResults() (Admin_setTimeout_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results{Struct: r}, err
}

// Admin_stop holds the state for a server call to Admin.stop.
// See server.Call for documentation.
type Admin_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_stop) Args() Admin_stop_Params {
	return Admin_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_stop) AllocResults() (Admin_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results{Struct: r}, err
}

// Admin_identity holds the state for a server call to Admin.identity.
// See server.Call for documentation.
type Admin_identity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_identity) Args() Admin_identity_Params {
	return Admin_identity_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_identity) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// Admin_updateIdentity holds the state for a server call to Admin.updateIdentity.
// See server.Call for documentation.
type Admin_updateIdentity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_updateIdentity) Args() common.IdInformation {
	return common.IdInformation{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_updateIdentity) AllocResults() (Admin_updateIdentity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results{Struct: r}, err
}

type Admin_heartbeat_Params struct{ capnp.Struct }

// Admin_heartbeat_Params_TypeID is the unique identifier for the type Admin_heartbeat_Params.
const Admin_heartbeat_Params_TypeID = 0xd627f31bdae7f234

func NewAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params{st}, err
}

func NewRootAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params{st}, err
}

func ReadRootAdmin_heartbeat_Params(msg *capnp.Message) (Admin_heartbeat_Params, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Params{root.Struct()}, err
}

func (s Admin_heartbeat_Params) String() string {
	str, _ := text.Marshal(0xd627f31bdae7f234, s.Struct)
	return str
}

// Admin_heartbeat_Params_List is a list of Admin_heartbeat_Params.
type Admin_heartbeat_Params_List struct{ capnp.List }

// NewAdmin_heartbeat_Params creates a new list of Admin_heartbeat_Params.
func NewAdmin_heartbeat_Params_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_heartbeat_Params_List{l}, err
}

func (s Admin_heartbeat_Params_List) At(i int) Admin_heartbeat_Params {
	return Admin_heartbeat_Params{s.List.Struct(i)}
}

func (s Admin_heartbeat_Params_List) Set(i int, v Admin_heartbeat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_heartbeat_Params_List) String() string {
	str, _ := text.MarshalList(0xd627f31bdae7f234, s.List)
	return str
}

// Admin_heartbeat_Params_Future is a wrapper for a Admin_heartbeat_Params promised by a client call.
type Admin_heartbeat_Params_Future struct{ *capnp.Future }

func (p Admin_heartbeat_Params_Future) Struct() (Admin_heartbeat_Params, error) {
	s, err := p.Future.Struct()
	return Admin_heartbeat_Params{s}, err
}

type Admin_heartbeat_Results struct{ capnp.Struct }

// Admin_heartbeat_Results_TypeID is the unique identifier for the type Admin_heartbeat_Results.
const Admin_heartbeat_Results_TypeID = 0xe01c2290ae549759

func NewAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results{st}, err
}

func NewRootAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results{st}, err
}

func ReadRootAdmin_heartbeat_Results(msg *capnp.Message) (Admin_heartbeat_Results, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Results{root.Struct()}, err
}

func (s Admin_heartbeat_Results) String() string {
	str, _ := text.Marshal(0xe01c2290ae549759, s.Struct)
	return str
}

// Admin_heartbeat_Results_List is a list of Admin_heartbeat_Results.
type Admin_heartbeat_Results_List struct{ capnp.List }

// NewAdmin_heartbeat_Results creates a new list of Admin_heartbeat_Results.
func NewAdmin_heartbeat_Results_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_heartbeat_Results_List{l}, err
}

func (s Admin_heartbeat_Results_List) At(i int) Admin_heartbeat_Results {
	return Admin_heartbeat_Results{s.List.Struct(i)}
}

func (s Admin_heartbeat_Results_List) Set(i int, v Admin_heartbeat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_heartbeat_Results_List) String() string {
	str, _ := text.MarshalList(0xe01c2290ae549759, s.List)
	return str
}

// Admin_heartbeat_Results_Future is a wrapper for a Admin_heartbeat_Results promised by a client call.
type Admin_heartbeat_Results_Future struct{ *capnp.Future }

func (p Admin_heartbeat_Results_Future) Struct() (Admin_heartbeat_Results, error) {
	s, err := p.Future.Struct()
	return Admin_heartbeat_Results{s}, err
}

type Admin_setTimeout_Params struct{ capnp.Struct }

// Admin_setTimeout_Params_TypeID is the unique identifier for the type Admin_setTimeout_Params.
const Admin_setTimeout_Params_TypeID = 0x9abf358a691110fd

func NewAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params{st}, err
}

func NewRootAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params{st}, err
}

func ReadRootAdmin_setTimeout_Params(msg *capnp.Message) (Admin_setTimeout_Params, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Params{root.Struct()}, err
}

func (s Admin_setTimeout_Params) String() string {
	str, _ := text.Marshal(0x9abf358a691110fd, s.Struct)
	return str
}

func (s Admin_setTimeout_Params) Seconds() uint64 {
	return s.Struct.Uint64(0)
}

func (s Admin_setTimeout_Params) SetSeconds(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Admin_setTimeout_Params_List is a list of Admin_setTimeout_Params.
type Admin_setTimeout_Params_List struct{ capnp.List }

// NewAdmin_setTimeout_Params creates a new list of Admin_setTimeout_Params.
func NewAdmin_setTimeout_Params_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Admin_setTimeout_Params_List{l}, err
}

func (s Admin_setTimeout_Params_List) At(i int) Admin_setTimeout_Params {
	return Admin_setTimeout_Params{s.List.Struct(i)}
}

func (s Admin_setTimeout_Params_List) Set(i int, v Admin_setTimeout_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_setTimeout_Params_List) String() string {
	str, _ := text.MarshalList(0x9abf358a691110fd, s.List)
	return str
}

// Admin_setTimeout_Params_Future is a wrapper for a Admin_setTimeout_Params promised by a client call.
type Admin_setTimeout_Params_Future struct{ *capnp.Future }

func (p Admin_setTimeout_Params_Future) Struct() (Admin_setTimeout_Params, error) {
	s, err := p.Future.Struct()
	return Admin_setTimeout_Params{s}, err
}

type Admin_setTimeout_Results struct{ capnp.Struct }

// Admin_setTimeout_Results_TypeID is the unique identifier for the type Admin_setTimeout_Results.
const Admin_setTimeout_Results_TypeID = 0xd6fd194a1ac74bc1

func NewAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results{st}, err
}

func NewRootAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results{st}, err
}

func ReadRootAdmin_setTimeout_Results(msg *capnp.Message) (Admin_setTimeout_Results, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Results{root.Struct()}, err
}

func (s Admin_setTimeout_Results) String() string {
	str, _ := text.Marshal(0xd6fd194a1ac74bc1, s.Struct)
	return str
}

// Admin_setTimeout_Results_List is a list of Admin_setTimeout_Results.
type Admin_setTimeout_Results_List struct{ capnp.List }

// NewAdmin_setTimeout_Results creates a new list of Admin_setTimeout_Results.
func NewAdmin_setTimeout_Results_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_setTimeout_Results_List{l}, err
}

func (s Admin_setTimeout_Results_List) At(i int) Admin_setTimeout_Results {
	return Admin_setTimeout_Results{s.List.Struct(i)}
}

func (s Admin_setTimeout_Results_List) Set(i int, v Admin_setTimeout_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_setTimeout_Results_List) String() string {
	str, _ := text.MarshalList(0xd6fd194a1ac74bc1, s.List)
	return str
}

// Admin_setTimeout_Results_Future is a wrapper for a Admin_setTimeout_Results promised by a client call.
type Admin_setTimeout_Results_Future struct{ *capnp.Future }

func (p Admin_setTimeout_Results_Future) Struct() (Admin_setTimeout_Results, error) {
	s, err := p.Future.Struct()
	return Admin_setTimeout_Results{s}, err
}

type Admin_stop_Params struct{ capnp.Struct }

// Admin_stop_Params_TypeID is the unique identifier for the type Admin_stop_Params.
const Admin_stop_Params_TypeID = 0xddc3d3cd37ef5b78

func NewAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params{st}, err
}

func NewRootAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params{st}, err
}

func ReadRootAdmin_stop_Params(msg *capnp.Message) (Admin_stop_Params, error) {
	root, err := msg.Root()
	return Admin_stop_Params{root.Struct()}, err
}

func (s Admin_stop_Params) String() string {
	str, _ := text.Marshal(0xddc3d3cd37ef5b78, s.Struct)
	return str
}

// Admin_stop_Params_List is a list of Admin_stop_Params.
type Admin_stop_Params_List struct{ capnp.List }

// NewAdmin_stop_Params creates a new list of Admin_stop_Params.
func NewAdmin_stop_Params_List(s *capnp.Segment, sz int32) (Admin_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_stop_Params_List{l}, err
}

func (s Admin_stop_Params_List) At(i int) Admin_stop_Params {
	return Admin_stop_Params{s.List.Struct(i)}
}

func (s Admin_stop_Params_List) Set(i int, v Admin_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_stop_Params_List) String() string {
	str, _ := text.MarshalList(0xddc3d3cd37ef5b78, s.List)
	return str
}

// Admin_stop_Params_Future is a wrapper for a Admin_stop_Params promised by a client call.
type Admin_stop_Params_Future struct{ *capnp.Future }

func (p Admin_stop_Params_Future) Struct() (Admin_stop_Params, error) {
	s, err := p.Future.Struct()
	return Admin_stop_Params{s}, err
}

type Admin_stop_Results struct{ capnp.Struct }

// Admin_stop_Results_TypeID is the unique identifier for the type Admin_stop_Results.
const Admin_stop_Results_TypeID = 0xce2a1a063e759787

func NewAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results{st}, err
}

func NewRootAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results{st}, err
}

func ReadRootAdmin_stop_Results(msg *capnp.Message) (Admin_stop_Results, error) {
	root, err := msg.Root()
	return Admin_stop_Results{root.Struct()}, err
}

func (s Admin_stop_Results) String() string {
	str, _ := text.Marshal(0xce2a1a063e759787, s.Struct)
	return str
}

// Admin_stop_Results_List is a list of Admin_stop_Results.
type Admin_stop_Results_List struct{ capnp.List }

// NewAdmin_stop_Results creates a new list of Admin_stop_Results.
func NewAdmin_stop_Results_List(s *capnp.Segment, sz int32) (Admin_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_stop_Results_List{l}, err
}

func (s Admin_stop_Results_List) At(i int) Admin_stop_Results {
	return Admin_stop_Results{s.List.Struct(i)}
}

func (s Admin_stop_Results_List) Set(i int, v Admin_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_stop_Results_List) String() string {
	str, _ := text.MarshalList(0xce2a1a063e759787, s.List)
	return str
}

// Admin_stop_Results_Future is a wrapper for a Admin_stop_Results promised by a client call.
type Admin_stop_Results_Future struct{ *capnp.Future }

func (p Admin_stop_Results_Future) Struct() (Admin_stop_Results, error) {
	s, err := p.Future.Struct()
	return Admin_stop_Results{s}, err
}

type Admin_identity_Params struct{ capnp.Struct }

// Admin_identity_Params_TypeID is the unique identifier for the type Admin_identity_Params.
const Admin_identity_Params_TypeID = 0xff4271628d295896

func NewAdmin_identity_Params(s *capnp.Segment) (Admin_identity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identity_Params{st}, err
}

func NewRootAdmin_identity_Params(s *capnp.Segment) (Admin_identity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identity_Params{st}, err
}

func ReadRootAdmin_identity_Params(msg *capnp.Message) (Admin_identity_Params, error) {
	root, err := msg.Root()
	return Admin_identity_Params{root.Struct()}, err
}

func (s Admin_identity_Params) String() string {
	str, _ := text.Marshal(0xff4271628d295896, s.Struct)
	return str
}

// Admin_identity_Params_List is a list of Admin_identity_Params.
type Admin_identity_Params_List struct{ capnp.List }

// NewAdmin_identity_Params creates a new list of Admin_identity_Params.
func NewAdmin_identity_Params_List(s *capnp.Segment, sz int32) (Admin_identity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_identity_Params_List{l}, err
}

func (s Admin_identity_Params_List) At(i int) Admin_identity_Params {
	return Admin_identity_Params{s.List.Struct(i)}
}

func (s Admin_identity_Params_List) Set(i int, v Admin_identity_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_identity_Params_List) String() string {
	str, _ := text.MarshalList(0xff4271628d295896, s.List)
	return str
}

// Admin_identity_Params_Future is a wrapper for a Admin_identity_Params promised by a client call.
type Admin_identity_Params_Future struct{ *capnp.Future }

func (p Admin_identity_Params_Future) Struct() (Admin_identity_Params, error) {
	s, err := p.Future.Struct()
	return Admin_identity_Params{s}, err
}

type Admin_updateIdentity_Results struct{ capnp.Struct }

// Admin_updateIdentity_Results_TypeID is the unique identifier for the type Admin_updateIdentity_Results.
const Admin_updateIdentity_Results_TypeID = 0xb15e79db08e2ab2c

func NewAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results{st}, err
}

func NewRootAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results{st}, err
}

func ReadRootAdmin_updateIdentity_Results(msg *capnp.Message) (Admin_updateIdentity_Results, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Results{root.Struct()}, err
}

func (s Admin_updateIdentity_Results) String() string {
	str, _ := text.Marshal(0xb15e79db08e2ab2c, s.Struct)
	return str
}

// Admin_updateIdentity_Results_List is a list of Admin_updateIdentity_Results.
type Admin_updateIdentity_Results_List struct{ capnp.List }

// NewAdmin_updateIdentity_Results creates a new list of Admin_updateIdentity_Results.
func NewAdmin_updateIdentity_Results_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_updateIdentity_Results_List{l}, err
}

func (s Admin_updateIdentity_Results_List) At(i int) Admin_updateIdentity_Results {
	return Admin_updateIdentity_Results{s.List.Struct(i)}
}

func (s Admin_updateIdentity_Results_List) Set(i int, v Admin_updateIdentity_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_updateIdentity_Results_List) String() string {
	str, _ := text.MarshalList(0xb15e79db08e2ab2c, s.List)
	return str
}

// Admin_updateIdentity_Results_Future is a wrapper for a Admin_updateIdentity_Results promised by a client call.
type Admin_updateIdentity_Results_Future struct{ *capnp.Future }

func (p Admin_updateIdentity_Results_Future) Struct() (Admin_updateIdentity_Results, error) {
	s, err := p.Future.Struct()
	return Admin_updateIdentity_Results{s}, err
}

type Factory struct{ Client *capnp.Client }

// Factory_TypeID is the unique identifier for the type Factory.
const Factory_TypeID = 0x8ab0ecb99c269c7f

func (c Factory) Create(ctx context.Context, params func(Factory_create_Params) error) (Factory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_create_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Factory_create_Results_Future{Future: ans.Future()}, release
}
func (c Factory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Factory) AddRef() Factory {
	return Factory{
		Client: c.Client.AddRef(),
	}
}

func (c Factory) Release() {
	c.Client.Release()
}

// A Factory_Server is a Factory with a local implementation.
type Factory_Server interface {
	Create(context.Context, Factory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// Factory_NewServer creates a new Server from an implementation of Factory_Server.
func Factory_NewServer(s Factory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Factory_Methods(nil, s), s, c, policy)
}

// Factory_ServerToClient creates a new Client from an implementation of Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func Factory_ServerToClient(s Factory_Server, policy *server.Policy) Factory {
	return Factory{Client: capnp.NewClient(Factory_NewServer(s, policy))}
}

// Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Factory_Methods(methods []server.Method, s Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Factory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Factory_create holds the state for a server call to Factory.create.
// See server.Call for documentation.
type Factory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_create) Args() Factory_create_Params {
	return Factory_create_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Factory_create) AllocResults() (Factory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_create_Results{Struct: r}, err
}

type Factory_create_Params struct{ capnp.Struct }

// Factory_create_Params_TypeID is the unique identifier for the type Factory_create_Params.
const Factory_create_Params_TypeID = 0xc43550abff0d56cb

func NewFactory_create_Params(s *capnp.Segment) (Factory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_create_Params{st}, err
}

func NewRootFactory_create_Params(s *capnp.Segment) (Factory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_create_Params{st}, err
}

func ReadRootFactory_create_Params(msg *capnp.Message) (Factory_create_Params, error) {
	root, err := msg.Root()
	return Factory_create_Params{root.Struct()}, err
}

func (s Factory_create_Params) String() string {
	str, _ := text.Marshal(0xc43550abff0d56cb, s.Struct)
	return str
}

// Factory_create_Params_List is a list of Factory_create_Params.
type Factory_create_Params_List struct{ capnp.List }

// NewFactory_create_Params creates a new list of Factory_create_Params.
func NewFactory_create_Params_List(s *capnp.Segment, sz int32) (Factory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Factory_create_Params_List{l}, err
}

func (s Factory_create_Params_List) At(i int) Factory_create_Params {
	return Factory_create_Params{s.List.Struct(i)}
}

func (s Factory_create_Params_List) Set(i int, v Factory_create_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_create_Params_List) String() string {
	str, _ := text.MarshalList(0xc43550abff0d56cb, s.List)
	return str
}

// Factory_create_Params_Future is a wrapper for a Factory_create_Params promised by a client call.
type Factory_create_Params_Future struct{ *capnp.Future }

func (p Factory_create_Params_Future) Struct() (Factory_create_Params, error) {
	s, err := p.Future.Struct()
	return Factory_create_Params{s}, err
}

type Factory_create_Results struct{ capnp.Struct }

// Factory_create_Results_TypeID is the unique identifier for the type Factory_create_Results.
const Factory_create_Results_TypeID = 0x882842ac7ed83763

func NewFactory_create_Results(s *capnp.Segment) (Factory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_create_Results{st}, err
}

func NewRootFactory_create_Results(s *capnp.Segment) (Factory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_create_Results{st}, err
}

func ReadRootFactory_create_Results(msg *capnp.Message) (Factory_create_Results, error) {
	root, err := msg.Root()
	return Factory_create_Results{root.Struct()}, err
}

func (s Factory_create_Results) String() string {
	str, _ := text.Marshal(0x882842ac7ed83763, s.Struct)
	return str
}

func (s Factory_create_Results) Caps() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Factory_create_Results) HasCaps() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_create_Results) SetCaps(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Factory_create_Results) NewCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Factory_create_Results_List is a list of Factory_create_Results.
type Factory_create_Results_List struct{ capnp.List }

// NewFactory_create_Results creates a new list of Factory_create_Results.
func NewFactory_create_Results_List(s *capnp.Segment, sz int32) (Factory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Factory_create_Results_List{l}, err
}

func (s Factory_create_Results_List) At(i int) Factory_create_Results {
	return Factory_create_Results{s.List.Struct(i)}
}

func (s Factory_create_Results_List) Set(i int, v Factory_create_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_create_Results_List) String() string {
	str, _ := text.MarshalList(0x882842ac7ed83763, s.List)
	return str
}

// Factory_create_Results_Future is a wrapper for a Factory_create_Results promised by a client call.
type Factory_create_Results_Future struct{ *capnp.Future }

func (p Factory_create_Results_Future) Struct() (Factory_create_Results, error) {
	s, err := p.Future.Struct()
	return Factory_create_Results{s}, err
}

type ConfigurableFactory struct{ Client *capnp.Client }

// ConfigurableFactory_TypeID is the unique identifier for the type ConfigurableFactory.
const ConfigurableFactory_TypeID = 0xce0bf5687a567883

func (c ConfigurableFactory) CreateCF(ctx context.Context, params func(ConfigurableFactory_CreateParams) error) (ConfigurableFactory_AccessInfo_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce0bf5687a567883,
			MethodID:      0,
			InterfaceName: "service.capnp:ConfigurableFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ConfigurableFactory_CreateParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ConfigurableFactory_AccessInfo_Future{Future: ans.Future()}, release
}
func (c ConfigurableFactory) Create(ctx context.Context, params func(Factory_create_Params) error) (Factory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_create_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Factory_create_Results_Future{Future: ans.Future()}, release
}
func (c ConfigurableFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c ConfigurableFactory) AddRef() ConfigurableFactory {
	return ConfigurableFactory{
		Client: c.Client.AddRef(),
	}
}

func (c ConfigurableFactory) Release() {
	c.Client.Release()
}

// A ConfigurableFactory_Server is a ConfigurableFactory with a local implementation.
type ConfigurableFactory_Server interface {
	CreateCF(context.Context, ConfigurableFactory_createCF) error

	Create(context.Context, Factory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// ConfigurableFactory_NewServer creates a new Server from an implementation of ConfigurableFactory_Server.
func ConfigurableFactory_NewServer(s ConfigurableFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ConfigurableFactory_Methods(nil, s), s, c, policy)
}

// ConfigurableFactory_ServerToClient creates a new Client from an implementation of ConfigurableFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func ConfigurableFactory_ServerToClient(s ConfigurableFactory_Server, policy *server.Policy) ConfigurableFactory {
	return ConfigurableFactory{Client: capnp.NewClient(ConfigurableFactory_NewServer(s, policy))}
}

// ConfigurableFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ConfigurableFactory_Methods(methods []server.Method, s ConfigurableFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce0bf5687a567883,
			MethodID:      0,
			InterfaceName: "service.capnp:ConfigurableFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateCF(ctx, ConfigurableFactory_createCF{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Factory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ConfigurableFactory_createCF holds the state for a server call to ConfigurableFactory.createCF.
// See server.Call for documentation.
type ConfigurableFactory_createCF struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ConfigurableFactory_createCF) Args() ConfigurableFactory_CreateParams {
	return ConfigurableFactory_CreateParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ConfigurableFactory_createCF) AllocResults() (ConfigurableFactory_AccessInfo, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigurableFactory_AccessInfo{Struct: r}, err
}

type ConfigurableFactory_CreateParams struct{ capnp.Struct }

// ConfigurableFactory_CreateParams_TypeID is the unique identifier for the type ConfigurableFactory_CreateParams.
const ConfigurableFactory_CreateParams_TypeID = 0x85d70942ff012c97

func NewConfigurableFactory_CreateParams(s *capnp.Segment) (ConfigurableFactory_CreateParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ConfigurableFactory_CreateParams{st}, err
}

func NewRootConfigurableFactory_CreateParams(s *capnp.Segment) (ConfigurableFactory_CreateParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ConfigurableFactory_CreateParams{st}, err
}

func ReadRootConfigurableFactory_CreateParams(msg *capnp.Message) (ConfigurableFactory_CreateParams, error) {
	root, err := msg.Root()
	return ConfigurableFactory_CreateParams{root.Struct()}, err
}

func (s ConfigurableFactory_CreateParams) String() string {
	str, _ := text.Marshal(0x85d70942ff012c97, s.Struct)
	return str
}

func (s ConfigurableFactory_CreateParams) TimeoutSeconds() uint64 {
	return s.Struct.Uint64(0) ^ 3600
}

func (s ConfigurableFactory_CreateParams) SetTimeoutSeconds(v uint64) {
	s.Struct.SetUint64(0, v^3600)
}

func (s ConfigurableFactory_CreateParams) RegistrySR() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ConfigurableFactory_CreateParams) HasRegistrySR() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigurableFactory_CreateParams) RegistrySRBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ConfigurableFactory_CreateParams) SetRegistrySR(v string) error {
	return s.Struct.SetText(0, v)
}

// ConfigurableFactory_CreateParams_List is a list of ConfigurableFactory_CreateParams.
type ConfigurableFactory_CreateParams_List struct{ capnp.List }

// NewConfigurableFactory_CreateParams creates a new list of ConfigurableFactory_CreateParams.
func NewConfigurableFactory_CreateParams_List(s *capnp.Segment, sz int32) (ConfigurableFactory_CreateParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ConfigurableFactory_CreateParams_List{l}, err
}

func (s ConfigurableFactory_CreateParams_List) At(i int) ConfigurableFactory_CreateParams {
	return ConfigurableFactory_CreateParams{s.List.Struct(i)}
}

func (s ConfigurableFactory_CreateParams_List) Set(i int, v ConfigurableFactory_CreateParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ConfigurableFactory_CreateParams_List) String() string {
	str, _ := text.MarshalList(0x85d70942ff012c97, s.List)
	return str
}

// ConfigurableFactory_CreateParams_Future is a wrapper for a ConfigurableFactory_CreateParams promised by a client call.
type ConfigurableFactory_CreateParams_Future struct{ *capnp.Future }

func (p ConfigurableFactory_CreateParams_Future) Struct() (ConfigurableFactory_CreateParams, error) {
	s, err := p.Future.Struct()
	return ConfigurableFactory_CreateParams{s}, err
}

type ConfigurableFactory_AccessInfo struct{ capnp.Struct }

// ConfigurableFactory_AccessInfo_TypeID is the unique identifier for the type ConfigurableFactory_AccessInfo.
const ConfigurableFactory_AccessInfo_TypeID = 0xbe87cac358518855

func NewConfigurableFactory_AccessInfo(s *capnp.Segment) (ConfigurableFactory_AccessInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigurableFactory_AccessInfo{st}, err
}

func NewRootConfigurableFactory_AccessInfo(s *capnp.Segment) (ConfigurableFactory_AccessInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ConfigurableFactory_AccessInfo{st}, err
}

func ReadRootConfigurableFactory_AccessInfo(msg *capnp.Message) (ConfigurableFactory_AccessInfo, error) {
	root, err := msg.Root()
	return ConfigurableFactory_AccessInfo{root.Struct()}, err
}

func (s ConfigurableFactory_AccessInfo) String() string {
	str, _ := text.Marshal(0xbe87cac358518855, s.Struct)
	return str
}

func (s ConfigurableFactory_AccessInfo) AdminCap() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ConfigurableFactory_AccessInfo) HasAdminCap() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfigurableFactory_AccessInfo) SetAdminCap(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s ConfigurableFactory_AccessInfo) ServiceCaps() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.PointerList{List: p.List()}, err
}

func (s ConfigurableFactory_AccessInfo) HasServiceCaps() bool {
	return s.Struct.HasPtr(1)
}

func (s ConfigurableFactory_AccessInfo) SetServiceCaps(v capnp.PointerList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewServiceCaps sets the serviceCaps field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ConfigurableFactory_AccessInfo) NewServiceCaps(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// ConfigurableFactory_AccessInfo_List is a list of ConfigurableFactory_AccessInfo.
type ConfigurableFactory_AccessInfo_List struct{ capnp.List }

// NewConfigurableFactory_AccessInfo creates a new list of ConfigurableFactory_AccessInfo.
func NewConfigurableFactory_AccessInfo_List(s *capnp.Segment, sz int32) (ConfigurableFactory_AccessInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ConfigurableFactory_AccessInfo_List{l}, err
}

func (s ConfigurableFactory_AccessInfo_List) At(i int) ConfigurableFactory_AccessInfo {
	return ConfigurableFactory_AccessInfo{s.List.Struct(i)}
}

func (s ConfigurableFactory_AccessInfo_List) Set(i int, v ConfigurableFactory_AccessInfo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ConfigurableFactory_AccessInfo_List) String() string {
	str, _ := text.MarshalList(0xbe87cac358518855, s.List)
	return str
}

// ConfigurableFactory_AccessInfo_Future is a wrapper for a ConfigurableFactory_AccessInfo promised by a client call.
type ConfigurableFactory_AccessInfo_Future struct{ *capnp.Future }

func (p ConfigurableFactory_AccessInfo_Future) Struct() (ConfigurableFactory_AccessInfo, error) {
	s, err := p.Future.Struct()
	return ConfigurableFactory_AccessInfo{s}, err
}

func (p ConfigurableFactory_AccessInfo_Future) AdminCap() *capnp.Future {
	return p.Future.Field(0, nil)
}

const schema_f52adf98d2bbc6c0 = "x\xda\x8cT_h\x1c\xd5\x1b\xfd\xce\x9d\xb9;\xc9\xef" +
	"\x97?\xbd\x99\xd4\xd2*\x04B\xb4\xcdRcc\x1a\x8a" +
	"\xc1\xba\x9b\x04\x1a\x13\x15v\xd2Z\xdaH\xc5\xc9f\xd2" +
	"LIv\xb7;3\xda\x04\xda>\x88\xb4V\x02\xfab" +
	"T\xe2\x83\xbeIEm\xdf\x82\xa0\xc6\x8a\x82\xa1\x05\xad" +
	"Q\xa9\x14E\x10_\x04Q\xa9\xfa\x92^\xb9;;\x93" +
	"1I\xb1\xaf\xf7\xfb\xee\xb9\xe7;\xe7\xbbgW\x96e" +
	"Y'\xff\xab\x86\xc8\x9a\xe0)9\xb7\x13\xb2\xaf\xf6\x9b" +
	"\xe7\xc8j\x05\xe4\xb3'\x0e\xceL\xdc\xf8\xff\x15\xe20" +
	"\x88\xbal}\x06f\xa0\x1bD\xe6q\xfd\x19\x82\xcc\xef" +
	"\xf9\xf6\xd4\xdb};\xce\x92\xb8\x03TmZ\xd6\xd3 " +
	"\x98\xd7\xf5\x0cA\x9e\x9e\xbfg~\xe1\x97\xf7\xce\x91h" +
	"\xd0\xe4G\x9f\xbe\xff\xe5+\xdf\xa7o\x10\xc1\xac\xe7\x17" +
	"\xcd\xcd\\!\x09>`>\xc0\xb7\x10\xc9\x95M\xc2=" +
	"\xd7\xfd\xe1kd5\x03D\xea\x9d\xaev~\xbfB\xeb" +
	"\xe4\x0am\xe7\xf9\x1fk\xbe\x9b~\xf2\x02\x89\xe6\xa8n" +
	"\xf1\x11\x90.\x1f?k\x1d\xba\xf4\xf9\x99\x0fH\xb4&" +
	"Y3\xd5\xb2\x97\x1f\x83iU\xdez\x8c+\xd6K\x07" +
	"\xeb\xe5\xf9\\\xf7'!\xeb\x0a\xcc\"oU0\xf1\xcd" +
	"5t\xbb\xde\xe2M0\x17\xf8v\"s\x99\x0f\x98w" +
	"\xa7\x14\xdf3s\xc1C\xa9m\xe9+\x09:\x9bS\xff" +
	"S8\xbb\x7f\xff\xf9\xda\x9d\x7fl\xff:QY\xe1i" +
	"UY|\xe4\xb3mC[W\x92\x95\x9fx\x8f\xaa\x9c" +
	"x\xe2\xd7=\x97\xaf^\xba\x9e\xa8\\\xe6LU\x0e\xcf" +
	"\x1dx\xe7\xc5\xd6\xbb~HT.(Yt9\xf8\xe7" +
	"\xec\xd6\x17\xfe^\xbc\xb9N\xdeW\xf9\x9b\xe6\x1bj\xe4" +
	"\xae\xd7\xf9\x00\xcc e\x10\xc9\x97\x0f\xb5\xcf\x8e\x1e\xef" +
	"\x93\x09\x9c#\xa9V\xd0I\xe99\xe5\xa7\xdd\xbc\xd3\xa1" +
	"\xe7\xedR\xa1\xd4\xd3_,\x8c\xbbG\x83\xb2=:\xe9" +
	"\xec\xb3\xf3~\xb1<\xdd\xd1_vl\xdf\xc9\xe4\xec\xb2" +
	"=\xe5\xe5\x00\xabF\xd3\x89t\x00\xa2}\x86\xc8\xda\xa1" +
	"\xc1\xda\xcd\x00T\xbc\x13\x9d#D\xd6.\x0d\xd6\x83\x0c" +
	"\xd2w\xa7\x9cb\xe0\xef\xa7\x8c\x93/\x16\xc6<\xd4\x12" +
	"C\xad\xb6\xa9\x81H\x96\x9d\xa3\xae\xe7\x97\xa7I\xdb?" +
	"\x8c:b\xa8#\xc4|\xb4\x90O\xc4!_\xe1\xd06" +
	"\xecx\x8d\xc1\xa4\xefYzH\x81H\xd4\xa7\x89\xac\x1a" +
	"\x0dV\x1bCc\xde.yh \xe44@\xc8\xe5\x87" +
	"\xe7\x0f/}\xf1\xeeE\"\xa8\xc3\x18\x1b\x11vK\x05" +
	"\\\x8d\xa4k\x9c(^\x0fD\xdb-D\x0f1\xc1\x8d" +
	"L\xf8~\x16\x96\x0e$pi-\xdf\xde\xb1)\xb7\xd0" +
	"\xe19\xfe\x81p\xf0\xb6\\KE\xb6$\xe1\xbe*\xe1" +
	"f\x86\xd3^R\x96\x04E=\x09\x17\x94\xc6l\xdf\x19" +
	"\x1cs\x0a\xbe\xebO+\x11\x82I\xcd\xf7n\xc7\xbb\xde" +
	"|\xde\xf1\xbc\xc6\xc1\xc2x1\xe1\x1c\x91h\x1fZu" +
	"N\xc4\xd6\x8dV\xad{\x94A\xda\xea\xed~\xbbDD" +
	"h\xd25\x02\x9aV\x09\xf6\x93q[Rolc\xce" +
	".\x1b\xf6\x94\xb7\xb6k\xfd\x00\x98\xb6j\x80\xd5h\x12" +
	"\xb5\xc7\x12\x1f\xbevD\x86\xbb\x99\xb3\xa9Q\xa9,\xc3" +
	"q\x07\x0b\xa4\x8d\x17\xab\x9eFw\x11\xdd\x13\xa2G\x88" +
	"\x16\x82\xb87\xb2\xd5\xd2\xc1\xe4o\xb3\xf7mizj" +
	"\xe1c\xb2t\x86\xdef\xa0\x8eH`H\x86-\xfd\xfb" +
	"\x88P\xb5?N\xb6[\xda\xef\x17K\xa1K\xbew\xab" +
	"\x9e\x09\xc7.\xfb\xa3\x8e\xed\xb7\xe5\xec\x90\xfb\x7fm\xd2" +
	"p&D\x8c\x1b\x8duo\x86_\x94\xa2\x86\x8d\xdf\x1b" +
	"vZ\xfe\x8d\x83\xa8\xcf\x98r\x0bjK\x9a+\xc2E" +
	"I\x86(\x84\xc4K\xc3\xc4\xc4\xf3\x06\x10\xe75\xa2P" +
	"\x13'G\x88\x89\xc0\x00\x8b\xd3\x0cQH\x0a7ML" +
	"\x1c1\xa0\xc59\x84\xab\xd7\xb4\x9bK\xa7\x96\xbe\x12\xd6" +
	"\x1011h@\x97\xd1\x11\xa2\xac\x17{g\x88\x89n" +
	"CF\xdc\x09~V\xadV(\x09i\x81\x9fE\xa3\x1a" +
	"<\x0b\xe9V\x7f\x07\x11e!\xa3\x1fC\x99\xf04\x8b" +
	"\x1c\xb0\xb1\xc2\xd1\xc5h)\xff\x09\x00\x00\xff\xff\x93\xc6" +
	".\xce"

func init() {
	schemas.Register(schema_f52adf98d2bbc6c0,
		0x85d70942ff012c97,
		0x882842ac7ed83763,
		0x8ab0ecb99c269c7f,
		0x9abf358a691110fd,
		0xb15e79db08e2ab2c,
		0xbe87cac358518855,
		0xc43550abff0d56cb,
		0xce0bf5687a567883,
		0xce2a1a063e759787,
		0xd627f31bdae7f234,
		0xd6fd194a1ac74bc1,
		0xddc3d3cd37ef5b78,
		0xe01c2290ae549759,
		0xfec1f88b198df649,
		0xff4271628d295896)
}
