// Code generated by capnpc-go. DO NOT EDIT.

package service

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
)

type Admin capnp.Client

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xfec1f88b198df649

func (c Admin) Heartbeat(ctx context.Context, params func(Admin_heartbeat_Params) error) (Admin_heartbeat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_heartbeat_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_heartbeat_Results_Future{Future: ans.Future()}, release
}
func (c Admin) SetTimeout(ctx context.Context, params func(Admin_setTimeout_Params) error) (Admin_setTimeout_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_setTimeout_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_setTimeout_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Stop(ctx context.Context, params func(Admin_stop_Params) error) (Admin_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_stop_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_stop_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Identities(ctx context.Context, params func(Admin_identities_Params) error) (Admin_identities_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identities",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_identities_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_identities_Results_Future{Future: ans.Future()}, release
}
func (c Admin) UpdateIdentity(ctx context.Context, params func(Admin_updateIdentity_Params) error) (Admin_updateIdentity_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_updateIdentity_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Admin_updateIdentity_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Admin) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Admin) AddRef() Admin {
	return Admin(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Admin) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Admin) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Admin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Admin) DecodeFromPtr(p capnp.Ptr) Admin {
	return Admin(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Admin) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Admin) IsSame(other Admin) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Admin) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Admin) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	Heartbeat(context.Context, Admin_heartbeat) error

	SetTimeout(context.Context, Admin_setTimeout) error

	Stop(context.Context, Admin_stop) error

	Identities(context.Context, Admin_identities) error

	UpdateIdentity(context.Context, Admin_updateIdentity) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server) Admin {
	return Admin(capnp.NewClient(Admin_NewServer(s)))
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      0,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "heartbeat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Heartbeat(ctx, Admin_heartbeat{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      1,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "setTimeout",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetTimeout(ctx, Admin_setTimeout{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      2,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Admin_stop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      3,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "identities",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Identities(ctx, Admin_identities{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfec1f88b198df649,
			MethodID:      4,
			InterfaceName: "service.capnp:Admin",
			MethodName:    "updateIdentity",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.UpdateIdentity(ctx, Admin_updateIdentity{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_heartbeat holds the state for a server call to Admin.heartbeat.
// See server.Call for documentation.
type Admin_heartbeat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_heartbeat) Args() Admin_heartbeat_Params {
	return Admin_heartbeat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_heartbeat) AllocResults() (Admin_heartbeat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results(r), err
}

// Admin_setTimeout holds the state for a server call to Admin.setTimeout.
// See server.Call for documentation.
type Admin_setTimeout struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_setTimeout) Args() Admin_setTimeout_Params {
	return Admin_setTimeout_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_setTimeout) AllocResults() (Admin_setTimeout_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results(r), err
}

// Admin_stop holds the state for a server call to Admin.stop.
// See server.Call for documentation.
type Admin_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_stop) Args() Admin_stop_Params {
	return Admin_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_stop) AllocResults() (Admin_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results(r), err
}

// Admin_identities holds the state for a server call to Admin.identities.
// See server.Call for documentation.
type Admin_identities struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_identities) Args() Admin_identities_Params {
	return Admin_identities_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_identities) AllocResults() (Admin_identities_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results(r), err
}

// Admin_updateIdentity holds the state for a server call to Admin.updateIdentity.
// See server.Call for documentation.
type Admin_updateIdentity struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_updateIdentity) Args() Admin_updateIdentity_Params {
	return Admin_updateIdentity_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Admin_updateIdentity) AllocResults() (Admin_updateIdentity_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results(r), err
}

// Admin_List is a list of Admin.
type Admin_List = capnp.CapList[Admin]

// NewAdmin creates a new list of Admin.
func NewAdmin_List(s *capnp.Segment, sz int32) (Admin_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Admin](l), err
}

type Admin_heartbeat_Params capnp.Struct

// Admin_heartbeat_Params_TypeID is the unique identifier for the type Admin_heartbeat_Params.
const Admin_heartbeat_Params_TypeID = 0xd627f31bdae7f234

func NewAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params(st), err
}

func NewRootAdmin_heartbeat_Params(s *capnp.Segment) (Admin_heartbeat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Params(st), err
}

func ReadRootAdmin_heartbeat_Params(msg *capnp.Message) (Admin_heartbeat_Params, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Params(root.Struct()), err
}

func (s Admin_heartbeat_Params) String() string {
	str, _ := text.Marshal(0xd627f31bdae7f234, capnp.Struct(s))
	return str
}

func (s Admin_heartbeat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_heartbeat_Params) DecodeFromPtr(p capnp.Ptr) Admin_heartbeat_Params {
	return Admin_heartbeat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_heartbeat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_heartbeat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_heartbeat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_heartbeat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_heartbeat_Params_List is a list of Admin_heartbeat_Params.
type Admin_heartbeat_Params_List = capnp.StructList[Admin_heartbeat_Params]

// NewAdmin_heartbeat_Params creates a new list of Admin_heartbeat_Params.
func NewAdmin_heartbeat_Params_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_heartbeat_Params](l), err
}

// Admin_heartbeat_Params_Future is a wrapper for a Admin_heartbeat_Params promised by a client call.
type Admin_heartbeat_Params_Future struct{ *capnp.Future }

func (f Admin_heartbeat_Params_Future) Struct() (Admin_heartbeat_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_heartbeat_Params(p.Struct()), err
}

type Admin_heartbeat_Results capnp.Struct

// Admin_heartbeat_Results_TypeID is the unique identifier for the type Admin_heartbeat_Results.
const Admin_heartbeat_Results_TypeID = 0xe01c2290ae549759

func NewAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results(st), err
}

func NewRootAdmin_heartbeat_Results(s *capnp.Segment) (Admin_heartbeat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_heartbeat_Results(st), err
}

func ReadRootAdmin_heartbeat_Results(msg *capnp.Message) (Admin_heartbeat_Results, error) {
	root, err := msg.Root()
	return Admin_heartbeat_Results(root.Struct()), err
}

func (s Admin_heartbeat_Results) String() string {
	str, _ := text.Marshal(0xe01c2290ae549759, capnp.Struct(s))
	return str
}

func (s Admin_heartbeat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_heartbeat_Results) DecodeFromPtr(p capnp.Ptr) Admin_heartbeat_Results {
	return Admin_heartbeat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_heartbeat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_heartbeat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_heartbeat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_heartbeat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_heartbeat_Results_List is a list of Admin_heartbeat_Results.
type Admin_heartbeat_Results_List = capnp.StructList[Admin_heartbeat_Results]

// NewAdmin_heartbeat_Results creates a new list of Admin_heartbeat_Results.
func NewAdmin_heartbeat_Results_List(s *capnp.Segment, sz int32) (Admin_heartbeat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_heartbeat_Results](l), err
}

// Admin_heartbeat_Results_Future is a wrapper for a Admin_heartbeat_Results promised by a client call.
type Admin_heartbeat_Results_Future struct{ *capnp.Future }

func (f Admin_heartbeat_Results_Future) Struct() (Admin_heartbeat_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_heartbeat_Results(p.Struct()), err
}

type Admin_setTimeout_Params capnp.Struct

// Admin_setTimeout_Params_TypeID is the unique identifier for the type Admin_setTimeout_Params.
const Admin_setTimeout_Params_TypeID = 0x9abf358a691110fd

func NewAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params(st), err
}

func NewRootAdmin_setTimeout_Params(s *capnp.Segment) (Admin_setTimeout_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_setTimeout_Params(st), err
}

func ReadRootAdmin_setTimeout_Params(msg *capnp.Message) (Admin_setTimeout_Params, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Params(root.Struct()), err
}

func (s Admin_setTimeout_Params) String() string {
	str, _ := text.Marshal(0x9abf358a691110fd, capnp.Struct(s))
	return str
}

func (s Admin_setTimeout_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_setTimeout_Params) DecodeFromPtr(p capnp.Ptr) Admin_setTimeout_Params {
	return Admin_setTimeout_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_setTimeout_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_setTimeout_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_setTimeout_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_setTimeout_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_setTimeout_Params) Seconds() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Admin_setTimeout_Params) SetSeconds(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Admin_setTimeout_Params_List is a list of Admin_setTimeout_Params.
type Admin_setTimeout_Params_List = capnp.StructList[Admin_setTimeout_Params]

// NewAdmin_setTimeout_Params creates a new list of Admin_setTimeout_Params.
func NewAdmin_setTimeout_Params_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Admin_setTimeout_Params](l), err
}

// Admin_setTimeout_Params_Future is a wrapper for a Admin_setTimeout_Params promised by a client call.
type Admin_setTimeout_Params_Future struct{ *capnp.Future }

func (f Admin_setTimeout_Params_Future) Struct() (Admin_setTimeout_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_setTimeout_Params(p.Struct()), err
}

type Admin_setTimeout_Results capnp.Struct

// Admin_setTimeout_Results_TypeID is the unique identifier for the type Admin_setTimeout_Results.
const Admin_setTimeout_Results_TypeID = 0xd6fd194a1ac74bc1

func NewAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results(st), err
}

func NewRootAdmin_setTimeout_Results(s *capnp.Segment) (Admin_setTimeout_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_setTimeout_Results(st), err
}

func ReadRootAdmin_setTimeout_Results(msg *capnp.Message) (Admin_setTimeout_Results, error) {
	root, err := msg.Root()
	return Admin_setTimeout_Results(root.Struct()), err
}

func (s Admin_setTimeout_Results) String() string {
	str, _ := text.Marshal(0xd6fd194a1ac74bc1, capnp.Struct(s))
	return str
}

func (s Admin_setTimeout_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_setTimeout_Results) DecodeFromPtr(p capnp.Ptr) Admin_setTimeout_Results {
	return Admin_setTimeout_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_setTimeout_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_setTimeout_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_setTimeout_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_setTimeout_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_setTimeout_Results_List is a list of Admin_setTimeout_Results.
type Admin_setTimeout_Results_List = capnp.StructList[Admin_setTimeout_Results]

// NewAdmin_setTimeout_Results creates a new list of Admin_setTimeout_Results.
func NewAdmin_setTimeout_Results_List(s *capnp.Segment, sz int32) (Admin_setTimeout_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_setTimeout_Results](l), err
}

// Admin_setTimeout_Results_Future is a wrapper for a Admin_setTimeout_Results promised by a client call.
type Admin_setTimeout_Results_Future struct{ *capnp.Future }

func (f Admin_setTimeout_Results_Future) Struct() (Admin_setTimeout_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_setTimeout_Results(p.Struct()), err
}

type Admin_stop_Params capnp.Struct

// Admin_stop_Params_TypeID is the unique identifier for the type Admin_stop_Params.
const Admin_stop_Params_TypeID = 0xddc3d3cd37ef5b78

func NewAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params(st), err
}

func NewRootAdmin_stop_Params(s *capnp.Segment) (Admin_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Params(st), err
}

func ReadRootAdmin_stop_Params(msg *capnp.Message) (Admin_stop_Params, error) {
	root, err := msg.Root()
	return Admin_stop_Params(root.Struct()), err
}

func (s Admin_stop_Params) String() string {
	str, _ := text.Marshal(0xddc3d3cd37ef5b78, capnp.Struct(s))
	return str
}

func (s Admin_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_stop_Params) DecodeFromPtr(p capnp.Ptr) Admin_stop_Params {
	return Admin_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_stop_Params_List is a list of Admin_stop_Params.
type Admin_stop_Params_List = capnp.StructList[Admin_stop_Params]

// NewAdmin_stop_Params creates a new list of Admin_stop_Params.
func NewAdmin_stop_Params_List(s *capnp.Segment, sz int32) (Admin_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_stop_Params](l), err
}

// Admin_stop_Params_Future is a wrapper for a Admin_stop_Params promised by a client call.
type Admin_stop_Params_Future struct{ *capnp.Future }

func (f Admin_stop_Params_Future) Struct() (Admin_stop_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_stop_Params(p.Struct()), err
}

type Admin_stop_Results capnp.Struct

// Admin_stop_Results_TypeID is the unique identifier for the type Admin_stop_Results.
const Admin_stop_Results_TypeID = 0xce2a1a063e759787

func NewAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results(st), err
}

func NewRootAdmin_stop_Results(s *capnp.Segment) (Admin_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_stop_Results(st), err
}

func ReadRootAdmin_stop_Results(msg *capnp.Message) (Admin_stop_Results, error) {
	root, err := msg.Root()
	return Admin_stop_Results(root.Struct()), err
}

func (s Admin_stop_Results) String() string {
	str, _ := text.Marshal(0xce2a1a063e759787, capnp.Struct(s))
	return str
}

func (s Admin_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_stop_Results) DecodeFromPtr(p capnp.Ptr) Admin_stop_Results {
	return Admin_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_stop_Results_List is a list of Admin_stop_Results.
type Admin_stop_Results_List = capnp.StructList[Admin_stop_Results]

// NewAdmin_stop_Results creates a new list of Admin_stop_Results.
func NewAdmin_stop_Results_List(s *capnp.Segment, sz int32) (Admin_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_stop_Results](l), err
}

// Admin_stop_Results_Future is a wrapper for a Admin_stop_Results promised by a client call.
type Admin_stop_Results_Future struct{ *capnp.Future }

func (f Admin_stop_Results_Future) Struct() (Admin_stop_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_stop_Results(p.Struct()), err
}

type Admin_identities_Params capnp.Struct

// Admin_identities_Params_TypeID is the unique identifier for the type Admin_identities_Params.
const Admin_identities_Params_TypeID = 0xff4271628d295896

func NewAdmin_identities_Params(s *capnp.Segment) (Admin_identities_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identities_Params(st), err
}

func NewRootAdmin_identities_Params(s *capnp.Segment) (Admin_identities_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_identities_Params(st), err
}

func ReadRootAdmin_identities_Params(msg *capnp.Message) (Admin_identities_Params, error) {
	root, err := msg.Root()
	return Admin_identities_Params(root.Struct()), err
}

func (s Admin_identities_Params) String() string {
	str, _ := text.Marshal(0xff4271628d295896, capnp.Struct(s))
	return str
}

func (s Admin_identities_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_identities_Params) DecodeFromPtr(p capnp.Ptr) Admin_identities_Params {
	return Admin_identities_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_identities_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_identities_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_identities_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_identities_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_identities_Params_List is a list of Admin_identities_Params.
type Admin_identities_Params_List = capnp.StructList[Admin_identities_Params]

// NewAdmin_identities_Params creates a new list of Admin_identities_Params.
func NewAdmin_identities_Params_List(s *capnp.Segment, sz int32) (Admin_identities_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_identities_Params](l), err
}

// Admin_identities_Params_Future is a wrapper for a Admin_identities_Params promised by a client call.
type Admin_identities_Params_Future struct{ *capnp.Future }

func (f Admin_identities_Params_Future) Struct() (Admin_identities_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_identities_Params(p.Struct()), err
}

type Admin_identities_Results capnp.Struct

// Admin_identities_Results_TypeID is the unique identifier for the type Admin_identities_Results.
const Admin_identities_Results_TypeID = 0xf5423d8578dbb398

func NewAdmin_identities_Results(s *capnp.Segment) (Admin_identities_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results(st), err
}

func NewRootAdmin_identities_Results(s *capnp.Segment) (Admin_identities_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_identities_Results(st), err
}

func ReadRootAdmin_identities_Results(msg *capnp.Message) (Admin_identities_Results, error) {
	root, err := msg.Root()
	return Admin_identities_Results(root.Struct()), err
}

func (s Admin_identities_Results) String() string {
	str, _ := text.Marshal(0xf5423d8578dbb398, capnp.Struct(s))
	return str
}

func (s Admin_identities_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_identities_Results) DecodeFromPtr(p capnp.Ptr) Admin_identities_Results {
	return Admin_identities_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_identities_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_identities_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_identities_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_identities_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_identities_Results) Infos() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Admin_identities_Results) HasInfos() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_identities_Results) SetInfos(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInfos sets the infos field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Admin_identities_Results) NewInfos(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Admin_identities_Results_List is a list of Admin_identities_Results.
type Admin_identities_Results_List = capnp.StructList[Admin_identities_Results]

// NewAdmin_identities_Results creates a new list of Admin_identities_Results.
func NewAdmin_identities_Results_List(s *capnp.Segment, sz int32) (Admin_identities_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Admin_identities_Results](l), err
}

// Admin_identities_Results_Future is a wrapper for a Admin_identities_Results promised by a client call.
type Admin_identities_Results_Future struct{ *capnp.Future }

func (f Admin_identities_Results_Future) Struct() (Admin_identities_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_identities_Results(p.Struct()), err
}

type Admin_updateIdentity_Params capnp.Struct

// Admin_updateIdentity_Params_TypeID is the unique identifier for the type Admin_updateIdentity_Params.
const Admin_updateIdentity_Params_TypeID = 0xdc8472f9b668ba83

func NewAdmin_updateIdentity_Params(s *capnp.Segment) (Admin_updateIdentity_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_updateIdentity_Params(st), err
}

func NewRootAdmin_updateIdentity_Params(s *capnp.Segment) (Admin_updateIdentity_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_updateIdentity_Params(st), err
}

func ReadRootAdmin_updateIdentity_Params(msg *capnp.Message) (Admin_updateIdentity_Params, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Params(root.Struct()), err
}

func (s Admin_updateIdentity_Params) String() string {
	str, _ := text.Marshal(0xdc8472f9b668ba83, capnp.Struct(s))
	return str
}

func (s Admin_updateIdentity_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_updateIdentity_Params) DecodeFromPtr(p capnp.Ptr) Admin_updateIdentity_Params {
	return Admin_updateIdentity_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_updateIdentity_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_updateIdentity_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_updateIdentity_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_updateIdentity_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Admin_updateIdentity_Params) OldId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Admin_updateIdentity_Params) HasOldId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Admin_updateIdentity_Params) OldIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_updateIdentity_Params) SetOldId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Admin_updateIdentity_Params) NewInfo() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.IdInformation(p.Struct()), err
}

func (s Admin_updateIdentity_Params) HasNewInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Admin_updateIdentity_Params) SetNewInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewNewInfo sets the newInfo field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_updateIdentity_Params) NewNewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Admin_updateIdentity_Params_List is a list of Admin_updateIdentity_Params.
type Admin_updateIdentity_Params_List = capnp.StructList[Admin_updateIdentity_Params]

// NewAdmin_updateIdentity_Params creates a new list of Admin_updateIdentity_Params.
func NewAdmin_updateIdentity_Params_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Admin_updateIdentity_Params](l), err
}

// Admin_updateIdentity_Params_Future is a wrapper for a Admin_updateIdentity_Params promised by a client call.
type Admin_updateIdentity_Params_Future struct{ *capnp.Future }

func (f Admin_updateIdentity_Params_Future) Struct() (Admin_updateIdentity_Params, error) {
	p, err := f.Future.Ptr()
	return Admin_updateIdentity_Params(p.Struct()), err
}
func (p Admin_updateIdentity_Params_Future) NewInfo() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(1, nil)}
}

type Admin_updateIdentity_Results capnp.Struct

// Admin_updateIdentity_Results_TypeID is the unique identifier for the type Admin_updateIdentity_Results.
const Admin_updateIdentity_Results_TypeID = 0xb15e79db08e2ab2c

func NewAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results(st), err
}

func NewRootAdmin_updateIdentity_Results(s *capnp.Segment) (Admin_updateIdentity_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_updateIdentity_Results(st), err
}

func ReadRootAdmin_updateIdentity_Results(msg *capnp.Message) (Admin_updateIdentity_Results, error) {
	root, err := msg.Root()
	return Admin_updateIdentity_Results(root.Struct()), err
}

func (s Admin_updateIdentity_Results) String() string {
	str, _ := text.Marshal(0xb15e79db08e2ab2c, capnp.Struct(s))
	return str
}

func (s Admin_updateIdentity_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Admin_updateIdentity_Results) DecodeFromPtr(p capnp.Ptr) Admin_updateIdentity_Results {
	return Admin_updateIdentity_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Admin_updateIdentity_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Admin_updateIdentity_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Admin_updateIdentity_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Admin_updateIdentity_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Admin_updateIdentity_Results_List is a list of Admin_updateIdentity_Results.
type Admin_updateIdentity_Results_List = capnp.StructList[Admin_updateIdentity_Results]

// NewAdmin_updateIdentity_Results creates a new list of Admin_updateIdentity_Results.
func NewAdmin_updateIdentity_Results_List(s *capnp.Segment, sz int32) (Admin_updateIdentity_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Admin_updateIdentity_Results](l), err
}

// Admin_updateIdentity_Results_Future is a wrapper for a Admin_updateIdentity_Results promised by a client call.
type Admin_updateIdentity_Results_Future struct{ *capnp.Future }

func (f Admin_updateIdentity_Results_Future) Struct() (Admin_updateIdentity_Results, error) {
	p, err := f.Future.Ptr()
	return Admin_updateIdentity_Results(p.Struct()), err
}

type SimpleFactory capnp.Client

// SimpleFactory_TypeID is the unique identifier for the type SimpleFactory.
const SimpleFactory_TypeID = 0xaba5829222c213cb

func (c SimpleFactory) Create(ctx context.Context, params func(SimpleFactory_create_Params) error) (SimpleFactory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaba5829222c213cb,
			MethodID:      0,
			InterfaceName: "service.capnp:SimpleFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SimpleFactory_create_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SimpleFactory_create_Results_Future{Future: ans.Future()}, release
}
func (c SimpleFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SimpleFactory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SimpleFactory) AddRef() SimpleFactory {
	return SimpleFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SimpleFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SimpleFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SimpleFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SimpleFactory) DecodeFromPtr(p capnp.Ptr) SimpleFactory {
	return SimpleFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SimpleFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SimpleFactory) IsSame(other SimpleFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SimpleFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SimpleFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A SimpleFactory_Server is a SimpleFactory with a local implementation.
type SimpleFactory_Server interface {
	Create(context.Context, SimpleFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// SimpleFactory_NewServer creates a new Server from an implementation of SimpleFactory_Server.
func SimpleFactory_NewServer(s SimpleFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SimpleFactory_Methods(nil, s), s, c)
}

// SimpleFactory_ServerToClient creates a new Client from an implementation of SimpleFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func SimpleFactory_ServerToClient(s SimpleFactory_Server) SimpleFactory {
	return SimpleFactory(capnp.NewClient(SimpleFactory_NewServer(s)))
}

// SimpleFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SimpleFactory_Methods(methods []server.Method, s SimpleFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaba5829222c213cb,
			MethodID:      0,
			InterfaceName: "service.capnp:SimpleFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, SimpleFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// SimpleFactory_create holds the state for a server call to SimpleFactory.create.
// See server.Call for documentation.
type SimpleFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SimpleFactory_create) Args() SimpleFactory_create_Params {
	return SimpleFactory_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SimpleFactory_create) AllocResults() (SimpleFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results(r), err
}

// SimpleFactory_List is a list of SimpleFactory.
type SimpleFactory_List = capnp.CapList[SimpleFactory]

// NewSimpleFactory creates a new list of SimpleFactory.
func NewSimpleFactory_List(s *capnp.Segment, sz int32) (SimpleFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SimpleFactory](l), err
}

type SimpleFactory_create_Params capnp.Struct

// SimpleFactory_create_Params_TypeID is the unique identifier for the type SimpleFactory_create_Params.
const SimpleFactory_create_Params_TypeID = 0xa8296fdc60dcb6dd

func NewSimpleFactory_create_Params(s *capnp.Segment) (SimpleFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SimpleFactory_create_Params(st), err
}

func NewRootSimpleFactory_create_Params(s *capnp.Segment) (SimpleFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SimpleFactory_create_Params(st), err
}

func ReadRootSimpleFactory_create_Params(msg *capnp.Message) (SimpleFactory_create_Params, error) {
	root, err := msg.Root()
	return SimpleFactory_create_Params(root.Struct()), err
}

func (s SimpleFactory_create_Params) String() string {
	str, _ := text.Marshal(0xa8296fdc60dcb6dd, capnp.Struct(s))
	return str
}

func (s SimpleFactory_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleFactory_create_Params) DecodeFromPtr(p capnp.Ptr) SimpleFactory_create_Params {
	return SimpleFactory_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleFactory_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleFactory_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleFactory_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleFactory_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SimpleFactory_create_Params_List is a list of SimpleFactory_create_Params.
type SimpleFactory_create_Params_List = capnp.StructList[SimpleFactory_create_Params]

// NewSimpleFactory_create_Params creates a new list of SimpleFactory_create_Params.
func NewSimpleFactory_create_Params_List(s *capnp.Segment, sz int32) (SimpleFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SimpleFactory_create_Params](l), err
}

// SimpleFactory_create_Params_Future is a wrapper for a SimpleFactory_create_Params promised by a client call.
type SimpleFactory_create_Params_Future struct{ *capnp.Future }

func (f SimpleFactory_create_Params_Future) Struct() (SimpleFactory_create_Params, error) {
	p, err := f.Future.Ptr()
	return SimpleFactory_create_Params(p.Struct()), err
}

type SimpleFactory_create_Results capnp.Struct

// SimpleFactory_create_Results_TypeID is the unique identifier for the type SimpleFactory_create_Results.
const SimpleFactory_create_Results_TypeID = 0x89a33828e0de1eaa

func NewSimpleFactory_create_Results(s *capnp.Segment) (SimpleFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results(st), err
}

func NewRootSimpleFactory_create_Results(s *capnp.Segment) (SimpleFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SimpleFactory_create_Results(st), err
}

func ReadRootSimpleFactory_create_Results(msg *capnp.Message) (SimpleFactory_create_Results, error) {
	root, err := msg.Root()
	return SimpleFactory_create_Results(root.Struct()), err
}

func (s SimpleFactory_create_Results) String() string {
	str, _ := text.Marshal(0x89a33828e0de1eaa, capnp.Struct(s))
	return str
}

func (s SimpleFactory_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimpleFactory_create_Results) DecodeFromPtr(p capnp.Ptr) SimpleFactory_create_Results {
	return SimpleFactory_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimpleFactory_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimpleFactory_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimpleFactory_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimpleFactory_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimpleFactory_create_Results) Caps() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Identifiable_List(p.List()), err
}

func (s SimpleFactory_create_Results) HasCaps() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SimpleFactory_create_Results) SetCaps(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCaps sets the caps field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s SimpleFactory_create_Results) NewCaps(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SimpleFactory_create_Results_List is a list of SimpleFactory_create_Results.
type SimpleFactory_create_Results_List = capnp.StructList[SimpleFactory_create_Results]

// NewSimpleFactory_create_Results creates a new list of SimpleFactory_create_Results.
func NewSimpleFactory_create_Results_List(s *capnp.Segment, sz int32) (SimpleFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SimpleFactory_create_Results](l), err
}

// SimpleFactory_create_Results_Future is a wrapper for a SimpleFactory_create_Results promised by a client call.
type SimpleFactory_create_Results_Future struct{ *capnp.Future }

func (f SimpleFactory_create_Results_Future) Struct() (SimpleFactory_create_Results, error) {
	p, err := f.Future.Ptr()
	return SimpleFactory_create_Results(p.Struct()), err
}

type Factory capnp.Client

// Factory_TypeID is the unique identifier for the type Factory.
const Factory_TypeID = 0x8ab0ecb99c269c7f

func (c Factory) Create(ctx context.Context, params func(Factory_CreateParams) error) (Factory_AccessInfo_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_CreateParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Factory_AccessInfo_Future{Future: ans.Future()}, release
}
func (c Factory) ServiceInterfaceNames(ctx context.Context, params func(Factory_serviceInterfaceNames_Params) error) (Factory_serviceInterfaceNames_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      1,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "serviceInterfaceNames",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_serviceInterfaceNames_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Factory_serviceInterfaceNames_Results_Future{Future: ans.Future()}, release
}
func (c Factory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Factory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Factory) AddRef() Factory {
	return Factory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Factory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Factory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Factory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Factory) DecodeFromPtr(p capnp.Ptr) Factory {
	return Factory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Factory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Factory) IsSame(other Factory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Factory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Factory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Factory_Server is a Factory with a local implementation.
type Factory_Server interface {
	Create(context.Context, Factory_create) error

	ServiceInterfaceNames(context.Context, Factory_serviceInterfaceNames) error

	Info(context.Context, common.Identifiable_info) error
}

// Factory_NewServer creates a new Server from an implementation of Factory_Server.
func Factory_NewServer(s Factory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Factory_Methods(nil, s), s, c)
}

// Factory_ServerToClient creates a new Client from an implementation of Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func Factory_ServerToClient(s Factory_Server) Factory {
	return Factory(capnp.NewClient(Factory_NewServer(s)))
}

// Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Factory_Methods(methods []server.Method, s Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      0,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, Factory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8ab0ecb99c269c7f,
			MethodID:      1,
			InterfaceName: "service.capnp:Factory",
			MethodName:    "serviceInterfaceNames",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ServiceInterfaceNames(ctx, Factory_serviceInterfaceNames{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Factory_create holds the state for a server call to Factory.create.
// See server.Call for documentation.
type Factory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_create) Args() Factory_CreateParams {
	return Factory_CreateParams(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Factory_create) AllocResults() (Factory_AccessInfo, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo(r), err
}

// Factory_serviceInterfaceNames holds the state for a server call to Factory.serviceInterfaceNames.
// See server.Call for documentation.
type Factory_serviceInterfaceNames struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_serviceInterfaceNames) Args() Factory_serviceInterfaceNames_Params {
	return Factory_serviceInterfaceNames_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Factory_serviceInterfaceNames) AllocResults() (Factory_serviceInterfaceNames_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results(r), err
}

// Factory_List is a list of Factory.
type Factory_List = capnp.CapList[Factory]

// NewFactory creates a new list of Factory.
func NewFactory_List(s *capnp.Segment, sz int32) (Factory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Factory](l), err
}

type Factory_CreateParams capnp.Struct

// Factory_CreateParams_TypeID is the unique identifier for the type Factory_CreateParams.
const Factory_CreateParams_TypeID = 0xc2b88517ccaa9197

func NewFactory_CreateParams(s *capnp.Segment) (Factory_CreateParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Factory_CreateParams(st), err
}

func NewRootFactory_CreateParams(s *capnp.Segment) (Factory_CreateParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Factory_CreateParams(st), err
}

func ReadRootFactory_CreateParams(msg *capnp.Message) (Factory_CreateParams, error) {
	root, err := msg.Root()
	return Factory_CreateParams(root.Struct()), err
}

func (s Factory_CreateParams) String() string {
	str, _ := text.Marshal(0xc2b88517ccaa9197, capnp.Struct(s))
	return str
}

func (s Factory_CreateParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_CreateParams) DecodeFromPtr(p capnp.Ptr) Factory_CreateParams {
	return Factory_CreateParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_CreateParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_CreateParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_CreateParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_CreateParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Factory_CreateParams) TimeoutSeconds() uint64 {
	return capnp.Struct(s).Uint64(0) ^ 3600
}

func (s Factory_CreateParams) SetTimeoutSeconds(v uint64) {
	capnp.Struct(s).SetUint64(0, v^3600)
}

func (s Factory_CreateParams) InterfaceNameToRegistrySR() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Pair_List(p.List()), err
}

func (s Factory_CreateParams) HasInterfaceNameToRegistrySR() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Factory_CreateParams) SetInterfaceNameToRegistrySR(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInterfaceNameToRegistrySR sets the interfaceNameToRegistrySR field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Factory_CreateParams) NewInterfaceNameToRegistrySR(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Factory_CreateParams) MsgPayload() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Factory_CreateParams) HasMsgPayload() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Factory_CreateParams) SetMsgPayload(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Factory_CreateParams_List is a list of Factory_CreateParams.
type Factory_CreateParams_List = capnp.StructList[Factory_CreateParams]

// NewFactory_CreateParams creates a new list of Factory_CreateParams.
func NewFactory_CreateParams_List(s *capnp.Segment, sz int32) (Factory_CreateParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Factory_CreateParams](l), err
}

// Factory_CreateParams_Future is a wrapper for a Factory_CreateParams promised by a client call.
type Factory_CreateParams_Future struct{ *capnp.Future }

func (f Factory_CreateParams_Future) Struct() (Factory_CreateParams, error) {
	p, err := f.Future.Ptr()
	return Factory_CreateParams(p.Struct()), err
}
func (p Factory_CreateParams_Future) MsgPayload() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Factory_AccessInfo capnp.Struct

// Factory_AccessInfo_TypeID is the unique identifier for the type Factory_AccessInfo.
const Factory_AccessInfo_TypeID = 0xb9816a53df7cb62e

func NewFactory_AccessInfo(s *capnp.Segment) (Factory_AccessInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo(st), err
}

func NewRootFactory_AccessInfo(s *capnp.Segment) (Factory_AccessInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Factory_AccessInfo(st), err
}

func ReadRootFactory_AccessInfo(msg *capnp.Message) (Factory_AccessInfo, error) {
	root, err := msg.Root()
	return Factory_AccessInfo(root.Struct()), err
}

func (s Factory_AccessInfo) String() string {
	str, _ := text.Marshal(0xb9816a53df7cb62e, capnp.Struct(s))
	return str
}

func (s Factory_AccessInfo) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_AccessInfo) DecodeFromPtr(p capnp.Ptr) Factory_AccessInfo {
	return Factory_AccessInfo(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_AccessInfo) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_AccessInfo) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_AccessInfo) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_AccessInfo) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Factory_AccessInfo) AdminCap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Factory_AccessInfo) HasAdminCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Factory_AccessInfo) SetAdminCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s Factory_AccessInfo) ServiceCaps() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Identifiable_List(p.List()), err
}

func (s Factory_AccessInfo) HasServiceCaps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Factory_AccessInfo) SetServiceCaps(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewServiceCaps sets the serviceCaps field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s Factory_AccessInfo) NewServiceCaps(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Factory_AccessInfo) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Factory_AccessInfo) HasError() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Factory_AccessInfo) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Factory_AccessInfo) SetError(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Factory_AccessInfo_List is a list of Factory_AccessInfo.
type Factory_AccessInfo_List = capnp.StructList[Factory_AccessInfo]

// NewFactory_AccessInfo creates a new list of Factory_AccessInfo.
func NewFactory_AccessInfo_List(s *capnp.Segment, sz int32) (Factory_AccessInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Factory_AccessInfo](l), err
}

// Factory_AccessInfo_Future is a wrapper for a Factory_AccessInfo promised by a client call.
type Factory_AccessInfo_Future struct{ *capnp.Future }

func (f Factory_AccessInfo_Future) Struct() (Factory_AccessInfo, error) {
	p, err := f.Future.Ptr()
	return Factory_AccessInfo(p.Struct()), err
}
func (p Factory_AccessInfo_Future) AdminCap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Factory_serviceInterfaceNames_Params capnp.Struct

// Factory_serviceInterfaceNames_Params_TypeID is the unique identifier for the type Factory_serviceInterfaceNames_Params.
const Factory_serviceInterfaceNames_Params_TypeID = 0xd4d567352ab3882a

func NewFactory_serviceInterfaceNames_Params(s *capnp.Segment) (Factory_serviceInterfaceNames_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_serviceInterfaceNames_Params(st), err
}

func NewRootFactory_serviceInterfaceNames_Params(s *capnp.Segment) (Factory_serviceInterfaceNames_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Factory_serviceInterfaceNames_Params(st), err
}

func ReadRootFactory_serviceInterfaceNames_Params(msg *capnp.Message) (Factory_serviceInterfaceNames_Params, error) {
	root, err := msg.Root()
	return Factory_serviceInterfaceNames_Params(root.Struct()), err
}

func (s Factory_serviceInterfaceNames_Params) String() string {
	str, _ := text.Marshal(0xd4d567352ab3882a, capnp.Struct(s))
	return str
}

func (s Factory_serviceInterfaceNames_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_serviceInterfaceNames_Params) DecodeFromPtr(p capnp.Ptr) Factory_serviceInterfaceNames_Params {
	return Factory_serviceInterfaceNames_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_serviceInterfaceNames_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_serviceInterfaceNames_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_serviceInterfaceNames_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_serviceInterfaceNames_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Factory_serviceInterfaceNames_Params_List is a list of Factory_serviceInterfaceNames_Params.
type Factory_serviceInterfaceNames_Params_List = capnp.StructList[Factory_serviceInterfaceNames_Params]

// NewFactory_serviceInterfaceNames_Params creates a new list of Factory_serviceInterfaceNames_Params.
func NewFactory_serviceInterfaceNames_Params_List(s *capnp.Segment, sz int32) (Factory_serviceInterfaceNames_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Factory_serviceInterfaceNames_Params](l), err
}

// Factory_serviceInterfaceNames_Params_Future is a wrapper for a Factory_serviceInterfaceNames_Params promised by a client call.
type Factory_serviceInterfaceNames_Params_Future struct{ *capnp.Future }

func (f Factory_serviceInterfaceNames_Params_Future) Struct() (Factory_serviceInterfaceNames_Params, error) {
	p, err := f.Future.Ptr()
	return Factory_serviceInterfaceNames_Params(p.Struct()), err
}

type Factory_serviceInterfaceNames_Results capnp.Struct

// Factory_serviceInterfaceNames_Results_TypeID is the unique identifier for the type Factory_serviceInterfaceNames_Results.
const Factory_serviceInterfaceNames_Results_TypeID = 0xa962c127b5dccf05

func NewFactory_serviceInterfaceNames_Results(s *capnp.Segment) (Factory_serviceInterfaceNames_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results(st), err
}

func NewRootFactory_serviceInterfaceNames_Results(s *capnp.Segment) (Factory_serviceInterfaceNames_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_serviceInterfaceNames_Results(st), err
}

func ReadRootFactory_serviceInterfaceNames_Results(msg *capnp.Message) (Factory_serviceInterfaceNames_Results, error) {
	root, err := msg.Root()
	return Factory_serviceInterfaceNames_Results(root.Struct()), err
}

func (s Factory_serviceInterfaceNames_Results) String() string {
	str, _ := text.Marshal(0xa962c127b5dccf05, capnp.Struct(s))
	return str
}

func (s Factory_serviceInterfaceNames_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Factory_serviceInterfaceNames_Results) DecodeFromPtr(p capnp.Ptr) Factory_serviceInterfaceNames_Results {
	return Factory_serviceInterfaceNames_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Factory_serviceInterfaceNames_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Factory_serviceInterfaceNames_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Factory_serviceInterfaceNames_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Factory_serviceInterfaceNames_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Factory_serviceInterfaceNames_Results) Names() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s Factory_serviceInterfaceNames_Results) HasNames() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Factory_serviceInterfaceNames_Results) SetNames(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewNames sets the names field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Factory_serviceInterfaceNames_Results) NewNames(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Factory_serviceInterfaceNames_Results_List is a list of Factory_serviceInterfaceNames_Results.
type Factory_serviceInterfaceNames_Results_List = capnp.StructList[Factory_serviceInterfaceNames_Results]

// NewFactory_serviceInterfaceNames_Results creates a new list of Factory_serviceInterfaceNames_Results.
func NewFactory_serviceInterfaceNames_Results_List(s *capnp.Segment, sz int32) (Factory_serviceInterfaceNames_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Factory_serviceInterfaceNames_Results](l), err
}

// Factory_serviceInterfaceNames_Results_Future is a wrapper for a Factory_serviceInterfaceNames_Results promised by a client call.
type Factory_serviceInterfaceNames_Results_Future struct{ *capnp.Future }

func (f Factory_serviceInterfaceNames_Results_Future) Struct() (Factory_serviceInterfaceNames_Results, error) {
	p, err := f.Future.Ptr()
	return Factory_serviceInterfaceNames_Results(p.Struct()), err
}

const schema_f52adf98d2bbc6c0 = "x\xda\x94V[l\x14e\x14>g\xee%@\xf7g" +
	"*M\x11\xdc@\x8a\xa5\x1blh\xa1Q\x1bk\xbb\xe5" +
	"R\x8bb\xf6\xdf\x96(5\x18\xa6\xbbS\x18\xd2\xddY" +
	"ff\x85\x12\xb1AE\x04C\">\x08\x12\x9e0&" +
	"\x0a\x89(\x08\x01}\x100\xd1\x87z\x89\\|\x80\"" +
	"\x84\x17cbb\xa2\xc1\xe8\x03\x8c\xf9g\xf6\xdfN/" +
	"T|\x9ds\xfes\xce\xf7\x9d\xef\x9c3K\xe2b\xbb" +
	"\xd48\xe3\xb9i \xd0m\xb2\xe2\x1f}\xe8\xe7\x9b\x8b" +
	"\x1e{\x7f\x0f\x90\xb9\x08 \xa3\x0a\xb0\x94\xc8\xbd\x08\xa8" +
	"\xcf\x93\xdb\x00\xfd\xa1\xc3\x0f\x1f>\xfb\xdb'{\x81\xcc" +
	"\x14\xfds_\x7fq\xf1\xe0\x8d\xc4m\x00\x88\xa1\xbeF" +
	">\xa1\xaf\x95\xeb\x00\xf4-\xf2n\xbdF\xa9\xd6\xe7+" +
	"\x95\xfe\x9d\x18\xb1\xf66\x7fy\x08h\x15\"\x80\xc4\"" +
	">\xa04\x05\x11\x15\x16\xf1\xfa\xe9\x91\x0d#v\xfd\x87" +
	"a\xca\xc0\xde\xaa\xa4\x11$_\xfea\xe4T\xdd\xf9\xbe" +
	"\x8f\x80\xcc\x0e\x8b\x89\xe1\xd2z\xe5\x08{\xfax\xf0t" +
	"X\xbf\xb0\xe0\x9dW?86\xae\x18\xd4-\xe5\x96^" +
	"TTV\x8a\xd2\xa9\xbf\xa7T\x03\xf8\x8b\x8f\xdd\xd2\xae" +
	"\x0d\xbe\xf8)\x90*\x9eg\x8f\xd2\xcb\xf24\x9c~\xf9" +
	"F\xf7\xe6\x9dgY\x9eQ\x80\xb2\xc8\xf2\x15\x95i\xa8" +
	"\xef\x0aB\xedT\x8e\x03\xfa\x07\xf6\x1f\xfd\xb6z\xd7\x99" +
	"\x0b@gc\xd4[`\xde\x8d\xea\x1c\xd4\x93*\xf3n" +
	"U\x99\xf7\xee\x03\xc5'\x959\x89\xef#I\x93\xda4" +
	"\x964\xf1\xe6\xc9D\xf3\xc6+\x97CpR\x80M;" +
	"\xc4,\xcb\xfe\xf8\xe5\xea\x83\x7f\xd6\xfd\x14yS\xa3%" +
	"\x98\xe5\xfc\xd3\xdf\xccY]s'jA\xad\x85Y^" +
	"\xfb|\xd3\xe9\x7f\x9c\xd7GB\x8b,0\xd3\xafj\x9a" +
	"Qu[\xdd\x0a\xe8o{\xe1\xf7G\xbf\xbb\xf4\xd5\xf5" +
	"\xc8S\xaa\x09\xec\xe9\xba\x03=\x1f\xbf\xbd`\xee\xcd\x88" +
	"\xa5Ykb\x96\x83'\xafm\xdb\xd5\xdaq\xbb\x144" +
	"\x10\xc3<\x96\x0f\xf5\x85\x1a\xe3\xbf\xeb\xaf}5o\xfd" +
	"}\xfe\xee\x04\xfe\xd7jG\xf4\xf5\x1a\xf3_\xa7u\xa2" +
	"\xdeX\xc1\x1a\xf0\xee\xf3\xf5\xfb\xfa\xb6t\xf8\x91D\xf3" +
	"+\x9a\x10v\xf8\xae\xe9\xbcde\xcc\x06)c\x14\xf2" +
	"\x85\x96n+W\x180W\x19\x19\xcfv\x06\x1b2\x8e" +
	"ixfm\xdat\x8b\x03\xa2\xe7RI\x94\x00$\x04" +
	" 3\x12\x00T\x13\x91\xd6\x0aX\x991\x0a.\xce\x04" +
	"L\x89\x88\xc4\xbf\xf2\xd4\xe1u\xc3?\x1e?\x01\x80\xec" +
	"c9\x03\x86\x19V\x19\xf1 8\xd50\xd2QR\xb1" +
	"9\xa2\x85\x8a^\x7fy\x90:e@\xa5c\xe4\\?" +
	"\x99\xc9\x98\xae\xdb\x95\x07\xb1\xdf\xa6\x9a(\x03\x94\xdf\"" +
	"\x7fG\x1a[\x00\x92\x8b1\xf9\x04\x925*b\xb9\xcf" +
	"\xc8\xd5L\x92'\x00\x92+0\xd9\x83\xc4T\xdbBx" +
	"\x04\xe3T\x12\"zb\xb32\xe9\xc7\xf62\x98.\xcc" +
	"{\xa6\xd3od\xcc\xf8\xb3F\xcet\xffO\x0c*!" +
	"FH\x82\xa4\x84\x04;\x86R\xc6\xe0\x80md\xcbt" +
	"\x89!]\xc9l\xce\xca7\xb8\xa6\xd7c\xe5L\xbb\xe8" +
	"\xd5\xa6\xe2\x06c$\xda\x8b\x8eR/\xaa\x04\x1cr\xcd" +
	"\x8c\x9d\xcf\xbaX\x01\x02VD\xd8\x9f\xaa\xbf)\x16\x11" +
	"\xdd\xb2\xaf\xcc;\x15zq\xcc\x1cr\x808\x10\x85:" +
	"0V\x14M\xa3\xa2\x88\xe7\x99\x17W\xc5t\x10\xc6h" +
	"A\x18_\x8dj;\x83)D*\x05\xad\xe5{\x09\xf9" +
	"N$\xa4\x05\x04\"\xf3\x96M$q<\xce\x90\xb6b" +
	"!kxfW\xd6\xcc{\x967X\xd6\xf1x\x8e9" +
	"P.\xb2~\x1b\x80\x153\xbd\x8cl\xe5j\x00\xbaB" +
	"D\x9a\x12\x90 \x06\xeb\x94\xac\xe9\x03\xa0\xcf\x88H7" +
	"\x09H\x04\xa1\x0a\x05\x00b2\x0e6\x88H\x07\x04\xf4" +
	"\x0dV\xc5r\xa3\x00\x008K\x12\x01q\xd6(\x09\xcb" +
	"A\x9djn\xe2\xa6\xe3\xd8N\xc0\xdc\xf4\x08s\xe3J" +
	"\xe6c\xe2\x18b\xce\x8d\xd4\x8cHVn\x1f\xad\xb9\\" +
	"\xf2E\x00\xda#\"=\xc3J\xc6\xb0\xe4S\xbd\x00\xf4" +
	"3\x11\xe99\x01}/\x94Y7\xb4E\x85$\xc6f" +
	"\x02\xf8VI\x01B \x81\x1e;mn\xb4\\\xcf\x19" +
	"\xec\xc64\x87\x11\xf3\x97vV/\xec|\xe3\xf2Y`" +
	"Z\xe7#\x10\xf9H\xb0\x8e\x8d>\"S\x0a\"\x8d\x95" +
	"\xe4\xc1%\x92s7\x06\xa3\x00\xa2\x91\xc5Y\xd1=\xcf" +
	"H\x9c\xc8Di@<\xbb\x10\xf6\xd7s#j\xb8/" +
	"%\x97\xd8\x9b<\xf0&\xd3p\xbc>\xd3\xf0jSF" +
	"\xb8\x8a\xfek@\xd3ma\x19\xf7%\xc9\xd2\xe8Q\xad" +
	",\xb5z&\xa0Z\x11\xe9\x92\x88\xd4\x1ea#\xbeH" +
	"D\xbaL\xc0\xb8=\x90\xed\xcara\x0c\xe5\xcd\xadL" +
	"\xb1\x18\xf3/]\x15\xef\x0e\xbf2|\x99\x09(\x16!" +
	"J\x9d@T\x90\xd5\x05\xee09\xde\xb4\x19\x1f\x8bc" +
	"\x0c`+D`\xb1MP\x02|\xafM`\xe5\xfbm" +
	"wT \xd12'\xb9\x0f\xc9\xac\x9a\xb3\xf2L\xcaU" +
	"\xc1.\xe0'\x19\xf9\xb1$\xfb\xd3 \x90=l\xc1\xf3" +
	"\x1f\x1c\xe4\xd7\x99\xec\xe8\x05\x81\x14U\x14\xcaW\x17\xf9" +
	"\x7f\x00\xb1\x12 \x90\xf5*\x8a\xe5s\x88\xfc\xcc\x12\xca" +
	"\xdeu\xa98z\xce\x91\xff\xb4\x90\xd6\xed \x90f\xd5" +
	"\xe7\xd4\x00z\xc1%\x08;\x0eb\xd1k\xc7J\xc6k" +
	";\xfa\x9c\x16\x10M\xb7\x1d}\xdemh\x0b\xfb=\xc5" +
	"\xe2\xba\x17\xbb\xa5}\xffo\x00\x00\x00\xff\xff\xee\xbf\x07" +
	"S"

func init() {
	schemas.Register(schema_f52adf98d2bbc6c0,
		0x89a33828e0de1eaa,
		0x8ab0ecb99c269c7f,
		0x9abf358a691110fd,
		0xa8296fdc60dcb6dd,
		0xa962c127b5dccf05,
		0xaba5829222c213cb,
		0xb15e79db08e2ab2c,
		0xb9816a53df7cb62e,
		0xc2b88517ccaa9197,
		0xce2a1a063e759787,
		0xd4d567352ab3882a,
		0xd627f31bdae7f234,
		0xd6fd194a1ac74bc1,
		0xdc8472f9b668ba83,
		0xddc3d3cd37ef5b78,
		0xe01c2290ae549759,
		0xf5423d8578dbb398,
		0xfec1f88b198df649,
		0xff4271628d295896)
}
