// Code generated by capnpc-go. DO NOT EDIT.

package vr

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/geo"
	registry "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/registry"
	math "math"
	strconv "strconv"
)

type RT struct{ capnp.Struct }

// RT_TypeID is the unique identifier for the type RT.
const RT_TypeID = 0x8742bb72046b23eb

func NewRT(s *capnp.Segment) (RT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT{st}, err
}

func NewRootRT(s *capnp.Segment) (RT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT{st}, err
}

func ReadRootRT(msg *capnp.Message) (RT, error) {
	root, err := msg.Root()
	return RT{root.Struct()}, err
}

func (s RT) String() string {
	str, _ := text.Marshal(0x8742bb72046b23eb, s.Struct)
	return str
}

// RT_List is a list of RT.
type RT_List struct{ capnp.List }

// NewRT creates a new list of RT.
func NewRT_List(s *capnp.Segment, sz int32) (RT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RT_List{l}, err
}

func (s RT_List) At(i int) RT { return RT{s.List.Struct(i)} }

func (s RT_List) Set(i int, v RT) error { return s.List.SetStruct(i, v.Struct) }

func (s RT_List) String() string {
	str, _ := text.MarshalList(0x8742bb72046b23eb, s.List)
	return str
}

// RT_Future is a wrapper for a RT promised by a client call.
type RT_Future struct{ *capnp.Future }

func (p RT_Future) Struct() (RT, error) {
	s, err := p.Future.Struct()
	return RT{s}, err
}

type RT_RegionParams struct{ capnp.Struct }

// RT_RegionParams_TypeID is the unique identifier for the type RT_RegionParams.
const RT_RegionParams_TypeID = 0xb35907b42eb1c16f

func NewRT_RegionParams(s *capnp.Segment) (RT_RegionParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_RegionParams{st}, err
}

func NewRootRT_RegionParams(s *capnp.Segment) (RT_RegionParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_RegionParams{st}, err
}

func ReadRootRT_RegionParams(msg *capnp.Message) (RT_RegionParams, error) {
	root, err := msg.Root()
	return RT_RegionParams{root.Struct()}, err
}

func (s RT_RegionParams) String() string {
	str, _ := text.Marshal(0xb35907b42eb1c16f, s.Struct)
	return str
}

func (s RT_RegionParams) Bounds() (geo.RectBounds, error) {
	p, err := s.Struct.Ptr(0)
	return geo.RectBounds{Struct: p.Struct()}, err
}

func (s RT_RegionParams) HasBounds() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_RegionParams) SetBounds(v geo.RectBounds) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBounds sets the bounds field to a newly
// allocated geo.RectBounds struct, preferring placement in s's segment.
func (s RT_RegionParams) NewBounds() (geo.RectBounds, error) {
	ss, err := geo.NewRectBounds(s.Struct.Segment())
	if err != nil {
		return geo.RectBounds{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RT_RegionParams_List is a list of RT_RegionParams.
type RT_RegionParams_List struct{ capnp.List }

// NewRT_RegionParams creates a new list of RT_RegionParams.
func NewRT_RegionParams_List(s *capnp.Segment, sz int32) (RT_RegionParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_RegionParams_List{l}, err
}

func (s RT_RegionParams_List) At(i int) RT_RegionParams { return RT_RegionParams{s.List.Struct(i)} }

func (s RT_RegionParams_List) Set(i int, v RT_RegionParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_RegionParams_List) String() string {
	str, _ := text.MarshalList(0xb35907b42eb1c16f, s.List)
	return str
}

// RT_RegionParams_Future is a wrapper for a RT_RegionParams promised by a client call.
type RT_RegionParams_Future struct{ *capnp.Future }

func (p RT_RegionParams_Future) Struct() (RT_RegionParams, error) {
	s, err := p.Future.Struct()
	return RT_RegionParams{s}, err
}

func (p RT_RegionParams_Future) Bounds() geo.RectBounds_Future {
	return geo.RectBounds_Future{Future: p.Future.Field(0, nil)}
}

type RT_Region struct{ Client *capnp.Client }

// RT_Region_TypeID is the unique identifier for the type RT_Region.
const RT_Region_TypeID = 0x9edd4120395fbbcd

func (c RT_Region) Params(ctx context.Context, params func(RT_Region_params_Params) error) (RT_RegionParams_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "params",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_Region_params_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_RegionParams_Future{Future: ans.Future()}, release
}
func (c RT_Region) StartCachingData(ctx context.Context, params func(RT_Region_startCachingData_Params) error) (RT_Region_startCachingData_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "startCachingData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_Region_startCachingData_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_Region_startCachingData_Results_Future{Future: ans.Future()}, release
}

func (c RT_Region) AddRef() RT_Region {
	return RT_Region{
		Client: c.Client.AddRef(),
	}
}

func (c RT_Region) Release() {
	c.Client.Release()
}

// A RT_Region_Server is a RT_Region with a local implementation.
type RT_Region_Server interface {
	Params(context.Context, RT_Region_params) error

	StartCachingData(context.Context, RT_Region_startCachingData) error
}

// RT_Region_NewServer creates a new Server from an implementation of RT_Region_Server.
func RT_Region_NewServer(s RT_Region_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_Region_Methods(nil, s), s, c, policy)
}

// RT_Region_ServerToClient creates a new Client from an implementation of RT_Region_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_Region_ServerToClient(s RT_Region_Server, policy *server.Policy) RT_Region {
	return RT_Region{Client: capnp.NewClient(RT_Region_NewServer(s, policy))}
}

// RT_Region_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_Region_Methods(methods []server.Method, s RT_Region_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "params",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Params(ctx, RT_Region_params{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "startCachingData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StartCachingData(ctx, RT_Region_startCachingData{call})
		},
	})

	return methods
}

// RT_Region_params holds the state for a server call to RT_Region.params.
// See server.Call for documentation.
type RT_Region_params struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_Region_params) Args() RT_Region_params_Params {
	return RT_Region_params_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_Region_params) AllocResults() (RT_RegionParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_RegionParams{Struct: r}, err
}

// RT_Region_startCachingData holds the state for a server call to RT_Region.startCachingData.
// See server.Call for documentation.
type RT_Region_startCachingData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_Region_startCachingData) Args() RT_Region_startCachingData_Params {
	return RT_Region_startCachingData_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_Region_startCachingData) AllocResults() (RT_Region_startCachingData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Region_startCachingData_Results{Struct: r}, err
}

type RT_Region_params_Params struct{ capnp.Struct }

// RT_Region_params_Params_TypeID is the unique identifier for the type RT_Region_params_Params.
const RT_Region_params_Params_TypeID = 0xa822d9c798717e18

func NewRT_Region_params_Params(s *capnp.Segment) (RT_Region_params_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_Region_params_Params{st}, err
}

func NewRootRT_Region_params_Params(s *capnp.Segment) (RT_Region_params_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_Region_params_Params{st}, err
}

func ReadRootRT_Region_params_Params(msg *capnp.Message) (RT_Region_params_Params, error) {
	root, err := msg.Root()
	return RT_Region_params_Params{root.Struct()}, err
}

func (s RT_Region_params_Params) String() string {
	str, _ := text.Marshal(0xa822d9c798717e18, s.Struct)
	return str
}

// RT_Region_params_Params_List is a list of RT_Region_params_Params.
type RT_Region_params_Params_List struct{ capnp.List }

// NewRT_Region_params_Params creates a new list of RT_Region_params_Params.
func NewRT_Region_params_Params_List(s *capnp.Segment, sz int32) (RT_Region_params_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RT_Region_params_Params_List{l}, err
}

func (s RT_Region_params_Params_List) At(i int) RT_Region_params_Params {
	return RT_Region_params_Params{s.List.Struct(i)}
}

func (s RT_Region_params_Params_List) Set(i int, v RT_Region_params_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_Region_params_Params_List) String() string {
	str, _ := text.MarshalList(0xa822d9c798717e18, s.List)
	return str
}

// RT_Region_params_Params_Future is a wrapper for a RT_Region_params_Params promised by a client call.
type RT_Region_params_Params_Future struct{ *capnp.Future }

func (p RT_Region_params_Params_Future) Struct() (RT_Region_params_Params, error) {
	s, err := p.Future.Struct()
	return RT_Region_params_Params{s}, err
}

type RT_Region_startCachingData_Params struct{ capnp.Struct }

// RT_Region_startCachingData_Params_TypeID is the unique identifier for the type RT_Region_startCachingData_Params.
const RT_Region_startCachingData_Params_TypeID = 0xbf919b23f1dbb184

func NewRT_Region_startCachingData_Params(s *capnp.Segment) (RT_Region_startCachingData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_Region_startCachingData_Params{st}, err
}

func NewRootRT_Region_startCachingData_Params(s *capnp.Segment) (RT_Region_startCachingData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_Region_startCachingData_Params{st}, err
}

func ReadRootRT_Region_startCachingData_Params(msg *capnp.Message) (RT_Region_startCachingData_Params, error) {
	root, err := msg.Root()
	return RT_Region_startCachingData_Params{root.Struct()}, err
}

func (s RT_Region_startCachingData_Params) String() string {
	str, _ := text.Marshal(0xbf919b23f1dbb184, s.Struct)
	return str
}

// RT_Region_startCachingData_Params_List is a list of RT_Region_startCachingData_Params.
type RT_Region_startCachingData_Params_List struct{ capnp.List }

// NewRT_Region_startCachingData_Params creates a new list of RT_Region_startCachingData_Params.
func NewRT_Region_startCachingData_Params_List(s *capnp.Segment, sz int32) (RT_Region_startCachingData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RT_Region_startCachingData_Params_List{l}, err
}

func (s RT_Region_startCachingData_Params_List) At(i int) RT_Region_startCachingData_Params {
	return RT_Region_startCachingData_Params{s.List.Struct(i)}
}

func (s RT_Region_startCachingData_Params_List) Set(i int, v RT_Region_startCachingData_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_Region_startCachingData_Params_List) String() string {
	str, _ := text.MarshalList(0xbf919b23f1dbb184, s.List)
	return str
}

// RT_Region_startCachingData_Params_Future is a wrapper for a RT_Region_startCachingData_Params promised by a client call.
type RT_Region_startCachingData_Params_Future struct{ *capnp.Future }

func (p RT_Region_startCachingData_Params_Future) Struct() (RT_Region_startCachingData_Params, error) {
	s, err := p.Future.Struct()
	return RT_Region_startCachingData_Params{s}, err
}

type RT_Region_startCachingData_Results struct{ capnp.Struct }

// RT_Region_startCachingData_Results_TypeID is the unique identifier for the type RT_Region_startCachingData_Results.
const RT_Region_startCachingData_Results_TypeID = 0xbcb4cc5ed14ef3ab

func NewRT_Region_startCachingData_Results(s *capnp.Segment) (RT_Region_startCachingData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Region_startCachingData_Results{st}, err
}

func NewRootRT_Region_startCachingData_Results(s *capnp.Segment) (RT_Region_startCachingData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Region_startCachingData_Results{st}, err
}

func ReadRootRT_Region_startCachingData_Results(msg *capnp.Message) (RT_Region_startCachingData_Results, error) {
	root, err := msg.Root()
	return RT_Region_startCachingData_Results{root.Struct()}, err
}

func (s RT_Region_startCachingData_Results) String() string {
	str, _ := text.Marshal(0xbcb4cc5ed14ef3ab, s.Struct)
	return str
}

func (s RT_Region_startCachingData_Results) Stop() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s RT_Region_startCachingData_Results) HasStop() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_Region_startCachingData_Results) SetStop(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_Region_startCachingData_Results_List is a list of RT_Region_startCachingData_Results.
type RT_Region_startCachingData_Results_List struct{ capnp.List }

// NewRT_Region_startCachingData_Results creates a new list of RT_Region_startCachingData_Results.
func NewRT_Region_startCachingData_Results_List(s *capnp.Segment, sz int32) (RT_Region_startCachingData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_Region_startCachingData_Results_List{l}, err
}

func (s RT_Region_startCachingData_Results_List) At(i int) RT_Region_startCachingData_Results {
	return RT_Region_startCachingData_Results{s.List.Struct(i)}
}

func (s RT_Region_startCachingData_Results_List) Set(i int, v RT_Region_startCachingData_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_Region_startCachingData_Results_List) String() string {
	str, _ := text.MarshalList(0xbcb4cc5ed14ef3ab, s.List)
	return str
}

// RT_Region_startCachingData_Results_Future is a wrapper for a RT_Region_startCachingData_Results promised by a client call.
type RT_Region_startCachingData_Results_Future struct{ *capnp.Future }

func (p RT_Region_startCachingData_Results_Future) Struct() (RT_Region_startCachingData_Results, error) {
	s, err := p.Future.Struct()
	return RT_Region_startCachingData_Results{s}, err
}

func (p RT_Region_startCachingData_Results_Future) Stop() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

type RT_VRParams struct{ capnp.Struct }

// RT_VRParams_TypeID is the unique identifier for the type RT_VRParams.
const RT_VRParams_TypeID = 0xcbb2322cad54e8d0

func NewRT_VRParams(s *capnp.Segment) (RT_VRParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RT_VRParams{st}, err
}

func NewRootRT_VRParams(s *capnp.Segment) (RT_VRParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RT_VRParams{st}, err
}

func ReadRootRT_VRParams(msg *capnp.Message) (RT_VRParams, error) {
	root, err := msg.Root()
	return RT_VRParams{root.Struct()}, err
}

func (s RT_VRParams) String() string {
	str, _ := text.Marshal(0xcbb2322cad54e8d0, s.Struct)
	return str
}

func (s RT_VRParams) Resolution() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s RT_VRParams) SetResolution(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s RT_VRParams) RegionParams() (RT_RegionParams, error) {
	p, err := s.Struct.Ptr(0)
	return RT_RegionParams{Struct: p.Struct()}, err
}

func (s RT_VRParams) HasRegionParams() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VRParams) SetRegionParams(v RT_RegionParams) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRegionParams sets the regionParams field to a newly
// allocated RT_RegionParams struct, preferring placement in s's segment.
func (s RT_VRParams) NewRegionParams() (RT_RegionParams, error) {
	ss, err := NewRT_RegionParams(s.Struct.Segment())
	if err != nil {
		return RT_RegionParams{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RT_VRParams_List is a list of RT_VRParams.
type RT_VRParams_List struct{ capnp.List }

// NewRT_VRParams creates a new list of RT_VRParams.
func NewRT_VRParams_List(s *capnp.Segment, sz int32) (RT_VRParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return RT_VRParams_List{l}, err
}

func (s RT_VRParams_List) At(i int) RT_VRParams { return RT_VRParams{s.List.Struct(i)} }

func (s RT_VRParams_List) Set(i int, v RT_VRParams) error { return s.List.SetStruct(i, v.Struct) }

func (s RT_VRParams_List) String() string {
	str, _ := text.MarshalList(0xcbb2322cad54e8d0, s.List)
	return str
}

// RT_VRParams_Future is a wrapper for a RT_VRParams promised by a client call.
type RT_VRParams_Future struct{ *capnp.Future }

func (p RT_VRParams_Future) Struct() (RT_VRParams, error) {
	s, err := p.Future.Struct()
	return RT_VRParams{s}, err
}

func (p RT_VRParams_Future) RegionParams() RT_RegionParams_Future {
	return RT_RegionParams_Future{Future: p.Future.Field(0, nil)}
}

type RT_Factory struct{ Client *capnp.Client }

// RT_Factory_TypeID is the unique identifier for the type RT_Factory.
const RT_Factory_TypeID = 0x8a84216633c401f9

func (c RT_Factory) CreateVR(ctx context.Context, params func(RT_VRParams) error) (RT_Factory_createVR_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8a84216633c401f9,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Factory",
			MethodName:    "createVR",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_VRParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_Factory_createVR_Results_Future{Future: ans.Future()}, release
}

func (c RT_Factory) AddRef() RT_Factory {
	return RT_Factory{
		Client: c.Client.AddRef(),
	}
}

func (c RT_Factory) Release() {
	c.Client.Release()
}

// A RT_Factory_Server is a RT_Factory with a local implementation.
type RT_Factory_Server interface {
	CreateVR(context.Context, RT_Factory_createVR) error
}

// RT_Factory_NewServer creates a new Server from an implementation of RT_Factory_Server.
func RT_Factory_NewServer(s RT_Factory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_Factory_Methods(nil, s), s, c, policy)
}

// RT_Factory_ServerToClient creates a new Client from an implementation of RT_Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_Factory_ServerToClient(s RT_Factory_Server, policy *server.Policy) RT_Factory {
	return RT_Factory{Client: capnp.NewClient(RT_Factory_NewServer(s, policy))}
}

// RT_Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_Factory_Methods(methods []server.Method, s RT_Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8a84216633c401f9,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Factory",
			MethodName:    "createVR",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateVR(ctx, RT_Factory_createVR{call})
		},
	})

	return methods
}

// RT_Factory_createVR holds the state for a server call to RT_Factory.createVR.
// See server.Call for documentation.
type RT_Factory_createVR struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_Factory_createVR) Args() RT_VRParams {
	return RT_VRParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_Factory_createVR) AllocResults() (RT_Factory_createVR_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Factory_createVR_Results{Struct: r}, err
}

type RT_Factory_createVR_Results struct{ capnp.Struct }

// RT_Factory_createVR_Results_TypeID is the unique identifier for the type RT_Factory_createVR_Results.
const RT_Factory_createVR_Results_TypeID = 0xe71784c13dbdff40

func NewRT_Factory_createVR_Results(s *capnp.Segment) (RT_Factory_createVR_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Factory_createVR_Results{st}, err
}

func NewRootRT_Factory_createVR_Results(s *capnp.Segment) (RT_Factory_createVR_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Factory_createVR_Results{st}, err
}

func ReadRootRT_Factory_createVR_Results(msg *capnp.Message) (RT_Factory_createVR_Results, error) {
	root, err := msg.Root()
	return RT_Factory_createVR_Results{root.Struct()}, err
}

func (s RT_Factory_createVR_Results) String() string {
	str, _ := text.Marshal(0xe71784c13dbdff40, s.Struct)
	return str
}

func (s RT_Factory_createVR_Results) Vr() RT_VR {
	p, _ := s.Struct.Ptr(0)
	return RT_VR{Client: p.Interface().Client()}
}

func (s RT_Factory_createVR_Results) HasVr() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_Factory_createVR_Results) SetVr(v RT_VR) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_Factory_createVR_Results_List is a list of RT_Factory_createVR_Results.
type RT_Factory_createVR_Results_List struct{ capnp.List }

// NewRT_Factory_createVR_Results creates a new list of RT_Factory_createVR_Results.
func NewRT_Factory_createVR_Results_List(s *capnp.Segment, sz int32) (RT_Factory_createVR_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_Factory_createVR_Results_List{l}, err
}

func (s RT_Factory_createVR_Results_List) At(i int) RT_Factory_createVR_Results {
	return RT_Factory_createVR_Results{s.List.Struct(i)}
}

func (s RT_Factory_createVR_Results_List) Set(i int, v RT_Factory_createVR_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_Factory_createVR_Results_List) String() string {
	str, _ := text.MarshalList(0xe71784c13dbdff40, s.List)
	return str
}

// RT_Factory_createVR_Results_Future is a wrapper for a RT_Factory_createVR_Results promised by a client call.
type RT_Factory_createVR_Results_Future struct{ *capnp.Future }

func (p RT_Factory_createVR_Results_Future) Struct() (RT_Factory_createVR_Results, error) {
	s, err := p.Future.Struct()
	return RT_Factory_createVR_Results{s}, err
}

func (p RT_Factory_createVR_Results_Future) Vr() RT_VR {
	return RT_VR{Client: p.Future.Field(0, nil).Client()}
}

type RT_Data struct{ capnp.Struct }

// RT_Data_TypeID is the unique identifier for the type RT_Data.
const RT_Data_TypeID = 0xe4ee69b0480a3acb

func NewRT_Data(s *capnp.Segment) (RT_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Data{st}, err
}

func NewRootRT_Data(s *capnp.Segment) (RT_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_Data{st}, err
}

func ReadRootRT_Data(msg *capnp.Message) (RT_Data, error) {
	root, err := msg.Root()
	return RT_Data{root.Struct()}, err
}

func (s RT_Data) String() string {
	str, _ := text.Marshal(0xe4ee69b0480a3acb, s.Struct)
	return str
}

func (s RT_Data) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s RT_Data) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_Data) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// RT_Data_List is a list of RT_Data.
type RT_Data_List struct{ capnp.List }

// NewRT_Data creates a new list of RT_Data.
func NewRT_Data_List(s *capnp.Segment, sz int32) (RT_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_Data_List{l}, err
}

func (s RT_Data_List) At(i int) RT_Data { return RT_Data{s.List.Struct(i)} }

func (s RT_Data_List) Set(i int, v RT_Data) error { return s.List.SetStruct(i, v.Struct) }

func (s RT_Data_List) String() string {
	str, _ := text.MarshalList(0xe4ee69b0480a3acb, s.List)
	return str
}

// RT_Data_Future is a wrapper for a RT_Data promised by a client call.
type RT_Data_Future struct{ *capnp.Future }

func (p RT_Data_Future) Struct() (RT_Data, error) {
	s, err := p.Future.Struct()
	return RT_Data{s}, err
}

func (p RT_Data_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type RT_PrimData struct{ capnp.Struct }
type RT_PrimData_value RT_PrimData
type RT_PrimData_value_Which uint16

const (
	RT_PrimData_value_Which_int   RT_PrimData_value_Which = 0
	RT_PrimData_value_Which_float RT_PrimData_value_Which = 1
	RT_PrimData_value_Which_bool  RT_PrimData_value_Which = 2
)

func (w RT_PrimData_value_Which) String() string {
	const s = "intfloatbool"
	switch w {
	case RT_PrimData_value_Which_int:
		return s[0:3]
	case RT_PrimData_value_Which_float:
		return s[3:8]
	case RT_PrimData_value_Which_bool:
		return s[8:12]

	}
	return "RT_PrimData_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// RT_PrimData_TypeID is the unique identifier for the type RT_PrimData.
const RT_PrimData_TypeID = 0xf65f46c3131752a2

func NewRT_PrimData(s *capnp.Segment) (RT_PrimData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RT_PrimData{st}, err
}

func NewRootRT_PrimData(s *capnp.Segment) (RT_PrimData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RT_PrimData{st}, err
}

func ReadRootRT_PrimData(msg *capnp.Message) (RT_PrimData, error) {
	root, err := msg.Root()
	return RT_PrimData{root.Struct()}, err
}

func (s RT_PrimData) String() string {
	str, _ := text.Marshal(0xf65f46c3131752a2, s.Struct)
	return str
}

func (s RT_PrimData) Value() RT_PrimData_value { return RT_PrimData_value(s) }

func (s RT_PrimData_value) Which() RT_PrimData_value_Which {
	return RT_PrimData_value_Which(s.Struct.Uint16(8))
}
func (s RT_PrimData_value) Int() int64 {
	if s.Struct.Uint16(8) != 0 {
		panic("Which() != int")
	}
	return int64(s.Struct.Uint64(0))
}

func (s RT_PrimData_value) SetInt(v int64) {
	s.Struct.SetUint16(8, 0)
	s.Struct.SetUint64(0, uint64(v))
}

func (s RT_PrimData_value) Float() float64 {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != float")
	}
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s RT_PrimData_value) SetFloat(v float64) {
	s.Struct.SetUint16(8, 1)
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s RT_PrimData_value) Bool() bool {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(0)
}

func (s RT_PrimData_value) SetBool(v bool) {
	s.Struct.SetUint16(8, 2)
	s.Struct.SetBit(0, v)
}

// RT_PrimData_List is a list of RT_PrimData.
type RT_PrimData_List struct{ capnp.List }

// NewRT_PrimData creates a new list of RT_PrimData.
func NewRT_PrimData_List(s *capnp.Segment, sz int32) (RT_PrimData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return RT_PrimData_List{l}, err
}

func (s RT_PrimData_List) At(i int) RT_PrimData { return RT_PrimData{s.List.Struct(i)} }

func (s RT_PrimData_List) Set(i int, v RT_PrimData) error { return s.List.SetStruct(i, v.Struct) }

func (s RT_PrimData_List) String() string {
	str, _ := text.MarshalList(0xf65f46c3131752a2, s.List)
	return str
}

// RT_PrimData_Future is a wrapper for a RT_PrimData promised by a client call.
type RT_PrimData_Future struct{ *capnp.Future }

func (p RT_PrimData_Future) Struct() (RT_PrimData, error) {
	s, err := p.Future.Struct()
	return RT_PrimData{s}, err
}

func (p RT_PrimData_Future) Value() RT_PrimData_value_Future {
	return RT_PrimData_value_Future{p.Future}
}

// RT_PrimData_value_Future is a wrapper for a RT_PrimData_value promised by a client call.
type RT_PrimData_value_Future struct{ *capnp.Future }

func (p RT_PrimData_value_Future) Struct() (RT_PrimData_value, error) {
	s, err := p.Future.Struct()
	return RT_PrimData_value{s}, err
}

type RT_DataAtCell struct{ Client *capnp.Client }

// RT_DataAtCell_TypeID is the unique identifier for the type RT_DataAtCell.
const RT_DataAtCell_TypeID = 0x90c81b90b5f1b16a

func (c RT_DataAtCell) GetDataAtCell(ctx context.Context, params func(geo.Point2D) error) (RT_DataAtCell_getDataAtCell_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x90c81b90b5f1b16a,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtCell",
			MethodName:    "getDataAtCell",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.Point2D{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_DataAtCell_getDataAtCell_Results_Future{Future: ans.Future()}, release
}

func (c RT_DataAtCell) AddRef() RT_DataAtCell {
	return RT_DataAtCell{
		Client: c.Client.AddRef(),
	}
}

func (c RT_DataAtCell) Release() {
	c.Client.Release()
}

// A RT_DataAtCell_Server is a RT_DataAtCell with a local implementation.
type RT_DataAtCell_Server interface {
	GetDataAtCell(context.Context, RT_DataAtCell_getDataAtCell) error
}

// RT_DataAtCell_NewServer creates a new Server from an implementation of RT_DataAtCell_Server.
func RT_DataAtCell_NewServer(s RT_DataAtCell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_DataAtCell_Methods(nil, s), s, c, policy)
}

// RT_DataAtCell_ServerToClient creates a new Client from an implementation of RT_DataAtCell_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_DataAtCell_ServerToClient(s RT_DataAtCell_Server, policy *server.Policy) RT_DataAtCell {
	return RT_DataAtCell{Client: capnp.NewClient(RT_DataAtCell_NewServer(s, policy))}
}

// RT_DataAtCell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_DataAtCell_Methods(methods []server.Method, s RT_DataAtCell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x90c81b90b5f1b16a,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtCell",
			MethodName:    "getDataAtCell",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDataAtCell(ctx, RT_DataAtCell_getDataAtCell{call})
		},
	})

	return methods
}

// RT_DataAtCell_getDataAtCell holds the state for a server call to RT_DataAtCell.getDataAtCell.
// See server.Call for documentation.
type RT_DataAtCell_getDataAtCell struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_DataAtCell_getDataAtCell) Args() geo.Point2D {
	return geo.Point2D{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_DataAtCell_getDataAtCell) AllocResults() (RT_DataAtCell_getDataAtCell_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_DataAtCell_getDataAtCell_Results{Struct: r}, err
}

type RT_DataAtCell_getDataAtCell_Results struct{ capnp.Struct }

// RT_DataAtCell_getDataAtCell_Results_TypeID is the unique identifier for the type RT_DataAtCell_getDataAtCell_Results.
const RT_DataAtCell_getDataAtCell_Results_TypeID = 0xa86b270f6083877c

func NewRT_DataAtCell_getDataAtCell_Results(s *capnp.Segment) (RT_DataAtCell_getDataAtCell_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_DataAtCell_getDataAtCell_Results{st}, err
}

func NewRootRT_DataAtCell_getDataAtCell_Results(s *capnp.Segment) (RT_DataAtCell_getDataAtCell_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_DataAtCell_getDataAtCell_Results{st}, err
}

func ReadRootRT_DataAtCell_getDataAtCell_Results(msg *capnp.Message) (RT_DataAtCell_getDataAtCell_Results, error) {
	root, err := msg.Root()
	return RT_DataAtCell_getDataAtCell_Results{root.Struct()}, err
}

func (s RT_DataAtCell_getDataAtCell_Results) String() string {
	str, _ := text.Marshal(0xa86b270f6083877c, s.Struct)
	return str
}

func (s RT_DataAtCell_getDataAtCell_Results) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s RT_DataAtCell_getDataAtCell_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_DataAtCell_getDataAtCell_Results) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// RT_DataAtCell_getDataAtCell_Results_List is a list of RT_DataAtCell_getDataAtCell_Results.
type RT_DataAtCell_getDataAtCell_Results_List struct{ capnp.List }

// NewRT_DataAtCell_getDataAtCell_Results creates a new list of RT_DataAtCell_getDataAtCell_Results.
func NewRT_DataAtCell_getDataAtCell_Results_List(s *capnp.Segment, sz int32) (RT_DataAtCell_getDataAtCell_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_DataAtCell_getDataAtCell_Results_List{l}, err
}

func (s RT_DataAtCell_getDataAtCell_Results_List) At(i int) RT_DataAtCell_getDataAtCell_Results {
	return RT_DataAtCell_getDataAtCell_Results{s.List.Struct(i)}
}

func (s RT_DataAtCell_getDataAtCell_Results_List) Set(i int, v RT_DataAtCell_getDataAtCell_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_DataAtCell_getDataAtCell_Results_List) String() string {
	str, _ := text.MarshalList(0xa86b270f6083877c, s.List)
	return str
}

// RT_DataAtCell_getDataAtCell_Results_Future is a wrapper for a RT_DataAtCell_getDataAtCell_Results promised by a client call.
type RT_DataAtCell_getDataAtCell_Results_Future struct{ *capnp.Future }

func (p RT_DataAtCell_getDataAtCell_Results_Future) Struct() (RT_DataAtCell_getDataAtCell_Results, error) {
	s, err := p.Future.Struct()
	return RT_DataAtCell_getDataAtCell_Results{s}, err
}

func (p RT_DataAtCell_getDataAtCell_Results_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type RT_DataAtLatLonCoord struct{ Client *capnp.Client }

// RT_DataAtLatLonCoord_TypeID is the unique identifier for the type RT_DataAtLatLonCoord.
const RT_DataAtLatLonCoord_TypeID = 0xe315ba9669f30061

func (c RT_DataAtLatLonCoord) GetDataAtCoord(ctx context.Context, params func(geo.LatLonCoord) error) (RT_DataAtLatLonCoord_getDataAtCoord_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe315ba9669f30061,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtLatLonCoord",
			MethodName:    "getDataAtCoord",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_DataAtLatLonCoord_getDataAtCoord_Results_Future{Future: ans.Future()}, release
}

func (c RT_DataAtLatLonCoord) AddRef() RT_DataAtLatLonCoord {
	return RT_DataAtLatLonCoord{
		Client: c.Client.AddRef(),
	}
}

func (c RT_DataAtLatLonCoord) Release() {
	c.Client.Release()
}

// A RT_DataAtLatLonCoord_Server is a RT_DataAtLatLonCoord with a local implementation.
type RT_DataAtLatLonCoord_Server interface {
	GetDataAtCoord(context.Context, RT_DataAtLatLonCoord_getDataAtCoord) error
}

// RT_DataAtLatLonCoord_NewServer creates a new Server from an implementation of RT_DataAtLatLonCoord_Server.
func RT_DataAtLatLonCoord_NewServer(s RT_DataAtLatLonCoord_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_DataAtLatLonCoord_Methods(nil, s), s, c, policy)
}

// RT_DataAtLatLonCoord_ServerToClient creates a new Client from an implementation of RT_DataAtLatLonCoord_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_DataAtLatLonCoord_ServerToClient(s RT_DataAtLatLonCoord_Server, policy *server.Policy) RT_DataAtLatLonCoord {
	return RT_DataAtLatLonCoord{Client: capnp.NewClient(RT_DataAtLatLonCoord_NewServer(s, policy))}
}

// RT_DataAtLatLonCoord_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_DataAtLatLonCoord_Methods(methods []server.Method, s RT_DataAtLatLonCoord_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe315ba9669f30061,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtLatLonCoord",
			MethodName:    "getDataAtCoord",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDataAtCoord(ctx, RT_DataAtLatLonCoord_getDataAtCoord{call})
		},
	})

	return methods
}

// RT_DataAtLatLonCoord_getDataAtCoord holds the state for a server call to RT_DataAtLatLonCoord.getDataAtCoord.
// See server.Call for documentation.
type RT_DataAtLatLonCoord_getDataAtCoord struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_DataAtLatLonCoord_getDataAtCoord) Args() geo.LatLonCoord {
	return geo.LatLonCoord{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_DataAtLatLonCoord_getDataAtCoord) AllocResults() (RT_DataAtLatLonCoord_getDataAtCoord_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_DataAtLatLonCoord_getDataAtCoord_Results{Struct: r}, err
}

type RT_DataAtLatLonCoord_getDataAtCoord_Results struct{ capnp.Struct }

// RT_DataAtLatLonCoord_getDataAtCoord_Results_TypeID is the unique identifier for the type RT_DataAtLatLonCoord_getDataAtCoord_Results.
const RT_DataAtLatLonCoord_getDataAtCoord_Results_TypeID = 0xeb6eed4b492e6599

func NewRT_DataAtLatLonCoord_getDataAtCoord_Results(s *capnp.Segment) (RT_DataAtLatLonCoord_getDataAtCoord_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_DataAtLatLonCoord_getDataAtCoord_Results{st}, err
}

func NewRootRT_DataAtLatLonCoord_getDataAtCoord_Results(s *capnp.Segment) (RT_DataAtLatLonCoord_getDataAtCoord_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_DataAtLatLonCoord_getDataAtCoord_Results{st}, err
}

func ReadRootRT_DataAtLatLonCoord_getDataAtCoord_Results(msg *capnp.Message) (RT_DataAtLatLonCoord_getDataAtCoord_Results, error) {
	root, err := msg.Root()
	return RT_DataAtLatLonCoord_getDataAtCoord_Results{root.Struct()}, err
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results) String() string {
	str, _ := text.Marshal(0xeb6eed4b492e6599, s.Struct)
	return str
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// RT_DataAtLatLonCoord_getDataAtCoord_Results_List is a list of RT_DataAtLatLonCoord_getDataAtCoord_Results.
type RT_DataAtLatLonCoord_getDataAtCoord_Results_List struct{ capnp.List }

// NewRT_DataAtLatLonCoord_getDataAtCoord_Results creates a new list of RT_DataAtLatLonCoord_getDataAtCoord_Results.
func NewRT_DataAtLatLonCoord_getDataAtCoord_Results_List(s *capnp.Segment, sz int32) (RT_DataAtLatLonCoord_getDataAtCoord_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_DataAtLatLonCoord_getDataAtCoord_Results_List{l}, err
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results_List) At(i int) RT_DataAtLatLonCoord_getDataAtCoord_Results {
	return RT_DataAtLatLonCoord_getDataAtCoord_Results{s.List.Struct(i)}
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results_List) Set(i int, v RT_DataAtLatLonCoord_getDataAtCoord_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_DataAtLatLonCoord_getDataAtCoord_Results_List) String() string {
	str, _ := text.MarshalList(0xeb6eed4b492e6599, s.List)
	return str
}

// RT_DataAtLatLonCoord_getDataAtCoord_Results_Future is a wrapper for a RT_DataAtLatLonCoord_getDataAtCoord_Results promised by a client call.
type RT_DataAtLatLonCoord_getDataAtCoord_Results_Future struct{ *capnp.Future }

func (p RT_DataAtLatLonCoord_getDataAtCoord_Results_Future) Struct() (RT_DataAtLatLonCoord_getDataAtCoord_Results, error) {
	s, err := p.Future.Struct()
	return RT_DataAtLatLonCoord_getDataAtCoord_Results{s}, err
}

func (p RT_DataAtLatLonCoord_getDataAtCoord_Results_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type RT_DataService struct{ Client *capnp.Client }

// RT_DataService_TypeID is the unique identifier for the type RT_DataService.
const RT_DataService_TypeID = 0xeecee9f4736125fa

func (c RT_DataService) GetDataAtCell(ctx context.Context, params func(geo.Point2D) error) (RT_DataAtCell_getDataAtCell_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x90c81b90b5f1b16a,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtCell",
			MethodName:    "getDataAtCell",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.Point2D{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_DataAtCell_getDataAtCell_Results_Future{Future: ans.Future()}, release
}
func (c RT_DataService) GetDataAtCoord(ctx context.Context, params func(geo.LatLonCoord) error) (RT_DataAtLatLonCoord_getDataAtCoord_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe315ba9669f30061,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtLatLonCoord",
			MethodName:    "getDataAtCoord",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_DataAtLatLonCoord_getDataAtCoord_Results_Future{Future: ans.Future()}, release
}

func (c RT_DataService) AddRef() RT_DataService {
	return RT_DataService{
		Client: c.Client.AddRef(),
	}
}

func (c RT_DataService) Release() {
	c.Client.Release()
}

// A RT_DataService_Server is a RT_DataService with a local implementation.
type RT_DataService_Server interface {
	GetDataAtCell(context.Context, RT_DataAtCell_getDataAtCell) error

	GetDataAtCoord(context.Context, RT_DataAtLatLonCoord_getDataAtCoord) error
}

// RT_DataService_NewServer creates a new Server from an implementation of RT_DataService_Server.
func RT_DataService_NewServer(s RT_DataService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_DataService_Methods(nil, s), s, c, policy)
}

// RT_DataService_ServerToClient creates a new Client from an implementation of RT_DataService_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_DataService_ServerToClient(s RT_DataService_Server, policy *server.Policy) RT_DataService {
	return RT_DataService{Client: capnp.NewClient(RT_DataService_NewServer(s, policy))}
}

// RT_DataService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_DataService_Methods(methods []server.Method, s RT_DataService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x90c81b90b5f1b16a,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtCell",
			MethodName:    "getDataAtCell",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDataAtCell(ctx, RT_DataAtCell_getDataAtCell{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe315ba9669f30061,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.DataAtLatLonCoord",
			MethodName:    "getDataAtCoord",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDataAtCoord(ctx, RT_DataAtLatLonCoord_getDataAtCoord{call})
		},
	})

	return methods
}

type RT_Model struct{ capnp.Struct }

// RT_Model_TypeID is the unique identifier for the type RT_Model.
const RT_Model_TypeID = 0xc79b94278bc4296a

func NewRT_Model(s *capnp.Segment) (RT_Model, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_Model{st}, err
}

func NewRootRT_Model(s *capnp.Segment) (RT_Model, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_Model{st}, err
}

func ReadRootRT_Model(msg *capnp.Message) (RT_Model, error) {
	root, err := msg.Root()
	return RT_Model{root.Struct()}, err
}

func (s RT_Model) String() string {
	str, _ := text.Marshal(0xc79b94278bc4296a, s.Struct)
	return str
}

// RT_Model_List is a list of RT_Model.
type RT_Model_List struct{ capnp.List }

// NewRT_Model creates a new list of RT_Model.
func NewRT_Model_List(s *capnp.Segment, sz int32) (RT_Model_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RT_Model_List{l}, err
}

func (s RT_Model_List) At(i int) RT_Model { return RT_Model{s.List.Struct(i)} }

func (s RT_Model_List) Set(i int, v RT_Model) error { return s.List.SetStruct(i, v.Struct) }

func (s RT_Model_List) String() string {
	str, _ := text.MarshalList(0xc79b94278bc4296a, s.List)
	return str
}

// RT_Model_Future is a wrapper for a RT_Model promised by a client call.
type RT_Model_Future struct{ *capnp.Future }

func (p RT_Model_Future) Struct() (RT_Model, error) {
	s, err := p.Future.Struct()
	return RT_Model{s}, err
}

type RT_Cell2Coord2Cell struct{ Client *capnp.Client }

// RT_Cell2Coord2Cell_TypeID is the unique identifier for the type RT_Cell2Coord2Cell.
const RT_Cell2Coord2Cell_TypeID = 0xba776d64d1e9d301

func (c RT_Cell2Coord2Cell) Cell2Coord(ctx context.Context, params func(geo.Point2D) error) (geo.Coord_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xba776d64d1e9d301,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Cell2Coord2Cell",
			MethodName:    "cell2Coord",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.Point2D{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return geo.Coord_Future{Future: ans.Future()}, release
}
func (c RT_Cell2Coord2Cell) Coord2Cell(ctx context.Context, params func(geo.Coord) error) (geo.Point2D_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xba776d64d1e9d301,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.Cell2Coord2Cell",
			MethodName:    "coord2Cell",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.Coord{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return geo.Point2D_Future{Future: ans.Future()}, release
}

func (c RT_Cell2Coord2Cell) AddRef() RT_Cell2Coord2Cell {
	return RT_Cell2Coord2Cell{
		Client: c.Client.AddRef(),
	}
}

func (c RT_Cell2Coord2Cell) Release() {
	c.Client.Release()
}

// A RT_Cell2Coord2Cell_Server is a RT_Cell2Coord2Cell with a local implementation.
type RT_Cell2Coord2Cell_Server interface {
	Cell2Coord(context.Context, RT_Cell2Coord2Cell_cell2Coord) error

	Coord2Cell(context.Context, RT_Cell2Coord2Cell_coord2Cell) error
}

// RT_Cell2Coord2Cell_NewServer creates a new Server from an implementation of RT_Cell2Coord2Cell_Server.
func RT_Cell2Coord2Cell_NewServer(s RT_Cell2Coord2Cell_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_Cell2Coord2Cell_Methods(nil, s), s, c, policy)
}

// RT_Cell2Coord2Cell_ServerToClient creates a new Client from an implementation of RT_Cell2Coord2Cell_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_Cell2Coord2Cell_ServerToClient(s RT_Cell2Coord2Cell_Server, policy *server.Policy) RT_Cell2Coord2Cell {
	return RT_Cell2Coord2Cell{Client: capnp.NewClient(RT_Cell2Coord2Cell_NewServer(s, policy))}
}

// RT_Cell2Coord2Cell_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_Cell2Coord2Cell_Methods(methods []server.Method, s RT_Cell2Coord2Cell_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xba776d64d1e9d301,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Cell2Coord2Cell",
			MethodName:    "cell2Coord",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cell2Coord(ctx, RT_Cell2Coord2Cell_cell2Coord{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xba776d64d1e9d301,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.Cell2Coord2Cell",
			MethodName:    "coord2Cell",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Coord2Cell(ctx, RT_Cell2Coord2Cell_coord2Cell{call})
		},
	})

	return methods
}

// RT_Cell2Coord2Cell_cell2Coord holds the state for a server call to RT_Cell2Coord2Cell.cell2Coord.
// See server.Call for documentation.
type RT_Cell2Coord2Cell_cell2Coord struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_Cell2Coord2Cell_cell2Coord) Args() geo.Point2D {
	return geo.Point2D{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_Cell2Coord2Cell_cell2Coord) AllocResults() (geo.Coord, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return geo.Coord{Struct: r}, err
}

// RT_Cell2Coord2Cell_coord2Cell holds the state for a server call to RT_Cell2Coord2Cell.coord2Cell.
// See server.Call for documentation.
type RT_Cell2Coord2Cell_coord2Cell struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_Cell2Coord2Cell_coord2Cell) Args() geo.Coord {
	return geo.Coord{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_Cell2Coord2Cell_coord2Cell) AllocResults() (geo.Point2D, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return geo.Point2D{Struct: r}, err
}

type RT_VR struct{ Client *capnp.Client }

// RT_VR_TypeID is the unique identifier for the type RT_VR.
const RT_VR_TypeID = 0xe49397390204cc3d

func (c RT_VR) Params(ctx context.Context, params func(RT_VR_params_Params) error) (RT_VRParams_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "params",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_VR_params_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_VRParams_Future{Future: ans.Future()}, release
}
func (c RT_VR) RegisterDataService(ctx context.Context, params func(RT_VR_registerDataService_Params) error) (RT_VR_registerDataService_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "registerDataService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_VR_registerDataService_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_VR_registerDataService_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) RegisterModel(ctx context.Context, params func(RT_VR_registerModel_Params) error) (RT_VR_registerModel_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      2,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "registerModel",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_VR_registerModel_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_VR_registerModel_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) CreateSubRegion(ctx context.Context, params func(RT_RegionParams) error) (RT_VR_createSubRegion_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      3,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "createSubRegion",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_RegionParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_VR_createSubRegion_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) RegisterCoordMapping(ctx context.Context, params func(RT_VR_registerCoordMapping_Params) error) (RT_VR_registerCoordMapping_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      4,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "registerCoordMapping",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_VR_registerCoordMapping_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_VR_registerCoordMapping_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) Params(ctx context.Context, params func(RT_Region_params_Params) error) (RT_RegionParams_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "params",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_Region_params_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_RegionParams_Future{Future: ans.Future()}, release
}
func (c RT_VR) StartCachingData(ctx context.Context, params func(RT_Region_startCachingData_Params) error) (RT_Region_startCachingData_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "startCachingData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RT_Region_startCachingData_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RT_Region_startCachingData_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) SupportedCategories(ctx context.Context, params func(registry.Registry_supportedCategories_Params) error) (registry.Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) CategoryInfo(ctx context.Context, params func(registry.Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c RT_VR) Entries(ctx context.Context, params func(registry.Registry_entries_Params) error) (registry.Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c RT_VR) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c RT_VR) AddRef() RT_VR {
	return RT_VR{
		Client: c.Client.AddRef(),
	}
}

func (c RT_VR) Release() {
	c.Client.Release()
}

// A RT_VR_Server is a RT_VR with a local implementation.
type RT_VR_Server interface {
	Params(context.Context, RT_VR_params) error

	RegisterDataService(context.Context, RT_VR_registerDataService) error

	RegisterModel(context.Context, RT_VR_registerModel) error

	CreateSubRegion(context.Context, RT_VR_createSubRegion) error

	RegisterCoordMapping(context.Context, RT_VR_registerCoordMapping) error

	Params(context.Context, RT_Region_params) error

	StartCachingData(context.Context, RT_Region_startCachingData) error

	SupportedCategories(context.Context, registry.Registry_supportedCategories) error

	CategoryInfo(context.Context, registry.Registry_categoryInfo) error

	Entries(context.Context, registry.Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// RT_VR_NewServer creates a new Server from an implementation of RT_VR_Server.
func RT_VR_NewServer(s RT_VR_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RT_VR_Methods(nil, s), s, c, policy)
}

// RT_VR_ServerToClient creates a new Client from an implementation of RT_VR_Server.
// The caller is responsible for calling Release on the returned Client.
func RT_VR_ServerToClient(s RT_VR_Server, policy *server.Policy) RT_VR {
	return RT_VR{Client: capnp.NewClient(RT_VR_NewServer(s, policy))}
}

// RT_VR_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RT_VR_Methods(methods []server.Method, s RT_VR_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 11)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "params",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Params(ctx, RT_VR_params{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "registerDataService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterDataService(ctx, RT_VR_registerDataService{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      2,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "registerModel",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterModel(ctx, RT_VR_registerModel{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      3,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "createSubRegion",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateSubRegion(ctx, RT_VR_createSubRegion{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe49397390204cc3d,
			MethodID:      4,
			InterfaceName: "vr.capnp:RT.VR",
			MethodName:    "registerCoordMapping",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterCoordMapping(ctx, RT_VR_registerCoordMapping{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      0,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "params",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Params(ctx, RT_Region_params{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9edd4120395fbbcd,
			MethodID:      1,
			InterfaceName: "vr.capnp:RT.Region",
			MethodName:    "startCachingData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StartCachingData(ctx, RT_Region_startCachingData{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, registry.Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, registry.Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, registry.Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// RT_VR_params holds the state for a server call to RT_VR.params.
// See server.Call for documentation.
type RT_VR_params struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_VR_params) Args() RT_VR_params_Params {
	return RT_VR_params_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_VR_params) AllocResults() (RT_VRParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RT_VRParams{Struct: r}, err
}

// RT_VR_registerDataService holds the state for a server call to RT_VR.registerDataService.
// See server.Call for documentation.
type RT_VR_registerDataService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_VR_registerDataService) Args() RT_VR_registerDataService_Params {
	return RT_VR_registerDataService_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_VR_registerDataService) AllocResults() (RT_VR_registerDataService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerDataService_Results{Struct: r}, err
}

// RT_VR_registerModel holds the state for a server call to RT_VR.registerModel.
// See server.Call for documentation.
type RT_VR_registerModel struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_VR_registerModel) Args() RT_VR_registerModel_Params {
	return RT_VR_registerModel_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_VR_registerModel) AllocResults() (RT_VR_registerModel_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerModel_Results{Struct: r}, err
}

// RT_VR_createSubRegion holds the state for a server call to RT_VR.createSubRegion.
// See server.Call for documentation.
type RT_VR_createSubRegion struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_VR_createSubRegion) Args() RT_RegionParams {
	return RT_RegionParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_VR_createSubRegion) AllocResults() (RT_VR_createSubRegion_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_createSubRegion_Results{Struct: r}, err
}

// RT_VR_registerCoordMapping holds the state for a server call to RT_VR.registerCoordMapping.
// See server.Call for documentation.
type RT_VR_registerCoordMapping struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RT_VR_registerCoordMapping) Args() RT_VR_registerCoordMapping_Params {
	return RT_VR_registerCoordMapping_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RT_VR_registerCoordMapping) AllocResults() (RT_VR_registerCoordMapping_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerCoordMapping_Results{Struct: r}, err
}

type RT_VR_params_Params struct{ capnp.Struct }

// RT_VR_params_Params_TypeID is the unique identifier for the type RT_VR_params_Params.
const RT_VR_params_Params_TypeID = 0xf3204027564957ee

func NewRT_VR_params_Params(s *capnp.Segment) (RT_VR_params_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_VR_params_Params{st}, err
}

func NewRootRT_VR_params_Params(s *capnp.Segment) (RT_VR_params_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RT_VR_params_Params{st}, err
}

func ReadRootRT_VR_params_Params(msg *capnp.Message) (RT_VR_params_Params, error) {
	root, err := msg.Root()
	return RT_VR_params_Params{root.Struct()}, err
}

func (s RT_VR_params_Params) String() string {
	str, _ := text.Marshal(0xf3204027564957ee, s.Struct)
	return str
}

// RT_VR_params_Params_List is a list of RT_VR_params_Params.
type RT_VR_params_Params_List struct{ capnp.List }

// NewRT_VR_params_Params creates a new list of RT_VR_params_Params.
func NewRT_VR_params_Params_List(s *capnp.Segment, sz int32) (RT_VR_params_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RT_VR_params_Params_List{l}, err
}

func (s RT_VR_params_Params_List) At(i int) RT_VR_params_Params {
	return RT_VR_params_Params{s.List.Struct(i)}
}

func (s RT_VR_params_Params_List) Set(i int, v RT_VR_params_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_params_Params_List) String() string {
	str, _ := text.MarshalList(0xf3204027564957ee, s.List)
	return str
}

// RT_VR_params_Params_Future is a wrapper for a RT_VR_params_Params promised by a client call.
type RT_VR_params_Params_Future struct{ *capnp.Future }

func (p RT_VR_params_Params_Future) Struct() (RT_VR_params_Params, error) {
	s, err := p.Future.Struct()
	return RT_VR_params_Params{s}, err
}

type RT_VR_registerDataService_Params struct{ capnp.Struct }

// RT_VR_registerDataService_Params_TypeID is the unique identifier for the type RT_VR_registerDataService_Params.
const RT_VR_registerDataService_Params_TypeID = 0xb2384c88f501a0a3

func NewRT_VR_registerDataService_Params(s *capnp.Segment) (RT_VR_registerDataService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RT_VR_registerDataService_Params{st}, err
}

func NewRootRT_VR_registerDataService_Params(s *capnp.Segment) (RT_VR_registerDataService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RT_VR_registerDataService_Params{st}, err
}

func ReadRootRT_VR_registerDataService_Params(msg *capnp.Message) (RT_VR_registerDataService_Params, error) {
	root, err := msg.Root()
	return RT_VR_registerDataService_Params{root.Struct()}, err
}

func (s RT_VR_registerDataService_Params) String() string {
	str, _ := text.Marshal(0xb2384c88f501a0a3, s.Struct)
	return str
}

func (s RT_VR_registerDataService_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RT_VR_registerDataService_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_registerDataService_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RT_VR_registerDataService_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RT_VR_registerDataService_Params) Data() RT_DataService {
	p, _ := s.Struct.Ptr(1)
	return RT_DataService{Client: p.Interface().Client()}
}

func (s RT_VR_registerDataService_Params) HasData() bool {
	return s.Struct.HasPtr(1)
}

func (s RT_VR_registerDataService_Params) SetData(v RT_DataService) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// RT_VR_registerDataService_Params_List is a list of RT_VR_registerDataService_Params.
type RT_VR_registerDataService_Params_List struct{ capnp.List }

// NewRT_VR_registerDataService_Params creates a new list of RT_VR_registerDataService_Params.
func NewRT_VR_registerDataService_Params_List(s *capnp.Segment, sz int32) (RT_VR_registerDataService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RT_VR_registerDataService_Params_List{l}, err
}

func (s RT_VR_registerDataService_Params_List) At(i int) RT_VR_registerDataService_Params {
	return RT_VR_registerDataService_Params{s.List.Struct(i)}
}

func (s RT_VR_registerDataService_Params_List) Set(i int, v RT_VR_registerDataService_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_registerDataService_Params_List) String() string {
	str, _ := text.MarshalList(0xb2384c88f501a0a3, s.List)
	return str
}

// RT_VR_registerDataService_Params_Future is a wrapper for a RT_VR_registerDataService_Params promised by a client call.
type RT_VR_registerDataService_Params_Future struct{ *capnp.Future }

func (p RT_VR_registerDataService_Params_Future) Struct() (RT_VR_registerDataService_Params, error) {
	s, err := p.Future.Struct()
	return RT_VR_registerDataService_Params{s}, err
}

func (p RT_VR_registerDataService_Params_Future) Data() RT_DataService {
	return RT_DataService{Client: p.Future.Field(1, nil).Client()}
}

type RT_VR_registerDataService_Results struct{ capnp.Struct }

// RT_VR_registerDataService_Results_TypeID is the unique identifier for the type RT_VR_registerDataService_Results.
const RT_VR_registerDataService_Results_TypeID = 0xcc96c0542108011e

func NewRT_VR_registerDataService_Results(s *capnp.Segment) (RT_VR_registerDataService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerDataService_Results{st}, err
}

func NewRootRT_VR_registerDataService_Results(s *capnp.Segment) (RT_VR_registerDataService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerDataService_Results{st}, err
}

func ReadRootRT_VR_registerDataService_Results(msg *capnp.Message) (RT_VR_registerDataService_Results, error) {
	root, err := msg.Root()
	return RT_VR_registerDataService_Results{root.Struct()}, err
}

func (s RT_VR_registerDataService_Results) String() string {
	str, _ := text.Marshal(0xcc96c0542108011e, s.Struct)
	return str
}

func (s RT_VR_registerDataService_Results) Unregister() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s RT_VR_registerDataService_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_registerDataService_Results) SetUnregister(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_VR_registerDataService_Results_List is a list of RT_VR_registerDataService_Results.
type RT_VR_registerDataService_Results_List struct{ capnp.List }

// NewRT_VR_registerDataService_Results creates a new list of RT_VR_registerDataService_Results.
func NewRT_VR_registerDataService_Results_List(s *capnp.Segment, sz int32) (RT_VR_registerDataService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_VR_registerDataService_Results_List{l}, err
}

func (s RT_VR_registerDataService_Results_List) At(i int) RT_VR_registerDataService_Results {
	return RT_VR_registerDataService_Results{s.List.Struct(i)}
}

func (s RT_VR_registerDataService_Results_List) Set(i int, v RT_VR_registerDataService_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_registerDataService_Results_List) String() string {
	str, _ := text.MarshalList(0xcc96c0542108011e, s.List)
	return str
}

// RT_VR_registerDataService_Results_Future is a wrapper for a RT_VR_registerDataService_Results promised by a client call.
type RT_VR_registerDataService_Results_Future struct{ *capnp.Future }

func (p RT_VR_registerDataService_Results_Future) Struct() (RT_VR_registerDataService_Results, error) {
	s, err := p.Future.Struct()
	return RT_VR_registerDataService_Results{s}, err
}

func (p RT_VR_registerDataService_Results_Future) Unregister() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

type RT_VR_registerModel_Params struct{ capnp.Struct }

// RT_VR_registerModel_Params_TypeID is the unique identifier for the type RT_VR_registerModel_Params.
const RT_VR_registerModel_Params_TypeID = 0xd9e7f070af202669

func NewRT_VR_registerModel_Params(s *capnp.Segment) (RT_VR_registerModel_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerModel_Params{st}, err
}

func NewRootRT_VR_registerModel_Params(s *capnp.Segment) (RT_VR_registerModel_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerModel_Params{st}, err
}

func ReadRootRT_VR_registerModel_Params(msg *capnp.Message) (RT_VR_registerModel_Params, error) {
	root, err := msg.Root()
	return RT_VR_registerModel_Params{root.Struct()}, err
}

func (s RT_VR_registerModel_Params) String() string {
	str, _ := text.Marshal(0xd9e7f070af202669, s.Struct)
	return str
}

func (s RT_VR_registerModel_Params) Model() (RT_Model, error) {
	p, err := s.Struct.Ptr(0)
	return RT_Model{Struct: p.Struct()}, err
}

func (s RT_VR_registerModel_Params) HasModel() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_registerModel_Params) SetModel(v RT_Model) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModel sets the model field to a newly
// allocated RT_Model struct, preferring placement in s's segment.
func (s RT_VR_registerModel_Params) NewModel() (RT_Model, error) {
	ss, err := NewRT_Model(s.Struct.Segment())
	if err != nil {
		return RT_Model{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RT_VR_registerModel_Params_List is a list of RT_VR_registerModel_Params.
type RT_VR_registerModel_Params_List struct{ capnp.List }

// NewRT_VR_registerModel_Params creates a new list of RT_VR_registerModel_Params.
func NewRT_VR_registerModel_Params_List(s *capnp.Segment, sz int32) (RT_VR_registerModel_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_VR_registerModel_Params_List{l}, err
}

func (s RT_VR_registerModel_Params_List) At(i int) RT_VR_registerModel_Params {
	return RT_VR_registerModel_Params{s.List.Struct(i)}
}

func (s RT_VR_registerModel_Params_List) Set(i int, v RT_VR_registerModel_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_registerModel_Params_List) String() string {
	str, _ := text.MarshalList(0xd9e7f070af202669, s.List)
	return str
}

// RT_VR_registerModel_Params_Future is a wrapper for a RT_VR_registerModel_Params promised by a client call.
type RT_VR_registerModel_Params_Future struct{ *capnp.Future }

func (p RT_VR_registerModel_Params_Future) Struct() (RT_VR_registerModel_Params, error) {
	s, err := p.Future.Struct()
	return RT_VR_registerModel_Params{s}, err
}

func (p RT_VR_registerModel_Params_Future) Model() RT_Model_Future {
	return RT_Model_Future{Future: p.Future.Field(0, nil)}
}

type RT_VR_registerModel_Results struct{ capnp.Struct }

// RT_VR_registerModel_Results_TypeID is the unique identifier for the type RT_VR_registerModel_Results.
const RT_VR_registerModel_Results_TypeID = 0xd383f1cbde624492

func NewRT_VR_registerModel_Results(s *capnp.Segment) (RT_VR_registerModel_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerModel_Results{st}, err
}

func NewRootRT_VR_registerModel_Results(s *capnp.Segment) (RT_VR_registerModel_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerModel_Results{st}, err
}

func ReadRootRT_VR_registerModel_Results(msg *capnp.Message) (RT_VR_registerModel_Results, error) {
	root, err := msg.Root()
	return RT_VR_registerModel_Results{root.Struct()}, err
}

func (s RT_VR_registerModel_Results) String() string {
	str, _ := text.Marshal(0xd383f1cbde624492, s.Struct)
	return str
}

func (s RT_VR_registerModel_Results) Unregister() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s RT_VR_registerModel_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_registerModel_Results) SetUnregister(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_VR_registerModel_Results_List is a list of RT_VR_registerModel_Results.
type RT_VR_registerModel_Results_List struct{ capnp.List }

// NewRT_VR_registerModel_Results creates a new list of RT_VR_registerModel_Results.
func NewRT_VR_registerModel_Results_List(s *capnp.Segment, sz int32) (RT_VR_registerModel_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_VR_registerModel_Results_List{l}, err
}

func (s RT_VR_registerModel_Results_List) At(i int) RT_VR_registerModel_Results {
	return RT_VR_registerModel_Results{s.List.Struct(i)}
}

func (s RT_VR_registerModel_Results_List) Set(i int, v RT_VR_registerModel_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_registerModel_Results_List) String() string {
	str, _ := text.MarshalList(0xd383f1cbde624492, s.List)
	return str
}

// RT_VR_registerModel_Results_Future is a wrapper for a RT_VR_registerModel_Results promised by a client call.
type RT_VR_registerModel_Results_Future struct{ *capnp.Future }

func (p RT_VR_registerModel_Results_Future) Struct() (RT_VR_registerModel_Results, error) {
	s, err := p.Future.Struct()
	return RT_VR_registerModel_Results{s}, err
}

func (p RT_VR_registerModel_Results_Future) Unregister() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

type RT_VR_createSubRegion_Results struct{ capnp.Struct }

// RT_VR_createSubRegion_Results_TypeID is the unique identifier for the type RT_VR_createSubRegion_Results.
const RT_VR_createSubRegion_Results_TypeID = 0x809bc0a324977d6c

func NewRT_VR_createSubRegion_Results(s *capnp.Segment) (RT_VR_createSubRegion_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_createSubRegion_Results{st}, err
}

func NewRootRT_VR_createSubRegion_Results(s *capnp.Segment) (RT_VR_createSubRegion_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_createSubRegion_Results{st}, err
}

func ReadRootRT_VR_createSubRegion_Results(msg *capnp.Message) (RT_VR_createSubRegion_Results, error) {
	root, err := msg.Root()
	return RT_VR_createSubRegion_Results{root.Struct()}, err
}

func (s RT_VR_createSubRegion_Results) String() string {
	str, _ := text.Marshal(0x809bc0a324977d6c, s.Struct)
	return str
}

func (s RT_VR_createSubRegion_Results) Unregister() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s RT_VR_createSubRegion_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_createSubRegion_Results) SetUnregister(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_VR_createSubRegion_Results_List is a list of RT_VR_createSubRegion_Results.
type RT_VR_createSubRegion_Results_List struct{ capnp.List }

// NewRT_VR_createSubRegion_Results creates a new list of RT_VR_createSubRegion_Results.
func NewRT_VR_createSubRegion_Results_List(s *capnp.Segment, sz int32) (RT_VR_createSubRegion_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_VR_createSubRegion_Results_List{l}, err
}

func (s RT_VR_createSubRegion_Results_List) At(i int) RT_VR_createSubRegion_Results {
	return RT_VR_createSubRegion_Results{s.List.Struct(i)}
}

func (s RT_VR_createSubRegion_Results_List) Set(i int, v RT_VR_createSubRegion_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_createSubRegion_Results_List) String() string {
	str, _ := text.MarshalList(0x809bc0a324977d6c, s.List)
	return str
}

// RT_VR_createSubRegion_Results_Future is a wrapper for a RT_VR_createSubRegion_Results promised by a client call.
type RT_VR_createSubRegion_Results_Future struct{ *capnp.Future }

func (p RT_VR_createSubRegion_Results_Future) Struct() (RT_VR_createSubRegion_Results, error) {
	s, err := p.Future.Struct()
	return RT_VR_createSubRegion_Results{s}, err
}

func (p RT_VR_createSubRegion_Results_Future) Unregister() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

type RT_VR_registerCoordMapping_Params struct{ capnp.Struct }

// RT_VR_registerCoordMapping_Params_TypeID is the unique identifier for the type RT_VR_registerCoordMapping_Params.
const RT_VR_registerCoordMapping_Params_TypeID = 0x97afa4ddd9635a13

func NewRT_VR_registerCoordMapping_Params(s *capnp.Segment) (RT_VR_registerCoordMapping_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RT_VR_registerCoordMapping_Params{st}, err
}

func NewRootRT_VR_registerCoordMapping_Params(s *capnp.Segment) (RT_VR_registerCoordMapping_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RT_VR_registerCoordMapping_Params{st}, err
}

func ReadRootRT_VR_registerCoordMapping_Params(msg *capnp.Message) (RT_VR_registerCoordMapping_Params, error) {
	root, err := msg.Root()
	return RT_VR_registerCoordMapping_Params{root.Struct()}, err
}

func (s RT_VR_registerCoordMapping_Params) String() string {
	str, _ := text.Marshal(0x97afa4ddd9635a13, s.Struct)
	return str
}

func (s RT_VR_registerCoordMapping_Params) CoordType() geo.CoordType {
	return geo.CoordType(s.Struct.Uint16(0))
}

func (s RT_VR_registerCoordMapping_Params) SetCoordType(v geo.CoordType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s RT_VR_registerCoordMapping_Params) Func() RT_Cell2Coord2Cell {
	p, _ := s.Struct.Ptr(0)
	return RT_Cell2Coord2Cell{Client: p.Interface().Client()}
}

func (s RT_VR_registerCoordMapping_Params) HasFunc() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_registerCoordMapping_Params) SetFunc(v RT_Cell2Coord2Cell) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_VR_registerCoordMapping_Params_List is a list of RT_VR_registerCoordMapping_Params.
type RT_VR_registerCoordMapping_Params_List struct{ capnp.List }

// NewRT_VR_registerCoordMapping_Params creates a new list of RT_VR_registerCoordMapping_Params.
func NewRT_VR_registerCoordMapping_Params_List(s *capnp.Segment, sz int32) (RT_VR_registerCoordMapping_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return RT_VR_registerCoordMapping_Params_List{l}, err
}

func (s RT_VR_registerCoordMapping_Params_List) At(i int) RT_VR_registerCoordMapping_Params {
	return RT_VR_registerCoordMapping_Params{s.List.Struct(i)}
}

func (s RT_VR_registerCoordMapping_Params_List) Set(i int, v RT_VR_registerCoordMapping_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_registerCoordMapping_Params_List) String() string {
	str, _ := text.MarshalList(0x97afa4ddd9635a13, s.List)
	return str
}

// RT_VR_registerCoordMapping_Params_Future is a wrapper for a RT_VR_registerCoordMapping_Params promised by a client call.
type RT_VR_registerCoordMapping_Params_Future struct{ *capnp.Future }

func (p RT_VR_registerCoordMapping_Params_Future) Struct() (RT_VR_registerCoordMapping_Params, error) {
	s, err := p.Future.Struct()
	return RT_VR_registerCoordMapping_Params{s}, err
}

func (p RT_VR_registerCoordMapping_Params_Future) Func() RT_Cell2Coord2Cell {
	return RT_Cell2Coord2Cell{Client: p.Future.Field(0, nil).Client()}
}

type RT_VR_registerCoordMapping_Results struct{ capnp.Struct }

// RT_VR_registerCoordMapping_Results_TypeID is the unique identifier for the type RT_VR_registerCoordMapping_Results.
const RT_VR_registerCoordMapping_Results_TypeID = 0x93a265e6766659c2

func NewRT_VR_registerCoordMapping_Results(s *capnp.Segment) (RT_VR_registerCoordMapping_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerCoordMapping_Results{st}, err
}

func NewRootRT_VR_registerCoordMapping_Results(s *capnp.Segment) (RT_VR_registerCoordMapping_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RT_VR_registerCoordMapping_Results{st}, err
}

func ReadRootRT_VR_registerCoordMapping_Results(msg *capnp.Message) (RT_VR_registerCoordMapping_Results, error) {
	root, err := msg.Root()
	return RT_VR_registerCoordMapping_Results{root.Struct()}, err
}

func (s RT_VR_registerCoordMapping_Results) String() string {
	str, _ := text.Marshal(0x93a265e6766659c2, s.Struct)
	return str
}

func (s RT_VR_registerCoordMapping_Results) Unregister() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s RT_VR_registerCoordMapping_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s RT_VR_registerCoordMapping_Results) SetUnregister(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RT_VR_registerCoordMapping_Results_List is a list of RT_VR_registerCoordMapping_Results.
type RT_VR_registerCoordMapping_Results_List struct{ capnp.List }

// NewRT_VR_registerCoordMapping_Results creates a new list of RT_VR_registerCoordMapping_Results.
func NewRT_VR_registerCoordMapping_Results_List(s *capnp.Segment, sz int32) (RT_VR_registerCoordMapping_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RT_VR_registerCoordMapping_Results_List{l}, err
}

func (s RT_VR_registerCoordMapping_Results_List) At(i int) RT_VR_registerCoordMapping_Results {
	return RT_VR_registerCoordMapping_Results{s.List.Struct(i)}
}

func (s RT_VR_registerCoordMapping_Results_List) Set(i int, v RT_VR_registerCoordMapping_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RT_VR_registerCoordMapping_Results_List) String() string {
	str, _ := text.MarshalList(0x93a265e6766659c2, s.List)
	return str
}

// RT_VR_registerCoordMapping_Results_Future is a wrapper for a RT_VR_registerCoordMapping_Results promised by a client call.
type RT_VR_registerCoordMapping_Results_Future struct{ *capnp.Future }

func (p RT_VR_registerCoordMapping_Results_Future) Struct() (RT_VR_registerCoordMapping_Results, error) {
	s, err := p.Future.Struct()
	return RT_VR_registerCoordMapping_Results{s}, err
}

func (p RT_VR_registerCoordMapping_Results_Future) Unregister() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

const schema_a16af7a45e431f73 = "x\xda\xacWkl\x14\xd7\x15>gf\x9d\xb1wg" +
	"={\xb9F&\xb4` \xa6\xae\xad`\xf9\xd1\x1f`" +
	"\x15\xad\x1dC\x08\x0e\xae<\x1b\xe3\xca\x96\x9ad\xbc\x1e" +
	"\xbb\xeb\xacw\x9c\xd9]GNK\x1f\x09)\x0dU\x15" +
	" mh\x8b\xd4\x16\x92V\x11UDI\x88\x14\x93\xa2" +
	"\xc4i$R\xc0UQ\xc4\x0f\x12\x11\x89\x14\x1ah\x00" +
	"\xd5\xa5I\x9f\xf4V\xf7\xee\xde\xd9\xd9]\x87V\xa2\xbf" +
	"\xf6\xee\xe8\xcc=\x8f\xef;\xdf9\xd3\xd2S\xd1\xa9\xb4" +
	"V\xfc\x84\x02\x98\x17*nc\xc9m{\xeb\x9f}}" +
	"\xdf7\x80\x18\x08P\x81\x1a@\xfb\xcbU\x1d\x08H\x8f" +
	"UE\x01\xd9\x87w<\x14p_\xbdk\x07\x90*d" +
	"\xe9\xba\xee\xfb\x9f\xfb\xeb\xf8~\x08h\x00\xf4|\xd50" +
	"\xbdXu\x1cT\xf6w|\xb3}t\xe5\xf6\x9d@t" +
	"\xb5\xf0\x06 }8x\x80N\x07\xb9q6\xb8\x89\xee" +
	"\xe7'6~x\xfe\xe5]\x9fzkW\x891D\x90" +
	">\x19<Jw\x0b\xf3\xef\x067\xd1\xb9\xa0F\xe7\x82" +
	"\x06{cpt\xea\x0f\xf6\x81\xa7\xfd1\xce\x06\x87y" +
	"\x8csA\x1e#\x1d\x8a\x9f=\xf7\xdc\xa1\xbd`\x1a\xe8" +
	"Y\xcc\x07\x87\xb8\xc5\x8d\xe0#\x80l\xee\xd5\x07\xd6\xad" +
	"\xe8:\xf7\xe3\xb2\x00\xbf\x14\xfa\x11\xb5C\xdc\xa3\x15\xda" +
	"Ag\xf8\x89-\xf9\xda\xc3?8~v\xd5\xf3@(" +
	"\x82H\xb5}\x7f(\x88\x10`_\xdd\xf1\xf8\x83F\xc3" +
	"C\xcf\x03\xa9\xcd\xf9\x89`\xfb\x93\xa1q\xee\xe7\xfb!" +
	"\x1e\xc9\xb3?\xc5\x8f\xbe\xbde\xed\x8b\xf9P\x15Q\xce" +
	"P\x8c\x1b\xcc\x86x \xce\xec\xe1\xe6#\xda\xe0K@" +
	"t_mE\xc4t\x99~\x826\xea\xfc\xb4Z\xe7\x97" +
	"\xe1\xdb\x97O\x8fL<r\xb4,\xe8\xac\xfe>\xfd\xa6" +
	"0\xdc\xa6\xef\xa0g\xf8\x89\xfd\xe2\xfa\x17N\xdf\x7f\xea" +
	"\xc8\xafrA\xe7JpL\x17E\xfa\x8d\xb8m\xfb\xe1" +
	"w\xe7\xef\xd8\xb7\xfb5_V\x97\xf5!\x9e\xd5x\xe3" +
	"\x9b\xdfi\xf8\xde\xbe\xe3\xc51\x09\x88\xcf\xe8{\xe89" +
	"]\x03\x95\xfd\xeeR\xff\x0bw\xb6\xbdx\x12L\x1d\xcb" +
	"\"\x9f\xd1\x0f\xd2Y\x11\xd01\x9dg\xb9\x1c+W\xf6" +
	"\xbf\xfe\xcc)?b+\xc3\x02\x8f5a\x1e\xcc\x9e\x0d" +
	"\xc3\xef\x9d\x9c\x7f\xfcm\xbf\x81\x19n\xe2\x06\x83\xc2 " +
	"\xf1\x99\x15\x87&\xff\xf4\xc1Y\xbf\xc1\xb6\xf0*n\xf0" +
	"\x047\xb8a]O<st\xf1\xef\xcb9\xf4\xb3\xf0" +
	"\x9f\xe9\xe10\x8f\xe5\x85\xf0&z5\xac\xd1\xaba\x83" +
	"\xad?\x15P\xd6\xed}\xfaBY-\xcf\x87\x1f\xa5\x17" +
	"\xb9y\xfb\xf9\xf0&\xa4\xb3\xd5\x0d\x00\xecdG\xf0\x9e" +
	"_&\xae](C)\x82t\xa6z'\x9d\xad\x16\xb9" +
	"VG\x01\xe8G\xd5\x06\xebd\xc7\xd6\xcfn\xaf\xfd\x00" +
	"H\x8d\x17\xed\xe5j\x91\xce|5O\xe7\x87v\xf3\xe6" +
	"{\xaf\xa6>\x04\xb2\xdc#\x0e1\x0er\x83\x95\x067" +
	"8qfO\xeb\x92\x15\x1b\xaf\x80\xb9\x18\x15v V" +
	"K\x7f}\xf7\x03\x1fC\xbf\x86*\x06h\x97\xf1\x0e " +
	"\xddh\x1c\x02d\xffXm\xa5\xffr\xf9\xb7\xd7\x16h" +
	"\x9fs\xc6\x1b\xf4\xa2!Z\xd3\xd0\xe8y\xa3\x81\x9a\x11" +
	"\x83]\xfb\xe2\xe6\x81\x86\xce\x15\xd7s\xa5\x14\xb0n\x8c" +
	"\xfc\x11\x02\x05/\xa6\x8eJ\x09\xf0\x8d\x91\x83\xb45\xc2" +
	"Ok\"Q`\xd0\xc9\xa6\xdc\xe6\xb85\x99\x9aT;" +
	"b\xfd\xcd\x03\xb1\xe6\xb8k[\x19\xfb\xbe\xecp\xcc\x1e" +
	"K8\xa9\xfaX\xd4Ng\x93\x99\xb4\x19P\x03\x00\x01" +
	"\x04 \xe1!\x00SW\xd1\\\xa2 \xcb\xa6\\{," +
	"\x91\xce\x80j\xbbHX\xed\xfck\xe6\\\xa0q\x17\x00" +
	"\"\x01\xf4\xae\x07\xad#\xd6o\xb6\xa0\xbfU\x06\xc7}" +
	"\x0d<\xd8Q\xe0\"\xd9\xda\xe3\xd3\x9e\xadw\xf9\x803" +
	"\x9b\x0a\xf9\x91\xde\x1e\x9f\xea\xf4\x0ey\xe4\xe9\xdd\xe3+" +
	"\xa79\xec\xeb\x04\xb3\xcd\xd7~\xbd\x8f\xf9\xf8\xd3\xbb\x94" +
	"\xe52\xee\xb3\xc0p\xad\x89t4\xf7\x97\x0d\xc4\xfa," +
	"\xfe\x1f\x00\xbe~\xb7\x15\xcf8\xee\xb4\xb1\xc1\xcaX\xac" +
	"\xcfML\xf0\x03\x000\xfe\xdb\x95\xe9\xb6AM&\xf3" +
	"\x7f\xb6X\x98\xd9\xe2\xa4\xba\x1d\xc7\xc5\x11\xf1\xec>\xdb" +
	"\x9d\x02-\x11\xb7\xebz\x9d\x11;\xc9\xba\xedd\xb2\xad" +
	"\xdbq\xd0\x1di\xe3gP\x07b^\xc1\x90\xe3\xc1\xfd" +
	"i\x8e;\xdd\x87h\x06\xd4\x0a\x00\xafF(\xb9IH" +
	"\x0f(\xa4Jc9\xe0\x06b\x00\xd0\x89}\x88\xc57" +
	"q\xffQ\x1ea2Y\xb8\xec\xfdo%\x96\x7fz\xe6" +
	"\xa9\xb7P\x0a !.`\x97\x8ed\x99\xc6\xc6\xec\x8c" +
	"H\x04\xea\xc4[\x04\xeb\xcc\x80\x82\x85\x82sI\x16\x8e" +
	"\xba\x02Hp\x11\xf6{\x0e\x03y*\xe5\x88a\xbb\xbc" +
	"\x04#\xbd\xd6\xe4d\"5V\x1f\xb3\xd3Y\xed\xd6\xf9" +
	"tS\x1f\x1c0u\"mVz.\x1ac\x00\xe6g" +
	"U4?\xa7 b\x0d\x8f\x9d\xb46\x01\x98w\xaah" +
	"\xaeU\x90\xc5\xf9\xfb\xfd\xd3\x93\x806\x1a\xec\xd2\x95U" +
	"/\xbdw\xa4\xf1\"\xf7j\x00\x1a\xa3\xd9T\x1cI\x81" +
	":%\xc1\x88\x0as\xba\xa8N\x8aW\xb7RTW\xce" +
	"\x1b\x94\x8c'\xad\x1d\xa0\x90\xd5\x1a\x16T\x1b\xa5\xbe\x93" +
	"\xdbw\x82B\x16k\xd1IA\xb6Nd\xe9\x8c\xe5f" +
	"\xba\xad8~9\x91\x1a\xcb\xf1\xac\x18WUzuR" +
	"\xcd\xb9\xb7\xea%S\x8b\xcb$\xc9\x99L6KP\xc5" +
	"?\x8e\x85Q\xda\xdb\xbc(\x95*\x9a5\x0a\x1a#V" +
	"\xc6\xc2E\xe8\x03\x1d\x00\x17\xdd\x04\x05\xc9\xf2D\xdc\xce" +
	"\xc5\x82E ,\x050\xebU4[\x14$\x12\x855" +
	"M\x05d\xd4\xc4\x08\xea\xa0\xa0\x0ey\xdf\xa4\xd0\xc7%" +
	"%W\x0a\xc9\xcb\xa4s\xbc\xf6\x12\xe9\xc8'\xb2A\xc1" +
	"\xe8\xb0\x93M\x8d\xa41\xc2z\xde\x19]{\xe9\xdd\xd8" +
	"\x8ch\x12Ii\xdfC\x82\xb5f\x00\x11\xb1OE\x8c" +
	"x\x0d\xc2\xbdGJ\xbd\xcb\xf6\xe5\xdd\xab\xe5\xfb\xaa\xb2" +
	"\xb8\xaf\xfe6\x98n\xba\xfd\xe7\x1f\xbfBZ\x87@!" +
	"\x8d\x1cy\xf9\x08\xa5\x11Y6$\x90g\xf1\xfc}\xa0" +
	"\xba#\x9dyF\xb6\xe5$\xa5\x18\xf8\x80\x0fx\xc9\x12" +
	"I\x92\x05\xfb\xcb\x8fi:\xe3L\xfe\xb7\xbe\xfa\xa4\xbb" +
	"\xf3}U\xcc{\xaee\x98,\x13\x1c.\x9bBGs" +
	"e\xf180\xb4@#\x8e\x03\x98-*\x9a\x9fW\x90" +
	"\xb9v\xdaIf3\x09P\x9d\x14V\x80\x82\x15\xc0\x1f" +
	"\xfa\x95\x19#\x85!R\x02\xcc\xcd\x08\xc9+\x93To" +
	"Yy\xd4\x12\x17B\xcb\x17l\xa5\xff\xdb\xe5}\x96\xab" +
	"Y\x13Ew\xb7\x15 \xad\x9b\xe0F\x18)\x8c\xb9\x85" +
	"\xd8*\x87\x12\x9fIu\x82\xb5\x859\xf0\xcf\xa7N\xad" +
	"k\xf9\xd7\xfc\x15\x94\xfb\x0c!\x8f\x96\xcf\x81hF\xbc" +
	"\x96\xef\x1a9l?y\x0c@4\xcf\x03D\xb3F\xf8" +
	"\x91+\x0b\xca)FvsE|BC\xc5[\xb1Q" +
	".\x99d\xfa\x00($\xab\xa1\xeam\x8d(\xf7K\x92" +
	"pA!\x96\x86\x01\x8f\x09(?y\xc8\xd6\xc7@!" +
	"\xbd\xbc\xd7\xe4\x07\x04\xcaO\x0d\xd2u\x10\x14\xb2\xde\xa7" +
	"\xb2\xb2\xd0(\x99\xc2\xe7\xb3\xef9\xe4f5\xef\xc7\xfc" +
	"b\x84\xf9\xcd\x08\xfco\xcb\xf1c\xf0\xf9\xd3\x89f%" +
	"\xfa>N\x00\xd8+\xed\xb7=x\xfa\xde\xaf\x9c\x00\x9f" +
	"6{s\xb9L\xba\xfc\xe0NY\xc9\xac-D\xd8[" +
	"\x82r\"\\VoUn\x0c\x8e;\xdd,\xb7\x81\x05" +
	"\x89\xb9\xb4p\xbf:\xc5\xe9\xe8\xadA%t\xac(e" +
	"\x8e\xc8\xd37E\xf8\xdf\xffy\x8cH\xca\x94\x0c\x11A" +
	"O\xb9L5OYI5k\x9b\xba\x1a\xd0\x19\x13w" +
	"m\\\x05`v\xaahnQ0\x8c\xfff9\xd1\xd8" +
	"\xcc\x8b\xb4AE\xb3O\xc1\xb0r\x83\xd5\xa0\x02@z" +
	"\xb9\xdf{T4\xfb\x15\xd4\x12\xa9\x8cT\x90\xba\xd1\xa4" +
	"ce0\x04\x0a\x86\x00\x8da\xc7I\"\x82\x82\xb8P" +
	"\x9b\xe4\x05\x83\xa3\xd2\xa7V\x08,\xbd\x01\xd8U\xe9\xa5" +
	"\xd1\xd5\x82eKQ\xc9\x04\xe1\xb0\x15&\x18\x94\xb4\xce" +
	"\xcd\x8d\xcb\xf0U\xf2\xda\xe0\xcdz!\x86\xc5t\xe2e" +
	"\x14\xdb\xa9\xc7(\xf4}\x84pf)9F\xfd'\x00" +
	"\x00\xff\xffk\xaa\xcc\x81"

func init() {
	schemas.Register(schema_a16af7a45e431f73,
		0x809bc0a324977d6c,
		0x8742bb72046b23eb,
		0x8a84216633c401f9,
		0x90c81b90b5f1b16a,
		0x93a265e6766659c2,
		0x97afa4ddd9635a13,
		0x9edd4120395fbbcd,
		0xa822d9c798717e18,
		0xa86b270f6083877c,
		0xb2384c88f501a0a3,
		0xb35907b42eb1c16f,
		0xba776d64d1e9d301,
		0xbcb4cc5ed14ef3ab,
		0xbf919b23f1dbb184,
		0xc79b94278bc4296a,
		0xcbb2322cad54e8d0,
		0xcc96c0542108011e,
		0xd383f1cbde624492,
		0xd9e7f070af202669,
		0xe315ba9669f30061,
		0xe49397390204cc3d,
		0xe4ee69b0480a3acb,
		0xe71784c13dbdff40,
		0xeb6eed4b492e6599,
		0xec4520183192d5ca,
		0xeecee9f4736125fa,
		0xf3204027564957ee,
		0xf65f46c3131752a2)
}
