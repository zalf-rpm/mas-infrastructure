// Code generated by capnpc-go. DO NOT EDIT.

package climate

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type GCM uint16

// GCM_TypeID is the unique identifier for the type GCM.
const GCM_TypeID = 0xce396869eede9f10

// Values of GCM.
const (
	GCM_cccmaCanEsm2   GCM = 0
	GCM_ichecEcEarth   GCM = 1
	GCM_ipslIpslCm5AMr GCM = 2
	GCM_mirocMiroc5    GCM = 3
	GCM_mpiMMpiEsmLr   GCM = 4
	GCM_gfdlEsm4       GCM = 5
	GCM_ipslCm6aLr     GCM = 6
	GCM_mpiEsm12Hr     GCM = 7
	GCM_mriEsm20       GCM = 8
	GCM_ukesm10Ll      GCM = 9
	GCM_gswp3W5E5      GCM = 10
	GCM_mohcHadGem2Es  GCM = 11
)

// String returns the enum's constant name.
func (c GCM) String() string {
	switch c {
	case GCM_cccmaCanEsm2:
		return "cccmaCanEsm2"
	case GCM_ichecEcEarth:
		return "ichecEcEarth"
	case GCM_ipslIpslCm5AMr:
		return "ipslIpslCm5AMr"
	case GCM_mirocMiroc5:
		return "mirocMiroc5"
	case GCM_mpiMMpiEsmLr:
		return "mpiMMpiEsmLr"
	case GCM_gfdlEsm4:
		return "gfdlEsm4"
	case GCM_ipslCm6aLr:
		return "ipslCm6aLr"
	case GCM_mpiEsm12Hr:
		return "mpiEsm12Hr"
	case GCM_mriEsm20:
		return "mriEsm20"
	case GCM_ukesm10Ll:
		return "ukesm10Ll"
	case GCM_gswp3W5E5:
		return "gswp3W5E5"
	case GCM_mohcHadGem2Es:
		return "mohcHadGem2Es"

	default:
		return ""
	}
}

// GCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GCMFromString(c string) GCM {
	switch c {
	case "cccmaCanEsm2":
		return GCM_cccmaCanEsm2
	case "ichecEcEarth":
		return GCM_ichecEcEarth
	case "ipslIpslCm5AMr":
		return GCM_ipslIpslCm5AMr
	case "mirocMiroc5":
		return GCM_mirocMiroc5
	case "mpiMMpiEsmLr":
		return GCM_mpiMMpiEsmLr
	case "gfdlEsm4":
		return GCM_gfdlEsm4
	case "ipslCm6aLr":
		return GCM_ipslCm6aLr
	case "mpiEsm12Hr":
		return GCM_mpiEsm12Hr
	case "mriEsm20":
		return GCM_mriEsm20
	case "ukesm10Ll":
		return GCM_ukesm10Ll
	case "gswp3W5E5":
		return GCM_gswp3W5E5
	case "mohcHadGem2Es":
		return GCM_mohcHadGem2Es

	default:
		return 0
	}
}

type GCM_List struct{ capnp.List }

func NewGCM_List(s *capnp.Segment, sz int32) (GCM_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return GCM_List{l.List}, err
}

func (l GCM_List) At(i int) GCM {
	ul := capnp.UInt16List{List: l.List}
	return GCM(ul.At(i))
}

func (l GCM_List) Set(i int, v GCM) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type RCM uint16

// RCM_TypeID is the unique identifier for the type RCM.
const RCM_TypeID = 0x8671dec53083e351

// Values of RCM.
const (
	RCM_clmcomCclm4817    RCM = 0
	RCM_gericsRemo2015    RCM = 1
	RCM_knmiRacmo22E      RCM = 2
	RCM_smhiRca4          RCM = 3
	RCM_clmcomBtuCclm4817 RCM = 4
	RCM_mpiCscRemo2009    RCM = 5
	RCM_uhohWrf361H       RCM = 6
)

// String returns the enum's constant name.
func (c RCM) String() string {
	switch c {
	case RCM_clmcomCclm4817:
		return "clmcomCclm4817"
	case RCM_gericsRemo2015:
		return "gericsRemo2015"
	case RCM_knmiRacmo22E:
		return "knmiRacmo22E"
	case RCM_smhiRca4:
		return "smhiRca4"
	case RCM_clmcomBtuCclm4817:
		return "clmcomBtuCclm4817"
	case RCM_mpiCscRemo2009:
		return "mpiCscRemo2009"
	case RCM_uhohWrf361H:
		return "uhohWrf361H"

	default:
		return ""
	}
}

// RCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCMFromString(c string) RCM {
	switch c {
	case "clmcomCclm4817":
		return RCM_clmcomCclm4817
	case "gericsRemo2015":
		return RCM_gericsRemo2015
	case "knmiRacmo22E":
		return RCM_knmiRacmo22E
	case "smhiRca4":
		return RCM_smhiRca4
	case "clmcomBtuCclm4817":
		return RCM_clmcomBtuCclm4817
	case "mpiCscRemo2009":
		return RCM_mpiCscRemo2009
	case "uhohWrf361H":
		return RCM_uhohWrf361H

	default:
		return 0
	}
}

type RCM_List struct{ capnp.List }

func NewRCM_List(s *capnp.Segment, sz int32) (RCM_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return RCM_List{l.List}, err
}

func (l RCM_List) At(i int) RCM {
	ul := capnp.UInt16List{List: l.List}
	return RCM(ul.At(i))
}

func (l RCM_List) Set(i int, v RCM) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SSP uint16

// SSP_TypeID is the unique identifier for the type SSP.
const SSP_TypeID = 0xd3780ae416347aee

// Values of SSP.
const (
	SSP_ssp1 SSP = 0
	SSP_ssp2 SSP = 1
	SSP_ssp3 SSP = 2
	SSP_ssp4 SSP = 3
	SSP_ssp5 SSP = 4
)

// String returns the enum's constant name.
func (c SSP) String() string {
	switch c {
	case SSP_ssp1:
		return "ssp1"
	case SSP_ssp2:
		return "ssp2"
	case SSP_ssp3:
		return "ssp3"
	case SSP_ssp4:
		return "ssp4"
	case SSP_ssp5:
		return "ssp5"

	default:
		return ""
	}
}

// SSPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SSPFromString(c string) SSP {
	switch c {
	case "ssp1":
		return SSP_ssp1
	case "ssp2":
		return SSP_ssp2
	case "ssp3":
		return SSP_ssp3
	case "ssp4":
		return SSP_ssp4
	case "ssp5":
		return SSP_ssp5

	default:
		return 0
	}
}

type SSP_List struct{ capnp.List }

func NewSSP_List(s *capnp.Segment, sz int32) (SSP_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SSP_List{l.List}, err
}

func (l SSP_List) At(i int) SSP {
	ul := capnp.UInt16List{List: l.List}
	return SSP(ul.At(i))
}

func (l SSP_List) Set(i int, v SSP) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type RCP uint16

// RCP_TypeID is the unique identifier for the type RCP.
const RCP_TypeID = 0x8ef30778310c94cc

// Values of RCP.
const (
	RCP_rcp19 RCP = 0
	RCP_rcp26 RCP = 1
	RCP_rcp34 RCP = 2
	RCP_rcp45 RCP = 3
	RCP_rcp60 RCP = 4
	RCP_rcp70 RCP = 5
	RCP_rcp85 RCP = 6
)

// String returns the enum's constant name.
func (c RCP) String() string {
	switch c {
	case RCP_rcp19:
		return "rcp19"
	case RCP_rcp26:
		return "rcp26"
	case RCP_rcp34:
		return "rcp34"
	case RCP_rcp45:
		return "rcp45"
	case RCP_rcp60:
		return "rcp60"
	case RCP_rcp70:
		return "rcp70"
	case RCP_rcp85:
		return "rcp85"

	default:
		return ""
	}
}

// RCPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCPFromString(c string) RCP {
	switch c {
	case "rcp19":
		return RCP_rcp19
	case "rcp26":
		return RCP_rcp26
	case "rcp34":
		return RCP_rcp34
	case "rcp45":
		return RCP_rcp45
	case "rcp60":
		return RCP_rcp60
	case "rcp70":
		return RCP_rcp70
	case "rcp85":
		return RCP_rcp85

	default:
		return 0
	}
}

type RCP_List struct{ capnp.List }

func NewRCP_List(s *capnp.Segment, sz int32) (RCP_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return RCP_List{l.List}, err
}

func (l RCP_List) At(i int) RCP {
	ul := capnp.UInt16List{List: l.List}
	return RCP(ul.At(i))
}

func (l RCP_List) Set(i int, v RCP) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type EnsembleMember struct{ capnp.Struct }

// EnsembleMember_TypeID is the unique identifier for the type EnsembleMember.
const EnsembleMember_TypeID = 0xc8caacd1cd5da434

func NewEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember{st}, err
}

func NewRootEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember{st}, err
}

func ReadRootEnsembleMember(msg *capnp.Message) (EnsembleMember, error) {
	root, err := msg.Root()
	return EnsembleMember{root.Struct()}, err
}

func (s EnsembleMember) String() string {
	str, _ := text.Marshal(0xc8caacd1cd5da434, s.Struct)
	return str
}

func (s EnsembleMember) R() uint16 {
	return s.Struct.Uint16(0)
}

func (s EnsembleMember) SetR(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s EnsembleMember) I() uint16 {
	return s.Struct.Uint16(2)
}

func (s EnsembleMember) SetI(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s EnsembleMember) P() uint16 {
	return s.Struct.Uint16(4)
}

func (s EnsembleMember) SetP(v uint16) {
	s.Struct.SetUint16(4, v)
}

// EnsembleMember_List is a list of EnsembleMember.
type EnsembleMember_List struct{ capnp.List }

// NewEnsembleMember creates a new list of EnsembleMember.
func NewEnsembleMember_List(s *capnp.Segment, sz int32) (EnsembleMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return EnsembleMember_List{l}, err
}

func (s EnsembleMember_List) At(i int) EnsembleMember { return EnsembleMember{s.List.Struct(i)} }

func (s EnsembleMember_List) Set(i int, v EnsembleMember) error { return s.List.SetStruct(i, v.Struct) }

func (s EnsembleMember_List) String() string {
	str, _ := text.MarshalList(0xc8caacd1cd5da434, s.List)
	return str
}

// EnsembleMember_Future is a wrapper for a EnsembleMember promised by a client call.
type EnsembleMember_Future struct{ *capnp.Future }

func (p EnsembleMember_Future) Struct() (EnsembleMember, error) {
	s, err := p.Future.Struct()
	return EnsembleMember{s}, err
}

type Metadata struct{ capnp.Struct }

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0xfb36d2e966556db0

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata{st}, err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata{st}, err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.Root()
	return Metadata{root.Struct()}, err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0xfb36d2e966556db0, s.Struct)
	return str
}

func (s Metadata) Entries() (Metadata_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Metadata_Entry_List{List: p.List()}, err
}

func (s Metadata) HasEntries() bool {
	return s.Struct.HasPtr(0)
}

func (s Metadata) SetEntries(v Metadata_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Metadata_Entry_List, preferring placement in s's segment.
func (s Metadata) NewEntries(n int32) (Metadata_Entry_List, error) {
	l, err := NewMetadata_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Metadata_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Metadata) Info() Metadata_Information {
	p, _ := s.Struct.Ptr(1)
	return Metadata_Information{Client: p.Interface().Client()}
}

func (s Metadata) HasInfo() bool {
	return s.Struct.HasPtr(1)
}

func (s Metadata) SetInfo(v Metadata_Information) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Metadata_List is a list of Metadata.
type Metadata_List struct{ capnp.List }

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Metadata_List{l}, err
}

func (s Metadata_List) At(i int) Metadata { return Metadata{s.List.Struct(i)} }

func (s Metadata_List) Set(i int, v Metadata) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_List) String() string {
	str, _ := text.MarshalList(0xfb36d2e966556db0, s.List)
	return str
}

// Metadata_Future is a wrapper for a Metadata promised by a client call.
type Metadata_Future struct{ *capnp.Future }

func (p Metadata_Future) Struct() (Metadata, error) {
	s, err := p.Future.Struct()
	return Metadata{s}, err
}

func (p Metadata_Future) Info() Metadata_Information {
	return Metadata_Information{Client: p.Future.Field(1, nil).Client()}
}

type Metadata_Supported struct{ Client *capnp.Client }

// Metadata_Supported_TypeID is the unique identifier for the type Metadata_Supported.
const Metadata_Supported_TypeID = 0xab06444b30722e01

func (c Metadata_Supported) Categories(ctx context.Context, params func(Metadata_Supported_categories_Params) error) (Metadata_Supported_categories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_categories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Metadata_Supported_categories_Results_Future{Future: ans.Future()}, release
}
func (c Metadata_Supported) SupportedValues(ctx context.Context, params func(Metadata_Supported_supportedValues_Params) error) (Metadata_Supported_supportedValues_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_supportedValues_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Metadata_Supported_supportedValues_Results_Future{Future: ans.Future()}, release
}

func (c Metadata_Supported) AddRef() Metadata_Supported {
	return Metadata_Supported{
		Client: c.Client.AddRef(),
	}
}

func (c Metadata_Supported) Release() {
	c.Client.Release()
}

// A Metadata_Supported_Server is a Metadata_Supported with a local implementation.
type Metadata_Supported_Server interface {
	Categories(context.Context, Metadata_Supported_categories) error

	SupportedValues(context.Context, Metadata_Supported_supportedValues) error
}

// Metadata_Supported_NewServer creates a new Server from an implementation of Metadata_Supported_Server.
func Metadata_Supported_NewServer(s Metadata_Supported_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Supported_Methods(nil, s), s, c, policy)
}

// Metadata_Supported_ServerToClient creates a new Client from an implementation of Metadata_Supported_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Supported_ServerToClient(s Metadata_Supported_Server, policy *server.Policy) Metadata_Supported {
	return Metadata_Supported{Client: capnp.NewClient(Metadata_Supported_NewServer(s, policy))}
}

// Metadata_Supported_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Supported_Methods(methods []server.Method, s Metadata_Supported_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Categories(ctx, Metadata_Supported_categories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedValues(ctx, Metadata_Supported_supportedValues{call})
		},
	})

	return methods
}

// Metadata_Supported_categories holds the state for a server call to Metadata_Supported.categories.
// See server.Call for documentation.
type Metadata_Supported_categories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_categories) Args() Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_categories) AllocResults() (Metadata_Supported_categories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results{Struct: r}, err
}

// Metadata_Supported_supportedValues holds the state for a server call to Metadata_Supported.supportedValues.
// See server.Call for documentation.
type Metadata_Supported_supportedValues struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_supportedValues) Args() Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_supportedValues) AllocResults() (Metadata_Supported_supportedValues_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results{Struct: r}, err
}

type Metadata_Supported_categories_Params struct{ capnp.Struct }

// Metadata_Supported_categories_Params_TypeID is the unique identifier for the type Metadata_Supported_categories_Params.
const Metadata_Supported_categories_Params_TypeID = 0x95887677293b5682

func NewMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params{st}, err
}

func NewRootMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params{st}, err
}

func ReadRootMetadata_Supported_categories_Params(msg *capnp.Message) (Metadata_Supported_categories_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Params{root.Struct()}, err
}

func (s Metadata_Supported_categories_Params) String() string {
	str, _ := text.Marshal(0x95887677293b5682, s.Struct)
	return str
}

// Metadata_Supported_categories_Params_List is a list of Metadata_Supported_categories_Params.
type Metadata_Supported_categories_Params_List struct{ capnp.List }

// NewMetadata_Supported_categories_Params creates a new list of Metadata_Supported_categories_Params.
func NewMetadata_Supported_categories_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Metadata_Supported_categories_Params_List{l}, err
}

func (s Metadata_Supported_categories_Params_List) At(i int) Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params{s.List.Struct(i)}
}

func (s Metadata_Supported_categories_Params_List) Set(i int, v Metadata_Supported_categories_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Supported_categories_Params_List) String() string {
	str, _ := text.MarshalList(0x95887677293b5682, s.List)
	return str
}

// Metadata_Supported_categories_Params_Future is a wrapper for a Metadata_Supported_categories_Params promised by a client call.
type Metadata_Supported_categories_Params_Future struct{ *capnp.Future }

func (p Metadata_Supported_categories_Params_Future) Struct() (Metadata_Supported_categories_Params, error) {
	s, err := p.Future.Struct()
	return Metadata_Supported_categories_Params{s}, err
}

type Metadata_Supported_categories_Results struct{ capnp.Struct }

// Metadata_Supported_categories_Results_TypeID is the unique identifier for the type Metadata_Supported_categories_Results.
const Metadata_Supported_categories_Results_TypeID = 0xe49e838ea9c34b40

func NewMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results{st}, err
}

func NewRootMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results{st}, err
}

func ReadRootMetadata_Supported_categories_Results(msg *capnp.Message) (Metadata_Supported_categories_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Results{root.Struct()}, err
}

func (s Metadata_Supported_categories_Results) String() string {
	str, _ := text.Marshal(0xe49e838ea9c34b40, s.Struct)
	return str
}

func (s Metadata_Supported_categories_Results) Types() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Metadata_Supported_categories_Results) HasTypes() bool {
	return s.Struct.HasPtr(0)
}

func (s Metadata_Supported_categories_Results) SetTypes(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_categories_Results) NewTypes(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Metadata_Supported_categories_Results_List is a list of Metadata_Supported_categories_Results.
type Metadata_Supported_categories_Results_List struct{ capnp.List }

// NewMetadata_Supported_categories_Results creates a new list of Metadata_Supported_categories_Results.
func NewMetadata_Supported_categories_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Metadata_Supported_categories_Results_List{l}, err
}

func (s Metadata_Supported_categories_Results_List) At(i int) Metadata_Supported_categories_Results {
	return Metadata_Supported_categories_Results{s.List.Struct(i)}
}

func (s Metadata_Supported_categories_Results_List) Set(i int, v Metadata_Supported_categories_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Supported_categories_Results_List) String() string {
	str, _ := text.MarshalList(0xe49e838ea9c34b40, s.List)
	return str
}

// Metadata_Supported_categories_Results_Future is a wrapper for a Metadata_Supported_categories_Results promised by a client call.
type Metadata_Supported_categories_Results_Future struct{ *capnp.Future }

func (p Metadata_Supported_categories_Results_Future) Struct() (Metadata_Supported_categories_Results, error) {
	s, err := p.Future.Struct()
	return Metadata_Supported_categories_Results{s}, err
}

type Metadata_Supported_supportedValues_Params struct{ capnp.Struct }

// Metadata_Supported_supportedValues_Params_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Params.
const Metadata_Supported_supportedValues_Params_TypeID = 0xc6d2329c05f7e208

func NewMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params{st}, err
}

func NewRootMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params{st}, err
}

func ReadRootMetadata_Supported_supportedValues_Params(msg *capnp.Message) (Metadata_Supported_supportedValues_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Params{root.Struct()}, err
}

func (s Metadata_Supported_supportedValues_Params) String() string {
	str, _ := text.Marshal(0xc6d2329c05f7e208, s.Struct)
	return str
}

func (s Metadata_Supported_supportedValues_Params) TypeId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Metadata_Supported_supportedValues_Params) HasTypeId() bool {
	return s.Struct.HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Params) TypeIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Supported_supportedValues_Params) SetTypeId(v string) error {
	return s.Struct.SetText(0, v)
}

// Metadata_Supported_supportedValues_Params_List is a list of Metadata_Supported_supportedValues_Params.
type Metadata_Supported_supportedValues_Params_List struct{ capnp.List }

// NewMetadata_Supported_supportedValues_Params creates a new list of Metadata_Supported_supportedValues_Params.
func NewMetadata_Supported_supportedValues_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Metadata_Supported_supportedValues_Params_List{l}, err
}

func (s Metadata_Supported_supportedValues_Params_List) At(i int) Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params{s.List.Struct(i)}
}

func (s Metadata_Supported_supportedValues_Params_List) Set(i int, v Metadata_Supported_supportedValues_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Supported_supportedValues_Params_List) String() string {
	str, _ := text.MarshalList(0xc6d2329c05f7e208, s.List)
	return str
}

// Metadata_Supported_supportedValues_Params_Future is a wrapper for a Metadata_Supported_supportedValues_Params promised by a client call.
type Metadata_Supported_supportedValues_Params_Future struct{ *capnp.Future }

func (p Metadata_Supported_supportedValues_Params_Future) Struct() (Metadata_Supported_supportedValues_Params, error) {
	s, err := p.Future.Struct()
	return Metadata_Supported_supportedValues_Params{s}, err
}

type Metadata_Supported_supportedValues_Results struct{ capnp.Struct }

// Metadata_Supported_supportedValues_Results_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Results.
const Metadata_Supported_supportedValues_Results_TypeID = 0xe0a71ff36670f715

func NewMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results{st}, err
}

func NewRootMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results{st}, err
}

func ReadRootMetadata_Supported_supportedValues_Results(msg *capnp.Message) (Metadata_Supported_supportedValues_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Results{root.Struct()}, err
}

func (s Metadata_Supported_supportedValues_Results) String() string {
	str, _ := text.Marshal(0xe0a71ff36670f715, s.Struct)
	return str
}

func (s Metadata_Supported_supportedValues_Results) Values() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Metadata_Supported_supportedValues_Results) HasValues() bool {
	return s.Struct.HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Results) SetValues(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_supportedValues_Results) NewValues(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Metadata_Supported_supportedValues_Results_List is a list of Metadata_Supported_supportedValues_Results.
type Metadata_Supported_supportedValues_Results_List struct{ capnp.List }

// NewMetadata_Supported_supportedValues_Results creates a new list of Metadata_Supported_supportedValues_Results.
func NewMetadata_Supported_supportedValues_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Metadata_Supported_supportedValues_Results_List{l}, err
}

func (s Metadata_Supported_supportedValues_Results_List) At(i int) Metadata_Supported_supportedValues_Results {
	return Metadata_Supported_supportedValues_Results{s.List.Struct(i)}
}

func (s Metadata_Supported_supportedValues_Results_List) Set(i int, v Metadata_Supported_supportedValues_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Supported_supportedValues_Results_List) String() string {
	str, _ := text.MarshalList(0xe0a71ff36670f715, s.List)
	return str
}

// Metadata_Supported_supportedValues_Results_Future is a wrapper for a Metadata_Supported_supportedValues_Results promised by a client call.
type Metadata_Supported_supportedValues_Results_Future struct{ *capnp.Future }

func (p Metadata_Supported_supportedValues_Results_Future) Struct() (Metadata_Supported_supportedValues_Results, error) {
	s, err := p.Future.Struct()
	return Metadata_Supported_supportedValues_Results{s}, err
}

type Metadata_Value struct{ capnp.Struct }
type Metadata_Value_Which uint16

const (
	Metadata_Value_Which_text  Metadata_Value_Which = 0
	Metadata_Value_Which_float Metadata_Value_Which = 1
	Metadata_Value_Which_int   Metadata_Value_Which = 2
	Metadata_Value_Which_bool  Metadata_Value_Which = 3
	Metadata_Value_Which_date  Metadata_Value_Which = 4
)

func (w Metadata_Value_Which) String() string {
	const s = "textfloatintbooldate"
	switch w {
	case Metadata_Value_Which_text:
		return s[0:4]
	case Metadata_Value_Which_float:
		return s[4:9]
	case Metadata_Value_Which_int:
		return s[9:12]
	case Metadata_Value_Which_bool:
		return s[12:16]
	case Metadata_Value_Which_date:
		return s[16:20]

	}
	return "Metadata_Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Value_TypeID is the unique identifier for the type Metadata_Value.
const Metadata_Value_TypeID = 0xc48e24c968a234db

func NewMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value{st}, err
}

func NewRootMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value{st}, err
}

func ReadRootMetadata_Value(msg *capnp.Message) (Metadata_Value, error) {
	root, err := msg.Root()
	return Metadata_Value{root.Struct()}, err
}

func (s Metadata_Value) String() string {
	str, _ := text.Marshal(0xc48e24c968a234db, s.Struct)
	return str
}

func (s Metadata_Value) Which() Metadata_Value_Which {
	return Metadata_Value_Which(s.Struct.Uint16(0))
}
func (s Metadata_Value) Text() (string, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Metadata_Value) HasText() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Value) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Value) SetText(v string) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetText(0, v)
}

func (s Metadata_Value) Float() float64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != float")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Metadata_Value) SetFloat(v float64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Metadata_Value) Int() int64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != int")
	}
	return int64(s.Struct.Uint64(8))
}

func (s Metadata_Value) SetInt(v int64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, uint64(v))
}

func (s Metadata_Value) Bool() bool {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != bool")
	}
	return s.Struct.Bit(64)
}

func (s Metadata_Value) SetBool(v bool) {
	s.Struct.SetUint16(0, 3)
	s.Struct.SetBit(64, v)
}

func (s Metadata_Value) Date() (common.Date, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != date")
	}
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s Metadata_Value) HasDate() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Value) SetDate(v common.Date) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Metadata_Value) NewDate() (common.Date, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Metadata_Value_List is a list of Metadata_Value.
type Metadata_Value_List struct{ capnp.List }

// NewMetadata_Value creates a new list of Metadata_Value.
func NewMetadata_Value_List(s *capnp.Segment, sz int32) (Metadata_Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Metadata_Value_List{l}, err
}

func (s Metadata_Value_List) At(i int) Metadata_Value { return Metadata_Value{s.List.Struct(i)} }

func (s Metadata_Value_List) Set(i int, v Metadata_Value) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_Value_List) String() string {
	str, _ := text.MarshalList(0xc48e24c968a234db, s.List)
	return str
}

// Metadata_Value_Future is a wrapper for a Metadata_Value promised by a client call.
type Metadata_Value_Future struct{ *capnp.Future }

func (p Metadata_Value_Future) Struct() (Metadata_Value, error) {
	s, err := p.Future.Struct()
	return Metadata_Value{s}, err
}

func (p Metadata_Value_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Entry struct{ capnp.Struct }
type Metadata_Entry_Which uint16

const (
	Metadata_Entry_Which_gcm         Metadata_Entry_Which = 0
	Metadata_Entry_Which_rcm         Metadata_Entry_Which = 1
	Metadata_Entry_Which_historical  Metadata_Entry_Which = 2
	Metadata_Entry_Which_rcp         Metadata_Entry_Which = 3
	Metadata_Entry_Which_ssp         Metadata_Entry_Which = 4
	Metadata_Entry_Which_ensMem      Metadata_Entry_Which = 5
	Metadata_Entry_Which_version     Metadata_Entry_Which = 6
	Metadata_Entry_Which_start       Metadata_Entry_Which = 7
	Metadata_Entry_Which_end         Metadata_Entry_Which = 8
	Metadata_Entry_Which_co2         Metadata_Entry_Which = 9
	Metadata_Entry_Which_picontrol   Metadata_Entry_Which = 10
	Metadata_Entry_Which_description Metadata_Entry_Which = 11
)

func (w Metadata_Entry_Which) String() string {
	const s = "gcmrcmhistoricalrcpsspensMemversionstartendco2picontroldescription"
	switch w {
	case Metadata_Entry_Which_gcm:
		return s[0:3]
	case Metadata_Entry_Which_rcm:
		return s[3:6]
	case Metadata_Entry_Which_historical:
		return s[6:16]
	case Metadata_Entry_Which_rcp:
		return s[16:19]
	case Metadata_Entry_Which_ssp:
		return s[19:22]
	case Metadata_Entry_Which_ensMem:
		return s[22:28]
	case Metadata_Entry_Which_version:
		return s[28:35]
	case Metadata_Entry_Which_start:
		return s[35:40]
	case Metadata_Entry_Which_end:
		return s[40:43]
	case Metadata_Entry_Which_co2:
		return s[43:46]
	case Metadata_Entry_Which_picontrol:
		return s[46:55]
	case Metadata_Entry_Which_description:
		return s[55:66]

	}
	return "Metadata_Entry_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Entry_TypeID is the unique identifier for the type Metadata_Entry.
const Metadata_Entry_TypeID = 0x85af7fea06d0820c

func NewMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry{st}, err
}

func NewRootMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry{st}, err
}

func ReadRootMetadata_Entry(msg *capnp.Message) (Metadata_Entry, error) {
	root, err := msg.Root()
	return Metadata_Entry{root.Struct()}, err
}

func (s Metadata_Entry) String() string {
	str, _ := text.Marshal(0x85af7fea06d0820c, s.Struct)
	return str
}

func (s Metadata_Entry) Which() Metadata_Entry_Which {
	return Metadata_Entry_Which(s.Struct.Uint16(2))
}
func (s Metadata_Entry) Gcm() GCM {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != gcm")
	}
	return GCM(s.Struct.Uint16(0))
}

func (s Metadata_Entry) SetGcm(v GCM) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Rcm() RCM {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != rcm")
	}
	return RCM(s.Struct.Uint16(0))
}

func (s Metadata_Entry) SetRcm(v RCM) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Metadata_Entry) SetHistorical() {
	s.Struct.SetUint16(2, 2)

}

func (s Metadata_Entry) Rcp() RCP {
	if s.Struct.Uint16(2) != 3 {
		panic("Which() != rcp")
	}
	return RCP(s.Struct.Uint16(0))
}

func (s Metadata_Entry) SetRcp(v RCP) {
	s.Struct.SetUint16(2, 3)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Ssp() SSP {
	if s.Struct.Uint16(2) != 4 {
		panic("Which() != ssp")
	}
	return SSP(s.Struct.Uint16(0))
}

func (s Metadata_Entry) SetSsp(v SSP) {
	s.Struct.SetUint16(2, 4)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Metadata_Entry) EnsMem() (EnsembleMember, error) {
	if s.Struct.Uint16(2) != 5 {
		panic("Which() != ensMem")
	}
	p, err := s.Struct.Ptr(0)
	return EnsembleMember{Struct: p.Struct()}, err
}

func (s Metadata_Entry) HasEnsMem() bool {
	if s.Struct.Uint16(2) != 5 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Entry) SetEnsMem(v EnsembleMember) error {
	s.Struct.SetUint16(2, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnsMem sets the ensMem field to a newly
// allocated EnsembleMember struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnsMem() (EnsembleMember, error) {
	s.Struct.SetUint16(2, 5)
	ss, err := NewEnsembleMember(s.Struct.Segment())
	if err != nil {
		return EnsembleMember{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_Entry) Version() (string, error) {
	if s.Struct.Uint16(2) != 6 {
		panic("Which() != version")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasVersion() bool {
	if s.Struct.Uint16(2) != 6 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Entry) VersionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetVersion(v string) error {
	s.Struct.SetUint16(2, 6)
	return s.Struct.SetText(0, v)
}

func (s Metadata_Entry) Start() (common.Date, error) {
	if s.Struct.Uint16(2) != 7 {
		panic("Which() != start")
	}
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s Metadata_Entry) HasStart() bool {
	if s.Struct.Uint16(2) != 7 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Entry) SetStart(v common.Date) error {
	s.Struct.SetUint16(2, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStart sets the start field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewStart() (common.Date, error) {
	s.Struct.SetUint16(2, 7)
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_Entry) End() (common.Date, error) {
	if s.Struct.Uint16(2) != 8 {
		panic("Which() != end")
	}
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s Metadata_Entry) HasEnd() bool {
	if s.Struct.Uint16(2) != 8 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Entry) SetEnd(v common.Date) error {
	s.Struct.SetUint16(2, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnd() (common.Date, error) {
	s.Struct.SetUint16(2, 8)
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Metadata_Entry) Co2() float32 {
	if s.Struct.Uint16(2) != 9 {
		panic("Which() != co2")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Metadata_Entry) SetCo2(v float32) {
	s.Struct.SetUint16(2, 9)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Metadata_Entry) SetPicontrol() {
	s.Struct.SetUint16(2, 10)

}

func (s Metadata_Entry) Description() (string, error) {
	if s.Struct.Uint16(2) != 11 {
		panic("Which() != description")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasDescription() bool {
	if s.Struct.Uint16(2) != 11 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Metadata_Entry) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetDescription(v string) error {
	s.Struct.SetUint16(2, 11)
	return s.Struct.SetText(0, v)
}

// Metadata_Entry_List is a list of Metadata_Entry.
type Metadata_Entry_List struct{ capnp.List }

// NewMetadata_Entry creates a new list of Metadata_Entry.
func NewMetadata_Entry_List(s *capnp.Segment, sz int32) (Metadata_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Metadata_Entry_List{l}, err
}

func (s Metadata_Entry_List) At(i int) Metadata_Entry { return Metadata_Entry{s.List.Struct(i)} }

func (s Metadata_Entry_List) Set(i int, v Metadata_Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Metadata_Entry_List) String() string {
	str, _ := text.MarshalList(0x85af7fea06d0820c, s.List)
	return str
}

// Metadata_Entry_Future is a wrapper for a Metadata_Entry promised by a client call.
type Metadata_Entry_Future struct{ *capnp.Future }

func (p Metadata_Entry_Future) Struct() (Metadata_Entry, error) {
	s, err := p.Future.Struct()
	return Metadata_Entry{s}, err
}

func (p Metadata_Entry_Future) EnsMem() EnsembleMember_Future {
	return EnsembleMember_Future{Future: p.Future.Field(0, nil)}
}

func (p Metadata_Entry_Future) Start() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

func (p Metadata_Entry_Future) End() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information struct{ Client *capnp.Client }

// Metadata_Information_TypeID is the unique identifier for the type Metadata_Information.
const Metadata_Information_TypeID = 0xc781edeab8160cb7

func (c Metadata_Information) ForOne(ctx context.Context, params func(Metadata_Information_forOne_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forOne_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Metadata_Information) ForAll(ctx context.Context, params func(Metadata_Information_forAll_Params) error) (Metadata_Information_forAll_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forAll_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Metadata_Information_forAll_Results_Future{Future: ans.Future()}, release
}

func (c Metadata_Information) AddRef() Metadata_Information {
	return Metadata_Information{
		Client: c.Client.AddRef(),
	}
}

func (c Metadata_Information) Release() {
	c.Client.Release()
}

// A Metadata_Information_Server is a Metadata_Information with a local implementation.
type Metadata_Information_Server interface {
	ForOne(context.Context, Metadata_Information_forOne) error

	ForAll(context.Context, Metadata_Information_forAll) error
}

// Metadata_Information_NewServer creates a new Server from an implementation of Metadata_Information_Server.
func Metadata_Information_NewServer(s Metadata_Information_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Information_Methods(nil, s), s, c, policy)
}

// Metadata_Information_ServerToClient creates a new Client from an implementation of Metadata_Information_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Information_ServerToClient(s Metadata_Information_Server, policy *server.Policy) Metadata_Information {
	return Metadata_Information{Client: capnp.NewClient(Metadata_Information_NewServer(s, policy))}
}

// Metadata_Information_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Information_Methods(methods []server.Method, s Metadata_Information_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForOne(ctx, Metadata_Information_forOne{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForAll(ctx, Metadata_Information_forAll{call})
		},
	})

	return methods
}

// Metadata_Information_forOne holds the state for a server call to Metadata_Information.forOne.
// See server.Call for documentation.
type Metadata_Information_forOne struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forOne) Args() Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forOne) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// Metadata_Information_forAll holds the state for a server call to Metadata_Information.forAll.
// See server.Call for documentation.
type Metadata_Information_forAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forAll) Args() Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forAll) AllocResults() (Metadata_Information_forAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results{Struct: r}, err
}

type Metadata_Information_forOne_Params struct{ capnp.Struct }

// Metadata_Information_forOne_Params_TypeID is the unique identifier for the type Metadata_Information_forOne_Params.
const Metadata_Information_forOne_Params_TypeID = 0xdf705ef1e0b7d506

func NewMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params{st}, err
}

func NewRootMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params{st}, err
}

func ReadRootMetadata_Information_forOne_Params(msg *capnp.Message) (Metadata_Information_forOne_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forOne_Params{root.Struct()}, err
}

func (s Metadata_Information_forOne_Params) String() string {
	str, _ := text.Marshal(0xdf705ef1e0b7d506, s.Struct)
	return str
}

func (s Metadata_Information_forOne_Params) Entry() (Metadata_Entry, error) {
	p, err := s.Struct.Ptr(0)
	return Metadata_Entry{Struct: p.Struct()}, err
}

func (s Metadata_Information_forOne_Params) HasEntry() bool {
	return s.Struct.HasPtr(0)
}

func (s Metadata_Information_forOne_Params) SetEntry(v Metadata_Entry) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated Metadata_Entry struct, preferring placement in s's segment.
func (s Metadata_Information_forOne_Params) NewEntry() (Metadata_Entry, error) {
	ss, err := NewMetadata_Entry(s.Struct.Segment())
	if err != nil {
		return Metadata_Entry{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Metadata_Information_forOne_Params_List is a list of Metadata_Information_forOne_Params.
type Metadata_Information_forOne_Params_List struct{ capnp.List }

// NewMetadata_Information_forOne_Params creates a new list of Metadata_Information_forOne_Params.
func NewMetadata_Information_forOne_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forOne_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Metadata_Information_forOne_Params_List{l}, err
}

func (s Metadata_Information_forOne_Params_List) At(i int) Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params{s.List.Struct(i)}
}

func (s Metadata_Information_forOne_Params_List) Set(i int, v Metadata_Information_forOne_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Information_forOne_Params_List) String() string {
	str, _ := text.MarshalList(0xdf705ef1e0b7d506, s.List)
	return str
}

// Metadata_Information_forOne_Params_Future is a wrapper for a Metadata_Information_forOne_Params promised by a client call.
type Metadata_Information_forOne_Params_Future struct{ *capnp.Future }

func (p Metadata_Information_forOne_Params_Future) Struct() (Metadata_Information_forOne_Params, error) {
	s, err := p.Future.Struct()
	return Metadata_Information_forOne_Params{s}, err
}

func (p Metadata_Information_forOne_Params_Future) Entry() Metadata_Entry_Future {
	return Metadata_Entry_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information_forAll_Params struct{ capnp.Struct }

// Metadata_Information_forAll_Params_TypeID is the unique identifier for the type Metadata_Information_forAll_Params.
const Metadata_Information_forAll_Params_TypeID = 0xe246d49c91fa330a

func NewMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params{st}, err
}

func NewRootMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params{st}, err
}

func ReadRootMetadata_Information_forAll_Params(msg *capnp.Message) (Metadata_Information_forAll_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Params{root.Struct()}, err
}

func (s Metadata_Information_forAll_Params) String() string {
	str, _ := text.Marshal(0xe246d49c91fa330a, s.Struct)
	return str
}

// Metadata_Information_forAll_Params_List is a list of Metadata_Information_forAll_Params.
type Metadata_Information_forAll_Params_List struct{ capnp.List }

// NewMetadata_Information_forAll_Params creates a new list of Metadata_Information_forAll_Params.
func NewMetadata_Information_forAll_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Metadata_Information_forAll_Params_List{l}, err
}

func (s Metadata_Information_forAll_Params_List) At(i int) Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params{s.List.Struct(i)}
}

func (s Metadata_Information_forAll_Params_List) Set(i int, v Metadata_Information_forAll_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Information_forAll_Params_List) String() string {
	str, _ := text.MarshalList(0xe246d49c91fa330a, s.List)
	return str
}

// Metadata_Information_forAll_Params_Future is a wrapper for a Metadata_Information_forAll_Params promised by a client call.
type Metadata_Information_forAll_Params_Future struct{ *capnp.Future }

func (p Metadata_Information_forAll_Params_Future) Struct() (Metadata_Information_forAll_Params, error) {
	s, err := p.Future.Struct()
	return Metadata_Information_forAll_Params{s}, err
}

type Metadata_Information_forAll_Results struct{ capnp.Struct }

// Metadata_Information_forAll_Results_TypeID is the unique identifier for the type Metadata_Information_forAll_Results.
const Metadata_Information_forAll_Results_TypeID = 0x9f35030ba55fed78

func NewMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results{st}, err
}

func NewRootMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results{st}, err
}

func ReadRootMetadata_Information_forAll_Results(msg *capnp.Message) (Metadata_Information_forAll_Results, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Results{root.Struct()}, err
}

func (s Metadata_Information_forAll_Results) String() string {
	str, _ := text.Marshal(0x9f35030ba55fed78, s.Struct)
	return str
}

func (s Metadata_Information_forAll_Results) All() (common.Pair_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.Pair_List{List: p.List()}, err
}

func (s Metadata_Information_forAll_Results) HasAll() bool {
	return s.Struct.HasPtr(0)
}

func (s Metadata_Information_forAll_Results) SetAll(v common.Pair_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAll sets the all field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Metadata_Information_forAll_Results) NewAll(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(s.Struct.Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Metadata_Information_forAll_Results_List is a list of Metadata_Information_forAll_Results.
type Metadata_Information_forAll_Results_List struct{ capnp.List }

// NewMetadata_Information_forAll_Results creates a new list of Metadata_Information_forAll_Results.
func NewMetadata_Information_forAll_Results_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Metadata_Information_forAll_Results_List{l}, err
}

func (s Metadata_Information_forAll_Results_List) At(i int) Metadata_Information_forAll_Results {
	return Metadata_Information_forAll_Results{s.List.Struct(i)}
}

func (s Metadata_Information_forAll_Results_List) Set(i int, v Metadata_Information_forAll_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Metadata_Information_forAll_Results_List) String() string {
	str, _ := text.MarshalList(0x9f35030ba55fed78, s.List)
	return str
}

// Metadata_Information_forAll_Results_Future is a wrapper for a Metadata_Information_forAll_Results promised by a client call.
type Metadata_Information_forAll_Results_Future struct{ *capnp.Future }

func (p Metadata_Information_forAll_Results_Future) Struct() (Metadata_Information_forAll_Results, error) {
	s, err := p.Future.Struct()
	return Metadata_Information_forAll_Results{s}, err
}

type Dataset struct{ Client *capnp.Client }

// Dataset_TypeID is the unique identifier for the type Dataset.
const Dataset_TypeID = 0xf635fdd1f05960f0

func (c Dataset) Metadata(ctx context.Context, params func(Dataset_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_metadata_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release
}
func (c Dataset) ClosestTimeSeriesAt(ctx context.Context, params func(Dataset_closestTimeSeriesAt_Params) error) (Dataset_closestTimeSeriesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_closestTimeSeriesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Dataset_closestTimeSeriesAt_Results_Future{Future: ans.Future()}, release
}
func (c Dataset) TimeSeriesAt(ctx context.Context, params func(Dataset_timeSeriesAt_Params) error) (Dataset_timeSeriesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_timeSeriesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Dataset_timeSeriesAt_Results_Future{Future: ans.Future()}, release
}
func (c Dataset) Locations(ctx context.Context, params func(Dataset_locations_Params) error) (Dataset_locations_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "locations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_locations_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Dataset_locations_Results_Future{Future: ans.Future()}, release
}

func (c Dataset) AddRef() Dataset {
	return Dataset{
		Client: c.Client.AddRef(),
	}
}

func (c Dataset) Release() {
	c.Client.Release()
}

// A Dataset_Server is a Dataset with a local implementation.
type Dataset_Server interface {
	Metadata(context.Context, Dataset_metadata) error

	ClosestTimeSeriesAt(context.Context, Dataset_closestTimeSeriesAt) error

	TimeSeriesAt(context.Context, Dataset_timeSeriesAt) error

	Locations(context.Context, Dataset_locations) error
}

// Dataset_NewServer creates a new Server from an implementation of Dataset_Server.
func Dataset_NewServer(s Dataset_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_Methods(nil, s), s, c, policy)
}

// Dataset_ServerToClient creates a new Client from an implementation of Dataset_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_ServerToClient(s Dataset_Server, policy *server.Policy) Dataset {
	return Dataset{Client: capnp.NewClient(Dataset_NewServer(s, policy))}
}

// Dataset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_Methods(methods []server.Method, s Dataset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, Dataset_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestTimeSeriesAt(ctx, Dataset_closestTimeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TimeSeriesAt(ctx, Dataset_timeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:Dataset",
			MethodName:    "locations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locations(ctx, Dataset_locations{call})
		},
	})

	return methods
}

// Dataset_metadata holds the state for a server call to Dataset.metadata.
// See server.Call for documentation.
type Dataset_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_metadata) Args() Dataset_metadata_Params {
	return Dataset_metadata_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dataset_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata{Struct: r}, err
}

// Dataset_closestTimeSeriesAt holds the state for a server call to Dataset.closestTimeSeriesAt.
// See server.Call for documentation.
type Dataset_closestTimeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_closestTimeSeriesAt) Args() Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dataset_closestTimeSeriesAt) AllocResults() (Dataset_closestTimeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results{Struct: r}, err
}

// Dataset_timeSeriesAt holds the state for a server call to Dataset.timeSeriesAt.
// See server.Call for documentation.
type Dataset_timeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_timeSeriesAt) Args() Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dataset_timeSeriesAt) AllocResults() (Dataset_timeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results{Struct: r}, err
}

// Dataset_locations holds the state for a server call to Dataset.locations.
// See server.Call for documentation.
type Dataset_locations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_locations) Args() Dataset_locations_Params {
	return Dataset_locations_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dataset_locations) AllocResults() (Dataset_locations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results{Struct: r}, err
}

type Dataset_metadata_Params struct{ capnp.Struct }

// Dataset_metadata_Params_TypeID is the unique identifier for the type Dataset_metadata_Params.
const Dataset_metadata_Params_TypeID = 0xb4c346906ee84815

func NewDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params{st}, err
}

func NewRootDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params{st}, err
}

func ReadRootDataset_metadata_Params(msg *capnp.Message) (Dataset_metadata_Params, error) {
	root, err := msg.Root()
	return Dataset_metadata_Params{root.Struct()}, err
}

func (s Dataset_metadata_Params) String() string {
	str, _ := text.Marshal(0xb4c346906ee84815, s.Struct)
	return str
}

// Dataset_metadata_Params_List is a list of Dataset_metadata_Params.
type Dataset_metadata_Params_List struct{ capnp.List }

// NewDataset_metadata_Params creates a new list of Dataset_metadata_Params.
func NewDataset_metadata_Params_List(s *capnp.Segment, sz int32) (Dataset_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Dataset_metadata_Params_List{l}, err
}

func (s Dataset_metadata_Params_List) At(i int) Dataset_metadata_Params {
	return Dataset_metadata_Params{s.List.Struct(i)}
}

func (s Dataset_metadata_Params_List) Set(i int, v Dataset_metadata_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_metadata_Params_List) String() string {
	str, _ := text.MarshalList(0xb4c346906ee84815, s.List)
	return str
}

// Dataset_metadata_Params_Future is a wrapper for a Dataset_metadata_Params promised by a client call.
type Dataset_metadata_Params_Future struct{ *capnp.Future }

func (p Dataset_metadata_Params_Future) Struct() (Dataset_metadata_Params, error) {
	s, err := p.Future.Struct()
	return Dataset_metadata_Params{s}, err
}

type Dataset_closestTimeSeriesAt_Params struct{ capnp.Struct }

// Dataset_closestTimeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Params.
const Dataset_closestTimeSeriesAt_Params_TypeID = 0xb0496f3d284f4a13

func NewDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params{st}, err
}

func NewRootDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params{st}, err
}

func ReadRootDataset_closestTimeSeriesAt_Params(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Params{root.Struct()}, err
}

func (s Dataset_closestTimeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xb0496f3d284f4a13, s.Struct)
	return str
}

func (s Dataset_closestTimeSeriesAt_Params) Latlon() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Dataset_closestTimeSeriesAt_Params) HasLatlon() bool {
	return s.Struct.HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Params) SetLatlon(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Dataset_closestTimeSeriesAt_Params) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Dataset_closestTimeSeriesAt_Params_List is a list of Dataset_closestTimeSeriesAt_Params.
type Dataset_closestTimeSeriesAt_Params_List struct{ capnp.List }

// NewDataset_closestTimeSeriesAt_Params creates a new list of Dataset_closestTimeSeriesAt_Params.
func NewDataset_closestTimeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dataset_closestTimeSeriesAt_Params_List{l}, err
}

func (s Dataset_closestTimeSeriesAt_Params_List) At(i int) Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params{s.List.Struct(i)}
}

func (s Dataset_closestTimeSeriesAt_Params_List) Set(i int, v Dataset_closestTimeSeriesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_closestTimeSeriesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xb0496f3d284f4a13, s.List)
	return str
}

// Dataset_closestTimeSeriesAt_Params_Future is a wrapper for a Dataset_closestTimeSeriesAt_Params promised by a client call.
type Dataset_closestTimeSeriesAt_Params_Future struct{ *capnp.Future }

func (p Dataset_closestTimeSeriesAt_Params_Future) Struct() (Dataset_closestTimeSeriesAt_Params, error) {
	s, err := p.Future.Struct()
	return Dataset_closestTimeSeriesAt_Params{s}, err
}

func (p Dataset_closestTimeSeriesAt_Params_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

type Dataset_closestTimeSeriesAt_Results struct{ capnp.Struct }

// Dataset_closestTimeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Results.
const Dataset_closestTimeSeriesAt_Results_TypeID = 0xedee5faa03af6a1e

func NewDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results{st}, err
}

func NewRootDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results{st}, err
}

func ReadRootDataset_closestTimeSeriesAt_Results(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Results{root.Struct()}, err
}

func (s Dataset_closestTimeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xedee5faa03af6a1e, s.Struct)
	return str
}

func (s Dataset_closestTimeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s Dataset_closestTimeSeriesAt_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Dataset_closestTimeSeriesAt_Results_List is a list of Dataset_closestTimeSeriesAt_Results.
type Dataset_closestTimeSeriesAt_Results_List struct{ capnp.List }

// NewDataset_closestTimeSeriesAt_Results creates a new list of Dataset_closestTimeSeriesAt_Results.
func NewDataset_closestTimeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dataset_closestTimeSeriesAt_Results_List{l}, err
}

func (s Dataset_closestTimeSeriesAt_Results_List) At(i int) Dataset_closestTimeSeriesAt_Results {
	return Dataset_closestTimeSeriesAt_Results{s.List.Struct(i)}
}

func (s Dataset_closestTimeSeriesAt_Results_List) Set(i int, v Dataset_closestTimeSeriesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_closestTimeSeriesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xedee5faa03af6a1e, s.List)
	return str
}

// Dataset_closestTimeSeriesAt_Results_Future is a wrapper for a Dataset_closestTimeSeriesAt_Results promised by a client call.
type Dataset_closestTimeSeriesAt_Results_Future struct{ *capnp.Future }

func (p Dataset_closestTimeSeriesAt_Results_Future) Struct() (Dataset_closestTimeSeriesAt_Results, error) {
	s, err := p.Future.Struct()
	return Dataset_closestTimeSeriesAt_Results{s}, err
}

func (p Dataset_closestTimeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type Dataset_timeSeriesAt_Params struct{ capnp.Struct }

// Dataset_timeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Params.
const Dataset_timeSeriesAt_Params_TypeID = 0xd9f867b0a2a15d7f

func NewDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params{st}, err
}

func NewRootDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params{st}, err
}

func ReadRootDataset_timeSeriesAt_Params(msg *capnp.Message) (Dataset_timeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Params{root.Struct()}, err
}

func (s Dataset_timeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xd9f867b0a2a15d7f, s.Struct)
	return str
}

func (s Dataset_timeSeriesAt_Params) LocationId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Dataset_timeSeriesAt_Params) HasLocationId() bool {
	return s.Struct.HasPtr(0)
}

func (s Dataset_timeSeriesAt_Params) LocationIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_timeSeriesAt_Params) SetLocationId(v string) error {
	return s.Struct.SetText(0, v)
}

// Dataset_timeSeriesAt_Params_List is a list of Dataset_timeSeriesAt_Params.
type Dataset_timeSeriesAt_Params_List struct{ capnp.List }

// NewDataset_timeSeriesAt_Params creates a new list of Dataset_timeSeriesAt_Params.
func NewDataset_timeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dataset_timeSeriesAt_Params_List{l}, err
}

func (s Dataset_timeSeriesAt_Params_List) At(i int) Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params{s.List.Struct(i)}
}

func (s Dataset_timeSeriesAt_Params_List) Set(i int, v Dataset_timeSeriesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_timeSeriesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xd9f867b0a2a15d7f, s.List)
	return str
}

// Dataset_timeSeriesAt_Params_Future is a wrapper for a Dataset_timeSeriesAt_Params promised by a client call.
type Dataset_timeSeriesAt_Params_Future struct{ *capnp.Future }

func (p Dataset_timeSeriesAt_Params_Future) Struct() (Dataset_timeSeriesAt_Params, error) {
	s, err := p.Future.Struct()
	return Dataset_timeSeriesAt_Params{s}, err
}

type Dataset_timeSeriesAt_Results struct{ capnp.Struct }

// Dataset_timeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Results.
const Dataset_timeSeriesAt_Results_TypeID = 0xe30c466e5bc2735c

func NewDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results{st}, err
}

func NewRootDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results{st}, err
}

func ReadRootDataset_timeSeriesAt_Results(msg *capnp.Message) (Dataset_timeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Results{root.Struct()}, err
}

func (s Dataset_timeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xe30c466e5bc2735c, s.Struct)
	return str
}

func (s Dataset_timeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s Dataset_timeSeriesAt_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s Dataset_timeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Dataset_timeSeriesAt_Results_List is a list of Dataset_timeSeriesAt_Results.
type Dataset_timeSeriesAt_Results_List struct{ capnp.List }

// NewDataset_timeSeriesAt_Results creates a new list of Dataset_timeSeriesAt_Results.
func NewDataset_timeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dataset_timeSeriesAt_Results_List{l}, err
}

func (s Dataset_timeSeriesAt_Results_List) At(i int) Dataset_timeSeriesAt_Results {
	return Dataset_timeSeriesAt_Results{s.List.Struct(i)}
}

func (s Dataset_timeSeriesAt_Results_List) Set(i int, v Dataset_timeSeriesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_timeSeriesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xe30c466e5bc2735c, s.List)
	return str
}

// Dataset_timeSeriesAt_Results_Future is a wrapper for a Dataset_timeSeriesAt_Results promised by a client call.
type Dataset_timeSeriesAt_Results_Future struct{ *capnp.Future }

func (p Dataset_timeSeriesAt_Results_Future) Struct() (Dataset_timeSeriesAt_Results, error) {
	s, err := p.Future.Struct()
	return Dataset_timeSeriesAt_Results{s}, err
}

func (p Dataset_timeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type Dataset_locations_Params struct{ capnp.Struct }

// Dataset_locations_Params_TypeID is the unique identifier for the type Dataset_locations_Params.
const Dataset_locations_Params_TypeID = 0xd2a02e856c28d4ba

func NewDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params{st}, err
}

func NewRootDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params{st}, err
}

func ReadRootDataset_locations_Params(msg *capnp.Message) (Dataset_locations_Params, error) {
	root, err := msg.Root()
	return Dataset_locations_Params{root.Struct()}, err
}

func (s Dataset_locations_Params) String() string {
	str, _ := text.Marshal(0xd2a02e856c28d4ba, s.Struct)
	return str
}

// Dataset_locations_Params_List is a list of Dataset_locations_Params.
type Dataset_locations_Params_List struct{ capnp.List }

// NewDataset_locations_Params creates a new list of Dataset_locations_Params.
func NewDataset_locations_Params_List(s *capnp.Segment, sz int32) (Dataset_locations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Dataset_locations_Params_List{l}, err
}

func (s Dataset_locations_Params_List) At(i int) Dataset_locations_Params {
	return Dataset_locations_Params{s.List.Struct(i)}
}

func (s Dataset_locations_Params_List) Set(i int, v Dataset_locations_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_locations_Params_List) String() string {
	str, _ := text.MarshalList(0xd2a02e856c28d4ba, s.List)
	return str
}

// Dataset_locations_Params_Future is a wrapper for a Dataset_locations_Params promised by a client call.
type Dataset_locations_Params_Future struct{ *capnp.Future }

func (p Dataset_locations_Params_Future) Struct() (Dataset_locations_Params, error) {
	s, err := p.Future.Struct()
	return Dataset_locations_Params{s}, err
}

type Dataset_locations_Results struct{ capnp.Struct }

// Dataset_locations_Results_TypeID is the unique identifier for the type Dataset_locations_Results.
const Dataset_locations_Results_TypeID = 0xaa8cfcdc401d5fdd

func NewDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results{st}, err
}

func NewRootDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results{st}, err
}

func ReadRootDataset_locations_Results(msg *capnp.Message) (Dataset_locations_Results, error) {
	root, err := msg.Root()
	return Dataset_locations_Results{root.Struct()}, err
}

func (s Dataset_locations_Results) String() string {
	str, _ := text.Marshal(0xaa8cfcdc401d5fdd, s.Struct)
	return str
}

func (s Dataset_locations_Results) Locations() (Location_List, error) {
	p, err := s.Struct.Ptr(0)
	return Location_List{List: p.List()}, err
}

func (s Dataset_locations_Results) HasLocations() bool {
	return s.Struct.HasPtr(0)
}

func (s Dataset_locations_Results) SetLocations(v Location_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_locations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(s.Struct.Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Dataset_locations_Results_List is a list of Dataset_locations_Results.
type Dataset_locations_Results_List struct{ capnp.List }

// NewDataset_locations_Results creates a new list of Dataset_locations_Results.
func NewDataset_locations_Results_List(s *capnp.Segment, sz int32) (Dataset_locations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dataset_locations_Results_List{l}, err
}

func (s Dataset_locations_Results_List) At(i int) Dataset_locations_Results {
	return Dataset_locations_Results{s.List.Struct(i)}
}

func (s Dataset_locations_Results_List) Set(i int, v Dataset_locations_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dataset_locations_Results_List) String() string {
	str, _ := text.MarshalList(0xaa8cfcdc401d5fdd, s.List)
	return str
}

// Dataset_locations_Results_Future is a wrapper for a Dataset_locations_Results promised by a client call.
type Dataset_locations_Results_Future struct{ *capnp.Future }

func (p Dataset_locations_Results_Future) Struct() (Dataset_locations_Results, error) {
	s, err := p.Future.Struct()
	return Dataset_locations_Results{s}, err
}

type MetaPlusData struct{ capnp.Struct }

// MetaPlusData_TypeID is the unique identifier for the type MetaPlusData.
const MetaPlusData_TypeID = 0xd7a67fec5f22e5a0

func NewMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData{st}, err
}

func NewRootMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData{st}, err
}

func ReadRootMetaPlusData(msg *capnp.Message) (MetaPlusData, error) {
	root, err := msg.Root()
	return MetaPlusData{root.Struct()}, err
}

func (s MetaPlusData) String() string {
	str, _ := text.Marshal(0xd7a67fec5f22e5a0, s.Struct)
	return str
}

func (s MetaPlusData) Meta() (Metadata, error) {
	p, err := s.Struct.Ptr(0)
	return Metadata{Struct: p.Struct()}, err
}

func (s MetaPlusData) HasMeta() bool {
	return s.Struct.HasPtr(0)
}

func (s MetaPlusData) SetMeta(v Metadata) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s MetaPlusData) NewMeta() (Metadata, error) {
	ss, err := NewMetadata(s.Struct.Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MetaPlusData) Data() Dataset {
	p, _ := s.Struct.Ptr(1)
	return Dataset{Client: p.Interface().Client()}
}

func (s MetaPlusData) HasData() bool {
	return s.Struct.HasPtr(1)
}

func (s MetaPlusData) SetData(v Dataset) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// MetaPlusData_List is a list of MetaPlusData.
type MetaPlusData_List struct{ capnp.List }

// NewMetaPlusData creates a new list of MetaPlusData.
func NewMetaPlusData_List(s *capnp.Segment, sz int32) (MetaPlusData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return MetaPlusData_List{l}, err
}

func (s MetaPlusData_List) At(i int) MetaPlusData { return MetaPlusData{s.List.Struct(i)} }

func (s MetaPlusData_List) Set(i int, v MetaPlusData) error { return s.List.SetStruct(i, v.Struct) }

func (s MetaPlusData_List) String() string {
	str, _ := text.MarshalList(0xd7a67fec5f22e5a0, s.List)
	return str
}

// MetaPlusData_Future is a wrapper for a MetaPlusData promised by a client call.
type MetaPlusData_Future struct{ *capnp.Future }

func (p MetaPlusData_Future) Struct() (MetaPlusData, error) {
	s, err := p.Future.Struct()
	return MetaPlusData{s}, err
}

func (p MetaPlusData_Future) Meta() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}

func (p MetaPlusData_Future) Data() Dataset {
	return Dataset{Client: p.Future.Field(1, nil).Client()}
}

type Element uint16

// Element_TypeID is the unique identifier for the type Element.
const Element_TypeID = 0xe35760b4db5ab564

// Values of Element.
const (
	Element_tmin         Element = 0
	Element_tavg         Element = 1
	Element_tmax         Element = 2
	Element_precip       Element = 3
	Element_globrad      Element = 4
	Element_wind         Element = 5
	Element_sunhours     Element = 6
	Element_cloudamount  Element = 7
	Element_relhumid     Element = 8
	Element_airpress     Element = 9
	Element_vaporpress   Element = 10
	Element_co2          Element = 11
	Element_o3           Element = 12
	Element_et0          Element = 13
	Element_dewpointTemp Element = 14
)

// String returns the enum's constant name.
func (c Element) String() string {
	switch c {
	case Element_tmin:
		return "tmin"
	case Element_tavg:
		return "tavg"
	case Element_tmax:
		return "tmax"
	case Element_precip:
		return "precip"
	case Element_globrad:
		return "globrad"
	case Element_wind:
		return "wind"
	case Element_sunhours:
		return "sunhours"
	case Element_cloudamount:
		return "cloudamount"
	case Element_relhumid:
		return "relhumid"
	case Element_airpress:
		return "airpress"
	case Element_vaporpress:
		return "vaporpress"
	case Element_co2:
		return "co2"
	case Element_o3:
		return "o3"
	case Element_et0:
		return "et0"
	case Element_dewpointTemp:
		return "dewpointTemp"

	default:
		return ""
	}
}

// ElementFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ElementFromString(c string) Element {
	switch c {
	case "tmin":
		return Element_tmin
	case "tavg":
		return Element_tavg
	case "tmax":
		return Element_tmax
	case "precip":
		return Element_precip
	case "globrad":
		return Element_globrad
	case "wind":
		return Element_wind
	case "sunhours":
		return Element_sunhours
	case "cloudamount":
		return Element_cloudamount
	case "relhumid":
		return Element_relhumid
	case "airpress":
		return Element_airpress
	case "vaporpress":
		return Element_vaporpress
	case "co2":
		return Element_co2
	case "o3":
		return Element_o3
	case "et0":
		return Element_et0
	case "dewpointTemp":
		return Element_dewpointTemp

	default:
		return 0
	}
}

type Element_List struct{ capnp.List }

func NewElement_List(s *capnp.Segment, sz int32) (Element_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Element_List{l.List}, err
}

func (l Element_List) At(i int) Element {
	ul := capnp.UInt16List{List: l.List}
	return Element(ul.At(i))
}

func (l Element_List) Set(i int, v Element) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Location struct{ capnp.Struct }

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0x85ba7385f313fe19

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location{st}, err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location{st}, err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location{root.Struct()}, err
}

func (s Location) String() string {
	str, _ := text.Marshal(0x85ba7385f313fe19, s.Struct)
	return str
}

func (s Location) Id() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Location) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Location) SetId(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewId sets the id field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Location) NewId() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Location) HeightNN() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Location) SetHeightNN(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Location) Latlon() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(1)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Location) HasLatlon() bool {
	return s.Struct.HasPtr(1)
}

func (s Location) SetLatlon(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Location) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Location) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(2)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s Location) HasTimeSeries() bool {
	return s.Struct.HasPtr(2)
}

func (s Location) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(2, in.ToPtr())
}

// Location_List is a list of Location.
type Location_List struct{ capnp.List }

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Location_List{l}, err
}

func (s Location_List) At(i int) Location { return Location{s.List.Struct(i)} }

func (s Location_List) Set(i int, v Location) error { return s.List.SetStruct(i, v.Struct) }

func (s Location_List) String() string {
	str, _ := text.MarshalList(0x85ba7385f313fe19, s.List)
	return str
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (p Location_Future) Struct() (Location, error) {
	s, err := p.Future.Struct()
	return Location{s}, err
}

func (p Location_Future) Id() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

func (p Location_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(1, nil)}
}

func (p Location_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(2, nil).Client()}
}

type TimeSeries struct{ Client *capnp.Client }

// TimeSeries_TypeID is the unique identifier for the type TimeSeries.
const TimeSeries_TypeID = 0xa7769f40fe6e6de8

func (c TimeSeries) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release
}

func (c TimeSeries) AddRef() TimeSeries {
	return TimeSeries{
		Client: c.Client.AddRef(),
	}
}

func (c TimeSeries) Release() {
	c.Client.Release()
}

// A TimeSeries_Server is a TimeSeries with a local implementation.
type TimeSeries_Server interface {
	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error
}

// TimeSeries_NewServer creates a new Server from an implementation of TimeSeries_Server.
func TimeSeries_NewServer(s TimeSeries_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TimeSeries_Methods(nil, s), s, c, policy)
}

// TimeSeries_ServerToClient creates a new Client from an implementation of TimeSeries_Server.
// The caller is responsible for calling Release on the returned Client.
func TimeSeries_ServerToClient(s TimeSeries_Server, policy *server.Policy) TimeSeries {
	return TimeSeries{Client: capnp.NewClient(TimeSeries_NewServer(s, policy))}
}

// TimeSeries_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TimeSeries_Methods(methods []server.Method, s TimeSeries_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	return methods
}

// TimeSeries_resolution holds the state for a server call to TimeSeries.resolution.
// See server.Call for documentation.
type TimeSeries_resolution struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_resolution) Args() TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_resolution) AllocResults() (TimeSeries_resolution_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results{Struct: r}, err
}

// TimeSeries_range holds the state for a server call to TimeSeries.range.
// See server.Call for documentation.
type TimeSeries_range struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_range) Args() TimeSeries_range_Params {
	return TimeSeries_range_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_range) AllocResults() (TimeSeries_range_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results{Struct: r}, err
}

// TimeSeries_header holds the state for a server call to TimeSeries.header.
// See server.Call for documentation.
type TimeSeries_header struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_header) Args() TimeSeries_header_Params {
	return TimeSeries_header_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_header) AllocResults() (TimeSeries_header_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results{Struct: r}, err
}

// TimeSeries_data holds the state for a server call to TimeSeries.data.
// See server.Call for documentation.
type TimeSeries_data struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_data) Args() TimeSeries_data_Params {
	return TimeSeries_data_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_data) AllocResults() (TimeSeries_data_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results{Struct: r}, err
}

// TimeSeries_dataT holds the state for a server call to TimeSeries.dataT.
// See server.Call for documentation.
type TimeSeries_dataT struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_dataT) Args() TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_dataT) AllocResults() (TimeSeries_dataT_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results{Struct: r}, err
}

// TimeSeries_subrange holds the state for a server call to TimeSeries.subrange.
// See server.Call for documentation.
type TimeSeries_subrange struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subrange) Args() TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_subrange) AllocResults() (TimeSeries_subrange_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results{Struct: r}, err
}

// TimeSeries_subheader holds the state for a server call to TimeSeries.subheader.
// See server.Call for documentation.
type TimeSeries_subheader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subheader) Args() TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_subheader) AllocResults() (TimeSeries_subheader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results{Struct: r}, err
}

// TimeSeries_metadata holds the state for a server call to TimeSeries.metadata.
// See server.Call for documentation.
type TimeSeries_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_metadata) Args() TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata{Struct: r}, err
}

// TimeSeries_location holds the state for a server call to TimeSeries.location.
// See server.Call for documentation.
type TimeSeries_location struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_location) Args() TimeSeries_location_Params {
	return TimeSeries_location_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c TimeSeries_location) AllocResults() (Location, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Location{Struct: r}, err
}

type TimeSeries_Resolution uint16

// TimeSeries_Resolution_TypeID is the unique identifier for the type TimeSeries_Resolution.
const TimeSeries_Resolution_TypeID = 0xb466cacf63ec03c2

// Values of TimeSeries_Resolution.
const (
	TimeSeries_Resolution_daily  TimeSeries_Resolution = 0
	TimeSeries_Resolution_hourly TimeSeries_Resolution = 1
)

// String returns the enum's constant name.
func (c TimeSeries_Resolution) String() string {
	switch c {
	case TimeSeries_Resolution_daily:
		return "daily"
	case TimeSeries_Resolution_hourly:
		return "hourly"

	default:
		return ""
	}
}

// TimeSeries_ResolutionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TimeSeries_ResolutionFromString(c string) TimeSeries_Resolution {
	switch c {
	case "daily":
		return TimeSeries_Resolution_daily
	case "hourly":
		return TimeSeries_Resolution_hourly

	default:
		return 0
	}
}

type TimeSeries_Resolution_List struct{ capnp.List }

func NewTimeSeries_Resolution_List(s *capnp.Segment, sz int32) (TimeSeries_Resolution_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return TimeSeries_Resolution_List{l.List}, err
}

func (l TimeSeries_Resolution_List) At(i int) TimeSeries_Resolution {
	ul := capnp.UInt16List{List: l.List}
	return TimeSeries_Resolution(ul.At(i))
}

func (l TimeSeries_Resolution_List) Set(i int, v TimeSeries_Resolution) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type TimeSeries_resolution_Params struct{ capnp.Struct }

// TimeSeries_resolution_Params_TypeID is the unique identifier for the type TimeSeries_resolution_Params.
const TimeSeries_resolution_Params_TypeID = 0xea3f0519d272fdd1

func NewTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params{st}, err
}

func NewRootTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params{st}, err
}

func ReadRootTimeSeries_resolution_Params(msg *capnp.Message) (TimeSeries_resolution_Params, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Params{root.Struct()}, err
}

func (s TimeSeries_resolution_Params) String() string {
	str, _ := text.Marshal(0xea3f0519d272fdd1, s.Struct)
	return str
}

// TimeSeries_resolution_Params_List is a list of TimeSeries_resolution_Params.
type TimeSeries_resolution_Params_List struct{ capnp.List }

// NewTimeSeries_resolution_Params creates a new list of TimeSeries_resolution_Params.
func NewTimeSeries_resolution_Params_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_resolution_Params_List{l}, err
}

func (s TimeSeries_resolution_Params_List) At(i int) TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params{s.List.Struct(i)}
}

func (s TimeSeries_resolution_Params_List) Set(i int, v TimeSeries_resolution_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_resolution_Params_List) String() string {
	str, _ := text.MarshalList(0xea3f0519d272fdd1, s.List)
	return str
}

// TimeSeries_resolution_Params_Future is a wrapper for a TimeSeries_resolution_Params promised by a client call.
type TimeSeries_resolution_Params_Future struct{ *capnp.Future }

func (p TimeSeries_resolution_Params_Future) Struct() (TimeSeries_resolution_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_resolution_Params{s}, err
}

type TimeSeries_resolution_Results struct{ capnp.Struct }

// TimeSeries_resolution_Results_TypeID is the unique identifier for the type TimeSeries_resolution_Results.
const TimeSeries_resolution_Results_TypeID = 0xcd0eadd9a1a66ed6

func NewTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results{st}, err
}

func NewRootTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results{st}, err
}

func ReadRootTimeSeries_resolution_Results(msg *capnp.Message) (TimeSeries_resolution_Results, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Results{root.Struct()}, err
}

func (s TimeSeries_resolution_Results) String() string {
	str, _ := text.Marshal(0xcd0eadd9a1a66ed6, s.Struct)
	return str
}

func (s TimeSeries_resolution_Results) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(s.Struct.Uint16(0))
}

func (s TimeSeries_resolution_Results) SetResolution(v TimeSeries_Resolution) {
	s.Struct.SetUint16(0, uint16(v))
}

// TimeSeries_resolution_Results_List is a list of TimeSeries_resolution_Results.
type TimeSeries_resolution_Results_List struct{ capnp.List }

// NewTimeSeries_resolution_Results creates a new list of TimeSeries_resolution_Results.
func NewTimeSeries_resolution_Results_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return TimeSeries_resolution_Results_List{l}, err
}

func (s TimeSeries_resolution_Results_List) At(i int) TimeSeries_resolution_Results {
	return TimeSeries_resolution_Results{s.List.Struct(i)}
}

func (s TimeSeries_resolution_Results_List) Set(i int, v TimeSeries_resolution_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_resolution_Results_List) String() string {
	str, _ := text.MarshalList(0xcd0eadd9a1a66ed6, s.List)
	return str
}

// TimeSeries_resolution_Results_Future is a wrapper for a TimeSeries_resolution_Results promised by a client call.
type TimeSeries_resolution_Results_Future struct{ *capnp.Future }

func (p TimeSeries_resolution_Results_Future) Struct() (TimeSeries_resolution_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_resolution_Results{s}, err
}

type TimeSeries_range_Params struct{ capnp.Struct }

// TimeSeries_range_Params_TypeID is the unique identifier for the type TimeSeries_range_Params.
const TimeSeries_range_Params_TypeID = 0xff6bcf0c6b23c916

func NewTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params{st}, err
}

func NewRootTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params{st}, err
}

func ReadRootTimeSeries_range_Params(msg *capnp.Message) (TimeSeries_range_Params, error) {
	root, err := msg.Root()
	return TimeSeries_range_Params{root.Struct()}, err
}

func (s TimeSeries_range_Params) String() string {
	str, _ := text.Marshal(0xff6bcf0c6b23c916, s.Struct)
	return str
}

// TimeSeries_range_Params_List is a list of TimeSeries_range_Params.
type TimeSeries_range_Params_List struct{ capnp.List }

// NewTimeSeries_range_Params creates a new list of TimeSeries_range_Params.
func NewTimeSeries_range_Params_List(s *capnp.Segment, sz int32) (TimeSeries_range_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_range_Params_List{l}, err
}

func (s TimeSeries_range_Params_List) At(i int) TimeSeries_range_Params {
	return TimeSeries_range_Params{s.List.Struct(i)}
}

func (s TimeSeries_range_Params_List) Set(i int, v TimeSeries_range_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_range_Params_List) String() string {
	str, _ := text.MarshalList(0xff6bcf0c6b23c916, s.List)
	return str
}

// TimeSeries_range_Params_Future is a wrapper for a TimeSeries_range_Params promised by a client call.
type TimeSeries_range_Params_Future struct{ *capnp.Future }

func (p TimeSeries_range_Params_Future) Struct() (TimeSeries_range_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_range_Params{s}, err
}

type TimeSeries_range_Results struct{ capnp.Struct }

// TimeSeries_range_Results_TypeID is the unique identifier for the type TimeSeries_range_Results.
const TimeSeries_range_Results_TypeID = 0xb9ec27f476022c1b

func NewTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results{st}, err
}

func NewRootTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results{st}, err
}

func ReadRootTimeSeries_range_Results(msg *capnp.Message) (TimeSeries_range_Results, error) {
	root, err := msg.Root()
	return TimeSeries_range_Results{root.Struct()}, err
}

func (s TimeSeries_range_Results) String() string {
	str, _ := text.Marshal(0xb9ec27f476022c1b, s.Struct)
	return str
}

func (s TimeSeries_range_Results) StartDate() (common.Date, error) {
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s TimeSeries_range_Results) HasStartDate() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_range_Results) SetStartDate(v common.Date) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewStartDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s TimeSeries_range_Results) EndDate() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s TimeSeries_range_Results) HasEndDate() bool {
	return s.Struct.HasPtr(1)
}

func (s TimeSeries_range_Results) SetEndDate(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewEndDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// TimeSeries_range_Results_List is a list of TimeSeries_range_Results.
type TimeSeries_range_Results_List struct{ capnp.List }

// NewTimeSeries_range_Results creates a new list of TimeSeries_range_Results.
func NewTimeSeries_range_Results_List(s *capnp.Segment, sz int32) (TimeSeries_range_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TimeSeries_range_Results_List{l}, err
}

func (s TimeSeries_range_Results_List) At(i int) TimeSeries_range_Results {
	return TimeSeries_range_Results{s.List.Struct(i)}
}

func (s TimeSeries_range_Results_List) Set(i int, v TimeSeries_range_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_range_Results_List) String() string {
	str, _ := text.MarshalList(0xb9ec27f476022c1b, s.List)
	return str
}

// TimeSeries_range_Results_Future is a wrapper for a TimeSeries_range_Results promised by a client call.
type TimeSeries_range_Results_Future struct{ *capnp.Future }

func (p TimeSeries_range_Results_Future) Struct() (TimeSeries_range_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_range_Results{s}, err
}

func (p TimeSeries_range_Results_Future) StartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

func (p TimeSeries_range_Results_Future) EndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_header_Params struct{ capnp.Struct }

// TimeSeries_header_Params_TypeID is the unique identifier for the type TimeSeries_header_Params.
const TimeSeries_header_Params_TypeID = 0x8fd77002ae8a97a1

func NewTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params{st}, err
}

func NewRootTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params{st}, err
}

func ReadRootTimeSeries_header_Params(msg *capnp.Message) (TimeSeries_header_Params, error) {
	root, err := msg.Root()
	return TimeSeries_header_Params{root.Struct()}, err
}

func (s TimeSeries_header_Params) String() string {
	str, _ := text.Marshal(0x8fd77002ae8a97a1, s.Struct)
	return str
}

// TimeSeries_header_Params_List is a list of TimeSeries_header_Params.
type TimeSeries_header_Params_List struct{ capnp.List }

// NewTimeSeries_header_Params creates a new list of TimeSeries_header_Params.
func NewTimeSeries_header_Params_List(s *capnp.Segment, sz int32) (TimeSeries_header_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_header_Params_List{l}, err
}

func (s TimeSeries_header_Params_List) At(i int) TimeSeries_header_Params {
	return TimeSeries_header_Params{s.List.Struct(i)}
}

func (s TimeSeries_header_Params_List) Set(i int, v TimeSeries_header_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_header_Params_List) String() string {
	str, _ := text.MarshalList(0x8fd77002ae8a97a1, s.List)
	return str
}

// TimeSeries_header_Params_Future is a wrapper for a TimeSeries_header_Params promised by a client call.
type TimeSeries_header_Params_Future struct{ *capnp.Future }

func (p TimeSeries_header_Params_Future) Struct() (TimeSeries_header_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_header_Params{s}, err
}

type TimeSeries_header_Results struct{ capnp.Struct }

// TimeSeries_header_Results_TypeID is the unique identifier for the type TimeSeries_header_Results.
const TimeSeries_header_Results_TypeID = 0x8976146f144fa050

func NewTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results{st}, err
}

func NewRootTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results{st}, err
}

func ReadRootTimeSeries_header_Results(msg *capnp.Message) (TimeSeries_header_Results, error) {
	root, err := msg.Root()
	return TimeSeries_header_Results{root.Struct()}, err
}

func (s TimeSeries_header_Results) String() string {
	str, _ := text.Marshal(0x8976146f144fa050, s.Struct)
	return str
}

func (s TimeSeries_header_Results) Header() (Element_List, error) {
	p, err := s.Struct.Ptr(0)
	return Element_List{List: p.List()}, err
}

func (s TimeSeries_header_Results) HasHeader() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_header_Results) SetHeader(v Element_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_header_Results) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(s.Struct.Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TimeSeries_header_Results_List is a list of TimeSeries_header_Results.
type TimeSeries_header_Results_List struct{ capnp.List }

// NewTimeSeries_header_Results creates a new list of TimeSeries_header_Results.
func NewTimeSeries_header_Results_List(s *capnp.Segment, sz int32) (TimeSeries_header_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TimeSeries_header_Results_List{l}, err
}

func (s TimeSeries_header_Results_List) At(i int) TimeSeries_header_Results {
	return TimeSeries_header_Results{s.List.Struct(i)}
}

func (s TimeSeries_header_Results_List) Set(i int, v TimeSeries_header_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_header_Results_List) String() string {
	str, _ := text.MarshalList(0x8976146f144fa050, s.List)
	return str
}

// TimeSeries_header_Results_Future is a wrapper for a TimeSeries_header_Results promised by a client call.
type TimeSeries_header_Results_Future struct{ *capnp.Future }

func (p TimeSeries_header_Results_Future) Struct() (TimeSeries_header_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_header_Results{s}, err
}

type TimeSeries_data_Params struct{ capnp.Struct }

// TimeSeries_data_Params_TypeID is the unique identifier for the type TimeSeries_data_Params.
const TimeSeries_data_Params_TypeID = 0x8e78986bc45d7dcd

func NewTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params{st}, err
}

func NewRootTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params{st}, err
}

func ReadRootTimeSeries_data_Params(msg *capnp.Message) (TimeSeries_data_Params, error) {
	root, err := msg.Root()
	return TimeSeries_data_Params{root.Struct()}, err
}

func (s TimeSeries_data_Params) String() string {
	str, _ := text.Marshal(0x8e78986bc45d7dcd, s.Struct)
	return str
}

// TimeSeries_data_Params_List is a list of TimeSeries_data_Params.
type TimeSeries_data_Params_List struct{ capnp.List }

// NewTimeSeries_data_Params creates a new list of TimeSeries_data_Params.
func NewTimeSeries_data_Params_List(s *capnp.Segment, sz int32) (TimeSeries_data_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_data_Params_List{l}, err
}

func (s TimeSeries_data_Params_List) At(i int) TimeSeries_data_Params {
	return TimeSeries_data_Params{s.List.Struct(i)}
}

func (s TimeSeries_data_Params_List) Set(i int, v TimeSeries_data_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_data_Params_List) String() string {
	str, _ := text.MarshalList(0x8e78986bc45d7dcd, s.List)
	return str
}

// TimeSeries_data_Params_Future is a wrapper for a TimeSeries_data_Params promised by a client call.
type TimeSeries_data_Params_Future struct{ *capnp.Future }

func (p TimeSeries_data_Params_Future) Struct() (TimeSeries_data_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_data_Params{s}, err
}

type TimeSeries_data_Results struct{ capnp.Struct }

// TimeSeries_data_Results_TypeID is the unique identifier for the type TimeSeries_data_Results.
const TimeSeries_data_Results_TypeID = 0x9c3d3448d73eeae9

func NewTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results{st}, err
}

func NewRootTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results{st}, err
}

func ReadRootTimeSeries_data_Results(msg *capnp.Message) (TimeSeries_data_Results, error) {
	root, err := msg.Root()
	return TimeSeries_data_Results{root.Struct()}, err
}

func (s TimeSeries_data_Results) String() string {
	str, _ := text.Marshal(0x9c3d3448d73eeae9, s.Struct)
	return str
}

func (s TimeSeries_data_Results) Data() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s TimeSeries_data_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_data_Results) SetData(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_data_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TimeSeries_data_Results_List is a list of TimeSeries_data_Results.
type TimeSeries_data_Results_List struct{ capnp.List }

// NewTimeSeries_data_Results creates a new list of TimeSeries_data_Results.
func NewTimeSeries_data_Results_List(s *capnp.Segment, sz int32) (TimeSeries_data_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TimeSeries_data_Results_List{l}, err
}

func (s TimeSeries_data_Results_List) At(i int) TimeSeries_data_Results {
	return TimeSeries_data_Results{s.List.Struct(i)}
}

func (s TimeSeries_data_Results_List) Set(i int, v TimeSeries_data_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_data_Results_List) String() string {
	str, _ := text.MarshalList(0x9c3d3448d73eeae9, s.List)
	return str
}

// TimeSeries_data_Results_Future is a wrapper for a TimeSeries_data_Results promised by a client call.
type TimeSeries_data_Results_Future struct{ *capnp.Future }

func (p TimeSeries_data_Results_Future) Struct() (TimeSeries_data_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_data_Results{s}, err
}

type TimeSeries_dataT_Params struct{ capnp.Struct }

// TimeSeries_dataT_Params_TypeID is the unique identifier for the type TimeSeries_dataT_Params.
const TimeSeries_dataT_Params_TypeID = 0xeff8f923b1853525

func NewTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params{st}, err
}

func NewRootTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params{st}, err
}

func ReadRootTimeSeries_dataT_Params(msg *capnp.Message) (TimeSeries_dataT_Params, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Params{root.Struct()}, err
}

func (s TimeSeries_dataT_Params) String() string {
	str, _ := text.Marshal(0xeff8f923b1853525, s.Struct)
	return str
}

// TimeSeries_dataT_Params_List is a list of TimeSeries_dataT_Params.
type TimeSeries_dataT_Params_List struct{ capnp.List }

// NewTimeSeries_dataT_Params creates a new list of TimeSeries_dataT_Params.
func NewTimeSeries_dataT_Params_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_dataT_Params_List{l}, err
}

func (s TimeSeries_dataT_Params_List) At(i int) TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params{s.List.Struct(i)}
}

func (s TimeSeries_dataT_Params_List) Set(i int, v TimeSeries_dataT_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_dataT_Params_List) String() string {
	str, _ := text.MarshalList(0xeff8f923b1853525, s.List)
	return str
}

// TimeSeries_dataT_Params_Future is a wrapper for a TimeSeries_dataT_Params promised by a client call.
type TimeSeries_dataT_Params_Future struct{ *capnp.Future }

func (p TimeSeries_dataT_Params_Future) Struct() (TimeSeries_dataT_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_dataT_Params{s}, err
}

type TimeSeries_dataT_Results struct{ capnp.Struct }

// TimeSeries_dataT_Results_TypeID is the unique identifier for the type TimeSeries_dataT_Results.
const TimeSeries_dataT_Results_TypeID = 0xc2e0dec0a6ea94fb

func NewTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results{st}, err
}

func NewRootTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results{st}, err
}

func ReadRootTimeSeries_dataT_Results(msg *capnp.Message) (TimeSeries_dataT_Results, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Results{root.Struct()}, err
}

func (s TimeSeries_dataT_Results) String() string {
	str, _ := text.Marshal(0xc2e0dec0a6ea94fb, s.Struct)
	return str
}

func (s TimeSeries_dataT_Results) Data() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s TimeSeries_dataT_Results) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_dataT_Results) SetData(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_dataT_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TimeSeries_dataT_Results_List is a list of TimeSeries_dataT_Results.
type TimeSeries_dataT_Results_List struct{ capnp.List }

// NewTimeSeries_dataT_Results creates a new list of TimeSeries_dataT_Results.
func NewTimeSeries_dataT_Results_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TimeSeries_dataT_Results_List{l}, err
}

func (s TimeSeries_dataT_Results_List) At(i int) TimeSeries_dataT_Results {
	return TimeSeries_dataT_Results{s.List.Struct(i)}
}

func (s TimeSeries_dataT_Results_List) Set(i int, v TimeSeries_dataT_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_dataT_Results_List) String() string {
	str, _ := text.MarshalList(0xc2e0dec0a6ea94fb, s.List)
	return str
}

// TimeSeries_dataT_Results_Future is a wrapper for a TimeSeries_dataT_Results promised by a client call.
type TimeSeries_dataT_Results_Future struct{ *capnp.Future }

func (p TimeSeries_dataT_Results_Future) Struct() (TimeSeries_dataT_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_dataT_Results{s}, err
}

type TimeSeries_subrange_Params struct{ capnp.Struct }

// TimeSeries_subrange_Params_TypeID is the unique identifier for the type TimeSeries_subrange_Params.
const TimeSeries_subrange_Params_TypeID = 0xf8aa5b6fe2496fee

func NewTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params{st}, err
}

func NewRootTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params{st}, err
}

func ReadRootTimeSeries_subrange_Params(msg *capnp.Message) (TimeSeries_subrange_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Params{root.Struct()}, err
}

func (s TimeSeries_subrange_Params) String() string {
	str, _ := text.Marshal(0xf8aa5b6fe2496fee, s.Struct)
	return str
}

func (s TimeSeries_subrange_Params) From() (common.Date, error) {
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s TimeSeries_subrange_Params) HasFrom() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_subrange_Params) SetFrom(v common.Date) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrom sets the from field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewFrom() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s TimeSeries_subrange_Params) To() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s TimeSeries_subrange_Params) HasTo() bool {
	return s.Struct.HasPtr(1)
}

func (s TimeSeries_subrange_Params) SetTo(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewTo sets the to field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewTo() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// TimeSeries_subrange_Params_List is a list of TimeSeries_subrange_Params.
type TimeSeries_subrange_Params_List struct{ capnp.List }

// NewTimeSeries_subrange_Params creates a new list of TimeSeries_subrange_Params.
func NewTimeSeries_subrange_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TimeSeries_subrange_Params_List{l}, err
}

func (s TimeSeries_subrange_Params_List) At(i int) TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params{s.List.Struct(i)}
}

func (s TimeSeries_subrange_Params_List) Set(i int, v TimeSeries_subrange_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_subrange_Params_List) String() string {
	str, _ := text.MarshalList(0xf8aa5b6fe2496fee, s.List)
	return str
}

// TimeSeries_subrange_Params_Future is a wrapper for a TimeSeries_subrange_Params promised by a client call.
type TimeSeries_subrange_Params_Future struct{ *capnp.Future }

func (p TimeSeries_subrange_Params_Future) Struct() (TimeSeries_subrange_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_subrange_Params{s}, err
}

func (p TimeSeries_subrange_Params_Future) From() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

func (p TimeSeries_subrange_Params_Future) To() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_subrange_Results struct{ capnp.Struct }

// TimeSeries_subrange_Results_TypeID is the unique identifier for the type TimeSeries_subrange_Results.
const TimeSeries_subrange_Results_TypeID = 0xf7dfe7147d09b732

func NewTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results{st}, err
}

func NewRootTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results{st}, err
}

func ReadRootTimeSeries_subrange_Results(msg *capnp.Message) (TimeSeries_subrange_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Results{root.Struct()}, err
}

func (s TimeSeries_subrange_Results) String() string {
	str, _ := text.Marshal(0xf7dfe7147d09b732, s.Struct)
	return str
}

func (s TimeSeries_subrange_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s TimeSeries_subrange_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_subrange_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TimeSeries_subrange_Results_List is a list of TimeSeries_subrange_Results.
type TimeSeries_subrange_Results_List struct{ capnp.List }

// NewTimeSeries_subrange_Results creates a new list of TimeSeries_subrange_Results.
func NewTimeSeries_subrange_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TimeSeries_subrange_Results_List{l}, err
}

func (s TimeSeries_subrange_Results_List) At(i int) TimeSeries_subrange_Results {
	return TimeSeries_subrange_Results{s.List.Struct(i)}
}

func (s TimeSeries_subrange_Results_List) Set(i int, v TimeSeries_subrange_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_subrange_Results_List) String() string {
	str, _ := text.MarshalList(0xf7dfe7147d09b732, s.List)
	return str
}

// TimeSeries_subrange_Results_Future is a wrapper for a TimeSeries_subrange_Results promised by a client call.
type TimeSeries_subrange_Results_Future struct{ *capnp.Future }

func (p TimeSeries_subrange_Results_Future) Struct() (TimeSeries_subrange_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_subrange_Results{s}, err
}

func (p TimeSeries_subrange_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type TimeSeries_subheader_Params struct{ capnp.Struct }

// TimeSeries_subheader_Params_TypeID is the unique identifier for the type TimeSeries_subheader_Params.
const TimeSeries_subheader_Params_TypeID = 0x8cc364dee8f693b8

func NewTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params{st}, err
}

func NewRootTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params{st}, err
}

func ReadRootTimeSeries_subheader_Params(msg *capnp.Message) (TimeSeries_subheader_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Params{root.Struct()}, err
}

func (s TimeSeries_subheader_Params) String() string {
	str, _ := text.Marshal(0x8cc364dee8f693b8, s.Struct)
	return str
}

func (s TimeSeries_subheader_Params) Elements() (Element_List, error) {
	p, err := s.Struct.Ptr(0)
	return Element_List{List: p.List()}, err
}

func (s TimeSeries_subheader_Params) HasElements() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_subheader_Params) SetElements(v Element_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewElements sets the elements field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_subheader_Params) NewElements(n int32) (Element_List, error) {
	l, err := NewElement_List(s.Struct.Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// TimeSeries_subheader_Params_List is a list of TimeSeries_subheader_Params.
type TimeSeries_subheader_Params_List struct{ capnp.List }

// NewTimeSeries_subheader_Params creates a new list of TimeSeries_subheader_Params.
func NewTimeSeries_subheader_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TimeSeries_subheader_Params_List{l}, err
}

func (s TimeSeries_subheader_Params_List) At(i int) TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params{s.List.Struct(i)}
}

func (s TimeSeries_subheader_Params_List) Set(i int, v TimeSeries_subheader_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_subheader_Params_List) String() string {
	str, _ := text.MarshalList(0x8cc364dee8f693b8, s.List)
	return str
}

// TimeSeries_subheader_Params_Future is a wrapper for a TimeSeries_subheader_Params promised by a client call.
type TimeSeries_subheader_Params_Future struct{ *capnp.Future }

func (p TimeSeries_subheader_Params_Future) Struct() (TimeSeries_subheader_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_subheader_Params{s}, err
}

type TimeSeries_subheader_Results struct{ capnp.Struct }

// TimeSeries_subheader_Results_TypeID is the unique identifier for the type TimeSeries_subheader_Results.
const TimeSeries_subheader_Results_TypeID = 0xc3238163cae880df

func NewTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results{st}, err
}

func NewRootTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results{st}, err
}

func ReadRootTimeSeries_subheader_Results(msg *capnp.Message) (TimeSeries_subheader_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Results{root.Struct()}, err
}

func (s TimeSeries_subheader_Results) String() string {
	str, _ := text.Marshal(0xc3238163cae880df, s.Struct)
	return str
}

func (s TimeSeries_subheader_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s TimeSeries_subheader_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s TimeSeries_subheader_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// TimeSeries_subheader_Results_List is a list of TimeSeries_subheader_Results.
type TimeSeries_subheader_Results_List struct{ capnp.List }

// NewTimeSeries_subheader_Results creates a new list of TimeSeries_subheader_Results.
func NewTimeSeries_subheader_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return TimeSeries_subheader_Results_List{l}, err
}

func (s TimeSeries_subheader_Results_List) At(i int) TimeSeries_subheader_Results {
	return TimeSeries_subheader_Results{s.List.Struct(i)}
}

func (s TimeSeries_subheader_Results_List) Set(i int, v TimeSeries_subheader_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_subheader_Results_List) String() string {
	str, _ := text.MarshalList(0xc3238163cae880df, s.List)
	return str
}

// TimeSeries_subheader_Results_Future is a wrapper for a TimeSeries_subheader_Results promised by a client call.
type TimeSeries_subheader_Results_Future struct{ *capnp.Future }

func (p TimeSeries_subheader_Results_Future) Struct() (TimeSeries_subheader_Results, error) {
	s, err := p.Future.Struct()
	return TimeSeries_subheader_Results{s}, err
}

func (p TimeSeries_subheader_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type TimeSeries_metadata_Params struct{ capnp.Struct }

// TimeSeries_metadata_Params_TypeID is the unique identifier for the type TimeSeries_metadata_Params.
const TimeSeries_metadata_Params_TypeID = 0xce2cc4225c956634

func NewTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params{st}, err
}

func NewRootTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params{st}, err
}

func ReadRootTimeSeries_metadata_Params(msg *capnp.Message) (TimeSeries_metadata_Params, error) {
	root, err := msg.Root()
	return TimeSeries_metadata_Params{root.Struct()}, err
}

func (s TimeSeries_metadata_Params) String() string {
	str, _ := text.Marshal(0xce2cc4225c956634, s.Struct)
	return str
}

// TimeSeries_metadata_Params_List is a list of TimeSeries_metadata_Params.
type TimeSeries_metadata_Params_List struct{ capnp.List }

// NewTimeSeries_metadata_Params creates a new list of TimeSeries_metadata_Params.
func NewTimeSeries_metadata_Params_List(s *capnp.Segment, sz int32) (TimeSeries_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_metadata_Params_List{l}, err
}

func (s TimeSeries_metadata_Params_List) At(i int) TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params{s.List.Struct(i)}
}

func (s TimeSeries_metadata_Params_List) Set(i int, v TimeSeries_metadata_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_metadata_Params_List) String() string {
	str, _ := text.MarshalList(0xce2cc4225c956634, s.List)
	return str
}

// TimeSeries_metadata_Params_Future is a wrapper for a TimeSeries_metadata_Params promised by a client call.
type TimeSeries_metadata_Params_Future struct{ *capnp.Future }

func (p TimeSeries_metadata_Params_Future) Struct() (TimeSeries_metadata_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_metadata_Params{s}, err
}

type TimeSeries_location_Params struct{ capnp.Struct }

// TimeSeries_location_Params_TypeID is the unique identifier for the type TimeSeries_location_Params.
const TimeSeries_location_Params_TypeID = 0xcb329eb01b0fa313

func NewTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params{st}, err
}

func NewRootTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params{st}, err
}

func ReadRootTimeSeries_location_Params(msg *capnp.Message) (TimeSeries_location_Params, error) {
	root, err := msg.Root()
	return TimeSeries_location_Params{root.Struct()}, err
}

func (s TimeSeries_location_Params) String() string {
	str, _ := text.Marshal(0xcb329eb01b0fa313, s.Struct)
	return str
}

// TimeSeries_location_Params_List is a list of TimeSeries_location_Params.
type TimeSeries_location_Params_List struct{ capnp.List }

// NewTimeSeries_location_Params creates a new list of TimeSeries_location_Params.
func NewTimeSeries_location_Params_List(s *capnp.Segment, sz int32) (TimeSeries_location_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return TimeSeries_location_Params_List{l}, err
}

func (s TimeSeries_location_Params_List) At(i int) TimeSeries_location_Params {
	return TimeSeries_location_Params{s.List.Struct(i)}
}

func (s TimeSeries_location_Params_List) Set(i int, v TimeSeries_location_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TimeSeries_location_Params_List) String() string {
	str, _ := text.MarshalList(0xcb329eb01b0fa313, s.List)
	return str
}

// TimeSeries_location_Params_Future is a wrapper for a TimeSeries_location_Params promised by a client call.
type TimeSeries_location_Params_Future struct{ *capnp.Future }

func (p TimeSeries_location_Params_Future) Struct() (TimeSeries_location_Params, error) {
	s, err := p.Future.Struct()
	return TimeSeries_location_Params{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xfe7d08d4352b0c5f

func (c Service) GetAvailableDatasets(ctx context.Context, params func(Service_getAvailableDatasets_Params) error) (Service_getAvailableDatasets_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAvailableDatasets_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getAvailableDatasets_Results_Future{Future: ans.Future()}, release
}
func (c Service) GetDatasetsFor(ctx context.Context, params func(Service_getDatasetsFor_Params) error) (Service_getDatasetsFor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getDatasetsFor_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getDatasetsFor_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}
func (c Service) Restore(ctx context.Context, params func(persistence.Restorer_restore_Params) error) (persistence.Restorer_restore_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Restorer_restore_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Restorer_restore_Results_Future{Future: ans.Future()}, release
}
func (c Service) Drop(ctx context.Context, params func(persistence.Restorer_drop_Params) error) (persistence.Restorer_drop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      1,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "drop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Restorer_drop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Restorer_drop_Results_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	GetAvailableDatasets(context.Context, Service_getAvailableDatasets) error

	GetDatasetsFor(context.Context, Service_getDatasetsFor) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Restore(context.Context, persistence.Restorer_restore) error

	Drop(context.Context, persistence.Restorer_drop) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAvailableDatasets(ctx, Service_getAvailableDatasets{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDatasetsFor(ctx, Service_getDatasetsFor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, persistence.Restorer_restore{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      1,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "drop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Drop(ctx, persistence.Restorer_drop{call})
		},
	})

	return methods
}

// Service_getAvailableDatasets holds the state for a server call to Service.getAvailableDatasets.
// See server.Call for documentation.
type Service_getAvailableDatasets struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAvailableDatasets) Args() Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getAvailableDatasets) AllocResults() (Service_getAvailableDatasets_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results{Struct: r}, err
}

// Service_getDatasetsFor holds the state for a server call to Service.getDatasetsFor.
// See server.Call for documentation.
type Service_getDatasetsFor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getDatasetsFor) Args() Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getDatasetsFor) AllocResults() (Service_getDatasetsFor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results{Struct: r}, err
}

type Service_getAvailableDatasets_Params struct{ capnp.Struct }

// Service_getAvailableDatasets_Params_TypeID is the unique identifier for the type Service_getAvailableDatasets_Params.
const Service_getAvailableDatasets_Params_TypeID = 0x804cca489405d451

func NewService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params{st}, err
}

func NewRootService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params{st}, err
}

func ReadRootService_getAvailableDatasets_Params(msg *capnp.Message) (Service_getAvailableDatasets_Params, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Params{root.Struct()}, err
}

func (s Service_getAvailableDatasets_Params) String() string {
	str, _ := text.Marshal(0x804cca489405d451, s.Struct)
	return str
}

// Service_getAvailableDatasets_Params_List is a list of Service_getAvailableDatasets_Params.
type Service_getAvailableDatasets_Params_List struct{ capnp.List }

// NewService_getAvailableDatasets_Params creates a new list of Service_getAvailableDatasets_Params.
func NewService_getAvailableDatasets_Params_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Service_getAvailableDatasets_Params_List{l}, err
}

func (s Service_getAvailableDatasets_Params_List) At(i int) Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params{s.List.Struct(i)}
}

func (s Service_getAvailableDatasets_Params_List) Set(i int, v Service_getAvailableDatasets_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAvailableDatasets_Params_List) String() string {
	str, _ := text.MarshalList(0x804cca489405d451, s.List)
	return str
}

// Service_getAvailableDatasets_Params_Future is a wrapper for a Service_getAvailableDatasets_Params promised by a client call.
type Service_getAvailableDatasets_Params_Future struct{ *capnp.Future }

func (p Service_getAvailableDatasets_Params_Future) Struct() (Service_getAvailableDatasets_Params, error) {
	s, err := p.Future.Struct()
	return Service_getAvailableDatasets_Params{s}, err
}

type Service_getAvailableDatasets_Results struct{ capnp.Struct }

// Service_getAvailableDatasets_Results_TypeID is the unique identifier for the type Service_getAvailableDatasets_Results.
const Service_getAvailableDatasets_Results_TypeID = 0x916880859435c6e8

func NewService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results{st}, err
}

func NewRootService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results{st}, err
}

func ReadRootService_getAvailableDatasets_Results(msg *capnp.Message) (Service_getAvailableDatasets_Results, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Results{root.Struct()}, err
}

func (s Service_getAvailableDatasets_Results) String() string {
	str, _ := text.Marshal(0x916880859435c6e8, s.Struct)
	return str
}

func (s Service_getAvailableDatasets_Results) Datasets() (MetaPlusData_List, error) {
	p, err := s.Struct.Ptr(0)
	return MetaPlusData_List{List: p.List()}, err
}

func (s Service_getAvailableDatasets_Results) HasDatasets() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getAvailableDatasets_Results) SetDatasets(v MetaPlusData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated MetaPlusData_List, preferring placement in s's segment.
func (s Service_getAvailableDatasets_Results) NewDatasets(n int32) (MetaPlusData_List, error) {
	l, err := NewMetaPlusData_List(s.Struct.Segment(), n)
	if err != nil {
		return MetaPlusData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_getAvailableDatasets_Results_List is a list of Service_getAvailableDatasets_Results.
type Service_getAvailableDatasets_Results_List struct{ capnp.List }

// NewService_getAvailableDatasets_Results creates a new list of Service_getAvailableDatasets_Results.
func NewService_getAvailableDatasets_Results_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_getAvailableDatasets_Results_List{l}, err
}

func (s Service_getAvailableDatasets_Results_List) At(i int) Service_getAvailableDatasets_Results {
	return Service_getAvailableDatasets_Results{s.List.Struct(i)}
}

func (s Service_getAvailableDatasets_Results_List) Set(i int, v Service_getAvailableDatasets_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAvailableDatasets_Results_List) String() string {
	str, _ := text.MarshalList(0x916880859435c6e8, s.List)
	return str
}

// Service_getAvailableDatasets_Results_Future is a wrapper for a Service_getAvailableDatasets_Results promised by a client call.
type Service_getAvailableDatasets_Results_Future struct{ *capnp.Future }

func (p Service_getAvailableDatasets_Results_Future) Struct() (Service_getAvailableDatasets_Results, error) {
	s, err := p.Future.Struct()
	return Service_getAvailableDatasets_Results{s}, err
}

type Service_getDatasetsFor_Params struct{ capnp.Struct }

// Service_getDatasetsFor_Params_TypeID is the unique identifier for the type Service_getDatasetsFor_Params.
const Service_getDatasetsFor_Params_TypeID = 0x9d7d1f83dda3e6db

func NewService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params{st}, err
}

func NewRootService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params{st}, err
}

func ReadRootService_getDatasetsFor_Params(msg *capnp.Message) (Service_getDatasetsFor_Params, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Params{root.Struct()}, err
}

func (s Service_getDatasetsFor_Params) String() string {
	str, _ := text.Marshal(0x9d7d1f83dda3e6db, s.Struct)
	return str
}

func (s Service_getDatasetsFor_Params) Template() (Metadata, error) {
	p, err := s.Struct.Ptr(0)
	return Metadata{Struct: p.Struct()}, err
}

func (s Service_getDatasetsFor_Params) HasTemplate() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getDatasetsFor_Params) SetTemplate(v Metadata) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTemplate sets the template field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s Service_getDatasetsFor_Params) NewTemplate() (Metadata, error) {
	ss, err := NewMetadata(s.Struct.Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Service_getDatasetsFor_Params_List is a list of Service_getDatasetsFor_Params.
type Service_getDatasetsFor_Params_List struct{ capnp.List }

// NewService_getDatasetsFor_Params creates a new list of Service_getDatasetsFor_Params.
func NewService_getDatasetsFor_Params_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_getDatasetsFor_Params_List{l}, err
}

func (s Service_getDatasetsFor_Params_List) At(i int) Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params{s.List.Struct(i)}
}

func (s Service_getDatasetsFor_Params_List) Set(i int, v Service_getDatasetsFor_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getDatasetsFor_Params_List) String() string {
	str, _ := text.MarshalList(0x9d7d1f83dda3e6db, s.List)
	return str
}

// Service_getDatasetsFor_Params_Future is a wrapper for a Service_getDatasetsFor_Params promised by a client call.
type Service_getDatasetsFor_Params_Future struct{ *capnp.Future }

func (p Service_getDatasetsFor_Params_Future) Struct() (Service_getDatasetsFor_Params, error) {
	s, err := p.Future.Struct()
	return Service_getDatasetsFor_Params{s}, err
}

func (p Service_getDatasetsFor_Params_Future) Template() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}

type Service_getDatasetsFor_Results struct{ capnp.Struct }

// Service_getDatasetsFor_Results_TypeID is the unique identifier for the type Service_getDatasetsFor_Results.
const Service_getDatasetsFor_Results_TypeID = 0xcd95f79174b0eab0

func NewService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results{st}, err
}

func NewRootService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results{st}, err
}

func ReadRootService_getDatasetsFor_Results(msg *capnp.Message) (Service_getDatasetsFor_Results, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Results{root.Struct()}, err
}

func (s Service_getDatasetsFor_Results) String() string {
	str, _ := text.Marshal(0xcd95f79174b0eab0, s.Struct)
	return str
}

func (s Service_getDatasetsFor_Results) Datasets() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Service_getDatasetsFor_Results) HasDatasets() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getDatasetsFor_Results) SetDatasets(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Service_getDatasetsFor_Results) NewDatasets(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_getDatasetsFor_Results_List is a list of Service_getDatasetsFor_Results.
type Service_getDatasetsFor_Results_List struct{ capnp.List }

// NewService_getDatasetsFor_Results creates a new list of Service_getDatasetsFor_Results.
func NewService_getDatasetsFor_Results_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_getDatasetsFor_Results_List{l}, err
}

func (s Service_getDatasetsFor_Results_List) At(i int) Service_getDatasetsFor_Results {
	return Service_getDatasetsFor_Results{s.List.Struct(i)}
}

func (s Service_getDatasetsFor_Results_List) Set(i int, v Service_getDatasetsFor_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getDatasetsFor_Results_List) String() string {
	str, _ := text.MarshalList(0xcd95f79174b0eab0, s.List)
	return str
}

// Service_getDatasetsFor_Results_Future is a wrapper for a Service_getDatasetsFor_Results promised by a client call.
type Service_getDatasetsFor_Results_Future struct{ *capnp.Future }

func (p Service_getDatasetsFor_Results_Future) Struct() (Service_getDatasetsFor_Results, error) {
	s, err := p.Future.Struct()
	return Service_getDatasetsFor_Results{s}, err
}

type CSVTimeSeriesFactory struct{ Client *capnp.Client }

// CSVTimeSeriesFactory_TypeID is the unique identifier for the type CSVTimeSeriesFactory.
const CSVTimeSeriesFactory_TypeID = 0xa418c26cc59929d9

func (c CSVTimeSeriesFactory) Create(ctx context.Context, params func(CSVTimeSeriesFactory_create_Params) error) (CSVTimeSeriesFactory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CSVTimeSeriesFactory_create_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CSVTimeSeriesFactory_create_Results_Future{Future: ans.Future()}, release
}
func (c CSVTimeSeriesFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c CSVTimeSeriesFactory) AddRef() CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory{
		Client: c.Client.AddRef(),
	}
}

func (c CSVTimeSeriesFactory) Release() {
	c.Client.Release()
}

// A CSVTimeSeriesFactory_Server is a CSVTimeSeriesFactory with a local implementation.
type CSVTimeSeriesFactory_Server interface {
	Create(context.Context, CSVTimeSeriesFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// CSVTimeSeriesFactory_NewServer creates a new Server from an implementation of CSVTimeSeriesFactory_Server.
func CSVTimeSeriesFactory_NewServer(s CSVTimeSeriesFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CSVTimeSeriesFactory_Methods(nil, s), s, c, policy)
}

// CSVTimeSeriesFactory_ServerToClient creates a new Client from an implementation of CSVTimeSeriesFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func CSVTimeSeriesFactory_ServerToClient(s CSVTimeSeriesFactory_Server, policy *server.Policy) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory{Client: capnp.NewClient(CSVTimeSeriesFactory_NewServer(s, policy))}
}

// CSVTimeSeriesFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CSVTimeSeriesFactory_Methods(methods []server.Method, s CSVTimeSeriesFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, CSVTimeSeriesFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// CSVTimeSeriesFactory_create holds the state for a server call to CSVTimeSeriesFactory.create.
// See server.Call for documentation.
type CSVTimeSeriesFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CSVTimeSeriesFactory_create) Args() CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CSVTimeSeriesFactory_create) AllocResults() (CSVTimeSeriesFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results{Struct: r}, err
}

type CSVTimeSeriesFactory_CSVConfig struct{ capnp.Struct }

// CSVTimeSeriesFactory_CSVConfig_TypeID is the unique identifier for the type CSVTimeSeriesFactory_CSVConfig.
const CSVTimeSeriesFactory_CSVConfig_TypeID = 0xeba81ca9f46690b8

func NewCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig{st}, err
}

func NewRootCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig{st}, err
}

func ReadRootCSVTimeSeriesFactory_CSVConfig(msg *capnp.Message) (CSVTimeSeriesFactory_CSVConfig, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_CSVConfig{root.Struct()}, err
}

func (s CSVTimeSeriesFactory_CSVConfig) String() string {
	str, _ := text.Marshal(0xeba81ca9f46690b8, s.Struct)
	return str
}

func (s CSVTimeSeriesFactory_CSVConfig) Sep() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasSep() bool {
	return s.Struct.HasPtr(0)
}

func (s CSVTimeSeriesFactory_CSVConfig) SepBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytesDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSep(v string) error {
	return s.Struct.SetNewText(0, v)
}

func (s CSVTimeSeriesFactory_CSVConfig) HeaderMap() (common.Pair_List, error) {
	p, err := s.Struct.Ptr(1)
	return common.Pair_List{List: p.List()}, err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasHeaderMap() bool {
	return s.Struct.HasPtr(1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetHeaderMap(v common.Pair_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewHeaderMap sets the headerMap field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_CSVConfig) NewHeaderMap(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(s.Struct.Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesToHeader() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesToHeader(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesFromHeaderToData() int16 {
	return int16(s.Struct.Uint16(2) ^ 1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesFromHeaderToData(v int16) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

// CSVTimeSeriesFactory_CSVConfig_List is a list of CSVTimeSeriesFactory_CSVConfig.
type CSVTimeSeriesFactory_CSVConfig_List struct{ capnp.List }

// NewCSVTimeSeriesFactory_CSVConfig creates a new list of CSVTimeSeriesFactory_CSVConfig.
func NewCSVTimeSeriesFactory_CSVConfig_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_CSVConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return CSVTimeSeriesFactory_CSVConfig_List{l}, err
}

func (s CSVTimeSeriesFactory_CSVConfig_List) At(i int) CSVTimeSeriesFactory_CSVConfig {
	return CSVTimeSeriesFactory_CSVConfig{s.List.Struct(i)}
}

func (s CSVTimeSeriesFactory_CSVConfig_List) Set(i int, v CSVTimeSeriesFactory_CSVConfig) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CSVTimeSeriesFactory_CSVConfig_List) String() string {
	str, _ := text.MarshalList(0xeba81ca9f46690b8, s.List)
	return str
}

// CSVTimeSeriesFactory_CSVConfig_Future is a wrapper for a CSVTimeSeriesFactory_CSVConfig promised by a client call.
type CSVTimeSeriesFactory_CSVConfig_Future struct{ *capnp.Future }

func (p CSVTimeSeriesFactory_CSVConfig_Future) Struct() (CSVTimeSeriesFactory_CSVConfig, error) {
	s, err := p.Future.Struct()
	return CSVTimeSeriesFactory_CSVConfig{s}, err
}

type CSVTimeSeriesFactory_create_Params struct{ capnp.Struct }

// CSVTimeSeriesFactory_create_Params_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Params.
const CSVTimeSeriesFactory_create_Params_TypeID = 0xcfaa8d2601750547

func NewCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params{st}, err
}

func NewRootCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params{st}, err
}

func ReadRootCSVTimeSeriesFactory_create_Params(msg *capnp.Message) (CSVTimeSeriesFactory_create_Params, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Params{root.Struct()}, err
}

func (s CSVTimeSeriesFactory_create_Params) String() string {
	str, _ := text.Marshal(0xcfaa8d2601750547, s.Struct)
	return str
}

func (s CSVTimeSeriesFactory_create_Params) FromCSV() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Params) HasFromCSV() bool {
	return s.Struct.HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Params) FromCSVBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Params) SetFromCSV(v string) error {
	return s.Struct.SetText(0, v)
}

func (s CSVTimeSeriesFactory_create_Params) Config() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := s.Struct.Ptr(1)
	return CSVTimeSeriesFactory_CSVConfig{Struct: p.Struct()}, err
}

func (s CSVTimeSeriesFactory_create_Params) HasConfig() bool {
	return s.Struct.HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Params) SetConfig(v CSVTimeSeriesFactory_CSVConfig) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewConfig sets the config field to a newly
// allocated CSVTimeSeriesFactory_CSVConfig struct, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_create_Params) NewConfig() (CSVTimeSeriesFactory_CSVConfig, error) {
	ss, err := NewCSVTimeSeriesFactory_CSVConfig(s.Struct.Segment())
	if err != nil {
		return CSVTimeSeriesFactory_CSVConfig{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// CSVTimeSeriesFactory_create_Params_List is a list of CSVTimeSeriesFactory_create_Params.
type CSVTimeSeriesFactory_create_Params_List struct{ capnp.List }

// NewCSVTimeSeriesFactory_create_Params creates a new list of CSVTimeSeriesFactory_create_Params.
func NewCSVTimeSeriesFactory_create_Params_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CSVTimeSeriesFactory_create_Params_List{l}, err
}

func (s CSVTimeSeriesFactory_create_Params_List) At(i int) CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params{s.List.Struct(i)}
}

func (s CSVTimeSeriesFactory_create_Params_List) Set(i int, v CSVTimeSeriesFactory_create_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CSVTimeSeriesFactory_create_Params_List) String() string {
	str, _ := text.MarshalList(0xcfaa8d2601750547, s.List)
	return str
}

// CSVTimeSeriesFactory_create_Params_Future is a wrapper for a CSVTimeSeriesFactory_create_Params promised by a client call.
type CSVTimeSeriesFactory_create_Params_Future struct{ *capnp.Future }

func (p CSVTimeSeriesFactory_create_Params_Future) Struct() (CSVTimeSeriesFactory_create_Params, error) {
	s, err := p.Future.Struct()
	return CSVTimeSeriesFactory_create_Params{s}, err
}

func (p CSVTimeSeriesFactory_create_Params_Future) Config() CSVTimeSeriesFactory_CSVConfig_Future {
	return CSVTimeSeriesFactory_CSVConfig_Future{Future: p.Future.Field(1, nil)}
}

type CSVTimeSeriesFactory_create_Results struct{ capnp.Struct }

// CSVTimeSeriesFactory_create_Results_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Results.
const CSVTimeSeriesFactory_create_Results_TypeID = 0xefefafebc8ae5534

func NewCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results{st}, err
}

func NewRootCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results{st}, err
}

func ReadRootCSVTimeSeriesFactory_create_Results(msg *capnp.Message) (CSVTimeSeriesFactory_create_Results, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Results{root.Struct()}, err
}

func (s CSVTimeSeriesFactory_create_Results) String() string {
	str, _ := text.Marshal(0xefefafebc8ae5534, s.Struct)
	return str
}

func (s CSVTimeSeriesFactory_create_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s CSVTimeSeriesFactory_create_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s CSVTimeSeriesFactory_create_Results) Error() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Results) HasError() bool {
	return s.Struct.HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Results) ErrorBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Results) SetError(v string) error {
	return s.Struct.SetText(1, v)
}

// CSVTimeSeriesFactory_create_Results_List is a list of CSVTimeSeriesFactory_create_Results.
type CSVTimeSeriesFactory_create_Results_List struct{ capnp.List }

// NewCSVTimeSeriesFactory_create_Results creates a new list of CSVTimeSeriesFactory_create_Results.
func NewCSVTimeSeriesFactory_create_Results_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return CSVTimeSeriesFactory_create_Results_List{l}, err
}

func (s CSVTimeSeriesFactory_create_Results_List) At(i int) CSVTimeSeriesFactory_create_Results {
	return CSVTimeSeriesFactory_create_Results{s.List.Struct(i)}
}

func (s CSVTimeSeriesFactory_create_Results_List) Set(i int, v CSVTimeSeriesFactory_create_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CSVTimeSeriesFactory_create_Results_List) String() string {
	str, _ := text.MarshalList(0xefefafebc8ae5534, s.List)
	return str
}

// CSVTimeSeriesFactory_create_Results_Future is a wrapper for a CSVTimeSeriesFactory_create_Results promised by a client call.
type CSVTimeSeriesFactory_create_Results_Future struct{ *capnp.Future }

func (p CSVTimeSeriesFactory_create_Results_Future) Struct() (CSVTimeSeriesFactory_create_Results, error) {
	s, err := p.Future.Struct()
	return CSVTimeSeriesFactory_create_Results{s}, err
}

func (p CSVTimeSeriesFactory_create_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type AlterTimeSeriesWrapper struct{ Client *capnp.Client }

// AlterTimeSeriesWrapper_TypeID is the unique identifier for the type AlterTimeSeriesWrapper.
const AlterTimeSeriesWrapper_TypeID = 0xe1f480ef979784b2

func (c AlterTimeSeriesWrapper) WrappedTimeSeries(ctx context.Context, params func(AlterTimeSeriesWrapper_wrappedTimeSeries_Params) error) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_wrappedTimeSeries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) AlteredElements(ctx context.Context, params func(AlterTimeSeriesWrapper_alteredElements_Params) error) (AlterTimeSeriesWrapper_alteredElements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alteredElements_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alteredElements_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Alter(ctx context.Context, params func(AlterTimeSeriesWrapper_alter_Params) error) (AlterTimeSeriesWrapper_alter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alter_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alter_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Remove(ctx context.Context, params func(AlterTimeSeriesWrapper_remove_Params) error) (AlterTimeSeriesWrapper_remove_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_remove_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AlterTimeSeriesWrapper_remove_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release
}

func (c AlterTimeSeriesWrapper) AddRef() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper{
		Client: c.Client.AddRef(),
	}
}

func (c AlterTimeSeriesWrapper) Release() {
	c.Client.Release()
}

// A AlterTimeSeriesWrapper_Server is a AlterTimeSeriesWrapper with a local implementation.
type AlterTimeSeriesWrapper_Server interface {
	WrappedTimeSeries(context.Context, AlterTimeSeriesWrapper_wrappedTimeSeries) error

	AlteredElements(context.Context, AlterTimeSeriesWrapper_alteredElements) error

	Alter(context.Context, AlterTimeSeriesWrapper_alter) error

	Remove(context.Context, AlterTimeSeriesWrapper_remove) error

	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error
}

// AlterTimeSeriesWrapper_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapper_Server.
func AlterTimeSeriesWrapper_NewServer(s AlterTimeSeriesWrapper_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapper_Methods(nil, s), s, c, policy)
}

// AlterTimeSeriesWrapper_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapper_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapper_ServerToClient(s AlterTimeSeriesWrapper_Server, policy *server.Policy) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper{Client: capnp.NewClient(AlterTimeSeriesWrapper_NewServer(s, policy))}
}

// AlterTimeSeriesWrapper_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapper_Methods(methods []server.Method, s AlterTimeSeriesWrapper_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 13)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WrappedTimeSeries(ctx, AlterTimeSeriesWrapper_wrappedTimeSeries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AlteredElements(ctx, AlterTimeSeriesWrapper_alteredElements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Alter(ctx, AlterTimeSeriesWrapper_alter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Remove(ctx, AlterTimeSeriesWrapper_remove{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate_data.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapper_wrappedTimeSeries holds the state for a server call to AlterTimeSeriesWrapper.wrappedTimeSeries.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_wrappedTimeSeries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) Args() AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) AllocResults() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results{Struct: r}, err
}

// AlterTimeSeriesWrapper_alteredElements holds the state for a server call to AlterTimeSeriesWrapper.alteredElements.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alteredElements struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alteredElements) Args() AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alteredElements) AllocResults() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results{Struct: r}, err
}

// AlterTimeSeriesWrapper_alter holds the state for a server call to AlterTimeSeriesWrapper.alter.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alter) Args() AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alter) AllocResults() (AlterTimeSeriesWrapper_alter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results{Struct: r}, err
}

// AlterTimeSeriesWrapper_remove holds the state for a server call to AlterTimeSeriesWrapper.remove.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_remove struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_remove) Args() AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_remove) AllocResults() (AlterTimeSeriesWrapper_remove_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results{Struct: r}, err
}

type AlterTimeSeriesWrapper_Altered struct{ capnp.Struct }

// AlterTimeSeriesWrapper_Altered_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_Altered.
const AlterTimeSeriesWrapper_Altered_TypeID = 0xd085b9baf390bec5

func NewAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered{st}, err
}

func NewRootAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered{st}, err
}

func ReadRootAlterTimeSeriesWrapper_Altered(msg *capnp.Message) (AlterTimeSeriesWrapper_Altered, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_Altered{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_Altered) String() string {
	str, _ := text.Marshal(0xd085b9baf390bec5, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapper_Altered) Element() Element {
	return Element(s.Struct.Uint16(0))
}

func (s AlterTimeSeriesWrapper_Altered) SetElement(v Element) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s AlterTimeSeriesWrapper_Altered) Value() float32 {
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s AlterTimeSeriesWrapper_Altered) SetValue(v float32) {
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s AlterTimeSeriesWrapper_Altered) Type() AlterTimeSeriesWrapper_AlterType {
	return AlterTimeSeriesWrapper_AlterType(s.Struct.Uint16(2))
}

func (s AlterTimeSeriesWrapper_Altered) SetType(v AlterTimeSeriesWrapper_AlterType) {
	s.Struct.SetUint16(2, uint16(v))
}

// AlterTimeSeriesWrapper_Altered_List is a list of AlterTimeSeriesWrapper_Altered.
type AlterTimeSeriesWrapper_Altered_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_Altered creates a new list of AlterTimeSeriesWrapper_Altered.
func NewAlterTimeSeriesWrapper_Altered_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return AlterTimeSeriesWrapper_Altered_List{l}, err
}

func (s AlterTimeSeriesWrapper_Altered_List) At(i int) AlterTimeSeriesWrapper_Altered {
	return AlterTimeSeriesWrapper_Altered{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_Altered_List) Set(i int, v AlterTimeSeriesWrapper_Altered) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_Altered_List) String() string {
	str, _ := text.MarshalList(0xd085b9baf390bec5, s.List)
	return str
}

// AlterTimeSeriesWrapper_Altered_Future is a wrapper for a AlterTimeSeriesWrapper_Altered promised by a client call.
type AlterTimeSeriesWrapper_Altered_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_Altered_Future) Struct() (AlterTimeSeriesWrapper_Altered, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_Altered{s}, err
}

type AlterTimeSeriesWrapper_AlterType uint16

// AlterTimeSeriesWrapper_AlterType_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_AlterType.
const AlterTimeSeriesWrapper_AlterType_TypeID = 0xb5dd785107c358ca

// Values of AlterTimeSeriesWrapper_AlterType.
const (
	AlterTimeSeriesWrapper_AlterType_add AlterTimeSeriesWrapper_AlterType = 0
	AlterTimeSeriesWrapper_AlterType_mul AlterTimeSeriesWrapper_AlterType = 1
)

// String returns the enum's constant name.
func (c AlterTimeSeriesWrapper_AlterType) String() string {
	switch c {
	case AlterTimeSeriesWrapper_AlterType_add:
		return "add"
	case AlterTimeSeriesWrapper_AlterType_mul:
		return "mul"

	default:
		return ""
	}
}

// AlterTimeSeriesWrapper_AlterTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AlterTimeSeriesWrapper_AlterTypeFromString(c string) AlterTimeSeriesWrapper_AlterType {
	switch c {
	case "add":
		return AlterTimeSeriesWrapper_AlterType_add
	case "mul":
		return AlterTimeSeriesWrapper_AlterType_mul

	default:
		return 0
	}
}

type AlterTimeSeriesWrapper_AlterType_List struct{ capnp.List }

func NewAlterTimeSeriesWrapper_AlterType_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_AlterType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return AlterTimeSeriesWrapper_AlterType_List{l.List}, err
}

func (l AlterTimeSeriesWrapper_AlterType_List) At(i int) AlterTimeSeriesWrapper_AlterType {
	ul := capnp.UInt16List{List: l.List}
	return AlterTimeSeriesWrapper_AlterType(ul.At(i))
}

func (l AlterTimeSeriesWrapper_AlterType_List) Set(i int, v AlterTimeSeriesWrapper_AlterType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Params struct{ capnp.Struct }

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID = 0xe31f26eed9fb36a9

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params{st}, err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params{st}, err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) String() string {
	str, _ := text.Marshal(0xe31f26eed9fb36a9, s.Struct)
	return str
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List{l}, err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List) At(i int) AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List) Set(i int, v AlterTimeSeriesWrapper_wrappedTimeSeries_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List) String() string {
	str, _ := text.MarshalList(0xe31f26eed9fb36a9, s.List)
	return str
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Params promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params{s}, err
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Results struct{ capnp.Struct }

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID = 0xfb2eddb58f90f7aa

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results{st}, err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results{st}, err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) String() string {
	str, _ := text.Marshal(0xfb2eddb58f90f7aa, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List{l}, err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List) At(i int) AlterTimeSeriesWrapper_wrappedTimeSeries_Results {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List) Set(i int, v AlterTimeSeriesWrapper_wrappedTimeSeries_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List) String() string {
	str, _ := text.MarshalList(0xfb2eddb58f90f7aa, s.List)
	return str
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Results promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results{s}, err
}

func (p AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type AlterTimeSeriesWrapper_alteredElements_Params struct{ capnp.Struct }

// AlterTimeSeriesWrapper_alteredElements_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Params.
const AlterTimeSeriesWrapper_alteredElements_Params_TypeID = 0xcba0220cda41869e

func NewAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params{st}, err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params{st}, err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Params{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) String() string {
	str, _ := text.Marshal(0xcba0220cda41869e, s.Struct)
	return str
}

// AlterTimeSeriesWrapper_alteredElements_Params_List is a list of AlterTimeSeriesWrapper_alteredElements_Params.
type AlterTimeSeriesWrapper_alteredElements_Params_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_alteredElements_Params creates a new list of AlterTimeSeriesWrapper_alteredElements_Params.
func NewAlterTimeSeriesWrapper_alteredElements_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return AlterTimeSeriesWrapper_alteredElements_Params_List{l}, err
}

func (s AlterTimeSeriesWrapper_alteredElements_Params_List) At(i int) AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_alteredElements_Params_List) Set(i int, v AlterTimeSeriesWrapper_alteredElements_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_alteredElements_Params_List) String() string {
	str, _ := text.MarshalList(0xcba0220cda41869e, s.List)
	return str
}

// AlterTimeSeriesWrapper_alteredElements_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Params promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Params_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_alteredElements_Params_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_alteredElements_Params{s}, err
}

type AlterTimeSeriesWrapper_alteredElements_Results struct{ capnp.Struct }

// AlterTimeSeriesWrapper_alteredElements_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Results.
const AlterTimeSeriesWrapper_alteredElements_Results_TypeID = 0xdd5b75b5bc711766

func NewAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results{st}, err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results{st}, err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Results{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) String() string {
	str, _ := text.Marshal(0xdd5b75b5bc711766, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) List() (AlterTimeSeriesWrapper_Altered_List, error) {
	p, err := s.Struct.Ptr(0)
	return AlterTimeSeriesWrapper_Altered_List{List: p.List()}, err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) HasList() bool {
	return s.Struct.HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) SetList(v AlterTimeSeriesWrapper_Altered_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewList sets the list field to a newly
// allocated AlterTimeSeriesWrapper_Altered_List, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alteredElements_Results) NewList(n int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := NewAlterTimeSeriesWrapper_Altered_List(s.Struct.Segment(), n)
	if err != nil {
		return AlterTimeSeriesWrapper_Altered_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// AlterTimeSeriesWrapper_alteredElements_Results_List is a list of AlterTimeSeriesWrapper_alteredElements_Results.
type AlterTimeSeriesWrapper_alteredElements_Results_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_alteredElements_Results creates a new list of AlterTimeSeriesWrapper_alteredElements_Results.
func NewAlterTimeSeriesWrapper_alteredElements_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AlterTimeSeriesWrapper_alteredElements_Results_List{l}, err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results_List) At(i int) AlterTimeSeriesWrapper_alteredElements_Results {
	return AlterTimeSeriesWrapper_alteredElements_Results{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_alteredElements_Results_List) Set(i int, v AlterTimeSeriesWrapper_alteredElements_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_alteredElements_Results_List) String() string {
	str, _ := text.MarshalList(0xdd5b75b5bc711766, s.List)
	return str
}

// AlterTimeSeriesWrapper_alteredElements_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Results promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Results_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_alteredElements_Results_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_alteredElements_Results{s}, err
}

type AlterTimeSeriesWrapper_alter_Params struct{ capnp.Struct }

// AlterTimeSeriesWrapper_alter_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Params.
const AlterTimeSeriesWrapper_alter_Params_TypeID = 0xd36b1e9c2929e6e4

func NewAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params{st}, err
}

func NewRootAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params{st}, err
}

func ReadRootAlterTimeSeriesWrapper_alter_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Params{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_alter_Params) String() string {
	str, _ := text.Marshal(0xd36b1e9c2929e6e4, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapper_alter_Params) Desc() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := s.Struct.Ptr(0)
	return AlterTimeSeriesWrapper_Altered{Struct: p.Struct()}, err
}

func (s AlterTimeSeriesWrapper_alter_Params) HasDesc() bool {
	return s.Struct.HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetDesc(v AlterTimeSeriesWrapper_Altered) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDesc sets the desc field to a newly
// allocated AlterTimeSeriesWrapper_Altered struct, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alter_Params) NewDesc() (AlterTimeSeriesWrapper_Altered, error) {
	ss, err := NewAlterTimeSeriesWrapper_Altered(s.Struct.Segment())
	if err != nil {
		return AlterTimeSeriesWrapper_Altered{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AlterTimeSeriesWrapper_alter_Params) AsNewTimeSeries() bool {
	return s.Struct.Bit(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetAsNewTimeSeries(v bool) {
	s.Struct.SetBit(0, v)
}

// AlterTimeSeriesWrapper_alter_Params_List is a list of AlterTimeSeriesWrapper_alter_Params.
type AlterTimeSeriesWrapper_alter_Params_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_alter_Params creates a new list of AlterTimeSeriesWrapper_alter_Params.
func NewAlterTimeSeriesWrapper_alter_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return AlterTimeSeriesWrapper_alter_Params_List{l}, err
}

func (s AlterTimeSeriesWrapper_alter_Params_List) At(i int) AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_alter_Params_List) Set(i int, v AlterTimeSeriesWrapper_alter_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_alter_Params_List) String() string {
	str, _ := text.MarshalList(0xd36b1e9c2929e6e4, s.List)
	return str
}

// AlterTimeSeriesWrapper_alter_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Params promised by a client call.
type AlterTimeSeriesWrapper_alter_Params_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_alter_Params_Future) Struct() (AlterTimeSeriesWrapper_alter_Params, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_alter_Params{s}, err
}

func (p AlterTimeSeriesWrapper_alter_Params_Future) Desc() AlterTimeSeriesWrapper_Altered_Future {
	return AlterTimeSeriesWrapper_Altered_Future{Future: p.Future.Field(0, nil)}
}

type AlterTimeSeriesWrapper_alter_Results struct{ capnp.Struct }

// AlterTimeSeriesWrapper_alter_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Results.
const AlterTimeSeriesWrapper_alter_Results_TypeID = 0xc4a1ec6280be841c

func NewAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results{st}, err
}

func NewRootAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results{st}, err
}

func ReadRootAlterTimeSeriesWrapper_alter_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Results{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_alter_Results) String() string {
	str, _ := text.Marshal(0xc4a1ec6280be841c, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapper_alter_Results) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s AlterTimeSeriesWrapper_alter_Results) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Results) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_alter_Results_List is a list of AlterTimeSeriesWrapper_alter_Results.
type AlterTimeSeriesWrapper_alter_Results_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_alter_Results creates a new list of AlterTimeSeriesWrapper_alter_Results.
func NewAlterTimeSeriesWrapper_alter_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AlterTimeSeriesWrapper_alter_Results_List{l}, err
}

func (s AlterTimeSeriesWrapper_alter_Results_List) At(i int) AlterTimeSeriesWrapper_alter_Results {
	return AlterTimeSeriesWrapper_alter_Results{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_alter_Results_List) Set(i int, v AlterTimeSeriesWrapper_alter_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_alter_Results_List) String() string {
	str, _ := text.MarshalList(0xc4a1ec6280be841c, s.List)
	return str
}

// AlterTimeSeriesWrapper_alter_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Results promised by a client call.
type AlterTimeSeriesWrapper_alter_Results_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_alter_Results_Future) Struct() (AlterTimeSeriesWrapper_alter_Results, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_alter_Results{s}, err
}

func (p AlterTimeSeriesWrapper_alter_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type AlterTimeSeriesWrapper_remove_Params struct{ capnp.Struct }

// AlterTimeSeriesWrapper_remove_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Params.
const AlterTimeSeriesWrapper_remove_Params_TypeID = 0xdb7bfcfe4d45ff53

func NewAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params{st}, err
}

func NewRootAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params{st}, err
}

func ReadRootAlterTimeSeriesWrapper_remove_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Params{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_remove_Params) String() string {
	str, _ := text.Marshal(0xdb7bfcfe4d45ff53, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapper_remove_Params) AlteredElement() Element {
	return Element(s.Struct.Uint16(0))
}

func (s AlterTimeSeriesWrapper_remove_Params) SetAlteredElement(v Element) {
	s.Struct.SetUint16(0, uint16(v))
}

// AlterTimeSeriesWrapper_remove_Params_List is a list of AlterTimeSeriesWrapper_remove_Params.
type AlterTimeSeriesWrapper_remove_Params_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_remove_Params creates a new list of AlterTimeSeriesWrapper_remove_Params.
func NewAlterTimeSeriesWrapper_remove_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return AlterTimeSeriesWrapper_remove_Params_List{l}, err
}

func (s AlterTimeSeriesWrapper_remove_Params_List) At(i int) AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_remove_Params_List) Set(i int, v AlterTimeSeriesWrapper_remove_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_remove_Params_List) String() string {
	str, _ := text.MarshalList(0xdb7bfcfe4d45ff53, s.List)
	return str
}

// AlterTimeSeriesWrapper_remove_Params_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Params promised by a client call.
type AlterTimeSeriesWrapper_remove_Params_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_remove_Params_Future) Struct() (AlterTimeSeriesWrapper_remove_Params, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_remove_Params{s}, err
}

type AlterTimeSeriesWrapper_remove_Results struct{ capnp.Struct }

// AlterTimeSeriesWrapper_remove_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Results.
const AlterTimeSeriesWrapper_remove_Results_TypeID = 0xf44980b23013003b

func NewAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results{st}, err
}

func NewRootAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results{st}, err
}

func ReadRootAlterTimeSeriesWrapper_remove_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Results{root.Struct()}, err
}

func (s AlterTimeSeriesWrapper_remove_Results) String() string {
	str, _ := text.Marshal(0xf44980b23013003b, s.Struct)
	return str
}

// AlterTimeSeriesWrapper_remove_Results_List is a list of AlterTimeSeriesWrapper_remove_Results.
type AlterTimeSeriesWrapper_remove_Results_List struct{ capnp.List }

// NewAlterTimeSeriesWrapper_remove_Results creates a new list of AlterTimeSeriesWrapper_remove_Results.
func NewAlterTimeSeriesWrapper_remove_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return AlterTimeSeriesWrapper_remove_Results_List{l}, err
}

func (s AlterTimeSeriesWrapper_remove_Results_List) At(i int) AlterTimeSeriesWrapper_remove_Results {
	return AlterTimeSeriesWrapper_remove_Results{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapper_remove_Results_List) Set(i int, v AlterTimeSeriesWrapper_remove_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapper_remove_Results_List) String() string {
	str, _ := text.MarshalList(0xf44980b23013003b, s.List)
	return str
}

// AlterTimeSeriesWrapper_remove_Results_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Results promised by a client call.
type AlterTimeSeriesWrapper_remove_Results_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapper_remove_Results_Future) Struct() (AlterTimeSeriesWrapper_remove_Results, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapper_remove_Results{s}, err
}

type AlterTimeSeriesWrapperFactory struct{ Client *capnp.Client }

// AlterTimeSeriesWrapperFactory_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory.
const AlterTimeSeriesWrapperFactory_TypeID = 0xc5f12df0a2a52744

func (c AlterTimeSeriesWrapperFactory) Wrap(ctx context.Context, params func(AlterTimeSeriesWrapperFactory_wrap_Params) error) (AlterTimeSeriesWrapperFactory_wrap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapperFactory_wrap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AlterTimeSeriesWrapperFactory_wrap_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapperFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c AlterTimeSeriesWrapperFactory) AddRef() AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory{
		Client: c.Client.AddRef(),
	}
}

func (c AlterTimeSeriesWrapperFactory) Release() {
	c.Client.Release()
}

// A AlterTimeSeriesWrapperFactory_Server is a AlterTimeSeriesWrapperFactory with a local implementation.
type AlterTimeSeriesWrapperFactory_Server interface {
	Wrap(context.Context, AlterTimeSeriesWrapperFactory_wrap) error

	Info(context.Context, common.Identifiable_info) error
}

// AlterTimeSeriesWrapperFactory_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapperFactory_Server.
func AlterTimeSeriesWrapperFactory_NewServer(s AlterTimeSeriesWrapperFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapperFactory_Methods(nil, s), s, c, policy)
}

// AlterTimeSeriesWrapperFactory_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapperFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapperFactory_ServerToClient(s AlterTimeSeriesWrapperFactory_Server, policy *server.Policy) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory{Client: capnp.NewClient(AlterTimeSeriesWrapperFactory_NewServer(s, policy))}
}

// AlterTimeSeriesWrapperFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapperFactory_Methods(methods []server.Method, s AlterTimeSeriesWrapperFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate_data.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wrap(ctx, AlterTimeSeriesWrapperFactory_wrap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapperFactory_wrap holds the state for a server call to AlterTimeSeriesWrapperFactory.wrap.
// See server.Call for documentation.
type AlterTimeSeriesWrapperFactory_wrap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapperFactory_wrap) Args() AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapperFactory_wrap) AllocResults() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results{Struct: r}, err
}

type AlterTimeSeriesWrapperFactory_wrap_Params struct{ capnp.Struct }

// AlterTimeSeriesWrapperFactory_wrap_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Params.
const AlterTimeSeriesWrapperFactory_wrap_Params_TypeID = 0x95064806dc018bfe

func NewAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params{st}, err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params{st}, err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Params(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Params{root.Struct()}, err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) String() string {
	str, _ := text.Marshal(0x95064806dc018bfe, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) TimeSeries() TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return TimeSeries{Client: p.Interface().Client()}
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) SetTimeSeries(v TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Params_List is a list of AlterTimeSeriesWrapperFactory_wrap_Params.
type AlterTimeSeriesWrapperFactory_wrap_Params_List struct{ capnp.List }

// NewAlterTimeSeriesWrapperFactory_wrap_Params creates a new list of AlterTimeSeriesWrapperFactory_wrap_Params.
func NewAlterTimeSeriesWrapperFactory_wrap_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AlterTimeSeriesWrapperFactory_wrap_Params_List{l}, err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params_List) At(i int) AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params_List) Set(i int, v AlterTimeSeriesWrapperFactory_wrap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params_List) String() string {
	str, _ := text.MarshalList(0x95064806dc018bfe, s.List)
	return str
}

// AlterTimeSeriesWrapperFactory_wrap_Params_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Params promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Params_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapperFactory_wrap_Params_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapperFactory_wrap_Params{s}, err
}

func (p AlterTimeSeriesWrapperFactory_wrap_Params_Future) TimeSeries() TimeSeries {
	return TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type AlterTimeSeriesWrapperFactory_wrap_Results struct{ capnp.Struct }

// AlterTimeSeriesWrapperFactory_wrap_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Results.
const AlterTimeSeriesWrapperFactory_wrap_Results_TypeID = 0xb48982ac9bcd5d11

func NewAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results{st}, err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results{st}, err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Results(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Results{root.Struct()}, err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) String() string {
	str, _ := text.Marshal(0xb48982ac9bcd5d11, s.Struct)
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Wrapper() AlterTimeSeriesWrapper {
	p, _ := s.Struct.Ptr(0)
	return AlterTimeSeriesWrapper{Client: p.Interface().Client()}
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) HasWrapper() bool {
	return s.Struct.HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) SetWrapper(v AlterTimeSeriesWrapper) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Results_List is a list of AlterTimeSeriesWrapperFactory_wrap_Results.
type AlterTimeSeriesWrapperFactory_wrap_Results_List struct{ capnp.List }

// NewAlterTimeSeriesWrapperFactory_wrap_Results creates a new list of AlterTimeSeriesWrapperFactory_wrap_Results.
func NewAlterTimeSeriesWrapperFactory_wrap_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AlterTimeSeriesWrapperFactory_wrap_Results_List{l}, err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results_List) At(i int) AlterTimeSeriesWrapperFactory_wrap_Results {
	return AlterTimeSeriesWrapperFactory_wrap_Results{s.List.Struct(i)}
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results_List) Set(i int, v AlterTimeSeriesWrapperFactory_wrap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results_List) String() string {
	str, _ := text.MarshalList(0xb48982ac9bcd5d11, s.List)
	return str
}

// AlterTimeSeriesWrapperFactory_wrap_Results_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Results promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Results_Future struct{ *capnp.Future }

func (p AlterTimeSeriesWrapperFactory_wrap_Results_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	s, err := p.Future.Struct()
	return AlterTimeSeriesWrapperFactory_wrap_Results{s}, err
}

func (p AlterTimeSeriesWrapperFactory_wrap_Results_Future) Wrapper() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper{Client: p.Future.Field(0, nil).Client()}
}

const schema_a01d3ae410eb4518 = "x\xda\xacZ}x\x15\xd5\x99\x7f\xdf\x99\xdc\x0c\x1f\xd1" +
	"\x9b\xe3$\xa4\x09\x09\x97\x84\x10 +\xd9\xe4\x86\xa8\xd0" +
	"\xb2I\x80+\x81\x92\x9aIPK*\xab\x93{'\xc9" +
	"\x85;w.3s\x81\xb8eA*m\xed\x16\xab\xac" +
	"<\xd6g\xb5\x8a\xad\xed\xc2\xd6J}d[xv\xfb" +
	"\xec\xaat[\x90\xb6X\xd8.\xb6\xd8Vm\x8bT\xb4" +
	"V-R\x84\xd9\xe7=s\xe7\xde!\xb9$\xf1\xe3\x9f" +
	"\xc9\xcd\x9c\xf7\x9c\xf7\x9c\xf7\xe3\xf7~\x9cil\xbf\xa2" +
	"Mh\x0a\x94\xcd\x00\xe8\xf9*\x06\x0a\x1d\xe5X\xe0\xbe" +
	"\x8eC+\xb6\x00\x9b\x8a\x00\x05\x12@\xf3:v\x00\xa1" +
	"\xc0)\xda\xfa\xb3\xc2\xd3\x9b\x9f\xd8\x06J%\xa2\xb3W" +
	"\xbf\xb1\xff\xd5\xe7\xaf9\x0f\x11\x94\x8a\x10\x9bUv\x15" +
	"\xca\xeb\x18\xd1\xeb\xec[\x02\xa0S~Q~k\x9bu" +
	"`\x1b(2\xa2\xf3\xb1\xc8\x1f\x8b_YP\xf5\x08\x04" +
	"D\x09@\x9e[\xf2\x92<\xbf\x84~\xb5\x94\xfc\x01\xd0" +
	"Q^\xfe\\\xe3\xc1\x17\xd7}\x1e\x98,\xe4h\x01e" +
	"Vz@./%\xc2\xd2\xd2'\x00\x9d\xaeGn(" +
	"1J\xd6\xdf\x05l\x1a\x02\x04\x90\x18\xdeU\xba\x06\x01" +
	"\xe5\x9d\xa5\xad\x80\xce\xf7\xff\xf9/\xa7^\x8c=\xf3e" +
	"?\xc1\xc1\xd2\xdb\x89\xe0('8\xb2i\xf5\xb3k\xbf" +
	"\xba\xf1n\x97\x80\x9f00\xa5\x9bN\xf8\xdc}EM" +
	"\x1b\xa5\xb7\xee\x1e\xb1\x897K\x0f\xc8\xe7\xf8&\xde\xe1" +
	"\x9b\xd8u\xff\x97\xbe#\xa4~\xf1\x15\xdf\x12\xcb\xa6\xf4" +
	"\xd1\x12\xa7~\xd8r\xdf\xb6-\x83\xf7\xba\xe2s\xb9\xb7" +
	"Ly\x9a\xb8G\xa6\x10\xf7\x8b\xff\x84\xbf*\xec(\xdc" +
	"\x09\xac)K04\xe54\x11l\xe7\x04[o\xfa\xf8" +
	"\x9c\x0d\xeb\xbf\xb8\x13X\x9d\xb7\xf6wi\x81\x02\xe7\xd5" +
	"\xd3\x7f\xf7\x8b\x8ey\x0b\x1f\xf4\x9fl\xd7\x94^\x9a\xfa" +
	"8\x9f\xfa\xcb\xdf\x7f\xfd\xe4\xe7B\x9b\x1e\xf23?3" +
	"\xe5KDp\x81\x13l<s\xebc\x93\xc5\x96\x87\x81" +
	"\xcd\xce\x12T\x97\x1d \x82\xa62\"81\xe7\x81\x83" +
	"\x89\xa7?\xf6\x0d`\xb2\xe8\x97@\xf3\xee\xb2E(\xef" +
	"/+\x03\x90\x0f\x96-\x95\xcf\xd0/\xe7\x94\x9e\xbc\xd8" +
	"\xf6\xf0\xfao\x0d\xa7\x96O\x96\xfdY~\x95H\x9a\xdf" +
	")[*\xc8\xeb\xca%\x00\xe7\xe4\xadUm\xbfz\xef" +
	"\xcb{\xfc\xbb[U\xce5\xa7\x95\x13sl0\x1b?" +
	"\xb9\xa4\xf0\xdf\x80U\x8a9\xfb\x02l~\xa0<\x8c\xf2" +
	"nZD~\xac\xfc\x0b\xf2\x05\xbe\x9c\xbc\xfc\x86\xd9\x0b" +
	"\x8de{\xfd\xcb\xfd\xae\xfcIZ\xee\x1d\xbe\xdc\xd3\xe2" +
	"k\xd1\x9f\x1e\xea\x7f\x0a\xd84!\xb7U\xc0\xe6\xd2\x8a" +
	"\xe5(\xcf\xa9\xa0\xe5fV\\\x0b\xe8\xb0\xd5G\xfe\xe5" +
	"\xdb[\xefz\xca\xaf\x939\x15\x7f\xa6\xa5\x16V\xd0R" +
	"\xa5\x1d\xa7\x92\xf7\\\xff\xccS>\xa7X]\xd1K:" +
	"9\xf4\xe9g$e\xe3\xc9}\xc0\xea\x05\xe7\xc9;\xef" +
	"\xbf\xff\x8d-o\xff\x96\x98,\xabx\x14e\x953Y" +
	"\xcd\x99L\xbdZX\xff\xf6\xac\xd7\xf6g\xb4'\xd0\"" +
	"jE\x1f1\xd1+6\x00:\xe7\xef;\xfd\xcd\xffz" +
	"\xf17O\xfb\xd5{\xc4%8\xc1w\xf1\xeb-\xa7\x0e" +
	"E\xef\x98\xf1\x8c\x9f\xa0|\xeaV\"\x989\x95\xeb\x7f" +
	"\xde\xa3\x83?\xae\xbd\xfbY\xf2P\xe1\x12\x0f\x0d\x90\x85" +
	"N\xbd\x0a\xe5USi\xd6\x8dSC\x08\xe8T\xde\xf9" +
	"\x83-}\xaf\xedz\x16X}vA\xad\x92\x1bk\xba" +
	"\x92\x16\\2\xeb\xb1G\xff4\xf7\xcd\x83#\xcc\xe1\x81" +
	"\xca/\xa1\xfc\xddJ:\xdd\xe3\x95K\xe5\xe3\x95d\x0e" +
	"\x13^:\x1bx0\xfc\xfc\x0f]\xcb\xcdx^%7" +
	"\xed\x13|\xb9\xef\x15M\xf9\xfe\xe93w\xfc\xcf\x08\x05" +
	"\x9f\xab\\\x84\xf2\xc4*Z.P\xf5\x05\xf9F\xfa\xe5" +
	"\xcc\xfb\xc6\xea#G\xbf}\xe8G\xc3\xf0\x83K\x7fa" +
	"\xd5U(w\xf2\x09\xcb\xaa\xc8#\xe5\xaf\x07\xa7\xee\xfd" +
	"Z\xf8\xb0\xcf#\x7f[e\x92\x86\xbe\xf6\xf9\xf6\x17\x8a" +
	"j\x1e9\xec\x1e\x92\x8f\x1c\xa9\x9a$@\x81\xf3\xbf\xc9" +
	"o\xee:\xf1\xf8\x95G@\x99\x86\xde\xd0\xc1*\xee." +
	"\xc7\xabh\xbf{O\xef\xb5\xef=\xbb\xf3\x88\xdf\xc4\xce" +
	"U\xed \x82\x89\xd3\x88`^\xff\xce[j\x9e\xbd\xfa" +
	"'>\xae\x0b\xa7q\xae\xc5\x0f\xbf\xf8z|p\xfeO" +
	"F@\xc9\x9ci\x07\xe4\xa6iD9w\xda,R\xc2" +
	"\xd2@\x1a\xeb\xb6\xef\xf9i\xc6'\xb9]`\x88\xdb1" +
	"\x0b\x91]\x1c\xfc\xc1=o\x1d\xd8\xbf\xedg\xa0\xd4#" +
	"\xe6l\x8cs\xd3C;P\xde\x16\"9\xdc\x11\"9" +
	"\x1c86;\xb1\xad\xe1\x91\xe7}\x96Z>\x9d#\xd3" +
	"+\xbf\x9f3\xe7\xc1ik\x7f\xce\x97\xf1N\x13\x98\xce" +
	"\x9d\xbft:1z\xfd\xf6yS^\x99\xb4\xf1\xe7#" +
	"\xf6\x9c\x9e~@\xde4\x9d\x98\x0cM\xdf\x0c\xe8<\xf2" +
	"\xbb\x9a[_\xdb\xfc\xcd_\x00\x93\xfd\xc0\xce\xb7\xfe\xf8" +
	"t\x01\xe5\xfd\x9cx\x1f_u\xf3\xea]\x8f\xee\x1dx" +
	"\xf7\x84_\x88\xac\x9a\xe3qU5\x09\xb1\xc7\x89t^" +
	"|\xef\x1f~\x99\xd9\x18\xdfs{5\xb7B\x85\x13\xf4" +
	"\x97\xad\xfb\x8f}\xe9\xcf\x9c\xf4\x9bi\xba\xfa*\x81 " +
	"\x93\x13\x14\x1e\xff\xdeo\xde\xfc\xfb\xd4\xaf\xfd\xb0\xf6\x9f" +
	"\xd5\\\x84G8A\xe9\xd9T\xff[\xa1o\xfd\xc6o" +
	"\x99g\xaa\xb9\x83c\x0d\x11d\xa5:\xdc\xd0\x9bj\xba" +
	"Q\x8e\xd4\xcc\"\x8f\xaf\x91P\x9e8\x83,}R\xf3" +
	"_\xef}\xf0\xd8\xf5/\xb9\x0c\xf9\x8e\xcf\xd5<IR" +
	"\xbe\xc5z\xfa3\xc9\xeb\x8b^\xf6\x9f\xf6\xd5\x1a\xee\xa3" +
	"\xefpN\xbb\xaf9\x7f\xe2\xf5\xba\xd0\xcb>s,\x9f" +
	"QA\xe6\x18\xdb\xd7\xfb\xcb\xa7n\xbb\xf9\xe5\x91!p" +
	"\xc6\x0br\xd5\x0c\x97\xd2 \x93i\xfb\xe43\xbb\xef\xfe" +
	"\xdc\xd7^\xf1\x1f'P{\x88\x98\x94\xd7\x12\x93\xa3\x17" +
	"\xcc\xe7\xcb\x03\xad\xa7\xfd\xf1\xa9v+\xed\xef\xfb\xf7\xf4" +
	"\xbf\xbd\xbb\xf2_\xff\x08\xcal\xf4\xc1\xbd\xab\xbb\x96\xda" +
	"\x1d(w\xd6r\xaf\xaa\xa5\xa8<m\xcd\x13\xe2\x9e[" +
	"_?\xe3?\xcd\xbd3\xb9\xc9\xec\x9a\xc9\x1d\xe0\xc6\xef" +
	"\xfc\xe8\x8fO\xbc\xf1\x86\xdfx\x0f\xba\x04\xc7g\x92\xf6" +
	"g\xb6l\xfb\xee\x8cs\xef\xbe\xe1\xdbIK\x1d!\xe7" +
	"\x85\x8f\xcb\x8dOnY\xf6vN\x0c\xd5u\x87h\x87" +
	"\x7f\xbam\xd5\x9f\x8e^h\xf9\xcb\x88\xa0RZ\xf7\x82" +
	"\\]G\x94Uu\x12\xcaG\xe9\xa7\x13\xfe\xde\xc4M" +
	"%\x7f\xf8\xf5Y?&\xee\xaf\xe3\xd6u\xb0\x8ev\xf8" +
	"\xba\xb1\xec%\xe33{\xde\xf5\xc3\xee\xabu&WH" +
	"\x1d\xedp\xcf\xd9{\xbe\xb2\xefd\xc3y\xbfu)\xb3" +
	"j\xc8\xba\xe2\xb38\x0ax@5\xd2\xda\xe5\xed\xb3^" +
	"\x92\x1f\x98\xb5\x14@>2\x8b\x16\xbb\xb5\xe8oZ\x8e" +
	"M\xd8tq\xc4\xe6\xe7\xcf~A\x8e\xcc\xa6)\xed\xb3" +
	"\xbf ?4\xfbZ\x00g\xca\x8fg\xac-\xfa\xe9Z" +
	"\xc7'\x9b\xd29\xbd\x08\x0e\x18N4\x11\xd7U[\xbb" +
	"5\x10Sm\xb5!\xaa\xa6\x92\xa9\x05=\x9a\xb9>\x1e" +
	"\xd5\x1a\x064\xbb}\xbd\x1aO\xa8}\x09m\x89j\xab" +
	"\x96f[\xb5\xad]\xaa\xa9\xeaVv\xa2\xe8\x9b\xd8\xa9" +
	"\xd9*\xff7\x92\xb4M\x1c\xeaBT\x1a\xc5\x82\"\xc7" +
	")@\xda\x10\xd6\x00\xf4|\x02E\xec\xe9@\x01\xaf\xc0" +
	"\x8bN\x099\xa2\x1c\xe1\x03m4\xb0\x82\x06\x84\x0bN" +
	"\x09\x0ad\x1c\xd8\x0b\xd0\xd3A\x03+i@|\xcf)" +
	"A\x11@V\xf8\x8c\x154\xf0i\x1a(8\xef\x94`" +
	"\x01\x80|#\x1f\xe8\xa2\x81[h \xf0W\xa7\x04\x03" +
	"\x00\xf2*\\\x00\xd0\xb3\x92\x06n\xa3\x81\xc2sN\x09" +
	"\x16R\xd0\xc4E\x00=\x9f\xa6\x81\x18\x0dH\xef:%" +
	"\xa4\x1bY\xc50@\xcf-40H\x03\x13\xce:%" +
	"8\x01@\xd68\x8f\xdbh \x81\x02VM\xfc\x8b\x83" +
	"%8\x11@\x8e\xf3\x91\x18\x8d\xa4h\xca\xa4w\x9c\x12" +
	"\x9c\x04 \xeb\xd8\x0d\xd0\x93\xa0\x81\x8d40\xf9m\xa7" +
	"\x04'\x03\xc8i\xec\x03\xe8\xb1i`\x0b\x0a(\x0dD" +
	"u\x0c\xe6@\x1d\x10\x83\x80\x92\xc9\xdffSW\xf7\xad" +
	"3\x18\xb7l\xc3\x8cGAT\x13P(\x99\xd1\x14\x06" +
	"s\xa9ef\xaae\xd1\xdb,\xe2\xbao[\xb5\xa4\xd5" +
	"\xa9\xe9X\x9c\x8b}\x80X\x0c\xb8y\xbdfZq#" +
	"\x89E `\x11`\xc8\xb2U\xd3\xc6bg;\xab\x11" +
	"\xbf}\xf1\xf7\xf7g\xe8$-\x19\xcb\xf36j\x84q" +
	"\x12\x088\x09\xd0I\xc5\xa3F\xd26\x0d\xc0\x04\x14:" +
	"1\xcd\x8a\x9a\xf1\x94\x0d\x92o\xf5\xac\x0d\x09>\x1bZ" +
	"aDU\x9b\xa8\xc8z\x8a\xc5\x02\x002\x1e\xa6V\x00" +
	"(\xb7\x88\xa8\x0c\x0a\x88\xc8\xed\x86i\xcb\x01\x94\x98\x88" +
	"JJ@& \xb7\x19\xa6/\x00P\x06ETl\x01" +
	"\x99(p{a\xebz\x01\x94\x94\x88\xcag\x05\x14\xe3" +
	"\xb4\xf5\x9f\xbf ^<\xfc\x8f\x87\x8fe\xb6\xee\x0cj" +
	"\xf1\x81A\xfbS\x9f\x02\x00\xef\x08\xad\x09\xd5N\x18I" +
	",v\xce\x7f\xe5\xb9\xf9\x8d\xef\xbd\xf9\x9aGl\xc7u" +
	"\xadG3\xe3 j\x162\x7f\xce\x87\xccw,\xf4\x8e" +
	"\xd5\x9aL-\xe8^\xdcI'\xaa\xe4\x9b\xec\xbc\x9d\xd3" +
	".\xa3?\x02\x8b\xac\x01@\x91\xb5/\x07\xc0\x02\xb6p" +
	"\x07\x00\x06\xd8B\x1a+d\xf3\xfb\x00\x9chB\x8f\x1a" +
	"\xfa\xe2(\xb4&\xf4y\xd75]\xeb\x0chf<j" +
	"uk\xd0\xaa\x1b\xe1\xc6\xa6\x16gmR\x8fw\xabQ" +
	"\x1d\x82F8\x1cq,}0\xde\x1dU\xe7Av\xf2" +
	"\"\x1b\xd3\x8b\xa3|:^\xeb\xe8\xa9\xf8b+\xea\xcd" +
	"o\x9c\xef\xa4\x07\x8d\xc1\x9b\xcd\xfef\x90\xaei\xea\xc8" +
	"\x1e\xa0\xc0\xa7\x97\x95\x993kV\xc3\xa0\xa6\xc64\xb3" +
	"\xb6[\xb3\x82\xe9\x84m)\x05Y-]A\xc2\x9f " +
	"\xa2R+`\xabK\x86W\x02v\x89\x88\xc1\\\xdc\x01" +
	"\xa4\x97cq\xb1\xd2}\x19F\x19\xc8\xf1\xf3!\xcd\x17" +
	"\x89\xa8\xcc\x16\xd0\xd1\x12\x9a\xae%m\x8bT\xf7A\x99" +
	"\xd1\xdbZ\xce\x06\xad\xcb\xe9\xaf\xcb\xa7\xbf0\xd7_$" +
	"\xcc\xf5\xb70\xcc\xf5\xd7\x12\xe6\xfa\x9b\x1b\xe6\xfa\x9b\x19" +
	"\xe6\xfa\xab\x0a\x03\x84\xcch\xaai>=\xc3\xd7\xd0\xb3" +
	"y\x1e=\xe7\xb5\xd0\xf3\x9aFz^\xcb\x9f\xd7\xb5\x8c" +
	"S\xf2]\xaa)\xf91\xb8p\xbc\xe0\xdd\xadY\xa41" +
	"\xb8\x9c(c\x19B\x9f(\x8bsY\xd80Q\xfa\xb9" +
	"\xb6'l\xcd\xccm\xf4fSM\xa54\xf3z5j" +
	"\x1b\xe6P\xc3\x06SM\xd5v\xa9\xc1\xe1Z\xec\xcd\xb0" +
	"\xfe\x980n\x9f\x9a\x9c/\xdc\xf4\xa4S)\xc3\xb4\xb5" +
	"XCT\xb5\xb5\x01\x83\xb6\xe0j\xd3\x02o\xe2(z" +
	"\xe7R\x11/5\xe4\xfa\x8c!\xcf\x130HD\x9e8" +
	"2\x7f\x08\"\xfc\xb2\xb8L\xf8\xf4\x04\x7f\xbdaz\xfb" +
	"\xc9+{.\x00MO%T[#\xd9\x17\xfb\xab\x16" +
	"\x0e9\xf9\x18e\xcf\xbf,\xd9o\x98\xbaj\xc7\x8dd" +
	"C\xbfa\xb6'\x12\xb5\xdd\xad\xae\xaa\xfd\xdcj2g" +
	"J\x08(\xa9\x89DN\xc3\xcdK\xcbf.\xfd\xfc\xb1" +
	"\xfd\x00\xd0\x86\x0cCJ\x81\x80\xfe\x97\x0cg)\x13\x10" +
	"\x11i:\x87e\x9a\x95\xed\xd3\xd0\x16/\x01\xd4\xcb9" +
	"\xdc\xe2\x9e\x9br\xb2\xcf\x18\x07(\x05\x88\xb9t\x91a" +
	"\xb7\xb3\xb8\xe7\xa6\xc5F\xb2?\x0e8\xa0\x14\x88\x01\x80" +
	"l\xed\x82^\x1e\xc8\xd8\x02\x10X@j\x8d\x9a\x9aj" +
	"km\xc8W9\xde\xf1\xe0\xaa\xc3G\x9fx\xd2\x85\xbd" +
	"\x91\xb1\x853\x0fq\xee\x9c>W\xb9c\xaf\xd3\xadY" +
	"F\"m\xc7A4\x92J-g\xeb\xa5\xb7\xe8Up" +
	"2\xc3^\x10\xe4\x89(!f\xd3*\xf4*nv!" +
	"\x0c\x02{SB!\xdb\xb8A\xaf\x8d\xc4~G\x1b>" +
	"!\xa1\x98\xed\x0b\xa1\xd7gaG\xeaA`\xff-a" +
	"A6\x8dE\xafHg\xfbh\xcd\xdd\x12\x06\xb2\x19&" +
	"z\xb9({h9\x08l\xa7\x84\x85\xd9f\x14z\xb5" +
	";\xbb\xab\x1b\x04v\x87\x84R\xb6xD\xcf\xa6X\x9a" +
	"\xe6\xe9\x12N\xc8\x96\xb3\xe85\xd1\x98Jc\xab$\xc7" +
	"\xf4\x89\xa3\x0dC\xa6\x9a\x1c\xd0\xda<Pos\x9d\xa2" +
	"\x0dC\xf4ge\x1b:V\xba\x8f\x93p\x13r<\xec" +
	"\x064\xdb\xd0\xd13v\xea\x8e%(\xc0\xc7\x8d$\xff" +
	"\xaf\x0b\xf3[J\xc6q\x1a<b+o\xb4\xe9\xf6A" +
	"WvY\xb4r\x86\x9dm\x0d\x0e3J\xf1r(\x12" +
	"\xe20\xd2\xc5-\x9d,\xc0k\x92\xa1W\x0a\xb1\xa6^" +
	"\x10\xd8\x1c\xd2\xbf\xd7\x86@\xaf\xeacU[A`\xa5" +
	"\x92\xe3\xa1\x10a\x19\x97\x86\x0bO\x18\xbbIM\xa45" +
	"k\xd8\xb9\x03y\xce\x1dM\x18\x96f\xd99oi\xb7" +
	"k\xbbB#\xc2\xa0\x17nK\x84Q\xb2\x951b\x8a" +
	"g\xf7\xa4\x11~p\x1e\xe1\x98\x1b\xe1&.\x00\x08\xc5" +
	"\xd4xb\xa8u\xd0H\x9b\x89\xa1\x0f\x8a\xfe\xddZh" +
	"\x04\x1e-\xca\xed~\xf3\x06w\x0e2\x7fs\xeb\x12\xe4" +
	"\xcfg\x1e\x9eeqp\x15}\x1110\xe6\xee\x1a\xdc" +
	"\xd7\xd2PJ\xf3\x9d\xba\xc6=u\x0d\x80\xa4\xc6b\x92" +
	"\x9eN\x8c%>n\xf5<\x84Ht\xbc\x09\xd9\xe3\xcd" +
	"!\xeb\x9c\xed\x86\x10\xe6\xa5\xacMt\xe6\xabET\xae" +
	"\x13\xd0\xe1\xc9\xf5\x12\xd5\x06\xd4F&\xd3\x9b\xb5dl" +
	"\x89j\xe7\x19\x19O.\xb32\xb7\xa3\x8f&\xa8\xe5M" +
	"\xcc\xf2\xa5\x13\x1f \xa6\xe7\xf5Fr\x15\xe4\xaa)\xc9" +
	"\x96\x90l\x13\x9d`\xa3\x88\xca\x9d\x02V\xe1E'#" +
	"\xd5;\xc2\x00\xcagET\xbe(`\x95p\xc1\xc9\x94" +
	"\x02\xdb(\xe0m\x11Q\xf9\xb2\x80U\xe2{N\x9b[" +
	"\x0c\xdcE\x8b\xdc)\xa2r\x8f\xafrd\xdb\xe9\xed\x17" +
	"ET\xee\x130hk\x1b\xedl\x0d\xd4\x9f0T\x1b" +
	"'\x83\x80\x93\x01\xa5x\xd2\xc6\x00\x08\x18\x00\x0c\xf6\x19" +
	"F\x02\x11\x04D\xe0\x02\x1dMYc\xfbK\x83J\xaf" +
	"?*\xa1\x06\xc6\xeb\x9f\xae\xd7\xbbq\xd6\xbb4@\xaf" +
	"S\xcdX=\x8f\xb3A\xf2\xcfQ\xa2l\xe1\xe8i\x99" +
	"\x87\x80\x19\x00\xcc\x97\x0b\xfa\xa1\xcc\x1eJi\xcbb#" +
	"\xca\xc4\x821r\x1f\xc8\xe1\xb6\xd7\xa9C/-aM" +
	"\x14\x7fg\x12n{M5\xf4n)X9\x8d]!" +
	"\xb5\xf6\x1b\xe6\x0dI\x8arn\x12u)L\xfb\xad4" +
	"\x92\xb44\xbd/\xa1ujz\x9f\x86&\xf1-\xca\x1e" +
	"%r\x15\x80\xd2&\xa2\xb2\xc2\xe7\xf8\xcb\xe8\xe5\x12\x11" +
	"\x95.\xaaU\x05\xd7@;\xe9e\x87\x88\xcaJ\x01\xd1" +
	"D\x09\x04\x94\x001\x9e\xfd\x95\xf2~\x8d\xe5\xf3^\xf4" +
	"\xf3\x82D\x96^\x1a\xa7\xd9i\xb1H\xa6\x8c\xca&\xaa" +
	"c\xe1\x80\x99\x0d\x1cY\x9b\xbd\xac\xd1\xfa\xb3\x09\x0c\xe6" +
	"\x12\xafL+\xe3}\xa4\xd1.+\xb4\xdeG\x09\xc3r" +
	"\xbd\xbe\xf1U\x83\xb9\xb02L\x9a\x97T\x84K\xdd\x8a" +
	"\xbe\x91\xab\xf2\xae5\xdc\x01\xb7\xad\xe1\x15\xe1\x1d\xb7\xf3" +
	"\x8apS\x1f\xaf\x08\x87\xd6\xf0\x8a0\xbd\x9cW\x84\xeb" +
	"z\x01Pb:\xfd\x99\xc0\xe2\xf4r\"\xd3\xba\x01p" +
	"\x12S\xe9\xcfd\xb6\xda$\xe9G\xa3\xba\xbaXMB" +
	"0b\xe9a'\x1e\x1d\xd4\xa2\x91h\x04\x82\xaai\x0f" +
	":\xf1\x94\x95X\x96\xb2\x12\xd0\xbaXoi\xef4\x1d" +
	"=n\x1a\xd1\xce\xb8\x09\x92\x11m\xa1\x02\xbf\xb33\x15" +
	"\x8f@\xd0\xd2W\x98\xce@\x7f,\x11\xb1t\xde\x0f\xa0" +
	"\x99\x8b\xf5kT\x10W\x98D\x17\xb1\xf4\xa60\x88\x1d" +
	"\xa6\xa3\x9b\xf4O\xb8\x91\xa8\xd2k5Koj\\\x01" +
	"\x98p\x06\xac\x0d\xa9\xe6\x9b[\"\x80-\x8en\x0cF" +
	";\xd4\xd8R\x08iz8\x92?\xe0\xe6K\xf3\x1b\xdc" +
	"D=\x9b\xc4\xf8\xe2$\x85\xc4Z\x11\x95F\x9f\xbb\xcc" +
	"]\x90\x0b\x9e\x9b\xfbMC_\xdcs\x93\x87\x07\xadQ" +
	"*\x0e\x06\xb08W5\x8cR$\x8d\x16\xfd5\x8c\x0d" +
	"s\xddE\xf9\\7\xecw\xddLl\xe9\xac\xcf\xb9\xee" +
	"\xe6L\x07bX\xdb!\x08\x18ZOx\xe75\x94\x82" +
	"\x84k\x18\xcc\xdd\xe5\x0d\xb3\xfe\xd1\x13\xe0\xe1E\x7f`" +
	"\xbc\x01\xc5k\x9f\xf8D^\x9f\x139?%\"\x9b\xbb" +
	"5\x97\x99\x04c\x9a\x15\xc5\xe2\xdc\x8dPF\xbe\xaa\xf5" +
	")m\xc3\xca\xb8\x8e\x19>\xe0\x05\xbf\xfc\x0e\xd2\xd3\xc3" +
	"[&\xae\xc0Z\xea\xb9\x83\xcc\xad\xe7\x0e2\xb3\x9e;" +
	"HU=w\x90\xd2z\x80\xa0e\xa5\x9a\xe8\x11\xa6G" +
	"3=\xe6\xd1\xa3\xe5\xb2iBW\"m\x91\x982\xb0" +
	"\x9f\xefp9{\xaa\xcf\xd9S\x90\xdc{d\x89\xedf" +
	"D\x97b\xc5X\xf9\xa7\xed\xcf\xcf\xf3\xb4\xa9\xfc\x10\x98" +
	"-P\xc4<\xa1m\x1c\xd9\x81\xa9\xe9\xc6z\xcdCg" +
	"?\x97\xdb}\\<0\x87\xd6\xcb\xd9\xe4\x87\x09\x0d\xf9" +
	"\xc0\xb7>\xd7\xf2\x0b&\xe2\x96\x9d\xab\xbe\xfc\xe6s\xe5" +
	"\xfb\xeca\xdc\x90\xd4\xf2\x15<\xe1\\\x96\x10\xd2\x92\xb6" +
	"94\xbc\x0fq\x19\x99\x8e#'\xc9W\xa1\xf8\xdb\x99" +
	"\xdc\x95}\xb5\xe5x\x1a\x1ey\xc5\x8a\xa62\x01}\xd7" +
	"\xadl\xe2\"\xdf\xf5~\xa0{\xb3\x8bM1\xc7\x9d=" +
	"\x94\x02\xd4\x94b\x9e\xd6x\x97z\xe8]&\xb1u;" +
	"\xdcR\x1e\xb3\xf7\xcf\xe8]c2u+/\xe5Q\xc8" +
	"\xde\xc9\xa2w\x13\xcf:\xc3 \xb0v\x09\xc5\xec\xb5(" +
	"~\x1c27e-\x0bx\x89\xeb\xb85Yl%z" +
	"\x07@\xaaf=\x9b@\xaf\xed\xda\x86!\xfe\xae\x0d[" +
	"]\x1b\xcd\xe4\x89\xb9\xcc\x14\xdew\xfbjx\xe0\x0d\x8c" +
	"\xe5|\x1fQ\xd6<\x0e\x9f\xf0\xa4\x92\x1d\x18Q|\xfa" +
	"[N\xdcu\xc4\xa4M\x18\xf5\x09\x0e\x84\x8f\xbb@\xf8" +
	"\x98\x0b\x84\x0f\xb9@\xb8s\x01\x07\xc2\xed\x8bx\xa6\xb0" +
	"\xad\x9eg\x0a\x9b\x96\xf3La\xa8\x8fg\x0ai7S" +
	"X\xb7\x9cg\x0a<}\x98\xcc\xe2T\xb0\x16\xf1\xdb\x11" +
	"\xbc\x82\xad\xa2\xff\xaed\xca\x1a\x80\xa0\xad\xc7\x93A[" +
	"]?\x10\xb4uuck\xca\xd4\xa2\xf1\xd4\xe6\x81\x84" +
	"\xd1g\xaa\xb1\xe0\x86x2\xe6X\xe9$\x15\xf5\x96\xab" +
	" #\x1dSu\x03\xa4t\xd2vL-1\x98\xd6\xe3" +
	"1\x1aQ\xe3f\xca\xd4,N\xb5^M\x19\xf4\x1f\x88" +
	"\x96%E\x8d\xb0h4K\x9a\xdd\xe8\xc4\xb4\x0d)#" +
	"\x9e\xb4!\xb8R\xd3S\xe3\xf5@_\xb36o\x02\x19" +
	"\xcey_\x88B\xe78\x9co\xf2\x98\xa9\xea\xe5\xdb\xc2" +
	"y\xd3\x16\xaf\x17\x89\x03\xbe\xfb(D\xa6\xd6\xe4\xee\xa3" +
	"\xb2Q&\xde\x9d\xb9{zN@\xa4\x1c\x1f\x91\xfdx" +
	"\x07\x80\xf2\x9c\x88\xca\xff\x09\xc8D,AJH\x8f?" +
	"\x0f\xa0\xfcJD\xe5\x94\x80\x92\xa5\xa52\xf1\x00\x18^" +
	"\x85W;nu\xdd\xa9\x02\xa6>\\\x8f\xd6]\xd5-" +
	"\xea\xad\xb5\xf1\xd4\x8axRCk\xa5\xd1A\x0c\xd0D" +
	"\x11\x04\x14}c\x82u\xbdi\xe8|\xd4\\i,Q" +
	"mT\x89& \"\xbc\xffvU\xbe\x0e\xf4\x87\xacc" +
	"GK,\xb3\xec|\x99@o\xbe\x0eL\xd8\xd7\x81\x19" +
	"}\x0f!\xcd4\x0ds\xd42tD\xdbe8\x16\x8c" +
	"?\xb0g] /\x8epI\x8b\x9a\xedZ!\xc5\x02" +
	"\xef[\xb1\\[w\xddr\x10X\x9cb\x81\xf7\xcd\x1a" +
	"z\x1fV\xb0\xd5\x8fz\xb1\xc0\xfbN\x06\xbdOHX" +
	"\xe7\x1a\x10X\x84b\x81\xf7U\x0fz\xdf\xd0\xb1\xf9\xdd" +
	" \xb0&iX\x0f\xd7\xd3w62HV\xbb\xdd\xe6" +
	"\x93gPs_\xf8\xba\xb2\x97o\xf6^\xda[\xca4" +
	"\xd4>\x1a\xeb\x19\x8bM\x9er$o\xfaX\xe1K\x1f" +
	"\xa9\x1c\x19\xd9\xe8\x11mc\x94\xee\xcf\x07\x8a+\xf9Z" +
	"x\x1f@\x06\xc2p\x14\x96T[U\x8a\xd1\xff!d" +
	"yw\xee\xa3>V\x1e\xce\xe5T\xac4\xec\xfb\x9c\x8e" +
	"\xf59\x1e|\x03\xc6B<s\x0aE(\x0fs\xbc " +
	"\xceo\xf8\xf3\x95wm>y.$!_'\xa2\xb2" +
	"\x84\xaa\xa7\xa4M\xc7\xcdA\x9d?\xa1\xbb\x120\x18O" +
	"\xf6\x1b\xc8r\xdb\x18\xe5|\xbci F\xb5\\'\xc8" +
	"\xfb\xce\x18\xbd/fY\xd3\x1e\x10\xd8\\r\x13\xef;" +
	"V\xf4>\xc0c\xd5\xb7\x83\xc0\xca%\xc7\xbb=E\xef" +
	"\xfa4hi6e?^7\x02Z\xdd~D\x1b*" +
	"E\xc3zb\xf7\xde\xf4\xf0\x91\xbf\xad>\xfc#h\x9f" +
	"\x80\xce'\x1aN\xcc\xba\xb3\xfa\xdf\x1f\x86\xf6\x8e,j" +
	"g\x09FEm\x8f:\xbb\x02Q\x97Qf\x85\\N" +
	"E \x8c\xaf7\x9d\x81\xa4\xff\x0f\x00\x00\xff\xff^," +
	"E\xa4"

func init() {
	schemas.Register(schema_a01d3ae410eb4518,
		0x804cca489405d451,
		0x85af7fea06d0820c,
		0x85ba7385f313fe19,
		0x8671dec53083e351,
		0x8976146f144fa050,
		0x8cc364dee8f693b8,
		0x8e78986bc45d7dcd,
		0x8ef30778310c94cc,
		0x8fd77002ae8a97a1,
		0x916880859435c6e8,
		0x95064806dc018bfe,
		0x95887677293b5682,
		0x9c3d3448d73eeae9,
		0x9d7d1f83dda3e6db,
		0x9f35030ba55fed78,
		0xa418c26cc59929d9,
		0xa7769f40fe6e6de8,
		0xaa8cfcdc401d5fdd,
		0xab06444b30722e01,
		0xb0496f3d284f4a13,
		0xb466cacf63ec03c2,
		0xb48982ac9bcd5d11,
		0xb4c346906ee84815,
		0xb5dd785107c358ca,
		0xb9ec27f476022c1b,
		0xc2e0dec0a6ea94fb,
		0xc3238163cae880df,
		0xc48e24c968a234db,
		0xc4a1ec6280be841c,
		0xc5f12df0a2a52744,
		0xc6d2329c05f7e208,
		0xc781edeab8160cb7,
		0xc8caacd1cd5da434,
		0xcb329eb01b0fa313,
		0xcba0220cda41869e,
		0xcd0eadd9a1a66ed6,
		0xcd95f79174b0eab0,
		0xce2cc4225c956634,
		0xce396869eede9f10,
		0xcfaa8d2601750547,
		0xd085b9baf390bec5,
		0xd2a02e856c28d4ba,
		0xd36b1e9c2929e6e4,
		0xd3780ae416347aee,
		0xd7a67fec5f22e5a0,
		0xd9f867b0a2a15d7f,
		0xdb7bfcfe4d45ff53,
		0xdd5b75b5bc711766,
		0xdf705ef1e0b7d506,
		0xe0a71ff36670f715,
		0xe1f480ef979784b2,
		0xe246d49c91fa330a,
		0xe30c466e5bc2735c,
		0xe31f26eed9fb36a9,
		0xe35760b4db5ab564,
		0xe49e838ea9c34b40,
		0xea3f0519d272fdd1,
		0xeba81ca9f46690b8,
		0xedee5faa03af6a1e,
		0xefefafebc8ae5534,
		0xeff8f923b1853525,
		0xf44980b23013003b,
		0xf635fdd1f05960f0,
		0xf7dfe7147d09b732,
		0xf8aa5b6fe2496fee,
		0xfb2eddb58f90f7aa,
		0xfb36d2e966556db0,
		0xfe7d08d4352b0c5f,
		0xff6bcf0c6b23c916)
}
