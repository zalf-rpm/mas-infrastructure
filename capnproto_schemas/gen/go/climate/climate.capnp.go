// Code generated by capnpc-go. DO NOT EDIT.

package climate

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type GCM uint16

// GCM_TypeID is the unique identifier for the type GCM.
const GCM_TypeID = 0xce396869eede9f10

// Values of GCM.
const (
	GCM_cccmaCanEsm2   GCM = 0
	GCM_ichecEcEarth   GCM = 1
	GCM_ipslIpslCm5AMr GCM = 2
	GCM_mirocMiroc5    GCM = 3
	GCM_mpiMMpiEsmLr   GCM = 4
	GCM_gfdlEsm4       GCM = 5
	GCM_ipslCm6aLr     GCM = 6
	GCM_mpiEsm12Hr     GCM = 7
	GCM_mriEsm20       GCM = 8
	GCM_ukesm10Ll      GCM = 9
	GCM_gswp3W5E5      GCM = 10
	GCM_mohcHadGem2Es  GCM = 11
)

// String returns the enum's constant name.
func (c GCM) String() string {
	switch c {
	case GCM_cccmaCanEsm2:
		return "cccmaCanEsm2"
	case GCM_ichecEcEarth:
		return "ichecEcEarth"
	case GCM_ipslIpslCm5AMr:
		return "ipslIpslCm5AMr"
	case GCM_mirocMiroc5:
		return "mirocMiroc5"
	case GCM_mpiMMpiEsmLr:
		return "mpiMMpiEsmLr"
	case GCM_gfdlEsm4:
		return "gfdlEsm4"
	case GCM_ipslCm6aLr:
		return "ipslCm6aLr"
	case GCM_mpiEsm12Hr:
		return "mpiEsm12Hr"
	case GCM_mriEsm20:
		return "mriEsm20"
	case GCM_ukesm10Ll:
		return "ukesm10Ll"
	case GCM_gswp3W5E5:
		return "gswp3W5E5"
	case GCM_mohcHadGem2Es:
		return "mohcHadGem2Es"

	default:
		return ""
	}
}

// GCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GCMFromString(c string) GCM {
	switch c {
	case "cccmaCanEsm2":
		return GCM_cccmaCanEsm2
	case "ichecEcEarth":
		return GCM_ichecEcEarth
	case "ipslIpslCm5AMr":
		return GCM_ipslIpslCm5AMr
	case "mirocMiroc5":
		return GCM_mirocMiroc5
	case "mpiMMpiEsmLr":
		return GCM_mpiMMpiEsmLr
	case "gfdlEsm4":
		return GCM_gfdlEsm4
	case "ipslCm6aLr":
		return GCM_ipslCm6aLr
	case "mpiEsm12Hr":
		return GCM_mpiEsm12Hr
	case "mriEsm20":
		return GCM_mriEsm20
	case "ukesm10Ll":
		return GCM_ukesm10Ll
	case "gswp3W5E5":
		return GCM_gswp3W5E5
	case "mohcHadGem2Es":
		return GCM_mohcHadGem2Es

	default:
		return 0
	}
}

type GCM_List = capnp.EnumList[GCM]

func NewGCM_List(s *capnp.Segment, sz int32) (GCM_List, error) {
	return capnp.NewEnumList[GCM](s, sz)
}

type RCM uint16

// RCM_TypeID is the unique identifier for the type RCM.
const RCM_TypeID = 0x8671dec53083e351

// Values of RCM.
const (
	RCM_clmcomCclm4817    RCM = 0
	RCM_gericsRemo2015    RCM = 1
	RCM_knmiRacmo22E      RCM = 2
	RCM_smhiRca4          RCM = 3
	RCM_clmcomBtuCclm4817 RCM = 4
	RCM_mpiCscRemo2009    RCM = 5
	RCM_uhohWrf361H       RCM = 6
)

// String returns the enum's constant name.
func (c RCM) String() string {
	switch c {
	case RCM_clmcomCclm4817:
		return "clmcomCclm4817"
	case RCM_gericsRemo2015:
		return "gericsRemo2015"
	case RCM_knmiRacmo22E:
		return "knmiRacmo22E"
	case RCM_smhiRca4:
		return "smhiRca4"
	case RCM_clmcomBtuCclm4817:
		return "clmcomBtuCclm4817"
	case RCM_mpiCscRemo2009:
		return "mpiCscRemo2009"
	case RCM_uhohWrf361H:
		return "uhohWrf361H"

	default:
		return ""
	}
}

// RCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCMFromString(c string) RCM {
	switch c {
	case "clmcomCclm4817":
		return RCM_clmcomCclm4817
	case "gericsRemo2015":
		return RCM_gericsRemo2015
	case "knmiRacmo22E":
		return RCM_knmiRacmo22E
	case "smhiRca4":
		return RCM_smhiRca4
	case "clmcomBtuCclm4817":
		return RCM_clmcomBtuCclm4817
	case "mpiCscRemo2009":
		return RCM_mpiCscRemo2009
	case "uhohWrf361H":
		return RCM_uhohWrf361H

	default:
		return 0
	}
}

type RCM_List = capnp.EnumList[RCM]

func NewRCM_List(s *capnp.Segment, sz int32) (RCM_List, error) {
	return capnp.NewEnumList[RCM](s, sz)
}

type SSP uint16

// SSP_TypeID is the unique identifier for the type SSP.
const SSP_TypeID = 0xd3780ae416347aee

// Values of SSP.
const (
	SSP_ssp1 SSP = 0
	SSP_ssp2 SSP = 1
	SSP_ssp3 SSP = 2
	SSP_ssp4 SSP = 3
	SSP_ssp5 SSP = 4
)

// String returns the enum's constant name.
func (c SSP) String() string {
	switch c {
	case SSP_ssp1:
		return "ssp1"
	case SSP_ssp2:
		return "ssp2"
	case SSP_ssp3:
		return "ssp3"
	case SSP_ssp4:
		return "ssp4"
	case SSP_ssp5:
		return "ssp5"

	default:
		return ""
	}
}

// SSPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SSPFromString(c string) SSP {
	switch c {
	case "ssp1":
		return SSP_ssp1
	case "ssp2":
		return SSP_ssp2
	case "ssp3":
		return SSP_ssp3
	case "ssp4":
		return SSP_ssp4
	case "ssp5":
		return SSP_ssp5

	default:
		return 0
	}
}

type SSP_List = capnp.EnumList[SSP]

func NewSSP_List(s *capnp.Segment, sz int32) (SSP_List, error) {
	return capnp.NewEnumList[SSP](s, sz)
}

type RCP uint16

// RCP_TypeID is the unique identifier for the type RCP.
const RCP_TypeID = 0x8ef30778310c94cc

// Values of RCP.
const (
	RCP_rcp19 RCP = 0
	RCP_rcp26 RCP = 1
	RCP_rcp34 RCP = 2
	RCP_rcp45 RCP = 3
	RCP_rcp60 RCP = 4
	RCP_rcp70 RCP = 5
	RCP_rcp85 RCP = 6
)

// String returns the enum's constant name.
func (c RCP) String() string {
	switch c {
	case RCP_rcp19:
		return "rcp19"
	case RCP_rcp26:
		return "rcp26"
	case RCP_rcp34:
		return "rcp34"
	case RCP_rcp45:
		return "rcp45"
	case RCP_rcp60:
		return "rcp60"
	case RCP_rcp70:
		return "rcp70"
	case RCP_rcp85:
		return "rcp85"

	default:
		return ""
	}
}

// RCPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCPFromString(c string) RCP {
	switch c {
	case "rcp19":
		return RCP_rcp19
	case "rcp26":
		return RCP_rcp26
	case "rcp34":
		return RCP_rcp34
	case "rcp45":
		return RCP_rcp45
	case "rcp60":
		return RCP_rcp60
	case "rcp70":
		return RCP_rcp70
	case "rcp85":
		return RCP_rcp85

	default:
		return 0
	}
}

type RCP_List = capnp.EnumList[RCP]

func NewRCP_List(s *capnp.Segment, sz int32) (RCP_List, error) {
	return capnp.NewEnumList[RCP](s, sz)
}

type EnsembleMember capnp.Struct

// EnsembleMember_TypeID is the unique identifier for the type EnsembleMember.
const EnsembleMember_TypeID = 0xc8caacd1cd5da434

func NewEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember(st), err
}

func NewRootEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember(st), err
}

func ReadRootEnsembleMember(msg *capnp.Message) (EnsembleMember, error) {
	root, err := msg.Root()
	return EnsembleMember(root.Struct()), err
}

func (s EnsembleMember) String() string {
	str, _ := text.Marshal(0xc8caacd1cd5da434, capnp.Struct(s))
	return str
}

func (s EnsembleMember) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnsembleMember) DecodeFromPtr(p capnp.Ptr) EnsembleMember {
	return EnsembleMember(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnsembleMember) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnsembleMember) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnsembleMember) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnsembleMember) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnsembleMember) R() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s EnsembleMember) SetR(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s EnsembleMember) I() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s EnsembleMember) SetI(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s EnsembleMember) P() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s EnsembleMember) SetP(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

// EnsembleMember_List is a list of EnsembleMember.
type EnsembleMember_List = capnp.StructList[EnsembleMember]

// NewEnsembleMember creates a new list of EnsembleMember.
func NewEnsembleMember_List(s *capnp.Segment, sz int32) (EnsembleMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EnsembleMember](l), err
}

// EnsembleMember_Future is a wrapper for a EnsembleMember promised by a client call.
type EnsembleMember_Future struct{ *capnp.Future }

func (f EnsembleMember_Future) Struct() (EnsembleMember, error) {
	p, err := f.Future.Ptr()
	return EnsembleMember(p.Struct()), err
}

type Metadata capnp.Struct

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0xfb36d2e966556db0

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.Root()
	return Metadata(root.Struct()), err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0xfb36d2e966556db0, capnp.Struct(s))
	return str
}

func (s Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata) DecodeFromPtr(p capnp.Ptr) Metadata {
	return Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata) Entries() (Metadata_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata_Entry_List(p.List()), err
}

func (s Metadata) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata) SetEntries(v Metadata_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Metadata_Entry_List, preferring placement in s's segment.
func (s Metadata) NewEntries(n int32) (Metadata_Entry_List, error) {
	l, err := NewMetadata_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Metadata_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Metadata) Info() Metadata_Information {
	p, _ := capnp.Struct(s).Ptr(1)
	return Metadata_Information(p.Interface().Client())
}

func (s Metadata) HasInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Metadata) SetInfo(v Metadata_Information) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Metadata_List is a list of Metadata.
type Metadata_List = capnp.StructList[Metadata]

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Metadata](l), err
}

// Metadata_Future is a wrapper for a Metadata promised by a client call.
type Metadata_Future struct{ *capnp.Future }

func (f Metadata_Future) Struct() (Metadata, error) {
	p, err := f.Future.Ptr()
	return Metadata(p.Struct()), err
}
func (p Metadata_Future) Info() Metadata_Information {
	return Metadata_Information(p.Future.Field(1, nil).Client())
}

type Metadata_Supported capnp.Client

// Metadata_Supported_TypeID is the unique identifier for the type Metadata_Supported.
const Metadata_Supported_TypeID = 0xab06444b30722e01

func (c Metadata_Supported) Categories(ctx context.Context, params func(Metadata_Supported_categories_Params) error) (Metadata_Supported_categories_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_categories_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Supported_categories_Results_Future{Future: ans.Future()}, release

}

func (c Metadata_Supported) SupportedValues(ctx context.Context, params func(Metadata_Supported_supportedValues_Params) error) (Metadata_Supported_supportedValues_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_supportedValues_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Supported_supportedValues_Results_Future{Future: ans.Future()}, release

}

func (c Metadata_Supported) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metadata_Supported) String() string {
	return "Metadata_Supported(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metadata_Supported) AddRef() Metadata_Supported {
	return Metadata_Supported(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metadata_Supported) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metadata_Supported) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metadata_Supported) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metadata_Supported) DecodeFromPtr(p capnp.Ptr) Metadata_Supported {
	return Metadata_Supported(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metadata_Supported) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metadata_Supported) IsSame(other Metadata_Supported) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metadata_Supported) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metadata_Supported) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Metadata_Supported_Server is a Metadata_Supported with a local implementation.
type Metadata_Supported_Server interface {
	Categories(context.Context, Metadata_Supported_categories) error

	SupportedValues(context.Context, Metadata_Supported_supportedValues) error
}

// Metadata_Supported_NewServer creates a new Server from an implementation of Metadata_Supported_Server.
func Metadata_Supported_NewServer(s Metadata_Supported_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Supported_Methods(nil, s), s, c)
}

// Metadata_Supported_ServerToClient creates a new Client from an implementation of Metadata_Supported_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Supported_ServerToClient(s Metadata_Supported_Server) Metadata_Supported {
	return Metadata_Supported(capnp.NewClient(Metadata_Supported_NewServer(s)))
}

// Metadata_Supported_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Supported_Methods(methods []server.Method, s Metadata_Supported_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Categories(ctx, Metadata_Supported_categories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedValues(ctx, Metadata_Supported_supportedValues{call})
		},
	})

	return methods
}

// Metadata_Supported_categories holds the state for a server call to Metadata_Supported.categories.
// See server.Call for documentation.
type Metadata_Supported_categories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_categories) Args() Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_categories) AllocResults() (Metadata_Supported_categories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(r), err
}

// Metadata_Supported_supportedValues holds the state for a server call to Metadata_Supported.supportedValues.
// See server.Call for documentation.
type Metadata_Supported_supportedValues struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_supportedValues) Args() Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_supportedValues) AllocResults() (Metadata_Supported_supportedValues_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(r), err
}

// Metadata_Supported_List is a list of Metadata_Supported.
type Metadata_Supported_List = capnp.CapList[Metadata_Supported]

// NewMetadata_Supported creates a new list of Metadata_Supported.
func NewMetadata_Supported_List(s *capnp.Segment, sz int32) (Metadata_Supported_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metadata_Supported](l), err
}

type Metadata_Supported_categories_Params capnp.Struct

// Metadata_Supported_categories_Params_TypeID is the unique identifier for the type Metadata_Supported_categories_Params.
const Metadata_Supported_categories_Params_TypeID = 0x95887677293b5682

func NewMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params(st), err
}

func NewRootMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params(st), err
}

func ReadRootMetadata_Supported_categories_Params(msg *capnp.Message) (Metadata_Supported_categories_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Params(root.Struct()), err
}

func (s Metadata_Supported_categories_Params) String() string {
	str, _ := text.Marshal(0x95887677293b5682, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_categories_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_categories_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_categories_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_categories_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_categories_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_categories_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metadata_Supported_categories_Params_List is a list of Metadata_Supported_categories_Params.
type Metadata_Supported_categories_Params_List = capnp.StructList[Metadata_Supported_categories_Params]

// NewMetadata_Supported_categories_Params creates a new list of Metadata_Supported_categories_Params.
func NewMetadata_Supported_categories_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metadata_Supported_categories_Params](l), err
}

// Metadata_Supported_categories_Params_Future is a wrapper for a Metadata_Supported_categories_Params promised by a client call.
type Metadata_Supported_categories_Params_Future struct{ *capnp.Future }

func (f Metadata_Supported_categories_Params_Future) Struct() (Metadata_Supported_categories_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_categories_Params(p.Struct()), err
}

type Metadata_Supported_categories_Results capnp.Struct

// Metadata_Supported_categories_Results_TypeID is the unique identifier for the type Metadata_Supported_categories_Results.
const Metadata_Supported_categories_Results_TypeID = 0xe49e838ea9c34b40

func NewMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(st), err
}

func NewRootMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(st), err
}

func ReadRootMetadata_Supported_categories_Results(msg *capnp.Message) (Metadata_Supported_categories_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Results(root.Struct()), err
}

func (s Metadata_Supported_categories_Results) String() string {
	str, _ := text.Marshal(0xe49e838ea9c34b40, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_categories_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_categories_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_categories_Results {
	return Metadata_Supported_categories_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_categories_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_categories_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_categories_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_categories_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_categories_Results) Types() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Metadata_Supported_categories_Results) HasTypes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_categories_Results) SetTypes(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_categories_Results) NewTypes(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Supported_categories_Results_List is a list of Metadata_Supported_categories_Results.
type Metadata_Supported_categories_Results_List = capnp.StructList[Metadata_Supported_categories_Results]

// NewMetadata_Supported_categories_Results creates a new list of Metadata_Supported_categories_Results.
func NewMetadata_Supported_categories_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_categories_Results](l), err
}

// Metadata_Supported_categories_Results_Future is a wrapper for a Metadata_Supported_categories_Results promised by a client call.
type Metadata_Supported_categories_Results_Future struct{ *capnp.Future }

func (f Metadata_Supported_categories_Results_Future) Struct() (Metadata_Supported_categories_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_categories_Results(p.Struct()), err
}

type Metadata_Supported_supportedValues_Params capnp.Struct

// Metadata_Supported_supportedValues_Params_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Params.
const Metadata_Supported_supportedValues_Params_TypeID = 0xc6d2329c05f7e208

func NewMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params(st), err
}

func NewRootMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params(st), err
}

func ReadRootMetadata_Supported_supportedValues_Params(msg *capnp.Message) (Metadata_Supported_supportedValues_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Params(root.Struct()), err
}

func (s Metadata_Supported_supportedValues_Params) String() string {
	str, _ := text.Marshal(0xc6d2329c05f7e208, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_supportedValues_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_supportedValues_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_supportedValues_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_supportedValues_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_supportedValues_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_supportedValues_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_supportedValues_Params) TypeId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Supported_supportedValues_Params) HasTypeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Params) TypeIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Supported_supportedValues_Params) SetTypeId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Metadata_Supported_supportedValues_Params_List is a list of Metadata_Supported_supportedValues_Params.
type Metadata_Supported_supportedValues_Params_List = capnp.StructList[Metadata_Supported_supportedValues_Params]

// NewMetadata_Supported_supportedValues_Params creates a new list of Metadata_Supported_supportedValues_Params.
func NewMetadata_Supported_supportedValues_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_supportedValues_Params](l), err
}

// Metadata_Supported_supportedValues_Params_Future is a wrapper for a Metadata_Supported_supportedValues_Params promised by a client call.
type Metadata_Supported_supportedValues_Params_Future struct{ *capnp.Future }

func (f Metadata_Supported_supportedValues_Params_Future) Struct() (Metadata_Supported_supportedValues_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_supportedValues_Params(p.Struct()), err
}

type Metadata_Supported_supportedValues_Results capnp.Struct

// Metadata_Supported_supportedValues_Results_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Results.
const Metadata_Supported_supportedValues_Results_TypeID = 0xe0a71ff36670f715

func NewMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(st), err
}

func NewRootMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(st), err
}

func ReadRootMetadata_Supported_supportedValues_Results(msg *capnp.Message) (Metadata_Supported_supportedValues_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Results(root.Struct()), err
}

func (s Metadata_Supported_supportedValues_Results) String() string {
	str, _ := text.Marshal(0xe0a71ff36670f715, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_supportedValues_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_supportedValues_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_supportedValues_Results {
	return Metadata_Supported_supportedValues_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_supportedValues_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_supportedValues_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_supportedValues_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_supportedValues_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_supportedValues_Results) Values() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Metadata_Supported_supportedValues_Results) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Results) SetValues(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_supportedValues_Results) NewValues(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Supported_supportedValues_Results_List is a list of Metadata_Supported_supportedValues_Results.
type Metadata_Supported_supportedValues_Results_List = capnp.StructList[Metadata_Supported_supportedValues_Results]

// NewMetadata_Supported_supportedValues_Results creates a new list of Metadata_Supported_supportedValues_Results.
func NewMetadata_Supported_supportedValues_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_supportedValues_Results](l), err
}

// Metadata_Supported_supportedValues_Results_Future is a wrapper for a Metadata_Supported_supportedValues_Results promised by a client call.
type Metadata_Supported_supportedValues_Results_Future struct{ *capnp.Future }

func (f Metadata_Supported_supportedValues_Results_Future) Struct() (Metadata_Supported_supportedValues_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_supportedValues_Results(p.Struct()), err
}

type Metadata_Value capnp.Struct
type Metadata_Value_Which uint16

const (
	Metadata_Value_Which_text  Metadata_Value_Which = 0
	Metadata_Value_Which_float Metadata_Value_Which = 1
	Metadata_Value_Which_int   Metadata_Value_Which = 2
	Metadata_Value_Which_bool  Metadata_Value_Which = 3
	Metadata_Value_Which_date  Metadata_Value_Which = 4
)

func (w Metadata_Value_Which) String() string {
	const s = "textfloatintbooldate"
	switch w {
	case Metadata_Value_Which_text:
		return s[0:4]
	case Metadata_Value_Which_float:
		return s[4:9]
	case Metadata_Value_Which_int:
		return s[9:12]
	case Metadata_Value_Which_bool:
		return s[12:16]
	case Metadata_Value_Which_date:
		return s[16:20]

	}
	return "Metadata_Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Value_TypeID is the unique identifier for the type Metadata_Value.
const Metadata_Value_TypeID = 0xc48e24c968a234db

func NewMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value(st), err
}

func NewRootMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value(st), err
}

func ReadRootMetadata_Value(msg *capnp.Message) (Metadata_Value, error) {
	root, err := msg.Root()
	return Metadata_Value(root.Struct()), err
}

func (s Metadata_Value) String() string {
	str, _ := text.Marshal(0xc48e24c968a234db, capnp.Struct(s))
	return str
}

func (s Metadata_Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Value) DecodeFromPtr(p capnp.Ptr) Metadata_Value {
	return Metadata_Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Metadata_Value) Which() Metadata_Value_Which {
	return Metadata_Value_Which(capnp.Struct(s).Uint16(0))
}
func (s Metadata_Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Value) Text() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != text")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Value) HasText() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Value) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Value) SetText(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata_Value) Float() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != float")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Metadata_Value) SetFloat(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Metadata_Value) Int() int64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != int")
	}
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Metadata_Value) SetInt(v int64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Metadata_Value) Bool() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != bool")
	}
	return capnp.Struct(s).Bit(64)
}

func (s Metadata_Value) SetBool(v bool) {
	capnp.Struct(s).SetUint16(0, 3)
	capnp.Struct(s).SetBit(64, v)
}

func (s Metadata_Value) Date() (common_date.Date, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != date")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s Metadata_Value) HasDate() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Value) SetDate(v common_date.Date) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Metadata_Value) NewDate() (common_date.Date, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Metadata_Value_List is a list of Metadata_Value.
type Metadata_Value_List = capnp.StructList[Metadata_Value]

// NewMetadata_Value creates a new list of Metadata_Value.
func NewMetadata_Value_List(s *capnp.Segment, sz int32) (Metadata_Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Value](l), err
}

// Metadata_Value_Future is a wrapper for a Metadata_Value promised by a client call.
type Metadata_Value_Future struct{ *capnp.Future }

func (f Metadata_Value_Future) Struct() (Metadata_Value, error) {
	p, err := f.Future.Ptr()
	return Metadata_Value(p.Struct()), err
}
func (p Metadata_Value_Future) Date() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Entry capnp.Struct
type Metadata_Entry_Which uint16

const (
	Metadata_Entry_Which_gcm         Metadata_Entry_Which = 0
	Metadata_Entry_Which_rcm         Metadata_Entry_Which = 1
	Metadata_Entry_Which_historical  Metadata_Entry_Which = 2
	Metadata_Entry_Which_rcp         Metadata_Entry_Which = 3
	Metadata_Entry_Which_ssp         Metadata_Entry_Which = 4
	Metadata_Entry_Which_ensMem      Metadata_Entry_Which = 5
	Metadata_Entry_Which_version     Metadata_Entry_Which = 6
	Metadata_Entry_Which_start       Metadata_Entry_Which = 7
	Metadata_Entry_Which_end         Metadata_Entry_Which = 8
	Metadata_Entry_Which_co2         Metadata_Entry_Which = 9
	Metadata_Entry_Which_picontrol   Metadata_Entry_Which = 10
	Metadata_Entry_Which_description Metadata_Entry_Which = 11
)

func (w Metadata_Entry_Which) String() string {
	const s = "gcmrcmhistoricalrcpsspensMemversionstartendco2picontroldescription"
	switch w {
	case Metadata_Entry_Which_gcm:
		return s[0:3]
	case Metadata_Entry_Which_rcm:
		return s[3:6]
	case Metadata_Entry_Which_historical:
		return s[6:16]
	case Metadata_Entry_Which_rcp:
		return s[16:19]
	case Metadata_Entry_Which_ssp:
		return s[19:22]
	case Metadata_Entry_Which_ensMem:
		return s[22:28]
	case Metadata_Entry_Which_version:
		return s[28:35]
	case Metadata_Entry_Which_start:
		return s[35:40]
	case Metadata_Entry_Which_end:
		return s[40:43]
	case Metadata_Entry_Which_co2:
		return s[43:46]
	case Metadata_Entry_Which_picontrol:
		return s[46:55]
	case Metadata_Entry_Which_description:
		return s[55:66]

	}
	return "Metadata_Entry_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Entry_TypeID is the unique identifier for the type Metadata_Entry.
const Metadata_Entry_TypeID = 0x85af7fea06d0820c

func NewMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry(st), err
}

func NewRootMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry(st), err
}

func ReadRootMetadata_Entry(msg *capnp.Message) (Metadata_Entry, error) {
	root, err := msg.Root()
	return Metadata_Entry(root.Struct()), err
}

func (s Metadata_Entry) String() string {
	str, _ := text.Marshal(0x85af7fea06d0820c, capnp.Struct(s))
	return str
}

func (s Metadata_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Entry) DecodeFromPtr(p capnp.Ptr) Metadata_Entry {
	return Metadata_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Metadata_Entry) Which() Metadata_Entry_Which {
	return Metadata_Entry_Which(capnp.Struct(s).Uint16(2))
}
func (s Metadata_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Entry) Gcm() GCM {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != gcm")
	}
	return GCM(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetGcm(v GCM) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Rcm() RCM {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != rcm")
	}
	return RCM(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetRcm(v RCM) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) SetHistorical() {
	capnp.Struct(s).SetUint16(2, 2)

}

func (s Metadata_Entry) Rcp() RCP {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != rcp")
	}
	return RCP(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetRcp(v RCP) {
	capnp.Struct(s).SetUint16(2, 3)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Ssp() SSP {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != ssp")
	}
	return SSP(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetSsp(v SSP) {
	capnp.Struct(s).SetUint16(2, 4)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) EnsMem() (EnsembleMember, error) {
	if capnp.Struct(s).Uint16(2) != 5 {
		panic("Which() != ensMem")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EnsembleMember(p.Struct()), err
}

func (s Metadata_Entry) HasEnsMem() bool {
	if capnp.Struct(s).Uint16(2) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetEnsMem(v EnsembleMember) error {
	capnp.Struct(s).SetUint16(2, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnsMem sets the ensMem field to a newly
// allocated EnsembleMember struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnsMem() (EnsembleMember, error) {
	capnp.Struct(s).SetUint16(2, 5)
	ss, err := NewEnsembleMember(capnp.Struct(s).Segment())
	if err != nil {
		return EnsembleMember{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) Version() (string, error) {
	if capnp.Struct(s).Uint16(2) != 6 {
		panic("Which() != version")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasVersion() bool {
	if capnp.Struct(s).Uint16(2) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetVersion(v string) error {
	capnp.Struct(s).SetUint16(2, 6)
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata_Entry) Start() (common_date.Date, error) {
	if capnp.Struct(s).Uint16(2) != 7 {
		panic("Which() != start")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s Metadata_Entry) HasStart() bool {
	if capnp.Struct(s).Uint16(2) != 7 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetStart(v common_date.Date) error {
	capnp.Struct(s).SetUint16(2, 7)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewStart() (common_date.Date, error) {
	capnp.Struct(s).SetUint16(2, 7)
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) End() (common_date.Date, error) {
	if capnp.Struct(s).Uint16(2) != 8 {
		panic("Which() != end")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s Metadata_Entry) HasEnd() bool {
	if capnp.Struct(s).Uint16(2) != 8 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetEnd(v common_date.Date) error {
	capnp.Struct(s).SetUint16(2, 8)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnd() (common_date.Date, error) {
	capnp.Struct(s).SetUint16(2, 8)
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) Co2() float32 {
	if capnp.Struct(s).Uint16(2) != 9 {
		panic("Which() != co2")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Metadata_Entry) SetCo2(v float32) {
	capnp.Struct(s).SetUint16(2, 9)
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Metadata_Entry) SetPicontrol() {
	capnp.Struct(s).SetUint16(2, 10)

}

func (s Metadata_Entry) Description() (string, error) {
	if capnp.Struct(s).Uint16(2) != 11 {
		panic("Which() != description")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasDescription() bool {
	if capnp.Struct(s).Uint16(2) != 11 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetDescription(v string) error {
	capnp.Struct(s).SetUint16(2, 11)
	return capnp.Struct(s).SetText(0, v)
}

// Metadata_Entry_List is a list of Metadata_Entry.
type Metadata_Entry_List = capnp.StructList[Metadata_Entry]

// NewMetadata_Entry creates a new list of Metadata_Entry.
func NewMetadata_Entry_List(s *capnp.Segment, sz int32) (Metadata_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Entry](l), err
}

// Metadata_Entry_Future is a wrapper for a Metadata_Entry promised by a client call.
type Metadata_Entry_Future struct{ *capnp.Future }

func (f Metadata_Entry_Future) Struct() (Metadata_Entry, error) {
	p, err := f.Future.Ptr()
	return Metadata_Entry(p.Struct()), err
}
func (p Metadata_Entry_Future) EnsMem() EnsembleMember_Future {
	return EnsembleMember_Future{Future: p.Future.Field(0, nil)}
}
func (p Metadata_Entry_Future) Start() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p Metadata_Entry_Future) End() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information capnp.Client

// Metadata_Information_TypeID is the unique identifier for the type Metadata_Information.
const Metadata_Information_TypeID = 0xc781edeab8160cb7

func (c Metadata_Information) ForOne(ctx context.Context, params func(Metadata_Information_forOne_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forOne_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Metadata_Information) ForAll(ctx context.Context, params func(Metadata_Information_forAll_Params) error) (Metadata_Information_forAll_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forAll_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Information_forAll_Results_Future{Future: ans.Future()}, release

}

func (c Metadata_Information) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metadata_Information) String() string {
	return "Metadata_Information(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metadata_Information) AddRef() Metadata_Information {
	return Metadata_Information(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metadata_Information) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metadata_Information) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metadata_Information) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metadata_Information) DecodeFromPtr(p capnp.Ptr) Metadata_Information {
	return Metadata_Information(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metadata_Information) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metadata_Information) IsSame(other Metadata_Information) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metadata_Information) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metadata_Information) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Metadata_Information_Server is a Metadata_Information with a local implementation.
type Metadata_Information_Server interface {
	ForOne(context.Context, Metadata_Information_forOne) error

	ForAll(context.Context, Metadata_Information_forAll) error
}

// Metadata_Information_NewServer creates a new Server from an implementation of Metadata_Information_Server.
func Metadata_Information_NewServer(s Metadata_Information_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Information_Methods(nil, s), s, c)
}

// Metadata_Information_ServerToClient creates a new Client from an implementation of Metadata_Information_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Information_ServerToClient(s Metadata_Information_Server) Metadata_Information {
	return Metadata_Information(capnp.NewClient(Metadata_Information_NewServer(s)))
}

// Metadata_Information_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Information_Methods(methods []server.Method, s Metadata_Information_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForOne(ctx, Metadata_Information_forOne{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForAll(ctx, Metadata_Information_forAll{call})
		},
	})

	return methods
}

// Metadata_Information_forOne holds the state for a server call to Metadata_Information.forOne.
// See server.Call for documentation.
type Metadata_Information_forOne struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forOne) Args() Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forOne) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation(r), err
}

// Metadata_Information_forAll holds the state for a server call to Metadata_Information.forAll.
// See server.Call for documentation.
type Metadata_Information_forAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forAll) Args() Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forAll) AllocResults() (Metadata_Information_forAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(r), err
}

// Metadata_Information_List is a list of Metadata_Information.
type Metadata_Information_List = capnp.CapList[Metadata_Information]

// NewMetadata_Information creates a new list of Metadata_Information.
func NewMetadata_Information_List(s *capnp.Segment, sz int32) (Metadata_Information_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metadata_Information](l), err
}

type Metadata_Information_forOne_Params capnp.Struct

// Metadata_Information_forOne_Params_TypeID is the unique identifier for the type Metadata_Information_forOne_Params.
const Metadata_Information_forOne_Params_TypeID = 0xdf705ef1e0b7d506

func NewMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params(st), err
}

func NewRootMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params(st), err
}

func ReadRootMetadata_Information_forOne_Params(msg *capnp.Message) (Metadata_Information_forOne_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forOne_Params(root.Struct()), err
}

func (s Metadata_Information_forOne_Params) String() string {
	str, _ := text.Marshal(0xdf705ef1e0b7d506, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forOne_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forOne_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forOne_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forOne_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forOne_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forOne_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Information_forOne_Params) Entry() (Metadata_Entry, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata_Entry(p.Struct()), err
}

func (s Metadata_Information_forOne_Params) HasEntry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Information_forOne_Params) SetEntry(v Metadata_Entry) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated Metadata_Entry struct, preferring placement in s's segment.
func (s Metadata_Information_forOne_Params) NewEntry() (Metadata_Entry, error) {
	ss, err := NewMetadata_Entry(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata_Entry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Metadata_Information_forOne_Params_List is a list of Metadata_Information_forOne_Params.
type Metadata_Information_forOne_Params_List = capnp.StructList[Metadata_Information_forOne_Params]

// NewMetadata_Information_forOne_Params creates a new list of Metadata_Information_forOne_Params.
func NewMetadata_Information_forOne_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forOne_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Information_forOne_Params](l), err
}

// Metadata_Information_forOne_Params_Future is a wrapper for a Metadata_Information_forOne_Params promised by a client call.
type Metadata_Information_forOne_Params_Future struct{ *capnp.Future }

func (f Metadata_Information_forOne_Params_Future) Struct() (Metadata_Information_forOne_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forOne_Params(p.Struct()), err
}
func (p Metadata_Information_forOne_Params_Future) Entry() Metadata_Entry_Future {
	return Metadata_Entry_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information_forAll_Params capnp.Struct

// Metadata_Information_forAll_Params_TypeID is the unique identifier for the type Metadata_Information_forAll_Params.
const Metadata_Information_forAll_Params_TypeID = 0xe246d49c91fa330a

func NewMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params(st), err
}

func NewRootMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params(st), err
}

func ReadRootMetadata_Information_forAll_Params(msg *capnp.Message) (Metadata_Information_forAll_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Params(root.Struct()), err
}

func (s Metadata_Information_forAll_Params) String() string {
	str, _ := text.Marshal(0xe246d49c91fa330a, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forAll_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forAll_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forAll_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forAll_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forAll_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forAll_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metadata_Information_forAll_Params_List is a list of Metadata_Information_forAll_Params.
type Metadata_Information_forAll_Params_List = capnp.StructList[Metadata_Information_forAll_Params]

// NewMetadata_Information_forAll_Params creates a new list of Metadata_Information_forAll_Params.
func NewMetadata_Information_forAll_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metadata_Information_forAll_Params](l), err
}

// Metadata_Information_forAll_Params_Future is a wrapper for a Metadata_Information_forAll_Params promised by a client call.
type Metadata_Information_forAll_Params_Future struct{ *capnp.Future }

func (f Metadata_Information_forAll_Params_Future) Struct() (Metadata_Information_forAll_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forAll_Params(p.Struct()), err
}

type Metadata_Information_forAll_Results capnp.Struct

// Metadata_Information_forAll_Results_TypeID is the unique identifier for the type Metadata_Information_forAll_Results.
const Metadata_Information_forAll_Results_TypeID = 0x9f35030ba55fed78

func NewMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(st), err
}

func NewRootMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(st), err
}

func ReadRootMetadata_Information_forAll_Results(msg *capnp.Message) (Metadata_Information_forAll_Results, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Results(root.Struct()), err
}

func (s Metadata_Information_forAll_Results) String() string {
	str, _ := text.Marshal(0x9f35030ba55fed78, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forAll_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forAll_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forAll_Results {
	return Metadata_Information_forAll_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forAll_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forAll_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forAll_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forAll_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Information_forAll_Results) All() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Pair_List(p.List()), err
}

func (s Metadata_Information_forAll_Results) HasAll() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Information_forAll_Results) SetAll(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAll sets the all field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Metadata_Information_forAll_Results) NewAll(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Information_forAll_Results_List is a list of Metadata_Information_forAll_Results.
type Metadata_Information_forAll_Results_List = capnp.StructList[Metadata_Information_forAll_Results]

// NewMetadata_Information_forAll_Results creates a new list of Metadata_Information_forAll_Results.
func NewMetadata_Information_forAll_Results_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Information_forAll_Results](l), err
}

// Metadata_Information_forAll_Results_Future is a wrapper for a Metadata_Information_forAll_Results promised by a client call.
type Metadata_Information_forAll_Results_Future struct{ *capnp.Future }

func (f Metadata_Information_forAll_Results_Future) Struct() (Metadata_Information_forAll_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forAll_Results(p.Struct()), err
}

type Dataset capnp.Client

// Dataset_TypeID is the unique identifier for the type Dataset.
const Dataset_TypeID = 0xf635fdd1f05960f0

func (c Dataset) Metadata(ctx context.Context, params func(Dataset_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_metadata_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release

}

func (c Dataset) ClosestTimeSeriesAt(ctx context.Context, params func(Dataset_closestTimeSeriesAt_Params) error) (Dataset_closestTimeSeriesAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_closestTimeSeriesAt_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_closestTimeSeriesAt_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) TimeSeriesAt(ctx context.Context, params func(Dataset_timeSeriesAt_Params) error) (Dataset_timeSeriesAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_timeSeriesAt_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_timeSeriesAt_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) Locations(ctx context.Context, params func(Dataset_locations_Params) error) (Dataset_locations_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "locations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_locations_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_locations_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) StreamLocations(ctx context.Context, params func(Dataset_streamLocations_Params) error) (Dataset_streamLocations_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      4,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "streamLocations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_streamLocations_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_streamLocations_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Dataset) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Dataset) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Dataset) String() string {
	return "Dataset(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Dataset) AddRef() Dataset {
	return Dataset(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Dataset) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Dataset) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Dataset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Dataset) DecodeFromPtr(p capnp.Ptr) Dataset {
	return Dataset(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Dataset) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Dataset) IsSame(other Dataset) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Dataset) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Dataset) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Dataset_Server is a Dataset with a local implementation.
type Dataset_Server interface {
	Metadata(context.Context, Dataset_metadata) error

	ClosestTimeSeriesAt(context.Context, Dataset_closestTimeSeriesAt) error

	TimeSeriesAt(context.Context, Dataset_timeSeriesAt) error

	Locations(context.Context, Dataset_locations) error

	StreamLocations(context.Context, Dataset_streamLocations) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Dataset_NewServer creates a new Server from an implementation of Dataset_Server.
func Dataset_NewServer(s Dataset_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_Methods(nil, s), s, c)
}

// Dataset_ServerToClient creates a new Client from an implementation of Dataset_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_ServerToClient(s Dataset_Server) Dataset {
	return Dataset(capnp.NewClient(Dataset_NewServer(s)))
}

// Dataset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_Methods(methods []server.Method, s Dataset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, Dataset_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestTimeSeriesAt(ctx, Dataset_closestTimeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TimeSeriesAt(ctx, Dataset_timeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "locations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locations(ctx, Dataset_locations{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      4,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "streamLocations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamLocations(ctx, Dataset_streamLocations{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Dataset_metadata holds the state for a server call to Dataset.metadata.
// See server.Call for documentation.
type Dataset_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_metadata) Args() Dataset_metadata_Params {
	return Dataset_metadata_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(r), err
}

// Dataset_closestTimeSeriesAt holds the state for a server call to Dataset.closestTimeSeriesAt.
// See server.Call for documentation.
type Dataset_closestTimeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_closestTimeSeriesAt) Args() Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_closestTimeSeriesAt) AllocResults() (Dataset_closestTimeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(r), err
}

// Dataset_timeSeriesAt holds the state for a server call to Dataset.timeSeriesAt.
// See server.Call for documentation.
type Dataset_timeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_timeSeriesAt) Args() Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_timeSeriesAt) AllocResults() (Dataset_timeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(r), err
}

// Dataset_locations holds the state for a server call to Dataset.locations.
// See server.Call for documentation.
type Dataset_locations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_locations) Args() Dataset_locations_Params {
	return Dataset_locations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_locations) AllocResults() (Dataset_locations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(r), err
}

// Dataset_streamLocations holds the state for a server call to Dataset.streamLocations.
// See server.Call for documentation.
type Dataset_streamLocations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_streamLocations) Args() Dataset_streamLocations_Params {
	return Dataset_streamLocations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_streamLocations) AllocResults() (Dataset_streamLocations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(r), err
}

// Dataset_List is a list of Dataset.
type Dataset_List = capnp.CapList[Dataset]

// NewDataset creates a new list of Dataset.
func NewDataset_List(s *capnp.Segment, sz int32) (Dataset_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Dataset](l), err
}

type Dataset_GetLocationsCallback capnp.Client

// Dataset_GetLocationsCallback_TypeID is the unique identifier for the type Dataset_GetLocationsCallback.
const Dataset_GetLocationsCallback_TypeID = 0xd61ba043f14fe175

func (c Dataset_GetLocationsCallback) NextLocations(ctx context.Context, params func(Dataset_GetLocationsCallback_nextLocations_Params) error) (Dataset_GetLocationsCallback_nextLocations_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd61ba043f14fe175,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset.GetLocationsCallback",
			MethodName:    "nextLocations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_GetLocationsCallback_nextLocations_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_GetLocationsCallback_nextLocations_Results_Future{Future: ans.Future()}, release

}

func (c Dataset_GetLocationsCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Dataset_GetLocationsCallback) String() string {
	return "Dataset_GetLocationsCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Dataset_GetLocationsCallback) AddRef() Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Dataset_GetLocationsCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Dataset_GetLocationsCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Dataset_GetLocationsCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Dataset_GetLocationsCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Dataset_GetLocationsCallback) IsSame(other Dataset_GetLocationsCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Dataset_GetLocationsCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Dataset_GetLocationsCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Dataset_GetLocationsCallback_Server is a Dataset_GetLocationsCallback with a local implementation.
type Dataset_GetLocationsCallback_Server interface {
	NextLocations(context.Context, Dataset_GetLocationsCallback_nextLocations) error
}

// Dataset_GetLocationsCallback_NewServer creates a new Server from an implementation of Dataset_GetLocationsCallback_Server.
func Dataset_GetLocationsCallback_NewServer(s Dataset_GetLocationsCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_GetLocationsCallback_Methods(nil, s), s, c)
}

// Dataset_GetLocationsCallback_ServerToClient creates a new Client from an implementation of Dataset_GetLocationsCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_GetLocationsCallback_ServerToClient(s Dataset_GetLocationsCallback_Server) Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.NewClient(Dataset_GetLocationsCallback_NewServer(s)))
}

// Dataset_GetLocationsCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_GetLocationsCallback_Methods(methods []server.Method, s Dataset_GetLocationsCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd61ba043f14fe175,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset.GetLocationsCallback",
			MethodName:    "nextLocations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextLocations(ctx, Dataset_GetLocationsCallback_nextLocations{call})
		},
	})

	return methods
}

// Dataset_GetLocationsCallback_nextLocations holds the state for a server call to Dataset_GetLocationsCallback.nextLocations.
// See server.Call for documentation.
type Dataset_GetLocationsCallback_nextLocations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_GetLocationsCallback_nextLocations) Args() Dataset_GetLocationsCallback_nextLocations_Params {
	return Dataset_GetLocationsCallback_nextLocations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_GetLocationsCallback_nextLocations) AllocResults() (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(r), err
}

// Dataset_GetLocationsCallback_List is a list of Dataset_GetLocationsCallback.
type Dataset_GetLocationsCallback_List = capnp.CapList[Dataset_GetLocationsCallback]

// NewDataset_GetLocationsCallback creates a new list of Dataset_GetLocationsCallback.
func NewDataset_GetLocationsCallback_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Dataset_GetLocationsCallback](l), err
}

type Dataset_GetLocationsCallback_nextLocations_Params capnp.Struct

// Dataset_GetLocationsCallback_nextLocations_Params_TypeID is the unique identifier for the type Dataset_GetLocationsCallback_nextLocations_Params.
const Dataset_GetLocationsCallback_nextLocations_Params_TypeID = 0xe64112993dc4d4e0

func NewDataset_GetLocationsCallback_nextLocations_Params(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dataset_GetLocationsCallback_nextLocations_Params(st), err
}

func NewRootDataset_GetLocationsCallback_nextLocations_Params(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dataset_GetLocationsCallback_nextLocations_Params(st), err
}

func ReadRootDataset_GetLocationsCallback_nextLocations_Params(msg *capnp.Message) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	root, err := msg.Root()
	return Dataset_GetLocationsCallback_nextLocations_Params(root.Struct()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) String() string {
	str, _ := text.Marshal(0xe64112993dc4d4e0, capnp.Struct(s))
	return str
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback_nextLocations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback_nextLocations_Params {
	return Dataset_GetLocationsCallback_nextLocations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_GetLocationsCallback_nextLocations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_GetLocationsCallback_nextLocations_Params) MaxCount() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) SetMaxCount(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Dataset_GetLocationsCallback_nextLocations_Params_List is a list of Dataset_GetLocationsCallback_nextLocations_Params.
type Dataset_GetLocationsCallback_nextLocations_Params_List = capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Params]

// NewDataset_GetLocationsCallback_nextLocations_Params creates a new list of Dataset_GetLocationsCallback_nextLocations_Params.
func NewDataset_GetLocationsCallback_nextLocations_Params_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_nextLocations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Params](l), err
}

// Dataset_GetLocationsCallback_nextLocations_Params_Future is a wrapper for a Dataset_GetLocationsCallback_nextLocations_Params promised by a client call.
type Dataset_GetLocationsCallback_nextLocations_Params_Future struct{ *capnp.Future }

func (f Dataset_GetLocationsCallback_nextLocations_Params_Future) Struct() (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_GetLocationsCallback_nextLocations_Params(p.Struct()), err
}

type Dataset_GetLocationsCallback_nextLocations_Results capnp.Struct

// Dataset_GetLocationsCallback_nextLocations_Results_TypeID is the unique identifier for the type Dataset_GetLocationsCallback_nextLocations_Results.
const Dataset_GetLocationsCallback_nextLocations_Results_TypeID = 0xfa8540d5d8065df1

func NewDataset_GetLocationsCallback_nextLocations_Results(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(st), err
}

func NewRootDataset_GetLocationsCallback_nextLocations_Results(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(st), err
}

func ReadRootDataset_GetLocationsCallback_nextLocations_Results(msg *capnp.Message) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	root, err := msg.Root()
	return Dataset_GetLocationsCallback_nextLocations_Results(root.Struct()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) String() string {
	str, _ := text.Marshal(0xfa8540d5d8065df1, capnp.Struct(s))
	return str
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback_nextLocations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback_nextLocations_Results {
	return Dataset_GetLocationsCallback_nextLocations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_GetLocationsCallback_nextLocations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_GetLocationsCallback_nextLocations_Results) Locations() (Location_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Location_List(p.List()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) HasLocations() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) SetLocations(v Location_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_GetLocationsCallback_nextLocations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Dataset_GetLocationsCallback_nextLocations_Results_List is a list of Dataset_GetLocationsCallback_nextLocations_Results.
type Dataset_GetLocationsCallback_nextLocations_Results_List = capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Results]

// NewDataset_GetLocationsCallback_nextLocations_Results creates a new list of Dataset_GetLocationsCallback_nextLocations_Results.
func NewDataset_GetLocationsCallback_nextLocations_Results_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_nextLocations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Results](l), err
}

// Dataset_GetLocationsCallback_nextLocations_Results_Future is a wrapper for a Dataset_GetLocationsCallback_nextLocations_Results promised by a client call.
type Dataset_GetLocationsCallback_nextLocations_Results_Future struct{ *capnp.Future }

func (f Dataset_GetLocationsCallback_nextLocations_Results_Future) Struct() (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_GetLocationsCallback_nextLocations_Results(p.Struct()), err
}

type Dataset_metadata_Params capnp.Struct

// Dataset_metadata_Params_TypeID is the unique identifier for the type Dataset_metadata_Params.
const Dataset_metadata_Params_TypeID = 0xb4c346906ee84815

func NewDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params(st), err
}

func NewRootDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params(st), err
}

func ReadRootDataset_metadata_Params(msg *capnp.Message) (Dataset_metadata_Params, error) {
	root, err := msg.Root()
	return Dataset_metadata_Params(root.Struct()), err
}

func (s Dataset_metadata_Params) String() string {
	str, _ := text.Marshal(0xb4c346906ee84815, capnp.Struct(s))
	return str
}

func (s Dataset_metadata_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_metadata_Params) DecodeFromPtr(p capnp.Ptr) Dataset_metadata_Params {
	return Dataset_metadata_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_metadata_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_metadata_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_metadata_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_metadata_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Dataset_metadata_Params_List is a list of Dataset_metadata_Params.
type Dataset_metadata_Params_List = capnp.StructList[Dataset_metadata_Params]

// NewDataset_metadata_Params creates a new list of Dataset_metadata_Params.
func NewDataset_metadata_Params_List(s *capnp.Segment, sz int32) (Dataset_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_metadata_Params](l), err
}

// Dataset_metadata_Params_Future is a wrapper for a Dataset_metadata_Params promised by a client call.
type Dataset_metadata_Params_Future struct{ *capnp.Future }

func (f Dataset_metadata_Params_Future) Struct() (Dataset_metadata_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_metadata_Params(p.Struct()), err
}

type Dataset_closestTimeSeriesAt_Params capnp.Struct

// Dataset_closestTimeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Params.
const Dataset_closestTimeSeriesAt_Params_TypeID = 0xb0496f3d284f4a13

func NewDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params(st), err
}

func NewRootDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params(st), err
}

func ReadRootDataset_closestTimeSeriesAt_Params(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Params(root.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xb0496f3d284f4a13, capnp.Struct(s))
	return str
}

func (s Dataset_closestTimeSeriesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_closestTimeSeriesAt_Params) DecodeFromPtr(p capnp.Ptr) Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_closestTimeSeriesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_closestTimeSeriesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_closestTimeSeriesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_closestTimeSeriesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_closestTimeSeriesAt_Params) Latlon() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Params) HasLatlon() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Params) SetLatlon(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Dataset_closestTimeSeriesAt_Params) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Dataset_closestTimeSeriesAt_Params_List is a list of Dataset_closestTimeSeriesAt_Params.
type Dataset_closestTimeSeriesAt_Params_List = capnp.StructList[Dataset_closestTimeSeriesAt_Params]

// NewDataset_closestTimeSeriesAt_Params creates a new list of Dataset_closestTimeSeriesAt_Params.
func NewDataset_closestTimeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_closestTimeSeriesAt_Params](l), err
}

// Dataset_closestTimeSeriesAt_Params_Future is a wrapper for a Dataset_closestTimeSeriesAt_Params promised by a client call.
type Dataset_closestTimeSeriesAt_Params_Future struct{ *capnp.Future }

func (f Dataset_closestTimeSeriesAt_Params_Future) Struct() (Dataset_closestTimeSeriesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_closestTimeSeriesAt_Params(p.Struct()), err
}
func (p Dataset_closestTimeSeriesAt_Params_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

type Dataset_closestTimeSeriesAt_Results capnp.Struct

// Dataset_closestTimeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Results.
const Dataset_closestTimeSeriesAt_Results_TypeID = 0xedee5faa03af6a1e

func NewDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(st), err
}

func NewRootDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(st), err
}

func ReadRootDataset_closestTimeSeriesAt_Results(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Results(root.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xedee5faa03af6a1e, capnp.Struct(s))
	return str
}

func (s Dataset_closestTimeSeriesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_closestTimeSeriesAt_Results) DecodeFromPtr(p capnp.Ptr) Dataset_closestTimeSeriesAt_Results {
	return Dataset_closestTimeSeriesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_closestTimeSeriesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_closestTimeSeriesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_closestTimeSeriesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_closestTimeSeriesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_closestTimeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s Dataset_closestTimeSeriesAt_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_closestTimeSeriesAt_Results_List is a list of Dataset_closestTimeSeriesAt_Results.
type Dataset_closestTimeSeriesAt_Results_List = capnp.StructList[Dataset_closestTimeSeriesAt_Results]

// NewDataset_closestTimeSeriesAt_Results creates a new list of Dataset_closestTimeSeriesAt_Results.
func NewDataset_closestTimeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_closestTimeSeriesAt_Results](l), err
}

// Dataset_closestTimeSeriesAt_Results_Future is a wrapper for a Dataset_closestTimeSeriesAt_Results promised by a client call.
type Dataset_closestTimeSeriesAt_Results_Future struct{ *capnp.Future }

func (f Dataset_closestTimeSeriesAt_Results_Future) Struct() (Dataset_closestTimeSeriesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_closestTimeSeriesAt_Results(p.Struct()), err
}
func (p Dataset_closestTimeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type Dataset_timeSeriesAt_Params capnp.Struct

// Dataset_timeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Params.
const Dataset_timeSeriesAt_Params_TypeID = 0xd9f867b0a2a15d7f

func NewDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params(st), err
}

func NewRootDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params(st), err
}

func ReadRootDataset_timeSeriesAt_Params(msg *capnp.Message) (Dataset_timeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Params(root.Struct()), err
}

func (s Dataset_timeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xd9f867b0a2a15d7f, capnp.Struct(s))
	return str
}

func (s Dataset_timeSeriesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_timeSeriesAt_Params) DecodeFromPtr(p capnp.Ptr) Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_timeSeriesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_timeSeriesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_timeSeriesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_timeSeriesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_timeSeriesAt_Params) LocationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Dataset_timeSeriesAt_Params) HasLocationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_timeSeriesAt_Params) LocationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_timeSeriesAt_Params) SetLocationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Dataset_timeSeriesAt_Params_List is a list of Dataset_timeSeriesAt_Params.
type Dataset_timeSeriesAt_Params_List = capnp.StructList[Dataset_timeSeriesAt_Params]

// NewDataset_timeSeriesAt_Params creates a new list of Dataset_timeSeriesAt_Params.
func NewDataset_timeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_timeSeriesAt_Params](l), err
}

// Dataset_timeSeriesAt_Params_Future is a wrapper for a Dataset_timeSeriesAt_Params promised by a client call.
type Dataset_timeSeriesAt_Params_Future struct{ *capnp.Future }

func (f Dataset_timeSeriesAt_Params_Future) Struct() (Dataset_timeSeriesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_timeSeriesAt_Params(p.Struct()), err
}

type Dataset_timeSeriesAt_Results capnp.Struct

// Dataset_timeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Results.
const Dataset_timeSeriesAt_Results_TypeID = 0xe30c466e5bc2735c

func NewDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(st), err
}

func NewRootDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(st), err
}

func ReadRootDataset_timeSeriesAt_Results(msg *capnp.Message) (Dataset_timeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Results(root.Struct()), err
}

func (s Dataset_timeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xe30c466e5bc2735c, capnp.Struct(s))
	return str
}

func (s Dataset_timeSeriesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_timeSeriesAt_Results) DecodeFromPtr(p capnp.Ptr) Dataset_timeSeriesAt_Results {
	return Dataset_timeSeriesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_timeSeriesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_timeSeriesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_timeSeriesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_timeSeriesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_timeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s Dataset_timeSeriesAt_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_timeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_timeSeriesAt_Results_List is a list of Dataset_timeSeriesAt_Results.
type Dataset_timeSeriesAt_Results_List = capnp.StructList[Dataset_timeSeriesAt_Results]

// NewDataset_timeSeriesAt_Results creates a new list of Dataset_timeSeriesAt_Results.
func NewDataset_timeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_timeSeriesAt_Results](l), err
}

// Dataset_timeSeriesAt_Results_Future is a wrapper for a Dataset_timeSeriesAt_Results promised by a client call.
type Dataset_timeSeriesAt_Results_Future struct{ *capnp.Future }

func (f Dataset_timeSeriesAt_Results_Future) Struct() (Dataset_timeSeriesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_timeSeriesAt_Results(p.Struct()), err
}
func (p Dataset_timeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type Dataset_locations_Params capnp.Struct

// Dataset_locations_Params_TypeID is the unique identifier for the type Dataset_locations_Params.
const Dataset_locations_Params_TypeID = 0xd2a02e856c28d4ba

func NewDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params(st), err
}

func NewRootDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params(st), err
}

func ReadRootDataset_locations_Params(msg *capnp.Message) (Dataset_locations_Params, error) {
	root, err := msg.Root()
	return Dataset_locations_Params(root.Struct()), err
}

func (s Dataset_locations_Params) String() string {
	str, _ := text.Marshal(0xd2a02e856c28d4ba, capnp.Struct(s))
	return str
}

func (s Dataset_locations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_locations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_locations_Params {
	return Dataset_locations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_locations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_locations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_locations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_locations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Dataset_locations_Params_List is a list of Dataset_locations_Params.
type Dataset_locations_Params_List = capnp.StructList[Dataset_locations_Params]

// NewDataset_locations_Params creates a new list of Dataset_locations_Params.
func NewDataset_locations_Params_List(s *capnp.Segment, sz int32) (Dataset_locations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_locations_Params](l), err
}

// Dataset_locations_Params_Future is a wrapper for a Dataset_locations_Params promised by a client call.
type Dataset_locations_Params_Future struct{ *capnp.Future }

func (f Dataset_locations_Params_Future) Struct() (Dataset_locations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_locations_Params(p.Struct()), err
}

type Dataset_locations_Results capnp.Struct

// Dataset_locations_Results_TypeID is the unique identifier for the type Dataset_locations_Results.
const Dataset_locations_Results_TypeID = 0xaa8cfcdc401d5fdd

func NewDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(st), err
}

func NewRootDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(st), err
}

func ReadRootDataset_locations_Results(msg *capnp.Message) (Dataset_locations_Results, error) {
	root, err := msg.Root()
	return Dataset_locations_Results(root.Struct()), err
}

func (s Dataset_locations_Results) String() string {
	str, _ := text.Marshal(0xaa8cfcdc401d5fdd, capnp.Struct(s))
	return str
}

func (s Dataset_locations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_locations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_locations_Results {
	return Dataset_locations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_locations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_locations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_locations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_locations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_locations_Results) Locations() (Location_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Location_List(p.List()), err
}

func (s Dataset_locations_Results) HasLocations() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_locations_Results) SetLocations(v Location_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_locations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Dataset_locations_Results_List is a list of Dataset_locations_Results.
type Dataset_locations_Results_List = capnp.StructList[Dataset_locations_Results]

// NewDataset_locations_Results creates a new list of Dataset_locations_Results.
func NewDataset_locations_Results_List(s *capnp.Segment, sz int32) (Dataset_locations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_locations_Results](l), err
}

// Dataset_locations_Results_Future is a wrapper for a Dataset_locations_Results promised by a client call.
type Dataset_locations_Results_Future struct{ *capnp.Future }

func (f Dataset_locations_Results_Future) Struct() (Dataset_locations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_locations_Results(p.Struct()), err
}

type Dataset_streamLocations_Params capnp.Struct

// Dataset_streamLocations_Params_TypeID is the unique identifier for the type Dataset_streamLocations_Params.
const Dataset_streamLocations_Params_TypeID = 0xfca3f0f431b64506

func NewDataset_streamLocations_Params(s *capnp.Segment) (Dataset_streamLocations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Params(st), err
}

func NewRootDataset_streamLocations_Params(s *capnp.Segment) (Dataset_streamLocations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Params(st), err
}

func ReadRootDataset_streamLocations_Params(msg *capnp.Message) (Dataset_streamLocations_Params, error) {
	root, err := msg.Root()
	return Dataset_streamLocations_Params(root.Struct()), err
}

func (s Dataset_streamLocations_Params) String() string {
	str, _ := text.Marshal(0xfca3f0f431b64506, capnp.Struct(s))
	return str
}

func (s Dataset_streamLocations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_streamLocations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_streamLocations_Params {
	return Dataset_streamLocations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_streamLocations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_streamLocations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_streamLocations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_streamLocations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_streamLocations_Params) StartAfterLocationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Dataset_streamLocations_Params) HasStartAfterLocationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_streamLocations_Params) StartAfterLocationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_streamLocations_Params) SetStartAfterLocationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Dataset_streamLocations_Params_List is a list of Dataset_streamLocations_Params.
type Dataset_streamLocations_Params_List = capnp.StructList[Dataset_streamLocations_Params]

// NewDataset_streamLocations_Params creates a new list of Dataset_streamLocations_Params.
func NewDataset_streamLocations_Params_List(s *capnp.Segment, sz int32) (Dataset_streamLocations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_streamLocations_Params](l), err
}

// Dataset_streamLocations_Params_Future is a wrapper for a Dataset_streamLocations_Params promised by a client call.
type Dataset_streamLocations_Params_Future struct{ *capnp.Future }

func (f Dataset_streamLocations_Params_Future) Struct() (Dataset_streamLocations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_streamLocations_Params(p.Struct()), err
}

type Dataset_streamLocations_Results capnp.Struct

// Dataset_streamLocations_Results_TypeID is the unique identifier for the type Dataset_streamLocations_Results.
const Dataset_streamLocations_Results_TypeID = 0x9ebadb578b79fa06

func NewDataset_streamLocations_Results(s *capnp.Segment) (Dataset_streamLocations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(st), err
}

func NewRootDataset_streamLocations_Results(s *capnp.Segment) (Dataset_streamLocations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(st), err
}

func ReadRootDataset_streamLocations_Results(msg *capnp.Message) (Dataset_streamLocations_Results, error) {
	root, err := msg.Root()
	return Dataset_streamLocations_Results(root.Struct()), err
}

func (s Dataset_streamLocations_Results) String() string {
	str, _ := text.Marshal(0x9ebadb578b79fa06, capnp.Struct(s))
	return str
}

func (s Dataset_streamLocations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_streamLocations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_streamLocations_Results {
	return Dataset_streamLocations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_streamLocations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_streamLocations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_streamLocations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_streamLocations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_streamLocations_Results) LocationsCallback() Dataset_GetLocationsCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return Dataset_GetLocationsCallback(p.Interface().Client())
}

func (s Dataset_streamLocations_Results) HasLocationsCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_streamLocations_Results) SetLocationsCallback(v Dataset_GetLocationsCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_streamLocations_Results_List is a list of Dataset_streamLocations_Results.
type Dataset_streamLocations_Results_List = capnp.StructList[Dataset_streamLocations_Results]

// NewDataset_streamLocations_Results creates a new list of Dataset_streamLocations_Results.
func NewDataset_streamLocations_Results_List(s *capnp.Segment, sz int32) (Dataset_streamLocations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_streamLocations_Results](l), err
}

// Dataset_streamLocations_Results_Future is a wrapper for a Dataset_streamLocations_Results promised by a client call.
type Dataset_streamLocations_Results_Future struct{ *capnp.Future }

func (f Dataset_streamLocations_Results_Future) Struct() (Dataset_streamLocations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_streamLocations_Results(p.Struct()), err
}
func (p Dataset_streamLocations_Results_Future) LocationsCallback() Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(p.Future.Field(0, nil).Client())
}

type MetaPlusData capnp.Struct

// MetaPlusData_TypeID is the unique identifier for the type MetaPlusData.
const MetaPlusData_TypeID = 0xd7a67fec5f22e5a0

func NewMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData(st), err
}

func NewRootMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData(st), err
}

func ReadRootMetaPlusData(msg *capnp.Message) (MetaPlusData, error) {
	root, err := msg.Root()
	return MetaPlusData(root.Struct()), err
}

func (s MetaPlusData) String() string {
	str, _ := text.Marshal(0xd7a67fec5f22e5a0, capnp.Struct(s))
	return str
}

func (s MetaPlusData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MetaPlusData) DecodeFromPtr(p capnp.Ptr) MetaPlusData {
	return MetaPlusData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MetaPlusData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MetaPlusData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MetaPlusData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MetaPlusData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MetaPlusData) Meta() (Metadata, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata(p.Struct()), err
}

func (s MetaPlusData) HasMeta() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MetaPlusData) SetMeta(v Metadata) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s MetaPlusData) NewMeta() (Metadata, error) {
	ss, err := NewMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MetaPlusData) Data() Dataset {
	p, _ := capnp.Struct(s).Ptr(1)
	return Dataset(p.Interface().Client())
}

func (s MetaPlusData) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MetaPlusData) SetData(v Dataset) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// MetaPlusData_List is a list of MetaPlusData.
type MetaPlusData_List = capnp.StructList[MetaPlusData]

// NewMetaPlusData creates a new list of MetaPlusData.
func NewMetaPlusData_List(s *capnp.Segment, sz int32) (MetaPlusData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[MetaPlusData](l), err
}

// MetaPlusData_Future is a wrapper for a MetaPlusData promised by a client call.
type MetaPlusData_Future struct{ *capnp.Future }

func (f MetaPlusData_Future) Struct() (MetaPlusData, error) {
	p, err := f.Future.Ptr()
	return MetaPlusData(p.Struct()), err
}
func (p MetaPlusData_Future) Meta() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}
func (p MetaPlusData_Future) Data() Dataset {
	return Dataset(p.Future.Field(1, nil).Client())
}

type Element uint16

// Element_TypeID is the unique identifier for the type Element.
const Element_TypeID = 0xe35760b4db5ab564

// Values of Element.
const (
	Element_tmin         Element = 0
	Element_tavg         Element = 1
	Element_tmax         Element = 2
	Element_precip       Element = 3
	Element_globrad      Element = 4
	Element_wind         Element = 5
	Element_sunhours     Element = 6
	Element_cloudamount  Element = 7
	Element_relhumid     Element = 8
	Element_airpress     Element = 9
	Element_vaporpress   Element = 10
	Element_co2          Element = 11
	Element_o3           Element = 12
	Element_et0          Element = 13
	Element_dewpointTemp Element = 14
)

// String returns the enum's constant name.
func (c Element) String() string {
	switch c {
	case Element_tmin:
		return "tmin"
	case Element_tavg:
		return "tavg"
	case Element_tmax:
		return "tmax"
	case Element_precip:
		return "precip"
	case Element_globrad:
		return "globrad"
	case Element_wind:
		return "wind"
	case Element_sunhours:
		return "sunhours"
	case Element_cloudamount:
		return "cloudamount"
	case Element_relhumid:
		return "relhumid"
	case Element_airpress:
		return "airpress"
	case Element_vaporpress:
		return "vaporpress"
	case Element_co2:
		return "co2"
	case Element_o3:
		return "o3"
	case Element_et0:
		return "et0"
	case Element_dewpointTemp:
		return "dewpointTemp"

	default:
		return ""
	}
}

// ElementFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ElementFromString(c string) Element {
	switch c {
	case "tmin":
		return Element_tmin
	case "tavg":
		return Element_tavg
	case "tmax":
		return Element_tmax
	case "precip":
		return Element_precip
	case "globrad":
		return Element_globrad
	case "wind":
		return Element_wind
	case "sunhours":
		return Element_sunhours
	case "cloudamount":
		return Element_cloudamount
	case "relhumid":
		return Element_relhumid
	case "airpress":
		return Element_airpress
	case "vaporpress":
		return Element_vaporpress
	case "co2":
		return Element_co2
	case "o3":
		return Element_o3
	case "et0":
		return Element_et0
	case "dewpointTemp":
		return Element_dewpointTemp

	default:
		return 0
	}
}

type Element_List = capnp.EnumList[Element]

func NewElement_List(s *capnp.Segment, sz int32) (Element_List, error) {
	return capnp.NewEnumList[Element](s, sz)
}

type Location capnp.Struct

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0x85ba7385f313fe19

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0x85ba7385f313fe19, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Id() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Location) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) SetId(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewId sets the id field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Location) NewId() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Location) HeightNN() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Location) SetHeightNN(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Location) Latlon() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Location) HasLatlon() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetLatlon(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Location) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Location) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(2)
	return TimeSeries(p.Interface().Client())
}

func (s Location) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Location) CustomData() (Location_KV_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Location_KV_List(p.List()), err
}

func (s Location) HasCustomData() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Location) SetCustomData(v Location_KV_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCustomData sets the customData field to a newly
// allocated Location_KV_List, preferring placement in s's segment.
func (s Location) NewCustomData(n int32) (Location_KV_List, error) {
	l, err := NewLocation_KV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_KV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Id() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Location_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(1, nil)}
}
func (p Location_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(2, nil).Client())
}

type Location_KV capnp.Struct

// Location_KV_TypeID is the unique identifier for the type Location_KV.
const Location_KV_TypeID = 0xc5fd13a53ae6d46a

func NewLocation_KV(s *capnp.Segment) (Location_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Location_KV(st), err
}

func NewRootLocation_KV(s *capnp.Segment) (Location_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Location_KV(st), err
}

func ReadRootLocation_KV(msg *capnp.Message) (Location_KV, error) {
	root, err := msg.Root()
	return Location_KV(root.Struct()), err
}

func (s Location_KV) String() string {
	str, _ := text.Marshal(0xc5fd13a53ae6d46a, capnp.Struct(s))
	return str
}

func (s Location_KV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location_KV) DecodeFromPtr(p capnp.Ptr) Location_KV {
	return Location_KV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location_KV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location_KV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location_KV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location_KV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location_KV) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location_KV) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location_KV) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location_KV) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location_KV) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Location_KV) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location_KV) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Location_KV_List is a list of Location_KV.
type Location_KV_List = capnp.StructList[Location_KV]

// NewLocation_KV creates a new list of Location_KV.
func NewLocation_KV_List(s *capnp.Segment, sz int32) (Location_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Location_KV](l), err
}

// Location_KV_Future is a wrapper for a Location_KV promised by a client call.
type Location_KV_Future struct{ *capnp.Future }

func (f Location_KV_Future) Struct() (Location_KV, error) {
	p, err := f.Future.Ptr()
	return Location_KV(p.Struct()), err
}
func (p Location_KV_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type TimeSeries capnp.Client

// TimeSeries_TypeID is the unique identifier for the type TimeSeries.
const TimeSeries_TypeID = 0xa7769f40fe6e6de8

func (c TimeSeries) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c TimeSeries) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c TimeSeries) String() string {
	return "TimeSeries(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c TimeSeries) AddRef() TimeSeries {
	return TimeSeries(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c TimeSeries) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c TimeSeries) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c TimeSeries) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (TimeSeries) DecodeFromPtr(p capnp.Ptr) TimeSeries {
	return TimeSeries(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c TimeSeries) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c TimeSeries) IsSame(other TimeSeries) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c TimeSeries) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c TimeSeries) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A TimeSeries_Server is a TimeSeries with a local implementation.
type TimeSeries_Server interface {
	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// TimeSeries_NewServer creates a new Server from an implementation of TimeSeries_Server.
func TimeSeries_NewServer(s TimeSeries_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TimeSeries_Methods(nil, s), s, c)
}

// TimeSeries_ServerToClient creates a new Client from an implementation of TimeSeries_Server.
// The caller is responsible for calling Release on the returned Client.
func TimeSeries_ServerToClient(s TimeSeries_Server) TimeSeries {
	return TimeSeries(capnp.NewClient(TimeSeries_NewServer(s)))
}

// TimeSeries_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TimeSeries_Methods(methods []server.Method, s TimeSeries_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 11)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// TimeSeries_resolution holds the state for a server call to TimeSeries.resolution.
// See server.Call for documentation.
type TimeSeries_resolution struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_resolution) Args() TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_resolution) AllocResults() (TimeSeries_resolution_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(r), err
}

// TimeSeries_range holds the state for a server call to TimeSeries.range.
// See server.Call for documentation.
type TimeSeries_range struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_range) Args() TimeSeries_range_Params {
	return TimeSeries_range_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_range) AllocResults() (TimeSeries_range_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(r), err
}

// TimeSeries_header holds the state for a server call to TimeSeries.header.
// See server.Call for documentation.
type TimeSeries_header struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_header) Args() TimeSeries_header_Params {
	return TimeSeries_header_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_header) AllocResults() (TimeSeries_header_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(r), err
}

// TimeSeries_data holds the state for a server call to TimeSeries.data.
// See server.Call for documentation.
type TimeSeries_data struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_data) Args() TimeSeries_data_Params {
	return TimeSeries_data_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_data) AllocResults() (TimeSeries_data_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(r), err
}

// TimeSeries_dataT holds the state for a server call to TimeSeries.dataT.
// See server.Call for documentation.
type TimeSeries_dataT struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_dataT) Args() TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_dataT) AllocResults() (TimeSeries_dataT_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(r), err
}

// TimeSeries_subrange holds the state for a server call to TimeSeries.subrange.
// See server.Call for documentation.
type TimeSeries_subrange struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subrange) Args() TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_subrange) AllocResults() (TimeSeries_subrange_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(r), err
}

// TimeSeries_subheader holds the state for a server call to TimeSeries.subheader.
// See server.Call for documentation.
type TimeSeries_subheader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subheader) Args() TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_subheader) AllocResults() (TimeSeries_subheader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(r), err
}

// TimeSeries_metadata holds the state for a server call to TimeSeries.metadata.
// See server.Call for documentation.
type TimeSeries_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_metadata) Args() TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(r), err
}

// TimeSeries_location holds the state for a server call to TimeSeries.location.
// See server.Call for documentation.
type TimeSeries_location struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_location) Args() TimeSeries_location_Params {
	return TimeSeries_location_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_location) AllocResults() (Location, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(r), err
}

// TimeSeries_List is a list of TimeSeries.
type TimeSeries_List = capnp.CapList[TimeSeries]

// NewTimeSeries creates a new list of TimeSeries.
func NewTimeSeries_List(s *capnp.Segment, sz int32) (TimeSeries_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[TimeSeries](l), err
}

type TimeSeries_Resolution uint16

// TimeSeries_Resolution_TypeID is the unique identifier for the type TimeSeries_Resolution.
const TimeSeries_Resolution_TypeID = 0xb466cacf63ec03c2

// Values of TimeSeries_Resolution.
const (
	TimeSeries_Resolution_daily  TimeSeries_Resolution = 0
	TimeSeries_Resolution_hourly TimeSeries_Resolution = 1
)

// String returns the enum's constant name.
func (c TimeSeries_Resolution) String() string {
	switch c {
	case TimeSeries_Resolution_daily:
		return "daily"
	case TimeSeries_Resolution_hourly:
		return "hourly"

	default:
		return ""
	}
}

// TimeSeries_ResolutionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TimeSeries_ResolutionFromString(c string) TimeSeries_Resolution {
	switch c {
	case "daily":
		return TimeSeries_Resolution_daily
	case "hourly":
		return TimeSeries_Resolution_hourly

	default:
		return 0
	}
}

type TimeSeries_Resolution_List = capnp.EnumList[TimeSeries_Resolution]

func NewTimeSeries_Resolution_List(s *capnp.Segment, sz int32) (TimeSeries_Resolution_List, error) {
	return capnp.NewEnumList[TimeSeries_Resolution](s, sz)
}

type TimeSeries_resolution_Params capnp.Struct

// TimeSeries_resolution_Params_TypeID is the unique identifier for the type TimeSeries_resolution_Params.
const TimeSeries_resolution_Params_TypeID = 0xea3f0519d272fdd1

func NewTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params(st), err
}

func NewRootTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params(st), err
}

func ReadRootTimeSeries_resolution_Params(msg *capnp.Message) (TimeSeries_resolution_Params, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Params(root.Struct()), err
}

func (s TimeSeries_resolution_Params) String() string {
	str, _ := text.Marshal(0xea3f0519d272fdd1, capnp.Struct(s))
	return str
}

func (s TimeSeries_resolution_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_resolution_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_resolution_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_resolution_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_resolution_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_resolution_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_resolution_Params_List is a list of TimeSeries_resolution_Params.
type TimeSeries_resolution_Params_List = capnp.StructList[TimeSeries_resolution_Params]

// NewTimeSeries_resolution_Params creates a new list of TimeSeries_resolution_Params.
func NewTimeSeries_resolution_Params_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_resolution_Params](l), err
}

// TimeSeries_resolution_Params_Future is a wrapper for a TimeSeries_resolution_Params promised by a client call.
type TimeSeries_resolution_Params_Future struct{ *capnp.Future }

func (f TimeSeries_resolution_Params_Future) Struct() (TimeSeries_resolution_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_resolution_Params(p.Struct()), err
}

type TimeSeries_resolution_Results capnp.Struct

// TimeSeries_resolution_Results_TypeID is the unique identifier for the type TimeSeries_resolution_Results.
const TimeSeries_resolution_Results_TypeID = 0xcd0eadd9a1a66ed6

func NewTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(st), err
}

func NewRootTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(st), err
}

func ReadRootTimeSeries_resolution_Results(msg *capnp.Message) (TimeSeries_resolution_Results, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Results(root.Struct()), err
}

func (s TimeSeries_resolution_Results) String() string {
	str, _ := text.Marshal(0xcd0eadd9a1a66ed6, capnp.Struct(s))
	return str
}

func (s TimeSeries_resolution_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_resolution_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_resolution_Results {
	return TimeSeries_resolution_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_resolution_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_resolution_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_resolution_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_resolution_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_resolution_Results) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(capnp.Struct(s).Uint16(0))
}

func (s TimeSeries_resolution_Results) SetResolution(v TimeSeries_Resolution) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// TimeSeries_resolution_Results_List is a list of TimeSeries_resolution_Results.
type TimeSeries_resolution_Results_List = capnp.StructList[TimeSeries_resolution_Results]

// NewTimeSeries_resolution_Results creates a new list of TimeSeries_resolution_Results.
func NewTimeSeries_resolution_Results_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_resolution_Results](l), err
}

// TimeSeries_resolution_Results_Future is a wrapper for a TimeSeries_resolution_Results promised by a client call.
type TimeSeries_resolution_Results_Future struct{ *capnp.Future }

func (f TimeSeries_resolution_Results_Future) Struct() (TimeSeries_resolution_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_resolution_Results(p.Struct()), err
}

type TimeSeries_range_Params capnp.Struct

// TimeSeries_range_Params_TypeID is the unique identifier for the type TimeSeries_range_Params.
const TimeSeries_range_Params_TypeID = 0xff6bcf0c6b23c916

func NewTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params(st), err
}

func NewRootTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params(st), err
}

func ReadRootTimeSeries_range_Params(msg *capnp.Message) (TimeSeries_range_Params, error) {
	root, err := msg.Root()
	return TimeSeries_range_Params(root.Struct()), err
}

func (s TimeSeries_range_Params) String() string {
	str, _ := text.Marshal(0xff6bcf0c6b23c916, capnp.Struct(s))
	return str
}

func (s TimeSeries_range_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_range_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_range_Params {
	return TimeSeries_range_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_range_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_range_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_range_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_range_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_range_Params_List is a list of TimeSeries_range_Params.
type TimeSeries_range_Params_List = capnp.StructList[TimeSeries_range_Params]

// NewTimeSeries_range_Params creates a new list of TimeSeries_range_Params.
func NewTimeSeries_range_Params_List(s *capnp.Segment, sz int32) (TimeSeries_range_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_range_Params](l), err
}

// TimeSeries_range_Params_Future is a wrapper for a TimeSeries_range_Params promised by a client call.
type TimeSeries_range_Params_Future struct{ *capnp.Future }

func (f TimeSeries_range_Params_Future) Struct() (TimeSeries_range_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_range_Params(p.Struct()), err
}

type TimeSeries_range_Results capnp.Struct

// TimeSeries_range_Results_TypeID is the unique identifier for the type TimeSeries_range_Results.
const TimeSeries_range_Results_TypeID = 0xb9ec27f476022c1b

func NewTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(st), err
}

func NewRootTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(st), err
}

func ReadRootTimeSeries_range_Results(msg *capnp.Message) (TimeSeries_range_Results, error) {
	root, err := msg.Root()
	return TimeSeries_range_Results(root.Struct()), err
}

func (s TimeSeries_range_Results) String() string {
	str, _ := text.Marshal(0xb9ec27f476022c1b, capnp.Struct(s))
	return str
}

func (s TimeSeries_range_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_range_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_range_Results {
	return TimeSeries_range_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_range_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_range_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_range_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_range_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_range_Results) StartDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_range_Results) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_range_Results) SetStartDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewStartDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeries_range_Results) EndDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_range_Results) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeries_range_Results) SetEndDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewEndDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TimeSeries_range_Results_List is a list of TimeSeries_range_Results.
type TimeSeries_range_Results_List = capnp.StructList[TimeSeries_range_Results]

// NewTimeSeries_range_Results creates a new list of TimeSeries_range_Results.
func NewTimeSeries_range_Results_List(s *capnp.Segment, sz int32) (TimeSeries_range_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TimeSeries_range_Results](l), err
}

// TimeSeries_range_Results_Future is a wrapper for a TimeSeries_range_Results promised by a client call.
type TimeSeries_range_Results_Future struct{ *capnp.Future }

func (f TimeSeries_range_Results_Future) Struct() (TimeSeries_range_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_range_Results(p.Struct()), err
}
func (p TimeSeries_range_Results_Future) StartDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p TimeSeries_range_Results_Future) EndDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_header_Params capnp.Struct

// TimeSeries_header_Params_TypeID is the unique identifier for the type TimeSeries_header_Params.
const TimeSeries_header_Params_TypeID = 0x8fd77002ae8a97a1

func NewTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params(st), err
}

func NewRootTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params(st), err
}

func ReadRootTimeSeries_header_Params(msg *capnp.Message) (TimeSeries_header_Params, error) {
	root, err := msg.Root()
	return TimeSeries_header_Params(root.Struct()), err
}

func (s TimeSeries_header_Params) String() string {
	str, _ := text.Marshal(0x8fd77002ae8a97a1, capnp.Struct(s))
	return str
}

func (s TimeSeries_header_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_header_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_header_Params {
	return TimeSeries_header_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_header_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_header_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_header_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_header_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_header_Params_List is a list of TimeSeries_header_Params.
type TimeSeries_header_Params_List = capnp.StructList[TimeSeries_header_Params]

// NewTimeSeries_header_Params creates a new list of TimeSeries_header_Params.
func NewTimeSeries_header_Params_List(s *capnp.Segment, sz int32) (TimeSeries_header_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_header_Params](l), err
}

// TimeSeries_header_Params_Future is a wrapper for a TimeSeries_header_Params promised by a client call.
type TimeSeries_header_Params_Future struct{ *capnp.Future }

func (f TimeSeries_header_Params_Future) Struct() (TimeSeries_header_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_header_Params(p.Struct()), err
}

type TimeSeries_header_Results capnp.Struct

// TimeSeries_header_Results_TypeID is the unique identifier for the type TimeSeries_header_Results.
const TimeSeries_header_Results_TypeID = 0x8976146f144fa050

func NewTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(st), err
}

func NewRootTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(st), err
}

func ReadRootTimeSeries_header_Results(msg *capnp.Message) (TimeSeries_header_Results, error) {
	root, err := msg.Root()
	return TimeSeries_header_Results(root.Struct()), err
}

func (s TimeSeries_header_Results) String() string {
	str, _ := text.Marshal(0x8976146f144fa050, capnp.Struct(s))
	return str
}

func (s TimeSeries_header_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_header_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_header_Results {
	return TimeSeries_header_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_header_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_header_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_header_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_header_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_header_Results) Header() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Element_List(p.List()), err
}

func (s TimeSeries_header_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_header_Results) SetHeader(v Element_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_header_Results) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_header_Results_List is a list of TimeSeries_header_Results.
type TimeSeries_header_Results_List = capnp.StructList[TimeSeries_header_Results]

// NewTimeSeries_header_Results creates a new list of TimeSeries_header_Results.
func NewTimeSeries_header_Results_List(s *capnp.Segment, sz int32) (TimeSeries_header_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_header_Results](l), err
}

// TimeSeries_header_Results_Future is a wrapper for a TimeSeries_header_Results promised by a client call.
type TimeSeries_header_Results_Future struct{ *capnp.Future }

func (f TimeSeries_header_Results_Future) Struct() (TimeSeries_header_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_header_Results(p.Struct()), err
}

type TimeSeries_data_Params capnp.Struct

// TimeSeries_data_Params_TypeID is the unique identifier for the type TimeSeries_data_Params.
const TimeSeries_data_Params_TypeID = 0x8e78986bc45d7dcd

func NewTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params(st), err
}

func NewRootTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params(st), err
}

func ReadRootTimeSeries_data_Params(msg *capnp.Message) (TimeSeries_data_Params, error) {
	root, err := msg.Root()
	return TimeSeries_data_Params(root.Struct()), err
}

func (s TimeSeries_data_Params) String() string {
	str, _ := text.Marshal(0x8e78986bc45d7dcd, capnp.Struct(s))
	return str
}

func (s TimeSeries_data_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_data_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_data_Params {
	return TimeSeries_data_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_data_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_data_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_data_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_data_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_data_Params_List is a list of TimeSeries_data_Params.
type TimeSeries_data_Params_List = capnp.StructList[TimeSeries_data_Params]

// NewTimeSeries_data_Params creates a new list of TimeSeries_data_Params.
func NewTimeSeries_data_Params_List(s *capnp.Segment, sz int32) (TimeSeries_data_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_data_Params](l), err
}

// TimeSeries_data_Params_Future is a wrapper for a TimeSeries_data_Params promised by a client call.
type TimeSeries_data_Params_Future struct{ *capnp.Future }

func (f TimeSeries_data_Params_Future) Struct() (TimeSeries_data_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_data_Params(p.Struct()), err
}

type TimeSeries_data_Results capnp.Struct

// TimeSeries_data_Results_TypeID is the unique identifier for the type TimeSeries_data_Results.
const TimeSeries_data_Results_TypeID = 0x9c3d3448d73eeae9

func NewTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(st), err
}

func NewRootTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(st), err
}

func ReadRootTimeSeries_data_Results(msg *capnp.Message) (TimeSeries_data_Results, error) {
	root, err := msg.Root()
	return TimeSeries_data_Results(root.Struct()), err
}

func (s TimeSeries_data_Results) String() string {
	str, _ := text.Marshal(0x9c3d3448d73eeae9, capnp.Struct(s))
	return str
}

func (s TimeSeries_data_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_data_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_data_Results {
	return TimeSeries_data_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_data_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_data_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_data_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_data_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_data_Results) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeries_data_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_data_Results) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_data_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_data_Results_List is a list of TimeSeries_data_Results.
type TimeSeries_data_Results_List = capnp.StructList[TimeSeries_data_Results]

// NewTimeSeries_data_Results creates a new list of TimeSeries_data_Results.
func NewTimeSeries_data_Results_List(s *capnp.Segment, sz int32) (TimeSeries_data_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_data_Results](l), err
}

// TimeSeries_data_Results_Future is a wrapper for a TimeSeries_data_Results promised by a client call.
type TimeSeries_data_Results_Future struct{ *capnp.Future }

func (f TimeSeries_data_Results_Future) Struct() (TimeSeries_data_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_data_Results(p.Struct()), err
}

type TimeSeries_dataT_Params capnp.Struct

// TimeSeries_dataT_Params_TypeID is the unique identifier for the type TimeSeries_dataT_Params.
const TimeSeries_dataT_Params_TypeID = 0xeff8f923b1853525

func NewTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params(st), err
}

func NewRootTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params(st), err
}

func ReadRootTimeSeries_dataT_Params(msg *capnp.Message) (TimeSeries_dataT_Params, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Params(root.Struct()), err
}

func (s TimeSeries_dataT_Params) String() string {
	str, _ := text.Marshal(0xeff8f923b1853525, capnp.Struct(s))
	return str
}

func (s TimeSeries_dataT_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_dataT_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_dataT_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_dataT_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_dataT_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_dataT_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_dataT_Params_List is a list of TimeSeries_dataT_Params.
type TimeSeries_dataT_Params_List = capnp.StructList[TimeSeries_dataT_Params]

// NewTimeSeries_dataT_Params creates a new list of TimeSeries_dataT_Params.
func NewTimeSeries_dataT_Params_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_dataT_Params](l), err
}

// TimeSeries_dataT_Params_Future is a wrapper for a TimeSeries_dataT_Params promised by a client call.
type TimeSeries_dataT_Params_Future struct{ *capnp.Future }

func (f TimeSeries_dataT_Params_Future) Struct() (TimeSeries_dataT_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_dataT_Params(p.Struct()), err
}

type TimeSeries_dataT_Results capnp.Struct

// TimeSeries_dataT_Results_TypeID is the unique identifier for the type TimeSeries_dataT_Results.
const TimeSeries_dataT_Results_TypeID = 0xc2e0dec0a6ea94fb

func NewTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(st), err
}

func NewRootTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(st), err
}

func ReadRootTimeSeries_dataT_Results(msg *capnp.Message) (TimeSeries_dataT_Results, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Results(root.Struct()), err
}

func (s TimeSeries_dataT_Results) String() string {
	str, _ := text.Marshal(0xc2e0dec0a6ea94fb, capnp.Struct(s))
	return str
}

func (s TimeSeries_dataT_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_dataT_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_dataT_Results {
	return TimeSeries_dataT_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_dataT_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_dataT_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_dataT_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_dataT_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_dataT_Results) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeries_dataT_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_dataT_Results) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_dataT_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_dataT_Results_List is a list of TimeSeries_dataT_Results.
type TimeSeries_dataT_Results_List = capnp.StructList[TimeSeries_dataT_Results]

// NewTimeSeries_dataT_Results creates a new list of TimeSeries_dataT_Results.
func NewTimeSeries_dataT_Results_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_dataT_Results](l), err
}

// TimeSeries_dataT_Results_Future is a wrapper for a TimeSeries_dataT_Results promised by a client call.
type TimeSeries_dataT_Results_Future struct{ *capnp.Future }

func (f TimeSeries_dataT_Results_Future) Struct() (TimeSeries_dataT_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_dataT_Results(p.Struct()), err
}

type TimeSeries_subrange_Params capnp.Struct

// TimeSeries_subrange_Params_TypeID is the unique identifier for the type TimeSeries_subrange_Params.
const TimeSeries_subrange_Params_TypeID = 0xf8aa5b6fe2496fee

func NewTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params(st), err
}

func NewRootTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params(st), err
}

func ReadRootTimeSeries_subrange_Params(msg *capnp.Message) (TimeSeries_subrange_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Params(root.Struct()), err
}

func (s TimeSeries_subrange_Params) String() string {
	str, _ := text.Marshal(0xf8aa5b6fe2496fee, capnp.Struct(s))
	return str
}

func (s TimeSeries_subrange_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subrange_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subrange_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subrange_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subrange_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subrange_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subrange_Params) Start() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_subrange_Params) HasStart() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subrange_Params) SetStart(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewStart() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeries_subrange_Params) End() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_subrange_Params) HasEnd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeries_subrange_Params) SetEnd(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewEnd() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TimeSeries_subrange_Params_List is a list of TimeSeries_subrange_Params.
type TimeSeries_subrange_Params_List = capnp.StructList[TimeSeries_subrange_Params]

// NewTimeSeries_subrange_Params creates a new list of TimeSeries_subrange_Params.
func NewTimeSeries_subrange_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TimeSeries_subrange_Params](l), err
}

// TimeSeries_subrange_Params_Future is a wrapper for a TimeSeries_subrange_Params promised by a client call.
type TimeSeries_subrange_Params_Future struct{ *capnp.Future }

func (f TimeSeries_subrange_Params_Future) Struct() (TimeSeries_subrange_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subrange_Params(p.Struct()), err
}
func (p TimeSeries_subrange_Params_Future) Start() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p TimeSeries_subrange_Params_Future) End() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_subrange_Results capnp.Struct

// TimeSeries_subrange_Results_TypeID is the unique identifier for the type TimeSeries_subrange_Results.
const TimeSeries_subrange_Results_TypeID = 0xf7dfe7147d09b732

func NewTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(st), err
}

func NewRootTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(st), err
}

func ReadRootTimeSeries_subrange_Results(msg *capnp.Message) (TimeSeries_subrange_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Results(root.Struct()), err
}

func (s TimeSeries_subrange_Results) String() string {
	str, _ := text.Marshal(0xf7dfe7147d09b732, capnp.Struct(s))
	return str
}

func (s TimeSeries_subrange_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subrange_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_subrange_Results {
	return TimeSeries_subrange_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subrange_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subrange_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subrange_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subrange_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subrange_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s TimeSeries_subrange_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subrange_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TimeSeries_subrange_Results_List is a list of TimeSeries_subrange_Results.
type TimeSeries_subrange_Results_List = capnp.StructList[TimeSeries_subrange_Results]

// NewTimeSeries_subrange_Results creates a new list of TimeSeries_subrange_Results.
func NewTimeSeries_subrange_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subrange_Results](l), err
}

// TimeSeries_subrange_Results_Future is a wrapper for a TimeSeries_subrange_Results promised by a client call.
type TimeSeries_subrange_Results_Future struct{ *capnp.Future }

func (f TimeSeries_subrange_Results_Future) Struct() (TimeSeries_subrange_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subrange_Results(p.Struct()), err
}
func (p TimeSeries_subrange_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type TimeSeries_subheader_Params capnp.Struct

// TimeSeries_subheader_Params_TypeID is the unique identifier for the type TimeSeries_subheader_Params.
const TimeSeries_subheader_Params_TypeID = 0x8cc364dee8f693b8

func NewTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params(st), err
}

func NewRootTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params(st), err
}

func ReadRootTimeSeries_subheader_Params(msg *capnp.Message) (TimeSeries_subheader_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Params(root.Struct()), err
}

func (s TimeSeries_subheader_Params) String() string {
	str, _ := text.Marshal(0x8cc364dee8f693b8, capnp.Struct(s))
	return str
}

func (s TimeSeries_subheader_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subheader_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subheader_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subheader_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subheader_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subheader_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subheader_Params) Elements() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Element_List(p.List()), err
}

func (s TimeSeries_subheader_Params) HasElements() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subheader_Params) SetElements(v Element_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewElements sets the elements field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_subheader_Params) NewElements(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_subheader_Params_List is a list of TimeSeries_subheader_Params.
type TimeSeries_subheader_Params_List = capnp.StructList[TimeSeries_subheader_Params]

// NewTimeSeries_subheader_Params creates a new list of TimeSeries_subheader_Params.
func NewTimeSeries_subheader_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subheader_Params](l), err
}

// TimeSeries_subheader_Params_Future is a wrapper for a TimeSeries_subheader_Params promised by a client call.
type TimeSeries_subheader_Params_Future struct{ *capnp.Future }

func (f TimeSeries_subheader_Params_Future) Struct() (TimeSeries_subheader_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subheader_Params(p.Struct()), err
}

type TimeSeries_subheader_Results capnp.Struct

// TimeSeries_subheader_Results_TypeID is the unique identifier for the type TimeSeries_subheader_Results.
const TimeSeries_subheader_Results_TypeID = 0xc3238163cae880df

func NewTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(st), err
}

func NewRootTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(st), err
}

func ReadRootTimeSeries_subheader_Results(msg *capnp.Message) (TimeSeries_subheader_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Results(root.Struct()), err
}

func (s TimeSeries_subheader_Results) String() string {
	str, _ := text.Marshal(0xc3238163cae880df, capnp.Struct(s))
	return str
}

func (s TimeSeries_subheader_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subheader_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_subheader_Results {
	return TimeSeries_subheader_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subheader_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subheader_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subheader_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subheader_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subheader_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s TimeSeries_subheader_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subheader_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TimeSeries_subheader_Results_List is a list of TimeSeries_subheader_Results.
type TimeSeries_subheader_Results_List = capnp.StructList[TimeSeries_subheader_Results]

// NewTimeSeries_subheader_Results creates a new list of TimeSeries_subheader_Results.
func NewTimeSeries_subheader_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subheader_Results](l), err
}

// TimeSeries_subheader_Results_Future is a wrapper for a TimeSeries_subheader_Results promised by a client call.
type TimeSeries_subheader_Results_Future struct{ *capnp.Future }

func (f TimeSeries_subheader_Results_Future) Struct() (TimeSeries_subheader_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subheader_Results(p.Struct()), err
}
func (p TimeSeries_subheader_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type TimeSeries_metadata_Params capnp.Struct

// TimeSeries_metadata_Params_TypeID is the unique identifier for the type TimeSeries_metadata_Params.
const TimeSeries_metadata_Params_TypeID = 0xce2cc4225c956634

func NewTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params(st), err
}

func NewRootTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params(st), err
}

func ReadRootTimeSeries_metadata_Params(msg *capnp.Message) (TimeSeries_metadata_Params, error) {
	root, err := msg.Root()
	return TimeSeries_metadata_Params(root.Struct()), err
}

func (s TimeSeries_metadata_Params) String() string {
	str, _ := text.Marshal(0xce2cc4225c956634, capnp.Struct(s))
	return str
}

func (s TimeSeries_metadata_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_metadata_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_metadata_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_metadata_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_metadata_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_metadata_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_metadata_Params_List is a list of TimeSeries_metadata_Params.
type TimeSeries_metadata_Params_List = capnp.StructList[TimeSeries_metadata_Params]

// NewTimeSeries_metadata_Params creates a new list of TimeSeries_metadata_Params.
func NewTimeSeries_metadata_Params_List(s *capnp.Segment, sz int32) (TimeSeries_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_metadata_Params](l), err
}

// TimeSeries_metadata_Params_Future is a wrapper for a TimeSeries_metadata_Params promised by a client call.
type TimeSeries_metadata_Params_Future struct{ *capnp.Future }

func (f TimeSeries_metadata_Params_Future) Struct() (TimeSeries_metadata_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_metadata_Params(p.Struct()), err
}

type TimeSeries_location_Params capnp.Struct

// TimeSeries_location_Params_TypeID is the unique identifier for the type TimeSeries_location_Params.
const TimeSeries_location_Params_TypeID = 0xcb329eb01b0fa313

func NewTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params(st), err
}

func NewRootTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params(st), err
}

func ReadRootTimeSeries_location_Params(msg *capnp.Message) (TimeSeries_location_Params, error) {
	root, err := msg.Root()
	return TimeSeries_location_Params(root.Struct()), err
}

func (s TimeSeries_location_Params) String() string {
	str, _ := text.Marshal(0xcb329eb01b0fa313, capnp.Struct(s))
	return str
}

func (s TimeSeries_location_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_location_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_location_Params {
	return TimeSeries_location_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_location_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_location_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_location_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_location_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_location_Params_List is a list of TimeSeries_location_Params.
type TimeSeries_location_Params_List = capnp.StructList[TimeSeries_location_Params]

// NewTimeSeries_location_Params creates a new list of TimeSeries_location_Params.
func NewTimeSeries_location_Params_List(s *capnp.Segment, sz int32) (TimeSeries_location_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_location_Params](l), err
}

// TimeSeries_location_Params_Future is a wrapper for a TimeSeries_location_Params promised by a client call.
type TimeSeries_location_Params_Future struct{ *capnp.Future }

func (f TimeSeries_location_Params_Future) Struct() (TimeSeries_location_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_location_Params(p.Struct()), err
}

type TimeSeriesData capnp.Struct

// TimeSeriesData_TypeID is the unique identifier for the type TimeSeriesData.
const TimeSeriesData_TypeID = 0xf1c1ccf59bc6964f

func NewTimeSeriesData(s *capnp.Segment) (TimeSeriesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeSeriesData(st), err
}

func NewRootTimeSeriesData(s *capnp.Segment) (TimeSeriesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeSeriesData(st), err
}

func ReadRootTimeSeriesData(msg *capnp.Message) (TimeSeriesData, error) {
	root, err := msg.Root()
	return TimeSeriesData(root.Struct()), err
}

func (s TimeSeriesData) String() string {
	str, _ := text.Marshal(0xf1c1ccf59bc6964f, capnp.Struct(s))
	return str
}

func (s TimeSeriesData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeriesData) DecodeFromPtr(p capnp.Ptr) TimeSeriesData {
	return TimeSeriesData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeriesData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeriesData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeriesData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeriesData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeriesData) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeriesData) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeriesData) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeriesData) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TimeSeriesData) IsTransposed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s TimeSeriesData) SetIsTransposed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s TimeSeriesData) Header() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Element_List(p.List()), err
}

func (s TimeSeriesData) HasHeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeriesData) SetHeader(v Element_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeriesData) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s TimeSeriesData) StartDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeriesData) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TimeSeriesData) SetStartDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeriesData) NewStartDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeriesData) EndDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeriesData) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s TimeSeriesData) SetEndDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeriesData) NewEndDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeriesData) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(capnp.Struct(s).Uint16(2))
}

func (s TimeSeriesData) SetResolution(v TimeSeries_Resolution) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// TimeSeriesData_List is a list of TimeSeriesData.
type TimeSeriesData_List = capnp.StructList[TimeSeriesData]

// NewTimeSeriesData creates a new list of TimeSeriesData.
func NewTimeSeriesData_List(s *capnp.Segment, sz int32) (TimeSeriesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[TimeSeriesData](l), err
}

// TimeSeriesData_Future is a wrapper for a TimeSeriesData promised by a client call.
type TimeSeriesData_Future struct{ *capnp.Future }

func (f TimeSeriesData_Future) Struct() (TimeSeriesData, error) {
	p, err := f.Future.Ptr()
	return TimeSeriesData(p.Struct()), err
}
func (p TimeSeriesData_Future) StartDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p TimeSeriesData_Future) EndDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(3, nil)}
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xfe7d08d4352b0c5f

func (c Service) GetAvailableDatasets(ctx context.Context, params func(Service_getAvailableDatasets_Params) error) (Service_getAvailableDatasets_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAvailableDatasets_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getAvailableDatasets_Results_Future{Future: ans.Future()}, release

}

func (c Service) GetDatasetsFor(ctx context.Context, params func(Service_getDatasetsFor_Params) error) (Service_getDatasetsFor_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getDatasetsFor_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getDatasetsFor_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	GetAvailableDatasets(context.Context, Service_getAvailableDatasets) error

	GetDatasetsFor(context.Context, Service_getDatasetsFor) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAvailableDatasets(ctx, Service_getAvailableDatasets{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDatasetsFor(ctx, Service_getDatasetsFor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_getAvailableDatasets holds the state for a server call to Service.getAvailableDatasets.
// See server.Call for documentation.
type Service_getAvailableDatasets struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAvailableDatasets) Args() Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getAvailableDatasets) AllocResults() (Service_getAvailableDatasets_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(r), err
}

// Service_getDatasetsFor holds the state for a server call to Service.getDatasetsFor.
// See server.Call for documentation.
type Service_getDatasetsFor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getDatasetsFor) Args() Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getDatasetsFor) AllocResults() (Service_getDatasetsFor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_getAvailableDatasets_Params capnp.Struct

// Service_getAvailableDatasets_Params_TypeID is the unique identifier for the type Service_getAvailableDatasets_Params.
const Service_getAvailableDatasets_Params_TypeID = 0x804cca489405d451

func NewService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params(st), err
}

func NewRootService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params(st), err
}

func ReadRootService_getAvailableDatasets_Params(msg *capnp.Message) (Service_getAvailableDatasets_Params, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Params(root.Struct()), err
}

func (s Service_getAvailableDatasets_Params) String() string {
	str, _ := text.Marshal(0x804cca489405d451, capnp.Struct(s))
	return str
}

func (s Service_getAvailableDatasets_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAvailableDatasets_Params) DecodeFromPtr(p capnp.Ptr) Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAvailableDatasets_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAvailableDatasets_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAvailableDatasets_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAvailableDatasets_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Service_getAvailableDatasets_Params_List is a list of Service_getAvailableDatasets_Params.
type Service_getAvailableDatasets_Params_List = capnp.StructList[Service_getAvailableDatasets_Params]

// NewService_getAvailableDatasets_Params creates a new list of Service_getAvailableDatasets_Params.
func NewService_getAvailableDatasets_Params_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_getAvailableDatasets_Params](l), err
}

// Service_getAvailableDatasets_Params_Future is a wrapper for a Service_getAvailableDatasets_Params promised by a client call.
type Service_getAvailableDatasets_Params_Future struct{ *capnp.Future }

func (f Service_getAvailableDatasets_Params_Future) Struct() (Service_getAvailableDatasets_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getAvailableDatasets_Params(p.Struct()), err
}

type Service_getAvailableDatasets_Results capnp.Struct

// Service_getAvailableDatasets_Results_TypeID is the unique identifier for the type Service_getAvailableDatasets_Results.
const Service_getAvailableDatasets_Results_TypeID = 0x916880859435c6e8

func NewService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(st), err
}

func NewRootService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(st), err
}

func ReadRootService_getAvailableDatasets_Results(msg *capnp.Message) (Service_getAvailableDatasets_Results, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Results(root.Struct()), err
}

func (s Service_getAvailableDatasets_Results) String() string {
	str, _ := text.Marshal(0x916880859435c6e8, capnp.Struct(s))
	return str
}

func (s Service_getAvailableDatasets_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAvailableDatasets_Results) DecodeFromPtr(p capnp.Ptr) Service_getAvailableDatasets_Results {
	return Service_getAvailableDatasets_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAvailableDatasets_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAvailableDatasets_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAvailableDatasets_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAvailableDatasets_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getAvailableDatasets_Results) Datasets() (MetaPlusData_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MetaPlusData_List(p.List()), err
}

func (s Service_getAvailableDatasets_Results) HasDatasets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getAvailableDatasets_Results) SetDatasets(v MetaPlusData_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated MetaPlusData_List, preferring placement in s's segment.
func (s Service_getAvailableDatasets_Results) NewDatasets(n int32) (MetaPlusData_List, error) {
	l, err := NewMetaPlusData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MetaPlusData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_getAvailableDatasets_Results_List is a list of Service_getAvailableDatasets_Results.
type Service_getAvailableDatasets_Results_List = capnp.StructList[Service_getAvailableDatasets_Results]

// NewService_getAvailableDatasets_Results creates a new list of Service_getAvailableDatasets_Results.
func NewService_getAvailableDatasets_Results_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getAvailableDatasets_Results](l), err
}

// Service_getAvailableDatasets_Results_Future is a wrapper for a Service_getAvailableDatasets_Results promised by a client call.
type Service_getAvailableDatasets_Results_Future struct{ *capnp.Future }

func (f Service_getAvailableDatasets_Results_Future) Struct() (Service_getAvailableDatasets_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getAvailableDatasets_Results(p.Struct()), err
}

type Service_getDatasetsFor_Params capnp.Struct

// Service_getDatasetsFor_Params_TypeID is the unique identifier for the type Service_getDatasetsFor_Params.
const Service_getDatasetsFor_Params_TypeID = 0x9d7d1f83dda3e6db

func NewService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params(st), err
}

func NewRootService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params(st), err
}

func ReadRootService_getDatasetsFor_Params(msg *capnp.Message) (Service_getDatasetsFor_Params, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Params(root.Struct()), err
}

func (s Service_getDatasetsFor_Params) String() string {
	str, _ := text.Marshal(0x9d7d1f83dda3e6db, capnp.Struct(s))
	return str
}

func (s Service_getDatasetsFor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getDatasetsFor_Params) DecodeFromPtr(p capnp.Ptr) Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getDatasetsFor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getDatasetsFor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getDatasetsFor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getDatasetsFor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getDatasetsFor_Params) Template() (Metadata, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata(p.Struct()), err
}

func (s Service_getDatasetsFor_Params) HasTemplate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getDatasetsFor_Params) SetTemplate(v Metadata) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTemplate sets the template field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s Service_getDatasetsFor_Params) NewTemplate() (Metadata, error) {
	ss, err := NewMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Service_getDatasetsFor_Params_List is a list of Service_getDatasetsFor_Params.
type Service_getDatasetsFor_Params_List = capnp.StructList[Service_getDatasetsFor_Params]

// NewService_getDatasetsFor_Params creates a new list of Service_getDatasetsFor_Params.
func NewService_getDatasetsFor_Params_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDatasetsFor_Params](l), err
}

// Service_getDatasetsFor_Params_Future is a wrapper for a Service_getDatasetsFor_Params promised by a client call.
type Service_getDatasetsFor_Params_Future struct{ *capnp.Future }

func (f Service_getDatasetsFor_Params_Future) Struct() (Service_getDatasetsFor_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getDatasetsFor_Params(p.Struct()), err
}
func (p Service_getDatasetsFor_Params_Future) Template() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}

type Service_getDatasetsFor_Results capnp.Struct

// Service_getDatasetsFor_Results_TypeID is the unique identifier for the type Service_getDatasetsFor_Results.
const Service_getDatasetsFor_Results_TypeID = 0xcd95f79174b0eab0

func NewService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(st), err
}

func NewRootService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(st), err
}

func ReadRootService_getDatasetsFor_Results(msg *capnp.Message) (Service_getDatasetsFor_Results, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Results(root.Struct()), err
}

func (s Service_getDatasetsFor_Results) String() string {
	str, _ := text.Marshal(0xcd95f79174b0eab0, capnp.Struct(s))
	return str
}

func (s Service_getDatasetsFor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getDatasetsFor_Results) DecodeFromPtr(p capnp.Ptr) Service_getDatasetsFor_Results {
	return Service_getDatasetsFor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getDatasetsFor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getDatasetsFor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getDatasetsFor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getDatasetsFor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getDatasetsFor_Results) Datasets() (Dataset_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Dataset_List(p.List()), err
}

func (s Service_getDatasetsFor_Results) HasDatasets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getDatasetsFor_Results) SetDatasets(v Dataset_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated Dataset_List, preferring placement in s's segment.
func (s Service_getDatasetsFor_Results) NewDatasets(n int32) (Dataset_List, error) {
	l, err := NewDataset_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Dataset_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_getDatasetsFor_Results_List is a list of Service_getDatasetsFor_Results.
type Service_getDatasetsFor_Results_List = capnp.StructList[Service_getDatasetsFor_Results]

// NewService_getDatasetsFor_Results creates a new list of Service_getDatasetsFor_Results.
func NewService_getDatasetsFor_Results_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDatasetsFor_Results](l), err
}

// Service_getDatasetsFor_Results_Future is a wrapper for a Service_getDatasetsFor_Results promised by a client call.
type Service_getDatasetsFor_Results_Future struct{ *capnp.Future }

func (f Service_getDatasetsFor_Results_Future) Struct() (Service_getDatasetsFor_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getDatasetsFor_Results(p.Struct()), err
}

type CSVTimeSeriesFactory capnp.Client

// CSVTimeSeriesFactory_TypeID is the unique identifier for the type CSVTimeSeriesFactory.
const CSVTimeSeriesFactory_TypeID = 0xa418c26cc59929d9

func (c CSVTimeSeriesFactory) Create(ctx context.Context, params func(CSVTimeSeriesFactory_create_Params) error) (CSVTimeSeriesFactory_create_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CSVTimeSeriesFactory_create_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CSVTimeSeriesFactory_create_Results_Future{Future: ans.Future()}, release

}

func (c CSVTimeSeriesFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c CSVTimeSeriesFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CSVTimeSeriesFactory) String() string {
	return "CSVTimeSeriesFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CSVTimeSeriesFactory) AddRef() CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CSVTimeSeriesFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CSVTimeSeriesFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CSVTimeSeriesFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CSVTimeSeriesFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CSVTimeSeriesFactory) IsSame(other CSVTimeSeriesFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CSVTimeSeriesFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CSVTimeSeriesFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A CSVTimeSeriesFactory_Server is a CSVTimeSeriesFactory with a local implementation.
type CSVTimeSeriesFactory_Server interface {
	Create(context.Context, CSVTimeSeriesFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// CSVTimeSeriesFactory_NewServer creates a new Server from an implementation of CSVTimeSeriesFactory_Server.
func CSVTimeSeriesFactory_NewServer(s CSVTimeSeriesFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CSVTimeSeriesFactory_Methods(nil, s), s, c)
}

// CSVTimeSeriesFactory_ServerToClient creates a new Client from an implementation of CSVTimeSeriesFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func CSVTimeSeriesFactory_ServerToClient(s CSVTimeSeriesFactory_Server) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.NewClient(CSVTimeSeriesFactory_NewServer(s)))
}

// CSVTimeSeriesFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CSVTimeSeriesFactory_Methods(methods []server.Method, s CSVTimeSeriesFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, CSVTimeSeriesFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// CSVTimeSeriesFactory_create holds the state for a server call to CSVTimeSeriesFactory.create.
// See server.Call for documentation.
type CSVTimeSeriesFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CSVTimeSeriesFactory_create) Args() CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CSVTimeSeriesFactory_create) AllocResults() (CSVTimeSeriesFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(r), err
}

// CSVTimeSeriesFactory_List is a list of CSVTimeSeriesFactory.
type CSVTimeSeriesFactory_List = capnp.CapList[CSVTimeSeriesFactory]

// NewCSVTimeSeriesFactory creates a new list of CSVTimeSeriesFactory.
func NewCSVTimeSeriesFactory_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CSVTimeSeriesFactory](l), err
}

type CSVTimeSeriesFactory_CSVConfig capnp.Struct

// CSVTimeSeriesFactory_CSVConfig_TypeID is the unique identifier for the type CSVTimeSeriesFactory_CSVConfig.
const CSVTimeSeriesFactory_CSVConfig_TypeID = 0xeba81ca9f46690b8

func NewCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig(st), err
}

func NewRootCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig(st), err
}

func ReadRootCSVTimeSeriesFactory_CSVConfig(msg *capnp.Message) (CSVTimeSeriesFactory_CSVConfig, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_CSVConfig(root.Struct()), err
}

func (s CSVTimeSeriesFactory_CSVConfig) String() string {
	str, _ := text.Marshal(0xeba81ca9f46690b8, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_CSVConfig) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_CSVConfig) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_CSVConfig {
	return CSVTimeSeriesFactory_CSVConfig(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_CSVConfig) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_CSVConfig) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_CSVConfig) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_CSVConfig) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_CSVConfig) Sep() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasSep() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_CSVConfig) SepBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytesDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSep(v string) error {
	return capnp.Struct(s).SetNewText(0, v)
}

func (s CSVTimeSeriesFactory_CSVConfig) HeaderMap() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Pair_List(p.List()), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasHeaderMap() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetHeaderMap(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeaderMap sets the headerMap field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_CSVConfig) NewHeaderMap(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesToHeader() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesToHeader(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesFromHeaderToData() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesFromHeaderToData(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

// CSVTimeSeriesFactory_CSVConfig_List is a list of CSVTimeSeriesFactory_CSVConfig.
type CSVTimeSeriesFactory_CSVConfig_List = capnp.StructList[CSVTimeSeriesFactory_CSVConfig]

// NewCSVTimeSeriesFactory_CSVConfig creates a new list of CSVTimeSeriesFactory_CSVConfig.
func NewCSVTimeSeriesFactory_CSVConfig_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_CSVConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_CSVConfig](l), err
}

// CSVTimeSeriesFactory_CSVConfig_Future is a wrapper for a CSVTimeSeriesFactory_CSVConfig promised by a client call.
type CSVTimeSeriesFactory_CSVConfig_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_CSVConfig_Future) Struct() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_CSVConfig(p.Struct()), err
}

type CSVTimeSeriesFactory_create_Params capnp.Struct

// CSVTimeSeriesFactory_create_Params_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Params.
const CSVTimeSeriesFactory_create_Params_TypeID = 0xcfaa8d2601750547

func NewCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params(st), err
}

func NewRootCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params(st), err
}

func ReadRootCSVTimeSeriesFactory_create_Params(msg *capnp.Message) (CSVTimeSeriesFactory_create_Params, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Params(root.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Params) String() string {
	str, _ := text.Marshal(0xcfaa8d2601750547, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_create_Params) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_create_Params) CsvData() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Params) HasCsvData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Params) CsvDataBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Params) SetCsvData(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CSVTimeSeriesFactory_create_Params) Config() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CSVTimeSeriesFactory_CSVConfig(p.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Params) HasConfig() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Params) SetConfig(v CSVTimeSeriesFactory_CSVConfig) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewConfig sets the config field to a newly
// allocated CSVTimeSeriesFactory_CSVConfig struct, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_create_Params) NewConfig() (CSVTimeSeriesFactory_CSVConfig, error) {
	ss, err := NewCSVTimeSeriesFactory_CSVConfig(capnp.Struct(s).Segment())
	if err != nil {
		return CSVTimeSeriesFactory_CSVConfig{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CSVTimeSeriesFactory_create_Params_List is a list of CSVTimeSeriesFactory_create_Params.
type CSVTimeSeriesFactory_create_Params_List = capnp.StructList[CSVTimeSeriesFactory_create_Params]

// NewCSVTimeSeriesFactory_create_Params creates a new list of CSVTimeSeriesFactory_create_Params.
func NewCSVTimeSeriesFactory_create_Params_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_create_Params](l), err
}

// CSVTimeSeriesFactory_create_Params_Future is a wrapper for a CSVTimeSeriesFactory_create_Params promised by a client call.
type CSVTimeSeriesFactory_create_Params_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_create_Params_Future) Struct() (CSVTimeSeriesFactory_create_Params, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_create_Params(p.Struct()), err
}
func (p CSVTimeSeriesFactory_create_Params_Future) Config() CSVTimeSeriesFactory_CSVConfig_Future {
	return CSVTimeSeriesFactory_CSVConfig_Future{Future: p.Future.Field(1, nil)}
}

type CSVTimeSeriesFactory_create_Results capnp.Struct

// CSVTimeSeriesFactory_create_Results_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Results.
const CSVTimeSeriesFactory_create_Results_TypeID = 0xefefafebc8ae5534

func NewCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(st), err
}

func NewRootCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(st), err
}

func ReadRootCSVTimeSeriesFactory_create_Results(msg *capnp.Message) (CSVTimeSeriesFactory_create_Results, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Results(root.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Results) String() string {
	str, _ := text.Marshal(0xefefafebc8ae5534, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_create_Results) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_create_Results {
	return CSVTimeSeriesFactory_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_create_Results) Timeseries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s CSVTimeSeriesFactory_create_Results) HasTimeseries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Results) SetTimeseries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s CSVTimeSeriesFactory_create_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CSVTimeSeriesFactory_create_Results_List is a list of CSVTimeSeriesFactory_create_Results.
type CSVTimeSeriesFactory_create_Results_List = capnp.StructList[CSVTimeSeriesFactory_create_Results]

// NewCSVTimeSeriesFactory_create_Results creates a new list of CSVTimeSeriesFactory_create_Results.
func NewCSVTimeSeriesFactory_create_Results_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_create_Results](l), err
}

// CSVTimeSeriesFactory_create_Results_Future is a wrapper for a CSVTimeSeriesFactory_create_Results promised by a client call.
type CSVTimeSeriesFactory_create_Results_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_create_Results_Future) Struct() (CSVTimeSeriesFactory_create_Results, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_create_Results(p.Struct()), err
}
func (p CSVTimeSeriesFactory_create_Results_Future) Timeseries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper capnp.Client

// AlterTimeSeriesWrapper_TypeID is the unique identifier for the type AlterTimeSeriesWrapper.
const AlterTimeSeriesWrapper_TypeID = 0xe1f480ef979784b2

func (c AlterTimeSeriesWrapper) WrappedTimeSeries(ctx context.Context, params func(AlterTimeSeriesWrapper_wrappedTimeSeries_Params) error) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_wrappedTimeSeries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) AlteredElements(ctx context.Context, params func(AlterTimeSeriesWrapper_alteredElements_Params) error) (AlterTimeSeriesWrapper_alteredElements_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alteredElements_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alteredElements_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Alter(ctx context.Context, params func(AlterTimeSeriesWrapper_alter_Params) error) (AlterTimeSeriesWrapper_alter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alter_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Remove(ctx context.Context, params func(AlterTimeSeriesWrapper_remove_Params) error) (AlterTimeSeriesWrapper_remove_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_remove_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_remove_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) ReplaceWrappedTimeSeries(ctx context.Context, params func(AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) error) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      4,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "replaceWrappedTimeSeries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AlterTimeSeriesWrapper) String() string {
	return "AlterTimeSeriesWrapper(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AlterTimeSeriesWrapper) AddRef() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AlterTimeSeriesWrapper) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AlterTimeSeriesWrapper) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AlterTimeSeriesWrapper) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AlterTimeSeriesWrapper) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AlterTimeSeriesWrapper) IsSame(other AlterTimeSeriesWrapper) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AlterTimeSeriesWrapper) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AlterTimeSeriesWrapper) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AlterTimeSeriesWrapper_Server is a AlterTimeSeriesWrapper with a local implementation.
type AlterTimeSeriesWrapper_Server interface {
	WrappedTimeSeries(context.Context, AlterTimeSeriesWrapper_wrappedTimeSeries) error

	AlteredElements(context.Context, AlterTimeSeriesWrapper_alteredElements) error

	Alter(context.Context, AlterTimeSeriesWrapper_alter) error

	Remove(context.Context, AlterTimeSeriesWrapper_remove) error

	ReplaceWrappedTimeSeries(context.Context, AlterTimeSeriesWrapper_replaceWrappedTimeSeries) error

	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// AlterTimeSeriesWrapper_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapper_Server.
func AlterTimeSeriesWrapper_NewServer(s AlterTimeSeriesWrapper_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapper_Methods(nil, s), s, c)
}

// AlterTimeSeriesWrapper_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapper_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapper_ServerToClient(s AlterTimeSeriesWrapper_Server) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.NewClient(AlterTimeSeriesWrapper_NewServer(s)))
}

// AlterTimeSeriesWrapper_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapper_Methods(methods []server.Method, s AlterTimeSeriesWrapper_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 16)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WrappedTimeSeries(ctx, AlterTimeSeriesWrapper_wrappedTimeSeries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AlteredElements(ctx, AlterTimeSeriesWrapper_alteredElements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Alter(ctx, AlterTimeSeriesWrapper_alter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Remove(ctx, AlterTimeSeriesWrapper_remove{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      4,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "replaceWrappedTimeSeries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReplaceWrappedTimeSeries(ctx, AlterTimeSeriesWrapper_replaceWrappedTimeSeries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapper_wrappedTimeSeries holds the state for a server call to AlterTimeSeriesWrapper.wrappedTimeSeries.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_wrappedTimeSeries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) Args() AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) AllocResults() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(r), err
}

// AlterTimeSeriesWrapper_alteredElements holds the state for a server call to AlterTimeSeriesWrapper.alteredElements.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alteredElements struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alteredElements) Args() AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alteredElements) AllocResults() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(r), err
}

// AlterTimeSeriesWrapper_alter holds the state for a server call to AlterTimeSeriesWrapper.alter.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alter) Args() AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alter) AllocResults() (AlterTimeSeriesWrapper_alter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(r), err
}

// AlterTimeSeriesWrapper_remove holds the state for a server call to AlterTimeSeriesWrapper.remove.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_remove struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_remove) Args() AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_remove) AllocResults() (AlterTimeSeriesWrapper_remove_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(r), err
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries holds the state for a server call to AlterTimeSeriesWrapper.replaceWrappedTimeSeries.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_replaceWrappedTimeSeries) Args() AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_replaceWrappedTimeSeries) AllocResults() (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(r), err
}

// AlterTimeSeriesWrapper_List is a list of AlterTimeSeriesWrapper.
type AlterTimeSeriesWrapper_List = capnp.CapList[AlterTimeSeriesWrapper]

// NewAlterTimeSeriesWrapper creates a new list of AlterTimeSeriesWrapper.
func NewAlterTimeSeriesWrapper_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AlterTimeSeriesWrapper](l), err
}

type AlterTimeSeriesWrapper_Altered capnp.Struct

// AlterTimeSeriesWrapper_Altered_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_Altered.
const AlterTimeSeriesWrapper_Altered_TypeID = 0xd085b9baf390bec5

func NewAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered(st), err
}

func NewRootAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered(st), err
}

func ReadRootAlterTimeSeriesWrapper_Altered(msg *capnp.Message) (AlterTimeSeriesWrapper_Altered, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_Altered(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_Altered) String() string {
	str, _ := text.Marshal(0xd085b9baf390bec5, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_Altered) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_Altered) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_Altered {
	return AlterTimeSeriesWrapper_Altered(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_Altered) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_Altered) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_Altered) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_Altered) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_Altered) Element() Element {
	return Element(capnp.Struct(s).Uint16(0))
}

func (s AlterTimeSeriesWrapper_Altered) SetElement(v Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s AlterTimeSeriesWrapper_Altered) Value() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s AlterTimeSeriesWrapper_Altered) SetValue(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s AlterTimeSeriesWrapper_Altered) Type() AlterTimeSeriesWrapper_AlterType {
	return AlterTimeSeriesWrapper_AlterType(capnp.Struct(s).Uint16(2))
}

func (s AlterTimeSeriesWrapper_Altered) SetType(v AlterTimeSeriesWrapper_AlterType) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// AlterTimeSeriesWrapper_Altered_List is a list of AlterTimeSeriesWrapper_Altered.
type AlterTimeSeriesWrapper_Altered_List = capnp.StructList[AlterTimeSeriesWrapper_Altered]

// NewAlterTimeSeriesWrapper_Altered creates a new list of AlterTimeSeriesWrapper_Altered.
func NewAlterTimeSeriesWrapper_Altered_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_Altered](l), err
}

// AlterTimeSeriesWrapper_Altered_Future is a wrapper for a AlterTimeSeriesWrapper_Altered promised by a client call.
type AlterTimeSeriesWrapper_Altered_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_Altered_Future) Struct() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_Altered(p.Struct()), err
}

type AlterTimeSeriesWrapper_AlterType uint16

// AlterTimeSeriesWrapper_AlterType_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_AlterType.
const AlterTimeSeriesWrapper_AlterType_TypeID = 0xb5dd785107c358ca

// Values of AlterTimeSeriesWrapper_AlterType.
const (
	AlterTimeSeriesWrapper_AlterType_add AlterTimeSeriesWrapper_AlterType = 0
	AlterTimeSeriesWrapper_AlterType_mul AlterTimeSeriesWrapper_AlterType = 1
)

// String returns the enum's constant name.
func (c AlterTimeSeriesWrapper_AlterType) String() string {
	switch c {
	case AlterTimeSeriesWrapper_AlterType_add:
		return "add"
	case AlterTimeSeriesWrapper_AlterType_mul:
		return "mul"

	default:
		return ""
	}
}

// AlterTimeSeriesWrapper_AlterTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AlterTimeSeriesWrapper_AlterTypeFromString(c string) AlterTimeSeriesWrapper_AlterType {
	switch c {
	case "add":
		return AlterTimeSeriesWrapper_AlterType_add
	case "mul":
		return AlterTimeSeriesWrapper_AlterType_mul

	default:
		return 0
	}
}

type AlterTimeSeriesWrapper_AlterType_List = capnp.EnumList[AlterTimeSeriesWrapper_AlterType]

func NewAlterTimeSeriesWrapper_AlterType_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_AlterType_List, error) {
	return capnp.NewEnumList[AlterTimeSeriesWrapper_AlterType](s, sz)
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Params capnp.Struct

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID = 0xe31f26eed9fb36a9

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) String() string {
	str, _ := text.Marshal(0xe31f26eed9fb36a9, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_wrappedTimeSeries_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List = capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Params]

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Params](l), err
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Params promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Results capnp.Struct

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID = 0xfb2eddb58f90f7aa

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) String() string {
	str, _ := text.Marshal(0xfb2eddb58f90f7aa, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_wrappedTimeSeries_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_wrappedTimeSeries_Results {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List = capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Results]

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Results](l), err
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Results promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_alteredElements_Params capnp.Struct

// AlterTimeSeriesWrapper_alteredElements_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Params.
const AlterTimeSeriesWrapper_alteredElements_Params_TypeID = 0xcba0220cda41869e

func NewAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) String() string {
	str, _ := text.Marshal(0xcba0220cda41869e, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alteredElements_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alteredElements_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_alteredElements_Params_List is a list of AlterTimeSeriesWrapper_alteredElements_Params.
type AlterTimeSeriesWrapper_alteredElements_Params_List = capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Params]

// NewAlterTimeSeriesWrapper_alteredElements_Params creates a new list of AlterTimeSeriesWrapper_alteredElements_Params.
func NewAlterTimeSeriesWrapper_alteredElements_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Params](l), err
}

// AlterTimeSeriesWrapper_alteredElements_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Params promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alteredElements_Params_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alteredElements_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_alteredElements_Results capnp.Struct

// AlterTimeSeriesWrapper_alteredElements_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Results.
const AlterTimeSeriesWrapper_alteredElements_Results_TypeID = 0xdd5b75b5bc711766

func NewAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) String() string {
	str, _ := text.Marshal(0xdd5b75b5bc711766, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alteredElements_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alteredElements_Results {
	return AlterTimeSeriesWrapper_alteredElements_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alteredElements_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alteredElements_Results) List() (AlterTimeSeriesWrapper_Altered_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper_Altered_List(p.List()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) SetList(v AlterTimeSeriesWrapper_Altered_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated AlterTimeSeriesWrapper_Altered_List, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alteredElements_Results) NewList(n int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := NewAlterTimeSeriesWrapper_Altered_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AlterTimeSeriesWrapper_Altered_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AlterTimeSeriesWrapper_alteredElements_Results_List is a list of AlterTimeSeriesWrapper_alteredElements_Results.
type AlterTimeSeriesWrapper_alteredElements_Results_List = capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Results]

// NewAlterTimeSeriesWrapper_alteredElements_Results creates a new list of AlterTimeSeriesWrapper_alteredElements_Results.
func NewAlterTimeSeriesWrapper_alteredElements_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Results](l), err
}

// AlterTimeSeriesWrapper_alteredElements_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Results promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alteredElements_Results_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alteredElements_Results(p.Struct()), err
}

type AlterTimeSeriesWrapper_alter_Params capnp.Struct

// AlterTimeSeriesWrapper_alter_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Params.
const AlterTimeSeriesWrapper_alter_Params_TypeID = 0xd36b1e9c2929e6e4

func NewAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_alter_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Params) String() string {
	str, _ := text.Marshal(0xd36b1e9c2929e6e4, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alter_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alter_Params) Desc() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper_Altered(p.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Params) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetDesc(v AlterTimeSeriesWrapper_Altered) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDesc sets the desc field to a newly
// allocated AlterTimeSeriesWrapper_Altered struct, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alter_Params) NewDesc() (AlterTimeSeriesWrapper_Altered, error) {
	ss, err := NewAlterTimeSeriesWrapper_Altered(capnp.Struct(s).Segment())
	if err != nil {
		return AlterTimeSeriesWrapper_Altered{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AlterTimeSeriesWrapper_alter_Params) AsNewTimeSeries() bool {
	return capnp.Struct(s).Bit(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetAsNewTimeSeries(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// AlterTimeSeriesWrapper_alter_Params_List is a list of AlterTimeSeriesWrapper_alter_Params.
type AlterTimeSeriesWrapper_alter_Params_List = capnp.StructList[AlterTimeSeriesWrapper_alter_Params]

// NewAlterTimeSeriesWrapper_alter_Params creates a new list of AlterTimeSeriesWrapper_alter_Params.
func NewAlterTimeSeriesWrapper_alter_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alter_Params](l), err
}

// AlterTimeSeriesWrapper_alter_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Params promised by a client call.
type AlterTimeSeriesWrapper_alter_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alter_Params_Future) Struct() (AlterTimeSeriesWrapper_alter_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alter_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_alter_Params_Future) Desc() AlterTimeSeriesWrapper_Altered_Future {
	return AlterTimeSeriesWrapper_Altered_Future{Future: p.Future.Field(0, nil)}
}

type AlterTimeSeriesWrapper_alter_Results capnp.Struct

// AlterTimeSeriesWrapper_alter_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Results.
const AlterTimeSeriesWrapper_alter_Results_TypeID = 0xc4a1ec6280be841c

func NewAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_alter_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Results) String() string {
	str, _ := text.Marshal(0xc4a1ec6280be841c, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alter_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alter_Results {
	return AlterTimeSeriesWrapper_alter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alter_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_alter_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_alter_Results_List is a list of AlterTimeSeriesWrapper_alter_Results.
type AlterTimeSeriesWrapper_alter_Results_List = capnp.StructList[AlterTimeSeriesWrapper_alter_Results]

// NewAlterTimeSeriesWrapper_alter_Results creates a new list of AlterTimeSeriesWrapper_alter_Results.
func NewAlterTimeSeriesWrapper_alter_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alter_Results](l), err
}

// AlterTimeSeriesWrapper_alter_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Results promised by a client call.
type AlterTimeSeriesWrapper_alter_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alter_Results_Future) Struct() (AlterTimeSeriesWrapper_alter_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alter_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_alter_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_remove_Params capnp.Struct

// AlterTimeSeriesWrapper_remove_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Params.
const AlterTimeSeriesWrapper_remove_Params_TypeID = 0xdb7bfcfe4d45ff53

func NewAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_remove_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_remove_Params) String() string {
	str, _ := text.Marshal(0xdb7bfcfe4d45ff53, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_remove_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_remove_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_remove_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_remove_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_remove_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_remove_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_remove_Params) AlteredElement() Element {
	return Element(capnp.Struct(s).Uint16(0))
}

func (s AlterTimeSeriesWrapper_remove_Params) SetAlteredElement(v Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// AlterTimeSeriesWrapper_remove_Params_List is a list of AlterTimeSeriesWrapper_remove_Params.
type AlterTimeSeriesWrapper_remove_Params_List = capnp.StructList[AlterTimeSeriesWrapper_remove_Params]

// NewAlterTimeSeriesWrapper_remove_Params creates a new list of AlterTimeSeriesWrapper_remove_Params.
func NewAlterTimeSeriesWrapper_remove_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_remove_Params](l), err
}

// AlterTimeSeriesWrapper_remove_Params_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Params promised by a client call.
type AlterTimeSeriesWrapper_remove_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_remove_Params_Future) Struct() (AlterTimeSeriesWrapper_remove_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_remove_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_remove_Results capnp.Struct

// AlterTimeSeriesWrapper_remove_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Results.
const AlterTimeSeriesWrapper_remove_Results_TypeID = 0xf44980b23013003b

func NewAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_remove_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_remove_Results) String() string {
	str, _ := text.Marshal(0xf44980b23013003b, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_remove_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_remove_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_remove_Results {
	return AlterTimeSeriesWrapper_remove_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_remove_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_remove_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_remove_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_remove_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_remove_Results_List is a list of AlterTimeSeriesWrapper_remove_Results.
type AlterTimeSeriesWrapper_remove_Results_List = capnp.StructList[AlterTimeSeriesWrapper_remove_Results]

// NewAlterTimeSeriesWrapper_remove_Results creates a new list of AlterTimeSeriesWrapper_remove_Results.
func NewAlterTimeSeriesWrapper_remove_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_remove_Results](l), err
}

// AlterTimeSeriesWrapper_remove_Results_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Results promised by a client call.
type AlterTimeSeriesWrapper_remove_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_remove_Results_Future) Struct() (AlterTimeSeriesWrapper_remove_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_remove_Results(p.Struct()), err
}

type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params capnp.Struct

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params.
const AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_TypeID = 0x8f08162dbd7e5068

func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) String() string {
	str, _ := text.Marshal(0x8f08162dbd7e5068, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List is a list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List = capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params]

// NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params creates a new list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params.
func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params](l), err
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future is a wrapper for a AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params promised by a client call.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future) Struct() (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results capnp.Struct

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results.
const AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_TypeID = 0x8b0a787e82cd94bb

func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) String() string {
	str, _ := text.Marshal(0x8b0a787e82cd94bb, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results {
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List is a list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List = capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results]

// NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results creates a new list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results.
func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results](l), err
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future is a wrapper for a AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results promised by a client call.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future) Struct() (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(p.Struct()), err
}

type AlterTimeSeriesWrapperFactory capnp.Client

// AlterTimeSeriesWrapperFactory_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory.
const AlterTimeSeriesWrapperFactory_TypeID = 0xc5f12df0a2a52744

func (c AlterTimeSeriesWrapperFactory) Wrap(ctx context.Context, params func(AlterTimeSeriesWrapperFactory_wrap_Params) error) (AlterTimeSeriesWrapperFactory_wrap_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapperFactory_wrap_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapperFactory_wrap_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapperFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapperFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AlterTimeSeriesWrapperFactory) String() string {
	return "AlterTimeSeriesWrapperFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AlterTimeSeriesWrapperFactory) AddRef() AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AlterTimeSeriesWrapperFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AlterTimeSeriesWrapperFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AlterTimeSeriesWrapperFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AlterTimeSeriesWrapperFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AlterTimeSeriesWrapperFactory) IsSame(other AlterTimeSeriesWrapperFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AlterTimeSeriesWrapperFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AlterTimeSeriesWrapperFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AlterTimeSeriesWrapperFactory_Server is a AlterTimeSeriesWrapperFactory with a local implementation.
type AlterTimeSeriesWrapperFactory_Server interface {
	Wrap(context.Context, AlterTimeSeriesWrapperFactory_wrap) error

	Info(context.Context, common.Identifiable_info) error
}

// AlterTimeSeriesWrapperFactory_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapperFactory_Server.
func AlterTimeSeriesWrapperFactory_NewServer(s AlterTimeSeriesWrapperFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapperFactory_Methods(nil, s), s, c)
}

// AlterTimeSeriesWrapperFactory_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapperFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapperFactory_ServerToClient(s AlterTimeSeriesWrapperFactory_Server) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.NewClient(AlterTimeSeriesWrapperFactory_NewServer(s)))
}

// AlterTimeSeriesWrapperFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapperFactory_Methods(methods []server.Method, s AlterTimeSeriesWrapperFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wrap(ctx, AlterTimeSeriesWrapperFactory_wrap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapperFactory_wrap holds the state for a server call to AlterTimeSeriesWrapperFactory.wrap.
// See server.Call for documentation.
type AlterTimeSeriesWrapperFactory_wrap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapperFactory_wrap) Args() AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapperFactory_wrap) AllocResults() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(r), err
}

// AlterTimeSeriesWrapperFactory_List is a list of AlterTimeSeriesWrapperFactory.
type AlterTimeSeriesWrapperFactory_List = capnp.CapList[AlterTimeSeriesWrapperFactory]

// NewAlterTimeSeriesWrapperFactory creates a new list of AlterTimeSeriesWrapperFactory.
func NewAlterTimeSeriesWrapperFactory_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AlterTimeSeriesWrapperFactory](l), err
}

type AlterTimeSeriesWrapperFactory_wrap_Params capnp.Struct

// AlterTimeSeriesWrapperFactory_wrap_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Params.
const AlterTimeSeriesWrapperFactory_wrap_Params_TypeID = 0x95064806dc018bfe

func NewAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params(st), err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params(st), err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Params(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) String() string {
	str, _ := text.Marshal(0x95064806dc018bfe, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory_wrap_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Params) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Params_List is a list of AlterTimeSeriesWrapperFactory_wrap_Params.
type AlterTimeSeriesWrapperFactory_wrap_Params_List = capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Params]

// NewAlterTimeSeriesWrapperFactory_wrap_Params creates a new list of AlterTimeSeriesWrapperFactory_wrap_Params.
func NewAlterTimeSeriesWrapperFactory_wrap_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Params](l), err
}

// AlterTimeSeriesWrapperFactory_wrap_Params_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Params promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapperFactory_wrap_Params_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapperFactory_wrap_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapperFactory_wrap_Params_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapperFactory_wrap_Results capnp.Struct

// AlterTimeSeriesWrapperFactory_wrap_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Results.
const AlterTimeSeriesWrapperFactory_wrap_Results_TypeID = 0xb48982ac9bcd5d11

func NewAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(st), err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(st), err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Results(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) String() string {
	str, _ := text.Marshal(0xb48982ac9bcd5d11, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory_wrap_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory_wrap_Results {
	return AlterTimeSeriesWrapperFactory_wrap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Results) Wrapper() AlterTimeSeriesWrapper {
	p, _ := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper(p.Interface().Client())
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) HasWrapper() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) SetWrapper(v AlterTimeSeriesWrapper) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Results_List is a list of AlterTimeSeriesWrapperFactory_wrap_Results.
type AlterTimeSeriesWrapperFactory_wrap_Results_List = capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Results]

// NewAlterTimeSeriesWrapperFactory_wrap_Results creates a new list of AlterTimeSeriesWrapperFactory_wrap_Results.
func NewAlterTimeSeriesWrapperFactory_wrap_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Results](l), err
}

// AlterTimeSeriesWrapperFactory_wrap_Results_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Results promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapperFactory_wrap_Results_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapperFactory_wrap_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapperFactory_wrap_Results_Future) Wrapper() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(p.Future.Field(0, nil).Client())
}

const schema_a01d3ae410eb4518 = "x\xda\xac[}x\x14\xd5\xb9\x7f\xdf\x99$\xcbG`" +
	"s\x9c\x90\xf0\x15VB\x00\x09\x90'\xd9\x10\x14Zn" +
	"\x12 B\x90\xd4L\x82X\xa8\\\x9d\xecN\xc8\xc2\xce" +
	"\xce23\x0b\xc4{)\x1f5miE\x85\x0b\xd7r" +
	"\xab\x16m\xa9Wn\xad\xd4Gn\xab\xb7\xf4)*\xbd" +
	"\x15\xa5\xad\x16\xda\xa2b\xfd\xaeRQ\xb9j\xfd\x84\xb9" +
	"\xcf{fgg\xd8l\xc2\x87\xfe3I\xe6\xbc\xe7\xbc" +
	"\xe7\xbc\xef\xef\xfd<\x93\xea-C\x1b\xf2j\x86\x84*" +
	"@h\xff\x11\xe6\x17\xd8\xf2\x91\xfc\xed\xf3\x0f-\xdc\x00" +
	"\xac\x04\x01\xf2\x02\x00\xb5\x1f\xb0m\x08yv\xe1\xa6?" +
	"\x14\x9cX\xff@\x0f\xc8\xa5\x88\xf6^\xed\x9a\xce7\x9f" +
	"\x99\xfe)4a\xa0\x10Qz\x8d\x9d\x90N1\"?" +
	"\xc9\xee\x15\x00\xed\x11g\xa4\xf7z\xccGz@\x1e\x8a" +
	"h\x0fo\xfa{\xd1\xab3\xcbvA>-)\xdd_" +
	"\xfc\x88\xb4\xaf\xb8\x14\xa0v\x7fq\x08\x01m\xf9\x95o" +
	"T\x1f|a\xd57\x81\x0d\x15<b@\xe9\xcda\xdb" +
	"\xa4S\xc3h\xce\xc9a\x0f\x00\xda\xad\xbb\xae.\xd6\x8b" +
	"Wo\x066\x02\x01\xf2\x918*%\xb3\x11P\x8a\x95" +
	"\xd4\x03\xda\xff\xb3\xfd\xf0\xa6\xaf\xaf\x1d\xf4]`\xe3\xdd" +
	"\x03\xec,\x09\x0b\x90g\xff\xe2\xdf\xfe\xf1\xc6\x0b\xd1\xc7" +
	"n\xf6O\xddZ\xd2FS\xef\xe4S\x0f\xaf[\xf6\xf8" +
	"\xca\xef\xad\xbd\xc5!\xe0S\x9f.\xa9\xa4\xb3?\xb5\xbd" +
	"\xb0fm\xe0\xbd[zm\xef\xe1\x92m\xd2\x81\x12\xda" +
	"\xde\xfe\x12\xda^W\xeb\xd7\xf7O-\x19p\xab\xc3\xdd" +
	"\xe1\xc1J+\x05@iR)\xf1\xb8\xfb\xf6\xef\xfcT" +
	"H\xfe\xf9V\x1f\x8f\x96\xd2\x99\xc4\xe3\x8d\xdf\xd4m\xef" +
	"\xd9\xd0\xb5\xd5\x91\xbc3\xb5\xae\xf4?h{M|\xea" +
	"\x99\xef\xe2\xf3\x05\xf3\x0bv\x00\x9b\x92!\xe8.}\x94" +
	"\x086s\x82M\x8b\xbf4i\xcd\xeao\xef\x006\xd6" +
	"]\xfb~Z \xcf~\xf3\xc4?\xfdy\xfe\xb4Yw" +
	"\xf8\x8f~gi\x98\xa6\xee\xe6S\x9f{\xfd\x87\xc7\xbf" +
	"\x11Zw\xa7\x9f\xf9k\xa5\x1dDp\x8a\x13\x14|\xd2" +
	"\xfd\xddk\x9f{\xe4.?\xc1\xb0\xe1\x06\x11\x8c\x1dN" +
	"\x04kO^\xbf{\xb0X\xf7\x03`\xe32\x04\xcd\xc3" +
	"\xb7\x11\xc1\x12Npl\xd2\xce\x83\xf1G\x87\xff\x08\xd8" +
	"P\xd1/\xc3\xda\xa7\x87\x8fD\xe9\xa5\xe1\xa5\xa4\xe3\xe1" +
	"\xf3\xa4a#J\x01\xec7\xb4\xc4\x99\x86\x1f\xac\xbe7" +
	"\x9bZ\xca\x1fqHbDR[6b\x9e \xed\x1c" +
	"9\x11\xc0>~}Y\xc3\xf3\x9f\xdd\xbc\xc7\xbf\xbb\xad" +
	"#9*v\x8e$\xe6XeT_5\xb7\xe0\xbf\x80" +
	"\x95\x8a\x1ev\x01k\x0f\x8f\x1c\x84\xd2\xf1\x91\xa4\xc1c" +
	"#\xbf%\xd5\x8c\x0a\x00\xd8\xd2\x82\xab/\x9b\xa57\xef" +
	"\xf5/7b\xd4wh\xb9I\xa3h\xb9G\xc5\xb7\"" +
	"\xbf?\xd4\xf9\x10\xb0\x11\x82\xb7U\xc0\xda\xe6Q\xe5(" +
	"-\xa1E\xa4kF]\x0eh\xb3e\x87\xbf\xff\x93M" +
	"\x9b\x1f\xf2+m\xc9\xa8C\xb4\x94\xc6\x97\x1a6\xff\x8d" +
	"\xc4mW>\xf6\x90\xcf\xe0\xb6\x8c\x0a\x93\xd2\x0e}\xf5" +
	"\xb1\x80\xbc\xf6\xf8>`\xe3\x05\xfb\xc1\x9bn\xbf\xfd\x9d" +
	"\x0d\xef\xbfDLR\xa3nDi3g\xd2\xc3\x99\x8c" +
	"\x9a\"\xac~\x7f\xe2[\x0f\xa7\xd5+\xd0\"\x9bG\xcd" +
	"$&[G\xad\x01\xb4?\xdd~\xe2\xc7\xbf~\xe1\xc5" +
	"G\xfd\xfa?\xe5\x10|\xccw\xf1\xd7\x0do\x1c\x8al" +
	"\x1c\xf7\x98\x9f`\xc6\xe8\xa5\x1c|\xa39@\xa6\xdd\xd3" +
	"\xf5D\xc5-\x8f\x93\xf5\x0bgY\x7f>\x80\x14\x1b}" +
	"BJ\x8d\xa6I\xabFs{\x1e}\xd3\xaf6t\xbc" +
	"u\xf7\xe3~;\xd8X\xc6\xc1\xbc\xb5\x8c\xd6\x9b;q" +
	"\xf7=\xefN=u\xb0\x17\x1a\xf6\x95u\xa0\xf4D\x19" +
	"\x1d\xee`\xd9<\xe9d\x19\xa1a\xc5\x91\xd7g\xee\x96" +
	"N\x1f\x04V\xea\xf3,\xfc\xa0\xd2\xf1\xb2g\xa479" +
	"\xfdket\xd6\x01/\x7f\x98\x7fG\xf8\x99\xdf8V" +
	"\xe0\xb0n\x1c\xc3\xcdD\x1eC\xac\x7f^X\xf2\x8b\x13" +
	"'7\xfeo/,\xac\x1a3\x12\xa5\x8dch\xa9u" +
	"c\xbe%\x1d\xa6\xdf\xeci?Zv\xf8\xe9\x9f\x1c\xfa" +
	"m\x96\x1f\xe3nl\xdf\x98\x13\xd2\x01N\xbf\x7f\x0cY" +
	"\xbf\xf4\xc3\xe0\xa8\xbdw\x85\x9f\xf4\x19\xf75\xa1\x05\xa4" +
	"\xcb\xbb\xbe\xd9\xf8la\xf9\xae'}^\xa91\xf42" +
	"\x8d\xfc)\xf1\xe3\xbb\x8f\xdd?\xf40\xc8#\xd0\x1d\xaa" +
	"\x0bq\xcbk\x0c\xd1v\xf7\x9e\xd8km\xfdp\xc7a" +
	"?\x18\xd5\xd0\x0a\"X\xc5\x09\xa6u\xee\xb8\xae\xfc\xf1" +
	")\xbf\xf3q\xdd\xedp-\xfa\xc1\x0bo\xc7\xbaf\xfc" +
	"\xae\x97\xdb\xda\x1a\xda&\xed\x0c\x11\xe5\x8e\xd0D\xd2\xd7" +
	"\xbc\xfc\x14N\xd8\xb2\xe7\xf7i\xeb\xe5\x08\x8a]\xca\x11" +
	"\xdf})I\xf5\xe0\xafn{\xef\x91\x87{\xfe\x00\xf2" +
	"xD\x0f\x8d\x9c\xdb\xd1KW\xa0\xf4\xe6\xa5\\\x05\x97" +
	"\x92\x1c\x1e9rY\xbc\xa7j\xd73>L\xaf\x1b\xcb" +
	"\x9d\xdc\xab\xafO\x9at\xc7\x98\x95\x7f\xe4\xcbdN3" +
	"\x96\xbb\x89\xd4Xb\xf4\xf6\x8d\xd3J^\x1d\xb4\xf6\x8f" +
	"\xbd\xf6|t\xec6\xe9\xf8Xn\xa8c\xd7\x03\xda\xa9" +
	"\x97\xae>5g\xd7\xa8?\x01+\x11\xedwoX\xf2" +
	"\xee\xd3\xa7\xeb\xfeAj\x1cR\xbe\x14\xa5\xb1\xe5DY" +
	"V>Oj\xa6\xdf\xec]\xaf\x95_\xff\xd6\xfa\x1f\xff" +
	"\x19\xd8P\x7f4\xe2\x08\xaa)\x7fV\x9a\xc5\xe9g\x94" +
	"\xd3\x16\xd6/\xbb\xfb\x9e\xbd\xcb?:\xe6\x97\xf8\x8er" +
	"\x1e(\xee.'\x89\xb7\xdbM-g>\xfb\x97\xe7\xd2" +
	"\xa7\xe0\x07<X\xce\xd1}\x94\x13t\x96\xae\xfa\xe5\xbe" +
	"\xd4\xd7\x8e\xfb\xe1\xffq\xf9\x09\"\x182\x8e\xbb\xd3\xa3" +
	"?\x7f\xf1\xd4?'\xff\xea\xf7\x96\xb3\xc6qy\xb7p" +
	"\x82a\x1f&;\xdf\x0b\xdd\xfb\xa2\x1f\xc5\xda8\xee7" +
	"6r\x82\x8c\x0a\xb2\x0d\xe8g\xe3*Q:0n\"" +
	"@\xed\xb1q\xf3Pz\xb8\x82,hP\xed'[\xef" +
	"8r\xe5\xcb\x0eC\xbe\xe3\xfb*\xbeC*\xb9\xce|" +
	"\xf4k\x89+\x0b_\xf1\x9fvg\x057\xfd\xdd\x15\xc4" +
	"\xe9\xbe\xe9\x9f\x1e{{B\xe8\x15\x1fv\x9f\xa8\xf8?" +
	"\x9a\x1a\xdd\xb7\xf4\xb9\x87n\xb8\xf6\x95^\xba\xda_\xf1" +
	"\xa0t\xb0\x82(\x0fT\xe8\x84\xaf\x86\xab\x1e\xbb\xef\x96" +
	"o\xdc\xf5\xaa\xff8\xf7\x8f\xbf\x87\x98\xec\x1fOL^" +
	"<\xf2\xf8\xac\x9d\x974\xbe\x0e\xf2\xe4\x8cHO\x8e\x17" +
	"(p\xe2\x04\"x\xfa\xb4\xf1\xcc\x88\xfc\xfa\x13>\x94" +
	"\x8f\x9f\xb0\x94v\xf1\x8b\xdb:\xdf\xbfo\xf4\x7f\xfe\x1d" +
	"\xe4q\xe8\x0b3\x0e\x88\xd9\x84\x15(\x8d\x9f@\xca\x1d" +
	";\xe1o\x80\xf6\x98\x15\x0f\x88{\xae\x7f\xfb\xa4\xff\xb8" +
	"\xb1\x89\x1c\x80\xdd\x13\xb99]\xf3\xd3\xdf\xfe\xfd\x81w" +
	"\xde\xf1\x9b\xc2\x9d\x0e\xc1\xfd\x13\x09\x1e\xe3\xebz~6" +
	"\xee\xe3\x8f\xde\xf1\xedd\xc8e\xdcc_\xfd\xef\xbf\xf9" +
	"\xfe\x07O\x1d8\x953\xe7\xf9`\xe2\x09\x09/#\xea" +
	"\xd3\x13\xafE\xc0\xd3_\x92\xaa\x1f\xdc\xd0\xfc\xbe'\xd5" +
	"\x9eI\xf7\xd0*\x19,g\x87\xbe\xd4\xa4\x07\xa5u\x93" +
	"(\xf4m\x994\x0f%\xad\x92B_\xf8\xe7\x03\xd7\x15" +
	"\xff\xed\xaf\x1f\xfa=\xb7Z\xc9\xc1\xba\xaa\x92\xce\xf3\xb6" +
	"\xde\xfc\xb2\xfe\xb5=\x1f\xf9\x83\xc3\x8e\xca\x05\x1c\xcd\x95" +
	"t\x9eS\xcb\x0a\xfer\xb4\xa1\xe7\x13`\x933+\x9c" +
	"\xae\x1cD\xa2\x1f6\x99V\xd8\xf3\xe1m\xb7\xee;^" +
	"\xf5\xa9\x1f\xcd\xcd\x93?\xa1\x15\x96q\x82\x8c\x13\xcda" +
	"\\\x1b'?\"m\x9e<\x8f|\xe4d\xe2V\xd0\xf4" +
	"\xdf5\xef\xbf\xfb\xc3\xcf\xfc\xf2\x9f4\x85\xbb\xb3\xba)" +
	"\xb4\xd8\xf5\x85\x93\xeb\x8e\x0cXw\xa6\xd7\xf1\x97My" +
	"PR\xa7\xd0\x9a\xca\x94oI\xfb\xa7\xd0\xe9K\x9e\x18" +
	"\xb7\xb2\xf0\xf7+m\x9f.\xf6M\x09#\xd80\xd5\x8e" +
	"\xc4c\x9ab\xa9U\xf9\x11%\x99H\xcelW\x8d\xd5" +
	"\xb1\x88Z\xb5\\\xb5\x1aW+\xb1\xb8\xd2\x11W\xe7*" +
	"\x96b\xaa\x96Y\xd1\xaa\x18\x8a\x86ff\x8e\xe0\xcci" +
	"Q-%\xaaXJUS0a\x19\xdd\xad\x88r\xb5" +
	"\x98Wh\xdby\x08 5b9@\xfb\x97Q\xc4\xf6" +
	"\xf9(\xe0\x10<c\x17\x13x\xa5&>\xd0@\x03\x0b" +
	"i@8m\x17\xa3\x00 5\xe3R\x80\xf6\xf94\xb0" +
	"\x88\x06\xc4\xcf\xecb\x14\x01$\x99\xcfXH\x03_\xa5" +
	"\x81\xbcO\xedb\xcc\xa3,\x82\x0f\xb4\xd2\xc0u4\x90" +
	"\xff\x89]\x8c\x14r\x97\xe0L\x80\xf6E4p\x03\x0d" +
	"\x14|l\x17c\x01\x80\xb4\x0cg\x03\xb4\x7f\x95\x06\xa2" +
	"4\x10\xf8\xc8.F.5\x0c\x03\xb4_G\x03]4" +
	"0\xe0C\xbb\x18\x07\x00H*\xe7q\x03\x0d\xc4Q\xc0" +
	"\xb2\x81\xff\xb0\xb1\x18\x07R\\\xe7#Q\x1aI\xd2\x94" +
	"A\x1f\xd8\xc58\x08@\xd2\xb0\x0d\xa0=N\x03ki" +
	"`\xf0\xfbv1\x0e\x06\x90R\xd8\x01\xd0n\xd1\xc0\x06" +
	"\x140\xb0<\xa2a\xd0\x0bD\x80\x18\x04\x0c\x18\xfcm" +
	"&\xe9w\xde\xda]1\xd3\xd2\x8dX\x04D%\x0e\x05" +
	"\x01#\x92\xc4\xa0\x97z\xa7\xa7\x9a&\xbd\xcdD\x09\xe7" +
	"m\xbd\x9a0[T\x0d\x8b\xbcp\x0d\x88E\x80\xebW" +
	"\xab\x86\x19\xd3\x13X\x08\x02\x16\x02\x86LK1,," +
	"\xb2\xb7\xb0r\xf1'g^\xbf=M\x17P\x13\xd1\x1c" +
	"o#z\x18\x07\x81\x80\x83\x00\xedd,\xa2',C" +
	"\x07\x8cC\x81\x1dU\xcd\x88\x11KZ\x10\xf0\xad\x9e\x81" +
	"\x0f:\xf0Y\xa8\xd7G\x14+\xa6'\xe4<D_\x12" +
	"\x83#\xc5\xab\x16\xcb\xc5b\x1e\x00\x01\x89\xad\x1b\x09 " +
	"\xaf\x15Q\xbeI@D\x8e!\xb6q\x01\x80\xbcAD" +
	"\xf9f\x01\x99\x80\x1c?l\xf3L\x00\xf9&\x11\xe5\xdb" +
	"\x04d\xa2\xc0\xb1\xc3\xb6,\x05\x90o\x16Q\xfe\x9e\x80" +
	",O\xe4\xb8a;\xe8\xe5v\x11\xe5\xbd\x02\x8a1:" +
	"\xdb\x1f\x9f\x15\xcf<\xf9\xf5'\x8f\xa4\xcffw\xa9\xb1" +
	"\xe5]\xd6W\xbe\x02\x00\xee\x19\xeb\xe3\x8a\x15\xd7\x13X" +
	"d\x7fz\xebS3\xaa?;\xf5\x96Kl\xc54\xb5" +
	"]5b \xaa&2\x7f\xca\x8b\x8c\xce\x9d2-]" +
	"\x9b\xab\x80h)8\x14\xb0UD,\xf2\x0e\x0cH/" +
	"\xb3\xa5\xd36\x07[\xc8\xa2F\xf3\xa3\xb5\xdc\xc8\x17k" +
	"\xa6\x1f\x02kZ\x01\x80\"k\\\x00\x80yl\xd66" +
	"\x00\xccg\xb3h\xac\x80\xcd\xe8\x00\xb0#q-\xa2k" +
	"s\"P\x1f\xd7\xa6]Qs\xb9\xbd\\5b\x11\xb3" +
	"M\x85zM\x0fW\xd7\xd4\xd9+\x13Z\xacM\x89h" +
	"\x10\xd4\xc3\xe1&\xdb\xd4\xbabm\x11e\x1ad&\xcf" +
	"\xb605'\xc2\xa7\xe3\xe5\xb6\x96\x8c\xcd1#\xee\xfc" +
	"\xea\x19v\xaaK\xef\xba\xd6\xe8\xac\x85\xc0\xf4\x9a\xf9\x99" +
	"\xbd\xe79{_\x94\x96\x87jVu\xa9JT5*" +
	"\xdaT3\x15\xb7L\x90\xf32j\x1dB\xda\x1a \xa2" +
	"\\!`\xbdC\xe6\x0a'\xe8\xc5\xce,\xe1\x04\x1c\x06" +
	"\x8dqK5<.\xd7\x1aJ2\xa9\x1aU\x86\x9a\x8c" +
	"+\x11\xd5\xf93\xea\x8dW\xb4\xa9!\xce\xbf\x9f\x8d\x9a" +
	"\xa9\x8e\xf4^\xd3\xde\xce\xbfUB[\xa1\x88\xf2e\x02" +
	"\xdaj\\\xd5\xd4\x84e\x122\xce\xb9_\xb1\x17\x1fr" +
	"\x98\x15\xadJ\xd0P43\x87\xce[}:\x0fs\x9d" +
	"7\x85\xb9\xceg\x85\xb9\xce\xeb\xc2\\\xe7S\xc3\\\xe7" +
	"\xe3\xc3\\\xe7ea\x80\x90\x11I\xd6\xcc\xa0gx:" +
	"=k\xa7\xd1sZ\x1d=\xa7W\xd3\xf3r\xfe\xbc\xa2" +
	"\xee\xf3\x0a3\xbdy\xbf|\x96\xa6\xe53\\8\xb71" +
	"\xf4)\x99\xb4\xf8\xeb\xb9\xfc\xcd\x0b\x0aP\x1c^\xa2\xd5" +
	"\xa7\xce\xa2iB\x9f\xce\x8a\xbc\xa47Kg\x05\xfd\x89" +
	"\xe5J%b\xe9Fw\xd5\x1aCI:H9\x1b\xd4" +
	"\x17!\x89\xfc\xach\xda\x9eJ&u\xc3R\xa3U\x11" +
	"\xc5R\x97\xebi\xa1\x1b\x8a\xe8\x93J\x1f\xc0r\x81\xee" +
	"\xdfRe\xda\xce\xa6\x09\x18$\"W\x02\xe9\x1f\xe4\xdd" +
	"\xfc\xc7\xcf\xeb%oW\xccW\xea\xdc8\x02Y\xca_" +
	"\xe0?\xb2\xaa%\xe3\x8a\xa5\x92\xa0\x8b\xfc\xe5#\xf7\x93" +
	"Y,\xd2\xebV\x99\x96\xa1*\xdaB\xdd\x89\x06f\xce" +
	"Cl\x03\x90\x8bD\x94G\x0bh\xc7\xd3\x94h\xceQ" +
	"\xe2\xf1\x0e%\x82+\x91y\x15\xcf9\xc4\xdb\x9c\xe8\xd4" +
	"\x0d\x8d/P\xd5\xa9\x1b\x8d\xf1x\xda;\x9dm\xf2\xe5" +
	"i\xa9\xc5\x05\x0c(\xf1\xb8\x07\x9b\xday\xa5\xe3\xe7}" +
	"\xf3\xc8\xc3\x00\xd0\x80\x0cCr\x9e\x80\xfe\x97\x0c'\xca" +
	"\x03\x10\x11i:\"\xed\x1a\x8b\xbc\xfe \x89\xe2\xach" +
	"\x93\xc3]\xcci_\xec)\x96#N4\xbay\x94\xcc" +
	"d\xf3\x0c\xdb\xec9\xed\x8b\xe7\xe8\x89\xce\x18\xe0r9" +
	"O\xcc\x07\xc8\x14\xaa\xe8\xa6\xe9\x8c\xcd\x04\x81\xe5\x07\xea" +
	"#\x86\xaaXj\x03\xf2U\x8e\xce\xbfc\xc9\x93O?" +
	"\xf0\xa0\xe3\xed\xcf\xca\xe9<\xbe\x00\x9c\xd6k\xe6\xe0R" +
	"\xbbM5\xf5x\xca\x8a\x81\xa8'\xe4\x0a\xce\xd2\xad<" +
	"\xd0-\xd5%\x86KA\x90\x06b\x001\x93\x81\xa2\xdb" +
	"\x84a\xa7\xc3 \xb0S\x01\x142\xcd>t\xbb\x96\xec" +
	"5\xda\xec\xb1\x00\x8a\x99f#\xba\xbd9v\xb8\x12\x04" +
	"v \x80y\x99\x0a\x03\xdd\xbe\x0d\xdbGk\xde\x17\xc0" +
	"\xfcL:\x8fn\xe2\xcf\xee\\\x00\x02\xdb\x11\xc0\x82L" +
	"\x87\x13\xddv\x0e\xdb\xdc\x06\x02\xdb\x18\xc0@\xa6K\x80" +
	".dY\x8a\xe6i\x01\x1c\x90\xe9[\xa0\xdbZa\x0a" +
	"\x8d-\x09\xd8\x86O\x1c\x0d\x182\x94\xc4r\xb5\xc1\x0d" +
	"f\x0d\x8e\xb55`\x88~,j@\xdbLup\x12" +
	"\x8e\x1c\xdb\x0d8\x80F\x03\xdaZ\x1a\x9e\xce\x98\x8bp" +
	"\xfe\x17\xa1\xe9,\x95\xa9ON\x7f~\xd7\xb3\xf7\x1e\xf0" +
	"\xab/\xcb\xa4\xe2>c\xea\x1dy\xdb|\xae1\xc3\x0a" +
	"M\x0f\xe3\x99&Rn|\xf6vU\x00\xad\x1c\xf0\x84" +
	"\x08\xb7\xd1\x8anY\xcbj\x96\x82\xc0&\x11\x1e\xdc\xf6" +
	"\x13\xba\x15<+\xdb\x04\x02\x1b\x16\xb0]_G\xce\x92" +
	"K\xc7Y\x19\xa3\x8b\x95xJ5\xa1\x01[\xb1\x97Q" +
	"\xbb\xc7\x8d\xc4uS5-\x0f\xbc\x8d\x96\xeb\x9cs\xa6" +
	"\x1c\xc5B?\xd9\\\xdf.6\x0d\x7fJj\xf9qy" +
	"\x98fN\x98\x1e8\x13 \x14Ub\xf1\xee\xfa.=" +
	"e\xc4\xbb/\"\x9e\xb8\xba:k\xcf\xb3\xbd=\xaf_" +
	"\xe3LB\xe6\xefx\xe6\x0a\xab\xae`\\XU\xb4\x86" +
	"\xce\x8e\xaay\xfd\xc6\xfe\xc6\xb8U\xaf\x1a\x8b\xba\x93\xaa" +
	"\xef\x9c\xe5\xce9\xcb\x01\x02J4\x1a\xd0R\xf1~D" +
	"\xc5\x81^\xd1V\xef\x9cH\x1e\x909\xcf$\x02\xdfe" +
	"N8bn:_C\x87\x9c\"\xa2|\x85\x806/" +
	"B\xe6*\x16\xa0\xda\xbb\xe8X\xaf&\xa2s\x15+\xc7" +
	"\xc89B\xe3\"o3\x9f;6\xe6L\x1bs\xe5 " +
	"\x17\x91\x0dd\xd7\xd6\x8b\x83\x84\x7fRCq\xa6\xb6f" +
	"\xeb*\xbd\x92\xa8\x0c\xcf\xd8nU\x14\x06\x90\xffUD" +
	"\xf9\xdb\x02\x96\x09\xa7\xedt]\xd4S\xee\x15Ke\xe2" +
	"gv\x83S\x19m\xae\xf4\xca\xa5LI\xcd\xb6\xd0\xdb" +
	"o\x8b(o\x170h\xa9k\xadLq\xd8\x19\xd7\x15" +
	"\x0b\x07\x83\x80\x83\x01\x03\xb1\x84\x85\xf9 `>`\xb0" +
	"C\xd7\xe3\x88  \x02\x17c\x7f\xda\xc9\xef\x17x\x0a" +
	"\xbd\xfe\xa2D\x99w.\xc3\x0b\xe8N\xd7\xc2\x09\x9e\xee" +
	"\x0d\x12\xba\xb7\x12\x8cU\xf2\xe0\x19$\xb3;w\xe8t" +
	"\x13\x98\xaa\xabp\xb1\xe3\x0d3\x98'\x05T\x88(W" +
	"\xfb0O)\xbck\x08\x81\x95jwF\xce\xabI\xe1" +
	"x\x09\x08xI\xef\xac4G\x96\xe8\xba\xca\xb4\xa7\xcc" +
	"\x95\x95\xfa\xfd\x9e\xd5\x9dT\x9b\xa3\xbd\x8ar\xb1\xaf4" +
	"IL;;.#\xb73\x8bn\x06\xc3j(f\x8f" +
	"'\xdf\xee6Q\xd1\xbd\xecb#hlH\xa0\xbeS" +
	"7\xaeNPdt\xf2\xad\xb3]yZzM\x09S" +
	"\xd5:\xe2j\x8b\x1a\xd4:T\x83X\x16f\x0e\xd0t" +
	"\x09\x80\xdc \xa2\xbc\xd0'\xc0fz9WD\xb9U" +
	"@&\x08\x0e\xd6[\xe8\xe5|\x11\xe5E\x02\xa2\x81\x01" +
	"\x100\x00\x88\xb1\xccoI\xf7\xb7~\x8c\xda\x8d\x89\x99" +
	"\x18r~\xbe\xdcA\xaf\x1amJW\x88n\xb2\xdc\x0f" +
	"'7\x83\xd0\x13\x1c\xf4\x81x\xdf\xa0\xf7'\x1b\x18\xf4" +
	"\xf2\xb2t{\xe8\xfc\xd2\xf76\xd5\x0cf\xfb\xc0s\x14" +
	"J\xcc\x7f}p\x0eo\xe8\x85\x9bl\xc1\xa5+\xdcy" +
	"\xe9\xaeF\xb5\xd3\xb0Y\xc1M\xb6g\x05\xafp7\xde" +
	"\xc8+\xdcu\x1d\xbc\xc2\xed^\xc1+\xdc\xd4\x02^\xe1" +
	"\xaeZ\x0a\x80\x01\xa6\xd1\x8f\x01,F/\x072\xb5\x0d" +
	"\x00\x071\x85~\x0cf\xcb\x0cb\x17\x89h\xca\x1c%" +
	"\x01\xc1&S\x0b\xdb\xb1H\x97\x1ai\x8a4AP1" +
	"\xac.;\x964\xe3\xcdI3\x0e\xf5s\xb4\xba\xc6\x16" +
	"\xc3\xd6b\x86\x1ei\x89\x19\x10\xd0#u\xb6\x96\x8c\xb5" +
	"\xb4$cM\x104\xb5\x85\x86\xbd\xbc3\x1ao25" +
	"\xde\x13\xa1\x99s\xb4\xe9\x0a\x88\x0b\x0d\xa2k2\xb5\x9a" +
	"0\x88\xf3\x0d[3\xe8\x8fp5Q\xa5V\xaa\xa6V" +
	"S\xbd\x100n/7\xd7$k\xaf\xadk\x02\xac\xb3" +
	"5\xbd+2_\x89\xce\x83\x90\xaa\x85\x9bz\x95\xb6\xbd" +
	"\xd3}\xa3\xbb\xcaI\xd8\xbd,\xc6\xe7Mf\xe7\xf2&" +
	"3=o\xb2>b\xae&\xa5\xbb6^\x1f\xa1*a" +
	"9\x16y\xe5C\xee\x82\xac\xefl H\xb8\xce\xb2\xc9" +
	"\xd9\xb9l2\xec\xb7\xc9t\xfci\xa9\xf4lr}\xba" +
	"}\x92\xd53\x09f\xfc^\xba\xd9\x16$7\x85A\xef" +
	"\x9a7\x0b\xe6b_\xf9n\x1f\xed\x83~\xe3\x8d\xdb\xf1" +
	"\xf1\xc9\xb8\xd2\x931?\x1b\"\x9b\xba\xc9KR\x82Q" +
	"\xd5\x8c`\x91w\xf1\x97\x16\xa8b~E]\xb3(\xa6" +
	"\xa1[D\xb9a1\xdb\x10\xda\xdb\x9dV\x8f#\xa1\xba" +
	"Jn\x08S+\xb9!\x8c\xaf\xe4\x86PV\xc9\x0da" +
	"X%@\xd04\x935\xf4\x08\xd3\xa3\x96\x1e\xd3\xe8Q" +
	"\xd7W\xfe?O\xb52\xf5\xb4S$\x8b\x91\x95^\xa8" +
	"s\xef\x93\xd0\xbd\xdd`\xcc\x00\x81\x0d\x0c\xd8\x09u-" +
	"\x9f\x09!>7\xa7\xab\xa6\x18\xd1\x1aO\x99s\x15\xd1" +
	"R\xb2\"]e.lVz\xd8\x0c\x92\x8b\xe8\xdd\x1a" +
	"p\x92\xaf\xb3]\x0d\xeb\xbbc`\xf5J\xf4\xb1O\xbf" +
	"\x99)p\xc4\x1cQ/\xff\x1c-0M_\xad\xba\xbd" +
	"\x17?\x83\x1b}\x0c\\\xaf\x0f\xf5}A\xfb\"\xc3G" +
	".g]\xe95M\x83\xf1\x98iy5\x9b\x1f\x8aC" +
	"\xcf\xbf\xffquB\xcdY*\x85\xbd\x94!\xa4&," +
	"\xa3;\xbb\x89qQ\xb9I\xce\x0a\xc7\xdf\x08\xe6N\xc0" +
	"W\x89\x9e\xa3S\xd2[\x92A\x12%/\x993\x02a" +
	"\x03g\xfb>\x17\xc9o[\xdf\xe8\x08\xdavfw'" +
	"\x01U\xb9\x98\x1b\x86{\x9b\x8b\xee\xad\x1e\xdb\xba\x0d\x04" +
	"\xb6\x85\xf2\x1b\xf7+\x05t\xef\xaf\xd9F\xaa]\xbb\x03" +
	"(dn\xee\xd1\xfd\xb4\x83ia\x10\x98\x12@1s" +
	"\x1f\x8e_\x82\xf4\x9d\xe65\x94\x175\x070/\xf3E" +
	"\x14\xba\x1ff\xb1Y\x87@`\xb3\x02\xf6\x9at\xdf\x15" +
	"\xdd\xc3!\x95\xc5.D\xd0mB7`\x88\xbfk\xc0" +
	"z\x07\xad\x0d\x94)8\x9d[!\xbbu\xcb\xbb\x09\x94" +
	"\xc5z\x193\\H\x9f\xacWT\xef\xcf,\xbf\xa0$" +
	"\xbe\x7f\x93Y\xd3\xbb;\x9dU\xe8\xa6\xfdmS<\xc4" +
	"%F\xee\xea\xcb\xdc\xe7\xde\xef\xf8\xdc\xdd\x8e\xcf\xbd\xd3" +
	"\xf1\xb9;fr\x9f\xbbe6O>z*y\xf2\xb1" +
	"n\x01O>\xba;x\xf2\x91r\x92\x8fU\x0bx\xf2" +
	"\xc13\x92\xc1,F\xc5q!SF\x02\xe0\x10\xb6\x84" +
	"\xfe\x1a\xca\xe4\x15\x00AK\x8b%\x82\x96\xb2zy\xd0" +
	"\xd2\x94\xb5\xf5IC\x8d\xc4\x92\xeb\x97\xc7\xf5\x0eC\x89" +
	"\x06\xd7\xc4\x12Q\xdbL%\xba\xf4\x94a:\xda\xd0S" +
	"QE\xd3!\x90JX\xb6\xa1\xc6\xbbRZ,J#" +
	"J\xccH\x1a\xaa\xc9\xa9V+I\x9d\xfe\x02\xd14\x03" +
	"\x11=,\xea\xb5\x01\xd5\xaa\xb6\xa3\xea\x9a\xa4\x1eKX" +
	"\x10\\\xa4j\xc9\x0b\xeb0\xe7\xca?\xc3\x9ee\x86(" +
	" \x9f\x87a\x06\xce\x15\x88\"+\xab\xdc \xe3D\xec" +
	"\x1c\xf5\x8a\xbf\xa5\xac)k\xe7\xe8\xa9\x84E)i\xba" +
	"\xe0<\xbf\x84:\xbbe\x9e\xd7O\xb6\xc5[\xa9A\xca" +
	"\x92Zy\xcb\x96\xef\x04\x91)T\xb9]'\xa2\xdc\xe5" +
	"\x8bg\xb16\x00\xb9KD\xf9)\x01\x91\xea\x0eD\xf6" +
	"\xc46\x00\xf9)\x11\xe5\xbf\x08\xc8D,F\xca\x9c\x8f" +
	">\x03 ?/\xa2\xfc\x86\x80\x01SM\xa6\xc3\x0f0" +
	"\xbc\x04\xa7\xd8N\xdf\xa0E\x01L~\xbe\xee\xb2\xb3\xaa" +
	"\xd3\xa90W\xc6\x92\x0bc\x09\x15\xcdE\xfa|b\x80" +
	"\x06\x8a \xa0\xe8\x1b\x13\xcc+\x0d]\xe3\xa3\xc6\"}" +
	"\xaeb\xa1B4\xf9\"\xc2\x05u\xd8r\xb5\xcd/\xfe" +
	"\xfe\xa3\xbf,8\xc3\xc9\x97i,\xcd\xd5G\x0a\xfb\xfa" +
	"H\xc4\xde\xec\x93}H5\x0c\xdd\xe8\xab\x0c\xee\xd5<" +
	"\xcav+\xbd\xda\xe5A\x92\x14\x81gxf\x8b;+" +
	"\xd3\xb7\xcc\xbf\xf6.\xae\xf7\xaf\x00\x90\x7f)\xa2\xfc[" +
	"_\x82|\x90\"\xe0\xafE\x94\x9f\xf7]\\\x1f#\x94" +
	"\xfdED\xf9U\xdf\xc5\xf5K\xb3=D\xb1|,\xc6" +
	"|D\xf6\x1a\x89\xe2U\x11\xe5w\xfb\xefb\xc5\xccE" +
	"\x86\x920\x93\x10\xd4M5\xeaf\xa6\xe7\xbc{\xbd\xd8" +
	"~\xdcy\x16\xac\xe7\x95\x82\xb9\xce)\xdb\xad\xcfUB" +
	"\x1c\x9f<\xaay\xdf\xbc\xe1\x1e\xdbu<\xe8z\x9e " +
	"\xb9\x9et\x98w?+\xf5\xda\xfd[\x17\x80\xc06S" +
	"\x98w?oE\xf7[(\xb6\xee\x1e7\xcc\xbb\xdf\xbe" +
	"\xa1\xfbY\x18\xd3V\x80\xc0T\x0a\xf3\xeeg}\xe8~" +
	"n\xcb\x96\xb4\x81\xc0d\x0a\xf3\xeeg=\xe8~(\xcc" +
	"\x9a69a\xfe\xec\xbe\xbfke\x99\xa0\x1f0\x1b\xad" +
	"\x06\x9f%\x05U\xe7\x85\xafk\xdf@\x1ar.\xd00" +
	"\xedR/\xf0\xd2\xe0\xecvf\xbas\xfb\xc5\xd8v?" +
	"\x1crU\xb6\xe1\\\xd5C\xb9g\xe8\x17\xf6\x81\xca\xe7" +
	"\x88I9\xf3\xd4\x8b\xbe6\xb9\xd0\x1c&W\xa7\xfa\"" +
	"\x84\x8fn\xd8\xafw0&\x17\xa1\xff[\xef\x11m\xde" +
	"w\xcblD\xd8\xcb\xee\xd9\xb0\xb0\xef3`\xd6a\xbb" +
	"\xf9\x02`4\xc4\x13\xf9P\x13U\x04\xb6\x9b\"\xf2\xcf" +
	"|ru(\x1a|z\x9cE\xde\xf0\x0a\x11\xe5\xb9\x02" +
	"y\x0d\x8bN\xea\x89\xce_Z\x0c\x05\x0c\xc6\x12\x9d:" +
	"2o\x1b\xfd\xd7\x83\xd97\xc89>Q\xd8\xe3\xbb@" +
	"\xe6(j\xec\xb4P5\x9c9A=\x91\xa38tK" +
	"u5\xc4{i^\x17\xd4\xfd7\x10t\xff+\x81\xd5" +
	"\xec\x01\x81M%\xf7\xe1\xfe\xaf\x00\xba_&\xb3\xb17" +
	"\x82\xc0F\x04l\xf7\xcb\x05t?]\x08\x9a\xaaE\xe6" +
	"\xeb\xf6\xe8\xa0\xde\xe9\xd2\x9d\xa7\xf5\xf6u\xe9\x92\x0eU" +
	"\xff\x1f\x00\x00\xff\xff\xbd\x1d\xc7\xc8"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a01d3ae410eb4518,
		Nodes: []uint64{
			0x804cca489405d451,
			0x85af7fea06d0820c,
			0x85ba7385f313fe19,
			0x8671dec53083e351,
			0x8976146f144fa050,
			0x8b0a787e82cd94bb,
			0x8cc364dee8f693b8,
			0x8e78986bc45d7dcd,
			0x8ef30778310c94cc,
			0x8f08162dbd7e5068,
			0x8fd77002ae8a97a1,
			0x916880859435c6e8,
			0x95064806dc018bfe,
			0x95887677293b5682,
			0x9c3d3448d73eeae9,
			0x9d7d1f83dda3e6db,
			0x9ebadb578b79fa06,
			0x9f35030ba55fed78,
			0xa418c26cc59929d9,
			0xa7769f40fe6e6de8,
			0xaa8cfcdc401d5fdd,
			0xab06444b30722e01,
			0xb0496f3d284f4a13,
			0xb466cacf63ec03c2,
			0xb48982ac9bcd5d11,
			0xb4c346906ee84815,
			0xb5dd785107c358ca,
			0xb9ec27f476022c1b,
			0xc2e0dec0a6ea94fb,
			0xc3238163cae880df,
			0xc48e24c968a234db,
			0xc4a1ec6280be841c,
			0xc5f12df0a2a52744,
			0xc5fd13a53ae6d46a,
			0xc6d2329c05f7e208,
			0xc781edeab8160cb7,
			0xc8caacd1cd5da434,
			0xcb329eb01b0fa313,
			0xcba0220cda41869e,
			0xcd0eadd9a1a66ed6,
			0xcd95f79174b0eab0,
			0xce2cc4225c956634,
			0xce396869eede9f10,
			0xcfaa8d2601750547,
			0xd085b9baf390bec5,
			0xd2a02e856c28d4ba,
			0xd36b1e9c2929e6e4,
			0xd3780ae416347aee,
			0xd61ba043f14fe175,
			0xd7a67fec5f22e5a0,
			0xd9f867b0a2a15d7f,
			0xdb7bfcfe4d45ff53,
			0xdd5b75b5bc711766,
			0xdf705ef1e0b7d506,
			0xe0a71ff36670f715,
			0xe1f480ef979784b2,
			0xe246d49c91fa330a,
			0xe30c466e5bc2735c,
			0xe31f26eed9fb36a9,
			0xe35760b4db5ab564,
			0xe49e838ea9c34b40,
			0xe64112993dc4d4e0,
			0xea3f0519d272fdd1,
			0xeba81ca9f46690b8,
			0xedee5faa03af6a1e,
			0xefefafebc8ae5534,
			0xeff8f923b1853525,
			0xf1c1ccf59bc6964f,
			0xf44980b23013003b,
			0xf635fdd1f05960f0,
			0xf7dfe7147d09b732,
			0xf8aa5b6fe2496fee,
			0xfa8540d5d8065df1,
			0xfb2eddb58f90f7aa,
			0xfb36d2e966556db0,
			0xfca3f0f431b64506,
			0xfe7d08d4352b0c5f,
			0xff6bcf0c6b23c916,
		},
		Compressed: true,
	})
}
