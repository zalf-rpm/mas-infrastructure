// Code generated by capnpc-go. DO NOT EDIT.

package climate

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type GCM uint16

// GCM_TypeID is the unique identifier for the type GCM.
const GCM_TypeID = 0xce396869eede9f10

// Values of GCM.
const (
	GCM_cccmaCanEsm2   GCM = 0
	GCM_ichecEcEarth   GCM = 1
	GCM_ipslIpslCm5AMr GCM = 2
	GCM_mirocMiroc5    GCM = 3
	GCM_mpiMMpiEsmLr   GCM = 4
	GCM_gfdlEsm4       GCM = 5
	GCM_ipslCm6aLr     GCM = 6
	GCM_mpiEsm12Hr     GCM = 7
	GCM_mriEsm20       GCM = 8
	GCM_ukesm10Ll      GCM = 9
	GCM_gswp3W5E5      GCM = 10
	GCM_mohcHadGem2Es  GCM = 11
)

// String returns the enum's constant name.
func (c GCM) String() string {
	switch c {
	case GCM_cccmaCanEsm2:
		return "cccmaCanEsm2"
	case GCM_ichecEcEarth:
		return "ichecEcEarth"
	case GCM_ipslIpslCm5AMr:
		return "ipslIpslCm5AMr"
	case GCM_mirocMiroc5:
		return "mirocMiroc5"
	case GCM_mpiMMpiEsmLr:
		return "mpiMMpiEsmLr"
	case GCM_gfdlEsm4:
		return "gfdlEsm4"
	case GCM_ipslCm6aLr:
		return "ipslCm6aLr"
	case GCM_mpiEsm12Hr:
		return "mpiEsm12Hr"
	case GCM_mriEsm20:
		return "mriEsm20"
	case GCM_ukesm10Ll:
		return "ukesm10Ll"
	case GCM_gswp3W5E5:
		return "gswp3W5E5"
	case GCM_mohcHadGem2Es:
		return "mohcHadGem2Es"

	default:
		return ""
	}
}

// GCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GCMFromString(c string) GCM {
	switch c {
	case "cccmaCanEsm2":
		return GCM_cccmaCanEsm2
	case "ichecEcEarth":
		return GCM_ichecEcEarth
	case "ipslIpslCm5AMr":
		return GCM_ipslIpslCm5AMr
	case "mirocMiroc5":
		return GCM_mirocMiroc5
	case "mpiMMpiEsmLr":
		return GCM_mpiMMpiEsmLr
	case "gfdlEsm4":
		return GCM_gfdlEsm4
	case "ipslCm6aLr":
		return GCM_ipslCm6aLr
	case "mpiEsm12Hr":
		return GCM_mpiEsm12Hr
	case "mriEsm20":
		return GCM_mriEsm20
	case "ukesm10Ll":
		return GCM_ukesm10Ll
	case "gswp3W5E5":
		return GCM_gswp3W5E5
	case "mohcHadGem2Es":
		return GCM_mohcHadGem2Es

	default:
		return 0
	}
}

type GCM_List = capnp.EnumList[GCM]

func NewGCM_List(s *capnp.Segment, sz int32) (GCM_List, error) {
	return capnp.NewEnumList[GCM](s, sz)
}

type RCM uint16

// RCM_TypeID is the unique identifier for the type RCM.
const RCM_TypeID = 0x8671dec53083e351

// Values of RCM.
const (
	RCM_clmcomCclm4817    RCM = 0
	RCM_gericsRemo2015    RCM = 1
	RCM_knmiRacmo22E      RCM = 2
	RCM_smhiRca4          RCM = 3
	RCM_clmcomBtuCclm4817 RCM = 4
	RCM_mpiCscRemo2009    RCM = 5
	RCM_uhohWrf361H       RCM = 6
)

// String returns the enum's constant name.
func (c RCM) String() string {
	switch c {
	case RCM_clmcomCclm4817:
		return "clmcomCclm4817"
	case RCM_gericsRemo2015:
		return "gericsRemo2015"
	case RCM_knmiRacmo22E:
		return "knmiRacmo22E"
	case RCM_smhiRca4:
		return "smhiRca4"
	case RCM_clmcomBtuCclm4817:
		return "clmcomBtuCclm4817"
	case RCM_mpiCscRemo2009:
		return "mpiCscRemo2009"
	case RCM_uhohWrf361H:
		return "uhohWrf361H"

	default:
		return ""
	}
}

// RCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCMFromString(c string) RCM {
	switch c {
	case "clmcomCclm4817":
		return RCM_clmcomCclm4817
	case "gericsRemo2015":
		return RCM_gericsRemo2015
	case "knmiRacmo22E":
		return RCM_knmiRacmo22E
	case "smhiRca4":
		return RCM_smhiRca4
	case "clmcomBtuCclm4817":
		return RCM_clmcomBtuCclm4817
	case "mpiCscRemo2009":
		return RCM_mpiCscRemo2009
	case "uhohWrf361H":
		return RCM_uhohWrf361H

	default:
		return 0
	}
}

type RCM_List = capnp.EnumList[RCM]

func NewRCM_List(s *capnp.Segment, sz int32) (RCM_List, error) {
	return capnp.NewEnumList[RCM](s, sz)
}

type SSP uint16

// SSP_TypeID is the unique identifier for the type SSP.
const SSP_TypeID = 0xd3780ae416347aee

// Values of SSP.
const (
	SSP_ssp1 SSP = 0
	SSP_ssp2 SSP = 1
	SSP_ssp3 SSP = 2
	SSP_ssp4 SSP = 3
	SSP_ssp5 SSP = 4
)

// String returns the enum's constant name.
func (c SSP) String() string {
	switch c {
	case SSP_ssp1:
		return "ssp1"
	case SSP_ssp2:
		return "ssp2"
	case SSP_ssp3:
		return "ssp3"
	case SSP_ssp4:
		return "ssp4"
	case SSP_ssp5:
		return "ssp5"

	default:
		return ""
	}
}

// SSPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SSPFromString(c string) SSP {
	switch c {
	case "ssp1":
		return SSP_ssp1
	case "ssp2":
		return SSP_ssp2
	case "ssp3":
		return SSP_ssp3
	case "ssp4":
		return SSP_ssp4
	case "ssp5":
		return SSP_ssp5

	default:
		return 0
	}
}

type SSP_List = capnp.EnumList[SSP]

func NewSSP_List(s *capnp.Segment, sz int32) (SSP_List, error) {
	return capnp.NewEnumList[SSP](s, sz)
}

type RCP uint16

// RCP_TypeID is the unique identifier for the type RCP.
const RCP_TypeID = 0x8ef30778310c94cc

// Values of RCP.
const (
	RCP_rcp19 RCP = 0
	RCP_rcp26 RCP = 1
	RCP_rcp34 RCP = 2
	RCP_rcp45 RCP = 3
	RCP_rcp60 RCP = 4
	RCP_rcp70 RCP = 5
	RCP_rcp85 RCP = 6
)

// String returns the enum's constant name.
func (c RCP) String() string {
	switch c {
	case RCP_rcp19:
		return "rcp19"
	case RCP_rcp26:
		return "rcp26"
	case RCP_rcp34:
		return "rcp34"
	case RCP_rcp45:
		return "rcp45"
	case RCP_rcp60:
		return "rcp60"
	case RCP_rcp70:
		return "rcp70"
	case RCP_rcp85:
		return "rcp85"

	default:
		return ""
	}
}

// RCPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCPFromString(c string) RCP {
	switch c {
	case "rcp19":
		return RCP_rcp19
	case "rcp26":
		return RCP_rcp26
	case "rcp34":
		return RCP_rcp34
	case "rcp45":
		return RCP_rcp45
	case "rcp60":
		return RCP_rcp60
	case "rcp70":
		return RCP_rcp70
	case "rcp85":
		return RCP_rcp85

	default:
		return 0
	}
}

type RCP_List = capnp.EnumList[RCP]

func NewRCP_List(s *capnp.Segment, sz int32) (RCP_List, error) {
	return capnp.NewEnumList[RCP](s, sz)
}

type EnsembleMember capnp.Struct

// EnsembleMember_TypeID is the unique identifier for the type EnsembleMember.
const EnsembleMember_TypeID = 0xc8caacd1cd5da434

func NewEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember(st), err
}

func NewRootEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember(st), err
}

func ReadRootEnsembleMember(msg *capnp.Message) (EnsembleMember, error) {
	root, err := msg.Root()
	return EnsembleMember(root.Struct()), err
}

func (s EnsembleMember) String() string {
	str, _ := text.Marshal(0xc8caacd1cd5da434, capnp.Struct(s))
	return str
}

func (s EnsembleMember) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnsembleMember) DecodeFromPtr(p capnp.Ptr) EnsembleMember {
	return EnsembleMember(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnsembleMember) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnsembleMember) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnsembleMember) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnsembleMember) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnsembleMember) R() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s EnsembleMember) SetR(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s EnsembleMember) I() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s EnsembleMember) SetI(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s EnsembleMember) P() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s EnsembleMember) SetP(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s EnsembleMember) F() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s EnsembleMember) SetF(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

// EnsembleMember_List is a list of EnsembleMember.
type EnsembleMember_List = capnp.StructList[EnsembleMember]

// NewEnsembleMember creates a new list of EnsembleMember.
func NewEnsembleMember_List(s *capnp.Segment, sz int32) (EnsembleMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EnsembleMember](l), err
}

// EnsembleMember_Future is a wrapper for a EnsembleMember promised by a client call.
type EnsembleMember_Future struct{ *capnp.Future }

func (f EnsembleMember_Future) Struct() (EnsembleMember, error) {
	p, err := f.Future.Ptr()
	return EnsembleMember(p.Struct()), err
}

type Metadata capnp.Struct

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0xfb36d2e966556db0

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.Root()
	return Metadata(root.Struct()), err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0xfb36d2e966556db0, capnp.Struct(s))
	return str
}

func (s Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata) DecodeFromPtr(p capnp.Ptr) Metadata {
	return Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata) Entries() (Metadata_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata_Entry_List(p.List()), err
}

func (s Metadata) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata) SetEntries(v Metadata_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Metadata_Entry_List, preferring placement in s's segment.
func (s Metadata) NewEntries(n int32) (Metadata_Entry_List, error) {
	l, err := NewMetadata_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Metadata_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Metadata) Info() Metadata_Information {
	p, _ := capnp.Struct(s).Ptr(1)
	return Metadata_Information(p.Interface().Client())
}

func (s Metadata) HasInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Metadata) SetInfo(v Metadata_Information) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Metadata_List is a list of Metadata.
type Metadata_List = capnp.StructList[Metadata]

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Metadata](l), err
}

// Metadata_Future is a wrapper for a Metadata promised by a client call.
type Metadata_Future struct{ *capnp.Future }

func (f Metadata_Future) Struct() (Metadata, error) {
	p, err := f.Future.Ptr()
	return Metadata(p.Struct()), err
}
func (p Metadata_Future) Info() Metadata_Information {
	return Metadata_Information(p.Future.Field(1, nil).Client())
}

type Metadata_Supported capnp.Client

// Metadata_Supported_TypeID is the unique identifier for the type Metadata_Supported.
const Metadata_Supported_TypeID = 0xab06444b30722e01

func (c Metadata_Supported) Categories(ctx context.Context, params func(Metadata_Supported_categories_Params) error) (Metadata_Supported_categories_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_categories_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Supported_categories_Results_Future{Future: ans.Future()}, release

}

func (c Metadata_Supported) SupportedValues(ctx context.Context, params func(Metadata_Supported_supportedValues_Params) error) (Metadata_Supported_supportedValues_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_supportedValues_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Supported_supportedValues_Results_Future{Future: ans.Future()}, release

}

func (c Metadata_Supported) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metadata_Supported) String() string {
	return "Metadata_Supported(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metadata_Supported) AddRef() Metadata_Supported {
	return Metadata_Supported(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metadata_Supported) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metadata_Supported) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metadata_Supported) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metadata_Supported) DecodeFromPtr(p capnp.Ptr) Metadata_Supported {
	return Metadata_Supported(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metadata_Supported) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metadata_Supported) IsSame(other Metadata_Supported) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metadata_Supported) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metadata_Supported) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Metadata_Supported_Server is a Metadata_Supported with a local implementation.
type Metadata_Supported_Server interface {
	Categories(context.Context, Metadata_Supported_categories) error

	SupportedValues(context.Context, Metadata_Supported_supportedValues) error
}

// Metadata_Supported_NewServer creates a new Server from an implementation of Metadata_Supported_Server.
func Metadata_Supported_NewServer(s Metadata_Supported_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Supported_Methods(nil, s), s, c)
}

// Metadata_Supported_ServerToClient creates a new Client from an implementation of Metadata_Supported_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Supported_ServerToClient(s Metadata_Supported_Server) Metadata_Supported {
	return Metadata_Supported(capnp.NewClient(Metadata_Supported_NewServer(s)))
}

// Metadata_Supported_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Supported_Methods(methods []server.Method, s Metadata_Supported_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Categories(ctx, Metadata_Supported_categories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedValues(ctx, Metadata_Supported_supportedValues{call})
		},
	})

	return methods
}

// Metadata_Supported_categories holds the state for a server call to Metadata_Supported.categories.
// See server.Call for documentation.
type Metadata_Supported_categories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_categories) Args() Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_categories) AllocResults() (Metadata_Supported_categories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(r), err
}

// Metadata_Supported_supportedValues holds the state for a server call to Metadata_Supported.supportedValues.
// See server.Call for documentation.
type Metadata_Supported_supportedValues struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_supportedValues) Args() Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_supportedValues) AllocResults() (Metadata_Supported_supportedValues_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(r), err
}

// Metadata_Supported_List is a list of Metadata_Supported.
type Metadata_Supported_List = capnp.CapList[Metadata_Supported]

// NewMetadata_Supported creates a new list of Metadata_Supported.
func NewMetadata_Supported_List(s *capnp.Segment, sz int32) (Metadata_Supported_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metadata_Supported](l), err
}

type Metadata_Supported_categories_Params capnp.Struct

// Metadata_Supported_categories_Params_TypeID is the unique identifier for the type Metadata_Supported_categories_Params.
const Metadata_Supported_categories_Params_TypeID = 0x95887677293b5682

func NewMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params(st), err
}

func NewRootMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params(st), err
}

func ReadRootMetadata_Supported_categories_Params(msg *capnp.Message) (Metadata_Supported_categories_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Params(root.Struct()), err
}

func (s Metadata_Supported_categories_Params) String() string {
	str, _ := text.Marshal(0x95887677293b5682, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_categories_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_categories_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_categories_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_categories_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_categories_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_categories_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metadata_Supported_categories_Params_List is a list of Metadata_Supported_categories_Params.
type Metadata_Supported_categories_Params_List = capnp.StructList[Metadata_Supported_categories_Params]

// NewMetadata_Supported_categories_Params creates a new list of Metadata_Supported_categories_Params.
func NewMetadata_Supported_categories_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metadata_Supported_categories_Params](l), err
}

// Metadata_Supported_categories_Params_Future is a wrapper for a Metadata_Supported_categories_Params promised by a client call.
type Metadata_Supported_categories_Params_Future struct{ *capnp.Future }

func (f Metadata_Supported_categories_Params_Future) Struct() (Metadata_Supported_categories_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_categories_Params(p.Struct()), err
}

type Metadata_Supported_categories_Results capnp.Struct

// Metadata_Supported_categories_Results_TypeID is the unique identifier for the type Metadata_Supported_categories_Results.
const Metadata_Supported_categories_Results_TypeID = 0xe49e838ea9c34b40

func NewMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(st), err
}

func NewRootMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(st), err
}

func ReadRootMetadata_Supported_categories_Results(msg *capnp.Message) (Metadata_Supported_categories_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Results(root.Struct()), err
}

func (s Metadata_Supported_categories_Results) String() string {
	str, _ := text.Marshal(0xe49e838ea9c34b40, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_categories_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_categories_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_categories_Results {
	return Metadata_Supported_categories_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_categories_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_categories_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_categories_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_categories_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_categories_Results) Types() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Metadata_Supported_categories_Results) HasTypes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_categories_Results) SetTypes(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_categories_Results) NewTypes(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Supported_categories_Results_List is a list of Metadata_Supported_categories_Results.
type Metadata_Supported_categories_Results_List = capnp.StructList[Metadata_Supported_categories_Results]

// NewMetadata_Supported_categories_Results creates a new list of Metadata_Supported_categories_Results.
func NewMetadata_Supported_categories_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_categories_Results](l), err
}

// Metadata_Supported_categories_Results_Future is a wrapper for a Metadata_Supported_categories_Results promised by a client call.
type Metadata_Supported_categories_Results_Future struct{ *capnp.Future }

func (f Metadata_Supported_categories_Results_Future) Struct() (Metadata_Supported_categories_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_categories_Results(p.Struct()), err
}

type Metadata_Supported_supportedValues_Params capnp.Struct

// Metadata_Supported_supportedValues_Params_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Params.
const Metadata_Supported_supportedValues_Params_TypeID = 0xc6d2329c05f7e208

func NewMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params(st), err
}

func NewRootMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params(st), err
}

func ReadRootMetadata_Supported_supportedValues_Params(msg *capnp.Message) (Metadata_Supported_supportedValues_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Params(root.Struct()), err
}

func (s Metadata_Supported_supportedValues_Params) String() string {
	str, _ := text.Marshal(0xc6d2329c05f7e208, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_supportedValues_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_supportedValues_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_supportedValues_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_supportedValues_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_supportedValues_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_supportedValues_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_supportedValues_Params) TypeId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Supported_supportedValues_Params) HasTypeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Params) TypeIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Supported_supportedValues_Params) SetTypeId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Metadata_Supported_supportedValues_Params_List is a list of Metadata_Supported_supportedValues_Params.
type Metadata_Supported_supportedValues_Params_List = capnp.StructList[Metadata_Supported_supportedValues_Params]

// NewMetadata_Supported_supportedValues_Params creates a new list of Metadata_Supported_supportedValues_Params.
func NewMetadata_Supported_supportedValues_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_supportedValues_Params](l), err
}

// Metadata_Supported_supportedValues_Params_Future is a wrapper for a Metadata_Supported_supportedValues_Params promised by a client call.
type Metadata_Supported_supportedValues_Params_Future struct{ *capnp.Future }

func (f Metadata_Supported_supportedValues_Params_Future) Struct() (Metadata_Supported_supportedValues_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_supportedValues_Params(p.Struct()), err
}

type Metadata_Supported_supportedValues_Results capnp.Struct

// Metadata_Supported_supportedValues_Results_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Results.
const Metadata_Supported_supportedValues_Results_TypeID = 0xe0a71ff36670f715

func NewMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(st), err
}

func NewRootMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(st), err
}

func ReadRootMetadata_Supported_supportedValues_Results(msg *capnp.Message) (Metadata_Supported_supportedValues_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Results(root.Struct()), err
}

func (s Metadata_Supported_supportedValues_Results) String() string {
	str, _ := text.Marshal(0xe0a71ff36670f715, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_supportedValues_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_supportedValues_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_supportedValues_Results {
	return Metadata_Supported_supportedValues_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_supportedValues_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_supportedValues_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_supportedValues_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_supportedValues_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_supportedValues_Results) Values() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Metadata_Supported_supportedValues_Results) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Results) SetValues(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_supportedValues_Results) NewValues(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Supported_supportedValues_Results_List is a list of Metadata_Supported_supportedValues_Results.
type Metadata_Supported_supportedValues_Results_List = capnp.StructList[Metadata_Supported_supportedValues_Results]

// NewMetadata_Supported_supportedValues_Results creates a new list of Metadata_Supported_supportedValues_Results.
func NewMetadata_Supported_supportedValues_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_supportedValues_Results](l), err
}

// Metadata_Supported_supportedValues_Results_Future is a wrapper for a Metadata_Supported_supportedValues_Results promised by a client call.
type Metadata_Supported_supportedValues_Results_Future struct{ *capnp.Future }

func (f Metadata_Supported_supportedValues_Results_Future) Struct() (Metadata_Supported_supportedValues_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_supportedValues_Results(p.Struct()), err
}

type Metadata_Value capnp.Struct
type Metadata_Value_Which uint16

const (
	Metadata_Value_Which_text  Metadata_Value_Which = 0
	Metadata_Value_Which_float Metadata_Value_Which = 1
	Metadata_Value_Which_int   Metadata_Value_Which = 2
	Metadata_Value_Which_bool  Metadata_Value_Which = 3
	Metadata_Value_Which_date  Metadata_Value_Which = 4
)

func (w Metadata_Value_Which) String() string {
	const s = "textfloatintbooldate"
	switch w {
	case Metadata_Value_Which_text:
		return s[0:4]
	case Metadata_Value_Which_float:
		return s[4:9]
	case Metadata_Value_Which_int:
		return s[9:12]
	case Metadata_Value_Which_bool:
		return s[12:16]
	case Metadata_Value_Which_date:
		return s[16:20]

	}
	return "Metadata_Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Value_TypeID is the unique identifier for the type Metadata_Value.
const Metadata_Value_TypeID = 0xc48e24c968a234db

func NewMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value(st), err
}

func NewRootMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value(st), err
}

func ReadRootMetadata_Value(msg *capnp.Message) (Metadata_Value, error) {
	root, err := msg.Root()
	return Metadata_Value(root.Struct()), err
}

func (s Metadata_Value) String() string {
	str, _ := text.Marshal(0xc48e24c968a234db, capnp.Struct(s))
	return str
}

func (s Metadata_Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Value) DecodeFromPtr(p capnp.Ptr) Metadata_Value {
	return Metadata_Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Metadata_Value) Which() Metadata_Value_Which {
	return Metadata_Value_Which(capnp.Struct(s).Uint16(0))
}
func (s Metadata_Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Value) Text() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != text")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Value) HasText() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Value) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Value) SetText(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata_Value) Float() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != float")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Metadata_Value) SetFloat(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Metadata_Value) Int() int64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != int")
	}
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Metadata_Value) SetInt(v int64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Metadata_Value) Bool() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != bool")
	}
	return capnp.Struct(s).Bit(64)
}

func (s Metadata_Value) SetBool(v bool) {
	capnp.Struct(s).SetUint16(0, 3)
	capnp.Struct(s).SetBit(64, v)
}

func (s Metadata_Value) Date() (common_date.Date, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != date")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s Metadata_Value) HasDate() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Value) SetDate(v common_date.Date) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Metadata_Value) NewDate() (common_date.Date, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Metadata_Value_List is a list of Metadata_Value.
type Metadata_Value_List = capnp.StructList[Metadata_Value]

// NewMetadata_Value creates a new list of Metadata_Value.
func NewMetadata_Value_List(s *capnp.Segment, sz int32) (Metadata_Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Value](l), err
}

// Metadata_Value_Future is a wrapper for a Metadata_Value promised by a client call.
type Metadata_Value_Future struct{ *capnp.Future }

func (f Metadata_Value_Future) Struct() (Metadata_Value, error) {
	p, err := f.Future.Ptr()
	return Metadata_Value(p.Struct()), err
}
func (p Metadata_Value_Future) Date() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Entry capnp.Struct
type Metadata_Entry_Which uint16

const (
	Metadata_Entry_Which_gcm         Metadata_Entry_Which = 0
	Metadata_Entry_Which_rcm         Metadata_Entry_Which = 1
	Metadata_Entry_Which_historical  Metadata_Entry_Which = 2
	Metadata_Entry_Which_rcp         Metadata_Entry_Which = 3
	Metadata_Entry_Which_ssp         Metadata_Entry_Which = 4
	Metadata_Entry_Which_ensMem      Metadata_Entry_Which = 5
	Metadata_Entry_Which_version     Metadata_Entry_Which = 6
	Metadata_Entry_Which_start       Metadata_Entry_Which = 7
	Metadata_Entry_Which_end         Metadata_Entry_Which = 8
	Metadata_Entry_Which_co2         Metadata_Entry_Which = 9
	Metadata_Entry_Which_picontrol   Metadata_Entry_Which = 10
	Metadata_Entry_Which_description Metadata_Entry_Which = 11
)

func (w Metadata_Entry_Which) String() string {
	const s = "gcmrcmhistoricalrcpsspensMemversionstartendco2picontroldescription"
	switch w {
	case Metadata_Entry_Which_gcm:
		return s[0:3]
	case Metadata_Entry_Which_rcm:
		return s[3:6]
	case Metadata_Entry_Which_historical:
		return s[6:16]
	case Metadata_Entry_Which_rcp:
		return s[16:19]
	case Metadata_Entry_Which_ssp:
		return s[19:22]
	case Metadata_Entry_Which_ensMem:
		return s[22:28]
	case Metadata_Entry_Which_version:
		return s[28:35]
	case Metadata_Entry_Which_start:
		return s[35:40]
	case Metadata_Entry_Which_end:
		return s[40:43]
	case Metadata_Entry_Which_co2:
		return s[43:46]
	case Metadata_Entry_Which_picontrol:
		return s[46:55]
	case Metadata_Entry_Which_description:
		return s[55:66]

	}
	return "Metadata_Entry_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Entry_TypeID is the unique identifier for the type Metadata_Entry.
const Metadata_Entry_TypeID = 0x85af7fea06d0820c

func NewMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry(st), err
}

func NewRootMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry(st), err
}

func ReadRootMetadata_Entry(msg *capnp.Message) (Metadata_Entry, error) {
	root, err := msg.Root()
	return Metadata_Entry(root.Struct()), err
}

func (s Metadata_Entry) String() string {
	str, _ := text.Marshal(0x85af7fea06d0820c, capnp.Struct(s))
	return str
}

func (s Metadata_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Entry) DecodeFromPtr(p capnp.Ptr) Metadata_Entry {
	return Metadata_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Metadata_Entry) Which() Metadata_Entry_Which {
	return Metadata_Entry_Which(capnp.Struct(s).Uint16(2))
}
func (s Metadata_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Entry) Gcm() GCM {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != gcm")
	}
	return GCM(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetGcm(v GCM) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Rcm() RCM {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != rcm")
	}
	return RCM(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetRcm(v RCM) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) SetHistorical() {
	capnp.Struct(s).SetUint16(2, 2)

}

func (s Metadata_Entry) Rcp() RCP {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != rcp")
	}
	return RCP(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetRcp(v RCP) {
	capnp.Struct(s).SetUint16(2, 3)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Ssp() SSP {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != ssp")
	}
	return SSP(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetSsp(v SSP) {
	capnp.Struct(s).SetUint16(2, 4)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) EnsMem() (EnsembleMember, error) {
	if capnp.Struct(s).Uint16(2) != 5 {
		panic("Which() != ensMem")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EnsembleMember(p.Struct()), err
}

func (s Metadata_Entry) HasEnsMem() bool {
	if capnp.Struct(s).Uint16(2) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetEnsMem(v EnsembleMember) error {
	capnp.Struct(s).SetUint16(2, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnsMem sets the ensMem field to a newly
// allocated EnsembleMember struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnsMem() (EnsembleMember, error) {
	capnp.Struct(s).SetUint16(2, 5)
	ss, err := NewEnsembleMember(capnp.Struct(s).Segment())
	if err != nil {
		return EnsembleMember{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) Version() (string, error) {
	if capnp.Struct(s).Uint16(2) != 6 {
		panic("Which() != version")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasVersion() bool {
	if capnp.Struct(s).Uint16(2) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetVersion(v string) error {
	capnp.Struct(s).SetUint16(2, 6)
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata_Entry) Start() (common_date.Date, error) {
	if capnp.Struct(s).Uint16(2) != 7 {
		panic("Which() != start")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s Metadata_Entry) HasStart() bool {
	if capnp.Struct(s).Uint16(2) != 7 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetStart(v common_date.Date) error {
	capnp.Struct(s).SetUint16(2, 7)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewStart() (common_date.Date, error) {
	capnp.Struct(s).SetUint16(2, 7)
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) End() (common_date.Date, error) {
	if capnp.Struct(s).Uint16(2) != 8 {
		panic("Which() != end")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s Metadata_Entry) HasEnd() bool {
	if capnp.Struct(s).Uint16(2) != 8 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetEnd(v common_date.Date) error {
	capnp.Struct(s).SetUint16(2, 8)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnd() (common_date.Date, error) {
	capnp.Struct(s).SetUint16(2, 8)
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) Co2() float32 {
	if capnp.Struct(s).Uint16(2) != 9 {
		panic("Which() != co2")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Metadata_Entry) SetCo2(v float32) {
	capnp.Struct(s).SetUint16(2, 9)
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Metadata_Entry) SetPicontrol() {
	capnp.Struct(s).SetUint16(2, 10)

}

func (s Metadata_Entry) Description() (string, error) {
	if capnp.Struct(s).Uint16(2) != 11 {
		panic("Which() != description")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasDescription() bool {
	if capnp.Struct(s).Uint16(2) != 11 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetDescription(v string) error {
	capnp.Struct(s).SetUint16(2, 11)
	return capnp.Struct(s).SetText(0, v)
}

// Metadata_Entry_List is a list of Metadata_Entry.
type Metadata_Entry_List = capnp.StructList[Metadata_Entry]

// NewMetadata_Entry creates a new list of Metadata_Entry.
func NewMetadata_Entry_List(s *capnp.Segment, sz int32) (Metadata_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Entry](l), err
}

// Metadata_Entry_Future is a wrapper for a Metadata_Entry promised by a client call.
type Metadata_Entry_Future struct{ *capnp.Future }

func (f Metadata_Entry_Future) Struct() (Metadata_Entry, error) {
	p, err := f.Future.Ptr()
	return Metadata_Entry(p.Struct()), err
}
func (p Metadata_Entry_Future) EnsMem() EnsembleMember_Future {
	return EnsembleMember_Future{Future: p.Future.Field(0, nil)}
}
func (p Metadata_Entry_Future) Start() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p Metadata_Entry_Future) End() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information capnp.Client

// Metadata_Information_TypeID is the unique identifier for the type Metadata_Information.
const Metadata_Information_TypeID = 0xc781edeab8160cb7

func (c Metadata_Information) ForOne(ctx context.Context, params func(Metadata_Information_forOne_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forOne_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Metadata_Information) ForAll(ctx context.Context, params func(Metadata_Information_forAll_Params) error) (Metadata_Information_forAll_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forAll_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Information_forAll_Results_Future{Future: ans.Future()}, release

}

func (c Metadata_Information) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metadata_Information) String() string {
	return "Metadata_Information(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metadata_Information) AddRef() Metadata_Information {
	return Metadata_Information(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metadata_Information) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metadata_Information) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metadata_Information) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metadata_Information) DecodeFromPtr(p capnp.Ptr) Metadata_Information {
	return Metadata_Information(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metadata_Information) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metadata_Information) IsSame(other Metadata_Information) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metadata_Information) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metadata_Information) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Metadata_Information_Server is a Metadata_Information with a local implementation.
type Metadata_Information_Server interface {
	ForOne(context.Context, Metadata_Information_forOne) error

	ForAll(context.Context, Metadata_Information_forAll) error
}

// Metadata_Information_NewServer creates a new Server from an implementation of Metadata_Information_Server.
func Metadata_Information_NewServer(s Metadata_Information_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Information_Methods(nil, s), s, c)
}

// Metadata_Information_ServerToClient creates a new Client from an implementation of Metadata_Information_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Information_ServerToClient(s Metadata_Information_Server) Metadata_Information {
	return Metadata_Information(capnp.NewClient(Metadata_Information_NewServer(s)))
}

// Metadata_Information_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Information_Methods(methods []server.Method, s Metadata_Information_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForOne(ctx, Metadata_Information_forOne{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForAll(ctx, Metadata_Information_forAll{call})
		},
	})

	return methods
}

// Metadata_Information_forOne holds the state for a server call to Metadata_Information.forOne.
// See server.Call for documentation.
type Metadata_Information_forOne struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forOne) Args() Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forOne) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation(r), err
}

// Metadata_Information_forAll holds the state for a server call to Metadata_Information.forAll.
// See server.Call for documentation.
type Metadata_Information_forAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forAll) Args() Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forAll) AllocResults() (Metadata_Information_forAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(r), err
}

// Metadata_Information_List is a list of Metadata_Information.
type Metadata_Information_List = capnp.CapList[Metadata_Information]

// NewMetadata_Information creates a new list of Metadata_Information.
func NewMetadata_Information_List(s *capnp.Segment, sz int32) (Metadata_Information_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metadata_Information](l), err
}

type Metadata_Information_forOne_Params capnp.Struct

// Metadata_Information_forOne_Params_TypeID is the unique identifier for the type Metadata_Information_forOne_Params.
const Metadata_Information_forOne_Params_TypeID = 0xdf705ef1e0b7d506

func NewMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params(st), err
}

func NewRootMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params(st), err
}

func ReadRootMetadata_Information_forOne_Params(msg *capnp.Message) (Metadata_Information_forOne_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forOne_Params(root.Struct()), err
}

func (s Metadata_Information_forOne_Params) String() string {
	str, _ := text.Marshal(0xdf705ef1e0b7d506, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forOne_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forOne_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forOne_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forOne_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forOne_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forOne_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Information_forOne_Params) Entry() (Metadata_Entry, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata_Entry(p.Struct()), err
}

func (s Metadata_Information_forOne_Params) HasEntry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Information_forOne_Params) SetEntry(v Metadata_Entry) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated Metadata_Entry struct, preferring placement in s's segment.
func (s Metadata_Information_forOne_Params) NewEntry() (Metadata_Entry, error) {
	ss, err := NewMetadata_Entry(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata_Entry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Metadata_Information_forOne_Params_List is a list of Metadata_Information_forOne_Params.
type Metadata_Information_forOne_Params_List = capnp.StructList[Metadata_Information_forOne_Params]

// NewMetadata_Information_forOne_Params creates a new list of Metadata_Information_forOne_Params.
func NewMetadata_Information_forOne_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forOne_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Information_forOne_Params](l), err
}

// Metadata_Information_forOne_Params_Future is a wrapper for a Metadata_Information_forOne_Params promised by a client call.
type Metadata_Information_forOne_Params_Future struct{ *capnp.Future }

func (f Metadata_Information_forOne_Params_Future) Struct() (Metadata_Information_forOne_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forOne_Params(p.Struct()), err
}
func (p Metadata_Information_forOne_Params_Future) Entry() Metadata_Entry_Future {
	return Metadata_Entry_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information_forAll_Params capnp.Struct

// Metadata_Information_forAll_Params_TypeID is the unique identifier for the type Metadata_Information_forAll_Params.
const Metadata_Information_forAll_Params_TypeID = 0xe246d49c91fa330a

func NewMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params(st), err
}

func NewRootMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params(st), err
}

func ReadRootMetadata_Information_forAll_Params(msg *capnp.Message) (Metadata_Information_forAll_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Params(root.Struct()), err
}

func (s Metadata_Information_forAll_Params) String() string {
	str, _ := text.Marshal(0xe246d49c91fa330a, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forAll_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forAll_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forAll_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forAll_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forAll_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forAll_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metadata_Information_forAll_Params_List is a list of Metadata_Information_forAll_Params.
type Metadata_Information_forAll_Params_List = capnp.StructList[Metadata_Information_forAll_Params]

// NewMetadata_Information_forAll_Params creates a new list of Metadata_Information_forAll_Params.
func NewMetadata_Information_forAll_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metadata_Information_forAll_Params](l), err
}

// Metadata_Information_forAll_Params_Future is a wrapper for a Metadata_Information_forAll_Params promised by a client call.
type Metadata_Information_forAll_Params_Future struct{ *capnp.Future }

func (f Metadata_Information_forAll_Params_Future) Struct() (Metadata_Information_forAll_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forAll_Params(p.Struct()), err
}

type Metadata_Information_forAll_Results capnp.Struct

// Metadata_Information_forAll_Results_TypeID is the unique identifier for the type Metadata_Information_forAll_Results.
const Metadata_Information_forAll_Results_TypeID = 0x9f35030ba55fed78

func NewMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(st), err
}

func NewRootMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(st), err
}

func ReadRootMetadata_Information_forAll_Results(msg *capnp.Message) (Metadata_Information_forAll_Results, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Results(root.Struct()), err
}

func (s Metadata_Information_forAll_Results) String() string {
	str, _ := text.Marshal(0x9f35030ba55fed78, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forAll_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forAll_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forAll_Results {
	return Metadata_Information_forAll_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forAll_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forAll_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forAll_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forAll_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Information_forAll_Results) All() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Pair_List(p.List()), err
}

func (s Metadata_Information_forAll_Results) HasAll() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Information_forAll_Results) SetAll(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAll sets the all field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Metadata_Information_forAll_Results) NewAll(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Information_forAll_Results_List is a list of Metadata_Information_forAll_Results.
type Metadata_Information_forAll_Results_List = capnp.StructList[Metadata_Information_forAll_Results]

// NewMetadata_Information_forAll_Results creates a new list of Metadata_Information_forAll_Results.
func NewMetadata_Information_forAll_Results_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Information_forAll_Results](l), err
}

// Metadata_Information_forAll_Results_Future is a wrapper for a Metadata_Information_forAll_Results promised by a client call.
type Metadata_Information_forAll_Results_Future struct{ *capnp.Future }

func (f Metadata_Information_forAll_Results_Future) Struct() (Metadata_Information_forAll_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forAll_Results(p.Struct()), err
}

type Dataset capnp.Client

// Dataset_TypeID is the unique identifier for the type Dataset.
const Dataset_TypeID = 0xf635fdd1f05960f0

func (c Dataset) Metadata(ctx context.Context, params func(Dataset_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_metadata_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release

}

func (c Dataset) ClosestTimeSeriesAt(ctx context.Context, params func(Dataset_closestTimeSeriesAt_Params) error) (Dataset_closestTimeSeriesAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_closestTimeSeriesAt_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_closestTimeSeriesAt_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) TimeSeriesAt(ctx context.Context, params func(Dataset_timeSeriesAt_Params) error) (Dataset_timeSeriesAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_timeSeriesAt_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_timeSeriesAt_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) Locations(ctx context.Context, params func(Dataset_locations_Params) error) (Dataset_locations_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "locations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_locations_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_locations_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) StreamLocations(ctx context.Context, params func(Dataset_streamLocations_Params) error) (Dataset_streamLocations_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      4,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "streamLocations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_streamLocations_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_streamLocations_Results_Future{Future: ans.Future()}, release

}

func (c Dataset) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Dataset) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Dataset) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Dataset) String() string {
	return "Dataset(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Dataset) AddRef() Dataset {
	return Dataset(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Dataset) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Dataset) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Dataset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Dataset) DecodeFromPtr(p capnp.Ptr) Dataset {
	return Dataset(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Dataset) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Dataset) IsSame(other Dataset) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Dataset) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Dataset) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Dataset_Server is a Dataset with a local implementation.
type Dataset_Server interface {
	Metadata(context.Context, Dataset_metadata) error

	ClosestTimeSeriesAt(context.Context, Dataset_closestTimeSeriesAt) error

	TimeSeriesAt(context.Context, Dataset_timeSeriesAt) error

	Locations(context.Context, Dataset_locations) error

	StreamLocations(context.Context, Dataset_streamLocations) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Dataset_NewServer creates a new Server from an implementation of Dataset_Server.
func Dataset_NewServer(s Dataset_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_Methods(nil, s), s, c)
}

// Dataset_ServerToClient creates a new Client from an implementation of Dataset_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_ServerToClient(s Dataset_Server) Dataset {
	return Dataset(capnp.NewClient(Dataset_NewServer(s)))
}

// Dataset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_Methods(methods []server.Method, s Dataset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, Dataset_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestTimeSeriesAt(ctx, Dataset_closestTimeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TimeSeriesAt(ctx, Dataset_timeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "locations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locations(ctx, Dataset_locations{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      4,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "streamLocations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamLocations(ctx, Dataset_streamLocations{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Dataset_metadata holds the state for a server call to Dataset.metadata.
// See server.Call for documentation.
type Dataset_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_metadata) Args() Dataset_metadata_Params {
	return Dataset_metadata_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(r), err
}

// Dataset_closestTimeSeriesAt holds the state for a server call to Dataset.closestTimeSeriesAt.
// See server.Call for documentation.
type Dataset_closestTimeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_closestTimeSeriesAt) Args() Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_closestTimeSeriesAt) AllocResults() (Dataset_closestTimeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(r), err
}

// Dataset_timeSeriesAt holds the state for a server call to Dataset.timeSeriesAt.
// See server.Call for documentation.
type Dataset_timeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_timeSeriesAt) Args() Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_timeSeriesAt) AllocResults() (Dataset_timeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(r), err
}

// Dataset_locations holds the state for a server call to Dataset.locations.
// See server.Call for documentation.
type Dataset_locations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_locations) Args() Dataset_locations_Params {
	return Dataset_locations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_locations) AllocResults() (Dataset_locations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(r), err
}

// Dataset_streamLocations holds the state for a server call to Dataset.streamLocations.
// See server.Call for documentation.
type Dataset_streamLocations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_streamLocations) Args() Dataset_streamLocations_Params {
	return Dataset_streamLocations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_streamLocations) AllocResults() (Dataset_streamLocations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(r), err
}

// Dataset_List is a list of Dataset.
type Dataset_List = capnp.CapList[Dataset]

// NewDataset creates a new list of Dataset.
func NewDataset_List(s *capnp.Segment, sz int32) (Dataset_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Dataset](l), err
}

type Dataset_GetLocationsCallback capnp.Client

// Dataset_GetLocationsCallback_TypeID is the unique identifier for the type Dataset_GetLocationsCallback.
const Dataset_GetLocationsCallback_TypeID = 0xd61ba043f14fe175

func (c Dataset_GetLocationsCallback) NextLocations(ctx context.Context, params func(Dataset_GetLocationsCallback_nextLocations_Params) error) (Dataset_GetLocationsCallback_nextLocations_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd61ba043f14fe175,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset.GetLocationsCallback",
			MethodName:    "nextLocations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_GetLocationsCallback_nextLocations_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_GetLocationsCallback_nextLocations_Results_Future{Future: ans.Future()}, release

}

func (c Dataset_GetLocationsCallback) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Dataset_GetLocationsCallback) String() string {
	return "Dataset_GetLocationsCallback(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Dataset_GetLocationsCallback) AddRef() Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Dataset_GetLocationsCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Dataset_GetLocationsCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Dataset_GetLocationsCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Dataset_GetLocationsCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Dataset_GetLocationsCallback) IsSame(other Dataset_GetLocationsCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Dataset_GetLocationsCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Dataset_GetLocationsCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Dataset_GetLocationsCallback_Server is a Dataset_GetLocationsCallback with a local implementation.
type Dataset_GetLocationsCallback_Server interface {
	NextLocations(context.Context, Dataset_GetLocationsCallback_nextLocations) error
}

// Dataset_GetLocationsCallback_NewServer creates a new Server from an implementation of Dataset_GetLocationsCallback_Server.
func Dataset_GetLocationsCallback_NewServer(s Dataset_GetLocationsCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_GetLocationsCallback_Methods(nil, s), s, c)
}

// Dataset_GetLocationsCallback_ServerToClient creates a new Client from an implementation of Dataset_GetLocationsCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_GetLocationsCallback_ServerToClient(s Dataset_GetLocationsCallback_Server) Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.NewClient(Dataset_GetLocationsCallback_NewServer(s)))
}

// Dataset_GetLocationsCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_GetLocationsCallback_Methods(methods []server.Method, s Dataset_GetLocationsCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd61ba043f14fe175,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset.GetLocationsCallback",
			MethodName:    "nextLocations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextLocations(ctx, Dataset_GetLocationsCallback_nextLocations{call})
		},
	})

	return methods
}

// Dataset_GetLocationsCallback_nextLocations holds the state for a server call to Dataset_GetLocationsCallback.nextLocations.
// See server.Call for documentation.
type Dataset_GetLocationsCallback_nextLocations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_GetLocationsCallback_nextLocations) Args() Dataset_GetLocationsCallback_nextLocations_Params {
	return Dataset_GetLocationsCallback_nextLocations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_GetLocationsCallback_nextLocations) AllocResults() (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(r), err
}

// Dataset_GetLocationsCallback_List is a list of Dataset_GetLocationsCallback.
type Dataset_GetLocationsCallback_List = capnp.CapList[Dataset_GetLocationsCallback]

// NewDataset_GetLocationsCallback creates a new list of Dataset_GetLocationsCallback.
func NewDataset_GetLocationsCallback_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Dataset_GetLocationsCallback](l), err
}

type Dataset_GetLocationsCallback_nextLocations_Params capnp.Struct

// Dataset_GetLocationsCallback_nextLocations_Params_TypeID is the unique identifier for the type Dataset_GetLocationsCallback_nextLocations_Params.
const Dataset_GetLocationsCallback_nextLocations_Params_TypeID = 0xe64112993dc4d4e0

func NewDataset_GetLocationsCallback_nextLocations_Params(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dataset_GetLocationsCallback_nextLocations_Params(st), err
}

func NewRootDataset_GetLocationsCallback_nextLocations_Params(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dataset_GetLocationsCallback_nextLocations_Params(st), err
}

func ReadRootDataset_GetLocationsCallback_nextLocations_Params(msg *capnp.Message) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	root, err := msg.Root()
	return Dataset_GetLocationsCallback_nextLocations_Params(root.Struct()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) String() string {
	str, _ := text.Marshal(0xe64112993dc4d4e0, capnp.Struct(s))
	return str
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback_nextLocations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback_nextLocations_Params {
	return Dataset_GetLocationsCallback_nextLocations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_GetLocationsCallback_nextLocations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_GetLocationsCallback_nextLocations_Params) MaxCount() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) SetMaxCount(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Dataset_GetLocationsCallback_nextLocations_Params_List is a list of Dataset_GetLocationsCallback_nextLocations_Params.
type Dataset_GetLocationsCallback_nextLocations_Params_List = capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Params]

// NewDataset_GetLocationsCallback_nextLocations_Params creates a new list of Dataset_GetLocationsCallback_nextLocations_Params.
func NewDataset_GetLocationsCallback_nextLocations_Params_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_nextLocations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Params](l), err
}

// Dataset_GetLocationsCallback_nextLocations_Params_Future is a wrapper for a Dataset_GetLocationsCallback_nextLocations_Params promised by a client call.
type Dataset_GetLocationsCallback_nextLocations_Params_Future struct{ *capnp.Future }

func (f Dataset_GetLocationsCallback_nextLocations_Params_Future) Struct() (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_GetLocationsCallback_nextLocations_Params(p.Struct()), err
}

type Dataset_GetLocationsCallback_nextLocations_Results capnp.Struct

// Dataset_GetLocationsCallback_nextLocations_Results_TypeID is the unique identifier for the type Dataset_GetLocationsCallback_nextLocations_Results.
const Dataset_GetLocationsCallback_nextLocations_Results_TypeID = 0xfa8540d5d8065df1

func NewDataset_GetLocationsCallback_nextLocations_Results(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(st), err
}

func NewRootDataset_GetLocationsCallback_nextLocations_Results(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(st), err
}

func ReadRootDataset_GetLocationsCallback_nextLocations_Results(msg *capnp.Message) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	root, err := msg.Root()
	return Dataset_GetLocationsCallback_nextLocations_Results(root.Struct()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) String() string {
	str, _ := text.Marshal(0xfa8540d5d8065df1, capnp.Struct(s))
	return str
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback_nextLocations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback_nextLocations_Results {
	return Dataset_GetLocationsCallback_nextLocations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_GetLocationsCallback_nextLocations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_GetLocationsCallback_nextLocations_Results) Locations() (Location_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Location_List(p.List()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) HasLocations() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) SetLocations(v Location_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_GetLocationsCallback_nextLocations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Dataset_GetLocationsCallback_nextLocations_Results_List is a list of Dataset_GetLocationsCallback_nextLocations_Results.
type Dataset_GetLocationsCallback_nextLocations_Results_List = capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Results]

// NewDataset_GetLocationsCallback_nextLocations_Results creates a new list of Dataset_GetLocationsCallback_nextLocations_Results.
func NewDataset_GetLocationsCallback_nextLocations_Results_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_nextLocations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Results](l), err
}

// Dataset_GetLocationsCallback_nextLocations_Results_Future is a wrapper for a Dataset_GetLocationsCallback_nextLocations_Results promised by a client call.
type Dataset_GetLocationsCallback_nextLocations_Results_Future struct{ *capnp.Future }

func (f Dataset_GetLocationsCallback_nextLocations_Results_Future) Struct() (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_GetLocationsCallback_nextLocations_Results(p.Struct()), err
}

type Dataset_metadata_Params capnp.Struct

// Dataset_metadata_Params_TypeID is the unique identifier for the type Dataset_metadata_Params.
const Dataset_metadata_Params_TypeID = 0xb4c346906ee84815

func NewDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params(st), err
}

func NewRootDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params(st), err
}

func ReadRootDataset_metadata_Params(msg *capnp.Message) (Dataset_metadata_Params, error) {
	root, err := msg.Root()
	return Dataset_metadata_Params(root.Struct()), err
}

func (s Dataset_metadata_Params) String() string {
	str, _ := text.Marshal(0xb4c346906ee84815, capnp.Struct(s))
	return str
}

func (s Dataset_metadata_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_metadata_Params) DecodeFromPtr(p capnp.Ptr) Dataset_metadata_Params {
	return Dataset_metadata_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_metadata_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_metadata_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_metadata_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_metadata_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Dataset_metadata_Params_List is a list of Dataset_metadata_Params.
type Dataset_metadata_Params_List = capnp.StructList[Dataset_metadata_Params]

// NewDataset_metadata_Params creates a new list of Dataset_metadata_Params.
func NewDataset_metadata_Params_List(s *capnp.Segment, sz int32) (Dataset_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_metadata_Params](l), err
}

// Dataset_metadata_Params_Future is a wrapper for a Dataset_metadata_Params promised by a client call.
type Dataset_metadata_Params_Future struct{ *capnp.Future }

func (f Dataset_metadata_Params_Future) Struct() (Dataset_metadata_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_metadata_Params(p.Struct()), err
}

type Dataset_closestTimeSeriesAt_Params capnp.Struct

// Dataset_closestTimeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Params.
const Dataset_closestTimeSeriesAt_Params_TypeID = 0xb0496f3d284f4a13

func NewDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params(st), err
}

func NewRootDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params(st), err
}

func ReadRootDataset_closestTimeSeriesAt_Params(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Params(root.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xb0496f3d284f4a13, capnp.Struct(s))
	return str
}

func (s Dataset_closestTimeSeriesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_closestTimeSeriesAt_Params) DecodeFromPtr(p capnp.Ptr) Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_closestTimeSeriesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_closestTimeSeriesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_closestTimeSeriesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_closestTimeSeriesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_closestTimeSeriesAt_Params) Latlon() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Params) HasLatlon() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Params) SetLatlon(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Dataset_closestTimeSeriesAt_Params) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Dataset_closestTimeSeriesAt_Params_List is a list of Dataset_closestTimeSeriesAt_Params.
type Dataset_closestTimeSeriesAt_Params_List = capnp.StructList[Dataset_closestTimeSeriesAt_Params]

// NewDataset_closestTimeSeriesAt_Params creates a new list of Dataset_closestTimeSeriesAt_Params.
func NewDataset_closestTimeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_closestTimeSeriesAt_Params](l), err
}

// Dataset_closestTimeSeriesAt_Params_Future is a wrapper for a Dataset_closestTimeSeriesAt_Params promised by a client call.
type Dataset_closestTimeSeriesAt_Params_Future struct{ *capnp.Future }

func (f Dataset_closestTimeSeriesAt_Params_Future) Struct() (Dataset_closestTimeSeriesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_closestTimeSeriesAt_Params(p.Struct()), err
}
func (p Dataset_closestTimeSeriesAt_Params_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

type Dataset_closestTimeSeriesAt_Results capnp.Struct

// Dataset_closestTimeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Results.
const Dataset_closestTimeSeriesAt_Results_TypeID = 0xedee5faa03af6a1e

func NewDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(st), err
}

func NewRootDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(st), err
}

func ReadRootDataset_closestTimeSeriesAt_Results(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Results(root.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xedee5faa03af6a1e, capnp.Struct(s))
	return str
}

func (s Dataset_closestTimeSeriesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_closestTimeSeriesAt_Results) DecodeFromPtr(p capnp.Ptr) Dataset_closestTimeSeriesAt_Results {
	return Dataset_closestTimeSeriesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_closestTimeSeriesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_closestTimeSeriesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_closestTimeSeriesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_closestTimeSeriesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_closestTimeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s Dataset_closestTimeSeriesAt_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_closestTimeSeriesAt_Results_List is a list of Dataset_closestTimeSeriesAt_Results.
type Dataset_closestTimeSeriesAt_Results_List = capnp.StructList[Dataset_closestTimeSeriesAt_Results]

// NewDataset_closestTimeSeriesAt_Results creates a new list of Dataset_closestTimeSeriesAt_Results.
func NewDataset_closestTimeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_closestTimeSeriesAt_Results](l), err
}

// Dataset_closestTimeSeriesAt_Results_Future is a wrapper for a Dataset_closestTimeSeriesAt_Results promised by a client call.
type Dataset_closestTimeSeriesAt_Results_Future struct{ *capnp.Future }

func (f Dataset_closestTimeSeriesAt_Results_Future) Struct() (Dataset_closestTimeSeriesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_closestTimeSeriesAt_Results(p.Struct()), err
}
func (p Dataset_closestTimeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type Dataset_timeSeriesAt_Params capnp.Struct

// Dataset_timeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Params.
const Dataset_timeSeriesAt_Params_TypeID = 0xd9f867b0a2a15d7f

func NewDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params(st), err
}

func NewRootDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params(st), err
}

func ReadRootDataset_timeSeriesAt_Params(msg *capnp.Message) (Dataset_timeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Params(root.Struct()), err
}

func (s Dataset_timeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xd9f867b0a2a15d7f, capnp.Struct(s))
	return str
}

func (s Dataset_timeSeriesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_timeSeriesAt_Params) DecodeFromPtr(p capnp.Ptr) Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_timeSeriesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_timeSeriesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_timeSeriesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_timeSeriesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_timeSeriesAt_Params) LocationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Dataset_timeSeriesAt_Params) HasLocationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_timeSeriesAt_Params) LocationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_timeSeriesAt_Params) SetLocationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Dataset_timeSeriesAt_Params_List is a list of Dataset_timeSeriesAt_Params.
type Dataset_timeSeriesAt_Params_List = capnp.StructList[Dataset_timeSeriesAt_Params]

// NewDataset_timeSeriesAt_Params creates a new list of Dataset_timeSeriesAt_Params.
func NewDataset_timeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_timeSeriesAt_Params](l), err
}

// Dataset_timeSeriesAt_Params_Future is a wrapper for a Dataset_timeSeriesAt_Params promised by a client call.
type Dataset_timeSeriesAt_Params_Future struct{ *capnp.Future }

func (f Dataset_timeSeriesAt_Params_Future) Struct() (Dataset_timeSeriesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_timeSeriesAt_Params(p.Struct()), err
}

type Dataset_timeSeriesAt_Results capnp.Struct

// Dataset_timeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Results.
const Dataset_timeSeriesAt_Results_TypeID = 0xe30c466e5bc2735c

func NewDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(st), err
}

func NewRootDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(st), err
}

func ReadRootDataset_timeSeriesAt_Results(msg *capnp.Message) (Dataset_timeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Results(root.Struct()), err
}

func (s Dataset_timeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xe30c466e5bc2735c, capnp.Struct(s))
	return str
}

func (s Dataset_timeSeriesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_timeSeriesAt_Results) DecodeFromPtr(p capnp.Ptr) Dataset_timeSeriesAt_Results {
	return Dataset_timeSeriesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_timeSeriesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_timeSeriesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_timeSeriesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_timeSeriesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_timeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s Dataset_timeSeriesAt_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_timeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_timeSeriesAt_Results_List is a list of Dataset_timeSeriesAt_Results.
type Dataset_timeSeriesAt_Results_List = capnp.StructList[Dataset_timeSeriesAt_Results]

// NewDataset_timeSeriesAt_Results creates a new list of Dataset_timeSeriesAt_Results.
func NewDataset_timeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_timeSeriesAt_Results](l), err
}

// Dataset_timeSeriesAt_Results_Future is a wrapper for a Dataset_timeSeriesAt_Results promised by a client call.
type Dataset_timeSeriesAt_Results_Future struct{ *capnp.Future }

func (f Dataset_timeSeriesAt_Results_Future) Struct() (Dataset_timeSeriesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_timeSeriesAt_Results(p.Struct()), err
}
func (p Dataset_timeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type Dataset_locations_Params capnp.Struct

// Dataset_locations_Params_TypeID is the unique identifier for the type Dataset_locations_Params.
const Dataset_locations_Params_TypeID = 0xd2a02e856c28d4ba

func NewDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params(st), err
}

func NewRootDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params(st), err
}

func ReadRootDataset_locations_Params(msg *capnp.Message) (Dataset_locations_Params, error) {
	root, err := msg.Root()
	return Dataset_locations_Params(root.Struct()), err
}

func (s Dataset_locations_Params) String() string {
	str, _ := text.Marshal(0xd2a02e856c28d4ba, capnp.Struct(s))
	return str
}

func (s Dataset_locations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_locations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_locations_Params {
	return Dataset_locations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_locations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_locations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_locations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_locations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Dataset_locations_Params_List is a list of Dataset_locations_Params.
type Dataset_locations_Params_List = capnp.StructList[Dataset_locations_Params]

// NewDataset_locations_Params creates a new list of Dataset_locations_Params.
func NewDataset_locations_Params_List(s *capnp.Segment, sz int32) (Dataset_locations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_locations_Params](l), err
}

// Dataset_locations_Params_Future is a wrapper for a Dataset_locations_Params promised by a client call.
type Dataset_locations_Params_Future struct{ *capnp.Future }

func (f Dataset_locations_Params_Future) Struct() (Dataset_locations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_locations_Params(p.Struct()), err
}

type Dataset_locations_Results capnp.Struct

// Dataset_locations_Results_TypeID is the unique identifier for the type Dataset_locations_Results.
const Dataset_locations_Results_TypeID = 0xaa8cfcdc401d5fdd

func NewDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(st), err
}

func NewRootDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(st), err
}

func ReadRootDataset_locations_Results(msg *capnp.Message) (Dataset_locations_Results, error) {
	root, err := msg.Root()
	return Dataset_locations_Results(root.Struct()), err
}

func (s Dataset_locations_Results) String() string {
	str, _ := text.Marshal(0xaa8cfcdc401d5fdd, capnp.Struct(s))
	return str
}

func (s Dataset_locations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_locations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_locations_Results {
	return Dataset_locations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_locations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_locations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_locations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_locations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_locations_Results) Locations() (Location_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Location_List(p.List()), err
}

func (s Dataset_locations_Results) HasLocations() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_locations_Results) SetLocations(v Location_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_locations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Dataset_locations_Results_List is a list of Dataset_locations_Results.
type Dataset_locations_Results_List = capnp.StructList[Dataset_locations_Results]

// NewDataset_locations_Results creates a new list of Dataset_locations_Results.
func NewDataset_locations_Results_List(s *capnp.Segment, sz int32) (Dataset_locations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_locations_Results](l), err
}

// Dataset_locations_Results_Future is a wrapper for a Dataset_locations_Results promised by a client call.
type Dataset_locations_Results_Future struct{ *capnp.Future }

func (f Dataset_locations_Results_Future) Struct() (Dataset_locations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_locations_Results(p.Struct()), err
}

type Dataset_streamLocations_Params capnp.Struct

// Dataset_streamLocations_Params_TypeID is the unique identifier for the type Dataset_streamLocations_Params.
const Dataset_streamLocations_Params_TypeID = 0xfca3f0f431b64506

func NewDataset_streamLocations_Params(s *capnp.Segment) (Dataset_streamLocations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Params(st), err
}

func NewRootDataset_streamLocations_Params(s *capnp.Segment) (Dataset_streamLocations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Params(st), err
}

func ReadRootDataset_streamLocations_Params(msg *capnp.Message) (Dataset_streamLocations_Params, error) {
	root, err := msg.Root()
	return Dataset_streamLocations_Params(root.Struct()), err
}

func (s Dataset_streamLocations_Params) String() string {
	str, _ := text.Marshal(0xfca3f0f431b64506, capnp.Struct(s))
	return str
}

func (s Dataset_streamLocations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_streamLocations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_streamLocations_Params {
	return Dataset_streamLocations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_streamLocations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_streamLocations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_streamLocations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_streamLocations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_streamLocations_Params) StartAfterLocationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Dataset_streamLocations_Params) HasStartAfterLocationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_streamLocations_Params) StartAfterLocationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_streamLocations_Params) SetStartAfterLocationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Dataset_streamLocations_Params_List is a list of Dataset_streamLocations_Params.
type Dataset_streamLocations_Params_List = capnp.StructList[Dataset_streamLocations_Params]

// NewDataset_streamLocations_Params creates a new list of Dataset_streamLocations_Params.
func NewDataset_streamLocations_Params_List(s *capnp.Segment, sz int32) (Dataset_streamLocations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_streamLocations_Params](l), err
}

// Dataset_streamLocations_Params_Future is a wrapper for a Dataset_streamLocations_Params promised by a client call.
type Dataset_streamLocations_Params_Future struct{ *capnp.Future }

func (f Dataset_streamLocations_Params_Future) Struct() (Dataset_streamLocations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_streamLocations_Params(p.Struct()), err
}

type Dataset_streamLocations_Results capnp.Struct

// Dataset_streamLocations_Results_TypeID is the unique identifier for the type Dataset_streamLocations_Results.
const Dataset_streamLocations_Results_TypeID = 0x9ebadb578b79fa06

func NewDataset_streamLocations_Results(s *capnp.Segment) (Dataset_streamLocations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(st), err
}

func NewRootDataset_streamLocations_Results(s *capnp.Segment) (Dataset_streamLocations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(st), err
}

func ReadRootDataset_streamLocations_Results(msg *capnp.Message) (Dataset_streamLocations_Results, error) {
	root, err := msg.Root()
	return Dataset_streamLocations_Results(root.Struct()), err
}

func (s Dataset_streamLocations_Results) String() string {
	str, _ := text.Marshal(0x9ebadb578b79fa06, capnp.Struct(s))
	return str
}

func (s Dataset_streamLocations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_streamLocations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_streamLocations_Results {
	return Dataset_streamLocations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_streamLocations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_streamLocations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_streamLocations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_streamLocations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_streamLocations_Results) LocationsCallback() Dataset_GetLocationsCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return Dataset_GetLocationsCallback(p.Interface().Client())
}

func (s Dataset_streamLocations_Results) HasLocationsCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_streamLocations_Results) SetLocationsCallback(v Dataset_GetLocationsCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_streamLocations_Results_List is a list of Dataset_streamLocations_Results.
type Dataset_streamLocations_Results_List = capnp.StructList[Dataset_streamLocations_Results]

// NewDataset_streamLocations_Results creates a new list of Dataset_streamLocations_Results.
func NewDataset_streamLocations_Results_List(s *capnp.Segment, sz int32) (Dataset_streamLocations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_streamLocations_Results](l), err
}

// Dataset_streamLocations_Results_Future is a wrapper for a Dataset_streamLocations_Results promised by a client call.
type Dataset_streamLocations_Results_Future struct{ *capnp.Future }

func (f Dataset_streamLocations_Results_Future) Struct() (Dataset_streamLocations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_streamLocations_Results(p.Struct()), err
}
func (p Dataset_streamLocations_Results_Future) LocationsCallback() Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(p.Future.Field(0, nil).Client())
}

type MetaPlusData capnp.Struct

// MetaPlusData_TypeID is the unique identifier for the type MetaPlusData.
const MetaPlusData_TypeID = 0xd7a67fec5f22e5a0

func NewMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData(st), err
}

func NewRootMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData(st), err
}

func ReadRootMetaPlusData(msg *capnp.Message) (MetaPlusData, error) {
	root, err := msg.Root()
	return MetaPlusData(root.Struct()), err
}

func (s MetaPlusData) String() string {
	str, _ := text.Marshal(0xd7a67fec5f22e5a0, capnp.Struct(s))
	return str
}

func (s MetaPlusData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MetaPlusData) DecodeFromPtr(p capnp.Ptr) MetaPlusData {
	return MetaPlusData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MetaPlusData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MetaPlusData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MetaPlusData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MetaPlusData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MetaPlusData) Meta() (Metadata, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata(p.Struct()), err
}

func (s MetaPlusData) HasMeta() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MetaPlusData) SetMeta(v Metadata) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s MetaPlusData) NewMeta() (Metadata, error) {
	ss, err := NewMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MetaPlusData) Data() Dataset {
	p, _ := capnp.Struct(s).Ptr(1)
	return Dataset(p.Interface().Client())
}

func (s MetaPlusData) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MetaPlusData) SetData(v Dataset) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// MetaPlusData_List is a list of MetaPlusData.
type MetaPlusData_List = capnp.StructList[MetaPlusData]

// NewMetaPlusData creates a new list of MetaPlusData.
func NewMetaPlusData_List(s *capnp.Segment, sz int32) (MetaPlusData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[MetaPlusData](l), err
}

// MetaPlusData_Future is a wrapper for a MetaPlusData promised by a client call.
type MetaPlusData_Future struct{ *capnp.Future }

func (f MetaPlusData_Future) Struct() (MetaPlusData, error) {
	p, err := f.Future.Ptr()
	return MetaPlusData(p.Struct()), err
}
func (p MetaPlusData_Future) Meta() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}
func (p MetaPlusData_Future) Data() Dataset {
	return Dataset(p.Future.Field(1, nil).Client())
}

type Element uint16

// Element_TypeID is the unique identifier for the type Element.
const Element_TypeID = 0xe35760b4db5ab564

// Values of Element.
const (
	Element_tmin                                Element = 0
	Element_tavg                                Element = 1
	Element_tmax                                Element = 2
	Element_precip                              Element = 3
	Element_globrad                             Element = 4
	Element_wind                                Element = 5
	Element_sunhours                            Element = 6
	Element_cloudamount                         Element = 7
	Element_relhumid                            Element = 8
	Element_airpress                            Element = 9
	Element_vaporpress                          Element = 10
	Element_co2                                 Element = 11
	Element_o3                                  Element = 12
	Element_et0                                 Element = 13
	Element_dewpointTemp                        Element = 14
	Element_specificHumidity                    Element = 15
	Element_snowfallFlux                        Element = 16
	Element_surfaceDownwellingLongwaveRadiation Element = 17
)

// String returns the enum's constant name.
func (c Element) String() string {
	switch c {
	case Element_tmin:
		return "tmin"
	case Element_tavg:
		return "tavg"
	case Element_tmax:
		return "tmax"
	case Element_precip:
		return "precip"
	case Element_globrad:
		return "globrad"
	case Element_wind:
		return "wind"
	case Element_sunhours:
		return "sunhours"
	case Element_cloudamount:
		return "cloudamount"
	case Element_relhumid:
		return "relhumid"
	case Element_airpress:
		return "airpress"
	case Element_vaporpress:
		return "vaporpress"
	case Element_co2:
		return "co2"
	case Element_o3:
		return "o3"
	case Element_et0:
		return "et0"
	case Element_dewpointTemp:
		return "dewpointTemp"
	case Element_specificHumidity:
		return "specificHumidity"
	case Element_snowfallFlux:
		return "snowfallFlux"
	case Element_surfaceDownwellingLongwaveRadiation:
		return "surfaceDownwellingLongwaveRadiation"

	default:
		return ""
	}
}

// ElementFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ElementFromString(c string) Element {
	switch c {
	case "tmin":
		return Element_tmin
	case "tavg":
		return Element_tavg
	case "tmax":
		return Element_tmax
	case "precip":
		return Element_precip
	case "globrad":
		return Element_globrad
	case "wind":
		return Element_wind
	case "sunhours":
		return Element_sunhours
	case "cloudamount":
		return Element_cloudamount
	case "relhumid":
		return Element_relhumid
	case "airpress":
		return Element_airpress
	case "vaporpress":
		return Element_vaporpress
	case "co2":
		return Element_co2
	case "o3":
		return Element_o3
	case "et0":
		return Element_et0
	case "dewpointTemp":
		return Element_dewpointTemp
	case "specificHumidity":
		return Element_specificHumidity
	case "snowfallFlux":
		return Element_snowfallFlux
	case "surfaceDownwellingLongwaveRadiation":
		return Element_surfaceDownwellingLongwaveRadiation

	default:
		return 0
	}
}

type Element_List = capnp.EnumList[Element]

func NewElement_List(s *capnp.Segment, sz int32) (Element_List, error) {
	return capnp.NewEnumList[Element](s, sz)
}

type Location capnp.Struct

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0x85ba7385f313fe19

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0x85ba7385f313fe19, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Id() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Location) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) SetId(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewId sets the id field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Location) NewId() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Location) HeightNN() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Location) SetHeightNN(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Location) Latlon() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Location) HasLatlon() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetLatlon(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Location) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Location) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(2)
	return TimeSeries(p.Interface().Client())
}

func (s Location) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Location) CustomData() (Location_KV_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Location_KV_List(p.List()), err
}

func (s Location) HasCustomData() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Location) SetCustomData(v Location_KV_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCustomData sets the customData field to a newly
// allocated Location_KV_List, preferring placement in s's segment.
func (s Location) NewCustomData(n int32) (Location_KV_List, error) {
	l, err := NewLocation_KV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_KV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Id() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Location_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(1, nil)}
}
func (p Location_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(2, nil).Client())
}

type Location_KV capnp.Struct

// Location_KV_TypeID is the unique identifier for the type Location_KV.
const Location_KV_TypeID = 0xc5fd13a53ae6d46a

func NewLocation_KV(s *capnp.Segment) (Location_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Location_KV(st), err
}

func NewRootLocation_KV(s *capnp.Segment) (Location_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Location_KV(st), err
}

func ReadRootLocation_KV(msg *capnp.Message) (Location_KV, error) {
	root, err := msg.Root()
	return Location_KV(root.Struct()), err
}

func (s Location_KV) String() string {
	str, _ := text.Marshal(0xc5fd13a53ae6d46a, capnp.Struct(s))
	return str
}

func (s Location_KV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location_KV) DecodeFromPtr(p capnp.Ptr) Location_KV {
	return Location_KV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location_KV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location_KV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location_KV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location_KV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location_KV) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location_KV) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location_KV) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location_KV) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location_KV) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Location_KV) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location_KV) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Location_KV_List is a list of Location_KV.
type Location_KV_List = capnp.StructList[Location_KV]

// NewLocation_KV creates a new list of Location_KV.
func NewLocation_KV_List(s *capnp.Segment, sz int32) (Location_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Location_KV](l), err
}

// Location_KV_Future is a wrapper for a Location_KV promised by a client call.
type Location_KV_Future struct{ *capnp.Future }

func (f Location_KV_Future) Struct() (Location_KV, error) {
	p, err := f.Future.Ptr()
	return Location_KV(p.Struct()), err
}
func (p Location_KV_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type TimeSeries capnp.Client

// TimeSeries_TypeID is the unique identifier for the type TimeSeries.
const TimeSeries_TypeID = 0xa7769f40fe6e6de8

func (c TimeSeries) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c TimeSeries) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c TimeSeries) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c TimeSeries) String() string {
	return "TimeSeries(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c TimeSeries) AddRef() TimeSeries {
	return TimeSeries(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c TimeSeries) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c TimeSeries) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c TimeSeries) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (TimeSeries) DecodeFromPtr(p capnp.Ptr) TimeSeries {
	return TimeSeries(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c TimeSeries) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c TimeSeries) IsSame(other TimeSeries) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c TimeSeries) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c TimeSeries) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A TimeSeries_Server is a TimeSeries with a local implementation.
type TimeSeries_Server interface {
	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// TimeSeries_NewServer creates a new Server from an implementation of TimeSeries_Server.
func TimeSeries_NewServer(s TimeSeries_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TimeSeries_Methods(nil, s), s, c)
}

// TimeSeries_ServerToClient creates a new Client from an implementation of TimeSeries_Server.
// The caller is responsible for calling Release on the returned Client.
func TimeSeries_ServerToClient(s TimeSeries_Server) TimeSeries {
	return TimeSeries(capnp.NewClient(TimeSeries_NewServer(s)))
}

// TimeSeries_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TimeSeries_Methods(methods []server.Method, s TimeSeries_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 11)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// TimeSeries_resolution holds the state for a server call to TimeSeries.resolution.
// See server.Call for documentation.
type TimeSeries_resolution struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_resolution) Args() TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_resolution) AllocResults() (TimeSeries_resolution_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(r), err
}

// TimeSeries_range holds the state for a server call to TimeSeries.range.
// See server.Call for documentation.
type TimeSeries_range struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_range) Args() TimeSeries_range_Params {
	return TimeSeries_range_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_range) AllocResults() (TimeSeries_range_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(r), err
}

// TimeSeries_header holds the state for a server call to TimeSeries.header.
// See server.Call for documentation.
type TimeSeries_header struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_header) Args() TimeSeries_header_Params {
	return TimeSeries_header_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_header) AllocResults() (TimeSeries_header_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(r), err
}

// TimeSeries_data holds the state for a server call to TimeSeries.data.
// See server.Call for documentation.
type TimeSeries_data struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_data) Args() TimeSeries_data_Params {
	return TimeSeries_data_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_data) AllocResults() (TimeSeries_data_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(r), err
}

// TimeSeries_dataT holds the state for a server call to TimeSeries.dataT.
// See server.Call for documentation.
type TimeSeries_dataT struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_dataT) Args() TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_dataT) AllocResults() (TimeSeries_dataT_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(r), err
}

// TimeSeries_subrange holds the state for a server call to TimeSeries.subrange.
// See server.Call for documentation.
type TimeSeries_subrange struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subrange) Args() TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_subrange) AllocResults() (TimeSeries_subrange_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(r), err
}

// TimeSeries_subheader holds the state for a server call to TimeSeries.subheader.
// See server.Call for documentation.
type TimeSeries_subheader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subheader) Args() TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_subheader) AllocResults() (TimeSeries_subheader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(r), err
}

// TimeSeries_metadata holds the state for a server call to TimeSeries.metadata.
// See server.Call for documentation.
type TimeSeries_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_metadata) Args() TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(r), err
}

// TimeSeries_location holds the state for a server call to TimeSeries.location.
// See server.Call for documentation.
type TimeSeries_location struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_location) Args() TimeSeries_location_Params {
	return TimeSeries_location_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_location) AllocResults() (Location, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(r), err
}

// TimeSeries_List is a list of TimeSeries.
type TimeSeries_List = capnp.CapList[TimeSeries]

// NewTimeSeries creates a new list of TimeSeries.
func NewTimeSeries_List(s *capnp.Segment, sz int32) (TimeSeries_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[TimeSeries](l), err
}

type TimeSeries_Resolution uint16

// TimeSeries_Resolution_TypeID is the unique identifier for the type TimeSeries_Resolution.
const TimeSeries_Resolution_TypeID = 0xb466cacf63ec03c2

// Values of TimeSeries_Resolution.
const (
	TimeSeries_Resolution_daily  TimeSeries_Resolution = 0
	TimeSeries_Resolution_hourly TimeSeries_Resolution = 1
)

// String returns the enum's constant name.
func (c TimeSeries_Resolution) String() string {
	switch c {
	case TimeSeries_Resolution_daily:
		return "daily"
	case TimeSeries_Resolution_hourly:
		return "hourly"

	default:
		return ""
	}
}

// TimeSeries_ResolutionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TimeSeries_ResolutionFromString(c string) TimeSeries_Resolution {
	switch c {
	case "daily":
		return TimeSeries_Resolution_daily
	case "hourly":
		return TimeSeries_Resolution_hourly

	default:
		return 0
	}
}

type TimeSeries_Resolution_List = capnp.EnumList[TimeSeries_Resolution]

func NewTimeSeries_Resolution_List(s *capnp.Segment, sz int32) (TimeSeries_Resolution_List, error) {
	return capnp.NewEnumList[TimeSeries_Resolution](s, sz)
}

type TimeSeries_resolution_Params capnp.Struct

// TimeSeries_resolution_Params_TypeID is the unique identifier for the type TimeSeries_resolution_Params.
const TimeSeries_resolution_Params_TypeID = 0xea3f0519d272fdd1

func NewTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params(st), err
}

func NewRootTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params(st), err
}

func ReadRootTimeSeries_resolution_Params(msg *capnp.Message) (TimeSeries_resolution_Params, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Params(root.Struct()), err
}

func (s TimeSeries_resolution_Params) String() string {
	str, _ := text.Marshal(0xea3f0519d272fdd1, capnp.Struct(s))
	return str
}

func (s TimeSeries_resolution_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_resolution_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_resolution_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_resolution_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_resolution_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_resolution_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_resolution_Params_List is a list of TimeSeries_resolution_Params.
type TimeSeries_resolution_Params_List = capnp.StructList[TimeSeries_resolution_Params]

// NewTimeSeries_resolution_Params creates a new list of TimeSeries_resolution_Params.
func NewTimeSeries_resolution_Params_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_resolution_Params](l), err
}

// TimeSeries_resolution_Params_Future is a wrapper for a TimeSeries_resolution_Params promised by a client call.
type TimeSeries_resolution_Params_Future struct{ *capnp.Future }

func (f TimeSeries_resolution_Params_Future) Struct() (TimeSeries_resolution_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_resolution_Params(p.Struct()), err
}

type TimeSeries_resolution_Results capnp.Struct

// TimeSeries_resolution_Results_TypeID is the unique identifier for the type TimeSeries_resolution_Results.
const TimeSeries_resolution_Results_TypeID = 0xcd0eadd9a1a66ed6

func NewTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(st), err
}

func NewRootTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(st), err
}

func ReadRootTimeSeries_resolution_Results(msg *capnp.Message) (TimeSeries_resolution_Results, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Results(root.Struct()), err
}

func (s TimeSeries_resolution_Results) String() string {
	str, _ := text.Marshal(0xcd0eadd9a1a66ed6, capnp.Struct(s))
	return str
}

func (s TimeSeries_resolution_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_resolution_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_resolution_Results {
	return TimeSeries_resolution_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_resolution_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_resolution_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_resolution_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_resolution_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_resolution_Results) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(capnp.Struct(s).Uint16(0))
}

func (s TimeSeries_resolution_Results) SetResolution(v TimeSeries_Resolution) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// TimeSeries_resolution_Results_List is a list of TimeSeries_resolution_Results.
type TimeSeries_resolution_Results_List = capnp.StructList[TimeSeries_resolution_Results]

// NewTimeSeries_resolution_Results creates a new list of TimeSeries_resolution_Results.
func NewTimeSeries_resolution_Results_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_resolution_Results](l), err
}

// TimeSeries_resolution_Results_Future is a wrapper for a TimeSeries_resolution_Results promised by a client call.
type TimeSeries_resolution_Results_Future struct{ *capnp.Future }

func (f TimeSeries_resolution_Results_Future) Struct() (TimeSeries_resolution_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_resolution_Results(p.Struct()), err
}

type TimeSeries_range_Params capnp.Struct

// TimeSeries_range_Params_TypeID is the unique identifier for the type TimeSeries_range_Params.
const TimeSeries_range_Params_TypeID = 0xff6bcf0c6b23c916

func NewTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params(st), err
}

func NewRootTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params(st), err
}

func ReadRootTimeSeries_range_Params(msg *capnp.Message) (TimeSeries_range_Params, error) {
	root, err := msg.Root()
	return TimeSeries_range_Params(root.Struct()), err
}

func (s TimeSeries_range_Params) String() string {
	str, _ := text.Marshal(0xff6bcf0c6b23c916, capnp.Struct(s))
	return str
}

func (s TimeSeries_range_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_range_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_range_Params {
	return TimeSeries_range_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_range_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_range_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_range_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_range_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_range_Params_List is a list of TimeSeries_range_Params.
type TimeSeries_range_Params_List = capnp.StructList[TimeSeries_range_Params]

// NewTimeSeries_range_Params creates a new list of TimeSeries_range_Params.
func NewTimeSeries_range_Params_List(s *capnp.Segment, sz int32) (TimeSeries_range_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_range_Params](l), err
}

// TimeSeries_range_Params_Future is a wrapper for a TimeSeries_range_Params promised by a client call.
type TimeSeries_range_Params_Future struct{ *capnp.Future }

func (f TimeSeries_range_Params_Future) Struct() (TimeSeries_range_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_range_Params(p.Struct()), err
}

type TimeSeries_range_Results capnp.Struct

// TimeSeries_range_Results_TypeID is the unique identifier for the type TimeSeries_range_Results.
const TimeSeries_range_Results_TypeID = 0xb9ec27f476022c1b

func NewTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(st), err
}

func NewRootTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(st), err
}

func ReadRootTimeSeries_range_Results(msg *capnp.Message) (TimeSeries_range_Results, error) {
	root, err := msg.Root()
	return TimeSeries_range_Results(root.Struct()), err
}

func (s TimeSeries_range_Results) String() string {
	str, _ := text.Marshal(0xb9ec27f476022c1b, capnp.Struct(s))
	return str
}

func (s TimeSeries_range_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_range_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_range_Results {
	return TimeSeries_range_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_range_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_range_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_range_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_range_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_range_Results) StartDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_range_Results) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_range_Results) SetStartDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewStartDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeries_range_Results) EndDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_range_Results) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeries_range_Results) SetEndDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewEndDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TimeSeries_range_Results_List is a list of TimeSeries_range_Results.
type TimeSeries_range_Results_List = capnp.StructList[TimeSeries_range_Results]

// NewTimeSeries_range_Results creates a new list of TimeSeries_range_Results.
func NewTimeSeries_range_Results_List(s *capnp.Segment, sz int32) (TimeSeries_range_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TimeSeries_range_Results](l), err
}

// TimeSeries_range_Results_Future is a wrapper for a TimeSeries_range_Results promised by a client call.
type TimeSeries_range_Results_Future struct{ *capnp.Future }

func (f TimeSeries_range_Results_Future) Struct() (TimeSeries_range_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_range_Results(p.Struct()), err
}
func (p TimeSeries_range_Results_Future) StartDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p TimeSeries_range_Results_Future) EndDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_header_Params capnp.Struct

// TimeSeries_header_Params_TypeID is the unique identifier for the type TimeSeries_header_Params.
const TimeSeries_header_Params_TypeID = 0x8fd77002ae8a97a1

func NewTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params(st), err
}

func NewRootTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params(st), err
}

func ReadRootTimeSeries_header_Params(msg *capnp.Message) (TimeSeries_header_Params, error) {
	root, err := msg.Root()
	return TimeSeries_header_Params(root.Struct()), err
}

func (s TimeSeries_header_Params) String() string {
	str, _ := text.Marshal(0x8fd77002ae8a97a1, capnp.Struct(s))
	return str
}

func (s TimeSeries_header_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_header_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_header_Params {
	return TimeSeries_header_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_header_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_header_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_header_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_header_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_header_Params_List is a list of TimeSeries_header_Params.
type TimeSeries_header_Params_List = capnp.StructList[TimeSeries_header_Params]

// NewTimeSeries_header_Params creates a new list of TimeSeries_header_Params.
func NewTimeSeries_header_Params_List(s *capnp.Segment, sz int32) (TimeSeries_header_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_header_Params](l), err
}

// TimeSeries_header_Params_Future is a wrapper for a TimeSeries_header_Params promised by a client call.
type TimeSeries_header_Params_Future struct{ *capnp.Future }

func (f TimeSeries_header_Params_Future) Struct() (TimeSeries_header_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_header_Params(p.Struct()), err
}

type TimeSeries_header_Results capnp.Struct

// TimeSeries_header_Results_TypeID is the unique identifier for the type TimeSeries_header_Results.
const TimeSeries_header_Results_TypeID = 0x8976146f144fa050

func NewTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(st), err
}

func NewRootTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(st), err
}

func ReadRootTimeSeries_header_Results(msg *capnp.Message) (TimeSeries_header_Results, error) {
	root, err := msg.Root()
	return TimeSeries_header_Results(root.Struct()), err
}

func (s TimeSeries_header_Results) String() string {
	str, _ := text.Marshal(0x8976146f144fa050, capnp.Struct(s))
	return str
}

func (s TimeSeries_header_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_header_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_header_Results {
	return TimeSeries_header_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_header_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_header_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_header_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_header_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_header_Results) Header() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Element_List(p.List()), err
}

func (s TimeSeries_header_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_header_Results) SetHeader(v Element_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_header_Results) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_header_Results_List is a list of TimeSeries_header_Results.
type TimeSeries_header_Results_List = capnp.StructList[TimeSeries_header_Results]

// NewTimeSeries_header_Results creates a new list of TimeSeries_header_Results.
func NewTimeSeries_header_Results_List(s *capnp.Segment, sz int32) (TimeSeries_header_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_header_Results](l), err
}

// TimeSeries_header_Results_Future is a wrapper for a TimeSeries_header_Results promised by a client call.
type TimeSeries_header_Results_Future struct{ *capnp.Future }

func (f TimeSeries_header_Results_Future) Struct() (TimeSeries_header_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_header_Results(p.Struct()), err
}

type TimeSeries_data_Params capnp.Struct

// TimeSeries_data_Params_TypeID is the unique identifier for the type TimeSeries_data_Params.
const TimeSeries_data_Params_TypeID = 0x8e78986bc45d7dcd

func NewTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params(st), err
}

func NewRootTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params(st), err
}

func ReadRootTimeSeries_data_Params(msg *capnp.Message) (TimeSeries_data_Params, error) {
	root, err := msg.Root()
	return TimeSeries_data_Params(root.Struct()), err
}

func (s TimeSeries_data_Params) String() string {
	str, _ := text.Marshal(0x8e78986bc45d7dcd, capnp.Struct(s))
	return str
}

func (s TimeSeries_data_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_data_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_data_Params {
	return TimeSeries_data_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_data_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_data_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_data_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_data_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_data_Params_List is a list of TimeSeries_data_Params.
type TimeSeries_data_Params_List = capnp.StructList[TimeSeries_data_Params]

// NewTimeSeries_data_Params creates a new list of TimeSeries_data_Params.
func NewTimeSeries_data_Params_List(s *capnp.Segment, sz int32) (TimeSeries_data_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_data_Params](l), err
}

// TimeSeries_data_Params_Future is a wrapper for a TimeSeries_data_Params promised by a client call.
type TimeSeries_data_Params_Future struct{ *capnp.Future }

func (f TimeSeries_data_Params_Future) Struct() (TimeSeries_data_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_data_Params(p.Struct()), err
}

type TimeSeries_data_Results capnp.Struct

// TimeSeries_data_Results_TypeID is the unique identifier for the type TimeSeries_data_Results.
const TimeSeries_data_Results_TypeID = 0x9c3d3448d73eeae9

func NewTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(st), err
}

func NewRootTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(st), err
}

func ReadRootTimeSeries_data_Results(msg *capnp.Message) (TimeSeries_data_Results, error) {
	root, err := msg.Root()
	return TimeSeries_data_Results(root.Struct()), err
}

func (s TimeSeries_data_Results) String() string {
	str, _ := text.Marshal(0x9c3d3448d73eeae9, capnp.Struct(s))
	return str
}

func (s TimeSeries_data_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_data_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_data_Results {
	return TimeSeries_data_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_data_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_data_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_data_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_data_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_data_Results) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeries_data_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_data_Results) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_data_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_data_Results_List is a list of TimeSeries_data_Results.
type TimeSeries_data_Results_List = capnp.StructList[TimeSeries_data_Results]

// NewTimeSeries_data_Results creates a new list of TimeSeries_data_Results.
func NewTimeSeries_data_Results_List(s *capnp.Segment, sz int32) (TimeSeries_data_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_data_Results](l), err
}

// TimeSeries_data_Results_Future is a wrapper for a TimeSeries_data_Results promised by a client call.
type TimeSeries_data_Results_Future struct{ *capnp.Future }

func (f TimeSeries_data_Results_Future) Struct() (TimeSeries_data_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_data_Results(p.Struct()), err
}

type TimeSeries_dataT_Params capnp.Struct

// TimeSeries_dataT_Params_TypeID is the unique identifier for the type TimeSeries_dataT_Params.
const TimeSeries_dataT_Params_TypeID = 0xeff8f923b1853525

func NewTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params(st), err
}

func NewRootTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params(st), err
}

func ReadRootTimeSeries_dataT_Params(msg *capnp.Message) (TimeSeries_dataT_Params, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Params(root.Struct()), err
}

func (s TimeSeries_dataT_Params) String() string {
	str, _ := text.Marshal(0xeff8f923b1853525, capnp.Struct(s))
	return str
}

func (s TimeSeries_dataT_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_dataT_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_dataT_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_dataT_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_dataT_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_dataT_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_dataT_Params_List is a list of TimeSeries_dataT_Params.
type TimeSeries_dataT_Params_List = capnp.StructList[TimeSeries_dataT_Params]

// NewTimeSeries_dataT_Params creates a new list of TimeSeries_dataT_Params.
func NewTimeSeries_dataT_Params_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_dataT_Params](l), err
}

// TimeSeries_dataT_Params_Future is a wrapper for a TimeSeries_dataT_Params promised by a client call.
type TimeSeries_dataT_Params_Future struct{ *capnp.Future }

func (f TimeSeries_dataT_Params_Future) Struct() (TimeSeries_dataT_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_dataT_Params(p.Struct()), err
}

type TimeSeries_dataT_Results capnp.Struct

// TimeSeries_dataT_Results_TypeID is the unique identifier for the type TimeSeries_dataT_Results.
const TimeSeries_dataT_Results_TypeID = 0xc2e0dec0a6ea94fb

func NewTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(st), err
}

func NewRootTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(st), err
}

func ReadRootTimeSeries_dataT_Results(msg *capnp.Message) (TimeSeries_dataT_Results, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Results(root.Struct()), err
}

func (s TimeSeries_dataT_Results) String() string {
	str, _ := text.Marshal(0xc2e0dec0a6ea94fb, capnp.Struct(s))
	return str
}

func (s TimeSeries_dataT_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_dataT_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_dataT_Results {
	return TimeSeries_dataT_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_dataT_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_dataT_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_dataT_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_dataT_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_dataT_Results) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeries_dataT_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_dataT_Results) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_dataT_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_dataT_Results_List is a list of TimeSeries_dataT_Results.
type TimeSeries_dataT_Results_List = capnp.StructList[TimeSeries_dataT_Results]

// NewTimeSeries_dataT_Results creates a new list of TimeSeries_dataT_Results.
func NewTimeSeries_dataT_Results_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_dataT_Results](l), err
}

// TimeSeries_dataT_Results_Future is a wrapper for a TimeSeries_dataT_Results promised by a client call.
type TimeSeries_dataT_Results_Future struct{ *capnp.Future }

func (f TimeSeries_dataT_Results_Future) Struct() (TimeSeries_dataT_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_dataT_Results(p.Struct()), err
}

type TimeSeries_subrange_Params capnp.Struct

// TimeSeries_subrange_Params_TypeID is the unique identifier for the type TimeSeries_subrange_Params.
const TimeSeries_subrange_Params_TypeID = 0xf8aa5b6fe2496fee

func NewTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params(st), err
}

func NewRootTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params(st), err
}

func ReadRootTimeSeries_subrange_Params(msg *capnp.Message) (TimeSeries_subrange_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Params(root.Struct()), err
}

func (s TimeSeries_subrange_Params) String() string {
	str, _ := text.Marshal(0xf8aa5b6fe2496fee, capnp.Struct(s))
	return str
}

func (s TimeSeries_subrange_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subrange_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subrange_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subrange_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subrange_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subrange_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subrange_Params) Start() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_subrange_Params) HasStart() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subrange_Params) SetStart(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewStart() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeries_subrange_Params) End() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeries_subrange_Params) HasEnd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeries_subrange_Params) SetEnd(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewEnd() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TimeSeries_subrange_Params_List is a list of TimeSeries_subrange_Params.
type TimeSeries_subrange_Params_List = capnp.StructList[TimeSeries_subrange_Params]

// NewTimeSeries_subrange_Params creates a new list of TimeSeries_subrange_Params.
func NewTimeSeries_subrange_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TimeSeries_subrange_Params](l), err
}

// TimeSeries_subrange_Params_Future is a wrapper for a TimeSeries_subrange_Params promised by a client call.
type TimeSeries_subrange_Params_Future struct{ *capnp.Future }

func (f TimeSeries_subrange_Params_Future) Struct() (TimeSeries_subrange_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subrange_Params(p.Struct()), err
}
func (p TimeSeries_subrange_Params_Future) Start() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p TimeSeries_subrange_Params_Future) End() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_subrange_Results capnp.Struct

// TimeSeries_subrange_Results_TypeID is the unique identifier for the type TimeSeries_subrange_Results.
const TimeSeries_subrange_Results_TypeID = 0xf7dfe7147d09b732

func NewTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(st), err
}

func NewRootTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(st), err
}

func ReadRootTimeSeries_subrange_Results(msg *capnp.Message) (TimeSeries_subrange_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Results(root.Struct()), err
}

func (s TimeSeries_subrange_Results) String() string {
	str, _ := text.Marshal(0xf7dfe7147d09b732, capnp.Struct(s))
	return str
}

func (s TimeSeries_subrange_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subrange_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_subrange_Results {
	return TimeSeries_subrange_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subrange_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subrange_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subrange_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subrange_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subrange_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s TimeSeries_subrange_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subrange_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TimeSeries_subrange_Results_List is a list of TimeSeries_subrange_Results.
type TimeSeries_subrange_Results_List = capnp.StructList[TimeSeries_subrange_Results]

// NewTimeSeries_subrange_Results creates a new list of TimeSeries_subrange_Results.
func NewTimeSeries_subrange_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subrange_Results](l), err
}

// TimeSeries_subrange_Results_Future is a wrapper for a TimeSeries_subrange_Results promised by a client call.
type TimeSeries_subrange_Results_Future struct{ *capnp.Future }

func (f TimeSeries_subrange_Results_Future) Struct() (TimeSeries_subrange_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subrange_Results(p.Struct()), err
}
func (p TimeSeries_subrange_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type TimeSeries_subheader_Params capnp.Struct

// TimeSeries_subheader_Params_TypeID is the unique identifier for the type TimeSeries_subheader_Params.
const TimeSeries_subheader_Params_TypeID = 0x8cc364dee8f693b8

func NewTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params(st), err
}

func NewRootTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params(st), err
}

func ReadRootTimeSeries_subheader_Params(msg *capnp.Message) (TimeSeries_subheader_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Params(root.Struct()), err
}

func (s TimeSeries_subheader_Params) String() string {
	str, _ := text.Marshal(0x8cc364dee8f693b8, capnp.Struct(s))
	return str
}

func (s TimeSeries_subheader_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subheader_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subheader_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subheader_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subheader_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subheader_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subheader_Params) Elements() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Element_List(p.List()), err
}

func (s TimeSeries_subheader_Params) HasElements() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subheader_Params) SetElements(v Element_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewElements sets the elements field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_subheader_Params) NewElements(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_subheader_Params_List is a list of TimeSeries_subheader_Params.
type TimeSeries_subheader_Params_List = capnp.StructList[TimeSeries_subheader_Params]

// NewTimeSeries_subheader_Params creates a new list of TimeSeries_subheader_Params.
func NewTimeSeries_subheader_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subheader_Params](l), err
}

// TimeSeries_subheader_Params_Future is a wrapper for a TimeSeries_subheader_Params promised by a client call.
type TimeSeries_subheader_Params_Future struct{ *capnp.Future }

func (f TimeSeries_subheader_Params_Future) Struct() (TimeSeries_subheader_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subheader_Params(p.Struct()), err
}

type TimeSeries_subheader_Results capnp.Struct

// TimeSeries_subheader_Results_TypeID is the unique identifier for the type TimeSeries_subheader_Results.
const TimeSeries_subheader_Results_TypeID = 0xc3238163cae880df

func NewTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(st), err
}

func NewRootTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(st), err
}

func ReadRootTimeSeries_subheader_Results(msg *capnp.Message) (TimeSeries_subheader_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Results(root.Struct()), err
}

func (s TimeSeries_subheader_Results) String() string {
	str, _ := text.Marshal(0xc3238163cae880df, capnp.Struct(s))
	return str
}

func (s TimeSeries_subheader_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subheader_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_subheader_Results {
	return TimeSeries_subheader_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subheader_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subheader_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subheader_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subheader_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subheader_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s TimeSeries_subheader_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subheader_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TimeSeries_subheader_Results_List is a list of TimeSeries_subheader_Results.
type TimeSeries_subheader_Results_List = capnp.StructList[TimeSeries_subheader_Results]

// NewTimeSeries_subheader_Results creates a new list of TimeSeries_subheader_Results.
func NewTimeSeries_subheader_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subheader_Results](l), err
}

// TimeSeries_subheader_Results_Future is a wrapper for a TimeSeries_subheader_Results promised by a client call.
type TimeSeries_subheader_Results_Future struct{ *capnp.Future }

func (f TimeSeries_subheader_Results_Future) Struct() (TimeSeries_subheader_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subheader_Results(p.Struct()), err
}
func (p TimeSeries_subheader_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type TimeSeries_metadata_Params capnp.Struct

// TimeSeries_metadata_Params_TypeID is the unique identifier for the type TimeSeries_metadata_Params.
const TimeSeries_metadata_Params_TypeID = 0xce2cc4225c956634

func NewTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params(st), err
}

func NewRootTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params(st), err
}

func ReadRootTimeSeries_metadata_Params(msg *capnp.Message) (TimeSeries_metadata_Params, error) {
	root, err := msg.Root()
	return TimeSeries_metadata_Params(root.Struct()), err
}

func (s TimeSeries_metadata_Params) String() string {
	str, _ := text.Marshal(0xce2cc4225c956634, capnp.Struct(s))
	return str
}

func (s TimeSeries_metadata_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_metadata_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_metadata_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_metadata_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_metadata_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_metadata_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_metadata_Params_List is a list of TimeSeries_metadata_Params.
type TimeSeries_metadata_Params_List = capnp.StructList[TimeSeries_metadata_Params]

// NewTimeSeries_metadata_Params creates a new list of TimeSeries_metadata_Params.
func NewTimeSeries_metadata_Params_List(s *capnp.Segment, sz int32) (TimeSeries_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_metadata_Params](l), err
}

// TimeSeries_metadata_Params_Future is a wrapper for a TimeSeries_metadata_Params promised by a client call.
type TimeSeries_metadata_Params_Future struct{ *capnp.Future }

func (f TimeSeries_metadata_Params_Future) Struct() (TimeSeries_metadata_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_metadata_Params(p.Struct()), err
}

type TimeSeries_location_Params capnp.Struct

// TimeSeries_location_Params_TypeID is the unique identifier for the type TimeSeries_location_Params.
const TimeSeries_location_Params_TypeID = 0xcb329eb01b0fa313

func NewTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params(st), err
}

func NewRootTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params(st), err
}

func ReadRootTimeSeries_location_Params(msg *capnp.Message) (TimeSeries_location_Params, error) {
	root, err := msg.Root()
	return TimeSeries_location_Params(root.Struct()), err
}

func (s TimeSeries_location_Params) String() string {
	str, _ := text.Marshal(0xcb329eb01b0fa313, capnp.Struct(s))
	return str
}

func (s TimeSeries_location_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_location_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_location_Params {
	return TimeSeries_location_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_location_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_location_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_location_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_location_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_location_Params_List is a list of TimeSeries_location_Params.
type TimeSeries_location_Params_List = capnp.StructList[TimeSeries_location_Params]

// NewTimeSeries_location_Params creates a new list of TimeSeries_location_Params.
func NewTimeSeries_location_Params_List(s *capnp.Segment, sz int32) (TimeSeries_location_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_location_Params](l), err
}

// TimeSeries_location_Params_Future is a wrapper for a TimeSeries_location_Params promised by a client call.
type TimeSeries_location_Params_Future struct{ *capnp.Future }

func (f TimeSeries_location_Params_Future) Struct() (TimeSeries_location_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_location_Params(p.Struct()), err
}

type TimeSeriesData capnp.Struct

// TimeSeriesData_TypeID is the unique identifier for the type TimeSeriesData.
const TimeSeriesData_TypeID = 0xf1c1ccf59bc6964f

func NewTimeSeriesData(s *capnp.Segment) (TimeSeriesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeSeriesData(st), err
}

func NewRootTimeSeriesData(s *capnp.Segment) (TimeSeriesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeSeriesData(st), err
}

func ReadRootTimeSeriesData(msg *capnp.Message) (TimeSeriesData, error) {
	root, err := msg.Root()
	return TimeSeriesData(root.Struct()), err
}

func (s TimeSeriesData) String() string {
	str, _ := text.Marshal(0xf1c1ccf59bc6964f, capnp.Struct(s))
	return str
}

func (s TimeSeriesData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeriesData) DecodeFromPtr(p capnp.Ptr) TimeSeriesData {
	return TimeSeriesData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeriesData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeriesData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeriesData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeriesData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeriesData) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeriesData) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeriesData) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeriesData) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TimeSeriesData) IsTransposed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s TimeSeriesData) SetIsTransposed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s TimeSeriesData) Header() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Element_List(p.List()), err
}

func (s TimeSeriesData) HasHeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeriesData) SetHeader(v Element_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeriesData) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s TimeSeriesData) StartDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeriesData) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TimeSeriesData) SetStartDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeriesData) NewStartDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeriesData) EndDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common_date.Date(p.Struct()), err
}

func (s TimeSeriesData) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s TimeSeriesData) SetEndDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s TimeSeriesData) NewEndDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeriesData) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(capnp.Struct(s).Uint16(2))
}

func (s TimeSeriesData) SetResolution(v TimeSeries_Resolution) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// TimeSeriesData_List is a list of TimeSeriesData.
type TimeSeriesData_List = capnp.StructList[TimeSeriesData]

// NewTimeSeriesData creates a new list of TimeSeriesData.
func NewTimeSeriesData_List(s *capnp.Segment, sz int32) (TimeSeriesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[TimeSeriesData](l), err
}

// TimeSeriesData_Future is a wrapper for a TimeSeriesData promised by a client call.
type TimeSeriesData_Future struct{ *capnp.Future }

func (f TimeSeriesData_Future) Struct() (TimeSeriesData, error) {
	p, err := f.Future.Ptr()
	return TimeSeriesData(p.Struct()), err
}
func (p TimeSeriesData_Future) StartDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p TimeSeriesData_Future) EndDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(3, nil)}
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xfe7d08d4352b0c5f

func (c Service) GetAvailableDatasets(ctx context.Context, params func(Service_getAvailableDatasets_Params) error) (Service_getAvailableDatasets_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAvailableDatasets_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getAvailableDatasets_Results_Future{Future: ans.Future()}, release

}

func (c Service) GetDatasetsFor(ctx context.Context, params func(Service_getDatasetsFor_Params) error) (Service_getDatasetsFor_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getDatasetsFor_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getDatasetsFor_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	GetAvailableDatasets(context.Context, Service_getAvailableDatasets) error

	GetDatasetsFor(context.Context, Service_getDatasetsFor) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAvailableDatasets(ctx, Service_getAvailableDatasets{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDatasetsFor(ctx, Service_getDatasetsFor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_getAvailableDatasets holds the state for a server call to Service.getAvailableDatasets.
// See server.Call for documentation.
type Service_getAvailableDatasets struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAvailableDatasets) Args() Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getAvailableDatasets) AllocResults() (Service_getAvailableDatasets_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(r), err
}

// Service_getDatasetsFor holds the state for a server call to Service.getDatasetsFor.
// See server.Call for documentation.
type Service_getDatasetsFor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getDatasetsFor) Args() Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getDatasetsFor) AllocResults() (Service_getDatasetsFor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_getAvailableDatasets_Params capnp.Struct

// Service_getAvailableDatasets_Params_TypeID is the unique identifier for the type Service_getAvailableDatasets_Params.
const Service_getAvailableDatasets_Params_TypeID = 0x804cca489405d451

func NewService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params(st), err
}

func NewRootService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params(st), err
}

func ReadRootService_getAvailableDatasets_Params(msg *capnp.Message) (Service_getAvailableDatasets_Params, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Params(root.Struct()), err
}

func (s Service_getAvailableDatasets_Params) String() string {
	str, _ := text.Marshal(0x804cca489405d451, capnp.Struct(s))
	return str
}

func (s Service_getAvailableDatasets_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAvailableDatasets_Params) DecodeFromPtr(p capnp.Ptr) Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAvailableDatasets_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAvailableDatasets_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAvailableDatasets_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAvailableDatasets_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Service_getAvailableDatasets_Params_List is a list of Service_getAvailableDatasets_Params.
type Service_getAvailableDatasets_Params_List = capnp.StructList[Service_getAvailableDatasets_Params]

// NewService_getAvailableDatasets_Params creates a new list of Service_getAvailableDatasets_Params.
func NewService_getAvailableDatasets_Params_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_getAvailableDatasets_Params](l), err
}

// Service_getAvailableDatasets_Params_Future is a wrapper for a Service_getAvailableDatasets_Params promised by a client call.
type Service_getAvailableDatasets_Params_Future struct{ *capnp.Future }

func (f Service_getAvailableDatasets_Params_Future) Struct() (Service_getAvailableDatasets_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getAvailableDatasets_Params(p.Struct()), err
}

type Service_getAvailableDatasets_Results capnp.Struct

// Service_getAvailableDatasets_Results_TypeID is the unique identifier for the type Service_getAvailableDatasets_Results.
const Service_getAvailableDatasets_Results_TypeID = 0x916880859435c6e8

func NewService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(st), err
}

func NewRootService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(st), err
}

func ReadRootService_getAvailableDatasets_Results(msg *capnp.Message) (Service_getAvailableDatasets_Results, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Results(root.Struct()), err
}

func (s Service_getAvailableDatasets_Results) String() string {
	str, _ := text.Marshal(0x916880859435c6e8, capnp.Struct(s))
	return str
}

func (s Service_getAvailableDatasets_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAvailableDatasets_Results) DecodeFromPtr(p capnp.Ptr) Service_getAvailableDatasets_Results {
	return Service_getAvailableDatasets_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAvailableDatasets_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAvailableDatasets_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAvailableDatasets_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAvailableDatasets_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getAvailableDatasets_Results) Datasets() (MetaPlusData_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MetaPlusData_List(p.List()), err
}

func (s Service_getAvailableDatasets_Results) HasDatasets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getAvailableDatasets_Results) SetDatasets(v MetaPlusData_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated MetaPlusData_List, preferring placement in s's segment.
func (s Service_getAvailableDatasets_Results) NewDatasets(n int32) (MetaPlusData_List, error) {
	l, err := NewMetaPlusData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MetaPlusData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_getAvailableDatasets_Results_List is a list of Service_getAvailableDatasets_Results.
type Service_getAvailableDatasets_Results_List = capnp.StructList[Service_getAvailableDatasets_Results]

// NewService_getAvailableDatasets_Results creates a new list of Service_getAvailableDatasets_Results.
func NewService_getAvailableDatasets_Results_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getAvailableDatasets_Results](l), err
}

// Service_getAvailableDatasets_Results_Future is a wrapper for a Service_getAvailableDatasets_Results promised by a client call.
type Service_getAvailableDatasets_Results_Future struct{ *capnp.Future }

func (f Service_getAvailableDatasets_Results_Future) Struct() (Service_getAvailableDatasets_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getAvailableDatasets_Results(p.Struct()), err
}

type Service_getDatasetsFor_Params capnp.Struct

// Service_getDatasetsFor_Params_TypeID is the unique identifier for the type Service_getDatasetsFor_Params.
const Service_getDatasetsFor_Params_TypeID = 0x9d7d1f83dda3e6db

func NewService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params(st), err
}

func NewRootService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params(st), err
}

func ReadRootService_getDatasetsFor_Params(msg *capnp.Message) (Service_getDatasetsFor_Params, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Params(root.Struct()), err
}

func (s Service_getDatasetsFor_Params) String() string {
	str, _ := text.Marshal(0x9d7d1f83dda3e6db, capnp.Struct(s))
	return str
}

func (s Service_getDatasetsFor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getDatasetsFor_Params) DecodeFromPtr(p capnp.Ptr) Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getDatasetsFor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getDatasetsFor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getDatasetsFor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getDatasetsFor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getDatasetsFor_Params) Template() (Metadata, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata(p.Struct()), err
}

func (s Service_getDatasetsFor_Params) HasTemplate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getDatasetsFor_Params) SetTemplate(v Metadata) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTemplate sets the template field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s Service_getDatasetsFor_Params) NewTemplate() (Metadata, error) {
	ss, err := NewMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Service_getDatasetsFor_Params_List is a list of Service_getDatasetsFor_Params.
type Service_getDatasetsFor_Params_List = capnp.StructList[Service_getDatasetsFor_Params]

// NewService_getDatasetsFor_Params creates a new list of Service_getDatasetsFor_Params.
func NewService_getDatasetsFor_Params_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDatasetsFor_Params](l), err
}

// Service_getDatasetsFor_Params_Future is a wrapper for a Service_getDatasetsFor_Params promised by a client call.
type Service_getDatasetsFor_Params_Future struct{ *capnp.Future }

func (f Service_getDatasetsFor_Params_Future) Struct() (Service_getDatasetsFor_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getDatasetsFor_Params(p.Struct()), err
}
func (p Service_getDatasetsFor_Params_Future) Template() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}

type Service_getDatasetsFor_Results capnp.Struct

// Service_getDatasetsFor_Results_TypeID is the unique identifier for the type Service_getDatasetsFor_Results.
const Service_getDatasetsFor_Results_TypeID = 0xcd95f79174b0eab0

func NewService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(st), err
}

func NewRootService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(st), err
}

func ReadRootService_getDatasetsFor_Results(msg *capnp.Message) (Service_getDatasetsFor_Results, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Results(root.Struct()), err
}

func (s Service_getDatasetsFor_Results) String() string {
	str, _ := text.Marshal(0xcd95f79174b0eab0, capnp.Struct(s))
	return str
}

func (s Service_getDatasetsFor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getDatasetsFor_Results) DecodeFromPtr(p capnp.Ptr) Service_getDatasetsFor_Results {
	return Service_getDatasetsFor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getDatasetsFor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getDatasetsFor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getDatasetsFor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getDatasetsFor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getDatasetsFor_Results) Datasets() (Dataset_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Dataset_List(p.List()), err
}

func (s Service_getDatasetsFor_Results) HasDatasets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getDatasetsFor_Results) SetDatasets(v Dataset_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated Dataset_List, preferring placement in s's segment.
func (s Service_getDatasetsFor_Results) NewDatasets(n int32) (Dataset_List, error) {
	l, err := NewDataset_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Dataset_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_getDatasetsFor_Results_List is a list of Service_getDatasetsFor_Results.
type Service_getDatasetsFor_Results_List = capnp.StructList[Service_getDatasetsFor_Results]

// NewService_getDatasetsFor_Results creates a new list of Service_getDatasetsFor_Results.
func NewService_getDatasetsFor_Results_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDatasetsFor_Results](l), err
}

// Service_getDatasetsFor_Results_Future is a wrapper for a Service_getDatasetsFor_Results promised by a client call.
type Service_getDatasetsFor_Results_Future struct{ *capnp.Future }

func (f Service_getDatasetsFor_Results_Future) Struct() (Service_getDatasetsFor_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getDatasetsFor_Results(p.Struct()), err
}

type CSVTimeSeriesFactory capnp.Client

// CSVTimeSeriesFactory_TypeID is the unique identifier for the type CSVTimeSeriesFactory.
const CSVTimeSeriesFactory_TypeID = 0xa418c26cc59929d9

func (c CSVTimeSeriesFactory) Create(ctx context.Context, params func(CSVTimeSeriesFactory_create_Params) error) (CSVTimeSeriesFactory_create_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CSVTimeSeriesFactory_create_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CSVTimeSeriesFactory_create_Results_Future{Future: ans.Future()}, release

}

func (c CSVTimeSeriesFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c CSVTimeSeriesFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CSVTimeSeriesFactory) String() string {
	return "CSVTimeSeriesFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CSVTimeSeriesFactory) AddRef() CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CSVTimeSeriesFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CSVTimeSeriesFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CSVTimeSeriesFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CSVTimeSeriesFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CSVTimeSeriesFactory) IsSame(other CSVTimeSeriesFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CSVTimeSeriesFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CSVTimeSeriesFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A CSVTimeSeriesFactory_Server is a CSVTimeSeriesFactory with a local implementation.
type CSVTimeSeriesFactory_Server interface {
	Create(context.Context, CSVTimeSeriesFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// CSVTimeSeriesFactory_NewServer creates a new Server from an implementation of CSVTimeSeriesFactory_Server.
func CSVTimeSeriesFactory_NewServer(s CSVTimeSeriesFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CSVTimeSeriesFactory_Methods(nil, s), s, c)
}

// CSVTimeSeriesFactory_ServerToClient creates a new Client from an implementation of CSVTimeSeriesFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func CSVTimeSeriesFactory_ServerToClient(s CSVTimeSeriesFactory_Server) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.NewClient(CSVTimeSeriesFactory_NewServer(s)))
}

// CSVTimeSeriesFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CSVTimeSeriesFactory_Methods(methods []server.Method, s CSVTimeSeriesFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, CSVTimeSeriesFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// CSVTimeSeriesFactory_create holds the state for a server call to CSVTimeSeriesFactory.create.
// See server.Call for documentation.
type CSVTimeSeriesFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CSVTimeSeriesFactory_create) Args() CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CSVTimeSeriesFactory_create) AllocResults() (CSVTimeSeriesFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(r), err
}

// CSVTimeSeriesFactory_List is a list of CSVTimeSeriesFactory.
type CSVTimeSeriesFactory_List = capnp.CapList[CSVTimeSeriesFactory]

// NewCSVTimeSeriesFactory creates a new list of CSVTimeSeriesFactory.
func NewCSVTimeSeriesFactory_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CSVTimeSeriesFactory](l), err
}

type CSVTimeSeriesFactory_CSVConfig capnp.Struct

// CSVTimeSeriesFactory_CSVConfig_TypeID is the unique identifier for the type CSVTimeSeriesFactory_CSVConfig.
const CSVTimeSeriesFactory_CSVConfig_TypeID = 0xeba81ca9f46690b8

func NewCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig(st), err
}

func NewRootCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig(st), err
}

func ReadRootCSVTimeSeriesFactory_CSVConfig(msg *capnp.Message) (CSVTimeSeriesFactory_CSVConfig, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_CSVConfig(root.Struct()), err
}

func (s CSVTimeSeriesFactory_CSVConfig) String() string {
	str, _ := text.Marshal(0xeba81ca9f46690b8, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_CSVConfig) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_CSVConfig) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_CSVConfig {
	return CSVTimeSeriesFactory_CSVConfig(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_CSVConfig) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_CSVConfig) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_CSVConfig) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_CSVConfig) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_CSVConfig) Sep() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasSep() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_CSVConfig) SepBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytesDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSep(v string) error {
	return capnp.Struct(s).SetNewText(0, v)
}

func (s CSVTimeSeriesFactory_CSVConfig) HeaderMap() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Pair_List(p.List()), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasHeaderMap() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetHeaderMap(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeaderMap sets the headerMap field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_CSVConfig) NewHeaderMap(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesToHeader() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesToHeader(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesFromHeaderToData() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesFromHeaderToData(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

// CSVTimeSeriesFactory_CSVConfig_List is a list of CSVTimeSeriesFactory_CSVConfig.
type CSVTimeSeriesFactory_CSVConfig_List = capnp.StructList[CSVTimeSeriesFactory_CSVConfig]

// NewCSVTimeSeriesFactory_CSVConfig creates a new list of CSVTimeSeriesFactory_CSVConfig.
func NewCSVTimeSeriesFactory_CSVConfig_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_CSVConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_CSVConfig](l), err
}

// CSVTimeSeriesFactory_CSVConfig_Future is a wrapper for a CSVTimeSeriesFactory_CSVConfig promised by a client call.
type CSVTimeSeriesFactory_CSVConfig_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_CSVConfig_Future) Struct() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_CSVConfig(p.Struct()), err
}

type CSVTimeSeriesFactory_create_Params capnp.Struct

// CSVTimeSeriesFactory_create_Params_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Params.
const CSVTimeSeriesFactory_create_Params_TypeID = 0xcfaa8d2601750547

func NewCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params(st), err
}

func NewRootCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params(st), err
}

func ReadRootCSVTimeSeriesFactory_create_Params(msg *capnp.Message) (CSVTimeSeriesFactory_create_Params, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Params(root.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Params) String() string {
	str, _ := text.Marshal(0xcfaa8d2601750547, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_create_Params) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_create_Params) CsvData() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Params) HasCsvData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Params) CsvDataBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Params) SetCsvData(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CSVTimeSeriesFactory_create_Params) Config() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CSVTimeSeriesFactory_CSVConfig(p.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Params) HasConfig() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Params) SetConfig(v CSVTimeSeriesFactory_CSVConfig) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewConfig sets the config field to a newly
// allocated CSVTimeSeriesFactory_CSVConfig struct, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_create_Params) NewConfig() (CSVTimeSeriesFactory_CSVConfig, error) {
	ss, err := NewCSVTimeSeriesFactory_CSVConfig(capnp.Struct(s).Segment())
	if err != nil {
		return CSVTimeSeriesFactory_CSVConfig{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CSVTimeSeriesFactory_create_Params_List is a list of CSVTimeSeriesFactory_create_Params.
type CSVTimeSeriesFactory_create_Params_List = capnp.StructList[CSVTimeSeriesFactory_create_Params]

// NewCSVTimeSeriesFactory_create_Params creates a new list of CSVTimeSeriesFactory_create_Params.
func NewCSVTimeSeriesFactory_create_Params_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_create_Params](l), err
}

// CSVTimeSeriesFactory_create_Params_Future is a wrapper for a CSVTimeSeriesFactory_create_Params promised by a client call.
type CSVTimeSeriesFactory_create_Params_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_create_Params_Future) Struct() (CSVTimeSeriesFactory_create_Params, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_create_Params(p.Struct()), err
}
func (p CSVTimeSeriesFactory_create_Params_Future) Config() CSVTimeSeriesFactory_CSVConfig_Future {
	return CSVTimeSeriesFactory_CSVConfig_Future{Future: p.Future.Field(1, nil)}
}

type CSVTimeSeriesFactory_create_Results capnp.Struct

// CSVTimeSeriesFactory_create_Results_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Results.
const CSVTimeSeriesFactory_create_Results_TypeID = 0xefefafebc8ae5534

func NewCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(st), err
}

func NewRootCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(st), err
}

func ReadRootCSVTimeSeriesFactory_create_Results(msg *capnp.Message) (CSVTimeSeriesFactory_create_Results, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Results(root.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Results) String() string {
	str, _ := text.Marshal(0xefefafebc8ae5534, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_create_Results) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_create_Results {
	return CSVTimeSeriesFactory_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_create_Results) Timeseries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s CSVTimeSeriesFactory_create_Results) HasTimeseries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Results) SetTimeseries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s CSVTimeSeriesFactory_create_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CSVTimeSeriesFactory_create_Results_List is a list of CSVTimeSeriesFactory_create_Results.
type CSVTimeSeriesFactory_create_Results_List = capnp.StructList[CSVTimeSeriesFactory_create_Results]

// NewCSVTimeSeriesFactory_create_Results creates a new list of CSVTimeSeriesFactory_create_Results.
func NewCSVTimeSeriesFactory_create_Results_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_create_Results](l), err
}

// CSVTimeSeriesFactory_create_Results_Future is a wrapper for a CSVTimeSeriesFactory_create_Results promised by a client call.
type CSVTimeSeriesFactory_create_Results_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_create_Results_Future) Struct() (CSVTimeSeriesFactory_create_Results, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_create_Results(p.Struct()), err
}
func (p CSVTimeSeriesFactory_create_Results_Future) Timeseries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper capnp.Client

// AlterTimeSeriesWrapper_TypeID is the unique identifier for the type AlterTimeSeriesWrapper.
const AlterTimeSeriesWrapper_TypeID = 0xe1f480ef979784b2

func (c AlterTimeSeriesWrapper) WrappedTimeSeries(ctx context.Context, params func(AlterTimeSeriesWrapper_wrappedTimeSeries_Params) error) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_wrappedTimeSeries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) AlteredElements(ctx context.Context, params func(AlterTimeSeriesWrapper_alteredElements_Params) error) (AlterTimeSeriesWrapper_alteredElements_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alteredElements_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alteredElements_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Alter(ctx context.Context, params func(AlterTimeSeriesWrapper_alter_Params) error) (AlterTimeSeriesWrapper_alter_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alter_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alter_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Remove(ctx context.Context, params func(AlterTimeSeriesWrapper_remove_Params) error) (AlterTimeSeriesWrapper_remove_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_remove_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_remove_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) ReplaceWrappedTimeSeries(ctx context.Context, params func(AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) error) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      4,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "replaceWrappedTimeSeries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapper) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AlterTimeSeriesWrapper) String() string {
	return "AlterTimeSeriesWrapper(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AlterTimeSeriesWrapper) AddRef() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AlterTimeSeriesWrapper) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AlterTimeSeriesWrapper) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AlterTimeSeriesWrapper) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AlterTimeSeriesWrapper) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AlterTimeSeriesWrapper) IsSame(other AlterTimeSeriesWrapper) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AlterTimeSeriesWrapper) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AlterTimeSeriesWrapper) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AlterTimeSeriesWrapper_Server is a AlterTimeSeriesWrapper with a local implementation.
type AlterTimeSeriesWrapper_Server interface {
	WrappedTimeSeries(context.Context, AlterTimeSeriesWrapper_wrappedTimeSeries) error

	AlteredElements(context.Context, AlterTimeSeriesWrapper_alteredElements) error

	Alter(context.Context, AlterTimeSeriesWrapper_alter) error

	Remove(context.Context, AlterTimeSeriesWrapper_remove) error

	ReplaceWrappedTimeSeries(context.Context, AlterTimeSeriesWrapper_replaceWrappedTimeSeries) error

	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// AlterTimeSeriesWrapper_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapper_Server.
func AlterTimeSeriesWrapper_NewServer(s AlterTimeSeriesWrapper_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapper_Methods(nil, s), s, c)
}

// AlterTimeSeriesWrapper_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapper_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapper_ServerToClient(s AlterTimeSeriesWrapper_Server) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.NewClient(AlterTimeSeriesWrapper_NewServer(s)))
}

// AlterTimeSeriesWrapper_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapper_Methods(methods []server.Method, s AlterTimeSeriesWrapper_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 16)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WrappedTimeSeries(ctx, AlterTimeSeriesWrapper_wrappedTimeSeries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AlteredElements(ctx, AlterTimeSeriesWrapper_alteredElements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Alter(ctx, AlterTimeSeriesWrapper_alter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Remove(ctx, AlterTimeSeriesWrapper_remove{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      4,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "replaceWrappedTimeSeries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReplaceWrappedTimeSeries(ctx, AlterTimeSeriesWrapper_replaceWrappedTimeSeries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapper_wrappedTimeSeries holds the state for a server call to AlterTimeSeriesWrapper.wrappedTimeSeries.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_wrappedTimeSeries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) Args() AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) AllocResults() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(r), err
}

// AlterTimeSeriesWrapper_alteredElements holds the state for a server call to AlterTimeSeriesWrapper.alteredElements.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alteredElements struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alteredElements) Args() AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alteredElements) AllocResults() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(r), err
}

// AlterTimeSeriesWrapper_alter holds the state for a server call to AlterTimeSeriesWrapper.alter.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alter) Args() AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alter) AllocResults() (AlterTimeSeriesWrapper_alter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(r), err
}

// AlterTimeSeriesWrapper_remove holds the state for a server call to AlterTimeSeriesWrapper.remove.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_remove struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_remove) Args() AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_remove) AllocResults() (AlterTimeSeriesWrapper_remove_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(r), err
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries holds the state for a server call to AlterTimeSeriesWrapper.replaceWrappedTimeSeries.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_replaceWrappedTimeSeries) Args() AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_replaceWrappedTimeSeries) AllocResults() (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(r), err
}

// AlterTimeSeriesWrapper_List is a list of AlterTimeSeriesWrapper.
type AlterTimeSeriesWrapper_List = capnp.CapList[AlterTimeSeriesWrapper]

// NewAlterTimeSeriesWrapper creates a new list of AlterTimeSeriesWrapper.
func NewAlterTimeSeriesWrapper_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AlterTimeSeriesWrapper](l), err
}

type AlterTimeSeriesWrapper_Altered capnp.Struct

// AlterTimeSeriesWrapper_Altered_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_Altered.
const AlterTimeSeriesWrapper_Altered_TypeID = 0xd085b9baf390bec5

func NewAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered(st), err
}

func NewRootAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered(st), err
}

func ReadRootAlterTimeSeriesWrapper_Altered(msg *capnp.Message) (AlterTimeSeriesWrapper_Altered, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_Altered(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_Altered) String() string {
	str, _ := text.Marshal(0xd085b9baf390bec5, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_Altered) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_Altered) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_Altered {
	return AlterTimeSeriesWrapper_Altered(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_Altered) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_Altered) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_Altered) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_Altered) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_Altered) Element() Element {
	return Element(capnp.Struct(s).Uint16(0))
}

func (s AlterTimeSeriesWrapper_Altered) SetElement(v Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s AlterTimeSeriesWrapper_Altered) Value() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s AlterTimeSeriesWrapper_Altered) SetValue(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s AlterTimeSeriesWrapper_Altered) Type() AlterTimeSeriesWrapper_AlterType {
	return AlterTimeSeriesWrapper_AlterType(capnp.Struct(s).Uint16(2))
}

func (s AlterTimeSeriesWrapper_Altered) SetType(v AlterTimeSeriesWrapper_AlterType) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// AlterTimeSeriesWrapper_Altered_List is a list of AlterTimeSeriesWrapper_Altered.
type AlterTimeSeriesWrapper_Altered_List = capnp.StructList[AlterTimeSeriesWrapper_Altered]

// NewAlterTimeSeriesWrapper_Altered creates a new list of AlterTimeSeriesWrapper_Altered.
func NewAlterTimeSeriesWrapper_Altered_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_Altered](l), err
}

// AlterTimeSeriesWrapper_Altered_Future is a wrapper for a AlterTimeSeriesWrapper_Altered promised by a client call.
type AlterTimeSeriesWrapper_Altered_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_Altered_Future) Struct() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_Altered(p.Struct()), err
}

type AlterTimeSeriesWrapper_AlterType uint16

// AlterTimeSeriesWrapper_AlterType_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_AlterType.
const AlterTimeSeriesWrapper_AlterType_TypeID = 0xb5dd785107c358ca

// Values of AlterTimeSeriesWrapper_AlterType.
const (
	AlterTimeSeriesWrapper_AlterType_add AlterTimeSeriesWrapper_AlterType = 0
	AlterTimeSeriesWrapper_AlterType_mul AlterTimeSeriesWrapper_AlterType = 1
)

// String returns the enum's constant name.
func (c AlterTimeSeriesWrapper_AlterType) String() string {
	switch c {
	case AlterTimeSeriesWrapper_AlterType_add:
		return "add"
	case AlterTimeSeriesWrapper_AlterType_mul:
		return "mul"

	default:
		return ""
	}
}

// AlterTimeSeriesWrapper_AlterTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AlterTimeSeriesWrapper_AlterTypeFromString(c string) AlterTimeSeriesWrapper_AlterType {
	switch c {
	case "add":
		return AlterTimeSeriesWrapper_AlterType_add
	case "mul":
		return AlterTimeSeriesWrapper_AlterType_mul

	default:
		return 0
	}
}

type AlterTimeSeriesWrapper_AlterType_List = capnp.EnumList[AlterTimeSeriesWrapper_AlterType]

func NewAlterTimeSeriesWrapper_AlterType_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_AlterType_List, error) {
	return capnp.NewEnumList[AlterTimeSeriesWrapper_AlterType](s, sz)
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Params capnp.Struct

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID = 0xe31f26eed9fb36a9

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) String() string {
	str, _ := text.Marshal(0xe31f26eed9fb36a9, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_wrappedTimeSeries_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List = capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Params]

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Params](l), err
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Params promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Results capnp.Struct

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID = 0xfb2eddb58f90f7aa

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) String() string {
	str, _ := text.Marshal(0xfb2eddb58f90f7aa, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_wrappedTimeSeries_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_wrappedTimeSeries_Results {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List = capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Results]

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Results](l), err
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Results promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_alteredElements_Params capnp.Struct

// AlterTimeSeriesWrapper_alteredElements_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Params.
const AlterTimeSeriesWrapper_alteredElements_Params_TypeID = 0xcba0220cda41869e

func NewAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) String() string {
	str, _ := text.Marshal(0xcba0220cda41869e, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alteredElements_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alteredElements_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_alteredElements_Params_List is a list of AlterTimeSeriesWrapper_alteredElements_Params.
type AlterTimeSeriesWrapper_alteredElements_Params_List = capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Params]

// NewAlterTimeSeriesWrapper_alteredElements_Params creates a new list of AlterTimeSeriesWrapper_alteredElements_Params.
func NewAlterTimeSeriesWrapper_alteredElements_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Params](l), err
}

// AlterTimeSeriesWrapper_alteredElements_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Params promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alteredElements_Params_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alteredElements_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_alteredElements_Results capnp.Struct

// AlterTimeSeriesWrapper_alteredElements_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Results.
const AlterTimeSeriesWrapper_alteredElements_Results_TypeID = 0xdd5b75b5bc711766

func NewAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) String() string {
	str, _ := text.Marshal(0xdd5b75b5bc711766, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alteredElements_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alteredElements_Results {
	return AlterTimeSeriesWrapper_alteredElements_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alteredElements_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alteredElements_Results) List() (AlterTimeSeriesWrapper_Altered_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper_Altered_List(p.List()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) SetList(v AlterTimeSeriesWrapper_Altered_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated AlterTimeSeriesWrapper_Altered_List, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alteredElements_Results) NewList(n int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := NewAlterTimeSeriesWrapper_Altered_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AlterTimeSeriesWrapper_Altered_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AlterTimeSeriesWrapper_alteredElements_Results_List is a list of AlterTimeSeriesWrapper_alteredElements_Results.
type AlterTimeSeriesWrapper_alteredElements_Results_List = capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Results]

// NewAlterTimeSeriesWrapper_alteredElements_Results creates a new list of AlterTimeSeriesWrapper_alteredElements_Results.
func NewAlterTimeSeriesWrapper_alteredElements_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Results](l), err
}

// AlterTimeSeriesWrapper_alteredElements_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Results promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alteredElements_Results_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alteredElements_Results(p.Struct()), err
}

type AlterTimeSeriesWrapper_alter_Params capnp.Struct

// AlterTimeSeriesWrapper_alter_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Params.
const AlterTimeSeriesWrapper_alter_Params_TypeID = 0xd36b1e9c2929e6e4

func NewAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_alter_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Params) String() string {
	str, _ := text.Marshal(0xd36b1e9c2929e6e4, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alter_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alter_Params) Desc() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper_Altered(p.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Params) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetDesc(v AlterTimeSeriesWrapper_Altered) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDesc sets the desc field to a newly
// allocated AlterTimeSeriesWrapper_Altered struct, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alter_Params) NewDesc() (AlterTimeSeriesWrapper_Altered, error) {
	ss, err := NewAlterTimeSeriesWrapper_Altered(capnp.Struct(s).Segment())
	if err != nil {
		return AlterTimeSeriesWrapper_Altered{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AlterTimeSeriesWrapper_alter_Params) AsNewTimeSeries() bool {
	return capnp.Struct(s).Bit(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetAsNewTimeSeries(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// AlterTimeSeriesWrapper_alter_Params_List is a list of AlterTimeSeriesWrapper_alter_Params.
type AlterTimeSeriesWrapper_alter_Params_List = capnp.StructList[AlterTimeSeriesWrapper_alter_Params]

// NewAlterTimeSeriesWrapper_alter_Params creates a new list of AlterTimeSeriesWrapper_alter_Params.
func NewAlterTimeSeriesWrapper_alter_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alter_Params](l), err
}

// AlterTimeSeriesWrapper_alter_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Params promised by a client call.
type AlterTimeSeriesWrapper_alter_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alter_Params_Future) Struct() (AlterTimeSeriesWrapper_alter_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alter_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_alter_Params_Future) Desc() AlterTimeSeriesWrapper_Altered_Future {
	return AlterTimeSeriesWrapper_Altered_Future{Future: p.Future.Field(0, nil)}
}

type AlterTimeSeriesWrapper_alter_Results capnp.Struct

// AlterTimeSeriesWrapper_alter_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Results.
const AlterTimeSeriesWrapper_alter_Results_TypeID = 0xc4a1ec6280be841c

func NewAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_alter_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Results) String() string {
	str, _ := text.Marshal(0xc4a1ec6280be841c, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alter_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alter_Results {
	return AlterTimeSeriesWrapper_alter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alter_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_alter_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_alter_Results_List is a list of AlterTimeSeriesWrapper_alter_Results.
type AlterTimeSeriesWrapper_alter_Results_List = capnp.StructList[AlterTimeSeriesWrapper_alter_Results]

// NewAlterTimeSeriesWrapper_alter_Results creates a new list of AlterTimeSeriesWrapper_alter_Results.
func NewAlterTimeSeriesWrapper_alter_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alter_Results](l), err
}

// AlterTimeSeriesWrapper_alter_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Results promised by a client call.
type AlterTimeSeriesWrapper_alter_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alter_Results_Future) Struct() (AlterTimeSeriesWrapper_alter_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alter_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_alter_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_remove_Params capnp.Struct

// AlterTimeSeriesWrapper_remove_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Params.
const AlterTimeSeriesWrapper_remove_Params_TypeID = 0xdb7bfcfe4d45ff53

func NewAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_remove_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_remove_Params) String() string {
	str, _ := text.Marshal(0xdb7bfcfe4d45ff53, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_remove_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_remove_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_remove_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_remove_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_remove_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_remove_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_remove_Params) AlteredElement() Element {
	return Element(capnp.Struct(s).Uint16(0))
}

func (s AlterTimeSeriesWrapper_remove_Params) SetAlteredElement(v Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// AlterTimeSeriesWrapper_remove_Params_List is a list of AlterTimeSeriesWrapper_remove_Params.
type AlterTimeSeriesWrapper_remove_Params_List = capnp.StructList[AlterTimeSeriesWrapper_remove_Params]

// NewAlterTimeSeriesWrapper_remove_Params creates a new list of AlterTimeSeriesWrapper_remove_Params.
func NewAlterTimeSeriesWrapper_remove_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_remove_Params](l), err
}

// AlterTimeSeriesWrapper_remove_Params_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Params promised by a client call.
type AlterTimeSeriesWrapper_remove_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_remove_Params_Future) Struct() (AlterTimeSeriesWrapper_remove_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_remove_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_remove_Results capnp.Struct

// AlterTimeSeriesWrapper_remove_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Results.
const AlterTimeSeriesWrapper_remove_Results_TypeID = 0xf44980b23013003b

func NewAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_remove_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_remove_Results) String() string {
	str, _ := text.Marshal(0xf44980b23013003b, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_remove_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_remove_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_remove_Results {
	return AlterTimeSeriesWrapper_remove_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_remove_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_remove_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_remove_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_remove_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_remove_Results_List is a list of AlterTimeSeriesWrapper_remove_Results.
type AlterTimeSeriesWrapper_remove_Results_List = capnp.StructList[AlterTimeSeriesWrapper_remove_Results]

// NewAlterTimeSeriesWrapper_remove_Results creates a new list of AlterTimeSeriesWrapper_remove_Results.
func NewAlterTimeSeriesWrapper_remove_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_remove_Results](l), err
}

// AlterTimeSeriesWrapper_remove_Results_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Results promised by a client call.
type AlterTimeSeriesWrapper_remove_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_remove_Results_Future) Struct() (AlterTimeSeriesWrapper_remove_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_remove_Results(p.Struct()), err
}

type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params capnp.Struct

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params.
const AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_TypeID = 0x8f08162dbd7e5068

func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) String() string {
	str, _ := text.Marshal(0x8f08162dbd7e5068, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List is a list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List = capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params]

// NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params creates a new list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params.
func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params](l), err
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future is a wrapper for a AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params promised by a client call.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future) Struct() (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Params_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results capnp.Struct

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results.
const AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_TypeID = 0x8b0a787e82cd94bb

func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) String() string {
	str, _ := text.Marshal(0x8b0a787e82cd94bb, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results {
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List is a list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List = capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results]

// NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results creates a new list of AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results.
func NewAlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results](l), err
}

// AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future is a wrapper for a AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results promised by a client call.
type AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results_Future) Struct() (AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_replaceWrappedTimeSeries_Results(p.Struct()), err
}

type AlterTimeSeriesWrapperFactory capnp.Client

// AlterTimeSeriesWrapperFactory_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory.
const AlterTimeSeriesWrapperFactory_TypeID = 0xc5f12df0a2a52744

func (c AlterTimeSeriesWrapperFactory) Wrap(ctx context.Context, params func(AlterTimeSeriesWrapperFactory_wrap_Params) error) (AlterTimeSeriesWrapperFactory_wrap_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapperFactory_wrap_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapperFactory_wrap_Results_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapperFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c AlterTimeSeriesWrapperFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AlterTimeSeriesWrapperFactory) String() string {
	return "AlterTimeSeriesWrapperFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AlterTimeSeriesWrapperFactory) AddRef() AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AlterTimeSeriesWrapperFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AlterTimeSeriesWrapperFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AlterTimeSeriesWrapperFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AlterTimeSeriesWrapperFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AlterTimeSeriesWrapperFactory) IsSame(other AlterTimeSeriesWrapperFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AlterTimeSeriesWrapperFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AlterTimeSeriesWrapperFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AlterTimeSeriesWrapperFactory_Server is a AlterTimeSeriesWrapperFactory with a local implementation.
type AlterTimeSeriesWrapperFactory_Server interface {
	Wrap(context.Context, AlterTimeSeriesWrapperFactory_wrap) error

	Info(context.Context, common.Identifiable_info) error
}

// AlterTimeSeriesWrapperFactory_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapperFactory_Server.
func AlterTimeSeriesWrapperFactory_NewServer(s AlterTimeSeriesWrapperFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapperFactory_Methods(nil, s), s, c)
}

// AlterTimeSeriesWrapperFactory_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapperFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapperFactory_ServerToClient(s AlterTimeSeriesWrapperFactory_Server) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.NewClient(AlterTimeSeriesWrapperFactory_NewServer(s)))
}

// AlterTimeSeriesWrapperFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapperFactory_Methods(methods []server.Method, s AlterTimeSeriesWrapperFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wrap(ctx, AlterTimeSeriesWrapperFactory_wrap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapperFactory_wrap holds the state for a server call to AlterTimeSeriesWrapperFactory.wrap.
// See server.Call for documentation.
type AlterTimeSeriesWrapperFactory_wrap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapperFactory_wrap) Args() AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapperFactory_wrap) AllocResults() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(r), err
}

// AlterTimeSeriesWrapperFactory_List is a list of AlterTimeSeriesWrapperFactory.
type AlterTimeSeriesWrapperFactory_List = capnp.CapList[AlterTimeSeriesWrapperFactory]

// NewAlterTimeSeriesWrapperFactory creates a new list of AlterTimeSeriesWrapperFactory.
func NewAlterTimeSeriesWrapperFactory_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AlterTimeSeriesWrapperFactory](l), err
}

type AlterTimeSeriesWrapperFactory_wrap_Params capnp.Struct

// AlterTimeSeriesWrapperFactory_wrap_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Params.
const AlterTimeSeriesWrapperFactory_wrap_Params_TypeID = 0x95064806dc018bfe

func NewAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params(st), err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params(st), err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Params(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) String() string {
	str, _ := text.Marshal(0x95064806dc018bfe, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory_wrap_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Params) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Params_List is a list of AlterTimeSeriesWrapperFactory_wrap_Params.
type AlterTimeSeriesWrapperFactory_wrap_Params_List = capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Params]

// NewAlterTimeSeriesWrapperFactory_wrap_Params creates a new list of AlterTimeSeriesWrapperFactory_wrap_Params.
func NewAlterTimeSeriesWrapperFactory_wrap_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Params](l), err
}

// AlterTimeSeriesWrapperFactory_wrap_Params_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Params promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapperFactory_wrap_Params_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapperFactory_wrap_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapperFactory_wrap_Params_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapperFactory_wrap_Results capnp.Struct

// AlterTimeSeriesWrapperFactory_wrap_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Results.
const AlterTimeSeriesWrapperFactory_wrap_Results_TypeID = 0xb48982ac9bcd5d11

func NewAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(st), err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(st), err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Results(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) String() string {
	str, _ := text.Marshal(0xb48982ac9bcd5d11, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory_wrap_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory_wrap_Results {
	return AlterTimeSeriesWrapperFactory_wrap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Results) Wrapper() AlterTimeSeriesWrapper {
	p, _ := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper(p.Interface().Client())
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) HasWrapper() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) SetWrapper(v AlterTimeSeriesWrapper) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Results_List is a list of AlterTimeSeriesWrapperFactory_wrap_Results.
type AlterTimeSeriesWrapperFactory_wrap_Results_List = capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Results]

// NewAlterTimeSeriesWrapperFactory_wrap_Results creates a new list of AlterTimeSeriesWrapperFactory_wrap_Results.
func NewAlterTimeSeriesWrapperFactory_wrap_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Results](l), err
}

// AlterTimeSeriesWrapperFactory_wrap_Results_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Results promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapperFactory_wrap_Results_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapperFactory_wrap_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapperFactory_wrap_Results_Future) Wrapper() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(p.Future.Field(0, nil).Client())
}

const schema_a01d3ae410eb4518 = "x\xda\xac{{|\x14\xe5\xb9\xff\xf3\xcc$Y\xc0\xc8" +
	"\xe6uBB\x80\xb0%\x04\x84\x00\xf9$\x0bA\xa5?" +
	"~I\x80\x85\x80P3\x09b\xa1rt\xb2;I\x16" +
	"vv\x96\x99YB<\x87r\xa9i\x8b\x15\x15\x0e\x1c" +
	"\xcb\xa9Z\xb4\xb5\x1e8\xb5\xa2\x1f9VO\xe9\xa7^" +
	"\xe8\xa9(m\xb1\xd8\x16\x15\xeb\x0d\xabTT\x8eZ\xaf" +
	"0\xe7\xf3\xbc\xb3\xb33$\x9bp\xb1\xff\xcc\xee\xce\xfb" +
	"\xbc\xb7\xe7\xfa}\x9e\xf7\xdd\x9a\x07\x866\xe4\xd5^\x1c" +
	"\xaa\x04\xa1\xf5\xc7\x98_`\xcb\x87\xf3\xb75\x1dX\xb8" +
	"\x1eX\x09\x02\xe4\x05\x00\xa6~\xc4\xb6\"\xe4\xd9\x85\x1b" +
	"\x7f_p|\xdd\x03= \x97\"\xda{\xb4\xab\xdb\xdf" +
	"~n\xfa\xe7\x10\xc1@!\xa2t\x8c\x1d\x97N2\"" +
	"?\xc1\xee\x13\x00\xed\xb2\xd3\xd2\x07=\xe6c= \x0f" +
	"E\xb4\x87G\xfeV\xf4\xc6\x8c\xf2\x9d\x90OCJ\xf7" +
	"\x17?&\xed-.\x05\x98\xba\xaf8\x84\x80\xb6\xfc\xfa" +
	"\xb7j\xf6\xbf\xbc\xea\xdb\xc0\x86\x0a\x1e1\xa0\xf4\xf6\xb0" +
	"\xad\xd2\xc9a\xd4\xe7\xc4\xb0\x07\x00\xed\xe6\x9dW\x15\xeb" +
	"\xc5\xab7\x01+C\x80|\xa4\x19\x95\x92Y\x08(\xc5" +
	"K\xea\x01\xed\xff\xdevp\xe37\xd7\x0c\xf9\x1e\xb0q" +
	"\xee\x06v\x94\x84\x05\xc8\xb3\x7f\xfe\xaf\x7f\x7f\xeb\xe5\xd8" +
	"\x937\xfb\xbbn)i\xa1\xaew\xf2\xae\x07\xd7.\x7f" +
	"j\xe5\xf7\xd7\xdc\xe2\x10\xf0\xae\x87J\xaah\xef\xcfn" +
	"+\xac]\x13\xf8\xe0\x96>\xcb{\xb4d\xab\xf4x\x09" +
	"-o_\x09-\xaf\xb3\xf9\x9b\xfb\xa6\x94\x0c\xba\xd5\x99" +
	"\xdd\x99\x83\x95V\x09\x80\xd2\xc4R\x9a\xe3\xee\xdbo\xfa" +
	"\x99\x90\xfa\xd3\xad\xbe9\x16\x95\xce\xa09\xde\xfau\xdd" +
	"\xb6\x9e\xf5\x9d[\x1c\xce;]\xebJ\xff\x9d\x96\x17\xe1" +
	"]O\x7f\x0f_*h*\xd8\x0elr\x96\xa0\xbb\xf4" +
	"\x09\"\xd8\xc4\x096.\xf9\xea\xc4\xae\xd5\xdf\xdd\x0el" +
	"\x8c;\xf6\xfd4@\x9e\xfd\xf6\xf1\xff\xff\xa7\xa6i3" +
	"\xef\xf0o\xfd\xce\xd20u\xbd\x97w}\xf1\xcd\x1f\x1d" +
	"\xfdVh\xed\x9d\xfe\xc9\x8f\x95\xb6\x11\xc1INP\xf0" +
	"Y\xf7\xf7\xaey\xf1\xb1\xbb\xfc\x04\xc3\x86\x1bD0f" +
	"8\x11\xac9q\xdd\xbd\x17\x89u?\x0466K0" +
	"\x7f\xf8V\"X\xca\x09\x8eL\xdc\xb1?\xf1\xc4\xf0\x1f" +
	"\x03\x1b*\xfay8\xf5\xd0\xf0\x11(\xbd:\xbc\x94d" +
	"<|\x9e4\xac\xac\x14\xc0~KK\x9en\xf8\xe1\xea" +
	"\xfbzSK\xf9e\x07$F$S\xcb\xcb\xe6\x09\xd2" +
	"\x8e\x11\x97\x02\xd8G\xaf+ox\xe9\x8b\x9bw\xfbW" +
	"\xb7e\x04\xd7\x8a\x1d#hr\xac6j\xae\x9cS\xf0" +
	"\x9f\xc0JEOw\x01\xa7\x1e\x1c1\x04\xa5\xa3#H" +
	"\x82GF|G\xaa\x1d\x19\x00\xb0\xa5\x05WM\x98\xa9" +
	"\xcf\xdf\xe3\x1f\xael\xe4M4\xdc\xc4\x914\xdc\x13\xe2" +
	";\xd1\xdf\x1dh\x7f\x18X\x99\xe0-\x15p\xea\xfc\x91" +
	"\x15(-\xa5A\xa4\xabG^\x06h\xb3\xe5\x07\x7f\xf0" +
	"\xd3\x8d\x9b\x1e\xf6\x0bm\xe9\xc8\x034\x94\xc6\x87\x1a\xd6" +
	"\xf4V\xf2\xb6\xb9O>\xec3\xb8\xcd#\xc3$\xb4\x03" +
	"_\x7f2 \xaf9\xba\x17\xd88\xc1~\xe8\xc6\xdbo" +
	"\x7fo\xfd\x87\xaf\xd2$\xe9\x917\xa0\xb4\x89O\xd2\xc3" +
	"'\x199YX\xfd\xe1\xa5\xef<\x9a\x11\xaf@\x83l" +
	"\x1a9\x83&\xd92\xb2\x0b\xd0\xfe|\xdb\xf1\x9f\xfc\xea" +
	"\xe5W\x9e\xf0\xcb\xff\xa4C\xf0)_\xc5_\xd6\xbfu" +
	" \xbaa\xec\x93~\x82+F-\xe3\xca7\x8a+\xc8" +
	"\xb4{:\x9f\xae\xbc\xe5)\xb2~\xe1\x0c\xeb\xcf\x07\x90" +
	"\xe2\xa3\x8eK\xe9Q\xd4i\xd5(n\xcf\xa3n\xfc\xe5" +
	"\xfa\xb6w\xee~\xcao\x07\x1b\xca\xb92o)\xa7\xf1" +
	"\xe6\\z\xef=\xefO9\xb9\xbf\x8f6\xec-oC" +
	"\xe9\xe9r\xda\xdc\xfe\xf2y\xd2\x89r\xd2\x86\x15\x87\xdf" +
	"\x9cq\xaftj?\xb0R\x9fg\xe1\x1b\x95\x8e\x96?" +
	"'\xbd\xcd\xe9\x8f\x95\xd3^\x07\xbd\xf6q\xfe\x1d\xe1\xe7" +
	"~\xedX\x813u\xe3hn&\xf2h\x9a\xfa\x91\xc2" +
	"\x92\x9f\x1f?\xb1\xe1\x7f\xfa\xe8\xc2\xaa\xd1#P\xda0" +
	"\x9a\x86Z;\xfa;\xd2A\xfafO\xfb\xf1\xf2\x83\x87" +
	"~z\xe07\xbd\xfc\x18wc{G\x1f\x97\x1e\xe7\xf4" +
	"\xfbF\xff\x15\xd0\x96~\x14\x1c\xb9\xe7\xae\xf03>\xe3" +
	"\xde\x12Z@\xb2\xbc\xeb\xdb\x8d/\x14V\xec|\xc6\xe7" +
	"\x95\xd6\x86^\xa3\x96?&\x7fr\xf7\x91\xfb\x87\x1e\x04" +
	"\xb9\x0c\xdd\xa6U!nykC\xb4\xdc=\xc7\xf7X" +
	"[>\xde~\xd0\xaf\x8cw\x87V\x10\xc1\xfd\x9c`Z" +
	"\xfb\xf6k+\x9e\x9a\xfc[\xdf\xac\xaf:\xb3\x16\xfd\xf0" +
	"\xe5w\xe3\x9dW\xfc\xb6\x8f\xdb:\x18\xda*=\x1f\xe2" +
	"\x0e.t)\xc9k^~\x1a\xc7o\xde\xfd\xbb\x8c\xf5" +
	"r\x0d\xba\xf7+\\\xe3\xf7~\x85\xb8\xba\xff\x97\xb7}" +
	"\xf0\xd8\xa3=\xbf\x07y\x1c\xa2\xa7\x8d|66f\x05" +
	"J\xe3\xc6\x10\x1f\xc6\x8c!/\xf8\xd8\xe1\x09\x89\x9e\xea" +
	"\x9d\xcf\xf9t\xfa\xd11\xdc\xc9\xbd\xf1\xe6\xc4\x89w\x8c" +
	"^\xf9\x07>Lv7c\xb8\x9bxp\x0cM\xf4\xee" +
	"\x0d\xd3J\xde\x18\xb2\xe6\x0f}\xd6\xcc*\xb6Je\x15" +
	"4\xc9\xb0\x8au\x80v\xfa\xd5\xabN\xce\xde9\xf2\x8f" +
	"\xc0JD\xfb\xfd\xeb\x97\xbe\x7f\xe8T\xdd\xdf\xb9\x0dV" +
	",Ci9\xa7\\Z1O\xea\xa1o\xf6\xcec\x15" +
	"\xd7\xbd\xb3\xee'\x7f\x026\xd4\x1f\x8d\xb8\x06i\x15/" +
	"H\xdd\x9c>]AKX\xb7\xfc\xee{\xf6t|r" +
	"\xc4\xcf\xf1C\x15<P\x1c\xad \x8e\xb7\xda\x91E\xa7" +
	"\xbf\xf8\xe7\x173\xbb\xe0\x1b\xc4\xb1\\\xbb\xd9X\"h" +
	"/]\xf5\x8b\xbd\xe9o\x1c\xf5\xab\x7f\xdd\xd8\xe3D0" +
	"\x9f\x13\x14<\xff\xc8+'\xff)\xf5\x17\xbf\xb7\xec\x1e" +
	"\xcb\xf9\xbd\x89\x13\x0c\xfb8\xd5\xfeA\xe8\xbeW\xfcZ" +
	"\xbck,\xf7\x1b\xfb8AV\x04\xbd\x0d\xe8\xc4\xd8*" +
	"\x94N\x8d\xbd\x94\x1ct\xe5<\x94>\xaa$\x0b\x1a2" +
	"\xf5\xb3-w\x1c\x9e\xfb\x9a3!_\xf1\xb1\xca\x9bH" +
	"$\xd7\x9aO|#9\xb7\xf0u\xffn\x9f\xaf\xe4\xa6" +
	"\xffj%\xcd\xb4k\xfa\xe7G\xde\x1d\x1fz\xdd\xa7\xbb" +
	"\xf9\xe3\xfe\x97\xba\xc6\xf6.{\xf1\xe1\xeb\xafy\xbd\x8f" +
	"\xac>\xad|H\xc2qDy\xaa\xf2\x11\xd2\xaf\x86+" +
	"\x9f\xdcu\xcb\xb7\xeez\xc3\xbf\x9d\xba\xf1\xf7p\xff2" +
	"\x9e&y\xe5\xf0S3w\\\xd2\xf8&\xc8\x93\xb2," +
	"M\x8f\x17(pn\xe2\x04\x87N\x19\xcf\x95\xe5\xd7\x1f" +
	"\xf7i\xf9\xfd\xe3\x97\xd1*~~[\xfb\x87\xbbF\xfd" +
	"\xc7\xdf@\x1e\x8b\xbe0\xe3(\xf1\x8e\xf1+P\xba\x7f" +
	"<\x09w\xd7x\xb2\xd1\xd1+\x1e\x10w_\xf7\xee\x09" +
	"\xffvO^\xca\x15\x10'ps\xba\xfag\xbf\xf9\xdb" +
	"\x03\xef\xbd\xe77\x85q\x138A\xdd\x04R\x8fqu" +
	"=\x0f\x8e\xfd\xf4\x93\xf7|+\xd9>\x81{\xec\xab\xfe" +
	"\xed\xd7?\xf8\xe8\xd9\xc7O\xe6\xc4<k'\x1c\x976" +
	"M \xea\x9e\x09\xd7 \xe0\xa9\xafJ5\x0f\xad\x9f\xff" +
	"\xa1\xc7\xd5\x8b\xab\xee\xa1Q\xb2\xba\xdc;\xf4\x9d\x9a\xf8" +
	"\x90\x94_E\xa1oX\x15\x09\xb6\x8aB_\xf8\x91\xc1" +
	"k\x8b\xff\xfa\x97\x8f\xfd\x9e\xfbD\x15W\xd6O\xabh" +
	"?\xef\xea\xf3_\xd3\xbf\xb1\xfb\x13\x7fp(\x9f\xb4\x80" +
	"\x07\xb3I\xb4\x9f\x93\xcb\x0b\xfe\xfc|C\xcfg\xc0&" +
	"eG\xe8\x994\x84X\x7f\xe7$\x1aa\xf7\xc7\xb7\xdd" +
	"\xba\xf7h\xf5\xe7~m>4\xe93\x1a\xe1\x18'\xc8" +
	":\xd1\x1c\xc65x\xf2c\x12\x9b<\x0f@\x8aL\xa6" +
	"\xd9\x0a\"\xffU\xfb\xe1\xfb?\xfa\xc2\xcf\xff\x07's" +
	"w\xb6o2\x0dv]\xe1\xa4\xba\xc3\x83\xd6\x9e\xee\xb3" +
	"\xfdc\x93\x1f\x92NL\xa61\xdf\x9e\xfc\x1d)2\x85" +
	"v_\xf2\xf4\xd8\x95\x85\xbf[i\xfbd1sJ\x18" +
	"\xc1\x86)v4\x11\xd7\x14K\xad\xce\x8f*\xa9dj" +
	"F\xabj\xac\x8eG\xd5\xea\x0e\xd5j\\\xad\xc4\x13J" +
	"[B\x9d\xa3X\x8a\xa9Zfe\xb3b(\x1a\x9a\xd9" +
	">\x82\xd3g\x91j)1\xc5R\xaa#\xc1\xa4et" +
	"7#\xca5b^\xa1m\xe7!\x80\xd4\x88\x15\x00\xad" +
	"\xff\x0fElmB\x01/\xc6\xd3v1)\xaf\x14\xe1" +
	"\x0d\x0d\xd4\xb0\x90\x1a\x84Sv1\x0a\x00\xd2|\\\x06" +
	"\xd0\xdaD\x0d\x8b\xa9A\xfc\xc2.F\x11@\x92y\x8f" +
	"\x85\xd4\xf0uj\xc8\xfb\xdc.\xc6<B\x11\xbc\xa1\x99" +
	"\x1a\xae\xa5\x86\xfc\xcf\xecb\xa4\x90\xbb\x14g\x00\xb4." +
	"\xa6\x86\xeb\xa9\xa1\xe0S\xbb\x18\x0b\x00\xa4\xe58\x0b\xa0" +
	"\xf5\xeb\xd4\x10\xa3\x86\xc0'v1qYR0\x0c\xd0" +
	"z-5tR\xc3\xa0\x8f\xedb\x1c\x04 \xa9|\x8e" +
	"\xeb\xa9!\x81\x02\x96\x0f\xfe\xbb\x8d\xc58\x98\xe2:o" +
	"\x89QK\x8a\xba\x0c\xf9\xc8.\xc6!\xe42\xb1\x05\xa0" +
	"5A\x0dk\xa8\xe1\xa2\x0f\xedb\xbc\x88<(\xb6\x01" +
	"\xb4Z\xd4\xb0\x1e\x05\x0ctD5\x0cz\x81\x08\x10\x83" +
	"\x80\x01\x83\xbf\xcd\x82~\xe7\xad\xdd\x197-\xdd\x88G" +
	"AT\x12P\x100\xa2)\x0cz\xd0;\xd3\xd54\xe9" +
	"m6J8o\xeb\xd5\xa4\xb9H\xd5\xb0\xc8\x0b\xd7\x80" +
	"X\x04\xb8n\xb5j\x98q=\x89\x85 `!`\xc8" +
	"\xb4\x14\xc3\xc2\"{3\xab\x10\x7fz\xfa\xcd\xdb3t" +
	"\x015\x19\xcb\xf16\xaa\x87q\x08\x088\x04\xd0N\xc5" +
	"\xa3z\xd22t\xc0\x04\x14\xd81\xd5\x8c\x1a\xf1\x94\x05" +
	"\x01\xdf\xe8Y\xf5AG}\x16\xea\xf5Q\xc5\x8a\xebI" +
	"9\x0f\xd1\x07bp\x84x\xe5\x12\xb9X\xcc\x03 E" +
	"bkG\x00\xc8kD\x94o\x14\x10\x91\xeb\x10\xdb\xb0" +
	"\x00@^/\xa2|\xb3\x80L@\xae?l\xd3\x0c\x00" +
	"\xf9F\x11\xe5\xdb\x04d\xa2\xc0u\x87m^\x06 \xdf" +
	",\xa2\xfc}\x01Y\x9e\xc8\xf5\x86m\xa7\x97\xdbD\x94" +
	"\xf7\x08(\xc6io\x7fxA<\xfd\xcc7\x9f9\x9c" +
	"\xd9\x9b\xdd\xa9\xc6;:\xad\xaf}\x0d\x00\xdc=\xd6'" +
	"\x14+\xa1'\xb1\xc8\xfe\xfc\xd6g\xaf\xa8\xf9\xe2\xe4;" +
	".\xb1\x15\xd7\xd4V\xd5\x88\x83\xa8\x9a\xc8\xfc\x90\x17\x19" +
	"\xed;mZ\xba6G\x01\xd1Rp(`\xb3\x88X" +
	"\xe4m\x18\x90^\xf6\xe6N\xcbl\\D\x165\x8ao" +
	"m\xd1\x0d|\xb0\xf9\xf4!\xb0\xc8\x0a\x00\x14Y\xe3\x02" +
	"\x00\xccc3\xb7\x02`>\x9bIm\x05\xec\x8a6\x00" +
	";\x9a\xd0\xa2\xba6;\x0a\xf5\x09m\xda\xe5\xb5\x97\xd9" +
	"\x1d\xaa\x11\x8f\x9a-*\xd4kz\xb8\xa6\xb6\xce^\x99" +
	"\xd4\xe2-JT\x83\xa0\x1e\x0eGlS\xeb\x8c\xb7D" +
	"\x95i\x90\xed<\xcb\xc2\xf4\xec(\xef\x8e\x97\xd9Z*" +
	">\xdb\x8c\xba\xfdk\xae\xb0\xd3\x9dz\xe75F\xfbT" +
	"\x08L\xafm\xca\xae=\xcfY\xfb\xe2\x0c?T\xb3\xba" +
	"SUb\xaaQ\xd9\xa2\x9a\xe9\x84e\x82\x9c\x97\x15\xeb" +
	"\xc5$\xadA\"\xca\x95\x02\xd6;d.s\x82^\xec" +
	"\xec\xc5\x9c\x803Ac\xc2R\x0do\x96k\x0c%\x95" +
	"R\x8djCM%\x94\xa8\xea\xfc\x8cy\xed\x95-j" +
	"\x88\xcf?\xc0B\xcdt[f\xad\x19o\xe7_*i" +
	"[\xa1\x88\xf2\x04\x01m5\xa1jj\xd22I3\xce" +
	"\xba^\xb1\xcf<\xe40+\x9b\x95\xa0\xa1hf\x0e\x99" +
	"7\xfbd\x1e\xe62\x8f\x84\xb9\xccg\x86\xb9\xcc\xeb\xc2" +
	"\\\xe6S\xc2\\\xe6\xe3\xc2\\\xe6\xe5a\x80\x90\x11M" +
	"\xd5^A\xcf\xf0tzN\x9dF\xcfiu\xf4\x9c^" +
	"C\xcf\xcb\xf8\xf3\xf2\xba/\xcb\xcc\xcc\xe2\xfd\xfcY\x96" +
	"\xe1\xcfp\xe1\xec\xc6\xd0/g2\xec\xaf\xe7\xfc7\xcf" +
	"+@q\xf5\x12\xad~e\x16\xcb\x10\xfadV\xe4\x81" +
	"\xde^2+\x18\x88-s\x95\xa8\xa5\x1b\xdd\xd5]\x86" +
	"\x92r4\xe5L\xa5\xbe\x00N\xe4\xf7\x8a\xa6\xad\xe9T" +
	"J7,5V\x1dU,\xb5C\xcf0\xddPD\x1f" +
	"W\xfaQ,W\xd1\xfdK\xaa\xca\xd8\xd94\x01\x83D" +
	"\xe4r \xf3A\xde\xcd\xbf\xfd\xbc>\xfcv\xd9<W" +
	"\xe7\xc6\x11\xe8%\xfc\x05\xfe-\xabZ*\xa1X*1" +
	"\xba\xc8\x9f>r?\xd9k\x8a\xcc\xb8\xd5\xa6e\xa8\x8a" +
	"\xb6Pw\xa2\x81\x99s\x13[\x01\xe4\"\x11\xe5Q\x02" +
	"\xda\x89\x0c%\x9a\xb3\x95D\xa2M\x89\xe2Jd^\xc6" +
	"s\x16\xf6\xceO\xb6\xeb\x86\xc6\x07\xa8n\xd7\x8d\xc6D" +
	"\"\xe3\x9d\xce4\xf9\x8a\x0c\xd7\x12\x02\x06\x94D\xc2S" +
	"\x9b\xa9\xf3J\xc7\xcd\xfb\xf6\xe1G\x01\xa0\x01\x19\x86\xe4" +
	"<\x01\xfd/\x19^*\x0fBD\xa4\xee\x88\xb4j," +
	"\xf2\xea\x83\xc4\x8a3\xa2M\x0ew1\xbbu\x89'X" +
	"\xaeq\xa2\xd1\xcd\xa3d\x16\xcd3l\xb1g\xb7.\x99" +
	"\xad'\xdb\xe3\x80\x1dr\x9e\x98\x0f\x90MT\xd1\x85\xe9" +
	"\x8c\xcd\x00\x81\xe5\x07\xea\xa3\x86\xaaXj\x03\xf2Q\x9e" +
	"o\xbac\xe93\x87\x1ex\xc8\xf1\xf6g`:o^" +
	"\x00N\xeb\x15sp\x99\xdd\xa2\x9az\"m\xc5A\xd4" +
	"\x93r%\x9f\xd2\xcd<\xd0M\xd5%\x86\xcb@\x90\x06" +
	"c\x001\x8b@\xd1-\xc2\xb0Sa\x10\xd8\xc9\x00\x0a" +
	"\xd9b\x1f\xbaUKv\x8c\x16{$\x80b\xb6\xd8\x88" +
	"nm\x8e\x1d\xac\x02\x81=\x1e\xc0\xbcl\x86\x81n\xdd" +
	"\x86\xed\xa51w\x050?\x0b\xe7\xd1\x05\xfe\xec\xce\x05" +
	" \xb0\xed\x01,\xc8V8\xd1-\xe7\xb0M- \xb0" +
	"\x0d\x01\x0cd\xab\x04\xe8\xaa,KS?-\x80\x83\xb2" +
	"u\x0btK+L\xa1\xb6\xa5\x01\xdb\xf0\xb1\xa3\x01C" +
	"\x86\x92\xecP\x1b\xdc`\xd6\xe0X[\x03\x86\xe8cq" +
	"\x03\xdaf\xba\x8d\x93p\xcd\xb1\xdd\x80\x03h4\xa0\xad" +
	"e\xd4\xd3is5\x9c\xff\"m:Cd\xea3\xd3" +
	"_\xda\xf9\xc2}\x8f\xfb\xc5\xd7\xcb\xa4\x12>c\xea\x1b" +
	"y[|\xae1;\x15\x9a\x9e\x8eg\x8bH\xb9\xf5\xb3" +
	"\xaf\xab\x02h\xe6\x0aO\x1a\xe1\x16Z\xd1MkY\xed" +
	"2\x10\xd8D\xd2\x07\xb7\xfc\x84n\x06\xcf\xca7\x82\xc0" +
	"\x86\x05l\xd7\xd7\x91\xb3\xe4\xdcqF\xc6\xd8\x12%\x91" +
	"VMh\xc0f\xecc\xd4\xeev\xa3\x09\xddTM\xcb" +
	"S\xdeF\xcbu\xce9!G\xb10\x00\x9a\xeb\xdf\xc5" +
	"f\xd4\x9f@-\xdf.\x0f\xd3\xcc\x09\xd3\x83g\x00\x84" +
	"bJ<\xd1]\xdf\xa9\xa7\x8dD\xf7\x05\xc4\x13WV" +
	"g\xacy\x96\xb7\xe6u]N'd\xfe\x8ag\xae\xb0" +
	"\xea2\xc6U\xab\xca\xe6\xd0\x99Q5o\xc0\xd8\xdf\x98" +
	"\xb0\xeaUcqwJ\xf5\xed\xb3\xc2\xd9g\x05@@" +
	"\x89\xc5\x02Z:1\x00\xab\xb8\xa2W\xb6\xd4;;\x92" +
	"\x07e\xf73\x91\x94o\x82\x13\x8e\x98\x0b\xe7ki\x93" +
	"\x93E\x94/\x17\xd0\xe6I\xc8\x1c\xc5\x02T\xfb&\x1d" +
	"\xeb\xd4dl\x8eb\xe5h9Kh\\\xec-\xe6K" +
	"\xc7\xc6\x9c\xb01\x17\x06\xb9\x004\xd0;\xb7^\x12$" +
	"\xfd'1\x14gsk\xb6\xb6\xcaK\x89\xca\xf1\xb4\xed" +
	"fEa\x00\xf9_D\x94\xbf+`\xb9p\xca\xce\xe4" +
	"E=\x15^\xb2T.~a78\x99\xd1\xa6*/" +
	"]\xca\xa6\xd4l3\xbd\xfd\xae\x88\xf26\x01\x83\x96\xba" +
	"\xc6\xca&\x87\xed\x09]\xb1\xf0\"\x10\xf0\"\xc0@<" +
	"ia>\x08\x98\x0f\x18l\xd3\xf5\x04\"\x08\x88\xc0\xd9" +
	"8\x90t\xf2\x07T<\x85^\xff\xa3X\x99w6\xc3" +
	"\x0b\xe8N\xd5\xc2\x09\x9e\xee\x09\x12\xba\xa7\x12\x8cU\xf1" +
	"\xe0\x19$\xb3;{\xe8t\x01L\xf5\x95\xb8\xc4\xf1\x86" +
	"Y\x9d'\x01T\x8a(\xd7\xf8t\x9e \xbck\x08\x81" +
	"\x95jw\x96\xcf\xabI\xe0x\x09\x08xI_T\x9a" +
	"\x03%\xba\xae2\xe3)s\xa1R\xbf\xdf\xb3\xbaS\xea" +
	"\xfcX\x9f\xa4\\\xec\x0f&\x89\x19g\xc7y\xe4Vf" +
	"\xd1E0\xac\x96b\xf68\xf2\xedn\x11\x15\xdd\xc3." +
	"VFm\x17\x07\xea\xdbu\xe3\xaa$EF\x07o\x9d" +
	"\xe9\xca3\xdc\x8b$MUkK\xa8\x8b\xd4\xa0\xd6\xa6" +
	"\x1a\xcd\x1c9\xb9\x1bP.\x01\x90\xaf\x15Q\xee\xf41" +
	"P\xa5\x97\xd7;\x10\x8d\x09\x82\xa3\xebqz\x19\x13Q" +
	"N\x09\xc8D\xd1\xd1t\x8d^v\x8a([\x02\xa2\x81" +
	"\x01\x100\x00\x88\xf1\xec\xb7T\xf6[\xbb\xfbm\x00\x9b" +
	"wCf6\xc4\x9c\x9b\xabw\x94[\x8dE2\x09\xa4" +
	"\x8b\xa5\x07\x98\xc9\x05\x18z\x92\xdbD \xd1\xbfM\xf8" +
	"\xb1\x08\x06=\xd8\x96\xa9\x1e\x9d\x1b\xbaoQ\xcd`o" +
	"\x17y\x96<\x8a\xf9O\x17\xce\xe2,\xbdh\xd4\x9bq" +
	"\x99\x04x^\xa6\xe8Q\xe3\xd4sVp\x8b\xeeY\xc1" +
	"\x13\xe0\x0d7\xf0\x04xm\x1bO\x80\xbbW\xf0\x048" +
	"\xbd\x80'\xc0\xab\x96\x01`\x80i\xf41\x88\xc5\xe9\xe5" +
	"`\xa6\xb6\x00\xe0\x10\xa6\xd0\xc7El\xb9A\xd3E\xa3" +
	"\x9a2[IB0bja;\x1e\xedT\xa3\x91h" +
	"\x04\x82\x8aau\xda\xf1\x94\x99\x98\x9f2\x13P?[" +
	"\xabk\\d\xd8Z\xdc\xd0\xa3\x8b\xe2\x06\x04\xf4h\x9d" +
	"\xad\xa5\xe2\x8b\x16\xa5\xe2\x11\x08\x9a\xdaB\xc3\xeeh\x8f" +
	"%\"\xa6\xc6K&\xd4s\xb66]\x01q\xa1At" +
	"\x11S\xab\x0d\x83\xd8d\xd8\x9aA?\xc25D\x95^" +
	"\xa9\x9aZm\xcdB\xc0\x84\xddav\xa5\xa6^S\x17" +
	"\x01\xac\xb35\xbd3\xda\xa4\xc4\xe6AH\xd5\xc2\x91>" +
	"\x99o\xdfl\xc0\xe8\xaev\xf0\xbc\x07r|\xcefV" +
	".g3\xc3s6\xeb\xa2\xe6j\x12\xba\xeb\x02\xea\xa3" +
	"\x94Dt`\x91\x97]\xe4\xce\xd7\xfa\x07\x0bA\xd2k" +
	"\x12\\av\x19\x11ZF\x83\x88\xf2B\xdf2\xe6\x93" +
	"\xcf\x9b#\xa2\xdc\xec+\xdb-\xa2\x88\xd3$\xa2\xbcX" +
	"\xc0u\x99\xeaJ\xaf\x92J0\xeb\x163\xb5\xb8 y" +
	"1\x0cz\xa7\xc0\xbd\xd4\\\xec\x0f\x0e\xf7S]\x180" +
	"\x1c\xb9\x05!\x1f\x8f\xab<\x1e\xf3\xbd!\xb2)\x1b=" +
	"\x0c\x13\x8c\xa9f\x14\x8b\xbcs\xc1\x0cC\x15\xf3kj" +
	"\xd7\xe2\xb8\x86n\x8e\xe5F\xcd\xde\x86\xd0\xda\xeaT\x82" +
	"\x1c\x0e\xd5UqC\x98R\xc5\x0da\\\x157\x84\xf2" +
	"*n\x08\xc3\xaa\x00\x82\xa6\x99\xaa\xa5G\x98\x1eS\xe9" +
	"1\x8d\x1eu\xfd\xa5\x07\xf3T+\x9bn;9\xb4\x18" +
	"]\xe9EB\xf7\xb8\x09\xdd\xc3\x0f\xc6\x0c\x10\xd8\xe0\x80" +
	"\x9dT\xd7\xf0\x9e\x10\xe2}szr\x0a!\xcd\x89\xb4" +
	"9G\x11-\xa5W \xac\xca\xa5\x9bU\x9en\x06\xc9" +
	"E\xf4\xad\x1c8\xd8\xecLW\xc3\xfa/(X}\xf2" +
	"\x00\xec\xd7of\xf3\x1f1GP\xcc?K\x85L\xd3" +
	"W\xabni\xc6?\xc1\x0d\xbe\x09\\\xaf\x0f\xf5\xfd\xa9" +
	"\xf6\x05\x86\x8f\\\xce\xba\xca\xab\xa9\x06\x13q\xd3\xf2R" +
	":\xbf*\x0e=\xf7\xf2\xc8UI5g&\x15\xf6\x10" +
	"EHMZFw\xef\x1a\xc7\x05A\x97\x9c\x09\x90\xbf" +
	"N\xcc\x9d\x80/Q=K!\xa5/'\x83\xc4J\x9e" +
	"Qg\x19\xc2\x06\xcf\xf2\xdd&\xc9oY\xd7\xe80\xda" +
	"vzw\xa7\x00U\xb9\x98\x1b\x86{\xd8\x8b\xee\xa1\x1f" +
	"\xdb\xb2\x15\x04\xb6\x99\xe0\x8f{\x89\x01\xdd\xe3m\xb6\x81" +
	"R\xdb\xee\x00\x0a\xd9\x83}to~0-\x0c\x02S" +
	"\x02(f\x8f\xcb\xf1\xab\x909\xf2\xbc\x9a`\xd3\xfc\x00" +
	"\xe6e/L\xa1{o\x8b\xcd<\x00\x02\x9b\x19\xb0\xbb" +
	"2eYt7\x87\x945\xbb*\x82n\x8d\xba\x01C" +
	"\xfc]\x03\xd6;\xda\xda@H\xc1)\xec\x0a\xbd+\xbb" +
	"\xbc\xd8@ \xd7\x03\xd4p>e\xb4>Q} \xb3" +
	"\xfc\x07a\xfc\x81M\xa6\xabo\xf1\xbaW\x1e\x9c\xf1\xb7" +
	"\x91D\x88s\x8c\xdcU\x13\xf7\xb9\x87\x1c\x9f\xfb\xb4\xe3" +
	"s\x1fw|\xee\xa33\xb8\xcf}p\x16\x07\x1f\xbb\xaa" +
	"8\xf8\xb8{\x01\x07\x1fw\xb6q\xf0\xb1\xc3\x01\x1f\xdb" +
	"\x17p\xf0\xb1e\x19\x07\x1f\x9b)w.d=#\x00" +
	"\xf0b\xb6\x96~\x0dei\x820A\xb6\xea&\x00," +
	"b\xab\xe8\x17\xab\xd5*\x10 hi\xf1d\xd0RV" +
	"w\x04-MYS\x9f2\xd4h<\xb5\xae#\xa1\xb7" +
	"\x19J,\xd8\x15O\xc6l3\x9d\xec\xd4\xd3\x86\xe9\xc8" +
	"HO\xc7\x14M\x87@:i\xd9\x86\x9a\xe8Lk\xf1" +
	"\x18\xb5(q#e\xa8&\xa7Z\xad\xa4t\xfa\x05\xa2" +
	"i\x06\xa2zX\xd4\xa7\x06T\xab\xc6\x8e\xa9])=" +
	"\x9e\xb4 \xb8X\xd5R\xb6\x99R\xa3\xf1\xf6x\x14\x9b" +
	"h\x90\xb8\xd5\x0d`\x9bI\xbd\xab]I$ 87" +
	"\x91^c\x9bi\xa3]\x89\xaasD\xbd+\xd9\xa5&" +
	"\x12\xf1d\xc7B=\xd9\xd1\xa5\xacV[\x94X\\\xe1" +
	"\x15\x92\xf3\xabo\xe7\x82\xb7a\xcf\xf0C\x14\xef\xcf\xc1" +
	"\xee\x03g\x8bs\xd1\x95\xd5n\x0cs\x00A\x8el\xc9" +
	"_\xd0\xd6\x945\xb3\xf5t\xd2\"\xc4\x9bIw\xcf\x0d" +
	"\xaf\xf7.\xd8\xe7\x0d\x00\xe6x!7H \xcc\x97\xf6" +
	" 2\xa5\"G\xda\x13o\xc9$3\xcf\x0a\x88\x94\xf5" +
	"\x90\x96n\x05\x90\x9f\x15Q\xfe3e=X\x8c\x04\xcc" +
	"\x9f\x7f\x0e@~ID\xf9-\x01\x03\xa6\x9a\xcaD7" +
	"`x\x09N\xb6\x9d\xaa\xc5\"\x050\xf5\xe5j\xdb\xce" +
	"\xa8N\x9d\xc4\\\x19O-\x8c'U4\x17\xebM4" +
	"\x01\x1a(\x82\x80\xa2\xafM0\xe7\x1a\xba\xc6[\x8d\xc5" +
	"\xfa\x1c\xc5B\x85h\xf2E\x84\xf3\xaa\xef\xe5*\xda_" +
	"\xf8\xe9\xcb@ ;;\x93\x0f\xc8,\xcbU\xc5\x0a\xfb" +
	"\xaaX4\xbd\xd9\xef\xf4!\xd50t\xa3\xbf$\xbcO" +
	"\xe9\xaa\xb7\xd7\xeaS\xac\x0f\x12\xa7Hy\x86g\x97\xb8" +
	"\xa3*s\xc6\xfd+\xef\xd8|\xdf\x0a\x00\xf9\x17\"\xca" +
	"\xbf\xf1\xe1\xef\xfd\x14`\x7f%\xa2\xfc\x92\xef\xd8\xfc\x08" +
	"i\xd9\x9fE\x94\xdf\xf0\x1d\x9b\xbf:\xcb\xd3(\x96\x8f" +
	"\xc5\x98\x8f\xc8\x8e\x11+\xde\x10Q~\x7f\xe0\x1aZ\xdc" +
	"\\l(I3\x05A\xddTc.\xf0=\xeb\xc9\xef" +
	"\x85V\x03\xcf1\x1f>'\x84\xe7:\xa7\xdeQc\x8e" +
	"\x12\xe2\xfa\xc9\x83\xa6w\xe3\x0ew\xdb\xae\xe3A\xd7\xf3" +
	"\x04\xc9\xf5dP\x84{\xa9\xd5;l\xd8\xb2\x00\x04\xb6" +
	"\x89P\x84{\xb9\x16\xdd\x9bXl\xed=.\x8apo" +
	"\xde\xa1{)\x8di+@`*\xa1\x08\xf7R!\xba" +
	"\x97}\xd9\xd2\x16\x10\x98L(\xc2\xbdT\x84\xee5e" +
	"\x16\xd9\xe8\xa0\x883O\x1d\\+\xcbb\x8a\x80\xd9h" +
	"5\xf8,)\xa8:/|g\x06\x0d$!\xe7\xf8\x0e" +
	"3.\xf5<\x8f,\xce,\xa6f\xea\xc6\xff\x18\xdb\x1e" +
	"`\x86\\\x89s8WrR\xe1\x19\xfa\xf9]\x8f\xf9" +
	"\x121)'\x0c\xbe\xe0C\x9b\xf3\x85H\xb9\xea\xe4\x17" +
	"\xc0|t\xc3~\xbd\xa3cr\x11\xfao\x9a\x97\xb5x" +
	"\xb7\xa6YY\xd8K\x1e\xd8\xb0\xb0\xef\x122k\xb3]" +
	"\xbc\x00\x18\x0b\xf1<!\x14\xa1\x84\xc3v\x11(\xbfd" +
	"\x94\xab\x00\xd2\xe0\x93\xe3L\xf2\x86\x97\x8b(\xcf\x11\xc8" +
	"kX\xb4S\x8fu\xfe\xcce(`0\x9el\xd7\x91" +
	"y\xcb\x188\xdd\xec}~\x9d\xe3\x82\xc4n\xdf\xf15" +
	"\xd7\xa2\xc6v\x0bU\xc3\xe9\x13\xd4\x939rO\xb7\x12" +
	"\xa0\x86x\xa9\xce\xab\xc1\xba\x7fBA\xf7?\x11\xacv" +
	"7\x08l\x0a\xb9\x0f\xf7\x9f\x0a\xe8\xde\x8bfcn\x00" +
	"\x81\x95\x05l\xf7\xde\x04\xba\x17'\x82\xa6j\x91\xf9\xba" +
	"%@\xa8w\x8a\x80\xe7h\xbd\xfd\x1d\xf9dB\xd5\xff" +
	"\x05\x00\x00\xff\xff\xf8\x02\xef\x8f"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a01d3ae410eb4518,
		Nodes: []uint64{
			0x804cca489405d451,
			0x85af7fea06d0820c,
			0x85ba7385f313fe19,
			0x8671dec53083e351,
			0x8976146f144fa050,
			0x8b0a787e82cd94bb,
			0x8cc364dee8f693b8,
			0x8e78986bc45d7dcd,
			0x8ef30778310c94cc,
			0x8f08162dbd7e5068,
			0x8fd77002ae8a97a1,
			0x916880859435c6e8,
			0x95064806dc018bfe,
			0x95887677293b5682,
			0x9c3d3448d73eeae9,
			0x9d7d1f83dda3e6db,
			0x9ebadb578b79fa06,
			0x9f35030ba55fed78,
			0xa418c26cc59929d9,
			0xa7769f40fe6e6de8,
			0xaa8cfcdc401d5fdd,
			0xab06444b30722e01,
			0xb0496f3d284f4a13,
			0xb466cacf63ec03c2,
			0xb48982ac9bcd5d11,
			0xb4c346906ee84815,
			0xb5dd785107c358ca,
			0xb9ec27f476022c1b,
			0xc2e0dec0a6ea94fb,
			0xc3238163cae880df,
			0xc48e24c968a234db,
			0xc4a1ec6280be841c,
			0xc5f12df0a2a52744,
			0xc5fd13a53ae6d46a,
			0xc6d2329c05f7e208,
			0xc781edeab8160cb7,
			0xc8caacd1cd5da434,
			0xcb329eb01b0fa313,
			0xcba0220cda41869e,
			0xcd0eadd9a1a66ed6,
			0xcd95f79174b0eab0,
			0xce2cc4225c956634,
			0xce396869eede9f10,
			0xcfaa8d2601750547,
			0xd085b9baf390bec5,
			0xd2a02e856c28d4ba,
			0xd36b1e9c2929e6e4,
			0xd3780ae416347aee,
			0xd61ba043f14fe175,
			0xd7a67fec5f22e5a0,
			0xd9f867b0a2a15d7f,
			0xdb7bfcfe4d45ff53,
			0xdd5b75b5bc711766,
			0xdf705ef1e0b7d506,
			0xe0a71ff36670f715,
			0xe1f480ef979784b2,
			0xe246d49c91fa330a,
			0xe30c466e5bc2735c,
			0xe31f26eed9fb36a9,
			0xe35760b4db5ab564,
			0xe49e838ea9c34b40,
			0xe64112993dc4d4e0,
			0xea3f0519d272fdd1,
			0xeba81ca9f46690b8,
			0xedee5faa03af6a1e,
			0xefefafebc8ae5534,
			0xeff8f923b1853525,
			0xf1c1ccf59bc6964f,
			0xf44980b23013003b,
			0xf635fdd1f05960f0,
			0xf7dfe7147d09b732,
			0xf8aa5b6fe2496fee,
			0xfa8540d5d8065df1,
			0xfb2eddb58f90f7aa,
			0xfb36d2e966556db0,
			0xfca3f0f431b64506,
			0xfe7d08d4352b0c5f,
			0xff6bcf0c6b23c916,
		},
		Compressed: true,
	})
}
