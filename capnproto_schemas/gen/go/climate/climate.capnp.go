// Code generated by capnpc-go. DO NOT EDIT.

package climate

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type GCM uint16

// GCM_TypeID is the unique identifier for the type GCM.
const GCM_TypeID = 0xce396869eede9f10

// Values of GCM.
const (
	GCM_cccmaCanEsm2   GCM = 0
	GCM_ichecEcEarth   GCM = 1
	GCM_ipslIpslCm5AMr GCM = 2
	GCM_mirocMiroc5    GCM = 3
	GCM_mpiMMpiEsmLr   GCM = 4
	GCM_gfdlEsm4       GCM = 5
	GCM_ipslCm6aLr     GCM = 6
	GCM_mpiEsm12Hr     GCM = 7
	GCM_mriEsm20       GCM = 8
	GCM_ukesm10Ll      GCM = 9
	GCM_gswp3W5E5      GCM = 10
	GCM_mohcHadGem2Es  GCM = 11
)

// String returns the enum's constant name.
func (c GCM) String() string {
	switch c {
	case GCM_cccmaCanEsm2:
		return "cccmaCanEsm2"
	case GCM_ichecEcEarth:
		return "ichecEcEarth"
	case GCM_ipslIpslCm5AMr:
		return "ipslIpslCm5AMr"
	case GCM_mirocMiroc5:
		return "mirocMiroc5"
	case GCM_mpiMMpiEsmLr:
		return "mpiMMpiEsmLr"
	case GCM_gfdlEsm4:
		return "gfdlEsm4"
	case GCM_ipslCm6aLr:
		return "ipslCm6aLr"
	case GCM_mpiEsm12Hr:
		return "mpiEsm12Hr"
	case GCM_mriEsm20:
		return "mriEsm20"
	case GCM_ukesm10Ll:
		return "ukesm10Ll"
	case GCM_gswp3W5E5:
		return "gswp3W5E5"
	case GCM_mohcHadGem2Es:
		return "mohcHadGem2Es"

	default:
		return ""
	}
}

// GCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func GCMFromString(c string) GCM {
	switch c {
	case "cccmaCanEsm2":
		return GCM_cccmaCanEsm2
	case "ichecEcEarth":
		return GCM_ichecEcEarth
	case "ipslIpslCm5AMr":
		return GCM_ipslIpslCm5AMr
	case "mirocMiroc5":
		return GCM_mirocMiroc5
	case "mpiMMpiEsmLr":
		return GCM_mpiMMpiEsmLr
	case "gfdlEsm4":
		return GCM_gfdlEsm4
	case "ipslCm6aLr":
		return GCM_ipslCm6aLr
	case "mpiEsm12Hr":
		return GCM_mpiEsm12Hr
	case "mriEsm20":
		return GCM_mriEsm20
	case "ukesm10Ll":
		return GCM_ukesm10Ll
	case "gswp3W5E5":
		return GCM_gswp3W5E5
	case "mohcHadGem2Es":
		return GCM_mohcHadGem2Es

	default:
		return 0
	}
}

type GCM_List = capnp.EnumList[GCM]

func NewGCM_List(s *capnp.Segment, sz int32) (GCM_List, error) {
	return capnp.NewEnumList[GCM](s, sz)
}

type RCM uint16

// RCM_TypeID is the unique identifier for the type RCM.
const RCM_TypeID = 0x8671dec53083e351

// Values of RCM.
const (
	RCM_clmcomCclm4817    RCM = 0
	RCM_gericsRemo2015    RCM = 1
	RCM_knmiRacmo22E      RCM = 2
	RCM_smhiRca4          RCM = 3
	RCM_clmcomBtuCclm4817 RCM = 4
	RCM_mpiCscRemo2009    RCM = 5
	RCM_uhohWrf361H       RCM = 6
)

// String returns the enum's constant name.
func (c RCM) String() string {
	switch c {
	case RCM_clmcomCclm4817:
		return "clmcomCclm4817"
	case RCM_gericsRemo2015:
		return "gericsRemo2015"
	case RCM_knmiRacmo22E:
		return "knmiRacmo22E"
	case RCM_smhiRca4:
		return "smhiRca4"
	case RCM_clmcomBtuCclm4817:
		return "clmcomBtuCclm4817"
	case RCM_mpiCscRemo2009:
		return "mpiCscRemo2009"
	case RCM_uhohWrf361H:
		return "uhohWrf361H"

	default:
		return ""
	}
}

// RCMFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCMFromString(c string) RCM {
	switch c {
	case "clmcomCclm4817":
		return RCM_clmcomCclm4817
	case "gericsRemo2015":
		return RCM_gericsRemo2015
	case "knmiRacmo22E":
		return RCM_knmiRacmo22E
	case "smhiRca4":
		return RCM_smhiRca4
	case "clmcomBtuCclm4817":
		return RCM_clmcomBtuCclm4817
	case "mpiCscRemo2009":
		return RCM_mpiCscRemo2009
	case "uhohWrf361H":
		return RCM_uhohWrf361H

	default:
		return 0
	}
}

type RCM_List = capnp.EnumList[RCM]

func NewRCM_List(s *capnp.Segment, sz int32) (RCM_List, error) {
	return capnp.NewEnumList[RCM](s, sz)
}

type SSP uint16

// SSP_TypeID is the unique identifier for the type SSP.
const SSP_TypeID = 0xd3780ae416347aee

// Values of SSP.
const (
	SSP_ssp1 SSP = 0
	SSP_ssp2 SSP = 1
	SSP_ssp3 SSP = 2
	SSP_ssp4 SSP = 3
	SSP_ssp5 SSP = 4
)

// String returns the enum's constant name.
func (c SSP) String() string {
	switch c {
	case SSP_ssp1:
		return "ssp1"
	case SSP_ssp2:
		return "ssp2"
	case SSP_ssp3:
		return "ssp3"
	case SSP_ssp4:
		return "ssp4"
	case SSP_ssp5:
		return "ssp5"

	default:
		return ""
	}
}

// SSPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SSPFromString(c string) SSP {
	switch c {
	case "ssp1":
		return SSP_ssp1
	case "ssp2":
		return SSP_ssp2
	case "ssp3":
		return SSP_ssp3
	case "ssp4":
		return SSP_ssp4
	case "ssp5":
		return SSP_ssp5

	default:
		return 0
	}
}

type SSP_List = capnp.EnumList[SSP]

func NewSSP_List(s *capnp.Segment, sz int32) (SSP_List, error) {
	return capnp.NewEnumList[SSP](s, sz)
}

type RCP uint16

// RCP_TypeID is the unique identifier for the type RCP.
const RCP_TypeID = 0x8ef30778310c94cc

// Values of RCP.
const (
	RCP_rcp19 RCP = 0
	RCP_rcp26 RCP = 1
	RCP_rcp34 RCP = 2
	RCP_rcp45 RCP = 3
	RCP_rcp60 RCP = 4
	RCP_rcp70 RCP = 5
	RCP_rcp85 RCP = 6
)

// String returns the enum's constant name.
func (c RCP) String() string {
	switch c {
	case RCP_rcp19:
		return "rcp19"
	case RCP_rcp26:
		return "rcp26"
	case RCP_rcp34:
		return "rcp34"
	case RCP_rcp45:
		return "rcp45"
	case RCP_rcp60:
		return "rcp60"
	case RCP_rcp70:
		return "rcp70"
	case RCP_rcp85:
		return "rcp85"

	default:
		return ""
	}
}

// RCPFromString returns the enum value with a name,
// or the zero value if there's no such value.
func RCPFromString(c string) RCP {
	switch c {
	case "rcp19":
		return RCP_rcp19
	case "rcp26":
		return RCP_rcp26
	case "rcp34":
		return RCP_rcp34
	case "rcp45":
		return RCP_rcp45
	case "rcp60":
		return RCP_rcp60
	case "rcp70":
		return RCP_rcp70
	case "rcp85":
		return RCP_rcp85

	default:
		return 0
	}
}

type RCP_List = capnp.EnumList[RCP]

func NewRCP_List(s *capnp.Segment, sz int32) (RCP_List, error) {
	return capnp.NewEnumList[RCP](s, sz)
}

type EnsembleMember capnp.Struct

// EnsembleMember_TypeID is the unique identifier for the type EnsembleMember.
const EnsembleMember_TypeID = 0xc8caacd1cd5da434

func NewEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember(st), err
}

func NewRootEnsembleMember(s *capnp.Segment) (EnsembleMember, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnsembleMember(st), err
}

func ReadRootEnsembleMember(msg *capnp.Message) (EnsembleMember, error) {
	root, err := msg.Root()
	return EnsembleMember(root.Struct()), err
}

func (s EnsembleMember) String() string {
	str, _ := text.Marshal(0xc8caacd1cd5da434, capnp.Struct(s))
	return str
}

func (s EnsembleMember) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnsembleMember) DecodeFromPtr(p capnp.Ptr) EnsembleMember {
	return EnsembleMember(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnsembleMember) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnsembleMember) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnsembleMember) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnsembleMember) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnsembleMember) R() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s EnsembleMember) SetR(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s EnsembleMember) I() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s EnsembleMember) SetI(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s EnsembleMember) P() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s EnsembleMember) SetP(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

// EnsembleMember_List is a list of EnsembleMember.
type EnsembleMember_List = capnp.StructList[EnsembleMember]

// NewEnsembleMember creates a new list of EnsembleMember.
func NewEnsembleMember_List(s *capnp.Segment, sz int32) (EnsembleMember_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EnsembleMember](l), err
}

// EnsembleMember_Future is a wrapper for a EnsembleMember promised by a client call.
type EnsembleMember_Future struct{ *capnp.Future }

func (f EnsembleMember_Future) Struct() (EnsembleMember, error) {
	p, err := f.Future.Ptr()
	return EnsembleMember(p.Struct()), err
}

type Metadata capnp.Struct

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0xfb36d2e966556db0

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.Root()
	return Metadata(root.Struct()), err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0xfb36d2e966556db0, capnp.Struct(s))
	return str
}

func (s Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata) DecodeFromPtr(p capnp.Ptr) Metadata {
	return Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata) Entries() (Metadata_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata_Entry_List(p.List()), err
}

func (s Metadata) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata) SetEntries(v Metadata_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Metadata_Entry_List, preferring placement in s's segment.
func (s Metadata) NewEntries(n int32) (Metadata_Entry_List, error) {
	l, err := NewMetadata_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Metadata_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Metadata) Info() Metadata_Information {
	p, _ := capnp.Struct(s).Ptr(1)
	return Metadata_Information(p.Interface().Client())
}

func (s Metadata) HasInfo() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Metadata) SetInfo(v Metadata_Information) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Metadata_List is a list of Metadata.
type Metadata_List = capnp.StructList[Metadata]

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Metadata](l), err
}

// Metadata_Future is a wrapper for a Metadata promised by a client call.
type Metadata_Future struct{ *capnp.Future }

func (f Metadata_Future) Struct() (Metadata, error) {
	p, err := f.Future.Ptr()
	return Metadata(p.Struct()), err
}
func (p Metadata_Future) Info() Metadata_Information {
	return Metadata_Information(p.Future.Field(1, nil).Client())
}

type Metadata_Supported capnp.Client

// Metadata_Supported_TypeID is the unique identifier for the type Metadata_Supported.
const Metadata_Supported_TypeID = 0xab06444b30722e01

func (c Metadata_Supported) Categories(ctx context.Context, params func(Metadata_Supported_categories_Params) error) (Metadata_Supported_categories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_categories_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Supported_categories_Results_Future{Future: ans.Future()}, release
}
func (c Metadata_Supported) SupportedValues(ctx context.Context, params func(Metadata_Supported_supportedValues_Params) error) (Metadata_Supported_supportedValues_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Supported_supportedValues_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Supported_supportedValues_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metadata_Supported) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metadata_Supported) AddRef() Metadata_Supported {
	return Metadata_Supported(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metadata_Supported) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metadata_Supported) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metadata_Supported) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metadata_Supported) DecodeFromPtr(p capnp.Ptr) Metadata_Supported {
	return Metadata_Supported(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metadata_Supported) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metadata_Supported) IsSame(other Metadata_Supported) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metadata_Supported) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metadata_Supported) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Metadata_Supported_Server is a Metadata_Supported with a local implementation.
type Metadata_Supported_Server interface {
	Categories(context.Context, Metadata_Supported_categories) error

	SupportedValues(context.Context, Metadata_Supported_supportedValues) error
}

// Metadata_Supported_NewServer creates a new Server from an implementation of Metadata_Supported_Server.
func Metadata_Supported_NewServer(s Metadata_Supported_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Supported_Methods(nil, s), s, c)
}

// Metadata_Supported_ServerToClient creates a new Client from an implementation of Metadata_Supported_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Supported_ServerToClient(s Metadata_Supported_Server) Metadata_Supported {
	return Metadata_Supported(capnp.NewClient(Metadata_Supported_NewServer(s)))
}

// Metadata_Supported_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Supported_Methods(methods []server.Method, s Metadata_Supported_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "categories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Categories(ctx, Metadata_Supported_categories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xab06444b30722e01,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Supported",
			MethodName:    "supportedValues",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedValues(ctx, Metadata_Supported_supportedValues{call})
		},
	})

	return methods
}

// Metadata_Supported_categories holds the state for a server call to Metadata_Supported.categories.
// See server.Call for documentation.
type Metadata_Supported_categories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_categories) Args() Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_categories) AllocResults() (Metadata_Supported_categories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(r), err
}

// Metadata_Supported_supportedValues holds the state for a server call to Metadata_Supported.supportedValues.
// See server.Call for documentation.
type Metadata_Supported_supportedValues struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Supported_supportedValues) Args() Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Supported_supportedValues) AllocResults() (Metadata_Supported_supportedValues_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(r), err
}

// Metadata_Supported_List is a list of Metadata_Supported.
type Metadata_Supported_List = capnp.CapList[Metadata_Supported]

// NewMetadata_Supported creates a new list of Metadata_Supported.
func NewMetadata_Supported_List(s *capnp.Segment, sz int32) (Metadata_Supported_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metadata_Supported](l), err
}

type Metadata_Supported_categories_Params capnp.Struct

// Metadata_Supported_categories_Params_TypeID is the unique identifier for the type Metadata_Supported_categories_Params.
const Metadata_Supported_categories_Params_TypeID = 0x95887677293b5682

func NewMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params(st), err
}

func NewRootMetadata_Supported_categories_Params(s *capnp.Segment) (Metadata_Supported_categories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Supported_categories_Params(st), err
}

func ReadRootMetadata_Supported_categories_Params(msg *capnp.Message) (Metadata_Supported_categories_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Params(root.Struct()), err
}

func (s Metadata_Supported_categories_Params) String() string {
	str, _ := text.Marshal(0x95887677293b5682, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_categories_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_categories_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_categories_Params {
	return Metadata_Supported_categories_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_categories_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_categories_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_categories_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_categories_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metadata_Supported_categories_Params_List is a list of Metadata_Supported_categories_Params.
type Metadata_Supported_categories_Params_List = capnp.StructList[Metadata_Supported_categories_Params]

// NewMetadata_Supported_categories_Params creates a new list of Metadata_Supported_categories_Params.
func NewMetadata_Supported_categories_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metadata_Supported_categories_Params](l), err
}

// Metadata_Supported_categories_Params_Future is a wrapper for a Metadata_Supported_categories_Params promised by a client call.
type Metadata_Supported_categories_Params_Future struct{ *capnp.Future }

func (f Metadata_Supported_categories_Params_Future) Struct() (Metadata_Supported_categories_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_categories_Params(p.Struct()), err
}

type Metadata_Supported_categories_Results capnp.Struct

// Metadata_Supported_categories_Results_TypeID is the unique identifier for the type Metadata_Supported_categories_Results.
const Metadata_Supported_categories_Results_TypeID = 0xe49e838ea9c34b40

func NewMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(st), err
}

func NewRootMetadata_Supported_categories_Results(s *capnp.Segment) (Metadata_Supported_categories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_categories_Results(st), err
}

func ReadRootMetadata_Supported_categories_Results(msg *capnp.Message) (Metadata_Supported_categories_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_categories_Results(root.Struct()), err
}

func (s Metadata_Supported_categories_Results) String() string {
	str, _ := text.Marshal(0xe49e838ea9c34b40, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_categories_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_categories_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_categories_Results {
	return Metadata_Supported_categories_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_categories_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_categories_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_categories_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_categories_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_categories_Results) Types() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Metadata_Supported_categories_Results) HasTypes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_categories_Results) SetTypes(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_categories_Results) NewTypes(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Supported_categories_Results_List is a list of Metadata_Supported_categories_Results.
type Metadata_Supported_categories_Results_List = capnp.StructList[Metadata_Supported_categories_Results]

// NewMetadata_Supported_categories_Results creates a new list of Metadata_Supported_categories_Results.
func NewMetadata_Supported_categories_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_categories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_categories_Results](l), err
}

// Metadata_Supported_categories_Results_Future is a wrapper for a Metadata_Supported_categories_Results promised by a client call.
type Metadata_Supported_categories_Results_Future struct{ *capnp.Future }

func (f Metadata_Supported_categories_Results_Future) Struct() (Metadata_Supported_categories_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_categories_Results(p.Struct()), err
}

type Metadata_Supported_supportedValues_Params capnp.Struct

// Metadata_Supported_supportedValues_Params_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Params.
const Metadata_Supported_supportedValues_Params_TypeID = 0xc6d2329c05f7e208

func NewMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params(st), err
}

func NewRootMetadata_Supported_supportedValues_Params(s *capnp.Segment) (Metadata_Supported_supportedValues_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Params(st), err
}

func ReadRootMetadata_Supported_supportedValues_Params(msg *capnp.Message) (Metadata_Supported_supportedValues_Params, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Params(root.Struct()), err
}

func (s Metadata_Supported_supportedValues_Params) String() string {
	str, _ := text.Marshal(0xc6d2329c05f7e208, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_supportedValues_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_supportedValues_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_supportedValues_Params {
	return Metadata_Supported_supportedValues_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_supportedValues_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_supportedValues_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_supportedValues_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_supportedValues_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_supportedValues_Params) TypeId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Supported_supportedValues_Params) HasTypeId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Params) TypeIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Supported_supportedValues_Params) SetTypeId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Metadata_Supported_supportedValues_Params_List is a list of Metadata_Supported_supportedValues_Params.
type Metadata_Supported_supportedValues_Params_List = capnp.StructList[Metadata_Supported_supportedValues_Params]

// NewMetadata_Supported_supportedValues_Params creates a new list of Metadata_Supported_supportedValues_Params.
func NewMetadata_Supported_supportedValues_Params_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_supportedValues_Params](l), err
}

// Metadata_Supported_supportedValues_Params_Future is a wrapper for a Metadata_Supported_supportedValues_Params promised by a client call.
type Metadata_Supported_supportedValues_Params_Future struct{ *capnp.Future }

func (f Metadata_Supported_supportedValues_Params_Future) Struct() (Metadata_Supported_supportedValues_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_supportedValues_Params(p.Struct()), err
}

type Metadata_Supported_supportedValues_Results capnp.Struct

// Metadata_Supported_supportedValues_Results_TypeID is the unique identifier for the type Metadata_Supported_supportedValues_Results.
const Metadata_Supported_supportedValues_Results_TypeID = 0xe0a71ff36670f715

func NewMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(st), err
}

func NewRootMetadata_Supported_supportedValues_Results(s *capnp.Segment) (Metadata_Supported_supportedValues_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Supported_supportedValues_Results(st), err
}

func ReadRootMetadata_Supported_supportedValues_Results(msg *capnp.Message) (Metadata_Supported_supportedValues_Results, error) {
	root, err := msg.Root()
	return Metadata_Supported_supportedValues_Results(root.Struct()), err
}

func (s Metadata_Supported_supportedValues_Results) String() string {
	str, _ := text.Marshal(0xe0a71ff36670f715, capnp.Struct(s))
	return str
}

func (s Metadata_Supported_supportedValues_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Supported_supportedValues_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Supported_supportedValues_Results {
	return Metadata_Supported_supportedValues_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Supported_supportedValues_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Supported_supportedValues_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Supported_supportedValues_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Supported_supportedValues_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Supported_supportedValues_Results) Values() (common.IdInformation_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation_List(p.List()), err
}

func (s Metadata_Supported_supportedValues_Results) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Supported_supportedValues_Results) SetValues(v common.IdInformation_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Metadata_Supported_supportedValues_Results) NewValues(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Supported_supportedValues_Results_List is a list of Metadata_Supported_supportedValues_Results.
type Metadata_Supported_supportedValues_Results_List = capnp.StructList[Metadata_Supported_supportedValues_Results]

// NewMetadata_Supported_supportedValues_Results creates a new list of Metadata_Supported_supportedValues_Results.
func NewMetadata_Supported_supportedValues_Results_List(s *capnp.Segment, sz int32) (Metadata_Supported_supportedValues_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Supported_supportedValues_Results](l), err
}

// Metadata_Supported_supportedValues_Results_Future is a wrapper for a Metadata_Supported_supportedValues_Results promised by a client call.
type Metadata_Supported_supportedValues_Results_Future struct{ *capnp.Future }

func (f Metadata_Supported_supportedValues_Results_Future) Struct() (Metadata_Supported_supportedValues_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Supported_supportedValues_Results(p.Struct()), err
}

type Metadata_Value capnp.Struct
type Metadata_Value_Which uint16

const (
	Metadata_Value_Which_text  Metadata_Value_Which = 0
	Metadata_Value_Which_float Metadata_Value_Which = 1
	Metadata_Value_Which_int   Metadata_Value_Which = 2
	Metadata_Value_Which_bool  Metadata_Value_Which = 3
	Metadata_Value_Which_date  Metadata_Value_Which = 4
)

func (w Metadata_Value_Which) String() string {
	const s = "textfloatintbooldate"
	switch w {
	case Metadata_Value_Which_text:
		return s[0:4]
	case Metadata_Value_Which_float:
		return s[4:9]
	case Metadata_Value_Which_int:
		return s[9:12]
	case Metadata_Value_Which_bool:
		return s[12:16]
	case Metadata_Value_Which_date:
		return s[16:20]

	}
	return "Metadata_Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Value_TypeID is the unique identifier for the type Metadata_Value.
const Metadata_Value_TypeID = 0xc48e24c968a234db

func NewMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value(st), err
}

func NewRootMetadata_Value(s *capnp.Segment) (Metadata_Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Metadata_Value(st), err
}

func ReadRootMetadata_Value(msg *capnp.Message) (Metadata_Value, error) {
	root, err := msg.Root()
	return Metadata_Value(root.Struct()), err
}

func (s Metadata_Value) String() string {
	str, _ := text.Marshal(0xc48e24c968a234db, capnp.Struct(s))
	return str
}

func (s Metadata_Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Value) DecodeFromPtr(p capnp.Ptr) Metadata_Value {
	return Metadata_Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Metadata_Value) Which() Metadata_Value_Which {
	return Metadata_Value_Which(capnp.Struct(s).Uint16(0))
}
func (s Metadata_Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Value) Text() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != text")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Value) HasText() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Value) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Value) SetText(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata_Value) Float() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != float")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Metadata_Value) SetFloat(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Metadata_Value) Int() int64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != int")
	}
	return int64(capnp.Struct(s).Uint64(8))
}

func (s Metadata_Value) SetInt(v int64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s Metadata_Value) Bool() bool {
	if capnp.Struct(s).Uint16(0) != 3 {
		panic("Which() != bool")
	}
	return capnp.Struct(s).Bit(64)
}

func (s Metadata_Value) SetBool(v bool) {
	capnp.Struct(s).SetUint16(0, 3)
	capnp.Struct(s).SetBit(64, v)
}

func (s Metadata_Value) Date() (common.Date, error) {
	if capnp.Struct(s).Uint16(0) != 4 {
		panic("Which() != date")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s Metadata_Value) HasDate() bool {
	if capnp.Struct(s).Uint16(0) != 4 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Value) SetDate(v common.Date) error {
	capnp.Struct(s).SetUint16(0, 4)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Metadata_Value) NewDate() (common.Date, error) {
	capnp.Struct(s).SetUint16(0, 4)
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Metadata_Value_List is a list of Metadata_Value.
type Metadata_Value_List = capnp.StructList[Metadata_Value]

// NewMetadata_Value creates a new list of Metadata_Value.
func NewMetadata_Value_List(s *capnp.Segment, sz int32) (Metadata_Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Value](l), err
}

// Metadata_Value_Future is a wrapper for a Metadata_Value promised by a client call.
type Metadata_Value_Future struct{ *capnp.Future }

func (f Metadata_Value_Future) Struct() (Metadata_Value, error) {
	p, err := f.Future.Ptr()
	return Metadata_Value(p.Struct()), err
}
func (p Metadata_Value_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Entry capnp.Struct
type Metadata_Entry_Which uint16

const (
	Metadata_Entry_Which_gcm         Metadata_Entry_Which = 0
	Metadata_Entry_Which_rcm         Metadata_Entry_Which = 1
	Metadata_Entry_Which_historical  Metadata_Entry_Which = 2
	Metadata_Entry_Which_rcp         Metadata_Entry_Which = 3
	Metadata_Entry_Which_ssp         Metadata_Entry_Which = 4
	Metadata_Entry_Which_ensMem      Metadata_Entry_Which = 5
	Metadata_Entry_Which_version     Metadata_Entry_Which = 6
	Metadata_Entry_Which_start       Metadata_Entry_Which = 7
	Metadata_Entry_Which_end         Metadata_Entry_Which = 8
	Metadata_Entry_Which_co2         Metadata_Entry_Which = 9
	Metadata_Entry_Which_picontrol   Metadata_Entry_Which = 10
	Metadata_Entry_Which_description Metadata_Entry_Which = 11
)

func (w Metadata_Entry_Which) String() string {
	const s = "gcmrcmhistoricalrcpsspensMemversionstartendco2picontroldescription"
	switch w {
	case Metadata_Entry_Which_gcm:
		return s[0:3]
	case Metadata_Entry_Which_rcm:
		return s[3:6]
	case Metadata_Entry_Which_historical:
		return s[6:16]
	case Metadata_Entry_Which_rcp:
		return s[16:19]
	case Metadata_Entry_Which_ssp:
		return s[19:22]
	case Metadata_Entry_Which_ensMem:
		return s[22:28]
	case Metadata_Entry_Which_version:
		return s[28:35]
	case Metadata_Entry_Which_start:
		return s[35:40]
	case Metadata_Entry_Which_end:
		return s[40:43]
	case Metadata_Entry_Which_co2:
		return s[43:46]
	case Metadata_Entry_Which_picontrol:
		return s[46:55]
	case Metadata_Entry_Which_description:
		return s[55:66]

	}
	return "Metadata_Entry_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Metadata_Entry_TypeID is the unique identifier for the type Metadata_Entry.
const Metadata_Entry_TypeID = 0x85af7fea06d0820c

func NewMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry(st), err
}

func NewRootMetadata_Entry(s *capnp.Segment) (Metadata_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Metadata_Entry(st), err
}

func ReadRootMetadata_Entry(msg *capnp.Message) (Metadata_Entry, error) {
	root, err := msg.Root()
	return Metadata_Entry(root.Struct()), err
}

func (s Metadata_Entry) String() string {
	str, _ := text.Marshal(0x85af7fea06d0820c, capnp.Struct(s))
	return str
}

func (s Metadata_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Entry) DecodeFromPtr(p capnp.Ptr) Metadata_Entry {
	return Metadata_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Metadata_Entry) Which() Metadata_Entry_Which {
	return Metadata_Entry_Which(capnp.Struct(s).Uint16(2))
}
func (s Metadata_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Entry) Gcm() GCM {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != gcm")
	}
	return GCM(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetGcm(v GCM) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Rcm() RCM {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != rcm")
	}
	return RCM(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetRcm(v RCM) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) SetHistorical() {
	capnp.Struct(s).SetUint16(2, 2)

}

func (s Metadata_Entry) Rcp() RCP {
	if capnp.Struct(s).Uint16(2) != 3 {
		panic("Which() != rcp")
	}
	return RCP(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetRcp(v RCP) {
	capnp.Struct(s).SetUint16(2, 3)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) Ssp() SSP {
	if capnp.Struct(s).Uint16(2) != 4 {
		panic("Which() != ssp")
	}
	return SSP(capnp.Struct(s).Uint16(0))
}

func (s Metadata_Entry) SetSsp(v SSP) {
	capnp.Struct(s).SetUint16(2, 4)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Metadata_Entry) EnsMem() (EnsembleMember, error) {
	if capnp.Struct(s).Uint16(2) != 5 {
		panic("Which() != ensMem")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return EnsembleMember(p.Struct()), err
}

func (s Metadata_Entry) HasEnsMem() bool {
	if capnp.Struct(s).Uint16(2) != 5 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetEnsMem(v EnsembleMember) error {
	capnp.Struct(s).SetUint16(2, 5)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnsMem sets the ensMem field to a newly
// allocated EnsembleMember struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnsMem() (EnsembleMember, error) {
	capnp.Struct(s).SetUint16(2, 5)
	ss, err := NewEnsembleMember(capnp.Struct(s).Segment())
	if err != nil {
		return EnsembleMember{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) Version() (string, error) {
	if capnp.Struct(s).Uint16(2) != 6 {
		panic("Which() != version")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasVersion() bool {
	if capnp.Struct(s).Uint16(2) != 6 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) VersionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetVersion(v string) error {
	capnp.Struct(s).SetUint16(2, 6)
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata_Entry) Start() (common.Date, error) {
	if capnp.Struct(s).Uint16(2) != 7 {
		panic("Which() != start")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s Metadata_Entry) HasStart() bool {
	if capnp.Struct(s).Uint16(2) != 7 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetStart(v common.Date) error {
	capnp.Struct(s).SetUint16(2, 7)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewStart() (common.Date, error) {
	capnp.Struct(s).SetUint16(2, 7)
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) End() (common.Date, error) {
	if capnp.Struct(s).Uint16(2) != 8 {
		panic("Which() != end")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s Metadata_Entry) HasEnd() bool {
	if capnp.Struct(s).Uint16(2) != 8 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) SetEnd(v common.Date) error {
	capnp.Struct(s).SetUint16(2, 8)
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Metadata_Entry) NewEnd() (common.Date, error) {
	capnp.Struct(s).SetUint16(2, 8)
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Metadata_Entry) Co2() float32 {
	if capnp.Struct(s).Uint16(2) != 9 {
		panic("Which() != co2")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Metadata_Entry) SetCo2(v float32) {
	capnp.Struct(s).SetUint16(2, 9)
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Metadata_Entry) SetPicontrol() {
	capnp.Struct(s).SetUint16(2, 10)

}

func (s Metadata_Entry) Description() (string, error) {
	if capnp.Struct(s).Uint16(2) != 11 {
		panic("Which() != description")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata_Entry) HasDescription() bool {
	if capnp.Struct(s).Uint16(2) != 11 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Entry) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata_Entry) SetDescription(v string) error {
	capnp.Struct(s).SetUint16(2, 11)
	return capnp.Struct(s).SetText(0, v)
}

// Metadata_Entry_List is a list of Metadata_Entry.
type Metadata_Entry_List = capnp.StructList[Metadata_Entry]

// NewMetadata_Entry creates a new list of Metadata_Entry.
func NewMetadata_Entry_List(s *capnp.Segment, sz int32) (Metadata_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Entry](l), err
}

// Metadata_Entry_Future is a wrapper for a Metadata_Entry promised by a client call.
type Metadata_Entry_Future struct{ *capnp.Future }

func (f Metadata_Entry_Future) Struct() (Metadata_Entry, error) {
	p, err := f.Future.Ptr()
	return Metadata_Entry(p.Struct()), err
}
func (p Metadata_Entry_Future) EnsMem() EnsembleMember_Future {
	return EnsembleMember_Future{Future: p.Future.Field(0, nil)}
}
func (p Metadata_Entry_Future) Start() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p Metadata_Entry_Future) End() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information capnp.Client

// Metadata_Information_TypeID is the unique identifier for the type Metadata_Information.
const Metadata_Information_TypeID = 0xc781edeab8160cb7

func (c Metadata_Information) ForOne(ctx context.Context, params func(Metadata_Information_forOne_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forOne_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Metadata_Information) ForAll(ctx context.Context, params func(Metadata_Information_forAll_Params) error) (Metadata_Information_forAll_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Metadata_Information_forAll_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Information_forAll_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Metadata_Information) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Metadata_Information) AddRef() Metadata_Information {
	return Metadata_Information(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Metadata_Information) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Metadata_Information) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Metadata_Information) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Metadata_Information) DecodeFromPtr(p capnp.Ptr) Metadata_Information {
	return Metadata_Information(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Metadata_Information) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Metadata_Information) IsSame(other Metadata_Information) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Metadata_Information) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Metadata_Information) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Metadata_Information_Server is a Metadata_Information with a local implementation.
type Metadata_Information_Server interface {
	ForOne(context.Context, Metadata_Information_forOne) error

	ForAll(context.Context, Metadata_Information_forAll) error
}

// Metadata_Information_NewServer creates a new Server from an implementation of Metadata_Information_Server.
func Metadata_Information_NewServer(s Metadata_Information_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Metadata_Information_Methods(nil, s), s, c)
}

// Metadata_Information_ServerToClient creates a new Client from an implementation of Metadata_Information_Server.
// The caller is responsible for calling Release on the returned Client.
func Metadata_Information_ServerToClient(s Metadata_Information_Server) Metadata_Information {
	return Metadata_Information(capnp.NewClient(Metadata_Information_NewServer(s)))
}

// Metadata_Information_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Metadata_Information_Methods(methods []server.Method, s Metadata_Information_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      0,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forOne",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForOne(ctx, Metadata_Information_forOne{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc781edeab8160cb7,
			MethodID:      1,
			InterfaceName: "climate.capnp:Metadata.Information",
			MethodName:    "forAll",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ForAll(ctx, Metadata_Information_forAll{call})
		},
	})

	return methods
}

// Metadata_Information_forOne holds the state for a server call to Metadata_Information.forOne.
// See server.Call for documentation.
type Metadata_Information_forOne struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forOne) Args() Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forOne) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation(r), err
}

// Metadata_Information_forAll holds the state for a server call to Metadata_Information.forAll.
// See server.Call for documentation.
type Metadata_Information_forAll struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Metadata_Information_forAll) Args() Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Metadata_Information_forAll) AllocResults() (Metadata_Information_forAll_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(r), err
}

// Metadata_Information_List is a list of Metadata_Information.
type Metadata_Information_List = capnp.CapList[Metadata_Information]

// NewMetadata_Information creates a new list of Metadata_Information.
func NewMetadata_Information_List(s *capnp.Segment, sz int32) (Metadata_Information_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Metadata_Information](l), err
}

type Metadata_Information_forOne_Params capnp.Struct

// Metadata_Information_forOne_Params_TypeID is the unique identifier for the type Metadata_Information_forOne_Params.
const Metadata_Information_forOne_Params_TypeID = 0xdf705ef1e0b7d506

func NewMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params(st), err
}

func NewRootMetadata_Information_forOne_Params(s *capnp.Segment) (Metadata_Information_forOne_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forOne_Params(st), err
}

func ReadRootMetadata_Information_forOne_Params(msg *capnp.Message) (Metadata_Information_forOne_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forOne_Params(root.Struct()), err
}

func (s Metadata_Information_forOne_Params) String() string {
	str, _ := text.Marshal(0xdf705ef1e0b7d506, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forOne_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forOne_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forOne_Params {
	return Metadata_Information_forOne_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forOne_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forOne_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forOne_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forOne_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Information_forOne_Params) Entry() (Metadata_Entry, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata_Entry(p.Struct()), err
}

func (s Metadata_Information_forOne_Params) HasEntry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Information_forOne_Params) SetEntry(v Metadata_Entry) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEntry sets the entry field to a newly
// allocated Metadata_Entry struct, preferring placement in s's segment.
func (s Metadata_Information_forOne_Params) NewEntry() (Metadata_Entry, error) {
	ss, err := NewMetadata_Entry(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata_Entry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Metadata_Information_forOne_Params_List is a list of Metadata_Information_forOne_Params.
type Metadata_Information_forOne_Params_List = capnp.StructList[Metadata_Information_forOne_Params]

// NewMetadata_Information_forOne_Params creates a new list of Metadata_Information_forOne_Params.
func NewMetadata_Information_forOne_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forOne_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Information_forOne_Params](l), err
}

// Metadata_Information_forOne_Params_Future is a wrapper for a Metadata_Information_forOne_Params promised by a client call.
type Metadata_Information_forOne_Params_Future struct{ *capnp.Future }

func (f Metadata_Information_forOne_Params_Future) Struct() (Metadata_Information_forOne_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forOne_Params(p.Struct()), err
}
func (p Metadata_Information_forOne_Params_Future) Entry() Metadata_Entry_Future {
	return Metadata_Entry_Future{Future: p.Future.Field(0, nil)}
}

type Metadata_Information_forAll_Params capnp.Struct

// Metadata_Information_forAll_Params_TypeID is the unique identifier for the type Metadata_Information_forAll_Params.
const Metadata_Information_forAll_Params_TypeID = 0xe246d49c91fa330a

func NewMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params(st), err
}

func NewRootMetadata_Information_forAll_Params(s *capnp.Segment) (Metadata_Information_forAll_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Metadata_Information_forAll_Params(st), err
}

func ReadRootMetadata_Information_forAll_Params(msg *capnp.Message) (Metadata_Information_forAll_Params, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Params(root.Struct()), err
}

func (s Metadata_Information_forAll_Params) String() string {
	str, _ := text.Marshal(0xe246d49c91fa330a, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forAll_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forAll_Params) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forAll_Params {
	return Metadata_Information_forAll_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forAll_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forAll_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forAll_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forAll_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Metadata_Information_forAll_Params_List is a list of Metadata_Information_forAll_Params.
type Metadata_Information_forAll_Params_List = capnp.StructList[Metadata_Information_forAll_Params]

// NewMetadata_Information_forAll_Params creates a new list of Metadata_Information_forAll_Params.
func NewMetadata_Information_forAll_Params_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Metadata_Information_forAll_Params](l), err
}

// Metadata_Information_forAll_Params_Future is a wrapper for a Metadata_Information_forAll_Params promised by a client call.
type Metadata_Information_forAll_Params_Future struct{ *capnp.Future }

func (f Metadata_Information_forAll_Params_Future) Struct() (Metadata_Information_forAll_Params, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forAll_Params(p.Struct()), err
}

type Metadata_Information_forAll_Results capnp.Struct

// Metadata_Information_forAll_Results_TypeID is the unique identifier for the type Metadata_Information_forAll_Results.
const Metadata_Information_forAll_Results_TypeID = 0x9f35030ba55fed78

func NewMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(st), err
}

func NewRootMetadata_Information_forAll_Results(s *capnp.Segment) (Metadata_Information_forAll_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Metadata_Information_forAll_Results(st), err
}

func ReadRootMetadata_Information_forAll_Results(msg *capnp.Message) (Metadata_Information_forAll_Results, error) {
	root, err := msg.Root()
	return Metadata_Information_forAll_Results(root.Struct()), err
}

func (s Metadata_Information_forAll_Results) String() string {
	str, _ := text.Marshal(0x9f35030ba55fed78, capnp.Struct(s))
	return str
}

func (s Metadata_Information_forAll_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata_Information_forAll_Results) DecodeFromPtr(p capnp.Ptr) Metadata_Information_forAll_Results {
	return Metadata_Information_forAll_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata_Information_forAll_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata_Information_forAll_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata_Information_forAll_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata_Information_forAll_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata_Information_forAll_Results) All() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Pair_List(p.List()), err
}

func (s Metadata_Information_forAll_Results) HasAll() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata_Information_forAll_Results) SetAll(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAll sets the all field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s Metadata_Information_forAll_Results) NewAll(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Metadata_Information_forAll_Results_List is a list of Metadata_Information_forAll_Results.
type Metadata_Information_forAll_Results_List = capnp.StructList[Metadata_Information_forAll_Results]

// NewMetadata_Information_forAll_Results creates a new list of Metadata_Information_forAll_Results.
func NewMetadata_Information_forAll_Results_List(s *capnp.Segment, sz int32) (Metadata_Information_forAll_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Metadata_Information_forAll_Results](l), err
}

// Metadata_Information_forAll_Results_Future is a wrapper for a Metadata_Information_forAll_Results promised by a client call.
type Metadata_Information_forAll_Results_Future struct{ *capnp.Future }

func (f Metadata_Information_forAll_Results_Future) Struct() (Metadata_Information_forAll_Results, error) {
	p, err := f.Future.Ptr()
	return Metadata_Information_forAll_Results(p.Struct()), err
}

type Dataset capnp.Client

// Dataset_TypeID is the unique identifier for the type Dataset.
const Dataset_TypeID = 0xf635fdd1f05960f0

func (c Dataset) Metadata(ctx context.Context, params func(Dataset_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_metadata_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release
}
func (c Dataset) ClosestTimeSeriesAt(ctx context.Context, params func(Dataset_closestTimeSeriesAt_Params) error) (Dataset_closestTimeSeriesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_closestTimeSeriesAt_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_closestTimeSeriesAt_Results_Future{Future: ans.Future()}, release
}
func (c Dataset) TimeSeriesAt(ctx context.Context, params func(Dataset_timeSeriesAt_Params) error) (Dataset_timeSeriesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_timeSeriesAt_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_timeSeriesAt_Results_Future{Future: ans.Future()}, release
}
func (c Dataset) Locations(ctx context.Context, params func(Dataset_locations_Params) error) (Dataset_locations_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "locations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_locations_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_locations_Results_Future{Future: ans.Future()}, release
}
func (c Dataset) StreamLocations(ctx context.Context, params func(Dataset_streamLocations_Params) error) (Dataset_streamLocations_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      4,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "streamLocations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_streamLocations_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_streamLocations_Results_Future{Future: ans.Future()}, release
}
func (c Dataset) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Dataset) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Dataset) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Dataset) AddRef() Dataset {
	return Dataset(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Dataset) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Dataset) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Dataset) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Dataset) DecodeFromPtr(p capnp.Ptr) Dataset {
	return Dataset(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Dataset) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Dataset) IsSame(other Dataset) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Dataset) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Dataset) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Dataset_Server is a Dataset with a local implementation.
type Dataset_Server interface {
	Metadata(context.Context, Dataset_metadata) error

	ClosestTimeSeriesAt(context.Context, Dataset_closestTimeSeriesAt) error

	TimeSeriesAt(context.Context, Dataset_timeSeriesAt) error

	Locations(context.Context, Dataset_locations) error

	StreamLocations(context.Context, Dataset_streamLocations) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Dataset_NewServer creates a new Server from an implementation of Dataset_Server.
func Dataset_NewServer(s Dataset_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_Methods(nil, s), s, c)
}

// Dataset_ServerToClient creates a new Client from an implementation of Dataset_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_ServerToClient(s Dataset_Server) Dataset {
	return Dataset(capnp.NewClient(Dataset_NewServer(s)))
}

// Dataset_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_Methods(methods []server.Method, s Dataset_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 7)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, Dataset_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      1,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "closestTimeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestTimeSeriesAt(ctx, Dataset_closestTimeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      2,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "timeSeriesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.TimeSeriesAt(ctx, Dataset_timeSeriesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      3,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "locations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Locations(ctx, Dataset_locations{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf635fdd1f05960f0,
			MethodID:      4,
			InterfaceName: "climate.capnp:Dataset",
			MethodName:    "streamLocations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamLocations(ctx, Dataset_streamLocations{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Dataset_metadata holds the state for a server call to Dataset.metadata.
// See server.Call for documentation.
type Dataset_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_metadata) Args() Dataset_metadata_Params {
	return Dataset_metadata_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(r), err
}

// Dataset_closestTimeSeriesAt holds the state for a server call to Dataset.closestTimeSeriesAt.
// See server.Call for documentation.
type Dataset_closestTimeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_closestTimeSeriesAt) Args() Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_closestTimeSeriesAt) AllocResults() (Dataset_closestTimeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(r), err
}

// Dataset_timeSeriesAt holds the state for a server call to Dataset.timeSeriesAt.
// See server.Call for documentation.
type Dataset_timeSeriesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_timeSeriesAt) Args() Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_timeSeriesAt) AllocResults() (Dataset_timeSeriesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(r), err
}

// Dataset_locations holds the state for a server call to Dataset.locations.
// See server.Call for documentation.
type Dataset_locations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_locations) Args() Dataset_locations_Params {
	return Dataset_locations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_locations) AllocResults() (Dataset_locations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(r), err
}

// Dataset_streamLocations holds the state for a server call to Dataset.streamLocations.
// See server.Call for documentation.
type Dataset_streamLocations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_streamLocations) Args() Dataset_streamLocations_Params {
	return Dataset_streamLocations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_streamLocations) AllocResults() (Dataset_streamLocations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(r), err
}

// Dataset_List is a list of Dataset.
type Dataset_List = capnp.CapList[Dataset]

// NewDataset creates a new list of Dataset.
func NewDataset_List(s *capnp.Segment, sz int32) (Dataset_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Dataset](l), err
}

type Dataset_GetLocationsCallback capnp.Client

// Dataset_GetLocationsCallback_TypeID is the unique identifier for the type Dataset_GetLocationsCallback.
const Dataset_GetLocationsCallback_TypeID = 0xd61ba043f14fe175

func (c Dataset_GetLocationsCallback) NextLocations(ctx context.Context, params func(Dataset_GetLocationsCallback_nextLocations_Params) error) (Dataset_GetLocationsCallback_nextLocations_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd61ba043f14fe175,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset.GetLocationsCallback",
			MethodName:    "nextLocations",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dataset_GetLocationsCallback_nextLocations_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Dataset_GetLocationsCallback_nextLocations_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Dataset_GetLocationsCallback) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Dataset_GetLocationsCallback) AddRef() Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Dataset_GetLocationsCallback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Dataset_GetLocationsCallback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Dataset_GetLocationsCallback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Dataset_GetLocationsCallback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Dataset_GetLocationsCallback) IsSame(other Dataset_GetLocationsCallback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Dataset_GetLocationsCallback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Dataset_GetLocationsCallback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Dataset_GetLocationsCallback_Server is a Dataset_GetLocationsCallback with a local implementation.
type Dataset_GetLocationsCallback_Server interface {
	NextLocations(context.Context, Dataset_GetLocationsCallback_nextLocations) error
}

// Dataset_GetLocationsCallback_NewServer creates a new Server from an implementation of Dataset_GetLocationsCallback_Server.
func Dataset_GetLocationsCallback_NewServer(s Dataset_GetLocationsCallback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dataset_GetLocationsCallback_Methods(nil, s), s, c)
}

// Dataset_GetLocationsCallback_ServerToClient creates a new Client from an implementation of Dataset_GetLocationsCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func Dataset_GetLocationsCallback_ServerToClient(s Dataset_GetLocationsCallback_Server) Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(capnp.NewClient(Dataset_GetLocationsCallback_NewServer(s)))
}

// Dataset_GetLocationsCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dataset_GetLocationsCallback_Methods(methods []server.Method, s Dataset_GetLocationsCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd61ba043f14fe175,
			MethodID:      0,
			InterfaceName: "climate.capnp:Dataset.GetLocationsCallback",
			MethodName:    "nextLocations",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextLocations(ctx, Dataset_GetLocationsCallback_nextLocations{call})
		},
	})

	return methods
}

// Dataset_GetLocationsCallback_nextLocations holds the state for a server call to Dataset_GetLocationsCallback.nextLocations.
// See server.Call for documentation.
type Dataset_GetLocationsCallback_nextLocations struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dataset_GetLocationsCallback_nextLocations) Args() Dataset_GetLocationsCallback_nextLocations_Params {
	return Dataset_GetLocationsCallback_nextLocations_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Dataset_GetLocationsCallback_nextLocations) AllocResults() (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(r), err
}

// Dataset_GetLocationsCallback_List is a list of Dataset_GetLocationsCallback.
type Dataset_GetLocationsCallback_List = capnp.CapList[Dataset_GetLocationsCallback]

// NewDataset_GetLocationsCallback creates a new list of Dataset_GetLocationsCallback.
func NewDataset_GetLocationsCallback_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Dataset_GetLocationsCallback](l), err
}

type Dataset_GetLocationsCallback_nextLocations_Params capnp.Struct

// Dataset_GetLocationsCallback_nextLocations_Params_TypeID is the unique identifier for the type Dataset_GetLocationsCallback_nextLocations_Params.
const Dataset_GetLocationsCallback_nextLocations_Params_TypeID = 0xe64112993dc4d4e0

func NewDataset_GetLocationsCallback_nextLocations_Params(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dataset_GetLocationsCallback_nextLocations_Params(st), err
}

func NewRootDataset_GetLocationsCallback_nextLocations_Params(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Dataset_GetLocationsCallback_nextLocations_Params(st), err
}

func ReadRootDataset_GetLocationsCallback_nextLocations_Params(msg *capnp.Message) (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	root, err := msg.Root()
	return Dataset_GetLocationsCallback_nextLocations_Params(root.Struct()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) String() string {
	str, _ := text.Marshal(0xe64112993dc4d4e0, capnp.Struct(s))
	return str
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback_nextLocations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback_nextLocations_Params {
	return Dataset_GetLocationsCallback_nextLocations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_GetLocationsCallback_nextLocations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_GetLocationsCallback_nextLocations_Params) MaxCount() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Dataset_GetLocationsCallback_nextLocations_Params) SetMaxCount(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// Dataset_GetLocationsCallback_nextLocations_Params_List is a list of Dataset_GetLocationsCallback_nextLocations_Params.
type Dataset_GetLocationsCallback_nextLocations_Params_List = capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Params]

// NewDataset_GetLocationsCallback_nextLocations_Params creates a new list of Dataset_GetLocationsCallback_nextLocations_Params.
func NewDataset_GetLocationsCallback_nextLocations_Params_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_nextLocations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Params](l), err
}

// Dataset_GetLocationsCallback_nextLocations_Params_Future is a wrapper for a Dataset_GetLocationsCallback_nextLocations_Params promised by a client call.
type Dataset_GetLocationsCallback_nextLocations_Params_Future struct{ *capnp.Future }

func (f Dataset_GetLocationsCallback_nextLocations_Params_Future) Struct() (Dataset_GetLocationsCallback_nextLocations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_GetLocationsCallback_nextLocations_Params(p.Struct()), err
}

type Dataset_GetLocationsCallback_nextLocations_Results capnp.Struct

// Dataset_GetLocationsCallback_nextLocations_Results_TypeID is the unique identifier for the type Dataset_GetLocationsCallback_nextLocations_Results.
const Dataset_GetLocationsCallback_nextLocations_Results_TypeID = 0xfa8540d5d8065df1

func NewDataset_GetLocationsCallback_nextLocations_Results(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(st), err
}

func NewRootDataset_GetLocationsCallback_nextLocations_Results(s *capnp.Segment) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_GetLocationsCallback_nextLocations_Results(st), err
}

func ReadRootDataset_GetLocationsCallback_nextLocations_Results(msg *capnp.Message) (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	root, err := msg.Root()
	return Dataset_GetLocationsCallback_nextLocations_Results(root.Struct()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) String() string {
	str, _ := text.Marshal(0xfa8540d5d8065df1, capnp.Struct(s))
	return str
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_GetLocationsCallback_nextLocations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_GetLocationsCallback_nextLocations_Results {
	return Dataset_GetLocationsCallback_nextLocations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_GetLocationsCallback_nextLocations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_GetLocationsCallback_nextLocations_Results) Locations() (Location_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Location_List(p.List()), err
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) HasLocations() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_GetLocationsCallback_nextLocations_Results) SetLocations(v Location_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_GetLocationsCallback_nextLocations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Dataset_GetLocationsCallback_nextLocations_Results_List is a list of Dataset_GetLocationsCallback_nextLocations_Results.
type Dataset_GetLocationsCallback_nextLocations_Results_List = capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Results]

// NewDataset_GetLocationsCallback_nextLocations_Results creates a new list of Dataset_GetLocationsCallback_nextLocations_Results.
func NewDataset_GetLocationsCallback_nextLocations_Results_List(s *capnp.Segment, sz int32) (Dataset_GetLocationsCallback_nextLocations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_GetLocationsCallback_nextLocations_Results](l), err
}

// Dataset_GetLocationsCallback_nextLocations_Results_Future is a wrapper for a Dataset_GetLocationsCallback_nextLocations_Results promised by a client call.
type Dataset_GetLocationsCallback_nextLocations_Results_Future struct{ *capnp.Future }

func (f Dataset_GetLocationsCallback_nextLocations_Results_Future) Struct() (Dataset_GetLocationsCallback_nextLocations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_GetLocationsCallback_nextLocations_Results(p.Struct()), err
}

type Dataset_metadata_Params capnp.Struct

// Dataset_metadata_Params_TypeID is the unique identifier for the type Dataset_metadata_Params.
const Dataset_metadata_Params_TypeID = 0xb4c346906ee84815

func NewDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params(st), err
}

func NewRootDataset_metadata_Params(s *capnp.Segment) (Dataset_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_metadata_Params(st), err
}

func ReadRootDataset_metadata_Params(msg *capnp.Message) (Dataset_metadata_Params, error) {
	root, err := msg.Root()
	return Dataset_metadata_Params(root.Struct()), err
}

func (s Dataset_metadata_Params) String() string {
	str, _ := text.Marshal(0xb4c346906ee84815, capnp.Struct(s))
	return str
}

func (s Dataset_metadata_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_metadata_Params) DecodeFromPtr(p capnp.Ptr) Dataset_metadata_Params {
	return Dataset_metadata_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_metadata_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_metadata_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_metadata_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_metadata_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Dataset_metadata_Params_List is a list of Dataset_metadata_Params.
type Dataset_metadata_Params_List = capnp.StructList[Dataset_metadata_Params]

// NewDataset_metadata_Params creates a new list of Dataset_metadata_Params.
func NewDataset_metadata_Params_List(s *capnp.Segment, sz int32) (Dataset_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_metadata_Params](l), err
}

// Dataset_metadata_Params_Future is a wrapper for a Dataset_metadata_Params promised by a client call.
type Dataset_metadata_Params_Future struct{ *capnp.Future }

func (f Dataset_metadata_Params_Future) Struct() (Dataset_metadata_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_metadata_Params(p.Struct()), err
}

type Dataset_closestTimeSeriesAt_Params capnp.Struct

// Dataset_closestTimeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Params.
const Dataset_closestTimeSeriesAt_Params_TypeID = 0xb0496f3d284f4a13

func NewDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params(st), err
}

func NewRootDataset_closestTimeSeriesAt_Params(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Params(st), err
}

func ReadRootDataset_closestTimeSeriesAt_Params(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Params(root.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xb0496f3d284f4a13, capnp.Struct(s))
	return str
}

func (s Dataset_closestTimeSeriesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_closestTimeSeriesAt_Params) DecodeFromPtr(p capnp.Ptr) Dataset_closestTimeSeriesAt_Params {
	return Dataset_closestTimeSeriesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_closestTimeSeriesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_closestTimeSeriesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_closestTimeSeriesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_closestTimeSeriesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_closestTimeSeriesAt_Params) Latlon() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Params) HasLatlon() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Params) SetLatlon(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Dataset_closestTimeSeriesAt_Params) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Dataset_closestTimeSeriesAt_Params_List is a list of Dataset_closestTimeSeriesAt_Params.
type Dataset_closestTimeSeriesAt_Params_List = capnp.StructList[Dataset_closestTimeSeriesAt_Params]

// NewDataset_closestTimeSeriesAt_Params creates a new list of Dataset_closestTimeSeriesAt_Params.
func NewDataset_closestTimeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_closestTimeSeriesAt_Params](l), err
}

// Dataset_closestTimeSeriesAt_Params_Future is a wrapper for a Dataset_closestTimeSeriesAt_Params promised by a client call.
type Dataset_closestTimeSeriesAt_Params_Future struct{ *capnp.Future }

func (f Dataset_closestTimeSeriesAt_Params_Future) Struct() (Dataset_closestTimeSeriesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_closestTimeSeriesAt_Params(p.Struct()), err
}
func (p Dataset_closestTimeSeriesAt_Params_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

type Dataset_closestTimeSeriesAt_Results capnp.Struct

// Dataset_closestTimeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_closestTimeSeriesAt_Results.
const Dataset_closestTimeSeriesAt_Results_TypeID = 0xedee5faa03af6a1e

func NewDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(st), err
}

func NewRootDataset_closestTimeSeriesAt_Results(s *capnp.Segment) (Dataset_closestTimeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_closestTimeSeriesAt_Results(st), err
}

func ReadRootDataset_closestTimeSeriesAt_Results(msg *capnp.Message) (Dataset_closestTimeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_closestTimeSeriesAt_Results(root.Struct()), err
}

func (s Dataset_closestTimeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xedee5faa03af6a1e, capnp.Struct(s))
	return str
}

func (s Dataset_closestTimeSeriesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_closestTimeSeriesAt_Results) DecodeFromPtr(p capnp.Ptr) Dataset_closestTimeSeriesAt_Results {
	return Dataset_closestTimeSeriesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_closestTimeSeriesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_closestTimeSeriesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_closestTimeSeriesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_closestTimeSeriesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_closestTimeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s Dataset_closestTimeSeriesAt_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_closestTimeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_closestTimeSeriesAt_Results_List is a list of Dataset_closestTimeSeriesAt_Results.
type Dataset_closestTimeSeriesAt_Results_List = capnp.StructList[Dataset_closestTimeSeriesAt_Results]

// NewDataset_closestTimeSeriesAt_Results creates a new list of Dataset_closestTimeSeriesAt_Results.
func NewDataset_closestTimeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_closestTimeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_closestTimeSeriesAt_Results](l), err
}

// Dataset_closestTimeSeriesAt_Results_Future is a wrapper for a Dataset_closestTimeSeriesAt_Results promised by a client call.
type Dataset_closestTimeSeriesAt_Results_Future struct{ *capnp.Future }

func (f Dataset_closestTimeSeriesAt_Results_Future) Struct() (Dataset_closestTimeSeriesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_closestTimeSeriesAt_Results(p.Struct()), err
}
func (p Dataset_closestTimeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type Dataset_timeSeriesAt_Params capnp.Struct

// Dataset_timeSeriesAt_Params_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Params.
const Dataset_timeSeriesAt_Params_TypeID = 0xd9f867b0a2a15d7f

func NewDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params(st), err
}

func NewRootDataset_timeSeriesAt_Params(s *capnp.Segment) (Dataset_timeSeriesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Params(st), err
}

func ReadRootDataset_timeSeriesAt_Params(msg *capnp.Message) (Dataset_timeSeriesAt_Params, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Params(root.Struct()), err
}

func (s Dataset_timeSeriesAt_Params) String() string {
	str, _ := text.Marshal(0xd9f867b0a2a15d7f, capnp.Struct(s))
	return str
}

func (s Dataset_timeSeriesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_timeSeriesAt_Params) DecodeFromPtr(p capnp.Ptr) Dataset_timeSeriesAt_Params {
	return Dataset_timeSeriesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_timeSeriesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_timeSeriesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_timeSeriesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_timeSeriesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_timeSeriesAt_Params) LocationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Dataset_timeSeriesAt_Params) HasLocationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_timeSeriesAt_Params) LocationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_timeSeriesAt_Params) SetLocationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Dataset_timeSeriesAt_Params_List is a list of Dataset_timeSeriesAt_Params.
type Dataset_timeSeriesAt_Params_List = capnp.StructList[Dataset_timeSeriesAt_Params]

// NewDataset_timeSeriesAt_Params creates a new list of Dataset_timeSeriesAt_Params.
func NewDataset_timeSeriesAt_Params_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_timeSeriesAt_Params](l), err
}

// Dataset_timeSeriesAt_Params_Future is a wrapper for a Dataset_timeSeriesAt_Params promised by a client call.
type Dataset_timeSeriesAt_Params_Future struct{ *capnp.Future }

func (f Dataset_timeSeriesAt_Params_Future) Struct() (Dataset_timeSeriesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_timeSeriesAt_Params(p.Struct()), err
}

type Dataset_timeSeriesAt_Results capnp.Struct

// Dataset_timeSeriesAt_Results_TypeID is the unique identifier for the type Dataset_timeSeriesAt_Results.
const Dataset_timeSeriesAt_Results_TypeID = 0xe30c466e5bc2735c

func NewDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(st), err
}

func NewRootDataset_timeSeriesAt_Results(s *capnp.Segment) (Dataset_timeSeriesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_timeSeriesAt_Results(st), err
}

func ReadRootDataset_timeSeriesAt_Results(msg *capnp.Message) (Dataset_timeSeriesAt_Results, error) {
	root, err := msg.Root()
	return Dataset_timeSeriesAt_Results(root.Struct()), err
}

func (s Dataset_timeSeriesAt_Results) String() string {
	str, _ := text.Marshal(0xe30c466e5bc2735c, capnp.Struct(s))
	return str
}

func (s Dataset_timeSeriesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_timeSeriesAt_Results) DecodeFromPtr(p capnp.Ptr) Dataset_timeSeriesAt_Results {
	return Dataset_timeSeriesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_timeSeriesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_timeSeriesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_timeSeriesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_timeSeriesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_timeSeriesAt_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s Dataset_timeSeriesAt_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_timeSeriesAt_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_timeSeriesAt_Results_List is a list of Dataset_timeSeriesAt_Results.
type Dataset_timeSeriesAt_Results_List = capnp.StructList[Dataset_timeSeriesAt_Results]

// NewDataset_timeSeriesAt_Results creates a new list of Dataset_timeSeriesAt_Results.
func NewDataset_timeSeriesAt_Results_List(s *capnp.Segment, sz int32) (Dataset_timeSeriesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_timeSeriesAt_Results](l), err
}

// Dataset_timeSeriesAt_Results_Future is a wrapper for a Dataset_timeSeriesAt_Results promised by a client call.
type Dataset_timeSeriesAt_Results_Future struct{ *capnp.Future }

func (f Dataset_timeSeriesAt_Results_Future) Struct() (Dataset_timeSeriesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_timeSeriesAt_Results(p.Struct()), err
}
func (p Dataset_timeSeriesAt_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type Dataset_locations_Params capnp.Struct

// Dataset_locations_Params_TypeID is the unique identifier for the type Dataset_locations_Params.
const Dataset_locations_Params_TypeID = 0xd2a02e856c28d4ba

func NewDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params(st), err
}

func NewRootDataset_locations_Params(s *capnp.Segment) (Dataset_locations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dataset_locations_Params(st), err
}

func ReadRootDataset_locations_Params(msg *capnp.Message) (Dataset_locations_Params, error) {
	root, err := msg.Root()
	return Dataset_locations_Params(root.Struct()), err
}

func (s Dataset_locations_Params) String() string {
	str, _ := text.Marshal(0xd2a02e856c28d4ba, capnp.Struct(s))
	return str
}

func (s Dataset_locations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_locations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_locations_Params {
	return Dataset_locations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_locations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_locations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_locations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_locations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Dataset_locations_Params_List is a list of Dataset_locations_Params.
type Dataset_locations_Params_List = capnp.StructList[Dataset_locations_Params]

// NewDataset_locations_Params creates a new list of Dataset_locations_Params.
func NewDataset_locations_Params_List(s *capnp.Segment, sz int32) (Dataset_locations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Dataset_locations_Params](l), err
}

// Dataset_locations_Params_Future is a wrapper for a Dataset_locations_Params promised by a client call.
type Dataset_locations_Params_Future struct{ *capnp.Future }

func (f Dataset_locations_Params_Future) Struct() (Dataset_locations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_locations_Params(p.Struct()), err
}

type Dataset_locations_Results capnp.Struct

// Dataset_locations_Results_TypeID is the unique identifier for the type Dataset_locations_Results.
const Dataset_locations_Results_TypeID = 0xaa8cfcdc401d5fdd

func NewDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(st), err
}

func NewRootDataset_locations_Results(s *capnp.Segment) (Dataset_locations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_locations_Results(st), err
}

func ReadRootDataset_locations_Results(msg *capnp.Message) (Dataset_locations_Results, error) {
	root, err := msg.Root()
	return Dataset_locations_Results(root.Struct()), err
}

func (s Dataset_locations_Results) String() string {
	str, _ := text.Marshal(0xaa8cfcdc401d5fdd, capnp.Struct(s))
	return str
}

func (s Dataset_locations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_locations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_locations_Results {
	return Dataset_locations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_locations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_locations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_locations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_locations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_locations_Results) Locations() (Location_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Location_List(p.List()), err
}

func (s Dataset_locations_Results) HasLocations() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_locations_Results) SetLocations(v Location_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLocations sets the locations field to a newly
// allocated Location_List, preferring placement in s's segment.
func (s Dataset_locations_Results) NewLocations(n int32) (Location_List, error) {
	l, err := NewLocation_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Dataset_locations_Results_List is a list of Dataset_locations_Results.
type Dataset_locations_Results_List = capnp.StructList[Dataset_locations_Results]

// NewDataset_locations_Results creates a new list of Dataset_locations_Results.
func NewDataset_locations_Results_List(s *capnp.Segment, sz int32) (Dataset_locations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_locations_Results](l), err
}

// Dataset_locations_Results_Future is a wrapper for a Dataset_locations_Results promised by a client call.
type Dataset_locations_Results_Future struct{ *capnp.Future }

func (f Dataset_locations_Results_Future) Struct() (Dataset_locations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_locations_Results(p.Struct()), err
}

type Dataset_streamLocations_Params capnp.Struct

// Dataset_streamLocations_Params_TypeID is the unique identifier for the type Dataset_streamLocations_Params.
const Dataset_streamLocations_Params_TypeID = 0xfca3f0f431b64506

func NewDataset_streamLocations_Params(s *capnp.Segment) (Dataset_streamLocations_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Params(st), err
}

func NewRootDataset_streamLocations_Params(s *capnp.Segment) (Dataset_streamLocations_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Params(st), err
}

func ReadRootDataset_streamLocations_Params(msg *capnp.Message) (Dataset_streamLocations_Params, error) {
	root, err := msg.Root()
	return Dataset_streamLocations_Params(root.Struct()), err
}

func (s Dataset_streamLocations_Params) String() string {
	str, _ := text.Marshal(0xfca3f0f431b64506, capnp.Struct(s))
	return str
}

func (s Dataset_streamLocations_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_streamLocations_Params) DecodeFromPtr(p capnp.Ptr) Dataset_streamLocations_Params {
	return Dataset_streamLocations_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_streamLocations_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_streamLocations_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_streamLocations_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_streamLocations_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_streamLocations_Params) StartAfterLocationId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Dataset_streamLocations_Params) HasStartAfterLocationId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_streamLocations_Params) StartAfterLocationIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Dataset_streamLocations_Params) SetStartAfterLocationId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Dataset_streamLocations_Params_List is a list of Dataset_streamLocations_Params.
type Dataset_streamLocations_Params_List = capnp.StructList[Dataset_streamLocations_Params]

// NewDataset_streamLocations_Params creates a new list of Dataset_streamLocations_Params.
func NewDataset_streamLocations_Params_List(s *capnp.Segment, sz int32) (Dataset_streamLocations_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_streamLocations_Params](l), err
}

// Dataset_streamLocations_Params_Future is a wrapper for a Dataset_streamLocations_Params promised by a client call.
type Dataset_streamLocations_Params_Future struct{ *capnp.Future }

func (f Dataset_streamLocations_Params_Future) Struct() (Dataset_streamLocations_Params, error) {
	p, err := f.Future.Ptr()
	return Dataset_streamLocations_Params(p.Struct()), err
}

type Dataset_streamLocations_Results capnp.Struct

// Dataset_streamLocations_Results_TypeID is the unique identifier for the type Dataset_streamLocations_Results.
const Dataset_streamLocations_Results_TypeID = 0x9ebadb578b79fa06

func NewDataset_streamLocations_Results(s *capnp.Segment) (Dataset_streamLocations_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(st), err
}

func NewRootDataset_streamLocations_Results(s *capnp.Segment) (Dataset_streamLocations_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dataset_streamLocations_Results(st), err
}

func ReadRootDataset_streamLocations_Results(msg *capnp.Message) (Dataset_streamLocations_Results, error) {
	root, err := msg.Root()
	return Dataset_streamLocations_Results(root.Struct()), err
}

func (s Dataset_streamLocations_Results) String() string {
	str, _ := text.Marshal(0x9ebadb578b79fa06, capnp.Struct(s))
	return str
}

func (s Dataset_streamLocations_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Dataset_streamLocations_Results) DecodeFromPtr(p capnp.Ptr) Dataset_streamLocations_Results {
	return Dataset_streamLocations_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Dataset_streamLocations_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Dataset_streamLocations_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Dataset_streamLocations_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Dataset_streamLocations_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Dataset_streamLocations_Results) LocationsCallback() Dataset_GetLocationsCallback {
	p, _ := capnp.Struct(s).Ptr(0)
	return Dataset_GetLocationsCallback(p.Interface().Client())
}

func (s Dataset_streamLocations_Results) HasLocationsCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Dataset_streamLocations_Results) SetLocationsCallback(v Dataset_GetLocationsCallback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Dataset_streamLocations_Results_List is a list of Dataset_streamLocations_Results.
type Dataset_streamLocations_Results_List = capnp.StructList[Dataset_streamLocations_Results]

// NewDataset_streamLocations_Results creates a new list of Dataset_streamLocations_Results.
func NewDataset_streamLocations_Results_List(s *capnp.Segment, sz int32) (Dataset_streamLocations_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Dataset_streamLocations_Results](l), err
}

// Dataset_streamLocations_Results_Future is a wrapper for a Dataset_streamLocations_Results promised by a client call.
type Dataset_streamLocations_Results_Future struct{ *capnp.Future }

func (f Dataset_streamLocations_Results_Future) Struct() (Dataset_streamLocations_Results, error) {
	p, err := f.Future.Ptr()
	return Dataset_streamLocations_Results(p.Struct()), err
}
func (p Dataset_streamLocations_Results_Future) LocationsCallback() Dataset_GetLocationsCallback {
	return Dataset_GetLocationsCallback(p.Future.Field(0, nil).Client())
}

type MetaPlusData capnp.Struct

// MetaPlusData_TypeID is the unique identifier for the type MetaPlusData.
const MetaPlusData_TypeID = 0xd7a67fec5f22e5a0

func NewMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData(st), err
}

func NewRootMetaPlusData(s *capnp.Segment) (MetaPlusData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return MetaPlusData(st), err
}

func ReadRootMetaPlusData(msg *capnp.Message) (MetaPlusData, error) {
	root, err := msg.Root()
	return MetaPlusData(root.Struct()), err
}

func (s MetaPlusData) String() string {
	str, _ := text.Marshal(0xd7a67fec5f22e5a0, capnp.Struct(s))
	return str
}

func (s MetaPlusData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MetaPlusData) DecodeFromPtr(p capnp.Ptr) MetaPlusData {
	return MetaPlusData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MetaPlusData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MetaPlusData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MetaPlusData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MetaPlusData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MetaPlusData) Meta() (Metadata, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata(p.Struct()), err
}

func (s MetaPlusData) HasMeta() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MetaPlusData) SetMeta(v Metadata) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMeta sets the meta field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s MetaPlusData) NewMeta() (Metadata, error) {
	ss, err := NewMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MetaPlusData) Data() Dataset {
	p, _ := capnp.Struct(s).Ptr(1)
	return Dataset(p.Interface().Client())
}

func (s MetaPlusData) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MetaPlusData) SetData(v Dataset) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// MetaPlusData_List is a list of MetaPlusData.
type MetaPlusData_List = capnp.StructList[MetaPlusData]

// NewMetaPlusData creates a new list of MetaPlusData.
func NewMetaPlusData_List(s *capnp.Segment, sz int32) (MetaPlusData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[MetaPlusData](l), err
}

// MetaPlusData_Future is a wrapper for a MetaPlusData promised by a client call.
type MetaPlusData_Future struct{ *capnp.Future }

func (f MetaPlusData_Future) Struct() (MetaPlusData, error) {
	p, err := f.Future.Ptr()
	return MetaPlusData(p.Struct()), err
}
func (p MetaPlusData_Future) Meta() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}
func (p MetaPlusData_Future) Data() Dataset {
	return Dataset(p.Future.Field(1, nil).Client())
}

type Element uint16

// Element_TypeID is the unique identifier for the type Element.
const Element_TypeID = 0xe35760b4db5ab564

// Values of Element.
const (
	Element_tmin         Element = 0
	Element_tavg         Element = 1
	Element_tmax         Element = 2
	Element_precip       Element = 3
	Element_globrad      Element = 4
	Element_wind         Element = 5
	Element_sunhours     Element = 6
	Element_cloudamount  Element = 7
	Element_relhumid     Element = 8
	Element_airpress     Element = 9
	Element_vaporpress   Element = 10
	Element_co2          Element = 11
	Element_o3           Element = 12
	Element_et0          Element = 13
	Element_dewpointTemp Element = 14
)

// String returns the enum's constant name.
func (c Element) String() string {
	switch c {
	case Element_tmin:
		return "tmin"
	case Element_tavg:
		return "tavg"
	case Element_tmax:
		return "tmax"
	case Element_precip:
		return "precip"
	case Element_globrad:
		return "globrad"
	case Element_wind:
		return "wind"
	case Element_sunhours:
		return "sunhours"
	case Element_cloudamount:
		return "cloudamount"
	case Element_relhumid:
		return "relhumid"
	case Element_airpress:
		return "airpress"
	case Element_vaporpress:
		return "vaporpress"
	case Element_co2:
		return "co2"
	case Element_o3:
		return "o3"
	case Element_et0:
		return "et0"
	case Element_dewpointTemp:
		return "dewpointTemp"

	default:
		return ""
	}
}

// ElementFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ElementFromString(c string) Element {
	switch c {
	case "tmin":
		return Element_tmin
	case "tavg":
		return Element_tavg
	case "tmax":
		return Element_tmax
	case "precip":
		return Element_precip
	case "globrad":
		return Element_globrad
	case "wind":
		return Element_wind
	case "sunhours":
		return Element_sunhours
	case "cloudamount":
		return Element_cloudamount
	case "relhumid":
		return Element_relhumid
	case "airpress":
		return Element_airpress
	case "vaporpress":
		return Element_vaporpress
	case "co2":
		return Element_co2
	case "o3":
		return Element_o3
	case "et0":
		return Element_et0
	case "dewpointTemp":
		return Element_dewpointTemp

	default:
		return 0
	}
}

type Element_List = capnp.EnumList[Element]

func NewElement_List(s *capnp.Segment, sz int32) (Element_List, error) {
	return capnp.NewEnumList[Element](s, sz)
}

type Location capnp.Struct

// Location_TypeID is the unique identifier for the type Location.
const Location_TypeID = 0x85ba7385f313fe19

func NewLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func NewRootLocation(s *capnp.Segment) (Location, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(st), err
}

func ReadRootLocation(msg *capnp.Message) (Location, error) {
	root, err := msg.Root()
	return Location(root.Struct()), err
}

func (s Location) String() string {
	str, _ := text.Marshal(0x85ba7385f313fe19, capnp.Struct(s))
	return str
}

func (s Location) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location) DecodeFromPtr(p capnp.Ptr) Location {
	return Location(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location) Id() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Location) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location) SetId(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewId sets the id field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Location) NewId() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Location) HeightNN() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Location) SetHeightNN(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Location) Latlon() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Location) HasLatlon() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location) SetLatlon(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Location) NewLatlon() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Location) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(2)
	return TimeSeries(p.Interface().Client())
}

func (s Location) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Location) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Location) CustomData() (Location_KV_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Location_KV_List(p.List()), err
}

func (s Location) HasCustomData() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Location) SetCustomData(v Location_KV_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewCustomData sets the customData field to a newly
// allocated Location_KV_List, preferring placement in s's segment.
func (s Location) NewCustomData(n int32) (Location_KV_List, error) {
	l, err := NewLocation_KV_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Location_KV_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Location_List is a list of Location.
type Location_List = capnp.StructList[Location]

// NewLocation creates a new list of Location.
func NewLocation_List(s *capnp.Segment, sz int32) (Location_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Location](l), err
}

// Location_Future is a wrapper for a Location promised by a client call.
type Location_Future struct{ *capnp.Future }

func (f Location_Future) Struct() (Location, error) {
	p, err := f.Future.Ptr()
	return Location(p.Struct()), err
}
func (p Location_Future) Id() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Location_Future) Latlon() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(1, nil)}
}
func (p Location_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(2, nil).Client())
}

type Location_KV capnp.Struct

// Location_KV_TypeID is the unique identifier for the type Location_KV.
const Location_KV_TypeID = 0xc5fd13a53ae6d46a

func NewLocation_KV(s *capnp.Segment) (Location_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Location_KV(st), err
}

func NewRootLocation_KV(s *capnp.Segment) (Location_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Location_KV(st), err
}

func ReadRootLocation_KV(msg *capnp.Message) (Location_KV, error) {
	root, err := msg.Root()
	return Location_KV(root.Struct()), err
}

func (s Location_KV) String() string {
	str, _ := text.Marshal(0xc5fd13a53ae6d46a, capnp.Struct(s))
	return str
}

func (s Location_KV) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Location_KV) DecodeFromPtr(p capnp.Ptr) Location_KV {
	return Location_KV(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Location_KV) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Location_KV) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Location_KV) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Location_KV) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Location_KV) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Location_KV) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Location_KV) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Location_KV) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Location_KV) Value() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Location_KV) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Location_KV) SetValue(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Location_KV_List is a list of Location_KV.
type Location_KV_List = capnp.StructList[Location_KV]

// NewLocation_KV creates a new list of Location_KV.
func NewLocation_KV_List(s *capnp.Segment, sz int32) (Location_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Location_KV](l), err
}

// Location_KV_Future is a wrapper for a Location_KV promised by a client call.
type Location_KV_Future struct{ *capnp.Future }

func (f Location_KV_Future) Struct() (Location_KV, error) {
	p, err := f.Future.Ptr()
	return Location_KV(p.Struct()), err
}
func (p Location_KV_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type TimeSeries capnp.Client

// TimeSeries_TypeID is the unique identifier for the type TimeSeries.
const TimeSeries_TypeID = 0xa7769f40fe6e6de8

func (c TimeSeries) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c TimeSeries) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c TimeSeries) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c TimeSeries) AddRef() TimeSeries {
	return TimeSeries(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c TimeSeries) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c TimeSeries) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c TimeSeries) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (TimeSeries) DecodeFromPtr(p capnp.Ptr) TimeSeries {
	return TimeSeries(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c TimeSeries) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c TimeSeries) IsSame(other TimeSeries) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c TimeSeries) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c TimeSeries) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A TimeSeries_Server is a TimeSeries with a local implementation.
type TimeSeries_Server interface {
	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// TimeSeries_NewServer creates a new Server from an implementation of TimeSeries_Server.
func TimeSeries_NewServer(s TimeSeries_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(TimeSeries_Methods(nil, s), s, c)
}

// TimeSeries_ServerToClient creates a new Client from an implementation of TimeSeries_Server.
// The caller is responsible for calling Release on the returned Client.
func TimeSeries_ServerToClient(s TimeSeries_Server) TimeSeries {
	return TimeSeries(capnp.NewClient(TimeSeries_NewServer(s)))
}

// TimeSeries_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func TimeSeries_Methods(methods []server.Method, s TimeSeries_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 11)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// TimeSeries_resolution holds the state for a server call to TimeSeries.resolution.
// See server.Call for documentation.
type TimeSeries_resolution struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_resolution) Args() TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_resolution) AllocResults() (TimeSeries_resolution_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(r), err
}

// TimeSeries_range holds the state for a server call to TimeSeries.range.
// See server.Call for documentation.
type TimeSeries_range struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_range) Args() TimeSeries_range_Params {
	return TimeSeries_range_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_range) AllocResults() (TimeSeries_range_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(r), err
}

// TimeSeries_header holds the state for a server call to TimeSeries.header.
// See server.Call for documentation.
type TimeSeries_header struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_header) Args() TimeSeries_header_Params {
	return TimeSeries_header_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_header) AllocResults() (TimeSeries_header_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(r), err
}

// TimeSeries_data holds the state for a server call to TimeSeries.data.
// See server.Call for documentation.
type TimeSeries_data struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_data) Args() TimeSeries_data_Params {
	return TimeSeries_data_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_data) AllocResults() (TimeSeries_data_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(r), err
}

// TimeSeries_dataT holds the state for a server call to TimeSeries.dataT.
// See server.Call for documentation.
type TimeSeries_dataT struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_dataT) Args() TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_dataT) AllocResults() (TimeSeries_dataT_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(r), err
}

// TimeSeries_subrange holds the state for a server call to TimeSeries.subrange.
// See server.Call for documentation.
type TimeSeries_subrange struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subrange) Args() TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_subrange) AllocResults() (TimeSeries_subrange_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(r), err
}

// TimeSeries_subheader holds the state for a server call to TimeSeries.subheader.
// See server.Call for documentation.
type TimeSeries_subheader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_subheader) Args() TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_subheader) AllocResults() (TimeSeries_subheader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(r), err
}

// TimeSeries_metadata holds the state for a server call to TimeSeries.metadata.
// See server.Call for documentation.
type TimeSeries_metadata struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_metadata) Args() TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_metadata) AllocResults() (Metadata, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(r), err
}

// TimeSeries_location holds the state for a server call to TimeSeries.location.
// See server.Call for documentation.
type TimeSeries_location struct {
	*server.Call
}

// Args returns the call's arguments.
func (c TimeSeries_location) Args() TimeSeries_location_Params {
	return TimeSeries_location_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c TimeSeries_location) AllocResults() (Location, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Location(r), err
}

// TimeSeries_List is a list of TimeSeries.
type TimeSeries_List = capnp.CapList[TimeSeries]

// NewTimeSeries creates a new list of TimeSeries.
func NewTimeSeries_List(s *capnp.Segment, sz int32) (TimeSeries_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[TimeSeries](l), err
}

type TimeSeries_Resolution uint16

// TimeSeries_Resolution_TypeID is the unique identifier for the type TimeSeries_Resolution.
const TimeSeries_Resolution_TypeID = 0xb466cacf63ec03c2

// Values of TimeSeries_Resolution.
const (
	TimeSeries_Resolution_daily  TimeSeries_Resolution = 0
	TimeSeries_Resolution_hourly TimeSeries_Resolution = 1
)

// String returns the enum's constant name.
func (c TimeSeries_Resolution) String() string {
	switch c {
	case TimeSeries_Resolution_daily:
		return "daily"
	case TimeSeries_Resolution_hourly:
		return "hourly"

	default:
		return ""
	}
}

// TimeSeries_ResolutionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func TimeSeries_ResolutionFromString(c string) TimeSeries_Resolution {
	switch c {
	case "daily":
		return TimeSeries_Resolution_daily
	case "hourly":
		return TimeSeries_Resolution_hourly

	default:
		return 0
	}
}

type TimeSeries_Resolution_List = capnp.EnumList[TimeSeries_Resolution]

func NewTimeSeries_Resolution_List(s *capnp.Segment, sz int32) (TimeSeries_Resolution_List, error) {
	return capnp.NewEnumList[TimeSeries_Resolution](s, sz)
}

type TimeSeries_resolution_Params capnp.Struct

// TimeSeries_resolution_Params_TypeID is the unique identifier for the type TimeSeries_resolution_Params.
const TimeSeries_resolution_Params_TypeID = 0xea3f0519d272fdd1

func NewTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params(st), err
}

func NewRootTimeSeries_resolution_Params(s *capnp.Segment) (TimeSeries_resolution_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_resolution_Params(st), err
}

func ReadRootTimeSeries_resolution_Params(msg *capnp.Message) (TimeSeries_resolution_Params, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Params(root.Struct()), err
}

func (s TimeSeries_resolution_Params) String() string {
	str, _ := text.Marshal(0xea3f0519d272fdd1, capnp.Struct(s))
	return str
}

func (s TimeSeries_resolution_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_resolution_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_resolution_Params {
	return TimeSeries_resolution_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_resolution_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_resolution_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_resolution_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_resolution_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_resolution_Params_List is a list of TimeSeries_resolution_Params.
type TimeSeries_resolution_Params_List = capnp.StructList[TimeSeries_resolution_Params]

// NewTimeSeries_resolution_Params creates a new list of TimeSeries_resolution_Params.
func NewTimeSeries_resolution_Params_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_resolution_Params](l), err
}

// TimeSeries_resolution_Params_Future is a wrapper for a TimeSeries_resolution_Params promised by a client call.
type TimeSeries_resolution_Params_Future struct{ *capnp.Future }

func (f TimeSeries_resolution_Params_Future) Struct() (TimeSeries_resolution_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_resolution_Params(p.Struct()), err
}

type TimeSeries_resolution_Results capnp.Struct

// TimeSeries_resolution_Results_TypeID is the unique identifier for the type TimeSeries_resolution_Results.
const TimeSeries_resolution_Results_TypeID = 0xcd0eadd9a1a66ed6

func NewTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(st), err
}

func NewRootTimeSeries_resolution_Results(s *capnp.Segment) (TimeSeries_resolution_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return TimeSeries_resolution_Results(st), err
}

func ReadRootTimeSeries_resolution_Results(msg *capnp.Message) (TimeSeries_resolution_Results, error) {
	root, err := msg.Root()
	return TimeSeries_resolution_Results(root.Struct()), err
}

func (s TimeSeries_resolution_Results) String() string {
	str, _ := text.Marshal(0xcd0eadd9a1a66ed6, capnp.Struct(s))
	return str
}

func (s TimeSeries_resolution_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_resolution_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_resolution_Results {
	return TimeSeries_resolution_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_resolution_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_resolution_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_resolution_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_resolution_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_resolution_Results) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(capnp.Struct(s).Uint16(0))
}

func (s TimeSeries_resolution_Results) SetResolution(v TimeSeries_Resolution) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// TimeSeries_resolution_Results_List is a list of TimeSeries_resolution_Results.
type TimeSeries_resolution_Results_List = capnp.StructList[TimeSeries_resolution_Results]

// NewTimeSeries_resolution_Results creates a new list of TimeSeries_resolution_Results.
func NewTimeSeries_resolution_Results_List(s *capnp.Segment, sz int32) (TimeSeries_resolution_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_resolution_Results](l), err
}

// TimeSeries_resolution_Results_Future is a wrapper for a TimeSeries_resolution_Results promised by a client call.
type TimeSeries_resolution_Results_Future struct{ *capnp.Future }

func (f TimeSeries_resolution_Results_Future) Struct() (TimeSeries_resolution_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_resolution_Results(p.Struct()), err
}

type TimeSeries_range_Params capnp.Struct

// TimeSeries_range_Params_TypeID is the unique identifier for the type TimeSeries_range_Params.
const TimeSeries_range_Params_TypeID = 0xff6bcf0c6b23c916

func NewTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params(st), err
}

func NewRootTimeSeries_range_Params(s *capnp.Segment) (TimeSeries_range_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_range_Params(st), err
}

func ReadRootTimeSeries_range_Params(msg *capnp.Message) (TimeSeries_range_Params, error) {
	root, err := msg.Root()
	return TimeSeries_range_Params(root.Struct()), err
}

func (s TimeSeries_range_Params) String() string {
	str, _ := text.Marshal(0xff6bcf0c6b23c916, capnp.Struct(s))
	return str
}

func (s TimeSeries_range_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_range_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_range_Params {
	return TimeSeries_range_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_range_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_range_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_range_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_range_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_range_Params_List is a list of TimeSeries_range_Params.
type TimeSeries_range_Params_List = capnp.StructList[TimeSeries_range_Params]

// NewTimeSeries_range_Params creates a new list of TimeSeries_range_Params.
func NewTimeSeries_range_Params_List(s *capnp.Segment, sz int32) (TimeSeries_range_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_range_Params](l), err
}

// TimeSeries_range_Params_Future is a wrapper for a TimeSeries_range_Params promised by a client call.
type TimeSeries_range_Params_Future struct{ *capnp.Future }

func (f TimeSeries_range_Params_Future) Struct() (TimeSeries_range_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_range_Params(p.Struct()), err
}

type TimeSeries_range_Results capnp.Struct

// TimeSeries_range_Results_TypeID is the unique identifier for the type TimeSeries_range_Results.
const TimeSeries_range_Results_TypeID = 0xb9ec27f476022c1b

func NewTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(st), err
}

func NewRootTimeSeries_range_Results(s *capnp.Segment) (TimeSeries_range_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_range_Results(st), err
}

func ReadRootTimeSeries_range_Results(msg *capnp.Message) (TimeSeries_range_Results, error) {
	root, err := msg.Root()
	return TimeSeries_range_Results(root.Struct()), err
}

func (s TimeSeries_range_Results) String() string {
	str, _ := text.Marshal(0xb9ec27f476022c1b, capnp.Struct(s))
	return str
}

func (s TimeSeries_range_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_range_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_range_Results {
	return TimeSeries_range_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_range_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_range_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_range_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_range_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_range_Results) StartDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s TimeSeries_range_Results) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_range_Results) SetStartDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewStartDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeries_range_Results) EndDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s TimeSeries_range_Results) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeries_range_Results) SetEndDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_range_Results) NewEndDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TimeSeries_range_Results_List is a list of TimeSeries_range_Results.
type TimeSeries_range_Results_List = capnp.StructList[TimeSeries_range_Results]

// NewTimeSeries_range_Results creates a new list of TimeSeries_range_Results.
func NewTimeSeries_range_Results_List(s *capnp.Segment, sz int32) (TimeSeries_range_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TimeSeries_range_Results](l), err
}

// TimeSeries_range_Results_Future is a wrapper for a TimeSeries_range_Results promised by a client call.
type TimeSeries_range_Results_Future struct{ *capnp.Future }

func (f TimeSeries_range_Results_Future) Struct() (TimeSeries_range_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_range_Results(p.Struct()), err
}
func (p TimeSeries_range_Results_Future) StartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p TimeSeries_range_Results_Future) EndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_header_Params capnp.Struct

// TimeSeries_header_Params_TypeID is the unique identifier for the type TimeSeries_header_Params.
const TimeSeries_header_Params_TypeID = 0x8fd77002ae8a97a1

func NewTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params(st), err
}

func NewRootTimeSeries_header_Params(s *capnp.Segment) (TimeSeries_header_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_header_Params(st), err
}

func ReadRootTimeSeries_header_Params(msg *capnp.Message) (TimeSeries_header_Params, error) {
	root, err := msg.Root()
	return TimeSeries_header_Params(root.Struct()), err
}

func (s TimeSeries_header_Params) String() string {
	str, _ := text.Marshal(0x8fd77002ae8a97a1, capnp.Struct(s))
	return str
}

func (s TimeSeries_header_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_header_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_header_Params {
	return TimeSeries_header_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_header_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_header_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_header_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_header_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_header_Params_List is a list of TimeSeries_header_Params.
type TimeSeries_header_Params_List = capnp.StructList[TimeSeries_header_Params]

// NewTimeSeries_header_Params creates a new list of TimeSeries_header_Params.
func NewTimeSeries_header_Params_List(s *capnp.Segment, sz int32) (TimeSeries_header_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_header_Params](l), err
}

// TimeSeries_header_Params_Future is a wrapper for a TimeSeries_header_Params promised by a client call.
type TimeSeries_header_Params_Future struct{ *capnp.Future }

func (f TimeSeries_header_Params_Future) Struct() (TimeSeries_header_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_header_Params(p.Struct()), err
}

type TimeSeries_header_Results capnp.Struct

// TimeSeries_header_Results_TypeID is the unique identifier for the type TimeSeries_header_Results.
const TimeSeries_header_Results_TypeID = 0x8976146f144fa050

func NewTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(st), err
}

func NewRootTimeSeries_header_Results(s *capnp.Segment) (TimeSeries_header_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_header_Results(st), err
}

func ReadRootTimeSeries_header_Results(msg *capnp.Message) (TimeSeries_header_Results, error) {
	root, err := msg.Root()
	return TimeSeries_header_Results(root.Struct()), err
}

func (s TimeSeries_header_Results) String() string {
	str, _ := text.Marshal(0x8976146f144fa050, capnp.Struct(s))
	return str
}

func (s TimeSeries_header_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_header_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_header_Results {
	return TimeSeries_header_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_header_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_header_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_header_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_header_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_header_Results) Header() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Element_List(p.List()), err
}

func (s TimeSeries_header_Results) HasHeader() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_header_Results) SetHeader(v Element_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_header_Results) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_header_Results_List is a list of TimeSeries_header_Results.
type TimeSeries_header_Results_List = capnp.StructList[TimeSeries_header_Results]

// NewTimeSeries_header_Results creates a new list of TimeSeries_header_Results.
func NewTimeSeries_header_Results_List(s *capnp.Segment, sz int32) (TimeSeries_header_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_header_Results](l), err
}

// TimeSeries_header_Results_Future is a wrapper for a TimeSeries_header_Results promised by a client call.
type TimeSeries_header_Results_Future struct{ *capnp.Future }

func (f TimeSeries_header_Results_Future) Struct() (TimeSeries_header_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_header_Results(p.Struct()), err
}

type TimeSeries_data_Params capnp.Struct

// TimeSeries_data_Params_TypeID is the unique identifier for the type TimeSeries_data_Params.
const TimeSeries_data_Params_TypeID = 0x8e78986bc45d7dcd

func NewTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params(st), err
}

func NewRootTimeSeries_data_Params(s *capnp.Segment) (TimeSeries_data_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_data_Params(st), err
}

func ReadRootTimeSeries_data_Params(msg *capnp.Message) (TimeSeries_data_Params, error) {
	root, err := msg.Root()
	return TimeSeries_data_Params(root.Struct()), err
}

func (s TimeSeries_data_Params) String() string {
	str, _ := text.Marshal(0x8e78986bc45d7dcd, capnp.Struct(s))
	return str
}

func (s TimeSeries_data_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_data_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_data_Params {
	return TimeSeries_data_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_data_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_data_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_data_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_data_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_data_Params_List is a list of TimeSeries_data_Params.
type TimeSeries_data_Params_List = capnp.StructList[TimeSeries_data_Params]

// NewTimeSeries_data_Params creates a new list of TimeSeries_data_Params.
func NewTimeSeries_data_Params_List(s *capnp.Segment, sz int32) (TimeSeries_data_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_data_Params](l), err
}

// TimeSeries_data_Params_Future is a wrapper for a TimeSeries_data_Params promised by a client call.
type TimeSeries_data_Params_Future struct{ *capnp.Future }

func (f TimeSeries_data_Params_Future) Struct() (TimeSeries_data_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_data_Params(p.Struct()), err
}

type TimeSeries_data_Results capnp.Struct

// TimeSeries_data_Results_TypeID is the unique identifier for the type TimeSeries_data_Results.
const TimeSeries_data_Results_TypeID = 0x9c3d3448d73eeae9

func NewTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(st), err
}

func NewRootTimeSeries_data_Results(s *capnp.Segment) (TimeSeries_data_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_data_Results(st), err
}

func ReadRootTimeSeries_data_Results(msg *capnp.Message) (TimeSeries_data_Results, error) {
	root, err := msg.Root()
	return TimeSeries_data_Results(root.Struct()), err
}

func (s TimeSeries_data_Results) String() string {
	str, _ := text.Marshal(0x9c3d3448d73eeae9, capnp.Struct(s))
	return str
}

func (s TimeSeries_data_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_data_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_data_Results {
	return TimeSeries_data_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_data_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_data_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_data_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_data_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_data_Results) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeries_data_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_data_Results) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_data_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_data_Results_List is a list of TimeSeries_data_Results.
type TimeSeries_data_Results_List = capnp.StructList[TimeSeries_data_Results]

// NewTimeSeries_data_Results creates a new list of TimeSeries_data_Results.
func NewTimeSeries_data_Results_List(s *capnp.Segment, sz int32) (TimeSeries_data_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_data_Results](l), err
}

// TimeSeries_data_Results_Future is a wrapper for a TimeSeries_data_Results promised by a client call.
type TimeSeries_data_Results_Future struct{ *capnp.Future }

func (f TimeSeries_data_Results_Future) Struct() (TimeSeries_data_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_data_Results(p.Struct()), err
}

type TimeSeries_dataT_Params capnp.Struct

// TimeSeries_dataT_Params_TypeID is the unique identifier for the type TimeSeries_dataT_Params.
const TimeSeries_dataT_Params_TypeID = 0xeff8f923b1853525

func NewTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params(st), err
}

func NewRootTimeSeries_dataT_Params(s *capnp.Segment) (TimeSeries_dataT_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_dataT_Params(st), err
}

func ReadRootTimeSeries_dataT_Params(msg *capnp.Message) (TimeSeries_dataT_Params, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Params(root.Struct()), err
}

func (s TimeSeries_dataT_Params) String() string {
	str, _ := text.Marshal(0xeff8f923b1853525, capnp.Struct(s))
	return str
}

func (s TimeSeries_dataT_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_dataT_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_dataT_Params {
	return TimeSeries_dataT_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_dataT_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_dataT_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_dataT_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_dataT_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_dataT_Params_List is a list of TimeSeries_dataT_Params.
type TimeSeries_dataT_Params_List = capnp.StructList[TimeSeries_dataT_Params]

// NewTimeSeries_dataT_Params creates a new list of TimeSeries_dataT_Params.
func NewTimeSeries_dataT_Params_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_dataT_Params](l), err
}

// TimeSeries_dataT_Params_Future is a wrapper for a TimeSeries_dataT_Params promised by a client call.
type TimeSeries_dataT_Params_Future struct{ *capnp.Future }

func (f TimeSeries_dataT_Params_Future) Struct() (TimeSeries_dataT_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_dataT_Params(p.Struct()), err
}

type TimeSeries_dataT_Results capnp.Struct

// TimeSeries_dataT_Results_TypeID is the unique identifier for the type TimeSeries_dataT_Results.
const TimeSeries_dataT_Results_TypeID = 0xc2e0dec0a6ea94fb

func NewTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(st), err
}

func NewRootTimeSeries_dataT_Results(s *capnp.Segment) (TimeSeries_dataT_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_dataT_Results(st), err
}

func ReadRootTimeSeries_dataT_Results(msg *capnp.Message) (TimeSeries_dataT_Results, error) {
	root, err := msg.Root()
	return TimeSeries_dataT_Results(root.Struct()), err
}

func (s TimeSeries_dataT_Results) String() string {
	str, _ := text.Marshal(0xc2e0dec0a6ea94fb, capnp.Struct(s))
	return str
}

func (s TimeSeries_dataT_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_dataT_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_dataT_Results {
	return TimeSeries_dataT_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_dataT_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_dataT_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_dataT_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_dataT_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_dataT_Results) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeries_dataT_Results) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_dataT_Results) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeries_dataT_Results) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_dataT_Results_List is a list of TimeSeries_dataT_Results.
type TimeSeries_dataT_Results_List = capnp.StructList[TimeSeries_dataT_Results]

// NewTimeSeries_dataT_Results creates a new list of TimeSeries_dataT_Results.
func NewTimeSeries_dataT_Results_List(s *capnp.Segment, sz int32) (TimeSeries_dataT_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_dataT_Results](l), err
}

// TimeSeries_dataT_Results_Future is a wrapper for a TimeSeries_dataT_Results promised by a client call.
type TimeSeries_dataT_Results_Future struct{ *capnp.Future }

func (f TimeSeries_dataT_Results_Future) Struct() (TimeSeries_dataT_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_dataT_Results(p.Struct()), err
}

type TimeSeries_subrange_Params capnp.Struct

// TimeSeries_subrange_Params_TypeID is the unique identifier for the type TimeSeries_subrange_Params.
const TimeSeries_subrange_Params_TypeID = 0xf8aa5b6fe2496fee

func NewTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params(st), err
}

func NewRootTimeSeries_subrange_Params(s *capnp.Segment) (TimeSeries_subrange_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TimeSeries_subrange_Params(st), err
}

func ReadRootTimeSeries_subrange_Params(msg *capnp.Message) (TimeSeries_subrange_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Params(root.Struct()), err
}

func (s TimeSeries_subrange_Params) String() string {
	str, _ := text.Marshal(0xf8aa5b6fe2496fee, capnp.Struct(s))
	return str
}

func (s TimeSeries_subrange_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subrange_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_subrange_Params {
	return TimeSeries_subrange_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subrange_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subrange_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subrange_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subrange_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subrange_Params) Start() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s TimeSeries_subrange_Params) HasStart() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subrange_Params) SetStart(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStart sets the start field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewStart() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeries_subrange_Params) End() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s TimeSeries_subrange_Params) HasEnd() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeries_subrange_Params) SetEnd(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnd sets the end field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeries_subrange_Params) NewEnd() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// TimeSeries_subrange_Params_List is a list of TimeSeries_subrange_Params.
type TimeSeries_subrange_Params_List = capnp.StructList[TimeSeries_subrange_Params]

// NewTimeSeries_subrange_Params creates a new list of TimeSeries_subrange_Params.
func NewTimeSeries_subrange_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[TimeSeries_subrange_Params](l), err
}

// TimeSeries_subrange_Params_Future is a wrapper for a TimeSeries_subrange_Params promised by a client call.
type TimeSeries_subrange_Params_Future struct{ *capnp.Future }

func (f TimeSeries_subrange_Params_Future) Struct() (TimeSeries_subrange_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subrange_Params(p.Struct()), err
}
func (p TimeSeries_subrange_Params_Future) Start() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p TimeSeries_subrange_Params_Future) End() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

type TimeSeries_subrange_Results capnp.Struct

// TimeSeries_subrange_Results_TypeID is the unique identifier for the type TimeSeries_subrange_Results.
const TimeSeries_subrange_Results_TypeID = 0xf7dfe7147d09b732

func NewTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(st), err
}

func NewRootTimeSeries_subrange_Results(s *capnp.Segment) (TimeSeries_subrange_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subrange_Results(st), err
}

func ReadRootTimeSeries_subrange_Results(msg *capnp.Message) (TimeSeries_subrange_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subrange_Results(root.Struct()), err
}

func (s TimeSeries_subrange_Results) String() string {
	str, _ := text.Marshal(0xf7dfe7147d09b732, capnp.Struct(s))
	return str
}

func (s TimeSeries_subrange_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subrange_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_subrange_Results {
	return TimeSeries_subrange_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subrange_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subrange_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subrange_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subrange_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subrange_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s TimeSeries_subrange_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subrange_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TimeSeries_subrange_Results_List is a list of TimeSeries_subrange_Results.
type TimeSeries_subrange_Results_List = capnp.StructList[TimeSeries_subrange_Results]

// NewTimeSeries_subrange_Results creates a new list of TimeSeries_subrange_Results.
func NewTimeSeries_subrange_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subrange_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subrange_Results](l), err
}

// TimeSeries_subrange_Results_Future is a wrapper for a TimeSeries_subrange_Results promised by a client call.
type TimeSeries_subrange_Results_Future struct{ *capnp.Future }

func (f TimeSeries_subrange_Results_Future) Struct() (TimeSeries_subrange_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subrange_Results(p.Struct()), err
}
func (p TimeSeries_subrange_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type TimeSeries_subheader_Params capnp.Struct

// TimeSeries_subheader_Params_TypeID is the unique identifier for the type TimeSeries_subheader_Params.
const TimeSeries_subheader_Params_TypeID = 0x8cc364dee8f693b8

func NewTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params(st), err
}

func NewRootTimeSeries_subheader_Params(s *capnp.Segment) (TimeSeries_subheader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Params(st), err
}

func ReadRootTimeSeries_subheader_Params(msg *capnp.Message) (TimeSeries_subheader_Params, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Params(root.Struct()), err
}

func (s TimeSeries_subheader_Params) String() string {
	str, _ := text.Marshal(0x8cc364dee8f693b8, capnp.Struct(s))
	return str
}

func (s TimeSeries_subheader_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subheader_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_subheader_Params {
	return TimeSeries_subheader_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subheader_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subheader_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subheader_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subheader_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subheader_Params) Elements() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Element_List(p.List()), err
}

func (s TimeSeries_subheader_Params) HasElements() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subheader_Params) SetElements(v Element_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewElements sets the elements field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeries_subheader_Params) NewElements(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// TimeSeries_subheader_Params_List is a list of TimeSeries_subheader_Params.
type TimeSeries_subheader_Params_List = capnp.StructList[TimeSeries_subheader_Params]

// NewTimeSeries_subheader_Params creates a new list of TimeSeries_subheader_Params.
func NewTimeSeries_subheader_Params_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subheader_Params](l), err
}

// TimeSeries_subheader_Params_Future is a wrapper for a TimeSeries_subheader_Params promised by a client call.
type TimeSeries_subheader_Params_Future struct{ *capnp.Future }

func (f TimeSeries_subheader_Params_Future) Struct() (TimeSeries_subheader_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subheader_Params(p.Struct()), err
}

type TimeSeries_subheader_Results capnp.Struct

// TimeSeries_subheader_Results_TypeID is the unique identifier for the type TimeSeries_subheader_Results.
const TimeSeries_subheader_Results_TypeID = 0xc3238163cae880df

func NewTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(st), err
}

func NewRootTimeSeries_subheader_Results(s *capnp.Segment) (TimeSeries_subheader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return TimeSeries_subheader_Results(st), err
}

func ReadRootTimeSeries_subheader_Results(msg *capnp.Message) (TimeSeries_subheader_Results, error) {
	root, err := msg.Root()
	return TimeSeries_subheader_Results(root.Struct()), err
}

func (s TimeSeries_subheader_Results) String() string {
	str, _ := text.Marshal(0xc3238163cae880df, capnp.Struct(s))
	return str
}

func (s TimeSeries_subheader_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_subheader_Results) DecodeFromPtr(p capnp.Ptr) TimeSeries_subheader_Results {
	return TimeSeries_subheader_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_subheader_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_subheader_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_subheader_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_subheader_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeries_subheader_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s TimeSeries_subheader_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeries_subheader_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// TimeSeries_subheader_Results_List is a list of TimeSeries_subheader_Results.
type TimeSeries_subheader_Results_List = capnp.StructList[TimeSeries_subheader_Results]

// NewTimeSeries_subheader_Results creates a new list of TimeSeries_subheader_Results.
func NewTimeSeries_subheader_Results_List(s *capnp.Segment, sz int32) (TimeSeries_subheader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[TimeSeries_subheader_Results](l), err
}

// TimeSeries_subheader_Results_Future is a wrapper for a TimeSeries_subheader_Results promised by a client call.
type TimeSeries_subheader_Results_Future struct{ *capnp.Future }

func (f TimeSeries_subheader_Results_Future) Struct() (TimeSeries_subheader_Results, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_subheader_Results(p.Struct()), err
}
func (p TimeSeries_subheader_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type TimeSeries_metadata_Params capnp.Struct

// TimeSeries_metadata_Params_TypeID is the unique identifier for the type TimeSeries_metadata_Params.
const TimeSeries_metadata_Params_TypeID = 0xce2cc4225c956634

func NewTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params(st), err
}

func NewRootTimeSeries_metadata_Params(s *capnp.Segment) (TimeSeries_metadata_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_metadata_Params(st), err
}

func ReadRootTimeSeries_metadata_Params(msg *capnp.Message) (TimeSeries_metadata_Params, error) {
	root, err := msg.Root()
	return TimeSeries_metadata_Params(root.Struct()), err
}

func (s TimeSeries_metadata_Params) String() string {
	str, _ := text.Marshal(0xce2cc4225c956634, capnp.Struct(s))
	return str
}

func (s TimeSeries_metadata_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_metadata_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_metadata_Params {
	return TimeSeries_metadata_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_metadata_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_metadata_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_metadata_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_metadata_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_metadata_Params_List is a list of TimeSeries_metadata_Params.
type TimeSeries_metadata_Params_List = capnp.StructList[TimeSeries_metadata_Params]

// NewTimeSeries_metadata_Params creates a new list of TimeSeries_metadata_Params.
func NewTimeSeries_metadata_Params_List(s *capnp.Segment, sz int32) (TimeSeries_metadata_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_metadata_Params](l), err
}

// TimeSeries_metadata_Params_Future is a wrapper for a TimeSeries_metadata_Params promised by a client call.
type TimeSeries_metadata_Params_Future struct{ *capnp.Future }

func (f TimeSeries_metadata_Params_Future) Struct() (TimeSeries_metadata_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_metadata_Params(p.Struct()), err
}

type TimeSeries_location_Params capnp.Struct

// TimeSeries_location_Params_TypeID is the unique identifier for the type TimeSeries_location_Params.
const TimeSeries_location_Params_TypeID = 0xcb329eb01b0fa313

func NewTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params(st), err
}

func NewRootTimeSeries_location_Params(s *capnp.Segment) (TimeSeries_location_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return TimeSeries_location_Params(st), err
}

func ReadRootTimeSeries_location_Params(msg *capnp.Message) (TimeSeries_location_Params, error) {
	root, err := msg.Root()
	return TimeSeries_location_Params(root.Struct()), err
}

func (s TimeSeries_location_Params) String() string {
	str, _ := text.Marshal(0xcb329eb01b0fa313, capnp.Struct(s))
	return str
}

func (s TimeSeries_location_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeries_location_Params) DecodeFromPtr(p capnp.Ptr) TimeSeries_location_Params {
	return TimeSeries_location_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeries_location_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeries_location_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeries_location_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeries_location_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// TimeSeries_location_Params_List is a list of TimeSeries_location_Params.
type TimeSeries_location_Params_List = capnp.StructList[TimeSeries_location_Params]

// NewTimeSeries_location_Params creates a new list of TimeSeries_location_Params.
func NewTimeSeries_location_Params_List(s *capnp.Segment, sz int32) (TimeSeries_location_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[TimeSeries_location_Params](l), err
}

// TimeSeries_location_Params_Future is a wrapper for a TimeSeries_location_Params promised by a client call.
type TimeSeries_location_Params_Future struct{ *capnp.Future }

func (f TimeSeries_location_Params_Future) Struct() (TimeSeries_location_Params, error) {
	p, err := f.Future.Ptr()
	return TimeSeries_location_Params(p.Struct()), err
}

type TimeSeriesData capnp.Struct

// TimeSeriesData_TypeID is the unique identifier for the type TimeSeriesData.
const TimeSeriesData_TypeID = 0xf1c1ccf59bc6964f

func NewTimeSeriesData(s *capnp.Segment) (TimeSeriesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeSeriesData(st), err
}

func NewRootTimeSeriesData(s *capnp.Segment) (TimeSeriesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return TimeSeriesData(st), err
}

func ReadRootTimeSeriesData(msg *capnp.Message) (TimeSeriesData, error) {
	root, err := msg.Root()
	return TimeSeriesData(root.Struct()), err
}

func (s TimeSeriesData) String() string {
	str, _ := text.Marshal(0xf1c1ccf59bc6964f, capnp.Struct(s))
	return str
}

func (s TimeSeriesData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (TimeSeriesData) DecodeFromPtr(p capnp.Ptr) TimeSeriesData {
	return TimeSeriesData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s TimeSeriesData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s TimeSeriesData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s TimeSeriesData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s TimeSeriesData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s TimeSeriesData) Data() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.PointerList(p.List()), err
}

func (s TimeSeriesData) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s TimeSeriesData) SetData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewData sets the data field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s TimeSeriesData) NewData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s TimeSeriesData) IsTransposed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s TimeSeriesData) SetIsTransposed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s TimeSeriesData) Header() (Element_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Element_List(p.List()), err
}

func (s TimeSeriesData) HasHeader() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s TimeSeriesData) SetHeader(v Element_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated Element_List, preferring placement in s's segment.
func (s TimeSeriesData) NewHeader(n int32) (Element_List, error) {
	l, err := NewElement_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Element_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s TimeSeriesData) StartDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common.Date(p.Struct()), err
}

func (s TimeSeriesData) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s TimeSeriesData) SetStartDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeriesData) NewStartDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeriesData) EndDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common.Date(p.Struct()), err
}

func (s TimeSeriesData) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s TimeSeriesData) SetEndDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s TimeSeriesData) NewEndDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s TimeSeriesData) Resolution() TimeSeries_Resolution {
	return TimeSeries_Resolution(capnp.Struct(s).Uint16(2))
}

func (s TimeSeriesData) SetResolution(v TimeSeries_Resolution) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// TimeSeriesData_List is a list of TimeSeriesData.
type TimeSeriesData_List = capnp.StructList[TimeSeriesData]

// NewTimeSeriesData creates a new list of TimeSeriesData.
func NewTimeSeriesData_List(s *capnp.Segment, sz int32) (TimeSeriesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[TimeSeriesData](l), err
}

// TimeSeriesData_Future is a wrapper for a TimeSeriesData promised by a client call.
type TimeSeriesData_Future struct{ *capnp.Future }

func (f TimeSeriesData_Future) Struct() (TimeSeriesData, error) {
	p, err := f.Future.Ptr()
	return TimeSeriesData(p.Struct()), err
}
func (p TimeSeriesData_Future) StartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p TimeSeriesData_Future) EndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xfe7d08d4352b0c5f

func (c Service) GetAvailableDatasets(ctx context.Context, params func(Service_getAvailableDatasets_Params) error) (Service_getAvailableDatasets_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAvailableDatasets_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getAvailableDatasets_Results_Future{Future: ans.Future()}, release
}
func (c Service) GetDatasetsFor(ctx context.Context, params func(Service_getDatasetsFor_Params) error) (Service_getDatasetsFor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getDatasetsFor_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getDatasetsFor_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Service_Server is a Service with a local implementation.
type Service_Server interface {
	GetAvailableDatasets(context.Context, Service_getAvailableDatasets) error

	GetDatasetsFor(context.Context, Service_getDatasetsFor) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      0,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getAvailableDatasets",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAvailableDatasets(ctx, Service_getAvailableDatasets{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfe7d08d4352b0c5f,
			MethodID:      1,
			InterfaceName: "climate.capnp:Service",
			MethodName:    "getDatasetsFor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetDatasetsFor(ctx, Service_getDatasetsFor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_getAvailableDatasets holds the state for a server call to Service.getAvailableDatasets.
// See server.Call for documentation.
type Service_getAvailableDatasets struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAvailableDatasets) Args() Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getAvailableDatasets) AllocResults() (Service_getAvailableDatasets_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(r), err
}

// Service_getDatasetsFor holds the state for a server call to Service.getDatasetsFor.
// See server.Call for documentation.
type Service_getDatasetsFor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getDatasetsFor) Args() Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getDatasetsFor) AllocResults() (Service_getDatasetsFor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_getAvailableDatasets_Params capnp.Struct

// Service_getAvailableDatasets_Params_TypeID is the unique identifier for the type Service_getAvailableDatasets_Params.
const Service_getAvailableDatasets_Params_TypeID = 0x804cca489405d451

func NewService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params(st), err
}

func NewRootService_getAvailableDatasets_Params(s *capnp.Segment) (Service_getAvailableDatasets_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_getAvailableDatasets_Params(st), err
}

func ReadRootService_getAvailableDatasets_Params(msg *capnp.Message) (Service_getAvailableDatasets_Params, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Params(root.Struct()), err
}

func (s Service_getAvailableDatasets_Params) String() string {
	str, _ := text.Marshal(0x804cca489405d451, capnp.Struct(s))
	return str
}

func (s Service_getAvailableDatasets_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAvailableDatasets_Params) DecodeFromPtr(p capnp.Ptr) Service_getAvailableDatasets_Params {
	return Service_getAvailableDatasets_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAvailableDatasets_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAvailableDatasets_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAvailableDatasets_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAvailableDatasets_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Service_getAvailableDatasets_Params_List is a list of Service_getAvailableDatasets_Params.
type Service_getAvailableDatasets_Params_List = capnp.StructList[Service_getAvailableDatasets_Params]

// NewService_getAvailableDatasets_Params creates a new list of Service_getAvailableDatasets_Params.
func NewService_getAvailableDatasets_Params_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Service_getAvailableDatasets_Params](l), err
}

// Service_getAvailableDatasets_Params_Future is a wrapper for a Service_getAvailableDatasets_Params promised by a client call.
type Service_getAvailableDatasets_Params_Future struct{ *capnp.Future }

func (f Service_getAvailableDatasets_Params_Future) Struct() (Service_getAvailableDatasets_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getAvailableDatasets_Params(p.Struct()), err
}

type Service_getAvailableDatasets_Results capnp.Struct

// Service_getAvailableDatasets_Results_TypeID is the unique identifier for the type Service_getAvailableDatasets_Results.
const Service_getAvailableDatasets_Results_TypeID = 0x916880859435c6e8

func NewService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(st), err
}

func NewRootService_getAvailableDatasets_Results(s *capnp.Segment) (Service_getAvailableDatasets_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getAvailableDatasets_Results(st), err
}

func ReadRootService_getAvailableDatasets_Results(msg *capnp.Message) (Service_getAvailableDatasets_Results, error) {
	root, err := msg.Root()
	return Service_getAvailableDatasets_Results(root.Struct()), err
}

func (s Service_getAvailableDatasets_Results) String() string {
	str, _ := text.Marshal(0x916880859435c6e8, capnp.Struct(s))
	return str
}

func (s Service_getAvailableDatasets_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAvailableDatasets_Results) DecodeFromPtr(p capnp.Ptr) Service_getAvailableDatasets_Results {
	return Service_getAvailableDatasets_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAvailableDatasets_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAvailableDatasets_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAvailableDatasets_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAvailableDatasets_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getAvailableDatasets_Results) Datasets() (MetaPlusData_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MetaPlusData_List(p.List()), err
}

func (s Service_getAvailableDatasets_Results) HasDatasets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getAvailableDatasets_Results) SetDatasets(v MetaPlusData_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated MetaPlusData_List, preferring placement in s's segment.
func (s Service_getAvailableDatasets_Results) NewDatasets(n int32) (MetaPlusData_List, error) {
	l, err := NewMetaPlusData_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MetaPlusData_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_getAvailableDatasets_Results_List is a list of Service_getAvailableDatasets_Results.
type Service_getAvailableDatasets_Results_List = capnp.StructList[Service_getAvailableDatasets_Results]

// NewService_getAvailableDatasets_Results creates a new list of Service_getAvailableDatasets_Results.
func NewService_getAvailableDatasets_Results_List(s *capnp.Segment, sz int32) (Service_getAvailableDatasets_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getAvailableDatasets_Results](l), err
}

// Service_getAvailableDatasets_Results_Future is a wrapper for a Service_getAvailableDatasets_Results promised by a client call.
type Service_getAvailableDatasets_Results_Future struct{ *capnp.Future }

func (f Service_getAvailableDatasets_Results_Future) Struct() (Service_getAvailableDatasets_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getAvailableDatasets_Results(p.Struct()), err
}

type Service_getDatasetsFor_Params capnp.Struct

// Service_getDatasetsFor_Params_TypeID is the unique identifier for the type Service_getDatasetsFor_Params.
const Service_getDatasetsFor_Params_TypeID = 0x9d7d1f83dda3e6db

func NewService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params(st), err
}

func NewRootService_getDatasetsFor_Params(s *capnp.Segment) (Service_getDatasetsFor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Params(st), err
}

func ReadRootService_getDatasetsFor_Params(msg *capnp.Message) (Service_getDatasetsFor_Params, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Params(root.Struct()), err
}

func (s Service_getDatasetsFor_Params) String() string {
	str, _ := text.Marshal(0x9d7d1f83dda3e6db, capnp.Struct(s))
	return str
}

func (s Service_getDatasetsFor_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getDatasetsFor_Params) DecodeFromPtr(p capnp.Ptr) Service_getDatasetsFor_Params {
	return Service_getDatasetsFor_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getDatasetsFor_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getDatasetsFor_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getDatasetsFor_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getDatasetsFor_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getDatasetsFor_Params) Template() (Metadata, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Metadata(p.Struct()), err
}

func (s Service_getDatasetsFor_Params) HasTemplate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getDatasetsFor_Params) SetTemplate(v Metadata) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTemplate sets the template field to a newly
// allocated Metadata struct, preferring placement in s's segment.
func (s Service_getDatasetsFor_Params) NewTemplate() (Metadata, error) {
	ss, err := NewMetadata(capnp.Struct(s).Segment())
	if err != nil {
		return Metadata{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Service_getDatasetsFor_Params_List is a list of Service_getDatasetsFor_Params.
type Service_getDatasetsFor_Params_List = capnp.StructList[Service_getDatasetsFor_Params]

// NewService_getDatasetsFor_Params creates a new list of Service_getDatasetsFor_Params.
func NewService_getDatasetsFor_Params_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDatasetsFor_Params](l), err
}

// Service_getDatasetsFor_Params_Future is a wrapper for a Service_getDatasetsFor_Params promised by a client call.
type Service_getDatasetsFor_Params_Future struct{ *capnp.Future }

func (f Service_getDatasetsFor_Params_Future) Struct() (Service_getDatasetsFor_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getDatasetsFor_Params(p.Struct()), err
}
func (p Service_getDatasetsFor_Params_Future) Template() Metadata_Future {
	return Metadata_Future{Future: p.Future.Field(0, nil)}
}

type Service_getDatasetsFor_Results capnp.Struct

// Service_getDatasetsFor_Results_TypeID is the unique identifier for the type Service_getDatasetsFor_Results.
const Service_getDatasetsFor_Results_TypeID = 0xcd95f79174b0eab0

func NewService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(st), err
}

func NewRootService_getDatasetsFor_Results(s *capnp.Segment) (Service_getDatasetsFor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_getDatasetsFor_Results(st), err
}

func ReadRootService_getDatasetsFor_Results(msg *capnp.Message) (Service_getDatasetsFor_Results, error) {
	root, err := msg.Root()
	return Service_getDatasetsFor_Results(root.Struct()), err
}

func (s Service_getDatasetsFor_Results) String() string {
	str, _ := text.Marshal(0xcd95f79174b0eab0, capnp.Struct(s))
	return str
}

func (s Service_getDatasetsFor_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getDatasetsFor_Results) DecodeFromPtr(p capnp.Ptr) Service_getDatasetsFor_Results {
	return Service_getDatasetsFor_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getDatasetsFor_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getDatasetsFor_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getDatasetsFor_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getDatasetsFor_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getDatasetsFor_Results) Datasets() (Dataset_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Dataset_List(p.List()), err
}

func (s Service_getDatasetsFor_Results) HasDatasets() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getDatasetsFor_Results) SetDatasets(v Dataset_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDatasets sets the datasets field to a newly
// allocated Dataset_List, preferring placement in s's segment.
func (s Service_getDatasetsFor_Results) NewDatasets(n int32) (Dataset_List, error) {
	l, err := NewDataset_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Dataset_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_getDatasetsFor_Results_List is a list of Service_getDatasetsFor_Results.
type Service_getDatasetsFor_Results_List = capnp.StructList[Service_getDatasetsFor_Results]

// NewService_getDatasetsFor_Results creates a new list of Service_getDatasetsFor_Results.
func NewService_getDatasetsFor_Results_List(s *capnp.Segment, sz int32) (Service_getDatasetsFor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_getDatasetsFor_Results](l), err
}

// Service_getDatasetsFor_Results_Future is a wrapper for a Service_getDatasetsFor_Results promised by a client call.
type Service_getDatasetsFor_Results_Future struct{ *capnp.Future }

func (f Service_getDatasetsFor_Results_Future) Struct() (Service_getDatasetsFor_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getDatasetsFor_Results(p.Struct()), err
}

type CSVTimeSeriesFactory capnp.Client

// CSVTimeSeriesFactory_TypeID is the unique identifier for the type CSVTimeSeriesFactory.
const CSVTimeSeriesFactory_TypeID = 0xa418c26cc59929d9

func (c CSVTimeSeriesFactory) Create(ctx context.Context, params func(CSVTimeSeriesFactory_create_Params) error) (CSVTimeSeriesFactory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CSVTimeSeriesFactory_create_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return CSVTimeSeriesFactory_create_Results_Future{Future: ans.Future()}, release
}
func (c CSVTimeSeriesFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c CSVTimeSeriesFactory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c CSVTimeSeriesFactory) AddRef() CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c CSVTimeSeriesFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c CSVTimeSeriesFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c CSVTimeSeriesFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c CSVTimeSeriesFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c CSVTimeSeriesFactory) IsSame(other CSVTimeSeriesFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c CSVTimeSeriesFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c CSVTimeSeriesFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A CSVTimeSeriesFactory_Server is a CSVTimeSeriesFactory with a local implementation.
type CSVTimeSeriesFactory_Server interface {
	Create(context.Context, CSVTimeSeriesFactory_create) error

	Info(context.Context, common.Identifiable_info) error
}

// CSVTimeSeriesFactory_NewServer creates a new Server from an implementation of CSVTimeSeriesFactory_Server.
func CSVTimeSeriesFactory_NewServer(s CSVTimeSeriesFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CSVTimeSeriesFactory_Methods(nil, s), s, c)
}

// CSVTimeSeriesFactory_ServerToClient creates a new Client from an implementation of CSVTimeSeriesFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func CSVTimeSeriesFactory_ServerToClient(s CSVTimeSeriesFactory_Server) CSVTimeSeriesFactory {
	return CSVTimeSeriesFactory(capnp.NewClient(CSVTimeSeriesFactory_NewServer(s)))
}

// CSVTimeSeriesFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CSVTimeSeriesFactory_Methods(methods []server.Method, s CSVTimeSeriesFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa418c26cc59929d9,
			MethodID:      0,
			InterfaceName: "climate.capnp:CSVTimeSeriesFactory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, CSVTimeSeriesFactory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// CSVTimeSeriesFactory_create holds the state for a server call to CSVTimeSeriesFactory.create.
// See server.Call for documentation.
type CSVTimeSeriesFactory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CSVTimeSeriesFactory_create) Args() CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c CSVTimeSeriesFactory_create) AllocResults() (CSVTimeSeriesFactory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(r), err
}

// CSVTimeSeriesFactory_List is a list of CSVTimeSeriesFactory.
type CSVTimeSeriesFactory_List = capnp.CapList[CSVTimeSeriesFactory]

// NewCSVTimeSeriesFactory creates a new list of CSVTimeSeriesFactory.
func NewCSVTimeSeriesFactory_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[CSVTimeSeriesFactory](l), err
}

type CSVTimeSeriesFactory_CSVConfig capnp.Struct

// CSVTimeSeriesFactory_CSVConfig_TypeID is the unique identifier for the type CSVTimeSeriesFactory_CSVConfig.
const CSVTimeSeriesFactory_CSVConfig_TypeID = 0xeba81ca9f46690b8

func NewCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig(st), err
}

func NewRootCSVTimeSeriesFactory_CSVConfig(s *capnp.Segment) (CSVTimeSeriesFactory_CSVConfig, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CSVTimeSeriesFactory_CSVConfig(st), err
}

func ReadRootCSVTimeSeriesFactory_CSVConfig(msg *capnp.Message) (CSVTimeSeriesFactory_CSVConfig, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_CSVConfig(root.Struct()), err
}

func (s CSVTimeSeriesFactory_CSVConfig) String() string {
	str, _ := text.Marshal(0xeba81ca9f46690b8, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_CSVConfig) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_CSVConfig) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_CSVConfig {
	return CSVTimeSeriesFactory_CSVConfig(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_CSVConfig) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_CSVConfig) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_CSVConfig) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_CSVConfig) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_CSVConfig) Sep() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasSep() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_CSVConfig) SepBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytesDefault(","), err
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSep(v string) error {
	return capnp.Struct(s).SetNewText(0, v)
}

func (s CSVTimeSeriesFactory_CSVConfig) HeaderMap() (common.Pair_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Pair_List(p.List()), err
}

func (s CSVTimeSeriesFactory_CSVConfig) HasHeaderMap() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetHeaderMap(v common.Pair_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewHeaderMap sets the headerMap field to a newly
// allocated common.Pair_List, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_CSVConfig) NewHeaderMap(n int32) (common.Pair_List, error) {
	l, err := common.NewPair_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Pair_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesToHeader() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesToHeader(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s CSVTimeSeriesFactory_CSVConfig) SkipLinesFromHeaderToData() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s CSVTimeSeriesFactory_CSVConfig) SetSkipLinesFromHeaderToData(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

// CSVTimeSeriesFactory_CSVConfig_List is a list of CSVTimeSeriesFactory_CSVConfig.
type CSVTimeSeriesFactory_CSVConfig_List = capnp.StructList[CSVTimeSeriesFactory_CSVConfig]

// NewCSVTimeSeriesFactory_CSVConfig creates a new list of CSVTimeSeriesFactory_CSVConfig.
func NewCSVTimeSeriesFactory_CSVConfig_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_CSVConfig_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_CSVConfig](l), err
}

// CSVTimeSeriesFactory_CSVConfig_Future is a wrapper for a CSVTimeSeriesFactory_CSVConfig promised by a client call.
type CSVTimeSeriesFactory_CSVConfig_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_CSVConfig_Future) Struct() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_CSVConfig(p.Struct()), err
}

type CSVTimeSeriesFactory_create_Params capnp.Struct

// CSVTimeSeriesFactory_create_Params_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Params.
const CSVTimeSeriesFactory_create_Params_TypeID = 0xcfaa8d2601750547

func NewCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params(st), err
}

func NewRootCSVTimeSeriesFactory_create_Params(s *capnp.Segment) (CSVTimeSeriesFactory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Params(st), err
}

func ReadRootCSVTimeSeriesFactory_create_Params(msg *capnp.Message) (CSVTimeSeriesFactory_create_Params, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Params(root.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Params) String() string {
	str, _ := text.Marshal(0xcfaa8d2601750547, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_create_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_create_Params) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_create_Params {
	return CSVTimeSeriesFactory_create_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_create_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_create_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_create_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_create_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_create_Params) CsvData() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Params) HasCsvData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Params) CsvDataBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Params) SetCsvData(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CSVTimeSeriesFactory_create_Params) Config() (CSVTimeSeriesFactory_CSVConfig, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CSVTimeSeriesFactory_CSVConfig(p.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Params) HasConfig() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Params) SetConfig(v CSVTimeSeriesFactory_CSVConfig) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewConfig sets the config field to a newly
// allocated CSVTimeSeriesFactory_CSVConfig struct, preferring placement in s's segment.
func (s CSVTimeSeriesFactory_create_Params) NewConfig() (CSVTimeSeriesFactory_CSVConfig, error) {
	ss, err := NewCSVTimeSeriesFactory_CSVConfig(capnp.Struct(s).Segment())
	if err != nil {
		return CSVTimeSeriesFactory_CSVConfig{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CSVTimeSeriesFactory_create_Params_List is a list of CSVTimeSeriesFactory_create_Params.
type CSVTimeSeriesFactory_create_Params_List = capnp.StructList[CSVTimeSeriesFactory_create_Params]

// NewCSVTimeSeriesFactory_create_Params creates a new list of CSVTimeSeriesFactory_create_Params.
func NewCSVTimeSeriesFactory_create_Params_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_create_Params](l), err
}

// CSVTimeSeriesFactory_create_Params_Future is a wrapper for a CSVTimeSeriesFactory_create_Params promised by a client call.
type CSVTimeSeriesFactory_create_Params_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_create_Params_Future) Struct() (CSVTimeSeriesFactory_create_Params, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_create_Params(p.Struct()), err
}
func (p CSVTimeSeriesFactory_create_Params_Future) Config() CSVTimeSeriesFactory_CSVConfig_Future {
	return CSVTimeSeriesFactory_CSVConfig_Future{Future: p.Future.Field(1, nil)}
}

type CSVTimeSeriesFactory_create_Results capnp.Struct

// CSVTimeSeriesFactory_create_Results_TypeID is the unique identifier for the type CSVTimeSeriesFactory_create_Results.
const CSVTimeSeriesFactory_create_Results_TypeID = 0xefefafebc8ae5534

func NewCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(st), err
}

func NewRootCSVTimeSeriesFactory_create_Results(s *capnp.Segment) (CSVTimeSeriesFactory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CSVTimeSeriesFactory_create_Results(st), err
}

func ReadRootCSVTimeSeriesFactory_create_Results(msg *capnp.Message) (CSVTimeSeriesFactory_create_Results, error) {
	root, err := msg.Root()
	return CSVTimeSeriesFactory_create_Results(root.Struct()), err
}

func (s CSVTimeSeriesFactory_create_Results) String() string {
	str, _ := text.Marshal(0xefefafebc8ae5534, capnp.Struct(s))
	return str
}

func (s CSVTimeSeriesFactory_create_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CSVTimeSeriesFactory_create_Results) DecodeFromPtr(p capnp.Ptr) CSVTimeSeriesFactory_create_Results {
	return CSVTimeSeriesFactory_create_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CSVTimeSeriesFactory_create_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CSVTimeSeriesFactory_create_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CSVTimeSeriesFactory_create_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CSVTimeSeriesFactory_create_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CSVTimeSeriesFactory_create_Results) Timeseries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s CSVTimeSeriesFactory_create_Results) HasTimeseries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CSVTimeSeriesFactory_create_Results) SetTimeseries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s CSVTimeSeriesFactory_create_Results) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CSVTimeSeriesFactory_create_Results) HasError() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CSVTimeSeriesFactory_create_Results) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CSVTimeSeriesFactory_create_Results) SetError(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// CSVTimeSeriesFactory_create_Results_List is a list of CSVTimeSeriesFactory_create_Results.
type CSVTimeSeriesFactory_create_Results_List = capnp.StructList[CSVTimeSeriesFactory_create_Results]

// NewCSVTimeSeriesFactory_create_Results creates a new list of CSVTimeSeriesFactory_create_Results.
func NewCSVTimeSeriesFactory_create_Results_List(s *capnp.Segment, sz int32) (CSVTimeSeriesFactory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CSVTimeSeriesFactory_create_Results](l), err
}

// CSVTimeSeriesFactory_create_Results_Future is a wrapper for a CSVTimeSeriesFactory_create_Results promised by a client call.
type CSVTimeSeriesFactory_create_Results_Future struct{ *capnp.Future }

func (f CSVTimeSeriesFactory_create_Results_Future) Struct() (CSVTimeSeriesFactory_create_Results, error) {
	p, err := f.Future.Ptr()
	return CSVTimeSeriesFactory_create_Results(p.Struct()), err
}
func (p CSVTimeSeriesFactory_create_Results_Future) Timeseries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper capnp.Client

// AlterTimeSeriesWrapper_TypeID is the unique identifier for the type AlterTimeSeriesWrapper.
const AlterTimeSeriesWrapper_TypeID = 0xe1f480ef979784b2

func (c AlterTimeSeriesWrapper) WrappedTimeSeries(ctx context.Context, params func(AlterTimeSeriesWrapper_wrappedTimeSeries_Params) error) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_wrappedTimeSeries_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) AlteredElements(ctx context.Context, params func(AlterTimeSeriesWrapper_alteredElements_Params) error) (AlterTimeSeriesWrapper_alteredElements_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alteredElements_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alteredElements_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Alter(ctx context.Context, params func(AlterTimeSeriesWrapper_alter_Params) error) (AlterTimeSeriesWrapper_alter_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_alter_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_alter_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Remove(ctx context.Context, params func(AlterTimeSeriesWrapper_remove_Params) error) (AlterTimeSeriesWrapper_remove_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapper_remove_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapper_remove_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Resolution(ctx context.Context, params func(TimeSeries_resolution_Params) error) (TimeSeries_resolution_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_resolution_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_resolution_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Range(ctx context.Context, params func(TimeSeries_range_Params) error) (TimeSeries_range_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_range_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_range_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Header(ctx context.Context, params func(TimeSeries_header_Params) error) (TimeSeries_header_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_header_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_header_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Data(ctx context.Context, params func(TimeSeries_data_Params) error) (TimeSeries_data_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_data_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_data_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) DataT(ctx context.Context, params func(TimeSeries_dataT_Params) error) (TimeSeries_dataT_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_dataT_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_dataT_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Subrange(ctx context.Context, params func(TimeSeries_subrange_Params) error) (TimeSeries_subrange_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subrange_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subrange_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Subheader(ctx context.Context, params func(TimeSeries_subheader_Params) error) (TimeSeries_subheader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_subheader_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return TimeSeries_subheader_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Metadata(ctx context.Context, params func(TimeSeries_metadata_Params) error) (Metadata_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_metadata_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Metadata_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Location(ctx context.Context, params func(TimeSeries_location_Params) error) (Location_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(TimeSeries_location_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Location_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapper) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AlterTimeSeriesWrapper) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AlterTimeSeriesWrapper) AddRef() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AlterTimeSeriesWrapper) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AlterTimeSeriesWrapper) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AlterTimeSeriesWrapper) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AlterTimeSeriesWrapper) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AlterTimeSeriesWrapper) IsSame(other AlterTimeSeriesWrapper) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AlterTimeSeriesWrapper) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AlterTimeSeriesWrapper) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A AlterTimeSeriesWrapper_Server is a AlterTimeSeriesWrapper with a local implementation.
type AlterTimeSeriesWrapper_Server interface {
	WrappedTimeSeries(context.Context, AlterTimeSeriesWrapper_wrappedTimeSeries) error

	AlteredElements(context.Context, AlterTimeSeriesWrapper_alteredElements) error

	Alter(context.Context, AlterTimeSeriesWrapper_alter) error

	Remove(context.Context, AlterTimeSeriesWrapper_remove) error

	Resolution(context.Context, TimeSeries_resolution) error

	Range(context.Context, TimeSeries_range) error

	Header(context.Context, TimeSeries_header) error

	Data(context.Context, TimeSeries_data) error

	DataT(context.Context, TimeSeries_dataT) error

	Subrange(context.Context, TimeSeries_subrange) error

	Subheader(context.Context, TimeSeries_subheader) error

	Metadata(context.Context, TimeSeries_metadata) error

	Location(context.Context, TimeSeries_location) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// AlterTimeSeriesWrapper_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapper_Server.
func AlterTimeSeriesWrapper_NewServer(s AlterTimeSeriesWrapper_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapper_Methods(nil, s), s, c)
}

// AlterTimeSeriesWrapper_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapper_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapper_ServerToClient(s AlterTimeSeriesWrapper_Server) AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(capnp.NewClient(AlterTimeSeriesWrapper_NewServer(s)))
}

// AlterTimeSeriesWrapper_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapper_Methods(methods []server.Method, s AlterTimeSeriesWrapper_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 15)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "wrappedTimeSeries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.WrappedTimeSeries(ctx, AlterTimeSeriesWrapper_wrappedTimeSeries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      1,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alteredElements",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AlteredElements(ctx, AlterTimeSeriesWrapper_alteredElements{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      2,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "alter",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Alter(ctx, AlterTimeSeriesWrapper_alter{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe1f480ef979784b2,
			MethodID:      3,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapper",
			MethodName:    "remove",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Remove(ctx, AlterTimeSeriesWrapper_remove{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      0,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, TimeSeries_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      1,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "range",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Range(ctx, TimeSeries_range{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      2,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "header",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Header(ctx, TimeSeries_header{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      3,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, TimeSeries_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      4,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "dataT",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DataT(ctx, TimeSeries_dataT{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      5,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subrange",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subrange(ctx, TimeSeries_subrange{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      6,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "subheader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Subheader(ctx, TimeSeries_subheader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      7,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "metadata",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Metadata(ctx, TimeSeries_metadata{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa7769f40fe6e6de8,
			MethodID:      8,
			InterfaceName: "climate.capnp:TimeSeries",
			MethodName:    "location",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Location(ctx, TimeSeries_location{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapper_wrappedTimeSeries holds the state for a server call to AlterTimeSeriesWrapper.wrappedTimeSeries.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_wrappedTimeSeries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) Args() AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_wrappedTimeSeries) AllocResults() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(r), err
}

// AlterTimeSeriesWrapper_alteredElements holds the state for a server call to AlterTimeSeriesWrapper.alteredElements.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alteredElements struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alteredElements) Args() AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alteredElements) AllocResults() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(r), err
}

// AlterTimeSeriesWrapper_alter holds the state for a server call to AlterTimeSeriesWrapper.alter.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_alter struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_alter) Args() AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_alter) AllocResults() (AlterTimeSeriesWrapper_alter_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(r), err
}

// AlterTimeSeriesWrapper_remove holds the state for a server call to AlterTimeSeriesWrapper.remove.
// See server.Call for documentation.
type AlterTimeSeriesWrapper_remove struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapper_remove) Args() AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapper_remove) AllocResults() (AlterTimeSeriesWrapper_remove_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(r), err
}

// AlterTimeSeriesWrapper_List is a list of AlterTimeSeriesWrapper.
type AlterTimeSeriesWrapper_List = capnp.CapList[AlterTimeSeriesWrapper]

// NewAlterTimeSeriesWrapper creates a new list of AlterTimeSeriesWrapper.
func NewAlterTimeSeriesWrapper_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AlterTimeSeriesWrapper](l), err
}

type AlterTimeSeriesWrapper_Altered capnp.Struct

// AlterTimeSeriesWrapper_Altered_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_Altered.
const AlterTimeSeriesWrapper_Altered_TypeID = 0xd085b9baf390bec5

func NewAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered(st), err
}

func NewRootAlterTimeSeriesWrapper_Altered(s *capnp.Segment) (AlterTimeSeriesWrapper_Altered, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_Altered(st), err
}

func ReadRootAlterTimeSeriesWrapper_Altered(msg *capnp.Message) (AlterTimeSeriesWrapper_Altered, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_Altered(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_Altered) String() string {
	str, _ := text.Marshal(0xd085b9baf390bec5, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_Altered) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_Altered) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_Altered {
	return AlterTimeSeriesWrapper_Altered(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_Altered) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_Altered) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_Altered) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_Altered) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_Altered) Element() Element {
	return Element(capnp.Struct(s).Uint16(0))
}

func (s AlterTimeSeriesWrapper_Altered) SetElement(v Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s AlterTimeSeriesWrapper_Altered) Value() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s AlterTimeSeriesWrapper_Altered) SetValue(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s AlterTimeSeriesWrapper_Altered) Type() AlterTimeSeriesWrapper_AlterType {
	return AlterTimeSeriesWrapper_AlterType(capnp.Struct(s).Uint16(2))
}

func (s AlterTimeSeriesWrapper_Altered) SetType(v AlterTimeSeriesWrapper_AlterType) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// AlterTimeSeriesWrapper_Altered_List is a list of AlterTimeSeriesWrapper_Altered.
type AlterTimeSeriesWrapper_Altered_List = capnp.StructList[AlterTimeSeriesWrapper_Altered]

// NewAlterTimeSeriesWrapper_Altered creates a new list of AlterTimeSeriesWrapper_Altered.
func NewAlterTimeSeriesWrapper_Altered_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_Altered](l), err
}

// AlterTimeSeriesWrapper_Altered_Future is a wrapper for a AlterTimeSeriesWrapper_Altered promised by a client call.
type AlterTimeSeriesWrapper_Altered_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_Altered_Future) Struct() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_Altered(p.Struct()), err
}

type AlterTimeSeriesWrapper_AlterType uint16

// AlterTimeSeriesWrapper_AlterType_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_AlterType.
const AlterTimeSeriesWrapper_AlterType_TypeID = 0xb5dd785107c358ca

// Values of AlterTimeSeriesWrapper_AlterType.
const (
	AlterTimeSeriesWrapper_AlterType_add AlterTimeSeriesWrapper_AlterType = 0
	AlterTimeSeriesWrapper_AlterType_mul AlterTimeSeriesWrapper_AlterType = 1
)

// String returns the enum's constant name.
func (c AlterTimeSeriesWrapper_AlterType) String() string {
	switch c {
	case AlterTimeSeriesWrapper_AlterType_add:
		return "add"
	case AlterTimeSeriesWrapper_AlterType_mul:
		return "mul"

	default:
		return ""
	}
}

// AlterTimeSeriesWrapper_AlterTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AlterTimeSeriesWrapper_AlterTypeFromString(c string) AlterTimeSeriesWrapper_AlterType {
	switch c {
	case "add":
		return AlterTimeSeriesWrapper_AlterType_add
	case "mul":
		return AlterTimeSeriesWrapper_AlterType_mul

	default:
		return 0
	}
}

type AlterTimeSeriesWrapper_AlterType_List = capnp.EnumList[AlterTimeSeriesWrapper_AlterType]

func NewAlterTimeSeriesWrapper_AlterType_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_AlterType_List, error) {
	return capnp.NewEnumList[AlterTimeSeriesWrapper_AlterType](s, sz)
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Params capnp.Struct

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Params_TypeID = 0xe31f26eed9fb36a9

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) String() string {
	str, _ := text.Marshal(0xe31f26eed9fb36a9, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_wrappedTimeSeries_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_wrappedTimeSeries_Params {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List = capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Params]

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Params.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Params](l), err
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Params promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_wrappedTimeSeries_Params_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_wrappedTimeSeries_Results capnp.Struct

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
const AlterTimeSeriesWrapper_wrappedTimeSeries_Results_TypeID = 0xfb2eddb58f90f7aa

func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_wrappedTimeSeries_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) String() string {
	str, _ := text.Marshal(0xfb2eddb58f90f7aa, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_wrappedTimeSeries_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_wrappedTimeSeries_Results {
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_wrappedTimeSeries_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List is a list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List = capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Results]

// NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results creates a new list of AlterTimeSeriesWrapper_wrappedTimeSeries_Results.
func NewAlterTimeSeriesWrapper_wrappedTimeSeries_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_wrappedTimeSeries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_wrappedTimeSeries_Results](l), err
}

// AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future is a wrapper for a AlterTimeSeriesWrapper_wrappedTimeSeries_Results promised by a client call.
type AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) Struct() (AlterTimeSeriesWrapper_wrappedTimeSeries_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_wrappedTimeSeries_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_wrappedTimeSeries_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_alteredElements_Params capnp.Struct

// AlterTimeSeriesWrapper_alteredElements_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Params.
const AlterTimeSeriesWrapper_alteredElements_Params_TypeID = 0xcba0220cda41869e

func NewAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_alteredElements_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) String() string {
	str, _ := text.Marshal(0xcba0220cda41869e, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alteredElements_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alteredElements_Params {
	return AlterTimeSeriesWrapper_alteredElements_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alteredElements_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alteredElements_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_alteredElements_Params_List is a list of AlterTimeSeriesWrapper_alteredElements_Params.
type AlterTimeSeriesWrapper_alteredElements_Params_List = capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Params]

// NewAlterTimeSeriesWrapper_alteredElements_Params creates a new list of AlterTimeSeriesWrapper_alteredElements_Params.
func NewAlterTimeSeriesWrapper_alteredElements_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Params](l), err
}

// AlterTimeSeriesWrapper_alteredElements_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Params promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alteredElements_Params_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alteredElements_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_alteredElements_Results capnp.Struct

// AlterTimeSeriesWrapper_alteredElements_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alteredElements_Results.
const AlterTimeSeriesWrapper_alteredElements_Results_TypeID = 0xdd5b75b5bc711766

func NewAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_alteredElements_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alteredElements_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_alteredElements_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alteredElements_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) String() string {
	str, _ := text.Marshal(0xdd5b75b5bc711766, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alteredElements_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alteredElements_Results {
	return AlterTimeSeriesWrapper_alteredElements_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alteredElements_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alteredElements_Results) List() (AlterTimeSeriesWrapper_Altered_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper_Altered_List(p.List()), err
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alteredElements_Results) SetList(v AlterTimeSeriesWrapper_Altered_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated AlterTimeSeriesWrapper_Altered_List, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alteredElements_Results) NewList(n int32) (AlterTimeSeriesWrapper_Altered_List, error) {
	l, err := NewAlterTimeSeriesWrapper_Altered_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AlterTimeSeriesWrapper_Altered_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// AlterTimeSeriesWrapper_alteredElements_Results_List is a list of AlterTimeSeriesWrapper_alteredElements_Results.
type AlterTimeSeriesWrapper_alteredElements_Results_List = capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Results]

// NewAlterTimeSeriesWrapper_alteredElements_Results creates a new list of AlterTimeSeriesWrapper_alteredElements_Results.
func NewAlterTimeSeriesWrapper_alteredElements_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alteredElements_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alteredElements_Results](l), err
}

// AlterTimeSeriesWrapper_alteredElements_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alteredElements_Results promised by a client call.
type AlterTimeSeriesWrapper_alteredElements_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alteredElements_Results_Future) Struct() (AlterTimeSeriesWrapper_alteredElements_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alteredElements_Results(p.Struct()), err
}

type AlterTimeSeriesWrapper_alter_Params capnp.Struct

// AlterTimeSeriesWrapper_alter_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Params.
const AlterTimeSeriesWrapper_alter_Params_TypeID = 0xd36b1e9c2929e6e4

func NewAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_alter_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_alter_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Params) String() string {
	str, _ := text.Marshal(0xd36b1e9c2929e6e4, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alter_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alter_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alter_Params {
	return AlterTimeSeriesWrapper_alter_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alter_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alter_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alter_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alter_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alter_Params) Desc() (AlterTimeSeriesWrapper_Altered, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper_Altered(p.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Params) HasDesc() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetDesc(v AlterTimeSeriesWrapper_Altered) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDesc sets the desc field to a newly
// allocated AlterTimeSeriesWrapper_Altered struct, preferring placement in s's segment.
func (s AlterTimeSeriesWrapper_alter_Params) NewDesc() (AlterTimeSeriesWrapper_Altered, error) {
	ss, err := NewAlterTimeSeriesWrapper_Altered(capnp.Struct(s).Segment())
	if err != nil {
		return AlterTimeSeriesWrapper_Altered{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AlterTimeSeriesWrapper_alter_Params) AsNewTimeSeries() bool {
	return capnp.Struct(s).Bit(0)
}

func (s AlterTimeSeriesWrapper_alter_Params) SetAsNewTimeSeries(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// AlterTimeSeriesWrapper_alter_Params_List is a list of AlterTimeSeriesWrapper_alter_Params.
type AlterTimeSeriesWrapper_alter_Params_List = capnp.StructList[AlterTimeSeriesWrapper_alter_Params]

// NewAlterTimeSeriesWrapper_alter_Params creates a new list of AlterTimeSeriesWrapper_alter_Params.
func NewAlterTimeSeriesWrapper_alter_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alter_Params](l), err
}

// AlterTimeSeriesWrapper_alter_Params_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Params promised by a client call.
type AlterTimeSeriesWrapper_alter_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alter_Params_Future) Struct() (AlterTimeSeriesWrapper_alter_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alter_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_alter_Params_Future) Desc() AlterTimeSeriesWrapper_Altered_Future {
	return AlterTimeSeriesWrapper_Altered_Future{Future: p.Future.Field(0, nil)}
}

type AlterTimeSeriesWrapper_alter_Results capnp.Struct

// AlterTimeSeriesWrapper_alter_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_alter_Results.
const AlterTimeSeriesWrapper_alter_Results_TypeID = 0xc4a1ec6280be841c

func NewAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_alter_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_alter_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapper_alter_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_alter_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_alter_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_alter_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_alter_Results) String() string {
	str, _ := text.Marshal(0xc4a1ec6280be841c, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_alter_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_alter_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_alter_Results {
	return AlterTimeSeriesWrapper_alter_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_alter_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_alter_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_alter_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_alter_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_alter_Results) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapper_alter_Results) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapper_alter_Results) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapper_alter_Results_List is a list of AlterTimeSeriesWrapper_alter_Results.
type AlterTimeSeriesWrapper_alter_Results_List = capnp.StructList[AlterTimeSeriesWrapper_alter_Results]

// NewAlterTimeSeriesWrapper_alter_Results creates a new list of AlterTimeSeriesWrapper_alter_Results.
func NewAlterTimeSeriesWrapper_alter_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_alter_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_alter_Results](l), err
}

// AlterTimeSeriesWrapper_alter_Results_Future is a wrapper for a AlterTimeSeriesWrapper_alter_Results promised by a client call.
type AlterTimeSeriesWrapper_alter_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_alter_Results_Future) Struct() (AlterTimeSeriesWrapper_alter_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_alter_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapper_alter_Results_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapper_remove_Params capnp.Struct

// AlterTimeSeriesWrapper_remove_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Params.
const AlterTimeSeriesWrapper_remove_Params_TypeID = 0xdb7bfcfe4d45ff53

func NewAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params(st), err
}

func NewRootAlterTimeSeriesWrapper_remove_Params(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Params(st), err
}

func ReadRootAlterTimeSeriesWrapper_remove_Params(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_remove_Params) String() string {
	str, _ := text.Marshal(0xdb7bfcfe4d45ff53, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_remove_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_remove_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_remove_Params {
	return AlterTimeSeriesWrapper_remove_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_remove_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_remove_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_remove_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_remove_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapper_remove_Params) AlteredElement() Element {
	return Element(capnp.Struct(s).Uint16(0))
}

func (s AlterTimeSeriesWrapper_remove_Params) SetAlteredElement(v Element) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// AlterTimeSeriesWrapper_remove_Params_List is a list of AlterTimeSeriesWrapper_remove_Params.
type AlterTimeSeriesWrapper_remove_Params_List = capnp.StructList[AlterTimeSeriesWrapper_remove_Params]

// NewAlterTimeSeriesWrapper_remove_Params creates a new list of AlterTimeSeriesWrapper_remove_Params.
func NewAlterTimeSeriesWrapper_remove_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_remove_Params](l), err
}

// AlterTimeSeriesWrapper_remove_Params_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Params promised by a client call.
type AlterTimeSeriesWrapper_remove_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_remove_Params_Future) Struct() (AlterTimeSeriesWrapper_remove_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_remove_Params(p.Struct()), err
}

type AlterTimeSeriesWrapper_remove_Results capnp.Struct

// AlterTimeSeriesWrapper_remove_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapper_remove_Results.
const AlterTimeSeriesWrapper_remove_Results_TypeID = 0xf44980b23013003b

func NewAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(st), err
}

func NewRootAlterTimeSeriesWrapper_remove_Results(s *capnp.Segment) (AlterTimeSeriesWrapper_remove_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AlterTimeSeriesWrapper_remove_Results(st), err
}

func ReadRootAlterTimeSeriesWrapper_remove_Results(msg *capnp.Message) (AlterTimeSeriesWrapper_remove_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapper_remove_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapper_remove_Results) String() string {
	str, _ := text.Marshal(0xf44980b23013003b, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapper_remove_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapper_remove_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapper_remove_Results {
	return AlterTimeSeriesWrapper_remove_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapper_remove_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapper_remove_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapper_remove_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapper_remove_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AlterTimeSeriesWrapper_remove_Results_List is a list of AlterTimeSeriesWrapper_remove_Results.
type AlterTimeSeriesWrapper_remove_Results_List = capnp.StructList[AlterTimeSeriesWrapper_remove_Results]

// NewAlterTimeSeriesWrapper_remove_Results creates a new list of AlterTimeSeriesWrapper_remove_Results.
func NewAlterTimeSeriesWrapper_remove_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapper_remove_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AlterTimeSeriesWrapper_remove_Results](l), err
}

// AlterTimeSeriesWrapper_remove_Results_Future is a wrapper for a AlterTimeSeriesWrapper_remove_Results promised by a client call.
type AlterTimeSeriesWrapper_remove_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapper_remove_Results_Future) Struct() (AlterTimeSeriesWrapper_remove_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapper_remove_Results(p.Struct()), err
}

type AlterTimeSeriesWrapperFactory capnp.Client

// AlterTimeSeriesWrapperFactory_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory.
const AlterTimeSeriesWrapperFactory_TypeID = 0xc5f12df0a2a52744

func (c AlterTimeSeriesWrapperFactory) Wrap(ctx context.Context, params func(AlterTimeSeriesWrapperFactory_wrap_Params) error) (AlterTimeSeriesWrapperFactory_wrap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AlterTimeSeriesWrapperFactory_wrap_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AlterTimeSeriesWrapperFactory_wrap_Results_Future{Future: ans.Future()}, release
}
func (c AlterTimeSeriesWrapperFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AlterTimeSeriesWrapperFactory) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AlterTimeSeriesWrapperFactory) AddRef() AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AlterTimeSeriesWrapperFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AlterTimeSeriesWrapperFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AlterTimeSeriesWrapperFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AlterTimeSeriesWrapperFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AlterTimeSeriesWrapperFactory) IsSame(other AlterTimeSeriesWrapperFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AlterTimeSeriesWrapperFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AlterTimeSeriesWrapperFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A AlterTimeSeriesWrapperFactory_Server is a AlterTimeSeriesWrapperFactory with a local implementation.
type AlterTimeSeriesWrapperFactory_Server interface {
	Wrap(context.Context, AlterTimeSeriesWrapperFactory_wrap) error

	Info(context.Context, common.Identifiable_info) error
}

// AlterTimeSeriesWrapperFactory_NewServer creates a new Server from an implementation of AlterTimeSeriesWrapperFactory_Server.
func AlterTimeSeriesWrapperFactory_NewServer(s AlterTimeSeriesWrapperFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AlterTimeSeriesWrapperFactory_Methods(nil, s), s, c)
}

// AlterTimeSeriesWrapperFactory_ServerToClient creates a new Client from an implementation of AlterTimeSeriesWrapperFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func AlterTimeSeriesWrapperFactory_ServerToClient(s AlterTimeSeriesWrapperFactory_Server) AlterTimeSeriesWrapperFactory {
	return AlterTimeSeriesWrapperFactory(capnp.NewClient(AlterTimeSeriesWrapperFactory_NewServer(s)))
}

// AlterTimeSeriesWrapperFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AlterTimeSeriesWrapperFactory_Methods(methods []server.Method, s AlterTimeSeriesWrapperFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5f12df0a2a52744,
			MethodID:      0,
			InterfaceName: "climate.capnp:AlterTimeSeriesWrapperFactory",
			MethodName:    "wrap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Wrap(ctx, AlterTimeSeriesWrapperFactory_wrap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// AlterTimeSeriesWrapperFactory_wrap holds the state for a server call to AlterTimeSeriesWrapperFactory.wrap.
// See server.Call for documentation.
type AlterTimeSeriesWrapperFactory_wrap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AlterTimeSeriesWrapperFactory_wrap) Args() AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AlterTimeSeriesWrapperFactory_wrap) AllocResults() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(r), err
}

// AlterTimeSeriesWrapperFactory_List is a list of AlterTimeSeriesWrapperFactory.
type AlterTimeSeriesWrapperFactory_List = capnp.CapList[AlterTimeSeriesWrapperFactory]

// NewAlterTimeSeriesWrapperFactory creates a new list of AlterTimeSeriesWrapperFactory.
func NewAlterTimeSeriesWrapperFactory_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AlterTimeSeriesWrapperFactory](l), err
}

type AlterTimeSeriesWrapperFactory_wrap_Params capnp.Struct

// AlterTimeSeriesWrapperFactory_wrap_Params_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Params.
const AlterTimeSeriesWrapperFactory_wrap_Params_TypeID = 0x95064806dc018bfe

func NewAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params(st), err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Params(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Params(st), err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Params(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Params(root.Struct()), err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) String() string {
	str, _ := text.Marshal(0x95064806dc018bfe, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory_wrap_Params) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory_wrap_Params {
	return AlterTimeSeriesWrapperFactory_wrap_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Params) TimeSeries() TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return TimeSeries(p.Interface().Client())
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Params) SetTimeSeries(v TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Params_List is a list of AlterTimeSeriesWrapperFactory_wrap_Params.
type AlterTimeSeriesWrapperFactory_wrap_Params_List = capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Params]

// NewAlterTimeSeriesWrapperFactory_wrap_Params creates a new list of AlterTimeSeriesWrapperFactory_wrap_Params.
func NewAlterTimeSeriesWrapperFactory_wrap_Params_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Params](l), err
}

// AlterTimeSeriesWrapperFactory_wrap_Params_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Params promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Params_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapperFactory_wrap_Params_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Params, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapperFactory_wrap_Params(p.Struct()), err
}
func (p AlterTimeSeriesWrapperFactory_wrap_Params_Future) TimeSeries() TimeSeries {
	return TimeSeries(p.Future.Field(0, nil).Client())
}

type AlterTimeSeriesWrapperFactory_wrap_Results capnp.Struct

// AlterTimeSeriesWrapperFactory_wrap_Results_TypeID is the unique identifier for the type AlterTimeSeriesWrapperFactory_wrap_Results.
const AlterTimeSeriesWrapperFactory_wrap_Results_TypeID = 0xb48982ac9bcd5d11

func NewAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(st), err
}

func NewRootAlterTimeSeriesWrapperFactory_wrap_Results(s *capnp.Segment) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AlterTimeSeriesWrapperFactory_wrap_Results(st), err
}

func ReadRootAlterTimeSeriesWrapperFactory_wrap_Results(msg *capnp.Message) (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	root, err := msg.Root()
	return AlterTimeSeriesWrapperFactory_wrap_Results(root.Struct()), err
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) String() string {
	str, _ := text.Marshal(0xb48982ac9bcd5d11, capnp.Struct(s))
	return str
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AlterTimeSeriesWrapperFactory_wrap_Results) DecodeFromPtr(p capnp.Ptr) AlterTimeSeriesWrapperFactory_wrap_Results {
	return AlterTimeSeriesWrapperFactory_wrap_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AlterTimeSeriesWrapperFactory_wrap_Results) Wrapper() AlterTimeSeriesWrapper {
	p, _ := capnp.Struct(s).Ptr(0)
	return AlterTimeSeriesWrapper(p.Interface().Client())
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) HasWrapper() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AlterTimeSeriesWrapperFactory_wrap_Results) SetWrapper(v AlterTimeSeriesWrapper) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// AlterTimeSeriesWrapperFactory_wrap_Results_List is a list of AlterTimeSeriesWrapperFactory_wrap_Results.
type AlterTimeSeriesWrapperFactory_wrap_Results_List = capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Results]

// NewAlterTimeSeriesWrapperFactory_wrap_Results creates a new list of AlterTimeSeriesWrapperFactory_wrap_Results.
func NewAlterTimeSeriesWrapperFactory_wrap_Results_List(s *capnp.Segment, sz int32) (AlterTimeSeriesWrapperFactory_wrap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[AlterTimeSeriesWrapperFactory_wrap_Results](l), err
}

// AlterTimeSeriesWrapperFactory_wrap_Results_Future is a wrapper for a AlterTimeSeriesWrapperFactory_wrap_Results promised by a client call.
type AlterTimeSeriesWrapperFactory_wrap_Results_Future struct{ *capnp.Future }

func (f AlterTimeSeriesWrapperFactory_wrap_Results_Future) Struct() (AlterTimeSeriesWrapperFactory_wrap_Results, error) {
	p, err := f.Future.Ptr()
	return AlterTimeSeriesWrapperFactory_wrap_Results(p.Struct()), err
}
func (p AlterTimeSeriesWrapperFactory_wrap_Results_Future) Wrapper() AlterTimeSeriesWrapper {
	return AlterTimeSeriesWrapper(p.Future.Field(0, nil).Client())
}

const schema_a01d3ae410eb4518 = "x\xda\xac{}x\x14\xd5\xd9\xf7}\xcfd\xb3|\x04" +
	"6\xc7\x09\x01\x82a%\x1f\x02Ar%\x1b\x82B\xcb" +
	"\x9b\x04\x88\x01$5\x93D,T^\x9d\xecN\x92\x85" +
	"\x9d\x9duf\x16\x88\xef\xcb\x0bXiK+Vx\xe5" +
	"\xb1\xb6j\xd1\x96\xfa\xc8S+z\xc9\xd3\xeaU{\xd5" +
	"\x0f\xfaT\x94\xb6Zl\x8b\x8a\xf5\x0b\xabTT\x1e\xb5" +
	"~\x86y\xae\xfb\xcc\xce\xce$\xd9\x84\x8f\xf6\x9f\xc92" +
	"\xe7\x9es\x9fs\xdf\xbf\xfb\xf3\x1cjZ\xc67\xe6\xd5" +
	"\x8e\xd3\xcbA\xe8\xb8\x1d\x03\xf9\xb6|8p\xcb\x92\x83" +
	"\xcb7\x03+F\x80\xbc @\xdd\x1dl'B\x9e]" +
	"p\xfd\x1f\xf2\x8fo\xba\x7f+\xc8\x13\x11\xed}\xda\x15" +
	"\xddo?7\xf7sh\xc6`\x01\xa2\xb4\x9d\x1d\x97n" +
	"cD\xbe\x8b\xdd#\x00\xda\x93OI\x1fl5\x1f\xd9" +
	"\x0a\xf2xD{R\xf3\xdf\x0b\xdf\x98_\xba\x1b\x024" +
	"\xa5tE\xd1#\xd2\xea\xa2\x89\x00ujQ\x18\x01m" +
	"\xf9\xf5\xaf\xd7\x1cx\xf9\xdao\x00\x1b/x\xc4\x80\xd2" +
	"\x8e\x09;\xa5\xdb&\xd07\xbb&\xdc\x0fh\xb7\xed\xbe" +
	"\xbcH/Z\xb7\x0d\xd8d\x04\x08 q\x1c]\xbc\x10" +
	"\x01%V\xdc\x00h\xff\xe2\xff\xff\xe3\xad\x97cO\xdc" +
	"\xe8'h*n'\x82VNph\xe3\xea'\xd7~" +
	"o\xc3M\x0e\x01\xdf\xe1\x96\xe2*\xda\xe13\xb7\x14\xd4" +
	"n\x08~p\xd3\x90E\xc4\x8bwJ\xd7\x16\xd3\"\xb4" +
	"bZ\xc4]\xb7~\xfbgB\xea\xcf\xdf\xf5M\xf1X" +
	"\xf1|\x9a\xe2\xad\xdf\xd4\xdf\xb2us\xef\x0eG|\x0e" +
	"\xf7{\x8b\xbfO\xdc\x1f\xe6\xdcO}\x07_\xca_\x92" +
	"\xbf\x0b\xd8EY\x82\x13\xc5\x8f\x13A?'\xb8~\xc5" +
	"\x97f\xae_\xf7\xad]\xc0\xa6\xb9sO\x9b\xf8}\x9a" +
	"\xfb\xed\xe3\xff\xeb\xcfK\xe6,\xb8\xdd\xbf361B" +
	"\x9fN\x9eH\x9f\xbe\xf8\xe6\x8f\x8e~=\xbc\xf1\x0e?" +
	"\xf3\x95\x13\xbb\x88@\xe5\x04\xf9\x9f\xf5}\xe7\xca\x17\x1f" +
	"\xb9\xd3O\xb0m\xa2A\x04\xbb8\xc1\x86\x13W\xef\x19" +
	"+\xd6\xff\x10Xy\x96\xe0\xd1\x89;\x89\xe0\x10'8" +
	"2\xf3\xb6\x03\x89\xc7'\xfd\x18\xd8x\xd1/\xa2\xba\xe6" +
	"I%(]1i\"\x80\xa4Lj\x91\xb6\xd1/\xfb" +
	"--y\xaa\xf1\x87\xeb\xee\x19L-\xf5M:(m" +
	"%\x92\xba\x1d\x93Z\x04i\\\xc9t\x00\xfb\xe8\xd5\xa5" +
	"\x8d/}q\xe3^\xff\xea\x02%\\\xb5\xe3J\x889" +
	"V\x1b5\x97-\xce\xff\x0f`\x13E\x0f\x80\x80uM" +
	"%cP\x92KHA\xad%\xdf\x94\xf6\xd0/[Z" +
	"v\xf9\x8c\x05\xfa\xd2}\xfe\xe9\xb6\x97|\x9b\xa6\xbb\x83" +
	"O\xf7\xb8\xf8N\xf4\xf7\x07\xbb\x1f\x026Y\xf0\x96\x0a" +
	"X\xf7hI\x19J\x87\xf8tO\x95\\\x0ch\xb3\xd5" +
	"\x87~\xf0\xd3\xeb\xb7=\xe4W\xda\xa1\x92\x834\xd5\xab" +
	"|\xaa\x09K\xdeJ\xde|\xe9\x13\x0f\xf9\xac\x06\xa7D" +
	"Hi\x07\xbf\xfaDP\xdept?\xb0J\xc1~\xf0" +
	"\x86[o}o\xf3\x87\xaf\x12\x93\xb7K\xaeC\xa9\x9f" +
	"3\xf9\x943\x99r\x91\xb0\xee\xc3\xe9\xef<\x9cQ\xaf" +
	"@\x93\xf4\x97\xcc'&\x81)\xeb\x01\xed\xcfo9\xfe" +
	"\x93_\xbf\xfc\xca\xe3~\xfd\xabS8\x816\x85V\xf1" +
	"\xd7\xcdo\x1d\x8cn)\x7f\xc2Op\xdf\x94U\x1c|" +
	"\x9c\xe0\xc59w\xf7>Uq\xd3\x93d\xc2\xc2\x00\x13" +
	"\x0e\x00HG\xa7\x1c\x97\xde\x9eB\x1f\x1d\x9b\xc2\x8d\xf2" +
	"\xfc\x1b~\xb5\xb9\xeb\x9d\xbb\x9e\x04V\x99\x9d\xef\xa3\xf3" +
	"9\x98\x03\xa54\xdf\xe2\xe9{\xee~\x7f\xf6\xc9\x03C" +
	"\xd00\xb3\xb4\x0b\xa5\x05\xa5\xb4\xb9y\xa5-\x92RJ" +
	"hXs\xf8\xcd\xf9{\xa4\xfe\x03\xc0&\xfa\xdc\x03\xdf" +
	"\xa8$\x97>'\xad\xe6\xf4+Ki\xaf\xa3^\xfb8" +
	"p{\xe4\xb9\xdf8V\xe0\xb0\xde_\xca\xcd\xe4\x00g" +
	"\xfd\xf3\x82\xe2_\x1c?\xb1\xe5\xbf\x86`\xe1Xi\x09" +
	"J\x1f\xf1\xa9N\x96~Sj\x9aJX\x98\xf3\xe3\xd5" +
	"\x87\x9e\xfd\xe9\xc1\xdf\x0erF\xdc\x17\xcd\x9cz\\\xaa" +
	"'*\xa9v*\x19\xb7\xf4\xa3\xd0\x94}wF\x9e\xf6" +
	"\x19\xf7SS\x97\x91.\xef\xfcF\xd3\x0b\x05e\xbb\x9f" +
	"v\xe4\xc1G\xf6O}\x8dF\xfe\x94\xfc\xc9]G\xee" +
	"\x1b\x7f\x08\xe4\xc9\xe8\x0e\xdd;\x95[\xde\xfe\xa9\xb4\xdc" +
	"}\xc7\xf7Y;>\xdeu\xc8\x0f\xc6#S\xd7\x10\xc1" +
	"1N0\xa7{\xd7UeO^\xf4;\x1f\xd7\xc9a" +
	"\xce\xb5\xf0\x87/\xbf\x1b\xef\x9d\xf7\xbb!^)\x10\xde" +
	")\x8d\x0bs\x07\x18\x9eN\xfaj\x09\xa4\xf1\xc2\xed{" +
	"\x7f\x9f\xb1^\x8e\xa0\xa3a\x8e\xf8\x13a\x92\xea\x81_" +
	"\xdd\xfc\xc1#\x0fo\xfd\x03\xc8\x95\x88\x1e\x1a9\xb7\xa5" +
	"\x17\xacAi\xf5\x05\\\x05\x17\x90\x1c\x1e9<#\xb1" +
	"\xb5z\xf7s>L\x9f\xbc\x80;\xb97\xde\x9c9\xf3" +
	"\xf6\xa9k\xff\xc8\xa7\xc9\xee\xe6\x02\xee&\xde\xbe\x80\x18" +
	"\xbd{\xdd\x9c\xe27\xc6l\xf8\xe3\x905/\x9d\xb6S" +
	"\x92\xa7qC\x9d\xb6\x09\xd0N\xbfz\xf9\xc9E\xbb\xa7" +
	"\xfc\x09X\xb1h\xbf\x7f\xcd\xca\xf7\x9f\xed\xaf\xff\x07\xa9" +
	"q\xcb\xb4U(\xed\xe2\x94;\xa6\xb5H\x8f\xd2/{" +
	"\xf7\xb1\xb2\xab\xdf\xd9\xf4\x93?\x03\x1b\xef\x0f)\x1cA" +
	"{\xa6\xbd =\xc0\xe9\xef\x9bFK\xd8\xb4\xfa\xae\xbb" +
	"\xf7\xf5|r\xc4/\xf1\xd1e<\x0eL(#\x89w" +
	"\xd8\xcd\xad\xa7\xbe\xf8?/fv\xc178\xaf\x8c\xa3" +
	"{)'\xe8\x9ex\xed/\xf7\xa7\xbfv\xd4\x0f\x7f\xad" +
	"\xec8\x11l\xe1\x04\xf9\xcf\xff\xfc\x95\x93\xff;\xf5W" +
	"\xbf\xb7|\xa0\x8c\xcb\xfb1N0\xe1\xe3T\xf7\x07\xe1" +
	"{^\xf1\xa3\xf8\xd52\xee7>\xe2\x04Y\x15\x0c6" +
	"\xa0\xca\xf2*\x94\xea\xcb\xa7\x03\xd4\xb5\x96\x07Q\xfa\xb4" +
	"\x9c,hL\xddg;n?|\xe9k\x0eC\xbe\xe2" +
	"\xb7\xcb\xbfM*\xb9\xca|\xfck\xc9K\x0b^\x1f\x80" +
	"\xafrn\xfa\xc7\xca\x89\xd3\xbds??\xf2\xee\x85\xe1" +
	"\xd7}\xd8\x1d]\xf1\xdf\xf4il\xff\xaa\x17\x1f\xba\xe6" +
	"\xca\xd7\x87\xe8\xaa\xbf\xfcA)P\xc1}Y\x85N\xf8" +
	"j\xbc\xec\x89{o\xfa\xfa\x9do\xf8\xb7s\xa2\xe2n" +
	"\x1e\xbb*\x88\xc9+\x87\x9f\\p\xdbyMo\x82<" +
	"++\xd2\xd9\x95\x82\x00(5U\x12\xc1\xb3\xfd\xc6s" +
	"\x93\x03\x0d\xc7}(W+W\xd1*~qs\xf7\x87" +
	"\xf7\x9e\xff\xef\x7f\x07\xb9\x1c}a\xc6\x01\xb1\\\xb9\x06" +
	"%\xb5\x92\x94\xabT\xfe\x0d\xd0\x9e\xba\xe6~q\xef\xd5" +
	"\xef\x9e\x18\x10f/\xe4\x00|\xf8BnNW\xfc\xec" +
	"\xb7\x7f\xbf\xff\xbd\xf7\x06\x98\x82Cp\xe2B\x82Ge" +
	"\xfd\xd6\x07\xca?\xfd\xe4=\xdfJZ\xa7s\x8f}\xf9" +
	"\xbf\xfd\xe6\x07\x1f=\xf3\xd8\xc9\x9c\x89K\xfd\xf4\xe3R" +
	"\xd3t\xa2^0\xfdJ\x04\xec\xff\x92T\xf3\xe0\xe6\xa5" +
	"\x1fzR=0\xe3n\x9a%\x8b\xe5\xc1\xa1o\xff\x8c" +
	"\x07\xa5GgP\xe8;4\xa3\x05\xa5\xfbfR\xe8\x8b" +
	"\xfc|\xf4\xc6\xa2\xbf\xfd\xf5c\xbf\xe7\xde3\x93\x83\xf5" +
	"\x81\x99\xb4\x9fw\xf5\xa5\xaf\xe9_\xdb\xfb\x89?8<" +
	"?s\x19\x8f@3i?'W\xe7\xff\xe5\xf9\xc6\xad" +
	"\x9f\x01\x9b\x95\x9daA\xd5\x18\x12\xfd\x15U4\xc3\xde" +
	"\x8fo\xfe\xee\xfe\xa3\xd5\x9f\xfb\xd1\xbc\xad\xea3\x1e\x0e" +
	"9A\xd6\x89\xe60\xae\xc7\xaa\x1e\x91\x9e\xaaj\x01\x90" +
	"\xfa\xab\x88[~\xf3\x7f\xd6~\xf8\xfe\x8f\xbe\xf0\xcb?" +
	">\x8b\xbb\xb3\xf4,\x9a\xec\xea\x82Y\xf5\x87Gm<" +
	"5d\xfbw\xcczP\xda3\x8b\xe6\xbck\xd67\xa5" +
	"\xfeY\xb4\xfb\xe2\xa7\xca\xd7\x16\xfc~\xad\xed\xd3\xc5G" +
	"\xb3\"\x086\xcc\xb6\xa3\x89\xb8\xa6Xju \xaa\xa4" +
	"\x92\xa9\xf9\x1d\xaa\xb1.\x1eU\xab{T\xabi\x9d\x12" +
	"O(]\x09u\xb1b)\xa6j\x99\x15m\x8a\xa1h" +
	"hf\xbf\x11\x9coZUK\x89)\x96R\xdd\x1cJ" +
	"ZF_\x1b\xa2\\#\xe6\x15\xd8v\x1e\x02HMX" +
	"\x06\xd0\xf1e\x14\xb1c\x09\x0a8\x0eO\xd9E\x04^" +
	"\xa9\x99\x0f4\xd2\xc0r\x1a\x10\xfa\xed\"\x14\x00\xa4\xa5" +
	"\xb8\x0a\xa0c\x09\x0dt\xd2\x80\xf8\x85]\x84\"\x051" +
	"\xfe\xc5r\x1a\xf8*\x0d\xe4}n\x17a\x1e\xa5\xbb|" +
	"\xa0\x8d\x06\xae\xa2\x81\xc0gv\x11R\xc8]\x89\xf3\x01" +
	"::i\xe0\x1a\x1a\xc8\xff\xd4.\xc2|\x00i5." +
	"\x04\xe8\xf8*\x0d\xc4h \xf8\x89]\x84\x1c\xff\x18\x01" +
	"\xe8\xb8\x8a\x06zi`\xd4\xc7v\x11\x8e\x02\x90T\xce" +
	"\xe3\x1a\x1aH\xa0\x80\xa5\xa3\xffac\x11\x8e\x06\x90\xe2" +
	"|$F#)\xfad\xccGv\x11\x8e\xa1d\x16\xdb" +
	"\x01:\x124\xb0\x81\x06\xc6~h\x17\xe1X\x00)\x8d" +
	"]\x00\x1d\x16\x0dlF\x01\x83=Q\x0dC^ \x02" +
	"\xc4\x10`\xd0\xe0o\xb3\x99\xbb\xf3\xd6\xee\x8d\x9b\x96n" +
	"\xc4\xa3 *\x09\xc8\x0f\x1a\xd1\x14\x86\xbc\xcc:\xf3\xa9" +
	"i\xd2\xdbl\x94p\xde6\xa8I\xb3U\xd5\xb0\xd0\x0b" +
	"\xd7\x80X\x08\xb8i\x9dj\x98q=\x89\x05 `\x01" +
	"`\xd8\xb4\x14\xc3\xc2B{;+\x13\x7fz\xea\xcd[" +
	"3tA5\x19\xcb\xf16\xaaGp\x0c\x088\x06\xd0" +
	"N\xc5\xa3z\xd22t\xc0\x04\xe4\xdb1\xd5\x8c\x1a\xf1" +
	"\x94\x05A\xdf\xecY\xf8\xa0\x03\x9f\xe5zCT\xb1\xe2" +
	"zR\xceC\xf4%1X\"^\xb6B.\x12\xf3\x00" +
	"\x08Hlc\x09\x80\xbcAD\xf9\x06\x01\x119\x86\xd8" +
	"\x96e\x00\xf2f\x11\xe5\x1b\x05d\x02r\xfc\xb0m\xf3" +
	"\x01\xe4\x1bD\x94o\x16\x90\x89\x02\xc7\x0e\xdb\xbe\x0a@" +
	"\xbeQD\xf9{\x02\xb2<\x91\xe3\x86\xed\xa2\x97\xb7\x88" +
	"(\xef\x13P\x8c\xd3\xde\xfe\xf8\x82x\xea\xe9\xff\xf7\xf4" +
	"\xe1\xcc\xde\xec^5\xde\xd3k}\xe5+\x00\xe0\xee\xb1" +
	"!\xa1X\x09=\x89\x85\xf6\xe7\xdf}f^\xcd\x17'" +
	"\xdfq\x89\xad\xb8\xa6v\xa8F\x1cD\xd5D\xe6Oy" +
	"\x91\xd1\xbe\xd3\xa6\xa5k\x8b\x15\x10-\x05\xc7\x03\xb6\x89" +
	"\x88\x85\xde\x86\x01\xe9\xe5`\xe9\xb4/\xc2V\xb2\xa8\xf3" +
	"\xf9\xd6Z\xaf\xe3\x93-\xa5?\x02k^\x03\x80\"k" +
	"Z\x06\x80yl\xc1N\x00\x0c\xb0\x054\x96\xcf\xe6u" +
	"\x01\xd8\xd1\x84\x16\xd5\xb5EQhHhs.\xa9\xbd" +
	"\xd8\xeeQ\x8dx\xd4lW\xa1A\xd3#5\xb5\xf5\xf6" +
	"\xda\xa4\x16oW\xa2\x1a\x84\xf4H\xa4\xd96\xb5\xdex" +
	"{T\x99\x03\xd9\x8f\x17Z\x98^\x14\xe5\x9f\xe3\xc5\xb6" +
	"\x96\x8a/2\xa3\xee\xf75\xf3\xect\xaf\xde{\xa5\xd1" +
	"]\x07\xc1\xb9\xb5K\xb2k\xcfs\xd6\xde\x99\x91\x87j" +
	"V\xf7\xaaJL5*\xdaU3\x9d\xb0L\x90\xf3\xb2" +
	"j\x1dG\xda\x1a%\xa2\\!`\x83C\xe6\x0a'\xe4" +
	"\xc5\xceA\xc2\x19\xca\xc0Lwexd\xbc\x94\x9f\x05" +
	"\xa1\xa4@Dy\x86\x80\xb6\x9aP55i\x99\xa4\xd1" +
	"\xd3\xf2\x11\x87\xf0!GW\xd1\xa6\x84\x0cE3s\xe8" +
	"\xaa\xcd\xa7\xab\x08\xd7Us\x84\xebjA\x84\xeb\xaa>" +
	"\xc2u5;\xc2uU\x19\xe1\xba*\x8d\x00\x84\x8dh" +
	"\xaav\x1e=#s\xe9Y7\x87\x9es\xea\xe99\xb7" +
	"\x86\x9e\x17\xf3\xe7%\xf5#,.#\x81\x06.\x02\xf3" +
	"\xac|;\xd7\x8ch\x0d+\xb6X\x86\xd0'\xb6B/" +
	"_\x1c$\xb6|\x87aS\xc2R\x0doyW\x1aJ" +
	"*\xa5\x1a\x97*QK7\xfa\xaa\xd7\x1bJ\xcaQ\xd6" +
	"@<\xac\xcap\x9d$\x9c\xde\xa2\x06n0\x1b\x88:" +
	"\xd2\xa9\x94nXj\xac:\xaaXj\x8fN\xdc9+" +
	"\xd1'\x95at\xdb\xae\x869F\xfdK\xaa\xca@t" +
	"\x8e\x80!\"r%\x90\xf9C\x8e!\x07:}\xf2v" +
	"\xc5|\xa9\xce\xf1\x19T\xb4\x9c\x82\xe6[V\xb5TB" +
	"\xb1T\x12t\xa1\xbf\xf2\xe2.f\x10\x8b\xcc\xbc\xd5\xa6" +
	"e\xa8\x8a\xb6\\w\x1c\xa9\x99s\x13;\x01\xe4B\x11" +
	"\xe5\xf3\x05\xb4\x13\x19J4\x17)\x89D\x97\x12\xc5\xb5" +
	"\xc8\xbcb\xe14\xe2]\x9a\xec\xd6\x0d\x8dOP\xdd\xad" +
	"\x1bM\x89D\xc6\xb0\x07Z]YFj\x09\x01\x83J" +
	"\"\xe1\xc1\xa6\xaeebe\xcb7\x0e?\x0c\x00\x8d\xc8" +
	"0,\xe7\x09\xe8\x7f\xc9p\xba<\x0a\x11\x91>G\xa4" +
	"Uc\xa1\xd7\x1f#Q\x0cp\xd49,vQ\xc7\x0a" +
	"O\xb1\x1cq\xa2\xd1\xc7\x03L6\x11f\xd8n/\xea" +
	"X\xb1HOv\xc7\x01{\xe4<1\x00\x90\xad\xf1\xd0" +
	"\xcdp\x19\x9b\x0f\x02\x0b\x04\x1b\xa2\x86\xaaXj#\xf2" +
	"Y\x9e_r\xfb\xca\xa7\x9f\xbd\xffA\xc7Q\x0eH\x87" +
	"<\xbe\x00\x9c\xd6\xeb\x83\xe0*\xbb]5\xf5D\xda\x8a" +
	"\x83\xa8'\xe5\x0a\xce\xd2M\xda\xd1\xadr%\x86\xab@" +
	"\x90Fc\x101\x9b\xbc\xa1\xdb\xbf`\xfd\x11\x10\xd8\xc9" +
	" \x0a\xd9>\x19\xba];v\x8c\x16{$\x88b\xb6" +
	"\x0d\x87n[\x8b\x1d\xaa\x02\x81=\x16\xc4\xbclr\x8e" +
	"n\xcb\x83\xed\xa79\xef\x0db \x9b\x09\xa3\x9b3\xb3" +
	";\x96\x81\xc0v\x051?\xdb\xfbC\xb7\x13\xc2\xb6\xb5" +
	"\x83\xc0\xb6\x041\x98-\xb0\xd1\x85,K\xd3wZ\x10" +
	"GeK~t\xbb\x12L\xa1\xb1\x95A\xdb\xf0\x89\xa3" +
	"\x11\xc3\x86\x92\xecQ\x1b\xdd8\xd0\xe8X[#\x86\xe9" +
	"Og#\xdaf\xba\x8b\x93p\xe4\xd8\xae\xcf\x074\x1a" +
	"\xd1\xd62\xf0t\xc6\\\x84\xf3\x7f\x11\x9a\x06\xa8L}" +
	"z\xeeK\xbb_\xb8\xe71\xbf\xfa\x06\x99T\xc2gL" +
	"C\x83V\xbb\xcf5fY\xa1\xe9a<\xdb\x7f\xc9\x8d" +
	"\xcf\xa1\xae\x0a\xa0\x8d\x03\x9e\x10\xe1\xf6(\xd1\xad\x08Y" +
	"\xed*\x10\xd8L\xc2\x83\xdb\xb9A\xb7\xf8e\xa5\xd7\x83" +
	"\xc0&\x04m\xd7\xd7\x91\xb3\xe4\xd2qf\xc6\xd8\x0a%" +
	"\x91VMh\xc46\x1cb\xd4\xeev\xa3\x09\xddTM" +
	"\xcb\x03o\x93\xe5:\xe7\x9c\xd1\xbaH\x18!\x11\x1a\xde" +
	"\xc5f\xe0O\xf9 \xdf.\x8f\x94\xcc\x89\x94\xa3\xe7\x03" +
	"\x84cJ<\xd1\xd7\xd0\xab\xa7\x8dD\xdf9\xc4\x13W" +
	"W\x03\xd6\xbc\xd0[\xf3\xa6\xf5\xceG\xc8\xfc\xcd\xc2\x01" +
	"\xdeN\x1c(\x18\x17V\x15m\xe1\x81Q5o\xa4E" +
	"U7%\xac\x06\xd5\xe8\xecK\xa9\xbe}\x969\xfb," +
	"\x03\x08*\xb1XPK'F\x10\x15\x07zE{\x83" +
	"\xb3#yTv?3\x09|3\x9cp\xc4\xdcL\xb8" +
	"\x966y\x91\x88\xf2%\x02\xda<\x7f_\xacX\x80\xea" +
	"\xd0|}\x93\x9a\x8c-V\xac\x1c#\xa7\x09\x8d\x9d\xde" +
	"b\xfe\xe9\xd8\x983s\xcb\x95\x83\x9cC60\xb8," +
	"]\x11\"\xfc\x93\x1a\x8a\xb2e)\xdbX\xe5U\x13\xa5" +
	"x\xcav\x0b\x8a\x08\x80\xfc\x7fE\x94\xbf%`\xa9\xd0" +
	"ogJ\x8a\xade^\x9dQ*~a7:E\xc5" +
	"\xb6*\xaf\xd2\xc8V\xa3l;\xbd\xfd\x96\x88\xf2-\x02" +
	"\x86,u\x83\x95\xad\xab\xba\x13\xbab\xe1X\x10p," +
	"`0\x9e\xb40\x00\x02\x06\x00C]\xba\x9e@\x04\x01" +
	"\x11\xb8\x18G\xd2N`D\xe0)\xf4\xfa_%\xca\xbc" +
	"\xd3\x19^Pw\x0a~'x\xba\x87/\xe86\xf4\x19" +
	"\xab\xe2\xc13Dfw\xfa\xd0\xe9&0\xd5\x97\xe1\x0a" +
	"\xc7\x1bf1O\x0a\xa8\x10Q\xae\xf1a\x9e\xb2h\xd7" +
	"\x10\x82k\xd5\xbe\xac\x9c\xd7\x91\xc2\xf1<\x10\xf0\xbc\xa1" +
	"Yi\x8e,\xd1u\x95\x19O\x99++\xf5\xfb=\xab" +
	"/\xa5.\x8d\x0d\xa9g\xc5\xe1\xd2$1\xe3\xec\xb8\x8c" +
	"\xdc\xa6&\xba\x19\x0c\xab\xa5\x98]I\xbe\xdd\xed?\xa2" +
	"{N\xc4&\xd3\xd8\xb8`C\xb7n\\\x9e\xa4\xc8\xe8" +
	"\xe4[\x03]yFz\xcdIS\xd5\xba\x12j\xab\x1a" +
	"\xd2\xbaT\x83X\x16d7\xd0|\x1e\x80\xdc(\xa2\xbc" +
	"\xdc'\xc0\xa5\xf4r\xb1\x88r\x1b\x95\xcf\x82\x83\xf5V" +
	"z\xb9DD\xb9S@40\x08\x02\x06\x011\x9e\xfd" +
	"\x95r\x7f\x8d`\xd4nL\xcc\xc6\x903\xf3\xe5\x0ez" +
	"\xd5Xs\xa6Hs\x93\xe5\x118\xb9\x19\x84\x9e\xe4\xa0" +
	"\x0f&\x86\x07\xbd?\xd9\xc0\x90\x97\x97e:+g\x96" +
	"\xbe\xb7\xabfh\xb0\x0f<M\xa1\xc4\xfc\x9d\xf7\xd3x" +
	"C/\xdc\x0c\x16\\\xa6\xc8l\xc94\x04j\x9c^\xc7" +
	"\x1an\xb2[\xd7\xf0\"s\xcbu\xbc\xc8\xdc\xd8\xc5\x8b" +
	"\xcc\xbe5\xbc\xc8L/\xe3E\xe6\xb5\xab\x000\xc84" +
	"\xfa3\x8a\xc5\xe9\xe5h\xa6\xb6\x03\xe0\x18\xa6\xd0\x9f\xb1" +
	"l\xb5A\xec\xa2QMY\xa4$!\xd4lj\x11;" +
	"\x1e\xedU\xa3\xcd\xd1f\x08)\x86\xd5k\xc7Sfb" +
	"i\xcaL@\xc3\"\xad\xbe\xa9\xd5\xb0\xb5\xb8\xa1G[" +
	"\xe3\x06\x04\xf5h\xbd\xad\xa5\xe2\xad\xad\xa9x3\x84L" +
	"m\xb9a\xf7t\xc7\x12\xcd\xa6\xc6\xdb\x09\xf4\xe5\"m" +
	"\xae\x02\xe2r\x83\xe8\x9aM\xad6\x02\xe2\x12\xc3\xd6\x0c" +
	"\xfaG\xa4\x86\xa8\xd2kUS\xab\xadY\x0e\x98\xb0{" +
	"\xcc\xf5\xa9\xba+\xeb\x9b\x01\xebmM\xef\x8d.Qb" +
	"-\x10V\xb5H\xf3\x90\xd2vh\xbao\xf4U;\x09" +
	"\xbb\x97\xc5\xf8\xbc\xc9\xc2\\\xded\xbe\xe7M6E\xcd" +
	"u\xa4t\xd7\xc6\x1b\xa2T%\xf4`\xa1W>\xe4." +
	"\xc8\x86\xcf\x06B\x84\xebA6\xb90\x97MF\xfc6" +
	"\x99\x89?\xadU\x9eMn\xcat0\x06\xb5-BY" +
	"\xbf\x97\xe9S\x85\xc8Ma\xc8;!\x1d\x04sq\xb8" +
	"|w\x98\xf6\xc1\x88\xf1\xc6m\xba\xf8d\\\xe5\xc9\x98" +
	"\xef\x0d\x91\xcd\xbe\xdeKRB1\xd5\x8cb\xa1wf" +
	"\x96\x11\xa8b~E]\xdf\x19\xd7\xd0-\xa2\xdc\xb08" +
	"\xd8\x10::\x9cn\x8b#\xa1\xfa*n\x08\xb3\xab\xb8" +
	"!TVqC(\xad\xe2\x860\xa1\x0a d\x9a\xa9" +
	"ZzD\xe8QG\x8f9\xf4\xa8\x1f.\xffoQ\xad" +
	"l=\xed\x14\xc9bt\xad\x17\xea\xdc\xa3\x18t\x0f\x06" +
	"\x183@`\xa3\x83vR\xdd\xc0\xbf\x840\xff6\xa7" +
	"\xab\xa6\x18\xd1\x96H\x9b\x8b\x15\xd1R\x06E\xba\xaa\\" +
	"\xd8\xac\xf2\xb0\x19\"\x171\xb45\xe0$_\x03]\x0d" +
	"\x1b\xbec`\x0dI\xf4qX\xbf\x99-p\xc4\x1cQ" +
	"odt\x18\xaa\xa6\xafS\xdd\xde\x8b\x9f\xc1u>\x06" +
	"\xae\xd7\x87\x86\xe1\xa0}\x8e\xe1#\x97\xb3\xae\xf2\xfa\x8d" +
	"\xa1D\xdc\xb4\xbc\x9a\xcd\x0f\xc5\xf1g\xde\xff\xb8<\xa9" +
	"\xe6,\x95\"^\xca\x10V\x93\x96\xd17\xb8\x89qN" +
	"\xb9I\xce\x0a\xc7\xdfC\xe5N\xc0W\x89\x9e\xa6S2" +
	"T\x92!\x12%/\x99\xb3\x02a\xa3\x17\xfanZ\x04" +
	"\xda759\x82\xb6\x9d\xaf\xfbR\x80\xaa\\\xc8\x0d\xc3" +
	"=\x08E\xf7@\x8c]\xbb\xd3\xe9\x03`\xf6\x80\x1f\xdd" +
	"\xa3_\xa6\\\xcf\xfb\x00(d\x0f\xbd\xd1\xbd\x15\xc1Z" +
	"# \xb0\xa6 \x8a\xd9\xa3d\xfc\x12d\x8e\x03\xeb\xe7" +
	"\xf3z\xd8v\xca\xb9X'\xba\x1b@*}]\x18\xa0" +
	"\xdb\xebm\xc40\x7f\xd7\x88\x0d\x0e\"3\xb9\xa8\x97\xf7" +
	"\xc2\xd9t\xbb\x86\xc4\xe6\x91\x8c\xeb_\x94\x8a\x8f\x0c|" +
	"W\x0e\xd9\x81!\xe5j\xc6k6'\xc2\\&\xe4t" +
	"\xbe\xcc=\xe7}\x8e\xe7\xdc\xe3x\xce;\x1c\xcf\xb9k" +
	">\xf7\x9c\xdb\x17\xf2\x14bk\x15O!6.\xe3)" +
	"D_\x17O!\xd2N\x0aq\xed2\x9eB\xf0\xbcb" +
	",\x8bS\x89[\xc0\x94\x12\x00\x1c\xc7V\xd2\xbf\xc63" +
	"y\x0d@\xc8\xd2\xe2\xc9\x90\xa5\xac\xeb\x09Y\x9a\xb2\xa1" +
	"!e\xa8\xd1xjSOB\xef2\x94Xh}<" +
	"\x19\xb3\xcdt\x92\x0a\x7f\xd3\xd1\x86\x9e\x8e)\x9a\x0e\xc1" +
	"t\xd2\xb2\x0d5\xd1\x9b\xd6\xe21\x1aQ\xe2F\xcaP" +
	"MN\xb5NI\xe9\xf4/\x10M3\x18\xd5#\xa2^" +
	"\x17T\xad\x1a;\xa6\xaeO\xe9\xf1\xa4\x05\xa1NUK" +
	"\x9d]\x9f8W\x16\x19\xf1\xec+La\xf5\x0c\xcc+" +
	"x\xbap\x12][\xed\x86\x0a'\xee\xe6\xa8:\xfc\x8d" +
	"aM\xd9\xb0HO'-J,3e\xe3\x99\xa5\xc5" +
	"\x83\x1b\xdfy#\xe4L\xbc!\x1a\xa2\\\xa7\x8d7^" +
	"\xf9J\x10\x99B\xf5\xd7U\"\xca\xbd\xbe\xa8\x14o\x07" +
	"\x90{E\x94\x9f\x11\x10\xa9z@dO\xed\x04\x90\x9f" +
	"\x11Q\xfe\x8b\x80L\xc4\"\xa4\xfc\xf7\xf9\xe7\x00\xe4\x97" +
	"D\x94\xdf\x120h\xaa\xa9L\x10\x01\x86\xe7\xe1E\xb6" +
	"S\xfd\xb7*\x80\xa9\x7f\xaeG\xec\xcc\xea\xf4\x1b\xcc\xb5" +
	"\xf1\xd4\xf2xRE\xb3S_B\x0c\xd0@\x11\x04\x14" +
	"}c\x82y\xa9\xa1k|\xd4\xe8\xd4\x17+\x16*D" +
	"\x13\x10\x11\xce\xaaO\x96\xab\xf9}\xee\xa7\x18#\xe5\xb2" +
	"YN\xbe|aU\xaenP\xc4\xd7\x0d\"\xf6\xe6\xb0" +
	"\xec\xc3\xaaa\xe8\xc6p\xc5\xec\x90\x16\xd0`\xb72\xa4" +
	"\xe9\x1d\"I\x11x&e\x97x[U\xe6\x98\xf5\xd7" +
	"\xde\xc9\xed\xa3k\x00\xe4_\x8a(\xff\xd6\x97\xe6\x1e\xa0" +
	"8\xf6k\x11\xe5\x97|'\xb7G\x08e\x7f\x11Q~" +
	"\xc3wr\xfb\xeaB\x0fQ,\x80E\x18@d\xc7H" +
	"\x14o\x88(\xbf?r/*nv\x1aJ\xd2LA" +
	"H7\xd5\x98\x9b_\x9e\xf6\xf0\xf1\\\xbbjgXv" +
	"\x9eQ\"\xe5:\xa7\xc1n}\xb1\x12\xe6\xf8\xe4Q\xcd" +
	"\xbb\xf4\x85{m\xd7\xf1\xa0\xebyB\xe4z\xe4\"\x1e" +
	"\xac\xdd{\x95^\xd3~\xc72\x10\xd86\x0a\xd6\xee\xfd" +
	"Nt/\x03\xb1\x8dw\x83\xc0\xfa(X\xbb\x97\xbf\xd0" +
	"\xbd\x17\xc5\xb45 0\x95\x82\xb5{\xaf\x0d\xdd\xfb\xa6" +
	"le;\x08L\x0eb^\xf6^\x0b\xba7eY3" +
	"%\x00\x0b\x82\x83\xba\xf7\xae\x95e\xc3z\xd0l\xb2\x1a" +
	"}\x96\x14R\x9d\x17\xbe\xde{#i\xc89\x06\xc3\x8c" +
	"K=\xcb\xd6\xff\xc0\xa6d\xa6\xff\xfa\xaf\xb1\xed\x118" +
	"\xe4\xaaO#\xb9j\x802\xcf\xd0\xcf\xee\x86\xc6?\x11" +
	"\x93rf\x9b\xe7|\xf8q\xb69L\xae~\xf39\x08" +
	"\x1f\xdd\xb0\xdf\xe0`L.D\xffe\xe7\xc9\xed\xde\xc5" +
	"]69\xe2\xe5\xe8lB\xc4w\x0f\x96u\xd9n\xbe" +
	"\x00\x18\x0b\xf3t<\xdcLy\xbd\xed\xa6\x88\xfc\x9eK" +
	"\xae>C\xa3O\x8f\x0b\xc8\x1b^\"\xa2\xbc\x98j\xf9" +
	"\xa4E;\xf5D\xe7/\x10\xc6\x03\x86\xe2\xc9n\x1d\x99" +
	"\xb7\x8c\x91\xab\xba\xc1\xe7\xc0\x99\x8b\x0a~\xf9\xed\xf5\x1d" +
	"\x03s\x145u[\xa8\x1a\xce7!=\x99\xa3\xc4s" +
	"\x0bn5\xcc;b^/\xd3\xfd\xcf\x0c\xe8^\xcbg" +
	"\xb5{A`\xb3\xc9}\xb8\x97\xe5\xd1\xbd\x9a\xcb\xa6]" +
	"\x07\x02\x9b\x1c\xb4\xdd\xfb\x07\xe8^@\x08\x99\xaaE\xe6" +
	"\xebv\xda\xa0\xc1\xe9\xb5\x9d\xa1\xf5\x0ewt\x92\x09U" +
	"\xff\x13\x00\x00\xff\xff\xc2e`\xd8"

func init() {
	schemas.Register(schema_a01d3ae410eb4518,
		0x804cca489405d451,
		0x85af7fea06d0820c,
		0x85ba7385f313fe19,
		0x8671dec53083e351,
		0x8976146f144fa050,
		0x8cc364dee8f693b8,
		0x8e78986bc45d7dcd,
		0x8ef30778310c94cc,
		0x8fd77002ae8a97a1,
		0x916880859435c6e8,
		0x95064806dc018bfe,
		0x95887677293b5682,
		0x9c3d3448d73eeae9,
		0x9d7d1f83dda3e6db,
		0x9ebadb578b79fa06,
		0x9f35030ba55fed78,
		0xa418c26cc59929d9,
		0xa7769f40fe6e6de8,
		0xaa8cfcdc401d5fdd,
		0xab06444b30722e01,
		0xb0496f3d284f4a13,
		0xb466cacf63ec03c2,
		0xb48982ac9bcd5d11,
		0xb4c346906ee84815,
		0xb5dd785107c358ca,
		0xb9ec27f476022c1b,
		0xc2e0dec0a6ea94fb,
		0xc3238163cae880df,
		0xc48e24c968a234db,
		0xc4a1ec6280be841c,
		0xc5f12df0a2a52744,
		0xc5fd13a53ae6d46a,
		0xc6d2329c05f7e208,
		0xc781edeab8160cb7,
		0xc8caacd1cd5da434,
		0xcb329eb01b0fa313,
		0xcba0220cda41869e,
		0xcd0eadd9a1a66ed6,
		0xcd95f79174b0eab0,
		0xce2cc4225c956634,
		0xce396869eede9f10,
		0xcfaa8d2601750547,
		0xd085b9baf390bec5,
		0xd2a02e856c28d4ba,
		0xd36b1e9c2929e6e4,
		0xd3780ae416347aee,
		0xd61ba043f14fe175,
		0xd7a67fec5f22e5a0,
		0xd9f867b0a2a15d7f,
		0xdb7bfcfe4d45ff53,
		0xdd5b75b5bc711766,
		0xdf705ef1e0b7d506,
		0xe0a71ff36670f715,
		0xe1f480ef979784b2,
		0xe246d49c91fa330a,
		0xe30c466e5bc2735c,
		0xe31f26eed9fb36a9,
		0xe35760b4db5ab564,
		0xe49e838ea9c34b40,
		0xe64112993dc4d4e0,
		0xea3f0519d272fdd1,
		0xeba81ca9f46690b8,
		0xedee5faa03af6a1e,
		0xefefafebc8ae5534,
		0xeff8f923b1853525,
		0xf1c1ccf59bc6964f,
		0xf44980b23013003b,
		0xf635fdd1f05960f0,
		0xf7dfe7147d09b732,
		0xf8aa5b6fe2496fee,
		0xfa8540d5d8065df1,
		0xfb2eddb58f90f7aa,
		0xfb36d2e966556db0,
		0xfca3f0f431b64506,
		0xfe7d08d4352b0c5f,
		0xff6bcf0c6b23c916)
}
