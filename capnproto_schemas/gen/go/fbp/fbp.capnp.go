// Code generated by capnpc-go. DO NOT EDIT.

package fbp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	strconv "strconv"
)

type IP struct{ capnp.Struct }

// IP_TypeID is the unique identifier for the type IP.
const IP_TypeID = 0xaf0a1dc4709a5ccf

func NewIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP{st}, err
}

func NewRootIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP{st}, err
}

func ReadRootIP(msg *capnp.Message) (IP, error) {
	root, err := msg.Root()
	return IP{root.Struct()}, err
}

func (s IP) String() string {
	str, _ := text.Marshal(0xaf0a1dc4709a5ccf, s.Struct)
	return str
}

func (s IP) Attributes() (IP_KV_List, error) {
	p, err := s.Struct.Ptr(0)
	return IP_KV_List{List: p.List()}, err
}

func (s IP) HasAttributes() bool {
	return s.Struct.HasPtr(0)
}

func (s IP) SetAttributes(v IP_KV_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAttributes sets the attributes field to a newly
// allocated IP_KV_List, preferring placement in s's segment.
func (s IP) NewAttributes(n int32) (IP_KV_List, error) {
	l, err := NewIP_KV_List(s.Struct.Segment(), n)
	if err != nil {
		return IP_KV_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s IP) Content() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s IP) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s IP) SetContent(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// IP_List is a list of IP.
type IP_List struct{ capnp.List }

// NewIP creates a new list of IP.
func NewIP_List(s *capnp.Segment, sz int32) (IP_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IP_List{l}, err
}

func (s IP_List) At(i int) IP { return IP{s.List.Struct(i)} }

func (s IP_List) Set(i int, v IP) error { return s.List.SetStruct(i, v.Struct) }

func (s IP_List) String() string {
	str, _ := text.MarshalList(0xaf0a1dc4709a5ccf, s.List)
	return str
}

// IP_Future is a wrapper for a IP promised by a client call.
type IP_Future struct{ *capnp.Future }

func (p IP_Future) Struct() (IP, error) {
	s, err := p.Future.Struct()
	return IP{s}, err
}

func (p IP_Future) Content() *capnp.Future {
	return p.Future.Field(1, nil)
}

type IP_KV struct{ capnp.Struct }

// IP_KV_TypeID is the unique identifier for the type IP_KV.
const IP_KV_TypeID = 0x9e9e5391e0c499e6

func NewIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IP_KV{st}, err
}

func NewRootIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IP_KV{st}, err
}

func ReadRootIP_KV(msg *capnp.Message) (IP_KV, error) {
	root, err := msg.Root()
	return IP_KV{root.Struct()}, err
}

func (s IP_KV) String() string {
	str, _ := text.Marshal(0x9e9e5391e0c499e6, s.Struct)
	return str
}

func (s IP_KV) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IP_KV) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s IP_KV) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IP_KV) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IP_KV) Desc() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IP_KV) HasDesc() bool {
	return s.Struct.HasPtr(1)
}

func (s IP_KV) DescBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IP_KV) SetDesc(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IP_KV) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(2)
}

func (s IP_KV) HasValue() bool {
	return s.Struct.HasPtr(2)
}

func (s IP_KV) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(2, v)
}

// IP_KV_List is a list of IP_KV.
type IP_KV_List struct{ capnp.List }

// NewIP_KV creates a new list of IP_KV.
func NewIP_KV_List(s *capnp.Segment, sz int32) (IP_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return IP_KV_List{l}, err
}

func (s IP_KV_List) At(i int) IP_KV { return IP_KV{s.List.Struct(i)} }

func (s IP_KV_List) Set(i int, v IP_KV) error { return s.List.SetStruct(i, v.Struct) }

func (s IP_KV_List) String() string {
	str, _ := text.MarshalList(0x9e9e5391e0c499e6, s.List)
	return str
}

// IP_KV_Future is a wrapper for a IP_KV promised by a client call.
type IP_KV_Future struct{ *capnp.Future }

func (p IP_KV_Future) Struct() (IP_KV, error) {
	s, err := p.Future.Struct()
	return IP_KV{s}, err
}

func (p IP_KV_Future) Value() *capnp.Future {
	return p.Future.Field(2, nil)
}

type Channel struct{ Client *capnp.Client }

// Channel_TypeID is the unique identifier for the type Channel.
const Channel_TypeID = 0x9c62c32b2ff2b1e8

func (c Channel) SetBufferSize(ctx context.Context, params func(Channel_setBufferSize_Params) error) (Channel_setBufferSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setBufferSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setBufferSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_setBufferSize_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Reader(ctx context.Context, params func(Channel_reader_Params) error) (Channel_reader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "reader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_reader_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_reader_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Writer(ctx context.Context, params func(Channel_writer_Params) error) (Channel_writer_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      2,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "writer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_writer_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_writer_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Endpoints(ctx context.Context, params func(Channel_endpoints_Params) error) (Channel_endpoints_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      3,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "endpoints",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_endpoints_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_endpoints_Results_Future{Future: ans.Future()}, release
}
func (c Channel) SetAutoCloseSemantics(ctx context.Context, params func(Channel_setAutoCloseSemantics_Params) error) (Channel_setAutoCloseSemantics_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      4,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setAutoCloseSemantics_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_setAutoCloseSemantics_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Close(ctx context.Context, params func(Channel_close_Params) error) (Channel_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      5,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_close_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Channel) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Channel) AddRef() Channel {
	return Channel{
		Client: c.Client.AddRef(),
	}
}

func (c Channel) Release() {
	c.Client.Release()
}

// A Channel_Server is a Channel with a local implementation.
type Channel_Server interface {
	SetBufferSize(context.Context, Channel_setBufferSize) error

	Reader(context.Context, Channel_reader) error

	Writer(context.Context, Channel_writer) error

	Endpoints(context.Context, Channel_endpoints) error

	SetAutoCloseSemantics(context.Context, Channel_setAutoCloseSemantics) error

	Close(context.Context, Channel_close) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Channel_NewServer creates a new Server from an implementation of Channel_Server.
func Channel_NewServer(s Channel_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Methods(nil, s), s, c, policy)
}

// Channel_ServerToClient creates a new Client from an implementation of Channel_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_ServerToClient(s Channel_Server, policy *server.Policy) Channel {
	return Channel{Client: capnp.NewClient(Channel_NewServer(s, policy))}
}

// Channel_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Methods(methods []server.Method, s Channel_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setBufferSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetBufferSize(ctx, Channel_setBufferSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "reader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reader(ctx, Channel_reader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      2,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "writer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Writer(ctx, Channel_writer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      3,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "endpoints",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Endpoints(ctx, Channel_endpoints{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      4,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetAutoCloseSemantics(ctx, Channel_setAutoCloseSemantics{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c62c32b2ff2b1e8,
			MethodID:      5,
			InterfaceName: "fbp.capnp:Channel",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_close{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Channel_setBufferSize holds the state for a server call to Channel.setBufferSize.
// See server.Call for documentation.
type Channel_setBufferSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setBufferSize) Args() Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_setBufferSize) AllocResults() (Channel_setBufferSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{Struct: r}, err
}

// Channel_reader holds the state for a server call to Channel.reader.
// See server.Call for documentation.
type Channel_reader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_reader) Args() Channel_reader_Params {
	return Channel_reader_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_reader) AllocResults() (Channel_reader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{Struct: r}, err
}

// Channel_writer holds the state for a server call to Channel.writer.
// See server.Call for documentation.
type Channel_writer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_writer) Args() Channel_writer_Params {
	return Channel_writer_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_writer) AllocResults() (Channel_writer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{Struct: r}, err
}

// Channel_endpoints holds the state for a server call to Channel.endpoints.
// See server.Call for documentation.
type Channel_endpoints struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_endpoints) Args() Channel_endpoints_Params {
	return Channel_endpoints_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_endpoints) AllocResults() (Channel_endpoints_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{Struct: r}, err
}

// Channel_setAutoCloseSemantics holds the state for a server call to Channel.setAutoCloseSemantics.
// See server.Call for documentation.
type Channel_setAutoCloseSemantics struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setAutoCloseSemantics) Args() Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_setAutoCloseSemantics) AllocResults() (Channel_setAutoCloseSemantics_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{Struct: r}, err
}

// Channel_close holds the state for a server call to Channel.close.
// See server.Call for documentation.
type Channel_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_close) Args() Channel_close_Params {
	return Channel_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_close) AllocResults() (Channel_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{Struct: r}, err
}

type Channel_CloseSemantics uint16

// Channel_CloseSemantics_TypeID is the unique identifier for the type Channel_CloseSemantics.
const Channel_CloseSemantics_TypeID = 0xa8d787cae7e0b243

// Values of Channel_CloseSemantics.
const (
	Channel_CloseSemantics_fbp Channel_CloseSemantics = 0
	Channel_CloseSemantics_no  Channel_CloseSemantics = 1
)

// String returns the enum's constant name.
func (c Channel_CloseSemantics) String() string {
	switch c {
	case Channel_CloseSemantics_fbp:
		return "fbp"
	case Channel_CloseSemantics_no:
		return "no"

	default:
		return ""
	}
}

// Channel_CloseSemanticsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Channel_CloseSemanticsFromString(c string) Channel_CloseSemantics {
	switch c {
	case "fbp":
		return Channel_CloseSemantics_fbp
	case "no":
		return Channel_CloseSemantics_no

	default:
		return 0
	}
}

type Channel_CloseSemantics_List struct{ capnp.List }

func NewChannel_CloseSemantics_List(s *capnp.Segment, sz int32) (Channel_CloseSemantics_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Channel_CloseSemantics_List{l.List}, err
}

func (l Channel_CloseSemantics_List) At(i int) Channel_CloseSemantics {
	ul := capnp.UInt16List{List: l.List}
	return Channel_CloseSemantics(ul.At(i))
}

func (l Channel_CloseSemantics_List) Set(i int, v Channel_CloseSemantics) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Channel_Msg struct{ capnp.Struct }
type Channel_Msg_Which uint16

const (
	Channel_Msg_Which_value Channel_Msg_Which = 0
	Channel_Msg_Which_done  Channel_Msg_Which = 1
)

func (w Channel_Msg_Which) String() string {
	const s = "valuedone"
	switch w {
	case Channel_Msg_Which_value:
		return s[0:5]
	case Channel_Msg_Which_done:
		return s[5:9]

	}
	return "Channel_Msg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Channel_Msg_TypeID is the unique identifier for the type Channel_Msg.
const Channel_Msg_TypeID = 0xd5b512f4bcd0aa2e

func NewChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{st}, err
}

func NewRootChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{st}, err
}

func ReadRootChannel_Msg(msg *capnp.Message) (Channel_Msg, error) {
	root, err := msg.Root()
	return Channel_Msg{root.Struct()}, err
}

func (s Channel_Msg) String() string {
	str, _ := text.Marshal(0xd5b512f4bcd0aa2e, s.Struct)
	return str
}

func (s Channel_Msg) Which() Channel_Msg_Which {
	return Channel_Msg_Which(s.Struct.Uint16(0))
}
func (s Channel_Msg) Value() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != value")
	}
	return s.Struct.Ptr(0)
}

func (s Channel_Msg) HasValue() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Channel_Msg) SetValue(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s Channel_Msg) SetDone() {
	s.Struct.SetUint16(0, 1)

}

// Channel_Msg_List is a list of Channel_Msg.
type Channel_Msg_List struct{ capnp.List }

// NewChannel_Msg creates a new list of Channel_Msg.
func NewChannel_Msg_List(s *capnp.Segment, sz int32) (Channel_Msg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Channel_Msg_List{l}, err
}

func (s Channel_Msg_List) At(i int) Channel_Msg { return Channel_Msg{s.List.Struct(i)} }

func (s Channel_Msg_List) Set(i int, v Channel_Msg) error { return s.List.SetStruct(i, v.Struct) }

func (s Channel_Msg_List) String() string {
	str, _ := text.MarshalList(0xd5b512f4bcd0aa2e, s.List)
	return str
}

// Channel_Msg_Future is a wrapper for a Channel_Msg promised by a client call.
type Channel_Msg_Future struct{ *capnp.Future }

func (p Channel_Msg_Future) Struct() (Channel_Msg, error) {
	s, err := p.Future.Struct()
	return Channel_Msg{s}, err
}

func (p Channel_Msg_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Channel_StartupInfo struct{ capnp.Struct }

// Channel_StartupInfo_TypeID is the unique identifier for the type Channel_StartupInfo.
const Channel_StartupInfo_TypeID = 0xe3d7a3237f175028

func NewChannel_StartupInfo(s *capnp.Segment) (Channel_StartupInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Channel_StartupInfo{st}, err
}

func NewRootChannel_StartupInfo(s *capnp.Segment) (Channel_StartupInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Channel_StartupInfo{st}, err
}

func ReadRootChannel_StartupInfo(msg *capnp.Message) (Channel_StartupInfo, error) {
	root, err := msg.Root()
	return Channel_StartupInfo{root.Struct()}, err
}

func (s Channel_StartupInfo) String() string {
	str, _ := text.Marshal(0xe3d7a3237f175028, s.Struct)
	return str
}

func (s Channel_StartupInfo) BufferSize() uint64 {
	return s.Struct.Uint64(0)
}

func (s Channel_StartupInfo) SetBufferSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s Channel_StartupInfo) CloseSemantics() Channel_CloseSemantics {
	return Channel_CloseSemantics(s.Struct.Uint16(8))
}

func (s Channel_StartupInfo) SetCloseSemantics(v Channel_CloseSemantics) {
	s.Struct.SetUint16(8, uint16(v))
}

func (s Channel_StartupInfo) ChannelSR() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Channel_StartupInfo) HasChannelSR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_StartupInfo) ChannelSRBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Channel_StartupInfo) SetChannelSR(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Channel_StartupInfo) ReaderSRs() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Channel_StartupInfo) HasReaderSRs() bool {
	return s.Struct.HasPtr(1)
}

func (s Channel_StartupInfo) SetReaderSRs(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewReaderSRs sets the readerSRs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Channel_StartupInfo) NewReaderSRs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Channel_StartupInfo) WriterSRs() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.TextList{List: p.List()}, err
}

func (s Channel_StartupInfo) HasWriterSRs() bool {
	return s.Struct.HasPtr(2)
}

func (s Channel_StartupInfo) SetWriterSRs(v capnp.TextList) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewWriterSRs sets the writerSRs field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Channel_StartupInfo) NewWriterSRs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Channel_StartupInfo_List is a list of Channel_StartupInfo.
type Channel_StartupInfo_List struct{ capnp.List }

// NewChannel_StartupInfo creates a new list of Channel_StartupInfo.
func NewChannel_StartupInfo_List(s *capnp.Segment, sz int32) (Channel_StartupInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return Channel_StartupInfo_List{l}, err
}

func (s Channel_StartupInfo_List) At(i int) Channel_StartupInfo {
	return Channel_StartupInfo{s.List.Struct(i)}
}

func (s Channel_StartupInfo_List) Set(i int, v Channel_StartupInfo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_StartupInfo_List) String() string {
	str, _ := text.MarshalList(0xe3d7a3237f175028, s.List)
	return str
}

// Channel_StartupInfo_Future is a wrapper for a Channel_StartupInfo promised by a client call.
type Channel_StartupInfo_Future struct{ *capnp.Future }

func (p Channel_StartupInfo_Future) Struct() (Channel_StartupInfo, error) {
	s, err := p.Future.Struct()
	return Channel_StartupInfo{s}, err
}

type Channel_Reader struct{ Client *capnp.Client }

// Channel_Reader_TypeID is the unique identifier for the type Channel_Reader.
const Channel_Reader_TypeID = 0x8bc69192f3bc97cc

func (c Channel_Reader) Read(ctx context.Context, params func(Channel_Reader_read_Params) error) (Channel_Msg_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Msg_Future{Future: ans.Future()}, release
}
func (c Channel_Reader) Close(ctx context.Context, params func(Channel_Reader_close_Params) error) (Channel_Reader_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Reader_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel_Reader) AddRef() Channel_Reader {
	return Channel_Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Channel_Reader) Release() {
	c.Client.Release()
}

// A Channel_Reader_Server is a Channel_Reader with a local implementation.
type Channel_Reader_Server interface {
	Read(context.Context, Channel_Reader_read) error

	Close(context.Context, Channel_Reader_close) error
}

// Channel_Reader_NewServer creates a new Server from an implementation of Channel_Reader_Server.
func Channel_Reader_NewServer(s Channel_Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Reader_Methods(nil, s), s, c, policy)
}

// Channel_Reader_ServerToClient creates a new Client from an implementation of Channel_Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Reader_ServerToClient(s Channel_Reader_Server, policy *server.Policy) Channel_Reader {
	return Channel_Reader{Client: capnp.NewClient(Channel_Reader_NewServer(s, policy))}
}

// Channel_Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Reader_Methods(methods []server.Method, s Channel_Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Channel_Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8bc69192f3bc97cc,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Reader",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Reader_close{call})
		},
	})

	return methods
}

// Channel_Reader_read holds the state for a server call to Channel_Reader.read.
// See server.Call for documentation.
type Channel_Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_read) Args() Channel_Reader_read_Params {
	return Channel_Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Reader_read) AllocResults() (Channel_Msg, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{Struct: r}, err
}

// Channel_Reader_close holds the state for a server call to Channel_Reader.close.
// See server.Call for documentation.
type Channel_Reader_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_close) Args() Channel_Reader_close_Params {
	return Channel_Reader_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Reader_close) AllocResults() (Channel_Reader_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{Struct: r}, err
}

type Channel_Reader_read_Params struct{ capnp.Struct }

// Channel_Reader_read_Params_TypeID is the unique identifier for the type Channel_Reader_read_Params.
const Channel_Reader_read_Params_TypeID = 0xc0335d99db8b2ba5

func NewChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params{st}, err
}

func NewRootChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params{st}, err
}

func ReadRootChannel_Reader_read_Params(msg *capnp.Message) (Channel_Reader_read_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_read_Params{root.Struct()}, err
}

func (s Channel_Reader_read_Params) String() string {
	str, _ := text.Marshal(0xc0335d99db8b2ba5, s.Struct)
	return str
}

// Channel_Reader_read_Params_List is a list of Channel_Reader_read_Params.
type Channel_Reader_read_Params_List struct{ capnp.List }

// NewChannel_Reader_read_Params creates a new list of Channel_Reader_read_Params.
func NewChannel_Reader_read_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_read_Params_List{l}, err
}

func (s Channel_Reader_read_Params_List) At(i int) Channel_Reader_read_Params {
	return Channel_Reader_read_Params{s.List.Struct(i)}
}

func (s Channel_Reader_read_Params_List) Set(i int, v Channel_Reader_read_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_read_Params_List) String() string {
	str, _ := text.MarshalList(0xc0335d99db8b2ba5, s.List)
	return str
}

// Channel_Reader_read_Params_Future is a wrapper for a Channel_Reader_read_Params promised by a client call.
type Channel_Reader_read_Params_Future struct{ *capnp.Future }

func (p Channel_Reader_read_Params_Future) Struct() (Channel_Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_read_Params{s}, err
}

type Channel_Reader_close_Params struct{ capnp.Struct }

// Channel_Reader_close_Params_TypeID is the unique identifier for the type Channel_Reader_close_Params.
const Channel_Reader_close_Params_TypeID = 0x9428ea64f18c41c8

func NewChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params{st}, err
}

func NewRootChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params{st}, err
}

func ReadRootChannel_Reader_close_Params(msg *capnp.Message) (Channel_Reader_close_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Params{root.Struct()}, err
}

func (s Channel_Reader_close_Params) String() string {
	str, _ := text.Marshal(0x9428ea64f18c41c8, s.Struct)
	return str
}

// Channel_Reader_close_Params_List is a list of Channel_Reader_close_Params.
type Channel_Reader_close_Params_List struct{ capnp.List }

// NewChannel_Reader_close_Params creates a new list of Channel_Reader_close_Params.
func NewChannel_Reader_close_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_close_Params_List{l}, err
}

func (s Channel_Reader_close_Params_List) At(i int) Channel_Reader_close_Params {
	return Channel_Reader_close_Params{s.List.Struct(i)}
}

func (s Channel_Reader_close_Params_List) Set(i int, v Channel_Reader_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_close_Params_List) String() string {
	str, _ := text.MarshalList(0x9428ea64f18c41c8, s.List)
	return str
}

// Channel_Reader_close_Params_Future is a wrapper for a Channel_Reader_close_Params promised by a client call.
type Channel_Reader_close_Params_Future struct{ *capnp.Future }

func (p Channel_Reader_close_Params_Future) Struct() (Channel_Reader_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_close_Params{s}, err
}

type Channel_Reader_close_Results struct{ capnp.Struct }

// Channel_Reader_close_Results_TypeID is the unique identifier for the type Channel_Reader_close_Results.
const Channel_Reader_close_Results_TypeID = 0xb3fe08a1bf53821a

func NewChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{st}, err
}

func NewRootChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{st}, err
}

func ReadRootChannel_Reader_close_Results(msg *capnp.Message) (Channel_Reader_close_Results, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Results{root.Struct()}, err
}

func (s Channel_Reader_close_Results) String() string {
	str, _ := text.Marshal(0xb3fe08a1bf53821a, s.Struct)
	return str
}

// Channel_Reader_close_Results_List is a list of Channel_Reader_close_Results.
type Channel_Reader_close_Results_List struct{ capnp.List }

// NewChannel_Reader_close_Results creates a new list of Channel_Reader_close_Results.
func NewChannel_Reader_close_Results_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_close_Results_List{l}, err
}

func (s Channel_Reader_close_Results_List) At(i int) Channel_Reader_close_Results {
	return Channel_Reader_close_Results{s.List.Struct(i)}
}

func (s Channel_Reader_close_Results_List) Set(i int, v Channel_Reader_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_close_Results_List) String() string {
	str, _ := text.MarshalList(0xb3fe08a1bf53821a, s.List)
	return str
}

// Channel_Reader_close_Results_Future is a wrapper for a Channel_Reader_close_Results promised by a client call.
type Channel_Reader_close_Results_Future struct{ *capnp.Future }

func (p Channel_Reader_close_Results_Future) Struct() (Channel_Reader_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_close_Results{s}, err
}

type Channel_Writer struct{ Client *capnp.Client }

// Channel_Writer_TypeID is the unique identifier for the type Channel_Writer.
const Channel_Writer_TypeID = 0xf7fec613b4a8c79f

func (c Channel_Writer) Write(ctx context.Context, params func(Channel_Msg) error) (Channel_Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Msg{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c Channel_Writer) Close(ctx context.Context, params func(Channel_Writer_close_Params) error) (Channel_Writer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Writer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Writer_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel_Writer) AddRef() Channel_Writer {
	return Channel_Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Channel_Writer) Release() {
	c.Client.Release()
}

// A Channel_Writer_Server is a Channel_Writer with a local implementation.
type Channel_Writer_Server interface {
	Write(context.Context, Channel_Writer_write) error

	Close(context.Context, Channel_Writer_close) error
}

// Channel_Writer_NewServer creates a new Server from an implementation of Channel_Writer_Server.
func Channel_Writer_NewServer(s Channel_Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Writer_Methods(nil, s), s, c, policy)
}

// Channel_Writer_ServerToClient creates a new Client from an implementation of Channel_Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Writer_ServerToClient(s Channel_Writer_Server, policy *server.Policy) Channel_Writer {
	return Channel_Writer{Client: capnp.NewClient(Channel_Writer_NewServer(s, policy))}
}

// Channel_Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Writer_Methods(methods []server.Method, s Channel_Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Channel_Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf7fec613b4a8c79f,
			MethodID:      1,
			InterfaceName: "fbp.capnp:Channel.Writer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Writer_close{call})
		},
	})

	return methods
}

// Channel_Writer_write holds the state for a server call to Channel_Writer.write.
// See server.Call for documentation.
type Channel_Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_write) Args() Channel_Msg {
	return Channel_Msg{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Writer_write) AllocResults() (Channel_Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{Struct: r}, err
}

// Channel_Writer_close holds the state for a server call to Channel_Writer.close.
// See server.Call for documentation.
type Channel_Writer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_close) Args() Channel_Writer_close_Params {
	return Channel_Writer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Writer_close) AllocResults() (Channel_Writer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{Struct: r}, err
}

type Channel_Writer_write_Results struct{ capnp.Struct }

// Channel_Writer_write_Results_TypeID is the unique identifier for the type Channel_Writer_write_Results.
const Channel_Writer_write_Results_TypeID = 0xce9f24b8ec149524

func NewChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{st}, err
}

func NewRootChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{st}, err
}

func ReadRootChannel_Writer_write_Results(msg *capnp.Message) (Channel_Writer_write_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_write_Results{root.Struct()}, err
}

func (s Channel_Writer_write_Results) String() string {
	str, _ := text.Marshal(0xce9f24b8ec149524, s.Struct)
	return str
}

// Channel_Writer_write_Results_List is a list of Channel_Writer_write_Results.
type Channel_Writer_write_Results_List struct{ capnp.List }

// NewChannel_Writer_write_Results creates a new list of Channel_Writer_write_Results.
func NewChannel_Writer_write_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_write_Results_List{l}, err
}

func (s Channel_Writer_write_Results_List) At(i int) Channel_Writer_write_Results {
	return Channel_Writer_write_Results{s.List.Struct(i)}
}

func (s Channel_Writer_write_Results_List) Set(i int, v Channel_Writer_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_write_Results_List) String() string {
	str, _ := text.MarshalList(0xce9f24b8ec149524, s.List)
	return str
}

// Channel_Writer_write_Results_Future is a wrapper for a Channel_Writer_write_Results promised by a client call.
type Channel_Writer_write_Results_Future struct{ *capnp.Future }

func (p Channel_Writer_write_Results_Future) Struct() (Channel_Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_write_Results{s}, err
}

type Channel_Writer_close_Params struct{ capnp.Struct }

// Channel_Writer_close_Params_TypeID is the unique identifier for the type Channel_Writer_close_Params.
const Channel_Writer_close_Params_TypeID = 0xbadc988dda3d1e50

func NewChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params{st}, err
}

func NewRootChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params{st}, err
}

func ReadRootChannel_Writer_close_Params(msg *capnp.Message) (Channel_Writer_close_Params, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Params{root.Struct()}, err
}

func (s Channel_Writer_close_Params) String() string {
	str, _ := text.Marshal(0xbadc988dda3d1e50, s.Struct)
	return str
}

// Channel_Writer_close_Params_List is a list of Channel_Writer_close_Params.
type Channel_Writer_close_Params_List struct{ capnp.List }

// NewChannel_Writer_close_Params creates a new list of Channel_Writer_close_Params.
func NewChannel_Writer_close_Params_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_close_Params_List{l}, err
}

func (s Channel_Writer_close_Params_List) At(i int) Channel_Writer_close_Params {
	return Channel_Writer_close_Params{s.List.Struct(i)}
}

func (s Channel_Writer_close_Params_List) Set(i int, v Channel_Writer_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_close_Params_List) String() string {
	str, _ := text.MarshalList(0xbadc988dda3d1e50, s.List)
	return str
}

// Channel_Writer_close_Params_Future is a wrapper for a Channel_Writer_close_Params promised by a client call.
type Channel_Writer_close_Params_Future struct{ *capnp.Future }

func (p Channel_Writer_close_Params_Future) Struct() (Channel_Writer_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_close_Params{s}, err
}

type Channel_Writer_close_Results struct{ capnp.Struct }

// Channel_Writer_close_Results_TypeID is the unique identifier for the type Channel_Writer_close_Results.
const Channel_Writer_close_Results_TypeID = 0xcb02dc91e18e58c9

func NewChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{st}, err
}

func NewRootChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{st}, err
}

func ReadRootChannel_Writer_close_Results(msg *capnp.Message) (Channel_Writer_close_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Results{root.Struct()}, err
}

func (s Channel_Writer_close_Results) String() string {
	str, _ := text.Marshal(0xcb02dc91e18e58c9, s.Struct)
	return str
}

// Channel_Writer_close_Results_List is a list of Channel_Writer_close_Results.
type Channel_Writer_close_Results_List struct{ capnp.List }

// NewChannel_Writer_close_Results creates a new list of Channel_Writer_close_Results.
func NewChannel_Writer_close_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_close_Results_List{l}, err
}

func (s Channel_Writer_close_Results_List) At(i int) Channel_Writer_close_Results {
	return Channel_Writer_close_Results{s.List.Struct(i)}
}

func (s Channel_Writer_close_Results_List) Set(i int, v Channel_Writer_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_close_Results_List) String() string {
	str, _ := text.MarshalList(0xcb02dc91e18e58c9, s.List)
	return str
}

// Channel_Writer_close_Results_Future is a wrapper for a Channel_Writer_close_Results promised by a client call.
type Channel_Writer_close_Results_Future struct{ *capnp.Future }

func (p Channel_Writer_close_Results_Future) Struct() (Channel_Writer_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_close_Results{s}, err
}

type Channel_setBufferSize_Params struct{ capnp.Struct }

// Channel_setBufferSize_Params_TypeID is the unique identifier for the type Channel_setBufferSize_Params.
const Channel_setBufferSize_Params_TypeID = 0x92101e3b7a761333

func NewChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params{st}, err
}

func NewRootChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params{st}, err
}

func ReadRootChannel_setBufferSize_Params(msg *capnp.Message) (Channel_setBufferSize_Params, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Params{root.Struct()}, err
}

func (s Channel_setBufferSize_Params) String() string {
	str, _ := text.Marshal(0x92101e3b7a761333, s.Struct)
	return str
}

func (s Channel_setBufferSize_Params) Size() uint64 {
	return s.Struct.Uint64(0) ^ 1
}

func (s Channel_setBufferSize_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v^1)
}

// Channel_setBufferSize_Params_List is a list of Channel_setBufferSize_Params.
type Channel_setBufferSize_Params_List struct{ capnp.List }

// NewChannel_setBufferSize_Params creates a new list of Channel_setBufferSize_Params.
func NewChannel_setBufferSize_Params_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_setBufferSize_Params_List{l}, err
}

func (s Channel_setBufferSize_Params_List) At(i int) Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params{s.List.Struct(i)}
}

func (s Channel_setBufferSize_Params_List) Set(i int, v Channel_setBufferSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setBufferSize_Params_List) String() string {
	str, _ := text.MarshalList(0x92101e3b7a761333, s.List)
	return str
}

// Channel_setBufferSize_Params_Future is a wrapper for a Channel_setBufferSize_Params promised by a client call.
type Channel_setBufferSize_Params_Future struct{ *capnp.Future }

func (p Channel_setBufferSize_Params_Future) Struct() (Channel_setBufferSize_Params, error) {
	s, err := p.Future.Struct()
	return Channel_setBufferSize_Params{s}, err
}

type Channel_setBufferSize_Results struct{ capnp.Struct }

// Channel_setBufferSize_Results_TypeID is the unique identifier for the type Channel_setBufferSize_Results.
const Channel_setBufferSize_Results_TypeID = 0xfe6a08d5e0712c23

func NewChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{st}, err
}

func NewRootChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{st}, err
}

func ReadRootChannel_setBufferSize_Results(msg *capnp.Message) (Channel_setBufferSize_Results, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Results{root.Struct()}, err
}

func (s Channel_setBufferSize_Results) String() string {
	str, _ := text.Marshal(0xfe6a08d5e0712c23, s.Struct)
	return str
}

// Channel_setBufferSize_Results_List is a list of Channel_setBufferSize_Results.
type Channel_setBufferSize_Results_List struct{ capnp.List }

// NewChannel_setBufferSize_Results creates a new list of Channel_setBufferSize_Results.
func NewChannel_setBufferSize_Results_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_setBufferSize_Results_List{l}, err
}

func (s Channel_setBufferSize_Results_List) At(i int) Channel_setBufferSize_Results {
	return Channel_setBufferSize_Results{s.List.Struct(i)}
}

func (s Channel_setBufferSize_Results_List) Set(i int, v Channel_setBufferSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setBufferSize_Results_List) String() string {
	str, _ := text.MarshalList(0xfe6a08d5e0712c23, s.List)
	return str
}

// Channel_setBufferSize_Results_Future is a wrapper for a Channel_setBufferSize_Results promised by a client call.
type Channel_setBufferSize_Results_Future struct{ *capnp.Future }

func (p Channel_setBufferSize_Results_Future) Struct() (Channel_setBufferSize_Results, error) {
	s, err := p.Future.Struct()
	return Channel_setBufferSize_Results{s}, err
}

type Channel_reader_Params struct{ capnp.Struct }

// Channel_reader_Params_TypeID is the unique identifier for the type Channel_reader_Params.
const Channel_reader_Params_TypeID = 0xe607c9dd64da04c4

func NewChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params{st}, err
}

func NewRootChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params{st}, err
}

func ReadRootChannel_reader_Params(msg *capnp.Message) (Channel_reader_Params, error) {
	root, err := msg.Root()
	return Channel_reader_Params{root.Struct()}, err
}

func (s Channel_reader_Params) String() string {
	str, _ := text.Marshal(0xe607c9dd64da04c4, s.Struct)
	return str
}

// Channel_reader_Params_List is a list of Channel_reader_Params.
type Channel_reader_Params_List struct{ capnp.List }

// NewChannel_reader_Params creates a new list of Channel_reader_Params.
func NewChannel_reader_Params_List(s *capnp.Segment, sz int32) (Channel_reader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_reader_Params_List{l}, err
}

func (s Channel_reader_Params_List) At(i int) Channel_reader_Params {
	return Channel_reader_Params{s.List.Struct(i)}
}

func (s Channel_reader_Params_List) Set(i int, v Channel_reader_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_reader_Params_List) String() string {
	str, _ := text.MarshalList(0xe607c9dd64da04c4, s.List)
	return str
}

// Channel_reader_Params_Future is a wrapper for a Channel_reader_Params promised by a client call.
type Channel_reader_Params_Future struct{ *capnp.Future }

func (p Channel_reader_Params_Future) Struct() (Channel_reader_Params, error) {
	s, err := p.Future.Struct()
	return Channel_reader_Params{s}, err
}

type Channel_reader_Results struct{ capnp.Struct }

// Channel_reader_Results_TypeID is the unique identifier for the type Channel_reader_Results.
const Channel_reader_Results_TypeID = 0xb135ffc9ccc9eca6

func NewChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{st}, err
}

func NewRootChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{st}, err
}

func ReadRootChannel_reader_Results(msg *capnp.Message) (Channel_reader_Results, error) {
	root, err := msg.Root()
	return Channel_reader_Results{root.Struct()}, err
}

func (s Channel_reader_Results) String() string {
	str, _ := text.Marshal(0xb135ffc9ccc9eca6, s.Struct)
	return str
}

func (s Channel_reader_Results) R() Channel_Reader {
	p, _ := s.Struct.Ptr(0)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s Channel_reader_Results) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_reader_Results) SetR(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Channel_reader_Results_List is a list of Channel_reader_Results.
type Channel_reader_Results_List struct{ capnp.List }

// NewChannel_reader_Results creates a new list of Channel_reader_Results.
func NewChannel_reader_Results_List(s *capnp.Segment, sz int32) (Channel_reader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Channel_reader_Results_List{l}, err
}

func (s Channel_reader_Results_List) At(i int) Channel_reader_Results {
	return Channel_reader_Results{s.List.Struct(i)}
}

func (s Channel_reader_Results_List) Set(i int, v Channel_reader_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_reader_Results_List) String() string {
	str, _ := text.MarshalList(0xb135ffc9ccc9eca6, s.List)
	return str
}

// Channel_reader_Results_Future is a wrapper for a Channel_reader_Results promised by a client call.
type Channel_reader_Results_Future struct{ *capnp.Future }

func (p Channel_reader_Results_Future) Struct() (Channel_reader_Results, error) {
	s, err := p.Future.Struct()
	return Channel_reader_Results{s}, err
}

func (p Channel_reader_Results_Future) R() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(0, nil).Client()}
}

type Channel_writer_Params struct{ capnp.Struct }

// Channel_writer_Params_TypeID is the unique identifier for the type Channel_writer_Params.
const Channel_writer_Params_TypeID = 0xbe611d34e368e109

func NewChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params{st}, err
}

func NewRootChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params{st}, err
}

func ReadRootChannel_writer_Params(msg *capnp.Message) (Channel_writer_Params, error) {
	root, err := msg.Root()
	return Channel_writer_Params{root.Struct()}, err
}

func (s Channel_writer_Params) String() string {
	str, _ := text.Marshal(0xbe611d34e368e109, s.Struct)
	return str
}

// Channel_writer_Params_List is a list of Channel_writer_Params.
type Channel_writer_Params_List struct{ capnp.List }

// NewChannel_writer_Params creates a new list of Channel_writer_Params.
func NewChannel_writer_Params_List(s *capnp.Segment, sz int32) (Channel_writer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_writer_Params_List{l}, err
}

func (s Channel_writer_Params_List) At(i int) Channel_writer_Params {
	return Channel_writer_Params{s.List.Struct(i)}
}

func (s Channel_writer_Params_List) Set(i int, v Channel_writer_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_writer_Params_List) String() string {
	str, _ := text.MarshalList(0xbe611d34e368e109, s.List)
	return str
}

// Channel_writer_Params_Future is a wrapper for a Channel_writer_Params promised by a client call.
type Channel_writer_Params_Future struct{ *capnp.Future }

func (p Channel_writer_Params_Future) Struct() (Channel_writer_Params, error) {
	s, err := p.Future.Struct()
	return Channel_writer_Params{s}, err
}

type Channel_writer_Results struct{ capnp.Struct }

// Channel_writer_Results_TypeID is the unique identifier for the type Channel_writer_Results.
const Channel_writer_Results_TypeID = 0xb47b53679e985c7e

func NewChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{st}, err
}

func NewRootChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{st}, err
}

func ReadRootChannel_writer_Results(msg *capnp.Message) (Channel_writer_Results, error) {
	root, err := msg.Root()
	return Channel_writer_Results{root.Struct()}, err
}

func (s Channel_writer_Results) String() string {
	str, _ := text.Marshal(0xb47b53679e985c7e, s.Struct)
	return str
}

func (s Channel_writer_Results) W() Channel_Writer {
	p, _ := s.Struct.Ptr(0)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s Channel_writer_Results) HasW() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_writer_Results) SetW(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Channel_writer_Results_List is a list of Channel_writer_Results.
type Channel_writer_Results_List struct{ capnp.List }

// NewChannel_writer_Results creates a new list of Channel_writer_Results.
func NewChannel_writer_Results_List(s *capnp.Segment, sz int32) (Channel_writer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Channel_writer_Results_List{l}, err
}

func (s Channel_writer_Results_List) At(i int) Channel_writer_Results {
	return Channel_writer_Results{s.List.Struct(i)}
}

func (s Channel_writer_Results_List) Set(i int, v Channel_writer_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_writer_Results_List) String() string {
	str, _ := text.MarshalList(0xb47b53679e985c7e, s.List)
	return str
}

// Channel_writer_Results_Future is a wrapper for a Channel_writer_Results promised by a client call.
type Channel_writer_Results_Future struct{ *capnp.Future }

func (p Channel_writer_Results_Future) Struct() (Channel_writer_Results, error) {
	s, err := p.Future.Struct()
	return Channel_writer_Results{s}, err
}

func (p Channel_writer_Results_Future) W() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(0, nil).Client()}
}

type Channel_endpoints_Params struct{ capnp.Struct }

// Channel_endpoints_Params_TypeID is the unique identifier for the type Channel_endpoints_Params.
const Channel_endpoints_Params_TypeID = 0xd23f817e914373d8

func NewChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params{st}, err
}

func NewRootChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params{st}, err
}

func ReadRootChannel_endpoints_Params(msg *capnp.Message) (Channel_endpoints_Params, error) {
	root, err := msg.Root()
	return Channel_endpoints_Params{root.Struct()}, err
}

func (s Channel_endpoints_Params) String() string {
	str, _ := text.Marshal(0xd23f817e914373d8, s.Struct)
	return str
}

// Channel_endpoints_Params_List is a list of Channel_endpoints_Params.
type Channel_endpoints_Params_List struct{ capnp.List }

// NewChannel_endpoints_Params creates a new list of Channel_endpoints_Params.
func NewChannel_endpoints_Params_List(s *capnp.Segment, sz int32) (Channel_endpoints_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_endpoints_Params_List{l}, err
}

func (s Channel_endpoints_Params_List) At(i int) Channel_endpoints_Params {
	return Channel_endpoints_Params{s.List.Struct(i)}
}

func (s Channel_endpoints_Params_List) Set(i int, v Channel_endpoints_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_endpoints_Params_List) String() string {
	str, _ := text.MarshalList(0xd23f817e914373d8, s.List)
	return str
}

// Channel_endpoints_Params_Future is a wrapper for a Channel_endpoints_Params promised by a client call.
type Channel_endpoints_Params_Future struct{ *capnp.Future }

func (p Channel_endpoints_Params_Future) Struct() (Channel_endpoints_Params, error) {
	s, err := p.Future.Struct()
	return Channel_endpoints_Params{s}, err
}

type Channel_endpoints_Results struct{ capnp.Struct }

// Channel_endpoints_Results_TypeID is the unique identifier for the type Channel_endpoints_Results.
const Channel_endpoints_Results_TypeID = 0xf37401d21f8d97bb

func NewChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{st}, err
}

func NewRootChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{st}, err
}

func ReadRootChannel_endpoints_Results(msg *capnp.Message) (Channel_endpoints_Results, error) {
	root, err := msg.Root()
	return Channel_endpoints_Results{root.Struct()}, err
}

func (s Channel_endpoints_Results) String() string {
	str, _ := text.Marshal(0xf37401d21f8d97bb, s.Struct)
	return str
}

func (s Channel_endpoints_Results) R() Channel_Reader {
	p, _ := s.Struct.Ptr(0)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s Channel_endpoints_Results) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_endpoints_Results) SetR(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Channel_endpoints_Results) W() Channel_Writer {
	p, _ := s.Struct.Ptr(1)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s Channel_endpoints_Results) HasW() bool {
	return s.Struct.HasPtr(1)
}

func (s Channel_endpoints_Results) SetW(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Channel_endpoints_Results_List is a list of Channel_endpoints_Results.
type Channel_endpoints_Results_List struct{ capnp.List }

// NewChannel_endpoints_Results creates a new list of Channel_endpoints_Results.
func NewChannel_endpoints_Results_List(s *capnp.Segment, sz int32) (Channel_endpoints_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Channel_endpoints_Results_List{l}, err
}

func (s Channel_endpoints_Results_List) At(i int) Channel_endpoints_Results {
	return Channel_endpoints_Results{s.List.Struct(i)}
}

func (s Channel_endpoints_Results_List) Set(i int, v Channel_endpoints_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_endpoints_Results_List) String() string {
	str, _ := text.MarshalList(0xf37401d21f8d97bb, s.List)
	return str
}

// Channel_endpoints_Results_Future is a wrapper for a Channel_endpoints_Results promised by a client call.
type Channel_endpoints_Results_Future struct{ *capnp.Future }

func (p Channel_endpoints_Results_Future) Struct() (Channel_endpoints_Results, error) {
	s, err := p.Future.Struct()
	return Channel_endpoints_Results{s}, err
}

func (p Channel_endpoints_Results_Future) R() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(0, nil).Client()}
}

func (p Channel_endpoints_Results_Future) W() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(1, nil).Client()}
}

type Channel_setAutoCloseSemantics_Params struct{ capnp.Struct }

// Channel_setAutoCloseSemantics_Params_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Params.
const Channel_setAutoCloseSemantics_Params_TypeID = 0xb49836b545583add

func NewChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params{st}, err
}

func NewRootChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params{st}, err
}

func ReadRootChannel_setAutoCloseSemantics_Params(msg *capnp.Message) (Channel_setAutoCloseSemantics_Params, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Params{root.Struct()}, err
}

func (s Channel_setAutoCloseSemantics_Params) String() string {
	str, _ := text.Marshal(0xb49836b545583add, s.Struct)
	return str
}

func (s Channel_setAutoCloseSemantics_Params) Cs() Channel_CloseSemantics {
	return Channel_CloseSemantics(s.Struct.Uint16(0))
}

func (s Channel_setAutoCloseSemantics_Params) SetCs(v Channel_CloseSemantics) {
	s.Struct.SetUint16(0, uint16(v))
}

// Channel_setAutoCloseSemantics_Params_List is a list of Channel_setAutoCloseSemantics_Params.
type Channel_setAutoCloseSemantics_Params_List struct{ capnp.List }

// NewChannel_setAutoCloseSemantics_Params creates a new list of Channel_setAutoCloseSemantics_Params.
func NewChannel_setAutoCloseSemantics_Params_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_setAutoCloseSemantics_Params_List{l}, err
}

func (s Channel_setAutoCloseSemantics_Params_List) At(i int) Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params{s.List.Struct(i)}
}

func (s Channel_setAutoCloseSemantics_Params_List) Set(i int, v Channel_setAutoCloseSemantics_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setAutoCloseSemantics_Params_List) String() string {
	str, _ := text.MarshalList(0xb49836b545583add, s.List)
	return str
}

// Channel_setAutoCloseSemantics_Params_Future is a wrapper for a Channel_setAutoCloseSemantics_Params promised by a client call.
type Channel_setAutoCloseSemantics_Params_Future struct{ *capnp.Future }

func (p Channel_setAutoCloseSemantics_Params_Future) Struct() (Channel_setAutoCloseSemantics_Params, error) {
	s, err := p.Future.Struct()
	return Channel_setAutoCloseSemantics_Params{s}, err
}

type Channel_setAutoCloseSemantics_Results struct{ capnp.Struct }

// Channel_setAutoCloseSemantics_Results_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Results.
const Channel_setAutoCloseSemantics_Results_TypeID = 0xc0fc6e5a3fcb3206

func NewChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{st}, err
}

func NewRootChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{st}, err
}

func ReadRootChannel_setAutoCloseSemantics_Results(msg *capnp.Message) (Channel_setAutoCloseSemantics_Results, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Results{root.Struct()}, err
}

func (s Channel_setAutoCloseSemantics_Results) String() string {
	str, _ := text.Marshal(0xc0fc6e5a3fcb3206, s.Struct)
	return str
}

// Channel_setAutoCloseSemantics_Results_List is a list of Channel_setAutoCloseSemantics_Results.
type Channel_setAutoCloseSemantics_Results_List struct{ capnp.List }

// NewChannel_setAutoCloseSemantics_Results creates a new list of Channel_setAutoCloseSemantics_Results.
func NewChannel_setAutoCloseSemantics_Results_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_setAutoCloseSemantics_Results_List{l}, err
}

func (s Channel_setAutoCloseSemantics_Results_List) At(i int) Channel_setAutoCloseSemantics_Results {
	return Channel_setAutoCloseSemantics_Results{s.List.Struct(i)}
}

func (s Channel_setAutoCloseSemantics_Results_List) Set(i int, v Channel_setAutoCloseSemantics_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setAutoCloseSemantics_Results_List) String() string {
	str, _ := text.MarshalList(0xc0fc6e5a3fcb3206, s.List)
	return str
}

// Channel_setAutoCloseSemantics_Results_Future is a wrapper for a Channel_setAutoCloseSemantics_Results promised by a client call.
type Channel_setAutoCloseSemantics_Results_Future struct{ *capnp.Future }

func (p Channel_setAutoCloseSemantics_Results_Future) Struct() (Channel_setAutoCloseSemantics_Results, error) {
	s, err := p.Future.Struct()
	return Channel_setAutoCloseSemantics_Results{s}, err
}

type Channel_close_Params struct{ capnp.Struct }

// Channel_close_Params_TypeID is the unique identifier for the type Channel_close_Params.
const Channel_close_Params_TypeID = 0x95d8ad01c1113d9c

func NewChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params{st}, err
}

func NewRootChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params{st}, err
}

func ReadRootChannel_close_Params(msg *capnp.Message) (Channel_close_Params, error) {
	root, err := msg.Root()
	return Channel_close_Params{root.Struct()}, err
}

func (s Channel_close_Params) String() string {
	str, _ := text.Marshal(0x95d8ad01c1113d9c, s.Struct)
	return str
}

func (s Channel_close_Params) WaitForEmptyBuffer() bool {
	return !s.Struct.Bit(0)
}

func (s Channel_close_Params) SetWaitForEmptyBuffer(v bool) {
	s.Struct.SetBit(0, !v)
}

// Channel_close_Params_List is a list of Channel_close_Params.
type Channel_close_Params_List struct{ capnp.List }

// NewChannel_close_Params creates a new list of Channel_close_Params.
func NewChannel_close_Params_List(s *capnp.Segment, sz int32) (Channel_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_close_Params_List{l}, err
}

func (s Channel_close_Params_List) At(i int) Channel_close_Params {
	return Channel_close_Params{s.List.Struct(i)}
}

func (s Channel_close_Params_List) Set(i int, v Channel_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_close_Params_List) String() string {
	str, _ := text.MarshalList(0x95d8ad01c1113d9c, s.List)
	return str
}

// Channel_close_Params_Future is a wrapper for a Channel_close_Params promised by a client call.
type Channel_close_Params_Future struct{ *capnp.Future }

func (p Channel_close_Params_Future) Struct() (Channel_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_close_Params{s}, err
}

type Channel_close_Results struct{ capnp.Struct }

// Channel_close_Results_TypeID is the unique identifier for the type Channel_close_Results.
const Channel_close_Results_TypeID = 0xcc079ad60f1363b7

func NewChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{st}, err
}

func NewRootChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{st}, err
}

func ReadRootChannel_close_Results(msg *capnp.Message) (Channel_close_Results, error) {
	root, err := msg.Root()
	return Channel_close_Results{root.Struct()}, err
}

func (s Channel_close_Results) String() string {
	str, _ := text.Marshal(0xcc079ad60f1363b7, s.Struct)
	return str
}

// Channel_close_Results_List is a list of Channel_close_Results.
type Channel_close_Results_List struct{ capnp.List }

// NewChannel_close_Results creates a new list of Channel_close_Results.
func NewChannel_close_Results_List(s *capnp.Segment, sz int32) (Channel_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_close_Results_List{l}, err
}

func (s Channel_close_Results_List) At(i int) Channel_close_Results {
	return Channel_close_Results{s.List.Struct(i)}
}

func (s Channel_close_Results_List) Set(i int, v Channel_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_close_Results_List) String() string {
	str, _ := text.MarshalList(0xcc079ad60f1363b7, s.List)
	return str
}

// Channel_close_Results_Future is a wrapper for a Channel_close_Results promised by a client call.
type Channel_close_Results_Future struct{ *capnp.Future }

func (p Channel_close_Results_Future) Struct() (Channel_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_close_Results{s}, err
}

type PortCallbackRegistrar struct{ Client *capnp.Client }

// PortCallbackRegistrar_TypeID is the unique identifier for the type PortCallbackRegistrar.
const PortCallbackRegistrar_TypeID = 0x8dff741cb4dfa00c

func (c PortCallbackRegistrar) RegisterCallback(ctx context.Context, params func(PortCallbackRegistrar_registerCallback_Params) error) (PortCallbackRegistrar_registerCallback_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8dff741cb4dfa00c,
			MethodID:      0,
			InterfaceName: "fbp.capnp:PortCallbackRegistrar",
			MethodName:    "registerCallback",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PortCallbackRegistrar_registerCallback_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PortCallbackRegistrar_registerCallback_Results_Future{Future: ans.Future()}, release
}

func (c PortCallbackRegistrar) AddRef() PortCallbackRegistrar {
	return PortCallbackRegistrar{
		Client: c.Client.AddRef(),
	}
}

func (c PortCallbackRegistrar) Release() {
	c.Client.Release()
}

// A PortCallbackRegistrar_Server is a PortCallbackRegistrar with a local implementation.
type PortCallbackRegistrar_Server interface {
	RegisterCallback(context.Context, PortCallbackRegistrar_registerCallback) error
}

// PortCallbackRegistrar_NewServer creates a new Server from an implementation of PortCallbackRegistrar_Server.
func PortCallbackRegistrar_NewServer(s PortCallbackRegistrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PortCallbackRegistrar_Methods(nil, s), s, c, policy)
}

// PortCallbackRegistrar_ServerToClient creates a new Client from an implementation of PortCallbackRegistrar_Server.
// The caller is responsible for calling Release on the returned Client.
func PortCallbackRegistrar_ServerToClient(s PortCallbackRegistrar_Server, policy *server.Policy) PortCallbackRegistrar {
	return PortCallbackRegistrar{Client: capnp.NewClient(PortCallbackRegistrar_NewServer(s, policy))}
}

// PortCallbackRegistrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PortCallbackRegistrar_Methods(methods []server.Method, s PortCallbackRegistrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8dff741cb4dfa00c,
			MethodID:      0,
			InterfaceName: "fbp.capnp:PortCallbackRegistrar",
			MethodName:    "registerCallback",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterCallback(ctx, PortCallbackRegistrar_registerCallback{call})
		},
	})

	return methods
}

// PortCallbackRegistrar_registerCallback holds the state for a server call to PortCallbackRegistrar.registerCallback.
// See server.Call for documentation.
type PortCallbackRegistrar_registerCallback struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PortCallbackRegistrar_registerCallback) Args() PortCallbackRegistrar_registerCallback_Params {
	return PortCallbackRegistrar_registerCallback_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PortCallbackRegistrar_registerCallback) AllocResults() (PortCallbackRegistrar_registerCallback_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_registerCallback_Results{Struct: r}, err
}

type PortCallbackRegistrar_PortCallback struct{ Client *capnp.Client }

// PortCallbackRegistrar_PortCallback_TypeID is the unique identifier for the type PortCallbackRegistrar_PortCallback.
const PortCallbackRegistrar_PortCallback_TypeID = 0xbcdf87a68541a8ef

func (c PortCallbackRegistrar_PortCallback) NewInPort(ctx context.Context, params func(PortCallbackRegistrar_PortCallback_newInPort_Params) error) (PortCallbackRegistrar_PortCallback_newInPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbcdf87a68541a8ef,
			MethodID:      0,
			InterfaceName: "fbp.capnp:PortCallbackRegistrar.PortCallback",
			MethodName:    "newInPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(PortCallbackRegistrar_PortCallback_newInPort_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PortCallbackRegistrar_PortCallback_newInPort_Results_Future{Future: ans.Future()}, release
}
func (c PortCallbackRegistrar_PortCallback) NewOutPort(ctx context.Context, params func(PortCallbackRegistrar_PortCallback_newOutPort_Params) error) (PortCallbackRegistrar_PortCallback_newOutPort_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbcdf87a68541a8ef,
			MethodID:      1,
			InterfaceName: "fbp.capnp:PortCallbackRegistrar.PortCallback",
			MethodName:    "newOutPort",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(PortCallbackRegistrar_PortCallback_newOutPort_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return PortCallbackRegistrar_PortCallback_newOutPort_Results_Future{Future: ans.Future()}, release
}

func (c PortCallbackRegistrar_PortCallback) AddRef() PortCallbackRegistrar_PortCallback {
	return PortCallbackRegistrar_PortCallback{
		Client: c.Client.AddRef(),
	}
}

func (c PortCallbackRegistrar_PortCallback) Release() {
	c.Client.Release()
}

// A PortCallbackRegistrar_PortCallback_Server is a PortCallbackRegistrar_PortCallback with a local implementation.
type PortCallbackRegistrar_PortCallback_Server interface {
	NewInPort(context.Context, PortCallbackRegistrar_PortCallback_newInPort) error

	NewOutPort(context.Context, PortCallbackRegistrar_PortCallback_newOutPort) error
}

// PortCallbackRegistrar_PortCallback_NewServer creates a new Server from an implementation of PortCallbackRegistrar_PortCallback_Server.
func PortCallbackRegistrar_PortCallback_NewServer(s PortCallbackRegistrar_PortCallback_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PortCallbackRegistrar_PortCallback_Methods(nil, s), s, c, policy)
}

// PortCallbackRegistrar_PortCallback_ServerToClient creates a new Client from an implementation of PortCallbackRegistrar_PortCallback_Server.
// The caller is responsible for calling Release on the returned Client.
func PortCallbackRegistrar_PortCallback_ServerToClient(s PortCallbackRegistrar_PortCallback_Server, policy *server.Policy) PortCallbackRegistrar_PortCallback {
	return PortCallbackRegistrar_PortCallback{Client: capnp.NewClient(PortCallbackRegistrar_PortCallback_NewServer(s, policy))}
}

// PortCallbackRegistrar_PortCallback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PortCallbackRegistrar_PortCallback_Methods(methods []server.Method, s PortCallbackRegistrar_PortCallback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbcdf87a68541a8ef,
			MethodID:      0,
			InterfaceName: "fbp.capnp:PortCallbackRegistrar.PortCallback",
			MethodName:    "newInPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInPort(ctx, PortCallbackRegistrar_PortCallback_newInPort{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbcdf87a68541a8ef,
			MethodID:      1,
			InterfaceName: "fbp.capnp:PortCallbackRegistrar.PortCallback",
			MethodName:    "newOutPort",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewOutPort(ctx, PortCallbackRegistrar_PortCallback_newOutPort{call})
		},
	})

	return methods
}

// PortCallbackRegistrar_PortCallback_newInPort holds the state for a server call to PortCallbackRegistrar_PortCallback.newInPort.
// See server.Call for documentation.
type PortCallbackRegistrar_PortCallback_newInPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PortCallbackRegistrar_PortCallback_newInPort) Args() PortCallbackRegistrar_PortCallback_newInPort_Params {
	return PortCallbackRegistrar_PortCallback_newInPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PortCallbackRegistrar_PortCallback_newInPort) AllocResults() (PortCallbackRegistrar_PortCallback_newInPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_PortCallback_newInPort_Results{Struct: r}, err
}

// PortCallbackRegistrar_PortCallback_newOutPort holds the state for a server call to PortCallbackRegistrar_PortCallback.newOutPort.
// See server.Call for documentation.
type PortCallbackRegistrar_PortCallback_newOutPort struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PortCallbackRegistrar_PortCallback_newOutPort) Args() PortCallbackRegistrar_PortCallback_newOutPort_Params {
	return PortCallbackRegistrar_PortCallback_newOutPort_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c PortCallbackRegistrar_PortCallback_newOutPort) AllocResults() (PortCallbackRegistrar_PortCallback_newOutPort_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_PortCallback_newOutPort_Results{Struct: r}, err
}

type PortCallbackRegistrar_PortCallback_newInPort_Params struct{ capnp.Struct }

// PortCallbackRegistrar_PortCallback_newInPort_Params_TypeID is the unique identifier for the type PortCallbackRegistrar_PortCallback_newInPort_Params.
const PortCallbackRegistrar_PortCallback_newInPort_Params_TypeID = 0x8b8e4a16ae5a6f8b

func NewPortCallbackRegistrar_PortCallback_newInPort_Params(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newInPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PortCallbackRegistrar_PortCallback_newInPort_Params{st}, err
}

func NewRootPortCallbackRegistrar_PortCallback_newInPort_Params(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newInPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PortCallbackRegistrar_PortCallback_newInPort_Params{st}, err
}

func ReadRootPortCallbackRegistrar_PortCallback_newInPort_Params(msg *capnp.Message) (PortCallbackRegistrar_PortCallback_newInPort_Params, error) {
	root, err := msg.Root()
	return PortCallbackRegistrar_PortCallback_newInPort_Params{root.Struct()}, err
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) String() string {
	str, _ := text.Marshal(0x8b8e4a16ae5a6f8b, s.Struct)
	return str
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) ReaderCap() Channel_Reader {
	p, _ := s.Struct.Ptr(1)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) HasReaderCap() bool {
	return s.Struct.HasPtr(1)
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params) SetReaderCap(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// PortCallbackRegistrar_PortCallback_newInPort_Params_List is a list of PortCallbackRegistrar_PortCallback_newInPort_Params.
type PortCallbackRegistrar_PortCallback_newInPort_Params_List struct{ capnp.List }

// NewPortCallbackRegistrar_PortCallback_newInPort_Params creates a new list of PortCallbackRegistrar_PortCallback_newInPort_Params.
func NewPortCallbackRegistrar_PortCallback_newInPort_Params_List(s *capnp.Segment, sz int32) (PortCallbackRegistrar_PortCallback_newInPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PortCallbackRegistrar_PortCallback_newInPort_Params_List{l}, err
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params_List) At(i int) PortCallbackRegistrar_PortCallback_newInPort_Params {
	return PortCallbackRegistrar_PortCallback_newInPort_Params{s.List.Struct(i)}
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params_List) Set(i int, v PortCallbackRegistrar_PortCallback_newInPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Params_List) String() string {
	str, _ := text.MarshalList(0x8b8e4a16ae5a6f8b, s.List)
	return str
}

// PortCallbackRegistrar_PortCallback_newInPort_Params_Future is a wrapper for a PortCallbackRegistrar_PortCallback_newInPort_Params promised by a client call.
type PortCallbackRegistrar_PortCallback_newInPort_Params_Future struct{ *capnp.Future }

func (p PortCallbackRegistrar_PortCallback_newInPort_Params_Future) Struct() (PortCallbackRegistrar_PortCallback_newInPort_Params, error) {
	s, err := p.Future.Struct()
	return PortCallbackRegistrar_PortCallback_newInPort_Params{s}, err
}

func (p PortCallbackRegistrar_PortCallback_newInPort_Params_Future) ReaderCap() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(1, nil).Client()}
}

type PortCallbackRegistrar_PortCallback_newInPort_Results struct{ capnp.Struct }

// PortCallbackRegistrar_PortCallback_newInPort_Results_TypeID is the unique identifier for the type PortCallbackRegistrar_PortCallback_newInPort_Results.
const PortCallbackRegistrar_PortCallback_newInPort_Results_TypeID = 0x8c9a1cea4542fa30

func NewPortCallbackRegistrar_PortCallback_newInPort_Results(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newInPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_PortCallback_newInPort_Results{st}, err
}

func NewRootPortCallbackRegistrar_PortCallback_newInPort_Results(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newInPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_PortCallback_newInPort_Results{st}, err
}

func ReadRootPortCallbackRegistrar_PortCallback_newInPort_Results(msg *capnp.Message) (PortCallbackRegistrar_PortCallback_newInPort_Results, error) {
	root, err := msg.Root()
	return PortCallbackRegistrar_PortCallback_newInPort_Results{root.Struct()}, err
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Results) String() string {
	str, _ := text.Marshal(0x8c9a1cea4542fa30, s.Struct)
	return str
}

// PortCallbackRegistrar_PortCallback_newInPort_Results_List is a list of PortCallbackRegistrar_PortCallback_newInPort_Results.
type PortCallbackRegistrar_PortCallback_newInPort_Results_List struct{ capnp.List }

// NewPortCallbackRegistrar_PortCallback_newInPort_Results creates a new list of PortCallbackRegistrar_PortCallback_newInPort_Results.
func NewPortCallbackRegistrar_PortCallback_newInPort_Results_List(s *capnp.Segment, sz int32) (PortCallbackRegistrar_PortCallback_newInPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PortCallbackRegistrar_PortCallback_newInPort_Results_List{l}, err
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Results_List) At(i int) PortCallbackRegistrar_PortCallback_newInPort_Results {
	return PortCallbackRegistrar_PortCallback_newInPort_Results{s.List.Struct(i)}
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Results_List) Set(i int, v PortCallbackRegistrar_PortCallback_newInPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PortCallbackRegistrar_PortCallback_newInPort_Results_List) String() string {
	str, _ := text.MarshalList(0x8c9a1cea4542fa30, s.List)
	return str
}

// PortCallbackRegistrar_PortCallback_newInPort_Results_Future is a wrapper for a PortCallbackRegistrar_PortCallback_newInPort_Results promised by a client call.
type PortCallbackRegistrar_PortCallback_newInPort_Results_Future struct{ *capnp.Future }

func (p PortCallbackRegistrar_PortCallback_newInPort_Results_Future) Struct() (PortCallbackRegistrar_PortCallback_newInPort_Results, error) {
	s, err := p.Future.Struct()
	return PortCallbackRegistrar_PortCallback_newInPort_Results{s}, err
}

type PortCallbackRegistrar_PortCallback_newOutPort_Params struct{ capnp.Struct }

// PortCallbackRegistrar_PortCallback_newOutPort_Params_TypeID is the unique identifier for the type PortCallbackRegistrar_PortCallback_newOutPort_Params.
const PortCallbackRegistrar_PortCallback_newOutPort_Params_TypeID = 0x89fcdfabc3b994d7

func NewPortCallbackRegistrar_PortCallback_newOutPort_Params(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newOutPort_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PortCallbackRegistrar_PortCallback_newOutPort_Params{st}, err
}

func NewRootPortCallbackRegistrar_PortCallback_newOutPort_Params(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newOutPort_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PortCallbackRegistrar_PortCallback_newOutPort_Params{st}, err
}

func ReadRootPortCallbackRegistrar_PortCallback_newOutPort_Params(msg *capnp.Message) (PortCallbackRegistrar_PortCallback_newOutPort_Params, error) {
	root, err := msg.Root()
	return PortCallbackRegistrar_PortCallback_newOutPort_Params{root.Struct()}, err
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) String() string {
	str, _ := text.Marshal(0x89fcdfabc3b994d7, s.Struct)
	return str
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) WriterCap() Channel_Writer {
	p, _ := s.Struct.Ptr(1)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) HasWriterCap() bool {
	return s.Struct.HasPtr(1)
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params) SetWriterCap(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// PortCallbackRegistrar_PortCallback_newOutPort_Params_List is a list of PortCallbackRegistrar_PortCallback_newOutPort_Params.
type PortCallbackRegistrar_PortCallback_newOutPort_Params_List struct{ capnp.List }

// NewPortCallbackRegistrar_PortCallback_newOutPort_Params creates a new list of PortCallbackRegistrar_PortCallback_newOutPort_Params.
func NewPortCallbackRegistrar_PortCallback_newOutPort_Params_List(s *capnp.Segment, sz int32) (PortCallbackRegistrar_PortCallback_newOutPort_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PortCallbackRegistrar_PortCallback_newOutPort_Params_List{l}, err
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params_List) At(i int) PortCallbackRegistrar_PortCallback_newOutPort_Params {
	return PortCallbackRegistrar_PortCallback_newOutPort_Params{s.List.Struct(i)}
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params_List) Set(i int, v PortCallbackRegistrar_PortCallback_newOutPort_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Params_List) String() string {
	str, _ := text.MarshalList(0x89fcdfabc3b994d7, s.List)
	return str
}

// PortCallbackRegistrar_PortCallback_newOutPort_Params_Future is a wrapper for a PortCallbackRegistrar_PortCallback_newOutPort_Params promised by a client call.
type PortCallbackRegistrar_PortCallback_newOutPort_Params_Future struct{ *capnp.Future }

func (p PortCallbackRegistrar_PortCallback_newOutPort_Params_Future) Struct() (PortCallbackRegistrar_PortCallback_newOutPort_Params, error) {
	s, err := p.Future.Struct()
	return PortCallbackRegistrar_PortCallback_newOutPort_Params{s}, err
}

func (p PortCallbackRegistrar_PortCallback_newOutPort_Params_Future) WriterCap() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(1, nil).Client()}
}

type PortCallbackRegistrar_PortCallback_newOutPort_Results struct{ capnp.Struct }

// PortCallbackRegistrar_PortCallback_newOutPort_Results_TypeID is the unique identifier for the type PortCallbackRegistrar_PortCallback_newOutPort_Results.
const PortCallbackRegistrar_PortCallback_newOutPort_Results_TypeID = 0xbce653a60607e124

func NewPortCallbackRegistrar_PortCallback_newOutPort_Results(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newOutPort_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_PortCallback_newOutPort_Results{st}, err
}

func NewRootPortCallbackRegistrar_PortCallback_newOutPort_Results(s *capnp.Segment) (PortCallbackRegistrar_PortCallback_newOutPort_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_PortCallback_newOutPort_Results{st}, err
}

func ReadRootPortCallbackRegistrar_PortCallback_newOutPort_Results(msg *capnp.Message) (PortCallbackRegistrar_PortCallback_newOutPort_Results, error) {
	root, err := msg.Root()
	return PortCallbackRegistrar_PortCallback_newOutPort_Results{root.Struct()}, err
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Results) String() string {
	str, _ := text.Marshal(0xbce653a60607e124, s.Struct)
	return str
}

// PortCallbackRegistrar_PortCallback_newOutPort_Results_List is a list of PortCallbackRegistrar_PortCallback_newOutPort_Results.
type PortCallbackRegistrar_PortCallback_newOutPort_Results_List struct{ capnp.List }

// NewPortCallbackRegistrar_PortCallback_newOutPort_Results creates a new list of PortCallbackRegistrar_PortCallback_newOutPort_Results.
func NewPortCallbackRegistrar_PortCallback_newOutPort_Results_List(s *capnp.Segment, sz int32) (PortCallbackRegistrar_PortCallback_newOutPort_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PortCallbackRegistrar_PortCallback_newOutPort_Results_List{l}, err
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Results_List) At(i int) PortCallbackRegistrar_PortCallback_newOutPort_Results {
	return PortCallbackRegistrar_PortCallback_newOutPort_Results{s.List.Struct(i)}
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Results_List) Set(i int, v PortCallbackRegistrar_PortCallback_newOutPort_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PortCallbackRegistrar_PortCallback_newOutPort_Results_List) String() string {
	str, _ := text.MarshalList(0xbce653a60607e124, s.List)
	return str
}

// PortCallbackRegistrar_PortCallback_newOutPort_Results_Future is a wrapper for a PortCallbackRegistrar_PortCallback_newOutPort_Results promised by a client call.
type PortCallbackRegistrar_PortCallback_newOutPort_Results_Future struct{ *capnp.Future }

func (p PortCallbackRegistrar_PortCallback_newOutPort_Results_Future) Struct() (PortCallbackRegistrar_PortCallback_newOutPort_Results, error) {
	s, err := p.Future.Struct()
	return PortCallbackRegistrar_PortCallback_newOutPort_Results{s}, err
}

type PortCallbackRegistrar_registerCallback_Params struct{ capnp.Struct }

// PortCallbackRegistrar_registerCallback_Params_TypeID is the unique identifier for the type PortCallbackRegistrar_registerCallback_Params.
const PortCallbackRegistrar_registerCallback_Params_TypeID = 0x8e507b91facc10f5

func NewPortCallbackRegistrar_registerCallback_Params(s *capnp.Segment) (PortCallbackRegistrar_registerCallback_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PortCallbackRegistrar_registerCallback_Params{st}, err
}

func NewRootPortCallbackRegistrar_registerCallback_Params(s *capnp.Segment) (PortCallbackRegistrar_registerCallback_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PortCallbackRegistrar_registerCallback_Params{st}, err
}

func ReadRootPortCallbackRegistrar_registerCallback_Params(msg *capnp.Message) (PortCallbackRegistrar_registerCallback_Params, error) {
	root, err := msg.Root()
	return PortCallbackRegistrar_registerCallback_Params{root.Struct()}, err
}

func (s PortCallbackRegistrar_registerCallback_Params) String() string {
	str, _ := text.Marshal(0x8e507b91facc10f5, s.Struct)
	return str
}

func (s PortCallbackRegistrar_registerCallback_Params) Callback() PortCallbackRegistrar_PortCallback {
	p, _ := s.Struct.Ptr(0)
	return PortCallbackRegistrar_PortCallback{Client: p.Interface().Client()}
}

func (s PortCallbackRegistrar_registerCallback_Params) HasCallback() bool {
	return s.Struct.HasPtr(0)
}

func (s PortCallbackRegistrar_registerCallback_Params) SetCallback(v PortCallbackRegistrar_PortCallback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// PortCallbackRegistrar_registerCallback_Params_List is a list of PortCallbackRegistrar_registerCallback_Params.
type PortCallbackRegistrar_registerCallback_Params_List struct{ capnp.List }

// NewPortCallbackRegistrar_registerCallback_Params creates a new list of PortCallbackRegistrar_registerCallback_Params.
func NewPortCallbackRegistrar_registerCallback_Params_List(s *capnp.Segment, sz int32) (PortCallbackRegistrar_registerCallback_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return PortCallbackRegistrar_registerCallback_Params_List{l}, err
}

func (s PortCallbackRegistrar_registerCallback_Params_List) At(i int) PortCallbackRegistrar_registerCallback_Params {
	return PortCallbackRegistrar_registerCallback_Params{s.List.Struct(i)}
}

func (s PortCallbackRegistrar_registerCallback_Params_List) Set(i int, v PortCallbackRegistrar_registerCallback_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PortCallbackRegistrar_registerCallback_Params_List) String() string {
	str, _ := text.MarshalList(0x8e507b91facc10f5, s.List)
	return str
}

// PortCallbackRegistrar_registerCallback_Params_Future is a wrapper for a PortCallbackRegistrar_registerCallback_Params promised by a client call.
type PortCallbackRegistrar_registerCallback_Params_Future struct{ *capnp.Future }

func (p PortCallbackRegistrar_registerCallback_Params_Future) Struct() (PortCallbackRegistrar_registerCallback_Params, error) {
	s, err := p.Future.Struct()
	return PortCallbackRegistrar_registerCallback_Params{s}, err
}

func (p PortCallbackRegistrar_registerCallback_Params_Future) Callback() PortCallbackRegistrar_PortCallback {
	return PortCallbackRegistrar_PortCallback{Client: p.Future.Field(0, nil).Client()}
}

type PortCallbackRegistrar_registerCallback_Results struct{ capnp.Struct }

// PortCallbackRegistrar_registerCallback_Results_TypeID is the unique identifier for the type PortCallbackRegistrar_registerCallback_Results.
const PortCallbackRegistrar_registerCallback_Results_TypeID = 0x901a895e37911943

func NewPortCallbackRegistrar_registerCallback_Results(s *capnp.Segment) (PortCallbackRegistrar_registerCallback_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_registerCallback_Results{st}, err
}

func NewRootPortCallbackRegistrar_registerCallback_Results(s *capnp.Segment) (PortCallbackRegistrar_registerCallback_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PortCallbackRegistrar_registerCallback_Results{st}, err
}

func ReadRootPortCallbackRegistrar_registerCallback_Results(msg *capnp.Message) (PortCallbackRegistrar_registerCallback_Results, error) {
	root, err := msg.Root()
	return PortCallbackRegistrar_registerCallback_Results{root.Struct()}, err
}

func (s PortCallbackRegistrar_registerCallback_Results) String() string {
	str, _ := text.Marshal(0x901a895e37911943, s.Struct)
	return str
}

// PortCallbackRegistrar_registerCallback_Results_List is a list of PortCallbackRegistrar_registerCallback_Results.
type PortCallbackRegistrar_registerCallback_Results_List struct{ capnp.List }

// NewPortCallbackRegistrar_registerCallback_Results creates a new list of PortCallbackRegistrar_registerCallback_Results.
func NewPortCallbackRegistrar_registerCallback_Results_List(s *capnp.Segment, sz int32) (PortCallbackRegistrar_registerCallback_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PortCallbackRegistrar_registerCallback_Results_List{l}, err
}

func (s PortCallbackRegistrar_registerCallback_Results_List) At(i int) PortCallbackRegistrar_registerCallback_Results {
	return PortCallbackRegistrar_registerCallback_Results{s.List.Struct(i)}
}

func (s PortCallbackRegistrar_registerCallback_Results_List) Set(i int, v PortCallbackRegistrar_registerCallback_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PortCallbackRegistrar_registerCallback_Results_List) String() string {
	str, _ := text.MarshalList(0x901a895e37911943, s.List)
	return str
}

// PortCallbackRegistrar_registerCallback_Results_Future is a wrapper for a PortCallbackRegistrar_registerCallback_Results promised by a client call.
type PortCallbackRegistrar_registerCallback_Results_Future struct{ *capnp.Future }

func (p PortCallbackRegistrar_registerCallback_Results_Future) Struct() (PortCallbackRegistrar_registerCallback_Results, error) {
	s, err := p.Future.Struct()
	return PortCallbackRegistrar_registerCallback_Results{s}, err
}

const schema_bf602c4868dbb22f = "x\xda\xbcX}lS\xd7\x15?\xbf\xfb\x9c\xbc$v" +
	"\xf2|\xfd\xb2\x15\"R\x17\x1ai\x94B\x0aI?\xa4" +
	"\x0c\x14L\xcaJ\xda\xa2\xf9%\x13-\x88Ns\x9c\x17" +
	"\x08\x0d\xb6k\xbf\x14\x91\xae\xad\x86Ve\x8c\x82\x16T" +
	"T@\x94\x82\xb6Q\xba\x8d1\x18\xd5\xbe\xd8\x0a+\xed" +
	"\xc6G;\xa8\xc4\xa8(\x11\xa0\x0e\xb6U\x95\xa6\xd0\xb2" +
	"\x09Dy\xd3}\xcf\xd7~&NCZm\xff%\xef" +
	"\x9e\x8f{\xce\xf9\x9d\xdf9\xd7\xd3\xc7\x95\xcef3J" +
	"\x1e\xd0\x89\x8cs%\xa5\xf6\xa9\x17~\xf3\xc6O\xcf^" +
	"[M|\x1a\x88J\x98J\xd4\xb8\xba\xfc*\x08\xfaK" +
	"\xe5+\x08\xf6\x9a\xe4\xa2\x9f\x7f\xf9\xc1uk\xbc\x02\xd3" +
	"*.\x09\x81H\x85\x108\xf6\xe2\xfe\x8f\xd7\x0f\xbc\xb5" +
	"\x86xH\xb1\xff\xb1\xe7\xd2]w\xbe\xd1\xb1\x85\x88\x82" +
	"\xd0OT\x1c\xd1\x07+T}\xb0\"\xac\xc3\xdf\xafo" +
	"\xf7\xabD\xf6\xf4\xabs\xe6~8a\xf3\xf3\xaeE\x9f" +
	"\xe3\xd1\x7f\x15\xe4\xb3\x03\xdb\xce\xee\x9b`\xd9k\x89W" +
	"(\xf6]{\xdf_:o\xea\xb7^'B\xe3\xd3~" +
	"\x06}\xb5\xff\x16\"}\x83\xff\x01\xfdM\xc7\xce\xe5\xe0" +
	"\xb1\xab\x03OE\xd7\x11\xbfM\xdc\x0c\xc2\xd0.\xff\x1f" +
	"\xc5\xcd~\xefo&\xd8-\xe3\x07\xee\xfb\xe6\xea\x9a\x1f" +
	"\xb8\x02\x8e\xa3\xf3\xfe#\xc2Q\xa3\xfed\xdfWo\x0d" +
	"\xae'#\x04\xe7(\x88\xc6\x93\xfe&\xa1:\xe8\xa8\xfe" +
	"9\xf2\xfcP\xe7\x87\x93_ >^\x9e\x7f\xeao\x10" +
	"\xaa[f\xf1\x83\xd8\xf5\xde\x06\x8f\xaa~\xc1\x7f\x95\xa0" +
	"\xff\xd3\xd1\xcce\xa00\x06\x91\x0e\x1eX\xaf\x8f\x0f<" +
	"B\xd4\xb80\xd0\x0f\xbd\xb5\xea+\xfa\xc2*\xcd\xbe\xb8" +
	"\xe9\xd0\xb9\x81\xf6\xad[\x89W\xc2\xfe\xcb\xe2\xcd\xa9C" +
	"\xb5\x15\xbb\xa9DQ\x89\xf4\xf9U\xabt\xa3\xca\xfdk" +
	"\xb7\x08i\xef\xb9\xbf\x1f\xe9?\xb5\x93x\x88\x15&\xbb" +
	"\xf1BU\x05\xf4\xcb\x8e\xecP\xd5}\xe41\xc5+\x90" +
	"\xbf\x89SA\xfdr\xd52\xfdJ\x95\xc8'4Q\xc4" +
	"\x1d\x1f\x1d>v\xd8\xbeg\x0f\xf1\x90\x9b\xcb \x1a\x9f" +
	"\xd0*DBVj\"\xac\x9aU\xed\xafo/\xbb\xfe" +
	"KOBviM\"!\xcf,\xde\xb8uI\xfbS" +
	"\xfb\xbc\xaa\x1b\\\xd5\x97\x1c\xd5\xc1\xa6G\xe7\xbev\xef" +
	"\xc6}\xded\x9f\xd0\xfa\x9cd;\x02\xd1[g\x9d^" +
	"\xbb\xf1\xcco=\xb6y\xd0I\xf6\xbfvF\x9e\xdb\xd1" +
	"\x7fv?\xf1\xdb\x94<:\x08\x8dW\xb4e\xd0+\x83" +
	"\"\x94\xf2`\xbf\x1e\x13\x7f\xd9u\xe7\xd5\xd2\x1d\xed\x17" +
	"\xf7{\x80\xd5\x1ad\x8c|v\xf9\xf9\xa5\x1f\xdc]\x1b" +
	"\xfb\x83{G\xc7\xc3\xac \x13\x1e~|\xe7\x9a\xf77" +
	"=\xd6x\xc0\xe3{bp\x8a8)m8\xda\xbc(" +
	"q\xed\x80G\xa7<\xb8J\x9c\x1c~t\xdd\xf9\x813" +
	"\xec\xa8G\xe7\xb2\x9b\x8b_\xc5u\xed\xaf\x9b\xd5c\x1e" +
	"\x9dA\xcd\xf1S\xb7\xa1\xfa\xa3_\xd7\xbd\xfc\x8eG\xe7" +
	"\xa0\xab\xf3^\xa6e\xe0\x99\xef4\xbf\xeb\xd1yU\xab" +
	"\x11'\xf5?9\xbe\xff\x93\xd0k'\x9d\xc4\xe5\xab=" +
	"\x17*\x0bB\x1f\xd0\xf6\xea\x9b4\x91\x81\x0dN\x09'" +
	"Goy\xf6\xf6\x1f\x9e\xfa@H{\xb0Q\xa2\x08\x84" +
	"\x0ei\x97\xf4O\x85p\xe3\x15-\x0c\x82}\xc8w\xba" +
	"s\xf0\xb0z\xd1\xe3\xd5\xe0\xceM\x7f\xf7\xe2\xda\xf0\xbb" +
	"\xb0>\xce\xd6\x93\x89\xa3{\xf8$Q\xaeY\\8z" +
	"\xf9O;\xf7\xe9o]\xffO\x91\x86?\xc8\x8f\xe8o" +
	"sU\x7f\x9b\x87\xf5!\xde\xaf\x0f\x84D]n\x9f\xfa" +
	"\xc4\xb9\x93e\xcb\xae{|\xad\x0c\xcd\x01\xfd\xdb\xee\xea" +
	"H\xd5\xc7c\xa9Di\xaa)\x9aL[-\xb1\x9e\x9e" +
	"\x8eX\xfc\xf16sIw\xc6J\xc7\xd2\xf5\xde\xaf\xf5" +
	"\x09s\xc5\xd7{-\xf1\xa9\xae9\x1aK\xc7\x96g\x8c" +
	"2\xc5G\xe4\x03\x11\xbfc\x0a\x91Q\xa7\xc0\x98\xce\xc0" +
	"\x81j\x015>\xad\x8d\xc8\x98\xaa\xc0X\xca\xa0%b" +
	"\xcbM\x04\x88!@\xb0W\xa4\xbb-3\xdd\x12#\xa4" +
	"\xc0\xf3!\x11\xcd\x06G\xd8\xf01xC\xe3\xb8\xc5\xf0" +
	"\x01@T\x01\x82\xf9\xce\"\x80\x13\xc6\x1eFk\xc2\x89" +
	"\"\x1a\xfe\x82Q\xa4\xcdXg>\x8a\x1c\x13\x7f\xb1(" +
	"X\xaa\xa9ei,\x910{\xea\xdb\x1c\xfbDQ\xc0" +
	"\xf0\x81\xd9\xef\x0c\x0c]_\xf9J\xe7%\x12\xa6#\xd5" +
	"@@X]d\x0by!K\x8a\x906\xca\x94\x12\xa2" +
	"\\kA\xe2\x98\xcf\x98B\x14\x99\x8a\xc8L\xf0\xf9*" +
	"\xf2,\x0b\xc9.<\xd2@\x14\x99\x89\xc8\xc3\xe0\x8f\xa9" +
	"\x9a\x08oX\x1cNJ\x8a}\x9c\x8dp\xbc'\x991" +
	"\xc7\xa2\x11\xc5\xe7\xaf^[\xb3\x99\xe9\xed\xb129\x03" +
	"\xca\x08\x06Hd\xdd\xc3eXfK9\xd2\x84\xa4\xe1" +
	"s\x12&\x07\x1a\xe4\xe0\xe2\xfc\xfb\xc4x\xa5j\xa7\x1d" +
	"Sf\x1a\xd2\xf6M\xdf]j\xca\x93:\xb7q\xc8\xf0" +
	"\xe50W\xf9 \x91\x11P`\x8cc\xb0\xe39\x07\x04" +
	"\x9e\xbf\xf3\xcd\x02}\x98\xbb67GD\xde,Ix" +
	"eLkNoW\x97\x99n\xef\xee3s=\x9d\xbd" +
	"\x19\xc0+\xa78`\x82Q\xcd\xa0e\xba\xfbL\x94\x13" +
	"C\xb9(]1s.Z\xeb\x1d\x10\xc8\xde*\x86j" +
	"W\xa0\x88\xbb\xcdDFP\x811\x81\xc1^\x11\xeb\xb6" +
	"\xbe\x96L\xcf\xc5\xf2\x94\xb5R\xdcR1\xd3\x00\xb1\x12" +
	"\xc0\x93\x08H\xab\xe81\xaa\xe1\x9d\xcf\x13\xfb\xf2\xfc\xcd" +
	"'N\xca\xd33\xaf\xed\xf0\xecL\xb5M\x1e>\x1d\xdf" +
	"d\xb7\x88\xbb\xb5\x9b\xcb\xa99\x96\xb0\xba\xe3\x19u~" +
	"f\x89\xddn\xc5\xd2Vo\xaa\x95\xd4DW\xb2\xd9\x0d" +
	"\xb3\xf9\x11\x87\xc1\x8cq\x0et\xe4B\x03\xc9\xb5|O" +
	"\x9a(\xf2\x0bD\x0e\x80\x9f\x10\xbd&\x09\x1fr\xd4\xf3" +
	"7\x9b\x88\"\x07\x109\x0e~^\x05\xcb\x0dI\xc8\x89" +
	"\xceO\x0a\x89\xe3\x88\x9c\x03\x1fR\xa1\xe4F\x15\xe4\x8c" +
	"\xe0\x17\xda\x88\"\x7fC\xe4\x13\xe8%P\xe1\xcb\x0d{" +
	"\xc8\xf1\xc9\xaf\xec%\x8a\\CK\x00\xd0k\xa1\xa2$" +
	"\xb7BA\x8eK\x9d\xa3\x81HH\xb4L\x00\xf4iP" +
	"m\x09\x0d\x0a;\xe0\x18KO7\xbb\xac8&\x15w" +
	"\x1c\x8cE\xc56\x13\x9d\xa9dw\xc2\"d\xc6\xa4\x97" +
	"1\xadH\xaf\x95lA\xb6\xd2\xb1\xb0S\xe8\xff-\xcf" +
	"\x19e\x80}r\xde\x96\x85GO\xec\xdeKD\xb6y" +
	"\xf4\xde3\xdbN\xbfr\x90\x88\">p\x84\xb0\xc0\x0b" +
	"\xea\xd6h\xfdC\x0b\x1c\xda\x0f\xe4xb\xee$\"c" +
	"\xb6\x02\xe3a\xcflj\x15-z\xbf\x02#\xca\xc0\x19" +
	"\xab\x06#\xe2\xf3\x1b\x88\x8cy\x0a\x8co0\xa8\x8f\x9b" +
	"+\xe5\xbc\xd2:\xcdL\\\xfe\x13~2\xd6\xd3k\"" +
	"D\x0c!OGy\xfaY\xf6\x82\xdb\x09\xee\x14*s" +
	"\x1c\xf0I\x0e#\x95\xd7\x10\xa9]\x1d)%\x91\xcc\xe9" +
	"\x93&n\xef0n~\xb1F\x8d\xf2\xd0\x02\xef\x98]" +
	"DdLV`\xdc\xef\x09%2\x87\xc8\x98\xa9\xc0\x98" +
	"\xc7`\xc7,+\xdd\xdd\xd1k\x91bfPE\xd9\x91" +
	"\x99\xb3H\x10\x1f\x9f\x8d'\x13\x96\x99\xb0>+\x08\x17" +
	"\x8cy\x1e\xf4\x12o(Ko\x93\x19\x90\x1eu\x80\x8b" +
	"K\x16\xb0\xf0H\xd4Wl0IA\x17\xe8\xa3_g" +
	"\xc5\xa8[\xd1\xb0\xeb\xf8\x0a\x88\xdd\xc1xA\x01od" +
	"\\\xe1\xb2&\xefR\x89g\xa0\xe5\x09td\x9fZ\xf1" +
	"\x14\xb8|8\x02\xfb\xfbF\x9b\xed\xce\x1cv\x00\xe6\xf0" +
	"\xa9|\xf5B>V\xf9\x8c6b\xfc\x0e\xc1\xa4\xf2\xc9" +
	"\x0c\xf9\xde\xe0\xb5\x8b\x88\xf1/\xa9\xb6\xdc\x0d\x08\xd6l" +
	"\xd8r]%%m\x15Nkm\xac\xeb\xae,\x974" +
	"0\xac\x9e\xd9\xa9>\xfc<\x0b\x0c\x81\xc2\xbahL+" +
	"HJ\xf9h\x05\x1b\xd9mA\xb2\x87\xe1M\xbdq\xd6" +
	"\x8ej\xc8\x09\xe33\x81+\xe96\xe3\xc4\xaax\xc2\xc8" +
	"\xcd\xe0pO\xfd\xfc\xcc\x12\xb7\x88\xbe\x80m\xbb\xad\xde" +
	"\x90\xdf\xa8+q\xdd\xce\xae\xd4S\xb2\x04p7\xcb\x11" +
	"\x11\x0a\x96e\xd1\xcfZg2aRi\xb1\x1d\xc2\x1d" +
	"\xc9\xe1Tk\xa2+)<V\xe70\xfd\xb4\xe0\x96o" +
	"+0\xbe'\xb8\xc5\xe7\xfa{\xae\x8f\xc8\xf8\xae\x02\xe3" +
	"G\x0c\xc8\xb2\xe4v\xb1\xd6oS`\xfc\x8c\x81+\xa8" +
	"\x86B\xc4_\x15\x1fw*0\x0e1p\x1f\xab\x86\x8f" +
	"\x88\x1f\x14\x1f\x0f(0\xce0\xd8\x1d\xd9\x8d\x89\x14\xb9" +
	"\x0f\x11\xec\xf8\x0dk\xc3\xcdwR\xdc\x0d\xa8\x9d\xd0v" +
	"\xc3\xb3\xa2\xbd\x8d\x90\xe3>qT\x95{7\x15=*" +
	"R\xfd,\xf9\x8d\x88\xce|Q\x05B\xd4\x1e\xab\xe0-" +
	"\x14\xcaV\xae\x80\xa4CY\x92^<&\xce\xfc<|" +
	"\xc6nD\xe9\xcd\xbd\x83\x84l\xc1;H\xae\x81\x90\xbf" +
	"\x01\xf0\x19\x0d\x85\xef \xf9\x03\x08\xe4/\x0b\x85\xef\xa0" +
	"\xb0\x93\xf4\xff\xdfC\xc87\xd2\x86.\xdb\xf8\xbf\x01\x00" +
	"\x00\xff\xff\xc5\xb7\x0e-"

func init() {
	schemas.Register(schema_bf602c4868dbb22f,
		0x89fcdfabc3b994d7,
		0x8b8e4a16ae5a6f8b,
		0x8bc69192f3bc97cc,
		0x8c9a1cea4542fa30,
		0x8dff741cb4dfa00c,
		0x8e507b91facc10f5,
		0x901a895e37911943,
		0x92101e3b7a761333,
		0x9428ea64f18c41c8,
		0x95d8ad01c1113d9c,
		0x9c62c32b2ff2b1e8,
		0x9e9e5391e0c499e6,
		0xa8d787cae7e0b243,
		0xaf0a1dc4709a5ccf,
		0xb135ffc9ccc9eca6,
		0xb3fe08a1bf53821a,
		0xb47b53679e985c7e,
		0xb49836b545583add,
		0xbadc988dda3d1e50,
		0xbcdf87a68541a8ef,
		0xbce653a60607e124,
		0xbe611d34e368e109,
		0xc0335d99db8b2ba5,
		0xc0fc6e5a3fcb3206,
		0xcb02dc91e18e58c9,
		0xcc079ad60f1363b7,
		0xce9f24b8ec149524,
		0xd23f817e914373d8,
		0xd5b512f4bcd0aa2e,
		0xe3d7a3237f175028,
		0xe607c9dd64da04c4,
		0xf37401d21f8d97bb,
		0xf7fec613b4a8c79f,
		0xfe6a08d5e0712c23)
}
