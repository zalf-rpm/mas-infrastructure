// Code generated by capnpc-go. DO NOT EDIT.

package management

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	registry "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/registry"
	math "math"
	strconv "strconv"
)

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0x82a74595175b71a3

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List struct{ capnp.List }

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return EventType_List{l.List}, err
}

func (l EventType_List) At(i int) EventType {
	ul := capnp.UInt16List{List: l.List}
	return EventType(ul.At(i))
}

func (l EventType_List) Set(i int, v EventType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xc2d50914b83d42de

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List struct{ capnp.List }

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PlantOrgan_List{l.List}, err
}

func (l PlantOrgan_List) At(i int) PlantOrgan {
	ul := capnp.UInt16List{List: l.List}
	return PlantOrgan(ul.At(i))
}

func (l PlantOrgan_List) Set(i int, v PlantOrgan) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event struct{ capnp.Struct }
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x9c5dedfd679ac842

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x9c5dedfd679ac842, s.Struct)
	return str
}

func (s Event) Which() Event_Which {
	return Event_Which(s.Struct.Uint16(2))
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(s.Struct.Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Event) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	s.Struct.SetUint16(2, 0)
}

func (s Event_at) Date() (common_date.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common_date.Date{Struct: p.Struct()}, err
}

func (s Event_at) HasDate() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_at) SetDate(v common_date.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(s.Struct.Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	s.Struct.SetUint16(2, 1)
}

func (s Event_between) Earliest() (common_date.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common_date.Date{Struct: p.Struct()}, err
}

func (s Event_between) HasEarliest() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_between) SetEarliest(v common_date.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common_date.Date, error) {
	ss, err := common_date.NewDate(s.Struct.Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common_date.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common_date.Date{Struct: p.Struct()}, err
}

func (s Event_between) HasLatest() bool {
	return s.Struct.HasPtr(2)
}

func (s Event_between) SetLatest(v common_date.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common_date.Date, error) {
	ss, err := common_date.NewDate(s.Struct.Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	s.Struct.SetUint16(2, 2)
}

func (s Event_after) Event() (Event_Type, error) {
	p, err := s.Struct.Ptr(1)
	return Event_Type{Struct: p.Struct()}, err
}

func (s Event_after) HasEvent() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(s.Struct.Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return s.Struct.Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(3)
}

func (s Event) HasParams() bool {
	return s.Struct.HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(3, v)
}

func (s Event) RunAtStartOfDay() bool {
	return s.Struct.Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	s.Struct.SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0x9c5dedfd679ac842, s.List)
	return str
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (p Event_Future) Struct() (Event, error) {
	s, err := p.Future.Struct()
	return Event{s}, err
}

func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (p Event_at_Future) Struct() (Event_at, error) {
	s, err := p.Future.Struct()
	return Event_at{s}, err
}

func (p Event_at_Future) Date() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (p Event_between_Future) Struct() (Event_between, error) {
	s, err := p.Future.Struct()
	return Event_between{s}, err
}

func (p Event_between_Future) Earliest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_between_Future) Latest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}

func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (p Event_after_Future) Struct() (Event_after, error) {
	s, err := p.Future.Struct()
	return Event_after{s}, err
}

func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xf082ec2d0eb50c9b

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List struct{ capnp.List }

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Event_ExternalType_List{l.List}, err
}

func (l Event_ExternalType_List) At(i int) Event_ExternalType {
	ul := capnp.UInt16List{List: l.List}
	return Event_ExternalType(ul.At(i))
}

func (l Event_ExternalType_List) Set(i int, v Event_ExternalType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0x8fa09457bc1bfc34

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List struct{ capnp.List }

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Event_PhenoStage_List{l.List}, err
}

func (l Event_PhenoStage_List) At(i int) Event_PhenoStage {
	ul := capnp.UInt16List{List: l.List}
	return Event_PhenoStage(ul.At(i))
}

func (l Event_PhenoStage_List) Set(i int, v Event_PhenoStage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event_Type struct{ capnp.Struct }
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xe1ed73d59c8ce359

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type{st}, err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type{st}, err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type{root.Struct()}, err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xe1ed73d59c8ce359, s.Struct)
	return str
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(s.Struct.Uint16(2))
}
func (s Event_Type) External() Event_ExternalType {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(s.Struct.Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(s.Struct.Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List struct{ capnp.List }

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Event_Type_List{l}, err
}

func (s Event_Type_List) At(i int) Event_Type { return Event_Type{s.List.Struct(i)} }

func (s Event_Type_List) Set(i int, v Event_Type) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_Type_List) String() string {
	str, _ := text.MarshalList(0xe1ed73d59c8ce359, s.List)
	return str
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (p Event_Type_Future) Struct() (Event_Type, error) {
	s, err := p.Future.Struct()
	return Event_Type{s}, err
}

type Params struct{ capnp.Struct }

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0x9d247c812334c917

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params{st}, err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params{st}, err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params{root.Struct()}, err
}

func (s Params) String() string {
	str, _ := text.Marshal(0x9d247c812334c917, s.Struct)
	return str
}

// Params_List is a list of Params.
type Params_List struct{ capnp.List }

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Params_List{l}, err
}

func (s Params_List) At(i int) Params { return Params{s.List.Struct(i)} }

func (s Params_List) Set(i int, v Params) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_List) String() string {
	str, _ := text.MarshalList(0x9d247c812334c917, s.List)
	return str
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (p Params_Future) Struct() (Params, error) {
	s, err := p.Future.Struct()
	return Params{s}, err
}

type Params_Sowing struct{ capnp.Struct }

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0x80ce153f3bc9a9e8

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing{st}, err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing{st}, err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing{root.Struct()}, err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0x80ce153f3bc9a9e8, s.Struct)
	return str
}

func (s Params_Sowing) Cultivar() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Params_Sowing) HasCultivar() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Sowing) CultivarBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Params_Sowing) SetCultivar(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Params_Sowing) PlantDensity() uint16 {
	return s.Struct.Uint16(0)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := s.Struct.Ptr(1)
	return crop.Crop{Client: p.Interface().Client()}
}

func (s Params_Sowing) HasCrop() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List struct{ capnp.List }

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Params_Sowing_List{l}, err
}

func (s Params_Sowing_List) At(i int) Params_Sowing { return Params_Sowing{s.List.Struct(i)} }

func (s Params_Sowing_List) Set(i int, v Params_Sowing) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Sowing_List) String() string {
	str, _ := text.MarshalList(0x80ce153f3bc9a9e8, s.List)
	return str
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (p Params_Sowing_Future) Struct() (Params_Sowing, error) {
	s, err := p.Future.Struct()
	return Params_Sowing{s}, err
}

func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop{Client: p.Future.Field(1, nil).Client()}
}

type Params_AutomaticSowing struct{ capnp.Struct }

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xcfcf44997e7ceab4

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing{st}, err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing{st}, err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing{root.Struct()}, err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xcfcf44997e7ceab4, s.Struct)
	return str
}

func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := s.Struct.Ptr(1)
	return Params_Sowing{Struct: p.Struct()}, err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(s.Struct.Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return s.Struct.Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := s.Struct.Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp{Struct: p.Struct()}, err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(s.Struct.Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List struct{ capnp.List }

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return Params_AutomaticSowing_List{l}, err
}

func (s Params_AutomaticSowing_List) At(i int) Params_AutomaticSowing {
	return Params_AutomaticSowing{s.List.Struct(i)}
}

func (s Params_AutomaticSowing_List) Set(i int, v Params_AutomaticSowing) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticSowing_List) String() string {
	str, _ := text.MarshalList(0xcfcf44997e7ceab4, s.List)
	return str
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (p Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticSowing{s}, err
}

func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}

func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp struct{ capnp.Struct }

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x9d81d2bf4cd0f868

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp{st}, err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp{st}, err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp{root.Struct()}, err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x9d81d2bf4cd0f868, s.Struct)
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return s.Struct.Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List struct{ capnp.List }

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Params_AutomaticSowing_AvgSoilTemp_List{l}, err
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) At(i int) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp{s.List.Struct(i)}
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) Set(i int, v Params_AutomaticSowing_AvgSoilTemp) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) String() string {
	str, _ := text.MarshalList(0x9d81d2bf4cd0f868, s.List)
	return str
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (p Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticSowing_AvgSoilTemp{s}, err
}

type Params_Harvest struct{ capnp.Struct }

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0xeed4e55bb04289ef

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest{st}, err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest{st}, err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest{root.Struct()}, err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0xeed4e55bb04289ef, s.Struct)
	return str
}

func (s Params_Harvest) Exported() bool {
	return !s.Struct.Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	s.Struct.SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Harvest_OptCarbonMgmtData{Struct: p.Struct()}, err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(s.Struct.Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List struct{ capnp.List }

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Harvest_List{l}, err
}

func (s Params_Harvest_List) At(i int) Params_Harvest { return Params_Harvest{s.List.Struct(i)} }

func (s Params_Harvest_List) Set(i int, v Params_Harvest) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Harvest_List) String() string {
	str, _ := text.MarshalList(0xeed4e55bb04289ef, s.List)
	return str
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (p Params_Harvest_Future) Struct() (Params_Harvest, error) {
	s, err := p.Future.Struct()
	return Params_Harvest{s}, err
}

func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0x8f0cbec420589373

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List struct{ capnp.List }

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Harvest_CropUsage_List{l.List}, err
}

func (l Params_Harvest_CropUsage_List) At(i int) Params_Harvest_CropUsage {
	ul := capnp.UInt16List{List: l.List}
	return Params_Harvest_CropUsage(ul.At(i))
}

func (l Params_Harvest_CropUsage_List) Set(i int, v Params_Harvest_CropUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Harvest_OptCarbonMgmtData struct{ capnp.Struct }

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0x8cb6b3e3c50d3665

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData{st}, err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData{st}, err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData{root.Struct()}, err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0x8cb6b3e3c50d3665, s.Struct)
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return s.Struct.Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(s.Struct.Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List struct{ capnp.List }

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return Params_Harvest_OptCarbonMgmtData_List{l}, err
}

func (s Params_Harvest_OptCarbonMgmtData_List) At(i int) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData{s.List.Struct(i)}
}

func (s Params_Harvest_OptCarbonMgmtData_List) Set(i int, v Params_Harvest_OptCarbonMgmtData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Harvest_OptCarbonMgmtData_List) String() string {
	str, _ := text.MarshalList(0x8cb6b3e3c50d3665, s.List)
	return str
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (p Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	s, err := p.Future.Struct()
	return Params_Harvest_OptCarbonMgmtData{s}, err
}

type Params_AutomaticHarvest struct{ capnp.Struct }

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xe3a37e340f816cd1

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest{st}, err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest{st}, err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest{root.Struct()}, err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xe3a37e340f816cd1, s.Struct)
	return str
}

func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Harvest{Struct: p.Struct()}, err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(s.Struct.Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(s.Struct.Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	s.Struct.SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List struct{ capnp.List }

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return Params_AutomaticHarvest_List{l}, err
}

func (s Params_AutomaticHarvest_List) At(i int) Params_AutomaticHarvest {
	return Params_AutomaticHarvest{s.List.Struct(i)}
}

func (s Params_AutomaticHarvest_List) Set(i int, v Params_AutomaticHarvest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticHarvest_List) String() string {
	str, _ := text.MarshalList(0xe3a37e340f816cd1, s.List)
	return str
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (p Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticHarvest{s}, err
}

func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting struct{ capnp.Struct }

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0xfec75f2ddd43431d

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting{st}, err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting{st}, err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting{root.Struct()}, err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0xfec75f2ddd43431d, s.Struct)
	return str
}

func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Cutting_Spec_List{List: p.List()}, err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(s.Struct.Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List struct{ capnp.List }

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Cutting_List{l}, err
}

func (s Params_Cutting_List) At(i int) Params_Cutting { return Params_Cutting{s.List.Struct(i)} }

func (s Params_Cutting_List) Set(i int, v Params_Cutting) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Cutting_List) String() string {
	str, _ := text.MarshalList(0xfec75f2ddd43431d, s.List)
	return str
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (p Params_Cutting_Future) Struct() (Params_Cutting, error) {
	s, err := p.Future.Struct()
	return Params_Cutting{s}, err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0x825bb2508c0b37b2

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List struct{ capnp.List }

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Cutting_CL_List{l.List}, err
}

func (l Params_Cutting_CL_List) At(i int) Params_Cutting_CL {
	ul := capnp.UInt16List{List: l.List}
	return Params_Cutting_CL(ul.At(i))
}

func (l Params_Cutting_CL_List) Set(i int, v Params_Cutting_CL) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0xf0c763e472409ba2

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List struct{ capnp.List }

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Cutting_Unit_List{l.List}, err
}

func (l Params_Cutting_Unit_List) At(i int) Params_Cutting_Unit {
	ul := capnp.UInt16List{List: l.List}
	return Params_Cutting_Unit(ul.At(i))
}

func (l Params_Cutting_Unit_List) Set(i int, v Params_Cutting_Unit) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Cutting_Spec struct{ capnp.Struct }

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0x9a221e04faf79efc

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec{st}, err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec{st}, err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec{root.Struct()}, err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0x9a221e04faf79efc, s.Struct)
	return str
}

func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(s.Struct.Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(s.Struct.Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(s.Struct.Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List struct{ capnp.List }

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Params_Cutting_Spec_List{l}, err
}

func (s Params_Cutting_Spec_List) At(i int) Params_Cutting_Spec {
	return Params_Cutting_Spec{s.List.Struct(i)}
}

func (s Params_Cutting_Spec_List) Set(i int, v Params_Cutting_Spec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Cutting_Spec_List) String() string {
	str, _ := text.MarshalList(0x9a221e04faf79efc, s.List)
	return str
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (p Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	s, err := p.Future.Struct()
	return Params_Cutting_Spec{s}, err
}

type Params_MineralFertilization struct{ capnp.Struct }

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xd3da30ea7b25d921

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization{st}, err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization{st}, err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization{root.Struct()}, err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xd3da30ea7b25d921, s.Struct)
	return str
}

func (s Params_MineralFertilization) Fertilizer() Fertilizer {
	p, _ := s.Struct.Ptr(0)
	return Fertilizer{Client: p.Interface().Client()}
}

func (s Params_MineralFertilization) HasFertilizer() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_MineralFertilization) SetFertilizer(v Fertilizer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List struct{ capnp.List }

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_MineralFertilization_List{l}, err
}

func (s Params_MineralFertilization_List) At(i int) Params_MineralFertilization {
	return Params_MineralFertilization{s.List.Struct(i)}
}

func (s Params_MineralFertilization_List) Set(i int, v Params_MineralFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_MineralFertilization_List) String() string {
	str, _ := text.MarshalList(0xd3da30ea7b25d921, s.List)
	return str
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (p Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	s, err := p.Future.Struct()
	return Params_MineralFertilization{s}, err
}

func (p Params_MineralFertilization_Future) Fertilizer() Fertilizer {
	return Fertilizer{Client: p.Future.Field(0, nil).Client()}
}

type Params_NDemandFertilization struct{ capnp.Struct }

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0x953375ac67d4f573

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization{st}, err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization{st}, err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization{root.Struct()}, err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0x953375ac67d4f573, s.Struct)
	return str
}

func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Fertilizer() Fertilizer {
	p, _ := s.Struct.Ptr(0)
	return Fertilizer{Client: p.Interface().Client()}
}

func (s Params_NDemandFertilization) HasFertilizer() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_NDemandFertilization) SetFertilizer(v Fertilizer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return s.Struct.Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	s.Struct.SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List struct{ capnp.List }

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Params_NDemandFertilization_List{l}, err
}

func (s Params_NDemandFertilization_List) At(i int) Params_NDemandFertilization {
	return Params_NDemandFertilization{s.List.Struct(i)}
}

func (s Params_NDemandFertilization_List) Set(i int, v Params_NDemandFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_NDemandFertilization_List) String() string {
	str, _ := text.MarshalList(0x953375ac67d4f573, s.List)
	return str
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (p Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	s, err := p.Future.Struct()
	return Params_NDemandFertilization{s}, err
}

func (p Params_NDemandFertilization_Future) Fertilizer() Fertilizer {
	return Fertilizer{Client: p.Future.Field(0, nil).Client()}
}

type Params_OrganicFertilization struct{ capnp.Struct }

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xe98c76fb0fb0b2cd

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization{st}, err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization{st}, err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization{root.Struct()}, err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xe98c76fb0fb0b2cd, s.Struct)
	return str
}

func (s Params_OrganicFertilization) Fertilizer() Fertilizer {
	p, _ := s.Struct.Ptr(0)
	return Fertilizer{Client: p.Interface().Client()}
}

func (s Params_OrganicFertilization) HasFertilizer() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_OrganicFertilization) SetFertilizer(v Fertilizer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return s.Struct.Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	s.Struct.SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List struct{ capnp.List }

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Params_OrganicFertilization_List{l}, err
}

func (s Params_OrganicFertilization_List) At(i int) Params_OrganicFertilization {
	return Params_OrganicFertilization{s.List.Struct(i)}
}

func (s Params_OrganicFertilization_List) Set(i int, v Params_OrganicFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_OrganicFertilization_List) String() string {
	str, _ := text.MarshalList(0xe98c76fb0fb0b2cd, s.List)
	return str
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (p Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	s, err := p.Future.Struct()
	return Params_OrganicFertilization{s}, err
}

func (p Params_OrganicFertilization_Future) Fertilizer() Fertilizer {
	return Fertilizer{Client: p.Future.Field(0, nil).Client()}
}

type Params_Tillage struct{ capnp.Struct }

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0x88a5848ef8603554

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage{st}, err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage{st}, err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage{root.Struct()}, err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0x88a5848ef8603554, s.Struct)
	return str
}

func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List struct{ capnp.List }

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Params_Tillage_List{l}, err
}

func (s Params_Tillage_List) At(i int) Params_Tillage { return Params_Tillage{s.List.Struct(i)} }

func (s Params_Tillage_List) Set(i int, v Params_Tillage) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Tillage_List) String() string {
	str, _ := text.MarshalList(0x88a5848ef8603554, s.List)
	return str
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (p Params_Tillage_Future) Struct() (Params_Tillage, error) {
	s, err := p.Future.Struct()
	return Params_Tillage{s}, err
}

type Params_Irrigation struct{ capnp.Struct }

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0x87feb816363ff43c

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation{st}, err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation{st}, err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation{root.Struct()}, err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0x87feb816363ff43c, s.Struct)
	return str
}

func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) NutrientConcentrations() (Nutrient_List, error) {
	p, err := s.Struct.Ptr(0)
	return Nutrient_List{List: p.List()}, err
}

func (s Params_Irrigation) HasNutrientConcentrations() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Irrigation) SetNutrientConcentrations(v Nutrient_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNutrientConcentrations sets the nutrientConcentrations field to a newly
// allocated Nutrient_List, preferring placement in s's segment.
func (s Params_Irrigation) NewNutrientConcentrations(n int32) (Nutrient_List, error) {
	l, err := NewNutrient_List(s.Struct.Segment(), n)
	if err != nil {
		return Nutrient_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List struct{ capnp.List }

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Irrigation_List{l}, err
}

func (s Params_Irrigation_List) At(i int) Params_Irrigation {
	return Params_Irrigation{s.List.Struct(i)}
}

func (s Params_Irrigation_List) Set(i int, v Params_Irrigation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Irrigation_List) String() string {
	str, _ := text.MarshalList(0x87feb816363ff43c, s.List)
	return str
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (p Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	s, err := p.Future.Struct()
	return Params_Irrigation{s}, err
}

type Nutrient struct{ capnp.Struct }

// Nutrient_TypeID is the unique identifier for the type Nutrient.
const Nutrient_TypeID = 0xaafe4332e17aa43e

func NewNutrient(s *capnp.Segment) (Nutrient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Nutrient{st}, err
}

func NewRootNutrient(s *capnp.Segment) (Nutrient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Nutrient{st}, err
}

func ReadRootNutrient(msg *capnp.Message) (Nutrient, error) {
	root, err := msg.Root()
	return Nutrient{root.Struct()}, err
}

func (s Nutrient) String() string {
	str, _ := text.Marshal(0xaafe4332e17aa43e, s.Struct)
	return str
}

func (s Nutrient) Nutrient() Nutrient_Name {
	return Nutrient_Name(s.Struct.Uint16(0))
}

func (s Nutrient) SetNutrient(v Nutrient_Name) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Nutrient) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Nutrient) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Nutrient) Unit() Nutrient_Unit {
	return Nutrient_Unit(s.Struct.Uint16(2))
}

func (s Nutrient) SetUnit(v Nutrient_Unit) {
	s.Struct.SetUint16(2, uint16(v))
}

// Nutrient_List is a list of Nutrient.
type Nutrient_List struct{ capnp.List }

// NewNutrient creates a new list of Nutrient.
func NewNutrient_List(s *capnp.Segment, sz int32) (Nutrient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Nutrient_List{l}, err
}

func (s Nutrient_List) At(i int) Nutrient { return Nutrient{s.List.Struct(i)} }

func (s Nutrient_List) Set(i int, v Nutrient) error { return s.List.SetStruct(i, v.Struct) }

func (s Nutrient_List) String() string {
	str, _ := text.MarshalList(0xaafe4332e17aa43e, s.List)
	return str
}

// Nutrient_Future is a wrapper for a Nutrient promised by a client call.
type Nutrient_Future struct{ *capnp.Future }

func (p Nutrient_Future) Struct() (Nutrient, error) {
	s, err := p.Future.Struct()
	return Nutrient{s}, err
}

type Nutrient_Name uint16

// Nutrient_Name_TypeID is the unique identifier for the type Nutrient_Name.
const Nutrient_Name_TypeID = 0xbc6b579acf43fb6e

// Values of Nutrient_Name.
const (
	Nutrient_Name_urea         Nutrient_Name = 0
	Nutrient_Name_ammonia      Nutrient_Name = 1
	Nutrient_Name_nitrate      Nutrient_Name = 2
	Nutrient_Name_phosphorus   Nutrient_Name = 3
	Nutrient_Name_potassium    Nutrient_Name = 4
	Nutrient_Name_sulfate      Nutrient_Name = 5
	Nutrient_Name_organicC     Nutrient_Name = 6
	Nutrient_Name_organicN     Nutrient_Name = 7
	Nutrient_Name_organicP     Nutrient_Name = 8
	Nutrient_Name_organicNFast Nutrient_Name = 9
	Nutrient_Name_organicNSlow Nutrient_Name = 10
)

// String returns the enum's constant name.
func (c Nutrient_Name) String() string {
	switch c {
	case Nutrient_Name_urea:
		return "urea"
	case Nutrient_Name_ammonia:
		return "ammonia"
	case Nutrient_Name_nitrate:
		return "nitrate"
	case Nutrient_Name_phosphorus:
		return "phosphorus"
	case Nutrient_Name_potassium:
		return "potassium"
	case Nutrient_Name_sulfate:
		return "sulfate"
	case Nutrient_Name_organicC:
		return "organicC"
	case Nutrient_Name_organicN:
		return "organicN"
	case Nutrient_Name_organicP:
		return "organicP"
	case Nutrient_Name_organicNFast:
		return "organicNFast"
	case Nutrient_Name_organicNSlow:
		return "organicNSlow"

	default:
		return ""
	}
}

// Nutrient_NameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Nutrient_NameFromString(c string) Nutrient_Name {
	switch c {
	case "urea":
		return Nutrient_Name_urea
	case "ammonia":
		return Nutrient_Name_ammonia
	case "nitrate":
		return Nutrient_Name_nitrate
	case "phosphorus":
		return Nutrient_Name_phosphorus
	case "potassium":
		return Nutrient_Name_potassium
	case "sulfate":
		return Nutrient_Name_sulfate
	case "organicC":
		return Nutrient_Name_organicC
	case "organicN":
		return Nutrient_Name_organicN
	case "organicP":
		return Nutrient_Name_organicP
	case "organicNFast":
		return Nutrient_Name_organicNFast
	case "organicNSlow":
		return Nutrient_Name_organicNSlow

	default:
		return 0
	}
}

type Nutrient_Name_List struct{ capnp.List }

func NewNutrient_Name_List(s *capnp.Segment, sz int32) (Nutrient_Name_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Nutrient_Name_List{l.List}, err
}

func (l Nutrient_Name_List) At(i int) Nutrient_Name {
	ul := capnp.UInt16List{List: l.List}
	return Nutrient_Name(ul.At(i))
}

func (l Nutrient_Name_List) Set(i int, v Nutrient_Name) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Nutrient_Unit uint16

// Nutrient_Unit_TypeID is the unique identifier for the type Nutrient_Unit.
const Nutrient_Unit_TypeID = 0x987b68b57edbbdb6

// Values of Nutrient_Unit.
const (
	Nutrient_Unit_none     Nutrient_Unit = 0
	Nutrient_Unit_fraction Nutrient_Unit = 1
	Nutrient_Unit_percent  Nutrient_Unit = 2
)

// String returns the enum's constant name.
func (c Nutrient_Unit) String() string {
	switch c {
	case Nutrient_Unit_none:
		return "none"
	case Nutrient_Unit_fraction:
		return "fraction"
	case Nutrient_Unit_percent:
		return "percent"

	default:
		return ""
	}
}

// Nutrient_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Nutrient_UnitFromString(c string) Nutrient_Unit {
	switch c {
	case "none":
		return Nutrient_Unit_none
	case "fraction":
		return Nutrient_Unit_fraction
	case "percent":
		return Nutrient_Unit_percent

	default:
		return 0
	}
}

type Nutrient_Unit_List struct{ capnp.List }

func NewNutrient_Unit_List(s *capnp.Segment, sz int32) (Nutrient_Unit_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Nutrient_Unit_List{l.List}, err
}

func (l Nutrient_Unit_List) At(i int) Nutrient_Unit {
	ul := capnp.UInt16List{List: l.List}
	return Nutrient_Unit(ul.At(i))
}

func (l Nutrient_Unit_List) Set(i int, v Nutrient_Unit) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Fertilizer struct{ Client *capnp.Client }

// Fertilizer_TypeID is the unique identifier for the type Fertilizer.
const Fertilizer_TypeID = 0x8c4cb8d60ae5aec7

func (c Fertilizer) Nutrients(ctx context.Context, params func(Fertilizer_nutrients_Params) error) (Fertilizer_nutrients_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      0,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "nutrients",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Fertilizer_nutrients_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Fertilizer_nutrients_Results_Future{Future: ans.Future()}, release
}
func (c Fertilizer) Parameters(ctx context.Context, params func(Fertilizer_parameters_Params) error) (Fertilizer_parameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      1,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "parameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Fertilizer_parameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Fertilizer_parameters_Results_Future{Future: ans.Future()}, release
}
func (c Fertilizer) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Fertilizer) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Fertilizer) AddRef() Fertilizer {
	return Fertilizer{
		Client: c.Client.AddRef(),
	}
}

func (c Fertilizer) Release() {
	c.Client.Release()
}

// A Fertilizer_Server is a Fertilizer with a local implementation.
type Fertilizer_Server interface {
	Nutrients(context.Context, Fertilizer_nutrients) error

	Parameters(context.Context, Fertilizer_parameters) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Fertilizer_NewServer creates a new Server from an implementation of Fertilizer_Server.
func Fertilizer_NewServer(s Fertilizer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Fertilizer_Methods(nil, s), s, c, policy)
}

// Fertilizer_ServerToClient creates a new Client from an implementation of Fertilizer_Server.
// The caller is responsible for calling Release on the returned Client.
func Fertilizer_ServerToClient(s Fertilizer_Server, policy *server.Policy) Fertilizer {
	return Fertilizer{Client: capnp.NewClient(Fertilizer_NewServer(s, policy))}
}

// Fertilizer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Fertilizer_Methods(methods []server.Method, s Fertilizer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      0,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "nutrients",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Nutrients(ctx, Fertilizer_nutrients{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      1,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "parameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Parameters(ctx, Fertilizer_parameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Fertilizer_nutrients holds the state for a server call to Fertilizer.nutrients.
// See server.Call for documentation.
type Fertilizer_nutrients struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Fertilizer_nutrients) Args() Fertilizer_nutrients_Params {
	return Fertilizer_nutrients_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Fertilizer_nutrients) AllocResults() (Fertilizer_nutrients_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_nutrients_Results{Struct: r}, err
}

// Fertilizer_parameters holds the state for a server call to Fertilizer.parameters.
// See server.Call for documentation.
type Fertilizer_parameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Fertilizer_parameters) Args() Fertilizer_parameters_Params {
	return Fertilizer_parameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Fertilizer_parameters) AllocResults() (Fertilizer_parameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_parameters_Results{Struct: r}, err
}

type Fertilizer_nutrients_Params struct{ capnp.Struct }

// Fertilizer_nutrients_Params_TypeID is the unique identifier for the type Fertilizer_nutrients_Params.
const Fertilizer_nutrients_Params_TypeID = 0xcb5a624fdc982a1b

func NewFertilizer_nutrients_Params(s *capnp.Segment) (Fertilizer_nutrients_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_nutrients_Params{st}, err
}

func NewRootFertilizer_nutrients_Params(s *capnp.Segment) (Fertilizer_nutrients_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_nutrients_Params{st}, err
}

func ReadRootFertilizer_nutrients_Params(msg *capnp.Message) (Fertilizer_nutrients_Params, error) {
	root, err := msg.Root()
	return Fertilizer_nutrients_Params{root.Struct()}, err
}

func (s Fertilizer_nutrients_Params) String() string {
	str, _ := text.Marshal(0xcb5a624fdc982a1b, s.Struct)
	return str
}

// Fertilizer_nutrients_Params_List is a list of Fertilizer_nutrients_Params.
type Fertilizer_nutrients_Params_List struct{ capnp.List }

// NewFertilizer_nutrients_Params creates a new list of Fertilizer_nutrients_Params.
func NewFertilizer_nutrients_Params_List(s *capnp.Segment, sz int32) (Fertilizer_nutrients_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Fertilizer_nutrients_Params_List{l}, err
}

func (s Fertilizer_nutrients_Params_List) At(i int) Fertilizer_nutrients_Params {
	return Fertilizer_nutrients_Params{s.List.Struct(i)}
}

func (s Fertilizer_nutrients_Params_List) Set(i int, v Fertilizer_nutrients_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_nutrients_Params_List) String() string {
	str, _ := text.MarshalList(0xcb5a624fdc982a1b, s.List)
	return str
}

// Fertilizer_nutrients_Params_Future is a wrapper for a Fertilizer_nutrients_Params promised by a client call.
type Fertilizer_nutrients_Params_Future struct{ *capnp.Future }

func (p Fertilizer_nutrients_Params_Future) Struct() (Fertilizer_nutrients_Params, error) {
	s, err := p.Future.Struct()
	return Fertilizer_nutrients_Params{s}, err
}

type Fertilizer_nutrients_Results struct{ capnp.Struct }

// Fertilizer_nutrients_Results_TypeID is the unique identifier for the type Fertilizer_nutrients_Results.
const Fertilizer_nutrients_Results_TypeID = 0xae2976259bce5460

func NewFertilizer_nutrients_Results(s *capnp.Segment) (Fertilizer_nutrients_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_nutrients_Results{st}, err
}

func NewRootFertilizer_nutrients_Results(s *capnp.Segment) (Fertilizer_nutrients_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_nutrients_Results{st}, err
}

func ReadRootFertilizer_nutrients_Results(msg *capnp.Message) (Fertilizer_nutrients_Results, error) {
	root, err := msg.Root()
	return Fertilizer_nutrients_Results{root.Struct()}, err
}

func (s Fertilizer_nutrients_Results) String() string {
	str, _ := text.Marshal(0xae2976259bce5460, s.Struct)
	return str
}

func (s Fertilizer_nutrients_Results) Nutrients() (Nutrient_List, error) {
	p, err := s.Struct.Ptr(0)
	return Nutrient_List{List: p.List()}, err
}

func (s Fertilizer_nutrients_Results) HasNutrients() bool {
	return s.Struct.HasPtr(0)
}

func (s Fertilizer_nutrients_Results) SetNutrients(v Nutrient_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNutrients sets the nutrients field to a newly
// allocated Nutrient_List, preferring placement in s's segment.
func (s Fertilizer_nutrients_Results) NewNutrients(n int32) (Nutrient_List, error) {
	l, err := NewNutrient_List(s.Struct.Segment(), n)
	if err != nil {
		return Nutrient_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Fertilizer_nutrients_Results_List is a list of Fertilizer_nutrients_Results.
type Fertilizer_nutrients_Results_List struct{ capnp.List }

// NewFertilizer_nutrients_Results creates a new list of Fertilizer_nutrients_Results.
func NewFertilizer_nutrients_Results_List(s *capnp.Segment, sz int32) (Fertilizer_nutrients_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Fertilizer_nutrients_Results_List{l}, err
}

func (s Fertilizer_nutrients_Results_List) At(i int) Fertilizer_nutrients_Results {
	return Fertilizer_nutrients_Results{s.List.Struct(i)}
}

func (s Fertilizer_nutrients_Results_List) Set(i int, v Fertilizer_nutrients_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_nutrients_Results_List) String() string {
	str, _ := text.MarshalList(0xae2976259bce5460, s.List)
	return str
}

// Fertilizer_nutrients_Results_Future is a wrapper for a Fertilizer_nutrients_Results promised by a client call.
type Fertilizer_nutrients_Results_Future struct{ *capnp.Future }

func (p Fertilizer_nutrients_Results_Future) Struct() (Fertilizer_nutrients_Results, error) {
	s, err := p.Future.Struct()
	return Fertilizer_nutrients_Results{s}, err
}

type Fertilizer_parameters_Params struct{ capnp.Struct }

// Fertilizer_parameters_Params_TypeID is the unique identifier for the type Fertilizer_parameters_Params.
const Fertilizer_parameters_Params_TypeID = 0xc0032af5b7bc50e4

func NewFertilizer_parameters_Params(s *capnp.Segment) (Fertilizer_parameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_parameters_Params{st}, err
}

func NewRootFertilizer_parameters_Params(s *capnp.Segment) (Fertilizer_parameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_parameters_Params{st}, err
}

func ReadRootFertilizer_parameters_Params(msg *capnp.Message) (Fertilizer_parameters_Params, error) {
	root, err := msg.Root()
	return Fertilizer_parameters_Params{root.Struct()}, err
}

func (s Fertilizer_parameters_Params) String() string {
	str, _ := text.Marshal(0xc0032af5b7bc50e4, s.Struct)
	return str
}

// Fertilizer_parameters_Params_List is a list of Fertilizer_parameters_Params.
type Fertilizer_parameters_Params_List struct{ capnp.List }

// NewFertilizer_parameters_Params creates a new list of Fertilizer_parameters_Params.
func NewFertilizer_parameters_Params_List(s *capnp.Segment, sz int32) (Fertilizer_parameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Fertilizer_parameters_Params_List{l}, err
}

func (s Fertilizer_parameters_Params_List) At(i int) Fertilizer_parameters_Params {
	return Fertilizer_parameters_Params{s.List.Struct(i)}
}

func (s Fertilizer_parameters_Params_List) Set(i int, v Fertilizer_parameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_parameters_Params_List) String() string {
	str, _ := text.MarshalList(0xc0032af5b7bc50e4, s.List)
	return str
}

// Fertilizer_parameters_Params_Future is a wrapper for a Fertilizer_parameters_Params promised by a client call.
type Fertilizer_parameters_Params_Future struct{ *capnp.Future }

func (p Fertilizer_parameters_Params_Future) Struct() (Fertilizer_parameters_Params, error) {
	s, err := p.Future.Struct()
	return Fertilizer_parameters_Params{s}, err
}

type Fertilizer_parameters_Results struct{ capnp.Struct }

// Fertilizer_parameters_Results_TypeID is the unique identifier for the type Fertilizer_parameters_Results.
const Fertilizer_parameters_Results_TypeID = 0xfd4dbbbb758bb8f7

func NewFertilizer_parameters_Results(s *capnp.Segment) (Fertilizer_parameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_parameters_Results{st}, err
}

func NewRootFertilizer_parameters_Results(s *capnp.Segment) (Fertilizer_parameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_parameters_Results{st}, err
}

func ReadRootFertilizer_parameters_Results(msg *capnp.Message) (Fertilizer_parameters_Results, error) {
	root, err := msg.Root()
	return Fertilizer_parameters_Results{root.Struct()}, err
}

func (s Fertilizer_parameters_Results) String() string {
	str, _ := text.Marshal(0xfd4dbbbb758bb8f7, s.Struct)
	return str
}

func (s Fertilizer_parameters_Results) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Fertilizer_parameters_Results) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Fertilizer_parameters_Results) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Fertilizer_parameters_Results_List is a list of Fertilizer_parameters_Results.
type Fertilizer_parameters_Results_List struct{ capnp.List }

// NewFertilizer_parameters_Results creates a new list of Fertilizer_parameters_Results.
func NewFertilizer_parameters_Results_List(s *capnp.Segment, sz int32) (Fertilizer_parameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Fertilizer_parameters_Results_List{l}, err
}

func (s Fertilizer_parameters_Results_List) At(i int) Fertilizer_parameters_Results {
	return Fertilizer_parameters_Results{s.List.Struct(i)}
}

func (s Fertilizer_parameters_Results_List) Set(i int, v Fertilizer_parameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_parameters_Results_List) String() string {
	str, _ := text.MarshalList(0xfd4dbbbb758bb8f7, s.List)
	return str
}

// Fertilizer_parameters_Results_Future is a wrapper for a Fertilizer_parameters_Results promised by a client call.
type Fertilizer_parameters_Results_Future struct{ *capnp.Future }

func (p Fertilizer_parameters_Results_Future) Struct() (Fertilizer_parameters_Results, error) {
	s, err := p.Future.Struct()
	return Fertilizer_parameters_Results{s}, err
}

func (p Fertilizer_parameters_Results_Future) Params() *capnp.Future {
	return p.Future.Field(0, nil)
}

type FertilizerService struct{ Client *capnp.Client }

// FertilizerService_TypeID is the unique identifier for the type FertilizerService.
const FertilizerService_TypeID = 0xbbb7aeae0d097e05

func (c FertilizerService) SupportedCategories(ctx context.Context, params func(registry.Registry_supportedCategories_Params) error) (registry.Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) CategoryInfo(ctx context.Context, params func(registry.Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c FertilizerService) Entries(ctx context.Context, params func(registry.Registry_entries_Params) error) (registry.Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c FertilizerService) AddRef() FertilizerService {
	return FertilizerService{
		Client: c.Client.AddRef(),
	}
}

func (c FertilizerService) Release() {
	c.Client.Release()
}

// A FertilizerService_Server is a FertilizerService with a local implementation.
type FertilizerService_Server interface {
	SupportedCategories(context.Context, registry.Registry_supportedCategories) error

	CategoryInfo(context.Context, registry.Registry_categoryInfo) error

	Entries(context.Context, registry.Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// FertilizerService_NewServer creates a new Server from an implementation of FertilizerService_Server.
func FertilizerService_NewServer(s FertilizerService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(FertilizerService_Methods(nil, s), s, c, policy)
}

// FertilizerService_ServerToClient creates a new Client from an implementation of FertilizerService_Server.
// The caller is responsible for calling Release on the returned Client.
func FertilizerService_ServerToClient(s FertilizerService_Server, policy *server.Policy) FertilizerService {
	return FertilizerService{Client: capnp.NewClient(FertilizerService_NewServer(s, policy))}
}

// FertilizerService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func FertilizerService_Methods(methods []server.Method, s FertilizerService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, registry.Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, registry.Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, registry.Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xc876b729b7d7f6d9

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{Struct: r}, err
}

type Service_managementAt_Results struct{ capnp.Struct }

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xcca7748d367db151

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{st}, err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{st}, err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results{root.Struct()}, err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xcca7748d367db151, s.Struct)
	return str
}

func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := s.Struct.Ptr(0)
	return Event_List{List: p.List()}, err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List struct{ capnp.List }

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_managementAt_Results_List{l}, err
}

func (s Service_managementAt_Results_List) At(i int) Service_managementAt_Results {
	return Service_managementAt_Results{s.List.Struct(i)}
}

func (s Service_managementAt_Results_List) Set(i int, v Service_managementAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_managementAt_Results_List) String() string {
	str, _ := text.MarshalList(0xcca7748d367db151, s.List)
	return str
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (p Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_managementAt_Results{s}, err
}

const schema_b30a3af53cea6b3e = "x\xda\xccY}p\x15U\x96?\xa7\xfb=\x1e\xc1\x84" +
	"\xce\xb5\x83I\x18\xf0\x05\x17K\x92\xd2,\x10\xd6\x0fV" +
	"'\xe4\x8b%Y\x02\xe9\xbc\xb0\x08J-\x9d\x97\x9b\x97" +
	"\xc6\xf7\xba\x1f\xdd\xfd\x02\xf1\x83\x0c\x94\xb3#,\xac5" +
	"\xae\x94\xa2\xce\x963\x0e\xe5J\xb9\x8e\xc3\x8c#*\xec" +
	"\xc8\x14\xae\x1f\xe88\xa8\xec\xac\xee\xccV\xa1\xb2;c" +
	"\x8d\xbbc\xd5\xba**\xbdun\xbf\xd7\xddyI\xd4" +
	"\xf9gk\xf9\x87\x97\xd3\xa7\xef=\xf7\xdcs~\xe7w" +
	"N/\xae\x9c\xb5BZ\x12\xff\xe5\\\x80\xd4\xd5\x18\x9f" +
	"\xe1\xfd\xe6\x91\x17\xff\xb4u\xce\xcf\xbf\x01Z\x1d\xa2W" +
	"\xfb\xe2\xb2?\xday\xeb\xc2\xef@\\J\x00\xa8Z\xd5" +
	"9uS\x15\xfd\xdaP\xf5\x03@\xef\xf0U\x17\xec\xed" +
	";|\xc3.`\x0d\x927\xbf\xa3\xe3\xd7W\xfc\xe5\xf3" +
	"\xe7\x01\xb0\xe5\x93\xaa\xb9\xa8V\xcc&\xcd\xf8\xec\xab\x00" +
	"\xbd\x87\xb6\xdeP\xbb\xbf\xeb\xe1]\xc0\x98\xe4}\xfd\xa6" +
	"\xf7\xae\xfdp\xf9\xac\x1f\x01\x90\xd2[\xea\x1cRla" +
	"\xb3/C@\xef\xda\xffn\xbd\xf2\xa2#\xe7\xbfUn" +
	"\x00\x92\xce\xd9\xd9sQ\xfdP\xac\xfb\xc1\xecm\x80\xde" +
	"\xc0\x9fl\xfe\xf8on?xG\x99v\x8c\x94\xb9\"" +
	"\xa1\xbaU!\xe5\x9c\xd2\x0a\xe8=\xff\xd8\xd9Y\xff|" +
	"d\xf5^`L\x9e`\xc4>\xe5m\xf5\x80P\xdc\xaf" +
	"|K}_\xb9\x0c\xc0\xe3WV=\xf7\xce\x8f~\xb2" +
	"\x17\xb4\x06\x8c{\xff\xb5\xbb\xfd\xf1\x1b\xce\xbe\xf1\x9f\xfe" +
	"\xcag\x95\xbbP\xfd\x9c^h\xf9DYOV;\x7f" +
	"{}\xc3\x89\x7f\xac\xbcSx\"P\x06l)\xb0~" +
	"Tw3Z\xfb\x9b\x8c<\xb1\xec\xb3\xaf\x1d]\x7f\xf7" +
	"\x83w\x02\xab\x95\xbc\xf6\x17\xee\xcb|\xfe\xfe\xa6\x07H" +
	"s?\xbb\x10\xd5\x83B\xf3\xbb,Ck~\xf8F\xe6" +
	"\xd1B\xcb~:\x9b\\\xee\x89\xd3l\x0b\xaa\xbf\x15\xda" +
	"g\xd9\x7f\x00z\x8f\x9c~\xbe\xe7\xcc\x91k\xf6\x83V" +
	"\x8b\x18.<'\x96@\x00\xf5\xd8\x85\xe7\x00\xd5\xe3\x17" +
	"\x92\xcf~r\xec_w<1r\xcb\xbd\xc0\xe6J\xde" +
	"\xd7\xbf\x7f\xf3\x99\xa5\x1d\xe7\x0f\x91\x1b\x16\xa8\xe7\xd4+" +
	"TZ\xb2Q]\x0b\xe8}\xf6w\x1f\x9d\x8b]|\xc9" +
	"}\xe4\x029\xbc_\xe1\x826\xb5\x09U\x8d\x94[z" +
	"\xd5$\xb9 \xd8Rc\x88\xa1{\xbbb\x09\x19Q5" +
	"j\x9eV\xb7\xd6\\\x05\xd0r\xa0\xe6NR\x0f\xce\xc3" +
	"XD\x9b\xd6VO\xcd\xf9\x99\xfa\xe6\x9c\x87A\xf6F" +
	">\xfe\xc5\xea\x9f\xbe\xb6\xf3;\xa0-B\xd9\xfb\xf1{" +
	"\xb7\xee8\xd0\xf9\xea\xab\xbe\x05\xeb.\xfa\x1e\xaa\xb9\x8b" +
	"\xe8\x05\xe3\"\x8a\xc6\xe0(\x1aC\xa9l\xc9\xf9\xb5\xaf" +
	"\xa9\x8d\xb5\x97\x01\xa8\xd7\xd5\x92\xee\xe6\x81\x9f\xdf\x7f\xe9" +
	"h\xe3c\xc0\xe6!\x14]\xfaf\xad\x8d\x80\xea\xd9Z" +
	"\x8a\x95\xf8\x8e\x8a\xaa\xc7\x1e{\xf2\x99\xf2Xi\xa9\xaf" +
	"\x9b\x8bjc\x1d-zi]B\xbd\xb4\xae\x16\xc03" +
	"?\xedx\xf5\xbe\xf57\x1d\x9d\xe4\xd29u\xe7\xd4\x05" +
	"\xa4\xdc2\xbfN\xa1c\xbf\xdbw\xf4\xc9\x0f\x9b\xe4g" +
	"\xfd\x8d\xc5A^\xa9\xb3\x11b\xde\xbf\xb5_w\xa4\xa6" +
	"\xe2\xf4\xcf&\xa5\xc8Suo\xab\xcf\x89\x0d\x8f\xd7\xdd" +
	"\x03\xe8\xb1\xab?\x9e\xf5T\xf5_=7\xf5M\xc7\xeb" +
	"\xdf\xa3\xb4\xaa\xa7\x9b\xfe\xe3\xcb\xbev6y\xe0\xc4?" +
	"M\xad\xc9\xeb_\x03T\x8dz:\xee\x9b\xff\xf3\xcb'" +
	"\x1b\x9f\x1c}aRj\xec\xae\x7fI\xdd_O\x9b\x7f" +
	"\xbb\xfe\xcf\xd4c\xf5t\xda\xaf5\xdd\xfb\xab\xb5\x83\x1b" +
	"OF\xce\xf0\x0f\xf5[\xe8\x0c\xda\x0fo\xbbr\x9f\xfb" +
	"\xf0\xcb\xc0\xea\x03\xb7\x1e\xa8\x17n=(\xf6\x09\xaeP" +
	"\xab\xc3\x99e\xf0\xd2r\xba\xbe\x1d\xd5\xb3\xb4E\xcb\x07" +
	"\xf5WI\x80\xde\x827/\xbd\xe5\xbd\xc5o\xbd>%" +
	"\x18\xf0y[P\x1d\x9bG\xb6\x15\xe6\xd1q7\xbc\xb3" +
	"\xf7\x81\xd3\xce\xfbg\xca\x8e\xdb\x99\x90\x10\xd5\xd3\xf3\xde" +
	"V\xcf\x08\xe5_\x0b\xe5S\xd9\x9d\xca\xb2\x1d\x0f\xbdC" +
	"K\xc7\xcb\x97n\x9b\xdf\x83\xea\xba\xf9\xf4S\x9b/\x12" +
	"\xfc\x95\xc3\x8f+\x9f\x8e\xee\xfd-\xa9K\xe5\xeaO]" +
	"\xbc\x05\xd5W.\xa6\xc5_\xbc\x98\xc2+@\x80\xa9\xec" +
	"6\x92\x12\xaa\x85$\x05\xe3\xfe$\x99r\x7f\xe5\x13\xb3" +
	"\xaf\xf8\xdd\xae\xdfO\x82\x84O\x92\x97\xa0Z\xd1 `" +
	"\xb4\xe1#@\xef{\xf7\xaf\xb0\xdfM?\xff\xfbI\x80" +
	"\xfb\xc3\x86&T\x8f\x0b\xcdc\x0d\x94\xbb\x1f\x1d\xf9\xeb" +
	"\xc23\xcf\xf4~\x1e\x0d\xf0\xd3\x0d7\xd3M\x9ci\xa0" +
	"\x9b\x08\xde\x9e\xcaD\\ \xa1Z\xb5\xe0*\x00\xf5\x8a" +
	"\x05\xdb\xc0\x83\x13^N7\xf5\x0c\xcfq\xc9t\x9b\xd3" +
	"z\xde\xcc/\xef\xd3m=\xe74\xb7\xa6\xacm\x86\x99" +
	"\xe9C\xd4*\xe5\x18@\x0c\x01XW\x0f\x80\xd6)\xa3" +
	"\xd6'!b\x0d\"\"\xeb\xdd\x02\xa0\xad\x96Q\xbb^" +
	"B&a\x0dJ\x00l]\x13\x80\xd6'\xa3v\xa3\x84" +
	"^\xba\x90u\x8dQ\xdd\x06\x00\xac\x04\x09+\x01\xbd|" +
	"V7\xddNn\x82\xe2\x18\xee\x18&@\xc2\x04\xa0\x92" +
	"\xb6\xad<2\xef\xf6\x1b\x7f\xba\xf0\xa1{\xf6\xfd\x06\x00" +
	"\x91\x01\x06V\xca\xe5Vv\x14\\\xd703\xcdr\xc7" +
	"j\xb2t\xa6\xd8\x9c]\"\xde\xabh\x02H\xa4\x0b\xae" +
	"\x92\xe5\xc3\xee\x14\x07\xed\x1a\xe5\xa6;0&\xe79\xbd" +
	"\xbaX\xbc\xba{\xb9xu\xe7.\x00\x94\xd8m\xed\x00" +
	"(\xb3\xc2\x1e\x00\x8c\xb1\xc2F\x00\x8c\xb3\xad$\x9c\xc1" +
	"\x0c\x02\x82\x84\xff\xdfL\xff\xbf\x0af\xd0\xb3YL\xef" +
	"\x01\xc0\x0b\xd8\xa6~\x80VG\xb8\xd1\xd3\x0b\xae\x95\xd3" +
	"]#\x96\xf6\xfd\x0a#\xba=\xca\x1d\x17J\x0f\xd2\xab" +
	"\x8a\x02\xf0\x0c\xdb62\xbak\x80l\x99\xe3\xae\x91\xcd" +
	"\xea\x19\xeeYvF7\x8d\xf4J\xe4\xb6kd\x8d\x9b" +
	"u\xc55,\xd3\xcb\x19&\xb7\xf5l\xb9\xd8\xec\xe49" +
	"\xdd\x1c*\x13\x8f\xa7}wy\x0ew\xffB\xcf\x168" +
	"\x00x\x8e>\xcaS\xae\xee\x02\xf2\xe9\xfd\xdc]4I" +
	"\xb6L\xe1\xe7 \"\x1a\x97\x03h\x0be\xd4\x16\x17#" +
	"\x02\x80]\xf14\x80\xb6XFm\xb5\x84\xadz\xce*" +
	"\x98.^\x00\x12^\x00\xe8\x99\x05\xd76\xb8\xe9b\x87" +
	"e\xa6\xb9\xe9\xda\xad:Y\xe6\xe0l\xc0>\x19\xb1:" +
	"\x8a\xb3$\x9c\xde\xa6\x01\xdf3@\x06\xc5|\x83\x10Y" +
	"\xd5R\x00m\xa6\x8cZ\x8d\x84\xc9!\x9ewG\xfc\xbd" +
	"\xbd\x16\xf1\xef\xf5V:\xf3\xe4`X\xe9;*q3" +
	"\xb7\xfd\x03\xc6#\x88\x88\xa5\xba\xc2\x96\xf4\x83\xc4\x1a\x13" +
	"\x18\">\x96R\x92\xcd\xdf\x08\x12\x9b\x93\x08\x8e\x08\xe8" +
	"\xac@/O\xc6r\x97\x83l;+(B\xd1;\xbd" +
	"\xea\x81\x0d'O\xfd\xe00Y\xc2O^\xf9\xab\x07\xdf" +
	"z\xf8x\xd4\xaax\xf9I\x8b\xa1\xd1\xbc6\xefv\xe8" +
	"\xf6\xa0e\xf6frn\xa7\xee\xa2N\xb6\xd6\x05g?" +
	"p\x18@{@F\xed\xef%d\xa5\xfc<\xf8\x12\x80" +
	"\xf6\xa8\x8c\xda\x91R~\"\xb2'\xfa\x01\xb4\x1f\xcb\xa8" +
	"=+!\x93\xa5\x1a\x94\x11\xd9\xb1\x8d\x00\xdaQ\x19\xb5" +
	"\x17$d1\xb9\x06c\x88\xec\xb9C\x00\xda\x0b2j" +
	"oH\xc8\xe2\xb1\x1a\x8c#\xb2S\xaf\x01h\xff\"\xa3" +
	"\xf6\xae\x84\x9eU\xb4\x0a\xcd\x0e\xcbt\xb8=\x9a\x14W" +
	"\x8a\x08\x12\x12\xc6RNw\xe7\xf2\xba\x94v\xd7\x9a\xab" +
	"\x0a\xb9\x82\xd3\xaegu3\xcd)I\x8aaA:\xeb" +
	"\x1c=\x03\xc8Q\x09i\x17`\\\x94W\x9b;\xc6P" +
	"\x81\xaf\x02\x99o\x0d\xde)\xcf\x08\xae\xd8\xab\"\x8fs" +
	"\xfa\xf6~zM*\xf0~\x9e\xb6F\xb9\xbd\xd2\xd6\xd3" +
	"\xaea\xa1\x19\xd1\xf1=\x1e\x9b\xce\xe3\x1dE\xbb\x90G" +
	"\xe0eP`D\xd5]\x00^\xc6\xe6\xdc\xec\xd5MH" +
	"\x14l\xee\x0d\x1aVNw\x9c>\xb4\xad\xa1\x82\xbf\xd5" +
	"\x14\xe1+p\xa7\xb9o\x84\x9bV\xca--]-\x96" +
	"n\xec\x17K_\xda/\xe0gA\x8f\x80\x9f\xf9=\x14" +
	"'9ng\xb8\x99\xa6,\x1d\xceZ\xdb\xb8m\x98\x80" +
	"\x19O7\xdd\x11\xee\x18\x8e\x1f?n\xc16\xdc\xb1h" +
	",M:\xd9\x9a\"2L\x00\x06aA\x90\xd3z;" +
	"\x80v\xa3\x8c\xdaH\x98\xd3\x9cbcHF-\x1fA" +
	"\xf9\x1c\xe5\xda\x88\x8c\x9aKQT\xedG\xd1V\x12f" +
	"e\xd4\xb6K8^\xc4\xa1\xc0\xe1\xc3\xc5mA\xe66" +
	"\xb2\x90\xba\xfb8\x1f\xcdW\xc0\xa4\xe3\xea\x19\x8e3@" +
	"\x8a\xcf\xc0\xc8e\x95!x\xf3`+w\xb7qn\x12" +
	"*Uc\x0d\xca\xe4H*T\x8bd\xd4\x96Q&H" +
	"5\x18\x03`K\x08\xab.\x97Q\xbbZB\x8f\xebv" +
	"\xd6\x10x\x0bX\xed\xedc\x97\xc8\x8f\x9e\xff\xf7{\xc8" +
	"\x90j\xc0\xd6\xac\xeer\xc7\x9d\xfc`\x0a#\xd6\xf8\xe9" +
	"\xde\xea6\xaf3\x0dW\xd4K\xe1\x9c\xf9M\xe2Ts" +
	"z\xc4]\xb2v\x00\xc5\xb4L\xee\x0d\xfbQh\x02\xc0" +
	"x\x9e\xdb\x04\x82_^\xdf\x94T\x9e\xa7i\xed\x9a\xe0" +
	"\x96n#?o\x97Q\xbb\xbd\x94\xec\x00l'\x09o" +
	"\x95Q\xbb#\x92\xec\xdf\xa4b\xfc\x0d\x19\xb5\xbd\x91d" +
	"\xdfM\x08p\x87\x8c\xda\xdd\x94\xec\x92\x9f\xec\xdf\xde\x03" +
	"\xa0\xdd-\xa3\xf6\xa0\x84I\x91_\xa8\x84\x0c\x16\x10\x15" +
	"\xc0\xe4(U\x8e\xd2%)\x05\xd3pQ\x09)\x8c\xaf" +
	"\xe4\xa5\x0b\xeeZ{5\x1f\x06\xa4\xa7AGY|\xca" +
	"\xb7\xe7-\xdb\xed\xe3(\x8eO ^\x84\x82g7\xac" +
	"\x88\x04/\x96\xdc\xd1\xea_\xb5V\x89QZ\xc5\xb6D" +
	"\xda.\xb61$\x8a\x8c5y]\xdb]n\x9bz\x16" +
	"\x94\x81\xb1<\xf7J\xe9\x06r\x86\x0b\x896/\xf0\xe4" +
	"\x13\xe4\x9f\xc7e\xd4\x8e\x86\xf1\xfeTS\x08\x90U\x92" +
	"\xe7a\x84v\xb3csA\xaa\x92\xcf\x930\xe8\xcf\xd8" +
	"\xc1v\x90\xaab\x9f\x930\xa0\xf2l\xdfR\x90X\\" +
	"\xae!\xfa\xc5\x0a\x14\x7fy\x19\xb5[%d3\x16\xd7" +
	"\xe0L\x006\xb6+\xbcF\xc5\x1d\xcb\x13\xfe\x05G\xf4" +
	"\xdd\xa5\x18\xe6\xb0\x85\xd5\xde\xebo\xc9\xe7O\xee8\xf9" +
	"F1\x16e\xdd\x1d\x1f\xf4C?\xa9\x0f\xbb\xdcn\x15" +
	"\xb5\xc6\xc1\x0bA\xc2\x0b\x095\x0bf\x9b\x9bru\xb4" +
	"\xdd\xb5\xc3\x9d\xfa\x18\x04\x90<\x1d\xeb\xa3\x86\x0c\xc3a" +
	"\x01\xeb^\x1eR{\xd6\xb5+$\xc0\xac\xab=\xa4\xda" +
	"\xacmO\xc8;\xe9I\xc0\xefY\xdb\xa1\xb0\xdfe]" +
	"\x87B\xbe\xcd\xba\x0f\x85]>\xebm\x0f\x07\x04\xac{" +
	"c\x91{zm\xe5\xa4\xa9\xc4\x91\xda&\x91\xa6\xf1b" +
	"\xa6x\xbdS\x13\xa25S\x12\"o\xed\x94\xacj\xbc" +
	"H-\xbc\xee\x08\x13\x9b\xbe<\x07\xd6\xf8V6\xb7\x8d" +
	"fR\x96\x91\x1dH\xf0\\>\xc2\x9f\x11Y\x17\x15\xe8" +
	"U2j\x03\x94\xb31?\xd44\xaa\xb0\x032j\x9b" +
	")g%\x1fZ7\xbd\x14\xe2\xad\xe7XF\xb6\x93\xe7" +
	"]\x1cYi\xd9m\xa3\xdcN\xea\x19\xc3\xccLAl" +
	"\x86\xf41\xa7\xdbLYhd\x07x.\xbf\xdeP\xcc" +
	"!k[\x89^{>\x19\xed\x1e\x96\xda\x06\xadQ^" +
	"\xb2\x93\xe7\xf2\x91R<-\xc2\xa1+\xd8K\xd8\x14W" +
	"4E\x86\x0e\xf1&e\x8d\x9e\xe3\x0a\x81\xe04\x1dC" +
	"\x80R\xbdK#n(\x15\x13\xad)\xec#B\x0e\x05" +
	"\x80J\xb8\xe5\x17!P`J\x11c&W\xc0R\xcd" +
	"\xe3vsi}ga?O:\x85\xac\xeb\x94($" +
	"\x00\xab\"h\xac\x94Q[\x14\xb5\x04\xff \x8e\x1a\xee" +
	"\x95\xe2\xf6\xa8!\xa7\xa9\xca\xf7\xc9q-\x86\xe8\x1di" +
	"\x99\xb1\xf9\xd4\x9f\xdf\xf2\xd2\xd4T4,(\xe4P\x0a" +
	"\xa0\xcb\x85\x83n\xf3\x0bJ\xa1]\x14\x94\x9c\xdf\x9bP" +
	"]\xc6\x18\xd3\xfbEo\xb2\xc9\xefM\xd6\xf5\x88\xdeD" +
	"\xeb\x11\xbdIo\x8f\xe8M\xba\xb7\x88\xde\xa4k\x0b\x80" +
	"R\xb0\xb9>\xae\xe7r\x96i\xe8\xe3\xa6\xe1\xda\xba\xcb" +
	"\xbd\xfc\x88\xe5\xe4G,\x1b\xe4\x82\xe3\xe5-Ww\x1c" +
	"\xa3\x00\x98\x1bw\x0a\xd9aR(\x12\xae\x0e2\xbb\xf8" +
	"{M\xe4w\xdf\x04\xb9\xb2Rw\xdc\xc8\x9f\xa9\xac\xb5" +
	"\xed\x8b\xef\xa4\xc4\x94mga_Rd\xd6T8E" +
	"}\xe3Z;\x91\xd1\x05i\xa9\x13\x9ei\xf3=sM" +
	"\x93\xf0\xcc\x92\xa5\xc23\x8dK\x85g\x16,\x17\x9e\xa9" +
	"_\x0a\xa0\xd8\x96E\xdd\xa0>\x9ctF,\xcbM\x0e" +
	"\xdb\x05\xc3mu\\\xbbp\x93\x9bt\x0a\x19\xdd\x9e\x96" +
	"d\xe8\x0a!l\x89b\xc4\x89b,\x0d;\x1fA1" +
	"fP\xeb\xd3\x14\xf2\x8e$\xa77\xb1:\xacK>n" +
	"+\x94\xa4AJN\xbb!\xba\x14\x92\xd5\xc5\xec\xa8j" +
	"\x0a\xdb\x1aeHw\xf9W\xe2&\"\xf6\x88h\xfb=" +
	"\x12\xf54\x9f\xde\xf9\xf25\x8b?\xfb\xe0wX\x1a\xea" +
	"0\xb6\x05$V\x91\x08^\x07\xc5t\xdb\xdc\x15(B" +
	"5\xda\xab|\xc5\x8c\xea\xd3\x95\x09\x97\x17+7\xa7\xb9" +
	"\xf4\x84\xf6\x992\x01K\x87](\xa1\x92\xcb\xe4\xdc0" +
	"\xf3\"s\x94\x09\x99\x17\xfb\x12P\x06q\x9a`\xf0\xc8" +
	"p\xd0+\xc1\x1f\x10Nk\x8b\xe4\x18\"\xed\xaeV\xe0" +
	"\x1e\x80T%\xca\x98\xaaC\x02(\x1f\xa7\xd59B^" +
	"G\xf2\x85XdR\x12\xa2\xba\x00m\x80T\x03\xc9/" +
	"\xc7b\xe7$#\xaa\x8dB\xbe\x88\xe4\xcb\xb0\xd8<\xc5" +
	"\x00\xd4%b\x9de$_A\xf2\x19q\x11P\xeau" +
	"\xf84@j\x05\xc9W\x93<1C\xc4\x94\xda\x8d\x87" +
	"\x00R\xabI~=\xc9g&\x04\x9dP\xd7a\x0f@" +
	"j\x80\xe4\x9b\xc9\x90\x0aA(\xd4M8\x08\x90\xba\x91" +
	"\xc4#(!\x05P\x05\x80\xcaq9@j3\x89\xb3" +
	"(\xa1\x973L\x02\xfe\x01\x1c\xb1\xb93be\x87\"" +
	"%\xc0\xaf\"\x03\x1c\xa9\x82P\x01!8)\xc5\xaba" +
	"\xf6\x11k\x85\xa4\xe9\xb6\xa5\xd6G\xdb\xad\xc9\xf2\x12\x9d" +
	"\xdb\xde2\xa4\x8f\xf5\xa1\xcd\xd3F>U\xc8M\xa86" +
	"\xdb;\x0a\xb6MT\xafS\x1f\xeb\xb3y\xab\xaf\x12(" +
	"\xb8<G\x7f\xb7!U\xacv\xdd\xe1\x0a\x99\x1d<\x1e" +
	"\xd4\x1d\xee\x17\xb0pM=z\xb1X\x1d\xdez\x91\xdc" +
	"\xfbU\x10\xabC\xa2S\x96@\x93\x82\xa9D*&5" +
	"M\x91A\xc8\xc60\xf3KunB\xc3\xf1\xc5\xadO" +
	"\xf9\x9cd:X\x18H\x8c\xf9\xf3\xaa\x99r\xac\xd2\xf3" +
	"\xfc\xad#\xcdN\x15\x9e\xf7\x8a\x9b\xf7\x14\xa70\xd7R" +
	"\xb7Sb\xc3\xa2\x9e\x96\xf1K\xcf0\xa3O\x03N=" +
	"m!-O\xb1\x80\x85\x15\xc7\x11~\"\xb1\x036\x80" +
	"v\xaf\x8c\xda\xf7\x8be\x9e(\xd0wI\xf8\xa0\x8c\xda" +
	"\xa3\xa5\x14\x02`\x8f\xec\x89\xcc(D\xfe\x10-\x7f\x1a" +
	"@;\"\xa3v\x82\x92\xa7\xda\xefP\x8e\x0f\x02h\xcf" +
	"\xca\xa8\xbd,!\x80\x8f\xc4/R\xbfzBF\xed\x17" +
	"\xd2\xff}|\x16\xe7x\x03\x900r|\xa2\xf7\xe2\x8a" +
	"\x0c8^T\xc0\xea\xe8\x07\xa4/\x0e\xb7\x12+\x9d\x14" +
	"n\x11^\xb5\xb1l\x12K\xb4jy\x94V\xad\xf0\x9b" +
	"?\xcd\x8eLb\xff\xb0\x184\xcc\xb4e\xe7-\x1b\xca" +
	"\x06:\xd3v\xab\xa58\x10<1\xfcvV\xd1\x1f~" +
	"vc\x15wy\x1d\xe1\xb0\xc7[\x1b\x0c\x8f\x82\x99V" +
	")\xa9\x10'Dv\x90T\xbb&\xc455\x92|\x88" +
	"\"\x17A\x8a\x0b\xfb\x8a\x03\xa9^\xf4W\xd4\xa9\xc1\x0f" +
	"\x0c(\xf3}\xf9X\xa6\xd46\x06y\xb6H\x04\xe8V" +
	"\x7f.l\xf8sa\xees\xafM\xfe\\x\x93?\x17" +
	"\xde\xe0s/\xcd\x9f\x0bk\xfe\\X\xf3\xe7\xc2Z\xfb" +
	"\xff\xd7I\xf0\x97O\x1e\xca\xa6\x1a\x1b\x85#\xea}\x12" +
	"\xca.\x01\xf0\x8aC\x0c\xd1Z\x8f\x17G`\x89\xacn" +
	"|e\xb6\xd7\xdf\xca'1\x80\xe5!\xdd)ok\xbf" +
	"\xccd\x10c\x82\xf0#6\x9b\x1b\xf9\xc0R\xd5\x14~" +
	"\xffd\x15Mr\xc7jq@1_\x89\xa2\xf9`1" +
	"\xf0:\x83\xc0[\xd26\x0b#\x1dJ\xd1\x81)H\xe4" +
	"y:\xe4'\xc1\xe2E~\x92.\xb8\xbd\xfa\xf66G" +
	"v\x8c\x9c\x91\x15y\xd4\xaf\xbb\xbc\x8f\x97O>\x00\xff" +
	"7\x00\x00\xff\xff>\xbd\x14>"

func init() {
	schemas.Register(schema_b30a3af53cea6b3e,
		0x80ce153f3bc9a9e8,
		0x825bb2508c0b37b2,
		0x82a74595175b71a3,
		0x87feb816363ff43c,
		0x88a5848ef8603554,
		0x8c4cb8d60ae5aec7,
		0x8cb6b3e3c50d3665,
		0x8f0cbec420589373,
		0x8fa09457bc1bfc34,
		0x953375ac67d4f573,
		0x9539b8e14ac7d5a9,
		0x987b68b57edbbdb6,
		0x9a221e04faf79efc,
		0x9c5dedfd679ac842,
		0x9d247c812334c917,
		0x9d81d2bf4cd0f868,
		0xaafe4332e17aa43e,
		0xae2976259bce5460,
		0xbbb7aeae0d097e05,
		0xbc6b579acf43fb6e,
		0xc0032af5b7bc50e4,
		0xc2d50914b83d42de,
		0xc58610b90af83811,
		0xc6c4991fe51b272f,
		0xc876b729b7d7f6d9,
		0xcb5a624fdc982a1b,
		0xcca7748d367db151,
		0xcfcf44997e7ceab4,
		0xd3da30ea7b25d921,
		0xe1ed73d59c8ce359,
		0xe3a37e340f816cd1,
		0xe98c76fb0fb0b2cd,
		0xeed4e55bb04289ef,
		0xf082ec2d0eb50c9b,
		0xf0c763e472409ba2,
		0xfd4dbbbb758bb8f7,
		0xfec75f2ddd43431d)
}
