// Code generated by capnpc-go. DO NOT EDIT.

package management

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	registry "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/registry"
	math "math"
	strconv "strconv"
)

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0x82a74595175b71a3

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List struct{ capnp.List }

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return EventType_List{l.List}, err
}

func (l EventType_List) At(i int) EventType {
	ul := capnp.UInt16List{List: l.List}
	return EventType(ul.At(i))
}

func (l EventType_List) Set(i int, v EventType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xc2d50914b83d42de

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List struct{ capnp.List }

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PlantOrgan_List{l.List}, err
}

func (l PlantOrgan_List) At(i int) PlantOrgan {
	ul := capnp.UInt16List{List: l.List}
	return PlantOrgan(ul.At(i))
}

func (l PlantOrgan_List) Set(i int, v PlantOrgan) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event struct{ capnp.Struct }
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x9c5dedfd679ac842

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x9c5dedfd679ac842, s.Struct)
	return str
}

func (s Event) Which() Event_Which {
	return Event_Which(s.Struct.Uint16(2))
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(s.Struct.Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Event) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	s.Struct.SetUint16(2, 0)
}

func (s Event_at) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s Event_at) HasDate() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_at) SetDate(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	s.Struct.SetUint16(2, 1)
}

func (s Event_between) Earliest() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s Event_between) HasEarliest() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_between) SetEarliest(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s Event_between) HasLatest() bool {
	return s.Struct.HasPtr(2)
}

func (s Event_between) SetLatest(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	s.Struct.SetUint16(2, 2)
}

func (s Event_after) Event() (Event_Type, error) {
	p, err := s.Struct.Ptr(1)
	return Event_Type{Struct: p.Struct()}, err
}

func (s Event_after) HasEvent() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(s.Struct.Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return s.Struct.Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(3)
}

func (s Event) HasParams() bool {
	return s.Struct.HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(3, v)
}

func (s Event) RunAtStartOfDay() bool {
	return s.Struct.Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	s.Struct.SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0x9c5dedfd679ac842, s.List)
	return str
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (p Event_Future) Struct() (Event, error) {
	s, err := p.Future.Struct()
	return Event{s}, err
}

func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (p Event_at_Future) Struct() (Event_at, error) {
	s, err := p.Future.Struct()
	return Event_at{s}, err
}

func (p Event_at_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (p Event_between_Future) Struct() (Event_between, error) {
	s, err := p.Future.Struct()
	return Event_between{s}, err
}

func (p Event_between_Future) Earliest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_between_Future) Latest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (p Event_after_Future) Struct() (Event_after, error) {
	s, err := p.Future.Struct()
	return Event_after{s}, err
}

func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xf082ec2d0eb50c9b

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List struct{ capnp.List }

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Event_ExternalType_List{l.List}, err
}

func (l Event_ExternalType_List) At(i int) Event_ExternalType {
	ul := capnp.UInt16List{List: l.List}
	return Event_ExternalType(ul.At(i))
}

func (l Event_ExternalType_List) Set(i int, v Event_ExternalType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0x8fa09457bc1bfc34

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List struct{ capnp.List }

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Event_PhenoStage_List{l.List}, err
}

func (l Event_PhenoStage_List) At(i int) Event_PhenoStage {
	ul := capnp.UInt16List{List: l.List}
	return Event_PhenoStage(ul.At(i))
}

func (l Event_PhenoStage_List) Set(i int, v Event_PhenoStage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event_Type struct{ capnp.Struct }
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xe1ed73d59c8ce359

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type{st}, err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type{st}, err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type{root.Struct()}, err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xe1ed73d59c8ce359, s.Struct)
	return str
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(s.Struct.Uint16(2))
}
func (s Event_Type) External() Event_ExternalType {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(s.Struct.Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(s.Struct.Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List struct{ capnp.List }

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Event_Type_List{l}, err
}

func (s Event_Type_List) At(i int) Event_Type { return Event_Type{s.List.Struct(i)} }

func (s Event_Type_List) Set(i int, v Event_Type) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_Type_List) String() string {
	str, _ := text.MarshalList(0xe1ed73d59c8ce359, s.List)
	return str
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (p Event_Type_Future) Struct() (Event_Type, error) {
	s, err := p.Future.Struct()
	return Event_Type{s}, err
}

type Params struct{ capnp.Struct }

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0x9d247c812334c917

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params{st}, err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params{st}, err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params{root.Struct()}, err
}

func (s Params) String() string {
	str, _ := text.Marshal(0x9d247c812334c917, s.Struct)
	return str
}

// Params_List is a list of Params.
type Params_List struct{ capnp.List }

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Params_List{l}, err
}

func (s Params_List) At(i int) Params { return Params{s.List.Struct(i)} }

func (s Params_List) Set(i int, v Params) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_List) String() string {
	str, _ := text.MarshalList(0x9d247c812334c917, s.List)
	return str
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (p Params_Future) Struct() (Params, error) {
	s, err := p.Future.Struct()
	return Params{s}, err
}

type Params_Sowing struct{ capnp.Struct }

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0x80ce153f3bc9a9e8

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing{st}, err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing{st}, err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing{root.Struct()}, err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0x80ce153f3bc9a9e8, s.Struct)
	return str
}

func (s Params_Sowing) Cultivar() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Params_Sowing) HasCultivar() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Sowing) CultivarBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Params_Sowing) SetCultivar(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Params_Sowing) PlantDensity() uint16 {
	return s.Struct.Uint16(0)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := s.Struct.Ptr(1)
	return crop.Crop{Client: p.Interface().Client()}
}

func (s Params_Sowing) HasCrop() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List struct{ capnp.List }

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Params_Sowing_List{l}, err
}

func (s Params_Sowing_List) At(i int) Params_Sowing { return Params_Sowing{s.List.Struct(i)} }

func (s Params_Sowing_List) Set(i int, v Params_Sowing) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Sowing_List) String() string {
	str, _ := text.MarshalList(0x80ce153f3bc9a9e8, s.List)
	return str
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (p Params_Sowing_Future) Struct() (Params_Sowing, error) {
	s, err := p.Future.Struct()
	return Params_Sowing{s}, err
}

func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop{Client: p.Future.Field(1, nil).Client()}
}

type Params_AutomaticSowing struct{ capnp.Struct }

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xcfcf44997e7ceab4

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing{st}, err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing{st}, err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing{root.Struct()}, err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xcfcf44997e7ceab4, s.Struct)
	return str
}

func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := s.Struct.Ptr(1)
	return Params_Sowing{Struct: p.Struct()}, err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(s.Struct.Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return s.Struct.Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := s.Struct.Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp{Struct: p.Struct()}, err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(s.Struct.Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List struct{ capnp.List }

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return Params_AutomaticSowing_List{l}, err
}

func (s Params_AutomaticSowing_List) At(i int) Params_AutomaticSowing {
	return Params_AutomaticSowing{s.List.Struct(i)}
}

func (s Params_AutomaticSowing_List) Set(i int, v Params_AutomaticSowing) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticSowing_List) String() string {
	str, _ := text.MarshalList(0xcfcf44997e7ceab4, s.List)
	return str
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (p Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticSowing{s}, err
}

func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}

func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp struct{ capnp.Struct }

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x9d81d2bf4cd0f868

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp{st}, err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp{st}, err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp{root.Struct()}, err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x9d81d2bf4cd0f868, s.Struct)
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return s.Struct.Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List struct{ capnp.List }

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Params_AutomaticSowing_AvgSoilTemp_List{l}, err
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) At(i int) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp{s.List.Struct(i)}
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) Set(i int, v Params_AutomaticSowing_AvgSoilTemp) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) String() string {
	str, _ := text.MarshalList(0x9d81d2bf4cd0f868, s.List)
	return str
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (p Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticSowing_AvgSoilTemp{s}, err
}

type Params_Harvest struct{ capnp.Struct }

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0xeed4e55bb04289ef

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest{st}, err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest{st}, err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest{root.Struct()}, err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0xeed4e55bb04289ef, s.Struct)
	return str
}

func (s Params_Harvest) Exported() bool {
	return !s.Struct.Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	s.Struct.SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Harvest_OptCarbonMgmtData{Struct: p.Struct()}, err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(s.Struct.Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List struct{ capnp.List }

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Harvest_List{l}, err
}

func (s Params_Harvest_List) At(i int) Params_Harvest { return Params_Harvest{s.List.Struct(i)} }

func (s Params_Harvest_List) Set(i int, v Params_Harvest) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Harvest_List) String() string {
	str, _ := text.MarshalList(0xeed4e55bb04289ef, s.List)
	return str
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (p Params_Harvest_Future) Struct() (Params_Harvest, error) {
	s, err := p.Future.Struct()
	return Params_Harvest{s}, err
}

func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0x8f0cbec420589373

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List struct{ capnp.List }

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Harvest_CropUsage_List{l.List}, err
}

func (l Params_Harvest_CropUsage_List) At(i int) Params_Harvest_CropUsage {
	ul := capnp.UInt16List{List: l.List}
	return Params_Harvest_CropUsage(ul.At(i))
}

func (l Params_Harvest_CropUsage_List) Set(i int, v Params_Harvest_CropUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Harvest_OptCarbonMgmtData struct{ capnp.Struct }

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0x8cb6b3e3c50d3665

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData{st}, err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData{st}, err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData{root.Struct()}, err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0x8cb6b3e3c50d3665, s.Struct)
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return s.Struct.Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(s.Struct.Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List struct{ capnp.List }

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return Params_Harvest_OptCarbonMgmtData_List{l}, err
}

func (s Params_Harvest_OptCarbonMgmtData_List) At(i int) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData{s.List.Struct(i)}
}

func (s Params_Harvest_OptCarbonMgmtData_List) Set(i int, v Params_Harvest_OptCarbonMgmtData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Harvest_OptCarbonMgmtData_List) String() string {
	str, _ := text.MarshalList(0x8cb6b3e3c50d3665, s.List)
	return str
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (p Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	s, err := p.Future.Struct()
	return Params_Harvest_OptCarbonMgmtData{s}, err
}

type Params_AutomaticHarvest struct{ capnp.Struct }

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xe3a37e340f816cd1

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest{st}, err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest{st}, err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest{root.Struct()}, err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xe3a37e340f816cd1, s.Struct)
	return str
}

func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Harvest{Struct: p.Struct()}, err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(s.Struct.Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(s.Struct.Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	s.Struct.SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List struct{ capnp.List }

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return Params_AutomaticHarvest_List{l}, err
}

func (s Params_AutomaticHarvest_List) At(i int) Params_AutomaticHarvest {
	return Params_AutomaticHarvest{s.List.Struct(i)}
}

func (s Params_AutomaticHarvest_List) Set(i int, v Params_AutomaticHarvest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticHarvest_List) String() string {
	str, _ := text.MarshalList(0xe3a37e340f816cd1, s.List)
	return str
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (p Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticHarvest{s}, err
}

func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting struct{ capnp.Struct }

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0xfec75f2ddd43431d

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting{st}, err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting{st}, err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting{root.Struct()}, err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0xfec75f2ddd43431d, s.Struct)
	return str
}

func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Cutting_Spec_List{List: p.List()}, err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(s.Struct.Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List struct{ capnp.List }

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Cutting_List{l}, err
}

func (s Params_Cutting_List) At(i int) Params_Cutting { return Params_Cutting{s.List.Struct(i)} }

func (s Params_Cutting_List) Set(i int, v Params_Cutting) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Cutting_List) String() string {
	str, _ := text.MarshalList(0xfec75f2ddd43431d, s.List)
	return str
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (p Params_Cutting_Future) Struct() (Params_Cutting, error) {
	s, err := p.Future.Struct()
	return Params_Cutting{s}, err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0x825bb2508c0b37b2

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List struct{ capnp.List }

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Cutting_CL_List{l.List}, err
}

func (l Params_Cutting_CL_List) At(i int) Params_Cutting_CL {
	ul := capnp.UInt16List{List: l.List}
	return Params_Cutting_CL(ul.At(i))
}

func (l Params_Cutting_CL_List) Set(i int, v Params_Cutting_CL) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0xf0c763e472409ba2

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List struct{ capnp.List }

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Cutting_Unit_List{l.List}, err
}

func (l Params_Cutting_Unit_List) At(i int) Params_Cutting_Unit {
	ul := capnp.UInt16List{List: l.List}
	return Params_Cutting_Unit(ul.At(i))
}

func (l Params_Cutting_Unit_List) Set(i int, v Params_Cutting_Unit) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Cutting_Spec struct{ capnp.Struct }

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0x9a221e04faf79efc

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec{st}, err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec{st}, err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec{root.Struct()}, err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0x9a221e04faf79efc, s.Struct)
	return str
}

func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(s.Struct.Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(s.Struct.Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(s.Struct.Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List struct{ capnp.List }

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Params_Cutting_Spec_List{l}, err
}

func (s Params_Cutting_Spec_List) At(i int) Params_Cutting_Spec {
	return Params_Cutting_Spec{s.List.Struct(i)}
}

func (s Params_Cutting_Spec_List) Set(i int, v Params_Cutting_Spec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Cutting_Spec_List) String() string {
	str, _ := text.MarshalList(0x9a221e04faf79efc, s.List)
	return str
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (p Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	s, err := p.Future.Struct()
	return Params_Cutting_Spec{s}, err
}

type Params_MineralFertilization struct{ capnp.Struct }

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xd3da30ea7b25d921

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization{st}, err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization{st}, err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization{root.Struct()}, err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xd3da30ea7b25d921, s.Struct)
	return str
}

func (s Params_MineralFertilization) Fertilizer() Fertilizer {
	p, _ := s.Struct.Ptr(0)
	return Fertilizer{Client: p.Interface().Client()}
}

func (s Params_MineralFertilization) HasFertilizer() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_MineralFertilization) SetFertilizer(v Fertilizer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List struct{ capnp.List }

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_MineralFertilization_List{l}, err
}

func (s Params_MineralFertilization_List) At(i int) Params_MineralFertilization {
	return Params_MineralFertilization{s.List.Struct(i)}
}

func (s Params_MineralFertilization_List) Set(i int, v Params_MineralFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_MineralFertilization_List) String() string {
	str, _ := text.MarshalList(0xd3da30ea7b25d921, s.List)
	return str
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (p Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	s, err := p.Future.Struct()
	return Params_MineralFertilization{s}, err
}

func (p Params_MineralFertilization_Future) Fertilizer() Fertilizer {
	return Fertilizer{Client: p.Future.Field(0, nil).Client()}
}

type Params_NDemandFertilization struct{ capnp.Struct }

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0x953375ac67d4f573

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization{st}, err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization{st}, err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization{root.Struct()}, err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0x953375ac67d4f573, s.Struct)
	return str
}

func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Fertilizer() Fertilizer {
	p, _ := s.Struct.Ptr(0)
	return Fertilizer{Client: p.Interface().Client()}
}

func (s Params_NDemandFertilization) HasFertilizer() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_NDemandFertilization) SetFertilizer(v Fertilizer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return s.Struct.Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	s.Struct.SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List struct{ capnp.List }

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Params_NDemandFertilization_List{l}, err
}

func (s Params_NDemandFertilization_List) At(i int) Params_NDemandFertilization {
	return Params_NDemandFertilization{s.List.Struct(i)}
}

func (s Params_NDemandFertilization_List) Set(i int, v Params_NDemandFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_NDemandFertilization_List) String() string {
	str, _ := text.MarshalList(0x953375ac67d4f573, s.List)
	return str
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (p Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	s, err := p.Future.Struct()
	return Params_NDemandFertilization{s}, err
}

func (p Params_NDemandFertilization_Future) Fertilizer() Fertilizer {
	return Fertilizer{Client: p.Future.Field(0, nil).Client()}
}

type Params_OrganicFertilization struct{ capnp.Struct }

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xe98c76fb0fb0b2cd

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization{st}, err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization{st}, err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization{root.Struct()}, err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xe98c76fb0fb0b2cd, s.Struct)
	return str
}

func (s Params_OrganicFertilization) Fertilizer() Fertilizer {
	p, _ := s.Struct.Ptr(0)
	return Fertilizer{Client: p.Interface().Client()}
}

func (s Params_OrganicFertilization) HasFertilizer() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_OrganicFertilization) SetFertilizer(v Fertilizer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return s.Struct.Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	s.Struct.SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List struct{ capnp.List }

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Params_OrganicFertilization_List{l}, err
}

func (s Params_OrganicFertilization_List) At(i int) Params_OrganicFertilization {
	return Params_OrganicFertilization{s.List.Struct(i)}
}

func (s Params_OrganicFertilization_List) Set(i int, v Params_OrganicFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_OrganicFertilization_List) String() string {
	str, _ := text.MarshalList(0xe98c76fb0fb0b2cd, s.List)
	return str
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (p Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	s, err := p.Future.Struct()
	return Params_OrganicFertilization{s}, err
}

func (p Params_OrganicFertilization_Future) Fertilizer() Fertilizer {
	return Fertilizer{Client: p.Future.Field(0, nil).Client()}
}

type Params_Tillage struct{ capnp.Struct }

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0x88a5848ef8603554

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage{st}, err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage{st}, err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage{root.Struct()}, err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0x88a5848ef8603554, s.Struct)
	return str
}

func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List struct{ capnp.List }

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Params_Tillage_List{l}, err
}

func (s Params_Tillage_List) At(i int) Params_Tillage { return Params_Tillage{s.List.Struct(i)} }

func (s Params_Tillage_List) Set(i int, v Params_Tillage) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Tillage_List) String() string {
	str, _ := text.MarshalList(0x88a5848ef8603554, s.List)
	return str
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (p Params_Tillage_Future) Struct() (Params_Tillage, error) {
	s, err := p.Future.Struct()
	return Params_Tillage{s}, err
}

type Params_Irrigation struct{ capnp.Struct }

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0x87feb816363ff43c

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation{st}, err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation{st}, err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation{root.Struct()}, err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0x87feb816363ff43c, s.Struct)
	return str
}

func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) NutrientConcentrations() (Nutrient_List, error) {
	p, err := s.Struct.Ptr(0)
	return Nutrient_List{List: p.List()}, err
}

func (s Params_Irrigation) HasNutrientConcentrations() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Irrigation) SetNutrientConcentrations(v Nutrient_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNutrientConcentrations sets the nutrientConcentrations field to a newly
// allocated Nutrient_List, preferring placement in s's segment.
func (s Params_Irrigation) NewNutrientConcentrations(n int32) (Nutrient_List, error) {
	l, err := NewNutrient_List(s.Struct.Segment(), n)
	if err != nil {
		return Nutrient_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List struct{ capnp.List }

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Irrigation_List{l}, err
}

func (s Params_Irrigation_List) At(i int) Params_Irrigation {
	return Params_Irrigation{s.List.Struct(i)}
}

func (s Params_Irrigation_List) Set(i int, v Params_Irrigation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Irrigation_List) String() string {
	str, _ := text.MarshalList(0x87feb816363ff43c, s.List)
	return str
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (p Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	s, err := p.Future.Struct()
	return Params_Irrigation{s}, err
}

type Nutrient struct{ capnp.Struct }

// Nutrient_TypeID is the unique identifier for the type Nutrient.
const Nutrient_TypeID = 0xaafe4332e17aa43e

func NewNutrient(s *capnp.Segment) (Nutrient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Nutrient{st}, err
}

func NewRootNutrient(s *capnp.Segment) (Nutrient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Nutrient{st}, err
}

func ReadRootNutrient(msg *capnp.Message) (Nutrient, error) {
	root, err := msg.Root()
	return Nutrient{root.Struct()}, err
}

func (s Nutrient) String() string {
	str, _ := text.Marshal(0xaafe4332e17aa43e, s.Struct)
	return str
}

func (s Nutrient) Nutrient() Nutrient_Name {
	return Nutrient_Name(s.Struct.Uint16(0))
}

func (s Nutrient) SetNutrient(v Nutrient_Name) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Nutrient) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Nutrient) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Nutrient) Unit() Nutrient_Unit {
	return Nutrient_Unit(s.Struct.Uint16(2))
}

func (s Nutrient) SetUnit(v Nutrient_Unit) {
	s.Struct.SetUint16(2, uint16(v))
}

// Nutrient_List is a list of Nutrient.
type Nutrient_List struct{ capnp.List }

// NewNutrient creates a new list of Nutrient.
func NewNutrient_List(s *capnp.Segment, sz int32) (Nutrient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Nutrient_List{l}, err
}

func (s Nutrient_List) At(i int) Nutrient { return Nutrient{s.List.Struct(i)} }

func (s Nutrient_List) Set(i int, v Nutrient) error { return s.List.SetStruct(i, v.Struct) }

func (s Nutrient_List) String() string {
	str, _ := text.MarshalList(0xaafe4332e17aa43e, s.List)
	return str
}

// Nutrient_Future is a wrapper for a Nutrient promised by a client call.
type Nutrient_Future struct{ *capnp.Future }

func (p Nutrient_Future) Struct() (Nutrient, error) {
	s, err := p.Future.Struct()
	return Nutrient{s}, err
}

type Nutrient_Name uint16

// Nutrient_Name_TypeID is the unique identifier for the type Nutrient_Name.
const Nutrient_Name_TypeID = 0xbc6b579acf43fb6e

// Values of Nutrient_Name.
const (
	Nutrient_Name_urea         Nutrient_Name = 0
	Nutrient_Name_ammonia      Nutrient_Name = 1
	Nutrient_Name_nitrate      Nutrient_Name = 2
	Nutrient_Name_phosphorus   Nutrient_Name = 3
	Nutrient_Name_potassium    Nutrient_Name = 4
	Nutrient_Name_sulfate      Nutrient_Name = 5
	Nutrient_Name_organicC     Nutrient_Name = 6
	Nutrient_Name_organicN     Nutrient_Name = 7
	Nutrient_Name_organicP     Nutrient_Name = 8
	Nutrient_Name_organicNFast Nutrient_Name = 9
	Nutrient_Name_organicNSlow Nutrient_Name = 10
)

// String returns the enum's constant name.
func (c Nutrient_Name) String() string {
	switch c {
	case Nutrient_Name_urea:
		return "urea"
	case Nutrient_Name_ammonia:
		return "ammonia"
	case Nutrient_Name_nitrate:
		return "nitrate"
	case Nutrient_Name_phosphorus:
		return "phosphorus"
	case Nutrient_Name_potassium:
		return "potassium"
	case Nutrient_Name_sulfate:
		return "sulfate"
	case Nutrient_Name_organicC:
		return "organicC"
	case Nutrient_Name_organicN:
		return "organicN"
	case Nutrient_Name_organicP:
		return "organicP"
	case Nutrient_Name_organicNFast:
		return "organicNFast"
	case Nutrient_Name_organicNSlow:
		return "organicNSlow"

	default:
		return ""
	}
}

// Nutrient_NameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Nutrient_NameFromString(c string) Nutrient_Name {
	switch c {
	case "urea":
		return Nutrient_Name_urea
	case "ammonia":
		return Nutrient_Name_ammonia
	case "nitrate":
		return Nutrient_Name_nitrate
	case "phosphorus":
		return Nutrient_Name_phosphorus
	case "potassium":
		return Nutrient_Name_potassium
	case "sulfate":
		return Nutrient_Name_sulfate
	case "organicC":
		return Nutrient_Name_organicC
	case "organicN":
		return Nutrient_Name_organicN
	case "organicP":
		return Nutrient_Name_organicP
	case "organicNFast":
		return Nutrient_Name_organicNFast
	case "organicNSlow":
		return Nutrient_Name_organicNSlow

	default:
		return 0
	}
}

type Nutrient_Name_List struct{ capnp.List }

func NewNutrient_Name_List(s *capnp.Segment, sz int32) (Nutrient_Name_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Nutrient_Name_List{l.List}, err
}

func (l Nutrient_Name_List) At(i int) Nutrient_Name {
	ul := capnp.UInt16List{List: l.List}
	return Nutrient_Name(ul.At(i))
}

func (l Nutrient_Name_List) Set(i int, v Nutrient_Name) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Nutrient_Unit uint16

// Nutrient_Unit_TypeID is the unique identifier for the type Nutrient_Unit.
const Nutrient_Unit_TypeID = 0x987b68b57edbbdb6

// Values of Nutrient_Unit.
const (
	Nutrient_Unit_none     Nutrient_Unit = 0
	Nutrient_Unit_fraction Nutrient_Unit = 1
	Nutrient_Unit_percent  Nutrient_Unit = 2
)

// String returns the enum's constant name.
func (c Nutrient_Unit) String() string {
	switch c {
	case Nutrient_Unit_none:
		return "none"
	case Nutrient_Unit_fraction:
		return "fraction"
	case Nutrient_Unit_percent:
		return "percent"

	default:
		return ""
	}
}

// Nutrient_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Nutrient_UnitFromString(c string) Nutrient_Unit {
	switch c {
	case "none":
		return Nutrient_Unit_none
	case "fraction":
		return Nutrient_Unit_fraction
	case "percent":
		return Nutrient_Unit_percent

	default:
		return 0
	}
}

type Nutrient_Unit_List struct{ capnp.List }

func NewNutrient_Unit_List(s *capnp.Segment, sz int32) (Nutrient_Unit_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Nutrient_Unit_List{l.List}, err
}

func (l Nutrient_Unit_List) At(i int) Nutrient_Unit {
	ul := capnp.UInt16List{List: l.List}
	return Nutrient_Unit(ul.At(i))
}

func (l Nutrient_Unit_List) Set(i int, v Nutrient_Unit) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Fertilizer struct{ Client *capnp.Client }

// Fertilizer_TypeID is the unique identifier for the type Fertilizer.
const Fertilizer_TypeID = 0x8c4cb8d60ae5aec7

func (c Fertilizer) Nutrients(ctx context.Context, params func(Fertilizer_nutrients_Params) error) (Fertilizer_nutrients_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      0,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "nutrients",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Fertilizer_nutrients_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Fertilizer_nutrients_Results_Future{Future: ans.Future()}, release
}
func (c Fertilizer) Parameters(ctx context.Context, params func(Fertilizer_parameters_Params) error) (Fertilizer_parameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      1,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "parameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Fertilizer_parameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Fertilizer_parameters_Results_Future{Future: ans.Future()}, release
}
func (c Fertilizer) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Fertilizer) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Fertilizer) AddRef() Fertilizer {
	return Fertilizer{
		Client: c.Client.AddRef(),
	}
}

func (c Fertilizer) Release() {
	c.Client.Release()
}

// A Fertilizer_Server is a Fertilizer with a local implementation.
type Fertilizer_Server interface {
	Nutrients(context.Context, Fertilizer_nutrients) error

	Parameters(context.Context, Fertilizer_parameters) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Fertilizer_NewServer creates a new Server from an implementation of Fertilizer_Server.
func Fertilizer_NewServer(s Fertilizer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Fertilizer_Methods(nil, s), s, c, policy)
}

// Fertilizer_ServerToClient creates a new Client from an implementation of Fertilizer_Server.
// The caller is responsible for calling Release on the returned Client.
func Fertilizer_ServerToClient(s Fertilizer_Server, policy *server.Policy) Fertilizer {
	return Fertilizer{Client: capnp.NewClient(Fertilizer_NewServer(s, policy))}
}

// Fertilizer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Fertilizer_Methods(methods []server.Method, s Fertilizer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      0,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "nutrients",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Nutrients(ctx, Fertilizer_nutrients{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8c4cb8d60ae5aec7,
			MethodID:      1,
			InterfaceName: "management.capnp:Fertilizer",
			MethodName:    "parameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Parameters(ctx, Fertilizer_parameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Fertilizer_nutrients holds the state for a server call to Fertilizer.nutrients.
// See server.Call for documentation.
type Fertilizer_nutrients struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Fertilizer_nutrients) Args() Fertilizer_nutrients_Params {
	return Fertilizer_nutrients_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Fertilizer_nutrients) AllocResults() (Fertilizer_nutrients_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_nutrients_Results{Struct: r}, err
}

// Fertilizer_parameters holds the state for a server call to Fertilizer.parameters.
// See server.Call for documentation.
type Fertilizer_parameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Fertilizer_parameters) Args() Fertilizer_parameters_Params {
	return Fertilizer_parameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Fertilizer_parameters) AllocResults() (Fertilizer_parameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_parameters_Results{Struct: r}, err
}

type Fertilizer_nutrients_Params struct{ capnp.Struct }

// Fertilizer_nutrients_Params_TypeID is the unique identifier for the type Fertilizer_nutrients_Params.
const Fertilizer_nutrients_Params_TypeID = 0xcb5a624fdc982a1b

func NewFertilizer_nutrients_Params(s *capnp.Segment) (Fertilizer_nutrients_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_nutrients_Params{st}, err
}

func NewRootFertilizer_nutrients_Params(s *capnp.Segment) (Fertilizer_nutrients_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_nutrients_Params{st}, err
}

func ReadRootFertilizer_nutrients_Params(msg *capnp.Message) (Fertilizer_nutrients_Params, error) {
	root, err := msg.Root()
	return Fertilizer_nutrients_Params{root.Struct()}, err
}

func (s Fertilizer_nutrients_Params) String() string {
	str, _ := text.Marshal(0xcb5a624fdc982a1b, s.Struct)
	return str
}

// Fertilizer_nutrients_Params_List is a list of Fertilizer_nutrients_Params.
type Fertilizer_nutrients_Params_List struct{ capnp.List }

// NewFertilizer_nutrients_Params creates a new list of Fertilizer_nutrients_Params.
func NewFertilizer_nutrients_Params_List(s *capnp.Segment, sz int32) (Fertilizer_nutrients_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Fertilizer_nutrients_Params_List{l}, err
}

func (s Fertilizer_nutrients_Params_List) At(i int) Fertilizer_nutrients_Params {
	return Fertilizer_nutrients_Params{s.List.Struct(i)}
}

func (s Fertilizer_nutrients_Params_List) Set(i int, v Fertilizer_nutrients_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_nutrients_Params_List) String() string {
	str, _ := text.MarshalList(0xcb5a624fdc982a1b, s.List)
	return str
}

// Fertilizer_nutrients_Params_Future is a wrapper for a Fertilizer_nutrients_Params promised by a client call.
type Fertilizer_nutrients_Params_Future struct{ *capnp.Future }

func (p Fertilizer_nutrients_Params_Future) Struct() (Fertilizer_nutrients_Params, error) {
	s, err := p.Future.Struct()
	return Fertilizer_nutrients_Params{s}, err
}

type Fertilizer_nutrients_Results struct{ capnp.Struct }

// Fertilizer_nutrients_Results_TypeID is the unique identifier for the type Fertilizer_nutrients_Results.
const Fertilizer_nutrients_Results_TypeID = 0xae2976259bce5460

func NewFertilizer_nutrients_Results(s *capnp.Segment) (Fertilizer_nutrients_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_nutrients_Results{st}, err
}

func NewRootFertilizer_nutrients_Results(s *capnp.Segment) (Fertilizer_nutrients_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_nutrients_Results{st}, err
}

func ReadRootFertilizer_nutrients_Results(msg *capnp.Message) (Fertilizer_nutrients_Results, error) {
	root, err := msg.Root()
	return Fertilizer_nutrients_Results{root.Struct()}, err
}

func (s Fertilizer_nutrients_Results) String() string {
	str, _ := text.Marshal(0xae2976259bce5460, s.Struct)
	return str
}

func (s Fertilizer_nutrients_Results) Nutrients() (Nutrient_List, error) {
	p, err := s.Struct.Ptr(0)
	return Nutrient_List{List: p.List()}, err
}

func (s Fertilizer_nutrients_Results) HasNutrients() bool {
	return s.Struct.HasPtr(0)
}

func (s Fertilizer_nutrients_Results) SetNutrients(v Nutrient_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewNutrients sets the nutrients field to a newly
// allocated Nutrient_List, preferring placement in s's segment.
func (s Fertilizer_nutrients_Results) NewNutrients(n int32) (Nutrient_List, error) {
	l, err := NewNutrient_List(s.Struct.Segment(), n)
	if err != nil {
		return Nutrient_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Fertilizer_nutrients_Results_List is a list of Fertilizer_nutrients_Results.
type Fertilizer_nutrients_Results_List struct{ capnp.List }

// NewFertilizer_nutrients_Results creates a new list of Fertilizer_nutrients_Results.
func NewFertilizer_nutrients_Results_List(s *capnp.Segment, sz int32) (Fertilizer_nutrients_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Fertilizer_nutrients_Results_List{l}, err
}

func (s Fertilizer_nutrients_Results_List) At(i int) Fertilizer_nutrients_Results {
	return Fertilizer_nutrients_Results{s.List.Struct(i)}
}

func (s Fertilizer_nutrients_Results_List) Set(i int, v Fertilizer_nutrients_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_nutrients_Results_List) String() string {
	str, _ := text.MarshalList(0xae2976259bce5460, s.List)
	return str
}

// Fertilizer_nutrients_Results_Future is a wrapper for a Fertilizer_nutrients_Results promised by a client call.
type Fertilizer_nutrients_Results_Future struct{ *capnp.Future }

func (p Fertilizer_nutrients_Results_Future) Struct() (Fertilizer_nutrients_Results, error) {
	s, err := p.Future.Struct()
	return Fertilizer_nutrients_Results{s}, err
}

type Fertilizer_parameters_Params struct{ capnp.Struct }

// Fertilizer_parameters_Params_TypeID is the unique identifier for the type Fertilizer_parameters_Params.
const Fertilizer_parameters_Params_TypeID = 0xc0032af5b7bc50e4

func NewFertilizer_parameters_Params(s *capnp.Segment) (Fertilizer_parameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_parameters_Params{st}, err
}

func NewRootFertilizer_parameters_Params(s *capnp.Segment) (Fertilizer_parameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Fertilizer_parameters_Params{st}, err
}

func ReadRootFertilizer_parameters_Params(msg *capnp.Message) (Fertilizer_parameters_Params, error) {
	root, err := msg.Root()
	return Fertilizer_parameters_Params{root.Struct()}, err
}

func (s Fertilizer_parameters_Params) String() string {
	str, _ := text.Marshal(0xc0032af5b7bc50e4, s.Struct)
	return str
}

// Fertilizer_parameters_Params_List is a list of Fertilizer_parameters_Params.
type Fertilizer_parameters_Params_List struct{ capnp.List }

// NewFertilizer_parameters_Params creates a new list of Fertilizer_parameters_Params.
func NewFertilizer_parameters_Params_List(s *capnp.Segment, sz int32) (Fertilizer_parameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Fertilizer_parameters_Params_List{l}, err
}

func (s Fertilizer_parameters_Params_List) At(i int) Fertilizer_parameters_Params {
	return Fertilizer_parameters_Params{s.List.Struct(i)}
}

func (s Fertilizer_parameters_Params_List) Set(i int, v Fertilizer_parameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_parameters_Params_List) String() string {
	str, _ := text.MarshalList(0xc0032af5b7bc50e4, s.List)
	return str
}

// Fertilizer_parameters_Params_Future is a wrapper for a Fertilizer_parameters_Params promised by a client call.
type Fertilizer_parameters_Params_Future struct{ *capnp.Future }

func (p Fertilizer_parameters_Params_Future) Struct() (Fertilizer_parameters_Params, error) {
	s, err := p.Future.Struct()
	return Fertilizer_parameters_Params{s}, err
}

type Fertilizer_parameters_Results struct{ capnp.Struct }

// Fertilizer_parameters_Results_TypeID is the unique identifier for the type Fertilizer_parameters_Results.
const Fertilizer_parameters_Results_TypeID = 0xfd4dbbbb758bb8f7

func NewFertilizer_parameters_Results(s *capnp.Segment) (Fertilizer_parameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_parameters_Results{st}, err
}

func NewRootFertilizer_parameters_Results(s *capnp.Segment) (Fertilizer_parameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Fertilizer_parameters_Results{st}, err
}

func ReadRootFertilizer_parameters_Results(msg *capnp.Message) (Fertilizer_parameters_Results, error) {
	root, err := msg.Root()
	return Fertilizer_parameters_Results{root.Struct()}, err
}

func (s Fertilizer_parameters_Results) String() string {
	str, _ := text.Marshal(0xfd4dbbbb758bb8f7, s.Struct)
	return str
}

func (s Fertilizer_parameters_Results) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Fertilizer_parameters_Results) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Fertilizer_parameters_Results) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Fertilizer_parameters_Results_List is a list of Fertilizer_parameters_Results.
type Fertilizer_parameters_Results_List struct{ capnp.List }

// NewFertilizer_parameters_Results creates a new list of Fertilizer_parameters_Results.
func NewFertilizer_parameters_Results_List(s *capnp.Segment, sz int32) (Fertilizer_parameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Fertilizer_parameters_Results_List{l}, err
}

func (s Fertilizer_parameters_Results_List) At(i int) Fertilizer_parameters_Results {
	return Fertilizer_parameters_Results{s.List.Struct(i)}
}

func (s Fertilizer_parameters_Results_List) Set(i int, v Fertilizer_parameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Fertilizer_parameters_Results_List) String() string {
	str, _ := text.MarshalList(0xfd4dbbbb758bb8f7, s.List)
	return str
}

// Fertilizer_parameters_Results_Future is a wrapper for a Fertilizer_parameters_Results promised by a client call.
type Fertilizer_parameters_Results_Future struct{ *capnp.Future }

func (p Fertilizer_parameters_Results_Future) Struct() (Fertilizer_parameters_Results, error) {
	s, err := p.Future.Struct()
	return Fertilizer_parameters_Results{s}, err
}

func (p Fertilizer_parameters_Results_Future) Params() *capnp.Future {
	return p.Future.Field(0, nil)
}

type FertilizerService struct{ Client *capnp.Client }

// FertilizerService_TypeID is the unique identifier for the type FertilizerService.
const FertilizerService_TypeID = 0xbbb7aeae0d097e05

func (c FertilizerService) SupportedCategories(ctx context.Context, params func(registry.Registry_supportedCategories_Params) error) (registry.Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) CategoryInfo(ctx context.Context, params func(registry.Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c FertilizerService) Entries(ctx context.Context, params func(registry.Registry_entries_Params) error) (registry.Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c FertilizerService) AddRef() FertilizerService {
	return FertilizerService{
		Client: c.Client.AddRef(),
	}
}

func (c FertilizerService) Release() {
	c.Client.Release()
}

// A FertilizerService_Server is a FertilizerService with a local implementation.
type FertilizerService_Server interface {
	SupportedCategories(context.Context, registry.Registry_supportedCategories) error

	CategoryInfo(context.Context, registry.Registry_categoryInfo) error

	Entries(context.Context, registry.Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// FertilizerService_NewServer creates a new Server from an implementation of FertilizerService_Server.
func FertilizerService_NewServer(s FertilizerService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(FertilizerService_Methods(nil, s), s, c, policy)
}

// FertilizerService_ServerToClient creates a new Client from an implementation of FertilizerService_Server.
// The caller is responsible for calling Release on the returned Client.
func FertilizerService_ServerToClient(s FertilizerService_Server, policy *server.Policy) FertilizerService {
	return FertilizerService{Client: capnp.NewClient(FertilizerService_NewServer(s, policy))}
}

// FertilizerService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func FertilizerService_Methods(methods []server.Method, s FertilizerService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, registry.Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, registry.Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, registry.Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xc876b729b7d7f6d9

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{Struct: r}, err
}

type Service_managementAt_Results struct{ capnp.Struct }

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xcca7748d367db151

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{st}, err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{st}, err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results{root.Struct()}, err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xcca7748d367db151, s.Struct)
	return str
}

func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := s.Struct.Ptr(0)
	return Event_List{List: p.List()}, err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List struct{ capnp.List }

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_managementAt_Results_List{l}, err
}

func (s Service_managementAt_Results_List) At(i int) Service_managementAt_Results {
	return Service_managementAt_Results{s.List.Struct(i)}
}

func (s Service_managementAt_Results_List) Set(i int, v Service_managementAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_managementAt_Results_List) String() string {
	str, _ := text.MarshalList(0xcca7748d367db151, s.List)
	return str
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (p Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_managementAt_Results{s}, err
}

const schema_b30a3af53cea6b3e = "x\xda\xccY}p\x15U\x96?\xa7\xfb=\x1eAB" +
	"\xe7\xd2\xc1$H|\x84\x85\x12R\x9a\x01\x822\xb2:" +
	"!_,\xc9\x12H\xe7\x85EPj\xe9\xbc\xdc\xbc4" +
	"\xbe\xd7\xfd\xe8\xee\x17\x88\x0a\x19(gGY\\KW" +
	"J\xf1cK\xc7\xb1\\)\xcbq\x98aD\xc5\x1d\x99" +
	"\x92\xf5\x03g\x1c\xfc\xd8]\xdd\x99\xad\xf2\x83\xdd\xd1\x1a" +
	"vg\xaa\xd6\xd5A\xa5\xb7\xce\xed\xf7\xba;/\x89:" +
	"\xffl-\xff\xf0r\xfa\xf4\xbd\xe7\x9e{\xce\xef\xfc\xce" +
	"\xe9\xa553VK\xcb\xe2\xdf\xb8\x08 u\x15\xc6\xa7" +
	"y\xbfy\xec\xe5?m\x99\xf3\x8bo\x83V\x8b\xe8\xd5" +
	"\xbc\xbc\xe2O\xf6\xde\xb4\xf0\x01\x88K\x09\x00uw\xe5" +
	"9\xf5\xd6J\xfa\xf5\x9d\xca\x1f\x00zGV^p\xa0" +
	"\xf7\xc8\xb5\xfb\x80\xcd\x97\xbc\xfa\xf6\xf6__\xf6\x97/" +
	"\x9e\x07\xc0\xe6E\xb3\xe6\xa2z\xf9,\xd2\\6k%" +
	"\xa0\xf7\xf0\x8ekk\x0ev>\xba\x0f\x18\x93\xbco]" +
	"\xff\xd1U\x1f\xaf\x9a\xf1#\x00RzGm%\xc5\xe6" +
	"\xabg]\x82\x80\xdeU\xff\xddr\xc5\x85\xc7\xce\x7f\xb7" +
	"\xdc\x00$\x1d\xa6\xccE\xb5A\xa1u\xeb\x95\x9d\x80^" +
	"\xff\xe5\xdb>\xfd\x9b\x9b\x1f\xb9\xa5L;F\xcaw(" +
	"\x12\xaa\x0f\x08\xe5CJ\x0b\xa0\xf7\xe2\x13gf\xfc\xd3" +
	"\xb1u\x07\x801y\x9c\x11O+\xef\xa9'\x85\xe2\x09" +
	"\xe5\xbbj]\xd5%\x00\x1e\xbf\xa2\xf2\xe4\xfb?\xfa\xc9" +
	"\x01\xd0\xe6c\xdc\xfb\xaf[\xdb\x9e\xbc\xf6\xcc\x9b\xff\xe9" +
	"\xaf\xcc\xaa\xeeDuI\x15\xfd\\T\xb5\x89\xacv\xfe" +
	"\xf6\x9a\xf9/\xfc\xc3\xcc\xdb\x85'\x02e\xc0\xe6\x87X" +
	"\x1f\xaaG\x19\xad\xfdCF\x9eX\xf1\xf9E\xc77\xdd" +
	"\xf5\xe0\xed\xc0j$\xaf\xed\xa5{3_\x9c\xddz?" +
	"i\x9e`\xb3Q=-4\x7f\xce2\xb4\xe6\xc7of" +
	"\x1e/4\x1f\xa4\xb3\xc9\xe5\x9e\xc0\xd9\xdbQ\x9d3\x9b" +
	"\xb4\xd9\xec\xff\x00\xf4\x1e{\xeb\xc5\xeew\x8f]y\x10" +
	"\xb4\x1a\xc4p\xe19\xb1\x04\x02\xa8\x1f\xce>\x07\xa8\x9e" +
	"\x9dM>\xfb\xc9s\xff\xba\xe7\xe8\xf0\x8d\xf7\x00\x9b+" +
	"y\xdf\xfa\xfe\x0d\xef.o?\x7f\x98\xdc\xd0\xa3\x9eS" +
	"7\xab\xb4\xe4Fu\x03\xa0\xf7\xf9\xdf}r.v\xf1" +
	"\x82{\xc9\x05rx\xbf\xc2\x059\xb5\x11\xd5\xdd\xa4\xdc" +
	"<\xaa&\xc9\x05\xc1\x96\x1aC\x0c\xdd\xdb\x19K\xc8\x88" +
	"\xea\xc1\xeag\xd4\x07\xaaW\x024\x9f\xac\xbe\x9d\xd4\x83" +
	"\xf30\x16\xd1\xa6\xb5\xd5/\xe6\xfcL\x8d_\xf8(\xc8" +
	"\xde\xf0\xa7\xbf\\\xf7\xd3\xd7\xf7>\x00\xdab\x94\xbd\x1f" +
	"\x7ft\xd3\x9eC\x1d\xaf\xbd\xe6[\xb0\xf7\xc2\xef\xa1z" +
	"\xe8Bz\xe1\xe0\x85\x14\x8d\xc1Q4\x86R\xd9\x92]" +
	"5\xaf\xab\x1bk.\x01P\x8d\x1a\xd2\xdd\xd6\xff\x8b\xfb" +
	"\x16\x8d,y\x02\xd8<\x84\xa2K\xe3\xb56\x02\xaa\xac" +
	"\x96b%\xbe\xa7\xa2\xf2\x89'\x9ez\xb6<V\x9a;" +
	"k\xe7\xa2\xba\xb1\x96\x16\xd5j\x13\xaaV[\x03\xe0\x99" +
	"\x9f\xb5\xbfv\xef\xa6\xeb\x8fOpik\xed9\xb5\x87" +
	"\x94\x9b\xbbj\x15:\xf6\x07\xbd\xc7\x9f\xfa\xb8Q~\xde" +
	"\xdfX\x1c\xe4\x0f\xb4o\xcc\xfb\xb7\xb6\xab\x8fUW\xbc" +
	"\xf5\xb3\x09)r\xa6\xf6=\xf5\xf7b\xc3\xb3\xb5w\x03" +
	"z\xec\x9b\x9f\xcex\xba\xea\xafNN~\xd3\xcb\xea>" +
	"\xa2\xb4\xaa\xa3\x9b\xfe\xc6%\x17\x9dI\x1ez\xe1\x1f'" +
	"\xd7\xbc\xa3\xeeu@\xf5`\x1d\x1d\xf7\xed\xff\xf9\xe7\xa7" +
	"\x96<5\xf2\xd2\x84\xd48Z\xf7\x8az\xa2\x8e6\x7f" +
	"\xae\xee\xcf\xd4\x0f\xeb\xe8\xb4\x175\xde\xf3\xab\x0d\x03[" +
	"NE\xce\xf0v\xddv:\x83\xf6\xc3\xddW\xdc\xe6>" +
	"\xfa*\xb0\xba\xc0\xad'\xeb\x84[O\x8b}\x82+\xd4" +
	"jqz\x19\xbc4\xe3\xdc6T\xd9\xdc\x1a\x80\xe6\xfa" +
	"\xb9+%@\xaf\xe1\xedE7~\xb4\xf4\x9d7&\x05" +
	"\x83;\xe6mG\xf5\x91yd\xdbC\xf3\xe8\xb8\x9b\xdf" +
	"?p\xff[\xce\xd9w\xcb\x8e\xdb\x91\x90\x10U\xac\x7f" +
	"O\xad\xac'\xe5\x8azR>\x9d\xdd\xab\xac\xd8\xf3\xf0" +
	"\xfb\xb4t\xbc|\xe9\\}7\xaa{I\xbbyw\xbd" +
	"H\xf0\x9f\x1fyR\xf9l\xe4\xc0\x87\xa4.\x95\xab\x9f" +
	"\xb9x;\xaa\x7f\xb8\x98\x16\xff\xf8b\x0a\xaf\x00\x01&" +
	"\xb3\xfb`RB\xf5\xa1$\x05\xe3\x89$\x99r\xdf\xcc" +
	"\xa3\xb3.\xfb\xed\xbe\xdfM\x80\x84E\xf3\x17\xa0z\xf9" +
	"|\x01\xa3\xf3?\x01\xf4\xbew\xdfj\xfb\x83\xf4\x8b\xbf" +
	"\x9b\x00\xb8\xbf\x9e\xdf\x88\xeaY\xa1\xf9\xe1|\xca\xddO" +
	"\x8e\xfdu\xe1\xd9g{\xbe\x88\x0686\xdc@7Q" +
	"\xd9@7\x11\xbc=\x99\x89\x975H\xa8^\xd9\xb0\x12" +
	"@\xdd\xdc\xb0\x13<x\xcd\xcb\xe9\xa6\x9e\xe19.\x99" +
	"nSZ\xcf\x9b\xf9U\xbd\xba\xad\xe7\x9c\xa6\x96\x94\xb5" +
	"\xd303\xbd\x88\xdaL9\x06\x10C\x00\xd6\xd9\x0d\xa0" +
	"u\xc8\xa8\xf5J\x88X\x8d\x88\xc8z\xb6\x03h\xebd" +
	"\xd4\xae\x91\x90IX\x8d\x12\x00\xdb\xd8\x08\xa0\xf5\xca\xa8" +
	"]'\xa1\x97.d]cD\xb7\x01\x00g\x82\x843" +
	"\x01\xbd|V7\xdd\x0en\x82\xe2\x18\xee(&@\xc2" +
	"\x04\xa0\x92\xb6\xad<2\xef\xe6\xeb~\xba\xf0\xe1\xbbo" +
	"\xfb\x0d\x00\"\x03\x0c\xac\x94\xcb\xadl/\xb8\xaeaf" +
	"\x9a\xe4\xf6ud\xe9t\xb19[ \xde\xabh\x04H" +
	"\xa4\x0b\xae\x92\xe5C\xee$\x07\xed\x1c\xe1\xa6\xdb?*" +
	"\xe79\xbd\xbaT\xbcz\xeb*\xf1\xea\xde}\x00(\xb1" +
	"\xddm\x00(\xb3\xc2~\x00\x8c\xb1\xc2\x16\x00\x8c\xb3\x1d" +
	"$\x9c\xc6\x0c\x02\x82\x84\xff\xdft\xff\xbf\x0af\xd0\xb3" +
	"\x19L\xef\x06\xc0\x0b\xd8\xd6>\x80\x16G\xb8\xd1\xd3\x0b" +
	"\xae\x95\xd3]#\x96\xf6\xfd\x0a\xc3\xba=\xc2\x1d\x17J" +
	"\x0f\xd2k\x8b\x02\xf0\x0c\xdb62\xbak\x80l\x99c" +
	"\xae\x91\xcd\xea\x19\xeeYvF7\x8d\xf4\x1a\xe4\xb6k" +
	"d\x8d\x1bt\xc55,\xd3\xcb\x19&\xb7\xf5l\xb9\xd8" +
	"\xec\xe09\xdd\x1c,\x13\x8f\xa5}wy\x0ew\xffB" +
	"\xcf\x168\x00x\x8e>\xc2S\xae\xee\x02\xf2\xa9\xfd\xdc" +
	"U4I\xb6L\xe1\xe7 \"\x96\xac\x02\xd0\x16\xca\xa8" +
	"--F\x04\x00\xbb\xec\x19\x00m\xa9\x8c\xda:\x09[" +
	"\xf4\x9cU0]\xbc\x00$\xbc\x00\xd03\x0b\xaemp" +
	"\xd3\xc5v\xcbLs\xd3\xb5[t\xb2\xcc\xc1Y\x80\xbd" +
	"2bU\x14gI8\xb5M\xfd\xbeg\x80\x0c\x8a\xf9" +
	"\x06!\xb2\xca\xe5\x00\xdat\x19\xb5j\x09\x93\x83<\xef" +
	"\x0e\xfb{{\xcd\xe2\xdf\x1b-t\xe6\x89\xc1\xb0\xc6w" +
	"T\xe2\x06n\xfb\x07\x8cG\x10\x11Ku\x85-\xeb\x03" +
	"\x89-I`\x88\xf8XJIV\xbf\x05$6'\x11" +
	"\x1c\x11\xd0Y\x8d^\x9e\x8c\xe5.\x07\xd9vVS\x84" +
	"\xa2\xf7\xd6\xda\xfb7\x9f:\xfd\x83#d\x09?u\xc5" +
	"\xaf\x1e|\xe7\xd1\x13Q\xab\xe2\xe5'-\x86F\xd3\x86" +
	"\xbc\xdb\xae\xdb\x03\x96\xd9\x93\xc9\xb9\x1d\xba\x8b:\xd9Z" +
	"\x1b\x9c\xfd\xd0\x11\x00\xed~\x19\xb5\xbf\x97\x90\x95\xf2\xf3" +
	"\x91W\x00\xb4\xc7e\xd4\x8e\x95\xf2\x13\x91\x1d\xed\x03\xd0" +
	"~,\xa3\xf6\xbc\x84L\x96\xaaQFd\xcfm\x01\xd0" +
	"\x8e\xcb\xa8\xbd$!\x8b\xc9\xd5\x18Cd'\x0f\x03h" +
	"/\xc9\xa8\xbd)!\x8b\xc7\xaa1\x8e\xc8N\xbf\x0e\xa0" +
	"\xfd\x8b\x8c\xda\x07\x12zV\xd1*4\xdb-\xd3\xe1\xf6" +
	"HR\\)\"HH\x18K9\xdd\x95\xcb\xebR\xda" +
	"\xdd`\xae-\xe4\x0aN\x9b\x9e\xd5\xcd4\xa7$)\x86" +
	"\x05\xe9lt\xf4\x0c G%\xa4]\x80qQ^m" +
	"\xee\x18\x83\x05\xbe\x16d\xbe#x\xa7<#\xb8b\xaf" +
	"\x8d<\xce\xe9\xbb\xfa\xe85\xa9\xc0\xfbx\xda\x1a\xe1\xf6" +
	"\x1a[O\xbb\x86\x85fD\xc7\xf7xl*\x8f\xb7\x17" +
	"\xedB\x1e\x81\x97\x01\x81\x11\x95w\x02x\x19\x9bs\xb3" +
	"G7!Q\xb0\xb97`X9\xddqz\xd1\xb6\x06" +
	"\x0b\xfeV\x93\x84\xaf\xc0\x9d\xa6\xdeanZ)\xb7\xb4" +
	"t\x95XzI\x9fXzQ\x9f\x80\x9f\x86n\x01?" +
	"\xf5\xdd\x14'9ng\xb8\x99\xa6,\x1d\xcaZ;\xb9" +
	"m\x98\x80\x19O7\xdda\xee\x18\x8e\x1f?n\xc16" +
	"\xdc\xd1h,M8\xd9\xfa\"2\x8c\x03\x06aA\x90" +
	"\xd3z\x1b\x80v\x9d\x8c\xdap\x98\xd3\x9cbcPF" +
	"-\x1fA\xf9\x1c\xe5\xda\xb0\x8c\x9aKQT\xe5G\xd1" +
	"\x0e\x12fe\xd4vI8V\xc4\xa1\xc0\xe1C\xc5m" +
	"A\xe66\xb2\x90\xba\xfb8\x1f\xcdW\xc0\xa4\xe3\xea\x19" +
	"\x8e\xd3@\x8aO\xc3\xc8e\x95!x\xd3@\x0bww" +
	"rn\x12*Ua5\xca\xe4H*T\x8be\xd4V" +
	"P&H\xd5\x18\x03`\xcb\x08\xab.\x95Q\xfb\xa6\x84" +
	"\x1e\xd7\xed\xac!\xf0\x16\xb0\xca\xbb\x8d-\x90\x1f?\xff" +
	"\xefw\x93!U\x80-Y\xdd\xe5\x8e;\xf1\xc1$F" +
	"\xac\xf7\xd3\xbd\xc5m\xdah\x1a\xae\xa8\x97\xc29\xf5\x8d" +
	"\xe2Ts\xba\xc5]\xb26\x00\xc5\xb4L\xee\x0d\xf9Q" +
	"h\x02\xc0X\x9e\xdb\x04\x82_]\xdf\x94T\x9e\xa7i" +
	"\xed\xea\xe0\x96v\x93\x9fw\xc9\xa8\xdd\\Jv\x00\xb6" +
	"\x97\x847\xc9\xa8\xdd\x12I\xf6\xefP1\xfe\xb6\x8c\xda" +
	"\x81H\xb2\xdfJ\x08p\x8b\x8c\xda]\x94\xec\x92\x9f\xec" +
	"w\xec\x07\xd0\xee\x92Q{P\xc2\xa4\xc8/TB\x06" +
	"\x0b\x88\x0a`r\x84*G\xe9\x92\x94\x82i\xb8\xa8\x84" +
	"\x14\xc6W\xf2\xd2\x05w\x83\xbd\x8e\x0f\x01\xd2\xd3\xa0\xa3" +
	",>\xe5\xbb\xf2\x96\xed\xf6r\x14\xc7'\x10/B\xc1" +
	"\xf3\x9bWG\x82\x17K\xeeh\xf1\xafZ\x9b\x89QZ" +
	"\xc5\xb6G\xda.\xb6%$\x8a\x8c5z\x9d\xbb\\n" +
	"\x9bz\x16\x94\xfe\xd1<\xf7J\xe9\x06r\x86\x0b\x896" +
	"/\xf0\xe4Q\xf2\xcf\x932j\xc7\xc3x\x7f\xba1\x04" +
	"\xc8J\xc9\xf30B\xbb\xd9ssA\xaa\x94\xcf\x930" +
	"\xe8\xcf\xd8#m U\xc6\xbe a@\xe5\xd9m\xcb" +
	"Abq\xb9\x9a\xe8\x17+P\xfc\xe5e\xd4n\x92\x90" +
	"M[Z\x8d\xd3\x01\xd8\xe8\xbe\xf0\x1a\x15w4O\xf8" +
	"\x17\x1c\xd1w\x97b\x98C\x16Vyo\xbc#\x9f?" +
	"\xb5\xe7\xd4\x9b\xc5X\x94uwl\xc0\x0f\xfd\xa4>\xe4" +
	"r\xbbE\xd4\x1a\x07g\x83\x84\xb3\x095\x0bf\xab\x9b" +
	"ru\xb4\xdd\x0dC\x1d\xfa(\x04\x90<\x15\xeb\xa3\x86" +
	"\x0c\xc3a\x01\xebZ\x15R{\xd6\xb9/$\xc0\xac\xb3" +
	"-\xa4\xda\xacu\x7f\xc8;\xe9I\xc0\xefY\xeb\xe1\xb0" +
	"\xdfe\x9d\x87C\xbe\xcd\xba\x0e\x87]>\xebi\x0b\x07" +
	"\x04\xackK\x91{z\xad\xe5\xa4\xa9\xc4\x91Z'\x90" +
	"\xa6\xb1b\xa6x=\x93\x13\xa2\xf5\x93\x12\"o\xc3\xa4" +
	"\xacj\xacH-\xbc\xae\x08\x13\x9b\xba<\x07\xd6\xf8V" +
	"6\xb5\x8edR\x96\x91\xedO\xf0\\>\xc2\x9f\x11Y" +
	"'\x15\xe8\xb52j\xfd\x94\xb31?\xd44\xaa\xb0\xfd" +
	"2j\xdb(g%\x1fZ\xb7\xbe\x12\xe2\xad\xe7XF" +
	"\xb6\x83\xe7]\x1c^c\xd9\xad#\xdcN\xea\x19\xc3\xcc" +
	"LBl\x06\xf5Q\xa7\xcbLYhd\xfby.\xbf" +
	"\xc9P\xccAkg\x89^{>\x19\xed\x1a\x92Z\x07" +
	"\xac\x11^\xb2\x93\xe7\xf2\x91R<%\xc2\xa1+\xd8K" +
	"\xd8\x14W4F\x86\x0e\xf1Fe\xbd\x9e\xe3\x0a\x81\xe0" +
	"\x14\x1dC\x80R=\xcb#n(\x15\x13\xad1\xec#" +
	"B\x0e\x05\x80J\xb8\xe5\x97!P`J\x11c&V" +
	"\xc0R\xcd\xe3vSi}ga\x1fO:\x85\xac\xeb" +
	"\x94($\x00\xab$h\x9c)\xa3\xb68j\x09\xfeQ" +
	"\x1c5\xdc+\xc5\xed\x11CNS\x95\xef\x95\xe3Z\x0c" +
	"\xd1;\xd6<m\xdb\xe9?\xbf\xf1\x95\xc9\xa9hXP" +
	"\xc8\xa1\x14@\x97\x0a\x07\xed\xf6\x0bJ\xa1M\x14\x94\x9c" +
	"\xdf\x9bP]\xc6\x18\xd3\xfbDo\xb2\xd5\xefM6v" +
	"\x8b\xdeD\xeb\x16\xbdIO\xb7\xe8M\xba\xb6\x8b\xde\xa4" +
	"s;\x80R\xb0\xb9>\xa6\xe7r\x96i\xe8c\xa6\xe1" +
	"\xda\xba\xcb\xbd\xfc\xb0\xe5\xe4\x87-\x1b\xe4\x82\xe3\xe5-" +
	"Ww\x1c\xa3\x00\x98\x1bs\x0a\xd9!R(\x12\xaev" +
	"2\xbb\xf8{}\xe4w\xef8\xb9\xb2Fw\xdc\xc8\x9f" +
	"\xa9\xac\xb5\xf3\xcb\xef\xa4\xc4\x94mgaoRd\xd6" +
	"d8E}\xe3\x06;\x91\xd1\x05i\xa9\x15\x9ei\xf5" +
	"=se\xa3\xf0\xcc\xb2\xe5\xc23K\x96\x0b\xcf4\xac" +
	"\x12\x9e\xa9[\x0e\xa0\xd8\x96E\xdd\xa0>\x94t\x86-" +
	"\xcbM\x0e\xd9\x05\xc3mq\\\xbbp\xbd\x9bt\x0a\x19" +
	"\xdd\x9e\x92d\xe8\x0a!l\x89b\xc4\x89b,\x0f;" +
	"\x1fA1\xa6Q\xeb\xd3\x18\xf2\x8e$\xa77\xb1*\xac" +
	"K>n+\x94\xa4AJN\xb9!\xba\x14\x92U\xc5" +
	"\xec\xa8l\x0c\xdb\x1aePw\xf9\xd7\xe2&\"\xf6\x88" +
	"h\xfb=\x12\xf54\x9f\xdd\xfe\xea\x95K?\xff\xfdo" +
	"\xb14\xd4al;H\xac\"\x11\xbc\x0e\x8a\xe9\xb6\xba" +
	"\xabQ\x84j\xb4W\xf9\x9a\x19\xd5\xab+\xe3./V" +
	"nNS\xe9\x09\xed3i\x02\x96\x0e\xbbPB%\x97" +
	"\xc9\xb9a\xe6E\xe6(\xe32/\xf6\x15\xa0\x0c\xe24" +
	"\xc1\xe0\x91\xe1\x80W\x82? \x9c\xd6\x16\xcb1D\xda" +
	"]\xad\xc0\xfd\x00\xa9\x99(c\xaa\x16\x09\xa0|\x9cV" +
	"\xe7\x08y-\xc9\x17b\x91II\x88j\x03\xda\x00\xa9" +
	"\xf9$\xbf\x14\x8b\x9d\x93\x8c\xa8.\x11\xf2\xc5$_\x81" +
	"\xc5\xe6)\x06\xa0.\x13\xeb\xac \xf9j\x92O\x8b\x8b" +
	"\x80R\xaf\xc6g\x00R\xabI\xbe\x8e\xe4\x89i\"\xa6" +
	"\xd4.<\x0c\x90ZG\xf2kH>=!\xe8\x84\xba" +
	"\x11\xbb\x01R\xfd$\xdfF\x86T\x08B\xa1n\xc5\x01" +
	"\x80\xd4u$\x1eF\x09)\x80*\x00T\x8e\xab\x00R" +
	"\xdbH\x9cE\x09\xbd\x9ca\x12\xf0\xf7\xe3\xb0\xcd\x9da" +
	"+;\x18)\x01~\x15\xe9\xe7H\x15\x84\x0a\x08\xc1I" +
	")^\x0d\xb3\x97X+$M\xb75\xb5)\xdanM" +
	"\x94\x97\xe8\xdc\xae\xe6A}\xb4\x17m\x9e6\xf2\xa9B" +
	"n\\\xb5\xd9\xd5^\xb0m\xa2z\x1d\xfah\xaf\xcd[" +
	"|\x95@\xc1\xe59\xfa\xbb\x15\xa9b\xb5\xe9\x0eW\xc8" +
	"\xec\xe0\xf1\x80\xeep\xbf\x80\x85k\xea\xd1\x8b\xc5\xaa\xf0" +
	"\xd6\x8b\xe4\xde\xaf\x82X\x15\x12\x9d\xb2\x04\x9a\x10L%" +
	"R1\xa1i\x8a\x0cB\xb6\x84\x99_\xaas\xe3\x1a\x8e" +
	"/o}\xca\xe7$S\xc1B\x7fb\xd4\x9fWM\x97" +
	"c3=\xcf\xdf:\xd2\xecT\xe2y\xaf\xb8ywq" +
	"\x0as\x15u;%6,\xeai\x19\xbf\xf4\x0c3\xfa" +
	"4\xe0\xd4S\x16\xd2\xf2\x14\x0bXXq\x1c\xe1'\x12" +
	";d\x03h\xf7\xc8\xa8}\xbfX\xe6\x89\x02=D\xc2" +
	"\x07e\xd4\x1e/\xa5\x10\x00{l\x7fdF!\xf2\x87" +
	"h\xf93\x00\xda1\x19\xb5\x17(y\xaa\xfc\x0e\xe5\xc4" +
	"\x00\x80\xf6\xbc\x8c\xda\xab\x12\x02\xf8H\xfc2\xf5\xab/" +
	"\xc8\xa8\xfdR\xfa\xbf\x8f\xcf\xe2\x1c\xaf\x1f\x12F\x8e\x8f" +
	"\xf7^\\\x91\x01\xc7\x8a\x0aX\x15\xfd\x80\xf4\xe5\xe1V" +
	"b\xa5\x13\xc2-\xc2\xab\xb6\x94Mb\x89V\xad\x8a\xd2" +
	"\xaa\xd5~\xf3\xa7\xd9\x91I\xec\x1f\x17\x83\x86\x99\xb6\xec" +
	"\xbceC\xd9@g\xcan\xb5\x14\x07\x82'\x86\xdf\xce" +
	"*\xfa\xc2\xcfn\xac\xe2N\xaf=\x1c\xf6x\x1b\x82\xe1" +
	"Q0\xd3*%\x15\xe2\xb8\xc8\x0e\x92j\xdf\xb8\xb8\xa6" +
	"F\x92\x0fR\xe4\"Hqa_q \xd5\x83\xfe\x8a" +
	":5\xf8\x81\x01e\xbe/\x1f\xcb\x94\xda\xc6 \xcf\x16" +
	"\x8b\x00\xdd\xe1\xcf\x85\x0d\x7f.\xcc}\xee\xb5\xd5\x9f\x0b" +
	"o\xf5\xe7\xc2\x9b}\xee\xa5\xf9sa\xcd\x9f\x0bk\xfe" +
	"\\Xk\xfb\xff:\x09\xfe\xea\xc9C\xd9Tc\x8bp" +
	"D\x9dOB\xd9\x02\x00\xaf8\xc4\x10\xad\xf5Xq\x04" +
	"\x96\xc8\xea\xc6\xd7f{}-|\x02\x03X\x15\xd2\x9d" +
	"\xf2\xb6\xf6\xabL\x061&\x08?b\xb3\xb9\x91\x0f," +
	"\x95\x8d\xe1\xf7OV\xd1(\xb7\xaf\x13\x07\x14\xf3\x95(" +
	"\x9a\x0f\x14\x03\xaf#\x08\xbce\xad30\xd2\xa1\x14\x1d" +
	"\x98\x82D\x9e\xa7C~\x12,^\xe4'\xe9\x82\xdb\xa3" +
	"\xefjud\xc7\xc8\x19Y\x91G}\xba\xcb{y\xf9" +
	"\xe4\x03\xf0\x7f\x03\x00\x00\xff\xffDY\x0e|"

func init() {
	schemas.Register(schema_b30a3af53cea6b3e,
		0x80ce153f3bc9a9e8,
		0x825bb2508c0b37b2,
		0x82a74595175b71a3,
		0x87feb816363ff43c,
		0x88a5848ef8603554,
		0x8c4cb8d60ae5aec7,
		0x8cb6b3e3c50d3665,
		0x8f0cbec420589373,
		0x8fa09457bc1bfc34,
		0x953375ac67d4f573,
		0x9539b8e14ac7d5a9,
		0x987b68b57edbbdb6,
		0x9a221e04faf79efc,
		0x9c5dedfd679ac842,
		0x9d247c812334c917,
		0x9d81d2bf4cd0f868,
		0xaafe4332e17aa43e,
		0xae2976259bce5460,
		0xbbb7aeae0d097e05,
		0xbc6b579acf43fb6e,
		0xc0032af5b7bc50e4,
		0xc2d50914b83d42de,
		0xc58610b90af83811,
		0xc6c4991fe51b272f,
		0xc876b729b7d7f6d9,
		0xcb5a624fdc982a1b,
		0xcca7748d367db151,
		0xcfcf44997e7ceab4,
		0xd3da30ea7b25d921,
		0xe1ed73d59c8ce359,
		0xe3a37e340f816cd1,
		0xe98c76fb0fb0b2cd,
		0xeed4e55bb04289ef,
		0xf082ec2d0eb50c9b,
		0xf0c763e472409ba2,
		0xfd4dbbbb758bb8f7,
		0xfec75f2ddd43431d)
}
