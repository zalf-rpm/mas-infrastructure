// Code generated by capnpc-go. DO NOT EDIT.

package management

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	math "math"
	strconv "strconv"
)

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0x82a74595175b71a3

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List = capnp.EnumList[EventType]

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	return capnp.NewEnumList[EventType](s, sz)
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xc2d50914b83d42de

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List = capnp.EnumList[PlantOrgan]

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	return capnp.NewEnumList[PlantOrgan](s, sz)
}

type Event capnp.Struct
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x9c5dedfd679ac842

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event(root.Struct()), err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x9c5dedfd679ac842, capnp.Struct(s))
	return str
}

func (s Event) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event) DecodeFromPtr(p capnp.Ptr) Event {
	return Event(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event) Which() Event_Which {
	return Event_Which(capnp.Struct(s).Uint16(2))
}
func (s Event) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Event) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Event_at) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_at) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_at) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_at) Date() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s Event_at) HasDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_at) SetDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Event_between) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_between) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_between) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_between) Earliest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s Event_between) HasEarliest() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_between) SetEarliest(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common.Date(p.Struct()), err
}

func (s Event_between) HasLatest() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Event_between) SetLatest(v common.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s Event_after) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_after) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_after) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_after) Event() (Event_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Event_Type(p.Struct()), err
}

func (s Event_after) HasEvent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(3)
}

func (s Event) HasParams() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(3, v)
}
func (s Event) RunAtStartOfDay() bool {
	return capnp.Struct(s).Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	capnp.Struct(s).SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Event](l), err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (f Event_Future) Struct() (Event, error) {
	p, err := f.Future.Ptr()
	return Event(p.Struct()), err
}
func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (f Event_at_Future) Struct() (Event_at, error) {
	p, err := f.Future.Ptr()
	return Event_at(p.Struct()), err
}
func (p Event_at_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (f Event_between_Future) Struct() (Event_between, error) {
	p, err := f.Future.Ptr()
	return Event_between(p.Struct()), err
}
func (p Event_between_Future) Earliest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_between_Future) Latest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (f Event_after_Future) Struct() (Event_after, error) {
	p, err := f.Future.Ptr()
	return Event_after(p.Struct()), err
}
func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xf082ec2d0eb50c9b

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List = capnp.EnumList[Event_ExternalType]

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	return capnp.NewEnumList[Event_ExternalType](s, sz)
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0x8fa09457bc1bfc34

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List = capnp.EnumList[Event_PhenoStage]

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	return capnp.NewEnumList[Event_PhenoStage](s, sz)
}

type Event_Type capnp.Struct
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xe1ed73d59c8ce359

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type(root.Struct()), err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xe1ed73d59c8ce359, capnp.Struct(s))
	return str
}

func (s Event_Type) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event_Type) DecodeFromPtr(p capnp.Ptr) Event_Type {
	return Event_Type(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event_Type) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(capnp.Struct(s).Uint16(2))
}
func (s Event_Type) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_Type) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_Type) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_Type) External() Event_ExternalType {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List = capnp.StructList[Event_Type]

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Event_Type](l), err
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (f Event_Type_Future) Struct() (Event_Type, error) {
	p, err := f.Future.Ptr()
	return Event_Type(p.Struct()), err
}

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0x9d247c812334c917

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0x9d247c812334c917, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Params_Sowing capnp.Struct

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0x80ce153f3bc9a9e8

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Sowing(st), err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Sowing(st), err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing(root.Struct()), err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0x80ce153f3bc9a9e8, capnp.Struct(s))
	return str
}

func (s Params_Sowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Sowing) DecodeFromPtr(p capnp.Ptr) Params_Sowing {
	return Params_Sowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Sowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Sowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Sowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Sowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Sowing) Cultivar() crop.Cultivar {
	return crop.Cultivar(capnp.Struct(s).Uint16(0))
}

func (s Params_Sowing) SetCultivar(v crop.Cultivar) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_Sowing) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := capnp.Struct(s).Ptr(0)
	return crop.Crop(p.Interface().Client())
}

func (s Params_Sowing) HasCrop() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List = capnp.StructList[Params_Sowing]

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Sowing](l), err
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (f Params_Sowing_Future) Struct() (Params_Sowing, error) {
	p, err := f.Future.Ptr()
	return Params_Sowing(p.Struct()), err
}
func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop(p.Future.Field(0, nil).Client())
}

type Params_AutomaticSowing capnp.Struct

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xcfcf44997e7ceab4

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing(root.Struct()), err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xcfcf44997e7ceab4, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing {
	return Params_AutomaticSowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Params_Sowing(p.Struct()), err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(capnp.Struct(s).Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List = capnp.StructList[Params_AutomaticSowing]

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return capnp.StructList[Params_AutomaticSowing](l), err
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing(p.Struct()), err
}
func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}
func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp capnp.Struct

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x9d81d2bf4cd0f868

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp(root.Struct()), err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x9d81d2bf4cd0f868, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing_AvgSoilTemp) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing_AvgSoilTemp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing_AvgSoilTemp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List = capnp.StructList[Params_AutomaticSowing_AvgSoilTemp]

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_AutomaticSowing_AvgSoilTemp](l), err
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

type Params_Harvest capnp.Struct

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0xeed4e55bb04289ef

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest(root.Struct()), err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0xeed4e55bb04289ef, capnp.Struct(s))
	return str
}

func (s Params_Harvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest) DecodeFromPtr(p capnp.Ptr) Params_Harvest {
	return Params_Harvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest) Exported() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List = capnp.StructList[Params_Harvest]

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Harvest](l), err
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (f Params_Harvest_Future) Struct() (Params_Harvest, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest(p.Struct()), err
}
func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0x8f0cbec420589373

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List = capnp.EnumList[Params_Harvest_CropUsage]

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	return capnp.NewEnumList[Params_Harvest_CropUsage](s, sz)
}

type Params_Harvest_OptCarbonMgmtData capnp.Struct

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0x8cb6b3e3c50d3665

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData(root.Struct()), err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0x8cb6b3e3c50d3665, capnp.Struct(s))
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest_OptCarbonMgmtData) DecodeFromPtr(p capnp.Ptr) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest_OptCarbonMgmtData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest_OptCarbonMgmtData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest_OptCarbonMgmtData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest_OptCarbonMgmtData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List = capnp.StructList[Params_Harvest_OptCarbonMgmtData]

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[Params_Harvest_OptCarbonMgmtData](l), err
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (f Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

type Params_AutomaticHarvest capnp.Struct

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xe3a37e340f816cd1

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest(root.Struct()), err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xe3a37e340f816cd1, capnp.Struct(s))
	return str
}

func (s Params_AutomaticHarvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticHarvest) DecodeFromPtr(p capnp.Ptr) Params_AutomaticHarvest {
	return Params_AutomaticHarvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticHarvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticHarvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticHarvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticHarvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest(p.Struct()), err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(capnp.Struct(s).Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List = capnp.StructList[Params_AutomaticHarvest]

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[Params_AutomaticHarvest](l), err
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (f Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticHarvest(p.Struct()), err
}
func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting capnp.Struct

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0xfec75f2ddd43431d

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting(root.Struct()), err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0xfec75f2ddd43431d, capnp.Struct(s))
	return str
}

func (s Params_Cutting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting) DecodeFromPtr(p capnp.Ptr) Params_Cutting {
	return Params_Cutting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Cutting_Spec_List(p.List()), err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List = capnp.StructList[Params_Cutting]

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Cutting](l), err
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (f Params_Cutting_Future) Struct() (Params_Cutting, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting(p.Struct()), err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0x825bb2508c0b37b2

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List = capnp.EnumList[Params_Cutting_CL]

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	return capnp.NewEnumList[Params_Cutting_CL](s, sz)
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0xf0c763e472409ba2

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List = capnp.EnumList[Params_Cutting_Unit]

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	return capnp.NewEnumList[Params_Cutting_Unit](s, sz)
}

type Params_Cutting_Spec capnp.Struct

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0x9a221e04faf79efc

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec(root.Struct()), err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0x9a221e04faf79efc, capnp.Struct(s))
	return str
}

func (s Params_Cutting_Spec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting_Spec) DecodeFromPtr(p capnp.Ptr) Params_Cutting_Spec {
	return Params_Cutting_Spec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting_Spec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting_Spec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting_Spec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting_Spec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(capnp.Struct(s).Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(capnp.Struct(s).Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(capnp.Struct(s).Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List = capnp.StructList[Params_Cutting_Spec]

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_Cutting_Spec](l), err
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (f Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting_Spec(p.Struct()), err
}

type Params_MineralFertilization capnp.Struct

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xd3da30ea7b25d921

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization(root.Struct()), err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xd3da30ea7b25d921, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization {
	return Params_MineralFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_MineralFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_MineralFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List = capnp.StructList[Params_MineralFertilization]

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_MineralFertilization](l), err
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization(p.Struct()), err
}
func (p Params_MineralFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_MineralFertilization_Parameters capnp.Struct

// Params_MineralFertilization_Parameters_TypeID is the unique identifier for the type Params_MineralFertilization_Parameters.
const Params_MineralFertilization_Parameters_TypeID = 0xfcd78361390515e1

func NewParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func NewRootParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func ReadRootParams_MineralFertilization_Parameters(msg *capnp.Message) (Params_MineralFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_MineralFertilization_Parameters(root.Struct()), err
}

func (s Params_MineralFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xfcd78361390515e1, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization_Parameters {
	return Params_MineralFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_MineralFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_MineralFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_MineralFertilization_Parameters) Carbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization_Parameters) SetCarbamid(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) Nh4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_MineralFertilization_Parameters) SetNh4(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) No3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_MineralFertilization_Parameters) SetNo3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_MineralFertilization_Parameters_List is a list of Params_MineralFertilization_Parameters.
type Params_MineralFertilization_Parameters_List = capnp.StructList[Params_MineralFertilization_Parameters]

// NewParams_MineralFertilization_Parameters creates a new list of Params_MineralFertilization_Parameters.
func NewParams_MineralFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[Params_MineralFertilization_Parameters](l), err
}

// Params_MineralFertilization_Parameters_Future is a wrapper for a Params_MineralFertilization_Parameters promised by a client call.
type Params_MineralFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Parameters_Future) Struct() (Params_MineralFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

type Params_NDemandFertilization capnp.Struct

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0x953375ac67d4f573

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization(root.Struct()), err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0x953375ac67d4f573, capnp.Struct(s))
	return str
}

func (s Params_NDemandFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_NDemandFertilization) DecodeFromPtr(p capnp.Ptr) Params_NDemandFertilization {
	return Params_NDemandFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_NDemandFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_NDemandFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_NDemandFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_NDemandFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_NDemandFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_NDemandFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_NDemandFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return capnp.Struct(s).Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	capnp.Struct(s).SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List = capnp.StructList[Params_NDemandFertilization]

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Params_NDemandFertilization](l), err
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (f Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_NDemandFertilization(p.Struct()), err
}
func (p Params_NDemandFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization capnp.Struct

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xe98c76fb0fb0b2cd

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization(root.Struct()), err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xe98c76fb0fb0b2cd, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization {
	return Params_OrganicFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}

func (s Params_OrganicFertilization) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization) SetParams(v Params_OrganicFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List = capnp.StructList[Params_OrganicFertilization]

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Params_OrganicFertilization](l), err
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization(p.Struct()), err
}
func (p Params_OrganicFertilization_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization_OrganicMatterParameters capnp.Struct

// Params_OrganicFertilization_OrganicMatterParameters_TypeID is the unique identifier for the type Params_OrganicFertilization_OrganicMatterParameters.
const Params_OrganicFertilization_OrganicMatterParameters_TypeID = 0x962b157a9dc85681

func NewParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func NewRootParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func ReadRootParams_OrganicFertilization_OrganicMatterParameters(msg *capnp.Message) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_OrganicMatterParameters(root.Struct()), err
}

func (s Params_OrganicFertilization_OrganicMatterParameters) String() string {
	str, _ := text.Marshal(0x962b157a9dc85681, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_OrganicMatterParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_OrganicMatterParameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_OrganicMatterParameters {
	return Params_OrganicFertilization_OrganicMatterParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNO3Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNO3Content(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomCarbamidContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomCarbamidContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMFast(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) NConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// Params_OrganicFertilization_OrganicMatterParameters_List is a list of Params_OrganicFertilization_OrganicMatterParameters.
type Params_OrganicFertilization_OrganicMatterParameters_List = capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters]

// NewParams_OrganicFertilization_OrganicMatterParameters creates a new list of Params_OrganicFertilization_OrganicMatterParameters.
func NewParams_OrganicFertilization_OrganicMatterParameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_OrganicMatterParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters](l), err
}

// Params_OrganicFertilization_OrganicMatterParameters_Future is a wrapper for a Params_OrganicFertilization_OrganicMatterParameters promised by a client call.
type Params_OrganicFertilization_OrganicMatterParameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_OrganicMatterParameters_Future) Struct() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

type Params_OrganicFertilization_Parameters capnp.Struct

// Params_OrganicFertilization_Parameters_TypeID is the unique identifier for the type Params_OrganicFertilization_Parameters.
const Params_OrganicFertilization_Parameters_TypeID = 0xb0919989cca2fd9a

func NewParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func NewRootParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func ReadRootParams_OrganicFertilization_Parameters(msg *capnp.Message) (Params_OrganicFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_Parameters(root.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xb0919989cca2fd9a, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_Parameters {
	return Params_OrganicFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_Parameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization_Parameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization_Parameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_OrganicFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_OrganicFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Params_OrganicFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Params_OrganicFertilization_Parameters_List is a list of Params_OrganicFertilization_Parameters.
type Params_OrganicFertilization_Parameters_List = capnp.StructList[Params_OrganicFertilization_Parameters]

// NewParams_OrganicFertilization_Parameters creates a new list of Params_OrganicFertilization_Parameters.
func NewParams_OrganicFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Params_OrganicFertilization_Parameters](l), err
}

// Params_OrganicFertilization_Parameters_Future is a wrapper for a Params_OrganicFertilization_Parameters promised by a client call.
type Params_OrganicFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Parameters_Future) Struct() (Params_OrganicFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}
func (p Params_OrganicFertilization_Parameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Tillage capnp.Struct

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0x88a5848ef8603554

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage(root.Struct()), err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0x88a5848ef8603554, capnp.Struct(s))
	return str
}

func (s Params_Tillage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Tillage) DecodeFromPtr(p capnp.Ptr) Params_Tillage {
	return Params_Tillage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Tillage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Tillage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Tillage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Tillage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List = capnp.StructList[Params_Tillage]

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Params_Tillage](l), err
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (f Params_Tillage_Future) Struct() (Params_Tillage, error) {
	p, err := f.Future.Ptr()
	return Params_Tillage(p.Struct()), err
}

type Params_Irrigation capnp.Struct

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0x87feb816363ff43c

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation(root.Struct()), err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0x87feb816363ff43c, capnp.Struct(s))
	return str
}

func (s Params_Irrigation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation) DecodeFromPtr(p capnp.Ptr) Params_Irrigation {
	return Params_Irrigation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s Params_Irrigation) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Irrigation) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s Params_Irrigation) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List = capnp.StructList[Params_Irrigation]

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Irrigation](l), err
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (f Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation(p.Struct()), err
}
func (p Params_Irrigation_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Irrigation_Parameters capnp.Struct

// Params_Irrigation_Parameters_TypeID is the unique identifier for the type Params_Irrigation_Parameters.
const Params_Irrigation_Parameters_TypeID = 0xb991be9572278e2d

func NewParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func NewRootParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func ReadRootParams_Irrigation_Parameters(msg *capnp.Message) (Params_Irrigation_Parameters, error) {
	root, err := msg.Root()
	return Params_Irrigation_Parameters(root.Struct()), err
}

func (s Params_Irrigation_Parameters) String() string {
	str, _ := text.Marshal(0xb991be9572278e2d, capnp.Struct(s))
	return str
}

func (s Params_Irrigation_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation_Parameters) DecodeFromPtr(p capnp.Ptr) Params_Irrigation_Parameters {
	return Params_Irrigation_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation_Parameters) NitrateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation_Parameters) SetNitrateConcentration(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation_Parameters) SulfateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Irrigation_Parameters) SetSulfateConcentration(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Params_Irrigation_Parameters_List is a list of Params_Irrigation_Parameters.
type Params_Irrigation_Parameters_List = capnp.StructList[Params_Irrigation_Parameters]

// NewParams_Irrigation_Parameters creates a new list of Params_Irrigation_Parameters.
func NewParams_Irrigation_Parameters_List(s *capnp.Segment, sz int32) (Params_Irrigation_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_Irrigation_Parameters](l), err
}

// Params_Irrigation_Parameters_Future is a wrapper for a Params_Irrigation_Parameters promised by a client call.
type Params_Irrigation_Parameters_Future struct{ *capnp.Future }

func (f Params_Irrigation_Parameters_Future) Struct() (Params_Irrigation_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation_Parameters(p.Struct()), err
}

type Nutrient capnp.Struct

// Nutrient_TypeID is the unique identifier for the type Nutrient.
const Nutrient_TypeID = 0xaafe4332e17aa43e

func NewNutrient(s *capnp.Segment) (Nutrient, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Nutrient(st), err
}

func NewRootNutrient(s *capnp.Segment) (Nutrient, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Nutrient(st), err
}

func ReadRootNutrient(msg *capnp.Message) (Nutrient, error) {
	root, err := msg.Root()
	return Nutrient(root.Struct()), err
}

func (s Nutrient) String() string {
	str, _ := text.Marshal(0xaafe4332e17aa43e, capnp.Struct(s))
	return str
}

func (s Nutrient) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Nutrient) DecodeFromPtr(p capnp.Ptr) Nutrient {
	return Nutrient(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Nutrient) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Nutrient) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Nutrient) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Nutrient) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Nutrient) Nutrient() Nutrient_Name {
	return Nutrient_Name(capnp.Struct(s).Uint16(0))
}

func (s Nutrient) SetNutrient(v Nutrient_Name) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Nutrient) Unit() Nutrient_Unit {
	return Nutrient_Unit(capnp.Struct(s).Uint16(2))
}

func (s Nutrient) SetUnit(v Nutrient_Unit) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

// Nutrient_List is a list of Nutrient.
type Nutrient_List = capnp.StructList[Nutrient]

// NewNutrient creates a new list of Nutrient.
func NewNutrient_List(s *capnp.Segment, sz int32) (Nutrient_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Nutrient](l), err
}

// Nutrient_Future is a wrapper for a Nutrient promised by a client call.
type Nutrient_Future struct{ *capnp.Future }

func (f Nutrient_Future) Struct() (Nutrient, error) {
	p, err := f.Future.Ptr()
	return Nutrient(p.Struct()), err
}

type Nutrient_Name uint16

// Nutrient_Name_TypeID is the unique identifier for the type Nutrient_Name.
const Nutrient_Name_TypeID = 0xbc6b579acf43fb6e

// Values of Nutrient_Name.
const (
	Nutrient_Name_urea         Nutrient_Name = 0
	Nutrient_Name_ammonia      Nutrient_Name = 1
	Nutrient_Name_nitrate      Nutrient_Name = 2
	Nutrient_Name_phosphorus   Nutrient_Name = 3
	Nutrient_Name_potassium    Nutrient_Name = 4
	Nutrient_Name_sulfate      Nutrient_Name = 5
	Nutrient_Name_organiceC    Nutrient_Name = 6
	Nutrient_Name_organicN     Nutrient_Name = 7
	Nutrient_Name_organicP     Nutrient_Name = 8
	Nutrient_Name_organicNFast Nutrient_Name = 9
	Nutrient_Name_organicNSlow Nutrient_Name = 10
)

// String returns the enum's constant name.
func (c Nutrient_Name) String() string {
	switch c {
	case Nutrient_Name_urea:
		return "urea"
	case Nutrient_Name_ammonia:
		return "ammonia"
	case Nutrient_Name_nitrate:
		return "nitrate"
	case Nutrient_Name_phosphorus:
		return "phosphorus"
	case Nutrient_Name_potassium:
		return "potassium"
	case Nutrient_Name_sulfate:
		return "sulfate"
	case Nutrient_Name_organiceC:
		return "organiceC"
	case Nutrient_Name_organicN:
		return "organicN"
	case Nutrient_Name_organicP:
		return "organicP"
	case Nutrient_Name_organicNFast:
		return "organicNFast"
	case Nutrient_Name_organicNSlow:
		return "organicNSlow"

	default:
		return ""
	}
}

// Nutrient_NameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Nutrient_NameFromString(c string) Nutrient_Name {
	switch c {
	case "urea":
		return Nutrient_Name_urea
	case "ammonia":
		return Nutrient_Name_ammonia
	case "nitrate":
		return Nutrient_Name_nitrate
	case "phosphorus":
		return Nutrient_Name_phosphorus
	case "potassium":
		return Nutrient_Name_potassium
	case "sulfate":
		return Nutrient_Name_sulfate
	case "organiceC":
		return Nutrient_Name_organiceC
	case "organicN":
		return Nutrient_Name_organicN
	case "organicP":
		return Nutrient_Name_organicP
	case "organicNFast":
		return Nutrient_Name_organicNFast
	case "organicNSlow":
		return Nutrient_Name_organicNSlow

	default:
		return 0
	}
}

type Nutrient_Name_List = capnp.EnumList[Nutrient_Name]

func NewNutrient_Name_List(s *capnp.Segment, sz int32) (Nutrient_Name_List, error) {
	return capnp.NewEnumList[Nutrient_Name](s, sz)
}

type Nutrient_Unit uint16

// Nutrient_Unit_TypeID is the unique identifier for the type Nutrient_Unit.
const Nutrient_Unit_TypeID = 0x987b68b57edbbdb6

// Values of Nutrient_Unit.
const (
	Nutrient_Unit_percent  Nutrient_Unit = 0
	Nutrient_Unit_fraction Nutrient_Unit = 1
)

// String returns the enum's constant name.
func (c Nutrient_Unit) String() string {
	switch c {
	case Nutrient_Unit_percent:
		return "percent"
	case Nutrient_Unit_fraction:
		return "fraction"

	default:
		return ""
	}
}

// Nutrient_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Nutrient_UnitFromString(c string) Nutrient_Unit {
	switch c {
	case "percent":
		return Nutrient_Unit_percent
	case "fraction":
		return Nutrient_Unit_fraction

	default:
		return 0
	}
}

type Nutrient_Unit_List = capnp.EnumList[Nutrient_Unit]

func NewNutrient_Unit_List(s *capnp.Segment, sz int32) (Nutrient_Unit_List, error) {
	return capnp.NewEnumList[Nutrient_Unit](s, sz)
}

type FertilizerService capnp.Client

// FertilizerService_TypeID is the unique identifier for the type FertilizerService.
const FertilizerService_TypeID = 0xbbb7aeae0d097e05

func (c FertilizerService) AvailableMineralFertilizers(ctx context.Context, params func(FertilizerService_availableMineralFertilizers_Params) error) (FertilizerService_availableMineralFertilizers_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      0,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "availableMineralFertilizers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(FertilizerService_availableMineralFertilizers_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return FertilizerService_availableMineralFertilizers_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) MineralFertilizer(ctx context.Context, params func(FertilizerService_mineralFertilizer_Params) error) (FertilizerService_mineralFertilizer_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      1,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "mineralFertilizer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(FertilizerService_mineralFertilizer_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return FertilizerService_mineralFertilizer_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) AvailableOrganicFertilizers(ctx context.Context, params func(FertilizerService_availableOrganicFertilizers_Params) error) (FertilizerService_availableOrganicFertilizers_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      2,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "availableOrganicFertilizers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(FertilizerService_availableOrganicFertilizers_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return FertilizerService_availableOrganicFertilizers_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) OrganicFertilizer(ctx context.Context, params func(FertilizerService_organicFertilizer_Params) error) (FertilizerService_organicFertilizer_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      3,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "organicFertilizer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(FertilizerService_organicFertilizer_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return FertilizerService_organicFertilizer_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c FertilizerService) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c FertilizerService) AddRef() FertilizerService {
	return FertilizerService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c FertilizerService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c FertilizerService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c FertilizerService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (FertilizerService) DecodeFromPtr(p capnp.Ptr) FertilizerService {
	return FertilizerService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c FertilizerService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c FertilizerService) IsSame(other FertilizerService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c FertilizerService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c FertilizerService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A FertilizerService_Server is a FertilizerService with a local implementation.
type FertilizerService_Server interface {
	AvailableMineralFertilizers(context.Context, FertilizerService_availableMineralFertilizers) error

	MineralFertilizer(context.Context, FertilizerService_mineralFertilizer) error

	AvailableOrganicFertilizers(context.Context, FertilizerService_availableOrganicFertilizers) error

	OrganicFertilizer(context.Context, FertilizerService_organicFertilizer) error

	Info(context.Context, common.Identifiable_info) error
}

// FertilizerService_NewServer creates a new Server from an implementation of FertilizerService_Server.
func FertilizerService_NewServer(s FertilizerService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(FertilizerService_Methods(nil, s), s, c)
}

// FertilizerService_ServerToClient creates a new Client from an implementation of FertilizerService_Server.
// The caller is responsible for calling Release on the returned Client.
func FertilizerService_ServerToClient(s FertilizerService_Server) FertilizerService {
	return FertilizerService(capnp.NewClient(FertilizerService_NewServer(s)))
}

// FertilizerService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func FertilizerService_Methods(methods []server.Method, s FertilizerService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      0,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "availableMineralFertilizers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AvailableMineralFertilizers(ctx, FertilizerService_availableMineralFertilizers{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      1,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "mineralFertilizer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MineralFertilizer(ctx, FertilizerService_mineralFertilizer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      2,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "availableOrganicFertilizers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AvailableOrganicFertilizers(ctx, FertilizerService_availableOrganicFertilizers{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      3,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "organicFertilizer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OrganicFertilizer(ctx, FertilizerService_organicFertilizer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// FertilizerService_availableMineralFertilizers holds the state for a server call to FertilizerService.availableMineralFertilizers.
// See server.Call for documentation.
type FertilizerService_availableMineralFertilizers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c FertilizerService_availableMineralFertilizers) Args() FertilizerService_availableMineralFertilizers_Params {
	return FertilizerService_availableMineralFertilizers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c FertilizerService_availableMineralFertilizers) AllocResults() (FertilizerService_availableMineralFertilizers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_availableMineralFertilizers_Results(r), err
}

// FertilizerService_mineralFertilizer holds the state for a server call to FertilizerService.mineralFertilizer.
// See server.Call for documentation.
type FertilizerService_mineralFertilizer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c FertilizerService_mineralFertilizer) Args() FertilizerService_mineralFertilizer_Params {
	return FertilizerService_mineralFertilizer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c FertilizerService_mineralFertilizer) AllocResults() (FertilizerService_mineralFertilizer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizer_Results(r), err
}

// FertilizerService_availableOrganicFertilizers holds the state for a server call to FertilizerService.availableOrganicFertilizers.
// See server.Call for documentation.
type FertilizerService_availableOrganicFertilizers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c FertilizerService_availableOrganicFertilizers) Args() FertilizerService_availableOrganicFertilizers_Params {
	return FertilizerService_availableOrganicFertilizers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c FertilizerService_availableOrganicFertilizers) AllocResults() (FertilizerService_availableOrganicFertilizers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_availableOrganicFertilizers_Results(r), err
}

// FertilizerService_organicFertilizer holds the state for a server call to FertilizerService.organicFertilizer.
// See server.Call for documentation.
type FertilizerService_organicFertilizer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c FertilizerService_organicFertilizer) Args() FertilizerService_organicFertilizer_Params {
	return FertilizerService_organicFertilizer_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c FertilizerService_organicFertilizer) AllocResults() (FertilizerService_organicFertilizer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizer_Results(r), err
}

// FertilizerService_List is a list of FertilizerService.
type FertilizerService_List = capnp.CapList[FertilizerService]

// NewFertilizerService creates a new list of FertilizerService.
func NewFertilizerService_List(s *capnp.Segment, sz int32) (FertilizerService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[FertilizerService](l), err
}

type FertilizerService_Entry capnp.Struct

// FertilizerService_Entry_TypeID is the unique identifier for the type FertilizerService_Entry.
const FertilizerService_Entry_TypeID = 0xb2df3dc668478979

func NewFertilizerService_Entry(s *capnp.Segment) (FertilizerService_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FertilizerService_Entry(st), err
}

func NewRootFertilizerService_Entry(s *capnp.Segment) (FertilizerService_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return FertilizerService_Entry(st), err
}

func ReadRootFertilizerService_Entry(msg *capnp.Message) (FertilizerService_Entry, error) {
	root, err := msg.Root()
	return FertilizerService_Entry(root.Struct()), err
}

func (s FertilizerService_Entry) String() string {
	str, _ := text.Marshal(0xb2df3dc668478979, capnp.Struct(s))
	return str
}

func (s FertilizerService_Entry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_Entry) DecodeFromPtr(p capnp.Ptr) FertilizerService_Entry {
	return FertilizerService_Entry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_Entry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_Entry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_Entry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_Entry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_Entry) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s FertilizerService_Entry) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_Entry) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s FertilizerService_Entry) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s FertilizerService_Entry) Ref() common.ValueHolder {
	p, _ := capnp.Struct(s).Ptr(1)
	return common.ValueHolder(p.Interface().Client())
}

func (s FertilizerService_Entry) HasRef() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s FertilizerService_Entry) SetRef(v common.ValueHolder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// FertilizerService_Entry_List is a list of FertilizerService_Entry.
type FertilizerService_Entry_List = capnp.StructList[FertilizerService_Entry]

// NewFertilizerService_Entry creates a new list of FertilizerService_Entry.
func NewFertilizerService_Entry_List(s *capnp.Segment, sz int32) (FertilizerService_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[FertilizerService_Entry](l), err
}

// FertilizerService_Entry_Future is a wrapper for a FertilizerService_Entry promised by a client call.
type FertilizerService_Entry_Future struct{ *capnp.Future }

func (f FertilizerService_Entry_Future) Struct() (FertilizerService_Entry, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_Entry(p.Struct()), err
}
func (p FertilizerService_Entry_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p FertilizerService_Entry_Future) Ref() common.ValueHolder {
	return common.ValueHolder(p.Future.Field(1, nil).Client())
}

type FertilizerService_availableMineralFertilizers_Params capnp.Struct

// FertilizerService_availableMineralFertilizers_Params_TypeID is the unique identifier for the type FertilizerService_availableMineralFertilizers_Params.
const FertilizerService_availableMineralFertilizers_Params_TypeID = 0xc5292994de2615c2

func NewFertilizerService_availableMineralFertilizers_Params(s *capnp.Segment) (FertilizerService_availableMineralFertilizers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FertilizerService_availableMineralFertilizers_Params(st), err
}

func NewRootFertilizerService_availableMineralFertilizers_Params(s *capnp.Segment) (FertilizerService_availableMineralFertilizers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FertilizerService_availableMineralFertilizers_Params(st), err
}

func ReadRootFertilizerService_availableMineralFertilizers_Params(msg *capnp.Message) (FertilizerService_availableMineralFertilizers_Params, error) {
	root, err := msg.Root()
	return FertilizerService_availableMineralFertilizers_Params(root.Struct()), err
}

func (s FertilizerService_availableMineralFertilizers_Params) String() string {
	str, _ := text.Marshal(0xc5292994de2615c2, capnp.Struct(s))
	return str
}

func (s FertilizerService_availableMineralFertilizers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_availableMineralFertilizers_Params) DecodeFromPtr(p capnp.Ptr) FertilizerService_availableMineralFertilizers_Params {
	return FertilizerService_availableMineralFertilizers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_availableMineralFertilizers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_availableMineralFertilizers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_availableMineralFertilizers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_availableMineralFertilizers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// FertilizerService_availableMineralFertilizers_Params_List is a list of FertilizerService_availableMineralFertilizers_Params.
type FertilizerService_availableMineralFertilizers_Params_List = capnp.StructList[FertilizerService_availableMineralFertilizers_Params]

// NewFertilizerService_availableMineralFertilizers_Params creates a new list of FertilizerService_availableMineralFertilizers_Params.
func NewFertilizerService_availableMineralFertilizers_Params_List(s *capnp.Segment, sz int32) (FertilizerService_availableMineralFertilizers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[FertilizerService_availableMineralFertilizers_Params](l), err
}

// FertilizerService_availableMineralFertilizers_Params_Future is a wrapper for a FertilizerService_availableMineralFertilizers_Params promised by a client call.
type FertilizerService_availableMineralFertilizers_Params_Future struct{ *capnp.Future }

func (f FertilizerService_availableMineralFertilizers_Params_Future) Struct() (FertilizerService_availableMineralFertilizers_Params, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_availableMineralFertilizers_Params(p.Struct()), err
}

type FertilizerService_availableMineralFertilizers_Results capnp.Struct

// FertilizerService_availableMineralFertilizers_Results_TypeID is the unique identifier for the type FertilizerService_availableMineralFertilizers_Results.
const FertilizerService_availableMineralFertilizers_Results_TypeID = 0x81b1cd5c7865e185

func NewFertilizerService_availableMineralFertilizers_Results(s *capnp.Segment) (FertilizerService_availableMineralFertilizers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_availableMineralFertilizers_Results(st), err
}

func NewRootFertilizerService_availableMineralFertilizers_Results(s *capnp.Segment) (FertilizerService_availableMineralFertilizers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_availableMineralFertilizers_Results(st), err
}

func ReadRootFertilizerService_availableMineralFertilizers_Results(msg *capnp.Message) (FertilizerService_availableMineralFertilizers_Results, error) {
	root, err := msg.Root()
	return FertilizerService_availableMineralFertilizers_Results(root.Struct()), err
}

func (s FertilizerService_availableMineralFertilizers_Results) String() string {
	str, _ := text.Marshal(0x81b1cd5c7865e185, capnp.Struct(s))
	return str
}

func (s FertilizerService_availableMineralFertilizers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_availableMineralFertilizers_Results) DecodeFromPtr(p capnp.Ptr) FertilizerService_availableMineralFertilizers_Results {
	return FertilizerService_availableMineralFertilizers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_availableMineralFertilizers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_availableMineralFertilizers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_availableMineralFertilizers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_availableMineralFertilizers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_availableMineralFertilizers_Results) List() (FertilizerService_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FertilizerService_Entry_List(p.List()), err
}

func (s FertilizerService_availableMineralFertilizers_Results) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_availableMineralFertilizers_Results) SetList(v FertilizerService_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated FertilizerService_Entry_List, preferring placement in s's segment.
func (s FertilizerService_availableMineralFertilizers_Results) NewList(n int32) (FertilizerService_Entry_List, error) {
	l, err := NewFertilizerService_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return FertilizerService_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FertilizerService_availableMineralFertilizers_Results_List is a list of FertilizerService_availableMineralFertilizers_Results.
type FertilizerService_availableMineralFertilizers_Results_List = capnp.StructList[FertilizerService_availableMineralFertilizers_Results]

// NewFertilizerService_availableMineralFertilizers_Results creates a new list of FertilizerService_availableMineralFertilizers_Results.
func NewFertilizerService_availableMineralFertilizers_Results_List(s *capnp.Segment, sz int32) (FertilizerService_availableMineralFertilizers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FertilizerService_availableMineralFertilizers_Results](l), err
}

// FertilizerService_availableMineralFertilizers_Results_Future is a wrapper for a FertilizerService_availableMineralFertilizers_Results promised by a client call.
type FertilizerService_availableMineralFertilizers_Results_Future struct{ *capnp.Future }

func (f FertilizerService_availableMineralFertilizers_Results_Future) Struct() (FertilizerService_availableMineralFertilizers_Results, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_availableMineralFertilizers_Results(p.Struct()), err
}

type FertilizerService_mineralFertilizer_Params capnp.Struct

// FertilizerService_mineralFertilizer_Params_TypeID is the unique identifier for the type FertilizerService_mineralFertilizer_Params.
const FertilizerService_mineralFertilizer_Params_TypeID = 0xb1c2fa546f41d480

func NewFertilizerService_mineralFertilizer_Params(s *capnp.Segment) (FertilizerService_mineralFertilizer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizer_Params(st), err
}

func NewRootFertilizerService_mineralFertilizer_Params(s *capnp.Segment) (FertilizerService_mineralFertilizer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizer_Params(st), err
}

func ReadRootFertilizerService_mineralFertilizer_Params(msg *capnp.Message) (FertilizerService_mineralFertilizer_Params, error) {
	root, err := msg.Root()
	return FertilizerService_mineralFertilizer_Params(root.Struct()), err
}

func (s FertilizerService_mineralFertilizer_Params) String() string {
	str, _ := text.Marshal(0xb1c2fa546f41d480, capnp.Struct(s))
	return str
}

func (s FertilizerService_mineralFertilizer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_mineralFertilizer_Params) DecodeFromPtr(p capnp.Ptr) FertilizerService_mineralFertilizer_Params {
	return FertilizerService_mineralFertilizer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_mineralFertilizer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_mineralFertilizer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_mineralFertilizer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_mineralFertilizer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_mineralFertilizer_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FertilizerService_mineralFertilizer_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_mineralFertilizer_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FertilizerService_mineralFertilizer_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FertilizerService_mineralFertilizer_Params_List is a list of FertilizerService_mineralFertilizer_Params.
type FertilizerService_mineralFertilizer_Params_List = capnp.StructList[FertilizerService_mineralFertilizer_Params]

// NewFertilizerService_mineralFertilizer_Params creates a new list of FertilizerService_mineralFertilizer_Params.
func NewFertilizerService_mineralFertilizer_Params_List(s *capnp.Segment, sz int32) (FertilizerService_mineralFertilizer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FertilizerService_mineralFertilizer_Params](l), err
}

// FertilizerService_mineralFertilizer_Params_Future is a wrapper for a FertilizerService_mineralFertilizer_Params promised by a client call.
type FertilizerService_mineralFertilizer_Params_Future struct{ *capnp.Future }

func (f FertilizerService_mineralFertilizer_Params_Future) Struct() (FertilizerService_mineralFertilizer_Params, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_mineralFertilizer_Params(p.Struct()), err
}

type FertilizerService_mineralFertilizer_Results capnp.Struct

// FertilizerService_mineralFertilizer_Results_TypeID is the unique identifier for the type FertilizerService_mineralFertilizer_Results.
const FertilizerService_mineralFertilizer_Results_TypeID = 0xd801f16b6fa39a94

func NewFertilizerService_mineralFertilizer_Results(s *capnp.Segment) (FertilizerService_mineralFertilizer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizer_Results(st), err
}

func NewRootFertilizerService_mineralFertilizer_Results(s *capnp.Segment) (FertilizerService_mineralFertilizer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizer_Results(st), err
}

func ReadRootFertilizerService_mineralFertilizer_Results(msg *capnp.Message) (FertilizerService_mineralFertilizer_Results, error) {
	root, err := msg.Root()
	return FertilizerService_mineralFertilizer_Results(root.Struct()), err
}

func (s FertilizerService_mineralFertilizer_Results) String() string {
	str, _ := text.Marshal(0xd801f16b6fa39a94, capnp.Struct(s))
	return str
}

func (s FertilizerService_mineralFertilizer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_mineralFertilizer_Results) DecodeFromPtr(p capnp.Ptr) FertilizerService_mineralFertilizer_Results {
	return FertilizerService_mineralFertilizer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_mineralFertilizer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_mineralFertilizer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_mineralFertilizer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_mineralFertilizer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_mineralFertilizer_Results) Fert() (Nutrient_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Nutrient_List(p.List()), err
}

func (s FertilizerService_mineralFertilizer_Results) HasFert() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_mineralFertilizer_Results) SetFert(v Nutrient_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFert sets the fert field to a newly
// allocated Nutrient_List, preferring placement in s's segment.
func (s FertilizerService_mineralFertilizer_Results) NewFert(n int32) (Nutrient_List, error) {
	l, err := NewNutrient_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Nutrient_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FertilizerService_mineralFertilizer_Results_List is a list of FertilizerService_mineralFertilizer_Results.
type FertilizerService_mineralFertilizer_Results_List = capnp.StructList[FertilizerService_mineralFertilizer_Results]

// NewFertilizerService_mineralFertilizer_Results creates a new list of FertilizerService_mineralFertilizer_Results.
func NewFertilizerService_mineralFertilizer_Results_List(s *capnp.Segment, sz int32) (FertilizerService_mineralFertilizer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FertilizerService_mineralFertilizer_Results](l), err
}

// FertilizerService_mineralFertilizer_Results_Future is a wrapper for a FertilizerService_mineralFertilizer_Results promised by a client call.
type FertilizerService_mineralFertilizer_Results_Future struct{ *capnp.Future }

func (f FertilizerService_mineralFertilizer_Results_Future) Struct() (FertilizerService_mineralFertilizer_Results, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_mineralFertilizer_Results(p.Struct()), err
}

type FertilizerService_availableOrganicFertilizers_Params capnp.Struct

// FertilizerService_availableOrganicFertilizers_Params_TypeID is the unique identifier for the type FertilizerService_availableOrganicFertilizers_Params.
const FertilizerService_availableOrganicFertilizers_Params_TypeID = 0x940d47081167b059

func NewFertilizerService_availableOrganicFertilizers_Params(s *capnp.Segment) (FertilizerService_availableOrganicFertilizers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FertilizerService_availableOrganicFertilizers_Params(st), err
}

func NewRootFertilizerService_availableOrganicFertilizers_Params(s *capnp.Segment) (FertilizerService_availableOrganicFertilizers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return FertilizerService_availableOrganicFertilizers_Params(st), err
}

func ReadRootFertilizerService_availableOrganicFertilizers_Params(msg *capnp.Message) (FertilizerService_availableOrganicFertilizers_Params, error) {
	root, err := msg.Root()
	return FertilizerService_availableOrganicFertilizers_Params(root.Struct()), err
}

func (s FertilizerService_availableOrganicFertilizers_Params) String() string {
	str, _ := text.Marshal(0x940d47081167b059, capnp.Struct(s))
	return str
}

func (s FertilizerService_availableOrganicFertilizers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_availableOrganicFertilizers_Params) DecodeFromPtr(p capnp.Ptr) FertilizerService_availableOrganicFertilizers_Params {
	return FertilizerService_availableOrganicFertilizers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_availableOrganicFertilizers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_availableOrganicFertilizers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_availableOrganicFertilizers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_availableOrganicFertilizers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// FertilizerService_availableOrganicFertilizers_Params_List is a list of FertilizerService_availableOrganicFertilizers_Params.
type FertilizerService_availableOrganicFertilizers_Params_List = capnp.StructList[FertilizerService_availableOrganicFertilizers_Params]

// NewFertilizerService_availableOrganicFertilizers_Params creates a new list of FertilizerService_availableOrganicFertilizers_Params.
func NewFertilizerService_availableOrganicFertilizers_Params_List(s *capnp.Segment, sz int32) (FertilizerService_availableOrganicFertilizers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[FertilizerService_availableOrganicFertilizers_Params](l), err
}

// FertilizerService_availableOrganicFertilizers_Params_Future is a wrapper for a FertilizerService_availableOrganicFertilizers_Params promised by a client call.
type FertilizerService_availableOrganicFertilizers_Params_Future struct{ *capnp.Future }

func (f FertilizerService_availableOrganicFertilizers_Params_Future) Struct() (FertilizerService_availableOrganicFertilizers_Params, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_availableOrganicFertilizers_Params(p.Struct()), err
}

type FertilizerService_availableOrganicFertilizers_Results capnp.Struct

// FertilizerService_availableOrganicFertilizers_Results_TypeID is the unique identifier for the type FertilizerService_availableOrganicFertilizers_Results.
const FertilizerService_availableOrganicFertilizers_Results_TypeID = 0xcb1556d28ba514af

func NewFertilizerService_availableOrganicFertilizers_Results(s *capnp.Segment) (FertilizerService_availableOrganicFertilizers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_availableOrganicFertilizers_Results(st), err
}

func NewRootFertilizerService_availableOrganicFertilizers_Results(s *capnp.Segment) (FertilizerService_availableOrganicFertilizers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_availableOrganicFertilizers_Results(st), err
}

func ReadRootFertilizerService_availableOrganicFertilizers_Results(msg *capnp.Message) (FertilizerService_availableOrganicFertilizers_Results, error) {
	root, err := msg.Root()
	return FertilizerService_availableOrganicFertilizers_Results(root.Struct()), err
}

func (s FertilizerService_availableOrganicFertilizers_Results) String() string {
	str, _ := text.Marshal(0xcb1556d28ba514af, capnp.Struct(s))
	return str
}

func (s FertilizerService_availableOrganicFertilizers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_availableOrganicFertilizers_Results) DecodeFromPtr(p capnp.Ptr) FertilizerService_availableOrganicFertilizers_Results {
	return FertilizerService_availableOrganicFertilizers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_availableOrganicFertilizers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_availableOrganicFertilizers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_availableOrganicFertilizers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_availableOrganicFertilizers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_availableOrganicFertilizers_Results) List() (FertilizerService_Entry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FertilizerService_Entry_List(p.List()), err
}

func (s FertilizerService_availableOrganicFertilizers_Results) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_availableOrganicFertilizers_Results) SetList(v FertilizerService_Entry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated FertilizerService_Entry_List, preferring placement in s's segment.
func (s FertilizerService_availableOrganicFertilizers_Results) NewList(n int32) (FertilizerService_Entry_List, error) {
	l, err := NewFertilizerService_Entry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return FertilizerService_Entry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FertilizerService_availableOrganicFertilizers_Results_List is a list of FertilizerService_availableOrganicFertilizers_Results.
type FertilizerService_availableOrganicFertilizers_Results_List = capnp.StructList[FertilizerService_availableOrganicFertilizers_Results]

// NewFertilizerService_availableOrganicFertilizers_Results creates a new list of FertilizerService_availableOrganicFertilizers_Results.
func NewFertilizerService_availableOrganicFertilizers_Results_List(s *capnp.Segment, sz int32) (FertilizerService_availableOrganicFertilizers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FertilizerService_availableOrganicFertilizers_Results](l), err
}

// FertilizerService_availableOrganicFertilizers_Results_Future is a wrapper for a FertilizerService_availableOrganicFertilizers_Results promised by a client call.
type FertilizerService_availableOrganicFertilizers_Results_Future struct{ *capnp.Future }

func (f FertilizerService_availableOrganicFertilizers_Results_Future) Struct() (FertilizerService_availableOrganicFertilizers_Results, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_availableOrganicFertilizers_Results(p.Struct()), err
}

type FertilizerService_organicFertilizer_Params capnp.Struct

// FertilizerService_organicFertilizer_Params_TypeID is the unique identifier for the type FertilizerService_organicFertilizer_Params.
const FertilizerService_organicFertilizer_Params_TypeID = 0xeddbace5e62bf665

func NewFertilizerService_organicFertilizer_Params(s *capnp.Segment) (FertilizerService_organicFertilizer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizer_Params(st), err
}

func NewRootFertilizerService_organicFertilizer_Params(s *capnp.Segment) (FertilizerService_organicFertilizer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizer_Params(st), err
}

func ReadRootFertilizerService_organicFertilizer_Params(msg *capnp.Message) (FertilizerService_organicFertilizer_Params, error) {
	root, err := msg.Root()
	return FertilizerService_organicFertilizer_Params(root.Struct()), err
}

func (s FertilizerService_organicFertilizer_Params) String() string {
	str, _ := text.Marshal(0xeddbace5e62bf665, capnp.Struct(s))
	return str
}

func (s FertilizerService_organicFertilizer_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_organicFertilizer_Params) DecodeFromPtr(p capnp.Ptr) FertilizerService_organicFertilizer_Params {
	return FertilizerService_organicFertilizer_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_organicFertilizer_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_organicFertilizer_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_organicFertilizer_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_organicFertilizer_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_organicFertilizer_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s FertilizerService_organicFertilizer_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_organicFertilizer_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s FertilizerService_organicFertilizer_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// FertilizerService_organicFertilizer_Params_List is a list of FertilizerService_organicFertilizer_Params.
type FertilizerService_organicFertilizer_Params_List = capnp.StructList[FertilizerService_organicFertilizer_Params]

// NewFertilizerService_organicFertilizer_Params creates a new list of FertilizerService_organicFertilizer_Params.
func NewFertilizerService_organicFertilizer_Params_List(s *capnp.Segment, sz int32) (FertilizerService_organicFertilizer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FertilizerService_organicFertilizer_Params](l), err
}

// FertilizerService_organicFertilizer_Params_Future is a wrapper for a FertilizerService_organicFertilizer_Params promised by a client call.
type FertilizerService_organicFertilizer_Params_Future struct{ *capnp.Future }

func (f FertilizerService_organicFertilizer_Params_Future) Struct() (FertilizerService_organicFertilizer_Params, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_organicFertilizer_Params(p.Struct()), err
}

type FertilizerService_organicFertilizer_Results capnp.Struct

// FertilizerService_organicFertilizer_Results_TypeID is the unique identifier for the type FertilizerService_organicFertilizer_Results.
const FertilizerService_organicFertilizer_Results_TypeID = 0x9846fdc78610c262

func NewFertilizerService_organicFertilizer_Results(s *capnp.Segment) (FertilizerService_organicFertilizer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizer_Results(st), err
}

func NewRootFertilizerService_organicFertilizer_Results(s *capnp.Segment) (FertilizerService_organicFertilizer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizer_Results(st), err
}

func ReadRootFertilizerService_organicFertilizer_Results(msg *capnp.Message) (FertilizerService_organicFertilizer_Results, error) {
	root, err := msg.Root()
	return FertilizerService_organicFertilizer_Results(root.Struct()), err
}

func (s FertilizerService_organicFertilizer_Results) String() string {
	str, _ := text.Marshal(0x9846fdc78610c262, capnp.Struct(s))
	return str
}

func (s FertilizerService_organicFertilizer_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FertilizerService_organicFertilizer_Results) DecodeFromPtr(p capnp.Ptr) FertilizerService_organicFertilizer_Results {
	return FertilizerService_organicFertilizer_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FertilizerService_organicFertilizer_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FertilizerService_organicFertilizer_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FertilizerService_organicFertilizer_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FertilizerService_organicFertilizer_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FertilizerService_organicFertilizer_Results) Fert() (Nutrient_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Nutrient_List(p.List()), err
}

func (s FertilizerService_organicFertilizer_Results) HasFert() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FertilizerService_organicFertilizer_Results) SetFert(v Nutrient_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFert sets the fert field to a newly
// allocated Nutrient_List, preferring placement in s's segment.
func (s FertilizerService_organicFertilizer_Results) NewFert(n int32) (Nutrient_List, error) {
	l, err := NewNutrient_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Nutrient_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// FertilizerService_organicFertilizer_Results_List is a list of FertilizerService_organicFertilizer_Results.
type FertilizerService_organicFertilizer_Results_List = capnp.StructList[FertilizerService_organicFertilizer_Results]

// NewFertilizerService_organicFertilizer_Results creates a new list of FertilizerService_organicFertilizer_Results.
func NewFertilizerService_organicFertilizer_Results_List(s *capnp.Segment, sz int32) (FertilizerService_organicFertilizer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[FertilizerService_organicFertilizer_Results](l), err
}

// FertilizerService_organicFertilizer_Results_Future is a wrapper for a FertilizerService_organicFertilizer_Results promised by a client call.
type FertilizerService_organicFertilizer_Results_Future struct{ *capnp.Future }

func (f FertilizerService_organicFertilizer_Results_Future) Struct() (FertilizerService_organicFertilizer_Results, error) {
	p, err := f.Future.Ptr()
	return FertilizerService_organicFertilizer_Results(p.Struct()), err
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xc876b729b7d7f6d9

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_managementAt_Results capnp.Struct

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xcca7748d367db151

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results(root.Struct()), err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xcca7748d367db151, capnp.Struct(s))
	return str
}

func (s Service_managementAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_managementAt_Results) DecodeFromPtr(p capnp.Ptr) Service_managementAt_Results {
	return Service_managementAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_managementAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_managementAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_managementAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_managementAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Event_List(p.List()), err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List = capnp.StructList[Service_managementAt_Results]

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_managementAt_Results](l), err
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (f Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	p, err := f.Future.Ptr()
	return Service_managementAt_Results(p.Struct()), err
}

const schema_b30a3af53cea6b3e = "x\xda\xccz\x7ft\x14\xd7u\xff\xbd3\xbb\xac\x04\x12" +
	"\xbb\xa3\x11_\x81\x0c^\x81\x85AJ\xe0\x0b\x08\xc7\x81" +
	"\xc6\x11\xfaE\x90\x0eB\x1a\xad\x88\x031\xa7\x1e\xad\x9e" +
	"\xa4\xc1\xbb3\xcb\xec\xac@\x0e\xb6\x025\xa9q!." +
	"\x0en\x0c\xb1{\x1c;\x9c\xd4\x1c\x9a`bbpM" +
	"bsL\x0c\xfeQ\x07\x1bNb\xa7\x8e\x8b\x1d\xa7\xb6" +
	"Oh\xe3s\x9a\xc4\xc6\x86\xe9\xb9ofgF\xab\x1f" +
	"I\xdd\x9e\xb6\xfc\xc3\xe8\xbe\x9f\xf7\xbe{\xef\xbb\x9f\xcf" +
	"\xdbE\x8f\x95\xac\x08-.\xbd{&\x08\x89\xd5\x18\x9e" +
	"d\xbf\xf3\xc8\x99?\xab\x9f\xf6\x8f_\x05e:\xa2]" +
	"qf\xe95\xdb\xb6V?\x00a\x8c\x00\xc8\x0b\xa6^" +
	"\x92\x97M\xa5\xaf\xeb\xa6~\x1f\xd0\xdeq\x81m\xb9\xe9" +
	"\xc5G\xb7\x81t\x0d\x82\xd3\xa7\xee\xfc\xd4\xe5\x02\xa0|" +
	"qj=\xa0}\xe4\xfa)\xbb:\x8f|y;HU" +
	"\x82=\xab\xa9\xe9\xf5\x05\x7f\xfe\xec\x15\x00\xac\xdb\x10\xad" +
	"D9\x1d\xa5\xa9\xb4\xe8\xf5\x80\xf6\xc3\x9b\xbe\\qo" +
	"\xcbw\xb7\x83$\x09\xf6\xe7oy\xefs\xbf[>\xf9" +
	"\x07\x00\xd4\xe95y\x88:\xd6\xe5\xa2\xf3\x10\xd0\xfe\xdc" +
	"\xbf\xd7\x7f\xe6\xff\x1d\xbb\xf2\x97c\xed\xb0\xae5V\x89" +
	"\xf2\xbaX\x05\x80\xccb\x9b\x01\xed\xee\xebn\xfe\xe0\xeb" +
	"w\x1c\xb8\xb3\xa0w\x88:?\x1d\x13P~1F\x9b" +
	"8\x13\xa3\xed\xb2\xcf\x94\x9ez\xeb\x07?\xdc\x05J\x15" +
	"\x86\xed\x7f\xdb\xd9x\xf8\xcbo\x9f\xfbW\xa7\xf3\xbb\xb1" +
	"{PF\x89>/\xc7n\xa4\x8dd\xbf\xf1\xa5\xaag" +
	"~Tr7W\xce\xeb\x0cX7T\xd6\x85\xf2\xee2" +
	"\x9awg\x19)\xb7\xf4\xe3\xab\x9e\xbcq\xef\x83w\x83" +
	"T!\xd8\x8d\xa7\xf7\xf7_\xbe\xb8\xe1~\xea\xb9\xaf\xac" +
	"\x0c\xe5Gx\xcf\x03e\xfd\x80\xf6\xba\xc3\xfdR\xd1\x17" +
	"J\xf7:\x16\xe5\x0b\xbfZ\xb6D\x80\x90\x9d\xfd\xdd\xb9" +
	"\xfeC\xb9\xba{I\x11\xb1P\xed\xb3e\x1bQ~\x9b" +
	"\xcfs\xa1\xec_\x00\xedG\xce?\xdbv\xe1\xd8\xb2{" +
	"A\xa9@\xf4\x97\x9c\x16\x8a \x80|\\\xbe\x04(\x9f" +
	"\x90\xc9@\xdb\xbex\xfa\x81[\xa7}\xeao@Y\x80" +
	"\xa5\xf6\x8bG\x0eG?\x1a\xdc\xf5\xae\xb3\xf4\xac\xf2Z" +
	"A\xbe\xa1\x9c>\x97\x95\xbf!\x00\xda='c_{" +
	"\xf6\xf2\xca\xfb\x82'~[\xc5{\x08(\xef\xa9 \x13" +
	"\xfe\xf0\xc4/n?:\xf0\x95\xfb@\xaa\x14\xec\xcf\x7f" +
	"\xe7\xd6\x0bK\x9a\xae\x1c\xa4s|\xba\xe2\x92\xfcb\x05" +
	"\xb7u\x05\xd9\xe4\xe3\xbf\xfd\xc3\xa5\xd0\xd5s\xf6\x93\xad" +
	"E\xdf7\xf8\xbag+jQ\xbe@\x9d\xeb^\xaf\x88" +
	"\x93\xad=\x0d\x14\x09\xd1\xf7\x8f\x96PDD\x94?\x9c" +
	"\xfe\x84\x8c3\xae\x07\xa8\xab\x99q7u\xf7\xcc#I" +
	"\x81\xde4\xb7\xacV\x9e\x94\xb5\xca\xef\x82h\x0f|\xf0" +
	"\xd3\xd5?~y\xdb\x03\xa0\xccG\xd1~\xec\xbd\xad\xb7" +
	"\xefk~\xe9%g\x07oW>\x84\xf2\xe5J\x1a\xf0" +
	"a%\xb9\xba\xa7\xca\xc8\x0d\xf0)\xff\xfe\xaa\x97\xe5\xe3" +
	"W\xcd\x03\x90_\xbc\x8aL\xba\xff\xf2C/\xec\xdc\xb7" +
	"\xe70H\x0b\xd0\xb7hX\xa4\x89\x17\xcc<\x89r\xcb" +
	"L\x1a\xd60\x93&\xfe\xea\xb9\x06\xa3\xfb\xd2\xc9G\x83" +
	"\x16}u\xe6\x9bd\xd1\x8b3\xc9\xa2C;\xbf0\xf0" +
	"\x93\x1b\xde8B\x1d\xec\xf0\xed\xc5\xa5\xdf\xfb\xde\xe3\xff" +
	"\x00a!\x12\xc3\xba\xd2Ym(\xcf\x9eE\xb3\xcd\x9a" +
	"\xb5\x19@~zV\xd4^\xf0\xf5y\xe6\xbd?\xdas" +
	"\x1c\x94kP\xf0\xc3\x85\xebut\x96\x89\xf2\x19>\xe0" +
	"\xd4,\xda\xab7\xa1$\x89\xc1\xb8\xab[|u%\xca" +
	"\x0dWWPP]\x1dAY\x8aW\x00\xd8\xfaGM" +
	"/\xed\xbf\xf1\x96'G\x1d/\xc6/\xc9\xa5qZ\xa2" +
	"8\x1e\xa5#\xf8e\xe3\x0d\xc7\xca\x8b\xcf\x9f\x1c\x15\xd0" +
	"\xc7\xe3o\xca\xa7\xa8\xa7\xfct\xfc\x9b\x80\xf6\xc9i\xd7" +
	"\xferoM\xcd\xa9\x80\xcb\x87\xab\xb8\xcbK\x9f\xfd`" +
	"\xf2\xf1\xd8\xd7N\x8d\xed\xc4\x97\xe3\xef\xd1\xbaU\xa4\xc5" +
	"\xff\x9fw\xd5\xdb\xf1}\xcf\xfcd\xec\x9e\x1b\xaa^\x06" +
	"\x94\xd5*\xb2\xe6\xab\xbf\xff\xd9\xe35\x8f\x0f\x9e.\xd4" +
	"W\xdeV\xf5\x9c\xbc\xbb\x8a\xc7l\xd5\x17\xe4\xa3U\xa4" +
	"\xed\xf7\xcb\x0f\xfc\xd5\xcb_\x9c\xf6|\xf0l\x0eT\xf1" +
	"\xfcv\x82\xcf\xa6<z\xdbgv[\xdf}\x01\xa4\x19" +
	"^\x87\x05\xb3M:\xbce\xb3\xa9\x83\xe7U\xcat," +
	"\x0aD\xad@=\xb5\xd9\x8d(\x0f\xcd&\x13\xef\x98}" +
	"=\x85\xd7\xecW\xe7~\xe5\xbdE\xaf\xbd2fn\xfb" +
	"\xf0\x9a\x8d(\x97VSn\x9bQMZ\xef\xdd\xff\xb0" +
	"q\xcb\xfb\xf8\xf3\xe0\xf6\x86\xaay0\xee\xae\xa6\xd5\xd7" +
	"\xbd\xb5\xeb\xfe\xf3\xd9\x8b\x17\x0a\xcc\xd2\x1c\x11\x10\xe5\x13" +
	"\xd5o\xcag\xaa\xb9'\xf0\xd9\xce\xa6\xb6E\x97\xde\xfe" +
	"\xf0[\xb4v\xb8p\xed\x9a\xb9m(\xdf0\x97g\x82" +
	"\xb9<\xfby~\xadLG\xa1\xb0\xfb\xb7\xaf\xdd\x88\xf2" +
	"\xd1k)$\xce_K^\xce~\xff\xa9_\xbf}\xe8" +
	"\x17\x17\x83[\xdd4\x8f{\xf9\x8ey\xb4U/\x7f\x8e" +
	"\xa5\xf9\x81y\x02\xca\x8f\xce\xa3\xe9\xce\xce\xa3\xbd~\xab" +
	"\xe4\xe8\xd4\x05\xbf\xd9\xfe\xdbQ\x09\xf5\xba\xf9sPn" +
	"\x99\xcf\xc3k\xfe\x1f\x00\xed\x87\xbe\xb5\xc2\xfcU\xf2\xd9" +
	"\xdf\x8e\xba\x81.\xce\xafE\xf92\xef\xf9\xe1\xfc\x0e@" +
	"\xfb\xc2\xb4\xf02\xf5/~\xf61%B\xd1?\x09\xe7" +
	"\xa8\xa4\x9a\x93(\xd7\xd4\xd0\xe7\xdc\x1a\x9e\x91\xbc\xb9\xc6" +
	"\xda\xf0\xb2Z\x01\xe5\x96\xda\xeb\xe9\x1a\xaa\xdd\x0c6<" +
	"l\xa7U]\xedgi&\xe8\xd6\xc2\xa4\x9a\xd13\xcb" +
	";USMg\x17\xd6'\x8c\xcd\x9a\xde\xdf\x89\xa8\x94" +
	"\x88!\x80\x10\x02H-m\x00J\xb3\x88J\xa7\x80\x12" +
	"b9\"\xa2\xd4\xbe\x11@Y-\xa2\xf2%\x01Q(" +
	"G\x01@Z[\x0b\xa0t\x8a\xa8\xdc$\xa0\x9d\xcc\xa5" +
	",mP5\x01\x00\xa3\xf6co\xf6\x16u\x1d\xde\xf6" +
	":\x00b\x14\xd0\xce\xa4T\xddjf:D\xb3\x9a5" +
	"\x84\x11\x100\x02\x18M\x9aF\x06%\xfb\x8e\x9b~\\" +
	"\xfd\xf07w\xbfC\xbd%@o\xbf\x11o\xbf+\x99" +
	"ii)\xedVf&\x989\xa8%\xd9BuP\xd5" +
	"RjO\x8a\xb5k:3\xd5\x94\xdf#[\xddU\xcf" +
	"\xb2\xb9\x94\x95UB\x9eR\xa5\xb4\xd7\"\x11\x95^\x01" +
	"\xa3)-k\xe1T\xc0N\x111\xe6'9\x80\x15(" +
	"a\\\x09\x09\x18\x14JX\xa1\x84\xc8\x08\xd4\xdd\x1b\x15" +
	"H@$\xf4\xf6,\x16\xda\xb8)gY\x9a\xde\xbfP" +
	"lZMv.\xe2\xa6\x93\xe6p]\x8bk\x01\"\xc9" +
	"\x9c\x15M\xb1>k\x8ccj\x19d\xba\xd5=$f" +
	"\x18\x0d]\xc4\x87\xee\\\xce\x87n\xdb\x0e\x80\x82t[" +
	"#\x00\x8aR\xee.\x00\x0cI\xb9\xf5\x00\x18\x966\x91" +
	"p\x92\xa4\xd1\xe6\"\xce\x7fE\xce\x7f\xc5\x92Fm\x93" +
	"%\xb5\x0d\x00\xa7H\x1b\xba\x00\xea\xb3\xdc\x09l5g" +
	"\x19i\xd5\xd2BI\xc7+`@5\x07Y\xd6\x82|" +
	"Cr\x95+\x00[3M\xad_\xb54\x10\x0d}\xd8" +
	"\xd2R)\xb5\x9f\xd9\x86\xd9\xaf\xeaZr%\xbaG\xa1" +
	"F-\xcd\xd0\xed\xb4{@\x05b\xbd\x99\xa5U\xbd\xb7" +
	"@<\x9ct\xcceg\x99\xf5E5\x95c\x00`g" +
	"\xd5A\x96\xb0T\x0b\x90\x8do\xe7VwK\xa2\xa1\xd3" +
	"q\xf9W\x91\x84\xebm\xde\x87Y\x0cD3\xab\x14y" +
	"^Q\xb3\x1c@\xa9\x16QY$ \xf7t\x00i\x01" +
	"\xc9\xe6\x8b\xa8,\x15\xb0^M\x1b9\xdd\xc2) \xe0" +
	"\x14\xc0\xfa\x0c_\x0ac\xfe\xe4\x80\x18\x9b\xe8\xf4\xbb\x1d" +
	"\xdb\x00\x9d\x9f\xeb\x8d\x88R\xe9\x12\xd7\x1b\xcb\x05\x8c\xf7" +
	"\xb2\x8c5\xe0,a\xd7\xf1\x7f\xaf\xd4\x93\xd6\xf99\xc3" +
	"\x85s\xba\xc7\xb0\xb0#c5\xa9f\x8f\xa1\xb7\xf7\xa7" +
	"\xadf\xd5B\x95V\x99\xee\xad\xb2\xef\x08\x80r\xbf\x88" +
	"\xca\xdf\x05\x02\xf9\xc0s\x00\xca!\x11\x95c\x02J\x02" +
	"\x96\xa3\x80(\x1d\xed\x02P\x1e\x13QyJ@I\x14" +
	"\xcaQD\x94N\xac\x07P\x9e\x14Q9-\xa0\x14\x12" +
	"\xcb1\x84(\x9d:\x08\xa0\x9c\x16Q9'\xa0\x14\x0e" +
	"\x95c\x18Q:\xfb2\x80\xf2s\x11\x95_\x09h\x1b" +
	"\xee\xaePo2\xf4,3\x07\xe3*\x1d,\"\x08H" +
	"\xc9\x8bb\xbe5\x9dQ\x85\xa4\xd5\xa1\xaf\xca\xa5s\xd9" +
	"F5\xa5\xeaIF\x0e\xe9\xd8\x99\xf7Y\x9bU\xfb\x01" +
	"\x19F\xfdb\x170\xcc\xefw\x93e\xb5\xde\x1c[\x05" +
	"\"\xdb\xe4\x8d)\xf4>\x165W\x05\x9a\xd3\xea\x96." +
	"\x1a&\xe4X\x17K\x1a\x83\xcc\\i\xaaIK3P" +
	"\x0f\xf4q,\x1e\x1a\xcf\xe2M\xee\xbe\x90\x05B\xb9\x87" +
	"\xc7c\xe9=\x00v\xbf\xc9\x98\xde\xae\xea\x10\xc9\x99\xcc" +
	"\xee\xd1\x8c\xb4\x9a\xcdv\xa2i\xf4\xe6\x9c\xa5\xc6p\x14" +
	"\x1e\xe3\x0b;\x07\x98n$\xac\xfc\xd41>uM\x17" +
	"\x9fzn\x17\x0f\xf5\xd9m<\xd4g\xb5\x01\xd8,\xcd" +
	"\xcc~\xa6')\"\xfaR\xc6ffj:`\xbf\xad" +
	"\xea\xd6\x00\xcbjY\xc7\x7f\xac\x9c\xa9YCA_\xfa" +
	"\x932j\x87k\xc9@F\xed\x8csC\x8co\xa15" +
	"n4\x8f\x08f\xae\x89\x17lj#\x80r\x93\x88\xca" +
	"\x80\x1fl\x8c\x1c\xafWD%\x93\xf7F\x00)M\xd1" +
	"1 \xa2b\x917\xc6\x1co\xdcD\xc2\x94\x88\xca\x16" +
	"\x01\x87\xdd\xdc\xe1\x1d\\F5-\xcd\xd2\x0c@\x1dc" +
	"\xfem\xea\x04g0\xc0\x00\xe3YK\xedg8\x09\x84" +
	"\xf0$\x0c\x9cyA\xd2]\xd8S\xcf\xac\xcd\x8c\xe9\x94" +
	"-bX\x8e\"\x9dG\x9b\x9f\x1a$\xba\x05C\x00\xd2" +
	"b\xca\x17\x9f\x16Q\xf9\xac\x806S\xcd\x94\xc6S$" +
	"`\xcc\xde-\xcd\x11\x0f]\xf9\xf57\xdd\x8d\xd4\xa7T" +
	"\x8be\xad\xd1\x0dc\x1c\x8fk\xd6\x82\xa3\xe0\x91\x94\x17" +
	"\xb6\xab\x96\xc5L'\xb3E-ff\xc9\xdcK\xf3\xe6" +
	"\x967\xe0C\x00\x89\x9bQ\xc4D\x0a\xf3\x09\x800/" +
	"\x9a\x00\x89\x01\x92[$\x17\x9c\xdb\\\xde\xc4\xe5\x19\x92" +
	"o%\xb9(r\xa5\xe5!\xdc\x0f\x90\xd8J\xf2;I" +
	"\x1e\x0aq\xbd\xe5\x1dx\x12 q'\xc9\xf7\x92<\x1c" +
	".\xc70\x80\xbc\x87\xcb\xf7\x92\xfcA\x92O\x9aT\x8e" +
	"\x93\x00\xe4\x07\xf0.\x80\xc4\x83$?D\xf2H\xa4\x9c" +
	"\x03\xfbG\xb8\xfc\x10\xc9\x8f\x91\xbc\xa8\xa8\x1c\x8b\x00\xe4" +
	"\xa3x+@\xe21\x92?E\xf2\xe2\xe2r,\x06\x90" +
	"Op\xf9\x93$?M\xf2\xc9\x93\xcbq2U\x92x" +
	"\x10 q\x9a\xe4\xe7H>eJ9N\xa1\xaa\x8d\xcb" +
	"\xcf\x91\xfc\x9fI^RR\x8e%\x00\xf2\xeb|\x9e\x7f" +
	"\"\xf9;(\xa0\xad\x1a\xe9fs\xa8]E\xb2j\x93" +
	"\xa1[\x11\xe6g~j]\xb3ji\x93\x01q\xdd*" +
	"\x94w\xd4\x8d)\xa7,\xa8bZ\xeb\xa5\xc9(\xe0\x83" +
	"\x8d\x89\x94\xb1\xb9Y`\xc9&\x83\xf5\xf5%,U\xef" +
	"U\xcd^\x08\xf6X\xa9f\xad\x09z\x90\xcb7t\xb4" +
	"w\xa3\xd1\xd0\xd1N\xb3\xc18m4O0\xb5\xea]" +
	"\xe4E\x0dP\xef\x0c\x1b\xb3\x81\xc6\x14\xce\x96\xc0\x94\xb1" +
	"\xb9\xdbH\xb47FG\x8c\x1b\xdd<b4\xdd\x02I" +
	"\xa6[Po:\xf7@a\xb2\x9d4AJ2\x0a3" +
	"Qu\x17\xcbF\xc7+\xed\xaa\x05\x8c\xf61\xd3\xfa\xe3" +
	"E\x9a\x1f\xeckr\x96\xa91\xbd\xdeZ\xb8V\xd7\xac" +
	"@Vot\x0a\xb46\x80\xe1\x0c3I\x03\xbb\xcf\xb9" +
	"0\xf4`B\x1d\xb7\xdc\x8b&2,I\xf3\x95{\x1b" +
	"\xbd\x8dR\xd8\x16\x11\x95;\xfcp\x94\xb6\x91p\xab\x88" +
	"\xca\x9d\x81\xfbx\x07\xa9\xf4U\x11\x95]\x81\xfbx'" +
	"\xe5\xca;ET\xf6R\x14\x0a\xce}\xbc\xe7.\x00e" +
	"\xaf\x88\xca\x83\x02\xc6\xb9\xb90\xea\xe3_\xa7\xfa\x8e\x0f" +
	"R!\x957|4\xa7k\x16F}t\xe2\x96\xe8\xc9" +
	"\x9c\xd5a\xaef}\x80\xd4\xea\xb1gn+\xdb\x921" +
	"L\xab\x93!7\x05U4\xaeK=\xb5nE\xc0\x1c" +
	"\x987G\xbd\x93F\x95\x12\x0c\"&ic\x80\x8f\x92" +
	"\xd6\xfb Q\x92j\xed\x96-\x163u5\x05\xd1\xee" +
	"\xa1\x0c\xb3\xf37\"\x88\xfd\x8cK\x94\x99\x9e%\x8f\x92" +
	"}\x0e\x8b\xa8<\xe9_%\xc7k\xfd\x1a\xa6T\xb0m" +
	"\x0c@s\xe9D%\x08\xa5\xe2\x15\x12z\xf4\x94t\xa0" +
	"\x11\x84\xd2\xd0e\x12zp_\xda\xbd\x04\x04),\xf2" +
	"\xdc$\xe5(\xb7gDT\xb6R\"[\xc4\x13\x934" +
	"\xb4\xdd?\xc6\xa85\x94\xa1\x12\xc5S\xd11WT\xd3" +
	"\xfb\x0c\x8c\xd9\xaf\xbc&^y\xfe\xf6\xe7\xcf\xb9y^" +
	"T\xad\xe1\x1e\xe7Z\x89\xab}\x163\xf3\x05e\x19\x08" +
	"XF\x85MNo\xb0\x12\x96\x8a\xa6\xd5\xd1\xd7\xac\x0e" +
	"\x81W5\x8d\x07\xe1@\x99\x8f\xe83\xa7R\xebr\x1f" +
	"\xf7K-\xdb}l+\xb54\xfa0[j\xb8\xcb\x07" +
	"\x91\xd4\xe2AN\xa9\xe1\xa0O\xf7I-\x07}\xac-" +
	"\xb5\x1e\xf4\x19M\xa9\xbd\xd1gw\xa4\xd6\xf5.\x90\xb4" +
	"\x1b\x0a1D\x1e24\x8c\xc2\x10\xc3n\xa4\xd8\xedc" +
	"\xe3\x835c\xe2\x03\xbbcL\x901\xec\xd6\xd9vk" +
	"\x00\x98\x8c_A{\xbbqv\xb9\xb0a\xb0?ah" +
	"\xa9\xee\x08Kg\x02`\x18Qj\xa1\x1az\x95\x88J" +
	"7\xc5l\xc8q5\x85\x8a\xe0n\x11\x95\x9b\xfd\xfbS" +
	"\xda\xf0\x9c_\xca\xd8YCK5\xb3\x8c\x85\x03+\x0d" +
	"\xb3a\x90\x99q\xb5_\xd3\xfb\xc7\xa8\xf2{\xd5\xa1l" +
	"\xab\x9e0PKu\xb3t\xe6F-\xaa\xf7\x1a\x9b\xf3" +
	"\x08\xd9v\xb0Yk\x9f\xd0\xd0c\x0c\xb2\xfc>Y:" +
	"\x13H\xe9\xe3f5\xb4\x94\"\xc4\x00qV\\\x1b " +
	"I\xc3\xb5\xd15T:P\xe2\x0bb\xa2\x11E\x8e\x1b" +
	"\\\x8bk\x03E\x8e\xee\xccn9P\xdf\x9b\xddu}" +
	"7\xbdx\xeb\xb8\x09dt\xba\x9f\xa8\xc4\xc9\xe353" +
	"\x0b\x05\xe4\x04E\xe4\x0a\x11\x95\xd5\x81\xdd\xb5V\x06\x18" +
	"\x8b\xfcy\xb4\xd7\xfa'\xe7\x037\x8frv#R\xeb" +
	"\xc5\x12\x10\xb0\x040\xaa\xabi\x96\xff\xe3O\xba\x9d\xd2" +
	"\x85\xccCu\xa7jF\xd4\xf4\x88\xcb\xa9\xd2Gz\x81" +
	"\xc5\xc6(\xa4G\xcf\xdf\xa2[\xe6\x10p\x03\x04\x8e\xa7" +
	"\xd6\x87\xac\x9e\x01\x16\xccq\xcf\xacW\x18/\xf7DL" +
	"\xd6\x87\x92\xfd\x8dW\xdfx\xf7\xfe\xd2\xd3\xef\x8f ;" +
	"\x02\xc2\x11dG\x19\x8e BP\x02l\x08\xa1\x84e" +
	"\xd8=>\x12\xc8G`\xfe\x14\xe3,_\x9b\x06\x948" +
	"\xe8\xbb\x93\xa7\xc4u$\xfc\xac\x88J3\xf9\x98f\x99" +
	"\xaa\xc5\x9a\xd0\xa9\x1eL'\xcc=\x97\xcf\xe6R}\x13" +
	"4\x8f\xbe\x9d\x0b\xac+&\x19'\x09|\x82\x1b\x97\xc4" +
	"\xb9\xbd\x95\x98\x18\x06\xf0\x98a\xcc\xbf3I\x9b\xde\x04" +
	"A\xda\x14A\x9f6\xc7<\x09*\xb1{@\x90\xd4\x08" +
	"\x0a\xde#\x0a\xe6\xf9[i-\x8d[\x1bA\xd1#\"" +
	"1\xff\x92!\xb5\xd2\xb8\x96\x88\x9d\x87^B!\x9b\x15" +
	"afv\x05\x8e\xa2P\x18\x9a+00\xaa \x86\xdc" +
	"Q\xa3\x101\x8d\xe2j\x9f_u\xff\xba\xe7\xcf~\xff" +
	"H\xb0\x92\x19\xab&\xa2\xfc@'\xf7i\x1eQ\xb7\xd5" +
	"\xf2\x9a(\xd7\xc8\xe1h\xdaa\x9e\xd8z\xce<\xa9]" +
	"\x9cy\xda\xe00Ok\xbb8\xf3\xa4\xb4q\xe6\xa9\xbd" +
	"\x8d3O\xad\x1b9\xf3\xd4\xb2\x11 \x9a3\x99:\xac" +
	"\xa6\xd3\x86\xae\xa9\xc3\xeeY\xdb\x99\x01#\x9b\x190L" +
	"\x10sY;cXj6\xab\xe5\x00\xd3\xc3\xeei\xe7" +
	"\x15b\x80M\xf9\xef5\xa4\x82\xfb\xdd\x19\xf8^\x03\xbc" +
	"\x0c\x0d\xfcIE\xebX\xd7hJ\xd5\xad\x0e3\xd2\xaf" +
	"r\xb8:\x9dk\xda\xe0h\xba\xac\x96k\xbax\x09\xd7" +
	"\xb4f\x09\xd7t\xf6r\xae\xe9\x8c%\x00Q\xd30\xac" +
	"h\x8a\xa9}\xf1\xec\x80aX\xf1>3\xa7Y\xf5Y" +
	"\xcb\xcc\xddb\xc5\xb3\xb9~\xd5\xfc/s\x99\x85\xc8\xbb" +
	"\x10\xa7\xaaQ*$\xf2(5L\xc1\xb5$\x98!\x04" +
	"\x8e\xbe\xa4\x05\xb5~V\x8f3\x1a\x891\xbf\xfcrR" +
	"D\x94\xee\"\xef\xe6\x19wA\xb4(\xbf\xc5\\\xb0\xee" +
	"U\xdf\xe5\x02M`\xb1\x09\xe0\xad?\x95\xab9\xb8\xbc" +
	"\x18E\xdcGw\xbf\xb0l\xd1\xc7\xef\xff\x06\xf3\x0f\x1b" +
	"\x92\xb4\x11\x04\xa98\xe2\x0d\x87\xa8n5X\x13\xb8\xf0" +
	"'e7\xfe7\xf9\xe2P\xa1M\x16\xe6[H\xd9\xea" +
	".\x16\xcfN\x84w\xd2\xfd\xe9\xc0\xd6\x02\xcf\x11\xe3," +
	"2v\x01\x04\xdc\xa4\xde\xa3\xa4\x84=v\xbe\xd4\x00\xaa" +
	"\x89\x94\xf9b\x08\x91\xd3\x0a\xc5\x1c\xae\x97\x10l\x9e\xce" +
	"\xe9\x03\xa7&\x92\xa7q\xf9t\x92W\xa3\x8bZ\x04D" +
	"y6\xa7\x15\xaaH\xfeit\x89D\x11Q\xae\xe1\xf2" +
	"\xf9$_\x8a.\x97\x18\x02\x90\x17\xf3y\x96\x92|\x05" +
	"\xa7\x0f\\Z\xe1\x06|\x02 \xb1\x82\xe4\xab9}\xe0" +
	"\xd2\x0a\xad\x1c\xde\xaf&\xf9\x978}\xe0\xd2\x0ak\xb1" +
	"\x0d \xd1M\xf2\x9bi#\xc5\x0e\xab\xb0\x01{\x00\x12" +
	"7\x91x\x00\x05$/.\x06\x90\x19.\x0f\x92%\x94" +
	"p\xa9\xc8\xea\xc6\x01\x93e\x07\x8cTo\xa0\xdcr*" +
	"\xb6n\x86T\xadQ\xb1F\xb9.\x1f4\x9a\xdeIh" +
	"\x11\xe2\xba\xd5\x90\xb81\xc8>\x8e\x96\xe7\xa1\xd3\x96\xba" +
	"^u\xa8\x13M\x96\xd42\x89\\zDe\xb7\xa5)" +
	"g\x9a\x04\xab\x9a\xd5\xa1N\x93\xd5;]\xbc\x0e\x16K" +
	"\xd3\xdf\x0dH\xd5a\xa3\x9aeQ\xda\xb6\xd7\xdc\xa3f" +
	"\x99S,\x06\xa8\x85\xe0\xc1b\xcc?u\x97\xa4r*" +
	"N\x8c\xf9\xa0\xa2 \x8aG9SA\xd6r\xeeb\xee" +
	"Q\x1e\x137\x11\x07\xdf\xe5g&\xaf\xdc\x0crj\x13" +
	"\x92{\x05\x0c\xfd'\xac\xdb\xfe\xbbY\x05'SvG" +
	"\x86\x9c\x87\x9b\"1Tb\xdb\xa3\xaa\xebR\xbcb\xbb" +
	"\xfa\x92t\x91\x88\xca\xe7\x04\x82\xda.\x0e\xe6\xe5u\x01" +
	"\xb2\xb45=\xd8\xea\xa1\xe9\x82*{\xfc\x80\xf7\xf0\x97" +
	"\xfbV\xe0\x84\xb5\xb4\xcf\x04P\xee\x13Q\xf9\x8eKC" +
	"\x10\xf8\xf96\x09\x1f\x14Q9\x94\x0fh\x00\xe9\x91\xbb" +
	"\x02\x0f\x08!\x87$\x94\x8e>\x01\xa0\x1c\x13Qy\x86" +
	"B9\xe6p\x13O\xf7\x00(O\x89\xa8\xbc  \x80" +
	"s9\x9di\x04P\x9e\x11Q\xf9\xa9\xf0?\x1f-\xee" +
	"\x83V7D\xb44\x1bi\xbdpT\x04\x1cv;`" +
	",\xf8\x9b\x9a\x89\x9d\xbf\x10\xbe8\xceO\xb0\xcb\x83\x1a" +
	"R\xf1\xc9\xc0\xef2J\xd7\xe71l\xbb\x18`p\x1d" +
	"\xac\xe3~R\x84\x8c\x8dy<\xc8\xb3<\x08yV8" +
	"\xb4Q\xbb\xe9?\xd2\xfa\x90\xc7[z\xec\x88\xd1\xf4\xa4" +
	"af\x0c\x13\x0a\xdei>\x19?\xf7\x9fG@\xe28" +
	"\x8f-\xc0\x8d\xe8\xff\xd0\xa9\xb8\xcb\xff\x8d\x94T|\x8f" +
	"\xdd\xe4\xbf\x11\xd9\x1d\xde\x9b\x93\xf7\x14\x96\xcf0\x88#" +
	"b\xce\xcb0\xdbGD\\\xc60-\xd6K1\x85 " +
	"\x84\xb9\xfe\xee;V;:3\xaa\x801\x7f\x03\xe3>" +
	"\xfb9\x91\x9f\xa7\xb2\xbc\x0c0\x9f\x87\xce&\xe7\xe9V" +
	"s\x9en\x99S@op\x9en78O\xb7\xeb\x9c" +
	"\x02Zq\x9en\x15\xe7\xe9Vq\x9en\x95\xc6\xff\xab" +
	"\x8f\xb5\x7f\x9c\x0d\xcd\xb3\xab%\xdc\x10\xb3\xd6sC\xcc" +
	"p\x90\x844\x07\xc0vIVN\xf7\x0d\xbb/g\x91" +
	"\x94\xaa\x8dO\x1c\x14^;c\x11\x07\x01\xf2\xb5r," +
	"\xf2\xb5\xd6'_\xf3\xbfj\xd8A\xder\x87\x88\xca_" +
	"S\xd2s_~v\xcf)\xe4^\x01\xa4=$\xdc%" +
	"\xa2r\x9f0>\x91\x90T\xcd\x1e5\xad\xf5\x06\xae\xe0" +
	"\x88>\xb0\xd4\xff6\xea&\x80\xad#\xcd\x08\x9cN\xf5" +
	"\x7f\xd8(U\x06~cRZ\xeb\xff\xaeM*\xae\x15" +
	"\x9bVs\xa3s\x1e:x\xdd\xf6\xb8\xc1\xd0\xec\x05\xc3" +
	"\xe2\x86\xc9\xe8'\x0e\xdb=\xd4\x04D2,\xe9\xdfz" +
	"\xde\xe4\xee\xad\x97\xccY\xed\xea\x96\x86\xac\x98\xd5\xd2Z" +
	"\x8a[\xbfK\xb5X'+d\x88\x01\xff#\x00\x00\xff" +
	"\xff\xa1\xd3\xd4\x0e"

func init() {
	schemas.Register(schema_b30a3af53cea6b3e,
		0x80ce153f3bc9a9e8,
		0x81b1cd5c7865e185,
		0x825bb2508c0b37b2,
		0x82a74595175b71a3,
		0x87feb816363ff43c,
		0x88a5848ef8603554,
		0x8cb6b3e3c50d3665,
		0x8f0cbec420589373,
		0x8fa09457bc1bfc34,
		0x940d47081167b059,
		0x953375ac67d4f573,
		0x9539b8e14ac7d5a9,
		0x962b157a9dc85681,
		0x9846fdc78610c262,
		0x987b68b57edbbdb6,
		0x9a221e04faf79efc,
		0x9c5dedfd679ac842,
		0x9d247c812334c917,
		0x9d81d2bf4cd0f868,
		0xaafe4332e17aa43e,
		0xb0919989cca2fd9a,
		0xb1c2fa546f41d480,
		0xb2df3dc668478979,
		0xb991be9572278e2d,
		0xbbb7aeae0d097e05,
		0xbc6b579acf43fb6e,
		0xc2d50914b83d42de,
		0xc5292994de2615c2,
		0xc58610b90af83811,
		0xc6c4991fe51b272f,
		0xc876b729b7d7f6d9,
		0xcb1556d28ba514af,
		0xcca7748d367db151,
		0xcfcf44997e7ceab4,
		0xd3da30ea7b25d921,
		0xd801f16b6fa39a94,
		0xe1ed73d59c8ce359,
		0xe3a37e340f816cd1,
		0xe98c76fb0fb0b2cd,
		0xeddbace5e62bf665,
		0xeed4e55bb04289ef,
		0xf082ec2d0eb50c9b,
		0xf0c763e472409ba2,
		0xfcd78361390515e1,
		0xfec75f2ddd43431d)
}
