// Code generated by capnpc-go. DO NOT EDIT.

package management

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	crop "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/geo"
	math "math"
	strconv "strconv"
)

type ILRDates struct{ capnp.Struct }

// ILRDates_TypeID is the unique identifier for the type ILRDates.
const ILRDates_TypeID = 0xc70d4452b8b0ebd7

func NewILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates{st}, err
}

func NewRootILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates{st}, err
}

func ReadRootILRDates(msg *capnp.Message) (ILRDates, error) {
	root, err := msg.Root()
	return ILRDates{root.Struct()}, err
}

func (s ILRDates) String() string {
	str, _ := text.Marshal(0xc70d4452b8b0ebd7, s.Struct)
	return str
}

func (s ILRDates) Sowing() (common.Date, error) {
	p, err := s.Struct.Ptr(0)
	return common.Date{Struct: p.Struct()}, err
}

func (s ILRDates) HasSowing() bool {
	return s.Struct.HasPtr(0)
}

func (s ILRDates) SetSowing(v common.Date) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewSowing() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ILRDates) EarliestSowing() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s ILRDates) HasEarliestSowing() bool {
	return s.Struct.HasPtr(1)
}

func (s ILRDates) SetEarliestSowing(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEarliestSowing sets the earliestSowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewEarliestSowing() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s ILRDates) LatestSowing() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s ILRDates) HasLatestSowing() bool {
	return s.Struct.HasPtr(2)
}

func (s ILRDates) SetLatestSowing(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewLatestSowing sets the latestSowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestSowing() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s ILRDates) Harvest() (common.Date, error) {
	p, err := s.Struct.Ptr(3)
	return common.Date{Struct: p.Struct()}, err
}

func (s ILRDates) HasHarvest() bool {
	return s.Struct.HasPtr(3)
}

func (s ILRDates) SetHarvest(v common.Date) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewHarvest() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s ILRDates) LatestHarvest() (common.Date, error) {
	p, err := s.Struct.Ptr(4)
	return common.Date{Struct: p.Struct()}, err
}

func (s ILRDates) HasLatestHarvest() bool {
	return s.Struct.HasPtr(4)
}

func (s ILRDates) SetLatestHarvest(v common.Date) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewLatestHarvest sets the latestHarvest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestHarvest() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

// ILRDates_List is a list of ILRDates.
type ILRDates_List struct{ capnp.List }

// NewILRDates creates a new list of ILRDates.
func NewILRDates_List(s *capnp.Segment, sz int32) (ILRDates_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return ILRDates_List{l}, err
}

func (s ILRDates_List) At(i int) ILRDates { return ILRDates{s.List.Struct(i)} }

func (s ILRDates_List) Set(i int, v ILRDates) error { return s.List.SetStruct(i, v.Struct) }

func (s ILRDates_List) String() string {
	str, _ := text.MarshalList(0xc70d4452b8b0ebd7, s.List)
	return str
}

// ILRDates_Future is a wrapper for a ILRDates promised by a client call.
type ILRDates_Future struct{ *capnp.Future }

func (p ILRDates_Future) Struct() (ILRDates, error) {
	s, err := p.Future.Struct()
	return ILRDates{s}, err
}

func (p ILRDates_Future) Sowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

func (p ILRDates_Future) EarliestSowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p ILRDates_Future) LatestSowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

func (p ILRDates_Future) Harvest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}

func (p ILRDates_Future) LatestHarvest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}

type MineralFertilizer uint16

// MineralFertilizer_TypeID is the unique identifier for the type MineralFertilizer.
const MineralFertilizer_TypeID = 0xf95ca008c46a4b3b

// Values of MineralFertilizer.
const (
	MineralFertilizer_ahls  MineralFertilizer = 0
	MineralFertilizer_alzon MineralFertilizer = 1
	MineralFertilizer_an    MineralFertilizer = 2
	MineralFertilizer_ap    MineralFertilizer = 3
	MineralFertilizer_as    MineralFertilizer = 4
	MineralFertilizer_ash   MineralFertilizer = 5
	MineralFertilizer_cf4   MineralFertilizer = 6
	MineralFertilizer_cp1   MineralFertilizer = 7
	MineralFertilizer_cp2   MineralFertilizer = 8
	MineralFertilizer_cp3   MineralFertilizer = 9
	MineralFertilizer_npk   MineralFertilizer = 10
	MineralFertilizer_ns    MineralFertilizer = 11
	MineralFertilizer_u     MineralFertilizer = 12
	MineralFertilizer_uan   MineralFertilizer = 13
	MineralFertilizer_uas   MineralFertilizer = 14
	MineralFertilizer_uni   MineralFertilizer = 15
)

// String returns the enum's constant name.
func (c MineralFertilizer) String() string {
	switch c {
	case MineralFertilizer_ahls:
		return "ahls"
	case MineralFertilizer_alzon:
		return "alzon"
	case MineralFertilizer_an:
		return "an"
	case MineralFertilizer_ap:
		return "ap"
	case MineralFertilizer_as:
		return "as"
	case MineralFertilizer_ash:
		return "ash"
	case MineralFertilizer_cf4:
		return "cf4"
	case MineralFertilizer_cp1:
		return "cp1"
	case MineralFertilizer_cp2:
		return "cp2"
	case MineralFertilizer_cp3:
		return "cp3"
	case MineralFertilizer_npk:
		return "npk"
	case MineralFertilizer_ns:
		return "ns"
	case MineralFertilizer_u:
		return "u"
	case MineralFertilizer_uan:
		return "uan"
	case MineralFertilizer_uas:
		return "uas"
	case MineralFertilizer_uni:
		return "uni"

	default:
		return ""
	}
}

// MineralFertilizerFromString returns the enum value with a name,
// or the zero value if there's no such value.
func MineralFertilizerFromString(c string) MineralFertilizer {
	switch c {
	case "ahls":
		return MineralFertilizer_ahls
	case "alzon":
		return MineralFertilizer_alzon
	case "an":
		return MineralFertilizer_an
	case "ap":
		return MineralFertilizer_ap
	case "as":
		return MineralFertilizer_as
	case "ash":
		return MineralFertilizer_ash
	case "cf4":
		return MineralFertilizer_cf4
	case "cp1":
		return MineralFertilizer_cp1
	case "cp2":
		return MineralFertilizer_cp2
	case "cp3":
		return MineralFertilizer_cp3
	case "npk":
		return MineralFertilizer_npk
	case "ns":
		return MineralFertilizer_ns
	case "u":
		return MineralFertilizer_u
	case "uan":
		return MineralFertilizer_uan
	case "uas":
		return MineralFertilizer_uas
	case "uni":
		return MineralFertilizer_uni

	default:
		return 0
	}
}

type MineralFertilizer_List struct{ capnp.List }

func NewMineralFertilizer_List(s *capnp.Segment, sz int32) (MineralFertilizer_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return MineralFertilizer_List{l.List}, err
}

func (l MineralFertilizer_List) At(i int) MineralFertilizer {
	ul := capnp.UInt16List{List: l.List}
	return MineralFertilizer(ul.At(i))
}

func (l MineralFertilizer_List) Set(i int, v MineralFertilizer) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type OrganicFertilizer uint16

// OrganicFertilizer_TypeID is the unique identifier for the type OrganicFertilizer.
const OrganicFertilizer_TypeID = 0x84acb8f8eab508b9

// Values of OrganicFertilizer.
const (
	OrganicFertilizer_ash   OrganicFertilizer = 0
	OrganicFertilizer_cadlm OrganicFertilizer = 1
	OrganicFertilizer_cam   OrganicFertilizer = 2
	OrganicFertilizer_cas   OrganicFertilizer = 3
	OrganicFertilizer_cau   OrganicFertilizer = 4
	OrganicFertilizer_dgdlm OrganicFertilizer = 5
	OrganicFertilizer_gwc   OrganicFertilizer = 6
	OrganicFertilizer_hodlm OrganicFertilizer = 7
	OrganicFertilizer_mc    OrganicFertilizer = 8
	OrganicFertilizer_ms    OrganicFertilizer = 9
	OrganicFertilizer_oic   OrganicFertilizer = 10
	OrganicFertilizer_pidlm OrganicFertilizer = 11
	OrganicFertilizer_pim   OrganicFertilizer = 12
	OrganicFertilizer_pis   OrganicFertilizer = 13
	OrganicFertilizer_piu   OrganicFertilizer = 14
	OrganicFertilizer_piudk OrganicFertilizer = 15
	OrganicFertilizer_plw   OrganicFertilizer = 16
	OrganicFertilizer_podlm OrganicFertilizer = 17
	OrganicFertilizer_pom   OrganicFertilizer = 18
	OrganicFertilizer_soy   OrganicFertilizer = 19
	OrganicFertilizer_ss    OrganicFertilizer = 20
	OrganicFertilizer_tudlm OrganicFertilizer = 21
	OrganicFertilizer_weeds OrganicFertilizer = 22
	OrganicFertilizer_ws    OrganicFertilizer = 23
)

// String returns the enum's constant name.
func (c OrganicFertilizer) String() string {
	switch c {
	case OrganicFertilizer_ash:
		return "ash"
	case OrganicFertilizer_cadlm:
		return "cadlm"
	case OrganicFertilizer_cam:
		return "cam"
	case OrganicFertilizer_cas:
		return "cas"
	case OrganicFertilizer_cau:
		return "cau"
	case OrganicFertilizer_dgdlm:
		return "dgdlm"
	case OrganicFertilizer_gwc:
		return "gwc"
	case OrganicFertilizer_hodlm:
		return "hodlm"
	case OrganicFertilizer_mc:
		return "mc"
	case OrganicFertilizer_ms:
		return "ms"
	case OrganicFertilizer_oic:
		return "oic"
	case OrganicFertilizer_pidlm:
		return "pidlm"
	case OrganicFertilizer_pim:
		return "pim"
	case OrganicFertilizer_pis:
		return "pis"
	case OrganicFertilizer_piu:
		return "piu"
	case OrganicFertilizer_piudk:
		return "piudk"
	case OrganicFertilizer_plw:
		return "plw"
	case OrganicFertilizer_podlm:
		return "podlm"
	case OrganicFertilizer_pom:
		return "pom"
	case OrganicFertilizer_soy:
		return "soy"
	case OrganicFertilizer_ss:
		return "ss"
	case OrganicFertilizer_tudlm:
		return "tudlm"
	case OrganicFertilizer_weeds:
		return "weeds"
	case OrganicFertilizer_ws:
		return "ws"

	default:
		return ""
	}
}

// OrganicFertilizerFromString returns the enum value with a name,
// or the zero value if there's no such value.
func OrganicFertilizerFromString(c string) OrganicFertilizer {
	switch c {
	case "ash":
		return OrganicFertilizer_ash
	case "cadlm":
		return OrganicFertilizer_cadlm
	case "cam":
		return OrganicFertilizer_cam
	case "cas":
		return OrganicFertilizer_cas
	case "cau":
		return OrganicFertilizer_cau
	case "dgdlm":
		return OrganicFertilizer_dgdlm
	case "gwc":
		return OrganicFertilizer_gwc
	case "hodlm":
		return OrganicFertilizer_hodlm
	case "mc":
		return OrganicFertilizer_mc
	case "ms":
		return OrganicFertilizer_ms
	case "oic":
		return OrganicFertilizer_oic
	case "pidlm":
		return OrganicFertilizer_pidlm
	case "pim":
		return OrganicFertilizer_pim
	case "pis":
		return OrganicFertilizer_pis
	case "piu":
		return OrganicFertilizer_piu
	case "piudk":
		return OrganicFertilizer_piudk
	case "plw":
		return OrganicFertilizer_plw
	case "podlm":
		return OrganicFertilizer_podlm
	case "pom":
		return OrganicFertilizer_pom
	case "soy":
		return OrganicFertilizer_soy
	case "ss":
		return OrganicFertilizer_ss
	case "tudlm":
		return OrganicFertilizer_tudlm
	case "weeds":
		return OrganicFertilizer_weeds
	case "ws":
		return OrganicFertilizer_ws

	default:
		return 0
	}
}

type OrganicFertilizer_List struct{ capnp.List }

func NewOrganicFertilizer_List(s *capnp.Segment, sz int32) (OrganicFertilizer_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return OrganicFertilizer_List{l.List}, err
}

func (l OrganicFertilizer_List) At(i int) OrganicFertilizer {
	ul := capnp.UInt16List{List: l.List}
	return OrganicFertilizer(ul.At(i))
}

func (l OrganicFertilizer_List) Set(i int, v OrganicFertilizer) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0x82a74595175b71a3

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List struct{ capnp.List }

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return EventType_List{l.List}, err
}

func (l EventType_List) At(i int) EventType {
	ul := capnp.UInt16List{List: l.List}
	return EventType(ul.At(i))
}

func (l EventType_List) Set(i int, v EventType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xc2d50914b83d42de

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List struct{ capnp.List }

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PlantOrgan_List{l.List}, err
}

func (l PlantOrgan_List) At(i int) PlantOrgan {
	ul := capnp.UInt16List{List: l.List}
	return PlantOrgan(ul.At(i))
}

func (l PlantOrgan_List) Set(i int, v PlantOrgan) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event struct{ capnp.Struct }
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0x9c5dedfd679ac842

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event{st}, err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event{st}, err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event{root.Struct()}, err
}

func (s Event) String() string {
	str, _ := text.Marshal(0x9c5dedfd679ac842, s.Struct)
	return str
}

func (s Event) Which() Event_Which {
	return Event_Which(s.Struct.Uint16(2))
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(s.Struct.Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Event) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	s.Struct.SetUint16(2, 0)
}

func (s Event_at) Date() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s Event_at) HasDate() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_at) SetDate(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	s.Struct.SetUint16(2, 1)
}

func (s Event_between) Earliest() (common.Date, error) {
	p, err := s.Struct.Ptr(1)
	return common.Date{Struct: p.Struct()}, err
}

func (s Event_between) HasEarliest() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_between) SetEarliest(v common.Date) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common.Date, error) {
	p, err := s.Struct.Ptr(2)
	return common.Date{Struct: p.Struct()}, err
}

func (s Event_between) HasLatest() bool {
	return s.Struct.HasPtr(2)
}

func (s Event_between) SetLatest(v common.Date) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common.Date, error) {
	ss, err := common.NewDate(s.Struct.Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	s.Struct.SetUint16(2, 2)
}

func (s Event_after) Event() (Event_Type, error) {
	p, err := s.Struct.Ptr(1)
	return Event_Type{Struct: p.Struct()}, err
}

func (s Event_after) HasEvent() bool {
	return s.Struct.HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(s.Struct.Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return s.Struct.Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(3)
}

func (s Event) HasParams() bool {
	return s.Struct.HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(3, v)
}

func (s Event) RunAtStartOfDay() bool {
	return s.Struct.Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	s.Struct.SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List struct{ capnp.List }

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Event_List{l}, err
}

func (s Event_List) At(i int) Event { return Event{s.List.Struct(i)} }

func (s Event_List) Set(i int, v Event) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_List) String() string {
	str, _ := text.MarshalList(0x9c5dedfd679ac842, s.List)
	return str
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (p Event_Future) Struct() (Event, error) {
	s, err := p.Future.Struct()
	return Event{s}, err
}

func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (p Event_at_Future) Struct() (Event_at, error) {
	s, err := p.Future.Struct()
	return Event_at{s}, err
}

func (p Event_at_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (p Event_between_Future) Struct() (Event_between, error) {
	s, err := p.Future.Struct()
	return Event_between{s}, err
}

func (p Event_between_Future) Earliest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_between_Future) Latest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}

func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (p Event_after_Future) Struct() (Event_after, error) {
	s, err := p.Future.Struct()
	return Event_after{s}, err
}

func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}

func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xf082ec2d0eb50c9b

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List struct{ capnp.List }

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Event_ExternalType_List{l.List}, err
}

func (l Event_ExternalType_List) At(i int) Event_ExternalType {
	ul := capnp.UInt16List{List: l.List}
	return Event_ExternalType(ul.At(i))
}

func (l Event_ExternalType_List) Set(i int, v Event_ExternalType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0x8fa09457bc1bfc34

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List struct{ capnp.List }

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Event_PhenoStage_List{l.List}, err
}

func (l Event_PhenoStage_List) At(i int) Event_PhenoStage {
	ul := capnp.UInt16List{List: l.List}
	return Event_PhenoStage(ul.At(i))
}

func (l Event_PhenoStage_List) Set(i int, v Event_PhenoStage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Event_Type struct{ capnp.Struct }
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xe1ed73d59c8ce359

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type{st}, err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type{st}, err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type{root.Struct()}, err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xe1ed73d59c8ce359, s.Struct)
	return str
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(s.Struct.Uint16(2))
}
func (s Event_Type) External() Event_ExternalType {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(s.Struct.Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(s.Struct.Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List struct{ capnp.List }

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Event_Type_List{l}, err
}

func (s Event_Type_List) At(i int) Event_Type { return Event_Type{s.List.Struct(i)} }

func (s Event_Type_List) Set(i int, v Event_Type) error { return s.List.SetStruct(i, v.Struct) }

func (s Event_Type_List) String() string {
	str, _ := text.MarshalList(0xe1ed73d59c8ce359, s.List)
	return str
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (p Event_Type_Future) Struct() (Event_Type, error) {
	s, err := p.Future.Struct()
	return Event_Type{s}, err
}

type Params struct{ capnp.Struct }

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0x9d247c812334c917

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params{st}, err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params{st}, err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params{root.Struct()}, err
}

func (s Params) String() string {
	str, _ := text.Marshal(0x9d247c812334c917, s.Struct)
	return str
}

// Params_List is a list of Params.
type Params_List struct{ capnp.List }

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Params_List{l}, err
}

func (s Params_List) At(i int) Params { return Params{s.List.Struct(i)} }

func (s Params_List) Set(i int, v Params) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_List) String() string {
	str, _ := text.MarshalList(0x9d247c812334c917, s.List)
	return str
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (p Params_Future) Struct() (Params, error) {
	s, err := p.Future.Struct()
	return Params{s}, err
}

type Params_Sowing struct{ capnp.Struct }

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0x80ce153f3bc9a9e8

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Sowing{st}, err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Sowing{st}, err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing{root.Struct()}, err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0x80ce153f3bc9a9e8, s.Struct)
	return str
}

func (s Params_Sowing) Cultivar() crop.Cultivar {
	return crop.Cultivar(s.Struct.Uint16(0))
}

func (s Params_Sowing) SetCultivar(v crop.Cultivar) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Params_Sowing) PlantDensity() uint16 {
	return s.Struct.Uint16(2)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := s.Struct.Ptr(0)
	return crop.Crop{Client: p.Interface().Client()}
}

func (s Params_Sowing) HasCrop() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List struct{ capnp.List }

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Sowing_List{l}, err
}

func (s Params_Sowing_List) At(i int) Params_Sowing { return Params_Sowing{s.List.Struct(i)} }

func (s Params_Sowing_List) Set(i int, v Params_Sowing) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Sowing_List) String() string {
	str, _ := text.MarshalList(0x80ce153f3bc9a9e8, s.List)
	return str
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (p Params_Sowing_Future) Struct() (Params_Sowing, error) {
	s, err := p.Future.Struct()
	return Params_Sowing{s}, err
}

func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop{Client: p.Future.Field(0, nil).Client()}
}

type Params_AutomaticSowing struct{ capnp.Struct }

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xcfcf44997e7ceab4

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing{st}, err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing{st}, err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing{root.Struct()}, err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xcfcf44997e7ceab4, s.Struct)
	return str
}

func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := s.Struct.Ptr(1)
	return Params_Sowing{Struct: p.Struct()}, err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(s.Struct.Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return s.Struct.Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := s.Struct.Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp{Struct: p.Struct()}, err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(s.Struct.Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List struct{ capnp.List }

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return Params_AutomaticSowing_List{l}, err
}

func (s Params_AutomaticSowing_List) At(i int) Params_AutomaticSowing {
	return Params_AutomaticSowing{s.List.Struct(i)}
}

func (s Params_AutomaticSowing_List) Set(i int, v Params_AutomaticSowing) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticSowing_List) String() string {
	str, _ := text.MarshalList(0xcfcf44997e7ceab4, s.List)
	return str
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (p Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticSowing{s}, err
}

func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}

func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp struct{ capnp.Struct }

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x9d81d2bf4cd0f868

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp{st}, err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp{st}, err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp{root.Struct()}, err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x9d81d2bf4cd0f868, s.Struct)
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return s.Struct.Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List struct{ capnp.List }

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Params_AutomaticSowing_AvgSoilTemp_List{l}, err
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) At(i int) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp{s.List.Struct(i)}
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) Set(i int, v Params_AutomaticSowing_AvgSoilTemp) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticSowing_AvgSoilTemp_List) String() string {
	str, _ := text.MarshalList(0x9d81d2bf4cd0f868, s.List)
	return str
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (p Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticSowing_AvgSoilTemp{s}, err
}

type Params_Harvest struct{ capnp.Struct }

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0xeed4e55bb04289ef

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest{st}, err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest{st}, err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest{root.Struct()}, err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0xeed4e55bb04289ef, s.Struct)
	return str
}

func (s Params_Harvest) Exported() bool {
	return !s.Struct.Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	s.Struct.SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Harvest_OptCarbonMgmtData{Struct: p.Struct()}, err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(s.Struct.Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List struct{ capnp.List }

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Harvest_List{l}, err
}

func (s Params_Harvest_List) At(i int) Params_Harvest { return Params_Harvest{s.List.Struct(i)} }

func (s Params_Harvest_List) Set(i int, v Params_Harvest) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Harvest_List) String() string {
	str, _ := text.MarshalList(0xeed4e55bb04289ef, s.List)
	return str
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (p Params_Harvest_Future) Struct() (Params_Harvest, error) {
	s, err := p.Future.Struct()
	return Params_Harvest{s}, err
}

func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0x8f0cbec420589373

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List struct{ capnp.List }

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Harvest_CropUsage_List{l.List}, err
}

func (l Params_Harvest_CropUsage_List) At(i int) Params_Harvest_CropUsage {
	ul := capnp.UInt16List{List: l.List}
	return Params_Harvest_CropUsage(ul.At(i))
}

func (l Params_Harvest_CropUsage_List) Set(i int, v Params_Harvest_CropUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Harvest_OptCarbonMgmtData struct{ capnp.Struct }

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0x8cb6b3e3c50d3665

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData{st}, err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData{st}, err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData{root.Struct()}, err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0x8cb6b3e3c50d3665, s.Struct)
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return s.Struct.Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(s.Struct.Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	s.Struct.SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List struct{ capnp.List }

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return Params_Harvest_OptCarbonMgmtData_List{l}, err
}

func (s Params_Harvest_OptCarbonMgmtData_List) At(i int) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData{s.List.Struct(i)}
}

func (s Params_Harvest_OptCarbonMgmtData_List) Set(i int, v Params_Harvest_OptCarbonMgmtData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Harvest_OptCarbonMgmtData_List) String() string {
	str, _ := text.MarshalList(0x8cb6b3e3c50d3665, s.List)
	return str
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (p Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	s, err := p.Future.Struct()
	return Params_Harvest_OptCarbonMgmtData{s}, err
}

type Params_AutomaticHarvest struct{ capnp.Struct }

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xe3a37e340f816cd1

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest{st}, err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest{st}, err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest{root.Struct()}, err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xe3a37e340f816cd1, s.Struct)
	return str
}

func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Harvest{Struct: p.Struct()}, err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(s.Struct.Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(s.Struct.Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	s.Struct.SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List struct{ capnp.List }

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return Params_AutomaticHarvest_List{l}, err
}

func (s Params_AutomaticHarvest_List) At(i int) Params_AutomaticHarvest {
	return Params_AutomaticHarvest{s.List.Struct(i)}
}

func (s Params_AutomaticHarvest_List) Set(i int, v Params_AutomaticHarvest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_AutomaticHarvest_List) String() string {
	str, _ := text.MarshalList(0xe3a37e340f816cd1, s.List)
	return str
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (p Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	s, err := p.Future.Struct()
	return Params_AutomaticHarvest{s}, err
}

func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting struct{ capnp.Struct }

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0xfec75f2ddd43431d

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting{st}, err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting{st}, err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting{root.Struct()}, err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0xfec75f2ddd43431d, s.Struct)
	return str
}

func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Cutting_Spec_List{List: p.List()}, err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(s.Struct.Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List struct{ capnp.List }

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Cutting_List{l}, err
}

func (s Params_Cutting_List) At(i int) Params_Cutting { return Params_Cutting{s.List.Struct(i)} }

func (s Params_Cutting_List) Set(i int, v Params_Cutting) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Cutting_List) String() string {
	str, _ := text.MarshalList(0xfec75f2ddd43431d, s.List)
	return str
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (p Params_Cutting_Future) Struct() (Params_Cutting, error) {
	s, err := p.Future.Struct()
	return Params_Cutting{s}, err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0x825bb2508c0b37b2

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List struct{ capnp.List }

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Cutting_CL_List{l.List}, err
}

func (l Params_Cutting_CL_List) At(i int) Params_Cutting_CL {
	ul := capnp.UInt16List{List: l.List}
	return Params_Cutting_CL(ul.At(i))
}

func (l Params_Cutting_CL_List) Set(i int, v Params_Cutting_CL) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0xf0c763e472409ba2

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List struct{ capnp.List }

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Params_Cutting_Unit_List{l.List}, err
}

func (l Params_Cutting_Unit_List) At(i int) Params_Cutting_Unit {
	ul := capnp.UInt16List{List: l.List}
	return Params_Cutting_Unit(ul.At(i))
}

func (l Params_Cutting_Unit_List) Set(i int, v Params_Cutting_Unit) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Params_Cutting_Spec struct{ capnp.Struct }

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0x9a221e04faf79efc

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec{st}, err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec{st}, err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec{root.Struct()}, err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0x9a221e04faf79efc, s.Struct)
	return str
}

func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(s.Struct.Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(s.Struct.Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(s.Struct.Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(s.Struct.Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List struct{ capnp.List }

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return Params_Cutting_Spec_List{l}, err
}

func (s Params_Cutting_Spec_List) At(i int) Params_Cutting_Spec {
	return Params_Cutting_Spec{s.List.Struct(i)}
}

func (s Params_Cutting_Spec_List) Set(i int, v Params_Cutting_Spec) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Cutting_Spec_List) String() string {
	str, _ := text.MarshalList(0x9a221e04faf79efc, s.List)
	return str
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (p Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	s, err := p.Future.Struct()
	return Params_Cutting_Spec{s}, err
}

type Params_MineralFertilization struct{ capnp.Struct }

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xd3da30ea7b25d921

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization{st}, err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization{st}, err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization{root.Struct()}, err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xd3da30ea7b25d921, s.Struct)
	return str
}

func (s Params_MineralFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s Params_MineralFertilization) HasPartition() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_MineralFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_MineralFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List struct{ capnp.List }

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_MineralFertilization_List{l}, err
}

func (s Params_MineralFertilization_List) At(i int) Params_MineralFertilization {
	return Params_MineralFertilization{s.List.Struct(i)}
}

func (s Params_MineralFertilization_List) Set(i int, v Params_MineralFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_MineralFertilization_List) String() string {
	str, _ := text.MarshalList(0xd3da30ea7b25d921, s.List)
	return str
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (p Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	s, err := p.Future.Struct()
	return Params_MineralFertilization{s}, err
}

func (p Params_MineralFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_MineralFertilization_Parameters struct{ capnp.Struct }

// Params_MineralFertilization_Parameters_TypeID is the unique identifier for the type Params_MineralFertilization_Parameters.
const Params_MineralFertilization_Parameters_TypeID = 0xfcd78361390515e1

func NewParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters{st}, err
}

func NewRootParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters{st}, err
}

func ReadRootParams_MineralFertilization_Parameters(msg *capnp.Message) (Params_MineralFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_MineralFertilization_Parameters{root.Struct()}, err
}

func (s Params_MineralFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xfcd78361390515e1, s.Struct)
	return str
}

func (s Params_MineralFertilization_Parameters) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_MineralFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Params_MineralFertilization_Parameters) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_MineralFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Params_MineralFertilization_Parameters) Carbamid() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_MineralFertilization_Parameters) SetCarbamid(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) Nh4() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_MineralFertilization_Parameters) SetNh4(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) No3() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_MineralFertilization_Parameters) SetNo3(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// Params_MineralFertilization_Parameters_List is a list of Params_MineralFertilization_Parameters.
type Params_MineralFertilization_Parameters_List struct{ capnp.List }

// NewParams_MineralFertilization_Parameters creates a new list of Params_MineralFertilization_Parameters.
func NewParams_MineralFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return Params_MineralFertilization_Parameters_List{l}, err
}

func (s Params_MineralFertilization_Parameters_List) At(i int) Params_MineralFertilization_Parameters {
	return Params_MineralFertilization_Parameters{s.List.Struct(i)}
}

func (s Params_MineralFertilization_Parameters_List) Set(i int, v Params_MineralFertilization_Parameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_MineralFertilization_Parameters_List) String() string {
	str, _ := text.MarshalList(0xfcd78361390515e1, s.List)
	return str
}

// Params_MineralFertilization_Parameters_Future is a wrapper for a Params_MineralFertilization_Parameters promised by a client call.
type Params_MineralFertilization_Parameters_Future struct{ *capnp.Future }

func (p Params_MineralFertilization_Parameters_Future) Struct() (Params_MineralFertilization_Parameters, error) {
	s, err := p.Future.Struct()
	return Params_MineralFertilization_Parameters{s}, err
}

type Params_NDemandFertilization struct{ capnp.Struct }

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0x953375ac67d4f573

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization{st}, err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization{st}, err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization{root.Struct()}, err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0x953375ac67d4f573, s.Struct)
	return str
}

func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s Params_NDemandFertilization) HasPartition() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_NDemandFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_NDemandFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return s.Struct.Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	s.Struct.SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List struct{ capnp.List }

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Params_NDemandFertilization_List{l}, err
}

func (s Params_NDemandFertilization_List) At(i int) Params_NDemandFertilization {
	return Params_NDemandFertilization{s.List.Struct(i)}
}

func (s Params_NDemandFertilization_List) Set(i int, v Params_NDemandFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_NDemandFertilization_List) String() string {
	str, _ := text.MarshalList(0x953375ac67d4f573, s.List)
	return str
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (p Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	s, err := p.Future.Struct()
	return Params_NDemandFertilization{s}, err
}

func (p Params_NDemandFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization struct{ capnp.Struct }

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xe98c76fb0fb0b2cd

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization{st}, err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization{st}, err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization{root.Struct()}, err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xe98c76fb0fb0b2cd, s.Struct)
	return str
}

func (s Params_OrganicFertilization) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_OrganicFertilization_Parameters{Struct: p.Struct()}, err
}

func (s Params_OrganicFertilization) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_OrganicFertilization) SetParams(v Params_OrganicFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return s.Struct.Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	s.Struct.SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List struct{ capnp.List }

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return Params_OrganicFertilization_List{l}, err
}

func (s Params_OrganicFertilization_List) At(i int) Params_OrganicFertilization {
	return Params_OrganicFertilization{s.List.Struct(i)}
}

func (s Params_OrganicFertilization_List) Set(i int, v Params_OrganicFertilization) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_OrganicFertilization_List) String() string {
	str, _ := text.MarshalList(0xe98c76fb0fb0b2cd, s.List)
	return str
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (p Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	s, err := p.Future.Struct()
	return Params_OrganicFertilization{s}, err
}

func (p Params_OrganicFertilization_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization_OrganicMatterParameters struct{ capnp.Struct }

// Params_OrganicFertilization_OrganicMatterParameters_TypeID is the unique identifier for the type Params_OrganicFertilization_OrganicMatterParameters.
const Params_OrganicFertilization_OrganicMatterParameters_TypeID = 0x962b157a9dc85681

func NewParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters{st}, err
}

func NewRootParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters{st}, err
}

func ReadRootParams_OrganicFertilization_OrganicMatterParameters(msg *capnp.Message) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_OrganicMatterParameters{root.Struct()}, err
}

func (s Params_OrganicFertilization_OrganicMatterParameters) String() string {
	str, _ := text.Marshal(0x962b157a9dc85681, s.Struct)
	return str
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomDryMatterContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomDryMatterContent(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNH4Content() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNH4Content(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNO3Content() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNO3Content(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomCarbamidContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomCarbamidContent(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomSlowDecCoeffStandard(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomFastDecCoeffStandard(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMSlow(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMFast(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMSlow(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMFast(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBSlow(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBFast(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) NConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetNConcentration(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

// Params_OrganicFertilization_OrganicMatterParameters_List is a list of Params_OrganicFertilization_OrganicMatterParameters.
type Params_OrganicFertilization_OrganicMatterParameters_List struct{ capnp.List }

// NewParams_OrganicFertilization_OrganicMatterParameters creates a new list of Params_OrganicFertilization_OrganicMatterParameters.
func NewParams_OrganicFertilization_OrganicMatterParameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_OrganicMatterParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return Params_OrganicFertilization_OrganicMatterParameters_List{l}, err
}

func (s Params_OrganicFertilization_OrganicMatterParameters_List) At(i int) Params_OrganicFertilization_OrganicMatterParameters {
	return Params_OrganicFertilization_OrganicMatterParameters{s.List.Struct(i)}
}

func (s Params_OrganicFertilization_OrganicMatterParameters_List) Set(i int, v Params_OrganicFertilization_OrganicMatterParameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_OrganicFertilization_OrganicMatterParameters_List) String() string {
	str, _ := text.MarshalList(0x962b157a9dc85681, s.List)
	return str
}

// Params_OrganicFertilization_OrganicMatterParameters_Future is a wrapper for a Params_OrganicFertilization_OrganicMatterParameters promised by a client call.
type Params_OrganicFertilization_OrganicMatterParameters_Future struct{ *capnp.Future }

func (p Params_OrganicFertilization_OrganicMatterParameters_Future) Struct() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	s, err := p.Future.Struct()
	return Params_OrganicFertilization_OrganicMatterParameters{s}, err
}

type Params_OrganicFertilization_Parameters struct{ capnp.Struct }

// Params_OrganicFertilization_Parameters_TypeID is the unique identifier for the type Params_OrganicFertilization_Parameters.
const Params_OrganicFertilization_Parameters_TypeID = 0xb0919989cca2fd9a

func NewParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters{st}, err
}

func NewRootParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters{st}, err
}

func ReadRootParams_OrganicFertilization_Parameters(msg *capnp.Message) (Params_OrganicFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_Parameters{root.Struct()}, err
}

func (s Params_OrganicFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xb0919989cca2fd9a, s.Struct)
	return str
}

func (s Params_OrganicFertilization_Parameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters{Struct: p.Struct()}, err
}

func (s Params_OrganicFertilization_Parameters) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_OrganicFertilization_Parameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization_Parameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(s.Struct.Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization_Parameters) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasId() bool {
	return s.Struct.HasPtr(1)
}

func (s Params_OrganicFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Params_OrganicFertilization_Parameters) Name() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasName() bool {
	return s.Struct.HasPtr(2)
}

func (s Params_OrganicFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetName(v string) error {
	return s.Struct.SetText(2, v)
}

// Params_OrganicFertilization_Parameters_List is a list of Params_OrganicFertilization_Parameters.
type Params_OrganicFertilization_Parameters_List struct{ capnp.List }

// NewParams_OrganicFertilization_Parameters creates a new list of Params_OrganicFertilization_Parameters.
func NewParams_OrganicFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Params_OrganicFertilization_Parameters_List{l}, err
}

func (s Params_OrganicFertilization_Parameters_List) At(i int) Params_OrganicFertilization_Parameters {
	return Params_OrganicFertilization_Parameters{s.List.Struct(i)}
}

func (s Params_OrganicFertilization_Parameters_List) Set(i int, v Params_OrganicFertilization_Parameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_OrganicFertilization_Parameters_List) String() string {
	str, _ := text.MarshalList(0xb0919989cca2fd9a, s.List)
	return str
}

// Params_OrganicFertilization_Parameters_Future is a wrapper for a Params_OrganicFertilization_Parameters promised by a client call.
type Params_OrganicFertilization_Parameters_Future struct{ *capnp.Future }

func (p Params_OrganicFertilization_Parameters_Future) Struct() (Params_OrganicFertilization_Parameters, error) {
	s, err := p.Future.Struct()
	return Params_OrganicFertilization_Parameters{s}, err
}

func (p Params_OrganicFertilization_Parameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Tillage struct{ capnp.Struct }

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0x88a5848ef8603554

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage{st}, err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage{st}, err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage{root.Struct()}, err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0x88a5848ef8603554, s.Struct)
	return str
}

func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List struct{ capnp.List }

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Params_Tillage_List{l}, err
}

func (s Params_Tillage_List) At(i int) Params_Tillage { return Params_Tillage{s.List.Struct(i)} }

func (s Params_Tillage_List) Set(i int, v Params_Tillage) error { return s.List.SetStruct(i, v.Struct) }

func (s Params_Tillage_List) String() string {
	str, _ := text.MarshalList(0x88a5848ef8603554, s.List)
	return str
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (p Params_Tillage_Future) Struct() (Params_Tillage, error) {
	s, err := p.Future.Struct()
	return Params_Tillage{s}, err
}

type Params_Irrigation struct{ capnp.Struct }

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0x87feb816363ff43c

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation{st}, err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation{st}, err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation{root.Struct()}, err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0x87feb816363ff43c, s.Struct)
	return str
}

func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) Params() (Params_Irrigation_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_Irrigation_Parameters{Struct: p.Struct()}, err
}

func (s Params_Irrigation) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Params_Irrigation) SetParams(v Params_Irrigation_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s Params_Irrigation) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List struct{ capnp.List }

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Params_Irrigation_List{l}, err
}

func (s Params_Irrigation_List) At(i int) Params_Irrigation {
	return Params_Irrigation{s.List.Struct(i)}
}

func (s Params_Irrigation_List) Set(i int, v Params_Irrigation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Irrigation_List) String() string {
	str, _ := text.MarshalList(0x87feb816363ff43c, s.List)
	return str
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (p Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	s, err := p.Future.Struct()
	return Params_Irrigation{s}, err
}

func (p Params_Irrigation_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Irrigation_Parameters struct{ capnp.Struct }

// Params_Irrigation_Parameters_TypeID is the unique identifier for the type Params_Irrigation_Parameters.
const Params_Irrigation_Parameters_TypeID = 0xb991be9572278e2d

func NewParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters{st}, err
}

func NewRootParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters{st}, err
}

func ReadRootParams_Irrigation_Parameters(msg *capnp.Message) (Params_Irrigation_Parameters, error) {
	root, err := msg.Root()
	return Params_Irrigation_Parameters{root.Struct()}, err
}

func (s Params_Irrigation_Parameters) String() string {
	str, _ := text.Marshal(0xb991be9572278e2d, s.Struct)
	return str
}

func (s Params_Irrigation_Parameters) NitrateConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Params_Irrigation_Parameters) SetNitrateConcentration(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation_Parameters) SulfateConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Params_Irrigation_Parameters) SetSulfateConcentration(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Params_Irrigation_Parameters_List is a list of Params_Irrigation_Parameters.
type Params_Irrigation_Parameters_List struct{ capnp.List }

// NewParams_Irrigation_Parameters creates a new list of Params_Irrigation_Parameters.
func NewParams_Irrigation_Parameters_List(s *capnp.Segment, sz int32) (Params_Irrigation_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Params_Irrigation_Parameters_List{l}, err
}

func (s Params_Irrigation_Parameters_List) At(i int) Params_Irrigation_Parameters {
	return Params_Irrigation_Parameters{s.List.Struct(i)}
}

func (s Params_Irrigation_Parameters_List) Set(i int, v Params_Irrigation_Parameters) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Params_Irrigation_Parameters_List) String() string {
	str, _ := text.MarshalList(0xb991be9572278e2d, s.List)
	return str
}

// Params_Irrigation_Parameters_Future is a wrapper for a Params_Irrigation_Parameters promised by a client call.
type Params_Irrigation_Parameters_Future struct{ *capnp.Future }

func (p Params_Irrigation_Parameters_Future) Struct() (Params_Irrigation_Parameters, error) {
	s, err := p.Future.Struct()
	return Params_Irrigation_Parameters{s}, err
}

type FertilizerService struct{ Client *capnp.Client }

// FertilizerService_TypeID is the unique identifier for the type FertilizerService.
const FertilizerService_TypeID = 0xbbb7aeae0d097e05

func (c FertilizerService) MineralFertilizerPartitionFor(ctx context.Context, params func(FertilizerService_mineralFertilizerPartitionFor_Params) error) (FertilizerService_mineralFertilizerPartitionFor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      0,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "mineralFertilizerPartitionFor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(FertilizerService_mineralFertilizerPartitionFor_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return FertilizerService_mineralFertilizerPartitionFor_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) OrganicFertilizerParametersFor(ctx context.Context, params func(FertilizerService_organicFertilizerParametersFor_Params) error) (FertilizerService_organicFertilizerParametersFor_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      1,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "organicFertilizerParametersFor",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(FertilizerService_organicFertilizerParametersFor_Params{Struct: s})
		}
	}
	ans, release := c.Client.SendCall(ctx, s)
	return FertilizerService_organicFertilizerParametersFor_Results_Future{Future: ans.Future()}, release
}
func (c FertilizerService) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c FertilizerService) AddRef() FertilizerService {
	return FertilizerService{
		Client: c.Client.AddRef(),
	}
}

func (c FertilizerService) Release() {
	c.Client.Release()
}

// A FertilizerService_Server is a FertilizerService with a local implementation.
type FertilizerService_Server interface {
	MineralFertilizerPartitionFor(context.Context, FertilizerService_mineralFertilizerPartitionFor) error

	OrganicFertilizerParametersFor(context.Context, FertilizerService_organicFertilizerParametersFor) error

	Info(context.Context, common.Identifiable_info) error
}

// FertilizerService_NewServer creates a new Server from an implementation of FertilizerService_Server.
func FertilizerService_NewServer(s FertilizerService_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(FertilizerService_Methods(nil, s), s, c, policy)
}

// FertilizerService_ServerToClient creates a new Client from an implementation of FertilizerService_Server.
// The caller is responsible for calling Release on the returned Client.
func FertilizerService_ServerToClient(s FertilizerService_Server, policy *server.Policy) FertilizerService {
	return FertilizerService{Client: capnp.NewClient(FertilizerService_NewServer(s, policy))}
}

// FertilizerService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func FertilizerService_Methods(methods []server.Method, s FertilizerService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      0,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "mineralFertilizerPartitionFor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MineralFertilizerPartitionFor(ctx, FertilizerService_mineralFertilizerPartitionFor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbbb7aeae0d097e05,
			MethodID:      1,
			InterfaceName: "management.capnp:FertilizerService",
			MethodName:    "organicFertilizerParametersFor",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.OrganicFertilizerParametersFor(ctx, FertilizerService_organicFertilizerParametersFor{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// FertilizerService_mineralFertilizerPartitionFor holds the state for a server call to FertilizerService.mineralFertilizerPartitionFor.
// See server.Call for documentation.
type FertilizerService_mineralFertilizerPartitionFor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c FertilizerService_mineralFertilizerPartitionFor) Args() FertilizerService_mineralFertilizerPartitionFor_Params {
	return FertilizerService_mineralFertilizerPartitionFor_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c FertilizerService_mineralFertilizerPartitionFor) AllocResults() (FertilizerService_mineralFertilizerPartitionFor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizerPartitionFor_Results{Struct: r}, err
}

// FertilizerService_organicFertilizerParametersFor holds the state for a server call to FertilizerService.organicFertilizerParametersFor.
// See server.Call for documentation.
type FertilizerService_organicFertilizerParametersFor struct {
	*server.Call
}

// Args returns the call's arguments.
func (c FertilizerService_organicFertilizerParametersFor) Args() FertilizerService_organicFertilizerParametersFor_Params {
	return FertilizerService_organicFertilizerParametersFor_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c FertilizerService_organicFertilizerParametersFor) AllocResults() (FertilizerService_organicFertilizerParametersFor_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizerParametersFor_Results{Struct: r}, err
}

type FertilizerService_mineralFertilizerPartitionFor_Params struct{ capnp.Struct }

// FertilizerService_mineralFertilizerPartitionFor_Params_TypeID is the unique identifier for the type FertilizerService_mineralFertilizerPartitionFor_Params.
const FertilizerService_mineralFertilizerPartitionFor_Params_TypeID = 0xc5292994de2615c2

func NewFertilizerService_mineralFertilizerPartitionFor_Params(s *capnp.Segment) (FertilizerService_mineralFertilizerPartitionFor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FertilizerService_mineralFertilizerPartitionFor_Params{st}, err
}

func NewRootFertilizerService_mineralFertilizerPartitionFor_Params(s *capnp.Segment) (FertilizerService_mineralFertilizerPartitionFor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FertilizerService_mineralFertilizerPartitionFor_Params{st}, err
}

func ReadRootFertilizerService_mineralFertilizerPartitionFor_Params(msg *capnp.Message) (FertilizerService_mineralFertilizerPartitionFor_Params, error) {
	root, err := msg.Root()
	return FertilizerService_mineralFertilizerPartitionFor_Params{root.Struct()}, err
}

func (s FertilizerService_mineralFertilizerPartitionFor_Params) String() string {
	str, _ := text.Marshal(0xc5292994de2615c2, s.Struct)
	return str
}

func (s FertilizerService_mineralFertilizerPartitionFor_Params) MinFert() MineralFertilizer {
	return MineralFertilizer(s.Struct.Uint16(0))
}

func (s FertilizerService_mineralFertilizerPartitionFor_Params) SetMinFert(v MineralFertilizer) {
	s.Struct.SetUint16(0, uint16(v))
}

// FertilizerService_mineralFertilizerPartitionFor_Params_List is a list of FertilizerService_mineralFertilizerPartitionFor_Params.
type FertilizerService_mineralFertilizerPartitionFor_Params_List struct{ capnp.List }

// NewFertilizerService_mineralFertilizerPartitionFor_Params creates a new list of FertilizerService_mineralFertilizerPartitionFor_Params.
func NewFertilizerService_mineralFertilizerPartitionFor_Params_List(s *capnp.Segment, sz int32) (FertilizerService_mineralFertilizerPartitionFor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FertilizerService_mineralFertilizerPartitionFor_Params_List{l}, err
}

func (s FertilizerService_mineralFertilizerPartitionFor_Params_List) At(i int) FertilizerService_mineralFertilizerPartitionFor_Params {
	return FertilizerService_mineralFertilizerPartitionFor_Params{s.List.Struct(i)}
}

func (s FertilizerService_mineralFertilizerPartitionFor_Params_List) Set(i int, v FertilizerService_mineralFertilizerPartitionFor_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FertilizerService_mineralFertilizerPartitionFor_Params_List) String() string {
	str, _ := text.MarshalList(0xc5292994de2615c2, s.List)
	return str
}

// FertilizerService_mineralFertilizerPartitionFor_Params_Future is a wrapper for a FertilizerService_mineralFertilizerPartitionFor_Params promised by a client call.
type FertilizerService_mineralFertilizerPartitionFor_Params_Future struct{ *capnp.Future }

func (p FertilizerService_mineralFertilizerPartitionFor_Params_Future) Struct() (FertilizerService_mineralFertilizerPartitionFor_Params, error) {
	s, err := p.Future.Struct()
	return FertilizerService_mineralFertilizerPartitionFor_Params{s}, err
}

type FertilizerService_mineralFertilizerPartitionFor_Results struct{ capnp.Struct }

// FertilizerService_mineralFertilizerPartitionFor_Results_TypeID is the unique identifier for the type FertilizerService_mineralFertilizerPartitionFor_Results.
const FertilizerService_mineralFertilizerPartitionFor_Results_TypeID = 0x81b1cd5c7865e185

func NewFertilizerService_mineralFertilizerPartitionFor_Results(s *capnp.Segment) (FertilizerService_mineralFertilizerPartitionFor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizerPartitionFor_Results{st}, err
}

func NewRootFertilizerService_mineralFertilizerPartitionFor_Results(s *capnp.Segment) (FertilizerService_mineralFertilizerPartitionFor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_mineralFertilizerPartitionFor_Results{st}, err
}

func ReadRootFertilizerService_mineralFertilizerPartitionFor_Results(msg *capnp.Message) (FertilizerService_mineralFertilizerPartitionFor_Results, error) {
	root, err := msg.Root()
	return FertilizerService_mineralFertilizerPartitionFor_Results{root.Struct()}, err
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results) String() string {
	str, _ := text.Marshal(0x81b1cd5c7865e185, s.Struct)
	return str
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results) HasPartition() bool {
	return s.Struct.HasPtr(0)
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results) SetPartition(v Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s FertilizerService_mineralFertilizerPartitionFor_Results) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FertilizerService_mineralFertilizerPartitionFor_Results_List is a list of FertilizerService_mineralFertilizerPartitionFor_Results.
type FertilizerService_mineralFertilizerPartitionFor_Results_List struct{ capnp.List }

// NewFertilizerService_mineralFertilizerPartitionFor_Results creates a new list of FertilizerService_mineralFertilizerPartitionFor_Results.
func NewFertilizerService_mineralFertilizerPartitionFor_Results_List(s *capnp.Segment, sz int32) (FertilizerService_mineralFertilizerPartitionFor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FertilizerService_mineralFertilizerPartitionFor_Results_List{l}, err
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results_List) At(i int) FertilizerService_mineralFertilizerPartitionFor_Results {
	return FertilizerService_mineralFertilizerPartitionFor_Results{s.List.Struct(i)}
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results_List) Set(i int, v FertilizerService_mineralFertilizerPartitionFor_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FertilizerService_mineralFertilizerPartitionFor_Results_List) String() string {
	str, _ := text.MarshalList(0x81b1cd5c7865e185, s.List)
	return str
}

// FertilizerService_mineralFertilizerPartitionFor_Results_Future is a wrapper for a FertilizerService_mineralFertilizerPartitionFor_Results promised by a client call.
type FertilizerService_mineralFertilizerPartitionFor_Results_Future struct{ *capnp.Future }

func (p FertilizerService_mineralFertilizerPartitionFor_Results_Future) Struct() (FertilizerService_mineralFertilizerPartitionFor_Results, error) {
	s, err := p.Future.Struct()
	return FertilizerService_mineralFertilizerPartitionFor_Results{s}, err
}

func (p FertilizerService_mineralFertilizerPartitionFor_Results_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type FertilizerService_organicFertilizerParametersFor_Params struct{ capnp.Struct }

// FertilizerService_organicFertilizerParametersFor_Params_TypeID is the unique identifier for the type FertilizerService_organicFertilizerParametersFor_Params.
const FertilizerService_organicFertilizerParametersFor_Params_TypeID = 0xb1c2fa546f41d480

func NewFertilizerService_organicFertilizerParametersFor_Params(s *capnp.Segment) (FertilizerService_organicFertilizerParametersFor_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FertilizerService_organicFertilizerParametersFor_Params{st}, err
}

func NewRootFertilizerService_organicFertilizerParametersFor_Params(s *capnp.Segment) (FertilizerService_organicFertilizerParametersFor_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return FertilizerService_organicFertilizerParametersFor_Params{st}, err
}

func ReadRootFertilizerService_organicFertilizerParametersFor_Params(msg *capnp.Message) (FertilizerService_organicFertilizerParametersFor_Params, error) {
	root, err := msg.Root()
	return FertilizerService_organicFertilizerParametersFor_Params{root.Struct()}, err
}

func (s FertilizerService_organicFertilizerParametersFor_Params) String() string {
	str, _ := text.Marshal(0xb1c2fa546f41d480, s.Struct)
	return str
}

func (s FertilizerService_organicFertilizerParametersFor_Params) OrgFert() OrganicFertilizer {
	return OrganicFertilizer(s.Struct.Uint16(0))
}

func (s FertilizerService_organicFertilizerParametersFor_Params) SetOrgFert(v OrganicFertilizer) {
	s.Struct.SetUint16(0, uint16(v))
}

// FertilizerService_organicFertilizerParametersFor_Params_List is a list of FertilizerService_organicFertilizerParametersFor_Params.
type FertilizerService_organicFertilizerParametersFor_Params_List struct{ capnp.List }

// NewFertilizerService_organicFertilizerParametersFor_Params creates a new list of FertilizerService_organicFertilizerParametersFor_Params.
func NewFertilizerService_organicFertilizerParametersFor_Params_List(s *capnp.Segment, sz int32) (FertilizerService_organicFertilizerParametersFor_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return FertilizerService_organicFertilizerParametersFor_Params_List{l}, err
}

func (s FertilizerService_organicFertilizerParametersFor_Params_List) At(i int) FertilizerService_organicFertilizerParametersFor_Params {
	return FertilizerService_organicFertilizerParametersFor_Params{s.List.Struct(i)}
}

func (s FertilizerService_organicFertilizerParametersFor_Params_List) Set(i int, v FertilizerService_organicFertilizerParametersFor_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FertilizerService_organicFertilizerParametersFor_Params_List) String() string {
	str, _ := text.MarshalList(0xb1c2fa546f41d480, s.List)
	return str
}

// FertilizerService_organicFertilizerParametersFor_Params_Future is a wrapper for a FertilizerService_organicFertilizerParametersFor_Params promised by a client call.
type FertilizerService_organicFertilizerParametersFor_Params_Future struct{ *capnp.Future }

func (p FertilizerService_organicFertilizerParametersFor_Params_Future) Struct() (FertilizerService_organicFertilizerParametersFor_Params, error) {
	s, err := p.Future.Struct()
	return FertilizerService_organicFertilizerParametersFor_Params{s}, err
}

type FertilizerService_organicFertilizerParametersFor_Results struct{ capnp.Struct }

// FertilizerService_organicFertilizerParametersFor_Results_TypeID is the unique identifier for the type FertilizerService_organicFertilizerParametersFor_Results.
const FertilizerService_organicFertilizerParametersFor_Results_TypeID = 0xd801f16b6fa39a94

func NewFertilizerService_organicFertilizerParametersFor_Results(s *capnp.Segment) (FertilizerService_organicFertilizerParametersFor_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizerParametersFor_Results{st}, err
}

func NewRootFertilizerService_organicFertilizerParametersFor_Results(s *capnp.Segment) (FertilizerService_organicFertilizerParametersFor_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return FertilizerService_organicFertilizerParametersFor_Results{st}, err
}

func ReadRootFertilizerService_organicFertilizerParametersFor_Results(msg *capnp.Message) (FertilizerService_organicFertilizerParametersFor_Results, error) {
	root, err := msg.Root()
	return FertilizerService_organicFertilizerParametersFor_Results{root.Struct()}, err
}

func (s FertilizerService_organicFertilizerParametersFor_Results) String() string {
	str, _ := text.Marshal(0xd801f16b6fa39a94, s.Struct)
	return str
}

func (s FertilizerService_organicFertilizerParametersFor_Results) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_OrganicFertilization_Parameters{Struct: p.Struct()}, err
}

func (s FertilizerService_organicFertilizerParametersFor_Results) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s FertilizerService_organicFertilizerParametersFor_Results) SetParams(v Params_OrganicFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s FertilizerService_organicFertilizerParametersFor_Results) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// FertilizerService_organicFertilizerParametersFor_Results_List is a list of FertilizerService_organicFertilizerParametersFor_Results.
type FertilizerService_organicFertilizerParametersFor_Results_List struct{ capnp.List }

// NewFertilizerService_organicFertilizerParametersFor_Results creates a new list of FertilizerService_organicFertilizerParametersFor_Results.
func NewFertilizerService_organicFertilizerParametersFor_Results_List(s *capnp.Segment, sz int32) (FertilizerService_organicFertilizerParametersFor_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return FertilizerService_organicFertilizerParametersFor_Results_List{l}, err
}

func (s FertilizerService_organicFertilizerParametersFor_Results_List) At(i int) FertilizerService_organicFertilizerParametersFor_Results {
	return FertilizerService_organicFertilizerParametersFor_Results{s.List.Struct(i)}
}

func (s FertilizerService_organicFertilizerParametersFor_Results_List) Set(i int, v FertilizerService_organicFertilizerParametersFor_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FertilizerService_organicFertilizerParametersFor_Results_List) String() string {
	str, _ := text.MarshalList(0xd801f16b6fa39a94, s.List)
	return str
}

// FertilizerService_organicFertilizerParametersFor_Results_Future is a wrapper for a FertilizerService_organicFertilizerParametersFor_Results promised by a client call.
type FertilizerService_organicFertilizerParametersFor_Results_Future struct{ *capnp.Future }

func (p FertilizerService_organicFertilizerParametersFor_Results_Future) Struct() (FertilizerService_organicFertilizerParametersFor_Results, error) {
	s, err := p.Future.Struct()
	return FertilizerService_organicFertilizerParametersFor_Results{s}, err
}

func (p FertilizerService_organicFertilizerParametersFor_Results_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xc876b729b7d7f6d9

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc876b729b7d7f6d9,
			MethodID:      0,
			InterfaceName: "management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{Struct: r}, err
}

type Service_managementAt_Results struct{ capnp.Struct }

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xcca7748d367db151

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{st}, err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results{st}, err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results{root.Struct()}, err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xcca7748d367db151, s.Struct)
	return str
}

func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := s.Struct.Ptr(0)
	return Event_List{List: p.List()}, err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List struct{ capnp.List }

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_managementAt_Results_List{l}, err
}

func (s Service_managementAt_Results_List) At(i int) Service_managementAt_Results {
	return Service_managementAt_Results{s.List.Struct(i)}
}

func (s Service_managementAt_Results_List) Set(i int, v Service_managementAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_managementAt_Results_List) String() string {
	str, _ := text.MarshalList(0xcca7748d367db151, s.List)
	return str
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (p Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_managementAt_Results{s}, err
}

const schema_b30a3af53cea6b3e = "x\xda\xccz\x7ft\x14\xd7u\xff\xbd3\xbb\xac\x84$" +
	"V\xcf#\x0c,\xf0]\x10\xc2\x06}\x03\x05D\xe2@" +
	"\x92\x0a\xfd\x80 \x8a\"\x8dV\x8e\x03\x81S\x8fVO" +
	"\xab\xc1\xbb3\xcb\xcc\xac\x84\\l\x02\xb5\x1b\xe3\x03q" +
	"I\xa0\x09\x8e\xdd\x83\xedrR8\x9c\x04\x1c\xd3@j" +
	"'6\xc7\xaeq\xe24\xb1\x03'!\xa7NK\x12\xb7" +
	"\xb6\x1b\xb7qO\xd2\xd8\x8e\xc3\xf4\xdc7\xb33\xa3\x95" +
	"D\xf2GNO9\x87\xb3\xda\xfb\xee\xbcy\xef\xbe{" +
	"?\xf7~\xee\xdb\x15\x9f\xabY'\xad\x8c\xbb\x0d\x00\xea" +
	"/\xe3\xd3\xdc\xd7N\xbc\xf0\xa1\xd6\x99\xff\xf8)Pg" +
	"#\xba\xb3^X\xbdh\xef\xee\xa6\x87!\x8e\x09\x00\x85" +
	"O\x7fW\xd99\x9d\xfe*L\xff\x0a\xa0{\xefU\xbe" +
	"k\xdbw\xce\xec\x05\xb6\x08\xc1\xd3i\xa9\xab\xd9$\x01" +
	"*KkZ\x01\xdd\xc7o\xa99\xd0\xfb\xf8'\xf7\x01" +
	"[ \xb9\xf3;:^Y\xf6\xa7\xcf_\x03\xc0\x96\xee" +
	"\x9a\x14*\xdbkh\xaa-5\xb7\x00\xba\x8f\xed\xfc\xe4" +
	"\xac#\xeb\xbf\xb4\x0f\x18\x93\xdc?\xbe\xe3\x8d\x0f\xffj" +
	"\xed\xf4\xaf\x02\x90\xd2\x8f\x14\x9d\x14[x\xcd\xcd\x08\xe8" +
	"\x9e\xaf:\xfb\xc6\xdb\xe7N\xddS\xa9\xd9\xb2\xa66\x85" +
	"JW-\xa9\xae\xaf\xfd\xa8\x04\xe8~\xf8\x97\xad\x1f\xb8" +
	"\xf1\xdc\xb5OO\xb6\x99\x96\x13u)T\xce\xd7\xcd\x02" +
	"P\x9e\xab\x1b\x05t\xfb\xdf\x7f\xfb\xdb\x9f\xb9\xe7\xf8}" +
	"\x15\xda1R^8CBe\xd9\x0cZ\xef\xd2\x19\xb4" +
	"3\xfe\x81\xba\xe7~\xfa\xd5\xbf;\x00\xea\x02\x8c\xbb\xff" +
	"\xb9\xbf\xfd\xf4'_\xbd\xf4\x1f\x9er\xd7\x8c\xcf\xa2\xa2" +
	"\x91r\xcb\xf6\x19\xb7\xd1\x9a\xed\xcf}b\xc1\xb3\xdf\xa8" +
	"}@\xd8!P\x06l\xb9\x92\xecC\xe5\xcd$\xcd\xfb" +
	"z\x92\xec\xb0\xfa\xbd\xb9O\xdev\xf8\xd8\x03\xc0fI" +
	"n\xfb\xc5\x07s\xbf}s\xfbC\xa4\xf9N\xf2\x06T" +
	"\xaa\xebI3^\x9f\xa39\x7fu)w\xaa\xd4r\x84" +
	"\x96+WnnM\xfd\x0eT\xba\x85vW\xfd\xbf\x01" +
	"\xba'.?\xbf\xe9\xea\xb95G@\x9d\x85\x18N<" +
	"3\x96@\x00e!{\x17PY\xcc\xc8\x0c{?~" +
	"\xf1\xe1;g\xfe\xff\xbf\x02u\x19\xd6\xb9\xdfy\xfct" +
	"\xf27#\x07^\xf7vv/k\x96\x94\xe3\x8c\xfe|" +
	"\x84\xfd3\x99\xf8\xbd\xbf\xfe\xf5\xbb\xb1\xff\xd7\xf8 \xd9" +
	"A\x0e\x8fXh\xbf\xda\xd0\x8c\xca\xaf\x1a\xe8\xcf\xb7\x1a" +
	"\xd2d\x87\xe0\xbd*C\x0c\x0fo},!#*u" +
	"7~]\x99y\xe3-\x00-\x1f\xb9\xf1\x01R\x0f6" +
	"\xc5XD\x9b\xe6VJ\xb3.(w\xcd\xfa\x12\xc8\xee" +
	"\xf0\xdb\xdf\xdb\xfc\xcd\x97\xf7>\x0c\xea\x12\x94\xdd'\xde" +
	"\xd8}\xf7\xd1\xce\xef~\xd7[\xc1;\xb3\x1eE\x85\xcd" +
	"\xa6\x07\xeaf\x93\xc7>\xf8\xdbG_\xdc\x7f\xf4\xd0i" +
	"`\xcb0\xdc[\\&\xe5gf_@\xe5\x8aP\xbe" +
	",\x94?u\xa9\xcd\xec\x7f\xf7\xc2\x19P\x17!\x827" +
	"ca\x8ep\xef\xfds\xc8\x09\x96}\xe6f\xeb\xc87" +
	"\x0e\x9d'\x05)\xf46\xa1xb\x8e\x85\xcaSsh" +
	"\xb6\xf3s\xc8\xae\xf1\xbb\xab\xeb\xbe\xfc\xe5\xaf\xfd=0" +
	"&\x8f\xf3\xdb\xc5\xa9\x14*\xefO\x91\xe6\xca\xd4\xa7\x95" +
	"\xa3\xa9Y\x00\xee\x8f\xdb?r\xae\xa1\xfa\xf2\x85\x09\xf1" +
	"\xb0?\xf5\x13\xe5\x88P>\x94\xfa<\xa0{a\xe6M" +
	"?>\xbct\xe9s\xd1E^N\xb5\xd3\"\xdfL\xd1" +
	"\"\xd9\x07\xdf\x9e~\xbe\xfe/\x9e\x9b\xfc\xe4\xeb\xe6\xbe" +
	"\x01\xa8\xb0\xb9\xb4\xc2?\xbay\xee\xab\xe9\xa3\xcf\xfe\xc3" +
	"\xe4\x9a\x85\xb9/\x03*;\xe7\xd2\x9c?\xf8\xf7\xd3\xe7" +
	"\xfa:\xeb\x9e\x1f\x7f0\xf1\xb8X\xd6\xdc\x97\x95\x87\xe7" +
	"\xd22\x8e\xce\x15\x87~\xe5\xbf\x7f\xf0\xb5\xa5_\x1b\xb9" +
	"X\xb9q\xe5\xec\xbco)\xcf\xcc\xa3g\x9e\x9a\xf7Q" +
	"\xe5\xf5y\xb4o\xf5\xcc]\x1f8\xe8|\xe9E`s" +
	"\x02H\xb92\xcfB@\xe5\xd5y\xf4\xea\xe0\x80\xd5\xd9" +
	"X\x15q{\x894g\xceoGe\xf1\xfcY\x00-" +
	"+\xe7\xdfB\xfe\xb9\xf0\xca\xe2?{c\xc5\x8f\xbe?" +
	")\x04\x1cO\xef@\xe5|Z@@\x9a,p\xf8\xc1" +
	"\xc7\xcc;\xde\xc2\x1fF\x01m\xf1\x82>2f\xdb\x02" +
	"z\xfb\x96\x9f\x1ex\xe8\xb2\xfd\xe6\xd5\x0a\x13u&$" +
	"DE[\xf0\x13\xa5\xb0\x80\xf6\xa3/\xa0\xd9^\xca\xef" +
	"M\xae\xbe\xfb\xb1\x9f\xd2\xbb\xe3\x95\xef\xfe\xce\x82M\xa8" +
	"\\%\xed\x96W\x16\x08\x90\x08\xdcQ\x9d\x8dR\xa5\xfa" +
	"\xfa\xc6\x1d\xa8li\xbc\x19@\x19k$\xe7\x0cPd" +
	"\xb2\x8d\xcd\\$\xa1\xb2p\x11i\xb7-\xa2\xa5|\xb1" +
	"\xf6\xec\x8ce?\xdf\xf7\x8b\x09\xb0r|Q#*g" +
	"\x17\xd1\xa2\xcf,\xfa5\xa0\xfb\xe8\x17\xd7Y?\xcb>" +
	"\xff\x8b\x09\x90\xbd\xbd\xa9\x19\x95B\x93\xd8^S\x0f\xa0" +
	"\xfb\xa1?\xd9\xf1l\xd5\xb1m\xefL\x00\xe2\xbdM)" +
	"T\x0e\x91f\xcb\xc1\xa6O\xd3\xd6\xae\xce\x8c\xaf\xd1\xfe" +
	"\xfc\x07\xef\x11\xa6\xc8\xe1\x99x\x87\xb6s\xf1\x05T\xf6" +
	"/\x16\xf8\xb2XxL\xf0\xda\xc9\xf6v\xf4&\x09\x95" +
	"\xe37\xddB\x87v\xd3(\xbc\xe6\x164C\xcb\xf1\x02" +
	"\x97\x0cgyV+\x1a\xc5\xb5\xbd\x9a\xa5\x15\xec\xe5\xad" +
	"\x19sT7r\xbd\x88j\xad\x1c\x03\x88!\x00[\xbf" +
	"\x09@\xed\x94Q\xed\x95\x90!6 \"\xb2\xee\x1d\x00" +
	"\xeaf\x19\xd5OH\x88R\x03J\x00\xec\xd6f\x00\xb5" +
	"WFu\x9b\x84n\xb6\x94w\xf4\x11\xcd\x02\x00L\xba" +
	"O\xfcd\xb0\xaa\xef\xf4\xdeW\x00\x10\x93\x80n1\xaf" +
	"\x19N'7 i\xeb\xce\x18&@\xc2\x04`2k" +
	"\x99Ed\xee=\xdb\xbe\xd9\xf4\xd8\xe7\x0f\xbeF\xda\x0c" +
	"0XoU\xb0\xde\x0d\xdcr\xf4\xbc~'\xb72\xdc" +
	"\x1a\xd1\xb3|yA7\xb8\xa5\xe5\xc3\x81^\xcdrt" +
	"G7\x8d\x0d\xa6\xd5\xd4\xc7\xedR\xde\xb1\x01\xd4X\xb0" +
	"\xaf\xba>\x00\xb5VFu\xb6\x84n\xd1\xd7\x064\xb0" +
	">\xb4> \xd6G\x16 W\x1a\xac\xa3\xe48\xba\x91" +
	"[.wl&\xa3U\x09;\xb0F\xb1\xf0\xeaf\x80" +
	"D\xb6\xe4$\xf3|\xc8\x99\xc4\xe6\xebG\xb8\xe1\xf4\x8f" +
	"\xc9EN\x8f\xae\x10\x8f\xee_+\x1e\xdd\xbb\x0f\x00%" +
	"vW;\x00\xca\xact?\x00\xc6Xi+\x00\xc6\xd9" +
	"N\x12Nc\xfaI\x00Lx\x1fU\xdeG5\xd3i" +
	"l:\xd36\x01`\x0d\xdb\xde\x07\xd0j\x8b\x13u\xb5" +
	"\x92c\x164G\x8fe\xbd#\x86a\xcd\x1a\xe1\xb6\x03" +
	"\xe5\x81\xecF_\x00\xaenYzNst\x90Mc" +
	"\x8f\xa3\xe7\xf3Z\x8e\xbb\xa6\x95\xd3\x0c=\xbb\x01}\x03" +
	"kI\xb2\xad[6{\x85\xd8\xe8\xe4\x05\xcd\x18\xac\x10" +
	"\xef\xc9z\xe6rm\xee|\\\xcb\x978\x00\xb8\xb66" +
	"\xc23\x8e\xe6\x00\xf2I\xec\xdc\xe3\xbf\xd6\x9fG\xe6\x16" +
	"\x19\xebv2\x962\x07\x85\xa1\x15\x86\xab\xc8\\J\xb5" +
	"\xf8.+(>c\xec\x9dFa\xb0\xb7V\x09\x83\xbd" +
	"\xde(\x0cvu\x950\xd8\x95\x940\xd8K)a\xb0" +
	"\x17\x1a\x85\xc1\x9e\xa1\xb1Zv\x9e\xbe\xd5\xb13\xf41" +
	"\x83\x9d\xa0\x8f${\x84\xc6\xea\xd9Q\xfa\xc6\xd8!\xfa" +
	"v\x03\xdbO\xdf\x14\xb6\x97>\x1a\xd8\x18M6\x93\xed" +
	"\xa4\xb1\x1b\x99N\x1f\xb3\x98\x96\x02Hh\xf6p:\xab" +
	"\x0d\xe6\x0b\x89\xacF\xff\xedDV+\xa5\x07s$\xc9" +
	"\x8df\xd3\xc3\xe6`\xbe \x17\xb2r\xc1N\x98z6" +
	"]\xd4i\xa4\xa8\xd3\x7f;Q\xd4K\xe9\xa2^\x1a\xbc" +
	"#Q\xcc\x8f\xa6\x8b\xa6\x183\x0b\x09\xdb\x1c\x93m;" +
	"\xed\x94\x06\xf3\x85\xf4(\xe7\x83\xb6<jO\xed\xab]" +
	"\xfe\xb1\xca\xa6\xa1\xc60\x92\x8b\x19nu\x85\x0ew8" +
	"\xc8\x96\xadV\x051\xb2t-\x80\xda$\xa3\xbaBB" +
	"\x11\xfa\x00l\x19\xc9\x96\xc8\xa8\xae\x96\xb0U+\x98%" +
	"\xc3\xc1\x1a\x90\xb0\x06\xb0\xb5(^\x85\xf5\xe1\xe4\xbf+" +
	"\x82\xfa=\xff\x02:V?6\x11Y\xdd*\x00\xb5J" +
	"F\xb5A\xc2\xf4 /:\xc3\xde+\xdc\x16\xf1\xef\xfb" +
	"\xad\xe49\xe59\xe3\x95s\xfa\xae\xbc\xbc\xa7\xe8th" +
	"\xd6\x80it\xe7\x0aN\xa7\xe6\xa0Fo\x99\x1d\xbc\xe5" +
	"\xe8\xe3\x00\xeaC2\xaa\x7f\x1bA\xb6\xe3\xdf\x02PO" +
	"\xc9\xa8\x9e\x93\x90I\xd8\x80\x12\";KX\xf1\x84\x8c" +
	"\xea\xd3\x122Yj@\x19\x91=\xb5\x15@}RF" +
	"\xf5\xa2\x84,&7`\x0c\x91=w\x12@\xbd(\xa3" +
	"zIB\x16\x8f5`\x1c\x91\xbd\xf42\x80\xfaC\x19" +
	"\xd5\x9fI\xe8\x9a\xfe\xaa\xd0\xe80\x0d\x9b[#i\x8d" +
	"\x82\x03\x11$$,'\x10\xec*\x145)\xeb\xf4\x18" +
	"\x1bK\x85\x92\xdd\xae\xe55#\xcb\xc9G=;\x0b\x9d" +
	"[m-\x07\xc81\x19\x16\xcb\x80\xf1$Maq[" +
	"\x1f,\xf1\x8d \xf3\x9d\xc13\x95\x11\xcc\x93\xd6\xc6\xc8" +
	"pA\xdb\xd5G\x8fI%\xde\xc7\xb3\xe6\x08\xb76X" +
	"Z\xd6\xd1M4\":\x9e\xc5cSY\xbc\xc3_\x17" +
	"\xf2\x08\x1c\x0e\x08L\xab\xfb,\x80\x9b\xb387\xba5" +
	"\x03\x12%\x8b\xbb\x03\xbaY\xd0l\xbb\x17-s\xb0\xe4" +
	"\xbdj\x12G\x118\xb9\xbcw\x98\x1bf\xc6)O]" +
	"/\xa6^\xda'\xa6^\xdc'\xe0r\xe1&\x01\x97\xf3" +
	"7\x01\xb8\xbc\xc0\xad\x1c7\xb2\x84*Cys\x94[" +
	"\xba\x01\x98s5\xc3\x19\xe6\xb6n{\xfe\xe3\x94,\xdd" +
	"\x19\x8b\xfa\xd2\x84\x9d}\xccG\xb2q@&V\x10\x04" +
	"\x89\xd6\x0e\xa0n\x93Q\x1d\x0e\x83\x84\x93\xc3\x0c\xca\xa8" +
	"\x16\xcb^\x04\xc0\x0a\xe4\xd5\xc32\xaa\x0eyQ\xbd\xe7" +
	"E\x04\x17j^Fu\x97\x84{|\xdc\x0c\x0c~\xdd" +
	"\xb4\x14\x0d\x0c\xc0\xb4\xedh9\x8e\xd3@\x8aO\xc3\xc8" +
	"YU$\x9c\xe5\x03\xad\xdc\x19\xe5\xdc\xa0(\xaf\xc7\x06" +
	"\x94\xc9\x8e\x9b\xc2\x90f\x94\xcec\x00l%\xc5\xf9\xfb" +
	"dT?(\xa1\xcb5+\xaf\x8b\xf4\x00X\xef\x1ed" +
	"\x8d\xf2\xa9k\xff\xfay\x7f!\xady\xcd\xe1\xb63q" +
	" XD\xa2\xd2\xac\x15\xb8.\"\xa0,\xec\xd6\x1cG" +
	"\xe4o\xad\xc0\x93\x0e\xb7l2\xf7\xea\xb2\xb9\x95\xed\xf8" +
	"(@\xe6v\x941\x93\xc7r\xe0R\x8d\x85\x16@f" +
	"\x98\xe4\x0e\xc9%\xaf,Qv\x0ay\x91\xe4\xbbI." +
	"\xcbb\xd3\xca\x18>\x08\x90\xd9M\xf2\xfbH\x1e\x8b\x89" +
	"}+\xf7\xe2\x05\x80\xcc}$?L\xf2x\xbc\x01\xe3" +
	"T\xa6\x0b\xf9a\x92\x1f#\xf9\xb4i\x0d8\x0d@y" +
	"\x18\xef\x07\xc8\x1c#\xf9)\x92'\x12\x0d\x82\xfb\x9f\x10" +
	"\xf2S$?G\xf2\xaa\xaa\x06\xac\x02P\xce\xe2\x9d\x00" +
	"\x99'H\xfe4\xc9\xab\xab\x1b\xb0\x9aJz!\x7f\x92" +
	"\xe4\x17I>}z\x03N\xa7\x9a\x0dO\x02d.\x92" +
	"\xfc\x12\xc9kj\x1a\xb0\x06@yI\xc8/\x91\xfc_" +
	"H^[\xdb\x80\xb5\x00\xca+b\x9e\x7f\"\xf9k(" +
	"\xa1\xab\x99\x85Nk\xac[C\xb2j\x87i8\x09\x1e" +
	"\"6\x8d~l\xe3\xea\x0e\x13\xd2\x86S)\xefi\x99" +
	"TN\xe8\xa5aA\x1f\xa4\xc9(P\xa3\x83\x99\xbc9" +
	"\xda)\xf1l\x87\xc9\x87\x862\x8ef\x0cj\xd6 D" +
	"56h\xb6s\x1d\x0dr\xf9\xb6\x9e\xee~4\xdbz" +
	"\xbai6\x98b\x8c\xe6\x89B\xa2\xd1G^\xd4\x06\xad" +
	"\xdec\x93\x0e\xd03\x95\xb3e0o\x8e\xf6\x9b\x99\xee" +
	"\xf6\xe4\xb8\xe7&\x0e\x8f{\x9a\xd0;\xcb\x0d\x07Z-" +
	"\x0f\xbf+Ar\xcab1\x99)\xf2,\xf9tC\x00" +
	"!w\x11\x08\xec\x92Q\xbd'th\xb6\x97\x84\xbbe" +
	"T\xef\x8bd\xa2{\xa9\xc8\xfe\x94\x8c\xea\x81H&\xda" +
	"Ohs\x9f\x8c\xeaa\xf2c\xc9\xcbD\x87\xee\x07P" +
	"\x0f\xcb\xa8\x1e\x930-\xc0\x1f\x93!K\xf6\x0a\xf1\xf4" +
	"\x08\x95a\xe5\xa5'K\x86\xee`2d4~\xb5\x9e" +
	"-9=\xd6f>\x04H\xa3A\x8b\xca\x1f\xe5\xbb\x8a" +
	"\xa6\xe5\xf4r\xb4\xc8\x1c\x94\xcb\xfdCyz\xcb\xba\x08" +
	"\xb2b\xd9\x1c\xad\x1e\x10\xa9\xb5\x18eYlG\xa4\x93" +
	"\xc3\xb6\x86\xbc\x91\xb1fw\xfd.\x87[\x86\x96\x87d" +
	"\xffX\x91\xbb\xe5\\\x00r\x8e\x0b\x89:/\xb0\xe4Y" +
	"\xb2\xcfi\x19\xd5'C0>\xdf\x1cf\xef:\xc9u" +
	"1\xc2\xdc\xd9S)\x90\xea\xe4k$\x0cZ>\xecx" +
	";Hu\xb1\xdf\x920\xe8\x06\xb0\x83\xab@bqY" +
	"D7+\x11:\x16eTw\x13\x14\xac\x10\xa1\xcd\xc6" +
	"\xf6\x85\xc7\x98t\xc6\x8a\x94\x9c\x83-z\xe6J\xea\xc6" +
	"\x90\x89\xf5\xee\xf7\x7f$_\xfb\xf6\xdd\xdf\xbe\xe4#\xa5" +
	"\xac9{\x06<`NkC\x0e\xb7\xca\xa5\xd4\x0d " +
	"\xe1\x0d\x94\xd2KF\x9b\x93q4\xb4\x9c\x9e\xa1Nm" +
	"\x0c\x82za*6\x07\xea\x12\xc4\xb0=\xc9\xba\xd6\x86" +
	"\xad\x00\xb6~_\xc8\x87\xd9\xfa\xf6\x90y\xb3\xb6\xfbC" +
	"6I#\x01\xf7dm'\xc3\x16\x1a[\x7f2\xa4\xdf" +
	"\xac\xebd\xd8\x0bd\xdd\xedac\x87um\xf59\xa5" +
	"\xdbV\xc9@\xca\x84\xa3m\x02\x03\xd9\xe3G\x8a\xdb=" +
	"9\xbb\xf8\xd8\xa4\xec\xc2\xed\x99\x94\xa2\xec\xf1+L\xb7" +
	"+Bk\xa6\xae\x1d\x83\xd5x\xab\\\xde6\x92\xcb\x98" +
	"z\xbe?\xc1\x0b\xc5\x08/Fd\xeb\xa9z\xdc(\xa3" +
	"\xdaO1\x1b\xf3\\M\xa5\xf2\xaf_F\xf5\xf60\x03" +
	"\xb1\xed\xdf\x0a\x8b\x01\xd76\xf5|'/:8\xbc\xc1" +
	"\xb4\xdaF\xb8\x95\xd6r\xba\x91\x9b\xa4\xbe\x1d\xd4\xc6\xec" +
	".#c\xa2\x9e\xef\xe7\x85\xe2mz\xd2\x184G\xcb" +
	"d\xd9\xf5\x98]\xd7\x90\xd46`\x8e\xf0\xf2:y\xa1" +
	"\x18\x01\xc5\xf26\xa7\xfd^\xf9\xb7L\x02,\x1b*Z" +
	"\x00\xe4\xec\xebdT7G\xe0\xa9+\x15\xe9\x0b\x94\xb7" +
	"\xda\xdd\x1c\x1a%d\x03A\x87\xd4wv}\x10kA" +
	"\xc2Z\xc0\xa4\xa1\x15x\xf9\xcb\xefE\xf4\xcd\xf1+/" +
	"\x17\x0a\xb4jb\xfa\xbe\xef\x8f#\xfa\xed!\x99\xd8c" +
	"Z9z\x14\x93a[\xdc\xc7\xb1)K\xc0\xb2\xe3\x94" +
	"-\x94\xe6\xe5\xa2$B\x94N\x86\xc5R`\xa1\xf7\x93" +
	"\xf0\x832\xaa\x9d\x12\xba\x86\xeeX\x9a\xc3;\xd0K\x1b" +
	"\x96\xe7\x9d\xc1I\xd9\xa5\xfc\xd0u\x86'&\x95\x0a\xcb" +
	"\xc8Y\xaf\xe4\x96\xe3\x00A\x8b\x13\xcb\xf7\x0dl\xe5\x7f" +
	"\x81\xc4V&0\xec\xd1b\xb9u\xc7\x16\xbf\x0b\x12[" +
	"\x9c\x08\xb8\xbcT\xd9CI\x8b&\xca\xba\x90BH\x95" +
	"\xc6o\xf5\xac\xbf\x0e\x05\xb3\xbc\xbc\xf1\xa1-\xdf~\xe9" +
	"+\x8fG\x0b\xeb\x08:\xe55\xc3\xe9\xb1\x129M\xd4" +
	"\xd1\xb3\x85\xdf\xb45\x8bJ~M\xb3\xa8\xe4W\xae\x12" +
	"\x95\xfc\xd2U\x82\xc7/\\+x\xfc\x9cU\x00I\xcb" +
	"4\x9dd\x9ekCi{\xd84\x9d\xf4\x90U\xd2\x9d" +
	"V\xdb\xb1Jw8i\xbb\x94\xd3\xac?@\xb7\xa8\x8c" +
	"\x9fS\xb8PA7|\x17\x0a\x1az\x15.TYs" +
	"kI\x82\xf4r\xc5\x1d'\x7fY\x15\x12kQqO" +
	"#f\xdd\x1c\x96\xe1iNOb}\x98\x08\xbd\xd8I" +
	"\x12*\x04\x180\xe5\x0b\xd1\xa1\xd5\xd7\xfb\xc4\xa3\xae9" +
	"\\~rPs\xf8uJ\xf5p\xaa\xae\xcd}\x9d\xa4" +
	"kW\xd4*k'\xabU\xee\x8c\x94%e0\xd8\xbf" +
	"#R\x96\xf8e7;D\xa6< \xa3\xfa\x85\xb0\xe6" +
	"fG\xac\xb0V\xf1[V\x93,1 !~N\x99" +
	"D\xc5c\"\x19\x13\x92\x93+\xec\xf1\xfb^S>\xba" +
	"Q\x83\xf4T\x1a\x13M\xe4\xfb\x13\xf8\xed\x0b\x8a\xbd\xdf" +
	"<\xf0\xe2\x9a\x15\xef\xbd\xf5s,7\xe6\x19\xdb\x01\x12" +
	"\xabN\x04\x8fC\xd2p\xda\x9c\xeb\xc4J\xacr\xfe\xe5" +
	"\xe5\x11z\xb0\xa9\x8f\xa7E73\xea\x9f\xe5\x03n\x92" +
	"0Y\xc8\x15\x1c\x9c\x01\xd8+#\xd6G{\xd7$\x9c" +
	"\x1a\xe6*2\x1f\x88\xe5\x05wE\x0c\x07\xdcr\x8e\x01" +
	"J\x86\xea\x129\x86(\x18Y\xb5`:\xb5\xc48f" +
	"\x0b\xe6\xe5%Ce\xa6\x90\xcf&y\x13\xfa\xe5\xaa\x84" +
	"\xa8,\x14\x8cl\x01\xc9\xdf\x87~\xefDFT\x96\x0a" +
	"\xf9\x12\x92\xafF\xbf}B\x8cl\xa5\x98g5\xc9\xd7" +
	"\x09\xe6\xe53\xb2\x8f\xe0\xd7\x012\xebH\xbeY0/" +
	"\x9f\x91u\x09f\xb4\x99\xe4\x9f\x10\xcc\xcbgd\xb7\xe2" +
	"&\x80L?\xc9o\xa7\x85T{\x84l;\x0e\x00d" +
	"\xb6\x91x\x18%\xa4\xa0!>\xc6qm\x94g\x12<" +
	"Rv\xed\xc7a\x8b\xdb\xc3f~0\x92g\xbdT\xdd" +
	"\xcf\x91\xd24ei\x800Fu\xa3\x97[YNL" +
	"\xaa-s[\xb4\xe12Q^\xae\x99w\xb5\x0cjc" +
	"\xbdh\xf1\xac^\xcc\x94\x0a\xe3R\xfa\xae\x8e\x92eQ" +
	"=\xdd\xa9\x8d\xf5Z\xbc\xd5S\x09\x14\x1c^\xa0\xefm" +
	"HeA\xbbf\xf3$-;\x18\x1e\xd0l\xeeU\x09" +
	"\x11V\x16=X\xac\x0fO\xdd\xe7\xf7AD\x06\xd5d" +
	"EDLp\xa6\xee\xf1\x00\xebe3\xe1QA\x13\xe3" +
	"zm\xc7\xbe\x10\x08\xcb\x083\xae\x1dq\xdd\xbeHE" +
	"S\xf2\x0fQUx\xf7\x078.\xe4\xd6\x86\x98\x1aV" +
	":\xc1u\xe9\x94\x90\xe1\x01t\x7fb\xac\xe8'\xecX" +
	"\xad\xebz\xbb\x8eta\xea\xf0\x9a\xeb\xef\x9b\xa4+d" +
	"T?,\x11\xd7\xf2\x89\x90\xb8U\xa9\xa0\x16\xaenD" +
	"G\x03:\xf5\xbb\xea\x9b\x89\x05\xb8\xdf&\xf5\xc2\x9b\x1d" +
	"%p\xfe\x82\x8c\xea\xdf\xf8<\x94\xaa\xdfGHxL" +
	"F\xf5T9\xb0\x01\xd8\x89\xfb#\xbd\xd3\x98\x0f\xf8g" +
	"\xbf\x0e\xa0\x9e\x93Q}\x96B\xba\xde#\xa7\xcf\x0c\x00" +
	"\xa8O\xcb\xa8\xbe(!\x80\x97\x13_\xa0\xcc\xf0\xac\x8c" +
	"\xea\xf7\xa4\xff\xfd\xa8\xf1\xf3B?$\xf4\x02\x1fo\xbd" +
	"xR\x1e\x978\"?G\xb8~\x10T\x16\xd9^\x10" +
	"Ta\xe4'\x03\xac\xfaB\xe4\x8a\xbdnk\x99\xc4t" +
	"\xcb\x91&\x98W\x91\xfb\x7fR\xa4L^\x99\x07\x85\xf9" +
	"\xdaha\xbe\xce\xeb\x1bt[\xe1\x85\xdd\x94\xeeZ\x19" +
	"9\xba\x915\xad\xa2iAE\x8bz\xca\x16G\xd9\x83" +
	"\xc4&\xc3\xdfpT\xf7\x85?\xff`\xd5\x9fu;\xc2" +
	"\xf6\xb5\xdb\x13\xb4\xc3\x83.}\x19\x09\x10\xc7\xc5D\x80" +
	"\x04\xfb\xc6ED\xd1\xb4\x1c>H>\x8f \xc5\xc5\xfa" +
	"\xfc\x16{7z3j\x80\xf5\xe1\x02\xa6\xbc\x91\xf0\"" +
	"\xb3\xdck\x08\"t\x89p\xed\x9d\xde\xcd\x9c\xee\xdd\xcc" +
	"q\xeffn\xbbw3\xb7\xdd\xbb\x99\xdb\xe2\xdd\xcc\xa9" +
	"\xde\xcd\x9c\xea\xdd\xcc\xa9\xde\xcd\x9c\xda\xfe\x7f\xf5.\xee" +
	"w\xb7\xabn5tG\xf0Aa\x88\xf9[\x85!\xe6" +
	"\xb4\x0bC\xb0F\x00\xb7\xc8\xbd\xd6\x0f\xc89\xbe\xc7o" +
	"\xea'\xf2\x9a>\xc9\xdc\x15y\xc1\xbf\xcf['f>" +
	"\xefq\x803\xe26\x8f\x9dH\x09\x13?\x92\x12&>" +
	"\x9a\x12&>\xd4(L\xbc\xdf\xbb\xcb\x13\xf7nUl" +
	"\xacQ\x98xg\xa3\xb8\xcb\xd3\xbd\xbb<-%\xee\xf2" +
	"\xb6\xdc \xee\xf2T\xef.\xaf\xcb\xbb\xcbkk\x04H" +
	"j\xc3y;\xad\xe5\xef4\x0dY3d\xad(kv" +
	"B\xb3\x87\x13\xd9\xa1\xd5\x89lqe\"[\\\x95\xc8" +
	"\x16[\x12F\xf1\x0e\xd9\xb0\xb1\x94(iF\xa2\xa4\xd9" +
	"\x89\x92\xa1O\xcd\xab+\xf3\xded\xbc:RJ\xa7&" +
	"+\xa5\x9b\xc3\xb6_\xf9j\xfd^\x0a\x83{dT\xff" +
	"\x92\xd0\xd6\xef\xda\x1fl\xac\xec\xfaQy\xdd\x18\x96\xd7" +
	"S\xf2\xec\xacf\x0dh\x05}0R\x03$\x8c\xe1\xd5" +
	"\xe1\xdff\xcb\xef\xdd\xce\x04\xd1\xc8\x0b\x7f\xb7\xc6R\x91" +
	"_D\xd45\x87\xbfwb\xd5\xcdr\xc7f\xe1M\xa2" +
	"\x03\x1a\xcd\xf7\x03~\x94w\x06Q\xbe\xb2m:\x86\x88" +
	"\xe5\xfa\xde\x9a\x81D\x91g\xc3\xe26\x98\xdc/n\xb3" +
	"%\xa7[\xdb\xd5f\xcb\xb6^\xd0\xf3\xc2\xfa}\x9a\xc3" +
	"{yeo\x12\xf0\x7f\x02\x00\x00\xff\xff\x9c/\x01\xbe"

func init() {
	schemas.Register(schema_b30a3af53cea6b3e,
		0x80ce153f3bc9a9e8,
		0x81b1cd5c7865e185,
		0x825bb2508c0b37b2,
		0x82a74595175b71a3,
		0x84acb8f8eab508b9,
		0x87feb816363ff43c,
		0x88a5848ef8603554,
		0x8cb6b3e3c50d3665,
		0x8f0cbec420589373,
		0x8fa09457bc1bfc34,
		0x953375ac67d4f573,
		0x9539b8e14ac7d5a9,
		0x962b157a9dc85681,
		0x9a221e04faf79efc,
		0x9c5dedfd679ac842,
		0x9d247c812334c917,
		0x9d81d2bf4cd0f868,
		0xb0919989cca2fd9a,
		0xb1c2fa546f41d480,
		0xb991be9572278e2d,
		0xbbb7aeae0d097e05,
		0xc2d50914b83d42de,
		0xc5292994de2615c2,
		0xc58610b90af83811,
		0xc6c4991fe51b272f,
		0xc70d4452b8b0ebd7,
		0xc876b729b7d7f6d9,
		0xcca7748d367db151,
		0xcfcf44997e7ceab4,
		0xd3da30ea7b25d921,
		0xd801f16b6fa39a94,
		0xe1ed73d59c8ce359,
		0xe3a37e340f816cd1,
		0xe98c76fb0fb0b2cd,
		0xeed4e55bb04289ef,
		0xf082ec2d0eb50c9b,
		0xf0c763e472409ba2,
		0xf95ca008c46a4b3b,
		0xfcd78361390515e1,
		0xfec75f2ddd43431d)
}
