// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	climate "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/climate"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	math "math"
)

type CropSpec capnp.Struct

// CropSpec_TypeID is the unique identifier for the type CropSpec.
const CropSpec_TypeID = 0xa74f5574681f9d55

func NewCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec(st), err
}

func NewRootCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec(st), err
}

func ReadRootCropSpec(msg *capnp.Message) (CropSpec, error) {
	root, err := msg.Root()
	return CropSpec(root.Struct()), err
}

func (s CropSpec) String() string {
	str, _ := text.Marshal(0xa74f5574681f9d55, capnp.Struct(s))
	return str
}

func (s CropSpec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropSpec) DecodeFromPtr(p capnp.Ptr) CropSpec {
	return CropSpec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropSpec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropSpec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropSpec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropSpec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropSpec) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CropParameters(p.Struct()), err
}

func (s CropSpec) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropSpec) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropSpec) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropSpec) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropResidueParameters(p.Struct()), err
}

func (s CropSpec) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropSpec) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropSpec) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropSpec_List is a list of CropSpec.
type CropSpec_List = capnp.StructList[CropSpec]

// NewCropSpec creates a new list of CropSpec.
func NewCropSpec_List(s *capnp.Segment, sz int32) (CropSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CropSpec](l), err
}

// CropSpec_Future is a wrapper for a CropSpec promised by a client call.
type CropSpec_Future struct{ *capnp.Future }

func (f CropSpec_Future) Struct() (CropSpec, error) {
	p, err := f.Future.Ptr()
	return CropSpec(p.Struct()), err
}
func (p CropSpec_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p CropSpec_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(1, nil)}
}

type CropParameters capnp.Struct

// CropParameters_TypeID is the unique identifier for the type CropParameters.
const CropParameters_TypeID = 0x8ac5cfb21988c168

func NewCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters(st), err
}

func NewRootCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters(st), err
}

func ReadRootCropParameters(msg *capnp.Message) (CropParameters, error) {
	root, err := msg.Root()
	return CropParameters(root.Struct()), err
}

func (s CropParameters) String() string {
	str, _ := text.Marshal(0x8ac5cfb21988c168, capnp.Struct(s))
	return str
}

func (s CropParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropParameters) DecodeFromPtr(p capnp.Ptr) CropParameters {
	return CropParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropParameters) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SpeciesParameters(p.Struct()), err
}

func (s CropParameters) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropParameters) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropParameters) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropParameters) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CultivarParameters(p.Struct()), err
}

func (s CropParameters) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropParameters) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropParameters) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropParameters_List is a list of CropParameters.
type CropParameters_List = capnp.StructList[CropParameters]

// NewCropParameters creates a new list of CropParameters.
func NewCropParameters_List(s *capnp.Segment, sz int32) (CropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CropParameters](l), err
}

// CropParameters_Future is a wrapper for a CropParameters promised by a client call.
type CropParameters_Future struct{ *capnp.Future }

func (f CropParameters_Future) Struct() (CropParameters, error) {
	p, err := f.Future.Ptr()
	return CropParameters(p.Struct()), err
}
func (p CropParameters_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p CropParameters_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(1, nil)}
}

type SpeciesParameters capnp.Struct

// SpeciesParameters_TypeID is the unique identifier for the type SpeciesParameters.
const SpeciesParameters_TypeID = 0xd2d587c796186e8b

func NewSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters(st), err
}

func NewRootSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters(st), err
}

func ReadRootSpeciesParameters(msg *capnp.Message) (SpeciesParameters, error) {
	root, err := msg.Root()
	return SpeciesParameters(root.Struct()), err
}

func (s SpeciesParameters) String() string {
	str, _ := text.Marshal(0xd2d587c796186e8b, capnp.Struct(s))
	return str
}

func (s SpeciesParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpeciesParameters) DecodeFromPtr(p capnp.Ptr) SpeciesParameters {
	return SpeciesParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpeciesParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpeciesParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpeciesParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpeciesParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpeciesParameters) SpeciesId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SpeciesParameters) HasSpeciesId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpeciesParameters) SpeciesIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SpeciesParameters) SetSpeciesId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SpeciesParameters) CarboxylationPathway() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s SpeciesParameters) SetCarboxylationPathway(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s SpeciesParameters) DefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SpeciesParameters) SetDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SpeciesParameters) PartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SpeciesParameters) SetPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SpeciesParameters) InitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SpeciesParameters) SetInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SpeciesParameters) LuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SpeciesParameters) SetLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SpeciesParameters) MaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SpeciesParameters) SetMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SpeciesParameters) SetStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SpeciesParameters) SetStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SpeciesParameters) SetMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SpeciesParameters) SetMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SpeciesParameters) OptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SpeciesParameters) SetOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SpeciesParameters) MaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SpeciesParameters) SetMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SpeciesParameters) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SpeciesParameters) SetNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SpeciesParameters) SetNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SpeciesParameters) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SpeciesParameters) DevelopmentAccelerationByNitrogenStress() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SpeciesParameters) SetDevelopmentAccelerationByNitrogenStress(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SpeciesParameters) FieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x3ff0000000000000)
}

func (s SpeciesParameters) SetFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SpeciesParameters) AssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SpeciesParameters) SetAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SpeciesParameters) BaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SpeciesParameters) SetBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewBaseTemperature sets the baseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) OrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SpeciesParameters) SetOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewOrganMaintenanceRespiration sets the organMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) OrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SpeciesParameters) SetOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOrganGrowthRespiration sets the organGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SpeciesParameters) SetStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewStageMaxRootNConcentration sets the stageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) InitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SpeciesParameters) SetInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewInitialOrganBiomass sets the initialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) CriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SpeciesParameters) SetCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCriticalOxygenContent sets the criticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StageMobilFromStorageCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasStageMobilFromStorageCoeff() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SpeciesParameters) SetStageMobilFromStorageCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewStageMobilFromStorageCoeff sets the stageMobilFromStorageCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMobilFromStorageCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) AbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.BitList(p.List()), err
}

func (s SpeciesParameters) HasAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SpeciesParameters) SetAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAbovegroundOrgan sets the abovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.BitList(p.List()), err
}

func (s SpeciesParameters) HasStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SpeciesParameters) SetStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewStorageOrgan sets the storageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SpeciesParameters) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SpeciesParameters) TargetNSamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SpeciesParameters) SetTargetNSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SpeciesParameters) TargetN30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SpeciesParameters) SetTargetN30(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SpeciesParameters) MaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SpeciesParameters) SetMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SpeciesParameters) RootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SpeciesParameters) SetRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SpeciesParameters) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SpeciesParameters) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SpeciesParameters) RootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SpeciesParameters) SetRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SpeciesParameters) SetMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SpeciesParameters) InitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SpeciesParameters) SetInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SpeciesParameters) RootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SpeciesParameters) SetRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SpeciesParameters) RootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SpeciesParameters) SetRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SpeciesParameters) SpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s SpeciesParameters) SetSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s SpeciesParameters) StageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s SpeciesParameters) SetStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s SpeciesParameters) LimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SpeciesParameters) SetLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SpeciesParameters) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(240)
}

func (s SpeciesParameters) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(240, v)
}

func (s SpeciesParameters) DroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SpeciesParameters) SetDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SpeciesParameters) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfMonos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMonos(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SpeciesParameters) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SpeciesParameters) VcMax25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SpeciesParameters) SetVcMax25(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SpeciesParameters) Aekc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x40f0108000000000)
}

func (s SpeciesParameters) SetAekc(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x40f0108000000000)
}

func (s SpeciesParameters) Aeko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296) ^ 0x4095e00000000000)
}

func (s SpeciesParameters) SetAeko(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v)^0x4095e00000000000)
}

func (s SpeciesParameters) Aevc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304) ^ 0x40f0cc0000000000)
}

func (s SpeciesParameters) SetAevc(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v)^0x40f0cc0000000000)
}

func (s SpeciesParameters) Kc25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312) ^ 0x407cc00000000000)
}

func (s SpeciesParameters) SetKc25(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v)^0x407cc00000000000)
}

func (s SpeciesParameters) Ko25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320) ^ 0x4074a00000000000)
}

func (s SpeciesParameters) SetKo25(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v)^0x4074a00000000000)
}

func (s SpeciesParameters) TransitionStageLeafExp() int16 {
	return int16(capnp.Struct(s).Uint16(242) ^ 65535)
}

func (s SpeciesParameters) SetTransitionStageLeafExp(v int16) {
	capnp.Struct(s).SetUint16(242, uint16(v)^65535)
}

// SpeciesParameters_List is a list of SpeciesParameters.
type SpeciesParameters_List = capnp.StructList[SpeciesParameters]

// NewSpeciesParameters creates a new list of SpeciesParameters.
func NewSpeciesParameters_List(s *capnp.Segment, sz int32) (SpeciesParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10}, sz)
	return capnp.StructList[SpeciesParameters](l), err
}

// SpeciesParameters_Future is a wrapper for a SpeciesParameters promised by a client call.
type SpeciesParameters_Future struct{ *capnp.Future }

func (f SpeciesParameters_Future) Struct() (SpeciesParameters, error) {
	p, err := f.Future.Ptr()
	return SpeciesParameters(p.Struct()), err
}

type CultivarParameters capnp.Struct

// CultivarParameters_TypeID is the unique identifier for the type CultivarParameters.
const CultivarParameters_TypeID = 0xf206f12e39ab7f9b

func NewCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters(st), err
}

func NewRootCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters(st), err
}

func ReadRootCultivarParameters(msg *capnp.Message) (CultivarParameters, error) {
	root, err := msg.Root()
	return CultivarParameters(root.Struct()), err
}

func (s CultivarParameters) String() string {
	str, _ := text.Marshal(0xf206f12e39ab7f9b, capnp.Struct(s))
	return str
}

func (s CultivarParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CultivarParameters) DecodeFromPtr(p capnp.Ptr) CultivarParameters {
	return CultivarParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CultivarParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CultivarParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CultivarParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CultivarParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CultivarParameters) CultivarId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CultivarParameters) HasCultivarId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CultivarParameters) CultivarIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetCultivarId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CultivarParameters) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CultivarParameters) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CultivarParameters) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CultivarParameters) Perennial() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CultivarParameters) SetPerennial(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CultivarParameters) MaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CultivarParameters) SetMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CultivarParameters) MaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CultivarParameters) SetMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CultivarParameters) ResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s CultivarParameters) SetResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s CultivarParameters) Lt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CultivarParameters) SetLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CultivarParameters) SetCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CultivarParameters) SetCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CultivarParameters) CropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CultivarParameters) SetCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CultivarParameters) AssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.PointerList(p.List()), err
}

func (s CultivarParameters) HasAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CultivarParameters) SetAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAssimilatePartitioningCoeff sets the assimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.PointerList(p.List()), err
}

func (s CultivarParameters) HasOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CultivarParameters) SetOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOrganSenescenceRate sets the organSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CultivarParameters) BaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CultivarParameters) SetBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBaseDaylength sets the baseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CultivarParameters) SetOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewOptimumTemperature sets the optimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CultivarParameters) DaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CultivarParameters) SetDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewDaylengthRequirement sets the daylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CultivarParameters) DroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CultivarParameters) SetDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewDroughtStressThreshold sets the droughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CultivarParameters) SpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CultivarParameters) SetSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSpecificLeafArea sets the specificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CultivarParameters) StageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CultivarParameters) SetStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewStageKcFactor sets the stageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CultivarParameters) StageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CultivarParameters) SetStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewStageTemperatureSum sets the stageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s CultivarParameters) VernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CultivarParameters) SetVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewVernalisationRequirement sets the vernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CultivarParameters) HeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CultivarParameters) SetHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CultivarParameters) HeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CultivarParameters) SetHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CultivarParameters) CriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CultivarParameters) SetCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CultivarParameters) BeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CultivarParameters) SetBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CultivarParameters) EndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CultivarParameters) SetEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CultivarParameters) FrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CultivarParameters) SetFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CultivarParameters) FrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CultivarParameters) SetFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CultivarParameters) LowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CultivarParameters) SetLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CultivarParameters) RespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s CultivarParameters) SetRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s CultivarParameters) LatestHarvestDoy() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 65535)
}

func (s CultivarParameters) SetLatestHarvestDoy(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^65535)
}

func (s CultivarParameters) OrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CultivarParameters) SetOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewOrganIdsForPrimaryYield sets the organIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CultivarParameters) SetOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewOrganIdsForSecondaryYield sets the organIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CultivarParameters) SetOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewOrganIdsForCutting sets the organIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CultivarParameters) EarlyRefLeafExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x4028000000000000)
}

func (s CultivarParameters) SetEarlyRefLeafExp(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x4028000000000000)
}

func (s CultivarParameters) RefLeafExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4034000000000000)
}

func (s CultivarParameters) SetRefLeafExp(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4034000000000000)
}

func (s CultivarParameters) MinTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CultivarParameters) SetMinTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CultivarParameters) OptTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CultivarParameters) SetOptTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CultivarParameters) MaxTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s CultivarParameters) SetMaxTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s CultivarParameters) WinterCrop() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CultivarParameters) SetWinterCrop(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// CultivarParameters_List is a list of CultivarParameters.
type CultivarParameters_List = capnp.StructList[CultivarParameters]

// NewCultivarParameters creates a new list of CultivarParameters.
func NewCultivarParameters_List(s *capnp.Segment, sz int32) (CultivarParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15}, sz)
	return capnp.StructList[CultivarParameters](l), err
}

// CultivarParameters_Future is a wrapper for a CultivarParameters promised by a client call.
type CultivarParameters_Future struct{ *capnp.Future }

func (f CultivarParameters_Future) Struct() (CultivarParameters, error) {
	p, err := f.Future.Ptr()
	return CultivarParameters(p.Struct()), err
}

type YieldComponent capnp.Struct

// YieldComponent_TypeID is the unique identifier for the type YieldComponent.
const YieldComponent_TypeID = 0xdbfe301c0ddefe4e

func NewYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent(st), err
}

func NewRootYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent(st), err
}

func ReadRootYieldComponent(msg *capnp.Message) (YieldComponent, error) {
	root, err := msg.Root()
	return YieldComponent(root.Struct()), err
}

func (s YieldComponent) String() string {
	str, _ := text.Marshal(0xdbfe301c0ddefe4e, capnp.Struct(s))
	return str
}

func (s YieldComponent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (YieldComponent) DecodeFromPtr(p capnp.Ptr) YieldComponent {
	return YieldComponent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s YieldComponent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s YieldComponent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s YieldComponent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s YieldComponent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s YieldComponent) OrganId() int64 {
	return int64(capnp.Struct(s).Uint64(0) ^ 18446744073709551615)
}

func (s YieldComponent) SetOrganId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v)^18446744073709551615)
}

func (s YieldComponent) YieldPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s YieldComponent) SetYieldPercentage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s YieldComponent) YieldDryMatter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s YieldComponent) SetYieldDryMatter(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// YieldComponent_List is a list of YieldComponent.
type YieldComponent_List = capnp.StructList[YieldComponent]

// NewYieldComponent creates a new list of YieldComponent.
func NewYieldComponent_List(s *capnp.Segment, sz int32) (YieldComponent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[YieldComponent](l), err
}

// YieldComponent_Future is a wrapper for a YieldComponent promised by a client call.
type YieldComponent_Future struct{ *capnp.Future }

func (f YieldComponent_Future) Struct() (YieldComponent, error) {
	p, err := f.Future.Ptr()
	return YieldComponent(p.Struct()), err
}

type AutomaticHarvestParameters capnp.Struct

// AutomaticHarvestParameters_TypeID is the unique identifier for the type AutomaticHarvestParameters.
const AutomaticHarvestParameters_TypeID = 0xc5f724bd00c2f628

func NewAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters(st), err
}

func NewRootAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters(st), err
}

func ReadRootAutomaticHarvestParameters(msg *capnp.Message) (AutomaticHarvestParameters, error) {
	root, err := msg.Root()
	return AutomaticHarvestParameters(root.Struct()), err
}

func (s AutomaticHarvestParameters) String() string {
	str, _ := text.Marshal(0xc5f724bd00c2f628, capnp.Struct(s))
	return str
}

func (s AutomaticHarvestParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AutomaticHarvestParameters) DecodeFromPtr(p capnp.Ptr) AutomaticHarvestParameters {
	return AutomaticHarvestParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AutomaticHarvestParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AutomaticHarvestParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AutomaticHarvestParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AutomaticHarvestParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AutomaticHarvestParameters) HarvestTime() AutomaticHarvestParameters_HarvestTime {
	return AutomaticHarvestParameters_HarvestTime(capnp.Struct(s).Uint16(0) ^ 1)
}

func (s AutomaticHarvestParameters) SetHarvestTime(v AutomaticHarvestParameters_HarvestTime) {
	capnp.Struct(s).SetUint16(0, uint16(v)^1)
}

func (s AutomaticHarvestParameters) LatestHarvestDOY() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 65535)
}

func (s AutomaticHarvestParameters) SetLatestHarvestDOY(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^65535)
}

// AutomaticHarvestParameters_List is a list of AutomaticHarvestParameters.
type AutomaticHarvestParameters_List = capnp.StructList[AutomaticHarvestParameters]

// NewAutomaticHarvestParameters creates a new list of AutomaticHarvestParameters.
func NewAutomaticHarvestParameters_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AutomaticHarvestParameters](l), err
}

// AutomaticHarvestParameters_Future is a wrapper for a AutomaticHarvestParameters promised by a client call.
type AutomaticHarvestParameters_Future struct{ *capnp.Future }

func (f AutomaticHarvestParameters_Future) Struct() (AutomaticHarvestParameters, error) {
	p, err := f.Future.Ptr()
	return AutomaticHarvestParameters(p.Struct()), err
}

type AutomaticHarvestParameters_HarvestTime uint16

// AutomaticHarvestParameters_HarvestTime_TypeID is the unique identifier for the type AutomaticHarvestParameters_HarvestTime.
const AutomaticHarvestParameters_HarvestTime_TypeID = 0x990bdcf2be83b604

// Values of AutomaticHarvestParameters_HarvestTime.
const (
	AutomaticHarvestParameters_HarvestTime_maturity AutomaticHarvestParameters_HarvestTime = 0
	AutomaticHarvestParameters_HarvestTime_unknown  AutomaticHarvestParameters_HarvestTime = 1
)

// String returns the enum's constant name.
func (c AutomaticHarvestParameters_HarvestTime) String() string {
	switch c {
	case AutomaticHarvestParameters_HarvestTime_maturity:
		return "maturity"
	case AutomaticHarvestParameters_HarvestTime_unknown:
		return "unknown"

	default:
		return ""
	}
}

// AutomaticHarvestParameters_HarvestTimeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AutomaticHarvestParameters_HarvestTimeFromString(c string) AutomaticHarvestParameters_HarvestTime {
	switch c {
	case "maturity":
		return AutomaticHarvestParameters_HarvestTime_maturity
	case "unknown":
		return AutomaticHarvestParameters_HarvestTime_unknown

	default:
		return 0
	}
}

type AutomaticHarvestParameters_HarvestTime_List = capnp.EnumList[AutomaticHarvestParameters_HarvestTime]

func NewAutomaticHarvestParameters_HarvestTime_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_HarvestTime_List, error) {
	return capnp.NewEnumList[AutomaticHarvestParameters_HarvestTime](s, sz)
}

type NMinCropParameters capnp.Struct

// NMinCropParameters_TypeID is the unique identifier for the type NMinCropParameters.
const NMinCropParameters_TypeID = 0xea9236083718fdc2

func NewNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters(st), err
}

func NewRootNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters(st), err
}

func ReadRootNMinCropParameters(msg *capnp.Message) (NMinCropParameters, error) {
	root, err := msg.Root()
	return NMinCropParameters(root.Struct()), err
}

func (s NMinCropParameters) String() string {
	str, _ := text.Marshal(0xea9236083718fdc2, capnp.Struct(s))
	return str
}

func (s NMinCropParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NMinCropParameters) DecodeFromPtr(p capnp.Ptr) NMinCropParameters {
	return NMinCropParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NMinCropParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NMinCropParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NMinCropParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NMinCropParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NMinCropParameters) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NMinCropParameters) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NMinCropParameters) SetNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s NMinCropParameters) SetNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// NMinCropParameters_List is a list of NMinCropParameters.
type NMinCropParameters_List = capnp.StructList[NMinCropParameters]

// NewNMinCropParameters creates a new list of NMinCropParameters.
func NewNMinCropParameters_List(s *capnp.Segment, sz int32) (NMinCropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[NMinCropParameters](l), err
}

// NMinCropParameters_Future is a wrapper for a NMinCropParameters promised by a client call.
type NMinCropParameters_Future struct{ *capnp.Future }

func (f NMinCropParameters_Future) Struct() (NMinCropParameters, error) {
	p, err := f.Future.Ptr()
	return NMinCropParameters(p.Struct()), err
}

type NMinApplicationParameters capnp.Struct

// NMinApplicationParameters_TypeID is the unique identifier for the type NMinApplicationParameters.
const NMinApplicationParameters_TypeID = 0xde7576c640b5ad18

func NewNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters(st), err
}

func NewRootNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters(st), err
}

func ReadRootNMinApplicationParameters(msg *capnp.Message) (NMinApplicationParameters, error) {
	root, err := msg.Root()
	return NMinApplicationParameters(root.Struct()), err
}

func (s NMinApplicationParameters) String() string {
	str, _ := text.Marshal(0xde7576c640b5ad18, capnp.Struct(s))
	return str
}

func (s NMinApplicationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NMinApplicationParameters) DecodeFromPtr(p capnp.Ptr) NMinApplicationParameters {
	return NMinApplicationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NMinApplicationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NMinApplicationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NMinApplicationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NMinApplicationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NMinApplicationParameters) Min() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NMinApplicationParameters) SetMin(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NMinApplicationParameters) Max() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NMinApplicationParameters) SetMax(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NMinApplicationParameters) DelayInDays() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s NMinApplicationParameters) SetDelayInDays(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

// NMinApplicationParameters_List is a list of NMinApplicationParameters.
type NMinApplicationParameters_List = capnp.StructList[NMinApplicationParameters]

// NewNMinApplicationParameters creates a new list of NMinApplicationParameters.
func NewNMinApplicationParameters_List(s *capnp.Segment, sz int32) (NMinApplicationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[NMinApplicationParameters](l), err
}

// NMinApplicationParameters_Future is a wrapper for a NMinApplicationParameters promised by a client call.
type NMinApplicationParameters_Future struct{ *capnp.Future }

func (f NMinApplicationParameters_Future) Struct() (NMinApplicationParameters, error) {
	p, err := f.Future.Ptr()
	return NMinApplicationParameters(p.Struct()), err
}

type CropResidueParameters capnp.Struct

// CropResidueParameters_TypeID is the unique identifier for the type CropResidueParameters.
const CropResidueParameters_TypeID = 0x8491dc2c2f94f1d1

func NewCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters(st), err
}

func NewRootCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters(st), err
}

func ReadRootCropResidueParameters(msg *capnp.Message) (CropResidueParameters, error) {
	root, err := msg.Root()
	return CropResidueParameters(root.Struct()), err
}

func (s CropResidueParameters) String() string {
	str, _ := text.Marshal(0x8491dc2c2f94f1d1, capnp.Struct(s))
	return str
}

func (s CropResidueParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropResidueParameters) DecodeFromPtr(p capnp.Ptr) CropResidueParameters {
	return CropResidueParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropResidueParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropResidueParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropResidueParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropResidueParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropResidueParameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s CropResidueParameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropResidueParameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s CropResidueParameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropResidueParameters) Species() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropResidueParameters) HasSpecies() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropResidueParameters) SpeciesBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetSpecies(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropResidueParameters) ResidueType() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropResidueParameters) HasResidueType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropResidueParameters) ResidueTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetResidueType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CropResidueParameters_List is a list of CropResidueParameters.
type CropResidueParameters_List = capnp.StructList[CropResidueParameters]

// NewCropResidueParameters creates a new list of CropResidueParameters.
func NewCropResidueParameters_List(s *capnp.Segment, sz int32) (CropResidueParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CropResidueParameters](l), err
}

// CropResidueParameters_Future is a wrapper for a CropResidueParameters promised by a client call.
type CropResidueParameters_Future struct{ *capnp.Future }

func (f CropResidueParameters_Future) Struct() (CropResidueParameters, error) {
	p, err := f.Future.Ptr()
	return CropResidueParameters(p.Struct()), err
}
func (p CropResidueParameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilParameters capnp.Struct

// SoilParameters_TypeID is the unique identifier for the type SoilParameters.
const SoilParameters_TypeID = 0xb42137d4b8ba3ef6

func NewSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters(st), err
}

func NewRootSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters(st), err
}

func ReadRootSoilParameters(msg *capnp.Message) (SoilParameters, error) {
	root, err := msg.Root()
	return SoilParameters(root.Struct()), err
}

func (s SoilParameters) String() string {
	str, _ := text.Marshal(0xb42137d4b8ba3ef6, capnp.Struct(s))
	return str
}

func (s SoilParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilParameters) DecodeFromPtr(p capnp.Ptr) SoilParameters {
	return SoilParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilParameters) SoilSandContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilSandContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilClayContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilClayContent(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilpH() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x401b99999999999a)
}

func (s SoilParameters) SetSoilpH(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x401b99999999999a)
}

func (s SoilParameters) SoilStoneContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilParameters) SetSoilStoneContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilParameters) Lambda() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetLambda(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) FieldCapacity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetFieldCapacity(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) Saturation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSaturation(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) PermanentWiltingPoint() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetPermanentWiltingPoint(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilTexture() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilParameters) HasSoilTexture() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilParameters) SoilTextureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilParameters) SetSoilTexture(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilParameters) SoilAmmonium() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SetSoilAmmonium(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SoilNitrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f747ae147ae147b)
}

func (s SoilParameters) SetSoilNitrate(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f747ae147ae147b)
}

func (s SoilParameters) SoilCNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x4024000000000000)
}

func (s SoilParameters) SetSoilCNRatio(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x4024000000000000)
}

func (s SoilParameters) SoilMoisturePercentFC() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x4059000000000000)
}

func (s SoilParameters) SetSoilMoisturePercentFC(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x4059000000000000)
}

func (s SoilParameters) SoilRawDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilRawDensity(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilBulkDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilBulkDensity(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicCarbon() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicCarbon(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicMatter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicMatter(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0xbff0000000000000)
}

// SoilParameters_List is a list of SoilParameters.
type SoilParameters_List = capnp.StructList[SoilParameters]

// NewSoilParameters creates a new list of SoilParameters.
func NewSoilParameters_List(s *capnp.Segment, sz int32) (SoilParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1}, sz)
	return capnp.StructList[SoilParameters](l), err
}

// SoilParameters_Future is a wrapper for a SoilParameters promised by a client call.
type SoilParameters_Future struct{ *capnp.Future }

func (f SoilParameters_Future) Struct() (SoilParameters, error) {
	p, err := f.Future.Ptr()
	return SoilParameters(p.Struct()), err
}

type AutomaticIrrigationParameters capnp.Struct

// AutomaticIrrigationParameters_TypeID is the unique identifier for the type AutomaticIrrigationParameters.
const AutomaticIrrigationParameters_TypeID = 0x8890f17a143c6896

func NewAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters(st), err
}

func NewRootAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters(st), err
}

func ReadRootAutomaticIrrigationParameters(msg *capnp.Message) (AutomaticIrrigationParameters, error) {
	root, err := msg.Root()
	return AutomaticIrrigationParameters(root.Struct()), err
}

func (s AutomaticIrrigationParameters) String() string {
	str, _ := text.Marshal(0x8890f17a143c6896, capnp.Struct(s))
	return str
}

func (s AutomaticIrrigationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AutomaticIrrigationParameters) DecodeFromPtr(p capnp.Ptr) AutomaticIrrigationParameters {
	return AutomaticIrrigationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AutomaticIrrigationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AutomaticIrrigationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AutomaticIrrigationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AutomaticIrrigationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AutomaticIrrigationParameters) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s AutomaticIrrigationParameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AutomaticIrrigationParameters) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s AutomaticIrrigationParameters) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AutomaticIrrigationParameters) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x4031000000000000)
}

func (s AutomaticIrrigationParameters) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x4031000000000000)
}

func (s AutomaticIrrigationParameters) Threshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fd6666666666666)
}

func (s AutomaticIrrigationParameters) SetThreshold(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fd6666666666666)
}

// AutomaticIrrigationParameters_List is a list of AutomaticIrrigationParameters.
type AutomaticIrrigationParameters_List = capnp.StructList[AutomaticIrrigationParameters]

// NewAutomaticIrrigationParameters creates a new list of AutomaticIrrigationParameters.
func NewAutomaticIrrigationParameters_List(s *capnp.Segment, sz int32) (AutomaticIrrigationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[AutomaticIrrigationParameters](l), err
}

// AutomaticIrrigationParameters_Future is a wrapper for a AutomaticIrrigationParameters promised by a client call.
type AutomaticIrrigationParameters_Future struct{ *capnp.Future }

func (f AutomaticIrrigationParameters_Future) Struct() (AutomaticIrrigationParameters, error) {
	p, err := f.Future.Ptr()
	return AutomaticIrrigationParameters(p.Struct()), err
}
func (p AutomaticIrrigationParameters_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SiteParameters capnp.Struct

// SiteParameters_TypeID is the unique identifier for the type SiteParameters.
const SiteParameters_TypeID = 0xb599bbd2f1465f9c

func NewSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters(st), err
}

func NewRootSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters(st), err
}

func ReadRootSiteParameters(msg *capnp.Message) (SiteParameters, error) {
	root, err := msg.Root()
	return SiteParameters(root.Struct()), err
}

func (s SiteParameters) String() string {
	str, _ := text.Marshal(0xb599bbd2f1465f9c, capnp.Struct(s))
	return str
}

func (s SiteParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SiteParameters) DecodeFromPtr(p capnp.Ptr) SiteParameters {
	return SiteParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SiteParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SiteParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SiteParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SiteParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SiteParameters) Latitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x404a400000000000)
}

func (s SiteParameters) SetLatitude(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x404a400000000000)
}

func (s SiteParameters) Slope() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3f847ae147ae147b)
}

func (s SiteParameters) SetSlope(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SiteParameters) HeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4049000000000000)
}

func (s SiteParameters) SetHeightNN(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4049000000000000)
}

func (s SiteParameters) GroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4051800000000000)
}

func (s SiteParameters) SetGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4051800000000000)
}

func (s SiteParameters) SoilCNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x4024000000000000)
}

func (s SiteParameters) SetSoilCNRatio(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x4024000000000000)
}

func (s SiteParameters) DrainageCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SiteParameters) SetDrainageCoeff(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SiteParameters) VqNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x403e000000000000)
}

func (s SiteParameters) SetVqNDeposition(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x403e000000000000)
}

func (s SiteParameters) MaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4000000000000000)
}

func (s SiteParameters) SetMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4000000000000000)
}

func (s SiteParameters) ImpenetrableLayerDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0xbff0000000000000)
}

func (s SiteParameters) SetImpenetrableLayerDepth(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0xbff0000000000000)
}

func (s SiteParameters) SoilSpecificHumusBalanceCorrection() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SiteParameters) SetSoilSpecificHumusBalanceCorrection(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SiteParameters) SoilParameters() (SoilParameters_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilParameters_List(p.List()), err
}

func (s SiteParameters) HasSoilParameters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SiteParameters) SetSoilParameters(v SoilParameters_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSoilParameters sets the soilParameters field to a newly
// allocated SoilParameters_List, preferring placement in s's segment.
func (s SiteParameters) NewSoilParameters(n int32) (SoilParameters_List, error) {
	l, err := NewSoilParameters_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilParameters_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SiteParameters_List is a list of SiteParameters.
type SiteParameters_List = capnp.StructList[SiteParameters]

// NewSiteParameters creates a new list of SiteParameters.
func NewSiteParameters_List(s *capnp.Segment, sz int32) (SiteParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[SiteParameters](l), err
}

// SiteParameters_Future is a wrapper for a SiteParameters promised by a client call.
type SiteParameters_Future struct{ *capnp.Future }

func (f SiteParameters_Future) Struct() (SiteParameters, error) {
	p, err := f.Future.Ptr()
	return SiteParameters(p.Struct()), err
}

type EnvironmentParameters capnp.Struct

// EnvironmentParameters_TypeID is the unique identifier for the type EnvironmentParameters.
const EnvironmentParameters_TypeID = 0xc0ff4a277ca4be0a

func NewEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters(st), err
}

func NewRootEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters(st), err
}

func ReadRootEnvironmentParameters(msg *capnp.Message) (EnvironmentParameters, error) {
	root, err := msg.Root()
	return EnvironmentParameters(root.Struct()), err
}

func (s EnvironmentParameters) String() string {
	str, _ := text.Marshal(0xc0ff4a277ca4be0a, capnp.Struct(s))
	return str
}

func (s EnvironmentParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvironmentParameters) DecodeFromPtr(p capnp.Ptr) EnvironmentParameters {
	return EnvironmentParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvironmentParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvironmentParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvironmentParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvironmentParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvironmentParameters) Albedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) SetAlbedo(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) Rcp() climate.RCP {
	return climate.RCP(capnp.Struct(s).Uint16(66))
}

func (s EnvironmentParameters) SetRcp(v climate.RCP) {
	capnp.Struct(s).SetUint16(66, uint16(v))
}

func (s EnvironmentParameters) AtmosphericCO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s EnvironmentParameters) SetAtmosphericCO2(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericCO2s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EnvironmentParameters_YearToValue_List(p.List()), err
}

func (s EnvironmentParameters) HasAtmosphericCO2s() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvironmentParameters) SetAtmosphericCO2s(v EnvironmentParameters_YearToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAtmosphericCO2s sets the atmosphericCO2s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericCO2s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s EnvironmentParameters) AtmosphericO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s EnvironmentParameters) SetAtmosphericO3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericO3s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters_YearToValue_List(p.List()), err
}

func (s EnvironmentParameters) HasAtmosphericO3s() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EnvironmentParameters) SetAtmosphericO3s(v EnvironmentParameters_YearToValue_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAtmosphericO3s sets the atmosphericO3s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericO3s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s EnvironmentParameters) WindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4000000000000000)
}

func (s EnvironmentParameters) SetWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4000000000000000)
}

func (s EnvironmentParameters) LeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s EnvironmentParameters) SetLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s EnvironmentParameters) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s EnvironmentParameters) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s EnvironmentParameters) MaxGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x4032000000000000)
}

func (s EnvironmentParameters) SetMaxGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x4032000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4034000000000000)
}

func (s EnvironmentParameters) SetMinGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4034000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepthMonth() uint8 {
	return capnp.Struct(s).Uint8(64) ^ 3
}

func (s EnvironmentParameters) SetMinGroundwaterDepthMonth(v uint8) {
	capnp.Struct(s).SetUint8(64, v^3)
}

// EnvironmentParameters_List is a list of EnvironmentParameters.
type EnvironmentParameters_List = capnp.StructList[EnvironmentParameters]

// NewEnvironmentParameters creates a new list of EnvironmentParameters.
func NewEnvironmentParameters_List(s *capnp.Segment, sz int32) (EnvironmentParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2}, sz)
	return capnp.StructList[EnvironmentParameters](l), err
}

// EnvironmentParameters_Future is a wrapper for a EnvironmentParameters promised by a client call.
type EnvironmentParameters_Future struct{ *capnp.Future }

func (f EnvironmentParameters_Future) Struct() (EnvironmentParameters, error) {
	p, err := f.Future.Ptr()
	return EnvironmentParameters(p.Struct()), err
}

type EnvironmentParameters_YearToValue capnp.Struct

// EnvironmentParameters_YearToValue_TypeID is the unique identifier for the type EnvironmentParameters_YearToValue.
const EnvironmentParameters_YearToValue_TypeID = 0xe68d439455fd9cce

func NewEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue(st), err
}

func NewRootEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue(st), err
}

func ReadRootEnvironmentParameters_YearToValue(msg *capnp.Message) (EnvironmentParameters_YearToValue, error) {
	root, err := msg.Root()
	return EnvironmentParameters_YearToValue(root.Struct()), err
}

func (s EnvironmentParameters_YearToValue) String() string {
	str, _ := text.Marshal(0xe68d439455fd9cce, capnp.Struct(s))
	return str
}

func (s EnvironmentParameters_YearToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvironmentParameters_YearToValue) DecodeFromPtr(p capnp.Ptr) EnvironmentParameters_YearToValue {
	return EnvironmentParameters_YearToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvironmentParameters_YearToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvironmentParameters_YearToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvironmentParameters_YearToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvironmentParameters_YearToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvironmentParameters_YearToValue) Year() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s EnvironmentParameters_YearToValue) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s EnvironmentParameters_YearToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s EnvironmentParameters_YearToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// EnvironmentParameters_YearToValue_List is a list of EnvironmentParameters_YearToValue.
type EnvironmentParameters_YearToValue_List = capnp.StructList[EnvironmentParameters_YearToValue]

// NewEnvironmentParameters_YearToValue creates a new list of EnvironmentParameters_YearToValue.
func NewEnvironmentParameters_YearToValue_List(s *capnp.Segment, sz int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[EnvironmentParameters_YearToValue](l), err
}

// EnvironmentParameters_YearToValue_Future is a wrapper for a EnvironmentParameters_YearToValue promised by a client call.
type EnvironmentParameters_YearToValue_Future struct{ *capnp.Future }

func (f EnvironmentParameters_YearToValue_Future) Struct() (EnvironmentParameters_YearToValue, error) {
	p, err := f.Future.Ptr()
	return EnvironmentParameters_YearToValue(p.Struct()), err
}

type MeasuredGroundwaterTableInformation capnp.Struct

// MeasuredGroundwaterTableInformation_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation.
const MeasuredGroundwaterTableInformation_TypeID = 0xc1092d6c4c110e29

func NewMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation(st), err
}

func NewRootMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation(st), err
}

func ReadRootMeasuredGroundwaterTableInformation(msg *capnp.Message) (MeasuredGroundwaterTableInformation, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation(root.Struct()), err
}

func (s MeasuredGroundwaterTableInformation) String() string {
	str, _ := text.Marshal(0xc1092d6c4c110e29, capnp.Struct(s))
	return str
}

func (s MeasuredGroundwaterTableInformation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MeasuredGroundwaterTableInformation) DecodeFromPtr(p capnp.Ptr) MeasuredGroundwaterTableInformation {
	return MeasuredGroundwaterTableInformation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MeasuredGroundwaterTableInformation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MeasuredGroundwaterTableInformation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MeasuredGroundwaterTableInformation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MeasuredGroundwaterTableInformation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MeasuredGroundwaterTableInformation) GroundwaterInformationAvailable() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInformationAvailable(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s MeasuredGroundwaterTableInformation) GroundwaterInfo() (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MeasuredGroundwaterTableInformation_DateToValue_List(p.List()), err
}

func (s MeasuredGroundwaterTableInformation) HasGroundwaterInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInfo(v MeasuredGroundwaterTableInformation_DateToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGroundwaterInfo sets the groundwaterInfo field to a newly
// allocated MeasuredGroundwaterTableInformation_DateToValue_List, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation) NewGroundwaterInfo(n int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := NewMeasuredGroundwaterTableInformation_DateToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MeasuredGroundwaterTableInformation_DateToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MeasuredGroundwaterTableInformation_List is a list of MeasuredGroundwaterTableInformation.
type MeasuredGroundwaterTableInformation_List = capnp.StructList[MeasuredGroundwaterTableInformation]

// NewMeasuredGroundwaterTableInformation creates a new list of MeasuredGroundwaterTableInformation.
func NewMeasuredGroundwaterTableInformation_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MeasuredGroundwaterTableInformation](l), err
}

// MeasuredGroundwaterTableInformation_Future is a wrapper for a MeasuredGroundwaterTableInformation promised by a client call.
type MeasuredGroundwaterTableInformation_Future struct{ *capnp.Future }

func (f MeasuredGroundwaterTableInformation_Future) Struct() (MeasuredGroundwaterTableInformation, error) {
	p, err := f.Future.Ptr()
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

type MeasuredGroundwaterTableInformation_DateToValue capnp.Struct

// MeasuredGroundwaterTableInformation_DateToValue_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation_DateToValue.
const MeasuredGroundwaterTableInformation_DateToValue_TypeID = 0x81b8ffeeb01d76f7

func NewMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue(st), err
}

func NewRootMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue(st), err
}

func ReadRootMeasuredGroundwaterTableInformation_DateToValue(msg *capnp.Message) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation_DateToValue(root.Struct()), err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) String() string {
	str, _ := text.Marshal(0x81b8ffeeb01d76f7, capnp.Struct(s))
	return str
}

func (s MeasuredGroundwaterTableInformation_DateToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MeasuredGroundwaterTableInformation_DateToValue) DecodeFromPtr(p capnp.Ptr) MeasuredGroundwaterTableInformation_DateToValue {
	return MeasuredGroundwaterTableInformation_DateToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MeasuredGroundwaterTableInformation_DateToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MeasuredGroundwaterTableInformation_DateToValue) Date() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) HasDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation_DateToValue) NewDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// MeasuredGroundwaterTableInformation_DateToValue_List is a list of MeasuredGroundwaterTableInformation_DateToValue.
type MeasuredGroundwaterTableInformation_DateToValue_List = capnp.StructList[MeasuredGroundwaterTableInformation_DateToValue]

// NewMeasuredGroundwaterTableInformation_DateToValue creates a new list of MeasuredGroundwaterTableInformation_DateToValue.
func NewMeasuredGroundwaterTableInformation_DateToValue_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MeasuredGroundwaterTableInformation_DateToValue](l), err
}

// MeasuredGroundwaterTableInformation_DateToValue_Future is a wrapper for a MeasuredGroundwaterTableInformation_DateToValue promised by a client call.
type MeasuredGroundwaterTableInformation_DateToValue_Future struct{ *capnp.Future }

func (f MeasuredGroundwaterTableInformation_DateToValue_Future) Struct() (MeasuredGroundwaterTableInformation_DateToValue, error) {
	p, err := f.Future.Ptr()
	return MeasuredGroundwaterTableInformation_DateToValue(p.Struct()), err
}
func (p MeasuredGroundwaterTableInformation_DateToValue_Future) Date() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}

type SimulationParameters capnp.Struct

// SimulationParameters_TypeID is the unique identifier for the type SimulationParameters.
const SimulationParameters_TypeID = 0xffac0fa5c7156a5d

func NewSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters(st), err
}

func NewRootSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters(st), err
}

func ReadRootSimulationParameters(msg *capnp.Message) (SimulationParameters, error) {
	root, err := msg.Root()
	return SimulationParameters(root.Struct()), err
}

func (s SimulationParameters) String() string {
	str, _ := text.Marshal(0xffac0fa5c7156a5d, capnp.Struct(s))
	return str
}

func (s SimulationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimulationParameters) DecodeFromPtr(p capnp.Ptr) SimulationParameters {
	return SimulationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimulationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimulationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimulationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimulationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimulationParameters) StartDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s SimulationParameters) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SimulationParameters) SetStartDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewStartDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) EndDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s SimulationParameters) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SimulationParameters) SetEndDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewEndDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) NitrogenResponseOn() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s SimulationParameters) SetNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s SimulationParameters) WaterDeficitResponseOn() bool {
	return !capnp.Struct(s).Bit(1)
}

func (s SimulationParameters) SetWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(1, !v)
}

func (s SimulationParameters) EmergenceFloodingControlOn() bool {
	return !capnp.Struct(s).Bit(2)
}

func (s SimulationParameters) SetEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, !v)
}

func (s SimulationParameters) EmergenceMoistureControlOn() bool {
	return !capnp.Struct(s).Bit(3)
}

func (s SimulationParameters) SetEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, !v)
}

func (s SimulationParameters) FrostKillOn() bool {
	return !capnp.Struct(s).Bit(4)
}

func (s SimulationParameters) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(4, !v)
}

func (s SimulationParameters) UseAutomaticIrrigation() bool {
	return capnp.Struct(s).Bit(5)
}

func (s SimulationParameters) SetUseAutomaticIrrigation(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s SimulationParameters) AutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return AutomaticIrrigationParameters(p.Struct()), err
}

func (s SimulationParameters) HasAutoIrrigationParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SimulationParameters) SetAutoIrrigationParams(v AutomaticIrrigationParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewAutoIrrigationParams sets the autoIrrigationParams field to a newly
// allocated AutomaticIrrigationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewAutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	ss, err := NewAutomaticIrrigationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticIrrigationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) UseNMinMineralFertilisingMethod() bool {
	return capnp.Struct(s).Bit(6)
}

func (s SimulationParameters) SetUseNMinMineralFertilisingMethod(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s SimulationParameters) NMinFertiliserPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SimulationParameters) HasNMinFertiliserPartition() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SimulationParameters) SetNMinFertiliserPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewNMinFertiliserPartition sets the nMinFertiliserPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinFertiliserPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) NMinApplicationParams() (NMinApplicationParameters, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return NMinApplicationParameters(p.Struct()), err
}

func (s SimulationParameters) HasNMinApplicationParams() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SimulationParameters) SetNMinApplicationParams(v NMinApplicationParameters) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewNMinApplicationParams sets the nMinApplicationParams field to a newly
// allocated NMinApplicationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinApplicationParams() (NMinApplicationParameters, error) {
	ss, err := NewNMinApplicationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return NMinApplicationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) UseSecondaryYields() bool {
	return !capnp.Struct(s).Bit(7)
}

func (s SimulationParameters) SetUseSecondaryYields(v bool) {
	capnp.Struct(s).SetBit(7, !v)
}

func (s SimulationParameters) UseAutomaticHarvestTrigger() bool {
	return capnp.Struct(s).Bit(8)
}

func (s SimulationParameters) SetUseAutomaticHarvestTrigger(v bool) {
	capnp.Struct(s).SetBit(8, v)
}

func (s SimulationParameters) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2) ^ 20
}

func (s SimulationParameters) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v^20)
}

func (s SimulationParameters) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fb999999999999a)
}

func (s SimulationParameters) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SimulationParameters) StartPVIndex() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SimulationParameters) SetStartPVIndex(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SimulationParameters) JulianDayAutomaticFertilising() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s SimulationParameters) SetJulianDayAutomaticFertilising(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

// SimulationParameters_List is a list of SimulationParameters.
type SimulationParameters_List = capnp.StructList[SimulationParameters]

// NewSimulationParameters creates a new list of SimulationParameters.
func NewSimulationParameters_List(s *capnp.Segment, sz int32) (SimulationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[SimulationParameters](l), err
}

// SimulationParameters_Future is a wrapper for a SimulationParameters promised by a client call.
type SimulationParameters_Future struct{ *capnp.Future }

func (f SimulationParameters_Future) Struct() (SimulationParameters, error) {
	p, err := f.Future.Ptr()
	return SimulationParameters(p.Struct()), err
}
func (p SimulationParameters_Future) StartDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p SimulationParameters_Future) EndDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p SimulationParameters_Future) AutoIrrigationParams() AutomaticIrrigationParameters_Future {
	return AutomaticIrrigationParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SimulationParameters_Future) NMinFertiliserPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(3, nil)}
}
func (p SimulationParameters_Future) NMinApplicationParams() NMinApplicationParameters_Future {
	return NMinApplicationParameters_Future{Future: p.Future.Field(4, nil)}
}

type CropModuleParameters capnp.Struct

// CropModuleParameters_TypeID is the unique identifier for the type CropModuleParameters.
const CropModuleParameters_TypeID = 0xe4d6d0d9ae1553da

func NewCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters(st), err
}

func NewRootCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters(st), err
}

func ReadRootCropModuleParameters(msg *capnp.Message) (CropModuleParameters, error) {
	root, err := msg.Root()
	return CropModuleParameters(root.Struct()), err
}

func (s CropModuleParameters) String() string {
	str, _ := text.Marshal(0xe4d6d0d9ae1553da, capnp.Struct(s))
	return str
}

func (s CropModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleParameters) DecodeFromPtr(p capnp.Ptr) CropModuleParameters {
	return CropModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleParameters) CanopyReflectionCoefficient() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s CropModuleParameters) SetCanopyReflectionCoefficient(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleParameters) SetReferenceMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceLeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleParameters) SetReferenceLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter1(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter2(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleParameters) SetMinimumNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleParameters) SetMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceAlbedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleParameters) SetReferenceAlbedo(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleParameters) StomataConductanceAlpha() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleParameters) SetStomataConductanceAlpha(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleParameters) SaturationBeta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleParameters) SetSaturationBeta(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleParameters) SetGrowthRespirationRedux(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleParameters) MaxCropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleParameters) SetMaxCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleParameters) SetGrowthRespirationParameter1(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleParameters) SetGrowthRespirationParameter2(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleParameters) Tortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleParameters) SetTortuosity(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleParameters) AdjustRootDepthForSoilProps() bool {
	return capnp.Struct(s).Bit(960)
}

func (s CropModuleParameters) SetAdjustRootDepthForSoilProps(v bool) {
	capnp.Struct(s).SetBit(960, v)
}

func (s CropModuleParameters) ExperimentalEnablePhenologyWangEngelTemperatureResponse() bool {
	return capnp.Struct(s).Bit(961)
}

func (s CropModuleParameters) SetExperimentalEnablePhenologyWangEngelTemperatureResponse(v bool) {
	capnp.Struct(s).SetBit(961, v)
}

func (s CropModuleParameters) ExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() bool {
	return capnp.Struct(s).Bit(962)
}

func (s CropModuleParameters) SetExperimentalEnablePhotosynthesisWangEngelTemperatureResponse(v bool) {
	capnp.Struct(s).SetBit(962, v)
}

func (s CropModuleParameters) ExperimentalEnableHourlyFvCBPhotosynthesis() bool {
	return capnp.Struct(s).Bit(963)
}

func (s CropModuleParameters) SetExperimentalEnableHourlyFvCBPhotosynthesis(v bool) {
	capnp.Struct(s).SetBit(963, v)
}

func (s CropModuleParameters) ExperimentalEnableTResponseLeafExpansion() bool {
	return capnp.Struct(s).Bit(964)
}

func (s CropModuleParameters) SetExperimentalEnableTResponseLeafExpansion(v bool) {
	capnp.Struct(s).SetBit(964, v)
}

func (s CropModuleParameters) ExperimentalDisableDailyRootBiomassToSoil() bool {
	return capnp.Struct(s).Bit(965)
}

func (s CropModuleParameters) SetExperimentalDisableDailyRootBiomassToSoil(v bool) {
	capnp.Struct(s).SetBit(965, v)
}

func (s CropModuleParameters) EnableVernalisationFactorFix() bool {
	return capnp.Struct(s).Bit(966)
}

func (s CropModuleParameters) SetEnableVernalisationFactorFix(v bool) {
	capnp.Struct(s).SetBit(966, v)
}

// CropModuleParameters_List is a list of CropModuleParameters.
type CropModuleParameters_List = capnp.StructList[CropModuleParameters]

// NewCropModuleParameters creates a new list of CropModuleParameters.
func NewCropModuleParameters_List(s *capnp.Segment, sz int32) (CropModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0}, sz)
	return capnp.StructList[CropModuleParameters](l), err
}

// CropModuleParameters_Future is a wrapper for a CropModuleParameters promised by a client call.
type CropModuleParameters_Future struct{ *capnp.Future }

func (f CropModuleParameters_Future) Struct() (CropModuleParameters, error) {
	p, err := f.Future.Ptr()
	return CropModuleParameters(p.Struct()), err
}

type SoilMoistureModuleParameters capnp.Struct

// SoilMoistureModuleParameters_TypeID is the unique identifier for the type SoilMoistureModuleParameters.
const SoilMoistureModuleParameters_TypeID = 0xcdff1b0306ea58cf

func NewSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters(st), err
}

func NewRootSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters(st), err
}

func ReadRootSoilMoistureModuleParameters(msg *capnp.Message) (SoilMoistureModuleParameters, error) {
	root, err := msg.Root()
	return SoilMoistureModuleParameters(root.Struct()), err
}

func (s SoilMoistureModuleParameters) String() string {
	str, _ := text.Marshal(0xcdff1b0306ea58cf, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleParameters {
	return SoilMoistureModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleParameters) CriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleParameters) SetCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SaturatedHydraulicConductivity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleParameters) SetSaturatedHydraulicConductivity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleParameters) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilMoistureModuleParameters) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleParameters) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowAccumulationTresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleParameters) SetSnowAccumulationTresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleParameters) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleParameters) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleParameters) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleParameters) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleParameters) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleParameters) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter1(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter2(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilMoistureModuleParameters) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleParameters) SetSnowMeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleParameters) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) EvaporationZeta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleParameters) SetEvaporationZeta(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) XsaCriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleParameters) SetXsaCriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaximumEvaporationImpactDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleParameters) SetMaximumEvaporationImpactDepth(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleParameters) SetMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MoistureInitValue() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleParameters) SetMoistureInitValue(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

// SoilMoistureModuleParameters_List is a list of SoilMoistureModuleParameters.
type SoilMoistureModuleParameters_List = capnp.StructList[SoilMoistureModuleParameters]

// NewSoilMoistureModuleParameters creates a new list of SoilMoistureModuleParameters.
func NewSoilMoistureModuleParameters_List(s *capnp.Segment, sz int32) (SoilMoistureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0}, sz)
	return capnp.StructList[SoilMoistureModuleParameters](l), err
}

// SoilMoistureModuleParameters_Future is a wrapper for a SoilMoistureModuleParameters promised by a client call.
type SoilMoistureModuleParameters_Future struct{ *capnp.Future }

func (f SoilMoistureModuleParameters_Future) Struct() (SoilMoistureModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleParameters(p.Struct()), err
}

type SoilOrganicModuleParameters capnp.Struct

// SoilOrganicModuleParameters_TypeID is the unique identifier for the type SoilOrganicModuleParameters.
const SoilOrganicModuleParameters_TypeID = 0xb3e73f8c19afd787

func NewSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters(st), err
}

func NewRootSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters(st), err
}

func ReadRootSoilOrganicModuleParameters(msg *capnp.Message) (SoilOrganicModuleParameters, error) {
	root, err := msg.Root()
	return SoilOrganicModuleParameters(root.Struct()), err
}

func (s SoilOrganicModuleParameters) String() string {
	str, _ := text.Marshal(0xb3e73f8c19afd787, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleParameters {
	return SoilOrganicModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleParameters) SomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SetSomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SetSomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SmbSlowMaintRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowMaintRateStandard(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastMaintRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastMaintRateStandard(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbSlowDeathRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowDeathRateStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastDeathRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastDeathRateStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetSmbUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetSomSlowUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetSomFastUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) AomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomSlowUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomFastUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastMaxCtoN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x408f400000000000)
}

func (s SoilOrganicModuleParameters) SetAomFastMaxCtoN(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x408f400000000000)
}

func (s SoilOrganicModuleParameters) PartSOMFastToSOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSOMFastToSOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBSlowToSOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBSlowToSOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBFastToSOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBFastToSOMFast(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) CnRatioSMB() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) SetCnRatioSMB(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) LimitClayEffect() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) SetLimitClayEffect(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) AmmoniaOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAmmoniaOxidationRateCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) NitriteOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetNitriteOxidationRateCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) TransportRateCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetTransportRateCoeff(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SpecAnaerobDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetSpecAnaerobDenitrification(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNO3(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNH4(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) Denit1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit1(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) Denit2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit2(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) Denit3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetDenit3(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) HydrolysisKM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) SetHydrolysisKM(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) ActivationEnergy() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232) ^ 0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) SetActivationEnergy(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v)^0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) HydrolysisP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240) ^ 0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP1(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v)^0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) HydrolysisP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248) ^ 0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP2(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v)^0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) AtmosphericResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256) ^ 0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetAtmosphericResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v)^0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) N2oProductionRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetN2oProductionRate(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) InhibitorNH3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272) ^ 0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) SetInhibitorNH3(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SticsParams() (SticsParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SticsParameters(p.Struct()), err
}

func (s SoilOrganicModuleParameters) HasSticsParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleParameters) SetSticsParams(v SticsParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSticsParams sets the sticsParams field to a newly
// allocated SticsParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleParameters) NewSticsParams() (SticsParameters, error) {
	ss, err := NewSticsParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SticsParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilOrganicModuleParameters_List is a list of SoilOrganicModuleParameters.
type SoilOrganicModuleParameters_List = capnp.StructList[SoilOrganicModuleParameters]

// NewSoilOrganicModuleParameters creates a new list of SoilOrganicModuleParameters.
func NewSoilOrganicModuleParameters_List(s *capnp.Segment, sz int32) (SoilOrganicModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1}, sz)
	return capnp.StructList[SoilOrganicModuleParameters](l), err
}

// SoilOrganicModuleParameters_Future is a wrapper for a SoilOrganicModuleParameters promised by a client call.
type SoilOrganicModuleParameters_Future struct{ *capnp.Future }

func (f SoilOrganicModuleParameters_Future) Struct() (SoilOrganicModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleParameters(p.Struct()), err
}
func (p SoilOrganicModuleParameters_Future) SticsParams() SticsParameters_Future {
	return SticsParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleParameters capnp.Struct

// SoilTemperatureModuleParameters_TypeID is the unique identifier for the type SoilTemperatureModuleParameters.
const SoilTemperatureModuleParameters_TypeID = 0xf0c41d021228d929

func NewSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters(st), err
}

func NewRootSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters(st), err
}

func ReadRootSoilTemperatureModuleParameters(msg *capnp.Message) (SoilTemperatureModuleParameters, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleParameters(root.Struct()), err
}

func (s SoilTemperatureModuleParameters) String() string {
	str, _ := text.Marshal(0xf0c41d021228d929, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleParameters {
	return SoilTemperatureModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleParameters) NTau() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleParameters) SetNTau(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) InitialSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTemperatureModuleParameters) SetInitialSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) BaseTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTemperatureModuleParameters) SetBaseTemperature(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) QuartzRawDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleParameters) SetQuartzRawDensity(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityAir() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTemperatureModuleParameters) SetDensityAir(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilTemperatureModuleParameters) SetDensityWater(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityHumus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilTemperatureModuleParameters) SetDensityHumus(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityAir() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityAir(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityQuartz() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityQuartz(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityWater(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityHumus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityHumus(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilAlbedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilTemperatureModuleParameters) SetSoilAlbedo(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3fd0000000000000)
}

func (s SoilTemperatureModuleParameters) SetSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3fd0000000000000)
}

// SoilTemperatureModuleParameters_List is a list of SoilTemperatureModuleParameters.
type SoilTemperatureModuleParameters_List = capnp.StructList[SoilTemperatureModuleParameters]

// NewSoilTemperatureModuleParameters creates a new list of SoilTemperatureModuleParameters.
func NewSoilTemperatureModuleParameters_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[SoilTemperatureModuleParameters](l), err
}

// SoilTemperatureModuleParameters_Future is a wrapper for a SoilTemperatureModuleParameters promised by a client call.
type SoilTemperatureModuleParameters_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleParameters_Future) Struct() (SoilTemperatureModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleParameters(p.Struct()), err
}

type SoilTransportModuleParameters capnp.Struct

// SoilTransportModuleParameters_TypeID is the unique identifier for the type SoilTransportModuleParameters.
const SoilTransportModuleParameters_TypeID = 0xc5cb65e585742338

func NewSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters(st), err
}

func NewRootSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters(st), err
}

func ReadRootSoilTransportModuleParameters(msg *capnp.Message) (SoilTransportModuleParameters, error) {
	root, err := msg.Root()
	return SoilTransportModuleParameters(root.Struct()), err
}

func (s SoilTransportModuleParameters) String() string {
	str, _ := text.Marshal(0xc5cb65e585742338, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleParameters {
	return SoilTransportModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleParameters) DispersionLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleParameters) SetDispersionLength(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) Ad() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleParameters) SetAd(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) DiffusionCoefficientStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleParameters) SetDiffusionCoefficientStandard(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) NDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleParameters) SetNDeposition(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

// SoilTransportModuleParameters_List is a list of SoilTransportModuleParameters.
type SoilTransportModuleParameters_List = capnp.StructList[SoilTransportModuleParameters]

// NewSoilTransportModuleParameters creates a new list of SoilTransportModuleParameters.
func NewSoilTransportModuleParameters_List(s *capnp.Segment, sz int32) (SoilTransportModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[SoilTransportModuleParameters](l), err
}

// SoilTransportModuleParameters_Future is a wrapper for a SoilTransportModuleParameters promised by a client call.
type SoilTransportModuleParameters_Future struct{ *capnp.Future }

func (f SoilTransportModuleParameters_Future) Struct() (SoilTransportModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleParameters(p.Struct()), err
}

type Voc capnp.Struct

// Voc_TypeID is the unique identifier for the type Voc.
const Voc_TypeID = 0xb87956e2953771db

func NewVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc(st), err
}

func NewRootVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc(st), err
}

func ReadRootVoc(msg *capnp.Message) (Voc, error) {
	root, err := msg.Root()
	return Voc(root.Struct()), err
}

func (s Voc) String() string {
	str, _ := text.Marshal(0xb87956e2953771db, capnp.Struct(s))
	return str
}

func (s Voc) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc) DecodeFromPtr(p capnp.Ptr) Voc {
	return Voc(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Voc_List is a list of Voc.
type Voc_List = capnp.StructList[Voc]

// NewVoc creates a new list of Voc.
func NewVoc_List(s *capnp.Segment, sz int32) (Voc_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Voc](l), err
}

// Voc_Future is a wrapper for a Voc promised by a client call.
type Voc_Future struct{ *capnp.Future }

func (f Voc_Future) Struct() (Voc, error) {
	p, err := f.Future.Ptr()
	return Voc(p.Struct()), err
}

type Voc_Emissions capnp.Struct

// Voc_Emissions_TypeID is the unique identifier for the type Voc_Emissions.
const Voc_Emissions_TypeID = 0xd9ed2c1c754d683e

func NewVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions(st), err
}

func NewRootVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions(st), err
}

func ReadRootVoc_Emissions(msg *capnp.Message) (Voc_Emissions, error) {
	root, err := msg.Root()
	return Voc_Emissions(root.Struct()), err
}

func (s Voc_Emissions) String() string {
	str, _ := text.Marshal(0xd9ed2c1c754d683e, capnp.Struct(s))
	return str
}

func (s Voc_Emissions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_Emissions) DecodeFromPtr(p capnp.Ptr) Voc_Emissions {
	return Voc_Emissions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_Emissions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_Emissions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_Emissions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_Emissions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_Emissions) SpeciesIdToIsopreneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Voc_Emissions_SpeciesIdToEmission_List(p.List()), err
}

func (s Voc_Emissions) HasSpeciesIdToIsopreneEmission() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Voc_Emissions) SetSpeciesIdToIsopreneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpeciesIdToIsopreneEmission sets the speciesIdToIsopreneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToIsopreneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Voc_Emissions) SpeciesIdToMonoterpeneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Voc_Emissions_SpeciesIdToEmission_List(p.List()), err
}

func (s Voc_Emissions) HasSpeciesIdToMonoterpeneEmission() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Voc_Emissions) SetSpeciesIdToMonoterpeneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSpeciesIdToMonoterpeneEmission sets the speciesIdToMonoterpeneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToMonoterpeneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Voc_Emissions) IsopreneEmission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_Emissions) SetIsopreneEmission(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_Emissions) MonoterpeneEmission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_Emissions) SetMonoterpeneEmission(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_List is a list of Voc_Emissions.
type Voc_Emissions_List = capnp.StructList[Voc_Emissions]

// NewVoc_Emissions creates a new list of Voc_Emissions.
func NewVoc_Emissions_List(s *capnp.Segment, sz int32) (Voc_Emissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Voc_Emissions](l), err
}

// Voc_Emissions_Future is a wrapper for a Voc_Emissions promised by a client call.
type Voc_Emissions_Future struct{ *capnp.Future }

func (f Voc_Emissions_Future) Struct() (Voc_Emissions, error) {
	p, err := f.Future.Ptr()
	return Voc_Emissions(p.Struct()), err
}

type Voc_Emissions_SpeciesIdToEmission capnp.Struct

// Voc_Emissions_SpeciesIdToEmission_TypeID is the unique identifier for the type Voc_Emissions_SpeciesIdToEmission.
const Voc_Emissions_SpeciesIdToEmission_TypeID = 0xd11f8d1479e2f010

func NewVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission(st), err
}

func NewRootVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission(st), err
}

func ReadRootVoc_Emissions_SpeciesIdToEmission(msg *capnp.Message) (Voc_Emissions_SpeciesIdToEmission, error) {
	root, err := msg.Root()
	return Voc_Emissions_SpeciesIdToEmission(root.Struct()), err
}

func (s Voc_Emissions_SpeciesIdToEmission) String() string {
	str, _ := text.Marshal(0xd11f8d1479e2f010, capnp.Struct(s))
	return str
}

func (s Voc_Emissions_SpeciesIdToEmission) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_Emissions_SpeciesIdToEmission) DecodeFromPtr(p capnp.Ptr) Voc_Emissions_SpeciesIdToEmission {
	return Voc_Emissions_SpeciesIdToEmission(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_Emissions_SpeciesIdToEmission) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_Emissions_SpeciesIdToEmission) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_Emissions_SpeciesIdToEmission) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_Emissions_SpeciesIdToEmission) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_Emissions_SpeciesIdToEmission) SpeciesId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Voc_Emissions_SpeciesIdToEmission) SetSpeciesId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Voc_Emissions_SpeciesIdToEmission) Emission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_Emissions_SpeciesIdToEmission) SetEmission(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_SpeciesIdToEmission_List is a list of Voc_Emissions_SpeciesIdToEmission.
type Voc_Emissions_SpeciesIdToEmission_List = capnp.StructList[Voc_Emissions_SpeciesIdToEmission]

// NewVoc_Emissions_SpeciesIdToEmission creates a new list of Voc_Emissions_SpeciesIdToEmission.
func NewVoc_Emissions_SpeciesIdToEmission_List(s *capnp.Segment, sz int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_Emissions_SpeciesIdToEmission](l), err
}

// Voc_Emissions_SpeciesIdToEmission_Future is a wrapper for a Voc_Emissions_SpeciesIdToEmission promised by a client call.
type Voc_Emissions_SpeciesIdToEmission_Future struct{ *capnp.Future }

func (f Voc_Emissions_SpeciesIdToEmission_Future) Struct() (Voc_Emissions_SpeciesIdToEmission, error) {
	p, err := f.Future.Ptr()
	return Voc_Emissions_SpeciesIdToEmission(p.Struct()), err
}

type Voc_SpeciesData capnp.Struct

// Voc_SpeciesData_TypeID is the unique identifier for the type Voc_SpeciesData.
const Voc_SpeciesData_TypeID = 0x80d5a7b782142e87

func NewVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData(st), err
}

func NewRootVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData(st), err
}

func ReadRootVoc_SpeciesData(msg *capnp.Message) (Voc_SpeciesData, error) {
	root, err := msg.Root()
	return Voc_SpeciesData(root.Struct()), err
}

func (s Voc_SpeciesData) String() string {
	str, _ := text.Marshal(0x80d5a7b782142e87, capnp.Struct(s))
	return str
}

func (s Voc_SpeciesData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_SpeciesData) DecodeFromPtr(p capnp.Ptr) Voc_SpeciesData {
	return Voc_SpeciesData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_SpeciesData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_SpeciesData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_SpeciesData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_SpeciesData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_SpeciesData) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Voc_SpeciesData) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Voc_SpeciesData) EfMonos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_SpeciesData) SetEfMonos(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_SpeciesData) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_SpeciesData) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_SpeciesData) Theta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x3feccccccccccccd)
}

func (s Voc_SpeciesData) SetTheta(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s Voc_SpeciesData) Fage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetFage(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) CtIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_SpeciesData) SetCtIs(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_SpeciesData) CtMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_SpeciesData) SetCtMt(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_SpeciesData) SetHaIs(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Voc_SpeciesData) SetHaMt(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Voc_SpeciesData) SetDsIs(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Voc_SpeciesData) SetDsMt(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Voc_SpeciesData) HdIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdIs(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) HdMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdMt(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) Hdj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x410adb0000000000)
}

func (s Voc_SpeciesData) SetHdj(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x410adb0000000000)
}

func (s Voc_SpeciesData) Sdj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x4085f80000000000)
}

func (s Voc_SpeciesData) SetSdj(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x4085f80000000000)
}

func (s Voc_SpeciesData) Kc25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x4070400000000000)
}

func (s Voc_SpeciesData) SetKc25(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x4070400000000000)
}

func (s Voc_SpeciesData) Ko25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x4066600000000000)
}

func (s Voc_SpeciesData) SetKo25(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x4066600000000000)
}

func (s Voc_SpeciesData) VcMax25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4054000000000000)
}

func (s Voc_SpeciesData) SetVcMax25(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4054000000000000)
}

func (s Voc_SpeciesData) Qjvc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x4000000000000000)
}

func (s Voc_SpeciesData) SetQjvc(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x4000000000000000)
}

func (s Voc_SpeciesData) Aekc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x40ecfb8000000000)
}

func (s Voc_SpeciesData) SetAekc(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x40ecfb8000000000)
}

func (s Voc_SpeciesData) Aeko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x40e18d8000000000)
}

func (s Voc_SpeciesData) SetAeko(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x40e18d8000000000)
}

func (s Voc_SpeciesData) Aejm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x40e2110000000000)
}

func (s Voc_SpeciesData) SetAejm(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x40e2110000000000)
}

func (s Voc_SpeciesData) Aevc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x40ec930000000000)
}

func (s Voc_SpeciesData) SetAevc(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x40ec930000000000)
}

func (s Voc_SpeciesData) SlaMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x4034000000000000)
}

func (s Voc_SpeciesData) SetSlaMin(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x4034000000000000)
}

func (s Voc_SpeciesData) ScaleI() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleI(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) ScaleM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleM(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) MFol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s Voc_SpeciesData) SetMFol(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s Voc_SpeciesData) Lai() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s Voc_SpeciesData) SetLai(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s Voc_SpeciesData) Sla() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s Voc_SpeciesData) SetSla(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

// Voc_SpeciesData_List is a list of Voc_SpeciesData.
type Voc_SpeciesData_List = capnp.StructList[Voc_SpeciesData]

// NewVoc_SpeciesData creates a new list of Voc_SpeciesData.
func NewVoc_SpeciesData_List(s *capnp.Segment, sz int32) (Voc_SpeciesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return capnp.StructList[Voc_SpeciesData](l), err
}

// Voc_SpeciesData_Future is a wrapper for a Voc_SpeciesData promised by a client call.
type Voc_SpeciesData_Future struct{ *capnp.Future }

func (f Voc_SpeciesData_Future) Struct() (Voc_SpeciesData, error) {
	p, err := f.Future.Ptr()
	return Voc_SpeciesData(p.Struct()), err
}

type Voc_CPData capnp.Struct

// Voc_CPData_TypeID is the unique identifier for the type Voc_CPData.
const Voc_CPData_TypeID = 0xcf0f425c8bd69fa2

func NewVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData(st), err
}

func NewRootVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData(st), err
}

func ReadRootVoc_CPData(msg *capnp.Message) (Voc_CPData, error) {
	root, err := msg.Root()
	return Voc_CPData(root.Struct()), err
}

func (s Voc_CPData) String() string {
	str, _ := text.Marshal(0xcf0f425c8bd69fa2, capnp.Struct(s))
	return str
}

func (s Voc_CPData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_CPData) DecodeFromPtr(p capnp.Ptr) Voc_CPData {
	return Voc_CPData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_CPData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_CPData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_CPData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_CPData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_CPData) Kc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_CPData) SetKc(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_CPData) Ko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_CPData) SetKo(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_CPData) Oi() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_CPData) SetOi(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_CPData) Ci() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_CPData) SetCi(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_CPData) Comp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Voc_CPData) SetComp(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Voc_CPData) VcMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Voc_CPData) SetVcMax(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Voc_CPData) JMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_CPData) SetJMax(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_CPData) Jj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_CPData) SetJj(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_CPData) Jj1000() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_CPData) SetJj1000(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Voc_CPData) Jv() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Voc_CPData) SetJv(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

// Voc_CPData_List is a list of Voc_CPData.
type Voc_CPData_List = capnp.StructList[Voc_CPData]

// NewVoc_CPData creates a new list of Voc_CPData.
func NewVoc_CPData_List(s *capnp.Segment, sz int32) (Voc_CPData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0}, sz)
	return capnp.StructList[Voc_CPData](l), err
}

// Voc_CPData_Future is a wrapper for a Voc_CPData promised by a client call.
type Voc_CPData_Future struct{ *capnp.Future }

func (f Voc_CPData_Future) Struct() (Voc_CPData, error) {
	p, err := f.Future.Ptr()
	return Voc_CPData(p.Struct()), err
}

type Voc_MicroClimateData capnp.Struct

// Voc_MicroClimateData_TypeID is the unique identifier for the type Voc_MicroClimateData.
const Voc_MicroClimateData_TypeID = 0xf246442c7aee0af5

func NewVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData(st), err
}

func NewRootVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData(st), err
}

func ReadRootVoc_MicroClimateData(msg *capnp.Message) (Voc_MicroClimateData, error) {
	root, err := msg.Root()
	return Voc_MicroClimateData(root.Struct()), err
}

func (s Voc_MicroClimateData) String() string {
	str, _ := text.Marshal(0xf246442c7aee0af5, capnp.Struct(s))
	return str
}

func (s Voc_MicroClimateData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_MicroClimateData) DecodeFromPtr(p capnp.Ptr) Voc_MicroClimateData {
	return Voc_MicroClimateData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_MicroClimateData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_MicroClimateData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_MicroClimateData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_MicroClimateData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_MicroClimateData) Rad() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_MicroClimateData) SetRad(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_MicroClimateData) SetRad24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_MicroClimateData) SetRad240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_MicroClimateData) SetTFol(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Voc_MicroClimateData) SetTFol24(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Voc_MicroClimateData) SetTFol240(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction24(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Co2concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_MicroClimateData) SetCo2concentration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

// Voc_MicroClimateData_List is a list of Voc_MicroClimateData.
type Voc_MicroClimateData_List = capnp.StructList[Voc_MicroClimateData]

// NewVoc_MicroClimateData creates a new list of Voc_MicroClimateData.
func NewVoc_MicroClimateData_List(s *capnp.Segment, sz int32) (Voc_MicroClimateData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0}, sz)
	return capnp.StructList[Voc_MicroClimateData](l), err
}

// Voc_MicroClimateData_Future is a wrapper for a Voc_MicroClimateData promised by a client call.
type Voc_MicroClimateData_Future struct{ *capnp.Future }

func (f Voc_MicroClimateData_Future) Struct() (Voc_MicroClimateData, error) {
	p, err := f.Future.Ptr()
	return Voc_MicroClimateData(p.Struct()), err
}

type Voc_PhotosynthT capnp.Struct

// Voc_PhotosynthT_TypeID is the unique identifier for the type Voc_PhotosynthT.
const Voc_PhotosynthT_TypeID = 0xf95db11410e33efc

func NewVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT(st), err
}

func NewRootVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT(st), err
}

func ReadRootVoc_PhotosynthT(msg *capnp.Message) (Voc_PhotosynthT, error) {
	root, err := msg.Root()
	return Voc_PhotosynthT(root.Struct()), err
}

func (s Voc_PhotosynthT) String() string {
	str, _ := text.Marshal(0xf95db11410e33efc, capnp.Struct(s))
	return str
}

func (s Voc_PhotosynthT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_PhotosynthT) DecodeFromPtr(p capnp.Ptr) Voc_PhotosynthT {
	return Voc_PhotosynthT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_PhotosynthT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_PhotosynthT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_PhotosynthT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_PhotosynthT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_PhotosynthT) Par() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_PhotosynthT) SetPar(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_PhotosynthT) SetPar24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_PhotosynthT) SetPar240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Voc_PhotosynthT_List is a list of Voc_PhotosynthT.
type Voc_PhotosynthT_List = capnp.StructList[Voc_PhotosynthT]

// NewVoc_PhotosynthT creates a new list of Voc_PhotosynthT.
func NewVoc_PhotosynthT_List(s *capnp.Segment, sz int32) (Voc_PhotosynthT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Voc_PhotosynthT](l), err
}

// Voc_PhotosynthT_Future is a wrapper for a Voc_PhotosynthT promised by a client call.
type Voc_PhotosynthT_Future struct{ *capnp.Future }

func (f Voc_PhotosynthT_Future) Struct() (Voc_PhotosynthT, error) {
	p, err := f.Future.Ptr()
	return Voc_PhotosynthT(p.Struct()), err
}

type Voc_FoliageT capnp.Struct

// Voc_FoliageT_TypeID is the unique identifier for the type Voc_FoliageT.
const Voc_FoliageT_TypeID = 0xee0b04cc3f52f33c

func NewVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT(st), err
}

func NewRootVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT(st), err
}

func ReadRootVoc_FoliageT(msg *capnp.Message) (Voc_FoliageT, error) {
	root, err := msg.Root()
	return Voc_FoliageT(root.Struct()), err
}

func (s Voc_FoliageT) String() string {
	str, _ := text.Marshal(0xee0b04cc3f52f33c, capnp.Struct(s))
	return str
}

func (s Voc_FoliageT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_FoliageT) DecodeFromPtr(p capnp.Ptr) Voc_FoliageT {
	return Voc_FoliageT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_FoliageT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_FoliageT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_FoliageT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_FoliageT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_FoliageT) TempK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_FoliageT) SetTempK(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_FoliageT) SetTempK24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_FoliageT) SetTempK240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Voc_FoliageT_List is a list of Voc_FoliageT.
type Voc_FoliageT_List = capnp.StructList[Voc_FoliageT]

// NewVoc_FoliageT creates a new list of Voc_FoliageT.
func NewVoc_FoliageT_List(s *capnp.Segment, sz int32) (Voc_FoliageT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Voc_FoliageT](l), err
}

// Voc_FoliageT_Future is a wrapper for a Voc_FoliageT promised by a client call.
type Voc_FoliageT_Future struct{ *capnp.Future }

func (f Voc_FoliageT_Future) Struct() (Voc_FoliageT, error) {
	p, err := f.Future.Ptr()
	return Voc_FoliageT(p.Struct()), err
}

type Voc_EnzymeActivityT capnp.Struct

// Voc_EnzymeActivityT_TypeID is the unique identifier for the type Voc_EnzymeActivityT.
const Voc_EnzymeActivityT_TypeID = 0xc281c6e5be483337

func NewVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT(st), err
}

func NewRootVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT(st), err
}

func ReadRootVoc_EnzymeActivityT(msg *capnp.Message) (Voc_EnzymeActivityT, error) {
	root, err := msg.Root()
	return Voc_EnzymeActivityT(root.Struct()), err
}

func (s Voc_EnzymeActivityT) String() string {
	str, _ := text.Marshal(0xc281c6e5be483337, capnp.Struct(s))
	return str
}

func (s Voc_EnzymeActivityT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_EnzymeActivityT) DecodeFromPtr(p capnp.Ptr) Voc_EnzymeActivityT {
	return Voc_EnzymeActivityT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_EnzymeActivityT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_EnzymeActivityT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_EnzymeActivityT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_EnzymeActivityT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_EnzymeActivityT) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_EnzymeActivityT) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_EnzymeActivityT) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_EnzymeActivityT) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_EnzymeActivityT_List is a list of Voc_EnzymeActivityT.
type Voc_EnzymeActivityT_List = capnp.StructList[Voc_EnzymeActivityT]

// NewVoc_EnzymeActivityT creates a new list of Voc_EnzymeActivityT.
func NewVoc_EnzymeActivityT_List(s *capnp.Segment, sz int32) (Voc_EnzymeActivityT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_EnzymeActivityT](l), err
}

// Voc_EnzymeActivityT_Future is a wrapper for a Voc_EnzymeActivityT promised by a client call.
type Voc_EnzymeActivityT_Future struct{ *capnp.Future }

func (f Voc_EnzymeActivityT_Future) Struct() (Voc_EnzymeActivityT, error) {
	p, err := f.Future.Ptr()
	return Voc_EnzymeActivityT(p.Struct()), err
}

type Voc_LeafEmissionT capnp.Struct

// Voc_LeafEmissionT_TypeID is the unique identifier for the type Voc_LeafEmissionT.
const Voc_LeafEmissionT_TypeID = 0xe82d760b257daddb

func NewVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT(st), err
}

func NewRootVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT(st), err
}

func ReadRootVoc_LeafEmissionT(msg *capnp.Message) (Voc_LeafEmissionT, error) {
	root, err := msg.Root()
	return Voc_LeafEmissionT(root.Struct()), err
}

func (s Voc_LeafEmissionT) String() string {
	str, _ := text.Marshal(0xe82d760b257daddb, capnp.Struct(s))
	return str
}

func (s Voc_LeafEmissionT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_LeafEmissionT) DecodeFromPtr(p capnp.Ptr) Voc_LeafEmissionT {
	return Voc_LeafEmissionT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_LeafEmissionT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_LeafEmissionT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_LeafEmissionT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_LeafEmissionT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_LeafEmissionT) FoliageLayer() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Voc_LeafEmissionT) SetFoliageLayer(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Voc_LeafEmissionT) Pho() (Voc_PhotosynthT, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Voc_PhotosynthT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasPho() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Voc_LeafEmissionT) SetPho(v Voc_PhotosynthT) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPho sets the pho field to a newly
// allocated Voc_PhotosynthT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewPho() (Voc_PhotosynthT, error) {
	ss, err := NewVoc_PhotosynthT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_PhotosynthT{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) Fol() (Voc_FoliageT, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Voc_FoliageT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasFol() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Voc_LeafEmissionT) SetFol(v Voc_FoliageT) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewFol sets the fol field to a newly
// allocated Voc_FoliageT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewFol() (Voc_FoliageT, error) {
	ss, err := NewVoc_FoliageT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_FoliageT{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) EnzAct() (Voc_EnzymeActivityT, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Voc_EnzymeActivityT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasEnzAct() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Voc_LeafEmissionT) SetEnzAct(v Voc_EnzymeActivityT) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEnzAct sets the enzAct field to a newly
// allocated Voc_EnzymeActivityT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewEnzAct() (Voc_EnzymeActivityT, error) {
	ss, err := NewVoc_EnzymeActivityT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_EnzymeActivityT{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Voc_LeafEmissionT_List is a list of Voc_LeafEmissionT.
type Voc_LeafEmissionT_List = capnp.StructList[Voc_LeafEmissionT]

// NewVoc_LeafEmissionT creates a new list of Voc_LeafEmissionT.
func NewVoc_LeafEmissionT_List(s *capnp.Segment, sz int32) (Voc_LeafEmissionT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Voc_LeafEmissionT](l), err
}

// Voc_LeafEmissionT_Future is a wrapper for a Voc_LeafEmissionT promised by a client call.
type Voc_LeafEmissionT_Future struct{ *capnp.Future }

func (f Voc_LeafEmissionT_Future) Struct() (Voc_LeafEmissionT, error) {
	p, err := f.Future.Ptr()
	return Voc_LeafEmissionT(p.Struct()), err
}
func (p Voc_LeafEmissionT_Future) Pho() Voc_PhotosynthT_Future {
	return Voc_PhotosynthT_Future{Future: p.Future.Field(0, nil)}
}
func (p Voc_LeafEmissionT_Future) Fol() Voc_FoliageT_Future {
	return Voc_FoliageT_Future{Future: p.Future.Field(1, nil)}
}
func (p Voc_LeafEmissionT_Future) EnzAct() Voc_EnzymeActivityT_Future {
	return Voc_EnzymeActivityT_Future{Future: p.Future.Field(2, nil)}
}

type Voc_LeafEmissions capnp.Struct

// Voc_LeafEmissions_TypeID is the unique identifier for the type Voc_LeafEmissions.
const Voc_LeafEmissions_TypeID = 0xc8aeb5222ac5ef40

func NewVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions(st), err
}

func NewRootVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions(st), err
}

func ReadRootVoc_LeafEmissions(msg *capnp.Message) (Voc_LeafEmissions, error) {
	root, err := msg.Root()
	return Voc_LeafEmissions(root.Struct()), err
}

func (s Voc_LeafEmissions) String() string {
	str, _ := text.Marshal(0xc8aeb5222ac5ef40, capnp.Struct(s))
	return str
}

func (s Voc_LeafEmissions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_LeafEmissions) DecodeFromPtr(p capnp.Ptr) Voc_LeafEmissions {
	return Voc_LeafEmissions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_LeafEmissions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_LeafEmissions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_LeafEmissions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_LeafEmissions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_LeafEmissions) Isoprene() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_LeafEmissions) SetIsoprene(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_LeafEmissions) Monoterp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_LeafEmissions) SetMonoterp(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_LeafEmissions_List is a list of Voc_LeafEmissions.
type Voc_LeafEmissions_List = capnp.StructList[Voc_LeafEmissions]

// NewVoc_LeafEmissions creates a new list of Voc_LeafEmissions.
func NewVoc_LeafEmissions_List(s *capnp.Segment, sz int32) (Voc_LeafEmissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_LeafEmissions](l), err
}

// Voc_LeafEmissions_Future is a wrapper for a Voc_LeafEmissions promised by a client call.
type Voc_LeafEmissions_Future struct{ *capnp.Future }

func (f Voc_LeafEmissions_Future) Struct() (Voc_LeafEmissions, error) {
	p, err := f.Future.Ptr()
	return Voc_LeafEmissions(p.Struct()), err
}

type SticsParameters capnp.Struct

// SticsParameters_TypeID is the unique identifier for the type SticsParameters.
const SticsParameters_TypeID = 0xce5b0091fd9acb21

func NewSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters(st), err
}

func NewRootSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters(st), err
}

func ReadRootSticsParameters(msg *capnp.Message) (SticsParameters, error) {
	root, err := msg.Root()
	return SticsParameters(root.Struct()), err
}

func (s SticsParameters) String() string {
	str, _ := text.Marshal(0xce5b0091fd9acb21, capnp.Struct(s))
	return str
}

func (s SticsParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SticsParameters) DecodeFromPtr(p capnp.Ptr) SticsParameters {
	return SticsParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SticsParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SticsParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SticsParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SticsParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SticsParameters) UseN2O() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SticsParameters) SetUseN2O(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s SticsParameters) UseNit() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SticsParameters) SetUseNit(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SticsParameters) UseDenit() bool {
	return capnp.Struct(s).Bit(2)
}

func (s SticsParameters) SetUseDenit(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s SticsParameters) CodeVnit() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 1
}

func (s SticsParameters) SetCodeVnit(v uint8) {
	capnp.Struct(s).SetUint8(1, v^1)
}

func (s SticsParameters) CodeTnit() uint8 {
	return capnp.Struct(s).Uint8(2) ^ 2
}

func (s SticsParameters) SetCodeTnit(v uint8) {
	capnp.Struct(s).SetUint8(2, v^2)
}

func (s SticsParameters) CodeRationit() uint8 {
	return capnp.Struct(s).Uint8(3) ^ 2
}

func (s SticsParameters) SetCodeRationit(v uint8) {
	capnp.Struct(s).SetUint8(3, v^2)
}

func (s SticsParameters) CodeHourlyWfpsNit() uint8 {
	return capnp.Struct(s).Uint8(4) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsNit(v uint8) {
	capnp.Struct(s).SetUint8(4, v^2)
}

func (s SticsParameters) CodePdenit() uint8 {
	return capnp.Struct(s).Uint8(5) ^ 1
}

func (s SticsParameters) SetCodePdenit(v uint8) {
	capnp.Struct(s).SetUint8(5, v^1)
}

func (s SticsParameters) CodeRatiodenit() uint8 {
	return capnp.Struct(s).Uint8(6) ^ 2
}

func (s SticsParameters) SetCodeRatiodenit(v uint8) {
	capnp.Struct(s).SetUint8(6, v^2)
}

func (s SticsParameters) CodeHourlyWfpsDenit() uint8 {
	return capnp.Struct(s).Uint8(7) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsDenit(v uint8) {
	capnp.Struct(s).SetUint8(7, v^2)
}

func (s SticsParameters) Hminn() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fd3333333333333)
}

func (s SticsParameters) SetHminn(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SticsParameters) Hoptn() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x3feccccccccccccd)
}

func (s SticsParameters) SetHoptn(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SticsParameters) PHminnit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4010000000000000)
}

func (s SticsParameters) SetPHminnit(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4010000000000000)
}

func (s SticsParameters) PHmaxnit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHmaxnit(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) Nh4Min() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetNh4Min(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) PHminden() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHminden(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) PHmaxden() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4022666666666666)
}

func (s SticsParameters) SetPHmaxden(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4022666666666666)
}

func (s SticsParameters) Wfpsc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) SetWfpsc(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) TdenitoptGauss() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x4047800000000000)
}

func (s SticsParameters) SetTdenitoptGauss(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x4047800000000000)
}

func (s SticsParameters) ScaleTdenitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x4039000000000000)
}

func (s SticsParameters) SetScaleTdenitopt(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x4039000000000000)
}

func (s SticsParameters) Kd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x4062800000000000)
}

func (s SticsParameters) SetKd(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x4062800000000000)
}

func (s SticsParameters) KDesat() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x4008000000000000)
}

func (s SticsParameters) SetKDesat(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x4008000000000000)
}

func (s SticsParameters) Fnx() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3fe999999999999a)
}

func (s SticsParameters) SetFnx(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SticsParameters) Vnitmax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x403b4ccccccccccd)
}

func (s SticsParameters) SetVnitmax(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x403b4ccccccccccd)
}

func (s SticsParameters) Kamm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x4038000000000000)
}

func (s SticsParameters) SetKamm(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x4038000000000000)
}

func (s SticsParameters) Tnitmin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x4014000000000000)
}

func (s SticsParameters) SetTnitmin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x4014000000000000)
}

func (s SticsParameters) Tnitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x403e000000000000)
}

func (s SticsParameters) SetTnitopt(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x403e000000000000)
}

func (s SticsParameters) Tnitop2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4041800000000000)
}

func (s SticsParameters) SetTnitop2(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4041800000000000)
}

func (s SticsParameters) Tnitmax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x404d000000000000)
}

func (s SticsParameters) SetTnitmax(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x404d000000000000)
}

func (s SticsParameters) TnitoptGauss() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x4040400000000000)
}

func (s SticsParameters) SetTnitoptGauss(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x4040400000000000)
}

func (s SticsParameters) ScaleTnitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x4030000000000000)
}

func (s SticsParameters) SetScaleTnitopt(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x4030000000000000)
}

func (s SticsParameters) Rationit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3f5a36e2eb1c432d)
}

func (s SticsParameters) SetRationit(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3f5a36e2eb1c432d)
}

func (s SticsParameters) CminPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetCminPdenit(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) CmaxPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x4018000000000000)
}

func (s SticsParameters) SetCmaxPdenit(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x4018000000000000)
}

func (s SticsParameters) MinPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetMinPdenit(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) MaxPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x4034000000000000)
}

func (s SticsParameters) SetMaxPdenit(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Ratiodenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3fc999999999999a)
}

func (s SticsParameters) SetRatiodenit(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SticsParameters) Profdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4034000000000000)
}

func (s SticsParameters) SetProfdenit(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Vpotdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232) ^ 0x4000000000000000)
}

func (s SticsParameters) SetVpotdenit(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v)^0x4000000000000000)
}

// SticsParameters_List is a list of SticsParameters.
type SticsParameters_List = capnp.StructList[SticsParameters]

// NewSticsParameters creates a new list of SticsParameters.
func NewSticsParameters_List(s *capnp.Segment, sz int32) (SticsParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return capnp.StructList[SticsParameters](l), err
}

// SticsParameters_Future is a wrapper for a SticsParameters promised by a client call.
type SticsParameters_Future struct{ *capnp.Future }

func (f SticsParameters_Future) Struct() (SticsParameters, error) {
	p, err := f.Future.Ptr()
	return SticsParameters(p.Struct()), err
}

const schema_eef9ddc7a345de6d = "x\xda\x9c\x9c}\x9c\x14\xe5\x9d\xe0\x9f_U\xbf\xcc\xf0" +
	"bOS\x8d\x02\x82#8D `\xe6\x05\xa3r\x90" +
	"\x9eafp\xc6L\x0f\xd3\xd3\x03\xa2\xc1]j\xba\x9f" +
	"\x99.\xa8\xaej\xaa\xaba\x9a#\x07z\xf2Ytu" +
	"Ws\xb8QO\xef\x8ckn5\x87Y\xe2\xe9\x1df" +
	"u\x17=I\xf4\x16w\x8d\xab\x1bL\xcc.\xba\xba\xab" +
	"\xae\xc9\x81\xab\x1b\xcdj\xfa>\xbf_\xbd=\xdd4\x88" +
	"\xc7?L\x7f\x9f_=\xf5\xd4S\xcf\xcb\xef\xed\xa9\xf6" +
	"\xf9\x0b\xbaC\x1d3\xbf=\x8bI\xe9\xe3\xe1H\xf5\xf7" +
	".K\xdc\xf4\xbf\xfe\xe4\xd5\xbd,\xbd\x18.\xaa\xfe|" +
	"\xfb\x15w\xbd\xb9\xb1r\x98\x85\xa2\x8cuu4\xdf\x0a" +
	"\xca`3\xfe\xd9\xdf\xfc\xed\x08\x83\xea\xafw,8\xf4" +
	"\xab\xea\xe1\x1bY\xba\x1f\xa0\xba\xf4\xbc\xf8\x90\xbe\xa2\xf9" +
	"\x19\x16\x06\x12o\xb9UR\xaek\x892\xa6lh\xd9" +
	"\xc9\xa0\xfa\x93S\x07\xbe\xb2\xfc\xf5;of\xf1\x85P" +
	"-\xfc]\xff\x1f\xff\xf8\x17\x9f\xfc\x8a\x85e\x14\xfeA" +
	"\xcb\x0fAy\x81\x84\x8f\xb6\xfc)\x83\xea\x1f\xe5W'" +
	"v\x9d\xbac?K/\x04I\x90\xa6\xaa\xd5\xf8o@" +
	"\xf9f\x1c\xa5+q\x94\xce?\xb3\x7f\xeec\x7f}\xf4" +
	"\xd6\xba\xaa%\x14\x9e=\xeb&P\x96\xceB\xe1\xc5\xb3" +
	"\xb0\x1d\xa1\xff\xf9\x1f\xff\xfc\x83\xd7\xa7\xdf\xc3\xe2\xab\xa5" +
	"_/\xf9\xd7g\x9fn\xfb\xf5Q\x06]\xb7\xccZ+" +
	")\x8f\x90\xdcwg]\xc1\xa0\xba\xe1\xfe\xd6\xbc\xbda" +
	"\xfd\x9f4\xaa\xf4\xd1Y\xa3\xa0<C\xc2OS\xa5\xbf" +
	"\xf7\xd3?\x9d{[\xf2\x9f\xfe\x07\xb6\xb7\xad\xbe\xbd\x0b" +
	"\x95\xf7@Y\xa3\xe0\x9fW)\xadM\x0c\xaa\xff\xfa\xb5" +
	"\x1f\x1e~\xe5\x8a\x85\x8f\xa3xK\xbd\xf8g\xf3o\x02" +
	"%\xbe\x00\xff\x9c\xb9\xe0/d\x06\xd5\xfb~w\xdd\xa9" +
	"\x97\xff\xec\x9e'P|Z\xbd\xf8\x9a\x857\x81\x92^" +
	"\x88\x7f\xa6\x16\x9a\x12\x83\xe0\xbd\xd5\xb4\x9c^\xe2\xdc\xb6" +
	"e\xa0,m\xfb6\x93\xab\xd3\xfe\xfc\xa1\xdd\x97^S" +
	"=\x82\x956\xd7?\xe0]m?\x04\xe5\xd1\xb6\x0b\x18" +
	"\xebz\xb2\xedO\xb0R\xff\xf5\xa6\x17\x02\xd4\xb7\xe1\xe8" +
	"\xa5\xcb$\xe5\xedK/`L9u)\xf6\xc7\x15]" +
	"\x03\x7f\xfe\xf6\x8fn|\x16\x07\x92T7\x90\x0aK\xbe" +
	"\x07\xca\xbe%\xd8y7.A\xe1+/\xb1\xf7\xbd\xcd" +
	"\xff\xf2(V\x1d\xaak\xf0/\x96\xfc\x06\x94OH\xf8" +
	"\xa3%\xff\xc4\xc0{c\xb5\xad \xd17\x96\xbe\x09\xca" +
	"gK\xb1\x11\xcd\xcb\xb0\xde\xee\xff{t\xd9\xa2'\xbe" +
	"\xff|\xa3Fl_v/(\xb7,\xc3z\xf7\x91\xf0" +
	"_oz/\"_X}\x11\x1b1\xa7\xae\xe6w\x97" +
	"}\x00J\xf8\xcb\xf8'|\xf9\xea0\x83\xbf_\xf8\x97" +
	"\xf7~v\xe77\xfe*\xbd\x10.\xaa\x93\xdd\xd0q+" +
	"(\x85\x0e\xfcS\xeb\xf8C|\xd9\x0f\xfe\xd7\xbf\xfd\xfd" +
	"\xcdkc\x7f\x8d\xcd\x98V\xd7\x8c\xd7V\x8d\x83\xf2\xcb" +
	"Ut\x93UW`?\xb7\x9c|\xb3\x92\xb8\xbd\xf5'" +
	",\xfd\x15\x90\xaa_\xcb\xa7\xca\xf3\x97\xff\xf25Gz" +
	"\xf1\x9ay\x92\xd2\xbf\x06\x1b\xdd\xb3\x06\x1b\xfd\xfb\xc6\x9c" +
	"?\xfa\xf1\xef\xbd\xfa26z\xa9\xf0R\xa6\xa1\xf4w" +
	"\xd7\xdc\x0b\xca\xd3(\xdd\xf5\xe4\x9a\xd8\x0c\x06Am\xb5" +
	"\x1d\xe2\xbc\xf2;\x87v\x81\xf2\xdd!\xec\xbe'\x86\xfe" +
	"\x89Au\xf8\xb7\x7f7s~\xfbo\x7f\x8e\x95\xcbu" +
	"O\xf9\x93\xd4M\xa0\xbc\x9d\xc2\x96\xbc\x91\xc2)8\xe7" +
	"\xd1'\xba\x7f\xb4\xa3\xfcw\x8d\x84o\x1c\xfe\x19(\xf7" +
	"\x0f\xa3\xf0=\xc3(\xfc\xb3\xcc\xec\xef\xbf\xf6\xd2\xdf\xbe" +
	"U7\xfcI\xf8\xf2\xf5\x8f\x81\x92Z\x8f\x7f\x0e\xae\xff" +
	"i\x88A\xf5\xaf\xee\xfbl\xc3\x81\xde\xdb\xff\x91\xa5\xaf" +
	"\x00)\x18\xb6$\xadm\x98')\xb7l\xa0\xd7\xb8\x01" +
	"{\xe4\xe7\x8f~s\xf1\xf4\x1d+\xde\xc1G\x14f\x82" +
	"\xb3\xcc\xbc\xb1\xe1^P>!\xe9\x8f6\xe0#>\xfb" +
	"\xd9\x9c+\x9a\xbe\xfa\xad\xf7\x1a\xb5\xfa\xc5\x8d\x0f\x82\xf2" +
	"\xf6Fz\xc4\x8d\xd8\xea\xd5\xff2\x9a<\x16\x9a\xfe+" +
	"\xacZ\xae{\x8f7^k\x81r\xd7\xb5(|\xe7\xb5" +
	"(\xbc\xf4\xb5%\xb3\xa4\x05\xcf\x9d\xc4\x9ag\xd6\xd5\xbc" +
	"b\xd34IIm\xa2G\xdc\xf4\xf7\xf8\xd2\xff\xf3\x9e" +
	"\xff~\xd5e\xa7\"\x1f\xa0\xf4\xf9\xc2{\x8c\xd1\x8b\xf9" +
	"\xc6\x83\xa0<\xf2\x0dz\xa5\xdf\xa0\x11\xf5\xd1\xb4_\xed" +
	"Z\xde\xb7\xee\x03lIs]K\x1e\x9dx\x0c\x94\xa3" +
	"\x13\xf8\xe73\x13U`P\xfd\xf4k\xff\xd0\x92\xf8\xc1" +
	"\x0d\x9f4j\xf7k\xf9[A9\x95\xc7v\xff2\x8f" +
	"\xed\xbea\xeb\xec\x1f\x7f7v\xb0Z\xbf\xf0\x86Qz" +
	"\x9f\xf6\x18(\xf7k\xf8\xe7=\xda\xafe\xf6r\xb5`" +
	"\xe6\xb8\xfe\x95\x82\x196\xb4\xac\xfa\x95\x82\x89\xff\xfdn" +
	"Q\xb5\xd4B\xe9\xb2\xacZ4\x8a\xab6\x9a\xd9\xcb2" +
	"E\x9e\xd5x\xa9O\xb5U\xc6F\x00\xd2Sr\x88\xb1" +
	"\x100\xa6\\%\xcfc,\xb3R\x96!\xd3-K\x10" +
	"\x07H\x00\xf25\xf2Z\xc62W\"\xefC.I\x09" +
	"\x90p\xdc\xcb\xab\x18\xcb\xacF>\x80\\\x96\x13 3" +
	"\xa6\xf4\xcb\x9d\x8ce\xba\x91\x0f!\x0f\x85\x12\x10\x02P" +
	"\x06\x89\xf7!\x1fA\x1e\x0e' \x0c\xa0\xa4\xe4e\x8c" +
	"e\x06\x90\x8f!\x8fD\x12\x10aLI\x13\x1fB\xbe" +
	"\x09y4\x9a\x00\xda\xc3\x88\x8f \xdf\x8c\xbc\xa9)\x01" +
	"M\x8c)\xd7\x11\x1fC\xbe\x05yss\x02\x9a\x19S" +
	"n \xbe\x09y\x0e\xf9\xb4i\x09\x98\xc6\x98\xa2\x12\xdf" +
	"\x8c<\x8f|\xfa\xf4\x04LgL\xe1\xc4\xb7 \xd7\x91" +
	"\xcf\x98\x91\x80\x19\x00\x8aF<\x87\xbc\x88|\xe6\xcc\x04" +
	"\xcc\x04P\x0a\xc4\xf3\xc8m\xe4\xe7\x9d\x97\x80\xf3\x00\x94" +
	"\xed\xf2\"\xc62:\xf2)\xe4\xb1X\x02b\x00J\x99" +
	"x\x11\xf9n\xe4--\x09h\x01P*T\x8f\x8d|" +
	"/\xf2x<\x81/A\xf9&\xf1)\xe47#\x9f5" +
	"+\x01\xb3\x00\x94\x1b\xe9\xbd\xecF\xbe\x1f\xb9\xa2$@" +
	"\x01P\xf6\x91\xfc^\xe4\xb7!O$\x12\xf8&\x95[" +
	"\x88\xdf\x8c\xfc\x0e\xe4\xb3g'`6\x80r;\xf1\xfd" +
	"\xc8\x0f ?\xff\xfc\x04\x9c\x0f\xa0\xdcI\xfc6\xe4w" +
	"#\xbf\xe0\x82\x04\\\x00\xa0\xdcE\xfc\x0e\xe4\xf7!\x9f" +
	"3'\x01s\x00\x94{h<\x1c@\xfe\x00\xf2\xb9s" +
	"\x130\x17@\xb9\x9f\xf8\xdd\xc8\x1fB>o^\x02\xe6" +
	"\x01(\xdf!~\x1f\xf2\x87\x91_xa\x02.\xc4=" +
	"\x9f\xea\x7f\x00\xf9A\xe4\xf3\xe7'`>c\xca#\xd4" +
	"o\x0f!?\x84|\xc1\x82\x04,`Ly\x94\xf8\xc3" +
	"\xc8\x1f\x97%\x90\xb5\x1c43\x09\x9a\x19\xec\xe1\x13)" +
	"\xd30K0\x9dI0\x9dA\xd2\xf9\xed\xfdl\xe5\x13" +
	"\x83\xa5\xe0\x97\x9d\xe7\xb6\xea\xfc\xaa\xbex\x0c\xff\xbd\x9f" +
	"d\x8c\xc5&\xd4I\xee\xe0#'\x93\x8c\xc5\xb2\xf6\xa0" +
	"_c,k\xa7l\xffG^\x15J\xf2\xaaP\x92+" +
	"\x09%\xb9\x92xM\xce+9y\xe2w\xe2=\x8c\xc5" +
	"\xf29\xaf\xd8%\xd1|n\xab\x03N\xfc|\x1a\xfe." +
	"\xf9\xbf?\xde\xd7\xcdXl[\xb6\xf3r\x17t\x17\x09" +
	"\x98>\xd82\xd1\xcd\xd8\x9e\x1d\xd9\x94:\xe5\xb1#c" +
	"(\xb3}\xeb\x8e\xac\xf3{/\xfeT\xf96\xf7\xe7\xc9" +
	"\xbd\xff\xf6\xbeKL\x8f\xdc\xfe\x86C\xb6\x16\xdcj\xe3" +
	"o:\xc0\xab\xe3\xc4\x7f\xc2k\x92%]Mi\x86{" +
	"\x9b\x95D\xb2\xaa\xce\x07\x85\xfesHJ\xec\xd1\xc2:" +
	"S\xf7:$\xaa\xab\x9a\xffwIW\xbd\xbf\xfd\xf5\xad" +
	"\xf9\x8c\xeb[\x8a\xab\xa5\xb2\xc5sW[f\xd9\xc8\xed" +
	"Tmn\x8d\xa9\xe3:\x1f4&L\xab\xa0\xda\x9ai" +
	"\\\xd6\xa7\xda|\xcc\xdc\xa8\xeae\xee\xac\x7fM\xde\xfa" +
	"\x17_\xba\x8c\xb1t\x9b\x0c\xe9v\x09\xdc\xb5/\xbe\xa2" +
	"\x93\xb1\xf4\x12\x19\xd2+%\x88\xe5T\x9bCK\xf5\xf6" +
	"\xf8\"\xf9\xe0o\xff\xf1\xdb\x8c\x01\xb40h\xdd\x81\x95" +
	"\x9d\xd6\xcc3/\xc3\xbd\x96Y\x1c\xe5%-W\xe6#" +
	"\xaa\xa5&\x0b\xdc\xe6V\x09\xdb2\xc3oK\xff*\xc6" +
	"\xd2\xdd2\xa4\x87\x82\x858>\xb8\x96\xb1t\x9f\x0c\xe9" +
	"\x91`\x15\x8e\xa7\xc6\x19K\x0f\xc9\x90\xde$A\xd2\xb9" +
	"\x0f\xb4T\xaf\x80-\xffM\xfd\xd1\x8bw\xb9m\xdcS" +
	"r\x96}\x98\xc1$@\xf5\xc3r\xee?\xc6\xa2\x95\"" +
	"\xf7\xa9\xd7\xf6\xc8\x19\xdb\xdeS\xb6M\xec\xc9\xec\xa0e" +
	"i\x93\xd4\xa5\xe7\xf4\x0c\xf4\x08\x00\xf1\xc1U\xe2#@" +
	"\x02$\x80xj\xb4\xd1#\xdc3{\xcf;\xb7\x9cx" +
	"\xe1\xfb\xee#$\xd5\x82Y6\xdc\x89q\xa4\xa3\x9b\xb1" +
	"\xaa\x9d\xb7x)o\xea\x0cr\xee\xb4\x9d\xa0\x7f\x7f\x8b" +
	"\xd3\xf6\x1c_\x04\xb6\xdei|\xfdh\xb0\x827\xef\xbf" +
	"\x81\x8e]\x8c\xa5\xdbeH\xaf\x96\xa0\xea\xf6\xe9\x08k" +
	"\xf5\x9a\xec\xeb\x80N\x93\xab\xd9\xb2nk;T\x8b%" +
	"G<\x11_\xbdpE\xbcV6}~\x97\x0f\xa8\xd6" +
	"\x0e^\xb2\x83\x16_\xe6\x921\xad\xc0\x9d\xd6\xd3\x88\x88" +
	"_\x83\x95\xc7g\xae\xc5NP\xed\xb2\xa5\xd9\x15\xc6\xd8" +
	"\x9e\xb2\xb1\xcd0w\x1a\xfe-Cg\xed\x98L\x91C" +
	"\xb6\xaeK\xaeo\xd4%\x96\xd0%Y\xb7G\x99L\x0f" +
	"\xeb\x1b\x83\xee\xc3\xba\xa3N\xe81\xdf\x12\xad\xeb\x8e3" +
	"\x8f\xc0\x8c\xa9\xe9\xeb\xadI\xd5\xd0\xb2)3W\xd6\xb9" +
	"\xd3\x1f1o\xfc\x1dp\x9a\x0b\xa0|&?\xcb\xd8h" +
	"H\x86\xcc\x8c\x90\xd7`\x00\xa59\xf4,c\x99\x19\xc8" +
	"\xe7\x84\xbc\x89\x04\xa0\xcc\x0e\xfd\x1f\xc62\xf3\x91/\x09" +
	"y\xea\x0c\x80\xb2\x98\xf8r\xe4W\x86\x04u\xe6r\xe2" +
	"\xab\x91\x0f\x84\x04u\xa6\x9f\xf8\x10\xf2M!O\x9d\x01" +
	"P6\x10\xdf\x8c<\x1f\xf2\xd4\x19\x00\x85\x87\xdeC5" +
	"\x01\xf9T\xc8SgPM \xbe\x1b\xf9\xfe\x90\xa7\xce" +
	"\xe0\xf6N\xfc6\xe4w\x87<u\x06\xb7e\xe2\xf7!" +
	"\x7f8\xe4\xa93\x00\xcawC\xbbp\xdbD~($" +
	"\xa83\x8f\x86\xbe\xc7X\xe6\x10\xf2\xa7B\x82:\xf3$" +
	"\xf1\xa7\x90?\x1f\x12\xd4\x99\xa3\xc4\x9fG\xfeJHP" +
	"g~\x12\xba\x95\xb1\xcc+\xc8O\x84\x04u\xe6\x17\xc4" +
	"O \x7f?$\xa83\xef\x86\xaeg,\xf3\x0e\xf2\x0f" +
	"C\x82:s*t\x13c\x99\x93\xc8?\x0d\x05\xeaL" +
	"\xd7'\xa1Y\xc0X&\x14\x96!\xd3\x12\x0e\xf4\x99\xae" +
	"\x99a*\x98\x83\x05maA\xa1Y\x18\xbe\x97\xb1L" +
	"\x1b\xf2\xf6\xb0\xa0\xd0\xac\x08\xff\x0c\x15\\\xe4\xddaA" +
	"\xa1YC\xbc\x0f\xf9HXPhR\xc4\xc7\x90o\x09" +
	"\x0b\x0a\xcd\x0daT\\6!\xcf\x85\x05\x85F%\xbe" +
	"\x19y>\xec)4\xf8\x86\x89oA\xae\x87=\x85\x06" +
	"\x15\xca\xf0VT\x1c\x91\xdbaO\xa1A\xc51\x8c=" +
	"g#\xdf\x8b\xfc\xa2\x8b\x12p\x11*\x82$\xbf\x1b\xf9" +
	"~\xe4\xad\xad\x09h\xc5\x11A\xfcf\xe4w \xbf\xf8" +
	"\xe2\x04\\\x8c\x8a]\xf81T\xd4\x90\xdf\x87|\xe1\xc2" +
	"\x04,DE-\xfc-\x1c)\xc8\x1fF\xbehQ\x02" +
	"\x16\xe1H\xa1z\x1eB~\x08\xf9%\x97$\xe0\x12\x1c" +
	")a\x1c\xb9\x8f#?\x12\x96\x00\xda\x12\xd0\xc6\x98\xf2" +
	"tx\x1c\x07\x0a\xe2\xe7\xc3\xb8\x1e\x9a\x85\x8cn\xee\xec" +
	"\x93x\xb6\xd7\xe4\x13\x13\x19[5r\xaa\x95c\xee\xe2" +
	"\xfc\xd5\x9d\x1f\xfe\xc5\xe6\xdf\x8f\xd0\xe2\\2\x0b\xeb\xd4" +
	"\x92}F\xd9\x97\xff\xedG?\xfd/\xd7-rd\x0b" +
	"\xe3XoJR5\xc3\x1eUm\xee\x0b{\xd2\x9f>" +
	"r\xea\xe5\xd4\xf8\x88'\x8d5\x9fE\xfa\xdf'\xbe\x7f" +
	"\xf5\x1b\xbbn\x16\xeb\xee\x93\xb8j\xe7\xcf\xb5\xee\xb3H" +
	"\xd7\xd5\xbd\xc1\xd6tM\xdaE\xfbd\xff\xc4\x84\x96\xd5" +
	"\xb8\x91\xad\xf8\xd2]\xf4\xef\x1f\xbc\x1e\xc1\x96l\x90\xf0" +
	"\x12\xf1\x8a\x18^\xe2^p\xef=\xf8\xef5\xb1\x0b\xcf" +
	"z\xc1\x91\x13I\xc6\xaa\xea\x17\xadZ=\x87\xaa\xdd\x0b" +
	"\x9e\x14/H\xb1\xa4:\xd5k\x9b\xc3\x9e2\xfa\x87\xb8" +
	"M\x17U\xcb\xce\xacO\xad\x03\xb5d\x8f\x99\x99\xf5\xa9" +
	"\x18\xb6\xa6\xa6\x0b\xfe\x86j!\xc1\xd4\xda\x0c\xe8\xe6N" +
	"G\x10+m\xd0W\xae\xa0P\xe3\xd9\x04\xd7\xa7\xc6\xc0" +
	"\xc4zus\xa7\xdf\xf5\x87/\xda\xf7\xcf\xe9\xc3\x7fp" +
	"\xba\x14\xd6\xe4K\xad\xe8\x9d\xff\xcfo~u\x19Ie" +
	"\x8dQ\xec\x89\x0c\x93Skk\xac\x84y\xddX\xack" +
	"\x05\xcd\xee\xd5U\xa8\xf4OL\xf0\xac\xedVq\xe4%" +
	"z\x03\x05\xdc\xca\xd4\xf5\xf2\x94\x96\xa3\xee\xc4\xc1#\x0e" +
	"|_\x83\x11{\xd5\xd0lK\xb3\xf99\\%\x98+" +
	"U\xdbR\x8dR\xd1\xb4\xc0v\xc5\xe5\x89\x89\x06\x95\xa3" +
	"\xf6\xd2c\xa8\\\xb2\xcc\xf1>N\xb7\x9a\xd0\xb2\xaa\xad" +
	"\xc9\xa6\xd1@\\+\x14\xccq\x1c\xcc\xa5\xda\x96\x0c\xcb" +
	"\xeb\xbb\xc4\xb1vf\xb9\x81\x95\x82\\2\x87\xb7\xec\xa8" +
	"\xb9\xd1\x0bx#\xa7\xa0\xb3\xa6\xe0\xdd\xa0\xa0\xab\xc1\x03" +
	"\xe7+9\xcb\xd4+%\x16\xd3J_w\xed\x8a\xea{" +
	"\x8f\xdd}|\xf7\xe6m\xce\xe8\xcc\xa2\x16fk`\x1a" +
	"\xfd\x06\xb7&\xfd\x09x\"\xfcVw]\x05#^\x9b" +
	"\xfef\xd9\xb4\xe5\x97\xff\xd9\xb7\xd6\xd4\xdfa\xc4k\xdb" +
	"\xef\x9c\xff\x1fv\xc5\x8fN\x91\x80j\x17\xccR1\xcf" +
	"\xc1\xd2\xb2\xa8\xda\x97Zm\xd5\xc8\xf2\x9aE!\xe7\xbc" +
	"\xd3Ns\xc42se\xc8\xba\xdd\x03\xbc\xa6\xfb\x8c\xbc" +
	"6\xae\xd9&\x8bY\xc3\x03]\x82\x8dT-\x96R\xea" +
	"TJ3$n\xa9\xba\xe6\xf4n\x1f/\xday\x7f\xb0" +
	"\xd6,\x0e\xb6\x96-\x8d\xa8\x16\x8b\x92\x9e\xe59I\xeb" +
	"\xb4\xac\xf0Y\xb5\xac:\xd5\xb8\xcfW\xac^\x04\xdc\xa9" +
	"\x8f\x81\x0c\x99\xe3 hV\xaf\x12\x7f\x05\xf9\x09\x104" +
	"\xab_\x00\xee\x7f\xc7\x91\xbf\x05\x82\xa3\xe8\x0d\xc0}\xee" +
	"-\xe4'A\xd0\xac~I\xf2\xef \xff\x10\x04\xcd\xea" +
	"\x14X\xa8! \xff\x14\x04\xcd\xea\x13@\x8d\xe2c\xe4" +
	"!I\xd0\xac@\xc2\xfd/$\xa1\xe2 I\x00\xae\x9f" +
	"h\xa6\x84\xfb\xd6\x0c\xc4sP\xbc\xb9\xc9Q\xacfK" +
	"\xb8\xfd%\x90_\x8c|Z\xb3\xa3X- \xf9\xf9\xc8" +
	"\x97 \x9f>\xcdQ\xac\x16\x13oC\xde\x8e|\xc6t" +
	"G\xb1ZA\xb7mG\xbe\x1a\xf9\xcc\x19\x8ebu\x95" +
	"\x84\x8a\xd8\x95\xc8\xfb\x90\x9f7\xd3Q\xacz$\xec\xb6" +
	"n\xe4C\xc8c\xe79\x8a\xd5\xa0\x84\xdb\xf4\x10\xf2M" +
	"\xc8[b\x8eb\xb5\x81\xf8&\xe49\x89\xf6]M\xcf" +
	"\xa8F\x0ezM\xc3\xe6\x86\xbf\xf2\x9c\xfc\x0b\xda%4" +
	"\xbdWW+\x8d\x0a\x93XX\x1c\xa8\x19>\x17v3" +
	"\xf7\xaa\x8cm\x1a\xc0\xbd\xcb\x98\xefC\xd1\xd5\xc2xN" +
	"\x15\xef1\xa1q=\xd7\xab\x16Y\xab\x9a\xd5\xecJ\xcd" +
	"\xed\xd1\xfePm\x8d\xf9\xab\x8a\xc3\x8b\xdc*\xa8\x067" +
	"\xc0\xbeV\xd3m\xcd\x98l\x1d15\xdf\xba\xf3[>" +
	"\xc6\xa7l\x16-[\x81\x89\x8a\xb4\xa7P0Y\xcc\xd0" +
	"\xca\x85\x9a=\xba;\xe95}X\xb3q\xe4\xdb\xb5\x13" +
	"\xd0\xf6\xcb{\x87GU\x16\xb55\xd7\xbdq\xa4\xad\xdb" +
	"-H\x99Z\x09\xec\xb2\xc5G\xb8\x95m\xe5\x86\xbd\xae" +
	"\xd7\x15\xb9\xce\x13\x19Uw\xf6\xb1$7J\xf5Oj" +
	"j\xfa\xda\xb2\xbe\x0d\xfa\x9c\xb2\xd3\xde\x02\x1a-`h" +
	"\xd9^\xd5\x1a7\xc18SqJ\xb5m\x0e\x96X|" +
	"\x0e\xd3U\xb3y\xddt]\xeeO\xd7\xc5p\x0d\x8eS" +
	"\x9c\x1e\xed\xe2t]\x01\x9d\x8ce\x96 _)N\xd7" +
	"\x0e\x92oG\xbe\x1a\x04C\xe8*\x9a\xae\xab\x91\x0f\x88" +
	"\xd3\xb5\x1fp\x1e\xf4!\x1f\x11\xa7k\x8a\xa6\xeb\x10\xf2" +
	"M\xe2t\xdd@|\x0c\xf9\x16\x10\xa6\xeb\x0d\x80jf" +
	"\x0ey\x11\x04C\xa8\x00?d,SD\xbe\x1b\x02\xbf" +
	"nW\x05\xe6\xa1\xfe\x7f3\x16\xdc\x81-w\xfd\xba\xb7" +
	"\x03\xce\xb3\xdb\x10?\x0c\x12Tu\xd5\xd6\xecr\x8e3" +
	"\x7f\xd9\xef\xbe\xa6\x9b\xb1\xd6\x92n\x16y\x03\xbd-\xcf" +
	"\xb5\xc9\xbc=<\xec\xcb\x1f\x19\xc4\x97?\xe9z\x95\xc0" +
	"\xe6V\xcd\xc2{bo\xba\xfbl\x03+g\xa9\x9a\xa1" +
	"Nr\xd6J;\xa1\xb8\xa8\xef\xd8>\xdc\xc7\x8bf\x89" +
	"\xb5j\xb8\x9e\xbbE_\xeb&\xcb}\x8a\x14\x09\xc9\xd6" +
	"v\xf0Q\xd3\xc4IRs\xdb\xbd\xdd\xb4\xdd\x16\xb9\xc1" +
	"m\x0b\xd4q\x9d\x0f\xa9\x15\x9et\xdaV?\xba2E" +
	"\x9e\x95q\x83\x1f(\x17\xca\xa5\xb5\xaa\x8e\xdbS\xafi" +
	"Y<+\xec\xf8\xee\xfc\"\x0b\xdeu\xe9\xc0y\x0cF" +
	"d\x80\x96 P\xca\x00\xa1?*\xe53\x8d\xca\xd8\xaa" +
	"\x8df6\xdd\x06B\xb0+\xde3\x1a\x04\xb6\xe3=\xe3" +
	"A@.\xde\xb3*\x88\xa5\xc4\xd7\xdc\x1a\x84JP\xcc" +
	"\x8f\xf7\xc4{\xae\x09\x02\x9a\xf1\x9e\x9b\x82 S\xbc\xc7" +
	"\x0a\xa2\x8c\xf8\xa3\xbf\xa0\x95J\x9ai0(U\xbd\xa8" +
	"\x07.\x0aj\xb2w\xa4O\xb5\xd5jJ\xcbZf\xaf" +
	"\xaeAA\xb5\xb9\x13\x10\xa9\x8e\xe4M\xdb,U\x0c\x16" +
	"\xb5\xf3c\xd5u\xa6\xae\xa9\x93|\x0cGE\xbf\xb1\xab" +
	"R\xe0=\xf4>4\xbb2\xc6\x86\xb8:\x81\xf7h\xc5" +
	"\x9b\x8cU\xbd\x9f\x8c~\x97\xcea\xd2\xf6\x1b;4\xcb" +
	"4\x0a\xdc\xb0\x05\x1fZ:\x04B\x9c-\x0e\xe3\xd5\xeb" +
	"\xb8j\x8d\x99\x1bU\x16\xd5\xcb<\xdd\xee\xcf\xeb\x1e\xda" +
	"&\x83\xf9(\xb9\xf1\x9a~\x1a\xff\xfe|\x04\xd9\x09\xd7" +
	"\xa4hw\xa6\xe9\x98\xa7\xe9+9\xbb0\xa7\xe9\x18L" +
	"\xbb0$ \xc4\x98R\xa0jt\xe4\xfbi\xfa\xca\xce" +
	"\xb4\xdeG\xf5\xf8\xb3.\x1e\x0d9\xe1\x9a\xdb\xa9\x1e\x9a" +
	"vw\xd3\xf4\x0d;\xe1\x9a\xbbh99\x80\xfc\x01\x9a" +
	"\xbe\x11gZ\xdf\x0f\x0f2\x96y\x00\xf9A\xe4\xd3\xa2" +
	"\xce6\xfc\x08\xf1\x83\xc8\x0f#\x9f\xde\xedl\xc3O\xd0" +
	"\xf2\xf0\x14\xf2\xe7i\x19[\xe8\x84k\x8e\xc2\"\xc62" +
	"G\x90\x1f\x03\x09\x92\xaa>\xces\xee\x04\xacn_3" +
	"\xed\xa7\x7f\\|1)*i,ii\xd9\xde\xf5\x9d" +
	"\xfe\x98\x17\xb5\xb7\xde\xf5\x9d%\x16\x0cz\xffE\xb8\x83" +
	"\xde\xaf\xa3\xd5\xd2\xb2\x9e\xe6+\xf2$\xf1\xd2\x99k\xd8" +
	"\xa9\x19\xb9L\x91s\xc8\x0d\xd0:#\xcef\x9d\xab\xd9" +
	"\xbcfL\xb2Va\x123\xa8\xdaZ\x81gl^d" +
	"\xc16\x8c\xeb\x03\xf9\xb9\xc1qt\xf7\xf1h0\xed;" +
	"i\x01\xd1\x8c3\x0a\xac\x14\x05$O\xa0h\xe7S\xa6" +
	"A+L\x84I\xe1\x88\xcc je\x8b\x10\xab\x1e;" +
	"0\xa3c*\xfa/\x7f\x80\x0f\x11\x13\xe6~\xf4\xff\xd7" +
	"\x17\x1f\xc3\xe5\x8e\x86\xba\x9f\xb9\x82C\xdd\xf3\xce;C" +
	"\xdd\xf7<v,\x95 \xf02z\x9e\xc7\xabnb," +
	"}\xa5\x0c\xe91\x09\xfc\xd5Y\xb6\xb9%\xf8\xfb{v" +
	"\xa8\x9a\x8e\xf7e\x00L\x02`P\xb3\x8e\xa3\xa4\xf0\xb6" +
	"\xfd\xb6\xd4-qg\x0f\xa9z+\x83\xad\xed\x88\xe1\xca" +
	"P\xe74\xed\x0c\xa2\x0a\xbe\xd3t\xc5\xaa\xc0\x93Z\x1b" +
	"\x85\xaa\x0bQ\x9d\xa3Ct\xcc\xb5\xf9\xec\xc0%*\xb8" +
	"\xe4[\xfc\xc6\xa8\xb72\x96\xce\xc9\x90.\x0a\x8d)\xcc" +
	"c,\x9d\x97!m\x0ba\x85\xed\xef1\x96\x9e\x92!" +
	"}s\xa0\xb0\xc7o\x1cg,\xbdW\x86\xf4m\x12T" +
	"sZ\xa9\xc8\xad\x12ZUC\xdc\x98\x0c6&\x06\xb2" +
	"\x9a\xf3\x1f \xa7ML\x94K\x9a)\x19\xb4\xfb\x91\x0b" +
	"\xc4F\xfb5\x96S\xad@\xcc\xa0}P\xb3YT\x13" +
	"v\xa3/\x10\x90\xa8\xf5\x8eG\xbd\x954H1\x82\xf1" +
	"\xaa\xe7/gQ\xad\xe0\x0f/\x80\xf8\xd2\xf1z\xc76" +
	"@\xbc\x03\xfbj\xa5\x0c\xe9n\x09\xaay\xf1J\x88\x05" +
	"\xd52\x08\xc7pT\xe9\xaa\xcdK\xf6\x80\x0a$\xd7\xb7" +
	"\xfe:\xc6@f\xd2L\xb9Z=\xe7\x81\xe4m!%" +
	"\xcd\x94\x8dR\xdd0\xba\xa6\x91\xef\xfd\x1a\xc1\xf7\xae\x95" +
	"\xcc\xa2\xc5\x0d^\xb3H\x98\x86is\xabv\xe18\xa7" +
	"\x11\x85\x9a0*\xc2\x82\x8f\xbd\xd5\x1fP[\xfc\x9c\x81" +
	";\xc9\xd69\x80\xb6\xc8\x03\x92\x903p\xbf\xf4\x1b\xc6" +
	"2\x0f!?$\x099\x03\x8fJ\xa8C\x1eB\xfe\x94" +
	"$\x98\x82OJ\xe4tF\xfe\xbc\xe4\xe9\x96\xb8\xb8K" +
	"?CS\x13\xf9q\xc9\xd3-\x19\xebzUZ\x84\xba" +
	"\xdf\x09,x_\x12\x92\x06\xde\x95p\xb7y\x07\xf9\x87" +
	"\x92\x904p\x8a\x1a\xf41\xf2\x90\x984\x00\xf2.\xc6" +
	"Fe\x1923\xc4\x9c\x81f\xc4\x99&\xe4\x091g" +
	" .\xe3&4\x07y\x9b\x983\xb0PF\x9b\xac\x0d" +
	"y\xbb\x9f3\xc0\x98\xb2\x82\xe4\x83\x9c\x0ar\xb2SN" +
	"\xc5\xbd59\x12\xe4dgL\x19$\x1e\xe4<\x90\x93" +
	"\x9dr\x1e\x1e\xac\xc9a ';\xe50<X\x93\x93" +
	"@Nv\xdc\xbc\xe5\xf1\x9a\xdc\x03r\xb23\xa6\x94\xa9" +
	"=u9\x03\x8c)\xfb\xe4\x9bjr\x03\xc8\xc7\x8e\x9b" +
	"\xba\xfclM\xac\x9f\\\xec\x8c)\xf7\xc8\x1f\xd4\xc4\xe8" +
	"\xc9\xc5N1zl\xffA\xe4\x87\xfd\x9c\x01\xc6\x94'" +
	"\xa8\x7f\x0e#\x7fN\xa6@\x91fkYU\x07o\x9c" +
	"\xd5\xedx\xae\xdd\xc8\xa5\xdc@%g\xa9e]\xcb\xf6" +
	"\x9aF\xae\x9cM:\xeaW X\xb6&\xd4,\x1f\x05" +
	"\xb3<\x997x\xa9$\x8c\xf4\x1a\x8d]+e\xf31" +
	"\xd5\x9a\x0c\"\xb5y\xb7f\xc9\xad\xda\xa9y\x94\xe7\xe4" +
	"\xf2TP\xbfa\xee\xec\xc9f\xcbr\xa1\xac\xd3\x8e2" +
	"\xe6\xc4\x1csc\xbcP\xe4\x96j\x93u\xeaIo\xcb" +
	"\xaeS\xb3\xb6i\x89\xf3\xcdv\x05\xa5\xb2\xc5\x87\xb4\x82" +
	"f\xaf3\xad!m{YK\xe6\xae\xc5m\xd1\x17\xcc" +
	"\xba\xea8K\x9aF\xc6\xf0<\xa4u\x05\xa3\xaaf\xd4" +
	"4.\xa5N\xf5H\xb9\x1c\xd9\x0f\xaa\xee\x19\x9f\xc1\xed" +
	"\x0d\xbe\x13+\xeb\x03\xa7$\xa5A\xed\xf5\xa3\xdc\xe6\x92" +
	"\x81W\xf7\xaaE\xb2\xdfS\x9a!\\o\xf1\x09\x8b\xf3" +
	"]\x1c<\xfbR\xb6:\xceV\xd8yza\xc3\xae\xa2" +
	"\xb6s\xdd>s\xe9\x88\x9a\xdd\xc6\xa2\x9a1\xf9y\xed" +
	"U\xa7\x84\xf6\xf2\x1dj\xd1\xb4T\x1b4\xd3\xb8\x9e\xdb" +
	"jP2UR{q\xd8IYU\x17\x97\xb8\x1a\x9d" +
	"J+\x94\x0b\xfd\x92[\x87f\x1a\x83\x85\xa2\x9a\xb5\xeb" +
	"FgA\x9d\x1a\xe1V\xd6\x04\xddur\xca\xb6\x98\x00" +
	"\xe0T\x0b\x83\x86foT\xf52|\x91\xe4\x80\x8c\xeb" +
	"\xb8\xf3Ly\xb2\xe5\xef\xf3\xd7\xdb\xcbC\xa8\xf3\xb7\x87" +
	"\xd06\x0f\x09\xeb\xedU\xc4W\"\xef\x0e\x09\xeb\xed\x9a" +
	"\xd055AJ\x19\x1c[\xbe\x9fx\x1f\xf2\x91\x90k" +
	"\x0c\xa0-\x9f\"\x1e\x04/\xc3\xae\xd2\xbf!\xb4\x15m" +
	"v\xe4[(\xa8\x19rl\xf9\x1bB8\xaf\xb7 \xd7" +
	")\xa8\x19vly\x8d\x82|y\xe46\x055]\xa5" +
	"\x7f;\x05#\x8b\xc8wSP\xd3U\xfa+\xa1\x07k" +
	"\x82\x9d\xd3\xc0Q\xfa\xf7\x85:\x19\xcb\xecE~\x1b\x05" +
	"5%\xc7\xf7v\x0b\xf1\x9b\x91\xdfAAM\xd9\xf1\xbd" +
	"\xddN\xed\x0f\x82\xa33C\x8e\xef\xed.\xe2\x07\x90?" +
	"@A\xcd\xb0\xe3{\xbb\x9f\xfa\xedn\xe4\x0fQP3" +
	"\xe2\xf8\xde\xbeC\xf2\x0f ?HA\xcd\xa8\xe3{{" +
	"\x84\xf8\xc3\xc8\x1f\xa7\xa0f\x93\x13\xd4\xfc\x01\xb5\xe7 " +
	"\xf2\xc3\x14\xd4lv\x82\x9aO\xd0\xf3>\x8e\xfc\x08\x05" +
	"5\xa799ZO\x13\x0f\x82\xac\x89\xe9N\x8e\xd6\xd1" +
	"\xd0<4f\x90\x1fC>{\x86\x13\xd2|\x81\xda\xf9" +
	"\x1c\xf2\x97\x90\x9f?\xd3\x09i\xbe\x18ZT\x13\x94\xbd" +
	"\xe0<'\xa4\xf9\x93\xd0Z\xdc7\x91\x1fG>'\xe6" +
	"\x844_\x0d-c,\xf3\x12\xf2\xd7\x91\xcfmqB" +
	"\x9a\xaf\x91|\x10\xc4\x9d\x17wB\x9a\xbf ~\x1c\xf9" +
	"[\xc8/\x9c\xe5\x844\xdf \xfe:\xf2w\x90\xcfW" +
	"\x9c\x90\xe6\xdb\xc4\x83\xa0\xef\x82\x84\x13\xd2|\x97\xc6O" +
	"\x10\xf4\xbdh\xb6\x13\xd2<E<\x08\xfa\xb6\x9e\xef\x84" +
	"4?\xa1~\xfe\x18y\x88B\x9a\x178!M\x08_" +
	"\xcf\xd8h\x18\xb7k\x8ah\xceq\"\x9a\xcd\x883M" +
	"\xc8\x13\x14\xd1\x9c\xebD4\xe3\xe1Q\xc62-\xc8\xe7" +
	"SDs\x9e\x13\xd1\x9cK<\x88\x1c\xb7]\x98\x806" +
	"\x8a\x1cc=\x17#_\x8e|\xf1\xfc\x04,\x06P\x96" +
	"\x92\xfc\x12\xe4+\x91\x7fiA\x02\xbe\x04\xa0t\x10o" +
	"G\xbe:,A\xb2\\\xe2\xc3\x9d\xeb=S\x83~j" +
	"\xb6oy\x94K\x9c\"-\xb8;x,k\xe6\xf8F" +
	"\x97\x91\xd1\xe5\xc11\x11J.\x1cUm\x8d\xc5LC" +
	"\xb3k\xf9\x80Y\xb6@\xaf\\;Q,\x0dkPW" +
	"8\x92\xe3\x06\x93\xbdK@\xac*iRT\xe5\x8c\x95" +
	"\xf5\xf1\xa8X\xdc\x9a/h\x86qz\xe4\xae5o\x16" +
	"m\xa3Ah\xa68\x80\x178\x0f\xe2X\x9e-\xdd\x0e" +
	"V\xa7D\xec^4\xbf\x9b1\x964\xf2+\x83\x1c2" +
	"'\xf6\x81\xd5\xe0S4\x92wj\xab)u\xd2\x80\x16" +
	"ai\xeb\xce\x89b\xc9\xcdQ\xab\xfe\xf4\x8f\x8bk\xa6" +
	"\xfd\xd4\x09\x0d\xda\xf4\xe4f\x91%\xed\xab\xd5r\xa9\xe4" +
	"\xf9\xf2\xae&_^V\xd5\xf9X\x8e\xb3$\xc9x~" +
	"\xe9\xab\xba\x19\x93\xb7\xe5<\xd1\xf1n\xc6\x92\xdb\xfax" +
	"I\xf5\x04\x9a\xba\x19\x8bN\x18S\xa7\x87\xaf\xf6\xec0" +
	"4\xbb\xa0N\x89\xed\x1f\xfaw\xd8\xc2\xd86\xb5\xe0:" +
	"\xb2\x8f\\\xd9\xcd\xd8\x1e\x1b%\xfd\x0eHx(h\xc6" +
	"\xd7\x02\xd4\xe9\xb5\xa5\xc7\xbf\xd2\xbb\xc7\x91\x14\xe5H9" +
	"W^\xcdb\xc2Cvw\x07\x0fih,&\xd4\xdd" +
	"\x8e%\xce\xd6'\xbe\x1f'\x10z\xbd\x13\x08-h\x86" +
	"?\xa6\x84\xb7\x94\xc5m\xb1\x96\xcfq\xfd\x0c\x885\x06" +
	"5\xe2\xae\xb4\x80W\xfa\xf7\xae\xa9E\x0c\x0fV\x8b\x96" +
	"9\xd1\xe0\xaa\x1dE\xd3\xae\xc1\xe4O\xf9\xfcL'4" +
	"\xbbzG\xfa\xa2\xaa\xad\xe2F\xbb\xc4\xdfh\x9b\x01\x17" +
	"\xe2\x10\xc8\x90i\x01a\xa3\x9dI\xbc\x09y\x02\x84\x8d" +
	"6N|\x06\xf29b\x8ck6\xf1\x16\xe4\xf3A0" +
	"l\xe6\x02.\xc4\xb8\x19g.\x86\xc0\xb0Q\x16\x90S" +
	"~\x0e\xf26\x10\xec\x9a\x85$?\x1f\xf9\x12\x10\xec\x9a" +
	"\xc5T\xff\xc5\xc8\x97\x83`\xd7,%\xe7`\xe0\xf4\xf7" +
	"\x0c\x9b\x15$\xef;\xfde/\xe9\x93\x81\xbc\xcd\xf7:" +
	"\xc8\xa6\x9f\x82)g\xb5 \xd7\xd5,\x14\xfdlY\xca" +
	"(\xf5\x8b\xb6\x0a?\xe4\xad[}o\xc6\xd6\xad\x1d\xed" +
	"\xed\xedA\xc9\x8e\xd3T\xa1\xe8\xd9}+\xae\x13\xb7\xe4" +
	"%\xae\x0f\xe6\xc6L\x07\xca\xa6Qg\"\x8f~\x9e\x89" +
	"\xecf\xec\x0d2\xf0S\x84\xab\xdcs\x1370\x91\xcf" +
	"\xa2\xa6\xb9\xb9\x7f\xbe\xdaKv\xf1\xeb\xfe\xf0\xf9\x886" +
	"\x86\x0f\xc32\x8cF|\x8f\x95\xf2Y\xf8{\x8c\x8dF" +
	"p\xf7\x8ax\xf9\x8f8\xd6\"hL\xb5 \x9f\x8f\\" +
	"v=\xb3s#h|\xcdG\xbe\x04yHv\xc6\xce" +
	"\xe2\x08\x1akm\xc8\xdb\x91\x87C\xce\xd8Y\x11\xc1\xcd" +
	"t9\xf2+\x91G\xc2\xce\xd8\xb9\x9c\xe4W\"\xefF" +
	"\x1e\x8d8cgM\x04\x8d\xf1n\xe4C\xc8\x9b\xa2\xce" +
	"\xd8\x19\x8c\x90\x11\x8a|S\xc4\x0b\x90\xa2\x11\x1aAc" +
	"\x7f\x13\xf2\\\xc4\x0b\x902\xd6\xa5F(\x11K\xc7\x82" +
	"\xa9\x88\x17!e\xac\xab\xec\x14\xec\xc5\x82\xdb\"^\x88" +
	"\x94\xb1\xae[\x9c\x82\x03X\xf0@\xc4\x8b\x912\xd6u" +
	"\x7fd\x1a\x16<\x8c\x05\x8fG\xbc )c\xca\x0f\xa8" +
	"\xad\x8f#?\x12\xf1\x82\xa4\x8c)O\x13?\x82\xfcX" +
	"\xc4\x0b\x922\xa6\xbc@\xcfp\x0c\xf9q\xe4q \xc3" +
	"\xb8\xeb\xd5\xc8Zr\x1c`\xc1\xfbX0\xab\xc5\xd1\xd4" +
	"\xde\x8d\xfc\x90\xb1\xcc\xfb\xc8?F\xae\xc4\x1d\xcb\xf8#" +
	"\xe2\x1f#\x0fEQS\x03\xc72\x86\xe8M\x8c\x8dF" +
	"\xf1\x9d!\x9e-9\x86\xf1\xdc\xe8\x9b8\x1f\x91\xafF" +
	"~\xbe\xec\x18\xc6WE\xb1\x9a\xd5\xc87!\xbf \xe4" +
	"\x18\xc6\x1b\xa2?c,\xb3\x19\xf9\x14\xf29\xe1\x04\xcc" +
	"AC=\x8a\x0a\xf1\x14\xf2\x03\xc8\xe7F\x120\x971" +
	"\xe5\xce(9\\\x90\x1fB>/\x9a\xc0\x19\xad<J" +
	"\xf5<\x8e\xfc%\xe4\x1769\xc9\xf4/F\xb1\x7f^" +
	"B\xfe>\xf2\xf9\xcdN2\xfd\xbbQR\xc8\x90\x87\x9a" +
	"PQ\x9b\xe5$\xd3C\x93\xc5\xd8h\x13\x0eQ\xc4\x17" +
	")\x09\xb8\x08\x87h\xd3\xf7pyC>\x07yk\"" +
	"\x01\xad\xb8\xbc5\xe18O \xbf\x18\xf9\xc5\xb3\x13p" +
	"1.cM8\xe4\xe6#_\x82|\xe1\xf9\x09X\x88" +
	"C\xb7\x09\x9b\xbf\x04\xf9J\xe4\x8b\xa4\x04,bL\xe9" +
	"h\xc2\xe6\xb4#_\x8d\xfc\x92\x0b\x12p\x09v\x1b6" +
	"'s%\xf2>\xe4ms\x9c\xdc\xb3\x9e\xa6\xf7\x18\xcb" +
	"\x0c \x1fC\xbexn\x02\x163\xa6\xa4\x9b\xb0\xdb\xc6" +
	"\x90oA\xfe\xa5y\x09\xf8\x12c\xca\x0d\xc4\xb7 \xd7" +
	"\x91_za\x02.eL\xd1\x9aP\x0f\xcf#\xb7\x91" +
	"/\x99\x9f\x80%\x8c)\xdb\x9bp\xf8\xd8\xc8\xf7\"_" +
	"*'`)c\xca7\xa9=\xbb\x91\xefG\xbelA" +
	"\x02\x17fe_\x13N\xe1\xdb\x90\xdf\x8d\xfc\xcbS\x09" +
	"\xf82c\xca]M\xd8\xfdw#\x7f\x08\xf9\xf2\xd6\x04" +
	",gL\xf9N\xd3op\x98#\x7f\x1c\xf9\x8a\x8b\x13" +
	"\xb0\x02\xed\x88&\\\xb6\x0f\"?\x8c\xfc\xb2\x85\x09\xb8" +
	"\x0c\xed\x88&\xd4\xab\x0f!\x7f\x0a\xf9W\x16%\xe0+" +
	"\x8c)O6\xe1v\xf18\xf2#\xc8\xdb/I@;" +
	"N\x0b\x92?\x8c\xfc9\xe4\x1dm\x09\xe8\x00P\x9ei" +
	"\xc2m\xe4)\xe4\xcf#\xef\\\x9c\x80N\xb4;\x88\x1f" +
	"A~\x0cy\xd7\x97\x12\xd0\x85v\x07\xf1\xe7\x90\xbf\x84" +
	"|\xe5\xa5\x09X\x89v\x07\xf1\xe7\x91\xbf\x82\xfc\xf2%" +
	"\x09\xb8\x1c\xed\x0e\xe2\xc7\x90\x1fG\xfe\xd5J\x02\xbe\x8a" +
	"vG\x13\x0e\xff\xe3\xc8\xdfj\xaa[\x89\xbd\xd0~V" +
	"\xb5\xc6\xcd\xa9\x8a\x0enZ\xb9\x1d\xcb\xefT+\xa8|" +
	"B\x84A5\xc7'\xd4\xb2n\x8fJjN#\x89\x0d" +
	"%NYi\xadZ\x90\x95\xc6\x80\xb2\xb9\xd6j\xa6." +
	"\x99\x93ZV\xd5\x87\xd7iS$\x1e,\xef\x9a\xa1\xd9" +
	"\x9a\xaa\x7f\x1d<o\x8d_\xa2\x97\xa7\xcaVe\xb8\x97" +
	"\xc5\x82H\xadc\xef\xf7Zf\xb1\x0f4\xc7,\x0f." +
	"(\xd9\xea$\xef\xb1S\xa0N\xb9\xe1\x9c\x86e}t" +
	"\xa1,8{\x0a\x9a\xa1\x15\xca\x85a\xe85\x8d,7" +
	"l\xabU\xb5k<\xdfN\xf9\x98\xeczG\xca\x16_" +
	"gZ=\xa5\x92V\xd0\xc8\xeb \xb8q\xcc\xa2}\xce" +
	"\xb2\xae\x8b\xe3\x9cd\x0d\xb7m\xb2\xa3\x0f\xf6\x8c\x9b;" +
	"\xb8\xe3S[\xab\x99\x05\xb5\xc6\xd7\xe6\xc9\x82#\xbb\xb6" +
	"\xfd\xcce#\xc3g.\x1b5e\xd3\x0eb\x07|\x07" +
	"\xd7\xcdb!\xc4\x0d\xbb'\x9b\xe5:wk\xaf\x0ck" +
	"\xb6eNr#c[\xbcTb\x10e\x12D\x19\xb8" +
	"\xa9(\xa6\x01\x8eC,e&s\xda\x84\xc6-Q\xf1" +
	"T\xdd\x87\x05\x9b\x8frU\xd7\xcdd\xb6\xb6\xef\xc7\xd5" +
	"\x12\x1f\xe3\x85\"\xb8\x1d\xe4G\x88P\xe0<\xecpk" +
	"R5R\xaa&\x1967T#\xcbGy\xa9\xa8Y" +
	"\xaaM\xc1\x8bF\xc2W[&\xec\xb4\xf3$\x97t\x1e" +
	"\xa2^\x8e\x86KJ\x9d\x92FM\xd3\x1e\xf6\x86\x85\x9b" +
	"\x90W'\xeb\x8e\xe0\xf5\x80u\xe3\xcb\x88\xaa\xa5R\xbd" +
	"\x90\xefc]?U\x99\xe4F\xaf\xd9J\xa9<\x8d\xef" +
	"k\x8eK\x9a\xbe\xce2\x0b\x19\xdb\xb4\xd4I/o\xb0" +
	"NVu\x87\x00\x94\x8d\x1c%\xe13\xbfo\xc0\xaf\x8e" +
	"\xae_\xcfbX~Z\xa9Z(\xea\x8d\"\x9c\xaa5" +
	"\xc9\xed\xe1\x0c\xb8\xe5}\xb1F\xc5]\x0c\xda\xc5\x91<" +
	"\xbc\xa1h\xab\xb0\xcd\x09O\x08.K\xd3\xb4\xfb\xb4\x92" +
	"\x0d\x966^\xc6\xaen%\x81`\x85\xd0U\xc3\xee\xe3" +
	"\x06\x8bQ\x12\x8f7v\xf0\xb2\xab-s'k\xb5\xf3" +
	"C\xea\xe4iSQ\x0a\xa6\xcc(\x89\xc6\xcc\x9dB\x1b" +
	"\xddw2\x0a^\xaeFT|\x02\xac|\x84\x1b\x1cl" +
	"w\xa0\x07\xe9In\xe9:\xd3*\xb0\xa4\xb3\"\x05k" +
	"\x08\xae\x93\x13Z\x16\xf0\x8eC\xdc\x98\x94E'9-" +
	"0\x136k\xe5Vo\xd9\xf6\x1f\x84RQ5cR" +
	"\x1a\x0bZ<\xc0U;\xd3J\xb3%\xf0+\x97mj" +
	")p]\xad\xf4\xa9\x15\x9c\xcf^\x1d9\xcb,O\xe6" +
	"\xedA\x89\xfc\x9f\xeb\x8du\xdc\xb25]\xb3+u-" +
	"\xac\x89WR\x0ec\xed\xa1;B\xb5!\xce\xda\xc3h" +
	"\x0cj\x8e\x9e\xb5\x9c\xac=zv\xe2\xc4]u\x07\xcd" +
	"\x8e\x9d\xac;\xf2vdw\xdd\x91\xb7\x07\xecn/\x0f" +
	"V\xa3\xac\xcf\x0cv\xd4P\x92\xab\x13\xfdS\xc5\x06a" +
	"\xb9\xd0\xe7\xd9 I\xc7\x08\xa1\x88\xa2\x7f*<\x0e\x0f" +
	"z\x89%\x83\xe0\x99%\xb8\x02\x88\x01\xd77\xdd\xd8\xea" +
	"\xcd\x82Mr\xe3o\x18K\xef\x97!\xfd\x90\x04\xe0\xc6" +
	"[\xbfs+c\xe9\x87dH\x1f\xf2\xbc\xb4\x8c\xc5\x1f" +
	"}\x90\xb1\xf4!\x19\xd2O\x09[\xa6\x94\x1b3\x07\xdd" +
	"X\x9f\x7f\xcb \x86\xed7\xcf\x8da\x8b\x97\xa5\xdcp" +
	" ]\x99t\xec\x9e3_\xe9\x05\x14\xc1\xcf\xa49=" +
	"\xb0\x085\x8d8w\xfb\xe9:g\x9d.\x14M\x83\x1b" +
	"6\x13\x0e\x8e\x01\xc4\xfb\xd76:\xfcv\x13c\xe9\x01" +
	"'\xda\xefG\xa9\xd3\xbb\x18K\x8f\xc8\x90\xde,\xc1\x1e" +
	"Zh\x07s\x10f\x12\x84\xab\xde?\xc6X\xb5\x82w" +
	"\x1b\xe1\x16\xe0\x92\xaaN\x0a\x1e\x7f*\xe9\xb3*,I" +
	"yw\xd6\x17\x88\x92\x0e\xa74\xa3\xa7X\xd4\xb5\xac\x7f" +
	"\x0cN0\x05\x85cp\x8b\x1a=\xcd\"\xf1\x1c\\\xd3" +
	"\xe9G\xf9\xa2\x85 \xce\x13-\x04\xc6u5\x87\x93u" +
	"\xd0\xe8cQ\xb5R\xf2\xa7\xeb\xb9\x1dvk\x18\xcc\xdd" +
	"\xe4\x1b\xad\xd7Ih\xbbl\x91PI\x16\x83\xb9\x9a\x84" +
	"\xcav\x11\xf9n1\x98[\x91P\xa9\xdb\x8d|\xbf\x10" +
	"\xcc\xed\xda'\x91\x11w\x07\x16\xdc'Ds\xbb\xeeq" +
	"\x0a\x82\xb0\xb0\xe7\xf5xTz\x19\xd5X\xe4G\xc4h" +
	"\xee\xd3\x94\xeaz\x04\xf911\x9a\xfb\x02\xa5\xcc>\x8f" +
	"\xfc\x15I\xf0z\xfcDB\x8b\xf9\x15\xe4'$\xc1\xeb" +
	"\xf1\x0bJ\xbd}\x1d\xf9;\x92\x10\xce}\x9b\x9e \x88" +
	"\x16{\xe1\xdcS$\x7f\x12\xf9\xa7\x92\x10\xce\xfd\x04{" +
	"(\x88\x16{\xd1\xdcf\x19;\xae\x05\xf9|1\x9a;" +
	"W\xbe^\x8c\x16w\xc4\x8e\xc8\x8e\xd5\xba\x90.X\x82" +
	"\x05+\xb1\xa0\xe5\x19\x99\xcc\xd6\xae\x0e\xf9Y\x10\x0f\xc9" +
	"w\xc4\x9f\x95\x1d\xc35%\xbf\x07b\xa8\xb7c\xd6\xff" +
	"\x96)\xa6\xdbU\x90\xaf\x071\xa8\xdb\xa1<'\x93\xed" +
	"\xda\xb5O\xbe\x06\xc4#\xd9\x1d\x89\xa32Y\xaf]\xf7" +
	"\xcb\xa3 \x06j;f\xffHv\x0c\xd8'd|\xd9" +
	"Oa\xc1\xf3\x14\xa9U\x0d\xb3X\x19\xe5\xd2\x84\xce)" +
	"g\xddK\xe3\x88r\xc3\x16c}\xdc\xe2FVB\x0d" +
	"F\xd0&\x8d\xd8h\xcd>\xe7\x8a\x01\x1f\xe2\xeaD\x8f" +
	"\xc5\x93\xea\xa0\x91\xe3S\xc2\xa6\xae\x91N%\x0bJ\x95" +
	"0\xb9\xac\x8e\x9a\x0c\xa8\xb3\xcbv\x8a\xb2\xae\xba-\x09" +
	"z\x15j\x9b&\xd8\xf52=\xe0\xe5\x0c\xc1p\x83\x86" +
	"\xf7Pz\x99\xa8\xe5\x9b\x05\xd5V{%'\x86\x8c\xda" +
	"`\x8f^\xcc\x0bqG?\x07:i\x1ak\xfd#\xe6" +
	"N|\x9atB\xf0\xda\x9e4Fy\xae<Uow" +
	"\x0c\xb3d\x1f/\xa8F\xee\xb4+\xa5\xfa\xa7\x8er!" +
	":{6\xa9 Lk\x9b\x96]6K\x1a\x93\x85\xb0" +
	"\xba\x9a\xdbZ.\xd9\xa3\xa6d\xda\xa4\xa8\xad3-:" +
	"\x12`E\xcdb\xc9\x0f^\xf0\xa9\"\xb7\xb4\x02\x8f\x18" +
	"\xb6\xaa\xf7\x1b\xd8g#yn\x98\xba9Y\xb9V5" +
	"&\xfb\x8dI\xae\x0bJ\x08\xbe%\xd3(\x09\xc9X\x0d" +
	"kpR0\xed</i\xa53U\x13\xc3zN\xab" +
	"&\x14T3`\x96-\xbd\xb2nG\xefZ\xb1BY" +
	"+\x9d\xed\xa21\xaf\x85C\x8e\xae\x80\x1a\x04\xed{\x0d" +
	"\xaf\xe9\xd3JxQ\x9f\xaa\xe9\x15\xd4\xcf\\\xabh\xcc" +
	"\xcc\x98\x1a\xe8\xc15T\xf5F.Y\x86\x7fr\x83\x94" +
	"\xa8\x98\xb5N\x9b\xf2\xc5>\xdf!Z\x970\xea\x1e\x02" +
	"\xf6\xd2Cu\xb9\xcc\xcf|\xa0=\xde\xf0D{\x85\xab" +
	"\x96\xb7\x87|\xe1s\xec\xa7\xa5,\x8d\xd5%\x9bme" +
	",\xbdE\x86\xb4\x1e\xe4\xeci\x8b\x84\x044\xd7\xff\x19" +
	"/,\x12\x12\xd0\\\xe7g|\xfb*\xc6\xd2\xba\x0c\xe9" +
	")\x09\xaa\x13N\"\xee\x10\x8b\xa9\x15\xee\xb78Z\xcc" +
	"\x9b\xd0\x12d\x0a;\xa7[\xa2\x13\xa6\x0e-A\xca\xb0" +
	"{|\x9c\x1b\xbbz\xb26\xb4\x04\xe9\xc3\xe7|\x18\x06" +
	"wz\xe1\xacx\xf4\xf4\x93\xee\x96\xb0\x9b{\x8f\x9aZ" +
	"\xdbHa\x19\x0d\x14\x963\x19C{\x8c12w\x02" +
	"\x1b\xd9\xf9]k\xfd\x9c\x93\xea\xba\xce\xd4[)\x83\xb9" +
	"\xae\xbd\x9d\xe7\xfcu\x81k\x02\x95\xa4\xd5\xe6\x85\xe2\xd7" +
	"\xfdV\xd2\xaf\xce\x955y._\xef\\\xd9\xde\xc8\x91" +
	"\x1e={\xf6b0\xb5\xc5#\xddA\xfe\xc3J_E" +
	"\xb9\x81\xc2 \x9b@\x86LN\x0c\xcb\xa8\x80\x0aD\x1e" +
	"\xb9-\x86e\xb6S\xb2rpv\xc0\x0b\xcbT\xe8," +
	"\xc3n?\xb9\xd9\x0b\xcb\xec\xa3\xa3DAr\xb3\xa7\xa0" +
	"\xdc\x0e[k\x92\x9b=\x05\xe5.\xe2Ar\xb3\xa7\xa0" +
	"\xdc\x0f\xcf\xd6$7{\x0a\xca#\xf03\xc62\x87\x90" +
	"?%\x86e\x9e\xa4\xf6\xfbI\xcc\xbe\x82\xf2\x02\xf1\x97" +
	"\x90\xbf\x0e\x82\x82\xf2\x1a\xb538R\xe5\x1d\xea~\x83" +
	"\xdas\x02\xf9\xfb A\xcc\x18S\xcb\xf5\x16jFr" +
	"r\xa6\x82n\x172TN\xf7}x%\xdb\xcb\xaae" +
	"\xef\x1aUa\xe7\xe9IF9\x87\xf40Y\xb3\xea\xe1" +
	"\xb5,V\x93\xe6\xe4\xe2\x01\x16+\x17\xca\xa5\xd3,]" +
	"\x09-U/\xb5\xa7G\x13}m\x8d$\xd2e\xd5\x92" +
	"\xed]g\x17\xbaV\x0d\x8e\xd4\x9cIf\xa0\\(C" +
	"\xa9\xe6\x1c\x04n\xf5L\xce\x9950ej%\x16\xb3" +
	"\xfdd%\xe7\x80\xe79\xe8\xdf\xee\xb7 \xea\x16\x111" +
	"\xb5\xe7\xfa\x9a\x14\x1e\xff\xf3K\xa1q1\x85\xc75\x18" +
	"\x95\xfe\xd0hM\x06\x8fk3*)\xca\xa4\x19A\xbe" +
	"\xd9\xcf\xecA\xe5>d\xe1\xccA\x9e\xf33{p\xe6" +
	"\x10\x0f2x\"n:\xbfF\x99\x19A\x06O\xd4M" +
	"\xe7\xdfN<\xc8\xe0\xa1\xcc\x1e\x9cQ\xc4\xa7\x90\xdf\xec" +
	"g\xf60\xa6\xdc\x18BUw?\xf2\x03\x94\xd9#9" +
	"#\xfbN\xe2\x94y\xf3\x1ce\xf6\xc8\xce\xc8~\x86\xda" +
	"O\x99.')\xb3'\xe4\xa8\xde\xbf\xa4v\xbe\x8f\xbc" +
	")\x8c\xbaw\xd8\xd1\xbd\xc3t\xd8\xbf\xc9O\xe58/" +
	"\xe2\xe8\xde\x0b\xc3\xdf\xf3>\x02@\x87\xfdcQG\xf5" +
	"^\x13F\x95\xbf\x1b\xf9f\xe4-MN\xc0\xe8::" +
	"tO\x87\xf7\xa7\x90\xc7\x9b\x9dL\xcar\xd8\xf2\x0e\xe3" +
	"\xd3\xe1\xfaY\xd3\x9cL\xca\xdb\xc3\x0fz\x87\xeb\x0f\"" +
	"W\xa6;\xf1\xa2G\xe8\xb0\xfc!\xe4\xc7\xe8k\x05M" +
	"N\xbc\xe8\x05\xba\xef1\xe4\xc7\xe9c\x05\xcd\x8e\xbe\xfd" +
	"*\xb5\xf38\xf2\xb7\xe8c\x05\xd3\x9c\x80\xd1\x1b\xe1\x0f" +
	"\xd04A\xfe!}\xac`\xba\x130:E\xfcc\xe4" +
	"\xa1\x88\x04\xf193\x9c\x80\x11D\xb0?\x9b\"2d" +
	"\x12\xc8\xe7\xcet\x02F\xf1\xc8\xae\x9a\xe0\xe2\xbc\xf3\x9c" +
	"\x80\xd1\\\x0a\x9c\x05\xc1\xc5\x0bcN\xc0h1\xc5\xbb" +
	"\x96 _\x89|~\x8b\x130\xea\x88|\xab&\x88\xb8" +
	"\x00\x9c\xcc\x9e\xfa \xe2E3\x9c\x88\xd1 \x05/)" +
	"\x88\x98G\xde:\xd3\x89\x18\xf1\xc8\xcb^\xacp?\xf2" +
	"\x8b\xcfs\"F\xfb(`\xb7\x1f\xf9C\xc8\x17\xc6\x9d" +
	"\xd4\x9e\xefP\xf0\xf2\x01\xe4\x07\x91/\x9a\xe5\xa4\xf6<" +
	"\x12\xb9\xbe&Px\x89\xe2D\x8c~@A\xd0C\xc8" +
	"\x9fB\xde\x96p\"FO\x12?\x8c\xfc9\xe4\x8bg" +
	";\x11\xa3g\x88\x07\x01\xc4/\x81\x131z\x81\xea\x7f" +
	"\x1e\xf9+\x11I\xf8\x96\x8b<\x18\x84,r\xbc\x94\xb5" +
	"\xb4\xa2\x9b\xb5\xee\xd1\"\x9a\x0a\x86\xa62A\x09,\xb8" +
	"f\x11\xb8vQ\xad\xff\xcfU\xf4\x07X+\x05\x11\x04" +
	"\xb3\x83>\x982\xccZ\xe9\xecy\x10\xa7\xb0/o\xc7" +
	"\x06\xb1\x186)p\xe8a\x1d\\\x9bd\xb1\xbc=\xd2" +
	"\xd1\x18w\xd6\xe0L\x91g%\\\x0bS\xea\xd4hC" +
	"\xc7\xa5\xe7-\x97\xe8\x84\xa1Mnu\xcd\x98\xec5\xa3" +
	"<\xf0\x0f7ryg\xb8\x01\xbc\x94\xe5h\x9d\xd1\xc3" +
	"6\x96\xc5\x0d\xa7O\xad\xe8\xac\x95\x0e\x11\x9cV\x95\x1b" +
	"\xdb\x00o\xb3\x92-^/\x93S+:^\x0c\xf9Q" +
	"\xbe\xbd\xacY<Vh\xe0\xe7v=\x9a\x19 '\xe8" +
	"X\xdeJ:\x89\xbc\xa7\xf9\xc3=\x97\xabk\xa2\xaa\x8c" +
	"5t\x99\x7f=\xbb\x8e\xb5:\xbe\xd0F\xc5c\xbc\x00" +
	"\x9eV\x13\xcd\x94\x0b\xf5B;\xb8c\x0eH\xcepp" +
	"\x1a^p\x8e\xda\xd6\x89\xe6\xb9jg\xca\x85A\xf0\xbe" +
	"\xb9\x9442\xb6j\x05\xc3\xe44\x81\x98\xd1/X\x8b" +
	"^ \xe0\xf3\xfc\xc1\xe3|R\xc3\xd7&\x954[\xdb" +
	"\xc1G\xf2j\xa9\xa1\x1c7r\x19\xdc\xc4\xa5Z)\xdb" +
	"\x8a\x8aR\x13\x96Y\xb2\x07T\xcb9\xb9/d\xf1R" +
	"A\x1f\xcf\x83j9%\x82\"\xa1\x9b;\xa9\x91\xe0\xb4" +
	"\xb2\x7f*Y4Kbb\xb0\xe5\x1a\xfa`Z\x15\x0a" +
	"\xfe\x08{v\xdd\x19\x0c\xb3Rs\x06\xc3u\x0f\x96\xa4" +
	"u\xa65bi\x05\xd5\xaa\x90\x17R8\xff\xe3\x7ff" +
	"\xd3\xf5\x80\x8a\x97dx\xd64r\xeeE\x90\xfb\xfc\x8b" +
	"`\x9di\xf5\x96m[\x93\x8d\xc93Ks\xd5\xd2+" +
	"\xa3|\x02\\\x8b\xd3\xcb\x93[B\xb9P|\x820\x93" +
	"\xa7\x8au'\xb7\xb0\x97\xfaX\x8c\xef\xb8\xb6_\x8c\x03" +
	"6\xc2\x05u\xaa\x11\xde\xa9\x196\xb7z-&\x9b\xc5" +
	"\xd3\x8c\xd0\xb3[}\xde\xc9\xc9\x82j\xb7\xd2\xc9I\xd4" +
	"d\xda|\xf3\xe2\x97h\xcf\xbd#C\xfaC\xc1\xbc8" +
	"\x856\xc7\xfb2\xa4?\x16\xcc\x8b\x8f\xd0\xc8;)C" +
	"\xfaS\xe1\x94\xd1'h\xb6~(\xc3\xa8\xa0\x98\xc7?" +
	"C\xc9\x8fq\xd3\x13\xd5r\x004Z>E\x9d@\xd4" +
	"\xca\xc3\xf0XM\x92\x96\xa7\x95\xc7I+\x0f\x92\xae<" +
	"\xad|\x01Y\x03~\x12U\xd4\x0a\xce/\xb5Zj." +
	"0r\x92\xf4\xcb\xb7\xc2b\xb6\xf0\xe1\xba$\xfe\x08D" +
	"\xf78?\xdb\x85\x93\x0a\x86\xae\xd9\x13&\x90);a" +
	"\xa9\xad\xd9\x9a\xa8\xa3W.y\xe5T\xdc\xb9\x92\x09\xe7" +
	"\x00:\xb3\xa6\x91\xe5\xe0\xf9\xaf\xbeP\xca\x12\xbe\xb8\xc0" +
	"\x152\xc6\xd8\xb9\xb8\xa9;\x1b\xd9\x84\xab\x02\xc36Z" +
	"\x0c\xb6\x9f\xd6\xa2j\x09]E\xbf\xda\xbfHN\x95\xe6" +
	"\x9d\xb1\xa8\xf3P\x0f\xf8:\xf2\xbb0Z\xf3e\x08O" +
	"G>\x85\xe3 \xf3>\xf2\x8f\xc1\xd5\x91\x01\x94\x8f\xe0" +
	"\xde\x9a\x0fCx\xd9\xef@n_\xff\xc3\x10~\xf6\xfb" +
	"L:m\x14|\x01\xc2\xcb~_@<\xf8\xd2\x83\x97" +
	"\xfd\xbe\x82\xbe\x00\xb1\x1c\xf9\x95\x92\xa0#_N\xf5\x07" +
	"_zh\x92\x9cq\xd6C\xa7\x9c\xfa\x90\x8fH\xeeQ" +
	"\xd8f\xc6\xbaR\x92\x04\x8ce\xc6\xb0`\x0b\xf9\xa7e" +
	"GI\xbe\x81\xfc\xd9\x81G~z\xc8Q\x925:v" +
	"\xa5#\x9f\"\xfft\xd41\xff\xca\x12>\xf0\x14\xf2\x9b" +
	"\xe9\xd3\x13M\x8e\x92|#=\xc0~\xe4\x07\xe8\xd3\x13" +
	"\xe0\xa4\xbf\xdfI~\xee\xc0Q\x1f\x03'\xfd\xfd\x1e\xe2" +
	"w#\x7f\x88>=!9J\xf2w\xe8\x13\x19\x0f " +
	"?\x88<\xee8\xa7\x95G\xa4\x0f\xc4c]\xb8\x03Z" +
	"v\x9fj3h\xf0\xc1\xc4=\xdc\xc8\xf55\xfc\x94\"" +
	"}\xf1\xc6\x9c\xe4\x06x~8y\xbd\x81kS\x98\x16" +
	"'\xf7\x98\xea\x04hY\xcdF\x89$\x8a\x88\x12\xbc\xc0" +
	"\xadIrC\xaf\xd3M3Gz\x8aa[\xa6.7" +
	"\x96\xf2\x8e\x804\x92\xa2m\xea\xeb\x9a\xce\xa2\xba\x88\xcb" +
	"%Ng\x0e\xc1\xfb\x0ab\xd2\xf9\x0c\xa2\xbf\x84\xaae" +
	"\xdbD\x0e\xde\xe7\x11c\xee\xb7\xee\xfc\x0f\xa9\xbb\x0f[" +
	".\xf1\xe1\x94f\xa4d\xcd\xe0\x96\xaa\xbb\x11\xd6\x92f" +
	"L\xa6\xb8\x9d7s\x81\xd7\xd1Hi\x14\x80\x95\xb0\x9c" +
	"[\xbe\x1e\xc6\xa0\xa5\xbab\xf3\xa1w?\xf8\x9do\xfc" +
	"\xd8\xefB7,\x05^\\\xca\xff\xd6\x9e\xff]\xe8\xe0" +
	"\xfe\xb4\xa9\x81\xb7\xab\xc9\xb9\xd2\xe9\xcf)\x09\x87+\xc7" +
	",mrR\xe6V\xd0\xb0ra\x9c[\xeb'Xr" +
	"H\xadp\x8b\xe2Q\xe1h\x82\xf6\xe2\x0a\xb7\xc6\xf2\x1a" +
	"Kf\xb7\x19\xbeZP\xfb\x05\"\x1c$#\x1b\x07Y" +
	"\x8cB\x00^(kkY\xd7T\xa3O\x95*\xfe\xd9" +
	"N\xa7kZ\xa9o<\xb9\xff\x17\x00\x00\xff\xff\x0d3" +
	"\xe9\xfc"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_eef9ddc7a345de6d,
		Nodes: []uint64{
			0x80d5a7b782142e87,
			0x81b8ffeeb01d76f7,
			0x8491dc2c2f94f1d1,
			0x8890f17a143c6896,
			0x8ac5cfb21988c168,
			0x990bdcf2be83b604,
			0xa74f5574681f9d55,
			0xb3e73f8c19afd787,
			0xb42137d4b8ba3ef6,
			0xb599bbd2f1465f9c,
			0xb87956e2953771db,
			0xc0ff4a277ca4be0a,
			0xc1092d6c4c110e29,
			0xc281c6e5be483337,
			0xc5cb65e585742338,
			0xc5f724bd00c2f628,
			0xc8aeb5222ac5ef40,
			0xcdff1b0306ea58cf,
			0xce5b0091fd9acb21,
			0xcf0f425c8bd69fa2,
			0xd11f8d1479e2f010,
			0xd2d587c796186e8b,
			0xd9ed2c1c754d683e,
			0xdbfe301c0ddefe4e,
			0xde7576c640b5ad18,
			0xe4d6d0d9ae1553da,
			0xe68d439455fd9cce,
			0xe82d760b257daddb,
			0xea9236083718fdc2,
			0xee0b04cc3f52f33c,
			0xf0c41d021228d929,
			0xf206f12e39ab7f9b,
			0xf246442c7aee0af5,
			0xf95db11410e33efc,
			0xffac0fa5c7156a5d,
		},
		Compressed: true,
	})
}
