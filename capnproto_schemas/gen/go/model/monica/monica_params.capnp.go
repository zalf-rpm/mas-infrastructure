// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	climate "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	math "math"
)

type CropSpec capnp.Struct

// CropSpec_TypeID is the unique identifier for the type CropSpec.
const CropSpec_TypeID = 0xa74f5574681f9d55

func NewCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec(st), err
}

func NewRootCropSpec(s *capnp.Segment) (CropSpec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropSpec(st), err
}

func ReadRootCropSpec(msg *capnp.Message) (CropSpec, error) {
	root, err := msg.Root()
	return CropSpec(root.Struct()), err
}

func (s CropSpec) String() string {
	str, _ := text.Marshal(0xa74f5574681f9d55, capnp.Struct(s))
	return str
}

func (s CropSpec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropSpec) DecodeFromPtr(p capnp.Ptr) CropSpec {
	return CropSpec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropSpec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropSpec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropSpec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropSpec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropSpec) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CropParameters(p.Struct()), err
}

func (s CropSpec) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropSpec) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropSpec) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropSpec) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropResidueParameters(p.Struct()), err
}

func (s CropSpec) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropSpec) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropSpec) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropSpec_List is a list of CropSpec.
type CropSpec_List = capnp.StructList[CropSpec]

// NewCropSpec creates a new list of CropSpec.
func NewCropSpec_List(s *capnp.Segment, sz int32) (CropSpec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CropSpec](l), err
}

// CropSpec_Future is a wrapper for a CropSpec promised by a client call.
type CropSpec_Future struct{ *capnp.Future }

func (f CropSpec_Future) Struct() (CropSpec, error) {
	p, err := f.Future.Ptr()
	return CropSpec(p.Struct()), err
}
func (p CropSpec_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p CropSpec_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(1, nil)}
}

type CropParameters capnp.Struct

// CropParameters_TypeID is the unique identifier for the type CropParameters.
const CropParameters_TypeID = 0x8ac5cfb21988c168

func NewCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters(st), err
}

func NewRootCropParameters(s *capnp.Segment) (CropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return CropParameters(st), err
}

func ReadRootCropParameters(msg *capnp.Message) (CropParameters, error) {
	root, err := msg.Root()
	return CropParameters(root.Struct()), err
}

func (s CropParameters) String() string {
	str, _ := text.Marshal(0x8ac5cfb21988c168, capnp.Struct(s))
	return str
}

func (s CropParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropParameters) DecodeFromPtr(p capnp.Ptr) CropParameters {
	return CropParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropParameters) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SpeciesParameters(p.Struct()), err
}

func (s CropParameters) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropParameters) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropParameters) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropParameters) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CultivarParameters(p.Struct()), err
}

func (s CropParameters) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropParameters) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropParameters) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropParameters_List is a list of CropParameters.
type CropParameters_List = capnp.StructList[CropParameters]

// NewCropParameters creates a new list of CropParameters.
func NewCropParameters_List(s *capnp.Segment, sz int32) (CropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[CropParameters](l), err
}

// CropParameters_Future is a wrapper for a CropParameters promised by a client call.
type CropParameters_Future struct{ *capnp.Future }

func (f CropParameters_Future) Struct() (CropParameters, error) {
	p, err := f.Future.Ptr()
	return CropParameters(p.Struct()), err
}
func (p CropParameters_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p CropParameters_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(1, nil)}
}

type SpeciesParameters capnp.Struct

// SpeciesParameters_TypeID is the unique identifier for the type SpeciesParameters.
const SpeciesParameters_TypeID = 0xd2d587c796186e8b

func NewSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters(st), err
}

func NewRootSpeciesParameters(s *capnp.Segment) (SpeciesParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10})
	return SpeciesParameters(st), err
}

func ReadRootSpeciesParameters(msg *capnp.Message) (SpeciesParameters, error) {
	root, err := msg.Root()
	return SpeciesParameters(root.Struct()), err
}

func (s SpeciesParameters) String() string {
	str, _ := text.Marshal(0xd2d587c796186e8b, capnp.Struct(s))
	return str
}

func (s SpeciesParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SpeciesParameters) DecodeFromPtr(p capnp.Ptr) SpeciesParameters {
	return SpeciesParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SpeciesParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SpeciesParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SpeciesParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SpeciesParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SpeciesParameters) SpeciesId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SpeciesParameters) HasSpeciesId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SpeciesParameters) SpeciesIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SpeciesParameters) SetSpeciesId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SpeciesParameters) CarboxylationPathway() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s SpeciesParameters) SetCarboxylationPathway(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s SpeciesParameters) DefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SpeciesParameters) SetDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SpeciesParameters) PartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SpeciesParameters) SetPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SpeciesParameters) InitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SpeciesParameters) SetInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SpeciesParameters) LuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SpeciesParameters) SetLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SpeciesParameters) MaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SpeciesParameters) SetMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SpeciesParameters) SetStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SpeciesParameters) StageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SpeciesParameters) SetStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SpeciesParameters) SetMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SpeciesParameters) SetMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SpeciesParameters) OptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SpeciesParameters) SetOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SpeciesParameters) MaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SpeciesParameters) SetMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SpeciesParameters) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SpeciesParameters) SetNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SpeciesParameters) SetNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SpeciesParameters) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SpeciesParameters) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SpeciesParameters) DevelopmentAccelerationByNitrogenStress() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SpeciesParameters) SetDevelopmentAccelerationByNitrogenStress(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SpeciesParameters) FieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x3ff0000000000000)
}

func (s SpeciesParameters) SetFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SpeciesParameters) AssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SpeciesParameters) SetAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SpeciesParameters) BaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SpeciesParameters) SetBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewBaseTemperature sets the baseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) OrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SpeciesParameters) SetOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewOrganMaintenanceRespiration sets the organMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) OrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SpeciesParameters) SetOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOrganGrowthRespiration sets the organGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SpeciesParameters) SetStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewStageMaxRootNConcentration sets the stageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) InitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SpeciesParameters) SetInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewInitialOrganBiomass sets the initialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) CriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SpeciesParameters) SetCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCriticalOxygenContent sets the criticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StageMobilFromStorageCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SpeciesParameters) HasStageMobilFromStorageCoeff() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SpeciesParameters) SetStageMobilFromStorageCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewStageMobilFromStorageCoeff sets the stageMobilFromStorageCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SpeciesParameters) NewStageMobilFromStorageCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) AbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.BitList(p.List()), err
}

func (s SpeciesParameters) HasAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SpeciesParameters) SetAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAbovegroundOrgan sets the abovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) StorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.BitList(p.List()), err
}

func (s SpeciesParameters) HasStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SpeciesParameters) SetStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewStorageOrgan sets the storageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s SpeciesParameters) NewStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SpeciesParameters) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SpeciesParameters) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SpeciesParameters) TargetNSamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SpeciesParameters) SetTargetNSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SpeciesParameters) TargetN30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SpeciesParameters) SetTargetN30(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SpeciesParameters) MaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SpeciesParameters) SetMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SpeciesParameters) RootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SpeciesParameters) SetRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SpeciesParameters) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SpeciesParameters) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SpeciesParameters) RootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SpeciesParameters) SetRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SpeciesParameters) MinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SpeciesParameters) SetMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SpeciesParameters) InitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SpeciesParameters) SetInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SpeciesParameters) RootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SpeciesParameters) SetRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SpeciesParameters) RootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SpeciesParameters) SetRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SpeciesParameters) SpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s SpeciesParameters) SetSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s SpeciesParameters) StageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s SpeciesParameters) SetStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s SpeciesParameters) LimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SpeciesParameters) SetLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SpeciesParameters) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(240)
}

func (s SpeciesParameters) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(240, v)
}

func (s SpeciesParameters) DroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SpeciesParameters) SetDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SpeciesParameters) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfMonos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264) ^ 0x3fe0000000000000)
}

func (s SpeciesParameters) SetEfMonos(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SpeciesParameters) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SpeciesParameters) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SpeciesParameters) VcMax25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SpeciesParameters) SetVcMax25(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SpeciesParameters) Aekc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x40f0108000000000)
}

func (s SpeciesParameters) SetAekc(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x40f0108000000000)
}

func (s SpeciesParameters) Aeko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296) ^ 0x4095e00000000000)
}

func (s SpeciesParameters) SetAeko(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v)^0x4095e00000000000)
}

func (s SpeciesParameters) Aevc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304) ^ 0x40f0cc0000000000)
}

func (s SpeciesParameters) SetAevc(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v)^0x40f0cc0000000000)
}

func (s SpeciesParameters) Kc25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312) ^ 0x407cc00000000000)
}

func (s SpeciesParameters) SetKc25(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v)^0x407cc00000000000)
}

func (s SpeciesParameters) Ko25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320) ^ 0x4074a00000000000)
}

func (s SpeciesParameters) SetKo25(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v)^0x4074a00000000000)
}

func (s SpeciesParameters) TransitionStageLeafExp() int16 {
	return int16(capnp.Struct(s).Uint16(242) ^ 65535)
}

func (s SpeciesParameters) SetTransitionStageLeafExp(v int16) {
	capnp.Struct(s).SetUint16(242, uint16(v)^65535)
}

// SpeciesParameters_List is a list of SpeciesParameters.
type SpeciesParameters_List = capnp.StructList[SpeciesParameters]

// NewSpeciesParameters creates a new list of SpeciesParameters.
func NewSpeciesParameters_List(s *capnp.Segment, sz int32) (SpeciesParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 328, PointerCount: 10}, sz)
	return capnp.StructList[SpeciesParameters](l), err
}

// SpeciesParameters_Future is a wrapper for a SpeciesParameters promised by a client call.
type SpeciesParameters_Future struct{ *capnp.Future }

func (f SpeciesParameters_Future) Struct() (SpeciesParameters, error) {
	p, err := f.Future.Ptr()
	return SpeciesParameters(p.Struct()), err
}

type CultivarParameters capnp.Struct

// CultivarParameters_TypeID is the unique identifier for the type CultivarParameters.
const CultivarParameters_TypeID = 0xf206f12e39ab7f9b

func NewCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters(st), err
}

func NewRootCultivarParameters(s *capnp.Segment) (CultivarParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15})
	return CultivarParameters(st), err
}

func ReadRootCultivarParameters(msg *capnp.Message) (CultivarParameters, error) {
	root, err := msg.Root()
	return CultivarParameters(root.Struct()), err
}

func (s CultivarParameters) String() string {
	str, _ := text.Marshal(0xf206f12e39ab7f9b, capnp.Struct(s))
	return str
}

func (s CultivarParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CultivarParameters) DecodeFromPtr(p capnp.Ptr) CultivarParameters {
	return CultivarParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CultivarParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CultivarParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CultivarParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CultivarParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CultivarParameters) CultivarId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CultivarParameters) HasCultivarId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CultivarParameters) CultivarIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetCultivarId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CultivarParameters) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CultivarParameters) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CultivarParameters) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CultivarParameters) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CultivarParameters) Perennial() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CultivarParameters) SetPerennial(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CultivarParameters) MaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CultivarParameters) SetMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CultivarParameters) MaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CultivarParameters) SetMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CultivarParameters) ResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s CultivarParameters) SetResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s CultivarParameters) Lt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CultivarParameters) SetLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CultivarParameters) SetCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CultivarParameters) CropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CultivarParameters) SetCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CultivarParameters) CropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CultivarParameters) SetCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CultivarParameters) AssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.PointerList(p.List()), err
}

func (s CultivarParameters) HasAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CultivarParameters) SetAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewAssimilatePartitioningCoeff sets the assimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.PointerList(p.List()), err
}

func (s CultivarParameters) HasOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CultivarParameters) SetOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewOrganSenescenceRate sets the organSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CultivarParameters) NewOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CultivarParameters) BaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CultivarParameters) SetBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewBaseDaylength sets the baseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CultivarParameters) SetOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewOptimumTemperature sets the optimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s CultivarParameters) DaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CultivarParameters) SetDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewDaylengthRequirement sets the daylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CultivarParameters) DroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CultivarParameters) SetDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewDroughtStressThreshold sets the droughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CultivarParameters) SpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CultivarParameters) SetSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSpecificLeafArea sets the specificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CultivarParameters) StageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CultivarParameters) SetStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewStageKcFactor sets the stageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CultivarParameters) StageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CultivarParameters) SetStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewStageTemperatureSum sets the stageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s CultivarParameters) VernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CultivarParameters) HasVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CultivarParameters) SetVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewVernalisationRequirement sets the vernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CultivarParameters) NewVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CultivarParameters) HeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CultivarParameters) SetHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CultivarParameters) HeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CultivarParameters) SetHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CultivarParameters) CriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CultivarParameters) SetCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CultivarParameters) BeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CultivarParameters) SetBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CultivarParameters) EndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CultivarParameters) SetEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CultivarParameters) FrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CultivarParameters) SetFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CultivarParameters) FrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CultivarParameters) SetFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CultivarParameters) LowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CultivarParameters) SetLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CultivarParameters) RespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s CultivarParameters) SetRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s CultivarParameters) LatestHarvestDoy() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 65535)
}

func (s CultivarParameters) SetLatestHarvestDoy(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^65535)
}

func (s CultivarParameters) OrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CultivarParameters) SetOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewOrganIdsForPrimaryYield sets the organIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CultivarParameters) SetOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewOrganIdsForSecondaryYield sets the organIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CultivarParameters) OrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return YieldComponent_List(p.List()), err
}

func (s CultivarParameters) HasOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CultivarParameters) SetOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewOrganIdsForCutting sets the organIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CultivarParameters) NewOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CultivarParameters) EarlyRefLeafExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x4028000000000000)
}

func (s CultivarParameters) SetEarlyRefLeafExp(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x4028000000000000)
}

func (s CultivarParameters) RefLeafExp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4034000000000000)
}

func (s CultivarParameters) SetRefLeafExp(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4034000000000000)
}

func (s CultivarParameters) MinTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CultivarParameters) SetMinTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CultivarParameters) OptTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CultivarParameters) SetOptTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CultivarParameters) MaxTempDevWE() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s CultivarParameters) SetMaxTempDevWE(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s CultivarParameters) WinterCrop() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CultivarParameters) SetWinterCrop(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// CultivarParameters_List is a list of CultivarParameters.
type CultivarParameters_List = capnp.StructList[CultivarParameters]

// NewCultivarParameters creates a new list of CultivarParameters.
func NewCultivarParameters_List(s *capnp.Segment, sz int32) (CultivarParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 176, PointerCount: 15}, sz)
	return capnp.StructList[CultivarParameters](l), err
}

// CultivarParameters_Future is a wrapper for a CultivarParameters promised by a client call.
type CultivarParameters_Future struct{ *capnp.Future }

func (f CultivarParameters_Future) Struct() (CultivarParameters, error) {
	p, err := f.Future.Ptr()
	return CultivarParameters(p.Struct()), err
}

type YieldComponent capnp.Struct

// YieldComponent_TypeID is the unique identifier for the type YieldComponent.
const YieldComponent_TypeID = 0xdbfe301c0ddefe4e

func NewYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent(st), err
}

func NewRootYieldComponent(s *capnp.Segment) (YieldComponent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return YieldComponent(st), err
}

func ReadRootYieldComponent(msg *capnp.Message) (YieldComponent, error) {
	root, err := msg.Root()
	return YieldComponent(root.Struct()), err
}

func (s YieldComponent) String() string {
	str, _ := text.Marshal(0xdbfe301c0ddefe4e, capnp.Struct(s))
	return str
}

func (s YieldComponent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (YieldComponent) DecodeFromPtr(p capnp.Ptr) YieldComponent {
	return YieldComponent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s YieldComponent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s YieldComponent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s YieldComponent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s YieldComponent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s YieldComponent) OrganId() int64 {
	return int64(capnp.Struct(s).Uint64(0) ^ 18446744073709551615)
}

func (s YieldComponent) SetOrganId(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v)^18446744073709551615)
}

func (s YieldComponent) YieldPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s YieldComponent) SetYieldPercentage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s YieldComponent) YieldDryMatter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s YieldComponent) SetYieldDryMatter(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// YieldComponent_List is a list of YieldComponent.
type YieldComponent_List = capnp.StructList[YieldComponent]

// NewYieldComponent creates a new list of YieldComponent.
func NewYieldComponent_List(s *capnp.Segment, sz int32) (YieldComponent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[YieldComponent](l), err
}

// YieldComponent_Future is a wrapper for a YieldComponent promised by a client call.
type YieldComponent_Future struct{ *capnp.Future }

func (f YieldComponent_Future) Struct() (YieldComponent, error) {
	p, err := f.Future.Ptr()
	return YieldComponent(p.Struct()), err
}

type AutomaticHarvestParameters capnp.Struct

// AutomaticHarvestParameters_TypeID is the unique identifier for the type AutomaticHarvestParameters.
const AutomaticHarvestParameters_TypeID = 0xc5f724bd00c2f628

func NewAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters(st), err
}

func NewRootAutomaticHarvestParameters(s *capnp.Segment) (AutomaticHarvestParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return AutomaticHarvestParameters(st), err
}

func ReadRootAutomaticHarvestParameters(msg *capnp.Message) (AutomaticHarvestParameters, error) {
	root, err := msg.Root()
	return AutomaticHarvestParameters(root.Struct()), err
}

func (s AutomaticHarvestParameters) String() string {
	str, _ := text.Marshal(0xc5f724bd00c2f628, capnp.Struct(s))
	return str
}

func (s AutomaticHarvestParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AutomaticHarvestParameters) DecodeFromPtr(p capnp.Ptr) AutomaticHarvestParameters {
	return AutomaticHarvestParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AutomaticHarvestParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AutomaticHarvestParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AutomaticHarvestParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AutomaticHarvestParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AutomaticHarvestParameters) HarvestTime() AutomaticHarvestParameters_HarvestTime {
	return AutomaticHarvestParameters_HarvestTime(capnp.Struct(s).Uint16(0) ^ 1)
}

func (s AutomaticHarvestParameters) SetHarvestTime(v AutomaticHarvestParameters_HarvestTime) {
	capnp.Struct(s).SetUint16(0, uint16(v)^1)
}

func (s AutomaticHarvestParameters) LatestHarvestDOY() int16 {
	return int16(capnp.Struct(s).Uint16(2) ^ 65535)
}

func (s AutomaticHarvestParameters) SetLatestHarvestDOY(v int16) {
	capnp.Struct(s).SetUint16(2, uint16(v)^65535)
}

// AutomaticHarvestParameters_List is a list of AutomaticHarvestParameters.
type AutomaticHarvestParameters_List = capnp.StructList[AutomaticHarvestParameters]

// NewAutomaticHarvestParameters creates a new list of AutomaticHarvestParameters.
func NewAutomaticHarvestParameters_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[AutomaticHarvestParameters](l), err
}

// AutomaticHarvestParameters_Future is a wrapper for a AutomaticHarvestParameters promised by a client call.
type AutomaticHarvestParameters_Future struct{ *capnp.Future }

func (f AutomaticHarvestParameters_Future) Struct() (AutomaticHarvestParameters, error) {
	p, err := f.Future.Ptr()
	return AutomaticHarvestParameters(p.Struct()), err
}

type AutomaticHarvestParameters_HarvestTime uint16

// AutomaticHarvestParameters_HarvestTime_TypeID is the unique identifier for the type AutomaticHarvestParameters_HarvestTime.
const AutomaticHarvestParameters_HarvestTime_TypeID = 0x990bdcf2be83b604

// Values of AutomaticHarvestParameters_HarvestTime.
const (
	AutomaticHarvestParameters_HarvestTime_maturity AutomaticHarvestParameters_HarvestTime = 0
	AutomaticHarvestParameters_HarvestTime_unknown  AutomaticHarvestParameters_HarvestTime = 1
)

// String returns the enum's constant name.
func (c AutomaticHarvestParameters_HarvestTime) String() string {
	switch c {
	case AutomaticHarvestParameters_HarvestTime_maturity:
		return "maturity"
	case AutomaticHarvestParameters_HarvestTime_unknown:
		return "unknown"

	default:
		return ""
	}
}

// AutomaticHarvestParameters_HarvestTimeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AutomaticHarvestParameters_HarvestTimeFromString(c string) AutomaticHarvestParameters_HarvestTime {
	switch c {
	case "maturity":
		return AutomaticHarvestParameters_HarvestTime_maturity
	case "unknown":
		return AutomaticHarvestParameters_HarvestTime_unknown

	default:
		return 0
	}
}

type AutomaticHarvestParameters_HarvestTime_List = capnp.EnumList[AutomaticHarvestParameters_HarvestTime]

func NewAutomaticHarvestParameters_HarvestTime_List(s *capnp.Segment, sz int32) (AutomaticHarvestParameters_HarvestTime_List, error) {
	return capnp.NewEnumList[AutomaticHarvestParameters_HarvestTime](s, sz)
}

type NMinCropParameters capnp.Struct

// NMinCropParameters_TypeID is the unique identifier for the type NMinCropParameters.
const NMinCropParameters_TypeID = 0xea9236083718fdc2

func NewNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters(st), err
}

func NewRootNMinCropParameters(s *capnp.Segment) (NMinCropParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinCropParameters(st), err
}

func ReadRootNMinCropParameters(msg *capnp.Message) (NMinCropParameters, error) {
	root, err := msg.Root()
	return NMinCropParameters(root.Struct()), err
}

func (s NMinCropParameters) String() string {
	str, _ := text.Marshal(0xea9236083718fdc2, capnp.Struct(s))
	return str
}

func (s NMinCropParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NMinCropParameters) DecodeFromPtr(p capnp.Ptr) NMinCropParameters {
	return NMinCropParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NMinCropParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NMinCropParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NMinCropParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NMinCropParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NMinCropParameters) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NMinCropParameters) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NMinCropParameters) SetNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NMinCropParameters) NTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s NMinCropParameters) SetNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// NMinCropParameters_List is a list of NMinCropParameters.
type NMinCropParameters_List = capnp.StructList[NMinCropParameters]

// NewNMinCropParameters creates a new list of NMinCropParameters.
func NewNMinCropParameters_List(s *capnp.Segment, sz int32) (NMinCropParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[NMinCropParameters](l), err
}

// NMinCropParameters_Future is a wrapper for a NMinCropParameters promised by a client call.
type NMinCropParameters_Future struct{ *capnp.Future }

func (f NMinCropParameters_Future) Struct() (NMinCropParameters, error) {
	p, err := f.Future.Ptr()
	return NMinCropParameters(p.Struct()), err
}

type NMinApplicationParameters capnp.Struct

// NMinApplicationParameters_TypeID is the unique identifier for the type NMinApplicationParameters.
const NMinApplicationParameters_TypeID = 0xde7576c640b5ad18

func NewNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters(st), err
}

func NewRootNMinApplicationParameters(s *capnp.Segment) (NMinApplicationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return NMinApplicationParameters(st), err
}

func ReadRootNMinApplicationParameters(msg *capnp.Message) (NMinApplicationParameters, error) {
	root, err := msg.Root()
	return NMinApplicationParameters(root.Struct()), err
}

func (s NMinApplicationParameters) String() string {
	str, _ := text.Marshal(0xde7576c640b5ad18, capnp.Struct(s))
	return str
}

func (s NMinApplicationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (NMinApplicationParameters) DecodeFromPtr(p capnp.Ptr) NMinApplicationParameters {
	return NMinApplicationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s NMinApplicationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s NMinApplicationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s NMinApplicationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s NMinApplicationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s NMinApplicationParameters) Min() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s NMinApplicationParameters) SetMin(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s NMinApplicationParameters) Max() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s NMinApplicationParameters) SetMax(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s NMinApplicationParameters) DelayInDays() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s NMinApplicationParameters) SetDelayInDays(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

// NMinApplicationParameters_List is a list of NMinApplicationParameters.
type NMinApplicationParameters_List = capnp.StructList[NMinApplicationParameters]

// NewNMinApplicationParameters creates a new list of NMinApplicationParameters.
func NewNMinApplicationParameters_List(s *capnp.Segment, sz int32) (NMinApplicationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[NMinApplicationParameters](l), err
}

// NMinApplicationParameters_Future is a wrapper for a NMinApplicationParameters promised by a client call.
type NMinApplicationParameters_Future struct{ *capnp.Future }

func (f NMinApplicationParameters_Future) Struct() (NMinApplicationParameters, error) {
	p, err := f.Future.Ptr()
	return NMinApplicationParameters(p.Struct()), err
}

type CropResidueParameters capnp.Struct

// CropResidueParameters_TypeID is the unique identifier for the type CropResidueParameters.
const CropResidueParameters_TypeID = 0x8491dc2c2f94f1d1

func NewCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters(st), err
}

func NewRootCropResidueParameters(s *capnp.Segment) (CropResidueParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return CropResidueParameters(st), err
}

func ReadRootCropResidueParameters(msg *capnp.Message) (CropResidueParameters, error) {
	root, err := msg.Root()
	return CropResidueParameters(root.Struct()), err
}

func (s CropResidueParameters) String() string {
	str, _ := text.Marshal(0x8491dc2c2f94f1d1, capnp.Struct(s))
	return str
}

func (s CropResidueParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropResidueParameters) DecodeFromPtr(p capnp.Ptr) CropResidueParameters {
	return CropResidueParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropResidueParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropResidueParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropResidueParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropResidueParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropResidueParameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s CropResidueParameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropResidueParameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s CropResidueParameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropResidueParameters) Species() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropResidueParameters) HasSpecies() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropResidueParameters) SpeciesBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetSpecies(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropResidueParameters) ResidueType() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropResidueParameters) HasResidueType() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropResidueParameters) ResidueTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropResidueParameters) SetResidueType(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// CropResidueParameters_List is a list of CropResidueParameters.
type CropResidueParameters_List = capnp.StructList[CropResidueParameters]

// NewCropResidueParameters creates a new list of CropResidueParameters.
func NewCropResidueParameters_List(s *capnp.Segment, sz int32) (CropResidueParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[CropResidueParameters](l), err
}

// CropResidueParameters_Future is a wrapper for a CropResidueParameters promised by a client call.
type CropResidueParameters_Future struct{ *capnp.Future }

func (f CropResidueParameters_Future) Struct() (CropResidueParameters, error) {
	p, err := f.Future.Ptr()
	return CropResidueParameters(p.Struct()), err
}
func (p CropResidueParameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilParameters capnp.Struct

// SoilParameters_TypeID is the unique identifier for the type SoilParameters.
const SoilParameters_TypeID = 0xb42137d4b8ba3ef6

func NewSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters(st), err
}

func NewRootSoilParameters(s *capnp.Segment) (SoilParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1})
	return SoilParameters(st), err
}

func ReadRootSoilParameters(msg *capnp.Message) (SoilParameters, error) {
	root, err := msg.Root()
	return SoilParameters(root.Struct()), err
}

func (s SoilParameters) String() string {
	str, _ := text.Marshal(0xb42137d4b8ba3ef6, capnp.Struct(s))
	return str
}

func (s SoilParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilParameters) DecodeFromPtr(p capnp.Ptr) SoilParameters {
	return SoilParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilParameters) SoilSandContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilSandContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilClayContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilClayContent(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilpH() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x401b99999999999a)
}

func (s SoilParameters) SetSoilpH(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x401b99999999999a)
}

func (s SoilParameters) SoilStoneContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilParameters) SetSoilStoneContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilParameters) Lambda() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetLambda(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) FieldCapacity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetFieldCapacity(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) Saturation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSaturation(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) PermanentWiltingPoint() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetPermanentWiltingPoint(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilTexture() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilParameters) HasSoilTexture() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilParameters) SoilTextureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilParameters) SetSoilTexture(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilParameters) SoilAmmonium() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SetSoilAmmonium(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f40624dd2f1a9fc)
}

func (s SoilParameters) SoilNitrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f747ae147ae147b)
}

func (s SoilParameters) SetSoilNitrate(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f747ae147ae147b)
}

func (s SoilParameters) SoilCNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x4024000000000000)
}

func (s SoilParameters) SetSoilCNRatio(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x4024000000000000)
}

func (s SoilParameters) SoilMoisturePercentFC() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x4059000000000000)
}

func (s SoilParameters) SetSoilMoisturePercentFC(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x4059000000000000)
}

func (s SoilParameters) SoilRawDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilRawDensity(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilBulkDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilBulkDensity(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicCarbon() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicCarbon(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0xbff0000000000000)
}

func (s SoilParameters) SoilOrganicMatter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0xbff0000000000000)
}

func (s SoilParameters) SetSoilOrganicMatter(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0xbff0000000000000)
}

// SoilParameters_List is a list of SoilParameters.
type SoilParameters_List = capnp.StructList[SoilParameters]

// NewSoilParameters creates a new list of SoilParameters.
func NewSoilParameters_List(s *capnp.Segment, sz int32) (SoilParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 1}, sz)
	return capnp.StructList[SoilParameters](l), err
}

// SoilParameters_Future is a wrapper for a SoilParameters promised by a client call.
type SoilParameters_Future struct{ *capnp.Future }

func (f SoilParameters_Future) Struct() (SoilParameters, error) {
	p, err := f.Future.Ptr()
	return SoilParameters(p.Struct()), err
}

type AutomaticIrrigationParameters capnp.Struct

// AutomaticIrrigationParameters_TypeID is the unique identifier for the type AutomaticIrrigationParameters.
const AutomaticIrrigationParameters_TypeID = 0x8890f17a143c6896

func NewAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters(st), err
}

func NewRootAutomaticIrrigationParameters(s *capnp.Segment) (AutomaticIrrigationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return AutomaticIrrigationParameters(st), err
}

func ReadRootAutomaticIrrigationParameters(msg *capnp.Message) (AutomaticIrrigationParameters, error) {
	root, err := msg.Root()
	return AutomaticIrrigationParameters(root.Struct()), err
}

func (s AutomaticIrrigationParameters) String() string {
	str, _ := text.Marshal(0x8890f17a143c6896, capnp.Struct(s))
	return str
}

func (s AutomaticIrrigationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AutomaticIrrigationParameters) DecodeFromPtr(p capnp.Ptr) AutomaticIrrigationParameters {
	return AutomaticIrrigationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AutomaticIrrigationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AutomaticIrrigationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AutomaticIrrigationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AutomaticIrrigationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AutomaticIrrigationParameters) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s AutomaticIrrigationParameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AutomaticIrrigationParameters) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s AutomaticIrrigationParameters) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s AutomaticIrrigationParameters) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x4031000000000000)
}

func (s AutomaticIrrigationParameters) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x4031000000000000)
}

func (s AutomaticIrrigationParameters) Threshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fd6666666666666)
}

func (s AutomaticIrrigationParameters) SetThreshold(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fd6666666666666)
}

// AutomaticIrrigationParameters_List is a list of AutomaticIrrigationParameters.
type AutomaticIrrigationParameters_List = capnp.StructList[AutomaticIrrigationParameters]

// NewAutomaticIrrigationParameters creates a new list of AutomaticIrrigationParameters.
func NewAutomaticIrrigationParameters_List(s *capnp.Segment, sz int32) (AutomaticIrrigationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[AutomaticIrrigationParameters](l), err
}

// AutomaticIrrigationParameters_Future is a wrapper for a AutomaticIrrigationParameters promised by a client call.
type AutomaticIrrigationParameters_Future struct{ *capnp.Future }

func (f AutomaticIrrigationParameters_Future) Struct() (AutomaticIrrigationParameters, error) {
	p, err := f.Future.Ptr()
	return AutomaticIrrigationParameters(p.Struct()), err
}
func (p AutomaticIrrigationParameters_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SiteParameters capnp.Struct

// SiteParameters_TypeID is the unique identifier for the type SiteParameters.
const SiteParameters_TypeID = 0xb599bbd2f1465f9c

func NewSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters(st), err
}

func NewRootSiteParameters(s *capnp.Segment) (SiteParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1})
	return SiteParameters(st), err
}

func ReadRootSiteParameters(msg *capnp.Message) (SiteParameters, error) {
	root, err := msg.Root()
	return SiteParameters(root.Struct()), err
}

func (s SiteParameters) String() string {
	str, _ := text.Marshal(0xb599bbd2f1465f9c, capnp.Struct(s))
	return str
}

func (s SiteParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SiteParameters) DecodeFromPtr(p capnp.Ptr) SiteParameters {
	return SiteParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SiteParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SiteParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SiteParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SiteParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SiteParameters) Latitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x404a400000000000)
}

func (s SiteParameters) SetLatitude(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x404a400000000000)
}

func (s SiteParameters) Slope() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3f847ae147ae147b)
}

func (s SiteParameters) SetSlope(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SiteParameters) HeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4049000000000000)
}

func (s SiteParameters) SetHeightNN(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4049000000000000)
}

func (s SiteParameters) GroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4051800000000000)
}

func (s SiteParameters) SetGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4051800000000000)
}

func (s SiteParameters) SoilCNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x4024000000000000)
}

func (s SiteParameters) SetSoilCNRatio(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x4024000000000000)
}

func (s SiteParameters) DrainageCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SiteParameters) SetDrainageCoeff(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SiteParameters) VqNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x403e000000000000)
}

func (s SiteParameters) SetVqNDeposition(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x403e000000000000)
}

func (s SiteParameters) MaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4000000000000000)
}

func (s SiteParameters) SetMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4000000000000000)
}

func (s SiteParameters) ImpenetrableLayerDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0xbff0000000000000)
}

func (s SiteParameters) SetImpenetrableLayerDepth(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0xbff0000000000000)
}

func (s SiteParameters) SoilSpecificHumusBalanceCorrection() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SiteParameters) SetSoilSpecificHumusBalanceCorrection(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SiteParameters) SoilParameters() (SoilParameters_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilParameters_List(p.List()), err
}

func (s SiteParameters) HasSoilParameters() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SiteParameters) SetSoilParameters(v SoilParameters_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSoilParameters sets the soilParameters field to a newly
// allocated SoilParameters_List, preferring placement in s's segment.
func (s SiteParameters) NewSoilParameters(n int32) (SoilParameters_List, error) {
	l, err := NewSoilParameters_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilParameters_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SiteParameters_List is a list of SiteParameters.
type SiteParameters_List = capnp.StructList[SiteParameters]

// NewSiteParameters creates a new list of SiteParameters.
func NewSiteParameters_List(s *capnp.Segment, sz int32) (SiteParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 1}, sz)
	return capnp.StructList[SiteParameters](l), err
}

// SiteParameters_Future is a wrapper for a SiteParameters promised by a client call.
type SiteParameters_Future struct{ *capnp.Future }

func (f SiteParameters_Future) Struct() (SiteParameters, error) {
	p, err := f.Future.Ptr()
	return SiteParameters(p.Struct()), err
}

type EnvironmentParameters capnp.Struct

// EnvironmentParameters_TypeID is the unique identifier for the type EnvironmentParameters.
const EnvironmentParameters_TypeID = 0xc0ff4a277ca4be0a

func NewEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters(st), err
}

func NewRootEnvironmentParameters(s *capnp.Segment) (EnvironmentParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2})
	return EnvironmentParameters(st), err
}

func ReadRootEnvironmentParameters(msg *capnp.Message) (EnvironmentParameters, error) {
	root, err := msg.Root()
	return EnvironmentParameters(root.Struct()), err
}

func (s EnvironmentParameters) String() string {
	str, _ := text.Marshal(0xc0ff4a277ca4be0a, capnp.Struct(s))
	return str
}

func (s EnvironmentParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvironmentParameters) DecodeFromPtr(p capnp.Ptr) EnvironmentParameters {
	return EnvironmentParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvironmentParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvironmentParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvironmentParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvironmentParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvironmentParameters) Albedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) SetAlbedo(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fcd70a3d70a3d71)
}

func (s EnvironmentParameters) Rcp() climate.RCP {
	return climate.RCP(capnp.Struct(s).Uint16(66))
}

func (s EnvironmentParameters) SetRcp(v climate.RCP) {
	capnp.Struct(s).SetUint16(66, uint16(v))
}

func (s EnvironmentParameters) AtmosphericCO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s EnvironmentParameters) SetAtmosphericCO2(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericCO2s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return EnvironmentParameters_YearToValue_List(p.List()), err
}

func (s EnvironmentParameters) HasAtmosphericCO2s() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvironmentParameters) SetAtmosphericCO2s(v EnvironmentParameters_YearToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAtmosphericCO2s sets the atmosphericCO2s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericCO2s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s EnvironmentParameters) AtmosphericO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s EnvironmentParameters) SetAtmosphericO3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s EnvironmentParameters) AtmosphericO3s() (EnvironmentParameters_YearToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters_YearToValue_List(p.List()), err
}

func (s EnvironmentParameters) HasAtmosphericO3s() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s EnvironmentParameters) SetAtmosphericO3s(v EnvironmentParameters_YearToValue_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAtmosphericO3s sets the atmosphericO3s field to a newly
// allocated EnvironmentParameters_YearToValue_List, preferring placement in s's segment.
func (s EnvironmentParameters) NewAtmosphericO3s(n int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := NewEnvironmentParameters_YearToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return EnvironmentParameters_YearToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s EnvironmentParameters) WindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4000000000000000)
}

func (s EnvironmentParameters) SetWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4000000000000000)
}

func (s EnvironmentParameters) LeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s EnvironmentParameters) SetLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s EnvironmentParameters) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s EnvironmentParameters) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s EnvironmentParameters) MaxGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x4032000000000000)
}

func (s EnvironmentParameters) SetMaxGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x4032000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4034000000000000)
}

func (s EnvironmentParameters) SetMinGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4034000000000000)
}

func (s EnvironmentParameters) MinGroundwaterDepthMonth() uint8 {
	return capnp.Struct(s).Uint8(64) ^ 3
}

func (s EnvironmentParameters) SetMinGroundwaterDepthMonth(v uint8) {
	capnp.Struct(s).SetUint8(64, v^3)
}

// EnvironmentParameters_List is a list of EnvironmentParameters.
type EnvironmentParameters_List = capnp.StructList[EnvironmentParameters]

// NewEnvironmentParameters creates a new list of EnvironmentParameters.
func NewEnvironmentParameters_List(s *capnp.Segment, sz int32) (EnvironmentParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 2}, sz)
	return capnp.StructList[EnvironmentParameters](l), err
}

// EnvironmentParameters_Future is a wrapper for a EnvironmentParameters promised by a client call.
type EnvironmentParameters_Future struct{ *capnp.Future }

func (f EnvironmentParameters_Future) Struct() (EnvironmentParameters, error) {
	p, err := f.Future.Ptr()
	return EnvironmentParameters(p.Struct()), err
}

type EnvironmentParameters_YearToValue capnp.Struct

// EnvironmentParameters_YearToValue_TypeID is the unique identifier for the type EnvironmentParameters_YearToValue.
const EnvironmentParameters_YearToValue_TypeID = 0xe68d439455fd9cce

func NewEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue(st), err
}

func NewRootEnvironmentParameters_YearToValue(s *capnp.Segment) (EnvironmentParameters_YearToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return EnvironmentParameters_YearToValue(st), err
}

func ReadRootEnvironmentParameters_YearToValue(msg *capnp.Message) (EnvironmentParameters_YearToValue, error) {
	root, err := msg.Root()
	return EnvironmentParameters_YearToValue(root.Struct()), err
}

func (s EnvironmentParameters_YearToValue) String() string {
	str, _ := text.Marshal(0xe68d439455fd9cce, capnp.Struct(s))
	return str
}

func (s EnvironmentParameters_YearToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvironmentParameters_YearToValue) DecodeFromPtr(p capnp.Ptr) EnvironmentParameters_YearToValue {
	return EnvironmentParameters_YearToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvironmentParameters_YearToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvironmentParameters_YearToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvironmentParameters_YearToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvironmentParameters_YearToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvironmentParameters_YearToValue) Year() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s EnvironmentParameters_YearToValue) SetYear(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s EnvironmentParameters_YearToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s EnvironmentParameters_YearToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// EnvironmentParameters_YearToValue_List is a list of EnvironmentParameters_YearToValue.
type EnvironmentParameters_YearToValue_List = capnp.StructList[EnvironmentParameters_YearToValue]

// NewEnvironmentParameters_YearToValue creates a new list of EnvironmentParameters_YearToValue.
func NewEnvironmentParameters_YearToValue_List(s *capnp.Segment, sz int32) (EnvironmentParameters_YearToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[EnvironmentParameters_YearToValue](l), err
}

// EnvironmentParameters_YearToValue_Future is a wrapper for a EnvironmentParameters_YearToValue promised by a client call.
type EnvironmentParameters_YearToValue_Future struct{ *capnp.Future }

func (f EnvironmentParameters_YearToValue_Future) Struct() (EnvironmentParameters_YearToValue, error) {
	p, err := f.Future.Ptr()
	return EnvironmentParameters_YearToValue(p.Struct()), err
}

type MeasuredGroundwaterTableInformation capnp.Struct

// MeasuredGroundwaterTableInformation_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation.
const MeasuredGroundwaterTableInformation_TypeID = 0xc1092d6c4c110e29

func NewMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation(st), err
}

func NewRootMeasuredGroundwaterTableInformation(s *capnp.Segment) (MeasuredGroundwaterTableInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation(st), err
}

func ReadRootMeasuredGroundwaterTableInformation(msg *capnp.Message) (MeasuredGroundwaterTableInformation, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation(root.Struct()), err
}

func (s MeasuredGroundwaterTableInformation) String() string {
	str, _ := text.Marshal(0xc1092d6c4c110e29, capnp.Struct(s))
	return str
}

func (s MeasuredGroundwaterTableInformation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MeasuredGroundwaterTableInformation) DecodeFromPtr(p capnp.Ptr) MeasuredGroundwaterTableInformation {
	return MeasuredGroundwaterTableInformation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MeasuredGroundwaterTableInformation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MeasuredGroundwaterTableInformation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MeasuredGroundwaterTableInformation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MeasuredGroundwaterTableInformation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MeasuredGroundwaterTableInformation) GroundwaterInformationAvailable() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInformationAvailable(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s MeasuredGroundwaterTableInformation) GroundwaterInfo() (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MeasuredGroundwaterTableInformation_DateToValue_List(p.List()), err
}

func (s MeasuredGroundwaterTableInformation) HasGroundwaterInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation) SetGroundwaterInfo(v MeasuredGroundwaterTableInformation_DateToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewGroundwaterInfo sets the groundwaterInfo field to a newly
// allocated MeasuredGroundwaterTableInformation_DateToValue_List, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation) NewGroundwaterInfo(n int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := NewMeasuredGroundwaterTableInformation_DateToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return MeasuredGroundwaterTableInformation_DateToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// MeasuredGroundwaterTableInformation_List is a list of MeasuredGroundwaterTableInformation.
type MeasuredGroundwaterTableInformation_List = capnp.StructList[MeasuredGroundwaterTableInformation]

// NewMeasuredGroundwaterTableInformation creates a new list of MeasuredGroundwaterTableInformation.
func NewMeasuredGroundwaterTableInformation_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MeasuredGroundwaterTableInformation](l), err
}

// MeasuredGroundwaterTableInformation_Future is a wrapper for a MeasuredGroundwaterTableInformation promised by a client call.
type MeasuredGroundwaterTableInformation_Future struct{ *capnp.Future }

func (f MeasuredGroundwaterTableInformation_Future) Struct() (MeasuredGroundwaterTableInformation, error) {
	p, err := f.Future.Ptr()
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

type MeasuredGroundwaterTableInformation_DateToValue capnp.Struct

// MeasuredGroundwaterTableInformation_DateToValue_TypeID is the unique identifier for the type MeasuredGroundwaterTableInformation_DateToValue.
const MeasuredGroundwaterTableInformation_DateToValue_TypeID = 0x81b8ffeeb01d76f7

func NewMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue(st), err
}

func NewRootMeasuredGroundwaterTableInformation_DateToValue(s *capnp.Segment) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MeasuredGroundwaterTableInformation_DateToValue(st), err
}

func ReadRootMeasuredGroundwaterTableInformation_DateToValue(msg *capnp.Message) (MeasuredGroundwaterTableInformation_DateToValue, error) {
	root, err := msg.Root()
	return MeasuredGroundwaterTableInformation_DateToValue(root.Struct()), err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) String() string {
	str, _ := text.Marshal(0x81b8ffeeb01d76f7, capnp.Struct(s))
	return str
}

func (s MeasuredGroundwaterTableInformation_DateToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MeasuredGroundwaterTableInformation_DateToValue) DecodeFromPtr(p capnp.Ptr) MeasuredGroundwaterTableInformation_DateToValue {
	return MeasuredGroundwaterTableInformation_DateToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MeasuredGroundwaterTableInformation_DateToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MeasuredGroundwaterTableInformation_DateToValue) Date() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) HasDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MeasuredGroundwaterTableInformation_DateToValue) NewDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MeasuredGroundwaterTableInformation_DateToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s MeasuredGroundwaterTableInformation_DateToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// MeasuredGroundwaterTableInformation_DateToValue_List is a list of MeasuredGroundwaterTableInformation_DateToValue.
type MeasuredGroundwaterTableInformation_DateToValue_List = capnp.StructList[MeasuredGroundwaterTableInformation_DateToValue]

// NewMeasuredGroundwaterTableInformation_DateToValue creates a new list of MeasuredGroundwaterTableInformation_DateToValue.
func NewMeasuredGroundwaterTableInformation_DateToValue_List(s *capnp.Segment, sz int32) (MeasuredGroundwaterTableInformation_DateToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[MeasuredGroundwaterTableInformation_DateToValue](l), err
}

// MeasuredGroundwaterTableInformation_DateToValue_Future is a wrapper for a MeasuredGroundwaterTableInformation_DateToValue promised by a client call.
type MeasuredGroundwaterTableInformation_DateToValue_Future struct{ *capnp.Future }

func (f MeasuredGroundwaterTableInformation_DateToValue_Future) Struct() (MeasuredGroundwaterTableInformation_DateToValue, error) {
	p, err := f.Future.Ptr()
	return MeasuredGroundwaterTableInformation_DateToValue(p.Struct()), err
}
func (p MeasuredGroundwaterTableInformation_DateToValue_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}

type SimulationParameters capnp.Struct

// SimulationParameters_TypeID is the unique identifier for the type SimulationParameters.
const SimulationParameters_TypeID = 0xffac0fa5c7156a5d

func NewSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters(st), err
}

func NewRootSimulationParameters(s *capnp.Segment) (SimulationParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5})
	return SimulationParameters(st), err
}

func ReadRootSimulationParameters(msg *capnp.Message) (SimulationParameters, error) {
	root, err := msg.Root()
	return SimulationParameters(root.Struct()), err
}

func (s SimulationParameters) String() string {
	str, _ := text.Marshal(0xffac0fa5c7156a5d, capnp.Struct(s))
	return str
}

func (s SimulationParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SimulationParameters) DecodeFromPtr(p capnp.Ptr) SimulationParameters {
	return SimulationParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SimulationParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SimulationParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SimulationParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SimulationParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SimulationParameters) StartDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s SimulationParameters) HasStartDate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SimulationParameters) SetStartDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewStartDate sets the startDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewStartDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) EndDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s SimulationParameters) HasEndDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SimulationParameters) SetEndDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEndDate sets the endDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s SimulationParameters) NewEndDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) NitrogenResponseOn() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s SimulationParameters) SetNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s SimulationParameters) WaterDeficitResponseOn() bool {
	return !capnp.Struct(s).Bit(1)
}

func (s SimulationParameters) SetWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(1, !v)
}

func (s SimulationParameters) EmergenceFloodingControlOn() bool {
	return !capnp.Struct(s).Bit(2)
}

func (s SimulationParameters) SetEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, !v)
}

func (s SimulationParameters) EmergenceMoistureControlOn() bool {
	return !capnp.Struct(s).Bit(3)
}

func (s SimulationParameters) SetEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, !v)
}

func (s SimulationParameters) FrostKillOn() bool {
	return !capnp.Struct(s).Bit(4)
}

func (s SimulationParameters) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(4, !v)
}

func (s SimulationParameters) UseAutomaticIrrigation() bool {
	return capnp.Struct(s).Bit(5)
}

func (s SimulationParameters) SetUseAutomaticIrrigation(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s SimulationParameters) AutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return AutomaticIrrigationParameters(p.Struct()), err
}

func (s SimulationParameters) HasAutoIrrigationParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SimulationParameters) SetAutoIrrigationParams(v AutomaticIrrigationParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewAutoIrrigationParams sets the autoIrrigationParams field to a newly
// allocated AutomaticIrrigationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewAutoIrrigationParams() (AutomaticIrrigationParameters, error) {
	ss, err := NewAutomaticIrrigationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticIrrigationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) UseNMinMineralFertilisingMethod() bool {
	return capnp.Struct(s).Bit(6)
}

func (s SimulationParameters) SetUseNMinMineralFertilisingMethod(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s SimulationParameters) NMinFertiliserPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SimulationParameters) HasNMinFertiliserPartition() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SimulationParameters) SetNMinFertiliserPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewNMinFertiliserPartition sets the nMinFertiliserPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinFertiliserPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) NMinApplicationParams() (NMinApplicationParameters, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return NMinApplicationParameters(p.Struct()), err
}

func (s SimulationParameters) HasNMinApplicationParams() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SimulationParameters) SetNMinApplicationParams(v NMinApplicationParameters) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewNMinApplicationParams sets the nMinApplicationParams field to a newly
// allocated NMinApplicationParameters struct, preferring placement in s's segment.
func (s SimulationParameters) NewNMinApplicationParams() (NMinApplicationParameters, error) {
	ss, err := NewNMinApplicationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return NMinApplicationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SimulationParameters) UseSecondaryYields() bool {
	return !capnp.Struct(s).Bit(7)
}

func (s SimulationParameters) SetUseSecondaryYields(v bool) {
	capnp.Struct(s).SetBit(7, !v)
}

func (s SimulationParameters) UseAutomaticHarvestTrigger() bool {
	return capnp.Struct(s).Bit(8)
}

func (s SimulationParameters) SetUseAutomaticHarvestTrigger(v bool) {
	capnp.Struct(s).SetBit(8, v)
}

func (s SimulationParameters) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2) ^ 20
}

func (s SimulationParameters) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v^20)
}

func (s SimulationParameters) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fb999999999999a)
}

func (s SimulationParameters) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SimulationParameters) StartPVIndex() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SimulationParameters) SetStartPVIndex(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SimulationParameters) JulianDayAutomaticFertilising() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s SimulationParameters) SetJulianDayAutomaticFertilising(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

// SimulationParameters_List is a list of SimulationParameters.
type SimulationParameters_List = capnp.StructList[SimulationParameters]

// NewSimulationParameters creates a new list of SimulationParameters.
func NewSimulationParameters_List(s *capnp.Segment, sz int32) (SimulationParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 5}, sz)
	return capnp.StructList[SimulationParameters](l), err
}

// SimulationParameters_Future is a wrapper for a SimulationParameters promised by a client call.
type SimulationParameters_Future struct{ *capnp.Future }

func (f SimulationParameters_Future) Struct() (SimulationParameters, error) {
	p, err := f.Future.Ptr()
	return SimulationParameters(p.Struct()), err
}
func (p SimulationParameters_Future) StartDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p SimulationParameters_Future) EndDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p SimulationParameters_Future) AutoIrrigationParams() AutomaticIrrigationParameters_Future {
	return AutomaticIrrigationParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SimulationParameters_Future) NMinFertiliserPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(3, nil)}
}
func (p SimulationParameters_Future) NMinApplicationParams() NMinApplicationParameters_Future {
	return NMinApplicationParameters_Future{Future: p.Future.Field(4, nil)}
}

type CropModuleParameters capnp.Struct

// CropModuleParameters_TypeID is the unique identifier for the type CropModuleParameters.
const CropModuleParameters_TypeID = 0xe4d6d0d9ae1553da

func NewCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters(st), err
}

func NewRootCropModuleParameters(s *capnp.Segment) (CropModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0})
	return CropModuleParameters(st), err
}

func ReadRootCropModuleParameters(msg *capnp.Message) (CropModuleParameters, error) {
	root, err := msg.Root()
	return CropModuleParameters(root.Struct()), err
}

func (s CropModuleParameters) String() string {
	str, _ := text.Marshal(0xe4d6d0d9ae1553da, capnp.Struct(s))
	return str
}

func (s CropModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleParameters) DecodeFromPtr(p capnp.Ptr) CropModuleParameters {
	return CropModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleParameters) CanopyReflectionCoefficient() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s CropModuleParameters) SetCanopyReflectionCoefficient(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleParameters) SetReferenceMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceLeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleParameters) SetReferenceLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter1(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s CropModuleParameters) MaintenanceRespirationParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleParameters) SetMaintenanceRespirationParameter2(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleParameters) SetMinimumNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleParameters) MinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleParameters) SetMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleParameters) ReferenceAlbedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleParameters) SetReferenceAlbedo(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleParameters) StomataConductanceAlpha() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleParameters) SetStomataConductanceAlpha(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleParameters) SaturationBeta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleParameters) SetSaturationBeta(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleParameters) SetGrowthRespirationRedux(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleParameters) MaxCropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleParameters) SetMaxCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleParameters) SetGrowthRespirationParameter1(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleParameters) GrowthRespirationParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleParameters) SetGrowthRespirationParameter2(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleParameters) Tortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleParameters) SetTortuosity(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleParameters) AdjustRootDepthForSoilProps() bool {
	return capnp.Struct(s).Bit(960)
}

func (s CropModuleParameters) SetAdjustRootDepthForSoilProps(v bool) {
	capnp.Struct(s).SetBit(960, v)
}

func (s CropModuleParameters) ExperimentalEnablePhenologyWangEngelTemperatureResponse() bool {
	return capnp.Struct(s).Bit(961)
}

func (s CropModuleParameters) SetExperimentalEnablePhenologyWangEngelTemperatureResponse(v bool) {
	capnp.Struct(s).SetBit(961, v)
}

func (s CropModuleParameters) ExperimentalEnablePhotosynthesisWangEngelTemperatureResponse() bool {
	return capnp.Struct(s).Bit(962)
}

func (s CropModuleParameters) SetExperimentalEnablePhotosynthesisWangEngelTemperatureResponse(v bool) {
	capnp.Struct(s).SetBit(962, v)
}

func (s CropModuleParameters) ExperimentalEnableHourlyFvCBPhotosynthesis() bool {
	return capnp.Struct(s).Bit(963)
}

func (s CropModuleParameters) SetExperimentalEnableHourlyFvCBPhotosynthesis(v bool) {
	capnp.Struct(s).SetBit(963, v)
}

func (s CropModuleParameters) ExperimentalEnableTResponseLeafExpansion() bool {
	return capnp.Struct(s).Bit(964)
}

func (s CropModuleParameters) SetExperimentalEnableTResponseLeafExpansion(v bool) {
	capnp.Struct(s).SetBit(964, v)
}

func (s CropModuleParameters) ExperimentalDisableDailyRootBiomassToSoil() bool {
	return capnp.Struct(s).Bit(965)
}

func (s CropModuleParameters) SetExperimentalDisableDailyRootBiomassToSoil(v bool) {
	capnp.Struct(s).SetBit(965, v)
}

func (s CropModuleParameters) EnableVernalisationFactorFix() bool {
	return capnp.Struct(s).Bit(966)
}

func (s CropModuleParameters) SetEnableVernalisationFactorFix(v bool) {
	capnp.Struct(s).SetBit(966, v)
}

// CropModuleParameters_List is a list of CropModuleParameters.
type CropModuleParameters_List = capnp.StructList[CropModuleParameters]

// NewCropModuleParameters creates a new list of CropModuleParameters.
func NewCropModuleParameters_List(s *capnp.Segment, sz int32) (CropModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 0}, sz)
	return capnp.StructList[CropModuleParameters](l), err
}

// CropModuleParameters_Future is a wrapper for a CropModuleParameters promised by a client call.
type CropModuleParameters_Future struct{ *capnp.Future }

func (f CropModuleParameters_Future) Struct() (CropModuleParameters, error) {
	p, err := f.Future.Ptr()
	return CropModuleParameters(p.Struct()), err
}

type SoilMoistureModuleParameters capnp.Struct

// SoilMoistureModuleParameters_TypeID is the unique identifier for the type SoilMoistureModuleParameters.
const SoilMoistureModuleParameters_TypeID = 0xcdff1b0306ea58cf

func NewSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters(st), err
}

func NewRootSoilMoistureModuleParameters(s *capnp.Segment) (SoilMoistureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0})
	return SoilMoistureModuleParameters(st), err
}

func ReadRootSoilMoistureModuleParameters(msg *capnp.Message) (SoilMoistureModuleParameters, error) {
	root, err := msg.Root()
	return SoilMoistureModuleParameters(root.Struct()), err
}

func (s SoilMoistureModuleParameters) String() string {
	str, _ := text.Marshal(0xcdff1b0306ea58cf, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleParameters {
	return SoilMoistureModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleParameters) CriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleParameters) SetCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SaturatedHydraulicConductivity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleParameters) SetSaturatedHydraulicConductivity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleParameters) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilMoistureModuleParameters) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleParameters) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowAccumulationTresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleParameters) SetSnowAccumulationTresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleParameters) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleParameters) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleParameters) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleParameters) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleParameters) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleParameters) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter1(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeParameter2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleParameters) SetRefreezeParameter2(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilMoistureModuleParameters) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowMeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleParameters) SetSnowMeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleParameters) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleParameters) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) EvaporationZeta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleParameters) SetEvaporationZeta(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) XsaCriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleParameters) SetXsaCriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaximumEvaporationImpactDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleParameters) SetMaximumEvaporationImpactDepth(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleParameters) SetMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleParameters) MoistureInitValue() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleParameters) SetMoistureInitValue(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

// SoilMoistureModuleParameters_List is a list of SoilMoistureModuleParameters.
type SoilMoistureModuleParameters_List = capnp.StructList[SoilMoistureModuleParameters]

// NewSoilMoistureModuleParameters creates a new list of SoilMoistureModuleParameters.
func NewSoilMoistureModuleParameters_List(s *capnp.Segment, sz int32) (SoilMoistureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 192, PointerCount: 0}, sz)
	return capnp.StructList[SoilMoistureModuleParameters](l), err
}

// SoilMoistureModuleParameters_Future is a wrapper for a SoilMoistureModuleParameters promised by a client call.
type SoilMoistureModuleParameters_Future struct{ *capnp.Future }

func (f SoilMoistureModuleParameters_Future) Struct() (SoilMoistureModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleParameters(p.Struct()), err
}

type SoilOrganicModuleParameters capnp.Struct

// SoilOrganicModuleParameters_TypeID is the unique identifier for the type SoilOrganicModuleParameters.
const SoilOrganicModuleParameters_TypeID = 0xb3e73f8c19afd787

func NewSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters(st), err
}

func NewRootSoilOrganicModuleParameters(s *capnp.Segment) (SoilOrganicModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1})
	return SoilOrganicModuleParameters(st), err
}

func ReadRootSoilOrganicModuleParameters(msg *capnp.Message) (SoilOrganicModuleParameters, error) {
	root, err := msg.Root()
	return SoilOrganicModuleParameters(root.Struct()), err
}

func (s SoilOrganicModuleParameters) String() string {
	str, _ := text.Marshal(0xb3e73f8c19afd787, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleParameters {
	return SoilOrganicModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleParameters) SomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SetSomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3f068b5cbff47736)
}

func (s SoilOrganicModuleParameters) SomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SetSomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3f22599ed7c6fbd2)
}

func (s SoilOrganicModuleParameters) SmbSlowMaintRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowMaintRateStandard(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastMaintRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastMaintRateStandard(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbSlowDeathRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SetSmbSlowDeathRateStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilOrganicModuleParameters) SmbFastDeathRateStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetSmbFastDeathRateStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3f847ae147ae147b)
}

func (s SoilOrganicModuleParameters) SmbUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetSmbUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetSomSlowUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetSomFastUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) AomSlowUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomSlowUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastUtilizationEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAomFastUtilizationEfficiency(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) AomFastMaxCtoN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x408f400000000000)
}

func (s SoilOrganicModuleParameters) SetAomFastMaxCtoN(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x408f400000000000)
}

func (s SoilOrganicModuleParameters) PartSOMFastToSOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSOMFastToSOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBSlowToSOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBSlowToSOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSMBFastToSOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) SetPartSMBFastToSOMFast(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3f8eb851eb851eb8)
}

func (s SoilOrganicModuleParameters) PartSOMToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) SetPartSOMToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x3f2a36e2eb1c432d)
}

func (s SoilOrganicModuleParameters) CnRatioSMB() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) SetCnRatioSMB(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x401acccccccccccd)
}

func (s SoilOrganicModuleParameters) LimitClayEffect() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) SetLimitClayEffect(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilOrganicModuleParameters) AmmoniaOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetAmmoniaOxidationRateCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) NitriteOxidationRateCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetNitriteOxidationRateCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) TransportRateCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetTransportRateCoeff(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SpecAnaerobDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) SetSpecAnaerobDenitrification(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNO3(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) ImmobilisationRateCoeffNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetImmobilisationRateCoeffNH4(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) Denit1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit1(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SoilOrganicModuleParameters) Denit2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) SetDenit2(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SoilOrganicModuleParameters) Denit3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) SetDenit3(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SoilOrganicModuleParameters) HydrolysisKM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) SetHydrolysisKM(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x3f6b5c7cd898b2ea)
}

func (s SoilOrganicModuleParameters) ActivationEnergy() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232) ^ 0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) SetActivationEnergy(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v)^0x40e4050000000000)
}

func (s SoilOrganicModuleParameters) HydrolysisP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240) ^ 0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP1(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v)^0x3d92bb352c0a2ad3)
}

func (s SoilOrganicModuleParameters) HydrolysisP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248) ^ 0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) SetHydrolysisP2(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v)^0x3d78c5117a7e165e)
}

func (s SoilOrganicModuleParameters) AtmosphericResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256) ^ 0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) SetAtmosphericResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v)^0x3f647ae147ae147b)
}

func (s SoilOrganicModuleParameters) N2oProductionRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264) ^ 0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) SetN2oProductionRate(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v)^0x3fe0000000000000)
}

func (s SoilOrganicModuleParameters) InhibitorNH3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272) ^ 0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) SetInhibitorNH3(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilOrganicModuleParameters) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280) ^ 0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilOrganicModuleParameters) SticsParams() (SticsParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SticsParameters(p.Struct()), err
}

func (s SoilOrganicModuleParameters) HasSticsParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleParameters) SetSticsParams(v SticsParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSticsParams sets the sticsParams field to a newly
// allocated SticsParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleParameters) NewSticsParams() (SticsParameters, error) {
	ss, err := NewSticsParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SticsParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilOrganicModuleParameters_List is a list of SoilOrganicModuleParameters.
type SoilOrganicModuleParameters_List = capnp.StructList[SoilOrganicModuleParameters]

// NewSoilOrganicModuleParameters creates a new list of SoilOrganicModuleParameters.
func NewSoilOrganicModuleParameters_List(s *capnp.Segment, sz int32) (SoilOrganicModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 288, PointerCount: 1}, sz)
	return capnp.StructList[SoilOrganicModuleParameters](l), err
}

// SoilOrganicModuleParameters_Future is a wrapper for a SoilOrganicModuleParameters promised by a client call.
type SoilOrganicModuleParameters_Future struct{ *capnp.Future }

func (f SoilOrganicModuleParameters_Future) Struct() (SoilOrganicModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleParameters(p.Struct()), err
}
func (p SoilOrganicModuleParameters_Future) SticsParams() SticsParameters_Future {
	return SticsParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleParameters capnp.Struct

// SoilTemperatureModuleParameters_TypeID is the unique identifier for the type SoilTemperatureModuleParameters.
const SoilTemperatureModuleParameters_TypeID = 0xf0c41d021228d929

func NewSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters(st), err
}

func NewRootSoilTemperatureModuleParameters(s *capnp.Segment) (SoilTemperatureModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return SoilTemperatureModuleParameters(st), err
}

func ReadRootSoilTemperatureModuleParameters(msg *capnp.Message) (SoilTemperatureModuleParameters, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleParameters(root.Struct()), err
}

func (s SoilTemperatureModuleParameters) String() string {
	str, _ := text.Marshal(0xf0c41d021228d929, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleParameters {
	return SoilTemperatureModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleParameters) NTau() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleParameters) SetNTau(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) InitialSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTemperatureModuleParameters) SetInitialSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) BaseTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTemperatureModuleParameters) SetBaseTemperature(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) QuartzRawDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleParameters) SetQuartzRawDensity(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityAir() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTemperatureModuleParameters) SetDensityAir(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilTemperatureModuleParameters) SetDensityWater(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) DensityHumus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilTemperatureModuleParameters) SetDensityHumus(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityAir() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityAir(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityQuartz() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityQuartz(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityWater(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SpecificHeatCapacityHumus() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilTemperatureModuleParameters) SetSpecificHeatCapacityHumus(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilAlbedo() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilTemperatureModuleParameters) SetSoilAlbedo(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilTemperatureModuleParameters) SoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3fd0000000000000)
}

func (s SoilTemperatureModuleParameters) SetSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3fd0000000000000)
}

// SoilTemperatureModuleParameters_List is a list of SoilTemperatureModuleParameters.
type SoilTemperatureModuleParameters_List = capnp.StructList[SoilTemperatureModuleParameters]

// NewSoilTemperatureModuleParameters creates a new list of SoilTemperatureModuleParameters.
func NewSoilTemperatureModuleParameters_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[SoilTemperatureModuleParameters](l), err
}

// SoilTemperatureModuleParameters_Future is a wrapper for a SoilTemperatureModuleParameters promised by a client call.
type SoilTemperatureModuleParameters_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleParameters_Future) Struct() (SoilTemperatureModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleParameters(p.Struct()), err
}

type SoilTransportModuleParameters capnp.Struct

// SoilTransportModuleParameters_TypeID is the unique identifier for the type SoilTransportModuleParameters.
const SoilTransportModuleParameters_TypeID = 0xc5cb65e585742338

func NewSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters(st), err
}

func NewRootSoilTransportModuleParameters(s *capnp.Segment) (SoilTransportModuleParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return SoilTransportModuleParameters(st), err
}

func ReadRootSoilTransportModuleParameters(msg *capnp.Message) (SoilTransportModuleParameters, error) {
	root, err := msg.Root()
	return SoilTransportModuleParameters(root.Struct()), err
}

func (s SoilTransportModuleParameters) String() string {
	str, _ := text.Marshal(0xc5cb65e585742338, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleParameters) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleParameters {
	return SoilTransportModuleParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleParameters) DispersionLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleParameters) SetDispersionLength(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) Ad() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleParameters) SetAd(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) DiffusionCoefficientStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleParameters) SetDiffusionCoefficientStandard(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleParameters) NDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleParameters) SetNDeposition(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

// SoilTransportModuleParameters_List is a list of SoilTransportModuleParameters.
type SoilTransportModuleParameters_List = capnp.StructList[SoilTransportModuleParameters]

// NewSoilTransportModuleParameters creates a new list of SoilTransportModuleParameters.
func NewSoilTransportModuleParameters_List(s *capnp.Segment, sz int32) (SoilTransportModuleParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[SoilTransportModuleParameters](l), err
}

// SoilTransportModuleParameters_Future is a wrapper for a SoilTransportModuleParameters promised by a client call.
type SoilTransportModuleParameters_Future struct{ *capnp.Future }

func (f SoilTransportModuleParameters_Future) Struct() (SoilTransportModuleParameters, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleParameters(p.Struct()), err
}

type Voc capnp.Struct

// Voc_TypeID is the unique identifier for the type Voc.
const Voc_TypeID = 0xb87956e2953771db

func NewVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc(st), err
}

func NewRootVoc(s *capnp.Segment) (Voc, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Voc(st), err
}

func ReadRootVoc(msg *capnp.Message) (Voc, error) {
	root, err := msg.Root()
	return Voc(root.Struct()), err
}

func (s Voc) String() string {
	str, _ := text.Marshal(0xb87956e2953771db, capnp.Struct(s))
	return str
}

func (s Voc) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc) DecodeFromPtr(p capnp.Ptr) Voc {
	return Voc(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Voc_List is a list of Voc.
type Voc_List = capnp.StructList[Voc]

// NewVoc creates a new list of Voc.
func NewVoc_List(s *capnp.Segment, sz int32) (Voc_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Voc](l), err
}

// Voc_Future is a wrapper for a Voc promised by a client call.
type Voc_Future struct{ *capnp.Future }

func (f Voc_Future) Struct() (Voc, error) {
	p, err := f.Future.Ptr()
	return Voc(p.Struct()), err
}

type Voc_Emissions capnp.Struct

// Voc_Emissions_TypeID is the unique identifier for the type Voc_Emissions.
const Voc_Emissions_TypeID = 0xd9ed2c1c754d683e

func NewVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions(st), err
}

func NewRootVoc_Emissions(s *capnp.Segment) (Voc_Emissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Voc_Emissions(st), err
}

func ReadRootVoc_Emissions(msg *capnp.Message) (Voc_Emissions, error) {
	root, err := msg.Root()
	return Voc_Emissions(root.Struct()), err
}

func (s Voc_Emissions) String() string {
	str, _ := text.Marshal(0xd9ed2c1c754d683e, capnp.Struct(s))
	return str
}

func (s Voc_Emissions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_Emissions) DecodeFromPtr(p capnp.Ptr) Voc_Emissions {
	return Voc_Emissions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_Emissions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_Emissions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_Emissions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_Emissions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_Emissions) SpeciesIdToIsopreneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Voc_Emissions_SpeciesIdToEmission_List(p.List()), err
}

func (s Voc_Emissions) HasSpeciesIdToIsopreneEmission() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Voc_Emissions) SetSpeciesIdToIsopreneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSpeciesIdToIsopreneEmission sets the speciesIdToIsopreneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToIsopreneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Voc_Emissions) SpeciesIdToMonoterpeneEmission() (Voc_Emissions_SpeciesIdToEmission_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Voc_Emissions_SpeciesIdToEmission_List(p.List()), err
}

func (s Voc_Emissions) HasSpeciesIdToMonoterpeneEmission() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Voc_Emissions) SetSpeciesIdToMonoterpeneEmission(v Voc_Emissions_SpeciesIdToEmission_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSpeciesIdToMonoterpeneEmission sets the speciesIdToMonoterpeneEmission field to a newly
// allocated Voc_Emissions_SpeciesIdToEmission_List, preferring placement in s's segment.
func (s Voc_Emissions) NewSpeciesIdToMonoterpeneEmission(n int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := NewVoc_Emissions_SpeciesIdToEmission_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Voc_Emissions_SpeciesIdToEmission_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Voc_Emissions) IsopreneEmission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_Emissions) SetIsopreneEmission(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_Emissions) MonoterpeneEmission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_Emissions) SetMonoterpeneEmission(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_List is a list of Voc_Emissions.
type Voc_Emissions_List = capnp.StructList[Voc_Emissions]

// NewVoc_Emissions creates a new list of Voc_Emissions.
func NewVoc_Emissions_List(s *capnp.Segment, sz int32) (Voc_Emissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Voc_Emissions](l), err
}

// Voc_Emissions_Future is a wrapper for a Voc_Emissions promised by a client call.
type Voc_Emissions_Future struct{ *capnp.Future }

func (f Voc_Emissions_Future) Struct() (Voc_Emissions, error) {
	p, err := f.Future.Ptr()
	return Voc_Emissions(p.Struct()), err
}

type Voc_Emissions_SpeciesIdToEmission capnp.Struct

// Voc_Emissions_SpeciesIdToEmission_TypeID is the unique identifier for the type Voc_Emissions_SpeciesIdToEmission.
const Voc_Emissions_SpeciesIdToEmission_TypeID = 0xd11f8d1479e2f010

func NewVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission(st), err
}

func NewRootVoc_Emissions_SpeciesIdToEmission(s *capnp.Segment) (Voc_Emissions_SpeciesIdToEmission, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_Emissions_SpeciesIdToEmission(st), err
}

func ReadRootVoc_Emissions_SpeciesIdToEmission(msg *capnp.Message) (Voc_Emissions_SpeciesIdToEmission, error) {
	root, err := msg.Root()
	return Voc_Emissions_SpeciesIdToEmission(root.Struct()), err
}

func (s Voc_Emissions_SpeciesIdToEmission) String() string {
	str, _ := text.Marshal(0xd11f8d1479e2f010, capnp.Struct(s))
	return str
}

func (s Voc_Emissions_SpeciesIdToEmission) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_Emissions_SpeciesIdToEmission) DecodeFromPtr(p capnp.Ptr) Voc_Emissions_SpeciesIdToEmission {
	return Voc_Emissions_SpeciesIdToEmission(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_Emissions_SpeciesIdToEmission) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_Emissions_SpeciesIdToEmission) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_Emissions_SpeciesIdToEmission) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_Emissions_SpeciesIdToEmission) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_Emissions_SpeciesIdToEmission) SpeciesId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Voc_Emissions_SpeciesIdToEmission) SetSpeciesId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Voc_Emissions_SpeciesIdToEmission) Emission() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_Emissions_SpeciesIdToEmission) SetEmission(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_Emissions_SpeciesIdToEmission_List is a list of Voc_Emissions_SpeciesIdToEmission.
type Voc_Emissions_SpeciesIdToEmission_List = capnp.StructList[Voc_Emissions_SpeciesIdToEmission]

// NewVoc_Emissions_SpeciesIdToEmission creates a new list of Voc_Emissions_SpeciesIdToEmission.
func NewVoc_Emissions_SpeciesIdToEmission_List(s *capnp.Segment, sz int32) (Voc_Emissions_SpeciesIdToEmission_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_Emissions_SpeciesIdToEmission](l), err
}

// Voc_Emissions_SpeciesIdToEmission_Future is a wrapper for a Voc_Emissions_SpeciesIdToEmission promised by a client call.
type Voc_Emissions_SpeciesIdToEmission_Future struct{ *capnp.Future }

func (f Voc_Emissions_SpeciesIdToEmission_Future) Struct() (Voc_Emissions_SpeciesIdToEmission, error) {
	p, err := f.Future.Ptr()
	return Voc_Emissions_SpeciesIdToEmission(p.Struct()), err
}

type Voc_SpeciesData capnp.Struct

// Voc_SpeciesData_TypeID is the unique identifier for the type Voc_SpeciesData.
const Voc_SpeciesData_TypeID = 0x80d5a7b782142e87

func NewVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData(st), err
}

func NewRootVoc_SpeciesData(s *capnp.Segment) (Voc_SpeciesData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return Voc_SpeciesData(st), err
}

func ReadRootVoc_SpeciesData(msg *capnp.Message) (Voc_SpeciesData, error) {
	root, err := msg.Root()
	return Voc_SpeciesData(root.Struct()), err
}

func (s Voc_SpeciesData) String() string {
	str, _ := text.Marshal(0x80d5a7b782142e87, capnp.Struct(s))
	return str
}

func (s Voc_SpeciesData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_SpeciesData) DecodeFromPtr(p capnp.Ptr) Voc_SpeciesData {
	return Voc_SpeciesData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_SpeciesData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_SpeciesData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_SpeciesData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_SpeciesData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_SpeciesData) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Voc_SpeciesData) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Voc_SpeciesData) EfMonos() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_SpeciesData) SetEfMonos(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_SpeciesData) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_SpeciesData) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_SpeciesData) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_SpeciesData) Theta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x3feccccccccccccd)
}

func (s Voc_SpeciesData) SetTheta(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s Voc_SpeciesData) Fage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetFage(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) CtIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_SpeciesData) SetCtIs(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_SpeciesData) CtMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_SpeciesData) SetCtMt(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_SpeciesData) SetHaIs(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Voc_SpeciesData) HaMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Voc_SpeciesData) SetHaMt(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Voc_SpeciesData) SetDsIs(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Voc_SpeciesData) DsMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Voc_SpeciesData) SetDsMt(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Voc_SpeciesData) HdIs() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdIs(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) HdMt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x41115ee000000000)
}

func (s Voc_SpeciesData) SetHdMt(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x41115ee000000000)
}

func (s Voc_SpeciesData) Hdj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x410adb0000000000)
}

func (s Voc_SpeciesData) SetHdj(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x410adb0000000000)
}

func (s Voc_SpeciesData) Sdj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x4085f80000000000)
}

func (s Voc_SpeciesData) SetSdj(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x4085f80000000000)
}

func (s Voc_SpeciesData) Kc25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x4070400000000000)
}

func (s Voc_SpeciesData) SetKc25(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x4070400000000000)
}

func (s Voc_SpeciesData) Ko25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x4066600000000000)
}

func (s Voc_SpeciesData) SetKo25(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x4066600000000000)
}

func (s Voc_SpeciesData) VcMax25() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4054000000000000)
}

func (s Voc_SpeciesData) SetVcMax25(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4054000000000000)
}

func (s Voc_SpeciesData) Qjvc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x4000000000000000)
}

func (s Voc_SpeciesData) SetQjvc(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x4000000000000000)
}

func (s Voc_SpeciesData) Aekc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x40ecfb8000000000)
}

func (s Voc_SpeciesData) SetAekc(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x40ecfb8000000000)
}

func (s Voc_SpeciesData) Aeko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x40e18d8000000000)
}

func (s Voc_SpeciesData) SetAeko(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x40e18d8000000000)
}

func (s Voc_SpeciesData) Aejm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x40e2110000000000)
}

func (s Voc_SpeciesData) SetAejm(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x40e2110000000000)
}

func (s Voc_SpeciesData) Aevc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x40ec930000000000)
}

func (s Voc_SpeciesData) SetAevc(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x40ec930000000000)
}

func (s Voc_SpeciesData) SlaMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x4034000000000000)
}

func (s Voc_SpeciesData) SetSlaMin(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x4034000000000000)
}

func (s Voc_SpeciesData) ScaleI() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleI(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) ScaleM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x3ff0000000000000)
}

func (s Voc_SpeciesData) SetScaleM(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x3ff0000000000000)
}

func (s Voc_SpeciesData) MFol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s Voc_SpeciesData) SetMFol(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s Voc_SpeciesData) Lai() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s Voc_SpeciesData) SetLai(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s Voc_SpeciesData) Sla() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s Voc_SpeciesData) SetSla(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

// Voc_SpeciesData_List is a list of Voc_SpeciesData.
type Voc_SpeciesData_List = capnp.StructList[Voc_SpeciesData]

// NewVoc_SpeciesData creates a new list of Voc_SpeciesData.
func NewVoc_SpeciesData_List(s *capnp.Segment, sz int32) (Voc_SpeciesData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return capnp.StructList[Voc_SpeciesData](l), err
}

// Voc_SpeciesData_Future is a wrapper for a Voc_SpeciesData promised by a client call.
type Voc_SpeciesData_Future struct{ *capnp.Future }

func (f Voc_SpeciesData_Future) Struct() (Voc_SpeciesData, error) {
	p, err := f.Future.Ptr()
	return Voc_SpeciesData(p.Struct()), err
}

type Voc_CPData capnp.Struct

// Voc_CPData_TypeID is the unique identifier for the type Voc_CPData.
const Voc_CPData_TypeID = 0xcf0f425c8bd69fa2

func NewVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData(st), err
}

func NewRootVoc_CPData(s *capnp.Segment) (Voc_CPData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0})
	return Voc_CPData(st), err
}

func ReadRootVoc_CPData(msg *capnp.Message) (Voc_CPData, error) {
	root, err := msg.Root()
	return Voc_CPData(root.Struct()), err
}

func (s Voc_CPData) String() string {
	str, _ := text.Marshal(0xcf0f425c8bd69fa2, capnp.Struct(s))
	return str
}

func (s Voc_CPData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_CPData) DecodeFromPtr(p capnp.Ptr) Voc_CPData {
	return Voc_CPData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_CPData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_CPData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_CPData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_CPData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_CPData) Kc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_CPData) SetKc(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_CPData) Ko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_CPData) SetKo(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_CPData) Oi() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_CPData) SetOi(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_CPData) Ci() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_CPData) SetCi(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_CPData) Comp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Voc_CPData) SetComp(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Voc_CPData) VcMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Voc_CPData) SetVcMax(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Voc_CPData) JMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_CPData) SetJMax(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_CPData) Jj() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_CPData) SetJj(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_CPData) Jj1000() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_CPData) SetJj1000(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Voc_CPData) Jv() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Voc_CPData) SetJv(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

// Voc_CPData_List is a list of Voc_CPData.
type Voc_CPData_List = capnp.StructList[Voc_CPData]

// NewVoc_CPData creates a new list of Voc_CPData.
func NewVoc_CPData_List(s *capnp.Segment, sz int32) (Voc_CPData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 80, PointerCount: 0}, sz)
	return capnp.StructList[Voc_CPData](l), err
}

// Voc_CPData_Future is a wrapper for a Voc_CPData promised by a client call.
type Voc_CPData_Future struct{ *capnp.Future }

func (f Voc_CPData_Future) Struct() (Voc_CPData, error) {
	p, err := f.Future.Ptr()
	return Voc_CPData(p.Struct()), err
}

type Voc_MicroClimateData capnp.Struct

// Voc_MicroClimateData_TypeID is the unique identifier for the type Voc_MicroClimateData.
const Voc_MicroClimateData_TypeID = 0xf246442c7aee0af5

func NewVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData(st), err
}

func NewRootVoc_MicroClimateData(s *capnp.Segment) (Voc_MicroClimateData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0})
	return Voc_MicroClimateData(st), err
}

func ReadRootVoc_MicroClimateData(msg *capnp.Message) (Voc_MicroClimateData, error) {
	root, err := msg.Root()
	return Voc_MicroClimateData(root.Struct()), err
}

func (s Voc_MicroClimateData) String() string {
	str, _ := text.Marshal(0xf246442c7aee0af5, capnp.Struct(s))
	return str
}

func (s Voc_MicroClimateData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_MicroClimateData) DecodeFromPtr(p capnp.Ptr) Voc_MicroClimateData {
	return Voc_MicroClimateData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_MicroClimateData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_MicroClimateData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_MicroClimateData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_MicroClimateData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_MicroClimateData) Rad() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_MicroClimateData) SetRad(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_MicroClimateData) SetRad24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Rad240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_MicroClimateData) SetRad240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Voc_MicroClimateData) SetTFol(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Voc_MicroClimateData) SetTFol24(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Voc_MicroClimateData) TFol240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Voc_MicroClimateData) SetTFol240(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Sunlitfoliagefraction24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Voc_MicroClimateData) SetSunlitfoliagefraction24(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Voc_MicroClimateData) Co2concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Voc_MicroClimateData) SetCo2concentration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

// Voc_MicroClimateData_List is a list of Voc_MicroClimateData.
type Voc_MicroClimateData_List = capnp.StructList[Voc_MicroClimateData]

// NewVoc_MicroClimateData creates a new list of Voc_MicroClimateData.
func NewVoc_MicroClimateData_List(s *capnp.Segment, sz int32) (Voc_MicroClimateData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 0}, sz)
	return capnp.StructList[Voc_MicroClimateData](l), err
}

// Voc_MicroClimateData_Future is a wrapper for a Voc_MicroClimateData promised by a client call.
type Voc_MicroClimateData_Future struct{ *capnp.Future }

func (f Voc_MicroClimateData_Future) Struct() (Voc_MicroClimateData, error) {
	p, err := f.Future.Ptr()
	return Voc_MicroClimateData(p.Struct()), err
}

type Voc_PhotosynthT capnp.Struct

// Voc_PhotosynthT_TypeID is the unique identifier for the type Voc_PhotosynthT.
const Voc_PhotosynthT_TypeID = 0xf95db11410e33efc

func NewVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT(st), err
}

func NewRootVoc_PhotosynthT(s *capnp.Segment) (Voc_PhotosynthT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_PhotosynthT(st), err
}

func ReadRootVoc_PhotosynthT(msg *capnp.Message) (Voc_PhotosynthT, error) {
	root, err := msg.Root()
	return Voc_PhotosynthT(root.Struct()), err
}

func (s Voc_PhotosynthT) String() string {
	str, _ := text.Marshal(0xf95db11410e33efc, capnp.Struct(s))
	return str
}

func (s Voc_PhotosynthT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_PhotosynthT) DecodeFromPtr(p capnp.Ptr) Voc_PhotosynthT {
	return Voc_PhotosynthT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_PhotosynthT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_PhotosynthT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_PhotosynthT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_PhotosynthT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_PhotosynthT) Par() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_PhotosynthT) SetPar(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_PhotosynthT) SetPar24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_PhotosynthT) Par240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_PhotosynthT) SetPar240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Voc_PhotosynthT_List is a list of Voc_PhotosynthT.
type Voc_PhotosynthT_List = capnp.StructList[Voc_PhotosynthT]

// NewVoc_PhotosynthT creates a new list of Voc_PhotosynthT.
func NewVoc_PhotosynthT_List(s *capnp.Segment, sz int32) (Voc_PhotosynthT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Voc_PhotosynthT](l), err
}

// Voc_PhotosynthT_Future is a wrapper for a Voc_PhotosynthT promised by a client call.
type Voc_PhotosynthT_Future struct{ *capnp.Future }

func (f Voc_PhotosynthT_Future) Struct() (Voc_PhotosynthT, error) {
	p, err := f.Future.Ptr()
	return Voc_PhotosynthT(p.Struct()), err
}

type Voc_FoliageT capnp.Struct

// Voc_FoliageT_TypeID is the unique identifier for the type Voc_FoliageT.
const Voc_FoliageT_TypeID = 0xee0b04cc3f52f33c

func NewVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT(st), err
}

func NewRootVoc_FoliageT(s *capnp.Segment) (Voc_FoliageT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Voc_FoliageT(st), err
}

func ReadRootVoc_FoliageT(msg *capnp.Message) (Voc_FoliageT, error) {
	root, err := msg.Root()
	return Voc_FoliageT(root.Struct()), err
}

func (s Voc_FoliageT) String() string {
	str, _ := text.Marshal(0xee0b04cc3f52f33c, capnp.Struct(s))
	return str
}

func (s Voc_FoliageT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_FoliageT) DecodeFromPtr(p capnp.Ptr) Voc_FoliageT {
	return Voc_FoliageT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_FoliageT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_FoliageT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_FoliageT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_FoliageT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_FoliageT) TempK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_FoliageT) SetTempK(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK24() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_FoliageT) SetTempK24(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Voc_FoliageT) TempK240() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Voc_FoliageT) SetTempK240(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Voc_FoliageT_List is a list of Voc_FoliageT.
type Voc_FoliageT_List = capnp.StructList[Voc_FoliageT]

// NewVoc_FoliageT creates a new list of Voc_FoliageT.
func NewVoc_FoliageT_List(s *capnp.Segment, sz int32) (Voc_FoliageT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Voc_FoliageT](l), err
}

// Voc_FoliageT_Future is a wrapper for a Voc_FoliageT promised by a client call.
type Voc_FoliageT_Future struct{ *capnp.Future }

func (f Voc_FoliageT_Future) Struct() (Voc_FoliageT, error) {
	p, err := f.Future.Ptr()
	return Voc_FoliageT(p.Struct()), err
}

type Voc_EnzymeActivityT capnp.Struct

// Voc_EnzymeActivityT_TypeID is the unique identifier for the type Voc_EnzymeActivityT.
const Voc_EnzymeActivityT_TypeID = 0xc281c6e5be483337

func NewVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT(st), err
}

func NewRootVoc_EnzymeActivityT(s *capnp.Segment) (Voc_EnzymeActivityT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_EnzymeActivityT(st), err
}

func ReadRootVoc_EnzymeActivityT(msg *capnp.Message) (Voc_EnzymeActivityT, error) {
	root, err := msg.Root()
	return Voc_EnzymeActivityT(root.Struct()), err
}

func (s Voc_EnzymeActivityT) String() string {
	str, _ := text.Marshal(0xc281c6e5be483337, capnp.Struct(s))
	return str
}

func (s Voc_EnzymeActivityT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_EnzymeActivityT) DecodeFromPtr(p capnp.Ptr) Voc_EnzymeActivityT {
	return Voc_EnzymeActivityT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_EnzymeActivityT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_EnzymeActivityT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_EnzymeActivityT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_EnzymeActivityT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_EnzymeActivityT) EfIso() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_EnzymeActivityT) SetEfIso(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_EnzymeActivityT) EfMono() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_EnzymeActivityT) SetEfMono(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_EnzymeActivityT_List is a list of Voc_EnzymeActivityT.
type Voc_EnzymeActivityT_List = capnp.StructList[Voc_EnzymeActivityT]

// NewVoc_EnzymeActivityT creates a new list of Voc_EnzymeActivityT.
func NewVoc_EnzymeActivityT_List(s *capnp.Segment, sz int32) (Voc_EnzymeActivityT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_EnzymeActivityT](l), err
}

// Voc_EnzymeActivityT_Future is a wrapper for a Voc_EnzymeActivityT promised by a client call.
type Voc_EnzymeActivityT_Future struct{ *capnp.Future }

func (f Voc_EnzymeActivityT_Future) Struct() (Voc_EnzymeActivityT, error) {
	p, err := f.Future.Ptr()
	return Voc_EnzymeActivityT(p.Struct()), err
}

type Voc_LeafEmissionT capnp.Struct

// Voc_LeafEmissionT_TypeID is the unique identifier for the type Voc_LeafEmissionT.
const Voc_LeafEmissionT_TypeID = 0xe82d760b257daddb

func NewVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT(st), err
}

func NewRootVoc_LeafEmissionT(s *capnp.Segment) (Voc_LeafEmissionT, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Voc_LeafEmissionT(st), err
}

func ReadRootVoc_LeafEmissionT(msg *capnp.Message) (Voc_LeafEmissionT, error) {
	root, err := msg.Root()
	return Voc_LeafEmissionT(root.Struct()), err
}

func (s Voc_LeafEmissionT) String() string {
	str, _ := text.Marshal(0xe82d760b257daddb, capnp.Struct(s))
	return str
}

func (s Voc_LeafEmissionT) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_LeafEmissionT) DecodeFromPtr(p capnp.Ptr) Voc_LeafEmissionT {
	return Voc_LeafEmissionT(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_LeafEmissionT) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_LeafEmissionT) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_LeafEmissionT) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_LeafEmissionT) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_LeafEmissionT) FoliageLayer() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Voc_LeafEmissionT) SetFoliageLayer(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Voc_LeafEmissionT) Pho() (Voc_PhotosynthT, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Voc_PhotosynthT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasPho() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Voc_LeafEmissionT) SetPho(v Voc_PhotosynthT) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPho sets the pho field to a newly
// allocated Voc_PhotosynthT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewPho() (Voc_PhotosynthT, error) {
	ss, err := NewVoc_PhotosynthT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_PhotosynthT{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) Fol() (Voc_FoliageT, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Voc_FoliageT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasFol() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Voc_LeafEmissionT) SetFol(v Voc_FoliageT) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewFol sets the fol field to a newly
// allocated Voc_FoliageT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewFol() (Voc_FoliageT, error) {
	ss, err := NewVoc_FoliageT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_FoliageT{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Voc_LeafEmissionT) EnzAct() (Voc_EnzymeActivityT, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Voc_EnzymeActivityT(p.Struct()), err
}

func (s Voc_LeafEmissionT) HasEnzAct() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Voc_LeafEmissionT) SetEnzAct(v Voc_EnzymeActivityT) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewEnzAct sets the enzAct field to a newly
// allocated Voc_EnzymeActivityT struct, preferring placement in s's segment.
func (s Voc_LeafEmissionT) NewEnzAct() (Voc_EnzymeActivityT, error) {
	ss, err := NewVoc_EnzymeActivityT(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_EnzymeActivityT{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Voc_LeafEmissionT_List is a list of Voc_LeafEmissionT.
type Voc_LeafEmissionT_List = capnp.StructList[Voc_LeafEmissionT]

// NewVoc_LeafEmissionT creates a new list of Voc_LeafEmissionT.
func NewVoc_LeafEmissionT_List(s *capnp.Segment, sz int32) (Voc_LeafEmissionT_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Voc_LeafEmissionT](l), err
}

// Voc_LeafEmissionT_Future is a wrapper for a Voc_LeafEmissionT promised by a client call.
type Voc_LeafEmissionT_Future struct{ *capnp.Future }

func (f Voc_LeafEmissionT_Future) Struct() (Voc_LeafEmissionT, error) {
	p, err := f.Future.Ptr()
	return Voc_LeafEmissionT(p.Struct()), err
}
func (p Voc_LeafEmissionT_Future) Pho() Voc_PhotosynthT_Future {
	return Voc_PhotosynthT_Future{Future: p.Future.Field(0, nil)}
}
func (p Voc_LeafEmissionT_Future) Fol() Voc_FoliageT_Future {
	return Voc_FoliageT_Future{Future: p.Future.Field(1, nil)}
}
func (p Voc_LeafEmissionT_Future) EnzAct() Voc_EnzymeActivityT_Future {
	return Voc_EnzymeActivityT_Future{Future: p.Future.Field(2, nil)}
}

type Voc_LeafEmissions capnp.Struct

// Voc_LeafEmissions_TypeID is the unique identifier for the type Voc_LeafEmissions.
const Voc_LeafEmissions_TypeID = 0xc8aeb5222ac5ef40

func NewVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions(st), err
}

func NewRootVoc_LeafEmissions(s *capnp.Segment) (Voc_LeafEmissions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Voc_LeafEmissions(st), err
}

func ReadRootVoc_LeafEmissions(msg *capnp.Message) (Voc_LeafEmissions, error) {
	root, err := msg.Root()
	return Voc_LeafEmissions(root.Struct()), err
}

func (s Voc_LeafEmissions) String() string {
	str, _ := text.Marshal(0xc8aeb5222ac5ef40, capnp.Struct(s))
	return str
}

func (s Voc_LeafEmissions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Voc_LeafEmissions) DecodeFromPtr(p capnp.Ptr) Voc_LeafEmissions {
	return Voc_LeafEmissions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Voc_LeafEmissions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Voc_LeafEmissions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Voc_LeafEmissions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Voc_LeafEmissions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Voc_LeafEmissions) Isoprene() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Voc_LeafEmissions) SetIsoprene(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Voc_LeafEmissions) Monoterp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Voc_LeafEmissions) SetMonoterp(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Voc_LeafEmissions_List is a list of Voc_LeafEmissions.
type Voc_LeafEmissions_List = capnp.StructList[Voc_LeafEmissions]

// NewVoc_LeafEmissions creates a new list of Voc_LeafEmissions.
func NewVoc_LeafEmissions_List(s *capnp.Segment, sz int32) (Voc_LeafEmissions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Voc_LeafEmissions](l), err
}

// Voc_LeafEmissions_Future is a wrapper for a Voc_LeafEmissions promised by a client call.
type Voc_LeafEmissions_Future struct{ *capnp.Future }

func (f Voc_LeafEmissions_Future) Struct() (Voc_LeafEmissions, error) {
	p, err := f.Future.Ptr()
	return Voc_LeafEmissions(p.Struct()), err
}

type SticsParameters capnp.Struct

// SticsParameters_TypeID is the unique identifier for the type SticsParameters.
const SticsParameters_TypeID = 0xce5b0091fd9acb21

func NewSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters(st), err
}

func NewRootSticsParameters(s *capnp.Segment) (SticsParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0})
	return SticsParameters(st), err
}

func ReadRootSticsParameters(msg *capnp.Message) (SticsParameters, error) {
	root, err := msg.Root()
	return SticsParameters(root.Struct()), err
}

func (s SticsParameters) String() string {
	str, _ := text.Marshal(0xce5b0091fd9acb21, capnp.Struct(s))
	return str
}

func (s SticsParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SticsParameters) DecodeFromPtr(p capnp.Ptr) SticsParameters {
	return SticsParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SticsParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SticsParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SticsParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SticsParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SticsParameters) UseN2O() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SticsParameters) SetUseN2O(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s SticsParameters) UseNit() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SticsParameters) SetUseNit(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SticsParameters) UseDenit() bool {
	return capnp.Struct(s).Bit(2)
}

func (s SticsParameters) SetUseDenit(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s SticsParameters) CodeVnit() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 1
}

func (s SticsParameters) SetCodeVnit(v uint8) {
	capnp.Struct(s).SetUint8(1, v^1)
}

func (s SticsParameters) CodeTnit() uint8 {
	return capnp.Struct(s).Uint8(2) ^ 2
}

func (s SticsParameters) SetCodeTnit(v uint8) {
	capnp.Struct(s).SetUint8(2, v^2)
}

func (s SticsParameters) CodeRationit() uint8 {
	return capnp.Struct(s).Uint8(3) ^ 2
}

func (s SticsParameters) SetCodeRationit(v uint8) {
	capnp.Struct(s).SetUint8(3, v^2)
}

func (s SticsParameters) CodeHourlyWfpsNit() uint8 {
	return capnp.Struct(s).Uint8(4) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsNit(v uint8) {
	capnp.Struct(s).SetUint8(4, v^2)
}

func (s SticsParameters) CodePdenit() uint8 {
	return capnp.Struct(s).Uint8(5) ^ 1
}

func (s SticsParameters) SetCodePdenit(v uint8) {
	capnp.Struct(s).SetUint8(5, v^1)
}

func (s SticsParameters) CodeRatiodenit() uint8 {
	return capnp.Struct(s).Uint8(6) ^ 2
}

func (s SticsParameters) SetCodeRatiodenit(v uint8) {
	capnp.Struct(s).SetUint8(6, v^2)
}

func (s SticsParameters) CodeHourlyWfpsDenit() uint8 {
	return capnp.Struct(s).Uint8(7) ^ 2
}

func (s SticsParameters) SetCodeHourlyWfpsDenit(v uint8) {
	capnp.Struct(s).SetUint8(7, v^2)
}

func (s SticsParameters) Hminn() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fd3333333333333)
}

func (s SticsParameters) SetHminn(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fd3333333333333)
}

func (s SticsParameters) Hoptn() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x3feccccccccccccd)
}

func (s SticsParameters) SetHoptn(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x3feccccccccccccd)
}

func (s SticsParameters) PHminnit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4010000000000000)
}

func (s SticsParameters) SetPHminnit(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4010000000000000)
}

func (s SticsParameters) PHmaxnit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHmaxnit(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) Nh4Min() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetNh4Min(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) PHminden() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48) ^ 0x401ccccccccccccd)
}

func (s SticsParameters) SetPHminden(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v)^0x401ccccccccccccd)
}

func (s SticsParameters) PHmaxden() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x4022666666666666)
}

func (s SticsParameters) SetPHmaxden(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x4022666666666666)
}

func (s SticsParameters) Wfpsc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) SetWfpsc(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3fe3d70a3d70a3d7)
}

func (s SticsParameters) TdenitoptGauss() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x4047800000000000)
}

func (s SticsParameters) SetTdenitoptGauss(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x4047800000000000)
}

func (s SticsParameters) ScaleTdenitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80) ^ 0x4039000000000000)
}

func (s SticsParameters) SetScaleTdenitopt(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v)^0x4039000000000000)
}

func (s SticsParameters) Kd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x4062800000000000)
}

func (s SticsParameters) SetKd(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x4062800000000000)
}

func (s SticsParameters) KDesat() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x4008000000000000)
}

func (s SticsParameters) SetKDesat(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x4008000000000000)
}

func (s SticsParameters) Fnx() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3fe999999999999a)
}

func (s SticsParameters) SetFnx(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3fe999999999999a)
}

func (s SticsParameters) Vnitmax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112) ^ 0x403b4ccccccccccd)
}

func (s SticsParameters) SetVnitmax(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v)^0x403b4ccccccccccd)
}

func (s SticsParameters) Kamm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x4038000000000000)
}

func (s SticsParameters) SetKamm(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x4038000000000000)
}

func (s SticsParameters) Tnitmin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128) ^ 0x4014000000000000)
}

func (s SticsParameters) SetTnitmin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v)^0x4014000000000000)
}

func (s SticsParameters) Tnitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136) ^ 0x403e000000000000)
}

func (s SticsParameters) SetTnitopt(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v)^0x403e000000000000)
}

func (s SticsParameters) Tnitop2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144) ^ 0x4041800000000000)
}

func (s SticsParameters) SetTnitop2(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v)^0x4041800000000000)
}

func (s SticsParameters) Tnitmax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152) ^ 0x404d000000000000)
}

func (s SticsParameters) SetTnitmax(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v)^0x404d000000000000)
}

func (s SticsParameters) TnitoptGauss() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160) ^ 0x4040400000000000)
}

func (s SticsParameters) SetTnitoptGauss(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v)^0x4040400000000000)
}

func (s SticsParameters) ScaleTnitopt() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x4030000000000000)
}

func (s SticsParameters) SetScaleTnitopt(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x4030000000000000)
}

func (s SticsParameters) Rationit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3f5a36e2eb1c432d)
}

func (s SticsParameters) SetRationit(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3f5a36e2eb1c432d)
}

func (s SticsParameters) CminPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetCminPdenit(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) CmaxPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192) ^ 0x4018000000000000)
}

func (s SticsParameters) SetCmaxPdenit(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v)^0x4018000000000000)
}

func (s SticsParameters) MinPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200) ^ 0x3ff0000000000000)
}

func (s SticsParameters) SetMinPdenit(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SticsParameters) MaxPdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208) ^ 0x4034000000000000)
}

func (s SticsParameters) SetMaxPdenit(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Ratiodenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3fc999999999999a)
}

func (s SticsParameters) SetRatiodenit(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3fc999999999999a)
}

func (s SticsParameters) Profdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4034000000000000)
}

func (s SticsParameters) SetProfdenit(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4034000000000000)
}

func (s SticsParameters) Vpotdenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232) ^ 0x4000000000000000)
}

func (s SticsParameters) SetVpotdenit(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v)^0x4000000000000000)
}

// SticsParameters_List is a list of SticsParameters.
type SticsParameters_List = capnp.StructList[SticsParameters]

// NewSticsParameters creates a new list of SticsParameters.
func NewSticsParameters_List(s *capnp.Segment, sz int32) (SticsParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 240, PointerCount: 0}, sz)
	return capnp.StructList[SticsParameters](l), err
}

// SticsParameters_Future is a wrapper for a SticsParameters promised by a client call.
type SticsParameters_Future struct{ *capnp.Future }

func (f SticsParameters_Future) Struct() (SticsParameters, error) {
	p, err := f.Future.Ptr()
	return SticsParameters(p.Struct()), err
}
