// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/management"
	math "math"
	strconv "strconv"
)

type MaybeBool capnp.Struct

// MaybeBool_TypeID is the unique identifier for the type MaybeBool.
const MaybeBool_TypeID = 0xd8af9210839bc071

func NewMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func NewRootMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func ReadRootMaybeBool(msg *capnp.Message) (MaybeBool, error) {
	root, err := msg.Root()
	return MaybeBool(root.Struct()), err
}

func (s MaybeBool) String() string {
	str, _ := text.Marshal(0xd8af9210839bc071, capnp.Struct(s))
	return str
}

func (s MaybeBool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MaybeBool) DecodeFromPtr(p capnp.Ptr) MaybeBool {
	return MaybeBool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MaybeBool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MaybeBool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MaybeBool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MaybeBool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MaybeBool) Value() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MaybeBool) SetValue(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// MaybeBool_List is a list of MaybeBool.
type MaybeBool_List = capnp.StructList[MaybeBool]

// NewMaybeBool creates a new list of MaybeBool.
func NewMaybeBool_List(s *capnp.Segment, sz int32) (MaybeBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MaybeBool](l), err
}

// MaybeBool_Future is a wrapper for a MaybeBool promised by a client call.
type MaybeBool_Future struct{ *capnp.Future }

func (f MaybeBool_Future) Struct() (MaybeBool, error) {
	p, err := f.Future.Ptr()
	return MaybeBool(p.Struct()), err
}

type RuntimeState capnp.Struct

// RuntimeState_TypeID is the unique identifier for the type RuntimeState.
const RuntimeState_TypeID = 0xd599d06dc405571a

func NewRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func NewRootRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func ReadRootRuntimeState(msg *capnp.Message) (RuntimeState, error) {
	root, err := msg.Root()
	return RuntimeState(root.Struct()), err
}

func (s RuntimeState) String() string {
	str, _ := text.Marshal(0xd599d06dc405571a, capnp.Struct(s))
	return str
}

func (s RuntimeState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeState) DecodeFromPtr(p capnp.Ptr) RuntimeState {
	return RuntimeState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeState) ModelState() (MonicaModelState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MonicaModelState(p.Struct()), err
}

func (s RuntimeState) HasModelState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeState) SetModelState(v MonicaModelState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModelState sets the modelState field to a newly
// allocated MonicaModelState struct, preferring placement in s's segment.
func (s RuntimeState) NewModelState() (MonicaModelState, error) {
	ss, err := NewMonicaModelState(capnp.Struct(s).Segment())
	if err != nil {
		return MonicaModelState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RuntimeState_List is a list of RuntimeState.
type RuntimeState_List = capnp.StructList[RuntimeState]

// NewRuntimeState creates a new list of RuntimeState.
func NewRuntimeState_List(s *capnp.Segment, sz int32) (RuntimeState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RuntimeState](l), err
}

// RuntimeState_Future is a wrapper for a RuntimeState promised by a client call.
type RuntimeState_Future struct{ *capnp.Future }

func (f RuntimeState_Future) Struct() (RuntimeState, error) {
	p, err := f.Future.Ptr()
	return RuntimeState(p.Struct()), err
}
func (p RuntimeState_Future) ModelState() MonicaModelState_Future {
	return MonicaModelState_Future{Future: p.Future.Field(0, nil)}
}

type CropState capnp.Struct

// CropState_TypeID is the unique identifier for the type CropState.
const CropState_TypeID = 0x8b008567c93f7c7d

func NewCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func NewRootCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func ReadRootCropState(msg *capnp.Message) (CropState, error) {
	root, err := msg.Root()
	return CropState(root.Struct()), err
}

func (s CropState) String() string {
	str, _ := text.Marshal(0x8b008567c93f7c7d, capnp.Struct(s))
	return str
}

func (s CropState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropState) DecodeFromPtr(p capnp.Ptr) CropState {
	return CropState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropState) SpeciesName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropState) HasSpeciesName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropState) SpeciesNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropState) SetSpeciesName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropState) CultivarName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropState) HasCultivarName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropState) CultivarNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropState) SetCultivarName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CropState) SeedDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common.Date(p.Struct()), err
}

func (s CropState) HasSeedDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropState) SetSeedDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSeedDate sets the seedDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewSeedDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) HarvestDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common.Date(p.Struct()), err
}

func (s CropState) HasHarvestDate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropState) SetHarvestDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewHarvestDate sets the harvestDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewHarvestDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsWinterCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsWinterCrop() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropState) SetIsWinterCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewIsWinterCrop sets the isWinterCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsWinterCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsPerennialCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsPerennialCrop() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropState) SetIsPerennialCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewIsPerennialCrop sets the isPerennialCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsPerennialCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CuttingDates() (common.Date_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return common.Date_List(p.List()), err
}

func (s CropState) HasCuttingDates() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropState) SetCuttingDates(v common.Date_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCuttingDates sets the cuttingDates field to a newly
// allocated common.Date_List, preferring placement in s's segment.
func (s CropState) NewCuttingDates(n int32) (common.Date_List, error) {
	l, err := common.NewDate_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Date_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropState) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropState) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) PerennialCropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasPerennialCropParams() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropState) SetPerennialCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewPerennialCropParams sets the perennialCropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewPerennialCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropResidueParameters(p.Struct()), err
}

func (s CropState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CrossCropAdaptionFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3ff0000000000000)
}

func (s CropState) SetCrossCropAdaptionFactor(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropState) AutomaticHarvest() bool {
	return capnp.Struct(s).Bit(64)
}

func (s CropState) SetAutomaticHarvest(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s CropState) AutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AutomaticHarvestParameters(p.Struct()), err
}

func (s CropState) HasAutomaticHarvestParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropState) SetAutomaticHarvestParams(v AutomaticHarvestParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAutomaticHarvestParams sets the automaticHarvestParams field to a newly
// allocated AutomaticHarvestParameters struct, preferring placement in s's segment.
func (s CropState) NewAutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	ss, err := NewAutomaticHarvestParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticHarvestParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropState_List is a list of CropState.
type CropState_List = capnp.StructList[CropState]

// NewCropState creates a new list of CropState.
func NewCropState_List(s *capnp.Segment, sz int32) (CropState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11}, sz)
	return capnp.StructList[CropState](l), err
}

// CropState_Future is a wrapper for a CropState promised by a client call.
type CropState_Future struct{ *capnp.Future }

func (f CropState_Future) Struct() (CropState, error) {
	p, err := f.Future.Ptr()
	return CropState(p.Struct()), err
}
func (p CropState_Future) SeedDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p CropState_Future) HarvestDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}
func (p CropState_Future) IsWinterCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(5, nil)}
}
func (p CropState_Future) IsPerennialCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(6, nil)}
}
func (p CropState_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(8, nil)}
}
func (p CropState_Future) PerennialCropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(9, nil)}
}
func (p CropState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(10, nil)}
}
func (p CropState_Future) AutomaticHarvestParams() AutomaticHarvestParameters_Future {
	return AutomaticHarvestParameters_Future{Future: p.Future.Field(0, nil)}
}

type AOMProperties capnp.Struct

// AOMProperties_TypeID is the unique identifier for the type AOMProperties.
const AOMProperties_TypeID = 0xe3512e62df901c18

func NewAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func NewRootAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func ReadRootAOMProperties(msg *capnp.Message) (AOMProperties, error) {
	root, err := msg.Root()
	return AOMProperties(root.Struct()), err
}

func (s AOMProperties) String() string {
	str, _ := text.Marshal(0xe3512e62df901c18, capnp.Struct(s))
	return str
}

func (s AOMProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AOMProperties) DecodeFromPtr(p capnp.Ptr) AOMProperties {
	return AOMProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AOMProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AOMProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AOMProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AOMProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AOMProperties) AomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s AOMProperties) SetAomSlow(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s AOMProperties) AomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s AOMProperties) SetAomFast(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s AOMProperties) SetAomFastDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s AOMProperties) SetAomFastDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s AOMProperties) SetAomSlowDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s AOMProperties) SetAomFastDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) PartAOMSlowtoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s AOMProperties) SetPartAOMSlowtoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s AOMProperties) PartAOMSlowtoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s AOMProperties) SetPartAOMSlowtoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s AOMProperties) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) DaysAfterApplication() uint16 {
	return capnp.Struct(s).Uint16(112)
}

func (s AOMProperties) SetDaysAfterApplication(v uint16) {
	capnp.Struct(s).SetUint16(112, v)
}

func (s AOMProperties) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s AOMProperties) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s AOMProperties) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s AOMProperties) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s AOMProperties) SetAomSlowDelta(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s AOMProperties) AomFastDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s AOMProperties) SetAomFastDelta(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s AOMProperties) Incorporation() bool {
	return capnp.Struct(s).Bit(912)
}

func (s AOMProperties) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(912, v)
}

func (s AOMProperties) NoVolatilization() bool {
	return !capnp.Struct(s).Bit(913)
}

func (s AOMProperties) SetNoVolatilization(v bool) {
	capnp.Struct(s).SetBit(913, !v)
}

// AOMProperties_List is a list of AOMProperties.
type AOMProperties_List = capnp.StructList[AOMProperties]

// NewAOMProperties creates a new list of AOMProperties.
func NewAOMProperties_List(s *capnp.Segment, sz int32) (AOMProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0}, sz)
	return capnp.StructList[AOMProperties](l), err
}

// AOMProperties_Future is a wrapper for a AOMProperties promised by a client call.
type AOMProperties_Future struct{ *capnp.Future }

func (f AOMProperties_Future) Struct() (AOMProperties, error) {
	p, err := f.Future.Ptr()
	return AOMProperties(p.Struct()), err
}

type SoilColumnState capnp.Struct

// SoilColumnState_TypeID is the unique identifier for the type SoilColumnState.
const SoilColumnState_TypeID = 0xef3e4198d3e35596

func NewSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func NewRootSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func ReadRootSoilColumnState(msg *capnp.Message) (SoilColumnState, error) {
	root, err := msg.Root()
	return SoilColumnState(root.Struct()), err
}

func (s SoilColumnState) String() string {
	str, _ := text.Marshal(0xef3e4198d3e35596, capnp.Struct(s))
	return str
}

func (s SoilColumnState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState) DecodeFromPtr(p capnp.Ptr) SoilColumnState {
	return SoilColumnState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState) VsSurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState) SetVsSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState) VsInterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState) SetVsInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState) VmGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilColumnState) SetVmGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilColumnState) VsFluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState) SetVsFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState) VqCropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState) SetVqCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState) VtSoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState) SetVtSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilColumnState) VmSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilColumnState) SetVmSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilColumnState) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilColumnState) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilColumnState) VsNumberOfOrganicLayers() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilColumnState) SetVsNumberOfOrganicLayers(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressing() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilColumnState) SetVfTopDressing(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressingPartition() (management.Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return management.Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState) HasVfTopDressingPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState) SetVfTopDressingPartition(v management.Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVfTopDressingPartition sets the vfTopDressingPartition field to a newly
// allocated management.Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState) NewVfTopDressingPartition() (management.Params_MineralFertilization_Parameters, error) {
	ss, err := management.NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return management.Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) VfTopDressingDelay() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilColumnState) SetVfTopDressingDelay(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilColumnState) CropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropModuleState(p.Struct()), err
}

func (s SoilColumnState) HasCropModule() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilColumnState) SetCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCropModule sets the cropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s SoilColumnState) NewCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) DelayedNMinApplications() (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilColumnState_DelayedNMinApplicationParams_List(p.List()), err
}

func (s SoilColumnState) HasDelayedNMinApplications() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilColumnState) SetDelayedNMinApplications(v SoilColumnState_DelayedNMinApplicationParams_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDelayedNMinApplications sets the delayedNMinApplications field to a newly
// allocated SoilColumnState_DelayedNMinApplicationParams_List, preferring placement in s's segment.
func (s SoilColumnState) NewDelayedNMinApplications(n int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := NewSoilColumnState_DelayedNMinApplicationParams_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilColumnState_DelayedNMinApplicationParams_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilColumnState) PmCriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilColumnState) SetPmCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilColumnState) Layers() (SoilLayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SoilLayerState_List(p.List()), err
}

func (s SoilColumnState) HasLayers() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilColumnState) SetLayers(v SoilLayerState_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated SoilLayerState_List, preferring placement in s's segment.
func (s SoilColumnState) NewLayers(n int32) (SoilLayerState_List, error) {
	l, err := NewSoilLayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilLayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// SoilColumnState_List is a list of SoilColumnState.
type SoilColumnState_List = capnp.StructList[SoilColumnState]

// NewSoilColumnState creates a new list of SoilColumnState.
func NewSoilColumnState_List(s *capnp.Segment, sz int32) (SoilColumnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4}, sz)
	return capnp.StructList[SoilColumnState](l), err
}

// SoilColumnState_Future is a wrapper for a SoilColumnState promised by a client call.
type SoilColumnState_Future struct{ *capnp.Future }

func (f SoilColumnState_Future) Struct() (SoilColumnState, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState(p.Struct()), err
}
func (p SoilColumnState_Future) VfTopDressingPartition() management.Params_MineralFertilization_Parameters_Future {
	return management.Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}
func (p SoilColumnState_Future) CropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(1, nil)}
}

type SoilColumnState_DelayedNMinApplicationParams capnp.Struct

// SoilColumnState_DelayedNMinApplicationParams_TypeID is the unique identifier for the type SoilColumnState_DelayedNMinApplicationParams.
const SoilColumnState_DelayedNMinApplicationParams_TypeID = 0xd1edcf54f4edf638

func NewSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func NewRootSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func ReadRootSoilColumnState_DelayedNMinApplicationParams(msg *capnp.Message) (SoilColumnState_DelayedNMinApplicationParams, error) {
	root, err := msg.Root()
	return SoilColumnState_DelayedNMinApplicationParams(root.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) String() string {
	str, _ := text.Marshal(0xd1edcf54f4edf638, capnp.Struct(s))
	return str
}

func (s SoilColumnState_DelayedNMinApplicationParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState_DelayedNMinApplicationParams) DecodeFromPtr(p capnp.Ptr) SoilColumnState_DelayedNMinApplicationParams {
	return SoilColumnState_DelayedNMinApplicationParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState_DelayedNMinApplicationParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState_DelayedNMinApplicationParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState_DelayedNMinApplicationParams) Fp() (management.Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return management.Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) HasFp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFp(v management.Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFp sets the fp field to a newly
// allocated management.Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState_DelayedNMinApplicationParams) NewFp() (management.Params_MineralFertilization_Parameters, error) {
	ss, err := management.NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return management.Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMinApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMinApplication(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMaxApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMaxApplication(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) TopDressingDelay() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetTopDressingDelay(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

// SoilColumnState_DelayedNMinApplicationParams_List is a list of SoilColumnState_DelayedNMinApplicationParams.
type SoilColumnState_DelayedNMinApplicationParams_List = capnp.StructList[SoilColumnState_DelayedNMinApplicationParams]

// NewSoilColumnState_DelayedNMinApplicationParams creates a new list of SoilColumnState_DelayedNMinApplicationParams.
func NewSoilColumnState_DelayedNMinApplicationParams_List(s *capnp.Segment, sz int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[SoilColumnState_DelayedNMinApplicationParams](l), err
}

// SoilColumnState_DelayedNMinApplicationParams_Future is a wrapper for a SoilColumnState_DelayedNMinApplicationParams promised by a client call.
type SoilColumnState_DelayedNMinApplicationParams_Future struct{ *capnp.Future }

func (f SoilColumnState_DelayedNMinApplicationParams_Future) Struct() (SoilColumnState_DelayedNMinApplicationParams, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState_DelayedNMinApplicationParams(p.Struct()), err
}
func (p SoilColumnState_DelayedNMinApplicationParams_Future) Fp() management.Params_MineralFertilization_Parameters_Future {
	return management.Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilLayerState capnp.Struct

// SoilLayerState_TypeID is the unique identifier for the type SoilLayerState.
const SoilLayerState_TypeID = 0xdd1e0c7c94dc4211

func NewSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func NewRootSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func ReadRootSoilLayerState(msg *capnp.Message) (SoilLayerState, error) {
	root, err := msg.Root()
	return SoilLayerState(root.Struct()), err
}

func (s SoilLayerState) String() string {
	str, _ := text.Marshal(0xdd1e0c7c94dc4211, capnp.Struct(s))
	return str
}

func (s SoilLayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilLayerState) DecodeFromPtr(p capnp.Ptr) SoilLayerState {
	return SoilLayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilLayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilLayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilLayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilLayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilLayerState) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fb999999999999a)
}

func (s SoilLayerState) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilLayerState) SoilWaterFlux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilLayerState) SetSoilWaterFlux(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilLayerState) VoAOMPool() (AOMProperties_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AOMProperties_List(p.List()), err
}

func (s SoilLayerState) HasVoAOMPool() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilLayerState) SetVoAOMPool(v AOMProperties_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVoAOMPool sets the voAOMPool field to a newly
// allocated AOMProperties_List, preferring placement in s's segment.
func (s SoilLayerState) NewVoAOMPool(n int32) (AOMProperties_List, error) {
	l, err := NewAOMProperties_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AOMProperties_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SoilLayerState) SomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilLayerState) SetSomSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilLayerState) SomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilLayerState) SetSomFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilLayerState) SmbSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilLayerState) SetSmbSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilLayerState) SmbFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilLayerState) SetSmbFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilLayerState) SoilCarbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilLayerState) SetSoilCarbamid(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilLayerState) SoilNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNH4(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilNO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SetSoilNO2(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SoilNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNO3(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilFrozen() bool {
	return capnp.Struct(s).Bit(640)
}

func (s SoilLayerState) SetSoilFrozen(v bool) {
	capnp.Struct(s).SetBit(640, v)
}

func (s SoilLayerState) Sps() (SoilParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilParameters(p.Struct()), err
}

func (s SoilLayerState) HasSps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilLayerState) SetSps(v SoilParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSps sets the sps field to a newly
// allocated SoilParameters struct, preferring placement in s's segment.
func (s SoilLayerState) NewSps() (SoilParameters, error) {
	ss, err := NewSoilParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilLayerState) SoilMoistureM3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x3fd0000000000000)
}

func (s SoilLayerState) SetSoilMoistureM3(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilLayerState) SoilTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilLayerState) SetSoilTemperature(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// SoilLayerState_List is a list of SoilLayerState.
type SoilLayerState_List = capnp.StructList[SoilLayerState]

// NewSoilLayerState creates a new list of SoilLayerState.
func NewSoilLayerState_List(s *capnp.Segment, sz int32) (SoilLayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2}, sz)
	return capnp.StructList[SoilLayerState](l), err
}

// SoilLayerState_Future is a wrapper for a SoilLayerState promised by a client call.
type SoilLayerState_Future struct{ *capnp.Future }

func (f SoilLayerState_Future) Struct() (SoilLayerState, error) {
	p, err := f.Future.Ptr()
	return SoilLayerState(p.Struct()), err
}
func (p SoilLayerState_Future) Sps() SoilParameters_Future {
	return SoilParameters_Future{Future: p.Future.Field(1, nil)}
}

type MonicaModelState capnp.Struct

// MonicaModelState_TypeID is the unique identifier for the type MonicaModelState.
const MonicaModelState_TypeID = 0xab56969492d293b3

func NewMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func NewRootMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func ReadRootMonicaModelState(msg *capnp.Message) (MonicaModelState, error) {
	root, err := msg.Root()
	return MonicaModelState(root.Struct()), err
}

func (s MonicaModelState) String() string {
	str, _ := text.Marshal(0xab56969492d293b3, capnp.Struct(s))
	return str
}

func (s MonicaModelState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState) DecodeFromPtr(p capnp.Ptr) MonicaModelState {
	return MonicaModelState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState) SitePs() (SiteParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SiteParameters(p.Struct()), err
}

func (s MonicaModelState) HasSitePs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MonicaModelState) SetSitePs(v SiteParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSitePs sets the sitePs field to a newly
// allocated SiteParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSitePs() (SiteParameters, error) {
	ss, err := NewSiteParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SiteParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) EnvPs() (EnvironmentParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters(p.Struct()), err
}

func (s MonicaModelState) HasEnvPs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MonicaModelState) SetEnvPs(v EnvironmentParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnvPs sets the envPs field to a newly
// allocated EnvironmentParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewEnvPs() (EnvironmentParameters, error) {
	ss, err := NewEnvironmentParameters(capnp.Struct(s).Segment())
	if err != nil {
		return EnvironmentParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CropPs() (CropModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CropModuleParameters(p.Struct()), err
}

func (s MonicaModelState) HasCropPs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MonicaModelState) SetCropPs(v CropModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCropPs sets the cropPs field to a newly
// allocated CropModuleParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewCropPs() (CropModuleParameters, error) {
	ss, err := NewCropModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SimPs() (SimulationParameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SimulationParameters(p.Struct()), err
}

func (s MonicaModelState) HasSimPs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s MonicaModelState) SetSimPs(v SimulationParameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSimPs sets the simPs field to a newly
// allocated SimulationParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSimPs() (SimulationParameters, error) {
	ss, err := NewSimulationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SimulationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) GroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

func (s MonicaModelState) HasGroundwaterInformation() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s MonicaModelState) SetGroundwaterInformation(v MeasuredGroundwaterTableInformation) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewGroundwaterInformation sets the groundwaterInformation field to a newly
// allocated MeasuredGroundwaterTableInformation struct, preferring placement in s's segment.
func (s MonicaModelState) NewGroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	ss, err := NewMeasuredGroundwaterTableInformation(capnp.Struct(s).Segment())
	if err != nil {
		return MeasuredGroundwaterTableInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilColumn() (SoilColumnState, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return SoilColumnState(p.Struct()), err
}

func (s MonicaModelState) HasSoilColumn() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s MonicaModelState) SetSoilColumn(v SoilColumnState) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewSoilColumn sets the soilColumn field to a newly
// allocated SoilColumnState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilColumn() (SoilColumnState, error) {
	ss, err := NewSoilColumnState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilColumnState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTemperature() (SoilTemperatureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return SoilTemperatureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s MonicaModelState) SetSoilTemperature(v SoilTemperatureModuleState) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated SoilTemperatureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTemperature() (SoilTemperatureModuleState, error) {
	ss, err := NewSoilTemperatureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilMoisture() (SoilMoistureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return SoilMoistureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s MonicaModelState) SetSoilMoisture(v SoilMoistureModuleState) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated SoilMoistureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilMoisture() (SoilMoistureModuleState, error) {
	ss, err := NewSoilMoistureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilOrganic() (SoilOrganicModuleState, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return SoilOrganicModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilOrganic() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s MonicaModelState) SetSoilOrganic(v SoilOrganicModuleState) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewSoilOrganic sets the soilOrganic field to a newly
// allocated SoilOrganicModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilOrganic() (SoilOrganicModuleState, error) {
	ss, err := NewSoilOrganicModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTransport() (SoilTransportModuleState, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return SoilTransportModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTransport() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s MonicaModelState) SetSoilTransport(v SoilTransportModuleState) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewSoilTransport sets the soilTransport field to a newly
// allocated SoilTransportModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTransport() (SoilTransportModuleState, error) {
	ss, err := NewSoilTransportModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CurrentCropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropModuleState(p.Struct()), err
}

func (s MonicaModelState) HasCurrentCropModule() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s MonicaModelState) SetCurrentCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewCurrentCropModule sets the currentCropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s MonicaModelState) SetSumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s MonicaModelState) SumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s MonicaModelState) SetSumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s MonicaModelState) DailySumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s MonicaModelState) SetDailySumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s MonicaModelState) SetDailySumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s MonicaModelState) SetDailySumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s MonicaModelState) SumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s MonicaModelState) SetSumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s MonicaModelState) HumusBalanceCarryOver() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s MonicaModelState) SetHumusBalanceCarryOver(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s MonicaModelState) DailySumIrrigationWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s MonicaModelState) SetDailySumIrrigationWater(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonExportedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s MonicaModelState) SetOptCarbonExportedResidues(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonReturnedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s MonicaModelState) SetOptCarbonReturnedResidues(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s MonicaModelState) CurrentStepDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return common.Date(p.Struct()), err
}

func (s MonicaModelState) HasCurrentStepDate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s MonicaModelState) SetCurrentStepDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewCurrentStepDate sets the currentStepDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentStepDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) ClimateData() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.PointerList(p.List()), err
}

func (s MonicaModelState) HasClimateData() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s MonicaModelState) SetClimateData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewClimateData sets the climateData field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s MonicaModelState) NewClimateData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s MonicaModelState) CurrentEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasCurrentEvents() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s MonicaModelState) SetCurrentEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewCurrentEvents sets the currentEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s MonicaModelState) PreviousDaysEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasPreviousDaysEvents() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s MonicaModelState) SetPreviousDaysEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPreviousDaysEvents sets the previousDaysEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewPreviousDaysEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s MonicaModelState) ClearCropUponNextDay() bool {
	return capnp.Struct(s).Bit(16)
}

func (s MonicaModelState) SetClearCropUponNextDay(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s MonicaModelState) DaysWithCrop() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s MonicaModelState) SetDaysWithCrop(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s MonicaModelState) AccuNStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s MonicaModelState) SetAccuNStress(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s MonicaModelState) AccuWaterStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s MonicaModelState) SetAccuWaterStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s MonicaModelState) AccuHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s MonicaModelState) SetAccuHeatStress(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s MonicaModelState) AccuOxygenStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s MonicaModelState) SetAccuOxygenStress(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericCO2Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s MonicaModelState) SetVwAtmosphericCO2Concentration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericO3Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s MonicaModelState) SetVwAtmosphericO3Concentration(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s MonicaModelState) VsGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState) SetVsGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s MonicaModelState) CultivationMethodCount() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState) SetCultivationMethodCount(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// MonicaModelState_List is a list of MonicaModelState.
type MonicaModelState_List = capnp.StructList[MonicaModelState]

// NewMonicaModelState creates a new list of MonicaModelState.
func NewMonicaModelState_List(s *capnp.Segment, sz int32) (MonicaModelState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15}, sz)
	return capnp.StructList[MonicaModelState](l), err
}

// MonicaModelState_Future is a wrapper for a MonicaModelState promised by a client call.
type MonicaModelState_Future struct{ *capnp.Future }

func (f MonicaModelState_Future) Struct() (MonicaModelState, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState(p.Struct()), err
}
func (p MonicaModelState_Future) SitePs() SiteParameters_Future {
	return SiteParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p MonicaModelState_Future) EnvPs() EnvironmentParameters_Future {
	return EnvironmentParameters_Future{Future: p.Future.Field(1, nil)}
}
func (p MonicaModelState_Future) CropPs() CropModuleParameters_Future {
	return CropModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p MonicaModelState_Future) SimPs() SimulationParameters_Future {
	return SimulationParameters_Future{Future: p.Future.Field(3, nil)}
}
func (p MonicaModelState_Future) GroundwaterInformation() MeasuredGroundwaterTableInformation_Future {
	return MeasuredGroundwaterTableInformation_Future{Future: p.Future.Field(4, nil)}
}
func (p MonicaModelState_Future) SoilColumn() SoilColumnState_Future {
	return SoilColumnState_Future{Future: p.Future.Field(5, nil)}
}
func (p MonicaModelState_Future) SoilTemperature() SoilTemperatureModuleState_Future {
	return SoilTemperatureModuleState_Future{Future: p.Future.Field(6, nil)}
}
func (p MonicaModelState_Future) SoilMoisture() SoilMoistureModuleState_Future {
	return SoilMoistureModuleState_Future{Future: p.Future.Field(7, nil)}
}
func (p MonicaModelState_Future) SoilOrganic() SoilOrganicModuleState_Future {
	return SoilOrganicModuleState_Future{Future: p.Future.Field(8, nil)}
}
func (p MonicaModelState_Future) SoilTransport() SoilTransportModuleState_Future {
	return SoilTransportModuleState_Future{Future: p.Future.Field(9, nil)}
}
func (p MonicaModelState_Future) CurrentCropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(10, nil)}
}
func (p MonicaModelState_Future) CurrentStepDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(11, nil)}
}

type MonicaModelState_ACDToValue capnp.Struct

// MonicaModelState_ACDToValue_TypeID is the unique identifier for the type MonicaModelState_ACDToValue.
const MonicaModelState_ACDToValue_TypeID = 0x98e203c76f83d365

func NewMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func NewRootMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func ReadRootMonicaModelState_ACDToValue(msg *capnp.Message) (MonicaModelState_ACDToValue, error) {
	root, err := msg.Root()
	return MonicaModelState_ACDToValue(root.Struct()), err
}

func (s MonicaModelState_ACDToValue) String() string {
	str, _ := text.Marshal(0x98e203c76f83d365, capnp.Struct(s))
	return str
}

func (s MonicaModelState_ACDToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState_ACDToValue) DecodeFromPtr(p capnp.Ptr) MonicaModelState_ACDToValue {
	return MonicaModelState_ACDToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState_ACDToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState_ACDToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState_ACDToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState_ACDToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState_ACDToValue) Acd() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState_ACDToValue) SetAcd(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s MonicaModelState_ACDToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState_ACDToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// MonicaModelState_ACDToValue_List is a list of MonicaModelState_ACDToValue.
type MonicaModelState_ACDToValue_List = capnp.StructList[MonicaModelState_ACDToValue]

// NewMonicaModelState_ACDToValue creates a new list of MonicaModelState_ACDToValue.
func NewMonicaModelState_ACDToValue_List(s *capnp.Segment, sz int32) (MonicaModelState_ACDToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MonicaModelState_ACDToValue](l), err
}

// MonicaModelState_ACDToValue_Future is a wrapper for a MonicaModelState_ACDToValue promised by a client call.
type MonicaModelState_ACDToValue_Future struct{ *capnp.Future }

func (f MonicaModelState_ACDToValue_Future) Struct() (MonicaModelState_ACDToValue, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState_ACDToValue(p.Struct()), err
}

type CropModuleState capnp.Struct

// CropModuleState_TypeID is the unique identifier for the type CropModuleState.
const CropModuleState_TypeID = 0x811d54ac7debc21e

func NewCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func NewRootCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func ReadRootCropModuleState(msg *capnp.Message) (CropModuleState, error) {
	root, err := msg.Root()
	return CropModuleState(root.Struct()), err
}

func (s CropModuleState) String() string {
	str, _ := text.Marshal(0x811d54ac7debc21e, capnp.Struct(s))
	return str
}

func (s CropModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleState) DecodeFromPtr(p capnp.Ptr) CropModuleState {
	return CropModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleState) FrostKillOn() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CropModuleState) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CropModuleState) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(47)
	return SpeciesParameters(p.Struct()), err
}

func (s CropModuleState) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(47)
}

func (s CropModuleState) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(47, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(47, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(48)
	return CultivarParameters(p.Struct()), err
}

func (s CropModuleState) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(48)
}

func (s CropModuleState) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(48, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(48, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(49)
	return CropResidueParameters(p.Struct()), err
}

func (s CropModuleState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(49)
}

func (s CropModuleState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(49, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(49, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) IsWinterCrop() bool {
	return capnp.Struct(s).Bit(7285)
}

func (s CropModuleState) SetIsWinterCrop(v bool) {
	capnp.Struct(s).SetBit(7285, v)
}

func (s CropModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleState) SetAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleState) SetAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleState) PcAbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropModuleState) SetPcAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPcAbovegroundOrgan sets the pcAbovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CropModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleState) PcAssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropModuleState) SetPcAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPcAssimilatePartitioningCoeff sets the pcAssimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcAssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleState) SetPcAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleState) Assimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleState) SetAssimilates(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleState) AssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleState) SetAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleState) AstronomicDayLenght() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleState) SetAstronomicDayLenght(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleState) PcBaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropModuleState) SetPcBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPcBaseDaylength sets the pcBaseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropModuleState) SetPcBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPcBaseTemperature sets the pcBaseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleState) SetPcBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleState) SetBelowgroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CropModuleState) SetBelowgroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CropModuleState) PcCarboxylationPathway() int64 {
	return int64(capnp.Struct(s).Uint64(128))
}

func (s CropModuleState) SetPcCarboxylationPathway(v int64) {
	capnp.Struct(s).SetUint64(128, uint64(v))
}

func (s CropModuleState) ClearDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s CropModuleState) SetClearDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s CropModuleState) PcCo2Method() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 3
}

func (s CropModuleState) SetPcCo2Method(v uint8) {
	capnp.Struct(s).SetUint8(1, v^3)
}

func (s CropModuleState) CriticalNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s CropModuleState) SetCriticalNConcentration(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s CropModuleState) PcCriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropModuleState) SetPcCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewPcCriticalOxygenContent sets the pcCriticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcCriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CropModuleState) SetPcCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CropModuleState) CropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CropModuleState) SetCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CropModuleState) CropFrostRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropFrostRedux(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeatRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropHeatRedux(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s CropModuleState) SetCropHeight(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s CropModuleState) SetPcCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s CropModuleState) SetPcCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s CropModuleState) PcCropName() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s CropModuleState) HasPcCropName() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropModuleState) PcCropNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s CropModuleState) SetPcCropName(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s CropModuleState) CropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s CropModuleState) SetCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s CropModuleState) CropNRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropNRedux(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcCropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s CropModuleState) SetPcCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s CropModuleState) CropWaterUptake() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCropWaterUptake() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropModuleState) SetCropWaterUptake(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCropWaterUptake sets the cropWaterUptake field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCropWaterUptake(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCurrentTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropModuleState) SetCurrentTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCurrentTemperatureSum sets the currentTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCurrentTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s CropModuleState) SetCurrentTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s CropModuleState) CurrentTotalTemperatureSumRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s CropModuleState) SetCurrentTotalTemperatureSumRoot(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s CropModuleState) PcCuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s CropModuleState) SetPcCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s CropModuleState) DaylengthFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s CropModuleState) SetDaylengthFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s CropModuleState) PcDaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropModuleState) SetPcDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPcDaylengthRequirement sets the pcDaylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CropModuleState) DaysAfterBeginFlowering() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s CropModuleState) SetDaysAfterBeginFlowering(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s CropModuleState) Declination() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s CropModuleState) SetDeclination(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s CropModuleState) PcDefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s CropModuleState) SetPcDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s CropModuleState) VmDepthGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s CropModuleState) SetVmDepthGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s CropModuleState) PcDevelopmentAccelerationByNitrogenStress() uint64 {
	return capnp.Struct(s).Uint64(272)
}

func (s CropModuleState) SetPcDevelopmentAccelerationByNitrogenStress(v uint64) {
	capnp.Struct(s).SetUint64(272, v)
}

func (s CropModuleState) DevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(280)
}

func (s CropModuleState) SetDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(280, v)
}

func (s CropModuleState) NoOfCropSteps() uint16 {
	return capnp.Struct(s).Uint16(282)
}

func (s CropModuleState) SetNoOfCropSteps(v uint16) {
	capnp.Struct(s).SetUint16(282, v)
}

func (s CropModuleState) DroughtImpactOnFertility() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetDroughtImpactOnFertility(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcDroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s CropModuleState) SetPcDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s CropModuleState) PcDroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropModuleState) SetPcDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewPcDroughtStressThreshold sets the pcDroughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcEmergenceFloodingControlOn() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CropModuleState) SetPcEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CropModuleState) PcEmergenceMoistureControlOn() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CropModuleState) SetPcEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CropModuleState) PcEndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s CropModuleState) SetPcEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s CropModuleState) EffectiveDayLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s CropModuleState) SetEffectiveDayLength(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s CropModuleState) ErrorStatus() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CropModuleState) SetErrorStatus(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CropModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s CropModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s CropModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s CropModuleState) EvaporatedFromIntercept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320))
}

func (s CropModuleState) SetEvaporatedFromIntercept(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v))
}

func (s CropModuleState) ExtraterrestrialRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(328))
}

func (s CropModuleState) SetExtraterrestrialRadiation(v float64) {
	capnp.Struct(s).SetUint64(328, math.Float64bits(v))
}

func (s CropModuleState) PcFieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(336))
}

func (s CropModuleState) SetPcFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(336, math.Float64bits(v))
}

func (s CropModuleState) FinalDevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(284)
}

func (s CropModuleState) SetFinalDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(284, v)
}

func (s CropModuleState) FixedN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(344))
}

func (s CropModuleState) SetFixedN(v float64) {
	capnp.Struct(s).SetUint64(344, math.Float64bits(v))
}

func (s CropModuleState) PcFrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(352))
}

func (s CropModuleState) SetPcFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(352, math.Float64bits(v))
}

func (s CropModuleState) PcFrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(360))
}

func (s CropModuleState) SetPcFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(360, math.Float64bits(v))
}

func (s CropModuleState) GlobalRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(368))
}

func (s CropModuleState) SetGlobalRadiation(v float64) {
	capnp.Struct(s).SetUint64(368, math.Float64bits(v))
}

func (s CropModuleState) GreenAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(376))
}

func (s CropModuleState) SetGreenAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(376, math.Float64bits(v))
}

func (s CropModuleState) GrossAssimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(384))
}

func (s CropModuleState) SetGrossAssimilates(v float64) {
	capnp.Struct(s).SetUint64(384, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(392))
}

func (s CropModuleState) SetGrossPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(392, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(400))
}

func (s CropModuleState) SetGrossPhotosynthesisMol(v float64) {
	capnp.Struct(s).SetUint64(400, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisReferenceMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(408))
}

func (s CropModuleState) SetGrossPhotosynthesisReferenceMol(v float64) {
	capnp.Struct(s).SetUint64(408, math.Float64bits(v))
}

func (s CropModuleState) GrossPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(416))
}

func (s CropModuleState) SetGrossPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(416, math.Float64bits(v))
}

func (s CropModuleState) GrowthCycleEnded() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CropModuleState) SetGrowthCycleEnded(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CropModuleState) GrowthRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(424))
}

func (s CropModuleState) SetGrowthRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(424, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(432))
}

func (s CropModuleState) SetPcHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(432, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(440))
}

func (s CropModuleState) SetPcHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(440, math.Float64bits(v))
}

func (s CropModuleState) VsHeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(448))
}

func (s CropModuleState) SetVsHeightNN(v float64) {
	capnp.Struct(s).SetUint64(448, math.Float64bits(v))
}

func (s CropModuleState) PcInitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(456))
}

func (s CropModuleState) SetPcInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(456, math.Float64bits(v))
}

func (s CropModuleState) PcInitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CropModuleState) SetPcInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPcInitialOrganBiomass sets the pcInitialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcInitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(464))
}

func (s CropModuleState) SetPcInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(464, math.Float64bits(v))
}

func (s CropModuleState) InterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(472))
}

func (s CropModuleState) SetInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(472, math.Float64bits(v))
}

func (s CropModuleState) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(480) ^ 0x3fe3333333333333)
}

func (s CropModuleState) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(480, math.Float64bits(v)^0x3fe3333333333333)
}

func (s CropModuleState) LeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(488))
}

func (s CropModuleState) SetLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(488, math.Float64bits(v))
}

func (s CropModuleState) SunlitLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasSunlitLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CropModuleState) SetSunlitLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewSunlitLeafAreaIndex sets the sunlitLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewSunlitLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CropModuleState) ShadedLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasShadedLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CropModuleState) SetShadedLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewShadedLeafAreaIndex sets the shadedLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewShadedLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcLowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(496))
}

func (s CropModuleState) SetPcLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(496, math.Float64bits(v))
}

func (s CropModuleState) PcLimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(504))
}

func (s CropModuleState) SetPcLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(504, math.Float64bits(v))
}

func (s CropModuleState) Lt50() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(512) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50(v float64) {
	capnp.Struct(s).SetUint64(512, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) Lt50m() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1240) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50m(v float64) {
	capnp.Struct(s).SetUint64(1240, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) PcLt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(520))
}

func (s CropModuleState) SetPcLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(520, math.Float64bits(v))
}

func (s CropModuleState) PcLuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(528))
}

func (s CropModuleState) SetPcLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(528, math.Float64bits(v))
}

func (s CropModuleState) MaintenanceRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(536))
}

func (s CropModuleState) SetMaintenanceRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(536, math.Float64bits(v))
}

func (s CropModuleState) PcMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(544))
}

func (s CropModuleState) SetPcMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(544, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(552))
}

func (s CropModuleState) SetPcMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(552, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(560))
}

func (s CropModuleState) SetPcMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(560, math.Float64bits(v))
}

func (s CropModuleState) MaxNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(568))
}

func (s CropModuleState) SetMaxNUptake(v float64) {
	capnp.Struct(s).SetUint64(568, math.Float64bits(v))
}

func (s CropModuleState) PcMaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(576))
}

func (s CropModuleState) SetPcMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(576, math.Float64bits(v))
}

func (s CropModuleState) PcMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(584))
}

func (s CropModuleState) SetPcMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(584, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(592))
}

func (s CropModuleState) SetPcMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(592, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(600))
}

func (s CropModuleState) SetPcMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(600, math.Float64bits(v))
}

func (s CropModuleState) PcOptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(608))
}

func (s CropModuleState) SetPcOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(608, math.Float64bits(v))
}

func (s CropModuleState) PcMaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(616))
}

func (s CropModuleState) SetPcMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(616, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(624))
}

func (s CropModuleState) SetPcMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(624, math.Float64bits(v))
}

func (s CropModuleState) NetMaintenanceRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(632))
}

func (s CropModuleState) SetNetMaintenanceRespiration(v float64) {
	capnp.Struct(s).SetUint64(632, math.Float64bits(v))
}

func (s CropModuleState) NetPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(640))
}

func (s CropModuleState) SetNetPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(640, math.Float64bits(v))
}

func (s CropModuleState) NetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(648))
}

func (s CropModuleState) SetNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(648, math.Float64bits(v))
}

func (s CropModuleState) NetPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(656))
}

func (s CropModuleState) SetNetPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(656, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(664))
}

func (s CropModuleState) SetPcNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(664, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(672))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(672, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(680))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(680, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(688))
}

func (s CropModuleState) SetPcNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(688, math.Float64bits(v))
}

func (s CropModuleState) NContentDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(696))
}

func (s CropModuleState) SetNContentDeficit(v float64) {
	capnp.Struct(s).SetUint64(696, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(704))
}

func (s CropModuleState) SetPcNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(704, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(712))
}

func (s CropModuleState) SetPcNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(712, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(720))
}

func (s CropModuleState) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(720, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRootOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(728))
}

func (s CropModuleState) SetNConcentrationRootOld(v float64) {
	capnp.Struct(s).SetUint64(728, math.Float64bits(v))
}

func (s CropModuleState) PcNitrogenResponseOn() bool {
	return capnp.Struct(s).Bit(6)
}

func (s CropModuleState) SetPcNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s CropModuleState) PcNumberOfDevelopmentalStages() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(736))
}

func (s CropModuleState) SetPcNumberOfDevelopmentalStages(v float64) {
	capnp.Struct(s).SetUint64(736, math.Float64bits(v))
}

func (s CropModuleState) PcNumberOfOrgans() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(744))
}

func (s CropModuleState) SetPcNumberOfOrgans(v float64) {
	capnp.Struct(s).SetUint64(744, math.Float64bits(v))
}

func (s CropModuleState) NUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CropModuleState) SetNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewNUptakeFromLayer sets the nUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s CropModuleState) SetPcOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPcOptimumTemperature sets the pcOptimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s CropModuleState) SetOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewOrganBiomass sets the organBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganDeadBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganDeadBiomass() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s CropModuleState) SetOrganDeadBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewOrganDeadBiomass sets the organDeadBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganDeadBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGreenBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGreenBiomass() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s CropModuleState) SetOrganGreenBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewOrganGreenBiomass sets the organGreenBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGreenBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGrowthIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGrowthIncrement() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s CropModuleState) SetOrganGrowthIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewOrganGrowthIncrement sets the organGrowthIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGrowthIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s CropModuleState) SetPcOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewPcOrganGrowthRespiration sets the pcOrganGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s CropModuleState) SetPcOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewPcOrganIdsForPrimaryYield sets the pcOrganIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(22)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(22)
}

func (s CropModuleState) SetPcOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(22, v.ToPtr())
}

// NewPcOrganIdsForSecondaryYield sets the pcOrganIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(22, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(23)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(23)
}

func (s CropModuleState) SetPcOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(23, v.ToPtr())
}

// NewPcOrganIdsForCutting sets the pcOrganIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(23, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(24)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(24)
}

func (s CropModuleState) SetPcOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(24, v.ToPtr())
}

// NewPcOrganMaintenanceRespiration sets the pcOrganMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(24, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganSenescenceIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(25)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganSenescenceIncrement() bool {
	return capnp.Struct(s).HasPtr(25)
}

func (s CropModuleState) SetOrganSenescenceIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(25, v.ToPtr())
}

// NewOrganSenescenceIncrement sets the organSenescenceIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganSenescenceIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(25, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(26)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(26)
}

func (s CropModuleState) SetPcOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(26, v.ToPtr())
}

// NewPcOrganSenescenceRate sets the pcOrganSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(26, l.ToPtr())
	return l, err
}
func (s CropModuleState) OvercastDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(752))
}

func (s CropModuleState) SetOvercastDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(752, math.Float64bits(v))
}

func (s CropModuleState) OxygenDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(760))
}

func (s CropModuleState) SetOxygenDeficit(v float64) {
	capnp.Struct(s).SetUint64(760, math.Float64bits(v))
}

func (s CropModuleState) PcPartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(768))
}

func (s CropModuleState) SetPcPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(768, math.Float64bits(v))
}

func (s CropModuleState) PcPerennial() bool {
	return capnp.Struct(s).Bit(7)
}

func (s CropModuleState) SetPcPerennial(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s CropModuleState) PhotoperiodicDaylength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(776))
}

func (s CropModuleState) SetPhotoperiodicDaylength(v float64) {
	capnp.Struct(s).SetUint64(776, math.Float64bits(v))
}

func (s CropModuleState) PhotActRadiationMean() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(784))
}

func (s CropModuleState) SetPhotActRadiationMean(v float64) {
	capnp.Struct(s).SetUint64(784, math.Float64bits(v))
}

func (s CropModuleState) PcPlantDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(792))
}

func (s CropModuleState) SetPcPlantDensity(v float64) {
	capnp.Struct(s).SetUint64(792, math.Float64bits(v))
}

func (s CropModuleState) PotentialTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(800))
}

func (s CropModuleState) SetPotentialTranspiration(v float64) {
	capnp.Struct(s).SetUint64(800, math.Float64bits(v))
}

func (s CropModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(808))
}

func (s CropModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(808, math.Float64bits(v))
}

func (s CropModuleState) RelativeTotalDevelopment() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(816))
}

func (s CropModuleState) SetRelativeTotalDevelopment(v float64) {
	capnp.Struct(s).SetUint64(816, math.Float64bits(v))
}

func (s CropModuleState) RemainingEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(824))
}

func (s CropModuleState) SetRemainingEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(824, math.Float64bits(v))
}

func (s CropModuleState) ReserveAssimilatePool() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(832))
}

func (s CropModuleState) SetReserveAssimilatePool(v float64) {
	capnp.Struct(s).SetUint64(832, math.Float64bits(v))
}

func (s CropModuleState) PcResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(840))
}

func (s CropModuleState) SetPcResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(840, math.Float64bits(v))
}

func (s CropModuleState) PcRespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(848))
}

func (s CropModuleState) SetPcRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(848, math.Float64bits(v))
}

func (s CropModuleState) RootBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(856))
}

func (s CropModuleState) SetRootBiomass(v float64) {
	capnp.Struct(s).SetUint64(856, math.Float64bits(v))
}

func (s CropModuleState) RootBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(864))
}

func (s CropModuleState) SetRootBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(864, math.Float64bits(v))
}

func (s CropModuleState) RootDensity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(27)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDensity() bool {
	return capnp.Struct(s).HasPtr(27)
}

func (s CropModuleState) SetRootDensity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(27, v.ToPtr())
}

// NewRootDensity sets the rootDensity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDensity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(27, l.ToPtr())
	return l, err
}
func (s CropModuleState) RootDiameter() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(28)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDiameter() bool {
	return capnp.Struct(s).HasPtr(28)
}

func (s CropModuleState) SetRootDiameter(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(28, v.ToPtr())
}

// NewRootDiameter sets the rootDiameter field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDiameter(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(28, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(872))
}

func (s CropModuleState) SetPcRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(872, math.Float64bits(v))
}

func (s CropModuleState) RootEffectivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(29)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootEffectivity() bool {
	return capnp.Struct(s).HasPtr(29)
}

func (s CropModuleState) SetRootEffectivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(29, v.ToPtr())
}

// NewRootEffectivity sets the rootEffectivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootEffectivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(29, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(880))
}

func (s CropModuleState) SetPcRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(880, math.Float64bits(v))
}

func (s CropModuleState) PcRootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(888))
}

func (s CropModuleState) SetPcRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(888, math.Float64bits(v))
}

func (s CropModuleState) RootingDepth() uint16 {
	return capnp.Struct(s).Uint16(286)
}

func (s CropModuleState) SetRootingDepth(v uint16) {
	capnp.Struct(s).SetUint16(286, v)
}

func (s CropModuleState) RootingDepthM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(896))
}

func (s CropModuleState) SetRootingDepthM(v float64) {
	capnp.Struct(s).SetUint64(896, math.Float64bits(v))
}

func (s CropModuleState) RootingZone() uint16 {
	return capnp.Struct(s).Uint16(904)
}

func (s CropModuleState) SetRootingZone(v uint16) {
	capnp.Struct(s).SetUint16(904, v)
}

func (s CropModuleState) PcRootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(912))
}

func (s CropModuleState) SetPcRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(912, math.Float64bits(v))
}

func (s CropModuleState) VmSaturationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(920))
}

func (s CropModuleState) SetVmSaturationDeficit(v float64) {
	capnp.Struct(s).SetUint64(920, math.Float64bits(v))
}

func (s CropModuleState) SoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(928))
}

func (s CropModuleState) SetSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(928, math.Float64bits(v))
}

func (s CropModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(30)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(30)
}

func (s CropModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(30, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(30, l.ToPtr())
	return l, err
}
func (s CropModuleState) SoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(936))
}

func (s CropModuleState) SetSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(936, math.Float64bits(v))
}

func (s CropModuleState) VsSoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(944))
}

func (s CropModuleState) SetVsSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(944, math.Float64bits(v))
}

func (s CropModuleState) PcSpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(31)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(31)
}

func (s CropModuleState) SetPcSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(31, v.ToPtr())
}

// NewPcSpecificLeafArea sets the pcSpecificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(31, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcSpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(952))
}

func (s CropModuleState) SetPcSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(952, math.Float64bits(v))
}

func (s CropModuleState) PcStageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(906)
}

func (s CropModuleState) SetPcStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(906, v)
}

func (s CropModuleState) PcStageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(960))
}

func (s CropModuleState) SetPcStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(960, math.Float64bits(v))
}

func (s CropModuleState) PcStageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(968))
}

func (s CropModuleState) SetPcStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(968, math.Float64bits(v))
}

func (s CropModuleState) PcStageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(32)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(32)
}

func (s CropModuleState) SetPcStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(32, v.ToPtr())
}

// NewPcStageMaxRootNConcentration sets the pcStageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(32, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(33)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(33)
}

func (s CropModuleState) SetPcStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(33, v.ToPtr())
}

// NewPcStageKcFactor sets the pcStageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(33, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(34)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(34)
}

func (s CropModuleState) SetPcStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(34, v.ToPtr())
}

// NewPcStageTemperatureSum sets the pcStageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(34, l.ToPtr())
	return l, err
}
func (s CropModuleState) StomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(976))
}

func (s CropModuleState) SetStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(976, math.Float64bits(v))
}

func (s CropModuleState) PcStorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(35)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(35)
}

func (s CropModuleState) SetPcStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(35, v.ToPtr())
}

// NewPcStorageOrgan sets the pcStorageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(35, l.ToPtr())
	return l, err
}
func (s CropModuleState) StorageOrgan() uint16 {
	return capnp.Struct(s).Uint16(908) ^ 4
}

func (s CropModuleState) SetStorageOrgan(v uint16) {
	capnp.Struct(s).SetUint16(908, v^4)
}

func (s CropModuleState) TargetNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(984))
}

func (s CropModuleState) SetTargetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(984, math.Float64bits(v))
}

func (s CropModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(992) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(992, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) TimeUnderAnoxia() uint64 {
	return capnp.Struct(s).Uint64(1000)
}

func (s CropModuleState) SetTimeUnderAnoxia(v uint64) {
	capnp.Struct(s).SetUint64(1000, v)
}

func (s CropModuleState) VsTortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1008))
}

func (s CropModuleState) SetVsTortuosity(v float64) {
	capnp.Struct(s).SetUint64(1008, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1016))
}

func (s CropModuleState) SetTotalBiomass(v float64) {
	capnp.Struct(s).SetUint64(1016, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomassNContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1024))
}

func (s CropModuleState) SetTotalBiomassNContent(v float64) {
	capnp.Struct(s).SetUint64(1024, math.Float64bits(v))
}

func (s CropModuleState) TotalCropHeatImpact() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1032))
}

func (s CropModuleState) SetTotalCropHeatImpact(v float64) {
	capnp.Struct(s).SetUint64(1032, math.Float64bits(v))
}

func (s CropModuleState) TotalNInput() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1040))
}

func (s CropModuleState) SetTotalNInput(v float64) {
	capnp.Struct(s).SetUint64(1040, math.Float64bits(v))
}

func (s CropModuleState) TotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1048))
}

func (s CropModuleState) SetTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1048, math.Float64bits(v))
}

func (s CropModuleState) TotalRespired() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1056))
}

func (s CropModuleState) SetTotalRespired(v float64) {
	capnp.Struct(s).SetUint64(1056, math.Float64bits(v))
}

func (s CropModuleState) Respiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1064))
}

func (s CropModuleState) SetRespiration(v float64) {
	capnp.Struct(s).SetUint64(1064, math.Float64bits(v))
}

func (s CropModuleState) SumTotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1072))
}

func (s CropModuleState) SetSumTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1072, math.Float64bits(v))
}

func (s CropModuleState) TotalRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1080))
}

func (s CropModuleState) SetTotalRootLength(v float64) {
	capnp.Struct(s).SetUint64(1080, math.Float64bits(v))
}

func (s CropModuleState) TotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1088))
}

func (s CropModuleState) SetTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(1088, math.Float64bits(v))
}

func (s CropModuleState) TemperatureSumToFlowering() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1096))
}

func (s CropModuleState) SetTemperatureSumToFlowering(v float64) {
	capnp.Struct(s).SetUint64(1096, math.Float64bits(v))
}

func (s CropModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(36)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(36)
}

func (s CropModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(36, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(36, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(37)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspirationRedux() bool {
	return capnp.Struct(s).HasPtr(37)
}

func (s CropModuleState) SetTranspirationRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(37, v.ToPtr())
}

// NewTranspirationRedux sets the transpirationRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspirationRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(37, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1104) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(1104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) VernalisationDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1112))
}

func (s CropModuleState) SetVernalisationDays(v float64) {
	capnp.Struct(s).SetUint64(1112, math.Float64bits(v))
}

func (s CropModuleState) VernalisationFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1120))
}

func (s CropModuleState) SetVernalisationFactor(v float64) {
	capnp.Struct(s).SetUint64(1120, math.Float64bits(v))
}

func (s CropModuleState) PcVernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(38)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(38)
}

func (s CropModuleState) SetPcVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(38, v.ToPtr())
}

// NewPcVernalisationRequirement sets the pcVernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(38, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcWaterDeficitResponseOn() bool {
	return capnp.Struct(s).Bit(7280)
}

func (s CropModuleState) SetPcWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(7280, v)
}

func (s CropModuleState) DyingOut() bool {
	return capnp.Struct(s).Bit(7281)
}

func (s CropModuleState) SetDyingOut(v bool) {
	capnp.Struct(s).SetBit(7281, v)
}

func (s CropModuleState) AccumulatedETa() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1152))
}

func (s CropModuleState) SetAccumulatedETa(v float64) {
	capnp.Struct(s).SetUint64(1152, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1160))
}

func (s CropModuleState) SetAccumulatedTranspiration(v float64) {
	capnp.Struct(s).SetUint64(1160, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedPrimaryCropYield() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1168))
}

func (s CropModuleState) SetAccumulatedPrimaryCropYield(v float64) {
	capnp.Struct(s).SetUint64(1168, math.Float64bits(v))
}

func (s CropModuleState) SumExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1176))
}

func (s CropModuleState) SetSumExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1176, math.Float64bits(v))
}

func (s CropModuleState) ExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1184))
}

func (s CropModuleState) SetExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1184, math.Float64bits(v))
}

func (s CropModuleState) SumResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1192))
}

func (s CropModuleState) SetSumResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1192, math.Float64bits(v))
}

func (s CropModuleState) ResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1200))
}

func (s CropModuleState) SetResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1200, math.Float64bits(v))
}

func (s CropModuleState) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(1208)
}

func (s CropModuleState) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(1208, v)
}

func (s CropModuleState) VsMaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1216))
}

func (s CropModuleState) SetVsMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(1216, math.Float64bits(v))
}

func (s CropModuleState) VsImpenetrableLayerDept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1224))
}

func (s CropModuleState) SetVsImpenetrableLayerDept(v float64) {
	capnp.Struct(s).SetUint64(1224, math.Float64bits(v))
}

func (s CropModuleState) AnthesisDay() int16 {
	return int16(capnp.Struct(s).Uint16(1210) ^ 65535)
}

func (s CropModuleState) SetAnthesisDay(v int16) {
	capnp.Struct(s).SetUint16(1210, uint16(v)^65535)
}

func (s CropModuleState) MaturityDay() int16 {
	return int16(capnp.Struct(s).Uint16(1212) ^ 65535)
}

func (s CropModuleState) SetMaturityDay(v int16) {
	capnp.Struct(s).SetUint16(1212, uint16(v)^65535)
}

func (s CropModuleState) MaturityReached() bool {
	return capnp.Struct(s).Bit(7282)
}

func (s CropModuleState) SetMaturityReached(v bool) {
	capnp.Struct(s).SetBit(7282, v)
}

func (s CropModuleState) StepSize24() uint16 {
	return capnp.Struct(s).Uint16(1214) ^ 24
}

func (s CropModuleState) SetStepSize24(v uint16) {
	capnp.Struct(s).SetUint16(1214, v^24)
}

func (s CropModuleState) StepSize240() uint16 {
	return capnp.Struct(s).Uint16(1232) ^ 240
}

func (s CropModuleState) SetStepSize240(v uint16) {
	capnp.Struct(s).SetUint16(1232, v^240)
}

func (s CropModuleState) Rad24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(39)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad24() bool {
	return capnp.Struct(s).HasPtr(39)
}

func (s CropModuleState) SetRad24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(39, v.ToPtr())
}

// NewRad24 sets the rad24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(39, l.ToPtr())
	return l, err
}
func (s CropModuleState) Rad240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(40)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad240() bool {
	return capnp.Struct(s).HasPtr(40)
}

func (s CropModuleState) SetRad240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(40, v.ToPtr())
}

// NewRad240 sets the rad240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(40, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(41)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol24() bool {
	return capnp.Struct(s).HasPtr(41)
}

func (s CropModuleState) SetTfol24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(41, v.ToPtr())
}

// NewTfol24 sets the tfol24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(41, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(42)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol240() bool {
	return capnp.Struct(s).HasPtr(42)
}

func (s CropModuleState) SetTfol240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(42, v.ToPtr())
}

// NewTfol240 sets the tfol240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(42, l.ToPtr())
	return l, err
}
func (s CropModuleState) Index24() uint16 {
	return capnp.Struct(s).Uint16(1234)
}

func (s CropModuleState) SetIndex24(v uint16) {
	capnp.Struct(s).SetUint16(1234, v)
}

func (s CropModuleState) Index240() uint16 {
	return capnp.Struct(s).Uint16(1236)
}

func (s CropModuleState) SetIndex240(v uint16) {
	capnp.Struct(s).SetUint16(1236, v)
}

func (s CropModuleState) Full24() bool {
	return capnp.Struct(s).Bit(7283)
}

func (s CropModuleState) SetFull24(v bool) {
	capnp.Struct(s).SetBit(7283, v)
}

func (s CropModuleState) Full240() bool {
	return capnp.Struct(s).Bit(7284)
}

func (s CropModuleState) SetFull240(v bool) {
	capnp.Struct(s).SetBit(7284, v)
}

func (s CropModuleState) GuentherEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(43)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasGuentherEmissions() bool {
	return capnp.Struct(s).HasPtr(43)
}

func (s CropModuleState) SetGuentherEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(43, capnp.Struct(v).ToPtr())
}

// NewGuentherEmissions sets the guentherEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewGuentherEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(43, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) JjvEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(44)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasJjvEmissions() bool {
	return capnp.Struct(s).HasPtr(44)
}

func (s CropModuleState) SetJjvEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(44, capnp.Struct(v).ToPtr())
}

// NewJjvEmissions sets the jjvEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewJjvEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(44, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) VocSpecies() (Voc_SpeciesData, error) {
	p, err := capnp.Struct(s).Ptr(45)
	return Voc_SpeciesData(p.Struct()), err
}

func (s CropModuleState) HasVocSpecies() bool {
	return capnp.Struct(s).HasPtr(45)
}

func (s CropModuleState) SetVocSpecies(v Voc_SpeciesData) error {
	return capnp.Struct(s).SetPtr(45, capnp.Struct(v).ToPtr())
}

// NewVocSpecies sets the vocSpecies field to a newly
// allocated Voc_SpeciesData struct, preferring placement in s's segment.
func (s CropModuleState) NewVocSpecies() (Voc_SpeciesData, error) {
	ss, err := NewVoc_SpeciesData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_SpeciesData{}, err
	}
	err = capnp.Struct(s).SetPtr(45, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CropPhotosynthesisResults() (Voc_CPData, error) {
	p, err := capnp.Struct(s).Ptr(46)
	return Voc_CPData(p.Struct()), err
}

func (s CropModuleState) HasCropPhotosynthesisResults() bool {
	return capnp.Struct(s).HasPtr(46)
}

func (s CropModuleState) SetCropPhotosynthesisResults(v Voc_CPData) error {
	return capnp.Struct(s).SetPtr(46, capnp.Struct(v).ToPtr())
}

// NewCropPhotosynthesisResults sets the cropPhotosynthesisResults field to a newly
// allocated Voc_CPData struct, preferring placement in s's segment.
func (s CropModuleState) NewCropPhotosynthesisResults() (Voc_CPData, error) {
	ss, err := NewVoc_CPData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_CPData{}, err
	}
	err = capnp.Struct(s).SetPtr(46, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) O3ShortTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1144) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3ShortTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1144, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3LongTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1136) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3LongTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1136, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3Senescence() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1128) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3Senescence(v float64) {
	capnp.Struct(s).SetUint64(1128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3SumUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleState) SetO3SumUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleState) O3WStomatalClosure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3WStomatalClosure(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) AssimilatePartCoeffsReduced() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CropModuleState) SetAssimilatePartCoeffsReduced(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CropModuleState) Ktkc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleState) SetKtkc(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleState) Ktko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleState) SetKtko(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleState) StemElongationEventFired() bool {
	return capnp.Struct(s).Bit(7286)
}

func (s CropModuleState) SetStemElongationEventFired(v bool) {
	capnp.Struct(s).SetBit(7286, v)
}

// CropModuleState_List is a list of CropModuleState.
type CropModuleState_List = capnp.StructList[CropModuleState]

// NewCropModuleState creates a new list of CropModuleState.
func NewCropModuleState_List(s *capnp.Segment, sz int32) (CropModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50}, sz)
	return capnp.StructList[CropModuleState](l), err
}

// CropModuleState_Future is a wrapper for a CropModuleState promised by a client call.
type CropModuleState_Future struct{ *capnp.Future }

func (f CropModuleState_Future) Struct() (CropModuleState, error) {
	p, err := f.Future.Ptr()
	return CropModuleState(p.Struct()), err
}
func (p CropModuleState_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(47, nil)}
}
func (p CropModuleState_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(48, nil)}
}
func (p CropModuleState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(49, nil)}
}
func (p CropModuleState_Future) GuentherEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(43, nil)}
}
func (p CropModuleState_Future) JjvEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(44, nil)}
}
func (p CropModuleState_Future) VocSpecies() Voc_SpeciesData_Future {
	return Voc_SpeciesData_Future{Future: p.Future.Field(45, nil)}
}
func (p CropModuleState_Future) CropPhotosynthesisResults() Voc_CPData_Future {
	return Voc_CPData_Future{Future: p.Future.Field(46, nil)}
}

type SnowModuleState capnp.Struct

// SnowModuleState_TypeID is the unique identifier for the type SnowModuleState.
const SnowModuleState_TypeID = 0xa4da01d10b3b6acd

func NewSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func NewRootSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func ReadRootSnowModuleState(msg *capnp.Message) (SnowModuleState, error) {
	root, err := msg.Root()
	return SnowModuleState(root.Struct()), err
}

func (s SnowModuleState) String() string {
	str, _ := text.Marshal(0xa4da01d10b3b6acd, capnp.Struct(s))
	return str
}

func (s SnowModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SnowModuleState) DecodeFromPtr(p capnp.Ptr) SnowModuleState {
	return SnowModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SnowModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SnowModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SnowModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SnowModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SnowModuleState) SnowDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SnowModuleState) SetSnowDensity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SnowModuleState) SnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SnowModuleState) SetSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SnowModuleState) FrozenWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SnowModuleState) SetFrozenWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SnowModuleState) LiquidWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SnowModuleState) SetLiquidWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SnowModuleState) WaterToInfiltrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SnowModuleState) SetWaterToInfiltrate(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SnowModuleState) MaxSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SnowModuleState) SetMaxSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SnowModuleState) AccumulatedSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SnowModuleState) SetAccumulatedSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SnowModuleState) SnowmeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SnowModuleState) SetSnowmeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SnowModuleState) SnowAccumulationThresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SnowModuleState) SetSnowAccumulationThresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SnowModuleState) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SnowModuleState) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SnowModuleState) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SnowModuleState) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SnowModuleState) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SnowModuleState) SetRefreezeP1(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SnowModuleState) SetRefreezeP2(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SnowModuleState) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SnowModuleState) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SnowModuleState) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SnowModuleState) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SnowModuleState) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SnowModuleState) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SnowModuleState) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SnowModuleState) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SnowModuleState_List is a list of SnowModuleState.
type SnowModuleState_List = capnp.StructList[SnowModuleState]

// NewSnowModuleState creates a new list of SnowModuleState.
func NewSnowModuleState_List(s *capnp.Segment, sz int32) (SnowModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0}, sz)
	return capnp.StructList[SnowModuleState](l), err
}

// SnowModuleState_Future is a wrapper for a SnowModuleState promised by a client call.
type SnowModuleState_Future struct{ *capnp.Future }

func (f SnowModuleState_Future) Struct() (SnowModuleState, error) {
	p, err := f.Future.Ptr()
	return SnowModuleState(p.Struct()), err
}

type FrostModuleState capnp.Struct

// FrostModuleState_TypeID is the unique identifier for the type FrostModuleState.
const FrostModuleState_TypeID = 0xb4f16ea3144d85a6

func NewFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func NewRootFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func ReadRootFrostModuleState(msg *capnp.Message) (FrostModuleState, error) {
	root, err := msg.Root()
	return FrostModuleState(root.Struct()), err
}

func (s FrostModuleState) String() string {
	str, _ := text.Marshal(0xb4f16ea3144d85a6, capnp.Struct(s))
	return str
}

func (s FrostModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FrostModuleState) DecodeFromPtr(p capnp.Ptr) FrostModuleState {
	return FrostModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FrostModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FrostModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FrostModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FrostModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FrostModuleState) FrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s FrostModuleState) SetFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s FrostModuleState) AccumulatedFrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s FrostModuleState) SetAccumulatedFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s FrostModuleState) NegativeDegreeDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s FrostModuleState) SetNegativeDegreeDays(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s FrostModuleState) ThawDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s FrostModuleState) SetThawDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s FrostModuleState) FrostDays() uint16 {
	return capnp.Struct(s).Uint16(40)
}

func (s FrostModuleState) SetFrostDays(v uint16) {
	capnp.Struct(s).SetUint16(40, v)
}

func (s FrostModuleState) LambdaRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s FrostModuleState) HasLambdaRedux() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FrostModuleState) SetLambdaRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLambdaRedux sets the lambdaRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s FrostModuleState) NewLambdaRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s FrostModuleState) TemperatureUnderSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s FrostModuleState) SetTemperatureUnderSnow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s FrostModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s FrostModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s FrostModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s FrostModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s FrostModuleState) PmHydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s FrostModuleState) SetPmHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// FrostModuleState_List is a list of FrostModuleState.
type FrostModuleState_List = capnp.StructList[FrostModuleState]

// NewFrostModuleState creates a new list of FrostModuleState.
func NewFrostModuleState_List(s *capnp.Segment, sz int32) (FrostModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return capnp.StructList[FrostModuleState](l), err
}

// FrostModuleState_Future is a wrapper for a FrostModuleState promised by a client call.
type FrostModuleState_Future struct{ *capnp.Future }

func (f FrostModuleState_Future) Struct() (FrostModuleState, error) {
	p, err := f.Future.Ptr()
	return FrostModuleState(p.Struct()), err
}

type SoilMoistureModuleState capnp.Struct

// SoilMoistureModuleState_TypeID is the unique identifier for the type SoilMoistureModuleState.
const SoilMoistureModuleState_TypeID = 0xcd05962719bf7ec8

func NewSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func NewRootSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func ReadRootSoilMoistureModuleState(msg *capnp.Message) (SoilMoistureModuleState, error) {
	root, err := msg.Root()
	return SoilMoistureModuleState(root.Struct()), err
}

func (s SoilMoistureModuleState) String() string {
	str, _ := text.Marshal(0xcd05962719bf7ec8, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleState) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleState {
	return SoilMoistureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleState) ModuleParams() (SoilMoistureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilMoistureModuleParameters(p.Struct()), err
}

func (s SoilMoistureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilMoistureModuleState) SetModuleParams(v SoilMoistureModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilMoistureModuleParameters struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewModuleParams() (SoilMoistureModuleParameters, error) {
	ss, err := NewSoilMoistureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(24)
}

func (s SoilMoistureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(24, v)
}

func (s SoilMoistureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(26)
}

func (s SoilMoistureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(26, v)
}

func (s SoilMoistureModuleState) ActualEvaporation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleState) SetActualEvaporation(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleState) SetActualEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleState) AvailableWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasAvailableWater() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilMoistureModuleState) SetAvailableWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAvailableWater sets the availableWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewAvailableWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryRise() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleState) SetCapillaryRise(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleState) CapillaryRiseRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryRiseRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilMoistureModuleState) SetCapillaryRiseRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewCapillaryRiseRate sets the capillaryRiseRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryRiseRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilMoistureModuleState) SetCapillaryWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewCapillaryWater sets the capillaryWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater70() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater70() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilMoistureModuleState) SetCapillaryWater70(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCapillaryWater70 sets the capillaryWater70 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater70(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evaporation() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvaporation() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilMoistureModuleState) SetEvaporation(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEvaporation sets the evaporation field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvaporation(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilMoistureModuleState) SetEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewEvapotranspiration sets the evapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FieldCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasFieldCapacity() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilMoistureModuleState) SetFieldCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewFieldCapacity sets the fieldCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFieldCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleState) SetFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GravitationalWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasGravitationalWater() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilMoistureModuleState) SetGravitationalWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewGravitationalWater sets the gravitationalWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewGravitationalWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) GrossPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleState) SetGrossPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterAdded() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleState) SetGroundwaterAdded(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleState) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(28)
}

func (s SoilMoistureModuleState) SetGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(28, v)
}

func (s SoilMoistureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilMoistureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Infiltration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleState) SetInfiltration(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Interception() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleState) SetInterception(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3fe3333333333333)
}

func (s SoilMoistureModuleState) SetVcKcFactor(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilMoistureModuleState) Lambda() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLambda() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilMoistureModuleState) SetLambda(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewLambda sets the lambda field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLambda(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) LambdaReduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleState) SetLambdaReduced(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleState) LayerThickness() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLayerThickness() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilMoistureModuleState) SetLayerThickness(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewLayerThickness sets the layerThickness field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLayerThickness(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) PmLayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleState) SetPmLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleState) SetPmLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepthLayer() uint16 {
	return capnp.Struct(s).Uint16(30)
}

func (s SoilMoistureModuleState) SetPmLeachingDepthLayer(v uint16) {
	capnp.Struct(s).SetUint16(30, v)
}

func (s SoilMoistureModuleState) VwMaxAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleState) SetVwMaxAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmMaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleState) SetPmMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMeanAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleState) SetVwMeanAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMinAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleState) SetVwMinAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcNetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SoilMoistureModuleState) SetVcNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwNetRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SoilMoistureModuleState) SetVwNetRadiation(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PermanentWiltingPoint() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPermanentWiltingPoint() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilMoistureModuleState) SetPermanentWiltingPoint(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPermanentWiltingPoint sets the permanentWiltingPoint field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPermanentWiltingPoint(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcPercentageSoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SoilMoistureModuleState) SetVcPercentageSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilMoistureModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SoilMoistureModuleState) SetVwPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4018000000000000)
}

func (s SoilMoistureModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4018000000000000)
}

func (s SoilMoistureModuleState) RelativeHumidity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SoilMoistureModuleState) SetRelativeHumidity(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ResidualEvapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasResidualEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilMoistureModuleState) SetResidualEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewResidualEvapotranspiration sets the residualEvapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewResidualEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SaturatedHydraulicConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSaturatedHydraulicConductivity() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilMoistureModuleState) SetSaturatedHydraulicConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewSaturatedHydraulicConductivity sets the saturatedHydraulicConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSaturatedHydraulicConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisture() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilMoistureModuleState) SetSoilMoisture(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilMoisture(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisturecrit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s SoilMoistureModuleState) SetSoilMoisturecrit(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilMoistureDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SoilMoistureModuleState) SetSoilMoistureDeficit(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilPoreVolume() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilPoreVolume() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilMoistureModuleState) SetSoilPoreVolume(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSoilPoreVolume sets the soilPoreVolume field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilPoreVolume(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcStomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s SoilMoistureModuleState) SetVcStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s SoilMoistureModuleState) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SoilMoistureModuleState) SetSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SumSurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SoilMoistureModuleState) SetSumSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288))
}

func (s SoilMoistureModuleState) SetSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s SoilMoistureModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s SoilMoistureModuleState) TotalWaterRemoval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s SoilMoistureModuleState) SetTotalWaterRemoval(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilMoistureModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s SoilMoistureModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s SoilMoistureModuleState) WaterFlux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasWaterFlux() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilMoistureModuleState) SetWaterFlux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewWaterFlux sets the waterFlux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewWaterFlux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwWindSpeed() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleState) SetVwWindSpeed(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwWindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleState) SetVwWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleState) XSACriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleState) SetXSACriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SnowComponent() (SnowModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SnowModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasSnowComponent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilMoistureModuleState) SetSnowComponent(v SnowModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSnowComponent sets the snowComponent field to a newly
// allocated SnowModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSnowComponent() (SnowModuleState, error) {
	ss, err := NewSnowModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SnowModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) FrostComponent() (FrostModuleState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FrostModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasFrostComponent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilMoistureModuleState) SetFrostComponent(v FrostModuleState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrostComponent sets the frostComponent field to a newly
// allocated FrostModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFrostComponent() (FrostModuleState, error) {
	ss, err := NewFrostModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return FrostModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilMoistureModuleState_List is a list of SoilMoistureModuleState.
type SoilMoistureModuleState_List = capnp.StructList[SoilMoistureModuleState]

// NewSoilMoistureModuleState creates a new list of SoilMoistureModuleState.
func NewSoilMoistureModuleState_List(s *capnp.Segment, sz int32) (SoilMoistureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22}, sz)
	return capnp.StructList[SoilMoistureModuleState](l), err
}

// SoilMoistureModuleState_Future is a wrapper for a SoilMoistureModuleState promised by a client call.
type SoilMoistureModuleState_Future struct{ *capnp.Future }

func (f SoilMoistureModuleState_Future) Struct() (SoilMoistureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleState(p.Struct()), err
}
func (p SoilMoistureModuleState_Future) ModuleParams() SoilMoistureModuleParameters_Future {
	return SoilMoistureModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilMoistureModuleState_Future) SnowComponent() SnowModuleState_Future {
	return SnowModuleState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilMoistureModuleState_Future) FrostComponent() FrostModuleState_Future {
	return FrostModuleState_Future{Future: p.Future.Field(0, nil)}
}

type SoilOrganicModuleState capnp.Struct

// SoilOrganicModuleState_TypeID is the unique identifier for the type SoilOrganicModuleState.
const SoilOrganicModuleState_TypeID = 0xd594e64f6b5f461d

func NewSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func NewRootSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func ReadRootSoilOrganicModuleState(msg *capnp.Message) (SoilOrganicModuleState, error) {
	root, err := msg.Root()
	return SoilOrganicModuleState(root.Struct()), err
}

func (s SoilOrganicModuleState) String() string {
	str, _ := text.Marshal(0xd594e64f6b5f461d, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleState) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleState {
	return SoilOrganicModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleState) ModuleParams() (SoilOrganicModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilOrganicModuleParameters(p.Struct()), err
}

func (s SoilOrganicModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleState) SetModuleParams(v SoilOrganicModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilOrganicModuleParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewModuleParams() (SoilOrganicModuleParameters, error) {
	ss, err := NewSoilOrganicModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilOrganicModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SoilOrganicModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SoilOrganicModuleState) VsNumberOfOrganicLayers() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SoilOrganicModuleState) SetVsNumberOfOrganicLayers(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SoilOrganicModuleState) AddedOrganicMatter() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SoilOrganicModuleState) SetAddedOrganicMatter(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SoilOrganicModuleState) IrrigationAmount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilOrganicModuleState) SetIrrigationAmount(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ActAmmoniaOxidationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActAmmoniaOxidationRate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilOrganicModuleState) SetActAmmoniaOxidationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewActAmmoniaOxidationRate sets the actAmmoniaOxidationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActAmmoniaOxidationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActNitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActNitrificationRate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilOrganicModuleState) SetActNitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewActNitrificationRate sets the actNitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActNitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActDenitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActDenitrificationRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilOrganicModuleState) SetActDenitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewActDenitrificationRate sets the actDenitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActDenitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastDeltaSum() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilOrganicModuleState) SetAomFastDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewAomFastDeltaSum sets the aomFastDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastInput() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilOrganicModuleState) SetAomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAomFastInput sets the aomFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastSum() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilOrganicModuleState) SetAomFastSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAomFastSum sets the aomFastSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowDeltaSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilOrganicModuleState) SetAomSlowDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewAomSlowDeltaSum sets the aomSlowDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowInput() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilOrganicModuleState) SetAomSlowInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAomSlowInput sets the aomSlowInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowSum() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilOrganicModuleState) SetAomSlowSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewAomSlowSum sets the aomSlowSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) CBalance() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasCBalance() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilOrganicModuleState) SetCBalance(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewCBalance sets the cBalance field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewCBalance(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) DecomposerRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilOrganicModuleState) SetDecomposerRespiration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.Text(), err
}

func (s SoilOrganicModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilOrganicModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.TextBytes(), err
}

func (s SoilOrganicModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(11, v)
}

func (s SoilOrganicModuleState) InertSoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasInertSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilOrganicModuleState) SetInertSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewInertSoilOrganicC sets the inertSoilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewInertSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) N2oProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilOrganicModuleState) SetN2oProduced(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedNit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilOrganicModuleState) SetN2oProducedNit(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedDenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilOrganicModuleState) SetN2oProducedDenit(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemExchange() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilOrganicModuleState) SetNetEcosystemExchange(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilOrganicModuleState) SetNetEcosystemProduction(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilOrganicModuleState) SetNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasNetNMineralisationRate() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilOrganicModuleState) SetNetNMineralisationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewNetNMineralisationRate sets the netNMineralisationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewNetNMineralisationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) TotalNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilOrganicModuleState) SetTotalNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Nh3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilOrganicModuleState) SetNh3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SmbCO2EvolutionRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbCO2EvolutionRate() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilOrganicModuleState) SetSmbCO2EvolutionRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewSmbCO2EvolutionRate sets the smbCO2EvolutionRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbCO2EvolutionRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbFastDelta() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilOrganicModuleState) SetSmbFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewSmbFastDelta sets the smbFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbSlowDelta() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilOrganicModuleState) SetSmbSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewSmbSlowDelta sets the smbSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilOrganicModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilOrganicModuleState) SetSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilOrganicC sets the soilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastDelta() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilOrganicModuleState) SetSomFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSomFastDelta sets the somFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastInput() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilOrganicModuleState) SetSomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewSomFastInput sets the somFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomSlowDelta() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilOrganicModuleState) SetSomSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewSomSlowDelta sets the somSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SumDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilOrganicModuleState) SetSumDenitrification(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilOrganicModuleState) SetSumNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumN2OProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilOrganicModuleState) SetSumN2OProduced(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilOrganicModuleState) SetSumNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilOrganicModuleState) TotalDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilOrganicModuleState) SetTotalDenitrification(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Incorporation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SoilOrganicModuleState) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// SoilOrganicModuleState_List is a list of SoilOrganicModuleState.
type SoilOrganicModuleState_List = capnp.StructList[SoilOrganicModuleState]

// NewSoilOrganicModuleState creates a new list of SoilOrganicModuleState.
func NewSoilOrganicModuleState_List(s *capnp.Segment, sz int32) (SoilOrganicModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22}, sz)
	return capnp.StructList[SoilOrganicModuleState](l), err
}

// SoilOrganicModuleState_Future is a wrapper for a SoilOrganicModuleState promised by a client call.
type SoilOrganicModuleState_Future struct{ *capnp.Future }

func (f SoilOrganicModuleState_Future) Struct() (SoilOrganicModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleState(p.Struct()), err
}
func (p SoilOrganicModuleState_Future) ModuleParams() SoilOrganicModuleParameters_Future {
	return SoilOrganicModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleState capnp.Struct

// SoilTemperatureModuleState_TypeID is the unique identifier for the type SoilTemperatureModuleState.
const SoilTemperatureModuleState_TypeID = 0xbd3e199eb9b03758

func NewSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func NewRootSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func ReadRootSoilTemperatureModuleState(msg *capnp.Message) (SoilTemperatureModuleState, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleState(root.Struct()), err
}

func (s SoilTemperatureModuleState) String() string {
	str, _ := text.Marshal(0xbd3e199eb9b03758, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleState) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleState {
	return SoilTemperatureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleState) SoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleState) SetSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) SoilColumnVtGroundLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtGroundLayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtGroundLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtGroundLayer sets the soilColumnVtGroundLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtGroundLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) SoilColumnVtBottomLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtBottomLayer() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtBottomLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtBottomLayer sets the soilColumnVtBottomLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtBottomLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) ModuleParams() (SoilTemperatureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTemperatureModuleParameters(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTemperatureModuleState) SetModuleParams(v SoilTemperatureModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTemperatureModuleParameters struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewModuleParams() (SoilTemperatureModuleParameters, error) {
	ss, err := NewSoilTemperatureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilTemperatureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilTemperatureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilTemperatureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilTemperatureModuleState) VsSoilMoistureConst() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVsSoilMoistureConst() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTemperatureModuleState) SetVsSoilMoistureConst(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVsSoilMoistureConst sets the vsSoilMoistureConst field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVsSoilMoistureConst(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) SoilTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTemperatureModuleState) SetSoilTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) V() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTemperatureModuleState) SetV(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewV(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrix() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrix() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTemperatureModuleState) SetVolumeMatrix(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewVolumeMatrix sets the volumeMatrix field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrix(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrixOld() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrixOld() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTemperatureModuleState) SetVolumeMatrixOld(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVolumeMatrixOld sets the volumeMatrixOld field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrixOld(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) B() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasB() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTemperatureModuleState) SetB(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewB(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixPrimaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixPrimaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTemperatureModuleState) SetMatrixPrimaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewMatrixPrimaryDiagonal sets the matrixPrimaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixPrimaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixSecundaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixSecundaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTemperatureModuleState) SetMatrixSecundaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewMatrixSecundaryDiagonal sets the matrixSecundaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixSecundaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatFlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleState) SetHeatFlow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTemperatureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatConductivityMean() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivityMean() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilTemperatureModuleState) SetHeatConductivityMean(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewHeatConductivityMean sets the heatConductivityMean field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivityMean(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatCapacity() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilTemperatureModuleState) SetHeatCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewHeatCapacity sets the heatCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) DampingFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fe999999999999a)
}

func (s SoilTemperatureModuleState) SetDampingFactor(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fe999999999999a)
}

// SoilTemperatureModuleState_List is a list of SoilTemperatureModuleState.
type SoilTemperatureModuleState_List = capnp.StructList[SoilTemperatureModuleState]

// NewSoilTemperatureModuleState creates a new list of SoilTemperatureModuleState.
func NewSoilTemperatureModuleState_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14}, sz)
	return capnp.StructList[SoilTemperatureModuleState](l), err
}

// SoilTemperatureModuleState_Future is a wrapper for a SoilTemperatureModuleState promised by a client call.
type SoilTemperatureModuleState_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleState_Future) Struct() (SoilTemperatureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleState(p.Struct()), err
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtGroundLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtBottomLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilTemperatureModuleState_Future) ModuleParams() SoilTemperatureModuleParameters_Future {
	return SoilTemperatureModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTransportModuleState capnp.Struct

// SoilTransportModuleState_TypeID is the unique identifier for the type SoilTransportModuleState.
const SoilTransportModuleState_TypeID = 0xb1760f65e652e737

func NewSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func NewRootSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func ReadRootSoilTransportModuleState(msg *capnp.Message) (SoilTransportModuleState, error) {
	root, err := msg.Root()
	return SoilTransportModuleState(root.Struct()), err
}

func (s SoilTransportModuleState) String() string {
	str, _ := text.Marshal(0xb1760f65e652e737, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleState) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleState {
	return SoilTransportModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleState) ModuleParams() (SoilTransportModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTransportModuleParameters(p.Struct()), err
}

func (s SoilTransportModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTransportModuleState) SetModuleParams(v SoilTransportModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTransportModuleParameters struct, preferring placement in s's segment.
func (s SoilTransportModuleState) NewModuleParams() (SoilTransportModuleParameters, error) {
	ss, err := NewSoilTransportModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTransportModuleState) Convection() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasConvection() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTransportModuleState) SetConvection(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConvection sets the convection field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewConvection(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) CropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleState) SetCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleState) DiffusionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDiffusionCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTransportModuleState) SetDiffusionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDiffusionCoeff sets the diffusionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDiffusionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) Dispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersion() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTransportModuleState) SetDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewDispersion sets the dispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) DispersionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersionCoeff() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTransportModuleState) SetDispersionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewDispersionCoeff sets the dispersionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleState) SetVsLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleState) LeachingAtBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleState) SetLeachingAtBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTransportModuleState) VsNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTransportModuleState) SetVsNDeposition(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTransportModuleState) VcNUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVcNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTransportModuleState) SetVcNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVcNUptakeFromLayer sets the vcNUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVcNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PoreWaterVelocity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPoreWaterVelocity() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTransportModuleState) SetPoreWaterVelocity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewPoreWaterVelocity sets the poreWaterVelocity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPoreWaterVelocity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTransportModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTransportModuleState) SetSoilNO3(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSoilNO3 sets the soilNO3 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3aq() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3aq() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTransportModuleState) SetSoilNO3aq(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSoilNO3aq sets the soilNO3aq field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3aq(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SoilTransportModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilTransportModuleState) TotalDispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasTotalDispersion() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTransportModuleState) SetTotalDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewTotalDispersion sets the totalDispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewTotalDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTransportModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PcMinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleState) SetPcMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SoilTransportModuleState_List is a list of SoilTransportModuleState.
type SoilTransportModuleState_List = capnp.StructList[SoilTransportModuleState]

// NewSoilTransportModuleState creates a new list of SoilTransportModuleState.
func NewSoilTransportModuleState_List(s *capnp.Segment, sz int32) (SoilTransportModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12}, sz)
	return capnp.StructList[SoilTransportModuleState](l), err
}

// SoilTransportModuleState_Future is a wrapper for a SoilTransportModuleState promised by a client call.
type SoilTransportModuleState_Future struct{ *capnp.Future }

func (f SoilTransportModuleState_Future) Struct() (SoilTransportModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleState(p.Struct()), err
}
func (p SoilTransportModuleState_Future) ModuleParams() SoilTransportModuleParameters_Future {
	return SoilTransportModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type ICData capnp.Struct
type ICData_Which uint16

const (
	ICData_Which_noCrop ICData_Which = 0
	ICData_Which_height ICData_Which = 1
	ICData_Which_lait   ICData_Which = 2
)

func (w ICData_Which) String() string {
	const s = "noCropheightlait"
	switch w {
	case ICData_Which_noCrop:
		return s[0:6]
	case ICData_Which_height:
		return s[6:12]
	case ICData_Which_lait:
		return s[12:16]

	}
	return "ICData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ICData_TypeID is the unique identifier for the type ICData.
const ICData_TypeID = 0xf03d8fd1bbe75519

func NewICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func NewRootICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func ReadRootICData(msg *capnp.Message) (ICData, error) {
	root, err := msg.Root()
	return ICData(root.Struct()), err
}

func (s ICData) String() string {
	str, _ := text.Marshal(0xf03d8fd1bbe75519, capnp.Struct(s))
	return str
}

func (s ICData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ICData) DecodeFromPtr(p capnp.Ptr) ICData {
	return ICData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ICData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ICData) Which() ICData_Which {
	return ICData_Which(capnp.Struct(s).Uint16(0))
}
func (s ICData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ICData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ICData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ICData) SetNoCrop() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ICData) Height() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != height")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetHeight(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ICData) Lait() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != lait")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetLait(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// ICData_List is a list of ICData.
type ICData_List = capnp.StructList[ICData]

// NewICData creates a new list of ICData.
func NewICData_List(s *capnp.Segment, sz int32) (ICData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ICData](l), err
}

// ICData_Future is a wrapper for a ICData promised by a client call.
type ICData_Future struct{ *capnp.Future }

func (f ICData_Future) Struct() (ICData, error) {
	p, err := f.Future.Ptr()
	return ICData(p.Struct()), err
}

const schema_86ea47c297746539 = "x\xda\x9c\xbd\x7f\x9c\x14\xd5\x95\xf7\x7fOU\x0f=3" +
	"\x0c\xcc\x8cuQ~\xcc\xd0\x03\xcc &\xa8\xfc2\xa2" +
	"\xc14\xc348\xe8\xfc\xeeA4\x8b\x1b\x8a\xee;3" +
	"\x85\xd5UMu\xf50\xe3bD\x83\x1bDL4\xc1" +
	",&dW\xb3\xb8\xabY\xdc`V\x9f\xc5,\xee\xa2" +
	"\x0fn\xd0\xc5'\xe8\xc2.d\xc9\xae\x1a\x92h\x1e}" +
	"}q_\xbaK\xf6e2\xdf\xd7\xe7VuwuO" +
	"\x0f\x9a'\xffd|\x9f[\xb7o\xdd{\xcf\xb9\xe7\xdc" +
	"{n\xb1H\xb9|eh\xf1\x94\xf0\xa5L\xe9\xa3\x8a" +
	"Ic\xb3_\xfa\xbfw\x1d\xe8o\xbc\x87\xf56\xd1\xbe" +
	"\xb1\xeb\x84\xfb'/\xdd\xf8\xeb?f\x15K\xc2\x8c-" +
	"}\xb7\xfa^\xd2~[\x8d?\x7fS}\xedRF\xff" +
	"p\xd7\xb6\xe8+\x83\xf7=\xd0\xdbDJ\xa0\xf0d\x94" +
	"\x98qs\x1fiW\xde\x8c?\xaf\xb8\xf9?\x14Fc" +
	"\xe2\x9f\xbfb\xffX}{/\xeb]L\xca\xd8\xdf|" +
	"\xf3\x8do\xec\xf9\xd6-\x7f\xc5B(\x92\xeaz\x9b\xb4" +
	"\xfb\xbb\xc2\x8ci\xf7ume4\xf6\xda\xe6\xcfO~" +
	"\x9d~\xba\x1f\x0d\xe1\x85\xbae\xe1\xb7\xba\xee%\xed#" +
	"\x14^\xfaA\xd7`\x88Q\xa1\xb2\xde&\xba$\xd0\x92" +
	"Z\x94i\xec\xdfE\xda5\xfd\x971\xb6\xb4\xb5\xff\x07" +
	"aFc\xd7\xfe\xaa\xef\x97\xa2v\xf8\x19\x14\x9f\x14(" +
	"^\x83\xe2[n\x7f\x95\xb4\x07o\xc7\x9f\xf7\xdf\xfe\xdf" +
	"*\xa3\xb1\xbf\xb8\xaf\x93\xff\xb9\xf5\xc1\xb3(^\x15(" +
	"N(\xf3\xf4\xa6]\xa4\xbd\xbc\x09\x7f\xbe\xb8\xe9Z\xbc" +
	"\xe7\xad\xd7\x1e|\xfeOg|\xe1\x05\x14\x0f\x05\x8aO" +
	"E\x99^\xf1S\xd2R\x02\x7f\x1a\xe2j\xb4\xfd\xd8\x97" +
	"\xffa\xc6\xe5\xdf\xaax\x0d\xc5\x17\x04\x8a_\x8a2g" +
	"6\xbfD\xda\x07\x9b\xf1\xe7\xfb\x9b\xa3S\x19\x8d-\xff" +
	"\xaf\xf7?\xec\xff\xc9\xfb\xaf\xb3\xdeE4i\xec[\xeb" +
	"~\xfe\xcf{[\xbf\xf0\xff\xf9\x8dy\x7f\xdbfE\xab" +
	"\xbf\x0b\x7fN\xb9\xeb\xeb\xc4h\xacq\xcd\x97\xee\xe8\xfe" +
	"\xe5\x9eS\xa8\xbd\xae\xb4\xf6\x17\xbf\xfc#\xd2\xce|\x19" +
	"\x7f\x9e\xfa\xf2X%\xa3\xb1\x99\xeb+\x8e\xa6N<z" +
	"\x8a\xd57Q\xe9\x9b>\xb8k3i\x8f\xef\xc2\x18}" +
	"wW\x94\xd1\xd8\x96#\xdf\xf9J\xdd7~p\x1au" +
	"S\xc9\x18\xbd\xb8\xab\x8f\xb4S\xb2\xf0\xeb\xb2p\xfd\xaa" +
	"\xb3{\xb6\xd5\xcc\xfe\x19\x0aO\x09T\xad\xc8a\xdcu" +
	"'i\x15\x0f\xe0Oz\xa0\x1b}>\xbd\xe1\xa1\xff\xd8" +
	"tU\xef\xcfQ\\+\xa9\xfb\x91\xaf9\xa4=\xf55" +
	"\xfc\xf9\xc4\xd7\xfe\x0c}\x98\xef\x86\xde&\x9a\x1c\xa8\\" +
	"\x16\x7f\xff\x9b\xf7\x92F{0\xfe\xd3\xf6|\x15\x95\xcf" +
	"X\xf7\xab\xbf{\xfd\xeb7\x9cg\xc5\x137\x16V\x19" +
	"[\xbav\xef\xf5\xa4\xdd\xb6\x17-_\xb7\xf7\x07l\x8c" +
	"\x8d\xb1Ic);)\xcc\xabSv\x85e$\xf4\xab" +
	"S6\xfe\xefK\x19Ww\xc5U\x09=m\xa5\xafo" +
	"s\xect\xa7\x9d\xcc\x9a\"\x0e\xcaz\x88\xe2O\xaaj" +
	"\x88\xb1\x101\xa6\xdd?c\x13c\xf1\x9d3T\x8a\xef" +
	"\x99\xa1P\xfd;\xc4\x09\xfc\xe1\x19\x9fa,\xbe\x1b|" +
	"/\xf8\xaf\x14N\x0ac\xda#\x92?\x04\xbe\x0f\xfc\x97" +
	"\xc4IeL{t\xc6\xdb\x8c\xc5\x1f\x03?\x00\xfe\x0b" +
	"\x95S\x88H{j\xc6\xb7\x19\x8b\x1f\x00?\x04~." +
	"\xc4\xa9\x821\xed9\xf9\xbb\xcf\x82\x1f\x01\xaf\xa8\xe04" +
	"\x891\xed\x85\x19_d,~\x18\xfc\x18\xf8\xa4I\x1c" +
	"c\xac\xbd,\xeb9\x06~\x12<\x1c\xe6T\x891\x9c" +
	"\xf1C\xc6\xe2'\xc1\xdf\x9c\xa1\x10Ur\xaabL\xfb" +
	"\x99,\xfe&\xf0\xc7(^U\xc9\xa9\x9a1\xed73" +
	"\xbe\xc7X\xfcc\xf0\xca\x99\x0a\xd5W\x13\xa7\xc9\x8ci" +
	"\x153\xff\x93\xb1x\xcdL\x95\xe2\xcb\xc1'Wq\xaa" +
	"aL\xbbf\xe6\xab\x8c\xc5W\x80\xb7\x83\xd7Ts\x9a" +
	"\xc2\x98\xb6z&\x9a\x1f\x03\xef\x01\x9f2\x99\xd3T\xc6" +
	"\xb4\xce\x99\xbb\x18\x8b\xf7\x80o\x00\x9fZ\xc3\xa9\x961" +
	"\xed\xb6\x99\xf8\xdd\x0d\xe0C\xe0\xb5\x0a\xa7:\xc641" +
	"\xf3^\xc6\xe2I\xf0\xed\xe0u*\xa7z\xc6\xb4\xbbf" +
	"~\x83\xb1\xf8v\xf0}\xe0\xf5S8]\xc2\xd8\xd2G" +
	"g*\x84~\x86\xe0\x00\x04\x97L\xe5\xa41\xa6=5" +
	"S\xf63\xf8!p\xad\x96\x13G?\xcfD\xff\x1c\x02" +
	"?\x0a\xce\xeb8McL{q\xe6\x8f\x18\x8b\x1f\x05" +
	"?\x01>\xad\x9e\xd3\xa5\x8ci\xaf\xc9\x1f>\x01~\x16" +
	"\xfcR\xe2t\x19\x91vF\xbe\xf0i\xf0s\xe0\x97]" +
	"\xc2i:c\xda[\xb2\x9es\xe0\xe7\xc1\xa7\x878\xcd" +
	"`L{\x7f\xe6K\x8c\xc5\xcf\x83\xd7\xccR\xa8~\x86" +
	"\xc6i&cK\xabf\xc9\x17\xa8\x9b\xa5R\xbc\x01\x82" +
	"\x99\x9c\xd3,\xc6\xb4\x19\xb363\x16\x9f\x0e\xde\x0c>" +
	"k\x1a\xa7\x06\"m\xce\xac;\x19\x8b7\x81/\x04o" +
	"\xb8\x94S#\x91v\xc5,\x87\xb1\xf8\x02\xf0e\xe0\x8d" +
	"\x97q\x9a\xcd\x98\xb6x\x16&\xd0\"\xf0\x15\xe0\xb3\xa7" +
	"s\x8a0\xa6]'\xebY\x0e\x1e\x03\x8f\xcc\xe0\xd4\xc4" +
	"\x98\xd6*\xf9J\xf0\x0e\xf0\xa6\x0aNs\x18\xd3\xd6\xca" +
	"z\xda\xc1\xfb\xc1\xe7\xcc\xe44\x971\xadw\x16:\xa2" +
	"\x07|\x03\xf8\xdcY\x9c\xe6\x11i\xb7\xc9\xf2\xb7\x82'" +
	"\xc1\xe75pjfL\xd3gaf\x0d\x81\xbb\xe0\xcd" +
	"\x938\xb50\xa6m\x99\x85\x91O\x83\xef\x06o\x09s" +
	"\x9a\x0f\x85\x9c\x85\x01\xdb\x0d\xfe$\xf8\xfcFN\x973" +
	"\xa6=1\xeb\xa7\x18`\xf0C\xe0\x97\xcf\xe6\xb4\x00\x03" +
	"<\xeb\x7f\xa00\xe0\xc7\xc0\x17\x10\xa7+\xa00\xb3\xa4" +
	"\xc2\x80\x9f\x04\xbf\"\xc2\xe93P\x18\xf9\xbb'\xc0\xcf" +
	"\x82\x7f\xa6\x92\xd3g\x19\xd3\xce\xcc\xc2@\x9e\x05\xbf\x00" +
	"\xfeY\x85\xd3B\xc6\xb4\x8ffa /\x80\x87\x1a\x14" +
	"\xaa_\xd8\xc4\xe9J\xc64j\xd8\xc4X_\x03\xc6\x17" +
	"\xf8\xca9\x9c\xae\xc2\xf86x\xe3\x0bA\x03\x04W\xa9" +
	"\x9c\xae\xc6\xf86\xa0\x9e\x06\xf0\x05\xe0W\xcf\xe5\xb4\x88" +
	"\xb1\xa5-\x0d}x`\x19\x04+!X\xb4\x9b\xd3b" +
	"\xc6\xb4\x1b\x1a\xf0\x02+\xc1;\xc0\x17?\xc8i\x09\x06" +
	"\xa6\x01\x03\xdf\x0e\xde\x0f\xbe\xa4\x99\xd3R\"\xad\xb7\x01" +
	"\xaaz+x\x12|i\x0b\xa7e\x8c-\xd5\x1b\xaa\xf1" +
	"\x03&\x04#\x10,\xab\xe2t\x0dcZV>\xb0\x0d" +
	"|/\xf85\x0a\xa7\xcf\x11i\x8f4\xfc\x9a\xb1\xf8>" +
	"\xf0'\xc1?\xa7r\xba\x96H{B\xf2\x03\xe0\x87\xc0" +
	"\xaf\x9d\xcfi9F\xa0\x01#|\x18\xfc\x18\xf8\xf2\xcb" +
	"9]\x87\x11\x90/p\x0c\xfc$\xf8u!N\xd7\x13" +
	"i\xaf\xa3\xe7\xe2'\xc0\xcf\x82__\xcd\xe9\xf3\x18\x81" +
	"\x06h\xc0i\xf0s\xe0\x9f_\xc0i\x05TL\xf6\xdc" +
	"9\xf0\xf3\xe0+\xae\xe0t\x03T\xac\xe1\x0d\xc6\xe2\x1f" +
	"6\xa8\xd4\xd7\xa8P\xfd\x0d\x9f\xe1\xf4\x05\xc6\xb4\xdf\xca" +
	"\xd7\x0a5\xaa\x14\xaf\x03\xff\xc2\xd78E\x19\xd3\xa64" +
	"\xa2\x9a:\xf0\x06\xf0\xe8g9\xad\xc4\xc04^\xcfX" +
	"\x9c\x837\x81\xaf\\\xc8\xa9\x951\xad\xb1\x11\xcdo\x02" +
	"_\x08\xdez%\xa7U\x8ciW4\xc2\xc4-\x04_" +
	"\x0e\xbe\xea*Nm0\x95\x8d\x98X\xcb\xc0W\x82\xb7" +
	"]\xcd)\x86ql\x84\x82\xad\x00o\x07\x8f-\xe2\xb4" +
	"\x1a&T\xd6\xd3\x0e\xde\x0f\xbez1\xa75P\xb0F" +
	"\x98\xca~\xf0\x8d\xe0k\x96p\xba\x911\xed\xf6FL" +
	"\xd0\x8d\xe0&\xf8\x8dK9\xb5\xc3[i\x943.\x0d" +
	"\xc16\x08\xda\x97qZ\xcb\x986*\x1f\xd8\x06\xbe\x13" +
	"|m\x05\xa7\x9b\x88\xb4\xfb\xe4\x0f\xef\x04\xdf\x03~\xd3" +
	"5\x9cn&\xd2\x1e\x96?\xbc\x07\xfc1\xf0\x9b?\xc7" +
	"\xa9\x03>E#:t?\xf8A\xf0\x8ek9u2" +
	"\xa6=-\xeb?\x08~\x18\xbcs9\xa7.\xc6\xb4\xe7" +
	"\x1ba\x09\x0e\x81\x1f\x05\xef\xba\x8eS7Ln#L" +
	"\xebQ\xf0\x13\xe0\xdd\x939\xf5\xc0\xe46B\xe3O\x80" +
	"\xbf\x07\xdes=\xa7^\xc6\xb4w%\x7f\x0f\xfc\x02x" +
	"\xef\xe79\xf5A#e;/\x80\x87f+T\xdf\xb7" +
	"\x82S\x9cH\xa3\xd971\xd67\x1b\x1a\x09\x1c\xbf\x81" +
	"S?cZ\xd5l\xe8K%8\x07\xef\xaf\xe1\xb4\x8e" +
	"1\xad~6\xaa\xe1\xe0\x8b\xc0\xd7M\xe1t\x0bc\xda" +
	"\x95\x92/\x02\xef\x00\xbf\xe5\x0b\x9c\xd6C\xeff\xa3\x1b" +
	"z\xc07\x80\xaf\x8fr\xba\x95\xb1\xa5\xb7\xcd\x96\xfd\xbf" +
	"\x11\x02\x13\x82[Wr\xba\x8dH3f\xc3UH\x82" +
	"\xa7\xc1\xbf\xd8\xca\xe9\x8b\x8ci\xa9\xd9\x98\x10&\xf8\x08" +
	"\xf8\x1f\xac\xe2\xf4\x07\xd0G\xc9]\xf0\xed\xe0\x1b\xda8" +
	"m\xc0Z(\x7fx\x07\xf8C\xe0\xb7\xc78\xdd\xce\x98" +
	"\xf6\xe0l\xf4\xcfC\xe0\xfb\xc0\xffp5\xa7?\x84+" +
	"2\x1b\xfd\xbc\x0f\xfcI\xf0/\xad\xe1\xf4%X\xd0\xd9" +
	"\x98\xa0\xfb\xc1\x0f\x82o\xbc\x91\xd3F\x8c\xe3l\x8c\xd7" +
	"\x01\xf0C\xe0z;'\x1dz-\xeb9\x04~\x14|" +
	"\xd3ZN\x9b0\x8e\x92\x1f\x05?\x01\x9e\xb8\x89S\x02" +
	"\xe38\x1b\x0av\x02\xfc,x\xf2fNI\xb8\xca\xb3" +
	"\xe7\xa2\x83\xceAp\x1e\x02\xd1\xc1I\xc0\xff\xf3\x04\x17" +
	" \x08E\x14\xaa\x1f\xe8\xe44\x00W3\"\x055\x11" +
	"\x95\xe2\xd3!\x18\xec\xe24\xc8\x986-\x02c\xdf\x00" +
	"\xbe\x00|\xa8\x9b\xd3\x10cZK\x04\xa6`!\xf8r" +
	"p\xa3\x87\x93\x01\x9d\x8c\xa0\xa9\xcb\xc1c\xe0\x9b{9" +
	"m\xc6\xa2\x17\x81\x0a\xc4\xc0{\xc0\xef\xe8\xe3t\x07\xdc" +
	"\x97\xc8\xf71\xc6\xe0\x1b\xc0\xcd8'\x13c\x1c\x99\x89" +
	"\x06%!HC\x90\xea\xe7\x94Bx\x14\x91\xc6u\x04" +
	"\x82\x1d\x10X\xeb8Y\x8c-\xbd\xc7{\x85\xdd\x10\xec" +
	"\x85\xc0\xbe\x85\x93\x0d\x072\x02\xb3\xb2\x17|?xz" +
	"=\xa74c\xda\xe3\x11\x8c\xcec\xe0\x07\xc0\xb7\xdc\xca" +
	"i\x0b\x1c\x1bY\xfe\x00\xf8!p\xe76N\x0eFG" +
	"6\xf5\x10\xf8Q\xf0\xcc\x179e0:\xb2\xfcQ\xf0" +
	"\x13\xe0\xee\x1fpr1:\x11\xa9e\xe0g\xc1\xb3\x93" +
	"8eaue=g\xc1\xdf\x01\x1f\xde\xc0i\x981" +
	"\xed\x17\x11X\xf5\xf7\xc0/\x80o\xbd\x9d\xd3Vh\x9f" +
	"\xec\xba\x0b\xe0\xa1&\x85\xeaG\xa6r\x1a\xc1z\xd8\x04" +
	"\x1ej\x82\x19\x05\x1f\xad\xe54\x0a3\xda\x84\xfa\x9b\xc0" +
	"W\x80\xdfY\xc7\xe9N\xf8#M\xb0\xf6\xcb\xc1\xfb\xc1" +
	"\xff\xa8\x9e\xd3\x1f\xc1\xfc\xc9z\xfa\xc1\xd3\xe0\xdb.\xe1" +
	"\xb4\x0dZ\xd3\x84\xa1L\x83\xef\x06\xbfK\xe3t\x17\xfc" +
	"\x05Y\xffn\xf0'\xc1\xbf\xcc9}\x19\xb3\xbd\x09Z" +
	"s\x00\xfc\x18\xf8\xdd\xd38\xdd\x8dU\xa9\x09S\xe58" +
	"\xf8;\xe0\xdb/\xe5\xb4\x1d\xef\xdb\x04\x07\xfe=\xf0\xca" +
	"9\x0a\xd5\xdfs\x19\xa7{\xe0\x19\xcfA\xfd\x95s\xe0" +
	"\x97\x81\xdf;\x9d\xd3\xbd\x8cis\xe6\xa0\x7f\x16\x80\xc7" +
	"\xc0\xbf2\x83\xd3W0\xb5\xe6\xe0w\xdb\xc1\x93\xe0;" +
	"fr\xda\x01?h\x0e\xfa?\x09\xfe\x10\xf8}\x7f\xc8" +
	"\xe9>h\xb1\xac\xff!\xf0}\xe0\x7f\xfc%N\x7f\x0c" +
	"-\x9e\x03\xb3\xb5\x17|?\xf8W7r\xfa*\xe6\xc9" +
	"\x1c\xb4\xffI\xf0g\xc1w\x869\xeddL{f\x0e" +
	"V\xd5\x83\xe0\x87\xc1\xef\xd79\xdd\x0fk<\x07V\xfa" +
	"0\xf81\xf0]\x9b8\xedB?\xc8\xdf=\x06~\x12" +
	"\xfc\x81\x04\xa7\x07\xe0\x1f\xcd\x81\x15:\x01~\x16|w" +
	"\x92\xd3n\xcc\x13Y\xcfY\xf0w\xc0\x1f\x14\x9c\x1eD" +
	"\xbf\xcd\x91\xfd\x06~\x01\xfck\x03\x9c\xbe\x86y\"\xfb" +
	"\xe1c\xf0\xca\xb9\x0a\xd5\x7f}\x90\xd3\xd7\xd1\x9fsQ" +
	"\xbef.T\x1b\xfc\xa1!N\x0fA\xb5\xe7\xa2\x7f\xa6" +
	"\x837\x83?lpz\x18\xfd<\x17z\xd1\x04\xbe\x10" +
	"\xfc\x1b\x9b9}\x03\xcb\xf0\\\x98\xe9\x85\xe0\xcb\xc1\xbf" +
	"y\x07\xa7oB\xe5\xe7\xa2\x1f\x96\x81\xaf\x04\xdfcr" +
	"\xda\x83ex\xae\\\x86\xc1\xdb\xc1\x1f\x99\xc5\xe9\x11," +
	"\xc3\xb2|\x0c|#\xf8\xb7\x1a8}\x0b\xcb\xed\\\xcc" +
	"\xcf\x0d\xe0#\xe0\x7f\x92\xe2\xf4'\xb0\xd2sa\xe5F" +
	"\xc0w\x80\xefm\xe4\xb4\x971\xed\x1e\xd9\xce\xed\xe0\xfb" +
	"\xc0\x1f\xb58=\x8aq\x9c\x8b\xf9\xbc\x0f\xfcI\xf0o" +
	"\xdb\x9c\xbe\x8d\xf9)\xcb\xef\x07?\x08\xfe\x9d\xafs\xfa" +
	"\x0e\xac\xb1\xfc\xdd\x03\xe0\x87\xc0\xf7\xa59\xed\x83\xbe\xcf" +
	"\xc5|x\x16\xfc\xc8\\\x85\x16\x7f\xf7(q\xfa.\"" +
	"F\xf9\x02\x87!8\x86\x07\xfe\xd4\xe1\xf4\xa7\x18`\xd9" +
	"\xa1\xc7\xc0O\x82\xffY\x86\xd3\x9fa\x80e\xc7\x9d\x04" +
	"\x7f\x13\xfc1\x97\xd3c\x08\x19\xe5\x0f\x9f\x05\x7f\x07\xfc" +
	"\xf1\xd9\x9c\x1e\xc7\x00\xcbz\xde\x01\x0f\xcdS\xa8\xfe{" +
	"YN\xdf\x83\xc2\xcf\xc3@V\xce\xc3\xba\x0a\xfe\xe7\xc3" +
	"\x9c\xfe\x1c\xeb\xea<(\xc6t\xf0f\xf0\xfd\x11N\xfb" +
	"1\x90\xf3`\x98\x9a\xc1W\x82?\xb1\x95\xd3\x13\x18\x98" +
	"y\x98\x88+\xc1;\xe6)\xb4\xf8/^&N\x7f\x81" +
	"\x05w\x1ez\xa8\x1d\x82~<\xf0\x97#\x9c\xfe\x12\x16" +
	"B>\xd0\x0f\xbe\x11\xfc\xc9QNOb\xc4\xe4\x0fl" +
	"\x047\xc1\x9fj\xe2\xf4\x14c\x9a1\x0f~k\x1a|" +
	"7\xf8\xf7\xe7p\xfa>,\x87\xac\x7f'\xf8~\xf0\xbf" +
	"\x9a\xcb\xe9\xaf\xa0a\xf3\xf0\xc2\xfb\xc1\x8f\x80\x1f\xb8\x93" +
	"\xd3\x01t\xf4<X\xa0#\xe0\xc7\xc1\x9f\x9e\xc7\xe9i" +
	"\xc6\xb4W\xe6af\x1d\x03?\x87\x17\xf8\xeb\x7f$N" +
	"\x7fM\xa4\xbd5\x0f=\xfa&\x04\xef\xe1\x81\x1f\xfc\x11" +
	"\xa7\x1f\xc0\xb1\x91/\xf0\x1e\xf8\x05\xf0\x83\xdb8\x1d$" +
	"\xd2>\x9aw\x13\x1c\xday*\xf55+T\xff\xcc]" +
	"\x9c\x9e\x81C+\xdb\xf91\x8aW\x82\xff\xf0\xcb\x9c~" +
	"\x08MjF\xf5\xa1f8\xba\xe0\x7fs7\xa7\xbf\x81" +
	"\xa3+y\x0d\xf8t\xf0g\xb7sz\x16\x1a\xd6\x8c\x9f" +
	"\x9d\x0e\xde\x0c\xfe\xdc=\x9c\x9e\xc3\xc04cB4\x83" +
	"/\x02\xff_\xf7r\xfa_p\x84\x9a1\xb1\x16\x82/" +
	"\x07\xff\xdb\xafp\xfa[h\x98\xac\x7f\x19\xf8J\xf0C" +
	";8\x1d\xc2@6c\x86\xae\x00o\x07\x7f\xfe>N" +
	"\xcfC\xc3d=1\xf0\x1e\xf0\x1f\xfd1\xa7\x1fa\xb1" +
	"m\xc6{u\x80\xdf\x0a\xfew_\xe5\xf4w\x8ci\xeb" +
	"$\xef\x07\xdf\x08~x'\xa7\xc3\x18_\xd9\xce\x8d\xe0" +
	"&\xf8\x0b\xf7sz\x01\xe3\xdb\x0c\x8b\x98\x06\xdf\x06\xfe" +
	"\xf7\xcd\x9c\xfe\x1e\xfe\xafl\xcf\x08\xf8\x1e\xf0\x7fh\xe1" +
	"\xf4\x0f\x8ci\x0f7c\x9e\xec\x01?\x08~d\x17\xa7" +
	"#D\xda\xd3\xb2\x7f\x0e\x82\x1f\x06\x7f\xf1\x01N/\xc2" +
	"\x826c\xdc\x0f\x83\x1f\x03\x7fi7\xa7\x97\xa0`\xb2" +
	"=\xc7\xc0O\x82\xff\xef\xf9\x9c\xfe7\x14\xac\x19\x91\xea" +
	"i\xf0\x0f\x9b\x15Z|4\xdd\xc0\xe9(c\xda\x07\xcd" +
	"0\x89\x17 \x08\xb5(T\xff\xf3\x079\xbd\x0c\xc7\xb5" +
	"e3c}-p\\\x81\xdf\xfe\x1a\xa7\x7f$\xd2\xaa" +
	"Z`9j\xc0\xa7\x83\xbf\xf5uN?&\xd2\xa6\xb5" +
	"\xa0=\xd3\xc1\x9b[\x14Z\xfc\xf2\x96\x06N\xc70\x90" +
	"-\x98?M\x10,\xc4\x03\xff\xf8\x10\xa7W`*[" +
	"0A\x17\x80/\x03\xff\xf1\xc3\x9c^eL[\xdc\x82" +
	"\xf6,\x07\x8f\x81\x1f\xfb\x06\xa7\x7f\xc2\x12\xd6\x02\xcdn" +
	"\x07\xef\x07\x7f\xe5\x9b\x9c\x8eC\xf1Z\xa0\x18\xfd\xe0\x1b" +
	"\xc1_\xdd\xc3\xe95\x0cL\x8bT<p\x13\xfc\x9f\x1e" +
	"\xe1\xf4\x7f00-\xe8P\x13|\x04\xfc\xf8\xb78\xfd" +
	"\x04&T\xbe\xc0\x08\xf8\x0e\xbc\xc0k\x1b\x14N'`" +
	"C\xe5\x1b\xef\x80\xe0!<\xf0\x7f\xf6rz\x1dkd" +
	"\x0bzt\x0f\xf8c\xe0?y\x94\xd3\x1b\x88LZ`" +
	"\x8b\x1f\x03?\x80\x8aN\xdc\xaep\xfag\"\xed\xa9\x16" +
	"L\xb9'!x\x16\x82\xd7\xffP\xe1t\x92H{F" +
	"\x0a\x0eBp\x18\x827\x9c\x06N\xa70\xc8-\x98t" +
	"\x87 8\x0a\xc1?\x7fI\xe1\xf4/D\xda\x8b-\xf0" +
	"\x8e\x8f@p\x1c\x82\x93C\x0a\xa7\x7f%\xd2^\x91U" +
	"\x1d\x83\xe0$\x1au\xearN\xa71\xfc-K\xe0`" +
	"\x80\xbf\x03\xfe/\x0b8\x9d\x81\x1dmA\x9c\xf9&\xf8" +
	"\xc7\xe0\xffz\x05\xa7\x9f2\xa6\xfdF\xf2\x0f\xc1\xeb\xe6" +
	"+T\x7f\xfa3\x9c\xfe\x0dj<\x7f\x15\xec\xeb|\x0c" +
	"\xf3|\x85\x16\x9f1\x14Ng1\xccR\xd0\x00\xc1\x02" +
	"\x08~\xbaY\xe1\xf43x\xc1\xf31\xfe\xcd\x10,\x82" +
	"\xe0\xdf2\x0d\x9c\xfe\x1d\x9a<\x1f?\xb1\x00\x82e\x10" +
	"\x9cu\x1b8\xfd\x07f\x80\xacj!\x04\xcb\xf1\xdb?" +
	"\xfb,\xa77\xa1\xe2\xf3\xa5\xdf\x0c\x1e\x03\xff\xf7\x85\x9c" +
	"\xde\xc2\xcc\x98\x0f\xd5_\x09\xde\x01\xfe\x1fWrz\x1b" +
	"\xa6z\xbe\xdc,\x02\xef\x07\x7f\xf3*N?\xc7\x8c\x99" +
	"\x0f\xd5\xbc\x15<\x09NWs:\x07gh>Ts" +
	"#\xb8\x09\xae,\xe2\xf4\x0b\xcc\x98\xf9\x98\xa9C\xe0." +
	"\xb8\xba\x98\xd3/\x19\xd3\xb6\xc8\xf2i\xf0mx\x81P" +
	"\xb6\x81\xd3\xaf\xa0\xe3\xb2A#\x10\xec\x80\xe0\xdd\xe1\x06" +
	"N\xef`*\xcd\xc7\xdc\xde\x09\xc1\x1e\xd4t\xdbw8" +
	"\xbd\x8b w>Fg7\xf8\xde\xf9\x0a\x8d\x0d8v" +
	"\xc6\xbd\xd90Y\xd8\xec\xb6\x88\x98B\xc4\xa8\xf6\x0e\xf7" +
	"\x0e\x9b&3\x85&{\xff\x91\xc8\xfd\xc7\x98\x9e\xc9\x18" +
	")\xc3\xd4\x15W\xf4\xe8\x8e\xdbf\x8b\x81\x81L\x9fH" +
	"f\xc3\x09\x91\xcc=?f/]\x1fw\xed\x94N\xae" +
	"n\xb6\x99v&\xab:\xc2\xab\xe2\xc8\xf9(cc\xf6" +
	"\xd2x6\xb5.\xed\xb2\xb0~\x87\xc8\xd7=\x9c\xe9\xd0" +
	"]\xc3\xcd25Y\x80\xfa&{X\x0c:6e\xad" +
	"\xe4*\xc3N\xe9j&3\xb10\x92\xc9t\x9b\xc9\xbc" +
	"<\x9dh\x95%\xc8\xb1\xb3V\xb2\xdb\x19Tu\x8b\xa6" +
	"2\xeaQI\xb6u*\xeaH\xb8Y\xdd\xecwH\xb7" +
	"2i\xc3\xd1\xdd\xb0a[\xc1\x1a\xe4\x1b+\xa6\xee\xbd" +
	"\xb1\xe1\x1a\xb6eX\x83\x11\xf9\xea\xb9\xca\xfc\xff\x9b\xec" +
	"\xd7Y\xf4T\x9f\xd0M\xd3N\xe8x\x90\xb1q=\xc9" +
	"\xc2\xae\xc8\x8c\xa3\x84\xd2}\xba+\x8a\x9ep\x1d\xdb\xb2" +
	"Sd$b\xfah\x87\xb0\xc2\x83Cn\xa0\xa5\xab\xf4" +
	"\x8c\x88\xe94j\x0ak\xd0\x1db\xe3\x1b\x85\x02\xfd\x82" +
	"Ri\xe1\xe8n\xd6!Q\xa6\x88\x184\xac\xb8*\xac" +
	"\x8c\xe1\x1a\xc3\xa2gH\xcf\x88v\xa1\xbbq\xd7\x11\x99" +
	"L\xa1-\x9b\x84io\x9dhX\xc6\x09\xc7\x0dK\x9b" +
	"\xeel\xb2Gh\xd4\x94\xbd\xd2\x13\xd5\xdd\xa1\xad\xfa(" +
	"U0\x85*\x18\x8d%L\xa1;1}\x94\xfa\xf4\xa4" +
	"\x81\"\x14\x1c\x916{I\xa7pYx\xc8N\xd2$" +
	"\xa6TLR\xf1\x88c\xb8FB7\xa9\xab\xcd\xb6\x12" +
	"\xc2r\xa3\x8e\xac;\xf8\x9c,\xa2\xe8f\xf7\xc8\xe8\xa0" +
	"\xb0\xdal\xcb\x15\x96[\xa6\x9f\xbc\x82\xaan\xf6\x8b\\" +
	"_\x95\xed\x84\x84c\xa7c\x86\x9eb\xb5\xc2\x15N\x11" +
	"^\xe3\xd8\x19\x16u\xa1\x19#\xc1\x99\x0f\x19\xaab\x91" +
	"\x09D\xc6 S\x8bF\xb5Mb\x165\x06\x87\xdc\x9e" +
	"\xc5\x13\x09\x96\x94\x08\xbat\xa6\xa6\x04\xd50\x85j\xfc" +
	"&u\xc5D\x8a\x85u+Y\xd4\xd0\xae>\x91dj" +
	"qK\xbc*\xe2iE$\x8c\x01#\xd1\xa9\x8f\xf4\xd9" +
	"\xb6\x8bI\x1f\x13iw\xa8\xe8\xf9\xf5\xba+\xc8Y\x97" +
	"v\xf5;\xc4\xb8\xaeLd\x1dGXn?\xe5\xfa1" +
	"\xe2\x88x65Q1\xc5v\x8b\xfa<\xaefS\x85" +
	"\x1f\x9b\xa8P4\x9bB\xf3\x82\x1d\x90u]\xc3\xa2\xc1" +
	"\x980\xf5\xd1\x98\xae\x8ef(\xcc\x14\x0a3\x1aK\xea" +
	"\x9ez\xd0\xd0\x1a=\xe1\xda\x0e\x0b<\x16\x932\x1at" +
	"\x87\xfa\xc4\x96\xac\x11uDJXnic\x93\xfah" +
	"\xa6u\xc0\x15\x8a#ue\x8dio\x15\x8ea\x0d\xb2" +
	"\xc2o\x88\x84iX\xba\xcbJ,IL\x0c\xe8YS" +
	"us\x93\xdaZ\x97\x11\xab\x07\x06\x8c\x84!\xac\xc4h" +
	"\xa1%\xc3)\xd9\xcd7*\xd2jm\xd5]\xe1\xf4\xeb" +
	"\x9bLQ\xf8\x05\xd45,L;\x94F\x0b[\x13\x09" +
	"a\x0ao\xba\xaf\x1a\xed2\\\xc7\x1e\x14\x96\x9c\xac\x94" +
	"\xa1*\xa6P\x95l\x15\x9eH\xa7HX\xaen\xc6]" +
	"]\x1d\x14\xf9\x0a-\xbb{\x00c\xce\"qW\xa4\x03" +
	"\xdd\xe5\xd8\xd9\xc1!w\xad\x92J\xeb\x09\xb7\xdbZ#" +
	"\x1c\xd70\x0dw4g\x96r\x13&&\x0b\xaa\xee\xda" +
	"\xd2\x82~7\x17\xf5\xb3,\xab\xf8\xea\xd4?\xe4\x88\xcc" +
	"\x90m&Y\x19M\\\x9d\x12\xce\xa0P\xac\x84Xc" +
	"\xdav\xd2\xb0\x06\xa1\xb5N\xad\x1dX\xad\x8a\x8au\xda" +
	"F\x06\xb3\xa2|1+\x19\x17\x96Rj\xda\"\xb2\x1d" +
	"\xf9\x06\x8a\x81\x01\x91p\x8da\x12\x9e\x95\x1dT\x03S" +
	"^8\x8e\xed\xc4]X\xedl&_\xb5\xa4\x9d\"\xc3" +
	"j3\xfa`A\xeb\xc4\xb0\x9e\xb6\x1d\xddUDr\x8d" +
	"c\xa7\xd6Z\xaep\x12\"\xed\x16:C\x8c\xb8\x0e\xc6" +
	"WqD\xc6u\x0c\xdd,k\xf0\xd6\x18\xc2L\xb6)" +
	"\xb6\x95\x94\xabO\xa7\x9d4\x06\x0c\x11\xec\xd4\x01\xc3\xd2" +
	"\xcd\x98\x18V\xe4\x10\xe7Fx\xb00e\xa2\x03\xc6\x88" +
	"Hv\x05+\xc5\xca\x1f#1\xa4;Ia\x19\xaa5" +
	"X*l'Od\x0d\x06~i\xd0\xb47\xa1\x99\xe4" +
	"\xcf\xe1\x80\xc4\x11\xc2ju\x04\x8b\xeak\xad\xa4\x18\x09" +
	"\x08\xecL\xa65\x93!\xb9\xb2\xb9\"\x13\xac\x0e\xb2\x9e" +
	"!\x9b\\;3j\xb9C\"\x9c12\x13K\xa3\x19" +
	"#\xd3i\x9b\xe3\x0a\xa8\xb9\x02\x19#\xd3'\x06\x84#" +
	"\xe4\\0K\x7f\xc81(\xa5;\xa3=\x8e\x9d\x8cf" +
	"\x13E\xeb\xc3\xa0cou\x87\xdaF)a\x8a\xd5V" +
	"R`>\xe6\xc6\xd7\x93\xf5\x09\xf2<\x04\xc3\x0e[\xad" +
	"\xf1@w\xc9i\x94URk\x1d\xc7\x18\x94\xdd\x12w" +
	"u\xc7-\x9a\xf5^\x19\xca\x95\x89\x1a\xb6\xb5:`\x8b" +
	"\x873\xb0\xfdC.S\xbb\x82\xa3\xb4\xd62\\C'" +
	"\xf3\xe6\x84T$r\xca\xc8\xba\x9dA\xddZeD\xec" +
	"\x94\x9e\xc9\x8c\xd7\xa1\\\xb1\xf26\xdc\xf0'%y\xad" +
	"\xb6\x9d0fpNzG\"\xa7\xbf\xfe\xab\x8c-\x95" +
	"\xff\xfby\x9416f\x0a}\xa0\xd5\x11:\x8b\x14\x0f" +
	"x&k\x99\x86\xdb!\xc8\x13\xaf\xb5\xc2\x90\x964," +
	"3\xa4'E\xf2\x13\x0a\xa5\x13\x1d\xf6\xd6~\x91Rr" +
	"\xd6~\xf5H\xda\xced\x1dQ\xd4\xb5\x1dF\xcap1" +
	"\x83/\xbe^\xd7\x9a\xee5\x8b|\xb3UyD\x9a\xad" +
	"\x0e\xf7\x9aE\x89,\x8b\x9a\xae1\xac\x07\xfb\xb6#;" +
	"\x92uFY\xb4\xcbs\xf3r\x82\x94\x8e\xfe\xb2t\x98" +
	"\x9a>\x91\x9b\x0dVk\xbc\xa8=\x9d\xfaHa\xba\x1b" +
	"vD:r\xc5\xf26\xc7&\xe9;\x08,\x9fed" +
	"\xfel\x08\xfc\xf2H\x17VY\xa6\xdeQRU\xd7\xba" +
	"4a\xf5\xed\xd1\x1d\x9dR\xc5\xb2>\xdb&\x0c:\xc6" +
	"\x9c\x86\x822\xc32RY%\x95\xf3\x96\x9c\x12e\xce" +
	"\x95PS\x81>]c;\xad\xbe\x7fZ\xea%w\xa7" +
	"\xdd\xdf\xa3t\xa7>\xf2\xfb\x94\xf6\xdb\x1a(\x8d\xb9\x1c" +
	"\xbdQje\xbe\xa0%\xdcN\x0c\x8f\",\xbdhx" +
	"\x02\xb6\xd4\x12n\xcf\x90\xed\xda\x94\xb3\x16\x94)\x929" +
	"\"aP\xdapK\x9du)3R:y\xb6#\x9b" +
	"\xa8-\xf1-\xbd~Ts\x1d\xd9\xea\x07&\xe5\xbcc" +
	"\xcb\xefr\xb5|\xd1L\xd0<~b\xd9p\xb1_\xed" +
	"5\x83r\xcdPW-*\xaa\x0a\xfe.\xc5\x04\\\x0e" +
	"\x97]\xe4\xb1\x9e\xae\x89\x85\xb5E\xceV\xae\x81\xe4\x09" +
	"\xfbl\xf5b\xc2\x88\xed\x96\xb4W:+$,\x8c\x96" +
	"m\xd5fD\xd1\x82\xdd\x95Mm\x12\x8e\xd2=\x10\xf3" +
	"\x9d\x17oe\x8b`i\xcb\x04\xab\x91\xe5\xa8{@\x9a" +
	"\xc2\xa2\x0e\xf4<\xd35\xe4\xd8\xa9\x0e}T.\x9a\xe3" +
	"l\x8c7y)7\xc1j1\xc3JK\xd9\x9e\x91\xb5" +
	"Ym9++\xa51\xa1S`\x0c\xcb\x15\xb9\xd1\x11" +
	"$,\xaf\x0ce&(b\xd3Vwh\xad\x95pD" +
	"m9\x074\x9d\x90o\x09\xf7P.Jy+T\xf6" +
	"\xd5Pt\xad\x92\xcc\xac\xb1\x1d9\x83\x9d\xd1\xdb\x0ca" +
	"R2W\xb4n\xac\xebw\xff>\xa5a\xd1\xef\xfe\x0d" +
	"\xeb\xdd\xf8\x87\xe2\"a[I\xf9XX\x98\x9f\xe21" +
	"\x92\x8f\xb5e\xddZ\x18\x9eO,\xdf\xa9\xf8&5\xaf" +
	"\xb2\x11/n+\xd77\xf0\xdeD&\x81\xc5]\xf6\x0f" +
	"\xbag\xc2\xb7\x8e\x93\xb0\xbc\xc2\x11!\x0dp\xf9X\xdd" +
	"\x1e\x16NB\xcf\xb8\x14\xd3G\xa5\xf7U\xac\xda\xb6\x8c" +
	"\x15c\x82E\xa4\xd6\x04&]\x8f\xee\xb8\xab\x0c\xc56" +
	"\xedA\x04\x9e]k\x8c\x91q\x9e[\x0f<\x11\x8b\x85" +
	"\x0d\xdd,Lk\x18\xa0\xb4p\xc8\xb0\x932\x92\x8fz" +
	"\x01{\xe1\xb1!\xdbmM\xb8}\x94\x8b\x13j;\x85" +
	"^T\xab\xa9[n\x8cEe\x94>Z\x10\xd8\xd0o" +
	",\xf5\xfd\x8e\xdc\xcc(\x0d\x81\x1d\xdf3R\xc4jx" +
	"\xa6\xaeSv\xcb\xc3\x11X\xb5\x86\x85\xd2\x8fH+\xa0" +
	"y\x01\xb5r\x04VB\xc3R\x06/^SF8\xc3" +
	"\xa2\x95r\x86=\"z\xec\x80\xf7\x96N\xf4\x89\x8c\x91" +
	"\xcc\x92\xe8\xeaCKY\xb1$m8\xa4\xbb\xb63\x1a" +
	"w\x9dp\xd0Cwl\xdb\x85\x0e\xb1\xb0^\x8eF\xf5" +
	"\xe2\xed\x06\x08b\xc2\xca\xb00z\xabd\xf8\xa5\xb0\x10" +
	"\xc3\x8f\x9bJ}R\xae\xc0;\xdf\x94\x95\x9b\x15\xba\xa3" +
	"\xa7XQ\xe5\xab\x07\x06\x04!d@`T\xbe\x8a5" +
	"69\xa92\xb1\x10d7:\x04M\xee\xd0\x07\x8b\xab" +
	"\xc5\xba\xcdj\xa5\xb7\x96\x8b\xc7\xf28\x02\xdcYZ\xfc" +
	"\x8b,l[\"\x10&\xa2\xfa\x1eA\x96\xf0\x8cw\x89" +
	"'2\x9c\x8ac5\xf56\x9b\xb0,\x84\x833<c" +
	"\x1bf\x9b=,X\xad\x13t\x09\x873q\xdb0;" +
	"\x0d\xb2\x84\xa3\x9b]mv\xc4[VJ\xdd;\xdb0" +
	"\xe3i\x91P\x8aw\x10b\"\x1c\xf4>\xbd\xca>y" +
	"\xa7!\x9d@]\xc6\x00\x19\x89\x0e\xe9t\xaaB\x1f\xdf" +
	"\xd1\xf92\xa8\xa4C\xd4\x16kUBFD\xad4\xe0" +
	"\x0a\x98\xa7`4\xedK\xdcN}\x04s\xa1x;\xa7" +
	"H\x0c\xb7\xacx\x7fF\x0a;\x15\xaf\xe5\x05w\xaa\xb6" +
	"\x9c\x11\xf3K\xdfL9\xb7z\x82\x02\x9f\xb4a\x92q" +
	"\xed\x94\xee\xea}\x84x\xc7\xd5\xad\x04\x89\xa2\x16\xd9\x8e" +
	">\xc8\xa2B\x9a\xc1\xd2\xfd\xce\x8c\x94\x8anV+\xa5" +
	"a\xa6T\x84C\x8c\xc6\\\xdd\x19\x14nW\x1b\x15\xbf" +
	"A\xaeZ\xd7H\x89\xb8+\xd2\xac8\xf2\x07^g%" +
	"\x059\xad\x96=b\xe8,\xbf\xdf0\x9c\xe9\xb7\x1d7" +
	"k\xb3\xda\"#\xe5\xc2\xa8\x14\xd6\xd1RL\xa0\xe8\xc5" +
	"Z9\xa9\x8a\xc4\xbe_\xac\xbbkS\xe9\xb0\x9e(\x91" +
	"v\xad\xb5X8\x9d-\xa5\xeb\xd2\xac\xd6\x0d\xee2K" +
	"\xdc'2,\x926\x1c\x91\x0c\x1a+i\xc1\x8awm" +
	"2\xd9\x944\x83\xd4\x95\xdb\xe2*\xae\x07\xfeu\x87\xbf" +
	"\xdfZ$\xe9\x17)\xcay\xab\xe1x`\x1f\xcb\xf5\x87" +
	"V\xc9\xca\xa1\xed\xb7s;HT\x08\xc0s\xf6\x94\x95" +
	"_\x0bsb\xf2\xdc*\x91T\xb3#\x17/\x13\x13\x03" +
	"\xb5\x85\xe5\xcb\x1b\xbaa\xe1X\xbaid\xfc\x12\xfah" +
	"\xc0\x17.\x96\xad\xd1\x13a\xd7\x0ej\xc4-R\xae\x18" +
	"\x19\xbf\x05[\xb2\x06Vc\xb5\x9c\xb7\xb2^w\x85\x13" +
	"S<\xaf\xd3\xf3\xf3\xe0\xe6\x05\xc2k{i\\.\xd5" +
	"\xac\x16+{\xf1AA\x87\x8d\xb0\x8e\x9cTLO\xe9" +
	"\x83\xa2x\xf6\xd9K\xe3C\xb6\xe3\xf6\x93\xf0\xe5T\xf4" +
	"tr\xd4\xb0\x06\xbb\xb3.\x0b\xfc\x96\x9eHdSY" +
	"SgQW$W\xf7\xeb\x85\xddu_\xa0\xb8\"\xd9" +
	"\x9f_\xcfJ\xf6\xec\x03e|o\xaa\xcd\xb1\xd3\xbek" +
	"\x14\x983\x08S\x1drE\xb2-\xeb\xe6#\xf3\xc2\xa6" +
	"O\xdav\\\x91$),\x89\x0e2\xd9\x94\\\x14)" +
	"+<q\xb1\x9e8r\xc1\x14m\xe4?\x9a\x09\x0cZ" +
	"Bn{\x0e\xc6\xc8\xdb\xf6\x1c\x85\x13\x9a\xb3q\xc3\x99" +
	"N}d\xf5\xc0\x80\"\xb7\xb6D\xde\x1a\xa7\xd5\"k" +
	"\xbc6\x95\x16\x96P\\G\xdfd\x0a\xe9/\xc7\x8a\xf6" +
	"\xabt\x7f\x8f\x85\x851_T\xa6LQ\xc7\xc6dt" +
	"\xeaf\x1d\xac~\x13p\xea\x13zbH$\x0b\xe3\x90" +
	"qE:n\xdc)\x98\xbad\x99g\x84\xa6\x07ix" +
	"\xc9\xb2E\x1e>\xcf(\xe2\xe8\xc9%\xcbJfVT" +
	"\xc2E\xa5\xd4\x1d\xb0\xcdqe\xef\xf6hi\xe1\xbb\x0d" +
	"+)F\xbc\xdf\x97\xbd\xe4\xff\xf7\"\xc6\x02\x1bgY" +
	"\x13\x15\xfa\xed\xbe\xdb\xfb\xcfE\x85\xad\xa1\xac@\x9f8" +
	"\xb4:ed2P\xd6\x0c\xd5\x8d}a\xa83\xdb\xb0" +
	"\xf0\xfd3\x98xu\x8c\xc66o\x1e\x96rVk\xd8" +
	"V\xb9\x02\xc3\xb6\xb7z1U@\xfc\xd5\xab\xf8\xbd\x7f" +
	"\xfb\x97\xa7\xb6\xe7\xc4\x09\xc7N#pU\x82\xdb\\\x99" +
	"\xac\xe9\xca_\xfb\xde\x9f\xfd\xcb\x03\x1bV\xd5\xfe$W" +
	":\x83\x9aD\xa6\x87E\xe0\xab\xa0\xc4\x03\xd6\xf4o\xfd" +
	"\xf8\xab\xa7\xde\xc8\xd7\x97\xf5v<X\xb4'W\xe4;" +
	"w\xff\xd5uW}0\xe9?sE\xfc\x99\x16\xa8\xe4" +
	"\xf5\x0f\xf6\\\xbd\xf0\xec\xc3;r%\x8c\xccz\xb9{" +
	"\xc4j\xa1\x04\xc1\x91M\xad6mK\xf1v\xc2V\x0f" +
	"\x0b\xcb]\x03S[\xd0\xc2\x88\xe9^\xb3(\x15\xdc\x8a" +
	"\xc9\xddc\x09]\xec\x1eK\xdc\xd5]\x12=D\xbd\xcb" +
	"\xd4\x10\xd5\xc8\x0b,\xb7\x93L\x0b&\x95\xe2&)T" +
	"\xe7\xdf_1h\x13c\xf1!`\x97\x14\xaa'\xff\xfe" +
	"\xca\x16\xda\xccX<\x0d\xbe\x0d\\Q\xbd\xfb+\xa3t" +
	"\x13c\xf1\x11\xf0\x1d\xe0j\x88S\x881\xed\x1eY\xcf" +
	"v\xf0\xdd\xe0\xa1\x0a\xef\xfe\xca\xfd\xb2\x9e\x9d\xe0{\xc0" +
	"+&y\xf7W\x1e\xa6{\x19\x8b?\x04\xbe\x0f|R" +
	"\xd8\xbb\xbf\xf2\xa8,\xbf\x17\xfcY\xf0p\xa5w\x7f\xe5" +
	"\x19\xfa\"c\xf1\x83\xe0\x87\xc1+\xab\xbc\x0b,\xcf\xd3" +
	"\xf7\x18\x8b\x1f\x06?\x06^U\xed]`y\x99\x1c\xc6" +
	"\xe2G\xc1O\x90BT\xcdi2\x91\xf6\x1a\xc9\xdcS" +
	"\xe0\xb3(>y\xa5w\x7f\xe5\x0c\xedb,~\x16\xfc" +
	"\x1dRhL\xcfJ\xcf\xc1\xa0D\xbb\xee\x0c\x8b\x8c\x9b" +
	"\x1f\xff\xff^\xf0_/\xbd\xd0\xfc\xdf/\x17O\xa1." +
	"\x16\xd6\x83\xc7H\xb9iS\xdb\x15\xc4\x19!\x921y" +
	"V\xc9\xa8n\xec\xc1\xfa\xb9\xea\x81\xdf\xfd\xf2Or\xd3" +
	"d\xc8\xfb\xa5\x18\x0b\xc3\xf7\x1c//\x99Fu\x85\xeb" +
	"[\xf9\x02^\x18E\x86\xf4\x01\xd2\xacL\x99\x9c\xedc" +
	"\xb5\xba+2\x85\xa83\xf8cSs\x8a\xa4;:S" +
	"\xe5\x94\x1ezq\xe7\x8c\x1f\xfe\xe4\xe5]\xb9j\xd2\xf2" +
	"\x87\x10B\xb5y\x05\xc3z\xd9r\x9f\xac\x1c\x09\xc7\xce" +
	"d\xda\x1c[I\xb7&\xf5\xb4\xbf\x8a\x16\x0e\x9c\xbc\x05" +
	"j\xdcp\x04\x16\xaa\x9cFL\x9aH#:%\xeaD" +
	"1y\xb5\xeb\xaa\xd6\xb6X\xbf}\x8b\x1e6\xb3RG" +
	"*s\x97\xbc\xea\xaf\x98\xcbXo\xb3J\xbd\x8b\xa0\x09" +
	"\x9e\x86\xd4_\xb9\x84\xb1\xde\x05*\xf5.S(\xac'" +
	"\x929\x83\x17\x19\xd6\xcdl\xc1]\xfa\xc4\x0bfq\xcb" +
	"\xdeZr\xc1\xac\xb7G\x0d\x91&\xd5s\x8e\xf2*c" +
	"\xf1\x05\x8aJ\xf1eJA=\x17+P\xabE\xc0+" +
	"\x94\x80z^\xa7\xf41\x16_\x0e\x1eS\x02\xea\xd9\xaa" +
	"|\x83\xb1x\x0c\xbcG\x09\xa8g\xa7\xe4=\xe0\x1b\x94" +
	"\x80z\xde&\xf9\x06\xf0!%\xa0\x9eB\x81\x1a&\xc1" +
	"\xd3J@=S\xca\xf7a\x16\xc0\xb7)\x01\xf5\x1cU" +
	"\xa0\x86\xdb\xc0w*\x05\xf5\\z\x9f\xf2\x19\x82\x9eC" +
	"\xb0O\x09\xe8\xe7\xa3\xca\xff0\x16\x7f\x0c\xfc\x00x\xf5" +
	"d\xef\x82\xd9S\xca\x9d\x8c\xc5\x9f\x04\x7f\x16|r\x8d" +
	"\xa7\xa0\xcfH~\x10\xfc0x\xcd\x14\xef\x82\xd9\xf3\xf2" +
	"\x87\x0f\x83\x1f\x03\x9f2\xd5\xbb`\xf6\xb2\x02{q\x14" +
	"\xfc\x04\xf8\xd4Z\xef\x82\xd9k\x92\x1f\x07?\x0d^[" +
	"\xe7]0;%;\xe24\xf89\xf0\xbaz\xef\x82\xd9" +
	"[r\\\xde\x01\xff\x10\xbc\xfe\x12y\xc1L\xfb@\x0e" +
	"\xccy\xf0\x8f\xc1/\xd1\xbc\xfbe\xbfA\xf9>U\xa5" +
	"x\x8d\xaa\xd0X\xc6\xb2\xb7\xf6\x09W(\x16fv\x9b" +
	"\x9e\xd6\x13\x86;\xda\xa9\x8f\x04\x9c%\x94)\x84\xdd\xc5" +
	"\x14>E\xc1\xef\x18p\xec;\x85\xb5^'W8k" +
	"\xad\xb8e\xd3\xd6\xbc\xcc4\xb6d\x8ddy\x99w4" +
	"j\xaf%k\xc00\x11\xe1\x06\xc2\xa0\x94>\x82\x99\x99" +
	"\x0b\xa0K=8\xf8fR^,F\xebR\xc2t)" +
	"\xb7\xd7\x1c\xce:\xa2H\xda\x9aHdU\xd4\x80\x17\xcf" +
	"\x9f]\x16\xed\x1c\x96\xf3\xf4\xe5\x11\xc5\x1a\xdb\xe9\xc0\xeb" +
	"D\x93\xd2'.8n\xb6\xe3\xc0/cQ\xdb\xea\xd3" +
	"\x0d\xab\xac\x00\xad\x0d\xee\xe48B\xdc)\xca\xb73'" +
	"ej a \x00\x97\x04\xf6\xb5\xb7\xca^ o+" +
	"\x09Q}\xd1\xdbv\xea#\xadJ\xd2;v\xd4\xcd\x98" +
	"W\xaad\x8c{\xf4\xc4\x1d,l\x04\xce\x0f'\x98\x1d" +
	"F\xd0\x95\xfeD\xbbRj\xde\x18\xeb\x0dQ\xe0\xb2v" +
	"=}q\xcc\xb7x&S\xb3\xa2ww\xfeR\xeb\xcb" +
	"\xea\xf5\x8c\xc5\x8f`\xb6\x1eW\x15\xa2\xb9\x9e\xd1yE" +
	"\x85\xabp\x1c\xf8\xb4\xea[B\x18\x9dS\xea\x12,\x9e" +
	"\xe0g\xc1\x15\xc53:gd5'\xc1\xdf\x04\x9fC" +
	"\x9e\xd1\xf9\x99*/\x97\x82\xbf\x07\xde\xa4xF\xe7]" +
	"\xf5\xd7\xd0\x1d\xf0\x8f\xc1#\xaagt~\xa3\xfe'c" +
	"}!\xe8N\x08\xb6K\xf5lNU\x08?\x1b\x02\xaf" +
	"\x03\x0f\x85<\x9b3%\x84f\xd6\x817\x84\xfc\xab\xb1" +
	"p\x09f\x84\xa0\xe2\xd3\xc1\x9bC\xfe\xd5X\x98\x9c9" +
	"!\x99!\x0e\xbe0\xe4_\x8d\x85\xc9\xb9\"\x04[\xb7" +
	"\x00|\x19xe\xa5gr\x16\x87\xa4\xed\x05_\x01^" +
	"U\xe5\x99\x9c\xebBp-\x96\x83\xc7\xc0g\x87<\x93" +
	"\xd3\x1a\x92\x97E\xc0{\xc0\xab\xab=\x93\xd3\x19\x92\xb6" +
	"\x17|\x03\xf8\xe4\x0a\xcf\xe4\xdc&\xeb\xb9\x15<\x09^" +
	"3\xc939\xba\xac'\x09\x9e\x06\x9f\x12\xf6LN*" +
	"\x84\xeeL\x83o\x03\x9fZ\xe9\x99\x9c\xd1\xd0\x0fa{" +
	"\xc1w\x82\xd7VyWZ\xef\x0b\xbd\xcdX|7\xf8" +
	"^\xf0\xbaj\xefJ\xeb#\xb2\xdf\xf6\x82\xef\x07\xaf\x9f" +
	"\xec]i}\\\xd6\xb3\x1f\xfc \xf8%5\x9c.c" +
	"L{:\x04\x9f\xe9 \xf8apm\x8aw\xa5\xf5\xf9" +
	"\xd0\x1b\x98=\xe0\xc7\xc1\xf9T\xefJ\xeb+\x92\x9f\x00" +
	"?\x0b>m\xb2\xbc\xd2\xaa\x9d\x91\xfd\x7f\x1a\xfc\x1c\xf8" +
	"\xa55\xde\x8d\xd6\xb7d?\xbf)\xc7\xbdB\xa1\xfa\xcb" +
	"\xa6pj\xc0\xb8W\xc8\x0bY\x15\x18G\xf0\xe9S9" +
	"5b\x1c+d\x828\xf8J\xf0\x19u\xde\x8d\xd6\x1b" +
	"*d\x828x\x07\xf8L\xc5\xbb\xd1\xba\xb6\x02\xe3\xdb" +
	"\x0e\xde\x0f>\xab\xd6\xbb\xd1\xda[!o\xa8\x82o\x00" +
	"o\xa8\xf3n\xb4\xdeV\x81v\xde\x0a\x9e\x04o\xac\xf7" +
	"n\xb4\xea\x15X\x826\x82\x9b\x15\x0aE3\x86+z" +
	"\xe0\xd2\xec\xfb\xd2\x9a\x0f\xde\xf8\xbbG\x9f+\x09\x1a\\" +
	"2l\xabS\xb8Cv4\xd9fg-7\xef9\x08" +
	"kX>X\xfd\xf7\xfb\xb7]~\xd3\xd8\x11\xff\xc1\xa8" +
	"t\xba \xf8i|\xda_\x9f9\xf1/\xe7\xf2QO" +
	"\xe6Fy\x98E\xd2\x92\x97F\xa3[[\xdd\x94\x9dI" +
	"+C\xc21\x12\xddK\xdb\xcaoL\x15\x17k\xeb^" +
	"\x92+\x17)\xda\xfc\x8ed\x8c\x94l\xc3\xed\x9b\xa7\xfd" +
	"\xf8\x89\xda\x03c\xb96\x0c\xfaY6\xde\x023`;" +
	"\xd1\x94\xf7`\xdd\xd8\x15S\xeb;\xcc+\xab^\xcc\xc7" +
	"UrG\xd4\xcc25\x05q\xfer\x7f@\x0c{L" +
	"\xfe\xb6\x0f\xfc\xd4\xfc7\x17\x02e:m#\xc3\xbc\xa5" +
	"\xa2\xae\xf0\x95\x85@\x81ngPga\xcbHP]" +
	"\xe1;\x09\xc1\x1fqt\x8bE2i\xdbq\xa9\xae\xf0" +
	"\xd1\x08\xbf\x04\x96\xb8\xee\x91\xd1A\xf2s\x80\x82\xc7a" +
	"~\x12U\x1b\xe5\xbe\x0a@hC\xfe\xe3\x1a\xb9\xdf\xc8" +
	"\xa6d\xfe\x0e\x8b\x98F&\xb0Ne\xb2\xa9ngp" +
	"\x8d \x99\xdb\x93)\xca@I\xea\x869\x1a\xcf\xa6\xc8" +
	"\xcf\xfc\xc9\xa8\x81\x07\xf3B\xf9\xb8\xe3\x1a%\x15\xe7\xe4" +
	"\x8a\xdc\xb14\x12~\x1dw\x8a\xb0\x13\xeb,\xf9y\xdd" +
	"\xa2\\\x81\xa8q\xa7\x08\x16\x18\xca\xa6\xb2\x99U\xbaI" +
	"\xba\x95\x10m\xba\xe3DF\xbb\x87\xcb\xfdL!OC" +
	".\xc4\x85\xb7\xb0\xd3\xaeLMT\xac\xd5\xfe&\x8dw" +
	"B!\x02\xdb,\x852}\xc2\xcd:V\xb92~?" +
	"\xc7\xc9\x15i\x19\x19\x95\x89{\x12\xa6\x91\xd2]!\xe3" +
	"\"\xbd\xe4p\xaa\xae\xb0\xce\xe5\x02\x17\xaf\xc6\xd5,\x82" +
	"x:\x1f\xe1\xd4\xe4\xb6\xd9\x1c1l\xd8\xd9\x0c\xc5\xf4" +
	"\xd1\x0cBnu|\x19\x99U)7Q\xd7\xa5m\xab" +
	"K\x8c\xd4\xba1}4\x1fp$\xf5\xd1\xccz\xc3\x1d" +
	"\xf2\xe3\xb0\xdc\x9e\x08\xa6SW\xdcuX\xd1\x11\x0c\xa8" +
	"\x97\xfaW\x9a\x14\x09\x89\xccp\x8c\xc6\x8b\xf3\xaa>1" +
	"\xa0\x89\xfbS[N\xec`H!c\x8av5D\xf5" +
	"ry\x7fW\xc6\xc6\xef!\xa8\xbd@\x0a1\xe6-\xef" +
	"\x1f\xc9\x10\xfbCR\xa9O\x09\xac\xee\xbf\x95\x11\xf6\xc7" +
	"(=]\x86\x14\xfe\x17+\xa6IO\x97\xc3\xd3m\x92" +
	"!\x85\xe2\xad\xee\x8d\xd2#o\x00_.C\x0a\xd5[" +
	"\xdd\xaf\x91\x1e\xf6\xb2|\x08R\x11\xf2V\xf7NE^" +
	"\xe3\xc8\x87\x1a\x93\x14oy\x17\x92\x17B\x8d\xb0\xea-" +
	"\xef)\xe5\xdbE\xa1Fe\xc8[\xdeG\x15y]\x03" +
	"|\x87\x8c(*\xbc\xe5\xfd\x1eY~\x07\xf8c2\xa2" +
	"\x98\xe4-\xef\xdf\x95\x9e\xfdc\xf9\xc8ar\xd8[\xde" +
	"\x9fW~\x98\x8b\x1cd$PS\xe9-\xef\xa7\x94U" +
	"X\xbe\xc0\xdf\x93\x11E\x95\xb7\xbc\xbf+C.\x19\x09" +
	"\x84\xe0\xb5L\xad\xe0TK\xa4\x91zS\xc0\xe3\xaf\xaf" +
	"\xad\xf6V\xf7*\x15\xafU\x09\xde\x0c^7\xd9[\xdd" +
	"\xe7H\xde\x04\xbe\x02\x11B.m\x83R\xad\xc3\xbaa" +
	"\xea\x9b\xc2\xa6\xe8\x0a\xce\x85\xac)ztV\xeb\x87\xcf" +
	"\xcb\xe7\xb9\xf7\xfdB\xfc\xd3\xcby\xe5\xb0\xada\xe9\xf9" +
	"\xaa\xe3\xb7\xbfe\xda\xea\xb8\xec\xf1\xa410\x90\xcd\x18" +
	"6\x8bZE\xa9\xd9\xf9\xbcM#\x93\x16N\xa6l\x8d" +
	"9\x19\xd9\xde\xb3\xe3\xcee\x863\x1dBO\x0c\x19\xe4" +
	"\xa5\xd2\x046\xfbM\xc9\xadAjuWa!\xd1U" +
	"g4\xb0\xa1\xda\x15\x13i;\xc3\"F\xf1\x9a\x95\xf0" +
	"\x8e\x13H\xac\xf1\xf2\x12\xd42G\x8f\xb6#<\x0d\xbb" +
	"E\x98v\xc2pit|\xab>\xcdQ\xdc\xddX2" +
	"\xba\xba\x97\x96;\xa1\xeb\xea^\xaa3\xda2\xee\xf0`" +
	"\x82\xc3\x1ey ldHv\x96m\x8d?\xbe\x12N" +
	"\xc26=\x0fA&\xaf\x97\x16\xf8D\xaf_&\x1e\x8e" +
	"\xd3\xfd\x05j\x88\xaa\xa4\xeeW\x11|\xec:hsC" +
	"`\xbbo\x86T\xf2\xe9\xc0\xcd\xc1\xed\xbe9\x04eh" +
	"\x06_\x14\xdc\xee\xbb\x92\xa0T\x8b\xc0W\x04\xb7\xfb\xae" +
	"#\xb9\xff\x00\x1e\x93\xdb}\xdcS\xfeV\xc9W\x82w" +
	"\x90B\xe4\x7f\xadf\xad\xdc\x1dl\x07NR\xe0k5" +
	":\xc1eK\x82\xa7)\xf0\xb5\x9a\x14\xfd\x94\xb1\xb8\x0b" +
	"\xbe\x9d|\x97\x1c\xba\x7f\x97l\xfe6\xf0\x9d\x04\xe5I" +
	"\xb5\x8f&\x1d=\xab\x98F\xa2\xcd\xb6\x92Y\xffp\xb9" +
	"\xaf\xb6\x904\xce\xfc\xcb\x1b1\x91f\xea\x04\x11\xae\xec" +
	"\xcd\x92\xa3TK\x0c\xca\xe3}\x8a\x89AG\x08/=" +
	":\x1f\xb2\x0e\xe9\xe5\xa2\xf3\x0c\x16\x0aF\x85\xbc`S" +
	"OmJ\xea}\x82\x85\x93e\x8e\x9e\xfc\x98\x94\xb2\x8e" +
	"<\x1btj\x8bb\xd7!\xf9j\xa6\xa1\x14\xbf\x9aw" +
	"\x8a\x95?br\xfb\xe5\x1cd\xaaH\xff\x9e+H!" +
	"K,?\x8fTW\xee\x88u\xe4#\xc4\x0a\x05\xb1B" +
	"%\x8c\x1eW\x14\"\xd5\x9bF\xf5r{\xa8\x0e\xb8A" +
	"\xee~`\x0d!\xd2fH\xdb<\x1d\xbc9\xb7\xb6\xa8" +
	"rw\x0b!D3\xf8\"\xc5\x8f\x1c1\x8d\xae\x94\xbc" +
	"\xb0\xbd\x15\xaa\xf4\xa6\xd1urm)loUTy" +
	"\xf3\xa8U\xd9U\xb4\xbd5\xc9\x0f\x11;\xe5.\x90\xdc" +
	"\xde2\xe5\x1a\xe2\x87\x88\x86\\[\x86\xf2kE\xa5\x1f" +
	"\"\xde\xa3\\\x92\xdb\xae\xda+\xd7\x10?D|D\xbe" +
	"\xd7\x1e\xf0\x83r\x0d\xf1C\xc4\xa7e=\x07\xf2\xbbL" +
	"\x93\xfd\x10\xf1eY\xcf\x11\xf0\xb3r\x0d\xf1C\xc43" +
	"rm9\x0b~A\xae!\xd5\xde\x1a\xf2\x91|\xdf\x0b" +
	"\xb2;\xe5\x1a\xa2z!b=\xd6\x90x\x1d\x16\x85\x06" +
	"\xb9\x88L\xf6\x16\x91\x19*\xde\xb7\x01|\xb9\\Dj" +
	"\xbcE\xe4\x1a\x15z\xb3\x1c\xbc_-|\xf6H\xebU" +
	"\xd1\xfe\x1epSn?\xd9\x86\x19\xcf:\x03\xa4'\x84" +
	"\x1c\xef\xa87\xe0\x13\xaf/W\x9cYp\x89\xd2x\xf4" +
	"|n}I\xea\xa9\xb4a\x0d\xaea\x11\xb9+\xeb'" +
	"\xb7~\xfbQ\xfc\xef]\x99\xdc\x9as\xf6\x95\x94u\x8b" +
	"\xeb\x85)^\x02\x19\xd5\x15\xbe\x19V\x12\x18\xc8\xb2\xab" +
	"l\xd7\xcd%\x9b\x95)k\xc9\\\xb5\xee\x01\x16\x95E" +
	"2\x81#\xba|\x1a\x9b'):\xbe\x93\x96\xde\xa6\\" +
	"v{\xd8\xca\x94M\xb9(\x8e?\x8a\x0b\xd0\xf0\xb8\x05" +
	"\xc46\xb3)\xd1\xa9\xb3Z\xd71F&\x92\x12\x84\xdd" +
	"fr\\}\x9b\xc6\x99w\x1dE{\x1c\x92G\xa31" +
	"C\x8f\x0c\xda\x96n\x96/\x16\x17J\"+S\xcbb" +
	"\x86.\xcb\x8d[.\x86\x84\xee\xae1\xed\xad,\x10h" +
	"\x80\xc1pP\xcer\xb0\xb2\x8f\x15\x15\xf1\x12\xa8\xca\x95" +
	"\xd2\xd3:\xabM\x94\xc9\x0b\xfaT\xb6&w\xdb\xa0\xf4" +
	"\x03k!RC\xb4RZ\x9a)a\xa8|M\x18\xee" +
	"gX\xa1\xfa\xa8\xbfbM\x0b\xc3\xa4p\xf0\xa6\xb0B" +
	"\xf4\x05o\xc1j\x0cC\x93\x9a\x80\x17\x86\x15\xaa\xf3\xb7" +
	"\xa2\xae\x08\xcb\xbd\x1c\xe0e\xa8\xe5\x06\x7f+jq\x18" +
	"N\xe02\xf0\x95\xe0+\xfc\xad\xa8\x1b\xc2X\x98V\x80" +
	"\xb7\x83S\x8dghV\xcb\xd6\xc4\xc0{\xc0\x95)\xbe" +
	"\xa1\x09\xcb\xef\x96\x81o\x08\xfb\xeb!\x0c\xcdm\xb2\xfe" +
	"\x0d\xe0Ca\x7f\x7f\x1d\x86F\x84_e,n\x82\x8f" +
	"\x84\xfd\xfdu\x18\x9al\x18\x06k\x04|G\xd87d" +
	"04\xf7\xc8\xdf\xdd\x0e\xbe/\xec/\x8804\x8f\xca" +
	"^\xd8\x0b\xbe?\xec;\xc304\x8f\xcb\xdf\xdd\x0f~" +
	"$\xec;\xc304/\xc8z\x0e\x83\x9f\x0e\xfb\xce0" +
	"\x0c\xcd)\xd9\xfe\xd3\xe0\x1f\x86}g\x18\x86\xe6\x03\xd9" +
	"\x0f\xe7\xc1k*}g\x18\x86\xa6\xaa\x12\xeb\x7fM\xa5" +
	"J\xf1\x05\x95\xbe3\x0cC\xd3R\x89\xf64\x83\xaf\xac" +
	"\x0c\xecE\xddP\x89\xf7Z\x09\xdeQ\xe9{\xc3\x1c\x0e" +
	"\x80\xac\xa7\x03|\x08\xbc\xae\xca\xdb\x8b\x12\x92\x0f\x81\xbb" +
	"\xe0\xf5\xd5\xde^\xd4\x96J\xb4\xd3\x05\xdf\x0e~\xc9d" +
	"o/\xea\xaeJ\x18\xbe\xed\xe0\xbb\xc1\xb5\xa9\xde^\xd4" +
	"\xfd\xb2\xfcn\xf0\xbd\xe0|\xb2\xb7\x17\xf5\x88\xe4{\xc1" +
	"\x9f\x05\x9fV\xe3\xedE=S\x09\x07\xe3\x10\xf8Q\xf0" +
	"K\xa7x{Q/Vb\xfe\x1c\x01?\x0e~\xd9T" +
	"o/\xea\x15\xc9\x8f\x81\x9f\x04\x9f^\xeb}]\xed\xf5" +
	"J8$'\xc0\xcf\x82\xcf\xa8\xf1\xf6\xa2\xceT\xca-" +
	"Q\xf0\xf3\xe03\xeb\xbc\xbd\xa8\xf7e\xbf\xbd\x07~\x01" +
	"|V\xbd\xb7\x17\xf5\x91\xac\xe7\xc3J\x95\xfa\xaa\x14\xaa" +
	"o\x98\xe2mE\xfd\xb6\x12\xc3\xf81\x8aO\x07o\xbc" +
	"\xc4\xdb\x8a\x9aV\x85\xd7\x9a^\x85u\x16|\xb6\xc6i" +
	"\x1e\xd6\xd9*\x19\\\x80/\x04\x8f\xd4z\x1fW\xbb\xa2" +
	"\x0a\xdd\xb6\x10|9x\x13\xf7>\xaevM\x15\x86k" +
	"9x\x0c|\xce4\xef\xe3j\xad\xb2|\x0c\xbc\x07|" +
	"\xee\xa5\xde\xc7\xd5:%\xef\x01\xdf\x00>\xef2\xef\xe3" +
	"j\xb7\xc9z6\x80\x0f\x817O\xf7>\xae&\xaa\xe4" +
	"\xf0\x82\xbb\xe0-3\xbc\x8f\xabm\xa9\xc2{\xa5\xc1\xb7" +
	"\x81\xcf\x9f\xea}\\m\xb4Jne\x82\xef\x05\xbf|" +
	"\xa6\xf7q\xb5G\xaa\xa0F\xfb\xc0\x9f\x04_P\xeb}" +
	"\\\xed\x09\xf9\xbe\xfb\xc1\x8f\x80_1K~]M{" +
	"A\xf2\xc3\xe0\xc7\xc0?\xd3\xc0\xe9j\"\xed\xe5\xaa\xb7" +
	"\x19\x8b\x1f\x07?\x0d\xfe\xd9F\xf9q5\xed\x94\xec\xcf" +
	"\xd3\xe0\xe7\xc0\x17\xd6y\xdfV{\xab\x0a\xd3\xe4\x1d\xf0" +
	"P\xb5B\xf5W\xd6{\xdfV\xa3\xea\xff\x81[T\x8d" +
	"\xfe\x07\xbf\xea\x12NK\xd1\xff\xd5\x98&M\xe0+\xc0" +
	"\xaf\x9e-\xbf\xad\xa6]W\x8d\xfaW\x80\xb7\x83/\x8a" +
	"x\x9fV[]\x8d~k\x07\xef\x07_\xacq\xfa\x1c" +
	"\xd6\xf1j\xf4O\x0f\xb8\x09\xbe\xa4\x89\xd3\xb5\xf0gd" +
	"y\x13|\x04|\xe9\x1c\xef\xd3jYY\xff\x08\xf8\x0e" +
	"\xf0es\xbdO\xab\xddS\x8d\xe9\xb6\x1d|7\xf85" +
	"\xf38]\x0fu\x91\xe5w\x83\xef\x05\xff\\\xb3\xf7i" +
	"\xb5Gd\xfd{\xc1\xf7\x83_\xdb\xe2}Z\xed\xf1j" +
	"L\xcf\xc7\xc0\x0f\x80/\x9f\xef}Z\xed\xa9j\x98\x9f" +
	"\x03\xe0\x87\xc0\xaf\xe3\xde\xb7\xd5\x9e\x93\xbf\xfb,\xf8\x09" +
	"\xf0\xeb/\xf7\xbe\xad\xf6Z5\xe6\xcf\x09\xf0\xb3\xe0\x9f" +
	"\x9f\xe6}[\xedL5\xc2\x86\xd3\xe0\x1fV\xe7n[" +
	"\xb7\xd9)\x16M\xdb\x16\"\xb5\xba\xc27\\s\xae\x84" +
	"eom\xb3Si\x16\xc9\x95\xc8\x7fq\xd6/1\x12" +
	"o\x95\x17T\x95\x84n\x06\x17!6\xb1\xf7\xf3\x93[" +
	"\x7f=I\x9d5\x96\xdfd\x1c\xde\xba\xde\xb0\x92\xf14" +
	"\x09\x91\x94\x17M\xc8\x0d\xec\xa7z2\x16\x16\x81\xec\xb8" +
	"\xff'\xaf\xc5\xbbZ\xbdz\x98\xbckpE\xb9\xd19" +
	"\x99R\x94>\\\x9anu\xb1\xab\xd9\xba\xb7\xaf`\xb2" +
	"\xa8\xf0\x8e\xd3J\xb7\x09\xf4\xb4a\x9a\xba\xc3\"\xa3}" +
	"F\xa6\xe0\x1b\xe68I\xdc'O\x0d'z4:z" +
	"\xd1\xaa\xc9\x13_\xbbh\xbc\x0f\x92\xbb\xfb\xe7\xa5\x13\x96" +
	"\x13\xba\x8eN\xb9\xd7.\xb3'1 /\xfd\xe9ix" +
	"\xa8e\xfc\x93\x013;\xd2\xeav\xd8\xb4U8r\xe3" +
	"!\xac\x076\x1e\x06\x1d}\xd8p\xbd@\\7\xd7\xeb" +
	"n\x99\x0d\x06\xffF\x9c\xa0\x84\xe1\xddxQ\x8bo\xc3" +
	"\xe5w\xc5[\x93\xdem\xb8r\xb2\x98\x91I\x0c\xd5\xea" +
	"N A8(\xf6\xee\xad\x16f\xc4\xa7q\xde>M" +
	"xh\xf8'\xbe\xac\xf8, w\x99\xad\x04\x0f'\xbc" +
	"\xebsL\xcd{\xfa\x81klQ/\x98-mG>" +
	"\xc4\x8d$\xb3\x09\x91\xbc\xf8W\x0aLL\xfd\xfe!\x83" +
	"E\x13wX\xa2\xcc-</\x1e\xe8\xa7!\xc3+\x10" +
	"L\x02OM\xb4\xb7T*\xe9\xa8E%\x05\xd5\x93\xc7" +
	"\xb3\x86S\xfe\x108\x9d\xea\xd4Gz\x84CrGF" +
	"^\xdc)\xca\xfd\xde\x0a\x9f\xb8\xd5 \xa7\xec\xd9\xf5\xf0" +
	"\xd6N\xc3\x9a\xb0\xee\xe1D\x97\xbc,Uv\xea\x0co" +
	"\xed\x12n\x9f\x9edQ\xa3\xe4\x06\xbepR\xba%," +
	"r\xd7\x1b\xa6L\xf2\xee\xb1\x8d\xf1\x19\xa3\xc3\x89\x1e\x0c" +
	"\xa2\xa5\xb8\xfa\xa0\x88\xfbI\xe8N \xf7\xf3\xd3l4" +
	"\x0do\x95w\xb9\xd2\x94\xbb\xcb\xf5\xfb\\\x8282}" +
	"%c\xf9{\x10\xd4\x9eM\x19\xc9\xe2so/\xffG" +
	"7\x95\x92:\xca)rF\xe6\xd8\xbbBI\xb6\xfbS" +
	"\xdb\x9f\xd9Qoj\x97\x0b\xe3\x02GD\x13H\x09\xc2" +
	"\x84c\x04oe\x14\xc9\xca\xe6\xf3\xf7\xd8\x8e`\xd1[" +
	"d`7\xbe\xdf\xe57;\\\xd2\xfb\xbc\xb4\xf2p>" +
	"\x19W\x1e\xbe8\x03zB\xf4\x91\x9d\x1d\x1c*\x99\xc1" +
	"9\x19\x8bd\xad\xee\xc0m\xc9L6\x85(]\xa7\x84" +
	"\xe8\x93\x92\xf1\xcf\xac'\x18\xd0q\xf7N\xcbn\xff\xc8" +
	"\xed\xc7\xf5\xb0\xd7N\x9fH\xd9\xc3:\x99\xffo\x19\xd3" +
	"\xc5\xd9\xd0\xb9D\x925f\x96\xd1\xc8Dq`\xe5\xc5" +
	"\xe2@\xc4\xfe)\xcb\xcb\xc2\x92\x1f\x1d\x10\xc9.\xe8O" +
	":m\x1a\xde\x87?zt\xb9\x16\xf7\x10\xf56\xe4\xf3" +
	"\xb2\x9e\x9b\xc9X\xefA\x95z\x0f+\x94K\xcbz\xde" +
	"a\xac\xf7\x90J\xbdG\xfd\xb3\x0a\x85\xb1\xfa\x1771" +
	"\xd6{D\xa5\xde\xe3\xfeA\x85\xcaX\xfd+(yL" +
	"\xa5\xde\x93\xfe)E\x88\xb1\xfa\xd7_e\xac\xf7\xb4J" +
	"\xbd\xe7\xfc#\x8a\x0a\xc6\xea\xdf\x02|G\xa5\xde\x0f\x11" +
	"\x92y{\x97\xf5\x1f\xecb\xac\xf7C\x95\xfaH!u" +
	" MucoM\xab\xb8N\xff\xca\xbf~\x9cwE" +
	"\xf4T\xda4\xacAV\xe6\xb3\x0f]\xfd\xba\xc3\xc2\x83" +
	"\xc2\x1dO#\x83\xc2]Z\xb8w8\xe0\x9f\x07*\xc2" +
	")\xee\x92\xe0\xf5\xf5@\x19}\xa4|\x19\xd7N\xc7\xe4" +
	"y\x92\xcc[6\xf5\xd1\xdf'\x99$\xee\x9f\xaaZF" +
	"B\xc6\xeaQ/X\xc7p\xecWC\xb4@\x86\xea)" +
	"\x99\xb8`\x86\xe0\x85\x86\xe0\xa5\xfb\xa1z6\x04\xefn" +
	"\x04|G\xc8;oB\xa8~\x8f\xcc\xaf\xd8\x0e\xbc;" +
	"\x14\xd8\x14\xbc_\xe69\x14\xf2\x13r\x9b\x82\x8f\xc8|" +
	"\x83B~\x82J^\xac\xfe\xb8\xcc\x7f(\xe4'\x84\x14" +
	"/V\x7fZ\xd6S\xc8O\xa8 /V\x7f^\xd6s" +
	"\x18\xfct\xc8?pB\xac~J6S\xe6!|\x18" +
	"\xf2\x0f\x9c\x10\xab\x7f \xf3\">\x94y&\x15~\x8c" +
	"\x8dX}\x8a\xcc\x07\xa8\xa9@\x0c\\\xe1\xc7\xd8\x88\xd5" +
	"[d^A!\x0f\x011v\x8d\xccC\x80\xb3\xbc\x02" +
	"\xfc\xd6\x0a?\xc6F\xac\xbeN\xd6\xd3\x0f\x9e\xae\xf0c" +
	"l\xc4\xea)Y\x8f\x09\xbe\xb3\xc2\x8f\xb1\x11\xab\xdf'" +
	"\xeb\xd9\x01\xfe\x18\xf8T\xffd\xe9\xbb\x157!\x18\x02" +
	"?\x04^\xeb\x7f\x0b\xfd\xb9\x0a\xf9\x09s\xf0\xa3\x15\xfe" +
	"\x89\x13b\xf5\x17e\xfdG\xc0\x8f\x83\xd7\xd7x\xb1\xfa" +
	"+\x15p\xde\x8f\x83\xbf\x03~I\xc8\x8b\xd5\x7f!\xf3" +
	"\"\xce\x81\x9f\x07\xd7*\xbcX\xfd}\x99\xff\xf0\x1e\xf8" +
	"\x05p>\xc9\x8b\xd5?\xaa\x90_\xfa\x04\x0fMB\x8c" +
	"\x1d\xf6bu\x9a\x84~\x0eMB\x7f\x82_Z\xe9\xc5" +
	"\xeaS&\xc9\xbc\x1d\xf0\x06\xf0\xcb\xaa\xbcX}\xc6$" +
	"\x8co\x03\xf8\x02\xf0\xe9S\xbcX\xbdE\x96_\x00\x1e" +
	"\x03\x9fQ\xed\xc5\xea\xad\x93\x10\xac\xc4\xc0{\xc0gN" +
	"\xf6b\xf5\xceIhg\x07\xf8\xad\xe0\xb3\xfc\xbc\x91u" +
	"\xb2\xfc\xad\xe0.xC\xad\x17\xabo\x99$S\x9d\xc1" +
	"w\x837\xfa\xb1\xfa\xfd\x92\xef\x04\xdf\x0f>\xdb\x8f\xd5" +
	"\x1f\x9f$\xf3d\xc0\x8f\x80G.\xf1\x82\xf5\x17d\xf9" +
	"\xc3\xe0\xa7\xc1\x9b4/X?%\xf9I\xf0\xf3\xe0s" +
	"\xb8\x17\xac\xbf/\xf9{\xe0\x95a\x04\xd9\xd3\xbc`\xbd" +
	"B\xeea\x85r;^\xf5\xf3j\xbc`\xbd1\xfc\xed" +
	"\xe0\x96W}\xf3\x14/X\xbf\"\x8c\xf6,\x04_\x0e" +
	"\xde2\xd5\x0b\xd6\xaf\x91{@\x85=\xaf\xf9\xb5^\xb0" +
	"~\x83\xdc3Z\x09\xde\x11V\xe0\x0c&l'm\xe7" +
	"\x97\x84\xdc9\xb7w\x8a%,2\\\xc7\x180\x12%" +
	"\xf9$\xe3\x82\xa7\xaf\xfe\xeb\x0ff\xec\x8e\xfe\xeao\x0a" +
	"I+\x17\xdb\xa7\xcd_Y\xf6\xcd\x8d_\xa4\x10\x13\xc1" +
	"\x99\xeev\x06I\xda\"\xdd\x95\x9ey\xaei\x86\x9f\x97" +
	"@\xb6\xd5\x9a\xb2\xb3EW.\xf5\x84\xdb\x9aJ\xd9\x96" +
	"b\xe8\xdd#FRw'r}\xf4\x84\xdb\x85W\xa3" +
	"\x01\xdf\x88\xd6\x06o\xbf\x06J\xc5\x84e\xb8\xe4\xf5\x81" +
	"kD\xbd\xea\xc6\x95\xb3Skt\xf9\xa1\x10\xd3\xd5\xe3" +
	"\xd9\x14\x9b\xa0\xc0ZVk\xa5\xb3\xee\x04\xd28S\xc7" +
	"\xdfb\xd3\xedT\xdc\x94\xc9\x87\x13W\x8d\x02\x13W\x0d" +
	"i\xd9\xaa\x13\xabtS\xb7\x122#\xbd\xf4\xacW$" +
	"\xecT\xda\xceH/\"p\xdf\xb8\xe8\x0b/\xe3\xbf\xe5" +
	"bX\xc2q\xe3\xb6A\xb9u\x84\xdaJk\xb6\x96\xd8" +
	"\xf2\xe3\x00,\x1c\x8c\x17\xf24\x9a\x10\xc9\xae\x80\xd3\x91" +
	"\x13PB$\xe5P\x14\x7fo`u\xc2\xce\x8c\x92\xbc" +
	"L1\x82\x10\xcb\x0a\xb8GE\xe2r\x1f3\xb1\x84\x0b" +
	"\x07D\x90\xa3\x9b\xf2\x92\x96z1\xe1\x04C\xef]\xa0" +
	"k_J\xb7\xc8\x08\xc24\xc2\x99\xe0{\x0d-\x95\x9c" +
	"Ee.P\xe0\xfaSjS[\xf7\x92\xd5\xc3d\x9b" +
	"\xf2\xc2l_\xb8L\xdd\x99\xd4&9\xadX-\x06\xbf" +
	"\x8cT\xce\x8c\xf2\xd2\xdf\xe3\x06\xaa\xcc\xa4\xaa\xb5\x8cD" +
	"\xdbxi\xeab\x0d\xb8\xe8\xa4\xce\xf8\x13w\x82g\xb3" +
	"\xa9b\xcdR\x8b\xef\x13v\xa1\xfb\xc9\x90\x8d72%" +
	"\xb3\x0f\xf2%\xdd=\x0e\x8b\xda\xc5a'\x04\xedKo" +
	"\xb1\xc9\x1b\x8a\x8c\xa0\xe48\xf7g\xc2\xcb3}YK" +
	"\x1e\xe9\xd7\xe6\x9c\x9eP\xde\x07\x9d\xf2E\xc6zkT" +
	"\xea\x9d\xae\xf8\x15\xc5]\x9d\xa9\xf2\xa6F\xfe_/\xf2" +
	"-\xdf'\xfeN\xa7>\xbaI\xac\xb2m2K~d" +
	"\x09c\xbd\x95*\xf5r%w\xbf\xa0\xf4\x9aC\xe8b" +
	"\xae\x1b\x8ch\xd4\xc9\xbbl+\xbc\x8a\x89\xb4G\x08k" +
	"\xc1\x1e\x82/A\x85\xcb\x0d\xdaw\xe55\x99}\xe0O" +
	"\x92B\xb9t\x80'\xe41\xfe~\xe0#Tp\xa5\xb5" +
	"\x17h\x15\\\x0c\xf0\xa3T\xf0\xa6\xb5\x17%/\xdc\xc2" +
	"\xf1\x1dj\xede\xc9\x8f\x80\x1f\xa7\x82O\xad\xbd\"y" +
	"\xfevN}\xd8\xcf\x07xM\xa6&\x1d\x07?-\xcf" +
	"\xfd\xc3\x9c*\x89\xb4S\xb2|\xe1\xdaNU%\xa7*" +
	"\"\xed\x8c\xe4'\xc1\xdf\x04\xaf\xae\xe2TM\xa4\xfdL" +
	"\xf2\xd3\xe0\xe7H\xa1\xc5\x93\xb7+\xde\xfd\x9f\xb7d\x02" +
	"\xc1\x9b\x10\xbc\x87\x07j\xc8\xf3\xd9\xde\xc5J\x1d?\x07" +
	"~\x9e\xfc\x7f\xa7f\x0a\x91\xf6\xbe\xec\xb7|\x0a\x95\xfc" +
	"wj\xe4A\xae\xbc\xbe\x94\xcb\xa1\x1a\xbf\xad\x11<&" +
	"}>\x7fL\xba\x1e\xcbP\x04\x01Ta\x87f\xd8n" +
	"\xed\xee\xec\xb1mFf!\xa9-\xff\x8f'yIm" +
	"w\xfb\x8a\x94{\xe8n_\xed\x0a\xff\xed\xd9\x81\xe0\x7f" +
	"\x07\xe5\xde\xb9\xab\xeelb\xb5z\xcaH\x06\xaa1\xcc" +
	"\xae\xf6e~k\xaflk\xf8\xbfo\x7fn&Z\xeb" +
	"\xa7\xc2\xf8\xf9\xefc\x1f?\xf5\xc1\x1b\x9d\x9bz\x02\x92" +
	"\xa5\xe3\x9f\x91?\xb2\xc6\xb1\xefd\xaa\xc8;\x11\xe1L" +
	"\x1a\xae\xc1\x7f}\xe1G\x87N^;\xe7\xd9q\xd9\x9d" +
	"Qy*\xe8\xd7v\xe4D\xd4\xaf\xa6\xf8t\xf6S\xab" +
	"/z\xd2\xb1\xd3\"\xe2\xb8\x86\x901d\x7f>\x93\xe1" +
	"\x06\x99\xd6UH)\xc8i@\xab\xe4+\xc0\xdbs\xa9" +
	"\x09P\x81\xd5\xf2\xa8\xbe\x1d\xbc_\xf1\xb3\xd1\xa1\x02\xbd" +
	"\x92\xf7\x83oT\xfclt\xa8\xc0\xed\x92o\xcc\xa7 " +
	"T\xf87l\x0c\xc9M\xf0\x11\xc5O}\x81\x0ade" +
	"J\x81\x0b\xbe]\xf1O\xfa\xa0\x02wI\x1e\xb8IS" +
	"\xe9\xa9\xc0}\xb2\x9e\x9d\xe0{\x14?\x1b\x1d*\xf0\xb0" +
	"\xe4{\x0aio\xfe\x05\x9b\xef\xca\x9b:\x85\x0b6\x93" +
	"\xf3\x17l\xbe\x9fKe8$S\x16j8\xd5\x10i" +
	"\xcf\xc9\x94\x8bg\xc1\x8f\xc8\x94\x85)\x9e\x06\xbc y" +
	"\xe1\x82\xcd\xd4\xe5\x9c\xa6\x12i/\xcbz\x8e\x81\x9f\x94" +
	"\x17i\xfc\x0b6\xaf\xcbT\x8c\x93\xe0o\xca\x8b4\xfe" +
	"\x05\x9b\x9f\xc9\xd4\x10\x99\x12\xf1\x8e\xbcH\xe3_\xb0\xf9" +
	"\x85L\xb98\x07~^\xa6\x92\xf8\x17l\xde\x97\xfc\xbd" +
	"\\\x0a\xc5b\xed!\x95\x93F\xa4}$+\xfaPQ" +
	"\xa9OUh1\x7fX\xe5\x18J\xed\xb7\xca\xae@\x1e" +
	"\xde\xddz\x89\xca\xe8\xc5*\x93w\xaa\x14\x91\xc0\x9a\xee" +
	"\xda\xf1\xceU\x00\xec\xa2%PEQ\x09\xb96^\xb4" +
	"\x8eq%\xc6\xd5\xe1;w\x09?\xa5\xae\xf4\xd9\xb2\x92" +
	"\\\xcb\xa4$\xee\xeaVRw\x92\xc5w\xe6\x0a?=" +
	"q\xa1\xb4\xee\xb8\xad\xdd\x9dq2\xed\xad\xb2q\xb5\xc1" +
	"N+#.\xea\xc3\x84%?G\xd2\xca\xa2\xdd\x9d\x85" +
	"\xe7\xfc\xaft\x06d\x85\x87\xfc\xfb\xe6\xfe\xa7!\xc9\xf1" +
	"\xb70\xbc\xc8\"\xef\xfa\xdb\xa9\x983\xda\xa9\x93\xeb\x0a" +
	"\xa7\xcd\xb6\xdcp\xf0\x13\x07\xba\x9d\xeaj_\xd6f3" +
	"\xdf\x9b)\xed\x14\xdf\xd9(\xed\xc5\x12<Q\xd0c\xd9" +
	"\x9e\x13G\xa6qgng\x85\x98RQ\xb4\x06W|" +
	"\xca=.\xef&N\xfe\x1f\xfc\xab\xa7_\x8f\xe5v\xbd" +
	"\x94\xb2\xdb^\xbd+\xf3\xf6\xea\x19\x99\x91\xf7l~\x09" +
	"\xce\xd9\xab\x17$/,\xa9J\xa5g\xaf^\x91\x99z" +
	"\x85\xa53g\xafN\xc9\xf2\xf9\xa50o\xaf\xde\x92+" +
	"\x7fa%\xcc\xd9\xabw\xe9U\xc6\xe2\xe7\xc1?\xa6\x80" +
	"\xbd\xfa\x8dL\xe1\xbb\x00\x1e\xca\xdb+\"\x8d\xe4\x05\xb9" +
	"|\x86\x98g\xafd\x8a\xd8KEi\xc3U\xfe\x85\xdd" +
	"F\xa9\xbe2mx\x81\xe2]\xcc\x85\xb9j\x91\x89f" +
	"\xf9\xfb\x8f\xf2\x1f\x96\x9b,/@~;\x97M\xbcR" +
	"\x09,\xd87\xc8,\xe3\x82\xd9\x9e\xa2\xf8\xff\xe0\\\xc1" +
	"l'\x15\x7f\xd3\x04\x0b\xb6.y!\xcb\xb8\xd6\xcf\xbc" +
	"J)\xd7\x073\xc4\xe03\xcb\x0dW\xf2\xce\xca\xe2n" +
	"\xc4.\xf9\xaa\x8b\xf7uJ\x12i\xefC\x80\xa5\xf2T" +
	"\xf0\xa6F\xbf\xbeI5E \xea]#O\xa3\xa8\xc3" +
	"\xf6N\xa3\"2\xad\xa7\xf0\xf0\x16\xf9I\xdau,\x92" +
	".\xfa\x14\xc7\xb0+\xbf\xfe\x92U\xe4Vp q\x8f" +
	"\x05?\x86*/\xa8\x09V\xf4\xdd\x98t\xa6S\x1f\xe9" +
	"4,E\xe4b\x18\xdb\xf2\x0eOX\x91\x8frF\xae" +
	"\xe0\x13G\xe5\xf9_\x19\xe8\x97\xdb\x8b,\x92\xc9\x04o" +
	"\xb2\xe58I\xdc\xa3;Q\xef\x03\xd0evK\x8b\x8b" +
	"\xc6\x84\xa9\xea\xa3\xf9\x1eJ\xf8\xf7-\x18\xbam\xfc\x85" +
	"\x8bdy\xed\xc9\xb0\x82\xeb\x94\xd7\xb6\xdc\xe7\xb3R\xf9" +
	"\xcf\x19\xe7\x0e\x80\x8bO\x8f\xa2\xa6wP\x9b\xaf!\x98" +
	"\x88\x16\xdc\xd9V'\xd2\xfa\xe8\xda\xb6\x98\xee\xea\xf07" +
	"j\xd4P\xcd\xd8\x98\xf4\xe5W_\xcfX\xefJ\x95z" +
	";\x14j\xa4\xdf\x8d\xf9\xfb\xd6k\x81c*\xf5\xf6(" +
	"\xd4\xa8\xfcv\xcc\xdf\xb9\xee\xfc\x0cc\xbd\xed*\xf5\xf6" +
	"+\x14\xb5ly}{RtH~\xdc\xb0\xf0]F" +
	"\xbd\x10\x16\xff\xff\x01\x00\x00\xff\xff\"\xb1\xad\x95"

func init() {
	schemas.Register(schema_86ea47c297746539,
		0x811d54ac7debc21e,
		0x8b008567c93f7c7d,
		0x98e203c76f83d365,
		0xa4da01d10b3b6acd,
		0xab56969492d293b3,
		0xb1760f65e652e737,
		0xb4f16ea3144d85a6,
		0xbd3e199eb9b03758,
		0xcd05962719bf7ec8,
		0xd1edcf54f4edf638,
		0xd594e64f6b5f461d,
		0xd599d06dc405571a,
		0xd8af9210839bc071,
		0xdd1e0c7c94dc4211,
		0xe3512e62df901c18,
		0xef3e4198d3e35596,
		0xf03d8fd1bbe75519)
}
