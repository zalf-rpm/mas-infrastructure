// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	math "math"
	strconv "strconv"
)

type MaybeBool capnp.Struct

// MaybeBool_TypeID is the unique identifier for the type MaybeBool.
const MaybeBool_TypeID = 0xd8af9210839bc071

func NewMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func NewRootMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func ReadRootMaybeBool(msg *capnp.Message) (MaybeBool, error) {
	root, err := msg.Root()
	return MaybeBool(root.Struct()), err
}

func (s MaybeBool) String() string {
	str, _ := text.Marshal(0xd8af9210839bc071, capnp.Struct(s))
	return str
}

func (s MaybeBool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MaybeBool) DecodeFromPtr(p capnp.Ptr) MaybeBool {
	return MaybeBool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MaybeBool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MaybeBool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MaybeBool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MaybeBool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MaybeBool) Value() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MaybeBool) SetValue(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// MaybeBool_List is a list of MaybeBool.
type MaybeBool_List = capnp.StructList[MaybeBool]

// NewMaybeBool creates a new list of MaybeBool.
func NewMaybeBool_List(s *capnp.Segment, sz int32) (MaybeBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MaybeBool](l), err
}

// MaybeBool_Future is a wrapper for a MaybeBool promised by a client call.
type MaybeBool_Future struct{ *capnp.Future }

func (f MaybeBool_Future) Struct() (MaybeBool, error) {
	p, err := f.Future.Ptr()
	return MaybeBool(p.Struct()), err
}

type RuntimeState capnp.Struct

// RuntimeState_TypeID is the unique identifier for the type RuntimeState.
const RuntimeState_TypeID = 0xd599d06dc405571a

func NewRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func NewRootRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func ReadRootRuntimeState(msg *capnp.Message) (RuntimeState, error) {
	root, err := msg.Root()
	return RuntimeState(root.Struct()), err
}

func (s RuntimeState) String() string {
	str, _ := text.Marshal(0xd599d06dc405571a, capnp.Struct(s))
	return str
}

func (s RuntimeState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeState) DecodeFromPtr(p capnp.Ptr) RuntimeState {
	return RuntimeState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeState) ModelState() (MonicaModelState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MonicaModelState(p.Struct()), err
}

func (s RuntimeState) HasModelState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeState) SetModelState(v MonicaModelState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModelState sets the modelState field to a newly
// allocated MonicaModelState struct, preferring placement in s's segment.
func (s RuntimeState) NewModelState() (MonicaModelState, error) {
	ss, err := NewMonicaModelState(capnp.Struct(s).Segment())
	if err != nil {
		return MonicaModelState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RuntimeState_List is a list of RuntimeState.
type RuntimeState_List = capnp.StructList[RuntimeState]

// NewRuntimeState creates a new list of RuntimeState.
func NewRuntimeState_List(s *capnp.Segment, sz int32) (RuntimeState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RuntimeState](l), err
}

// RuntimeState_Future is a wrapper for a RuntimeState promised by a client call.
type RuntimeState_Future struct{ *capnp.Future }

func (f RuntimeState_Future) Struct() (RuntimeState, error) {
	p, err := f.Future.Ptr()
	return RuntimeState(p.Struct()), err
}
func (p RuntimeState_Future) ModelState() MonicaModelState_Future {
	return MonicaModelState_Future{Future: p.Future.Field(0, nil)}
}

type CropState capnp.Struct

// CropState_TypeID is the unique identifier for the type CropState.
const CropState_TypeID = 0x8b008567c93f7c7d

func NewCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func NewRootCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func ReadRootCropState(msg *capnp.Message) (CropState, error) {
	root, err := msg.Root()
	return CropState(root.Struct()), err
}

func (s CropState) String() string {
	str, _ := text.Marshal(0x8b008567c93f7c7d, capnp.Struct(s))
	return str
}

func (s CropState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropState) DecodeFromPtr(p capnp.Ptr) CropState {
	return CropState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropState) SpeciesName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropState) HasSpeciesName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropState) SpeciesNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropState) SetSpeciesName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropState) CultivarName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropState) HasCultivarName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropState) CultivarNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropState) SetCultivarName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CropState) SeedDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common_date.Date(p.Struct()), err
}

func (s CropState) HasSeedDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropState) SetSeedDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSeedDate sets the seedDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s CropState) NewSeedDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) HarvestDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common_date.Date(p.Struct()), err
}

func (s CropState) HasHarvestDate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropState) SetHarvestDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewHarvestDate sets the harvestDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s CropState) NewHarvestDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsWinterCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsWinterCrop() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropState) SetIsWinterCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewIsWinterCrop sets the isWinterCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsWinterCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsPerennialCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsPerennialCrop() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropState) SetIsPerennialCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewIsPerennialCrop sets the isPerennialCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsPerennialCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CuttingDates() (common_date.Date_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return common_date.Date_List(p.List()), err
}

func (s CropState) HasCuttingDates() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropState) SetCuttingDates(v common_date.Date_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCuttingDates sets the cuttingDates field to a newly
// allocated common_date.Date_List, preferring placement in s's segment.
func (s CropState) NewCuttingDates(n int32) (common_date.Date_List, error) {
	l, err := common_date.NewDate_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common_date.Date_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropState) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropState) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) PerennialCropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasPerennialCropParams() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropState) SetPerennialCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewPerennialCropParams sets the perennialCropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewPerennialCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropResidueParameters(p.Struct()), err
}

func (s CropState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CrossCropAdaptionFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3ff0000000000000)
}

func (s CropState) SetCrossCropAdaptionFactor(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropState) AutomaticHarvest() bool {
	return capnp.Struct(s).Bit(64)
}

func (s CropState) SetAutomaticHarvest(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s CropState) AutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AutomaticHarvestParameters(p.Struct()), err
}

func (s CropState) HasAutomaticHarvestParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropState) SetAutomaticHarvestParams(v AutomaticHarvestParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAutomaticHarvestParams sets the automaticHarvestParams field to a newly
// allocated AutomaticHarvestParameters struct, preferring placement in s's segment.
func (s CropState) NewAutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	ss, err := NewAutomaticHarvestParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticHarvestParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropState_List is a list of CropState.
type CropState_List = capnp.StructList[CropState]

// NewCropState creates a new list of CropState.
func NewCropState_List(s *capnp.Segment, sz int32) (CropState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11}, sz)
	return capnp.StructList[CropState](l), err
}

// CropState_Future is a wrapper for a CropState promised by a client call.
type CropState_Future struct{ *capnp.Future }

func (f CropState_Future) Struct() (CropState, error) {
	p, err := f.Future.Ptr()
	return CropState(p.Struct()), err
}
func (p CropState_Future) SeedDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p CropState_Future) HarvestDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(4, nil)}
}
func (p CropState_Future) IsWinterCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(5, nil)}
}
func (p CropState_Future) IsPerennialCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(6, nil)}
}
func (p CropState_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(8, nil)}
}
func (p CropState_Future) PerennialCropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(9, nil)}
}
func (p CropState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(10, nil)}
}
func (p CropState_Future) AutomaticHarvestParams() AutomaticHarvestParameters_Future {
	return AutomaticHarvestParameters_Future{Future: p.Future.Field(0, nil)}
}

type AOMProperties capnp.Struct

// AOMProperties_TypeID is the unique identifier for the type AOMProperties.
const AOMProperties_TypeID = 0xe3512e62df901c18

func NewAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func NewRootAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func ReadRootAOMProperties(msg *capnp.Message) (AOMProperties, error) {
	root, err := msg.Root()
	return AOMProperties(root.Struct()), err
}

func (s AOMProperties) String() string {
	str, _ := text.Marshal(0xe3512e62df901c18, capnp.Struct(s))
	return str
}

func (s AOMProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AOMProperties) DecodeFromPtr(p capnp.Ptr) AOMProperties {
	return AOMProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AOMProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AOMProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AOMProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AOMProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AOMProperties) AomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s AOMProperties) SetAomSlow(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s AOMProperties) AomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s AOMProperties) SetAomFast(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s AOMProperties) SetAomFastDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s AOMProperties) SetAomFastDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s AOMProperties) SetAomSlowDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s AOMProperties) SetAomFastDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) PartAOMSlowtoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s AOMProperties) SetPartAOMSlowtoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s AOMProperties) PartAOMSlowtoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s AOMProperties) SetPartAOMSlowtoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s AOMProperties) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) DaysAfterApplication() uint16 {
	return capnp.Struct(s).Uint16(112)
}

func (s AOMProperties) SetDaysAfterApplication(v uint16) {
	capnp.Struct(s).SetUint16(112, v)
}

func (s AOMProperties) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s AOMProperties) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s AOMProperties) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s AOMProperties) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s AOMProperties) SetAomSlowDelta(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s AOMProperties) AomFastDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s AOMProperties) SetAomFastDelta(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s AOMProperties) Incorporation() bool {
	return capnp.Struct(s).Bit(912)
}

func (s AOMProperties) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(912, v)
}

func (s AOMProperties) NoVolatilization() bool {
	return !capnp.Struct(s).Bit(913)
}

func (s AOMProperties) SetNoVolatilization(v bool) {
	capnp.Struct(s).SetBit(913, !v)
}

// AOMProperties_List is a list of AOMProperties.
type AOMProperties_List = capnp.StructList[AOMProperties]

// NewAOMProperties creates a new list of AOMProperties.
func NewAOMProperties_List(s *capnp.Segment, sz int32) (AOMProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0}, sz)
	return capnp.StructList[AOMProperties](l), err
}

// AOMProperties_Future is a wrapper for a AOMProperties promised by a client call.
type AOMProperties_Future struct{ *capnp.Future }

func (f AOMProperties_Future) Struct() (AOMProperties, error) {
	p, err := f.Future.Ptr()
	return AOMProperties(p.Struct()), err
}

type SoilColumnState capnp.Struct

// SoilColumnState_TypeID is the unique identifier for the type SoilColumnState.
const SoilColumnState_TypeID = 0xef3e4198d3e35596

func NewSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func NewRootSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func ReadRootSoilColumnState(msg *capnp.Message) (SoilColumnState, error) {
	root, err := msg.Root()
	return SoilColumnState(root.Struct()), err
}

func (s SoilColumnState) String() string {
	str, _ := text.Marshal(0xef3e4198d3e35596, capnp.Struct(s))
	return str
}

func (s SoilColumnState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState) DecodeFromPtr(p capnp.Ptr) SoilColumnState {
	return SoilColumnState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState) VsSurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState) SetVsSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState) VsInterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState) SetVsInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState) VmGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilColumnState) SetVmGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilColumnState) VsFluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState) SetVsFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState) VqCropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState) SetVqCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState) VtSoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState) SetVtSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilColumnState) VmSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilColumnState) SetVmSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilColumnState) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilColumnState) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilColumnState) VsNumberOfOrganicLayers() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilColumnState) SetVsNumberOfOrganicLayers(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressing() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilColumnState) SetVfTopDressing(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState) HasVfTopDressingPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState) SetVfTopDressingPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVfTopDressingPartition sets the vfTopDressingPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState) NewVfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) VfTopDressingDelay() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilColumnState) SetVfTopDressingDelay(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilColumnState) CropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropModuleState(p.Struct()), err
}

func (s SoilColumnState) HasCropModule() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilColumnState) SetCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCropModule sets the cropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s SoilColumnState) NewCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) DelayedNMinApplications() (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilColumnState_DelayedNMinApplicationParams_List(p.List()), err
}

func (s SoilColumnState) HasDelayedNMinApplications() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilColumnState) SetDelayedNMinApplications(v SoilColumnState_DelayedNMinApplicationParams_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDelayedNMinApplications sets the delayedNMinApplications field to a newly
// allocated SoilColumnState_DelayedNMinApplicationParams_List, preferring placement in s's segment.
func (s SoilColumnState) NewDelayedNMinApplications(n int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := NewSoilColumnState_DelayedNMinApplicationParams_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilColumnState_DelayedNMinApplicationParams_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilColumnState) PmCriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilColumnState) SetPmCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilColumnState) Layers() (SoilLayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SoilLayerState_List(p.List()), err
}

func (s SoilColumnState) HasLayers() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilColumnState) SetLayers(v SoilLayerState_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated SoilLayerState_List, preferring placement in s's segment.
func (s SoilColumnState) NewLayers(n int32) (SoilLayerState_List, error) {
	l, err := NewSoilLayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilLayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// SoilColumnState_List is a list of SoilColumnState.
type SoilColumnState_List = capnp.StructList[SoilColumnState]

// NewSoilColumnState creates a new list of SoilColumnState.
func NewSoilColumnState_List(s *capnp.Segment, sz int32) (SoilColumnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4}, sz)
	return capnp.StructList[SoilColumnState](l), err
}

// SoilColumnState_Future is a wrapper for a SoilColumnState promised by a client call.
type SoilColumnState_Future struct{ *capnp.Future }

func (f SoilColumnState_Future) Struct() (SoilColumnState, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState(p.Struct()), err
}
func (p SoilColumnState_Future) VfTopDressingPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}
func (p SoilColumnState_Future) CropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(1, nil)}
}

type SoilColumnState_DelayedNMinApplicationParams capnp.Struct

// SoilColumnState_DelayedNMinApplicationParams_TypeID is the unique identifier for the type SoilColumnState_DelayedNMinApplicationParams.
const SoilColumnState_DelayedNMinApplicationParams_TypeID = 0xd1edcf54f4edf638

func NewSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func NewRootSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func ReadRootSoilColumnState_DelayedNMinApplicationParams(msg *capnp.Message) (SoilColumnState_DelayedNMinApplicationParams, error) {
	root, err := msg.Root()
	return SoilColumnState_DelayedNMinApplicationParams(root.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) String() string {
	str, _ := text.Marshal(0xd1edcf54f4edf638, capnp.Struct(s))
	return str
}

func (s SoilColumnState_DelayedNMinApplicationParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState_DelayedNMinApplicationParams) DecodeFromPtr(p capnp.Ptr) SoilColumnState_DelayedNMinApplicationParams {
	return SoilColumnState_DelayedNMinApplicationParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState_DelayedNMinApplicationParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState_DelayedNMinApplicationParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState_DelayedNMinApplicationParams) Fp() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) HasFp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFp(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFp sets the fp field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState_DelayedNMinApplicationParams) NewFp() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMinApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMinApplication(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMaxApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMaxApplication(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) TopDressingDelay() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetTopDressingDelay(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

// SoilColumnState_DelayedNMinApplicationParams_List is a list of SoilColumnState_DelayedNMinApplicationParams.
type SoilColumnState_DelayedNMinApplicationParams_List = capnp.StructList[SoilColumnState_DelayedNMinApplicationParams]

// NewSoilColumnState_DelayedNMinApplicationParams creates a new list of SoilColumnState_DelayedNMinApplicationParams.
func NewSoilColumnState_DelayedNMinApplicationParams_List(s *capnp.Segment, sz int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[SoilColumnState_DelayedNMinApplicationParams](l), err
}

// SoilColumnState_DelayedNMinApplicationParams_Future is a wrapper for a SoilColumnState_DelayedNMinApplicationParams promised by a client call.
type SoilColumnState_DelayedNMinApplicationParams_Future struct{ *capnp.Future }

func (f SoilColumnState_DelayedNMinApplicationParams_Future) Struct() (SoilColumnState_DelayedNMinApplicationParams, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState_DelayedNMinApplicationParams(p.Struct()), err
}
func (p SoilColumnState_DelayedNMinApplicationParams_Future) Fp() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilLayerState capnp.Struct

// SoilLayerState_TypeID is the unique identifier for the type SoilLayerState.
const SoilLayerState_TypeID = 0xdd1e0c7c94dc4211

func NewSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func NewRootSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func ReadRootSoilLayerState(msg *capnp.Message) (SoilLayerState, error) {
	root, err := msg.Root()
	return SoilLayerState(root.Struct()), err
}

func (s SoilLayerState) String() string {
	str, _ := text.Marshal(0xdd1e0c7c94dc4211, capnp.Struct(s))
	return str
}

func (s SoilLayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilLayerState) DecodeFromPtr(p capnp.Ptr) SoilLayerState {
	return SoilLayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilLayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilLayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilLayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilLayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilLayerState) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fb999999999999a)
}

func (s SoilLayerState) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilLayerState) SoilWaterFlux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilLayerState) SetSoilWaterFlux(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilLayerState) VoAOMPool() (AOMProperties_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AOMProperties_List(p.List()), err
}

func (s SoilLayerState) HasVoAOMPool() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilLayerState) SetVoAOMPool(v AOMProperties_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVoAOMPool sets the voAOMPool field to a newly
// allocated AOMProperties_List, preferring placement in s's segment.
func (s SoilLayerState) NewVoAOMPool(n int32) (AOMProperties_List, error) {
	l, err := NewAOMProperties_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AOMProperties_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SoilLayerState) SomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilLayerState) SetSomSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilLayerState) SomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilLayerState) SetSomFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilLayerState) SmbSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilLayerState) SetSmbSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilLayerState) SmbFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilLayerState) SetSmbFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilLayerState) SoilCarbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilLayerState) SetSoilCarbamid(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilLayerState) SoilNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNH4(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilNO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SetSoilNO2(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SoilNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNO3(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilFrozen() bool {
	return capnp.Struct(s).Bit(640)
}

func (s SoilLayerState) SetSoilFrozen(v bool) {
	capnp.Struct(s).SetBit(640, v)
}

func (s SoilLayerState) Sps() (SoilParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilParameters(p.Struct()), err
}

func (s SoilLayerState) HasSps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilLayerState) SetSps(v SoilParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSps sets the sps field to a newly
// allocated SoilParameters struct, preferring placement in s's segment.
func (s SoilLayerState) NewSps() (SoilParameters, error) {
	ss, err := NewSoilParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilLayerState) SoilMoistureM3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x3fd0000000000000)
}

func (s SoilLayerState) SetSoilMoistureM3(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilLayerState) SoilTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilLayerState) SetSoilTemperature(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// SoilLayerState_List is a list of SoilLayerState.
type SoilLayerState_List = capnp.StructList[SoilLayerState]

// NewSoilLayerState creates a new list of SoilLayerState.
func NewSoilLayerState_List(s *capnp.Segment, sz int32) (SoilLayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2}, sz)
	return capnp.StructList[SoilLayerState](l), err
}

// SoilLayerState_Future is a wrapper for a SoilLayerState promised by a client call.
type SoilLayerState_Future struct{ *capnp.Future }

func (f SoilLayerState_Future) Struct() (SoilLayerState, error) {
	p, err := f.Future.Ptr()
	return SoilLayerState(p.Struct()), err
}
func (p SoilLayerState_Future) Sps() SoilParameters_Future {
	return SoilParameters_Future{Future: p.Future.Field(1, nil)}
}

type MonicaModelState capnp.Struct

// MonicaModelState_TypeID is the unique identifier for the type MonicaModelState.
const MonicaModelState_TypeID = 0xab56969492d293b3

func NewMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func NewRootMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func ReadRootMonicaModelState(msg *capnp.Message) (MonicaModelState, error) {
	root, err := msg.Root()
	return MonicaModelState(root.Struct()), err
}

func (s MonicaModelState) String() string {
	str, _ := text.Marshal(0xab56969492d293b3, capnp.Struct(s))
	return str
}

func (s MonicaModelState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState) DecodeFromPtr(p capnp.Ptr) MonicaModelState {
	return MonicaModelState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState) SitePs() (SiteParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SiteParameters(p.Struct()), err
}

func (s MonicaModelState) HasSitePs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MonicaModelState) SetSitePs(v SiteParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSitePs sets the sitePs field to a newly
// allocated SiteParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSitePs() (SiteParameters, error) {
	ss, err := NewSiteParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SiteParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) EnvPs() (EnvironmentParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters(p.Struct()), err
}

func (s MonicaModelState) HasEnvPs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MonicaModelState) SetEnvPs(v EnvironmentParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnvPs sets the envPs field to a newly
// allocated EnvironmentParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewEnvPs() (EnvironmentParameters, error) {
	ss, err := NewEnvironmentParameters(capnp.Struct(s).Segment())
	if err != nil {
		return EnvironmentParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CropPs() (CropModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CropModuleParameters(p.Struct()), err
}

func (s MonicaModelState) HasCropPs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MonicaModelState) SetCropPs(v CropModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCropPs sets the cropPs field to a newly
// allocated CropModuleParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewCropPs() (CropModuleParameters, error) {
	ss, err := NewCropModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SimPs() (SimulationParameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SimulationParameters(p.Struct()), err
}

func (s MonicaModelState) HasSimPs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s MonicaModelState) SetSimPs(v SimulationParameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSimPs sets the simPs field to a newly
// allocated SimulationParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSimPs() (SimulationParameters, error) {
	ss, err := NewSimulationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SimulationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) GroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

func (s MonicaModelState) HasGroundwaterInformation() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s MonicaModelState) SetGroundwaterInformation(v MeasuredGroundwaterTableInformation) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewGroundwaterInformation sets the groundwaterInformation field to a newly
// allocated MeasuredGroundwaterTableInformation struct, preferring placement in s's segment.
func (s MonicaModelState) NewGroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	ss, err := NewMeasuredGroundwaterTableInformation(capnp.Struct(s).Segment())
	if err != nil {
		return MeasuredGroundwaterTableInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilColumn() (SoilColumnState, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return SoilColumnState(p.Struct()), err
}

func (s MonicaModelState) HasSoilColumn() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s MonicaModelState) SetSoilColumn(v SoilColumnState) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewSoilColumn sets the soilColumn field to a newly
// allocated SoilColumnState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilColumn() (SoilColumnState, error) {
	ss, err := NewSoilColumnState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilColumnState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTemperature() (SoilTemperatureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return SoilTemperatureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s MonicaModelState) SetSoilTemperature(v SoilTemperatureModuleState) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated SoilTemperatureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTemperature() (SoilTemperatureModuleState, error) {
	ss, err := NewSoilTemperatureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilMoisture() (SoilMoistureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return SoilMoistureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s MonicaModelState) SetSoilMoisture(v SoilMoistureModuleState) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated SoilMoistureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilMoisture() (SoilMoistureModuleState, error) {
	ss, err := NewSoilMoistureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilOrganic() (SoilOrganicModuleState, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return SoilOrganicModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilOrganic() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s MonicaModelState) SetSoilOrganic(v SoilOrganicModuleState) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewSoilOrganic sets the soilOrganic field to a newly
// allocated SoilOrganicModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilOrganic() (SoilOrganicModuleState, error) {
	ss, err := NewSoilOrganicModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTransport() (SoilTransportModuleState, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return SoilTransportModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTransport() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s MonicaModelState) SetSoilTransport(v SoilTransportModuleState) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewSoilTransport sets the soilTransport field to a newly
// allocated SoilTransportModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTransport() (SoilTransportModuleState, error) {
	ss, err := NewSoilTransportModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CurrentCropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropModuleState(p.Struct()), err
}

func (s MonicaModelState) HasCurrentCropModule() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s MonicaModelState) SetCurrentCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewCurrentCropModule sets the currentCropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s MonicaModelState) SetSumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s MonicaModelState) SumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s MonicaModelState) SetSumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s MonicaModelState) DailySumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s MonicaModelState) SetDailySumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s MonicaModelState) SetDailySumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s MonicaModelState) SetDailySumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s MonicaModelState) SumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s MonicaModelState) SetSumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s MonicaModelState) HumusBalanceCarryOver() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s MonicaModelState) SetHumusBalanceCarryOver(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s MonicaModelState) DailySumIrrigationWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s MonicaModelState) SetDailySumIrrigationWater(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonExportedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s MonicaModelState) SetOptCarbonExportedResidues(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonReturnedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s MonicaModelState) SetOptCarbonReturnedResidues(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s MonicaModelState) CurrentStepDate() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return common_date.Date(p.Struct()), err
}

func (s MonicaModelState) HasCurrentStepDate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s MonicaModelState) SetCurrentStepDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewCurrentStepDate sets the currentStepDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentStepDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) ClimateData() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.PointerList(p.List()), err
}

func (s MonicaModelState) HasClimateData() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s MonicaModelState) SetClimateData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewClimateData sets the climateData field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s MonicaModelState) NewClimateData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s MonicaModelState) CurrentEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasCurrentEvents() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s MonicaModelState) SetCurrentEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewCurrentEvents sets the currentEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s MonicaModelState) PreviousDaysEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasPreviousDaysEvents() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s MonicaModelState) SetPreviousDaysEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPreviousDaysEvents sets the previousDaysEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewPreviousDaysEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s MonicaModelState) ClearCropUponNextDay() bool {
	return capnp.Struct(s).Bit(16)
}

func (s MonicaModelState) SetClearCropUponNextDay(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s MonicaModelState) DaysWithCrop() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s MonicaModelState) SetDaysWithCrop(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s MonicaModelState) AccuNStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s MonicaModelState) SetAccuNStress(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s MonicaModelState) AccuWaterStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s MonicaModelState) SetAccuWaterStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s MonicaModelState) AccuHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s MonicaModelState) SetAccuHeatStress(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s MonicaModelState) AccuOxygenStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s MonicaModelState) SetAccuOxygenStress(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericCO2Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s MonicaModelState) SetVwAtmosphericCO2Concentration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericO3Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s MonicaModelState) SetVwAtmosphericO3Concentration(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s MonicaModelState) VsGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState) SetVsGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s MonicaModelState) CultivationMethodCount() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState) SetCultivationMethodCount(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// MonicaModelState_List is a list of MonicaModelState.
type MonicaModelState_List = capnp.StructList[MonicaModelState]

// NewMonicaModelState creates a new list of MonicaModelState.
func NewMonicaModelState_List(s *capnp.Segment, sz int32) (MonicaModelState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15}, sz)
	return capnp.StructList[MonicaModelState](l), err
}

// MonicaModelState_Future is a wrapper for a MonicaModelState promised by a client call.
type MonicaModelState_Future struct{ *capnp.Future }

func (f MonicaModelState_Future) Struct() (MonicaModelState, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState(p.Struct()), err
}
func (p MonicaModelState_Future) SitePs() SiteParameters_Future {
	return SiteParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p MonicaModelState_Future) EnvPs() EnvironmentParameters_Future {
	return EnvironmentParameters_Future{Future: p.Future.Field(1, nil)}
}
func (p MonicaModelState_Future) CropPs() CropModuleParameters_Future {
	return CropModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p MonicaModelState_Future) SimPs() SimulationParameters_Future {
	return SimulationParameters_Future{Future: p.Future.Field(3, nil)}
}
func (p MonicaModelState_Future) GroundwaterInformation() MeasuredGroundwaterTableInformation_Future {
	return MeasuredGroundwaterTableInformation_Future{Future: p.Future.Field(4, nil)}
}
func (p MonicaModelState_Future) SoilColumn() SoilColumnState_Future {
	return SoilColumnState_Future{Future: p.Future.Field(5, nil)}
}
func (p MonicaModelState_Future) SoilTemperature() SoilTemperatureModuleState_Future {
	return SoilTemperatureModuleState_Future{Future: p.Future.Field(6, nil)}
}
func (p MonicaModelState_Future) SoilMoisture() SoilMoistureModuleState_Future {
	return SoilMoistureModuleState_Future{Future: p.Future.Field(7, nil)}
}
func (p MonicaModelState_Future) SoilOrganic() SoilOrganicModuleState_Future {
	return SoilOrganicModuleState_Future{Future: p.Future.Field(8, nil)}
}
func (p MonicaModelState_Future) SoilTransport() SoilTransportModuleState_Future {
	return SoilTransportModuleState_Future{Future: p.Future.Field(9, nil)}
}
func (p MonicaModelState_Future) CurrentCropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(10, nil)}
}
func (p MonicaModelState_Future) CurrentStepDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(11, nil)}
}

type MonicaModelState_ACDToValue capnp.Struct

// MonicaModelState_ACDToValue_TypeID is the unique identifier for the type MonicaModelState_ACDToValue.
const MonicaModelState_ACDToValue_TypeID = 0x98e203c76f83d365

func NewMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func NewRootMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func ReadRootMonicaModelState_ACDToValue(msg *capnp.Message) (MonicaModelState_ACDToValue, error) {
	root, err := msg.Root()
	return MonicaModelState_ACDToValue(root.Struct()), err
}

func (s MonicaModelState_ACDToValue) String() string {
	str, _ := text.Marshal(0x98e203c76f83d365, capnp.Struct(s))
	return str
}

func (s MonicaModelState_ACDToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState_ACDToValue) DecodeFromPtr(p capnp.Ptr) MonicaModelState_ACDToValue {
	return MonicaModelState_ACDToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState_ACDToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState_ACDToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState_ACDToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState_ACDToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState_ACDToValue) Acd() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState_ACDToValue) SetAcd(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s MonicaModelState_ACDToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState_ACDToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// MonicaModelState_ACDToValue_List is a list of MonicaModelState_ACDToValue.
type MonicaModelState_ACDToValue_List = capnp.StructList[MonicaModelState_ACDToValue]

// NewMonicaModelState_ACDToValue creates a new list of MonicaModelState_ACDToValue.
func NewMonicaModelState_ACDToValue_List(s *capnp.Segment, sz int32) (MonicaModelState_ACDToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MonicaModelState_ACDToValue](l), err
}

// MonicaModelState_ACDToValue_Future is a wrapper for a MonicaModelState_ACDToValue promised by a client call.
type MonicaModelState_ACDToValue_Future struct{ *capnp.Future }

func (f MonicaModelState_ACDToValue_Future) Struct() (MonicaModelState_ACDToValue, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState_ACDToValue(p.Struct()), err
}

type CropModuleState capnp.Struct

// CropModuleState_TypeID is the unique identifier for the type CropModuleState.
const CropModuleState_TypeID = 0x811d54ac7debc21e

func NewCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func NewRootCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func ReadRootCropModuleState(msg *capnp.Message) (CropModuleState, error) {
	root, err := msg.Root()
	return CropModuleState(root.Struct()), err
}

func (s CropModuleState) String() string {
	str, _ := text.Marshal(0x811d54ac7debc21e, capnp.Struct(s))
	return str
}

func (s CropModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleState) DecodeFromPtr(p capnp.Ptr) CropModuleState {
	return CropModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleState) FrostKillOn() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CropModuleState) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CropModuleState) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(47)
	return SpeciesParameters(p.Struct()), err
}

func (s CropModuleState) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(47)
}

func (s CropModuleState) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(47, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(47, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(48)
	return CultivarParameters(p.Struct()), err
}

func (s CropModuleState) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(48)
}

func (s CropModuleState) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(48, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(48, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(49)
	return CropResidueParameters(p.Struct()), err
}

func (s CropModuleState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(49)
}

func (s CropModuleState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(49, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(49, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) IsWinterCrop() bool {
	return capnp.Struct(s).Bit(7285)
}

func (s CropModuleState) SetIsWinterCrop(v bool) {
	capnp.Struct(s).SetBit(7285, v)
}

func (s CropModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleState) SetAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleState) SetAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleState) PcAbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropModuleState) SetPcAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPcAbovegroundOrgan sets the pcAbovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CropModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleState) PcAssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropModuleState) SetPcAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPcAssimilatePartitioningCoeff sets the pcAssimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcAssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleState) SetPcAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleState) Assimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleState) SetAssimilates(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleState) AssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleState) SetAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleState) AstronomicDayLenght() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleState) SetAstronomicDayLenght(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleState) PcBaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropModuleState) SetPcBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPcBaseDaylength sets the pcBaseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropModuleState) SetPcBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPcBaseTemperature sets the pcBaseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleState) SetPcBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleState) SetBelowgroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CropModuleState) SetBelowgroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CropModuleState) PcCarboxylationPathway() int64 {
	return int64(capnp.Struct(s).Uint64(128))
}

func (s CropModuleState) SetPcCarboxylationPathway(v int64) {
	capnp.Struct(s).SetUint64(128, uint64(v))
}

func (s CropModuleState) ClearDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s CropModuleState) SetClearDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s CropModuleState) PcCo2Method() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 3
}

func (s CropModuleState) SetPcCo2Method(v uint8) {
	capnp.Struct(s).SetUint8(1, v^3)
}

func (s CropModuleState) CriticalNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s CropModuleState) SetCriticalNConcentration(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s CropModuleState) PcCriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropModuleState) SetPcCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewPcCriticalOxygenContent sets the pcCriticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcCriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CropModuleState) SetPcCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CropModuleState) CropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CropModuleState) SetCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CropModuleState) CropFrostRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropFrostRedux(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeatRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropHeatRedux(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s CropModuleState) SetCropHeight(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s CropModuleState) SetPcCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s CropModuleState) SetPcCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s CropModuleState) PcCropName() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s CropModuleState) HasPcCropName() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropModuleState) PcCropNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s CropModuleState) SetPcCropName(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s CropModuleState) CropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s CropModuleState) SetCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s CropModuleState) CropNRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropNRedux(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcCropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s CropModuleState) SetPcCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s CropModuleState) CropWaterUptake() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCropWaterUptake() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropModuleState) SetCropWaterUptake(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCropWaterUptake sets the cropWaterUptake field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCropWaterUptake(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCurrentTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropModuleState) SetCurrentTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCurrentTemperatureSum sets the currentTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCurrentTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s CropModuleState) SetCurrentTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s CropModuleState) CurrentTotalTemperatureSumRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s CropModuleState) SetCurrentTotalTemperatureSumRoot(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s CropModuleState) PcCuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s CropModuleState) SetPcCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s CropModuleState) DaylengthFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s CropModuleState) SetDaylengthFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s CropModuleState) PcDaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropModuleState) SetPcDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPcDaylengthRequirement sets the pcDaylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CropModuleState) DaysAfterBeginFlowering() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s CropModuleState) SetDaysAfterBeginFlowering(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s CropModuleState) Declination() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s CropModuleState) SetDeclination(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s CropModuleState) PcDefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s CropModuleState) SetPcDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s CropModuleState) VmDepthGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s CropModuleState) SetVmDepthGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s CropModuleState) PcDevelopmentAccelerationByNitrogenStress() uint64 {
	return capnp.Struct(s).Uint64(272)
}

func (s CropModuleState) SetPcDevelopmentAccelerationByNitrogenStress(v uint64) {
	capnp.Struct(s).SetUint64(272, v)
}

func (s CropModuleState) DevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(280)
}

func (s CropModuleState) SetDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(280, v)
}

func (s CropModuleState) NoOfCropSteps() uint16 {
	return capnp.Struct(s).Uint16(282)
}

func (s CropModuleState) SetNoOfCropSteps(v uint16) {
	capnp.Struct(s).SetUint16(282, v)
}

func (s CropModuleState) DroughtImpactOnFertility() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetDroughtImpactOnFertility(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcDroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s CropModuleState) SetPcDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s CropModuleState) PcDroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropModuleState) SetPcDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewPcDroughtStressThreshold sets the pcDroughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcEmergenceFloodingControlOn() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CropModuleState) SetPcEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CropModuleState) PcEmergenceMoistureControlOn() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CropModuleState) SetPcEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CropModuleState) PcEndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s CropModuleState) SetPcEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s CropModuleState) EffectiveDayLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s CropModuleState) SetEffectiveDayLength(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s CropModuleState) ErrorStatus() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CropModuleState) SetErrorStatus(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CropModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s CropModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s CropModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s CropModuleState) EvaporatedFromIntercept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320))
}

func (s CropModuleState) SetEvaporatedFromIntercept(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v))
}

func (s CropModuleState) ExtraterrestrialRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(328))
}

func (s CropModuleState) SetExtraterrestrialRadiation(v float64) {
	capnp.Struct(s).SetUint64(328, math.Float64bits(v))
}

func (s CropModuleState) PcFieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(336))
}

func (s CropModuleState) SetPcFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(336, math.Float64bits(v))
}

func (s CropModuleState) FinalDevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(284)
}

func (s CropModuleState) SetFinalDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(284, v)
}

func (s CropModuleState) FixedN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(344))
}

func (s CropModuleState) SetFixedN(v float64) {
	capnp.Struct(s).SetUint64(344, math.Float64bits(v))
}

func (s CropModuleState) PcFrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(352))
}

func (s CropModuleState) SetPcFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(352, math.Float64bits(v))
}

func (s CropModuleState) PcFrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(360))
}

func (s CropModuleState) SetPcFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(360, math.Float64bits(v))
}

func (s CropModuleState) GlobalRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(368))
}

func (s CropModuleState) SetGlobalRadiation(v float64) {
	capnp.Struct(s).SetUint64(368, math.Float64bits(v))
}

func (s CropModuleState) GreenAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(376))
}

func (s CropModuleState) SetGreenAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(376, math.Float64bits(v))
}

func (s CropModuleState) GrossAssimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(384))
}

func (s CropModuleState) SetGrossAssimilates(v float64) {
	capnp.Struct(s).SetUint64(384, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(392))
}

func (s CropModuleState) SetGrossPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(392, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(400))
}

func (s CropModuleState) SetGrossPhotosynthesisMol(v float64) {
	capnp.Struct(s).SetUint64(400, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisReferenceMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(408))
}

func (s CropModuleState) SetGrossPhotosynthesisReferenceMol(v float64) {
	capnp.Struct(s).SetUint64(408, math.Float64bits(v))
}

func (s CropModuleState) GrossPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(416))
}

func (s CropModuleState) SetGrossPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(416, math.Float64bits(v))
}

func (s CropModuleState) GrowthCycleEnded() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CropModuleState) SetGrowthCycleEnded(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CropModuleState) GrowthRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(424))
}

func (s CropModuleState) SetGrowthRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(424, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(432))
}

func (s CropModuleState) SetPcHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(432, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(440))
}

func (s CropModuleState) SetPcHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(440, math.Float64bits(v))
}

func (s CropModuleState) VsHeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(448))
}

func (s CropModuleState) SetVsHeightNN(v float64) {
	capnp.Struct(s).SetUint64(448, math.Float64bits(v))
}

func (s CropModuleState) PcInitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(456))
}

func (s CropModuleState) SetPcInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(456, math.Float64bits(v))
}

func (s CropModuleState) PcInitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CropModuleState) SetPcInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPcInitialOrganBiomass sets the pcInitialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcInitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(464))
}

func (s CropModuleState) SetPcInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(464, math.Float64bits(v))
}

func (s CropModuleState) InterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(472))
}

func (s CropModuleState) SetInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(472, math.Float64bits(v))
}

func (s CropModuleState) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(480) ^ 0x3fe3333333333333)
}

func (s CropModuleState) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(480, math.Float64bits(v)^0x3fe3333333333333)
}

func (s CropModuleState) LeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(488))
}

func (s CropModuleState) SetLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(488, math.Float64bits(v))
}

func (s CropModuleState) SunlitLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasSunlitLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CropModuleState) SetSunlitLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewSunlitLeafAreaIndex sets the sunlitLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewSunlitLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CropModuleState) ShadedLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasShadedLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CropModuleState) SetShadedLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewShadedLeafAreaIndex sets the shadedLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewShadedLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcLowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(496))
}

func (s CropModuleState) SetPcLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(496, math.Float64bits(v))
}

func (s CropModuleState) PcLimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(504))
}

func (s CropModuleState) SetPcLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(504, math.Float64bits(v))
}

func (s CropModuleState) Lt50() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(512) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50(v float64) {
	capnp.Struct(s).SetUint64(512, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) Lt50m() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1240) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50m(v float64) {
	capnp.Struct(s).SetUint64(1240, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) PcLt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(520))
}

func (s CropModuleState) SetPcLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(520, math.Float64bits(v))
}

func (s CropModuleState) PcLuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(528))
}

func (s CropModuleState) SetPcLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(528, math.Float64bits(v))
}

func (s CropModuleState) MaintenanceRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(536))
}

func (s CropModuleState) SetMaintenanceRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(536, math.Float64bits(v))
}

func (s CropModuleState) PcMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(544))
}

func (s CropModuleState) SetPcMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(544, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(552))
}

func (s CropModuleState) SetPcMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(552, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(560))
}

func (s CropModuleState) SetPcMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(560, math.Float64bits(v))
}

func (s CropModuleState) MaxNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(568))
}

func (s CropModuleState) SetMaxNUptake(v float64) {
	capnp.Struct(s).SetUint64(568, math.Float64bits(v))
}

func (s CropModuleState) PcMaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(576))
}

func (s CropModuleState) SetPcMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(576, math.Float64bits(v))
}

func (s CropModuleState) PcMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(584))
}

func (s CropModuleState) SetPcMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(584, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(592))
}

func (s CropModuleState) SetPcMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(592, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(600))
}

func (s CropModuleState) SetPcMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(600, math.Float64bits(v))
}

func (s CropModuleState) PcOptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(608))
}

func (s CropModuleState) SetPcOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(608, math.Float64bits(v))
}

func (s CropModuleState) PcMaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(616))
}

func (s CropModuleState) SetPcMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(616, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(624))
}

func (s CropModuleState) SetPcMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(624, math.Float64bits(v))
}

func (s CropModuleState) NetMaintenanceRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(632))
}

func (s CropModuleState) SetNetMaintenanceRespiration(v float64) {
	capnp.Struct(s).SetUint64(632, math.Float64bits(v))
}

func (s CropModuleState) NetPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(640))
}

func (s CropModuleState) SetNetPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(640, math.Float64bits(v))
}

func (s CropModuleState) NetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(648))
}

func (s CropModuleState) SetNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(648, math.Float64bits(v))
}

func (s CropModuleState) NetPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(656))
}

func (s CropModuleState) SetNetPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(656, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(664))
}

func (s CropModuleState) SetPcNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(664, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(672))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(672, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(680))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(680, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(688))
}

func (s CropModuleState) SetPcNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(688, math.Float64bits(v))
}

func (s CropModuleState) NContentDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(696))
}

func (s CropModuleState) SetNContentDeficit(v float64) {
	capnp.Struct(s).SetUint64(696, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(704))
}

func (s CropModuleState) SetPcNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(704, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(712))
}

func (s CropModuleState) SetPcNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(712, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(720))
}

func (s CropModuleState) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(720, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRootOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(728))
}

func (s CropModuleState) SetNConcentrationRootOld(v float64) {
	capnp.Struct(s).SetUint64(728, math.Float64bits(v))
}

func (s CropModuleState) PcNitrogenResponseOn() bool {
	return capnp.Struct(s).Bit(6)
}

func (s CropModuleState) SetPcNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s CropModuleState) PcNumberOfDevelopmentalStages() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(736))
}

func (s CropModuleState) SetPcNumberOfDevelopmentalStages(v float64) {
	capnp.Struct(s).SetUint64(736, math.Float64bits(v))
}

func (s CropModuleState) PcNumberOfOrgans() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(744))
}

func (s CropModuleState) SetPcNumberOfOrgans(v float64) {
	capnp.Struct(s).SetUint64(744, math.Float64bits(v))
}

func (s CropModuleState) NUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CropModuleState) SetNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewNUptakeFromLayer sets the nUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s CropModuleState) SetPcOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPcOptimumTemperature sets the pcOptimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s CropModuleState) SetOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewOrganBiomass sets the organBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganDeadBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganDeadBiomass() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s CropModuleState) SetOrganDeadBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewOrganDeadBiomass sets the organDeadBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganDeadBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGreenBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGreenBiomass() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s CropModuleState) SetOrganGreenBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewOrganGreenBiomass sets the organGreenBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGreenBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGrowthIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGrowthIncrement() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s CropModuleState) SetOrganGrowthIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewOrganGrowthIncrement sets the organGrowthIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGrowthIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s CropModuleState) SetPcOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewPcOrganGrowthRespiration sets the pcOrganGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s CropModuleState) SetPcOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewPcOrganIdsForPrimaryYield sets the pcOrganIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(22)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(22)
}

func (s CropModuleState) SetPcOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(22, v.ToPtr())
}

// NewPcOrganIdsForSecondaryYield sets the pcOrganIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(22, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(23)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(23)
}

func (s CropModuleState) SetPcOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(23, v.ToPtr())
}

// NewPcOrganIdsForCutting sets the pcOrganIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(23, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(24)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(24)
}

func (s CropModuleState) SetPcOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(24, v.ToPtr())
}

// NewPcOrganMaintenanceRespiration sets the pcOrganMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(24, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganSenescenceIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(25)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganSenescenceIncrement() bool {
	return capnp.Struct(s).HasPtr(25)
}

func (s CropModuleState) SetOrganSenescenceIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(25, v.ToPtr())
}

// NewOrganSenescenceIncrement sets the organSenescenceIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganSenescenceIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(25, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(26)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(26)
}

func (s CropModuleState) SetPcOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(26, v.ToPtr())
}

// NewPcOrganSenescenceRate sets the pcOrganSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(26, l.ToPtr())
	return l, err
}
func (s CropModuleState) OvercastDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(752))
}

func (s CropModuleState) SetOvercastDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(752, math.Float64bits(v))
}

func (s CropModuleState) OxygenDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(760))
}

func (s CropModuleState) SetOxygenDeficit(v float64) {
	capnp.Struct(s).SetUint64(760, math.Float64bits(v))
}

func (s CropModuleState) PcPartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(768))
}

func (s CropModuleState) SetPcPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(768, math.Float64bits(v))
}

func (s CropModuleState) PcPerennial() bool {
	return capnp.Struct(s).Bit(7)
}

func (s CropModuleState) SetPcPerennial(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s CropModuleState) PhotoperiodicDaylength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(776))
}

func (s CropModuleState) SetPhotoperiodicDaylength(v float64) {
	capnp.Struct(s).SetUint64(776, math.Float64bits(v))
}

func (s CropModuleState) PhotActRadiationMean() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(784))
}

func (s CropModuleState) SetPhotActRadiationMean(v float64) {
	capnp.Struct(s).SetUint64(784, math.Float64bits(v))
}

func (s CropModuleState) PcPlantDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(792))
}

func (s CropModuleState) SetPcPlantDensity(v float64) {
	capnp.Struct(s).SetUint64(792, math.Float64bits(v))
}

func (s CropModuleState) PotentialTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(800))
}

func (s CropModuleState) SetPotentialTranspiration(v float64) {
	capnp.Struct(s).SetUint64(800, math.Float64bits(v))
}

func (s CropModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(808))
}

func (s CropModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(808, math.Float64bits(v))
}

func (s CropModuleState) RelativeTotalDevelopment() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(816))
}

func (s CropModuleState) SetRelativeTotalDevelopment(v float64) {
	capnp.Struct(s).SetUint64(816, math.Float64bits(v))
}

func (s CropModuleState) RemainingEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(824))
}

func (s CropModuleState) SetRemainingEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(824, math.Float64bits(v))
}

func (s CropModuleState) ReserveAssimilatePool() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(832))
}

func (s CropModuleState) SetReserveAssimilatePool(v float64) {
	capnp.Struct(s).SetUint64(832, math.Float64bits(v))
}

func (s CropModuleState) PcResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(840))
}

func (s CropModuleState) SetPcResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(840, math.Float64bits(v))
}

func (s CropModuleState) PcRespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(848))
}

func (s CropModuleState) SetPcRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(848, math.Float64bits(v))
}

func (s CropModuleState) RootBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(856))
}

func (s CropModuleState) SetRootBiomass(v float64) {
	capnp.Struct(s).SetUint64(856, math.Float64bits(v))
}

func (s CropModuleState) RootBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(864))
}

func (s CropModuleState) SetRootBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(864, math.Float64bits(v))
}

func (s CropModuleState) RootDensity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(27)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDensity() bool {
	return capnp.Struct(s).HasPtr(27)
}

func (s CropModuleState) SetRootDensity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(27, v.ToPtr())
}

// NewRootDensity sets the rootDensity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDensity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(27, l.ToPtr())
	return l, err
}
func (s CropModuleState) RootDiameter() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(28)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDiameter() bool {
	return capnp.Struct(s).HasPtr(28)
}

func (s CropModuleState) SetRootDiameter(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(28, v.ToPtr())
}

// NewRootDiameter sets the rootDiameter field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDiameter(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(28, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(872))
}

func (s CropModuleState) SetPcRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(872, math.Float64bits(v))
}

func (s CropModuleState) RootEffectivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(29)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootEffectivity() bool {
	return capnp.Struct(s).HasPtr(29)
}

func (s CropModuleState) SetRootEffectivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(29, v.ToPtr())
}

// NewRootEffectivity sets the rootEffectivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootEffectivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(29, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(880))
}

func (s CropModuleState) SetPcRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(880, math.Float64bits(v))
}

func (s CropModuleState) PcRootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(888))
}

func (s CropModuleState) SetPcRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(888, math.Float64bits(v))
}

func (s CropModuleState) RootingDepth() uint16 {
	return capnp.Struct(s).Uint16(286)
}

func (s CropModuleState) SetRootingDepth(v uint16) {
	capnp.Struct(s).SetUint16(286, v)
}

func (s CropModuleState) RootingDepthM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(896))
}

func (s CropModuleState) SetRootingDepthM(v float64) {
	capnp.Struct(s).SetUint64(896, math.Float64bits(v))
}

func (s CropModuleState) RootingZone() uint16 {
	return capnp.Struct(s).Uint16(904)
}

func (s CropModuleState) SetRootingZone(v uint16) {
	capnp.Struct(s).SetUint16(904, v)
}

func (s CropModuleState) PcRootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(912))
}

func (s CropModuleState) SetPcRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(912, math.Float64bits(v))
}

func (s CropModuleState) VmSaturationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(920))
}

func (s CropModuleState) SetVmSaturationDeficit(v float64) {
	capnp.Struct(s).SetUint64(920, math.Float64bits(v))
}

func (s CropModuleState) SoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(928))
}

func (s CropModuleState) SetSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(928, math.Float64bits(v))
}

func (s CropModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(30)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(30)
}

func (s CropModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(30, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(30, l.ToPtr())
	return l, err
}
func (s CropModuleState) SoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(936))
}

func (s CropModuleState) SetSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(936, math.Float64bits(v))
}

func (s CropModuleState) VsSoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(944))
}

func (s CropModuleState) SetVsSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(944, math.Float64bits(v))
}

func (s CropModuleState) PcSpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(31)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(31)
}

func (s CropModuleState) SetPcSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(31, v.ToPtr())
}

// NewPcSpecificLeafArea sets the pcSpecificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(31, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcSpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(952))
}

func (s CropModuleState) SetPcSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(952, math.Float64bits(v))
}

func (s CropModuleState) PcStageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(906)
}

func (s CropModuleState) SetPcStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(906, v)
}

func (s CropModuleState) PcStageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(960))
}

func (s CropModuleState) SetPcStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(960, math.Float64bits(v))
}

func (s CropModuleState) PcStageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(968))
}

func (s CropModuleState) SetPcStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(968, math.Float64bits(v))
}

func (s CropModuleState) PcStageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(32)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(32)
}

func (s CropModuleState) SetPcStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(32, v.ToPtr())
}

// NewPcStageMaxRootNConcentration sets the pcStageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(32, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(33)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(33)
}

func (s CropModuleState) SetPcStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(33, v.ToPtr())
}

// NewPcStageKcFactor sets the pcStageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(33, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(34)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(34)
}

func (s CropModuleState) SetPcStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(34, v.ToPtr())
}

// NewPcStageTemperatureSum sets the pcStageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(34, l.ToPtr())
	return l, err
}
func (s CropModuleState) StomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(976))
}

func (s CropModuleState) SetStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(976, math.Float64bits(v))
}

func (s CropModuleState) PcStorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(35)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(35)
}

func (s CropModuleState) SetPcStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(35, v.ToPtr())
}

// NewPcStorageOrgan sets the pcStorageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(35, l.ToPtr())
	return l, err
}
func (s CropModuleState) StorageOrgan() uint16 {
	return capnp.Struct(s).Uint16(908) ^ 4
}

func (s CropModuleState) SetStorageOrgan(v uint16) {
	capnp.Struct(s).SetUint16(908, v^4)
}

func (s CropModuleState) TargetNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(984))
}

func (s CropModuleState) SetTargetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(984, math.Float64bits(v))
}

func (s CropModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(992) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(992, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) TimeUnderAnoxia() uint64 {
	return capnp.Struct(s).Uint64(1000)
}

func (s CropModuleState) SetTimeUnderAnoxia(v uint64) {
	capnp.Struct(s).SetUint64(1000, v)
}

func (s CropModuleState) VsTortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1008))
}

func (s CropModuleState) SetVsTortuosity(v float64) {
	capnp.Struct(s).SetUint64(1008, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1016))
}

func (s CropModuleState) SetTotalBiomass(v float64) {
	capnp.Struct(s).SetUint64(1016, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomassNContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1024))
}

func (s CropModuleState) SetTotalBiomassNContent(v float64) {
	capnp.Struct(s).SetUint64(1024, math.Float64bits(v))
}

func (s CropModuleState) TotalCropHeatImpact() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1032))
}

func (s CropModuleState) SetTotalCropHeatImpact(v float64) {
	capnp.Struct(s).SetUint64(1032, math.Float64bits(v))
}

func (s CropModuleState) TotalNInput() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1040))
}

func (s CropModuleState) SetTotalNInput(v float64) {
	capnp.Struct(s).SetUint64(1040, math.Float64bits(v))
}

func (s CropModuleState) TotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1048))
}

func (s CropModuleState) SetTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1048, math.Float64bits(v))
}

func (s CropModuleState) TotalRespired() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1056))
}

func (s CropModuleState) SetTotalRespired(v float64) {
	capnp.Struct(s).SetUint64(1056, math.Float64bits(v))
}

func (s CropModuleState) Respiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1064))
}

func (s CropModuleState) SetRespiration(v float64) {
	capnp.Struct(s).SetUint64(1064, math.Float64bits(v))
}

func (s CropModuleState) SumTotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1072))
}

func (s CropModuleState) SetSumTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1072, math.Float64bits(v))
}

func (s CropModuleState) TotalRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1080))
}

func (s CropModuleState) SetTotalRootLength(v float64) {
	capnp.Struct(s).SetUint64(1080, math.Float64bits(v))
}

func (s CropModuleState) TotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1088))
}

func (s CropModuleState) SetTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(1088, math.Float64bits(v))
}

func (s CropModuleState) TemperatureSumToFlowering() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1096))
}

func (s CropModuleState) SetTemperatureSumToFlowering(v float64) {
	capnp.Struct(s).SetUint64(1096, math.Float64bits(v))
}

func (s CropModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(36)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(36)
}

func (s CropModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(36, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(36, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(37)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspirationRedux() bool {
	return capnp.Struct(s).HasPtr(37)
}

func (s CropModuleState) SetTranspirationRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(37, v.ToPtr())
}

// NewTranspirationRedux sets the transpirationRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspirationRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(37, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1104) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(1104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) VernalisationDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1112))
}

func (s CropModuleState) SetVernalisationDays(v float64) {
	capnp.Struct(s).SetUint64(1112, math.Float64bits(v))
}

func (s CropModuleState) VernalisationFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1120))
}

func (s CropModuleState) SetVernalisationFactor(v float64) {
	capnp.Struct(s).SetUint64(1120, math.Float64bits(v))
}

func (s CropModuleState) PcVernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(38)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(38)
}

func (s CropModuleState) SetPcVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(38, v.ToPtr())
}

// NewPcVernalisationRequirement sets the pcVernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(38, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcWaterDeficitResponseOn() bool {
	return capnp.Struct(s).Bit(7280)
}

func (s CropModuleState) SetPcWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(7280, v)
}

func (s CropModuleState) DyingOut() bool {
	return capnp.Struct(s).Bit(7281)
}

func (s CropModuleState) SetDyingOut(v bool) {
	capnp.Struct(s).SetBit(7281, v)
}

func (s CropModuleState) AccumulatedETa() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1152))
}

func (s CropModuleState) SetAccumulatedETa(v float64) {
	capnp.Struct(s).SetUint64(1152, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1160))
}

func (s CropModuleState) SetAccumulatedTranspiration(v float64) {
	capnp.Struct(s).SetUint64(1160, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedPrimaryCropYield() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1168))
}

func (s CropModuleState) SetAccumulatedPrimaryCropYield(v float64) {
	capnp.Struct(s).SetUint64(1168, math.Float64bits(v))
}

func (s CropModuleState) SumExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1176))
}

func (s CropModuleState) SetSumExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1176, math.Float64bits(v))
}

func (s CropModuleState) ExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1184))
}

func (s CropModuleState) SetExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1184, math.Float64bits(v))
}

func (s CropModuleState) SumResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1192))
}

func (s CropModuleState) SetSumResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1192, math.Float64bits(v))
}

func (s CropModuleState) ResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1200))
}

func (s CropModuleState) SetResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1200, math.Float64bits(v))
}

func (s CropModuleState) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(1208)
}

func (s CropModuleState) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(1208, v)
}

func (s CropModuleState) VsMaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1216))
}

func (s CropModuleState) SetVsMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(1216, math.Float64bits(v))
}

func (s CropModuleState) VsImpenetrableLayerDept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1224))
}

func (s CropModuleState) SetVsImpenetrableLayerDept(v float64) {
	capnp.Struct(s).SetUint64(1224, math.Float64bits(v))
}

func (s CropModuleState) AnthesisDay() int16 {
	return int16(capnp.Struct(s).Uint16(1210) ^ 65535)
}

func (s CropModuleState) SetAnthesisDay(v int16) {
	capnp.Struct(s).SetUint16(1210, uint16(v)^65535)
}

func (s CropModuleState) MaturityDay() int16 {
	return int16(capnp.Struct(s).Uint16(1212) ^ 65535)
}

func (s CropModuleState) SetMaturityDay(v int16) {
	capnp.Struct(s).SetUint16(1212, uint16(v)^65535)
}

func (s CropModuleState) MaturityReached() bool {
	return capnp.Struct(s).Bit(7282)
}

func (s CropModuleState) SetMaturityReached(v bool) {
	capnp.Struct(s).SetBit(7282, v)
}

func (s CropModuleState) StepSize24() uint16 {
	return capnp.Struct(s).Uint16(1214) ^ 24
}

func (s CropModuleState) SetStepSize24(v uint16) {
	capnp.Struct(s).SetUint16(1214, v^24)
}

func (s CropModuleState) StepSize240() uint16 {
	return capnp.Struct(s).Uint16(1232) ^ 240
}

func (s CropModuleState) SetStepSize240(v uint16) {
	capnp.Struct(s).SetUint16(1232, v^240)
}

func (s CropModuleState) Rad24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(39)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad24() bool {
	return capnp.Struct(s).HasPtr(39)
}

func (s CropModuleState) SetRad24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(39, v.ToPtr())
}

// NewRad24 sets the rad24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(39, l.ToPtr())
	return l, err
}
func (s CropModuleState) Rad240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(40)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad240() bool {
	return capnp.Struct(s).HasPtr(40)
}

func (s CropModuleState) SetRad240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(40, v.ToPtr())
}

// NewRad240 sets the rad240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(40, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(41)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol24() bool {
	return capnp.Struct(s).HasPtr(41)
}

func (s CropModuleState) SetTfol24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(41, v.ToPtr())
}

// NewTfol24 sets the tfol24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(41, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(42)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol240() bool {
	return capnp.Struct(s).HasPtr(42)
}

func (s CropModuleState) SetTfol240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(42, v.ToPtr())
}

// NewTfol240 sets the tfol240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(42, l.ToPtr())
	return l, err
}
func (s CropModuleState) Index24() uint16 {
	return capnp.Struct(s).Uint16(1234)
}

func (s CropModuleState) SetIndex24(v uint16) {
	capnp.Struct(s).SetUint16(1234, v)
}

func (s CropModuleState) Index240() uint16 {
	return capnp.Struct(s).Uint16(1236)
}

func (s CropModuleState) SetIndex240(v uint16) {
	capnp.Struct(s).SetUint16(1236, v)
}

func (s CropModuleState) Full24() bool {
	return capnp.Struct(s).Bit(7283)
}

func (s CropModuleState) SetFull24(v bool) {
	capnp.Struct(s).SetBit(7283, v)
}

func (s CropModuleState) Full240() bool {
	return capnp.Struct(s).Bit(7284)
}

func (s CropModuleState) SetFull240(v bool) {
	capnp.Struct(s).SetBit(7284, v)
}

func (s CropModuleState) GuentherEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(43)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasGuentherEmissions() bool {
	return capnp.Struct(s).HasPtr(43)
}

func (s CropModuleState) SetGuentherEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(43, capnp.Struct(v).ToPtr())
}

// NewGuentherEmissions sets the guentherEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewGuentherEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(43, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) JjvEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(44)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasJjvEmissions() bool {
	return capnp.Struct(s).HasPtr(44)
}

func (s CropModuleState) SetJjvEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(44, capnp.Struct(v).ToPtr())
}

// NewJjvEmissions sets the jjvEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewJjvEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(44, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) VocSpecies() (Voc_SpeciesData, error) {
	p, err := capnp.Struct(s).Ptr(45)
	return Voc_SpeciesData(p.Struct()), err
}

func (s CropModuleState) HasVocSpecies() bool {
	return capnp.Struct(s).HasPtr(45)
}

func (s CropModuleState) SetVocSpecies(v Voc_SpeciesData) error {
	return capnp.Struct(s).SetPtr(45, capnp.Struct(v).ToPtr())
}

// NewVocSpecies sets the vocSpecies field to a newly
// allocated Voc_SpeciesData struct, preferring placement in s's segment.
func (s CropModuleState) NewVocSpecies() (Voc_SpeciesData, error) {
	ss, err := NewVoc_SpeciesData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_SpeciesData{}, err
	}
	err = capnp.Struct(s).SetPtr(45, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CropPhotosynthesisResults() (Voc_CPData, error) {
	p, err := capnp.Struct(s).Ptr(46)
	return Voc_CPData(p.Struct()), err
}

func (s CropModuleState) HasCropPhotosynthesisResults() bool {
	return capnp.Struct(s).HasPtr(46)
}

func (s CropModuleState) SetCropPhotosynthesisResults(v Voc_CPData) error {
	return capnp.Struct(s).SetPtr(46, capnp.Struct(v).ToPtr())
}

// NewCropPhotosynthesisResults sets the cropPhotosynthesisResults field to a newly
// allocated Voc_CPData struct, preferring placement in s's segment.
func (s CropModuleState) NewCropPhotosynthesisResults() (Voc_CPData, error) {
	ss, err := NewVoc_CPData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_CPData{}, err
	}
	err = capnp.Struct(s).SetPtr(46, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) O3ShortTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1144) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3ShortTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1144, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3LongTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1136) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3LongTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1136, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3Senescence() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1128) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3Senescence(v float64) {
	capnp.Struct(s).SetUint64(1128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3SumUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleState) SetO3SumUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleState) O3WStomatalClosure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3WStomatalClosure(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) AssimilatePartCoeffsReduced() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CropModuleState) SetAssimilatePartCoeffsReduced(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CropModuleState) Ktkc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleState) SetKtkc(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleState) Ktko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleState) SetKtko(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleState) StemElongationEventFired() bool {
	return capnp.Struct(s).Bit(7286)
}

func (s CropModuleState) SetStemElongationEventFired(v bool) {
	capnp.Struct(s).SetBit(7286, v)
}

// CropModuleState_List is a list of CropModuleState.
type CropModuleState_List = capnp.StructList[CropModuleState]

// NewCropModuleState creates a new list of CropModuleState.
func NewCropModuleState_List(s *capnp.Segment, sz int32) (CropModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50}, sz)
	return capnp.StructList[CropModuleState](l), err
}

// CropModuleState_Future is a wrapper for a CropModuleState promised by a client call.
type CropModuleState_Future struct{ *capnp.Future }

func (f CropModuleState_Future) Struct() (CropModuleState, error) {
	p, err := f.Future.Ptr()
	return CropModuleState(p.Struct()), err
}
func (p CropModuleState_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(47, nil)}
}
func (p CropModuleState_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(48, nil)}
}
func (p CropModuleState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(49, nil)}
}
func (p CropModuleState_Future) GuentherEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(43, nil)}
}
func (p CropModuleState_Future) JjvEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(44, nil)}
}
func (p CropModuleState_Future) VocSpecies() Voc_SpeciesData_Future {
	return Voc_SpeciesData_Future{Future: p.Future.Field(45, nil)}
}
func (p CropModuleState_Future) CropPhotosynthesisResults() Voc_CPData_Future {
	return Voc_CPData_Future{Future: p.Future.Field(46, nil)}
}

type SnowModuleState capnp.Struct

// SnowModuleState_TypeID is the unique identifier for the type SnowModuleState.
const SnowModuleState_TypeID = 0xa4da01d10b3b6acd

func NewSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func NewRootSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func ReadRootSnowModuleState(msg *capnp.Message) (SnowModuleState, error) {
	root, err := msg.Root()
	return SnowModuleState(root.Struct()), err
}

func (s SnowModuleState) String() string {
	str, _ := text.Marshal(0xa4da01d10b3b6acd, capnp.Struct(s))
	return str
}

func (s SnowModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SnowModuleState) DecodeFromPtr(p capnp.Ptr) SnowModuleState {
	return SnowModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SnowModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SnowModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SnowModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SnowModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SnowModuleState) SnowDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SnowModuleState) SetSnowDensity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SnowModuleState) SnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SnowModuleState) SetSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SnowModuleState) FrozenWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SnowModuleState) SetFrozenWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SnowModuleState) LiquidWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SnowModuleState) SetLiquidWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SnowModuleState) WaterToInfiltrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SnowModuleState) SetWaterToInfiltrate(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SnowModuleState) MaxSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SnowModuleState) SetMaxSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SnowModuleState) AccumulatedSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SnowModuleState) SetAccumulatedSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SnowModuleState) SnowmeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SnowModuleState) SetSnowmeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SnowModuleState) SnowAccumulationThresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SnowModuleState) SetSnowAccumulationThresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SnowModuleState) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SnowModuleState) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SnowModuleState) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SnowModuleState) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SnowModuleState) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SnowModuleState) SetRefreezeP1(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SnowModuleState) SetRefreezeP2(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SnowModuleState) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SnowModuleState) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SnowModuleState) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SnowModuleState) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SnowModuleState) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SnowModuleState) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SnowModuleState) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SnowModuleState) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SnowModuleState_List is a list of SnowModuleState.
type SnowModuleState_List = capnp.StructList[SnowModuleState]

// NewSnowModuleState creates a new list of SnowModuleState.
func NewSnowModuleState_List(s *capnp.Segment, sz int32) (SnowModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0}, sz)
	return capnp.StructList[SnowModuleState](l), err
}

// SnowModuleState_Future is a wrapper for a SnowModuleState promised by a client call.
type SnowModuleState_Future struct{ *capnp.Future }

func (f SnowModuleState_Future) Struct() (SnowModuleState, error) {
	p, err := f.Future.Ptr()
	return SnowModuleState(p.Struct()), err
}

type FrostModuleState capnp.Struct

// FrostModuleState_TypeID is the unique identifier for the type FrostModuleState.
const FrostModuleState_TypeID = 0xb4f16ea3144d85a6

func NewFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func NewRootFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func ReadRootFrostModuleState(msg *capnp.Message) (FrostModuleState, error) {
	root, err := msg.Root()
	return FrostModuleState(root.Struct()), err
}

func (s FrostModuleState) String() string {
	str, _ := text.Marshal(0xb4f16ea3144d85a6, capnp.Struct(s))
	return str
}

func (s FrostModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FrostModuleState) DecodeFromPtr(p capnp.Ptr) FrostModuleState {
	return FrostModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FrostModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FrostModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FrostModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FrostModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FrostModuleState) FrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s FrostModuleState) SetFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s FrostModuleState) AccumulatedFrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s FrostModuleState) SetAccumulatedFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s FrostModuleState) NegativeDegreeDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s FrostModuleState) SetNegativeDegreeDays(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s FrostModuleState) ThawDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s FrostModuleState) SetThawDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s FrostModuleState) FrostDays() uint16 {
	return capnp.Struct(s).Uint16(40)
}

func (s FrostModuleState) SetFrostDays(v uint16) {
	capnp.Struct(s).SetUint16(40, v)
}

func (s FrostModuleState) LambdaRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s FrostModuleState) HasLambdaRedux() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FrostModuleState) SetLambdaRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLambdaRedux sets the lambdaRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s FrostModuleState) NewLambdaRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s FrostModuleState) TemperatureUnderSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s FrostModuleState) SetTemperatureUnderSnow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s FrostModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s FrostModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s FrostModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s FrostModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s FrostModuleState) PmHydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s FrostModuleState) SetPmHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// FrostModuleState_List is a list of FrostModuleState.
type FrostModuleState_List = capnp.StructList[FrostModuleState]

// NewFrostModuleState creates a new list of FrostModuleState.
func NewFrostModuleState_List(s *capnp.Segment, sz int32) (FrostModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return capnp.StructList[FrostModuleState](l), err
}

// FrostModuleState_Future is a wrapper for a FrostModuleState promised by a client call.
type FrostModuleState_Future struct{ *capnp.Future }

func (f FrostModuleState_Future) Struct() (FrostModuleState, error) {
	p, err := f.Future.Ptr()
	return FrostModuleState(p.Struct()), err
}

type SoilMoistureModuleState capnp.Struct

// SoilMoistureModuleState_TypeID is the unique identifier for the type SoilMoistureModuleState.
const SoilMoistureModuleState_TypeID = 0xcd05962719bf7ec8

func NewSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func NewRootSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func ReadRootSoilMoistureModuleState(msg *capnp.Message) (SoilMoistureModuleState, error) {
	root, err := msg.Root()
	return SoilMoistureModuleState(root.Struct()), err
}

func (s SoilMoistureModuleState) String() string {
	str, _ := text.Marshal(0xcd05962719bf7ec8, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleState) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleState {
	return SoilMoistureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleState) ModuleParams() (SoilMoistureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilMoistureModuleParameters(p.Struct()), err
}

func (s SoilMoistureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilMoistureModuleState) SetModuleParams(v SoilMoistureModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilMoistureModuleParameters struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewModuleParams() (SoilMoistureModuleParameters, error) {
	ss, err := NewSoilMoistureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(24)
}

func (s SoilMoistureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(24, v)
}

func (s SoilMoistureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(26)
}

func (s SoilMoistureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(26, v)
}

func (s SoilMoistureModuleState) ActualEvaporation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleState) SetActualEvaporation(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleState) SetActualEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleState) AvailableWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasAvailableWater() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilMoistureModuleState) SetAvailableWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAvailableWater sets the availableWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewAvailableWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryRise() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleState) SetCapillaryRise(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleState) CapillaryRiseRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryRiseRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilMoistureModuleState) SetCapillaryRiseRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewCapillaryRiseRate sets the capillaryRiseRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryRiseRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilMoistureModuleState) SetCapillaryWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewCapillaryWater sets the capillaryWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater70() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater70() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilMoistureModuleState) SetCapillaryWater70(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCapillaryWater70 sets the capillaryWater70 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater70(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evaporation() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvaporation() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilMoistureModuleState) SetEvaporation(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEvaporation sets the evaporation field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvaporation(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilMoistureModuleState) SetEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewEvapotranspiration sets the evapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FieldCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasFieldCapacity() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilMoistureModuleState) SetFieldCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewFieldCapacity sets the fieldCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFieldCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleState) SetFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GravitationalWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasGravitationalWater() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilMoistureModuleState) SetGravitationalWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewGravitationalWater sets the gravitationalWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewGravitationalWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) GrossPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleState) SetGrossPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterAdded() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleState) SetGroundwaterAdded(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleState) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(28)
}

func (s SoilMoistureModuleState) SetGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(28, v)
}

func (s SoilMoistureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilMoistureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Infiltration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleState) SetInfiltration(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Interception() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleState) SetInterception(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3fe3333333333333)
}

func (s SoilMoistureModuleState) SetVcKcFactor(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilMoistureModuleState) Lambda() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLambda() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilMoistureModuleState) SetLambda(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewLambda sets the lambda field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLambda(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) LambdaReduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleState) SetLambdaReduced(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleState) LayerThickness() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLayerThickness() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilMoistureModuleState) SetLayerThickness(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewLayerThickness sets the layerThickness field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLayerThickness(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) PmLayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleState) SetPmLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleState) SetPmLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepthLayer() uint16 {
	return capnp.Struct(s).Uint16(30)
}

func (s SoilMoistureModuleState) SetPmLeachingDepthLayer(v uint16) {
	capnp.Struct(s).SetUint16(30, v)
}

func (s SoilMoistureModuleState) VwMaxAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleState) SetVwMaxAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmMaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleState) SetPmMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMeanAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleState) SetVwMeanAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMinAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleState) SetVwMinAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcNetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SoilMoistureModuleState) SetVcNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwNetRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SoilMoistureModuleState) SetVwNetRadiation(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PermanentWiltingPoint() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPermanentWiltingPoint() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilMoistureModuleState) SetPermanentWiltingPoint(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPermanentWiltingPoint sets the permanentWiltingPoint field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPermanentWiltingPoint(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcPercentageSoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SoilMoistureModuleState) SetVcPercentageSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilMoistureModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SoilMoistureModuleState) SetVwPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4018000000000000)
}

func (s SoilMoistureModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4018000000000000)
}

func (s SoilMoistureModuleState) RelativeHumidity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SoilMoistureModuleState) SetRelativeHumidity(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ResidualEvapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasResidualEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilMoistureModuleState) SetResidualEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewResidualEvapotranspiration sets the residualEvapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewResidualEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SaturatedHydraulicConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSaturatedHydraulicConductivity() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilMoistureModuleState) SetSaturatedHydraulicConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewSaturatedHydraulicConductivity sets the saturatedHydraulicConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSaturatedHydraulicConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisture() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilMoistureModuleState) SetSoilMoisture(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilMoisture(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisturecrit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s SoilMoistureModuleState) SetSoilMoisturecrit(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilMoistureDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SoilMoistureModuleState) SetSoilMoistureDeficit(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilPoreVolume() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilPoreVolume() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilMoistureModuleState) SetSoilPoreVolume(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSoilPoreVolume sets the soilPoreVolume field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilPoreVolume(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcStomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s SoilMoistureModuleState) SetVcStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s SoilMoistureModuleState) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SoilMoistureModuleState) SetSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SumSurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SoilMoistureModuleState) SetSumSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288))
}

func (s SoilMoistureModuleState) SetSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s SoilMoistureModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s SoilMoistureModuleState) TotalWaterRemoval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s SoilMoistureModuleState) SetTotalWaterRemoval(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilMoistureModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s SoilMoistureModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s SoilMoistureModuleState) WaterFlux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasWaterFlux() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilMoistureModuleState) SetWaterFlux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewWaterFlux sets the waterFlux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewWaterFlux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwWindSpeed() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleState) SetVwWindSpeed(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwWindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleState) SetVwWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleState) XSACriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleState) SetXSACriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SnowComponent() (SnowModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SnowModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasSnowComponent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilMoistureModuleState) SetSnowComponent(v SnowModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSnowComponent sets the snowComponent field to a newly
// allocated SnowModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSnowComponent() (SnowModuleState, error) {
	ss, err := NewSnowModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SnowModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) FrostComponent() (FrostModuleState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FrostModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasFrostComponent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilMoistureModuleState) SetFrostComponent(v FrostModuleState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrostComponent sets the frostComponent field to a newly
// allocated FrostModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFrostComponent() (FrostModuleState, error) {
	ss, err := NewFrostModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return FrostModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilMoistureModuleState_List is a list of SoilMoistureModuleState.
type SoilMoistureModuleState_List = capnp.StructList[SoilMoistureModuleState]

// NewSoilMoistureModuleState creates a new list of SoilMoistureModuleState.
func NewSoilMoistureModuleState_List(s *capnp.Segment, sz int32) (SoilMoistureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22}, sz)
	return capnp.StructList[SoilMoistureModuleState](l), err
}

// SoilMoistureModuleState_Future is a wrapper for a SoilMoistureModuleState promised by a client call.
type SoilMoistureModuleState_Future struct{ *capnp.Future }

func (f SoilMoistureModuleState_Future) Struct() (SoilMoistureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleState(p.Struct()), err
}
func (p SoilMoistureModuleState_Future) ModuleParams() SoilMoistureModuleParameters_Future {
	return SoilMoistureModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilMoistureModuleState_Future) SnowComponent() SnowModuleState_Future {
	return SnowModuleState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilMoistureModuleState_Future) FrostComponent() FrostModuleState_Future {
	return FrostModuleState_Future{Future: p.Future.Field(0, nil)}
}

type SoilOrganicModuleState capnp.Struct

// SoilOrganicModuleState_TypeID is the unique identifier for the type SoilOrganicModuleState.
const SoilOrganicModuleState_TypeID = 0xd594e64f6b5f461d

func NewSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func NewRootSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func ReadRootSoilOrganicModuleState(msg *capnp.Message) (SoilOrganicModuleState, error) {
	root, err := msg.Root()
	return SoilOrganicModuleState(root.Struct()), err
}

func (s SoilOrganicModuleState) String() string {
	str, _ := text.Marshal(0xd594e64f6b5f461d, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleState) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleState {
	return SoilOrganicModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleState) ModuleParams() (SoilOrganicModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilOrganicModuleParameters(p.Struct()), err
}

func (s SoilOrganicModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleState) SetModuleParams(v SoilOrganicModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilOrganicModuleParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewModuleParams() (SoilOrganicModuleParameters, error) {
	ss, err := NewSoilOrganicModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilOrganicModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SoilOrganicModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SoilOrganicModuleState) VsNumberOfOrganicLayers() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SoilOrganicModuleState) SetVsNumberOfOrganicLayers(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SoilOrganicModuleState) AddedOrganicMatter() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SoilOrganicModuleState) SetAddedOrganicMatter(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SoilOrganicModuleState) IrrigationAmount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilOrganicModuleState) SetIrrigationAmount(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ActAmmoniaOxidationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActAmmoniaOxidationRate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilOrganicModuleState) SetActAmmoniaOxidationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewActAmmoniaOxidationRate sets the actAmmoniaOxidationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActAmmoniaOxidationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActNitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActNitrificationRate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilOrganicModuleState) SetActNitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewActNitrificationRate sets the actNitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActNitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActDenitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActDenitrificationRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilOrganicModuleState) SetActDenitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewActDenitrificationRate sets the actDenitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActDenitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastDeltaSum() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilOrganicModuleState) SetAomFastDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewAomFastDeltaSum sets the aomFastDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastInput() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilOrganicModuleState) SetAomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAomFastInput sets the aomFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastSum() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilOrganicModuleState) SetAomFastSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAomFastSum sets the aomFastSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowDeltaSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilOrganicModuleState) SetAomSlowDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewAomSlowDeltaSum sets the aomSlowDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowInput() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilOrganicModuleState) SetAomSlowInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAomSlowInput sets the aomSlowInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowSum() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilOrganicModuleState) SetAomSlowSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewAomSlowSum sets the aomSlowSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) CBalance() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasCBalance() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilOrganicModuleState) SetCBalance(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewCBalance sets the cBalance field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewCBalance(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) DecomposerRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilOrganicModuleState) SetDecomposerRespiration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.Text(), err
}

func (s SoilOrganicModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilOrganicModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.TextBytes(), err
}

func (s SoilOrganicModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(11, v)
}

func (s SoilOrganicModuleState) InertSoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasInertSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilOrganicModuleState) SetInertSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewInertSoilOrganicC sets the inertSoilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewInertSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) N2oProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilOrganicModuleState) SetN2oProduced(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedNit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilOrganicModuleState) SetN2oProducedNit(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedDenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilOrganicModuleState) SetN2oProducedDenit(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemExchange() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilOrganicModuleState) SetNetEcosystemExchange(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilOrganicModuleState) SetNetEcosystemProduction(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilOrganicModuleState) SetNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasNetNMineralisationRate() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilOrganicModuleState) SetNetNMineralisationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewNetNMineralisationRate sets the netNMineralisationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewNetNMineralisationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) TotalNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilOrganicModuleState) SetTotalNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Nh3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilOrganicModuleState) SetNh3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SmbCO2EvolutionRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbCO2EvolutionRate() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilOrganicModuleState) SetSmbCO2EvolutionRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewSmbCO2EvolutionRate sets the smbCO2EvolutionRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbCO2EvolutionRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbFastDelta() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilOrganicModuleState) SetSmbFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewSmbFastDelta sets the smbFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbSlowDelta() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilOrganicModuleState) SetSmbSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewSmbSlowDelta sets the smbSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilOrganicModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilOrganicModuleState) SetSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilOrganicC sets the soilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastDelta() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilOrganicModuleState) SetSomFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSomFastDelta sets the somFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastInput() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilOrganicModuleState) SetSomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewSomFastInput sets the somFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomSlowDelta() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilOrganicModuleState) SetSomSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewSomSlowDelta sets the somSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SumDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilOrganicModuleState) SetSumDenitrification(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilOrganicModuleState) SetSumNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumN2OProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilOrganicModuleState) SetSumN2OProduced(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilOrganicModuleState) SetSumNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilOrganicModuleState) TotalDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilOrganicModuleState) SetTotalDenitrification(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Incorporation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SoilOrganicModuleState) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// SoilOrganicModuleState_List is a list of SoilOrganicModuleState.
type SoilOrganicModuleState_List = capnp.StructList[SoilOrganicModuleState]

// NewSoilOrganicModuleState creates a new list of SoilOrganicModuleState.
func NewSoilOrganicModuleState_List(s *capnp.Segment, sz int32) (SoilOrganicModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22}, sz)
	return capnp.StructList[SoilOrganicModuleState](l), err
}

// SoilOrganicModuleState_Future is a wrapper for a SoilOrganicModuleState promised by a client call.
type SoilOrganicModuleState_Future struct{ *capnp.Future }

func (f SoilOrganicModuleState_Future) Struct() (SoilOrganicModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleState(p.Struct()), err
}
func (p SoilOrganicModuleState_Future) ModuleParams() SoilOrganicModuleParameters_Future {
	return SoilOrganicModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleState capnp.Struct

// SoilTemperatureModuleState_TypeID is the unique identifier for the type SoilTemperatureModuleState.
const SoilTemperatureModuleState_TypeID = 0xbd3e199eb9b03758

func NewSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func NewRootSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func ReadRootSoilTemperatureModuleState(msg *capnp.Message) (SoilTemperatureModuleState, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleState(root.Struct()), err
}

func (s SoilTemperatureModuleState) String() string {
	str, _ := text.Marshal(0xbd3e199eb9b03758, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleState) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleState {
	return SoilTemperatureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleState) SoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleState) SetSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) SoilColumnVtGroundLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtGroundLayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtGroundLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtGroundLayer sets the soilColumnVtGroundLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtGroundLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) SoilColumnVtBottomLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtBottomLayer() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtBottomLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtBottomLayer sets the soilColumnVtBottomLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtBottomLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) ModuleParams() (SoilTemperatureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTemperatureModuleParameters(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTemperatureModuleState) SetModuleParams(v SoilTemperatureModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTemperatureModuleParameters struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewModuleParams() (SoilTemperatureModuleParameters, error) {
	ss, err := NewSoilTemperatureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilTemperatureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilTemperatureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilTemperatureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilTemperatureModuleState) VsSoilMoistureConst() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVsSoilMoistureConst() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTemperatureModuleState) SetVsSoilMoistureConst(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVsSoilMoistureConst sets the vsSoilMoistureConst field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVsSoilMoistureConst(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) SoilTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTemperatureModuleState) SetSoilTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) V() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTemperatureModuleState) SetV(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewV(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrix() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrix() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTemperatureModuleState) SetVolumeMatrix(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewVolumeMatrix sets the volumeMatrix field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrix(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrixOld() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrixOld() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTemperatureModuleState) SetVolumeMatrixOld(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVolumeMatrixOld sets the volumeMatrixOld field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrixOld(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) B() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasB() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTemperatureModuleState) SetB(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewB(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixPrimaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixPrimaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTemperatureModuleState) SetMatrixPrimaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewMatrixPrimaryDiagonal sets the matrixPrimaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixPrimaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixSecundaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixSecundaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTemperatureModuleState) SetMatrixSecundaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewMatrixSecundaryDiagonal sets the matrixSecundaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixSecundaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatFlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleState) SetHeatFlow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTemperatureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatConductivityMean() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivityMean() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilTemperatureModuleState) SetHeatConductivityMean(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewHeatConductivityMean sets the heatConductivityMean field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivityMean(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatCapacity() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilTemperatureModuleState) SetHeatCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewHeatCapacity sets the heatCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) DampingFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fe999999999999a)
}

func (s SoilTemperatureModuleState) SetDampingFactor(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fe999999999999a)
}

// SoilTemperatureModuleState_List is a list of SoilTemperatureModuleState.
type SoilTemperatureModuleState_List = capnp.StructList[SoilTemperatureModuleState]

// NewSoilTemperatureModuleState creates a new list of SoilTemperatureModuleState.
func NewSoilTemperatureModuleState_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14}, sz)
	return capnp.StructList[SoilTemperatureModuleState](l), err
}

// SoilTemperatureModuleState_Future is a wrapper for a SoilTemperatureModuleState promised by a client call.
type SoilTemperatureModuleState_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleState_Future) Struct() (SoilTemperatureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleState(p.Struct()), err
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtGroundLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtBottomLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilTemperatureModuleState_Future) ModuleParams() SoilTemperatureModuleParameters_Future {
	return SoilTemperatureModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTransportModuleState capnp.Struct

// SoilTransportModuleState_TypeID is the unique identifier for the type SoilTransportModuleState.
const SoilTransportModuleState_TypeID = 0xb1760f65e652e737

func NewSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func NewRootSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func ReadRootSoilTransportModuleState(msg *capnp.Message) (SoilTransportModuleState, error) {
	root, err := msg.Root()
	return SoilTransportModuleState(root.Struct()), err
}

func (s SoilTransportModuleState) String() string {
	str, _ := text.Marshal(0xb1760f65e652e737, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleState) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleState {
	return SoilTransportModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleState) ModuleParams() (SoilTransportModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTransportModuleParameters(p.Struct()), err
}

func (s SoilTransportModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTransportModuleState) SetModuleParams(v SoilTransportModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTransportModuleParameters struct, preferring placement in s's segment.
func (s SoilTransportModuleState) NewModuleParams() (SoilTransportModuleParameters, error) {
	ss, err := NewSoilTransportModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTransportModuleState) Convection() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasConvection() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTransportModuleState) SetConvection(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConvection sets the convection field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewConvection(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) CropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleState) SetCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleState) DiffusionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDiffusionCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTransportModuleState) SetDiffusionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDiffusionCoeff sets the diffusionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDiffusionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) Dispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersion() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTransportModuleState) SetDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewDispersion sets the dispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) DispersionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersionCoeff() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTransportModuleState) SetDispersionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewDispersionCoeff sets the dispersionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleState) SetVsLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleState) LeachingAtBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleState) SetLeachingAtBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTransportModuleState) VsNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTransportModuleState) SetVsNDeposition(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTransportModuleState) VcNUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVcNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTransportModuleState) SetVcNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVcNUptakeFromLayer sets the vcNUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVcNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PoreWaterVelocity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPoreWaterVelocity() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTransportModuleState) SetPoreWaterVelocity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewPoreWaterVelocity sets the poreWaterVelocity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPoreWaterVelocity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTransportModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTransportModuleState) SetSoilNO3(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSoilNO3 sets the soilNO3 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3aq() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3aq() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTransportModuleState) SetSoilNO3aq(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSoilNO3aq sets the soilNO3aq field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3aq(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SoilTransportModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilTransportModuleState) TotalDispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasTotalDispersion() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTransportModuleState) SetTotalDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewTotalDispersion sets the totalDispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewTotalDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTransportModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PcMinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleState) SetPcMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SoilTransportModuleState_List is a list of SoilTransportModuleState.
type SoilTransportModuleState_List = capnp.StructList[SoilTransportModuleState]

// NewSoilTransportModuleState creates a new list of SoilTransportModuleState.
func NewSoilTransportModuleState_List(s *capnp.Segment, sz int32) (SoilTransportModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12}, sz)
	return capnp.StructList[SoilTransportModuleState](l), err
}

// SoilTransportModuleState_Future is a wrapper for a SoilTransportModuleState promised by a client call.
type SoilTransportModuleState_Future struct{ *capnp.Future }

func (f SoilTransportModuleState_Future) Struct() (SoilTransportModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleState(p.Struct()), err
}
func (p SoilTransportModuleState_Future) ModuleParams() SoilTransportModuleParameters_Future {
	return SoilTransportModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type ICData capnp.Struct
type ICData_Which uint16

const (
	ICData_Which_noCrop ICData_Which = 0
	ICData_Which_height ICData_Which = 1
	ICData_Which_lait   ICData_Which = 2
)

func (w ICData_Which) String() string {
	const s = "noCropheightlait"
	switch w {
	case ICData_Which_noCrop:
		return s[0:6]
	case ICData_Which_height:
		return s[6:12]
	case ICData_Which_lait:
		return s[12:16]

	}
	return "ICData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ICData_TypeID is the unique identifier for the type ICData.
const ICData_TypeID = 0xf03d8fd1bbe75519

func NewICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func NewRootICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func ReadRootICData(msg *capnp.Message) (ICData, error) {
	root, err := msg.Root()
	return ICData(root.Struct()), err
}

func (s ICData) String() string {
	str, _ := text.Marshal(0xf03d8fd1bbe75519, capnp.Struct(s))
	return str
}

func (s ICData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ICData) DecodeFromPtr(p capnp.Ptr) ICData {
	return ICData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ICData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ICData) Which() ICData_Which {
	return ICData_Which(capnp.Struct(s).Uint16(0))
}
func (s ICData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ICData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ICData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ICData) SetNoCrop() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ICData) Height() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != height")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetHeight(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ICData) Lait() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != lait")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetLait(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// ICData_List is a list of ICData.
type ICData_List = capnp.StructList[ICData]

// NewICData creates a new list of ICData.
func NewICData_List(s *capnp.Segment, sz int32) (ICData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ICData](l), err
}

// ICData_Future is a wrapper for a ICData promised by a client call.
type ICData_Future struct{ *capnp.Future }

func (f ICData_Future) Struct() (ICData, error) {
	p, err := f.Future.Ptr()
	return ICData(p.Struct()), err
}

const schema_86ea47c297746539 = "x\xda\x9c\xbd\x7f\x9c\x14\xd5\x95\xf7\x7fOU\x0f=3" +
	"\x0c\xcc\x8cuQ~\xcc\xd0\x03\xcc &\xa8\xfc2\xa2" +
	"\xc14\xc348\xe8\xfc\xeeA4\x8b\x09E\xf7\x9d\x99" +
	"\xc2\xea\xaa\xa6\xbaz\x98q1\xa2\xc1\x0d\"&\x9a`" +
	"\x16\x13\xb2\xabY\xdc\xd5,n0\xab\xcfb\x16w\xd1" +
	"\x077\xe8\xe2\x13ta\x17\xb2dW\x0dI4\x8f\xbe" +
	"\xbe\xb8/\xdd%\xfb2;\xdf\xd7\xe7VuwuO" +
	"\x0f\x9a'\xffd|\x9f[\xb7o\xdd{\xcf\xb9\xe7\xdc" +
	"{n\xb1H\xb9|eh\xf1\x94\xf0\xa5L\xe9\xa3\x8a" +
	"Ic\xb3_\xfa\xbfw\x1d\xe8o\xbc\x87\xf56\xd1\xbe" +
	"\xb1\xeb\x84\xfb\xc7/\xdd\xf8\x9b?b\x15K\xc2\x8c-" +
	"}\xb7\xfa^\xd2~W\x8d?\x7f[}\xedRF\x7f" +
	"\x7f\xd7\xb6\xe8+\x83\xf7=\xd0\xdbDJ\xa0\xf0d\x94" +
	"\x98qs\x1fiW\xde\x8c?\xaf\xb8\xf9\xdf\x15Fc" +
	"\xe2\x9f\xbej\xffD}{/\xeb]L\xca\xd8_\x7f" +
	"\xeb\x8do\xee\xf9\xf6-\x7f\xc9B(\x92\xeaz\x9b\xb4" +
	"\xfb\xbb\xc2\x8ci\xf7ume4\xf6\xda\xe6\xcfO~" +
	"\x9d~\xb6\x1f\x0d\xe1\x85\xbae\xe1\xb7\xba\xee%\xed#" +
	"\x14^\xfaA\xd7`\x88Q\xa1\xb2\xde&\xba$\xd0\x92" +
	"Z\x94i\xec\xdfE\xda5\xfd\x971\xb6\xb4\xb5\xff\x87" +
	"aFc\xd7\xfe\xba\xefW\xa2v\xf8\x19\x14\x9f\x14(" +
	"^\x83\xe2[n\x7f\x95\xb4\x07o\xc7\x9f\xf7\xdf\xfe_" +
	"*\xa3\xb1?\xbf\xaf\x93\xff\x99\xf5\xc1\xb3(^\x15(" +
	"N(\xf3\xf4\xa6]\xa4\xbd\xbc\x09\x7f\xbe\xb8\xe9Z\xbc" +
	"\xe7\xad\xd7\x1e|\xfeOf|\xe1\x05\x14\x0f\x05\x8aO" +
	"E\x99^\xf13\xd2R\x02\x7f\x1a\xe2j\xb4\xfd\xd8W" +
	"\xfe~\xc6\xe5\xdf\xaex\x0d\xc5\x17\x04\x8a_\x8a2g" +
	"6\xbfD\xda\x07\x9b\xf1\xe7\xfb\x9b\xa3S\x19\x8d-\xff" +
	"\xcf\xf7?\xec\xff\xe9\xfb\xaf\xb3\xdeE4i\xec\xdb\xeb" +
	"~\xf1O{[\xbf\xf0\xff\xf9\x8dy\x7f\xdbfE\xab" +
	"\xbf\x0b\x7fN\xb9\xeb\x1b\xc4h\xacq\xcd\x97\xef\xe8\xfe" +
	"\xd5\x9eS\xa8\xbd\xae\xb4\xf6\x17\xbf\xf2c\xd2\xce|\x05" +
	"\x7f\x9e\xfa\xcaX%\xa3\xb1\x99\xeb+\x8e\xa6N<z" +
	"\x8a\xd57Q\xe9\x9b>\xb8k3i\x8f\xef\xc2\x18}" +
	"oW\x94\xd1\xd8\x96#\xdf\xfdj\xdd7\x7fx\x1au" +
	"S\xc9\x18\xbd\xb8\xab\x8f\xb4S\xb2\xf0\xeb\xb2p\xfd\xaa" +
	"\xb3{\xb6\xd5\xcc\xfe9\x0aO\x09T\xad\xc8a\xdcu" +
	"'i\x15\x0f\xe0Oz\xa0\x1b}>\xbd\xe1\xa1\x7f\xdf" +
	"tU\xef/P\\+\xa9\xfb\x91\xaf;\xa4=\xf5u" +
	"\xfc\xf9\xc4\xd7\xff\x14}\x98\xef\x86\xde&\x9a\x1c\xa8\\" +
	"\x16\x7f\xff[\xf7\x92F{0\xfe\xd3\xf6|\x0d\x95\xcf" +
	"X\xf7\xeb\xbf}\xfd\x1b7\x9cg\xc5\x137\x16V\x19" +
	"[\xbav\xef\xf5\xa4\xdd\xb6\x17-_\xb7\xf7\x87l\x8c" +
	"\x8d\xb1Ic);)\xcc\xabSv\x85e$\xf4\xab" +
	"S6\xfe\xef\xcb\x19Ww\xc5U\x09=m\xa5\xafo" +
	"s\xect\xa7\x9d\xcc\x9a\"\x0e\xcaz\x88\xe2O\xaaj" +
	"\x88\xb1\x101\xa6\xdd?c\x13c\xf1\x9d3T\x8a\xef" +
	"\x99\xa1P\xfd;\xc4\x09\xfc\xe1\x19\x9fa,\xbe\x1b|" +
	"/\xf8\xaf\x15N\x0ac\xda#\x92?\x04\xbe\x0f\xfcW" +
	"\xc4IeL{t\xc6\xdb\x8c\xc5\x1f\x03?\x00\xfeK" +
	"\x95S\x88H{j\xc6w\x18\x8b\x1f\x00?\x04~." +
	"\xc4\xa9\x821\xed9\xf9\xbb\xcf\x82\x1f\x01\xaf\xa8\xe04" +
	"\x891\xed\x85\x19_d,~\x18\xfc\x18\xf8\xa4I\x1c" +
	"c\xac\xbd,\xeb9\x06~\x12<\x1c\xe6T\x891\x9c" +
	"\xf1#\xc6\xe2'\xc1\xdf\x9c\xa1\x10Ur\xaabL\xfb" +
	"\xb9,\xfe&\xf0\xc7(^U\xc9\xa9\x9a1\xed\xb73" +
	"\xbe\xcfX\xfcc\xf0\xca\x99\x0a\xd5W\x13\xa7\xc9\x8ci" +
	"\x153\xff\x83\xb1x\xcdL\x95\xe2\xcb\xc1'Wq\xaa" +
	"aL\xbbf\xe6\xab\x8c\xc5W\x80\xb7\x83\xd7Ts\x9a" +
	"\xc2\x98\xb6z&\x9a\x1f\x03\xef\x01\x9f2\x99\xd3T\xc6" +
	"\xb4\xce\x99\xbb\x18\x8b\xf7\x80o\x00\x9fZ\xc3\xa9\x961" +
	"\xed\xb6\x99\xf8\xdd\x0d\xe0C\xe0\xb5\x0a\xa7:\xc641" +
	"\xf3^\xc6\xe2I\xf0\xed\xe0u*\xa7z\xc6\xb4\xbbf" +
	"~\x93\xb1\xf8v\xf0}\xe0\xf5S8]\xc2\xd8\xd2G" +
	"g*\x84~\x86\xe0\x00\x04\x97L\xe5\xa41\xa6=5" +
	"S\xf63\xf8!p\xad\x96\x13G?\xcfD\xff\x1c\x02" +
	"?\x0a\xce\xeb8McL{q\xe6\x8f\x19\x8b\x1f\x05" +
	"?\x01>\xad\x9e\xd3\xa5\x8ci\xaf\xc9\x1f>\x01~\x16" +
	"\xfcR\xe2t\x19\x91vF\xbe\xf0i\xf0s\xe0\x97]" +
	"\xc2i:c\xda[\xb2\x9es\xe0\xe7\xc1\xa7\x878\xcd" +
	"`L{\x7f\xe6K\x8c\xc5\xcf\x83\xd7\xccR\xa8~\x86" +
	"\xc6i&cK\xabf\xc9\x17\xa8\x9b\xa5R\xbc\x01\x82" +
	"\x99\x9c\xd3,\xc6\xb4\x19\xb363\x16\x9f\x0e\xde\x0c>" +
	"k\x1a\xa7\x06\"m\xce\xac;\x19\x8b7\x81/\x04o" +
	"\xb8\x94S#\x91v\xc5,\x87\xb1\xf8\x02\xf0e\xe0\x8d" +
	"\x97q\x9a\xcd\x98\xb6x\x16&\xd0\"\xf0\x15\xe0\xb3\xa7" +
	"s\x8a0\xa6]'\xebY\x0e\x1e\x03\x8f\xcc\xe0\xd4\xc4" +
	"\x98\xd6*\xf9J\xf0\x0e\xf0\xa6\x0aNs\x18\xd3\xd6\xca" +
	"z\xda\xc1\xfb\xc1\xe7\xcc\xe44\x971\xadw\x16:\xa2" +
	"\x07|\x03\xf8\xdcY\x9c\xe6\x11i\xb7\xc9\xf2\xb7\x82'" +
	"\xc1\xe75pjfL\xd3gaf\x0d\x81\xbb\xe0\xcd" +
	"\x938\xb50\xa6m\x99\x85\x91O\x83\xef\x06o\x09s" +
	"\x9a\x0f\x85\x9c\x85\x01\xdb\x0d\xfe$\xf8\xfcFN\x973" +
	"\xa6=1\xebg\x18`\xf0C\xe0\x97\xcf\xe6\xb4\x00\x03" +
	"<\xeb\xbf\xa10\xe0\xc7\xc0\x17\x10\xa7+\xa00\xb3\xa4" +
	"\xc2\x80\x9f\x04\xbf\"\xc2\xe93P\x18\xf9\xbb'\xc0\xcf" +
	"\x82\x7f\xa6\x92\xd3g\x19\xd3\xce\xcc\xc2@\x9e\x05\xbf\x00" +
	"\xfeY\x85\xd3B\xc6\xb4\x8ffa /\x80\x87\x1a\x14" +
	"\xaa_\xd8\xc4\xe9J\xc64j\xd8\xc4X_\x03\xc6\x17" +
	"\xf8\xca9\x9c\xae\xc2\xf86x\xe3\x0bA\x03\x04W\xa9" +
	"\x9c\xae\xc6\xf86\xa0\x9e\x06\xf0\x05\xe0W\xcf\xe5\xb4\x88" +
	"\xb1\xa5-\x0d}x`\x19\x04+!X\xb4\x9b\xd3b" +
	"\xc6\xb4\x1b\x1a\xf0\x02+\xc1;\xc0\x17?\xc8i\x09\x06" +
	"\xa6\x01\x03\xdf\x0e\xde\x0f\xbe\xa4\x99\xd3R\"\xad\xb7\x01" +
	"\xaaz+x\x12|i\x0b\xa7e\x8c-\xd5\x1b\xaa\xf1" +
	"\x03&\x04#\x10,\xab\xe2t\x0dcZV>\xb0\x0d" +
	"|/\xf85\x0a\xa7\xcf\x11i\x8f4\xfc\x86\xb1\xf8>" +
	"\xf0'\xc1?\xa7r\xba\x96H{B\xf2\x03\xe0\x87\xc0" +
	"\xaf\x9d\xcfi9F\xa0\x01#|\x18\xfc\x18\xf8\xf2\xcb" +
	"9]\x87\x11\x90/p\x0c\xfc$\xf8u!N\xd7\x13" +
	"i\xaf\xa3\xe7\xe2'\xc0\xcf\x82__\xcd\xe9\xf3\x18\x81" +
	"\x06h\xc0i\xf0s\xe0\x9f_\xc0i\x05TL\xf6\xdc" +
	"9\xf0\xf3\xe0+\xae\xe0t\x03T\xac\xe1\x0d\xc6\xe2\x1f" +
	"6\xa8\xd4\xd7\xa8P\xfd\x0d\x9f\xe1\xf4\x05\xc6\xb4\xdf\xc9" +
	"\xd7\x0a5\xaa\x14\xaf\x03\xff\xc2\xd79E\x19\xd3\xa64" +
	"\xa2\x9a:\xf0\x06\xf0\xe8g9\xad\xc4\xc04^\xcfX" +
	"\x9c\x837\x81\xaf\\\xc8\xa9\x951\xad\xb1\x11\xcdo\x02" +
	"_\x08\xdez%\xa7U\x8ciW4\xc2\xc4-\x04_" +
	"\x0e\xbe\xea*Nm0\x95\x8d\x98X\xcb\xc0W\x82\xb7" +
	"]\xcd)\x86ql\x84\x82\xad\x00o\x07\x8f-\xe2\xb4" +
	"\x1a&T\xd6\xd3\x0e\xde\x0f\xbez1\xa75P\xb0F" +
	"\x98\xca~\xf0\x8d\xe0k\x96p\xba\x911\xed\xf6FL" +
	"\xd0\x8d\xe0&\xf8\x8dK9\xb5\xc3[i\x943.\x0d" +
	"\xc16\x08\xda\x97qZ\xcb\x986*\x1f\xd8\x06\xbe\x13" +
	"|m\x05\xa7\x9b\x88\xb4\xfb\xe4\x0f\xef\x04\xdf\x03~\xd3" +
	"5\x9cn&\xd2\x1e\x96?\xbc\x07\xfc1\xf0\x9b?\xc7" +
	"\xa9\x03>E#:t?\xf8A\xf0\x8ek9u2" +
	"\xa6=-\xeb?\x08~\x18\xbcs9\xa7.\xc6\xb4\xe7" +
	"\x1ba\x09\x0e\x81\x1f\x05\xef\xba\x8eS7Ln#L" +
	"\xebQ\xf0\x13\xe0\xdd\x939\xf5\xc0\xe46B\xe3O\x80" +
	"\xbf\x07\xdes=\xa7^\xc6\xb4w%\x7f\x0f\xfc\x02x" +
	"\xef\xe79\xf5A#e;/\x80\x87f+T\xdf\xb7" +
	"\x82S\x9cH\xa3\xd971\xd67\x1b\x1a\x09\x1c\xbf\x81" +
	"S?cZ\xd5l\xe8K%8\x07\xef\xaf\xe1\xb4\x8e" +
	"1\xad~6\xaa\xe1\xe0\x8b\xc0\xd7M\xe1t\x0bc\xda" +
	"\x95\x92/\x02\xef\x00\xbf\xe5\x0b\x9c\xd6C\xeff\xa3\x1b" +
	"z\xc07\x80\xaf\x8fr\xba\x95\xb1\xa5\xb7\xcd\x96\xfd\xbf" +
	"\x11\x02\x13\x82[Wr\xba\x8dH3f\xc3UH\x82" +
	"\xa7\xc1\xbf\xd8\xca\xe9\x8b\x8ci\xa9\xd9\x98\x10&\xf8\x08" +
	"\xf8\x1f\xac\xe2\xf4\x07\xd0G\xc9]\xf0\xed\xe0\x1b\xda8" +
	"m\xc0Z(\x7fx\x07\xf8C\xe0\xb7\xc78\xdd\xce\x98" +
	"\xf6\xe0l\xf4\xcfC\xe0\xfb\xc0\xbf\xb4\x9a\xd3\x97\xe0\x8a" +
	"\xccF?\xef\x03\x7f\x12\xfc\xcbk8}\x19\x16t6" +
	"&\xe8~\xf0\x83\xe0\x1bo\xe4\xb4\x11\xe38\x1b\xe3u" +
	"\x00\xfc\x10\xb8\xde\xceI\x87^\xcbz\x0e\x81\x1f\x05\xdf" +
	"\xb4\x96\xd3&\x8c\xa3\xe4G\xc1O\x80'n\xe2\x94\xc0" +
	"8\xce\x86\x82\x9d\x00?\x0b\x9e\xbc\x99S\x12\xae\xf2\xec" +
	"\xb9\xe8\xa0s\x10\x9c\x87@tp\x12\xf0\xff<\xc1\x05" +
	"\x08B\x11\x85\xea\x07:9\x0d\xc0\xd5\x8cHAMD" +
	"\xa5\xf8t\x08\x06\xbb8\x0d2\xa6M\x8b\xc0\xd87\x80" +
	"/\x00\x1f\xea\xe64\xc4\x98\xd6\x12\x81)X\x08\xbe\x1c" +
	"\xdc\xe8\xe1d@'#h\xear\xf0\x18\xf8\xe6^N" +
	"\x9b\xb1\xe8E\xa0\x021\xf0\x1e\xf0;\xfa8\xdd\x01\xf7" +
	"%\xf2\x03\x8c1\xf8\x06p3\xce\xc9\xc4\x18Gf\xa2" +
	"AI\x08\xd2\x10\xa4\xfa9\xa5\x10\x1eE\xa4q\x1d\x81" +
	"`\x07\x04\xd6:N\x16cK\xef\xf1^a7\x04{" +
	"!\xb0o\xe1d\xc3\x81\x8c\xc0\xac\xec\x05\xdf\x0f\x9e^" +
	"\xcf)\xcd\x98\xf6x\x04\xa3\xf3\x18\xf8\x01\xf0-\xb7r" +
	"\xda\x02\xc7F\x96?\x00~\x08\xdc\xb9\x8d\x93\x83\xd1\x91" +
	"M=\x04~\x14<\xf3EN\x19\x8c\x8e,\x7f\x14\xfc" +
	"\x04\xb8\xfb\x07\x9c\\\x8cNDj\x19\xf8Y\xf0\xec$" +
	"NYX]Y\xcfY\xf0w\xc0\x877p\x1afL" +
	"\xfbe\x04V\xfd=\xf0\x0b\xe0[o\xe7\xb4\x15\xda'" +
	"\xbb\xee\x02x\xa8I\xa1\xfa\x91\xa9\x9cF\xb0\x1e6\x81" +
	"\x87\x9a`F\xc1Gk9\x8d\xc2\x8c6\xa1\xfe&\xf0" +
	"\x15\xe0w\xd6q\xba\x13\xfeH\x13\xac\xfdr\xf0~\xf0" +
	"?\xac\xe7\xf4\x870\x7f\xb2\x9e~\xf04\xf8\xb6K8" +
	"m\x83\xd64a(\xd3\xe0\xbb\xc1\xef\xd28\xdd\x05\x7f" +
	"A\xd6\xbf\x1b\xfcI\xf0\xafpN_\xc1lo\x82\xd6" +
	"\x1c\x00?\x06~\xf74NwcUj\xc2T9\x0e" +
	"\xfe\x0e\xf8\xf6K9m\xc7\xfb6\xc1\x81\x7f\x0f\xbcr" +
	"\x8eB\xf5\xf7\\\xc6\xe9\x1ex\xc6sP\x7f\xe5\x1c\xf8" +
	"e\xe0\xf7N\xe7t/c\xda\x9c9\xe8\x9f\x05\xe01" +
	"\xf0\xaf\xce\xe0\xf4UL\xad9\xf8\xddv\xf0$\xf8\x8e" +
	"\x99\x9cv\xc0\x0f\x9a\x83\xfeO\x82?\x04~\xdf\x978" +
	"\xdd\x07-\x96\xf5?\x04\xbe\x0f\xfc\x8f\xbe\xcc\xe9\x8f\xa0" +
	"\xc5s`\xb6\xf6\x82\xef\x07\xff\xdaFN_\xc3<\x99" +
	"\x83\xf6?\x09\xfe,\xf8\xce0\xa7\x9d\x8ci\xcf\xcc\xc1" +
	"\xaaz\x10\xfc0\xf8\xfd:\xa7\xfba\x8d\xe7\xc0J\x1f" +
	"\x06?\x06\xbek\x13\xa7]\xe8\x07\xf9\xbb\xc7\xc0O\x82" +
	"?\x90\xe0\xf4\x00\xfc\xa39\xb0B'\xc0\xcf\x82\xefN" +
	"r\xda\x8dy\"\xeb9\x0b\xfe\x0e\xf8\x83\x82\xd3\x83\xe8" +
	"\xb79\xb2\xdf\xc0/\x80\x7f}\x80\xd3\xd71Od?" +
	"|\x0c^9W\xa1\xfao\x0cr\xfa\x06\xfas.\xca" +
	"\xd7\xcc\x85j\x83?4\xc4\xe9!\xa8\xf6\\\xf4\xcft" +
	"\xf0f\xf0\x87\x0dN\x0f\xa3\x9f\xe7B/\x9a\xc0\x17\x82" +
	"\x7fs3\xa7ob\x19\x9e\x0b3\xbd\x10|9\xf8\xb7" +
	"\xee\xe0\xf4-\xa8\xfc\\\xf4\xc32\xf0\x95\xe0{LN" +
	"{\xb0\x0c\xcf\x95\xcb0x;\xf8#\xb38=\x82e" +
	"X\x96\x8f\x81o\x04\xffv\x03\xa7oc\xb9\x9d\x8b\xf9" +
	"\xb9\x01|\x04\xfc\x8fS\x9c\xfe\x18Vz.\xac\xdc\x08" +
	"\xf8\x0e\xf0\xbd\x8d\x9c\xf62\xa6\xdd#\xdb\xb9\x1d|\x1f" +
	"\xf8\xa3\x16\xa7G1\x8es1\x9f\xf7\x81?\x09\xfe\x1d" +
	"\x9b\xd3w0?e\xf9\xfd\xe0\x07\xc1\xbf\xfb\x0dN\xdf" +
	"\x855\x96\xbf{\x00\xfc\x10\xf8\xbe4\xa7}\xd0\xf7\xb9" +
	"\x98\x0f\xcf\x82\x1f\x99\xab\xd0\xe2\xef\x1d%N\xdfC\xc4" +
	"(_\xe00\x04\xc7\xf0\xc0\x9f8\x9c\xfe\x04\x03,;" +
	"\xf4\x18\xf8I\xf0?\xcdp\xfaS\x0c\xb0\xec\xb8\x93\xe0" +
	"o\x82?\xe6rz\x0c!\xa3\xfc\xe1\xb3\xe0\xef\x80?" +
	">\x9b\xd3\xe3\x18`Y\xcf;\xe0\xa1y\x0a\xd5\x7f?" +
	"\xcb\xe9\xfbP\xf8y\x18\xc8\xcayXW\xc1\xffl\x98" +
	"\xd3\x9fa]\x9d\x07\xc5\x98\x0e\xde\x0c\xbe?\xc2i?" +
	"\x06r\x1e\x0cS3\xf8J\xf0'\xb6rz\x02\x033" +
	"\x0f\x13q%x\xc7<\x85\x16\xff\xf9\xcb\xc4\xe9\xcf\xb1" +
	"\xe0\xceC\x0f\xb5C\xd0\x8f\x07\xfeb\x84\xd3_\xc0B" +
	"\xc8\x07\xfa\xc17\x82?9\xca\xe9I\x8c\x98\xfc\x81\x8d" +
	"\xe0&\xf8SM\x9c\x9ebL3\xe6\xc1oM\x83\xef" +
	"\x06\xff\xc1\x1cN?\x80\xe5\x90\xf5\xef\x04\xdf\x0f\xfe\x97" +
	"s9\xfd%4l\x1e^x?\xf8\x11\xf0\x03wr" +
	":\x80\x8e\x9e\x07\x0bt\x04\xfc8\xf8\xd3\xf38=\xcd" +
	"\x98\xf6\xca<\xcc\xacc\xe0\xe7\xf0\x02\x7f\xf5\x0f\xc4\xe9" +
	"\xaf\x88\xb4\xb7\xe6\xa1G\xdf\x84\xe0=<\xf0\xc3?\xe4" +
	"\xf4C86\xf2\x05\xde\x03\xbf\x00~p\x1b\xa7\x83D" +
	"\xdaG\xf3n\x82C;O\xa5\xbef\x85\xea\x9f\xb9\x8b" +
	"\xd33phe;?F\xf1J\xf0\x1f}\x85\xd3\x8f" +
	"\xa0I\xcd\xa8>\xd4\x0cG\x17\xfc\xaf\xef\xe6\xf4\xd7p" +
	"t%\xaf\x01\x9f\x0e\xfe\xecvN\xcfB\xc3\x9a\xf1\xb3" +
	"\xd3\xc1\x9b\xc1\x9f\xbb\x87\xd3s\x18\x98fL\x88f\xf0" +
	"E\xe0\xff\xeb^N\xff\x0b\x8eP3&\xd6B\xf0\xe5" +
	"\xe0\x7f\xf3UN\x7f\x03\x0d\x93\xf5/\x03_\x09~h" +
	"\x07\xa7C\x18\xc8f\xcc\xd0\x15\xe0\xed\xe0\xcf\xdf\xc7\xe9" +
	"yh\x98\xac'\x06\xde\x03\xfe\xe3?\xe2\xf4c,\xb6" +
	"\xcdx\xaf\x0e\xf0[\xc1\xff\xf6k\x9c\xfe\x961m\x9d" +
	"\xe4\xfd\xe0\x1b\xc1\x0f\xef\xe4t\x18\xe3+\xdb\xb9\x11\xdc" +
	"\x04\x7f\xe1~N/`|\x9ba\x11\xd3\xe0\xdb\xc0\xff" +
	"\xae\x99\xd3\xdf\xc1\xff\x95\xed\x19\x01\xdf\x03\xfe\xf7-\x9c" +
	"\xfe\x9e1\xed\xe1f\xcc\x93=\xe0\x07\xc1\x8f\xec\xe2t" +
	"\x84H{Z\xf6\xcfA\xf0\xc3\xe0/>\xc0\xe9EX" +
	"\xd0f\x8c\xfba\xf0c\xe0/\xed\xe6\xf4\x12\x14L\xb6" +
	"\xe7\x18\xf8I\xf0\xff=\x9f\xd3\xff\x86\x825#R=" +
	"\x0d\xfea\xb3B\x8b\x8f\xa6\x1b8\x1deL\xfb\xa0\x19" +
	"&\xf1\x02\x04\xa1\x16\x85\xea\x7f\xf1 \xa7\x97\xe1\xb8\xb6" +
	"lf\xac\xaf\x05\x8e+\xf0\xdb_\xe7\xf4\x0fDZU" +
	"\x0b,G\x0d\xf8t\xf0\xb7\xbe\xc1\xe9'D\xda\xb4\x16" +
	"\xb4g:xs\x8bB\x8b_\xde\xd2\xc0\xe9\x18\x06\xb2" +
	"\x05\xf3\xa7\x09\x82\x85x\xe0\x1f\x1e\xe2\xf4\x0aLe\x0b" +
	"&\xe8\x02\xf0e\xe0?y\x98\xd3\xab\x8ci\x8b[\xd0" +
	"\x9e\xe5\xe01\xf0c\xdf\xe4\xf4\x8fX\xc2Z\xa0\xd9\xed" +
	"\xe0\xfd\xe0\xaf|\x8b\xd3q(^\x0b\x14\xa3\x1f|#" +
	"\xf8\xab{8\xbd\x86\x81i\x91\x8a\x07n\x82\xff\xe3#" +
	"\x9c\xfe\x0f\x06\xa6\x05\x1dj\x82\x8f\x80\x1f\xff6\xa7\x9f" +
	"\xc2\x84\xca\x17\x18\x01\xdf\x81\x17xm\x83\xc2\xe9\x04l" +
	"\xa8|\xe3\x1d\x10<\x84\x07\xfe\xcf^N\xafc\x8dl" +
	"A\x8f\xee\x01\x7f\x0c\xfc\xa7\x8frz\x03\x91I\x0bl" +
	"\xf1c\xe0\x07P\xd1\x89\xdb\x15N\xffD\xa4=\xd5\x82" +
	")\xf7$\x04\xcfB\xf0\xfa\x97\x14N'\x89\xb4g\xa4" +
	"\xe0 \x04\x87!x\xc3i\xe0t\x0a\x83\xdc\x82Iw" +
	"\x08\x82\xa3\x10\xfc\xd3\x97\x15N\xffL\xa4\xbd\xd8\x02\xef" +
	"\xf8\x08\x04\xc7!89\xa4p\xfa\x17\"\xed\x15Y\xd5" +
	"1\x08N\xa2Q\xa7.\xe7t\x1a\xc3\xdf\xb2\x04\x0e\x06" +
	"\xf8;\xe0\xff\xbc\x80\xd3\x19\xd8\xd1\x16\xc4\x99o\x82\x7f" +
	"\x0c\xfe/Wp\xfa\x19c\xdao%\xff\x10\xbcn\xbe" +
	"B\xf5\xa7?\xc3\xe9_\xa1\xc6\xf3W\xc1\xbe\xce\xc70" +
	"\xcfWh\xf1\x19C\xe1t\x16\xc3,\x05\x0d\x10,\x80" +
	"\xe0g\x9b\x15N?\x87\x17<\x1f\xe3\xdf\x0c\xc1\"\x08" +
	"\xfe5\xd3\xc0\xe9\xdf\xa0\xc9\xf3\xf1\x13\x0b X\x06\xc1" +
	"Y\xb7\x81\xd3\xbfc\x06\xc8\xaa\x16B\xb0\x1c\xbf\xfd\xf3" +
	"\xcfrz\x13*>_\xfa\xcd\xe01\xf0\x7f[\xc8\xe9" +
	"-\xcc\x8c\xf9P\xfd\x95\xe0\x1d\xe0\xff~%\xa7\xb7a" +
	"\xaa\xe7\xcb\xcd\"\xf0~\xf07\xaf\xe2\xf4\x0b\xcc\x98\xf9" +
	"P\xcd[\xc1\x93\xe0t5\xa7sp\x86\xe6C57" +
	"\x82\x9b\xe0\xca\"N\xbf\xc4\x8c\x99\x8f\x99:\x04\xee\x82" +
	"\xab\x8b9\xfd\x8a1m\x8b,\x9f\x06\xdf\x86\x17\x08e" +
	"\x1b8\xfd\x1a:.\x1b4\x02\xc1\x0e\x08\xde\x1dn\xe0" +
	"\xf4\x0e\xa6\xd2|\xcc\xed\x9d\x10\xecAM\xb7}\x97\xd3" +
	"\xbb\x08r\xe7ctv\x83\xef\x9d\xaf\xd0\xd8\x80cg" +
	"\xdc\x9b\x0d\x93\x85\xcdn\x8b\x88)D\x8cj\xefp\xef" +
	"\xb0i2Sh\xb2\xf7\x1f\x89\xdc\x7f\x8c\xe9\x99\x8c\x91" +
	"2L]qE\x8f\xee\xb8m\xb6\x18\x18\xc8\xf4\x89d" +
	"6\x9c\x10\xc9\xdc\xf3c\xf6\xd2\xf5q\xd7N\xe9\xe4\xea" +
	"f\x9big\xb2\xaa#\xbc*\x8e\x9c\x8f26f/" +
	"\x8dgS\xeb\xd2.\x0b\xebw\x88|\xdd\xc3\x99\x0e\xdd" +
	"5\xdc,S\x93\x05\xa8o\xb2\x87\xc5\xa0cS\xd6J" +
	"\xae2\xec\x94\xaef2\x13\x0b#\x99L\xb7\x99\xcc\xcb" +
	"\xd3\x89VY\x82\x1c;k%\xbb\x9dAU\xb7h*" +
	"\xa3\x1e\x95d[\xa7\xa2\x8e\x84\x9b\xd5\xcd~\x87t+" +
	"\x936\x1c\xdd\x0d\x1b\xb6\x15\xacA\xbe\xb1b\xea\xde\x1b" +
	"\x1b\xaea[\x865\x18\x91\xaf\x9e\xab\xcc\xff\xbf\xc9~" +
	"\x9dEO\xf5\x09\xdd4\xed\x84\x8e\x07\x19\x1b\xd7\x93," +
	"\xec\x8a\xcc8J(\xdd\xa7\xbb\xa2\xe8\x09\xd7\xb1-;" +
	"EF\"\xa6\x8fv\x08+<8\xe4\x06Z\xbaJ\xcf" +
	"\x88\x98N\xa3\xa6\xb0\x06\xdd!6\xbeQ(\xd0/(" +
	"\x95\x16\x8e\xeef\x1d\x12e\x8a\x88A\xc3\x8a\xab\xc2\xca" +
	"\x18\xae1,z\x86\xf4\x8ch\x17\xba\x1bw\x1d\x91\xc9" +
	"\x14\xda\xb2I\x98\xf6\xd6\x89\x86e\x9cp\xdc\xb0\xb4\xe9" +
	"\xce&{\x84FM\xd9+=Q\xdd\x1d\xda\xaa\x8fR" +
	"\x05S\xa8\x82\xd1X\xc2\x14\xba\x13\xd3G\xa9OO\x1a" +
	"(B\xc1\x11i\xb3\x97t\x0a\x97\x85\x87\xec$Mb" +
	"J\xc5$\x15\x8f8\x86k$t\x93\xba\xdal+!" +
	",7\xea\xc8\xba\x83\xcf\xc9\"\x8anv\x8f\x8c\x0e\x0a" +
	"\xab\xcd\xb6\\a\xb9e\xfa\xc9+\xa8\xeaf\xbf\xc8\xf5" +
	"U\xd9NH8v:f\xe8)V+\\\xe1\x14\xe1" +
	"5\x8e\x9daQ\x17\x9a1\x12\x9c\xf9\x90\xa1*\x16\x99" +
	"@d\x0c2\xb5hT\xdb$fQcp\xc8\xedY" +
	"<\x91`I\x89\xa0KgjJP\x0dS\xa8\xc6o" +
	"RWL\xa4XX\xb7\x92E\x0d\xed\xea\x13I\xa6\x16" +
	"\xb7\xc4\xab\"\x9eVD\xc2\x180\x12\x9d\xfaH\x9fm" +
	"\xbb\x98\xf41\x91v\x87\x8a\x9e_\xaf\xbb\x82\x9cui" +
	"W\xbfC\x8c\xeb\xcaD\xd6q\x84\xe5\xf6S\xae\x1f#" +
	"\x8e\x88gS\x13\x15Sl\xb7\xa8\xcf\xe3j6U\xf8" +
	"\xb1\x89\x0aE\xb3)4/\xd8\x01Y\xd75,\x1a\x8c" +
	"\x09S\x1f\x8d\xe9\xeah\x86\xc2L\xa10\xa3\xb1\xa4\xee" +
	"\xa9\x07\x0d\xad\xd1\x13\xae\xed\xb0\xc0c1)\xa3Aw" +
	"\xa8Ol\xc9\x1aQG\xa4\x84\xe5\x9666\xa9\x8ff" +
	"Z\x07\\\xa18RW\xd6\x98\xf6V\xe1\x18\xd6 +" +
	"\xfc\x86H\x98\x86\xa5\xbb\xac\xc4\x92\xc4\xc4\x80\x9e5U" +
	"77\xa9\xadu\x19\xb1z`\xc0H\x18\xc2J\x8c\x16" +
	"Z2\x9c\x92\xdd|\xa3\"\xad\xd6V\xdd\x15N\xbf\xbe" +
	"\xc9\x14\x85_@]\xc3\xc2\xb4Ci\xb4\xb05\x91\x10" +
	"\xa6\xf0\xa6\xfb\xaa\xd1.\xc3u\xecAa\xc9\xc9J\x19" +
	"\xaab\x0aU\xc9V\xe1\x89t\x8a\x84\xe5\xeaf\xdc\xd5" +
	"\xd5A\x91\xaf\xd0\xb2\xbb\x070\xe6,\x12wE:\xd0" +
	"]\x8e\x9d\x1d\x1cr\xd7*\xa9\xb4\x9ep\xbb\xad5\xc2" +
	"q\x0d\xd3pGsf)7ab\xb2\xa0\xea\xae-" +
	"-\xe8wsQ?\xcb\xb2\x8a\xafN\xfdC\x8e\xc8\x0c" +
	"\xd9f\x92\x95\xd1\xc4\xd5)\xe1\x0c\x0a\xc5J\x885\xa6" +
	"m'\x0dk\x10Z\xeb\xd4\xda\x81\xd5\xaa\xa8X\xa7m" +
	"d0+\xca\x17\xb3\x92qa)\xa5\xa6-\"\xdb\x91" +
	"o\xa0\x18\x18\x10\x09\xd7\x18&\xe1Y\xd9A50\xe5" +
	"\x85\xe3\xd8N\xdc\x85\xd5\xcef\xf2UK\xda)2\xac" +
	"6\xa3\x0f\x16\xb4N\x0c\xebi\xdb\xd1]E$\xd78" +
	"vj\xad\xe5\x0a'!\xd2n\xa13\xc4\x88\xeb`|" +
	"\x15Gd\\\xc7\xd0\xcd\xb2\x06o\x8d!\xccd\x9bb" +
	"[I\xb9\xfat\xdaIc\xc0\x10\xc1N\x1d0,\xdd" +
	"\x8c\x89aE\x0eqn\x84\x07\x0bS&:`\x8c\x88" +
	"dW\xb0R\xac\xfc1\x12C\xba\x93\x14\x96\xa1Z\x83" +
	"\xa5\xc2v\xf2D\xd6`\xe0\x97\x06M{\x13\x9aI\xfe" +
	"\x1c\x0eH\x1c!\xacVG\xb0\xa8\xbe\xd6J\x8a\x91\x80" +
	"\xc0\xcedZ3\x19\x92+\x9b+2\xc1\xea \xeb\x19" +
	"\xb2\xc9\xb53\xa3\x96;$\xc2\x19#3\xb14\x9a1" +
	"2\x9d\xb69\xae\x80\x9a+\x9012}b@8B" +
	"\xce\x05\xb3\xf4\x87\x1c\x83R\xba3\xda\xe3\xd8\xc9h6" +
	"Q\xb4>\x0c:\xf6Vw\xa8m\x94\x12\xa6Xm%" +
	"\x05\xe6cn|=Y\x9f \xcfC0\xec\xb0\xd5\x1a" +
	"\x0ft\x97\x9cFY%\xb5\xd6q\x8cA\xd9-qW" +
	"w\xdc\xa2Y\xef\x95\xa1\\\x99\xa8a[\xab\x03\xb6x" +
	"8\x03\xdb?\xe42\xb5+8Jk-\xc35t2" +
	"oNHE\"\xa7\x8c\xac\xdb\x19\xd4\xadUF\xc4N" +
	"\xe9\x99\xccx\x1d\xca\x15+o\xc3\x0d\x7fR\x92\xd7j" +
	"\xdb\x09c\x06\xe7\xa4w$r\xfa\xeb\xbf\xca\xd8R\xf9" +
	"\xbf_D\x19cc\xa6\xd0\x07Z\x1d\xa1\xb3H\xf1\x80" +
	"g\xb2\x96i\xb8\x1d\x82<\xf1Z+\x0ciI\xc32" +
	"CzR$?\xa1P:\xd1ao\xed\x17)%g" +
	"\xedW\x8f\xa4\xedL\xd6\x11E]\xdba\xa4\x0c\x173" +
	"\xf8\xe2\xebu\xad\xe9^\xb3\xc87[\x95G\xa4\xd9\xea" +
	"p\xafY\x94\xc8\xb2\xa8\xe9\x1a\xc3z\xb0o;\xb2#" +
	"Yg\x94E\xbb<7/'H\xe9\xe8/K\x87\xa9" +
	"\xe9\x13\xb9\xd9`\xb5\xc6\x8b\xda\xd3\xa9\x8f\x14\xa6\xbba" +
	"G\xa4#W,osl\x92\xbe\x83\xc0\xf2YF\xe6" +
	"\xcf\x86\xc0/\x8fta\x95e\xea\x1d%Uu\xadK" +
	"\x13V\xdf\x1e\xdd\xd1)U,\xeb\xb3m\xc2\xa0c\xcc" +
	"i((3,#\x95UR9o\xc9)Q\xe6\\" +
	"\x095\x15\xe8\xd35\xb6\xd3\xea\xfb\xa7\xa5^rw\xda" +
	"\xfd=Jw\xea#\xbfOi\xbf\xad\x81\xd2\x98\xcb\xd1" +
	"\x1b\xa5V\xe6\x0bZ\xc2\xed\xc4\xf0(\xc2\xd2\x8b\x86'" +
	"`K-\xe1\xf6\x0c\xd9\xaeM9kA\x99\"\x99#" +
	"\x12\x06\xa5\x0d\xb7\xd4Y\x972#\xa5\x93g;\xb2\x89" +
	"\xda\x12\xdf\xd2\xebG5\xd7\x91\xad~`R\xce;\xb6" +
	"\xfc.W\xcb\x17\xcd\x04\xcd\xe3'\x96\x0d\x17\xfb\xd5^" +
	"3(\xd7\x0cu\xd5\xa2\xa2\xaa\xe0\xefRL\xc0\xe5p" +
	"\xd9E\x1e\xeb\xe9\x9aXX[\xe4l\xe5\x1aH\x9e\xb0" +
	"\xcfV/&\x8c\xd8nI{\xa5\xb3B\xc2\xc2h\xd9" +
	"VmF\x14-\xd8]\xd9\xd4&\xe1(\xdd\x031\xdf" +
	"y\xf1V\xb6\x08\x96\xb6L\xb0\x1aY\x8e\xba\x07\xa4)" +
	",\xea@\xcf3]C\x8e\x9d\xea\xd0G\xe5\xa29\xce" +
	"\xc6x\x93\x97r\x13\xac\x163\xac\xb4\x94\xed\x19Y\x9b" +
	"\xd5\x96\xb3\xb2R\x1a\x13:\x05\xc6\xb0\\\x91\x1b\x1dA" +
	"\xc2\xf2\xcaPf\x82\"6mu\x87\xd6Z\x09G\xd4" +
	"\x96s@\xd3\x09\xf9\x96p\x0f\xe5\xa2\x94\xb7Be_" +
	"\x0dE\xd7*\xc9\xcc\x1a\xdb\x913\xd8\x19\xbd\xcd\x10&" +
	"%sE\xeb\xc6\xba\xfe\xe7\xdf\xa64,\xfa\x9f\x7f\xc5" +
	"z7\xfe\xa1\xb8H\xd8VR>\x16\x16\xe6\xa7x\x8c" +
	"\xe4cmY\xb7\x16\x86\xe7\x13\xcbw*\xbeI\xcd\xab" +
	"l\xc4\x8b\xdb\xca\xf5\x0d\xbc7\x91I`q\x97\xfd\x83" +
	"\xee\x99\xf0\xad\xe3$,\xafpDH\x03\\>V\xb7" +
	"\x87\x85\x93\xd03.\xc5\xf4Q\xe9}\x15\xab\xb6-c" +
	"\xc5\x98`\x11\xa95\x81I\xd7\xa3;\xee*C\xb1M" +
	"{\x10\x81g\xd7\x1acd\x9c\xe7\xd6\x03O\xc4ba" +
	"C7\x0b\xd3\x1a\x06(-\x1c2\xec\xa4\x8c\xe4\xa3^" +
	"\xc0^xl\xc8v[\x13n\x1f\xe5\xe2\x84\xdaN\xa1" +
	"\x17\xd5j\xea\x96\x1bcQ\x19\xa5\x8f\x16\x046\xf4\x1b" +
	"K}\xbf#73JC`\xc7\xf7\x8c\x14\xb1\x1a\x9e" +
	"\xa9\xeb\x94\xdd\xf2p\x04V\xada\xa1\xf4#\xd2\x0ah" +
	"^@\xad\x1c\x81\x95\xd0\xb0\x94\xc1\x8b\xd7\x94\x11\xce\xb0" +
	"h\xa5\x9ca\x8f\x88\x1e;\xe0\xbd\xa5\x13}\"c$" +
	"\xb3$\xba\xfa\xd0RV,I\x1b\x0e\xe9\xae\xed\x8c\xc6" +
	"]'\x1c\xf4\xd0\x1d\xdbv\xa1C,\xac\x97\xa3Q\xbd" +
	"x\xbb\x01\x82\x98\xb02,\x8c\xde*\x19~),\xc4" +
	"\xf0\xe3\xa6R\x9f\x94+\xf0\xce7e\xe5f\x85\xee\xe8" +
	")VT\xf9\xea\x81\x01A\x08\x19\x10\x18\x95\xafb\x8d" +
	"MN\xaaL,\x04\xd9\x8d\x0eA\x93;\xf4\xc1\xe2j" +
	"\xb1n\xb3Z\xe9\xad\xe5\xe2\xb1<\x8e\x00w\x96\x16\xff" +
	"\"\x0b\xdb\x96\x08\x84\x89\xa8\xbeG\x90%<\xe3]\xe2" +
	"\x89\x0c\xa7\xe2XM\xbd\xcd&,\x0b\xe1\xe0\x0c\xcf\xd8" +
	"\x86\xd9f\x0f\x0bV\xeb\x04]\xc2\xe1L\xdc6\xccN" +
	"\x83,\xe1\xe8fW\x9b\x1d\xf1\x96\x95R\xf7\xce6\xcc" +
	"xZ$\x94\xe2\x1d\x84\x98\x08\x07\xbdO\xaf\xb2O\xde" +
	"iH'P\x971@F\xa2C:\x9d\xaa\xd0\xc7w" +
	"t\xbe\x0c*\xe9\x10\xb5\xc5Z\x95\x90\x11Q+\x0d\xb8" +
	"\x02\xe6)\x18M\xfb\x12\xb7S\x1f\xc1\\(\xde\xce)" +
	"\x12\xc3-+\xde\x9f\x91\xc2N\xc5ky\xc1\x9d\xaa-" +
	"g\xc4\xfc\xd27S\xce\xad\x9e\xa0\xc0'm\x98d\\" +
	";\xa5\xbbz\x1f!\xdequ+A\xa2\xa8E\xb6\xa3" +
	"\x0f\xb2\xa8\x90f\xb0t\xbf3#\xa5\xa2\x9b\xd5Ji" +
	"\x98)\x15\xe1\x10\xa31Ww\x06\x85\xdb\xd5F\xc5o" +
	"\x90\xab\xd65R\"\xee\x8a4+\x8e\xfc\x81\xd7YI" +
	"AN\xabe\x8f\x18:\xcb\xef7\x0cg\xfam\xc7\xcd" +
	"\xda\xac\xb6\xc8H\xb90*\x85u\xb4\x14\x13(z\xb1" +
	"VN\xaa\"\xb1\xef\x17\xeb\xee\xdaT:\xac'J\xa4" +
	"]k-\x16NgK\xe9\xba4\xabu\x83\xbb\xcc\x12" +
	"\xf7\x89\x0c\x8b\xa4\x0dG$\x83\xc6JZ\xb0\xe2]\x9b" +
	"L6%\xcd u\xe5\xb6\xb8\x8a\xeb\x81\x7f\xdd\xe1\xef" +
	"\xb7\x16I\xfaE\x8ar\xdej8\x1e\xd8\xc7r\xfd\xa1" +
	"U\xb2rh\xfb\xed\xdc\x0e\x12\x15\x02\xf0\x9c=e\xe5" +
	"\xd7\xc2\x9c\x98<\xb7J$\xd5\xec\xc8\xc5\xcb\xc4\xc4@" +
	"ma\xf9\xf2\x86nX8\x96n\x1a\x19\xbf\x84>\x1a" +
	"\xf0\x85\x8bek\xf4D\xd8\xb5\x83\x1aq\x8b\x94+F" +
	"\xc6o\xc1\x96\xac\x81\xd5X-\xe7\xad\xac\xd7]\xe1\xc4" +
	"\x14\xcf\xeb\xf4\xfc<\xb8y\x81\xf0\xda^\x1a\x97K5" +
	"\xab\xc5\xca^|P\xd0a#\xac#'\x15\xd3S\xfa" +
	"\xa0(\x9e}\xf6\xd2\xf8\x90\xed\xb8\xfd$|9\x15=" +
	"\x9d\x1c5\xac\xc1\xee\xac\xcb\x02\xbf\xa5'\x12\xd9T\xd6" +
	"\xd4Y\xd4\x15\xc9\xd5\xfdzaw\xdd\x17(\xaeH\xf6" +
	"\xe7\xd7\xb3\x92=\xfb@\x19\xdf\x9bjs\xec\xb4\xef\x1a" +
	"\x05\xe6\x0c\xc2T\x87\\\x91l\xcb\xba\xf9\xc8\xbc\xb0\xe9" +
	"\x93\xb6\x1dW$I\x0aK\xa2\x83L6%\x17E\xca" +
	"\x0aO\\\xac'\x8e\\0E\x1b\xf9\x8ff\x02\x83\x96" +
	"\x90\xdb\x9e\x831\xf2\xb6=G\xe1\x84\xe6l\xdcp\xa6" +
	"S\x1fY=0\xa0\xc8\xad-\x91\xb7\xc6i\xb5\xc8\x1a" +
	"\xafM\xa5\x85%\x14\xd7\xd17\x99B\xfa\xcb\xb1\xa2\xfd" +
	"*\xdd\xdfcaa\xcc\x17\x95)S\xd4\xb11\x19\x9d" +
	"\xbaY\x07\xab\xdf\x04\x9c\xfa\x84\x9e\x18\x12\xc9\xc28d" +
	"\\\x91\x8e\x1bw\x0a\xa6.Y\xe6\x19\xa1\xe9A\x1a^" +
	"\xb2l\x91\x87\xcf3\x8a8zr\xc9\xb2\x92\x99\x15\x95" +
	"pQ)u\x07ls\\\xd9\xbb=ZZ\xf8n\xc3" +
	"J\x8a\x11\xef\xf7e/\xf9\xff\xbd\x88\xb1\xc0\xc6Y\xd6" +
	"D\x85~\xbb\xef\xf6\xfesQak(+\xd0'\x0e" +
	"\xadN\x19\x99\x0c\x945Cuc_\x18\xea\xcc6," +
	"|\xff\x0c&^\x1d\xa3\xb1\xcd\x9b\x87\xa5\x9c\xd5\x1a\xb6" +
	"U\xae\xc0\xb0\xed\xad^L\x15\x10\x7f\xed*~\xef\xdf" +
	"\xfc\xc5\xa9\xed9q\xc2\xb1\xd3\x08\\\x95\xe06W&" +
	"k\xba\xf2\xd7\xbe\xff\xa7\xff\xfc\xc0\x86U\xb5?\xcd\x95" +
	"\xce\xa0&\x91\xe9a\x11\xf8*(\xf1\x805\xfd\xdb?" +
	"\xf9\xda\xa97\xf2\xf5e\xbd\x1d\x0f\x16\xed\xc9\x15\xf9\xee" +
	"\xdd\x7fy\xddU\x1fL\xfa\x8f\\\x11\x7f\xa6\x05*y" +
	"\xfd\x83=W/<\xfb\xf0\x8e\\\x09#\xb3^\xee\x1e" +
	"\xb1Z(ApdS\xabM\xdbR\xbc\x9d\xb0\xd5\xc3" +
	"\xc2r\xd7\xc0\xd4\x16\xb40b\xba\xd7,J\x05\xb7b" +
	"r\xf7XB\x17\xbb\xc7\x12wu\x97D\x0fQ\xef2" +
	"5D5\xf2\x02\xcb\xed$\xd3\x82I\xa5\xb8I\x0a\xd5" +
	"\xf9\xf7W\x0c\xda\xc4X|\x08\xd8%\x85\xea\xc9\xbf\xbf" +
	"\xb2\x8563\x16O\x83o\x03WT\xef\xfe\xca(\xdd" +
	"\xc4X|\x04|\x07\xb8\x1a\xe2\x14bL\xbbG\xd6\xb3" +
	"\x1d|7x\xa8\xc2\xbb\xbfr\xbf\xacg'\xf8\x1e\xf0" +
	"\x8aI\xde\xfd\x95\x87\xe9^\xc6\xe2\x0f\x81\xef\x03\x9f\x14" +
	"\xf6\xee\xaf<*\xcb\xef\x05\x7f\x16<\\\xe9\xdd_y" +
	"\x86\xbe\xc8X\xfc \xf8a\xf0\xca*\xef\x02\xcb\xf3\xf4" +
	"}\xc6\xe2\x87\xc1\x8f\x81WU{\x17X^&\x87\xb1" +
	"\xf8Q\xf0\x13\xa4\x10Us\x9aL\xa4\xbdF2\xf7\x14" +
	"\xf8,\x8aO^\xe9\xdd_9C\xbb\x18\x8b\x9f\x05\x7f" +
	"\x87\x14\x1a\xd3\xb3\xd2s0(\xd1\xae;\xc3\"\xe3\xe6" +
	"\xc7\xff\xbf\x16\xfc\xe7K/4\xff\xd7\xcb\xc5S\xa8\x8b" +
	"\x85\xf5\xe01Rn\xda\xd4v\x05qF\x88dL\x9e" +
	"U2\xaa\x1b{\xb0~\xaez\xe0\x7f~\xf5\xc7\xb9i" +
	"2\xe4\xfdR\x8c\x85\xe1{\x8e\x97\x97L\xa3\xba\xc2\xf5" +
	"\xad|\x01/\x8c\"C\xfa\x00iV\xa6L\xce\xf6\xb1" +
	"Z\xdd\x15\x99B\xd4\x19\xfc\xb1\xa99E\xd2\x1d\x9d\xa9" +
	"rJ\x0f\xbd\xb8s\xc6\x8f~\xfa\xf2\xae\\5i\xf9" +
	"C\x08\xa1\xda\xbc\x82a\xbdl\xb9OV\x8e\x84cg" +
	"2m\x8e\xad\xa4[\x93z\xda_E\x0b\x07N\xde\x02" +
	"5n8\x02\x0bUN#&M\xa4\x11\x9d\x12u\xa2" +
	"\x98\xbc\xdauUk[\xac\xdf\xbeE\x0f\x9bY\xa9#" +
	"\x95\xb9K^\xf5W\xcce\xac\xb7Y\xa5\xdeE\xd0\x04" +
	"OC\xea\xaf\\\xc2X\xef\x02\x95z\x97)\x14\xd6\x13" +
	"\xc9\x9c\xc1\x8b\x0c\xebf\xb6\xe0.}\xe2\x05\xb3\xb8e" +
	"o-\xb9`\xd6\xdb\xa3\x86H\x93\xea9Gy\x95\xb1" +
	"\xf8\x02E\xa5\xf82\xa5\xa0\x9e\x8b\x15\xa8\xd5\"\xe0\x15" +
	"J@=\xafS\xfa\x18\x8b/\x07\x8f)\x01\xf5lU" +
	"\xbe\xc9X<\x06\xde\xa3\x04\xd4\xb3S\xf2\x1e\xf0\x0dJ" +
	"@=o\x93|\x03\xf8\x90\x12PO\xa1@\x0d\x93\xe0" +
	"i%\xa0\x9e)\xe5\x070\x0b\xe0\xdb\x94\x80z\x8e*" +
	"P\xc3m\xe0;\x95\x82z.\xbdO\xf9\x0cA\xcf!" +
	"\xd8\xa7\x04\xf4\xf3Q\xe5\xbf\x19\x8b?\x06~\x00\xbcz" +
	"\xb2w\xc1\xec)\xe5N\xc6\xe2O\x82?\x0b>\xb9\xc6" +
	"S\xd0g$?\x08~\x18\xbcf\x8aw\xc1\xecy\xf9" +
	"\xc3\x87\xc1\x8f\x81O\x99\xea]0{Y\x81\xbd8\x0a" +
	"~\x02|j\xadw\xc1\xec5\xc9\x8f\x83\x9f\x06\xaf\xad" +
	"\xf3.\x98\x9d\x92\x1dq\x1a\xfc\x1cx]\xbdw\xc1\xec" +
	"-9.\xef\x80\x7f\x08^\x7f\x89\xbc`\xa6} \x07" +
	"\xe6<\xf8\xc7\xe0\x97h\xde\xfd\xb2\xdf\xa2|\x9f\xaaR" +
	"\xbcFUh,c\xd9[\xfb\x84+\x14\x0b3\xbbM" +
	"O\xeb\x09\xc3\x1d\xed\xd4G\x02\xce\x12\xca\x14\xc2\xeeb" +
	"\x0a\x9f\xa2\xe0w\x0c8\xf6\x9d\xc2Z\xaf\x93+\x9c\xb5" +
	"V\xdc\xb2ik^f\x1a[\xb2F\xb2\xbc\xcc;\x1a" +
	"\xb5\xd7\x925`\x98\x88p\x03aPJ\x1f\xc1\xcc\xcc" +
	"\x05\xd0\xa5\x1e\x1c|3)/\x16\xa3u)a\xba\x94" +
	"\xdbk\x0eg\x1dQ$mM$\xb2*j\xc0\x8b\xe7" +
	"\xcf.\x8bv\x0e\xcby\xfa\xf2\x88b\x8d\xedt\xe0u" +
	"\xa2I\xe9\x13\x17\x1c7\xdbq\xe0\x97\xb1\xa8m\xf5\xe9" +
	"\x86UV\x80\xd6\x06wr\x1c!\xee\x14\xe5\xdb\x99\x93" +
	"25\x900\x10\x80K\x02\xfb\xda[e/\x90\xb7\x95" +
	"\x84\xa8\xbe\xe8m;\xf5\x91V%\xe9\x1d;\xeaf\xcc" +
	"+U2\xc6=z\xe2\x0e\x166\x02\xe7\x87\x13\xcc\x0e" +
	"#\xe8J\x7f\xa2])5o\x8c\xf5\x86(pY\xbb" +
	"\x9e\xbe8\xe6[<\x93\xa9Y\xd1\xbb;\x7f\xa9\xf5e" +
	"\xf5z\xc6\xe2G0[\x8f\xab\x0a\xd1\\\xcf\xe8\xbc\xa2" +
	"\xc2U8\x0e|Z\xf5-!\x8c\xce)u\x09\x16O" +
	"\xf0\xb3\xe0\x8a\xe2\x19\x9d3\xb2\x9a\x93\xe0o\x82\xcf!" +
	"\xcf\xe8\xfc\\\x95\x97K\xc1\xdf\x03oR<\xa3\xf3\xae" +
	"\xfa\x1b\xe8\x0e\xf8\xc7\xe0\x11\xd53:\xbfU\xff\x83\xb1" +
	"\xbe\x10t'\x04\xdb\xa5z6\xa7*\x84\x9f\x0d\x81\xd7" +
	"\x81\x87B\x9e\xcd\x99\x12B3\xeb\xc0\x1bB\xfe\xd5X" +
	"\xb8\x043BP\xf1\xe9\xe0\xcd!\xffj,L\xce\x9c" +
	"\x90\xcc\x10\x07_\x18\xf2\xaf\xc6\xc2\xe4\\\x11\x82\xad[" +
	"\x00\xbe\x0c\xbc\xb2\xd239\x8bC\xd2\xf6\x82\xaf\x00\xaf" +
	"\xaa\xf2L\xceu!\xb8\x16\xcb\xc1c\xe0\xb3C\x9e\xc9" +
	"i\x0d\xc9\xcb\"\xe0=\xe0\xd5\xd5\x9e\xc9\xe9\x0cI\xdb" +
	"\x0b\xbe\x01|r\x85grn\x93\xf5\xdc\x0a\x9e\x04\xaf" +
	"\x99\xe4\x99\x1c]\xd6\x93\x04O\x83O\x09{&'\x15" +
	"Bw\xa6\xc1\xb7\x81O\xad\xf4L\xceh\xe8G\xb0\xbd" +
	"\xe0;\xc1k\xab\xbc+\xad\xf7\x85\xdef,\xbe\x1b|" +
	"/x]\xb5w\xa5\xf5\x11\xd9o{\xc1\xf7\x83\xd7O" +
	"\xf6\xae\xb4>.\xeb\xd9\x0f~\x10\xfc\x92\x1aN\x971" +
	"\xa6=\x1d\x82\xcft\x10\xfc0\xb86\xc5\xbb\xd2\xfa|" +
	"\xe8\x0d\xcc\x1e\xf0\xe3\xe0|\xaaw\xa5\xf5\x15\xc9O\x80" +
	"\x9f\x05\x9f6Y^i\xd5\xce\xc8\xfe?\x0d~\x0e\xfc" +
	"\xd2\x1a\xefF\xeb[\xb2\x9f\xdf\x94\xe3^\xa1P\xfde" +
	"S85`\xdc+\xe4\x85\xac\x0a\x8c#\xf8\xf4\xa9\x9c" +
	"\x1a1\x8e\x152A\x1c|%\xf8\x8c:\xefF\xeb\x0d" +
	"\x152A\x1c\xbc\x03|\xa6\xe2\xddh][\x81\xf1m" +
	"\x07\xef\x07\x9fU\xeb\xddh\xed\xad\x907T\xc17\x80" +
	"7\xd4y7Zo\xab@;o\x05O\x827\xd6{" +
	"7Z\xf5\x0a,A\x1b\xc1\xcd\x0a\x85\xa2\x19\xc3\x15=" +
	"pi\xf6}y\xcd\x07o\xfc\xed\xa3\xcf\x95\x04\x0d." +
	"\x19\xb6\xd5)\xdc!;\x9al\xb3\xb3\x96\x9b\xf7\x1c\x84" +
	"5,\x1f\xac\xfe\xbb\xfd\xdb.\xbfi\xec\x88\xff`T" +
	":]\x10\xfc,>\xed\xaf\xce\x9c\xf8\xe7s\xf9\xa8'" +
	"s\xa3<\xcc\"i\xc9K\xa3\xd1\xad\xadn\xca\xce\xa4" +
	"\x95!\xe1\x18\x89\xee\xa5m\xe57\xa6\x8a\x8b\xb5u/" +
	"\xc9\x95\x8b\x14m~G2FJ\xb6\xe1\xf6\xcd\xd3~" +
	"\xf2D\xed\x81\xb1\\\x1b\x06\xfd,\x1bo\x81\x19\xb0\x9d" +
	"h\xca{\xb0n\xec\x8a\xa9\xf5\x1d\xe6\x95U/\xe6\xe3" +
	"*\xb9#jf\x99\x9a\x828\x7f\xb9? \x86=&" +
	"\x7f\xdb\x07~j\xfe\x9b\x0b\x812\x9d\xb6\x91a\xdeR" +
	"QW\xf8\xcaB\xa0@\xb73\xa8\xb3\xb0e$\xa8\xae" +
	"\xf0\x9d\x84\xe0\x8f8\xba\xc5\"\x99\xb4\xed\xb8TW\xf8" +
	"h\x84_\x02K\\\xf7\xc8\xe8 \xf99@\xc1\xe30" +
	"?\x89\xaa\x8dr_\x05 \xb4!\xffq\x8d\xdcod" +
	"S2\x7f\x87EL#\x13X\xa72\xd9T\xb73\xb8" +
	"F\x90\xcc\xed\xc9\x14e\xa0$u\xc3\x1c\x8dgS\xe4" +
	"g\xfed\xd4\xc0\x83y\xa1|\xdcq\x8d\x92\x8asr" +
	"E\xeeX\x1a\x09\xbf\x8e;E\xd8\x89u\x96\xfc\xbcn" +
	"Q\xae@\xd4\xb8S\x04\x0b\x0ceS\xd9\xcc*\xdd$" +
	"\xddJ\x886\xddq\"\xa3\xdd\xc3\xe5~\xa6\x90\xa7!" +
	"\x17\xe2\xc2[\xd8iW\xa6&*\xd6j\x7f\x93\xc6;" +
	"\xa1\x10\x81m\x96B\x99>\xe1f\x1d\xab\\\x19\xbf\x9f" +
	"\xe3\xe4\x8a\xb4\x8c\x8c\xca\xc4=\x09\xd3H\xe9\xae\x90q" +
	"\x91^r8UWX\xe7r\x81\x8bW\xe3j\x16A" +
	"<\x9d\x8fpjr\xdbl\x8e\x186\xecl\x86b\xfa" +
	"h\x06!\xb7:\xbe\x8c\xcc\xaa\x94\x9b\xa8\xeb\xd2\xb6\xd5" +
	"%Fj\xdd\x98>\x9a\x0f8\x92\xfahf\xbd\xe1\x0e" +
	"\xf9qXnO\x04\xd3\xa9+\xee:\xac\xe8\x08\x06\xd4" +
	"K\xfd+M\x8a\x84Df8F\xe3\xc5yU\x9f\x18" +
	"\xd0\xc4\xfd\xa9-'v0\xa4\x901E\xbb\x1a\xa2z" +
	"\xb9\xbc\xbf+c\xe3\xf7\x10\xd4^ \x85\x18\xf3\x96\xf7" +
	"\x8fd\x88\xfd!\xa9\xd4\xa7\x04V\xf7\xdf\xc9\x08\xfbc" +
	"\x94\x9e.C\x0a\xff\x8b\x15\xd3\xa4\xa7\xcb\xe1\xe96\xc9" +
	"\x90B\xf1V\xf7F\xe9\x917\x80/\x97!\x85\xea\xad" +
	"\xee\xd7H\x0f{Y>\x04\xa9\x08y\xab{\xa7\"\xaf" +
	"q\xe4C\x8dI\x8a\xb7\xbc\x0b\xc9\x0b\xa1FX\xf5\x96" +
	"\xf7\x94\xf2\x9d\xa2P\xa32\xe4-\xef\xa3\x8a\xbc\xae\x01" +
	"\xbeCF\x14\x15\xde\xf2~\x8f,\xbf\x03\xfc1\x19Q" +
	"L\xf2\x96\xf7\xefI\xcf\xfe\xb1|\xe409\xec-\xef" +
	"\xcf+?\xcaE\x0e2\x12\xa8\xa9\xf4\x96\xf7S\xca*" +
	",_\xe0\xef\xc9\x88\xa2\xca[\xde\xdf\x95!\x97\x8c\x04" +
	"B\xf0Z\xa6Vp\xaa%\xd2H\xbd)\xe0\xf1\xd7\xd7" +
	"V{\xab{\x95\x8a\xd7\xaa\x04o\x06\xaf\x9b\xec\xad\xee" +
	"s$o\x02_\x81\x08!\x97\xb6A\xa9\xd6a\xdd0" +
	"\xf5MaSt\x05\xe7B\xd6\x14=:\xab\xf5\xc3\xe7" +
	"\xe5\xf3\xdc\xfb~)\xfe\xf1\xe5\xbcr\xd8\xd6\xb0\xf4|" +
	"\xd5\xf1\xdb\xdf2mu\\\xf6x\xd2\x18\x18\xc8f\x0c" +
	"\x9bE\xad\xa2\xd4\xec|\xde\xa6\x91I\x0b'S\xb6\xc6" +
	"\x9c\x8cl\xef\xd9q\xe72\xc3\x99\x0e\xa1'\x86\x0c\xf2" +
	"Ri\x02\x9b\xfd\xa6\xe4\xd6 \xb5\xba\xab\xb0\x90\xe8\xaa" +
	"3\x1a\xd8P\xed\x8a\x89\xb4\x9da\x11\xa3x\xcdJx" +
	"\xc7\x09$\xd6xy\x09j\x99\xa3G\xdb\x11\x9e\x86\xdd" +
	"\"L;a\xb84:\xbeU\x9f\xe6(\xeen,\x19" +
	"]\xddK\xcb\x9d\xd0uu/\xd5\x19m\x19wx0" +
	"\xc1a\x8f<\x1062$;\xcb\xb6\xc6\x1f_\x09'" +
	"a\x9b\x9e\x87 \x93\xd7K\x0b|\xa2\xd7/\x13\x0f\xc7" +
	"\xe9\xfe\x025DUR\xf7\xab\x08>v\x1d\xb4\xb9!" +
	"\xb0\xdd7C*\xf9t\xe0\xe6\xe0v\xdf\x1c\x8224" +
	"\x83/\x0an\xf7]IP\xaaE\xe0+\x82\xdb}\xd7" +
	"\x91\xdc\x7f\x00\x8f\xc9\xed>\xee)\x7f\xab\xe4+\xc1;" +
	"H!\xf2\xbfV\xb3V\xee\x0e\xb6\x03')\xf0\xb5\x1a" +
	"\x9d\xe0\xb2%\xc1\xd3\x14\xf8ZM\x8a~\xc6X\xdc\x05" +
	"\xdfN\xbeK\x0e\xdd\xbfK6\x7f\x1b\xf8N\x82\xf2\xa4" +
	"\xdaG\x93\x8e\x9eUL#\xd1f[\xc9\xac\x7f\xb8\xdc" +
	"W[H\x1ag\xfe\xe5\x8d\x98H3u\x82\x08W\xf6" +
	"f\xc9Q\xaa%\x06\xe5\xf1>\xc5\xc4\xa0#\x84\x97\x1e" +
	"\x9d\x0fY\x87\xf4r\xd1y\x06\x0b\x05\xa3B^\xb0\xa9" +
	"\xa76%\xf5>\xc1\xc2\xc92GO~LJYG" +
	"\x9e\x0d:\xb5E\xb1\xeb\x90|5\xd3P\x8a_\xcd;" +
	"\xc5\xca\x1f1\xb9\xfdr\x0e2U\xa4\x7f\xcf\x15\xa4\x90" +
	"%\x96\x9fG\xaa+w\xc4:\xf2\x11b\x85\x82X\xa1" +
	"\x12F\x8f+\x0a\x91\xeaM\xa3z\xb9=T\x07\xdc " +
	"w?\xb0\x86\x10i3\xa4m\x9e\x0e\xde\x9c[[T" +
	"\xb9\xbb\x85\x10\xa2\x19|\x91\xe2G\x8e\x98FWJ^" +
	"\xd8\xde\x0aUz\xd3\xe8:\xb9\xb6\x14\xb6\xb7*\xaa\xbc" +
	"y\xd4\xaa\xec*\xda\xde\x9a\xe4\x87\x88\x9dr\x17Hn" +
	"o\x99r\x0d\xf1CDC\xae-C\xf9\xb5\xa2\xd2\x0f" +
	"\x11\xefQ.\xc9mW\xed\x95k\x88\x1f\">\"\xdf" +
	"k\x0f\xf8A\xb9\x86\xf8!\xe2\xd3\xb2\x9e\x03\xf9]\xa6" +
	"\xc9~\x88\xf8\xb2\xac\xe7\x08\xf8Y\xb9\x86\xf8!\xe2\x19" +
	"\xb9\xb6\x9c\x05\xbf \xd7\x90jo\x0d\xf9H\xbe\xef\x05" +
	"\xd9\x9dr\x0dQ\xbd\x10\xb1\x1ekH\xbc\x0e\x8bB\x83" +
	"\\D&{\x8b\xc8\x0c\x15\xef\xdb\x00\xbe\\.\"5" +
	"\xde\"r\x8d\x0a\xbdY\x0e\xde\xaf\x16>{\xa4\xf5\xaa" +
	"h\x7f\x0f\xb8)\xb7\x9fl\xc3\x8cg\x9d\x01\xd2\x13B" +
	"\x8ew\xd4\x1b\xf0\x89\xd7\x97+\xce,\xb8Di<z" +
	">\xb7\xbe$\xf5T\xda\xb0\x06\xd7\xb0\x88\xdc\x95\xf5\x93" +
	"[\xbf\xf3(\xfe\xf7\xaeLn\xcd9\xfbJ\xca\xba\xc5" +
	"\xf5\xc2\x14/\x81\x8c\xea\x0a\xdf\x0c+\x09\x0cd\xd9U" +
	"\xb6\xeb\xe6\x92\xcd\xca\x94\xb5d\xaeZ\xf7\x00\x8b\xca\"" +
	"\x99\xc0\x11]>\x8d\xcd\x93\x14\x1d\xdfIKoS." +
	"\xbb=le\xca\xa6\\\x14\xc7\x1f\xc5\x05hx\xdc\x02" +
	"b\x9b\xd9\x94\xe8\xd4Y\xad\xeb\x18#\x13I\x09\xc2n" +
	"39\xae\xbeM\xe3\xcc\xbb\x8e\xa2=\x0e\xc9\xa3\xd1\x98" +
	"\xa1G\x06mK7\xcb\x17\x8b\x0b%\x91\x95\xa9e1" +
	"C\x97\xe5\xc6-\x17CBw\xd7\x98\xf6V\x16\x084" +
	"\xc0`8(g9X\xd9\xc7\x8a\x8ax\x09T\xe5J" +
	"\xe9i\x9d\xd5&\xca\xe4\x05}*[\x93\xbbmP\xfa" +
	"\x81\xb5\x10\xa9!Z)-\xcd\x940T\xbe&\x0c\xf7" +
	"3\xacP}\xd4_\xb1\xa6\x85aR8xSX!" +
	"\xfa\x82\xb7`5\x86\xa1IM\xc0\x0b\xc3\x0a\xd5\xf9[" +
	"QW\x84\xe5^\x0e\xf02\xd4r\x83\xbf\x15\xb58\x0c" +
	"'p\x19\xf8J\xf0\x15\xfeV\xd4\x0da,L+\xc0" +
	"\xdb\xc1\xa9\xc634\xabekb\xe0=\xe0\xca\x14\xdf" +
	"\xd0\x84\xe5w\xcb\xc07\x84\xfd\xf5\x10\x86\xe66Y\xff" +
	"\x06\xf0\xa1\xb0\xbf\xbf\x0eC#\xc2\xaf2\x167\xc1G" +
	"\xc2\xfe\xfe:\x0cM6\x0c\x835\x02\xbe#\xec\x1b2" +
	"\x18\x9a{\xe4\xefn\x07\xdf\x17\xf6\x17D\x18\x9aGe" +
	"/\xec\x05\xdf\x1f\xf6\x9da\x18\x9a\xc7\xe5\xef\xee\x07?" +
	"\x12\xf6\x9da\x18\x9a\x17d=\x87\xc1O\x87}g\x18" +
	"\x86\xe6\x94l\xffi\xf0\x0f\xc3\xbe3\x0cC\xf3\x81\xec" +
	"\x87\xf3\xe05\x95\xbe3\x0cCSU\x89\xf5\xbf\xa6R" +
	"\xa5\xf8\x82J\xdf\x19\x86\xa1i\xa9D{\x9a\xc1WV" +
	"\x06\xf6\xa2n\xa8\xc4{\xad\x04\xef\xa8\xf4\xbda\x0e\x07" +
	"@\xd6\xd3\x01>\x04^W\xe5\xedE\x09\xc9\x87\xc0]" +
	"\xf0\xfajo/jK%\xda\xe9\x82o\x07\xbfd\xb2" +
	"\xb7\x17uW%\x0c\xdfv\xf0\xdd\xe0\xdaTo/\xea" +
	"~Y~7\xf8^p>\xd9\xdb\x8bzD\xf2\xbd\xe0" +
	"\xcf\x82O\xab\xf1\xf6\xa2\x9e\xa9\x84\x83q\x08\xfc(\xf8" +
	"\xa5S\xbc\xbd\xa8\x17+1\x7f\x8e\x80\x1f\x07\xbfl\xaa" +
	"\xb7\x17\xf5\x8a\xe4\xc7\xc0O\x82O\xaf\xf5\xbe\xae\xf6z" +
	"%\x1c\x92\x13\xe0g\xc1g\xd4x{Qg*\xe5\x96" +
	"(\xf8y\xf0\x99u\xde^\xd4\xfb\xb2\xdf\xde\x03\xbf\x00" +
	">\xab\xde\xdb\x8b\xfaH\xd6\xf3a\xa5J}U\x0a\xd5" +
	"7L\xf1\xb6\xa2~W\x89a\xfc\x18\xc5\xa7\x837^" +
	"\xe2mEM\xab\xc2kM\xaf\xc2:\x0b>[\xe34" +
	"\x0f\xebl\x95\x0c.\xc0\x17\x82Gj\xbd\x8f\xab]Q" +
	"\x85n[\x08\xbe\x1c\xbc\x89{\x1fW\xbb\xa6\x0a\xc3\xb5" +
	"\x1c<\x06>g\x9a\xf7q\xb5VY>\x06\xde\x03>" +
	"\xf7R\xef\xe3j\x9d\x92\xf7\x80o\x00\x9fw\x99\xf7q" +
	"\xb5\xdbd=\x1b\xc0\x87\xc0\x9b\xa7{\x1fW\x13Ur" +
	"x\xc1]\xf0\x96\x19\xde\xc7\xd5\xb6T\xe1\xbd\xd2\xe0\xdb" +
	"\xc0\xe7O\xf5>\xae6Z%\xb72\xc1\xf7\x82_>" +
	"\xd3\xfb\xb8\xda#UP\xa3}\xe0O\x82/\xa8\xf5>" +
	"\xae\xf6\x84|\xdf\xfd\xe0G\xc0\xaf\x98%\xbf\xae\xa6\xbd" +
	" \xf9a\xf0c\xe0\x9fi\xe0t5\x91\xf6r\xd5\xdb" +
	"\x8c\xc5\x8f\x83\x9f\x06\xffl\xa3\xfc\xb8\x9avJ\xf6\xe7" +
	"i\xf0s\xe0\x0b\xeb\xbco\xab\xbdU\x85i\xf2\x0ex" +
	"\xa8Z\xa1\xfa+\xeb\xbdo\xabQ\xf5\x7f\xc3-\xaaF" +
	"\xff\x83_u\x09\xa7\xa5\xe8\xffjL\x93&\xf0\x15\xe0" +
	"W\xcf\x96\xdfV\xd3\xae\xabF\xfd+\xc0\xdb\xc1\x17E" +
	"\xbcO\xab\xad\xaeF\xbf\xb5\x83\xf7\x83/\xd68}\x0e" +
	"\xebx5\xfa\xa7\x07\xdc\x04_\xd2\xc4\xe9Z\xf83\xb2" +
	"\xbc\x09>\x02\xbet\x8e\xf7i\xb5\xac\xac\x7f\x04|\x07" +
	"\xf8\xb2\xb9\xde\xa7\xd5\xee\xa9\xc6t\xdb\x0e\xbe\x1b\xfc\x9a" +
	"y\x9c\xae\x87\xba\xc8\xf2\xbb\xc1\xf7\x82\x7f\xae\xd9\xfb\xb4" +
	"\xda#\xb2\xfe\xbd\xe0\xfb\xc1\xafm\xf1>\xad\xf6x5" +
	"\xa6\xe7c\xe0\x07\xc0\x97\xcf\xf7>\xad\xf6T5\xcc\xcf" +
	"\x01\xf0C\xe0\xd7q\xef\xdbj\xcf\xc9\xdf}\x16\xfc\x04" +
	"\xf8\xf5\x97{\xdfV{\xad\x1a\xf3\xe7\x04\xf8Y\xf0\xcf" +
	"O\xf3\xbe\xadv\xa6\x1aa\xc3i\xf0\x0f\xabs\xb7\xad" +
	"\xdb\xec\x14\x8b\xa6m\x0b\x91Z]\xe1\x1b\xae9W\xc2" +
	"\xb2\xb7\xb6\xd9\xa94\x8b\xe4J\xe4\xbf8\xeb\x97\x18\x89" +
	"\xb7\xca\x0b\xaaJB7\x83\x8b\x10\x9b\xd8\xfb\xf9\xe9\xad" +
	"\xbf\x99\xa4\xce\x1a\xcbo2\x0eo]oX\xc9x\x9a" +
	"\x84H\xca\x8b&\xe4\x06\xf6S=\x19\x0b\x8b@v\xdc" +
	"\xff\x93\xd7\xe2]\xad^=L\xde5\xb8\xa2\xdc\xe8\x9c" +
	"L)J\x1f.M\xb7\xba\xd8\xd5l\xdd\xdbW0Y" +
	"Tx\xc7i\xa5\xdb\x04z\xda0M\xdda\x91\xd1>" +
	"#S\xf0\x0ds\x9c$\xee\x93\xa7\x86\x13=\x1a\x1d\xbd" +
	"h\xd5\xe4\x89\xaf]4\xde\x07\xc9\xdd\xfd\xf3\xd2\x09\xcb" +
	"\x09]G\xa7\xdck\x97\xd9\x93\x18\x90\x97\xfe\xf44<" +
	"\xd42\xfe\xc9\x80\x99\x1diu;l\xda*\x1c\xb9\xf1" +
	"\x10\xd6\x03\x1b\x0f\x83\x8e>l\xb8^ \xae\x9b\xebu" +
	"\xb7\xcc\x06\x83\x7f#NP\xc2\xf0n\xbc\xa8\xc5\xb7\xe1" +
	"\xf2\xbb\xe2\xadI\xef6\\9Y\xcc\xc8$\x86ju" +
	"'\x90 \x1c\x14{\xf7V\x0b3\xe2\xd38o\x9f&" +
	"<4\xfc\x13_V|\x16\x90\xbb\xccV\x82\x87\x13\xde" +
	"\xf59\xa6\xe6=\xfd\xc05\xb6\xa8\x17\xcc\x96\xb6#\x1f" +
	"\xe2F\x92\xd9\x84H^\xfc+\x05&\xa6~\xff\x90\xc1" +
	"\xa2\x89;,Q\xe6\x16\x9e\x17\x0f\xf4\xd3\x90\xe1\x15\x08" +
	"&\x81\xa7&\xda[*\x95t\xd4\xa2\x92\x82\xea\xc9\xe3" +
	"Y\xc3)\x7f\x08\x9cNu\xea#=\xc2!\xb9##" +
	"/\xee\x14\xe5~o\x85O\xdcj\x90S\xf6\xeczx" +
	"k\xa7aMX\xf7p\xa2K^\x96*;u\x86\xb7" +
	"v\x09\xb7OO\xb2\xa8Qr\x03_8)\xdd\x12\x16" +
	"\xb9\xeb\x0dS&y\xf7\xd8\xc6\xf8\x8c\xd1\xe1D\x0f\x06" +
	"\xd1R\\}P\xc4\xfd$t'\x90\xfb\xf9i6\x9a" +
	"\x86\xb7\xca\xbb\\i\xca\xdd\xe5\xfa}.A\x1c\x99\xbe" +
	"\x92\xb1\xfc=\x08j\xcf\xa6\x8cd\xf1\xb9\xb7\x97\xff\xa3" +
	"\x9bJI\x1d\xe5\x149#s\xec]\xa1$\xdb\xfd\xa9" +
	"\xed\xcf\xec\xa87\xb5\xcb\x85q\x81#\xa2\x09\xa4\x04a" +
	"\xc21\x82\xb72\x8ade\xf3\xf9{lG\xb0\xe8-" +
	"2\xb0\x1b\xdf\xef\xf2\x9b\x1d.\xe9}^Zy8\x9f" +
	"\x8c+\x0f_\x9c\x01=!\xfa\xc8\xce\x0e\x0e\x95\xcc\xe0" +
	"\x9c\x8cE\xb2Vw\xe0\xb6d&\x9bB\x94\xaeSB" +
	"\xf4I\xc9\xf8g\xd6\x13\x0c\xe8\xb8{\xa7e\xb7\x7f\xe4" +
	"\xf6\xe3z\xd8k\xa7O\xa4\xeca\x9d\xcc\xff\xb7\x8c\xe9" +
	"\xe2l\xe8\\\"\xc9\x1a3\xcbhd\xa28\xb0\xf2b" +
	"q b\xff\x94\xe5ea\xc9\x8f\x0e\x88d\x17\xf4'" +
	"\x9d6\x0d\xef\xc3\x1f=\xba\\\x8b{\x88z\x1b\xf2y" +
	"Y\xcf\xcdd\xac\xf7\xa0J\xbd\x87\x15\xca\xa5e=\xef" +
	"0\xd6{H\xa5\xde\xa3\xfeY\x85\xc2X\xfd\x8b\x9b\x18" +
	"\xeb=\xa2R\xefq\xff\xa0Be\xac\xfe\x15\x94<\xa6" +
	"R\xefI\xff\x94\"\xc4X\xfd\xeb\xaf2\xd6{Z\xa5" +
	"\xdes\xfe\x11E\x05c\xf5o\x01\xbe\xa3R\xef\x87\x08" +
	"\xc9\xbc\xbd\xcb\xfa\x0fv1\xd6\xfb\xa1J}\xa4\x90:" +
	"\x90\xa6\xba\xb1+7\x1c|\xf7?\xbe\xf4\x07?\xc9\xbb" +
	"\"z*m\x1a\xd6 +\xf3\xd9\x87\xae~\xdda\xe1" +
	"A\xe1\x8e\xa7\x91A\xe1.-\xdc;\x1c\xf0\xcf\x03\x15" +
	"\xe1\x14wI\xf0\xfaz\xa0\x8c>R\xbe\x8ck\xa7c" +
	"\xf2<I\xe6-\x9b\xfa\xe8\xef\x93L\x12\xf7OU-" +
	"#!c\xf5\xa8\x17\xacc8\xf6\xab!Z C\xf5" +
	"\x94L\\0C\xf0BC\xf0\xd2\xfdP=\x1b\x82w" +
	"7\x02\xbe#\xe4\x9d7!T\xbfG\xe6Wl\x07\xde" +
	"\x1d\x0al\x0a\xde/\xf3\x1c\x0a\xf9\x09\xb9M\xc1Gd" +
	"\xbeA!?A%/V\x7f\\\xe6?\x14\xf2\x13B" +
	"\x8a\x17\xab?-\xeb)\xe4'T\x90\x17\xab?/\xeb" +
	"9\x0c~:\xe4\x1f8!V?%\x9b)\xf3\x10>" +
	"\x0c\xf9\x07N\x88\xd5?\x90y\x11\x1f\xca<\x93\x0a?" +
	"\xc6F\xac>E\xe6\x03\xd4T \x06\xae\xf0cl\xc4" +
	"\xea-2\xaf\xa0\x90\x87\x80\x18\xbbF\xe6!\xc0Y^" +
	"\x01~k\x85\x1fc#V_'\xeb\xe9\x07OW\xf8" +
	"16b\xf5\x94\xac\xc7\x04\xdfY\xe1\xc7\xd8\x88\xd5\xef" +
	"\x93\xf5\xec\x00\x7f\x0c|\xaa\x7f\xb2\xf4\xbd\x8a\x9b\x10\x0c" +
	"\x81\x1f\x02\xaf\xf5\xbf\x85\xfe\\\x85\xfc\x849\xf8\xd1\x0a" +
	"\xff\xc4\x09\xb1\xfa\x8b\xb2\xfe#\xe0\xc7\xc1\xebk\xbcX" +
	"\xfd\x95\x0a8\xef\xc7\xc1\xdf\x01\xbf$\xe4\xc5\xea\xbf\x94" +
	"y\x11\xe7\xc0\xcf\x83k\x15^\xac\xfe\xbe\xcc\x7fx\x0f" +
	"\xfc\x028\x9f\xe4\xc5\xea\x1fU\xc8/}\x82\x87&!" +
	"\xc6\x0e{\xb1:MB?\x87&\xa1?\xc1/\xad\xf4" +
	"b\xf5)\x93d\xde\x0ex\x03\xf8eU^\xac>c" +
	"\x12\xc6\xb7\x01|\x01\xf8\xf4)^\xac\xde\"\xcb/\x00" +
	"\x8f\x81\xcf\xa8\xf6b\xf5\xd6I\x08Vb\xe0=\xe03" +
	"'{\xb1z\xe7$\xb4\xb3\x03\xfcV\xf0Y~\xde\xc8" +
	":Y\xfeVp\x17\xbc\xa1\xd6\x8b\xd5\xb7L\x92\xa9\xce" +
	"\xe0\xbb\xc1\x1b\xfdX\xfd~\xc9w\x82\xef\x07\x9f\xed\xc7" +
	"\xea\x8fO\x92y2\xe0G\xc0#\x97x\xc1\xfa\x0b\xb2" +
	"\xfca\xf0\xd3\xe0M\x9a\x17\xac\x9f\x92\xfc$\xf8y\xf0" +
	"9\xdc\x0b\xd6\xdf\x97\xfc=\xf0\xca0\x82\xeci^\xb0" +
	"^!\xf7\xb0B\xb9\x1d\xaf\xfay5^\xb0\xde\x18\xfe" +
	"Np\xcb\xab\xbey\x8a\x17\xac_\x11F{\x16\x82/" +
	"\x07o\x99\xea\x05\xeb\xd7\xc8=\xa0\xc2\x9e\xd7\xfcZ/" +
	"X\xbfA\xee\x19\xad\x04\xef\x08+p\x06\x13\xb6\x93\xb6" +
	"\xf3KB\xee\x9c\xdb;\xc5\x12\x16\x19\xaec\x0c\x18\x89" +
	"\x92|\x92q\xc1\xd3\xd7\xfe\xe5\x873vG\x7f\xfd\xd7" +
	"\x85\xa4\x95\x8b\xed\xd3\xe6\xaf,\xfb\xe6\xc6/R\x88\x89" +
	"\xe0Lw;\x83$m\x91\xeeJ\xcf<\xd74\xc3\xcf" +
	"K \xdbjM\xd9\xd9\xa2+\x97z\xc2mM\xa5l" +
	"K1\xf4\xee\x11#\xa9\xbb\x13\xb9>z\xc2\xed\xc2\xab" +
	"\xd1\x80oDk\x83\xb7_\x03\xa5b\xc22\\\xf2\xfa" +
	"\xc05\xa2^u\xe3\xca\xd9\xa95\xba\xfcP\x88\xe9\xea" +
	"\xf1l\x8aMP`-\xab\xb5\xd2Yw\x02i\x9c\xa9" +
	"\xe3o\xb1\xe9v*n\xca\xe4\xc3\x89\xabF\x81\x89\xab" +
	"\x86\xb4l\xd5\x89U\xba\xa9[\x09\x99\x91^z\xd6+" +
	"\x12v*mg\xa4\x17\x11\xb8o\\\xf4\x85\x97\xf1\xdf" +
	"r1,\xe1\xb8q\xdb\xa0\xdc:Bm\xa55[K" +
	"l\xf9q\x00\x16\x0e\xc6\x0by\x1aM\x88dW\xc0\xe9" +
	"\xc8\x09(!\x92r(\x8a\xbf7\xb0:agFI" +
	"^\xa6\x18A\x88e\x05\xdc\xa3\"q\xb9\x8f\x99X\xc2" +
	"\x85\x03\"\xc8\xd1MyIK\xbd\x98p\x82\xa1\xf7." +
	"\xd0\xb5/\xa5[d\x04a\x1a\xe1L\xf0\xbd\x86\x96J" +
	"\xce\xa22\x17(p\xfd)\xb5\xa9\xad{\xc9\xeaa\xb2" +
	"Mya\xb6/\\\xa6\xeeLj\x93\x9cV\xac\x16\x83" +
	"_F*gFy\xe9\xefq\x03UfR\xd5ZF" +
	"\xa2m\xbc4u\xb1\x06\\tRg\xfc\x89;\xc1\xb3" +
	"\xd9T\xb1f\xa9\xc5\xf7\x09\xbb\xd0\xfdd\xc8\xc6\x1b\x99" +
	"\x92\xd9\x07\xf9\x92\xee\x1e\x87E\xed\xe2\xb0\x13\x82\xf6\xa5" +
	"\xb7\xd8\xe4\x0dEFPr\x9c\xfb3\xe1\xe5\x99\xbe\xac" +
	"%\x8f\xf4ksNO(\xef\x83N\xf9\"c\xbd5" +
	"*\xf5NW\xfc\x8a\xe2\xae\xceTyS#\xff\xaf\x17" +
	"\xf9\x96\xef\x13\x7f\xa7S\x1f\xdd$V\xd96\x99%?" +
	"\xb2\x84\xb1\xdeJ\x95z\xb9\x92\xbb_Pz\xcd!t" +
	"1\xd7\x0dF4\xea\xe4]\xb6\x15^\xc5D\xda#\x84" +
	"\xb5`\x0f\xc1\x97\xa0\xc2\xe5\x06\xed{\xf2\x9a\xcc>\xf0" +
	"'I\xa1\\:\xc0\x13\xf2\x18\x7f?\xf0\x11*\xb8\xd2" +
	"\xda\x0b\xb4\x0a.\x06\xf8Q*x\xd3\xda\x8b\x92\x17n" +
	"\xe1\xf8\x0e\xb5\xf6\xb2\xe4G\xc0\x8fS\xc1\xa7\xd6^\x91" +
	"<\x7f;\xa7>\xec\xe7\x03\xbc&S\x93\x8e\x83\x9f\x96" +
	"\xe7\xfeaN\x95D\xda)Y\xbepm\xa7\xaa\x92S" +
	"\x15\x91vF\xf2\x93\xe0o\x82WWq\xaa&\xd2~" +
	".\xf9i\xf0s\xa4\xd0\xe2\xc9\xdb\x15\xef\xfe\xcf[2" +
	"\x81\xe0M\x08\xde\xc3\x035\xe4\xf9l\xefb\xa5\x8e\x9f" +
	"\x03?O\xfe\xbfS3\x85H{_\xf6[>\x85J" +
	"\xfe;5\xf2 W^_\xca\xe5P\x8d\xdf\xd6\x08\x1e" +
	"\x93>\x9f?&]\x8fe(\x82\x00\xaa\xb0C3l" +
	"\xb7vw\xf6\xd86#\xb3\x90\xd4\x96\xff\xc7\x93\xbc\xa4" +
	"\xb6\xbb}E\xca=t\xb7\xafv\x85\xff\xf6\xec@\xf0" +
	"\xbf\x83r\xef\xdcUw6\xb1Z=e$\x03\xd5\x18" +
	"fW\xfb2\xbf\xb5W\xb65\xfc\xdf\xb7?7\x13\xad" +
	"\xf5Sa\xfc\xfc\xf7\xb1\x8f\x9f\xfa\xe0\x8d\xceM=\x01" +
	"\xc9\xd2\xf1\xcf\xc8\x1fY\xe3\xd8w2U\xe4\x9d\x88p" +
	"&\x0d\xd7\xe0?\xbf\xf0\xe3C'\xaf\x9d\xf3\xec\xb8\xec" +
	"\xce\xa8<\x15\xf4k;r\"\xeaWS|:\xfb\xa9" +
	"\xd5\x17=\xe9\xd8i\x11q\\C\xc8\x18\xb2?\x9f\xc9" +
	"p\x83L\xeb*\xa4\x14\xe44\xa0U\xf2\x15\xe0\xed\xb9" +
	"\xd4\x04\xa8\xc0jyT\xdf\x0e\xde\xaf\xf8\xd9\xe8P\x81" +
	"^\xc9\xfb\xc17*~6:T\xe0v\xc97\xe6S" +
	"\x10*\xfc\x1b6\x86\xe4&\xf8\x88\xe2\xa7\xbe@\x05\xb2" +
	"2\xa5\xc0\x05\xdf\xae\xf8'}P\x81\xbb$\x0f\xdc\xa4" +
	"\xa9\xf4T\xe0>Y\xcfN\xf0=\x8a\x9f\x8d\x0e\x15x" +
	"X\xf2=\x85\xb47\xff\x82\xcd\xf7\xe4M\x9d\xc2\x05\x9b" +
	"\xc9\xf9\x0b6?\xc8\xa52\x1c\x92)\x0b5\x9cj\x88" +
	"\xb4\xe7d\xca\xc5\xb3\xe0Gd\xca\xc2\x14O\x03^\x90" +
	"\xbcp\xc1f\xearNS\x89\xb4\x97e=\xc7\xc0O" +
	"\xca\x8b4\xfe\x05\x9b\xd7e*\xc6I\xf07\xe5E\x1a" +
	"\xff\x82\xcd\xcfej\x88L\x89xG^\xa4\xf1/\xd8" +
	"\xfcR\xa6\\\x9c\x03?/SI\xfc\x0b6\xefK\xfe" +
	"^.\x85b\xb1\xf6\x90\xcaI#\xd2>\x92\x15}\xa8" +
	"\xa8\xd4\xa7*\xb4\x98?\xacr\x0c\xa5\xf6;eW " +
	"\x0f\xefn\xbdDe\xf4b\x95\xc9;U\x8aH`M" +
	"w\xedx\xe7*\x00v\xd1\x12\xa8\xa2\xa8\x84\\\x1b/" +
	"Z\xc7\xb8\x12\xe3\xea\xf0\x9d\xbb\x84\x9fRW\xfalY" +
	"I\xaeeR\x12wu+\xa9;\xc9\xe2;s\x85\x9f" +
	"\x9e\xb8PZw\xdc\xd6\xee\xce8\x99\xf6V\xd9\xb8\xda" +
	"`\xa7\x95\x11\x17\xf5a\xc2\x92\x9f#ie\xd1\xee\xce" +
	"\xc2s\xfeW:\x03\xb2\xc2C\xfe}s\xff\xd3\x90\xe4" +
	"\xf8[\x18^d\x91w\xfd\xedT\xcc\x19\xed\xd4\xc9u" +
	"\x85\xd3f[n8\xf8\x89\x03\xddNu\xb5/k\xb3" +
	"\x99\xef\xcd\x94v\x8a\xefl\x94\xf6b\x09\x9e(\xe8\xb1" +
	"l\xcf\x89#\xd3\xb83\xb7\xb3BL\xa9(Z\x83+" +
	">\xe5\x1e\x97w\x13'\xff\x0f\xfe\xd5\xd3o\xc6r\xbb" +
	"^J\xd9m\xaf\xde\x95y{\xf5\x8c\xcc\xc8{6\xbf" +
	"\x04\xe7\xec\xd5\x0b\x92\x17\x96T\xa5\xd2\xb3W\xaf\xc8L" +
	"\xbd\xc2\xd2\x99\xb3W\xa7d\xf9\xfcR\x98\xb7Wo\xc9" +
	"\x95\xbf\xb0\x12\xe6\xec\xd5\xbb\xf4*c\xf1\xf3\xe0\x1fS" +
	"\xc0^\xfdV\xa6\xf0]\x00\x0f\xe5\xed\x15\x91F\xf2\x82" +
	"\\>C\xcc\xb3W2E\xec\xa5\xa2\xb4\xe1*\xff\xc2" +
	"n\xa3T_\x996\xbc@\xf1.\xe6\xc2\\\xb5\xc8D" +
	"\xb3\xfc\xfdG\xf9\x0f\xcbM\x96\x17 \xbf\x93\xcb&^" +
	"\xa9\x04\x16\xec\x1bd\x96q\xc1lOQ\xfc\x7fp\xae" +
	"`\xb6\x93\x8a\xbfi\x82\x05[\x97\xbc\x90e\\\xebg" +
	"^\xa5\x94\xeb\x83\x19b\xf0\x99\xe5\x86+ygeq" +
	"7b\x97|\xd5\xc5\xfb:%\x89\xb4\xf7!\xc0Ry" +
	"*xS\xa3_\xdf\xa4\x9a\"\x10\xf5\xae\x91\xa7Q\xd4" +
	"a{\xa7Q\x11\x99\xd6Sxx\x8b\xfc$\xed:\x16" +
	"I\x17}\x8ac\xd8\x95_\x7f\xc9*r+8\x90\xb8" +
	"\xc7\x82\x1fC\x95\x17\xd4\x04+\xfanL:\xd3\xa9\x8f" +
	"t\x1a\x96\"r1\x8cmy\x87'\xac\xc8G9#" +
	"W\xf0\x89\xa3\xf2\xfc\xaf\x0c\xf4\xcb\xedE\x16\xc9d\x82" +
	"7\xd9r\x9c$\xee\xd1\x9d\xa8\xf7\x01\xe82\xbb\xa5\xc5" +
	"Ec\xc2T\xf5\xd1|\x0f%\xfc\xfb\x16\x0c\xdd6\xfe" +
	"\xc2E\xb2\xbc\xf6dX\xc1u\xcak[\xee\xf3Y\xa9" +
	"\xfc\xe7\x8cs\x07\xc0\xc5\xa7GQ\xd3;\xa8\xcd\xd7\x10" +
	"LD\x0b\xeel\xab\x13i}tm[Lwu\xf8" +
	"\x1b5j\xa8flL\xfa\xf2\xab\xafg\xacw\xa5J" +
	"\xbd\x1d\x0a5\xd2\xff\x8c\xf9\xfb\xd6k\x81c*\xf5\xf6" +
	"(\xd4\xa8\xfcn\xcc\xdf\xb9\xee\xfc\x0cc\xbd\xed*\xf5" +
	"\xf6+\x14\xb5ly}{RtH~\xdc\xb0\xf0]" +
	"F\xbd\x10\x16\xff\xff\x01\x00\x00\xff\xff\xe2\x14\xae\xe7"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_86ea47c297746539,
		Nodes: []uint64{
			0x811d54ac7debc21e,
			0x8b008567c93f7c7d,
			0x98e203c76f83d365,
			0xa4da01d10b3b6acd,
			0xab56969492d293b3,
			0xb1760f65e652e737,
			0xb4f16ea3144d85a6,
			0xbd3e199eb9b03758,
			0xcd05962719bf7ec8,
			0xd1edcf54f4edf638,
			0xd594e64f6b5f461d,
			0xd599d06dc405571a,
			0xd8af9210839bc071,
			0xdd1e0c7c94dc4211,
			0xe3512e62df901c18,
			0xef3e4198d3e35596,
			0xf03d8fd1bbe75519,
		},
		Compressed: true,
	})
}
