// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	math "math"
	strconv "strconv"
)

type MaybeBool struct{ capnp.Struct }

// MaybeBool_TypeID is the unique identifier for the type MaybeBool.
const MaybeBool_TypeID = 0xd8af9210839bc071

func NewMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool{st}, err
}

func NewRootMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool{st}, err
}

func ReadRootMaybeBool(msg *capnp.Message) (MaybeBool, error) {
	root, err := msg.Root()
	return MaybeBool{root.Struct()}, err
}

func (s MaybeBool) String() string {
	str, _ := text.Marshal(0xd8af9210839bc071, s.Struct)
	return str
}

func (s MaybeBool) Value() bool {
	return s.Struct.Bit(0)
}

func (s MaybeBool) SetValue(v bool) {
	s.Struct.SetBit(0, v)
}

// MaybeBool_List is a list of MaybeBool.
type MaybeBool_List struct{ capnp.List }

// NewMaybeBool creates a new list of MaybeBool.
func NewMaybeBool_List(s *capnp.Segment, sz int32) (MaybeBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MaybeBool_List{l}, err
}

func (s MaybeBool_List) At(i int) MaybeBool { return MaybeBool{s.List.Struct(i)} }

func (s MaybeBool_List) Set(i int, v MaybeBool) error { return s.List.SetStruct(i, v.Struct) }

func (s MaybeBool_List) String() string {
	str, _ := text.MarshalList(0xd8af9210839bc071, s.List)
	return str
}

// MaybeBool_Future is a wrapper for a MaybeBool promised by a client call.
type MaybeBool_Future struct{ *capnp.Future }

func (p MaybeBool_Future) Struct() (MaybeBool, error) {
	s, err := p.Future.Struct()
	return MaybeBool{s}, err
}

type RuntimeState struct{ capnp.Struct }

// RuntimeState_TypeID is the unique identifier for the type RuntimeState.
const RuntimeState_TypeID = 0xd599d06dc405571a

func NewRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState{st}, err
}

func NewRootRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState{st}, err
}

func ReadRootRuntimeState(msg *capnp.Message) (RuntimeState, error) {
	root, err := msg.Root()
	return RuntimeState{root.Struct()}, err
}

func (s RuntimeState) String() string {
	str, _ := text.Marshal(0xd599d06dc405571a, s.Struct)
	return str
}

func (s RuntimeState) ModelState() (MonicaModelState, error) {
	p, err := s.Struct.Ptr(0)
	return MonicaModelState{Struct: p.Struct()}, err
}

func (s RuntimeState) HasModelState() bool {
	return s.Struct.HasPtr(0)
}

func (s RuntimeState) SetModelState(v MonicaModelState) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModelState sets the modelState field to a newly
// allocated MonicaModelState struct, preferring placement in s's segment.
func (s RuntimeState) NewModelState() (MonicaModelState, error) {
	ss, err := NewMonicaModelState(s.Struct.Segment())
	if err != nil {
		return MonicaModelState{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RuntimeState_List is a list of RuntimeState.
type RuntimeState_List struct{ capnp.List }

// NewRuntimeState creates a new list of RuntimeState.
func NewRuntimeState_List(s *capnp.Segment, sz int32) (RuntimeState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RuntimeState_List{l}, err
}

func (s RuntimeState_List) At(i int) RuntimeState { return RuntimeState{s.List.Struct(i)} }

func (s RuntimeState_List) Set(i int, v RuntimeState) error { return s.List.SetStruct(i, v.Struct) }

func (s RuntimeState_List) String() string {
	str, _ := text.MarshalList(0xd599d06dc405571a, s.List)
	return str
}

// RuntimeState_Future is a wrapper for a RuntimeState promised by a client call.
type RuntimeState_Future struct{ *capnp.Future }

func (p RuntimeState_Future) Struct() (RuntimeState, error) {
	s, err := p.Future.Struct()
	return RuntimeState{s}, err
}

func (p RuntimeState_Future) ModelState() MonicaModelState_Future {
	return MonicaModelState_Future{Future: p.Future.Field(0, nil)}
}

type CropState struct{ capnp.Struct }

// CropState_TypeID is the unique identifier for the type CropState.
const CropState_TypeID = 0x8b008567c93f7c7d

func NewCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState{st}, err
}

func NewRootCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState{st}, err
}

func ReadRootCropState(msg *capnp.Message) (CropState, error) {
	root, err := msg.Root()
	return CropState{root.Struct()}, err
}

func (s CropState) String() string {
	str, _ := text.Marshal(0x8b008567c93f7c7d, s.Struct)
	return str
}

func (s CropState) SpeciesName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CropState) HasSpeciesName() bool {
	return s.Struct.HasPtr(1)
}

func (s CropState) SpeciesNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CropState) SetSpeciesName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s CropState) CultivarName() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s CropState) HasCultivarName() bool {
	return s.Struct.HasPtr(2)
}

func (s CropState) CultivarNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s CropState) SetCultivarName(v string) error {
	return s.Struct.SetText(2, v)
}

func (s CropState) SeedDate() (common_date.Date, error) {
	p, err := s.Struct.Ptr(3)
	return common_date.Date{Struct: p.Struct()}, err
}

func (s CropState) HasSeedDate() bool {
	return s.Struct.HasPtr(3)
}

func (s CropState) SetSeedDate(v common_date.Date) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewSeedDate sets the seedDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s CropState) NewSeedDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(s.Struct.Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) HarvestDate() (common_date.Date, error) {
	p, err := s.Struct.Ptr(4)
	return common_date.Date{Struct: p.Struct()}, err
}

func (s CropState) HasHarvestDate() bool {
	return s.Struct.HasPtr(4)
}

func (s CropState) SetHarvestDate(v common_date.Date) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewHarvestDate sets the harvestDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s CropState) NewHarvestDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(s.Struct.Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) IsWinterCrop() (MaybeBool, error) {
	p, err := s.Struct.Ptr(5)
	return MaybeBool{Struct: p.Struct()}, err
}

func (s CropState) HasIsWinterCrop() bool {
	return s.Struct.HasPtr(5)
}

func (s CropState) SetIsWinterCrop(v MaybeBool) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewIsWinterCrop sets the isWinterCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsWinterCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(s.Struct.Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) IsPerennialCrop() (MaybeBool, error) {
	p, err := s.Struct.Ptr(6)
	return MaybeBool{Struct: p.Struct()}, err
}

func (s CropState) HasIsPerennialCrop() bool {
	return s.Struct.HasPtr(6)
}

func (s CropState) SetIsPerennialCrop(v MaybeBool) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewIsPerennialCrop sets the isPerennialCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsPerennialCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(s.Struct.Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) CuttingDates() (common_date.Date_List, error) {
	p, err := s.Struct.Ptr(7)
	return common_date.Date_List{List: p.List()}, err
}

func (s CropState) HasCuttingDates() bool {
	return s.Struct.HasPtr(7)
}

func (s CropState) SetCuttingDates(v common_date.Date_List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewCuttingDates sets the cuttingDates field to a newly
// allocated common_date.Date_List, preferring placement in s's segment.
func (s CropState) NewCuttingDates(n int32) (common_date.Date_List, error) {
	l, err := common_date.NewDate_List(s.Struct.Segment(), n)
	if err != nil {
		return common_date.Date_List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s CropState) CropParams() (CropParameters, error) {
	p, err := s.Struct.Ptr(8)
	return CropParameters{Struct: p.Struct()}, err
}

func (s CropState) HasCropParams() bool {
	return s.Struct.HasPtr(8)
}

func (s CropState) SetCropParams(v CropParameters) error {
	return s.Struct.SetPtr(8, v.Struct.ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(s.Struct.Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = s.Struct.SetPtr(8, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) PerennialCropParams() (CropParameters, error) {
	p, err := s.Struct.Ptr(9)
	return CropParameters{Struct: p.Struct()}, err
}

func (s CropState) HasPerennialCropParams() bool {
	return s.Struct.HasPtr(9)
}

func (s CropState) SetPerennialCropParams(v CropParameters) error {
	return s.Struct.SetPtr(9, v.Struct.ToPtr())
}

// NewPerennialCropParams sets the perennialCropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewPerennialCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(s.Struct.Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = s.Struct.SetPtr(9, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) ResidueParams() (CropResidueParameters, error) {
	p, err := s.Struct.Ptr(10)
	return CropResidueParameters{Struct: p.Struct()}, err
}

func (s CropState) HasResidueParams() bool {
	return s.Struct.HasPtr(10)
}

func (s CropState) SetResidueParams(v CropResidueParameters) error {
	return s.Struct.SetPtr(10, v.Struct.ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(s.Struct.Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = s.Struct.SetPtr(10, ss.Struct.ToPtr())
	return ss, err
}

func (s CropState) CrossCropAdaptionFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3ff0000000000000)
}

func (s CropState) SetCrossCropAdaptionFactor(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropState) AutomaticHarvest() bool {
	return s.Struct.Bit(64)
}

func (s CropState) SetAutomaticHarvest(v bool) {
	s.Struct.SetBit(64, v)
}

func (s CropState) AutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	p, err := s.Struct.Ptr(0)
	return AutomaticHarvestParameters{Struct: p.Struct()}, err
}

func (s CropState) HasAutomaticHarvestParams() bool {
	return s.Struct.HasPtr(0)
}

func (s CropState) SetAutomaticHarvestParams(v AutomaticHarvestParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAutomaticHarvestParams sets the automaticHarvestParams field to a newly
// allocated AutomaticHarvestParameters struct, preferring placement in s's segment.
func (s CropState) NewAutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	ss, err := NewAutomaticHarvestParameters(s.Struct.Segment())
	if err != nil {
		return AutomaticHarvestParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// CropState_List is a list of CropState.
type CropState_List struct{ capnp.List }

// NewCropState creates a new list of CropState.
func NewCropState_List(s *capnp.Segment, sz int32) (CropState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11}, sz)
	return CropState_List{l}, err
}

func (s CropState_List) At(i int) CropState { return CropState{s.List.Struct(i)} }

func (s CropState_List) Set(i int, v CropState) error { return s.List.SetStruct(i, v.Struct) }

func (s CropState_List) String() string {
	str, _ := text.MarshalList(0x8b008567c93f7c7d, s.List)
	return str
}

// CropState_Future is a wrapper for a CropState promised by a client call.
type CropState_Future struct{ *capnp.Future }

func (p CropState_Future) Struct() (CropState, error) {
	s, err := p.Future.Struct()
	return CropState{s}, err
}

func (p CropState_Future) SeedDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(3, nil)}
}

func (p CropState_Future) HarvestDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(4, nil)}
}

func (p CropState_Future) IsWinterCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(5, nil)}
}

func (p CropState_Future) IsPerennialCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(6, nil)}
}

func (p CropState_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(8, nil)}
}

func (p CropState_Future) PerennialCropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(9, nil)}
}

func (p CropState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(10, nil)}
}

func (p CropState_Future) AutomaticHarvestParams() AutomaticHarvestParameters_Future {
	return AutomaticHarvestParameters_Future{Future: p.Future.Field(0, nil)}
}

type AOMProperties struct{ capnp.Struct }

// AOMProperties_TypeID is the unique identifier for the type AOMProperties.
const AOMProperties_TypeID = 0xe3512e62df901c18

func NewAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties{st}, err
}

func NewRootAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties{st}, err
}

func ReadRootAOMProperties(msg *capnp.Message) (AOMProperties, error) {
	root, err := msg.Root()
	return AOMProperties{root.Struct()}, err
}

func (s AOMProperties) String() string {
	str, _ := text.Marshal(0xe3512e62df901c18, s.Struct)
	return str
}

func (s AOMProperties) AomSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s AOMProperties) SetAomSlow(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s AOMProperties) AomFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s AOMProperties) SetAomFast(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBSlow(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBFast(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s AOMProperties) SetAomFastDecRatetoSMBSlow(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s AOMProperties) SetAomFastDecRatetoSMBFast(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s AOMProperties) SetAomSlowDecCoeff(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s AOMProperties) SetAomFastDecCoeff(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomSlowDecCoeffStandard(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomFastDecCoeffStandard(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) PartAOMSlowtoSMBSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s AOMProperties) SetPartAOMSlowtoSMBSlow(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s AOMProperties) PartAOMSlowtoSMBFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s AOMProperties) SetPartAOMSlowtoSMBFast(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s AOMProperties) CnRatioAOMSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(96) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMSlow(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) CnRatioAOMFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(104) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMFast(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) DaysAfterApplication() uint16 {
	return s.Struct.Uint16(112)
}

func (s AOMProperties) SetDaysAfterApplication(v uint16) {
	s.Struct.SetUint16(112, v)
}

func (s AOMProperties) AomDryMatterContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s AOMProperties) SetAomDryMatterContent(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s AOMProperties) AomNH4Content() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s AOMProperties) SetAomNH4Content(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDelta() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s AOMProperties) SetAomSlowDelta(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s AOMProperties) AomFastDelta() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s AOMProperties) SetAomFastDelta(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s AOMProperties) Incorporation() bool {
	return s.Struct.Bit(912)
}

func (s AOMProperties) SetIncorporation(v bool) {
	s.Struct.SetBit(912, v)
}

func (s AOMProperties) NoVolatilization() bool {
	return !s.Struct.Bit(913)
}

func (s AOMProperties) SetNoVolatilization(v bool) {
	s.Struct.SetBit(913, !v)
}

// AOMProperties_List is a list of AOMProperties.
type AOMProperties_List struct{ capnp.List }

// NewAOMProperties creates a new list of AOMProperties.
func NewAOMProperties_List(s *capnp.Segment, sz int32) (AOMProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0}, sz)
	return AOMProperties_List{l}, err
}

func (s AOMProperties_List) At(i int) AOMProperties { return AOMProperties{s.List.Struct(i)} }

func (s AOMProperties_List) Set(i int, v AOMProperties) error { return s.List.SetStruct(i, v.Struct) }

func (s AOMProperties_List) String() string {
	str, _ := text.MarshalList(0xe3512e62df901c18, s.List)
	return str
}

// AOMProperties_Future is a wrapper for a AOMProperties promised by a client call.
type AOMProperties_Future struct{ *capnp.Future }

func (p AOMProperties_Future) Struct() (AOMProperties, error) {
	s, err := p.Future.Struct()
	return AOMProperties{s}, err
}

type SoilColumnState struct{ capnp.Struct }

// SoilColumnState_TypeID is the unique identifier for the type SoilColumnState.
const SoilColumnState_TypeID = 0xef3e4198d3e35596

func NewSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState{st}, err
}

func NewRootSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState{st}, err
}

func ReadRootSoilColumnState(msg *capnp.Message) (SoilColumnState, error) {
	root, err := msg.Root()
	return SoilColumnState{root.Struct()}, err
}

func (s SoilColumnState) String() string {
	str, _ := text.Marshal(0xef3e4198d3e35596, s.Struct)
	return str
}

func (s SoilColumnState) VsSurfaceWaterStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilColumnState) SetVsSurfaceWaterStorage(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState) VsInterceptionStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilColumnState) SetVsInterceptionStorage(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState) VmGroundwaterTable() uint16 {
	return s.Struct.Uint16(16)
}

func (s SoilColumnState) SetVmGroundwaterTable(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s SoilColumnState) VsFluxAtLowerBoundary() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilColumnState) SetVsFluxAtLowerBoundary(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState) VqCropNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilColumnState) SetVqCropNUptake(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState) VtSoilSurfaceTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilColumnState) SetVtSoilSurfaceTemperature(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilColumnState) VmSnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilColumnState) SetVmSnowDepth(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilColumnState) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilColumnState) SetPsMaxMineralisationDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilColumnState) VsNumberOfOrganicLayers() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilColumnState) SetVsNumberOfOrganicLayers(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressing() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilColumnState) SetVfTopDressing(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s SoilColumnState) HasVfTopDressingPartition() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilColumnState) SetVfTopDressingPartition(v Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVfTopDressingPartition sets the vfTopDressingPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState) NewVfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilColumnState) VfTopDressingDelay() uint16 {
	return s.Struct.Uint16(18)
}

func (s SoilColumnState) SetVfTopDressingDelay(v uint16) {
	s.Struct.SetUint16(18, v)
}

func (s SoilColumnState) CropModule() (CropModuleState, error) {
	p, err := s.Struct.Ptr(1)
	return CropModuleState{Struct: p.Struct()}, err
}

func (s SoilColumnState) HasCropModule() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilColumnState) SetCropModule(v CropModuleState) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewCropModule sets the cropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s SoilColumnState) NewCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(s.Struct.Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilColumnState) DelayedNMinApplications() (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	p, err := s.Struct.Ptr(2)
	return SoilColumnState_DelayedNMinApplicationParams_List{List: p.List()}, err
}

func (s SoilColumnState) HasDelayedNMinApplications() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilColumnState) SetDelayedNMinApplications(v SoilColumnState_DelayedNMinApplicationParams_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewDelayedNMinApplications sets the delayedNMinApplications field to a newly
// allocated SoilColumnState_DelayedNMinApplicationParams_List, preferring placement in s's segment.
func (s SoilColumnState) NewDelayedNMinApplications(n int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := NewSoilColumnState_DelayedNMinApplicationParams_List(s.Struct.Segment(), n)
	if err != nil {
		return SoilColumnState_DelayedNMinApplicationParams_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SoilColumnState) PmCriticalMoistureDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilColumnState) SetPmCriticalMoistureDepth(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilColumnState) Layers() (SoilLayerState_List, error) {
	p, err := s.Struct.Ptr(3)
	return SoilLayerState_List{List: p.List()}, err
}

func (s SoilColumnState) HasLayers() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilColumnState) SetLayers(v SoilLayerState_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated SoilLayerState_List, preferring placement in s's segment.
func (s SoilColumnState) NewLayers(n int32) (SoilLayerState_List, error) {
	l, err := NewSoilLayerState_List(s.Struct.Segment(), n)
	if err != nil {
		return SoilLayerState_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// SoilColumnState_List is a list of SoilColumnState.
type SoilColumnState_List struct{ capnp.List }

// NewSoilColumnState creates a new list of SoilColumnState.
func NewSoilColumnState_List(s *capnp.Segment, sz int32) (SoilColumnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4}, sz)
	return SoilColumnState_List{l}, err
}

func (s SoilColumnState_List) At(i int) SoilColumnState { return SoilColumnState{s.List.Struct(i)} }

func (s SoilColumnState_List) Set(i int, v SoilColumnState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilColumnState_List) String() string {
	str, _ := text.MarshalList(0xef3e4198d3e35596, s.List)
	return str
}

// SoilColumnState_Future is a wrapper for a SoilColumnState promised by a client call.
type SoilColumnState_Future struct{ *capnp.Future }

func (p SoilColumnState_Future) Struct() (SoilColumnState, error) {
	s, err := p.Future.Struct()
	return SoilColumnState{s}, err
}

func (p SoilColumnState_Future) VfTopDressingPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

func (p SoilColumnState_Future) CropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(1, nil)}
}

type SoilColumnState_DelayedNMinApplicationParams struct{ capnp.Struct }

// SoilColumnState_DelayedNMinApplicationParams_TypeID is the unique identifier for the type SoilColumnState_DelayedNMinApplicationParams.
const SoilColumnState_DelayedNMinApplicationParams_TypeID = 0xd1edcf54f4edf638

func NewSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams{st}, err
}

func NewRootSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams{st}, err
}

func ReadRootSoilColumnState_DelayedNMinApplicationParams(msg *capnp.Message) (SoilColumnState_DelayedNMinApplicationParams, error) {
	root, err := msg.Root()
	return SoilColumnState_DelayedNMinApplicationParams{root.Struct()}, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) String() string {
	str, _ := text.Marshal(0xd1edcf54f4edf638, s.Struct)
	return str
}

func (s SoilColumnState_DelayedNMinApplicationParams) Fp() (Params_MineralFertilization_Parameters, error) {
	p, err := s.Struct.Ptr(0)
	return Params_MineralFertilization_Parameters{Struct: p.Struct()}, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) HasFp() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFp(v Params_MineralFertilization_Parameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFp sets the fp field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState_DelayedNMinApplicationParams) NewFp() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(s.Struct.Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) SamplingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetSamplingDepth(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget30() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget30(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMinApplication() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMinApplication(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMaxApplication() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMaxApplication(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) TopDressingDelay() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetTopDressingDelay(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

// SoilColumnState_DelayedNMinApplicationParams_List is a list of SoilColumnState_DelayedNMinApplicationParams.
type SoilColumnState_DelayedNMinApplicationParams_List struct{ capnp.List }

// NewSoilColumnState_DelayedNMinApplicationParams creates a new list of SoilColumnState_DelayedNMinApplicationParams.
func NewSoilColumnState_DelayedNMinApplicationParams_List(s *capnp.Segment, sz int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return SoilColumnState_DelayedNMinApplicationParams_List{l}, err
}

func (s SoilColumnState_DelayedNMinApplicationParams_List) At(i int) SoilColumnState_DelayedNMinApplicationParams {
	return SoilColumnState_DelayedNMinApplicationParams{s.List.Struct(i)}
}

func (s SoilColumnState_DelayedNMinApplicationParams_List) Set(i int, v SoilColumnState_DelayedNMinApplicationParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilColumnState_DelayedNMinApplicationParams_List) String() string {
	str, _ := text.MarshalList(0xd1edcf54f4edf638, s.List)
	return str
}

// SoilColumnState_DelayedNMinApplicationParams_Future is a wrapper for a SoilColumnState_DelayedNMinApplicationParams promised by a client call.
type SoilColumnState_DelayedNMinApplicationParams_Future struct{ *capnp.Future }

func (p SoilColumnState_DelayedNMinApplicationParams_Future) Struct() (SoilColumnState_DelayedNMinApplicationParams, error) {
	s, err := p.Future.Struct()
	return SoilColumnState_DelayedNMinApplicationParams{s}, err
}

func (p SoilColumnState_DelayedNMinApplicationParams_Future) Fp() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilLayerState struct{ capnp.Struct }

// SoilLayerState_TypeID is the unique identifier for the type SoilLayerState.
const SoilLayerState_TypeID = 0xdd1e0c7c94dc4211

func NewSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState{st}, err
}

func NewRootSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState{st}, err
}

func ReadRootSoilLayerState(msg *capnp.Message) (SoilLayerState, error) {
	root, err := msg.Root()
	return SoilLayerState{root.Struct()}, err
}

func (s SoilLayerState) String() string {
	str, _ := text.Marshal(0xdd1e0c7c94dc4211, s.Struct)
	return str
}

func (s SoilLayerState) LayerThickness() float64 {
	return math.Float64frombits(s.Struct.Uint64(0) ^ 0x3fb999999999999a)
}

func (s SoilLayerState) SetLayerThickness(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilLayerState) SoilWaterFlux() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilLayerState) SetSoilWaterFlux(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilLayerState) VoAOMPool() (AOMProperties_List, error) {
	p, err := s.Struct.Ptr(0)
	return AOMProperties_List{List: p.List()}, err
}

func (s SoilLayerState) HasVoAOMPool() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilLayerState) SetVoAOMPool(v AOMProperties_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVoAOMPool sets the voAOMPool field to a newly
// allocated AOMProperties_List, preferring placement in s's segment.
func (s SoilLayerState) NewVoAOMPool(n int32) (AOMProperties_List, error) {
	l, err := NewAOMProperties_List(s.Struct.Segment(), n)
	if err != nil {
		return AOMProperties_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SoilLayerState) SomSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilLayerState) SetSomSlow(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilLayerState) SomFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilLayerState) SetSomFast(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilLayerState) SmbSlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilLayerState) SetSmbSlow(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilLayerState) SmbFast() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilLayerState) SetSmbFast(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilLayerState) SoilCarbamid() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilLayerState) SetSoilCarbamid(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilLayerState) SoilNH4() float64 {
	return math.Float64frombits(s.Struct.Uint64(56) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNH4(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilNO2() float64 {
	return math.Float64frombits(s.Struct.Uint64(64) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SetSoilNO2(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SoilNO3() float64 {
	return math.Float64frombits(s.Struct.Uint64(72) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNO3(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilFrozen() bool {
	return s.Struct.Bit(640)
}

func (s SoilLayerState) SetSoilFrozen(v bool) {
	s.Struct.SetBit(640, v)
}

func (s SoilLayerState) Sps() (SoilParameters, error) {
	p, err := s.Struct.Ptr(1)
	return SoilParameters{Struct: p.Struct()}, err
}

func (s SoilLayerState) HasSps() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilLayerState) SetSps(v SoilParameters) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSps sets the sps field to a newly
// allocated SoilParameters struct, preferring placement in s's segment.
func (s SoilLayerState) NewSps() (SoilParameters, error) {
	ss, err := NewSoilParameters(s.Struct.Segment())
	if err != nil {
		return SoilParameters{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilLayerState) SoilMoistureM3() float64 {
	return math.Float64frombits(s.Struct.Uint64(88) ^ 0x3fd0000000000000)
}

func (s SoilLayerState) SetSoilMoistureM3(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilLayerState) SoilTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilLayerState) SetSoilTemperature(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

// SoilLayerState_List is a list of SoilLayerState.
type SoilLayerState_List struct{ capnp.List }

// NewSoilLayerState creates a new list of SoilLayerState.
func NewSoilLayerState_List(s *capnp.Segment, sz int32) (SoilLayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2}, sz)
	return SoilLayerState_List{l}, err
}

func (s SoilLayerState_List) At(i int) SoilLayerState { return SoilLayerState{s.List.Struct(i)} }

func (s SoilLayerState_List) Set(i int, v SoilLayerState) error { return s.List.SetStruct(i, v.Struct) }

func (s SoilLayerState_List) String() string {
	str, _ := text.MarshalList(0xdd1e0c7c94dc4211, s.List)
	return str
}

// SoilLayerState_Future is a wrapper for a SoilLayerState promised by a client call.
type SoilLayerState_Future struct{ *capnp.Future }

func (p SoilLayerState_Future) Struct() (SoilLayerState, error) {
	s, err := p.Future.Struct()
	return SoilLayerState{s}, err
}

func (p SoilLayerState_Future) Sps() SoilParameters_Future {
	return SoilParameters_Future{Future: p.Future.Field(1, nil)}
}

type MonicaModelState struct{ capnp.Struct }

// MonicaModelState_TypeID is the unique identifier for the type MonicaModelState.
const MonicaModelState_TypeID = 0xab56969492d293b3

func NewMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState{st}, err
}

func NewRootMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState{st}, err
}

func ReadRootMonicaModelState(msg *capnp.Message) (MonicaModelState, error) {
	root, err := msg.Root()
	return MonicaModelState{root.Struct()}, err
}

func (s MonicaModelState) String() string {
	str, _ := text.Marshal(0xab56969492d293b3, s.Struct)
	return str
}

func (s MonicaModelState) SitePs() (SiteParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SiteParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSitePs() bool {
	return s.Struct.HasPtr(0)
}

func (s MonicaModelState) SetSitePs(v SiteParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSitePs sets the sitePs field to a newly
// allocated SiteParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSitePs() (SiteParameters, error) {
	ss, err := NewSiteParameters(s.Struct.Segment())
	if err != nil {
		return SiteParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) EnvPs() (EnvironmentParameters, error) {
	p, err := s.Struct.Ptr(1)
	return EnvironmentParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasEnvPs() bool {
	return s.Struct.HasPtr(1)
}

func (s MonicaModelState) SetEnvPs(v EnvironmentParameters) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewEnvPs sets the envPs field to a newly
// allocated EnvironmentParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewEnvPs() (EnvironmentParameters, error) {
	ss, err := NewEnvironmentParameters(s.Struct.Segment())
	if err != nil {
		return EnvironmentParameters{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) CropPs() (CropModuleParameters, error) {
	p, err := s.Struct.Ptr(2)
	return CropModuleParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasCropPs() bool {
	return s.Struct.HasPtr(2)
}

func (s MonicaModelState) SetCropPs(v CropModuleParameters) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewCropPs sets the cropPs field to a newly
// allocated CropModuleParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewCropPs() (CropModuleParameters, error) {
	ss, err := NewCropModuleParameters(s.Struct.Segment())
	if err != nil {
		return CropModuleParameters{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SimPs() (SimulationParameters, error) {
	p, err := s.Struct.Ptr(3)
	return SimulationParameters{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSimPs() bool {
	return s.Struct.HasPtr(3)
}

func (s MonicaModelState) SetSimPs(v SimulationParameters) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewSimPs sets the simPs field to a newly
// allocated SimulationParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSimPs() (SimulationParameters, error) {
	ss, err := NewSimulationParameters(s.Struct.Segment())
	if err != nil {
		return SimulationParameters{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) GroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	p, err := s.Struct.Ptr(4)
	return MeasuredGroundwaterTableInformation{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasGroundwaterInformation() bool {
	return s.Struct.HasPtr(4)
}

func (s MonicaModelState) SetGroundwaterInformation(v MeasuredGroundwaterTableInformation) error {
	return s.Struct.SetPtr(4, v.Struct.ToPtr())
}

// NewGroundwaterInformation sets the groundwaterInformation field to a newly
// allocated MeasuredGroundwaterTableInformation struct, preferring placement in s's segment.
func (s MonicaModelState) NewGroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	ss, err := NewMeasuredGroundwaterTableInformation(s.Struct.Segment())
	if err != nil {
		return MeasuredGroundwaterTableInformation{}, err
	}
	err = s.Struct.SetPtr(4, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilColumn() (SoilColumnState, error) {
	p, err := s.Struct.Ptr(5)
	return SoilColumnState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilColumn() bool {
	return s.Struct.HasPtr(5)
}

func (s MonicaModelState) SetSoilColumn(v SoilColumnState) error {
	return s.Struct.SetPtr(5, v.Struct.ToPtr())
}

// NewSoilColumn sets the soilColumn field to a newly
// allocated SoilColumnState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilColumn() (SoilColumnState, error) {
	ss, err := NewSoilColumnState(s.Struct.Segment())
	if err != nil {
		return SoilColumnState{}, err
	}
	err = s.Struct.SetPtr(5, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTemperature() (SoilTemperatureModuleState, error) {
	p, err := s.Struct.Ptr(6)
	return SoilTemperatureModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilTemperature() bool {
	return s.Struct.HasPtr(6)
}

func (s MonicaModelState) SetSoilTemperature(v SoilTemperatureModuleState) error {
	return s.Struct.SetPtr(6, v.Struct.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated SoilTemperatureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTemperature() (SoilTemperatureModuleState, error) {
	ss, err := NewSoilTemperatureModuleState(s.Struct.Segment())
	if err != nil {
		return SoilTemperatureModuleState{}, err
	}
	err = s.Struct.SetPtr(6, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilMoisture() (SoilMoistureModuleState, error) {
	p, err := s.Struct.Ptr(7)
	return SoilMoistureModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilMoisture() bool {
	return s.Struct.HasPtr(7)
}

func (s MonicaModelState) SetSoilMoisture(v SoilMoistureModuleState) error {
	return s.Struct.SetPtr(7, v.Struct.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated SoilMoistureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilMoisture() (SoilMoistureModuleState, error) {
	ss, err := NewSoilMoistureModuleState(s.Struct.Segment())
	if err != nil {
		return SoilMoistureModuleState{}, err
	}
	err = s.Struct.SetPtr(7, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilOrganic() (SoilOrganicModuleState, error) {
	p, err := s.Struct.Ptr(8)
	return SoilOrganicModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilOrganic() bool {
	return s.Struct.HasPtr(8)
}

func (s MonicaModelState) SetSoilOrganic(v SoilOrganicModuleState) error {
	return s.Struct.SetPtr(8, v.Struct.ToPtr())
}

// NewSoilOrganic sets the soilOrganic field to a newly
// allocated SoilOrganicModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilOrganic() (SoilOrganicModuleState, error) {
	ss, err := NewSoilOrganicModuleState(s.Struct.Segment())
	if err != nil {
		return SoilOrganicModuleState{}, err
	}
	err = s.Struct.SetPtr(8, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTransport() (SoilTransportModuleState, error) {
	p, err := s.Struct.Ptr(9)
	return SoilTransportModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasSoilTransport() bool {
	return s.Struct.HasPtr(9)
}

func (s MonicaModelState) SetSoilTransport(v SoilTransportModuleState) error {
	return s.Struct.SetPtr(9, v.Struct.ToPtr())
}

// NewSoilTransport sets the soilTransport field to a newly
// allocated SoilTransportModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTransport() (SoilTransportModuleState, error) {
	ss, err := NewSoilTransportModuleState(s.Struct.Segment())
	if err != nil {
		return SoilTransportModuleState{}, err
	}
	err = s.Struct.SetPtr(9, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) CurrentCropModule() (CropModuleState, error) {
	p, err := s.Struct.Ptr(10)
	return CropModuleState{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasCurrentCropModule() bool {
	return s.Struct.HasPtr(10)
}

func (s MonicaModelState) SetCurrentCropModule(v CropModuleState) error {
	return s.Struct.SetPtr(10, v.Struct.ToPtr())
}

// NewCurrentCropModule sets the currentCropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(s.Struct.Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = s.Struct.SetPtr(10, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) SumFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s MonicaModelState) SetSumFertiliser(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s MonicaModelState) SumOrgFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s MonicaModelState) SetSumOrgFertiliser(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s MonicaModelState) DailySumFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s MonicaModelState) SetDailySumFertiliser(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrgFertiliser() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s MonicaModelState) SetDailySumOrgFertiliser(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrganicFertilizerDM() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s MonicaModelState) SetDailySumOrganicFertilizerDM(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s MonicaModelState) SumOrganicFertilizerDM() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s MonicaModelState) SetSumOrganicFertilizerDM(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s MonicaModelState) HumusBalanceCarryOver() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s MonicaModelState) SetHumusBalanceCarryOver(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s MonicaModelState) DailySumIrrigationWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s MonicaModelState) SetDailySumIrrigationWater(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonExportedResidues() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s MonicaModelState) SetOptCarbonExportedResidues(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonReturnedResidues() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s MonicaModelState) SetOptCarbonReturnedResidues(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s MonicaModelState) CurrentStepDate() (common_date.Date, error) {
	p, err := s.Struct.Ptr(11)
	return common_date.Date{Struct: p.Struct()}, err
}

func (s MonicaModelState) HasCurrentStepDate() bool {
	return s.Struct.HasPtr(11)
}

func (s MonicaModelState) SetCurrentStepDate(v common_date.Date) error {
	return s.Struct.SetPtr(11, v.Struct.ToPtr())
}

// NewCurrentStepDate sets the currentStepDate field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentStepDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(s.Struct.Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = s.Struct.SetPtr(11, ss.Struct.ToPtr())
	return ss, err
}

func (s MonicaModelState) ClimateData() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.PointerList{List: p.List()}, err
}

func (s MonicaModelState) HasClimateData() bool {
	return s.Struct.HasPtr(12)
}

func (s MonicaModelState) SetClimateData(v capnp.PointerList) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewClimateData sets the climateData field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s MonicaModelState) NewClimateData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s MonicaModelState) CurrentEvents() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.TextList{List: p.List()}, err
}

func (s MonicaModelState) HasCurrentEvents() bool {
	return s.Struct.HasPtr(13)
}

func (s MonicaModelState) SetCurrentEvents(v capnp.TextList) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewCurrentEvents sets the currentEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s MonicaModelState) PreviousDaysEvents() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.TextList{List: p.List()}, err
}

func (s MonicaModelState) HasPreviousDaysEvents() bool {
	return s.Struct.HasPtr(14)
}

func (s MonicaModelState) SetPreviousDaysEvents(v capnp.TextList) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewPreviousDaysEvents sets the previousDaysEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewPreviousDaysEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s MonicaModelState) ClearCropUponNextDay() bool {
	return s.Struct.Bit(16)
}

func (s MonicaModelState) SetClearCropUponNextDay(v bool) {
	s.Struct.SetBit(16, v)
}

func (s MonicaModelState) DaysWithCrop() uint16 {
	return s.Struct.Uint16(4)
}

func (s MonicaModelState) SetDaysWithCrop(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s MonicaModelState) AccuNStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s MonicaModelState) SetAccuNStress(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s MonicaModelState) AccuWaterStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s MonicaModelState) SetAccuWaterStress(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s MonicaModelState) AccuHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s MonicaModelState) SetAccuHeatStress(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s MonicaModelState) AccuOxygenStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s MonicaModelState) SetAccuOxygenStress(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericCO2Concentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s MonicaModelState) SetVwAtmosphericCO2Concentration(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericO3Concentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s MonicaModelState) SetVwAtmosphericO3Concentration(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s MonicaModelState) VsGroundwaterDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s MonicaModelState) SetVsGroundwaterDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s MonicaModelState) CultivationMethodCount() uint16 {
	return s.Struct.Uint16(0)
}

func (s MonicaModelState) SetCultivationMethodCount(v uint16) {
	s.Struct.SetUint16(0, v)
}

// MonicaModelState_List is a list of MonicaModelState.
type MonicaModelState_List struct{ capnp.List }

// NewMonicaModelState creates a new list of MonicaModelState.
func NewMonicaModelState_List(s *capnp.Segment, sz int32) (MonicaModelState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15}, sz)
	return MonicaModelState_List{l}, err
}

func (s MonicaModelState_List) At(i int) MonicaModelState { return MonicaModelState{s.List.Struct(i)} }

func (s MonicaModelState_List) Set(i int, v MonicaModelState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MonicaModelState_List) String() string {
	str, _ := text.MarshalList(0xab56969492d293b3, s.List)
	return str
}

// MonicaModelState_Future is a wrapper for a MonicaModelState promised by a client call.
type MonicaModelState_Future struct{ *capnp.Future }

func (p MonicaModelState_Future) Struct() (MonicaModelState, error) {
	s, err := p.Future.Struct()
	return MonicaModelState{s}, err
}

func (p MonicaModelState_Future) SitePs() SiteParameters_Future {
	return SiteParameters_Future{Future: p.Future.Field(0, nil)}
}

func (p MonicaModelState_Future) EnvPs() EnvironmentParameters_Future {
	return EnvironmentParameters_Future{Future: p.Future.Field(1, nil)}
}

func (p MonicaModelState_Future) CropPs() CropModuleParameters_Future {
	return CropModuleParameters_Future{Future: p.Future.Field(2, nil)}
}

func (p MonicaModelState_Future) SimPs() SimulationParameters_Future {
	return SimulationParameters_Future{Future: p.Future.Field(3, nil)}
}

func (p MonicaModelState_Future) GroundwaterInformation() MeasuredGroundwaterTableInformation_Future {
	return MeasuredGroundwaterTableInformation_Future{Future: p.Future.Field(4, nil)}
}

func (p MonicaModelState_Future) SoilColumn() SoilColumnState_Future {
	return SoilColumnState_Future{Future: p.Future.Field(5, nil)}
}

func (p MonicaModelState_Future) SoilTemperature() SoilTemperatureModuleState_Future {
	return SoilTemperatureModuleState_Future{Future: p.Future.Field(6, nil)}
}

func (p MonicaModelState_Future) SoilMoisture() SoilMoistureModuleState_Future {
	return SoilMoistureModuleState_Future{Future: p.Future.Field(7, nil)}
}

func (p MonicaModelState_Future) SoilOrganic() SoilOrganicModuleState_Future {
	return SoilOrganicModuleState_Future{Future: p.Future.Field(8, nil)}
}

func (p MonicaModelState_Future) SoilTransport() SoilTransportModuleState_Future {
	return SoilTransportModuleState_Future{Future: p.Future.Field(9, nil)}
}

func (p MonicaModelState_Future) CurrentCropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(10, nil)}
}

func (p MonicaModelState_Future) CurrentStepDate() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(11, nil)}
}

type MonicaModelState_ACDToValue struct{ capnp.Struct }

// MonicaModelState_ACDToValue_TypeID is the unique identifier for the type MonicaModelState_ACDToValue.
const MonicaModelState_ACDToValue_TypeID = 0x98e203c76f83d365

func NewMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue{st}, err
}

func NewRootMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue{st}, err
}

func ReadRootMonicaModelState_ACDToValue(msg *capnp.Message) (MonicaModelState_ACDToValue, error) {
	root, err := msg.Root()
	return MonicaModelState_ACDToValue{root.Struct()}, err
}

func (s MonicaModelState_ACDToValue) String() string {
	str, _ := text.Marshal(0x98e203c76f83d365, s.Struct)
	return str
}

func (s MonicaModelState_ACDToValue) Acd() uint16 {
	return s.Struct.Uint16(0)
}

func (s MonicaModelState_ACDToValue) SetAcd(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s MonicaModelState_ACDToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s MonicaModelState_ACDToValue) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// MonicaModelState_ACDToValue_List is a list of MonicaModelState_ACDToValue.
type MonicaModelState_ACDToValue_List struct{ capnp.List }

// NewMonicaModelState_ACDToValue creates a new list of MonicaModelState_ACDToValue.
func NewMonicaModelState_ACDToValue_List(s *capnp.Segment, sz int32) (MonicaModelState_ACDToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return MonicaModelState_ACDToValue_List{l}, err
}

func (s MonicaModelState_ACDToValue_List) At(i int) MonicaModelState_ACDToValue {
	return MonicaModelState_ACDToValue{s.List.Struct(i)}
}

func (s MonicaModelState_ACDToValue_List) Set(i int, v MonicaModelState_ACDToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MonicaModelState_ACDToValue_List) String() string {
	str, _ := text.MarshalList(0x98e203c76f83d365, s.List)
	return str
}

// MonicaModelState_ACDToValue_Future is a wrapper for a MonicaModelState_ACDToValue promised by a client call.
type MonicaModelState_ACDToValue_Future struct{ *capnp.Future }

func (p MonicaModelState_ACDToValue_Future) Struct() (MonicaModelState_ACDToValue, error) {
	s, err := p.Future.Struct()
	return MonicaModelState_ACDToValue{s}, err
}

type CropModuleState struct{ capnp.Struct }

// CropModuleState_TypeID is the unique identifier for the type CropModuleState.
const CropModuleState_TypeID = 0x811d54ac7debc21e

func NewCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState{st}, err
}

func NewRootCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState{st}, err
}

func ReadRootCropModuleState(msg *capnp.Message) (CropModuleState, error) {
	root, err := msg.Root()
	return CropModuleState{root.Struct()}, err
}

func (s CropModuleState) String() string {
	str, _ := text.Marshal(0x811d54ac7debc21e, s.Struct)
	return str
}

func (s CropModuleState) FrostKillOn() bool {
	return s.Struct.Bit(0)
}

func (s CropModuleState) SetFrostKillOn(v bool) {
	s.Struct.SetBit(0, v)
}

func (s CropModuleState) SpeciesParams() (SpeciesParameters, error) {
	p, err := s.Struct.Ptr(47)
	return SpeciesParameters{Struct: p.Struct()}, err
}

func (s CropModuleState) HasSpeciesParams() bool {
	return s.Struct.HasPtr(47)
}

func (s CropModuleState) SetSpeciesParams(v SpeciesParameters) error {
	return s.Struct.SetPtr(47, v.Struct.ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(s.Struct.Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = s.Struct.SetPtr(47, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) CultivarParams() (CultivarParameters, error) {
	p, err := s.Struct.Ptr(48)
	return CultivarParameters{Struct: p.Struct()}, err
}

func (s CropModuleState) HasCultivarParams() bool {
	return s.Struct.HasPtr(48)
}

func (s CropModuleState) SetCultivarParams(v CultivarParameters) error {
	return s.Struct.SetPtr(48, v.Struct.ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(s.Struct.Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = s.Struct.SetPtr(48, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) ResidueParams() (CropResidueParameters, error) {
	p, err := s.Struct.Ptr(49)
	return CropResidueParameters{Struct: p.Struct()}, err
}

func (s CropModuleState) HasResidueParams() bool {
	return s.Struct.HasPtr(49)
}

func (s CropModuleState) SetResidueParams(v CropResidueParameters) error {
	return s.Struct.SetPtr(49, v.Struct.ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(s.Struct.Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = s.Struct.SetPtr(49, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) IsWinterCrop() bool {
	return s.Struct.Bit(7285)
}

func (s CropModuleState) SetIsWinterCrop(v bool) {
	s.Struct.SetBit(7285, v)
}

func (s CropModuleState) VsLatitude() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s CropModuleState) SetVsLatitude(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s CropModuleState) SetAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s CropModuleState) SetAbovegroundBiomassOld(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s CropModuleState) PcAbovegroundOrgan() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.BitList{List: p.List()}, err
}

func (s CropModuleState) HasPcAbovegroundOrgan() bool {
	return s.Struct.HasPtr(0)
}

func (s CropModuleState) SetPcAbovegroundOrgan(v capnp.BitList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewPcAbovegroundOrgan sets the pcAbovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s CropModuleState) SetActualTranspiration(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s CropModuleState) PcAssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.PointerList{List: p.List()}, err
}

func (s CropModuleState) HasPcAssimilatePartitioningCoeff() bool {
	return s.Struct.HasPtr(1)
}

func (s CropModuleState) SetPcAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPcAssimilatePartitioningCoeff sets the pcAssimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcAssimilateReallocation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s CropModuleState) SetPcAssimilateReallocation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s CropModuleState) Assimilates() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s CropModuleState) SetAssimilates(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s CropModuleState) AssimilationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s CropModuleState) SetAssimilationRate(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s CropModuleState) AstronomicDayLenght() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s CropModuleState) SetAstronomicDayLenght(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s CropModuleState) PcBaseDaylength() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcBaseDaylength() bool {
	return s.Struct.HasPtr(2)
}

func (s CropModuleState) SetPcBaseDaylength(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewPcBaseDaylength sets the pcBaseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcBaseTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcBaseTemperature() bool {
	return s.Struct.HasPtr(3)
}

func (s CropModuleState) SetPcBaseTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewPcBaseTemperature sets the pcBaseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcBeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s CropModuleState) SetPcBeginSensitivePhaseHeatStress(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s CropModuleState) SetBelowgroundBiomass(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s CropModuleState) SetBelowgroundBiomassOld(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s CropModuleState) PcCarboxylationPathway() int64 {
	return int64(s.Struct.Uint64(128))
}

func (s CropModuleState) SetPcCarboxylationPathway(v int64) {
	s.Struct.SetUint64(128, uint64(v))
}

func (s CropModuleState) ClearDayRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s CropModuleState) SetClearDayRadiation(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s CropModuleState) PcCo2Method() uint8 {
	return s.Struct.Uint8(1) ^ 3
}

func (s CropModuleState) SetPcCo2Method(v uint8) {
	s.Struct.SetUint8(1, v^3)
}

func (s CropModuleState) CriticalNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s CropModuleState) SetCriticalNConcentration(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s CropModuleState) PcCriticalOxygenContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcCriticalOxygenContent() bool {
	return s.Struct.HasPtr(4)
}

func (s CropModuleState) SetPcCriticalOxygenContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewPcCriticalOxygenContent sets the pcCriticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcCriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s CropModuleState) SetPcCriticalTemperatureHeatStress(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s CropModuleState) CropDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s CropModuleState) SetCropDiameter(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s CropModuleState) CropFrostRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(168) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropFrostRedux(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeatRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(176) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropHeatRedux(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(184))
}

func (s CropModuleState) SetCropHeight(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP1() float64 {
	return math.Float64frombits(s.Struct.Uint64(192))
}

func (s CropModuleState) SetPcCropHeightP1(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP2() float64 {
	return math.Float64frombits(s.Struct.Uint64(200))
}

func (s CropModuleState) SetPcCropHeightP2(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v))
}

func (s CropModuleState) PcCropName() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s CropModuleState) HasPcCropName() bool {
	return s.Struct.HasPtr(5)
}

func (s CropModuleState) PcCropNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s CropModuleState) SetPcCropName(v string) error {
	return s.Struct.SetText(5, v)
}

func (s CropModuleState) CropNDemand() float64 {
	return math.Float64frombits(s.Struct.Uint64(208))
}

func (s CropModuleState) SetCropNDemand(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v))
}

func (s CropModuleState) CropNRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(216) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropNRedux(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcCropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(224))
}

func (s CropModuleState) SetPcCropSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v))
}

func (s CropModuleState) CropWaterUptake() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasCropWaterUptake() bool {
	return s.Struct.HasPtr(6)
}

func (s CropModuleState) SetCropWaterUptake(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewCropWaterUptake sets the cropWaterUptake field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCropWaterUptake(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) CurrentTemperatureSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasCurrentTemperatureSum() bool {
	return s.Struct.HasPtr(7)
}

func (s CropModuleState) SetCurrentTemperatureSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewCurrentTemperatureSum sets the currentTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCurrentTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) CurrentTotalTemperatureSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(232))
}

func (s CropModuleState) SetCurrentTotalTemperatureSum(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v))
}

func (s CropModuleState) CurrentTotalTemperatureSumRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(240))
}

func (s CropModuleState) SetCurrentTotalTemperatureSumRoot(v float64) {
	s.Struct.SetUint64(240, math.Float64bits(v))
}

func (s CropModuleState) PcCuttingDelayDays() uint16 {
	return s.Struct.Uint16(2)
}

func (s CropModuleState) SetPcCuttingDelayDays(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s CropModuleState) DaylengthFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(248))
}

func (s CropModuleState) SetDaylengthFactor(v float64) {
	s.Struct.SetUint64(248, math.Float64bits(v))
}

func (s CropModuleState) PcDaylengthRequirement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcDaylengthRequirement() bool {
	return s.Struct.HasPtr(8)
}

func (s CropModuleState) SetPcDaylengthRequirement(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewPcDaylengthRequirement sets the pcDaylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) DaysAfterBeginFlowering() uint16 {
	return s.Struct.Uint16(4)
}

func (s CropModuleState) SetDaysAfterBeginFlowering(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s CropModuleState) Declination() float64 {
	return math.Float64frombits(s.Struct.Uint64(256))
}

func (s CropModuleState) SetDeclination(v float64) {
	s.Struct.SetUint64(256, math.Float64bits(v))
}

func (s CropModuleState) PcDefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(s.Struct.Uint64(264))
}

func (s CropModuleState) SetPcDefaultRadiationUseEfficiency(v float64) {
	s.Struct.SetUint64(264, math.Float64bits(v))
}

func (s CropModuleState) VmDepthGroundwaterTable() uint16 {
	return s.Struct.Uint16(6)
}

func (s CropModuleState) SetVmDepthGroundwaterTable(v uint16) {
	s.Struct.SetUint16(6, v)
}

func (s CropModuleState) PcDevelopmentAccelerationByNitrogenStress() uint64 {
	return s.Struct.Uint64(272)
}

func (s CropModuleState) SetPcDevelopmentAccelerationByNitrogenStress(v uint64) {
	s.Struct.SetUint64(272, v)
}

func (s CropModuleState) DevelopmentalStage() uint16 {
	return s.Struct.Uint16(280)
}

func (s CropModuleState) SetDevelopmentalStage(v uint16) {
	s.Struct.SetUint16(280, v)
}

func (s CropModuleState) NoOfCropSteps() uint16 {
	return s.Struct.Uint16(282)
}

func (s CropModuleState) SetNoOfCropSteps(v uint16) {
	s.Struct.SetUint16(282, v)
}

func (s CropModuleState) DroughtImpactOnFertility() float64 {
	return math.Float64frombits(s.Struct.Uint64(288) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetDroughtImpactOnFertility(v float64) {
	s.Struct.SetUint64(288, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcDroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(296))
}

func (s CropModuleState) SetPcDroughtImpactOnFertilityFactor(v float64) {
	s.Struct.SetUint64(296, math.Float64bits(v))
}

func (s CropModuleState) PcDroughtStressThreshold() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcDroughtStressThreshold() bool {
	return s.Struct.HasPtr(9)
}

func (s CropModuleState) SetPcDroughtStressThreshold(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewPcDroughtStressThreshold sets the pcDroughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcEmergenceFloodingControlOn() bool {
	return s.Struct.Bit(2)
}

func (s CropModuleState) SetPcEmergenceFloodingControlOn(v bool) {
	s.Struct.SetBit(2, v)
}

func (s CropModuleState) PcEmergenceMoistureControlOn() bool {
	return s.Struct.Bit(3)
}

func (s CropModuleState) SetPcEmergenceMoistureControlOn(v bool) {
	s.Struct.SetBit(3, v)
}

func (s CropModuleState) PcEndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(304))
}

func (s CropModuleState) SetPcEndSensitivePhaseHeatStress(v float64) {
	s.Struct.SetUint64(304, math.Float64bits(v))
}

func (s CropModuleState) EffectiveDayLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(312))
}

func (s CropModuleState) SetEffectiveDayLength(v float64) {
	s.Struct.SetUint64(312, math.Float64bits(v))
}

func (s CropModuleState) ErrorStatus() bool {
	return s.Struct.Bit(4)
}

func (s CropModuleState) SetErrorStatus(v bool) {
	s.Struct.SetBit(4, v)
}

func (s CropModuleState) ErrorMessage() (string, error) {
	p, err := s.Struct.Ptr(10)
	return p.Text(), err
}

func (s CropModuleState) HasErrorMessage() bool {
	return s.Struct.HasPtr(10)
}

func (s CropModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(10)
	return p.TextBytes(), err
}

func (s CropModuleState) SetErrorMessage(v string) error {
	return s.Struct.SetText(10, v)
}

func (s CropModuleState) EvaporatedFromIntercept() float64 {
	return math.Float64frombits(s.Struct.Uint64(320))
}

func (s CropModuleState) SetEvaporatedFromIntercept(v float64) {
	s.Struct.SetUint64(320, math.Float64bits(v))
}

func (s CropModuleState) ExtraterrestrialRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(328))
}

func (s CropModuleState) SetExtraterrestrialRadiation(v float64) {
	s.Struct.SetUint64(328, math.Float64bits(v))
}

func (s CropModuleState) PcFieldConditionModifier() float64 {
	return math.Float64frombits(s.Struct.Uint64(336))
}

func (s CropModuleState) SetPcFieldConditionModifier(v float64) {
	s.Struct.SetUint64(336, math.Float64bits(v))
}

func (s CropModuleState) FinalDevelopmentalStage() uint16 {
	return s.Struct.Uint16(284)
}

func (s CropModuleState) SetFinalDevelopmentalStage(v uint16) {
	s.Struct.SetUint16(284, v)
}

func (s CropModuleState) FixedN() float64 {
	return math.Float64frombits(s.Struct.Uint64(344))
}

func (s CropModuleState) SetFixedN(v float64) {
	s.Struct.SetUint64(344, math.Float64bits(v))
}

func (s CropModuleState) PcFrostDehardening() float64 {
	return math.Float64frombits(s.Struct.Uint64(352))
}

func (s CropModuleState) SetPcFrostDehardening(v float64) {
	s.Struct.SetUint64(352, math.Float64bits(v))
}

func (s CropModuleState) PcFrostHardening() float64 {
	return math.Float64frombits(s.Struct.Uint64(360))
}

func (s CropModuleState) SetPcFrostHardening(v float64) {
	s.Struct.SetUint64(360, math.Float64bits(v))
}

func (s CropModuleState) GlobalRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(368))
}

func (s CropModuleState) SetGlobalRadiation(v float64) {
	s.Struct.SetUint64(368, math.Float64bits(v))
}

func (s CropModuleState) GreenAreaIndex() float64 {
	return math.Float64frombits(s.Struct.Uint64(376))
}

func (s CropModuleState) SetGreenAreaIndex(v float64) {
	s.Struct.SetUint64(376, math.Float64bits(v))
}

func (s CropModuleState) GrossAssimilates() float64 {
	return math.Float64frombits(s.Struct.Uint64(384))
}

func (s CropModuleState) SetGrossAssimilates(v float64) {
	s.Struct.SetUint64(384, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesis() float64 {
	return math.Float64frombits(s.Struct.Uint64(392))
}

func (s CropModuleState) SetGrossPhotosynthesis(v float64) {
	s.Struct.SetUint64(392, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisMol() float64 {
	return math.Float64frombits(s.Struct.Uint64(400))
}

func (s CropModuleState) SetGrossPhotosynthesisMol(v float64) {
	s.Struct.SetUint64(400, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisReferenceMol() float64 {
	return math.Float64frombits(s.Struct.Uint64(408))
}

func (s CropModuleState) SetGrossPhotosynthesisReferenceMol(v float64) {
	s.Struct.SetUint64(408, math.Float64bits(v))
}

func (s CropModuleState) GrossPrimaryProduction() float64 {
	return math.Float64frombits(s.Struct.Uint64(416))
}

func (s CropModuleState) SetGrossPrimaryProduction(v float64) {
	s.Struct.SetUint64(416, math.Float64bits(v))
}

func (s CropModuleState) GrowthCycleEnded() bool {
	return s.Struct.Bit(5)
}

func (s CropModuleState) SetGrowthCycleEnded(v bool) {
	s.Struct.SetBit(5, v)
}

func (s CropModuleState) GrowthRespirationAS() float64 {
	return math.Float64frombits(s.Struct.Uint64(424))
}

func (s CropModuleState) SetGrowthRespirationAS(v float64) {
	s.Struct.SetUint64(424, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationStart() float64 {
	return math.Float64frombits(s.Struct.Uint64(432))
}

func (s CropModuleState) SetPcHeatSumIrrigationStart(v float64) {
	s.Struct.SetUint64(432, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationEnd() float64 {
	return math.Float64frombits(s.Struct.Uint64(440))
}

func (s CropModuleState) SetPcHeatSumIrrigationEnd(v float64) {
	s.Struct.SetUint64(440, math.Float64bits(v))
}

func (s CropModuleState) VsHeightNN() float64 {
	return math.Float64frombits(s.Struct.Uint64(448))
}

func (s CropModuleState) SetVsHeightNN(v float64) {
	s.Struct.SetUint64(448, math.Float64bits(v))
}

func (s CropModuleState) PcInitialKcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(456))
}

func (s CropModuleState) SetPcInitialKcFactor(v float64) {
	s.Struct.SetUint64(456, math.Float64bits(v))
}

func (s CropModuleState) PcInitialOrganBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcInitialOrganBiomass() bool {
	return s.Struct.HasPtr(11)
}

func (s CropModuleState) SetPcInitialOrganBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewPcInitialOrganBiomass sets the pcInitialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcInitialRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(464))
}

func (s CropModuleState) SetPcInitialRootingDepth(v float64) {
	s.Struct.SetUint64(464, math.Float64bits(v))
}

func (s CropModuleState) InterceptionStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(472))
}

func (s CropModuleState) SetInterceptionStorage(v float64) {
	s.Struct.SetUint64(472, math.Float64bits(v))
}

func (s CropModuleState) KcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(480) ^ 0x3fe3333333333333)
}

func (s CropModuleState) SetKcFactor(v float64) {
	s.Struct.SetUint64(480, math.Float64bits(v)^0x3fe3333333333333)
}

func (s CropModuleState) LeafAreaIndex() float64 {
	return math.Float64frombits(s.Struct.Uint64(488))
}

func (s CropModuleState) SetLeafAreaIndex(v float64) {
	s.Struct.SetUint64(488, math.Float64bits(v))
}

func (s CropModuleState) SunlitLeafAreaIndex() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasSunlitLeafAreaIndex() bool {
	return s.Struct.HasPtr(12)
}

func (s CropModuleState) SetSunlitLeafAreaIndex(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewSunlitLeafAreaIndex sets the sunlitLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewSunlitLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) ShadedLeafAreaIndex() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasShadedLeafAreaIndex() bool {
	return s.Struct.HasPtr(13)
}

func (s CropModuleState) SetShadedLeafAreaIndex(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewShadedLeafAreaIndex sets the shadedLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewShadedLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcLowTemperatureExposure() float64 {
	return math.Float64frombits(s.Struct.Uint64(496))
}

func (s CropModuleState) SetPcLowTemperatureExposure(v float64) {
	s.Struct.SetUint64(496, math.Float64bits(v))
}

func (s CropModuleState) PcLimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(504))
}

func (s CropModuleState) SetPcLimitingTemperatureHeatStress(v float64) {
	s.Struct.SetUint64(504, math.Float64bits(v))
}

func (s CropModuleState) Lt50() float64 {
	return math.Float64frombits(s.Struct.Uint64(512) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50(v float64) {
	s.Struct.SetUint64(512, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) Lt50m() float64 {
	return math.Float64frombits(s.Struct.Uint64(1240) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50m(v float64) {
	s.Struct.SetUint64(1240, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) PcLt50cultivar() float64 {
	return math.Float64frombits(s.Struct.Uint64(520))
}

func (s CropModuleState) SetPcLt50cultivar(v float64) {
	s.Struct.SetUint64(520, math.Float64bits(v))
}

func (s CropModuleState) PcLuxuryNCoeff() float64 {
	return math.Float64frombits(s.Struct.Uint64(528))
}

func (s CropModuleState) SetPcLuxuryNCoeff(v float64) {
	s.Struct.SetUint64(528, math.Float64bits(v))
}

func (s CropModuleState) MaintenanceRespirationAS() float64 {
	return math.Float64frombits(s.Struct.Uint64(536))
}

func (s CropModuleState) SetMaintenanceRespirationAS(v float64) {
	s.Struct.SetUint64(536, math.Float64bits(v))
}

func (s CropModuleState) PcMaxAssimilationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(544))
}

func (s CropModuleState) SetPcMaxAssimilationRate(v float64) {
	s.Struct.SetUint64(544, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(552))
}

func (s CropModuleState) SetPcMaxCropDiameter(v float64) {
	s.Struct.SetUint64(552, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(560))
}

func (s CropModuleState) SetPcMaxCropHeight(v float64) {
	s.Struct.SetUint64(560, math.Float64bits(v))
}

func (s CropModuleState) MaxNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(568))
}

func (s CropModuleState) SetMaxNUptake(v float64) {
	s.Struct.SetUint64(568, math.Float64bits(v))
}

func (s CropModuleState) PcMaxNUptakeParam() float64 {
	return math.Float64frombits(s.Struct.Uint64(576))
}

func (s CropModuleState) SetPcMaxNUptakeParam(v float64) {
	s.Struct.SetUint64(576, math.Float64bits(v))
}

func (s CropModuleState) PcMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(584))
}

func (s CropModuleState) SetPcMaxRootingDepth(v float64) {
	s.Struct.SetUint64(584, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(592))
}

func (s CropModuleState) SetPcMinimumNConcentration(v float64) {
	s.Struct.SetUint64(592, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(600))
}

func (s CropModuleState) SetPcMinimumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(600, math.Float64bits(v))
}

func (s CropModuleState) PcOptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(608))
}

func (s CropModuleState) SetPcOptimumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(608, math.Float64bits(v))
}

func (s CropModuleState) PcMaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(s.Struct.Uint64(616))
}

func (s CropModuleState) SetPcMaximumTemperatureForAssimilation(v float64) {
	s.Struct.SetUint64(616, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(s.Struct.Uint64(624))
}

func (s CropModuleState) SetPcMinimumTemperatureRootGrowth(v float64) {
	s.Struct.SetUint64(624, math.Float64bits(v))
}

func (s CropModuleState) NetMaintenanceRespiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(632))
}

func (s CropModuleState) SetNetMaintenanceRespiration(v float64) {
	s.Struct.SetUint64(632, math.Float64bits(v))
}

func (s CropModuleState) NetPhotosynthesis() float64 {
	return math.Float64frombits(s.Struct.Uint64(640))
}

func (s CropModuleState) SetNetPhotosynthesis(v float64) {
	s.Struct.SetUint64(640, math.Float64bits(v))
}

func (s CropModuleState) NetPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(648))
}

func (s CropModuleState) SetNetPrecipitation(v float64) {
	s.Struct.SetUint64(648, math.Float64bits(v))
}

func (s CropModuleState) NetPrimaryProduction() float64 {
	return math.Float64frombits(s.Struct.Uint64(656))
}

func (s CropModuleState) SetNetPrimaryProduction(v float64) {
	s.Struct.SetUint64(656, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(664))
}

func (s CropModuleState) SetPcNConcentrationAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(664, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(672))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomass(v float64) {
	s.Struct.SetUint64(672, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(680))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomassOld(v float64) {
	s.Struct.SetUint64(680, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationB0() float64 {
	return math.Float64frombits(s.Struct.Uint64(688))
}

func (s CropModuleState) SetPcNConcentrationB0(v float64) {
	s.Struct.SetUint64(688, math.Float64bits(v))
}

func (s CropModuleState) NContentDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(696))
}

func (s CropModuleState) SetNContentDeficit(v float64) {
	s.Struct.SetUint64(696, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationPN() float64 {
	return math.Float64frombits(s.Struct.Uint64(704))
}

func (s CropModuleState) SetPcNConcentrationPN(v float64) {
	s.Struct.SetUint64(704, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(712))
}

func (s CropModuleState) SetPcNConcentrationRoot(v float64) {
	s.Struct.SetUint64(712, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRoot() float64 {
	return math.Float64frombits(s.Struct.Uint64(720))
}

func (s CropModuleState) SetNConcentrationRoot(v float64) {
	s.Struct.SetUint64(720, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRootOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(728))
}

func (s CropModuleState) SetNConcentrationRootOld(v float64) {
	s.Struct.SetUint64(728, math.Float64bits(v))
}

func (s CropModuleState) PcNitrogenResponseOn() bool {
	return s.Struct.Bit(6)
}

func (s CropModuleState) SetPcNitrogenResponseOn(v bool) {
	s.Struct.SetBit(6, v)
}

func (s CropModuleState) PcNumberOfDevelopmentalStages() float64 {
	return math.Float64frombits(s.Struct.Uint64(736))
}

func (s CropModuleState) SetPcNumberOfDevelopmentalStages(v float64) {
	s.Struct.SetUint64(736, math.Float64bits(v))
}

func (s CropModuleState) PcNumberOfOrgans() float64 {
	return math.Float64frombits(s.Struct.Uint64(744))
}

func (s CropModuleState) SetPcNumberOfOrgans(v float64) {
	s.Struct.SetUint64(744, math.Float64bits(v))
}

func (s CropModuleState) NUptakeFromLayer() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasNUptakeFromLayer() bool {
	return s.Struct.HasPtr(14)
}

func (s CropModuleState) SetNUptakeFromLayer(v capnp.Float64List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewNUptakeFromLayer sets the nUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOptimumTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(15)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcOptimumTemperature() bool {
	return s.Struct.HasPtr(15)
}

func (s CropModuleState) SetPcOptimumTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(15, v.List.ToPtr())
}

// NewPcOptimumTemperature sets the pcOptimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(15, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(16)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganBiomass() bool {
	return s.Struct.HasPtr(16)
}

func (s CropModuleState) SetOrganBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(16, v.List.ToPtr())
}

// NewOrganBiomass sets the organBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(16, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganDeadBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(17)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganDeadBiomass() bool {
	return s.Struct.HasPtr(17)
}

func (s CropModuleState) SetOrganDeadBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(17, v.List.ToPtr())
}

// NewOrganDeadBiomass sets the organDeadBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganDeadBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(17, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganGreenBiomass() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(18)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganGreenBiomass() bool {
	return s.Struct.HasPtr(18)
}

func (s CropModuleState) SetOrganGreenBiomass(v capnp.Float64List) error {
	return s.Struct.SetPtr(18, v.List.ToPtr())
}

// NewOrganGreenBiomass sets the organGreenBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGreenBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(18, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganGrowthIncrement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(19)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganGrowthIncrement() bool {
	return s.Struct.HasPtr(19)
}

func (s CropModuleState) SetOrganGrowthIncrement(v capnp.Float64List) error {
	return s.Struct.SetPtr(19, v.List.ToPtr())
}

// NewOrganGrowthIncrement sets the organGrowthIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGrowthIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(19, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(20)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganGrowthRespiration() bool {
	return s.Struct.HasPtr(20)
}

func (s CropModuleState) SetPcOrganGrowthRespiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(20, v.List.ToPtr())
}

// NewPcOrganGrowthRespiration sets the pcOrganGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(20, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(21)
	return YieldComponent_List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganIdsForPrimaryYield() bool {
	return s.Struct.HasPtr(21)
}

func (s CropModuleState) SetPcOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return s.Struct.SetPtr(21, v.List.ToPtr())
}

// NewPcOrganIdsForPrimaryYield sets the pcOrganIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(21, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(22)
	return YieldComponent_List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganIdsForSecondaryYield() bool {
	return s.Struct.HasPtr(22)
}

func (s CropModuleState) SetPcOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return s.Struct.SetPtr(22, v.List.ToPtr())
}

// NewPcOrganIdsForSecondaryYield sets the pcOrganIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(22, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganIdsForCutting() (YieldComponent_List, error) {
	p, err := s.Struct.Ptr(23)
	return YieldComponent_List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganIdsForCutting() bool {
	return s.Struct.HasPtr(23)
}

func (s CropModuleState) SetPcOrganIdsForCutting(v YieldComponent_List) error {
	return s.Struct.SetPtr(23, v.List.ToPtr())
}

// NewPcOrganIdsForCutting sets the pcOrganIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(s.Struct.Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = s.Struct.SetPtr(23, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(24)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganMaintenanceRespiration() bool {
	return s.Struct.HasPtr(24)
}

func (s CropModuleState) SetPcOrganMaintenanceRespiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(24, v.List.ToPtr())
}

// NewPcOrganMaintenanceRespiration sets the pcOrganMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(24, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OrganSenescenceIncrement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(25)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasOrganSenescenceIncrement() bool {
	return s.Struct.HasPtr(25)
}

func (s CropModuleState) SetOrganSenescenceIncrement(v capnp.Float64List) error {
	return s.Struct.SetPtr(25, v.List.ToPtr())
}

// NewOrganSenescenceIncrement sets the organSenescenceIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganSenescenceIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(25, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcOrganSenescenceRate() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(26)
	return capnp.PointerList{List: p.List()}, err
}

func (s CropModuleState) HasPcOrganSenescenceRate() bool {
	return s.Struct.HasPtr(26)
}

func (s CropModuleState) SetPcOrganSenescenceRate(v capnp.PointerList) error {
	return s.Struct.SetPtr(26, v.List.ToPtr())
}

// NewPcOrganSenescenceRate sets the pcOrganSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(26, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) OvercastDayRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(752))
}

func (s CropModuleState) SetOvercastDayRadiation(v float64) {
	s.Struct.SetUint64(752, math.Float64bits(v))
}

func (s CropModuleState) OxygenDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(760))
}

func (s CropModuleState) SetOxygenDeficit(v float64) {
	s.Struct.SetUint64(760, math.Float64bits(v))
}

func (s CropModuleState) PcPartBiologicalNFixation() float64 {
	return math.Float64frombits(s.Struct.Uint64(768))
}

func (s CropModuleState) SetPcPartBiologicalNFixation(v float64) {
	s.Struct.SetUint64(768, math.Float64bits(v))
}

func (s CropModuleState) PcPerennial() bool {
	return s.Struct.Bit(7)
}

func (s CropModuleState) SetPcPerennial(v bool) {
	s.Struct.SetBit(7, v)
}

func (s CropModuleState) PhotoperiodicDaylength() float64 {
	return math.Float64frombits(s.Struct.Uint64(776))
}

func (s CropModuleState) SetPhotoperiodicDaylength(v float64) {
	s.Struct.SetUint64(776, math.Float64bits(v))
}

func (s CropModuleState) PhotActRadiationMean() float64 {
	return math.Float64frombits(s.Struct.Uint64(784))
}

func (s CropModuleState) SetPhotActRadiationMean(v float64) {
	s.Struct.SetUint64(784, math.Float64bits(v))
}

func (s CropModuleState) PcPlantDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(792))
}

func (s CropModuleState) SetPcPlantDensity(v float64) {
	s.Struct.SetUint64(792, math.Float64bits(v))
}

func (s CropModuleState) PotentialTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(800))
}

func (s CropModuleState) SetPotentialTranspiration(v float64) {
	s.Struct.SetUint64(800, math.Float64bits(v))
}

func (s CropModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(808))
}

func (s CropModuleState) SetReferenceEvapotranspiration(v float64) {
	s.Struct.SetUint64(808, math.Float64bits(v))
}

func (s CropModuleState) RelativeTotalDevelopment() float64 {
	return math.Float64frombits(s.Struct.Uint64(816))
}

func (s CropModuleState) SetRelativeTotalDevelopment(v float64) {
	s.Struct.SetUint64(816, math.Float64bits(v))
}

func (s CropModuleState) RemainingEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(824))
}

func (s CropModuleState) SetRemainingEvapotranspiration(v float64) {
	s.Struct.SetUint64(824, math.Float64bits(v))
}

func (s CropModuleState) ReserveAssimilatePool() float64 {
	return math.Float64frombits(s.Struct.Uint64(832))
}

func (s CropModuleState) SetReserveAssimilatePool(v float64) {
	s.Struct.SetUint64(832, math.Float64bits(v))
}

func (s CropModuleState) PcResidueNRatio() float64 {
	return math.Float64frombits(s.Struct.Uint64(840))
}

func (s CropModuleState) SetPcResidueNRatio(v float64) {
	s.Struct.SetUint64(840, math.Float64bits(v))
}

func (s CropModuleState) PcRespiratoryStress() float64 {
	return math.Float64frombits(s.Struct.Uint64(848))
}

func (s CropModuleState) SetPcRespiratoryStress(v float64) {
	s.Struct.SetUint64(848, math.Float64bits(v))
}

func (s CropModuleState) RootBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(856))
}

func (s CropModuleState) SetRootBiomass(v float64) {
	s.Struct.SetUint64(856, math.Float64bits(v))
}

func (s CropModuleState) RootBiomassOld() float64 {
	return math.Float64frombits(s.Struct.Uint64(864))
}

func (s CropModuleState) SetRootBiomassOld(v float64) {
	s.Struct.SetUint64(864, math.Float64bits(v))
}

func (s CropModuleState) RootDensity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(27)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRootDensity() bool {
	return s.Struct.HasPtr(27)
}

func (s CropModuleState) SetRootDensity(v capnp.Float64List) error {
	return s.Struct.SetPtr(27, v.List.ToPtr())
}

// NewRootDensity sets the rootDensity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDensity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(27, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) RootDiameter() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(28)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRootDiameter() bool {
	return s.Struct.HasPtr(28)
}

func (s CropModuleState) SetRootDiameter(v capnp.Float64List) error {
	return s.Struct.SetPtr(28, v.List.ToPtr())
}

// NewRootDiameter sets the rootDiameter field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDiameter(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(28, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcRootDistributionParam() float64 {
	return math.Float64frombits(s.Struct.Uint64(872))
}

func (s CropModuleState) SetPcRootDistributionParam(v float64) {
	s.Struct.SetUint64(872, math.Float64bits(v))
}

func (s CropModuleState) RootEffectivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(29)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRootEffectivity() bool {
	return s.Struct.HasPtr(29)
}

func (s CropModuleState) SetRootEffectivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(29, v.List.ToPtr())
}

// NewRootEffectivity sets the rootEffectivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootEffectivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(29, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcRootFormFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(880))
}

func (s CropModuleState) SetPcRootFormFactor(v float64) {
	s.Struct.SetUint64(880, math.Float64bits(v))
}

func (s CropModuleState) PcRootGrowthLag() float64 {
	return math.Float64frombits(s.Struct.Uint64(888))
}

func (s CropModuleState) SetPcRootGrowthLag(v float64) {
	s.Struct.SetUint64(888, math.Float64bits(v))
}

func (s CropModuleState) RootingDepth() uint16 {
	return s.Struct.Uint16(286)
}

func (s CropModuleState) SetRootingDepth(v uint16) {
	s.Struct.SetUint16(286, v)
}

func (s CropModuleState) RootingDepthM() float64 {
	return math.Float64frombits(s.Struct.Uint64(896))
}

func (s CropModuleState) SetRootingDepthM(v float64) {
	s.Struct.SetUint64(896, math.Float64bits(v))
}

func (s CropModuleState) RootingZone() uint16 {
	return s.Struct.Uint16(904)
}

func (s CropModuleState) SetRootingZone(v uint16) {
	s.Struct.SetUint16(904, v)
}

func (s CropModuleState) PcRootPenetrationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(912))
}

func (s CropModuleState) SetPcRootPenetrationRate(v float64) {
	s.Struct.SetUint64(912, math.Float64bits(v))
}

func (s CropModuleState) VmSaturationDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(920))
}

func (s CropModuleState) SetVmSaturationDeficit(v float64) {
	s.Struct.SetUint64(920, math.Float64bits(v))
}

func (s CropModuleState) SoilCoverage() float64 {
	return math.Float64frombits(s.Struct.Uint64(928))
}

func (s CropModuleState) SetSoilCoverage(v float64) {
	s.Struct.SetUint64(928, math.Float64bits(v))
}

func (s CropModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(30)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasVsSoilMineralNContent() bool {
	return s.Struct.HasPtr(30)
}

func (s CropModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(30, v.List.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(30, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) SoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(936))
}

func (s CropModuleState) SetSoilSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(936, math.Float64bits(v))
}

func (s CropModuleState) VsSoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(944))
}

func (s CropModuleState) SetVsSoilSpecificMaxRootingDepth(v float64) {
	s.Struct.SetUint64(944, math.Float64bits(v))
}

func (s CropModuleState) PcSpecificLeafArea() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(31)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcSpecificLeafArea() bool {
	return s.Struct.HasPtr(31)
}

func (s CropModuleState) SetPcSpecificLeafArea(v capnp.Float64List) error {
	return s.Struct.SetPtr(31, v.List.ToPtr())
}

// NewPcSpecificLeafArea sets the pcSpecificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(31, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcSpecificRootLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(952))
}

func (s CropModuleState) SetPcSpecificRootLength(v float64) {
	s.Struct.SetUint64(952, math.Float64bits(v))
}

func (s CropModuleState) PcStageAfterCut() uint16 {
	return s.Struct.Uint16(906)
}

func (s CropModuleState) SetPcStageAfterCut(v uint16) {
	s.Struct.SetUint16(906, v)
}

func (s CropModuleState) PcStageAtMaxDiameter() float64 {
	return math.Float64frombits(s.Struct.Uint64(960))
}

func (s CropModuleState) SetPcStageAtMaxDiameter(v float64) {
	s.Struct.SetUint64(960, math.Float64bits(v))
}

func (s CropModuleState) PcStageAtMaxHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(968))
}

func (s CropModuleState) SetPcStageAtMaxHeight(v float64) {
	s.Struct.SetUint64(968, math.Float64bits(v))
}

func (s CropModuleState) PcStageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(32)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcStageMaxRootNConcentration() bool {
	return s.Struct.HasPtr(32)
}

func (s CropModuleState) SetPcStageMaxRootNConcentration(v capnp.Float64List) error {
	return s.Struct.SetPtr(32, v.List.ToPtr())
}

// NewPcStageMaxRootNConcentration sets the pcStageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(32, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcStageKcFactor() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(33)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcStageKcFactor() bool {
	return s.Struct.HasPtr(33)
}

func (s CropModuleState) SetPcStageKcFactor(v capnp.Float64List) error {
	return s.Struct.SetPtr(33, v.List.ToPtr())
}

// NewPcStageKcFactor sets the pcStageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(33, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcStageTemperatureSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(34)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcStageTemperatureSum() bool {
	return s.Struct.HasPtr(34)
}

func (s CropModuleState) SetPcStageTemperatureSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(34, v.List.ToPtr())
}

// NewPcStageTemperatureSum sets the pcStageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(34, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) StomataResistance() float64 {
	return math.Float64frombits(s.Struct.Uint64(976))
}

func (s CropModuleState) SetStomataResistance(v float64) {
	s.Struct.SetUint64(976, math.Float64bits(v))
}

func (s CropModuleState) PcStorageOrgan() (capnp.BitList, error) {
	p, err := s.Struct.Ptr(35)
	return capnp.BitList{List: p.List()}, err
}

func (s CropModuleState) HasPcStorageOrgan() bool {
	return s.Struct.HasPtr(35)
}

func (s CropModuleState) SetPcStorageOrgan(v capnp.BitList) error {
	return s.Struct.SetPtr(35, v.List.ToPtr())
}

// NewPcStorageOrgan sets the pcStorageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = s.Struct.SetPtr(35, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) StorageOrgan() uint16 {
	return s.Struct.Uint16(908) ^ 4
}

func (s CropModuleState) SetStorageOrgan(v uint16) {
	s.Struct.SetUint16(908, v^4)
}

func (s CropModuleState) TargetNConcentration() float64 {
	return math.Float64frombits(s.Struct.Uint64(984))
}

func (s CropModuleState) SetTargetNConcentration(v float64) {
	s.Struct.SetUint64(984, math.Float64bits(v))
}

func (s CropModuleState) TimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(992) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTimeStep(v float64) {
	s.Struct.SetUint64(992, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) TimeUnderAnoxia() uint64 {
	return s.Struct.Uint64(1000)
}

func (s CropModuleState) SetTimeUnderAnoxia(v uint64) {
	s.Struct.SetUint64(1000, v)
}

func (s CropModuleState) VsTortuosity() float64 {
	return math.Float64frombits(s.Struct.Uint64(1008))
}

func (s CropModuleState) SetVsTortuosity(v float64) {
	s.Struct.SetUint64(1008, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1016))
}

func (s CropModuleState) SetTotalBiomass(v float64) {
	s.Struct.SetUint64(1016, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomassNContent() float64 {
	return math.Float64frombits(s.Struct.Uint64(1024))
}

func (s CropModuleState) SetTotalBiomassNContent(v float64) {
	s.Struct.SetUint64(1024, math.Float64bits(v))
}

func (s CropModuleState) TotalCropHeatImpact() float64 {
	return math.Float64frombits(s.Struct.Uint64(1032))
}

func (s CropModuleState) SetTotalCropHeatImpact(v float64) {
	s.Struct.SetUint64(1032, math.Float64bits(v))
}

func (s CropModuleState) TotalNInput() float64 {
	return math.Float64frombits(s.Struct.Uint64(1040))
}

func (s CropModuleState) SetTotalNInput(v float64) {
	s.Struct.SetUint64(1040, math.Float64bits(v))
}

func (s CropModuleState) TotalNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(1048))
}

func (s CropModuleState) SetTotalNUptake(v float64) {
	s.Struct.SetUint64(1048, math.Float64bits(v))
}

func (s CropModuleState) TotalRespired() float64 {
	return math.Float64frombits(s.Struct.Uint64(1056))
}

func (s CropModuleState) SetTotalRespired(v float64) {
	s.Struct.SetUint64(1056, math.Float64bits(v))
}

func (s CropModuleState) Respiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(1064))
}

func (s CropModuleState) SetRespiration(v float64) {
	s.Struct.SetUint64(1064, math.Float64bits(v))
}

func (s CropModuleState) SumTotalNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(1072))
}

func (s CropModuleState) SetSumTotalNUptake(v float64) {
	s.Struct.SetUint64(1072, math.Float64bits(v))
}

func (s CropModuleState) TotalRootLength() float64 {
	return math.Float64frombits(s.Struct.Uint64(1080))
}

func (s CropModuleState) SetTotalRootLength(v float64) {
	s.Struct.SetUint64(1080, math.Float64bits(v))
}

func (s CropModuleState) TotalTemperatureSum() float64 {
	return math.Float64frombits(s.Struct.Uint64(1088))
}

func (s CropModuleState) SetTotalTemperatureSum(v float64) {
	s.Struct.SetUint64(1088, math.Float64bits(v))
}

func (s CropModuleState) TemperatureSumToFlowering() float64 {
	return math.Float64frombits(s.Struct.Uint64(1096))
}

func (s CropModuleState) SetTemperatureSumToFlowering(v float64) {
	s.Struct.SetUint64(1096, math.Float64bits(v))
}

func (s CropModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(36)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTranspiration() bool {
	return s.Struct.HasPtr(36)
}

func (s CropModuleState) SetTranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(36, v.List.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(36, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) TranspirationRedux() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(37)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTranspirationRedux() bool {
	return s.Struct.HasPtr(37)
}

func (s CropModuleState) SetTranspirationRedux(v capnp.Float64List) error {
	return s.Struct.SetPtr(37, v.List.ToPtr())
}

// NewTranspirationRedux sets the transpirationRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspirationRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(37, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(1104) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTranspirationDeficit(v float64) {
	s.Struct.SetUint64(1104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) VernalisationDays() float64 {
	return math.Float64frombits(s.Struct.Uint64(1112))
}

func (s CropModuleState) SetVernalisationDays(v float64) {
	s.Struct.SetUint64(1112, math.Float64bits(v))
}

func (s CropModuleState) VernalisationFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(1120))
}

func (s CropModuleState) SetVernalisationFactor(v float64) {
	s.Struct.SetUint64(1120, math.Float64bits(v))
}

func (s CropModuleState) PcVernalisationRequirement() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(38)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasPcVernalisationRequirement() bool {
	return s.Struct.HasPtr(38)
}

func (s CropModuleState) SetPcVernalisationRequirement(v capnp.Float64List) error {
	return s.Struct.SetPtr(38, v.List.ToPtr())
}

// NewPcVernalisationRequirement sets the pcVernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(38, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) PcWaterDeficitResponseOn() bool {
	return s.Struct.Bit(7280)
}

func (s CropModuleState) SetPcWaterDeficitResponseOn(v bool) {
	s.Struct.SetBit(7280, v)
}

func (s CropModuleState) DyingOut() bool {
	return s.Struct.Bit(7281)
}

func (s CropModuleState) SetDyingOut(v bool) {
	s.Struct.SetBit(7281, v)
}

func (s CropModuleState) AccumulatedETa() float64 {
	return math.Float64frombits(s.Struct.Uint64(1152))
}

func (s CropModuleState) SetAccumulatedETa(v float64) {
	s.Struct.SetUint64(1152, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(1160))
}

func (s CropModuleState) SetAccumulatedTranspiration(v float64) {
	s.Struct.SetUint64(1160, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedPrimaryCropYield() float64 {
	return math.Float64frombits(s.Struct.Uint64(1168))
}

func (s CropModuleState) SetAccumulatedPrimaryCropYield(v float64) {
	s.Struct.SetUint64(1168, math.Float64bits(v))
}

func (s CropModuleState) SumExportedCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1176))
}

func (s CropModuleState) SetSumExportedCutBiomass(v float64) {
	s.Struct.SetUint64(1176, math.Float64bits(v))
}

func (s CropModuleState) ExportedCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1184))
}

func (s CropModuleState) SetExportedCutBiomass(v float64) {
	s.Struct.SetUint64(1184, math.Float64bits(v))
}

func (s CropModuleState) SumResidueCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1192))
}

func (s CropModuleState) SetSumResidueCutBiomass(v float64) {
	s.Struct.SetUint64(1192, math.Float64bits(v))
}

func (s CropModuleState) ResidueCutBiomass() float64 {
	return math.Float64frombits(s.Struct.Uint64(1200))
}

func (s CropModuleState) SetResidueCutBiomass(v float64) {
	s.Struct.SetUint64(1200, math.Float64bits(v))
}

func (s CropModuleState) CuttingDelayDays() uint16 {
	return s.Struct.Uint16(1208)
}

func (s CropModuleState) SetCuttingDelayDays(v uint16) {
	s.Struct.SetUint16(1208, v)
}

func (s CropModuleState) VsMaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(1216))
}

func (s CropModuleState) SetVsMaxEffectiveRootingDepth(v float64) {
	s.Struct.SetUint64(1216, math.Float64bits(v))
}

func (s CropModuleState) VsImpenetrableLayerDept() float64 {
	return math.Float64frombits(s.Struct.Uint64(1224))
}

func (s CropModuleState) SetVsImpenetrableLayerDept(v float64) {
	s.Struct.SetUint64(1224, math.Float64bits(v))
}

func (s CropModuleState) AnthesisDay() int16 {
	return int16(s.Struct.Uint16(1210) ^ 65535)
}

func (s CropModuleState) SetAnthesisDay(v int16) {
	s.Struct.SetUint16(1210, uint16(v)^65535)
}

func (s CropModuleState) MaturityDay() int16 {
	return int16(s.Struct.Uint16(1212) ^ 65535)
}

func (s CropModuleState) SetMaturityDay(v int16) {
	s.Struct.SetUint16(1212, uint16(v)^65535)
}

func (s CropModuleState) MaturityReached() bool {
	return s.Struct.Bit(7282)
}

func (s CropModuleState) SetMaturityReached(v bool) {
	s.Struct.SetBit(7282, v)
}

func (s CropModuleState) StepSize24() uint16 {
	return s.Struct.Uint16(1214) ^ 24
}

func (s CropModuleState) SetStepSize24(v uint16) {
	s.Struct.SetUint16(1214, v^24)
}

func (s CropModuleState) StepSize240() uint16 {
	return s.Struct.Uint16(1232) ^ 240
}

func (s CropModuleState) SetStepSize240(v uint16) {
	s.Struct.SetUint16(1232, v^240)
}

func (s CropModuleState) Rad24() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(39)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRad24() bool {
	return s.Struct.HasPtr(39)
}

func (s CropModuleState) SetRad24(v capnp.Float64List) error {
	return s.Struct.SetPtr(39, v.List.ToPtr())
}

// NewRad24 sets the rad24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(39, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Rad240() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(40)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasRad240() bool {
	return s.Struct.HasPtr(40)
}

func (s CropModuleState) SetRad240(v capnp.Float64List) error {
	return s.Struct.SetPtr(40, v.List.ToPtr())
}

// NewRad240 sets the rad240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(40, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Tfol24() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(41)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTfol24() bool {
	return s.Struct.HasPtr(41)
}

func (s CropModuleState) SetTfol24(v capnp.Float64List) error {
	return s.Struct.SetPtr(41, v.List.ToPtr())
}

// NewTfol24 sets the tfol24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(41, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Tfol240() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(42)
	return capnp.Float64List{List: p.List()}, err
}

func (s CropModuleState) HasTfol240() bool {
	return s.Struct.HasPtr(42)
}

func (s CropModuleState) SetTfol240(v capnp.Float64List) error {
	return s.Struct.SetPtr(42, v.List.ToPtr())
}

// NewTfol240 sets the tfol240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(42, l.List.ToPtr())
	return l, err
}

func (s CropModuleState) Index24() uint16 {
	return s.Struct.Uint16(1234)
}

func (s CropModuleState) SetIndex24(v uint16) {
	s.Struct.SetUint16(1234, v)
}

func (s CropModuleState) Index240() uint16 {
	return s.Struct.Uint16(1236)
}

func (s CropModuleState) SetIndex240(v uint16) {
	s.Struct.SetUint16(1236, v)
}

func (s CropModuleState) Full24() bool {
	return s.Struct.Bit(7283)
}

func (s CropModuleState) SetFull24(v bool) {
	s.Struct.SetBit(7283, v)
}

func (s CropModuleState) Full240() bool {
	return s.Struct.Bit(7284)
}

func (s CropModuleState) SetFull240(v bool) {
	s.Struct.SetBit(7284, v)
}

func (s CropModuleState) GuentherEmissions() (Voc_Emissions, error) {
	p, err := s.Struct.Ptr(43)
	return Voc_Emissions{Struct: p.Struct()}, err
}

func (s CropModuleState) HasGuentherEmissions() bool {
	return s.Struct.HasPtr(43)
}

func (s CropModuleState) SetGuentherEmissions(v Voc_Emissions) error {
	return s.Struct.SetPtr(43, v.Struct.ToPtr())
}

// NewGuentherEmissions sets the guentherEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewGuentherEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(s.Struct.Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = s.Struct.SetPtr(43, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) JjvEmissions() (Voc_Emissions, error) {
	p, err := s.Struct.Ptr(44)
	return Voc_Emissions{Struct: p.Struct()}, err
}

func (s CropModuleState) HasJjvEmissions() bool {
	return s.Struct.HasPtr(44)
}

func (s CropModuleState) SetJjvEmissions(v Voc_Emissions) error {
	return s.Struct.SetPtr(44, v.Struct.ToPtr())
}

// NewJjvEmissions sets the jjvEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewJjvEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(s.Struct.Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = s.Struct.SetPtr(44, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) VocSpecies() (Voc_SpeciesData, error) {
	p, err := s.Struct.Ptr(45)
	return Voc_SpeciesData{Struct: p.Struct()}, err
}

func (s CropModuleState) HasVocSpecies() bool {
	return s.Struct.HasPtr(45)
}

func (s CropModuleState) SetVocSpecies(v Voc_SpeciesData) error {
	return s.Struct.SetPtr(45, v.Struct.ToPtr())
}

// NewVocSpecies sets the vocSpecies field to a newly
// allocated Voc_SpeciesData struct, preferring placement in s's segment.
func (s CropModuleState) NewVocSpecies() (Voc_SpeciesData, error) {
	ss, err := NewVoc_SpeciesData(s.Struct.Segment())
	if err != nil {
		return Voc_SpeciesData{}, err
	}
	err = s.Struct.SetPtr(45, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) CropPhotosynthesisResults() (Voc_CPData, error) {
	p, err := s.Struct.Ptr(46)
	return Voc_CPData{Struct: p.Struct()}, err
}

func (s CropModuleState) HasCropPhotosynthesisResults() bool {
	return s.Struct.HasPtr(46)
}

func (s CropModuleState) SetCropPhotosynthesisResults(v Voc_CPData) error {
	return s.Struct.SetPtr(46, v.Struct.ToPtr())
}

// NewCropPhotosynthesisResults sets the cropPhotosynthesisResults field to a newly
// allocated Voc_CPData struct, preferring placement in s's segment.
func (s CropModuleState) NewCropPhotosynthesisResults() (Voc_CPData, error) {
	ss, err := NewVoc_CPData(s.Struct.Segment())
	if err != nil {
		return Voc_CPData{}, err
	}
	err = s.Struct.SetPtr(46, ss.Struct.ToPtr())
	return ss, err
}

func (s CropModuleState) O3ShortTermDamage() float64 {
	return math.Float64frombits(s.Struct.Uint64(1144) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3ShortTermDamage(v float64) {
	s.Struct.SetUint64(1144, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3LongTermDamage() float64 {
	return math.Float64frombits(s.Struct.Uint64(1136) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3LongTermDamage(v float64) {
	s.Struct.SetUint64(1136, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3Senescence() float64 {
	return math.Float64frombits(s.Struct.Uint64(1128) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3Senescence(v float64) {
	s.Struct.SetUint64(1128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3SumUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s CropModuleState) SetO3SumUptake(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s CropModuleState) O3WStomatalClosure() float64 {
	return math.Float64frombits(s.Struct.Uint64(24) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3WStomatalClosure(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) AssimilatePartCoeffsReduced() bool {
	return s.Struct.Bit(1)
}

func (s CropModuleState) SetAssimilatePartCoeffsReduced(v bool) {
	s.Struct.SetBit(1, v)
}

func (s CropModuleState) Ktkc() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s CropModuleState) SetKtkc(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s CropModuleState) Ktko() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s CropModuleState) SetKtko(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s CropModuleState) StemElongationEventFired() bool {
	return s.Struct.Bit(7286)
}

func (s CropModuleState) SetStemElongationEventFired(v bool) {
	s.Struct.SetBit(7286, v)
}

// CropModuleState_List is a list of CropModuleState.
type CropModuleState_List struct{ capnp.List }

// NewCropModuleState creates a new list of CropModuleState.
func NewCropModuleState_List(s *capnp.Segment, sz int32) (CropModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50}, sz)
	return CropModuleState_List{l}, err
}

func (s CropModuleState_List) At(i int) CropModuleState { return CropModuleState{s.List.Struct(i)} }

func (s CropModuleState_List) Set(i int, v CropModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CropModuleState_List) String() string {
	str, _ := text.MarshalList(0x811d54ac7debc21e, s.List)
	return str
}

// CropModuleState_Future is a wrapper for a CropModuleState promised by a client call.
type CropModuleState_Future struct{ *capnp.Future }

func (p CropModuleState_Future) Struct() (CropModuleState, error) {
	s, err := p.Future.Struct()
	return CropModuleState{s}, err
}

func (p CropModuleState_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(47, nil)}
}

func (p CropModuleState_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(48, nil)}
}

func (p CropModuleState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(49, nil)}
}

func (p CropModuleState_Future) GuentherEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(43, nil)}
}

func (p CropModuleState_Future) JjvEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(44, nil)}
}

func (p CropModuleState_Future) VocSpecies() Voc_SpeciesData_Future {
	return Voc_SpeciesData_Future{Future: p.Future.Field(45, nil)}
}

func (p CropModuleState_Future) CropPhotosynthesisResults() Voc_CPData_Future {
	return Voc_CPData_Future{Future: p.Future.Field(46, nil)}
}

type SnowModuleState struct{ capnp.Struct }

// SnowModuleState_TypeID is the unique identifier for the type SnowModuleState.
const SnowModuleState_TypeID = 0xa4da01d10b3b6acd

func NewSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState{st}, err
}

func NewRootSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState{st}, err
}

func ReadRootSnowModuleState(msg *capnp.Message) (SnowModuleState, error) {
	root, err := msg.Root()
	return SnowModuleState{root.Struct()}, err
}

func (s SnowModuleState) String() string {
	str, _ := text.Marshal(0xa4da01d10b3b6acd, s.Struct)
	return str
}

func (s SnowModuleState) SnowDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SnowModuleState) SetSnowDensity(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SnowModuleState) SnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SnowModuleState) SetSnowDepth(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SnowModuleState) FrozenWaterInSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SnowModuleState) SetFrozenWaterInSnow(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SnowModuleState) LiquidWaterInSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SnowModuleState) SetLiquidWaterInSnow(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SnowModuleState) WaterToInfiltrate() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SnowModuleState) SetWaterToInfiltrate(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SnowModuleState) MaxSnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SnowModuleState) SetMaxSnowDepth(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SnowModuleState) AccumulatedSnowDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SnowModuleState) SetAccumulatedSnowDepth(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SnowModuleState) SnowmeltTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SnowModuleState) SetSnowmeltTemperature(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SnowModuleState) SnowAccumulationThresholdTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SnowModuleState) SetSnowAccumulationThresholdTemperature(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SnowModuleState) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SnowModuleState) SetTemperatureLimitForLiquidWater(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionRain() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SnowModuleState) SetCorrectionRain(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SnowModuleState) SetCorrectionSnow(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SnowModuleState) SetRefreezeTemperature(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP1() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SnowModuleState) SetRefreezeP1(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP2() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s SnowModuleState) SetRefreezeP2(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s SnowModuleState) NewSnowDensityMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s SnowModuleState) SetNewSnowDensityMin(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s SnowModuleState) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s SnowModuleState) SetSnowMaxAdditionalDensity(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s SnowModuleState) SnowPacking() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s SnowModuleState) SetSnowPacking(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s SnowModuleState) SetSnowRetentionCapacityMin(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SnowModuleState) SetSnowRetentionCapacityMax(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// SnowModuleState_List is a list of SnowModuleState.
type SnowModuleState_List struct{ capnp.List }

// NewSnowModuleState creates a new list of SnowModuleState.
func NewSnowModuleState_List(s *capnp.Segment, sz int32) (SnowModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0}, sz)
	return SnowModuleState_List{l}, err
}

func (s SnowModuleState_List) At(i int) SnowModuleState { return SnowModuleState{s.List.Struct(i)} }

func (s SnowModuleState_List) Set(i int, v SnowModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SnowModuleState_List) String() string {
	str, _ := text.MarshalList(0xa4da01d10b3b6acd, s.List)
	return str
}

// SnowModuleState_Future is a wrapper for a SnowModuleState promised by a client call.
type SnowModuleState_Future struct{ *capnp.Future }

func (p SnowModuleState_Future) Struct() (SnowModuleState, error) {
	s, err := p.Future.Struct()
	return SnowModuleState{s}, err
}

type FrostModuleState struct{ capnp.Struct }

// FrostModuleState_TypeID is the unique identifier for the type FrostModuleState.
const FrostModuleState_TypeID = 0xb4f16ea3144d85a6

func NewFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState{st}, err
}

func NewRootFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState{st}, err
}

func ReadRootFrostModuleState(msg *capnp.Message) (FrostModuleState, error) {
	root, err := msg.Root()
	return FrostModuleState{root.Struct()}, err
}

func (s FrostModuleState) String() string {
	str, _ := text.Marshal(0xb4f16ea3144d85a6, s.Struct)
	return str
}

func (s FrostModuleState) FrostDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s FrostModuleState) SetFrostDepth(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s FrostModuleState) AccumulatedFrostDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s FrostModuleState) SetAccumulatedFrostDepth(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s FrostModuleState) NegativeDegreeDays() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s FrostModuleState) SetNegativeDegreeDays(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s FrostModuleState) ThawDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s FrostModuleState) SetThawDepth(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s FrostModuleState) FrostDays() uint16 {
	return s.Struct.Uint16(40)
}

func (s FrostModuleState) SetFrostDays(v uint16) {
	s.Struct.SetUint16(40, v)
}

func (s FrostModuleState) LambdaRedux() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s FrostModuleState) HasLambdaRedux() bool {
	return s.Struct.HasPtr(0)
}

func (s FrostModuleState) SetLambdaRedux(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLambdaRedux sets the lambdaRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s FrostModuleState) NewLambdaRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FrostModuleState) TemperatureUnderSnow() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s FrostModuleState) SetTemperatureUnderSnow(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s FrostModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s FrostModuleState) SetHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s FrostModuleState) PtTimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s FrostModuleState) SetPtTimeStep(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s FrostModuleState) PmHydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s FrostModuleState) SetPmHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// FrostModuleState_List is a list of FrostModuleState.
type FrostModuleState_List struct{ capnp.List }

// NewFrostModuleState creates a new list of FrostModuleState.
func NewFrostModuleState_List(s *capnp.Segment, sz int32) (FrostModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return FrostModuleState_List{l}, err
}

func (s FrostModuleState_List) At(i int) FrostModuleState { return FrostModuleState{s.List.Struct(i)} }

func (s FrostModuleState_List) Set(i int, v FrostModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FrostModuleState_List) String() string {
	str, _ := text.MarshalList(0xb4f16ea3144d85a6, s.List)
	return str
}

// FrostModuleState_Future is a wrapper for a FrostModuleState promised by a client call.
type FrostModuleState_Future struct{ *capnp.Future }

func (p FrostModuleState_Future) Struct() (FrostModuleState, error) {
	s, err := p.Future.Struct()
	return FrostModuleState{s}, err
}

type SoilMoistureModuleState struct{ capnp.Struct }

// SoilMoistureModuleState_TypeID is the unique identifier for the type SoilMoistureModuleState.
const SoilMoistureModuleState_TypeID = 0xcd05962719bf7ec8

func NewSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState{st}, err
}

func NewRootSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState{st}, err
}

func ReadRootSoilMoistureModuleState(msg *capnp.Message) (SoilMoistureModuleState, error) {
	root, err := msg.Root()
	return SoilMoistureModuleState{root.Struct()}, err
}

func (s SoilMoistureModuleState) String() string {
	str, _ := text.Marshal(0xcd05962719bf7ec8, s.Struct)
	return str
}

func (s SoilMoistureModuleState) ModuleParams() (SoilMoistureModuleParameters, error) {
	p, err := s.Struct.Ptr(2)
	return SoilMoistureModuleParameters{Struct: p.Struct()}, err
}

func (s SoilMoistureModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilMoistureModuleState) SetModuleParams(v SoilMoistureModuleParameters) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilMoistureModuleParameters struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewModuleParams() (SoilMoistureModuleParameters, error) {
	ss, err := NewSoilMoistureModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilMoistureModuleParameters{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) NumberOfLayers() uint16 {
	return s.Struct.Uint16(24)
}

func (s SoilMoistureModuleState) SetNumberOfLayers(v uint16) {
	s.Struct.SetUint16(24, v)
}

func (s SoilMoistureModuleState) VsNumberOfLayers() uint16 {
	return s.Struct.Uint16(26)
}

func (s SoilMoistureModuleState) SetVsNumberOfLayers(v uint16) {
	s.Struct.SetUint16(26, v)
}

func (s SoilMoistureModuleState) ActualEvaporation() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilMoistureModuleState) SetActualEvaporation(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilMoistureModuleState) SetActualEvapotranspiration(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilMoistureModuleState) SetActualTranspiration(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleState) AvailableWater() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasAvailableWater() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilMoistureModuleState) SetAvailableWater(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewAvailableWater sets the availableWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewAvailableWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) CapillaryRise() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SoilMoistureModuleState) SetCapillaryRise(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleState) CapillaryRiseRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasCapillaryRiseRate() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilMoistureModuleState) SetCapillaryRiseRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewCapillaryRiseRate sets the capillaryRiseRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryRiseRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) CapillaryWater() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasCapillaryWater() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilMoistureModuleState) SetCapillaryWater(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewCapillaryWater sets the capillaryWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) CapillaryWater70() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasCapillaryWater70() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilMoistureModuleState) SetCapillaryWater70(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewCapillaryWater70 sets the capillaryWater70 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater70(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) Evaporation() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasEvaporation() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilMoistureModuleState) SetEvaporation(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewEvaporation sets the evaporation field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvaporation(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) Evapotranspiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasEvapotranspiration() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilMoistureModuleState) SetEvapotranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewEvapotranspiration sets the evapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) FieldCapacity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasFieldCapacity() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilMoistureModuleState) SetFieldCapacity(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewFieldCapacity sets the fieldCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFieldCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) FluxAtLowerBoundary() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilMoistureModuleState) SetFluxAtLowerBoundary(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GravitationalWater() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasGravitationalWater() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilMoistureModuleState) SetGravitationalWater(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewGravitationalWater sets the gravitationalWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewGravitationalWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) GrossPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilMoistureModuleState) SetGrossPrecipitation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterAdded() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilMoistureModuleState) SetGroundwaterAdded(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterDischarge() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SoilMoistureModuleState) SetGroundwaterDischarge(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterTable() uint16 {
	return s.Struct.Uint16(28)
}

func (s SoilMoistureModuleState) SetGroundwaterTable(v uint16) {
	s.Struct.SetUint16(28, v)
}

func (s SoilMoistureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasHeatConductivity() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilMoistureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilMoistureModuleState) SetHydraulicConductivityRedux(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Infiltration() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SoilMoistureModuleState) SetInfiltration(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Interception() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SoilMoistureModuleState) SetInterception(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcKcFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(120) ^ 0x3fe3333333333333)
}

func (s SoilMoistureModuleState) SetVcKcFactor(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilMoistureModuleState) Lambda() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasLambda() bool {
	return s.Struct.HasPtr(12)
}

func (s SoilMoistureModuleState) SetLambda(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewLambda sets the lambda field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLambda(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) LambdaReduced() float64 {
	return math.Float64frombits(s.Struct.Uint64(128))
}

func (s SoilMoistureModuleState) SetLambdaReduced(v float64) {
	s.Struct.SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VsLatitude() float64 {
	return math.Float64frombits(s.Struct.Uint64(136))
}

func (s SoilMoistureModuleState) SetVsLatitude(v float64) {
	s.Struct.SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleState) LayerThickness() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasLayerThickness() bool {
	return s.Struct.HasPtr(13)
}

func (s SoilMoistureModuleState) SetLayerThickness(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewLayerThickness sets the layerThickness field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLayerThickness(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) PmLayerThickness() float64 {
	return math.Float64frombits(s.Struct.Uint64(144))
}

func (s SoilMoistureModuleState) SetPmLayerThickness(v float64) {
	s.Struct.SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(152))
}

func (s SoilMoistureModuleState) SetPmLeachingDepth(v float64) {
	s.Struct.SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepthLayer() uint16 {
	return s.Struct.Uint16(30)
}

func (s SoilMoistureModuleState) SetPmLeachingDepthLayer(v uint16) {
	s.Struct.SetUint16(30, v)
}

func (s SoilMoistureModuleState) VwMaxAirTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(160))
}

func (s SoilMoistureModuleState) SetVwMaxAirTemperature(v float64) {
	s.Struct.SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmMaxPercolationRate() float64 {
	return math.Float64frombits(s.Struct.Uint64(168))
}

func (s SoilMoistureModuleState) SetPmMaxPercolationRate(v float64) {
	s.Struct.SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMeanAirTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(176))
}

func (s SoilMoistureModuleState) SetVwMeanAirTemperature(v float64) {
	s.Struct.SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMinAirTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(184))
}

func (s SoilMoistureModuleState) SetVwMinAirTemperature(v float64) {
	s.Struct.SetUint64(184, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcNetPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(192))
}

func (s SoilMoistureModuleState) SetVcNetPrecipitation(v float64) {
	s.Struct.SetUint64(192, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwNetRadiation() float64 {
	return math.Float64frombits(s.Struct.Uint64(200))
}

func (s SoilMoistureModuleState) SetVwNetRadiation(v float64) {
	s.Struct.SetUint64(200, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PermanentWiltingPoint() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasPermanentWiltingPoint() bool {
	return s.Struct.HasPtr(14)
}

func (s SoilMoistureModuleState) SetPermanentWiltingPoint(v capnp.Float64List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewPermanentWiltingPoint sets the permanentWiltingPoint field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPermanentWiltingPoint(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VcPercentageSoilCoverage() float64 {
	return math.Float64frombits(s.Struct.Uint64(208))
}

func (s SoilMoistureModuleState) SetVcPercentageSoilCoverage(v float64) {
	s.Struct.SetUint64(208, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(15)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasPercolationRate() bool {
	return s.Struct.HasPtr(15)
}

func (s SoilMoistureModuleState) SetPercolationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(15, v.List.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(15, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VwPrecipitation() float64 {
	return math.Float64frombits(s.Struct.Uint64(216))
}

func (s SoilMoistureModuleState) SetVwPrecipitation(v float64) {
	s.Struct.SetUint64(216, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(224) ^ 0x4018000000000000)
}

func (s SoilMoistureModuleState) SetReferenceEvapotranspiration(v float64) {
	s.Struct.SetUint64(224, math.Float64bits(v)^0x4018000000000000)
}

func (s SoilMoistureModuleState) RelativeHumidity() float64 {
	return math.Float64frombits(s.Struct.Uint64(232))
}

func (s SoilMoistureModuleState) SetRelativeHumidity(v float64) {
	s.Struct.SetUint64(232, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ResidualEvapotranspiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(16)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasResidualEvapotranspiration() bool {
	return s.Struct.HasPtr(16)
}

func (s SoilMoistureModuleState) SetResidualEvapotranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(16, v.List.ToPtr())
}

// NewResidualEvapotranspiration sets the residualEvapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewResidualEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(16, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) SaturatedHydraulicConductivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(17)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasSaturatedHydraulicConductivity() bool {
	return s.Struct.HasPtr(17)
}

func (s SoilMoistureModuleState) SetSaturatedHydraulicConductivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(17, v.List.ToPtr())
}

// NewSaturatedHydraulicConductivity sets the saturatedHydraulicConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSaturatedHydraulicConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(17, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) SoilMoisture() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(18)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasSoilMoisture() bool {
	return s.Struct.HasPtr(18)
}

func (s SoilMoistureModuleState) SetSoilMoisture(v capnp.Float64List) error {
	return s.Struct.SetPtr(18, v.List.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilMoisture(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(18, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) SoilMoisturecrit() float64 {
	return math.Float64frombits(s.Struct.Uint64(240))
}

func (s SoilMoistureModuleState) SetSoilMoisturecrit(v float64) {
	s.Struct.SetUint64(240, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilMoistureDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(248))
}

func (s SoilMoistureModuleState) SetSoilMoistureDeficit(v float64) {
	s.Struct.SetUint64(248, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilPoreVolume() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(19)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasSoilPoreVolume() bool {
	return s.Struct.HasPtr(19)
}

func (s SoilMoistureModuleState) SetSoilPoreVolume(v capnp.Float64List) error {
	return s.Struct.SetPtr(19, v.List.ToPtr())
}

// NewSoilPoreVolume sets the soilPoreVolume field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilPoreVolume(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(19, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VcStomataResistance() float64 {
	return math.Float64frombits(s.Struct.Uint64(256))
}

func (s SoilMoistureModuleState) SetVcStomataResistance(v float64) {
	s.Struct.SetUint64(256, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRoughness() float64 {
	return math.Float64frombits(s.Struct.Uint64(264))
}

func (s SoilMoistureModuleState) SetSurfaceRoughness(v float64) {
	s.Struct.SetUint64(264, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRunOff() float64 {
	return math.Float64frombits(s.Struct.Uint64(272))
}

func (s SoilMoistureModuleState) SetSurfaceRunOff(v float64) {
	s.Struct.SetUint64(272, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SumSurfaceRunOff() float64 {
	return math.Float64frombits(s.Struct.Uint64(280))
}

func (s SoilMoistureModuleState) SetSumSurfaceRunOff(v float64) {
	s.Struct.SetUint64(280, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceWaterStorage() float64 {
	return math.Float64frombits(s.Struct.Uint64(288))
}

func (s SoilMoistureModuleState) SetSurfaceWaterStorage(v float64) {
	s.Struct.SetUint64(288, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PtTimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(296))
}

func (s SoilMoistureModuleState) SetPtTimeStep(v float64) {
	s.Struct.SetUint64(296, math.Float64bits(v))
}

func (s SoilMoistureModuleState) TotalWaterRemoval() float64 {
	return math.Float64frombits(s.Struct.Uint64(304))
}

func (s SoilMoistureModuleState) SetTotalWaterRemoval(v float64) {
	s.Struct.SetUint64(304, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(20)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasTranspiration() bool {
	return s.Struct.HasPtr(20)
}

func (s SoilMoistureModuleState) SetTranspiration(v capnp.Float64List) error {
	return s.Struct.SetPtr(20, v.List.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(20, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(s.Struct.Uint64(312))
}

func (s SoilMoistureModuleState) SetTranspirationDeficit(v float64) {
	s.Struct.SetUint64(312, math.Float64bits(v))
}

func (s SoilMoistureModuleState) WaterFlux() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(21)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilMoistureModuleState) HasWaterFlux() bool {
	return s.Struct.HasPtr(21)
}

func (s SoilMoistureModuleState) SetWaterFlux(v capnp.Float64List) error {
	return s.Struct.SetPtr(21, v.List.ToPtr())
}

// NewWaterFlux sets the waterFlux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewWaterFlux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(21, l.List.ToPtr())
	return l, err
}

func (s SoilMoistureModuleState) VwWindSpeed() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilMoistureModuleState) SetVwWindSpeed(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwWindSpeedHeight() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilMoistureModuleState) SetVwWindSpeedHeight(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleState) XSACriticalSoilMoisture() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilMoistureModuleState) SetXSACriticalSoilMoisture(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SnowComponent() (SnowModuleState, error) {
	p, err := s.Struct.Ptr(1)
	return SnowModuleState{Struct: p.Struct()}, err
}

func (s SoilMoistureModuleState) HasSnowComponent() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilMoistureModuleState) SetSnowComponent(v SnowModuleState) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSnowComponent sets the snowComponent field to a newly
// allocated SnowModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSnowComponent() (SnowModuleState, error) {
	ss, err := NewSnowModuleState(s.Struct.Segment())
	if err != nil {
		return SnowModuleState{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) FrostComponent() (FrostModuleState, error) {
	p, err := s.Struct.Ptr(0)
	return FrostModuleState{Struct: p.Struct()}, err
}

func (s SoilMoistureModuleState) HasFrostComponent() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilMoistureModuleState) SetFrostComponent(v FrostModuleState) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewFrostComponent sets the frostComponent field to a newly
// allocated FrostModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFrostComponent() (FrostModuleState, error) {
	ss, err := NewFrostModuleState(s.Struct.Segment())
	if err != nil {
		return FrostModuleState{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SoilMoistureModuleState_List is a list of SoilMoistureModuleState.
type SoilMoistureModuleState_List struct{ capnp.List }

// NewSoilMoistureModuleState creates a new list of SoilMoistureModuleState.
func NewSoilMoistureModuleState_List(s *capnp.Segment, sz int32) (SoilMoistureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22}, sz)
	return SoilMoistureModuleState_List{l}, err
}

func (s SoilMoistureModuleState_List) At(i int) SoilMoistureModuleState {
	return SoilMoistureModuleState{s.List.Struct(i)}
}

func (s SoilMoistureModuleState_List) Set(i int, v SoilMoistureModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilMoistureModuleState_List) String() string {
	str, _ := text.MarshalList(0xcd05962719bf7ec8, s.List)
	return str
}

// SoilMoistureModuleState_Future is a wrapper for a SoilMoistureModuleState promised by a client call.
type SoilMoistureModuleState_Future struct{ *capnp.Future }

func (p SoilMoistureModuleState_Future) Struct() (SoilMoistureModuleState, error) {
	s, err := p.Future.Struct()
	return SoilMoistureModuleState{s}, err
}

func (p SoilMoistureModuleState_Future) ModuleParams() SoilMoistureModuleParameters_Future {
	return SoilMoistureModuleParameters_Future{Future: p.Future.Field(2, nil)}
}

func (p SoilMoistureModuleState_Future) SnowComponent() SnowModuleState_Future {
	return SnowModuleState_Future{Future: p.Future.Field(1, nil)}
}

func (p SoilMoistureModuleState_Future) FrostComponent() FrostModuleState_Future {
	return FrostModuleState_Future{Future: p.Future.Field(0, nil)}
}

type SoilOrganicModuleState struct{ capnp.Struct }

// SoilOrganicModuleState_TypeID is the unique identifier for the type SoilOrganicModuleState.
const SoilOrganicModuleState_TypeID = 0xd594e64f6b5f461d

func NewSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState{st}, err
}

func NewRootSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState{st}, err
}

func ReadRootSoilOrganicModuleState(msg *capnp.Message) (SoilOrganicModuleState, error) {
	root, err := msg.Root()
	return SoilOrganicModuleState{root.Struct()}, err
}

func (s SoilOrganicModuleState) String() string {
	str, _ := text.Marshal(0xd594e64f6b5f461d, s.Struct)
	return str
}

func (s SoilOrganicModuleState) ModuleParams() (SoilOrganicModuleParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SoilOrganicModuleParameters{Struct: p.Struct()}, err
}

func (s SoilOrganicModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilOrganicModuleState) SetModuleParams(v SoilOrganicModuleParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilOrganicModuleParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewModuleParams() (SoilOrganicModuleParameters, error) {
	ss, err := NewSoilOrganicModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilOrganicModuleParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilOrganicModuleState) VsNumberOfLayers() uint16 {
	return s.Struct.Uint16(2)
}

func (s SoilOrganicModuleState) SetVsNumberOfLayers(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s SoilOrganicModuleState) VsNumberOfOrganicLayers() uint16 {
	return s.Struct.Uint16(4)
}

func (s SoilOrganicModuleState) SetVsNumberOfOrganicLayers(v uint16) {
	s.Struct.SetUint16(4, v)
}

func (s SoilOrganicModuleState) AddedOrganicMatter() bool {
	return s.Struct.Bit(1)
}

func (s SoilOrganicModuleState) SetAddedOrganicMatter(v bool) {
	s.Struct.SetBit(1, v)
}

func (s SoilOrganicModuleState) IrrigationAmount() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilOrganicModuleState) SetIrrigationAmount(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ActAmmoniaOxidationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasActAmmoniaOxidationRate() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilOrganicModuleState) SetActAmmoniaOxidationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewActAmmoniaOxidationRate sets the actAmmoniaOxidationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActAmmoniaOxidationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) ActNitrificationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasActNitrificationRate() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilOrganicModuleState) SetActNitrificationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewActNitrificationRate sets the actNitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActNitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) ActDenitrificationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasActDenitrificationRate() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilOrganicModuleState) SetActDenitrificationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewActDenitrificationRate sets the actDenitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActDenitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomFastDeltaSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomFastDeltaSum() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilOrganicModuleState) SetAomFastDeltaSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewAomFastDeltaSum sets the aomFastDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomFastInput() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomFastInput() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilOrganicModuleState) SetAomFastInput(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewAomFastInput sets the aomFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomFastSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomFastSum() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilOrganicModuleState) SetAomFastSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewAomFastSum sets the aomFastSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomSlowDeltaSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomSlowDeltaSum() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilOrganicModuleState) SetAomSlowDeltaSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewAomSlowDeltaSum sets the aomSlowDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomSlowInput() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomSlowInput() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilOrganicModuleState) SetAomSlowInput(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewAomSlowInput sets the aomSlowInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) AomSlowSum() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasAomSlowSum() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilOrganicModuleState) SetAomSlowSum(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewAomSlowSum sets the aomSlowSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) CBalance() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasCBalance() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilOrganicModuleState) SetCBalance(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewCBalance sets the cBalance field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewCBalance(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) DecomposerRespiration() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilOrganicModuleState) SetDecomposerRespiration(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ErrorMessage() (string, error) {
	p, err := s.Struct.Ptr(11)
	return p.Text(), err
}

func (s SoilOrganicModuleState) HasErrorMessage() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilOrganicModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(11)
	return p.TextBytes(), err
}

func (s SoilOrganicModuleState) SetErrorMessage(v string) error {
	return s.Struct.SetText(11, v)
}

func (s SoilOrganicModuleState) InertSoilOrganicC() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasInertSoilOrganicC() bool {
	return s.Struct.HasPtr(12)
}

func (s SoilOrganicModuleState) SetInertSoilOrganicC(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewInertSoilOrganicC sets the inertSoilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewInertSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) N2oProduced() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilOrganicModuleState) SetN2oProduced(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedNit() float64 {
	return math.Float64frombits(s.Struct.Uint64(40))
}

func (s SoilOrganicModuleState) SetN2oProducedNit(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedDenit() float64 {
	return math.Float64frombits(s.Struct.Uint64(48))
}

func (s SoilOrganicModuleState) SetN2oProducedDenit(v float64) {
	s.Struct.SetUint64(48, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemExchange() float64 {
	return math.Float64frombits(s.Struct.Uint64(56))
}

func (s SoilOrganicModuleState) SetNetEcosystemExchange(v float64) {
	s.Struct.SetUint64(56, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemProduction() float64 {
	return math.Float64frombits(s.Struct.Uint64(64))
}

func (s SoilOrganicModuleState) SetNetEcosystemProduction(v float64) {
	s.Struct.SetUint64(64, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisation() float64 {
	return math.Float64frombits(s.Struct.Uint64(72))
}

func (s SoilOrganicModuleState) SetNetNMineralisation(v float64) {
	s.Struct.SetUint64(72, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasNetNMineralisationRate() bool {
	return s.Struct.HasPtr(13)
}

func (s SoilOrganicModuleState) SetNetNMineralisationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewNetNMineralisationRate sets the netNMineralisationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewNetNMineralisationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) TotalNH3Volatilised() float64 {
	return math.Float64frombits(s.Struct.Uint64(80))
}

func (s SoilOrganicModuleState) SetTotalNH3Volatilised(v float64) {
	s.Struct.SetUint64(80, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Nh3Volatilised() float64 {
	return math.Float64frombits(s.Struct.Uint64(88))
}

func (s SoilOrganicModuleState) SetNh3Volatilised(v float64) {
	s.Struct.SetUint64(88, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SmbCO2EvolutionRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(14)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSmbCO2EvolutionRate() bool {
	return s.Struct.HasPtr(14)
}

func (s SoilOrganicModuleState) SetSmbCO2EvolutionRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(14, v.List.ToPtr())
}

// NewSmbCO2EvolutionRate sets the smbCO2EvolutionRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbCO2EvolutionRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(14, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SmbFastDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(15)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSmbFastDelta() bool {
	return s.Struct.HasPtr(15)
}

func (s SoilOrganicModuleState) SetSmbFastDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(15, v.List.ToPtr())
}

// NewSmbFastDelta sets the smbFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(15, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SmbSlowDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(16)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSmbSlowDelta() bool {
	return s.Struct.HasPtr(16)
}

func (s SoilOrganicModuleState) SetSmbSlowDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(16, v.List.ToPtr())
}

// NewSmbSlowDelta sets the smbSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(16, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(17)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasVsSoilMineralNContent() bool {
	return s.Struct.HasPtr(17)
}

func (s SoilOrganicModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(17, v.List.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(17, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SoilOrganicC() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(18)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSoilOrganicC() bool {
	return s.Struct.HasPtr(18)
}

func (s SoilOrganicModuleState) SetSoilOrganicC(v capnp.Float64List) error {
	return s.Struct.SetPtr(18, v.List.ToPtr())
}

// NewSoilOrganicC sets the soilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(18, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SomFastDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(19)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSomFastDelta() bool {
	return s.Struct.HasPtr(19)
}

func (s SoilOrganicModuleState) SetSomFastDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(19, v.List.ToPtr())
}

// NewSomFastDelta sets the somFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(19, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SomFastInput() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(20)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSomFastInput() bool {
	return s.Struct.HasPtr(20)
}

func (s SoilOrganicModuleState) SetSomFastInput(v capnp.Float64List) error {
	return s.Struct.SetPtr(20, v.List.ToPtr())
}

// NewSomFastInput sets the somFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(20, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SomSlowDelta() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(21)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilOrganicModuleState) HasSomSlowDelta() bool {
	return s.Struct.HasPtr(21)
}

func (s SoilOrganicModuleState) SetSomSlowDelta(v capnp.Float64List) error {
	return s.Struct.SetPtr(21, v.List.ToPtr())
}

// NewSomSlowDelta sets the somSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(21, l.List.ToPtr())
	return l, err
}

func (s SoilOrganicModuleState) SumDenitrification() float64 {
	return math.Float64frombits(s.Struct.Uint64(96))
}

func (s SoilOrganicModuleState) SetSumDenitrification(v float64) {
	s.Struct.SetUint64(96, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNetNMineralisation() float64 {
	return math.Float64frombits(s.Struct.Uint64(104))
}

func (s SoilOrganicModuleState) SetSumNetNMineralisation(v float64) {
	s.Struct.SetUint64(104, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumN2OProduced() float64 {
	return math.Float64frombits(s.Struct.Uint64(112))
}

func (s SoilOrganicModuleState) SetSumN2OProduced(v float64) {
	s.Struct.SetUint64(112, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNH3Volatilised() float64 {
	return math.Float64frombits(s.Struct.Uint64(120))
}

func (s SoilOrganicModuleState) SetSumNH3Volatilised(v float64) {
	s.Struct.SetUint64(120, math.Float64bits(v))
}

func (s SoilOrganicModuleState) TotalDenitrification() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilOrganicModuleState) SetTotalDenitrification(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Incorporation() bool {
	return s.Struct.Bit(0)
}

func (s SoilOrganicModuleState) SetIncorporation(v bool) {
	s.Struct.SetBit(0, v)
}

// SoilOrganicModuleState_List is a list of SoilOrganicModuleState.
type SoilOrganicModuleState_List struct{ capnp.List }

// NewSoilOrganicModuleState creates a new list of SoilOrganicModuleState.
func NewSoilOrganicModuleState_List(s *capnp.Segment, sz int32) (SoilOrganicModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22}, sz)
	return SoilOrganicModuleState_List{l}, err
}

func (s SoilOrganicModuleState_List) At(i int) SoilOrganicModuleState {
	return SoilOrganicModuleState{s.List.Struct(i)}
}

func (s SoilOrganicModuleState_List) Set(i int, v SoilOrganicModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilOrganicModuleState_List) String() string {
	str, _ := text.MarshalList(0xd594e64f6b5f461d, s.List)
	return str
}

// SoilOrganicModuleState_Future is a wrapper for a SoilOrganicModuleState promised by a client call.
type SoilOrganicModuleState_Future struct{ *capnp.Future }

func (p SoilOrganicModuleState_Future) Struct() (SoilOrganicModuleState, error) {
	s, err := p.Future.Struct()
	return SoilOrganicModuleState{s}, err
}

func (p SoilOrganicModuleState_Future) ModuleParams() SoilOrganicModuleParameters_Future {
	return SoilOrganicModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleState struct{ capnp.Struct }

// SoilTemperatureModuleState_TypeID is the unique identifier for the type SoilTemperatureModuleState.
const SoilTemperatureModuleState_TypeID = 0xbd3e199eb9b03758

func NewSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState{st}, err
}

func NewRootSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState{st}, err
}

func ReadRootSoilTemperatureModuleState(msg *capnp.Message) (SoilTemperatureModuleState, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleState{root.Struct()}, err
}

func (s SoilTemperatureModuleState) String() string {
	str, _ := text.Marshal(0xbd3e199eb9b03758, s.Struct)
	return str
}

func (s SoilTemperatureModuleState) SoilSurfaceTemperature() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilTemperatureModuleState) SetSoilSurfaceTemperature(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) SoilColumnVtGroundLayer() (SoilLayerState, error) {
	p, err := s.Struct.Ptr(1)
	return SoilLayerState{Struct: p.Struct()}, err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtGroundLayer() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtGroundLayer(v SoilLayerState) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewSoilColumnVtGroundLayer sets the soilColumnVtGroundLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtGroundLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(s.Struct.Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) SoilColumnVtBottomLayer() (SoilLayerState, error) {
	p, err := s.Struct.Ptr(2)
	return SoilLayerState{Struct: p.Struct()}, err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtBottomLayer() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtBottomLayer(v SoilLayerState) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSoilColumnVtBottomLayer sets the soilColumnVtBottomLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtBottomLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(s.Struct.Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) ModuleParams() (SoilTemperatureModuleParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SoilTemperatureModuleParameters{Struct: p.Struct()}, err
}

func (s SoilTemperatureModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilTemperatureModuleState) SetModuleParams(v SoilTemperatureModuleParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTemperatureModuleParameters struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewModuleParams() (SoilTemperatureModuleParameters, error) {
	ss, err := NewSoilTemperatureModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilTemperatureModuleParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) NumberOfLayers() uint16 {
	return s.Struct.Uint16(16)
}

func (s SoilTemperatureModuleState) SetNumberOfLayers(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s SoilTemperatureModuleState) VsNumberOfLayers() uint16 {
	return s.Struct.Uint16(18)
}

func (s SoilTemperatureModuleState) SetVsNumberOfLayers(v uint16) {
	s.Struct.SetUint16(18, v)
}

func (s SoilTemperatureModuleState) VsSoilMoistureConst() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasVsSoilMoistureConst() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilTemperatureModuleState) SetVsSoilMoistureConst(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewVsSoilMoistureConst sets the vsSoilMoistureConst field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVsSoilMoistureConst(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) SoilTemperature() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasSoilTemperature() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilTemperatureModuleState) SetSoilTemperature(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) V() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasV() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilTemperatureModuleState) SetV(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewV(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) VolumeMatrix() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasVolumeMatrix() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilTemperatureModuleState) SetVolumeMatrix(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewVolumeMatrix sets the volumeMatrix field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrix(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) VolumeMatrixOld() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasVolumeMatrixOld() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilTemperatureModuleState) SetVolumeMatrixOld(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewVolumeMatrixOld sets the volumeMatrixOld field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrixOld(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) B() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasB() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilTemperatureModuleState) SetB(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewB(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) MatrixPrimaryDiagonal() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasMatrixPrimaryDiagonal() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilTemperatureModuleState) SetMatrixPrimaryDiagonal(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewMatrixPrimaryDiagonal sets the matrixPrimaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixPrimaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) MatrixSecundaryDiagonal() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasMatrixSecundaryDiagonal() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilTemperatureModuleState) SetMatrixSecundaryDiagonal(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewMatrixSecundaryDiagonal sets the matrixSecundaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixSecundaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) HeatFlow() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilTemperatureModuleState) SetHeatFlow(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasHeatConductivity() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilTemperatureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) HeatConductivityMean() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(12)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasHeatConductivityMean() bool {
	return s.Struct.HasPtr(12)
}

func (s SoilTemperatureModuleState) SetHeatConductivityMean(v capnp.Float64List) error {
	return s.Struct.SetPtr(12, v.List.ToPtr())
}

// NewHeatConductivityMean sets the heatConductivityMean field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivityMean(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(12, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) HeatCapacity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(13)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTemperatureModuleState) HasHeatCapacity() bool {
	return s.Struct.HasPtr(13)
}

func (s SoilTemperatureModuleState) SetHeatCapacity(v capnp.Float64List) error {
	return s.Struct.SetPtr(13, v.List.ToPtr())
}

// NewHeatCapacity sets the heatCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(13, l.List.ToPtr())
	return l, err
}

func (s SoilTemperatureModuleState) DampingFactor() float64 {
	return math.Float64frombits(s.Struct.Uint64(8) ^ 0x3fe999999999999a)
}

func (s SoilTemperatureModuleState) SetDampingFactor(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v)^0x3fe999999999999a)
}

// SoilTemperatureModuleState_List is a list of SoilTemperatureModuleState.
type SoilTemperatureModuleState_List struct{ capnp.List }

// NewSoilTemperatureModuleState creates a new list of SoilTemperatureModuleState.
func NewSoilTemperatureModuleState_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14}, sz)
	return SoilTemperatureModuleState_List{l}, err
}

func (s SoilTemperatureModuleState_List) At(i int) SoilTemperatureModuleState {
	return SoilTemperatureModuleState{s.List.Struct(i)}
}

func (s SoilTemperatureModuleState_List) Set(i int, v SoilTemperatureModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilTemperatureModuleState_List) String() string {
	str, _ := text.MarshalList(0xbd3e199eb9b03758, s.List)
	return str
}

// SoilTemperatureModuleState_Future is a wrapper for a SoilTemperatureModuleState promised by a client call.
type SoilTemperatureModuleState_Future struct{ *capnp.Future }

func (p SoilTemperatureModuleState_Future) Struct() (SoilTemperatureModuleState, error) {
	s, err := p.Future.Struct()
	return SoilTemperatureModuleState{s}, err
}

func (p SoilTemperatureModuleState_Future) SoilColumnVtGroundLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(1, nil)}
}

func (p SoilTemperatureModuleState_Future) SoilColumnVtBottomLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(2, nil)}
}

func (p SoilTemperatureModuleState_Future) ModuleParams() SoilTemperatureModuleParameters_Future {
	return SoilTemperatureModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTransportModuleState struct{ capnp.Struct }

// SoilTransportModuleState_TypeID is the unique identifier for the type SoilTransportModuleState.
const SoilTransportModuleState_TypeID = 0xb1760f65e652e737

func NewSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState{st}, err
}

func NewRootSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState{st}, err
}

func ReadRootSoilTransportModuleState(msg *capnp.Message) (SoilTransportModuleState, error) {
	root, err := msg.Root()
	return SoilTransportModuleState{root.Struct()}, err
}

func (s SoilTransportModuleState) String() string {
	str, _ := text.Marshal(0xb1760f65e652e737, s.Struct)
	return str
}

func (s SoilTransportModuleState) ModuleParams() (SoilTransportModuleParameters, error) {
	p, err := s.Struct.Ptr(0)
	return SoilTransportModuleParameters{Struct: p.Struct()}, err
}

func (s SoilTransportModuleState) HasModuleParams() bool {
	return s.Struct.HasPtr(0)
}

func (s SoilTransportModuleState) SetModuleParams(v SoilTransportModuleParameters) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTransportModuleParameters struct, preferring placement in s's segment.
func (s SoilTransportModuleState) NewModuleParams() (SoilTransportModuleParameters, error) {
	ss, err := NewSoilTransportModuleParameters(s.Struct.Segment())
	if err != nil {
		return SoilTransportModuleParameters{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SoilTransportModuleState) Convection() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasConvection() bool {
	return s.Struct.HasPtr(1)
}

func (s SoilTransportModuleState) SetConvection(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewConvection sets the convection field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewConvection(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) CropNUptake() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s SoilTransportModuleState) SetCropNUptake(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleState) DiffusionCoeff() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasDiffusionCoeff() bool {
	return s.Struct.HasPtr(2)
}

func (s SoilTransportModuleState) SetDiffusionCoeff(v capnp.Float64List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewDiffusionCoeff sets the diffusionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDiffusionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) Dispersion() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasDispersion() bool {
	return s.Struct.HasPtr(3)
}

func (s SoilTransportModuleState) SetDispersion(v capnp.Float64List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewDispersion sets the dispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) DispersionCoeff() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasDispersionCoeff() bool {
	return s.Struct.HasPtr(4)
}

func (s SoilTransportModuleState) SetDispersionCoeff(v capnp.Float64List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewDispersionCoeff sets the dispersionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) VsLeachingDepth() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s SoilTransportModuleState) SetVsLeachingDepth(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleState) LeachingAtBoundary() float64 {
	return math.Float64frombits(s.Struct.Uint64(24))
}

func (s SoilTransportModuleState) SetLeachingAtBoundary(v float64) {
	s.Struct.SetUint64(24, math.Float64bits(v))
}

func (s SoilTransportModuleState) VsNDeposition() float64 {
	return math.Float64frombits(s.Struct.Uint64(32))
}

func (s SoilTransportModuleState) SetVsNDeposition(v float64) {
	s.Struct.SetUint64(32, math.Float64bits(v))
}

func (s SoilTransportModuleState) VcNUptakeFromLayer() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(5)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasVcNUptakeFromLayer() bool {
	return s.Struct.HasPtr(5)
}

func (s SoilTransportModuleState) SetVcNUptakeFromLayer(v capnp.Float64List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewVcNUptakeFromLayer sets the vcNUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVcNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) PoreWaterVelocity() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(6)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasPoreWaterVelocity() bool {
	return s.Struct.HasPtr(6)
}

func (s SoilTransportModuleState) SetPoreWaterVelocity(v capnp.Float64List) error {
	return s.Struct.SetPtr(6, v.List.ToPtr())
}

// NewPoreWaterVelocity sets the poreWaterVelocity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPoreWaterVelocity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(6, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(7)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasVsSoilMineralNContent() bool {
	return s.Struct.HasPtr(7)
}

func (s SoilTransportModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return s.Struct.SetPtr(7, v.List.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(7, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) SoilNO3() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(8)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasSoilNO3() bool {
	return s.Struct.HasPtr(8)
}

func (s SoilTransportModuleState) SetSoilNO3(v capnp.Float64List) error {
	return s.Struct.SetPtr(8, v.List.ToPtr())
}

// NewSoilNO3 sets the soilNO3 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(8, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) SoilNO3aq() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(9)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasSoilNO3aq() bool {
	return s.Struct.HasPtr(9)
}

func (s SoilTransportModuleState) SetSoilNO3aq(v capnp.Float64List) error {
	return s.Struct.SetPtr(9, v.List.ToPtr())
}

// NewSoilNO3aq sets the soilNO3aq field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3aq(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(9, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) TimeStep() float64 {
	return math.Float64frombits(s.Struct.Uint64(40) ^ 0x3ff0000000000000)
}

func (s SoilTransportModuleState) SetTimeStep(v float64) {
	s.Struct.SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilTransportModuleState) TotalDispersion() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(10)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasTotalDispersion() bool {
	return s.Struct.HasPtr(10)
}

func (s SoilTransportModuleState) SetTotalDispersion(v capnp.Float64List) error {
	return s.Struct.SetPtr(10, v.List.ToPtr())
}

// NewTotalDispersion sets the totalDispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewTotalDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(10, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(11)
	return capnp.Float64List{List: p.List()}, err
}

func (s SoilTransportModuleState) HasPercolationRate() bool {
	return s.Struct.HasPtr(11)
}

func (s SoilTransportModuleState) SetPercolationRate(v capnp.Float64List) error {
	return s.Struct.SetPtr(11, v.List.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(11, l.List.ToPtr())
	return l, err
}

func (s SoilTransportModuleState) PcMinimumAvailableN() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s SoilTransportModuleState) SetPcMinimumAvailableN(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

// SoilTransportModuleState_List is a list of SoilTransportModuleState.
type SoilTransportModuleState_List struct{ capnp.List }

// NewSoilTransportModuleState creates a new list of SoilTransportModuleState.
func NewSoilTransportModuleState_List(s *capnp.Segment, sz int32) (SoilTransportModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12}, sz)
	return SoilTransportModuleState_List{l}, err
}

func (s SoilTransportModuleState_List) At(i int) SoilTransportModuleState {
	return SoilTransportModuleState{s.List.Struct(i)}
}

func (s SoilTransportModuleState_List) Set(i int, v SoilTransportModuleState) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SoilTransportModuleState_List) String() string {
	str, _ := text.MarshalList(0xb1760f65e652e737, s.List)
	return str
}

// SoilTransportModuleState_Future is a wrapper for a SoilTransportModuleState promised by a client call.
type SoilTransportModuleState_Future struct{ *capnp.Future }

func (p SoilTransportModuleState_Future) Struct() (SoilTransportModuleState, error) {
	s, err := p.Future.Struct()
	return SoilTransportModuleState{s}, err
}

func (p SoilTransportModuleState_Future) ModuleParams() SoilTransportModuleParameters_Future {
	return SoilTransportModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type ICData struct{ capnp.Struct }
type ICData_Which uint16

const (
	ICData_Which_noCrop ICData_Which = 0
	ICData_Which_height ICData_Which = 1
	ICData_Which_lait   ICData_Which = 2
)

func (w ICData_Which) String() string {
	const s = "noCropheightlait"
	switch w {
	case ICData_Which_noCrop:
		return s[0:6]
	case ICData_Which_height:
		return s[6:12]
	case ICData_Which_lait:
		return s[12:16]

	}
	return "ICData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ICData_TypeID is the unique identifier for the type ICData.
const ICData_TypeID = 0xf03d8fd1bbe75519

func NewICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData{st}, err
}

func NewRootICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData{st}, err
}

func ReadRootICData(msg *capnp.Message) (ICData, error) {
	root, err := msg.Root()
	return ICData{root.Struct()}, err
}

func (s ICData) String() string {
	str, _ := text.Marshal(0xf03d8fd1bbe75519, s.Struct)
	return str
}

func (s ICData) Which() ICData_Which {
	return ICData_Which(s.Struct.Uint16(0))
}
func (s ICData) SetNoCrop() {
	s.Struct.SetUint16(0, 0)

}

func (s ICData) Height() float64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != height")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s ICData) SetHeight(v float64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s ICData) Lait() float64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != lait")
	}
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s ICData) SetLait(v float64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// ICData_List is a list of ICData.
type ICData_List struct{ capnp.List }

// NewICData creates a new list of ICData.
func NewICData_List(s *capnp.Segment, sz int32) (ICData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ICData_List{l}, err
}

func (s ICData_List) At(i int) ICData { return ICData{s.List.Struct(i)} }

func (s ICData_List) Set(i int, v ICData) error { return s.List.SetStruct(i, v.Struct) }

func (s ICData_List) String() string {
	str, _ := text.MarshalList(0xf03d8fd1bbe75519, s.List)
	return str
}

// ICData_Future is a wrapper for a ICData promised by a client call.
type ICData_Future struct{ *capnp.Future }

func (p ICData_Future) Struct() (ICData, error) {
	s, err := p.Future.Struct()
	return ICData{s}, err
}

const schema_86ea47c297746539 = "x\xda\x9c\xbd\x7f\x9c\x14\xd5\x95\xf7\x7fOU\x0f=3" +
	"\x0c\xcc\x8cuQ~\xcc\xd0\x03\xcc &\xa8\xfc2\xa2" +
	"\xc14\xc348\xe8\xfc\xeeA4\x8b\x09E\xf7\x9d\x99" +
	"\xc2\xea\xaa\xa6\xbaz\x98q1\xa2\xc1\x0d\"&\x9a`" +
	"\x16\x13\xb2\xabY\xdc\xd5,n0\xab\xcfb\x16w\xd1" +
	"\x077\xe8\xe2\x13ta\x17\xb2dW\x0dI4\x8f\xbe" +
	"\xbe\xb8/\xdd%\xfb2;\xdf\xd7\xe7VuwuO" +
	"\x0f\x9a'\xffd|\x9f[\xb7o\xdd{\xcf\xb9\xe7\xdc" +
	"{n\xd1t\xf9JeqE\xf8R\xc6\xfa\xa8b\xd2" +
	"\xd8\xec\x97\xfe\xef]\x07\xfa\x1b\xefa\xbdM\xb4o\xec" +
	":\xe1\xfe\xf1K7\xfe\xe6\x8fX\xc5\x920cK\xdf" +
	"\xad\xbe\x97\xb4\xdfU\xe3\xcf\xdfV_\xbb\x94\xd1\xdf\xdf" +
	"\xb5-\xfa\xca\xe0}\x0f\xf46\x91\x12(<\x19%f" +
	"\xdc\xdcG\xda\x957\xe3\xcf+n\xfew\x85\xd1\x98\xf8" +
	"\xa7\xaf\xda?Q\xdf\xde\xcbz\x17\x932\xf6\xd7\xdfz" +
	"\xe3\x9b{\xbe}\xcb_\xb2\x10\x8a\xa4\xba\xde&\xed\xfe" +
	"\xae0c\xda}][\x19\x8d\xbd\xb6\xf9\xf3\x93_\xa7" +
	"\x9f\xedGCx\xa1nY\xf8\xad\xae{I\xfb\x08\x85" +
	"\x97~\xd05\x18bT\xa8\xac\xb7\x89.\x09\xb4\xa4\x16" +
	"e\x1a\xfbw\x91vM\xffe\x8c-m\xed\xffa\x98" +
	"\xd1\xd8\xb5\xbf\xee\xfb\x95\xa8\x1d~\x06\xc5'\x05\x8a\xd7" +
	"\xa0\xf8\x96\xdb_%\xed\xc1\xdb\xf1\xe7\xfd\xb7\xff\x97\xca" +
	"h\xec\xcf\xef\xeb\xe4\x7ff}\xf0,\x8aW\x05\x8a\x13" +
	"\xca<\xbdi\x17i/o\xc2\x9f/n\xba\x16\xefy" +
	"\xeb\xb5\x07\x9f\xff\x93\x19_x\x01\xc5C\x81\xe2SQ" +
	"\xa6W\xfc\x8c\xb4\x94\xc0\x9f\x86\xb8\x1am?\xf6\x95\xbf" +
	"\x9fq\xf9\xb7+^C\xf1\x05\x81\xe2\x97\xa2\xcc\x99\xcd" +
	"/\x91\xf6\xc1f\xfc\xf9\xfe\xe6\xe8TFc\xcb\xff\xf3" +
	"\xfd\x0f\xfb\x7f\xfa\xfe\xeb\xacw\x11M\x1a\xfb\xf6\xba_" +
	"\xfc\xd3\xde\xd6/\xfc\x7f~c\xde\xdf\xb6Y\xd1\xea\xef" +
	"\xc2\x9fS\xee\xfa\x061\x1ak\\\xf3\xe5;\xba\x7f\xb5" +
	"\xe7\x14j\xaf+\xad\xfd\xc5\xaf\xfc\x98\xb43_\xc1\x9f" +
	"\xa7\xbe2V\xc9hl\xe6\xfa\x8a\xa3\xa9\x13\x8f\x9eb" +
	"\xf5MT\xfa\xa6\x0f\xee\xdaL\xda\xe3\xbb0F\xdf\xdb" +
	"\x15e4\xb6\xe5\xc8w\xbfZ\xf7\xcd\x1f\x9eF\xddT" +
	"2F/\xee\xea#\xed\x94,\xfc\xba,\\\xbf\xea\xec" +
	"\x9em5\xb3\x7f\x8e\xc2S\x02U+r\x18w\xddI" +
	"Z\xc5\x03\xf8\x93\x1e\xe8F\x9fOox\xe8\xdf7]" +
	"\xd5\xfb\x0b\x14\xd7J\xea~\xe4\xeb\x0eiO}\x1d\x7f" +
	">\xf1\xf5?E\x1f\xe6\xbb\xa1\xb7\x89&\x07*\x97\xc5" +
	"\xdf\xff\xd6\xbd\xa4\xd1\x1e\x8c\xff\xb4=_C\xe53\xd6" +
	"\xfd\xfao_\xff\xc6\x0d\xe7Y\xf1\xc4\x8d\x85U\xc6\x96" +
	"\xae\xdd{=i\xb7\xedE\xcb\xd7\xed\xfd!\x1bcc" +
	"l\xd2X\xcaN\x0a\xf3\xea\x94]a\x19\x09\xfd\xea\x94" +
	"\x8d\xff\xfbr\xc6\xd5]qUBO[\xe9\xeb\xdb\x1c" +
	";\xddi'\xb3\xa6\x88\x83\xb2\x1e\xa2\xf8\x93\xaa\x1ab" +
	",D\x8ci\xf7\xcf\xd8\xc4X|\xe7\x0c\x95\xe2{f" +
	"(T\xff\x0eq\x02\x7fx\xc6g\x18\x8b\xef\x06\xdf\x0b" +
	"\xfek\x85\x93\xc2\x98\xf6\x88\xe4\x0f\x81\xef\x03\xff\x15q" +
	"R\x19\xd3\x1e\x9d\xf16c\xf1\xc7\xc0\x0f\x80\xffR\xe5" +
	"\x14\"\xd2\x9e\x9a\xf1\x1d\xc6\xe2\x07\xc0\x0f\x81\x9f\x0bq" +
	"\xaa`L{N\xfe\xee\xb3\xe0G\xc0+*8Mb" +
	"L{a\xc6\x17\x19\x8b\x1f\x06?\x06>i\x12\xc7\x18" +
	"k/\xcbz\x8e\x81\x9f\x04\x0f\x879Ub\x0cg\xfc" +
	"\x88\xb1\xf8I\xf07g(D\x95\x9c\xaa\x18\xd3~." +
	"\x8b\xbf\x09\xfc1\x8aWUr\xaafL\xfb\xed\x8c\xef" +
	"3\x16\xff\x18\xbcr\xa6B\xf5\xd5\xc4i2cZ\xc5" +
	"\xcc\xff`,^3S\xa5\xf8r\xf0\xc9U\x9cj\x18" +
	"\xd3\xae\x99\xf9*c\xf1\x15\xe0\xed\xe05\xd5\x9c\xa60" +
	"\xa6\xad\x9e\x89\xe6\xc7\xc0{\xc0\xa7L\xe64\x951\xad" +
	"s\xe6.\xc6\xe2=\xe0\x1b\xc0\xa7\xd6p\xaaeL\xbb" +
	"m&~w\x03\xf8\x10x\xad\xc2\xa9\x8e1M\xcc\xbc" +
	"\x97\xb1x\x12|;x\x9d\xca\xa9\x9e1\xed\xae\x99\xdf" +
	"d,\xbe\x1d|\x1fx\xfd\x14N\x970\xb6\xf4\xd1\x99" +
	"\x0a\xa1\x9f!8\x00\xc1%S9i\x8ciO\xcd\x94" +
	"\xfd\x0c~\x08\\\xab\xe5\xc4\xd1\xcf3\xd1?\x87\xc0\x8f" +
	"\x82\xf3:N\xd3\x18\xd3^\x9c\xf9c\xc6\xe2G\xc1O" +
	"\x80O\xab\xe7t)c\xdak\xf2\x87O\x80\x9f\x05\xbf" +
	"\x948]F\xa4\x9d\x91/|\x1a\xfc\x1c\xf8e\x97p" +
	"\x9a\xce\x98\xf6\x96\xac\xe7\x1c\xf8y\xf0\xe9!N3\x18" +
	"\xd3\xde\x9f\xf9\x12c\xf1\xf3\xe05\xb3\x14\xaa\x9f\xa1q" +
	"\x9a\xc9\xd8\xd2\xaaY\xf2\x05\xeaf\xa9\x14o\x80`&" +
	"\xe74\x8b1m\xc6\xac\xcd\x8c\xc5\xa7\x837\x83\xcf\x9a" +
	"\xc6\xa9\x81H\x9b3\xebN\xc6\xe2M\xe0\x0b\xc1\x1b." +
	"\xe5\xd4H\xa4]1\xcba,\xbe\x00|\x19x\xe3e" +
	"\x9cf3\xa6-\x9e\x85\x09\xb4\x08|\x05\xf8\xec\xe9\x9c" +
	"\"\x8ci\xd7\xc9z\x96\x83\xc7\xc0#3851\xa6" +
	"\xb5J\xbe\x12\xbc\x03\xbc\xa9\x82\xd3\x1c\xc6\xb4\xb5\xb2\x9e" +
	"v\xf0~\xf0939\xcdeL\xeb\x9d\x85\x8e\xe8\x01" +
	"\xdf\x00>w\x16\xa7yD\xdam\xb2\xfc\xad\xe0I\xf0" +
	"y\x0d\x9c\x9a\x19\xd3\xf4Y\x98YC\xe0.x\xf3$" +
	"N-\x8ci[fa\xe4\xd3\xe0\xbb\xc1[\xc2\x9c\xe6" +
	"C!ga\xc0v\x83?\x09>\xbf\x91\xd3\xe5\x8ci" +
	"O\xcc\xfa\x19\x06\x18\xfc\x10\xf8\xe5\xb39-\xc0\x00\xcf" +
	"\xfao(\x0c\xf81\xf0\x05\xc4\xe9\x0a(\xcc,\xa90" +
	"\xe0'\xc1\xaf\x88p\xfa\x0c\x14F\xfe\xee\x09\xf0\xb3\xe0" +
	"\x9f\xa9\xe4\xf4Y\xc6\xb43\xb30\x90g\xc1/\x80\x7f" +
	"V\xe1\xb4\x901\xed\xa3Y\x18\xc8\x0b\xe0\xa1\x06\x85\xea" +
	"\x176q\xba\x921\x8d\x1a61\xd6\xd7\x80\xf1\x05\xbe" +
	"r\x0e\xa7\xab0\xbe\x0d\xde\xf8B\xd0\x00\xc1U*\xa7" +
	"\xab1\xbe\x0d\xa8\xa7\x01|\x01\xf8\xd5s9-bl" +
	"iKC\x1f\x1eX\x06\xc1J\x08\x16\xed\xe6\xb4\x981" +
	"\xed\x86\x06\xbc\xc0J\xf0\x0e\xf0\xc5\x0frZ\x82\x81i" +
	"\xc0\xc0\xb7\x83\xf7\x83/i\xe6\xb4\x94H\xebm\x80\xaa" +
	"\xde\x0a\x9e\x04_\xda\xc2i\x19cK\xf5\x86j\xfc\x80" +
	"\x09\xc1\x08\x04\xcb\xaa8]\xc3\x98\x96\x95\x0fl\x03\xdf" +
	"\x0b~\x8d\xc2\xe9sD\xda#\x0d\xbfa,\xbe\x0f\xfc" +
	"I\xf0\xcf\xa9\x9c\xae%\xd2\x9e\x90\xfc\x00\xf8!\xf0k" +
	"\xe7sZ\x8e\x11h\xc0\x08\x1f\x06?\x06\xbe\xfcrN" +
	"\xd7a\x04\xe4\x0b\x1c\x03?\x09~]\x88\xd3\xf5D\xda" +
	"\xeb\xe8\xb9\xf8\x09\xf0\xb3\xe0\xd7Ws\xfa<F\xa0\x01" +
	"\x1ap\x1a\xfc\x1c\xf8\xe7\x17pZ\x01\x15\x93=w\x0e" +
	"\xfc<\xf8\x8a+8\xdd\x00\x15kx\x83\xb1\xf8\x87\x0d" +
	"*\xf55*T\x7f\xc3g8}\x811\xedw\xf2\xb5" +
	"B\x8d*\xc5\xeb\xc0\xbf\xf0uNQ\xc6\xb4)\x8d\xa8" +
	"\xa6\x0e\xbc\x01<\xfaYN+10\x8d\xd73\x16\xe7" +
	"\xe0M\xe0+\x17rjeLklD\xf3\x9b\xc0\x17" +
	"\x82\xb7^\xc9i\x15c\xda\x15\x8d0q\x0b\xc1\x97\x83" +
	"\xaf\xba\x8aS\x1bLe#&\xd62\xf0\x95\xe0mW" +
	"s\x8aa\x1c\x1b\xa1`+\xc0\xdb\xc1c\x8b8\xad\x86" +
	"\x09\x95\xf5\xb4\x83\xf7\x83\xaf^\xcci\x0d\x14\xac\x11\xa6" +
	"\xb2\x1f|#\xf8\x9a%\x9cndL\xbb\xbd\x11\x13t" +
	"#\xb8\x09~\xe3RN\xed\xf0V\x1a\xe5\x8cKC\xb0" +
	"\x0d\x82\xf6e\x9c\xd62\xa6\x8d\xca\x07\xb6\x81\xef\x04_" +
	"[\xc1\xe9&\"\xed>\xf9\xc3;\xc1\xf7\x80\xdft\x0d" +
	"\xa7\x9b\x89\xb4\x87\xe5\x0f\xef\x01\x7f\x0c\xfc\xe6\xcfq\xea" +
	"\x80O\xd1\x88\x0e\xdd\x0f~\x10\xbc\xe3ZN\x9d\x8ci" +
	"O\xcb\xfa\x0f\x82\x1f\x06\xef\\\xce\xa9\x8b1\xed\xf9F" +
	"X\x82C\xe0G\xc1\xbb\xae\xe3\xd4\x0d\x93\xdb\x08\xd3z" +
	"\x14\xfc\x04x\xf7dN=0\xb9\x8d\xd0\xf8\x13\xe0\xef" +
	"\x81\xf7\\\xcf\xa9\x971\xed]\xc9\xdf\x03\xbf\x00\xde\xfb" +
	"yN}\xd0H\xd9\xce\x0b\xe0\xa1\xd9\x0a\xd5\xf7\xad\xe0" +
	"\x14'\xd2h\xf6M\x8c\xf5\xcd\x86F\x02\xc7o\xe0\xd4" +
	"\xcf\x98V5\x1b\xfaR\x09\xce\xc1\xfbk8\xadcL" +
	"\xab\x9f\x8dj8\xf8\"\xf0uS8\xdd\xc2\x98v\xa5" +
	"\xe4\x8b\xc0;\xc0o\xf9\x02\xa7\xf5\xd0\xbb\xd9\xe8\x86\x1e" +
	"\xf0\x0d\xe0\xeb\xa3\x9cnel\xe9m\xb3e\xffo\x84" +
	"\xc0\x84\xe0\xd6\x95\x9cn#\xd2\x8c\xd9p\x15\x92\xe0i" +
	"\xf0/\xb6r\xfa\"cZj6&\x84\x09>\x02\xfe" +
	"\x07\xab8\xfd\x01\xf4Qr\x17|;\xf8\x866N\x1b" +
	"\xb0\x16\xca\x1f\xde\x01\xfe\x10\xf8\xed1N\xb73\xa6=" +
	"8\x1b\xfd\xf3\x10\xf8>\xf0/\xad\xe6\xf4%\xb8\"\xb3" +
	"\xd1\xcf\xfb\xc0\x9f\x04\xff\xf2\x1aN_\x86\x05\x9d\x8d\x09" +
	"\xba\x1f\xfc \xf8\xc6\x1b9m\xc48\xce\xc6x\x1d\x00" +
	"?\x04\xae\xb7s\xd2\xa1\xd7\xb2\x9eC\xe0G\xc17\xad" +
	"\xe5\xb4\x09\xe3(\xf9Q\xf0\x13\xe0\x89\x9b8%0\x8e" +
	"\xb3\xa1`'\xc0\xcf\x82'o\xe6\x94\x84\xab<{." +
	":\xe8\x1c\x04\xe7!\x10\x1d\x9c\x04\xfc?Op\x01\x82" +
	"PD\xa1\xfa\x81NN\x03p5#RP\x13Q)" +
	">\x1d\x82\xc1.N\x83\x8ci\xd3\"0\xf6\x0d\xe0\x0b" +
	"\xc0\x87\xba9\x0d1\xa6\xb5D`\x0a\x16\x82/\x077" +
	"z8\x19\xd0\xc9\x08\x9a\xba\x1c<\x06\xbe\xb9\x97\xd3f" +
	",z\x11\xa8@\x0c\xbc\x07\xfc\x8e>Nw\xc0}\x89" +
	"\xfc\x00c\x0c\xbe\x01\xdc\x8cs21\xc6\x91\x99hP" +
	"\x12\x824\x04\xa9~N)\x84G\x11i\\G \xd8" +
	"\x01\x81\xb5\x8e\x93\xc5\xd8\xd2{\xbcW\xd8\x0d\xc1^\x08" +
	"\xec[8\xd9p #0+{\xc1\xf7\x83\xa7\xd7s" +
	"J3\xa6=\x1e\xc1\xe8<\x06~\x00|\xcb\xad\x9c\xb6" +
	"\xc0\xb1\x91\xe5\x0f\x80\x1f\x02wn\xe3\xe4`tdS" +
	"\x0f\x81\x1f\x05\xcf|\x91S\x06\xa3#\xcb\x1f\x05?\x01" +
	"\xee\xfe\x01'\x17\xa3\x13\x91Z\x06~\x16<;\x89S" +
	"\x16VW\xd6s\x16\xfc\x1d\xf0\xe1\x0d\x9c\x86\x19\xd3~" +
	"\x19\x81U\x7f\x0f\xfc\x02\xf8\xd6\xdb9m\x85\xf6\xc9\xae" +
	"\xbb\x00\x1ejR\xa8~d*\xa7\x11\xac\x87M\xe0\xa1" +
	"&\x98Q\xf0\xd1ZN\xa30\xa3M\xa8\xbf\x09|\x05" +
	"\xf8\x9du\x9c\xee\x84?\xd2\x04k\xbf\x1c\xbc\x1f\xfc\x0f" +
	"\xeb9\xfd!\xcc\x9f\xac\xa7\x1f<\x0d\xbe\xed\x12N\xdb" +
	"\xa05M\x18\xca4\xf8n\xf0\xbb4Nw\xc1_\x90" +
	"\xf5\xef\x06\x7f\x12\xfc+\x9c\xd3W0\xdb\x9b\xa05\x07" +
	"\xc0\x8f\x81\xdf=\x8d\xd3\xddX\x95\x9a0U\x8e\x83\xbf" +
	"\x03\xbe\xfdRN\xdb\xf1\xbeMp\xe0\xdf\x03\xaf\x9c\xa3" +
	"P\xfd=\x97q\xba\x07\x9e\xf1\x1c\xd4_9\x07~\x19" +
	"\xf8\xbd\xd39\xdd\xcb\x986g\x0e\xfag\x01x\x0c\xfc" +
	"\xab38}\x15Sk\x0e~\xb7\x1d<\x09\xbec&" +
	"\xa7\x1d\xf0\x83\xe6\xa0\xff\x93\xe0\x0f\x81\xdf\xf7%N\xf7" +
	"A\x8be\xfd\x0f\x81\xef\x03\xff\xa3/s\xfa#h\xf1" +
	"\x1c\x98\xad\xbd\xe0\xfb\xc1\xbf\xb6\x91\xd3\xd70O\xe6\xa0" +
	"\xfdO\x82?\x0b\xbe3\xcci'c\xda3s\xb0\xaa" +
	"\x1e\x04?\x0c~\xbf\xce\xe9~X\xe39\xb0\xd2\x87\xc1" +
	"\x8f\x81\xef\xda\xc4i\x17\xfaA\xfe\xee1\xf0\x93\xe0\x0f" +
	"$8=\x00\xffh\x0e\xac\xd0\x09\xf0\xb3\xe0\xbb\x93\x9c" +
	"vc\x9e\xc8z\xce\x82\xbf\x03\xfe\xa0\xe0\xf4 \xfam" +
	"\x8e\xec7\xf0\x0b\xe0_\x1f\xe0\xf4u\xcc\x13\xd9\x0f\x1f" +
	"\x83W\xceU\xa8\xfe\x1b\x83\x9c\xbe\x81\xfe\x9c\x8b\xf25" +
	"s\xa1\xda\xe0\x0f\x0dqz\x08\xaa=\x17\xfd3\x1d\xbc" +
	"\x19\xfca\x83\xd3\xc3\xe8\xe7\xb9\xd0\x8b&\xf0\x85\xe0\xdf" +
	"\xdc\xcc\xe9\x9bX\x86\xe7\xc2L/\x04_\x0e\xfe\xad;" +
	"8}\x0b*?\x17\xfd\xb0\x0c|%\xf8\x1e\x93\xd3\x1e" +
	",\xc3s\xe52\x0c\xde\x0e\xfe\xc8,N\x8f`\x19\x96" +
	"\xe5c\xe0\x1b\xc1\xbf\xdd\xc0\xe9\xdbXn\xe7b~n" +
	"\x00\x1f\x01\xff\xe3\x14\xa7?\x86\x95\x9e\x0b+7\x02\xbe" +
	"\x03|o#\xa7\xbd\x8ci\xf7\xc8vn\x07\xdf\x07\xfe" +
	"\xa8\xc5\xe9Q\x8c\xe3\\\xcc\xe7}\xe0O\x82\x7f\xc7\xe6" +
	"\xf4\x1d\xccOY~?\xf8A\xf0\xef~\x83\xd3wa" +
	"\x8d\xe5\xef\x1e\x00?\x04\xbe/\xcdi\x1f\xf4}.\xe6" +
	"\xc3\xb3\xe0G\xe6*\xb4\xf8{G\x89\xd3\xf7\x101\xca" +
	"\x178\x0c\xc11<\xf0'\x0e\xa7?\xc1\x00\xcb\x0e=" +
	"\x06~\x12\xfcO3\x9c\xfe\x14\x03,;\xee$\xf8\x9b" +
	"\xe0\x8f\xb9\x9c\x1eC\xc8(\x7f\xf8,\xf8;\xe0\x8f\xcf" +
	"\xe6\xf48\x06X\xd6\xf3\x0exh\x9eB\xf5\xdf\xcfr" +
	"\xfa>\x14~\x1e\x06\xb2r\x1e\xd6U\xf0?\x1b\xe6\xf4" +
	"gXW\xe7A1\xa6\x837\x83\xef\x8fp\xda\x8f\x81" +
	"\x9c\x07\xc3\xd4\x0c\xbe\x12\xfc\x89\xad\x9c\x9e\xc0\xc0\xcc\xc3" +
	"D\\\x09\xde1O\xa1\xc5\x7f\xfe2q\xfas,\xb8" +
	"\xf3\xd0C\xed\x10\xf4\xe3\x81\xbf\x18\xe1\xf4\x17\xb0\x10\xf2" +
	"\x81~\xf0\x8d\xe0O\x8erz\x12#&\x7f`#\xb8" +
	"\x09\xfeT\x13\xa7\xa7\x18\xd3\x8cy\xf0[\xd3\xe0\xbb\xc1" +
	"\x7f0\x87\xd3\x0f`9d\xfd;\xc1\xf7\x83\xff\xe5\\" +
	"N\x7f\x09\x0d\x9b\x87\x17\xde\x0f~\x04\xfc\xc0\x9d\x9c\x0e" +
	"\xa0\xa3\xe7\xc1\x02\x1d\x01?\x0e\xfe\xf4<NO3\xa6" +
	"\xbd2\x0f3\xeb\x18\xf89\xbc\xc0_\xfd\x03q\xfa+" +
	"\"\xed\xady\xe8\xd17!x\x0f\x0f\xfc\xf0\x0f9\xfd" +
	"\x10\x8e\x8d|\x81\xf7\xc0/\x80\x1f\xdc\xc6\xe9 \x91\xf6" +
	"\xd1\xbc\x9b\xe0\xd0\xceS\xa9\xafY\xa1\xfag\xee\xe2\xf4" +
	"\x0c\x1cZ\xd9\xce\x8fQ\xbc\x12\xfcG_\xe1\xf4#h" +
	"R3\xaa\x0f5\xc3\xd1\x05\xff\xeb\xbb9\xfd5\x1c]" +
	"\xc9k\xc0\xa7\x83?\xbb\x9d\xd3\xb3\xd0\xb0f\xfc\xect" +
	"\xf0f\xf0\xe7\xee\xe1\xf4\x1c\x06\xa6\x19\x13\xa2\x19|\x11" +
	"\xf8\xff\xba\x97\xd3\xff\x82#\xd4\x8c\x89\xb5\x10|9\xf8" +
	"\xdf|\x95\xd3\xdf@\xc3d\xfd\xcb\xc0W\x82\x1f\xda\xc1" +
	"\xe9\x10\x06\xb2\x193t\x05x;\xf8\xf3\xf7qz\x1e" +
	"\x1a&\xeb\x89\x81\xf7\x80\xff\xf8\x8f8\xfd\x18\x8bm3" +
	"\xde\xab\x03\xfcV\xf0\xbf\xfd\x1a\xa7\xbfeL['y" +
	"?\xf8F\xf0\xc3;9\x1d\xc6\xf8\xcavn\x047\xc1" +
	"_\xb8\x9f\xd3\x0b\x18\xdffX\xc44\xf86\xf0\xbfk" +
	"\xe6\xf4w\xf0\x7fe{F\xc0\xf7\x80\xff}\x0b\xa7\xbf" +
	"gL{\xb8\x19\xf3d\x0f\xf8A\xf0#\xbb8\x1d!" +
	"\xd2\x9e\x96\xfds\x10\xfc0\xf8\x8b\x0fpz\x11\x16\xb4" +
	"\x19\xe3~\x18\xfc\x18\xf8K\xbb9\xbd\x04\x05\x93\xed9" +
	"\x06~\x12\xfc\x7f\xcf\xe7\xf4\xbf\xa1`\xcd\x88TO\x83" +
	"\x7f\xd8\xac\xd0\xe2\xa3\xe9\x06NG\x19\xd3>h\x86I" +
	"\xbc\x00A\xa8E\xa1\xfa_<\xc8\xe9e8\xae-\x9b" +
	"\x19\xebk\x81\xe3\x0a\xfc\xf6\xd79\xfd\x03\x91V\xd5\x02" +
	"\xcbQ\x03>\x1d\xfc\xadop\xfa\x09\x916\xad\x05\xed" +
	"\x99\x0e\xde\xdc\xa2\xd0\xe2\x97\xb74p:\x86\x81l\xc1" +
	"\xfci\x82`!\x1e\xf8\x87\x878\xbd\x02S\xd9\x82\x09" +
	"\xba\x00|\x19\xf8O\x1e\xe6\xf4*c\xda\xe2\x16\xb4g" +
	"9x\x0c\xfc\xd879\xfd#\x96\xb0\x16hv;x" +
	"?\xf8+\xdf\xe2t\x1c\x8a\xd7\x02\xc5\xe8\x07\xdf\x08\xfe" +
	"\xea\x1eN\xafa`Z\xa4\xe2\x81\x9b\xe0\xff\xf8\x08\xa7" +
	"\xff\x83\x81iA\x87\x9a\xe0#\xe0\xc7\xbf\xcd\xe9\xa70" +
	"\xa1\xf2\x05F\xc0w\xe0\x05^\xdb\xa0p:\x01\x1b*" +
	"\xdfx\x07\x04\x0f\xe1\x81\xff\xb3\x97\xd3\xebX#[\xd0" +
	"\xa3{\xc0\x1f\x03\xff\xe9\xa3\x9c\xde@d\xd2\x02[\xfc" +
	"\x18\xf8\x01Tt\xe2v\x85\xd3?\x11iO\xb5`\xca" +
	"=\x09\xc1\xb3\x10\xbc\xfe%\x85\xd3I\"\xed\x19)8" +
	"\x08\xc1a\x08\xdep\x1a8\x9d\xc2 \xb7`\xd2\x1d\x82" +
	"\xe0(\x04\xff\xf4e\x85\xd3?\x13i/\xb6\xc0;>" +
	"\x02\xc1q\x08N\x0e)\x9c\xfe\x85H{EVu\x0c" +
	"\x82\x93h\xd4\xa9\xcb9\x9d\xc6\xf0\xb7,\x81\x83\x01\xfe" +
	"\x0e\xf8?/\xe0t\x06v\xb4\x05q\xe6\x9b\xe0\x1f\x83" +
	"\xff\xcb\x15\x9c~\xc6\x98\xf6[\xc9?\x04\xaf\x9b\xafP" +
	"\xfd\xe9\xcfp\xfaW\xa8\xf1\xfcU\xb0\xaf\xf31\xcc\xf3" +
	"\x15Z|\xc6P8\x9d\xc50KA\x03\x04\x0b \xf8" +
	"\xd9f\x85\xd3\xcf\xe1\x05\xcf\xc7\xf87C\xb0\x08\x82\x7f" +
	"\xcd4p\xfa7h\xf2|\xfc\xc4\x02\x08\x96Ap\xd6" +
	"m\xe0\xf4\xef\x98\x01\xb2\xaa\x85\x10,\xc7o\xff\xfc\xb3" +
	"\x9c\xde\x84\x8a\xcf\x97~3x\x0c\xfc\xdf\x16rz\x0b" +
	"3c>T\x7f%x\x07\xf8\xbf_\xc9\xe9m\x98\xea" +
	"\xf9r\xb3\x08\xbc\x1f\xfc\xcd\xab8\xfd\x023f>T" +
	"\xf3V\xf0$8]\xcd\xe9\x1c\x9c\xa1\xf9P\xcd\x8d\xe0" +
	"&\xb8\xb2\x88\xd3/1c\xe6c\xa6\x0e\x81\xbb\xe0\xea" +
	"bN\xbfbL\xdb\"\xcb\xa7\xc1\xb7\xe1\x05B\xd9\x06" +
	"N\xbf\x86\x8e\xcb\x06\x8d@\xb0\x03\x82w\x87\x1b8\xbd" +
	"\x83\xa94\x1fs{'\x04{P\xd3m\xdf\xe5\xf4." +
	"\x82\xdc\xf9\x18\x9d\xdd\xe0{\xe7+46\xe0\xd8\x19\xf7" +
	"f\xc3da\xb3\xdb\"b\x0a\x11\xa3\xda;\xdc;l" +
	"\x9a\xcc\x14\x9a\xec\xfdG\"\xf7\x1fcz&c\xa4\x0c" +
	"SW\\\xd1\xa3;n\x9b-\x06\x062}\"\x99\x0d" +
	"'D2\xf7\xfc\x98\xbdt}\xdc\xb5S:\xb9\xba\xd9" +
	"f\xda\x99\xac\xea\x08\xaf\x8a#\xe7\xa3\x8c\x8d\xd9K\xe3" +
	"\xd9\xd4\xba\xb4\xcb\xc2\xfa\x1d\"_\xf7p\xa6Cw\x0d" +
	"7\xcb\xd4d\x01\xea\x9b\xeca1\xe8\xd8\x94\xb5\x92\xab" +
	"\x0c;\xa5\xab\x99\xcc\xc4\xc2H&\xd3m&\xf3\xf2t" +
	"\xa2U\x96 \xc7\xceZ\xc9ngP\xd5-\x9a\xca\xa8" +
	"G%\xd9\xd6\xa9\xa8#\xe1fu\xb3\xdf!\xdd\xca\xa4" +
	"\x0dGw\xc3\x86m\x05k\x90o\xac\x98\xba\xf7\xc6\x86" +
	"k\xd8\x96a\x0dF\xe4\xab\xe7*\xf3\xffo\xb2_g" +
	"\xd1S}B7M;\xa1\xe3A\xc6\xc6\xf5$\x0b\xbb" +
	"\"3\x8e\x12J\xf7\xe9\xae(z\xc2ul\xcbN\x91" +
	"\x91\x88\xe9\xa3\x1d\xc2\x0a\x0f\x0e\xb9\x81\x96\xae\xd23\"" +
	"\xa6\xd3\xa8)\xacAw\x88\x8do\x14\x0a\xf4\x0bJ\xa5" +
	"\x85\xa3\xbbY\x87D\x99\"b\xd0\xb0\xe2\xaa\xb02\x86" +
	"k\x0c\x8b\x9e!=#\xda\x85\xee\xc6]Gd2\x85" +
	"\xb6l\x12\xa6\xbdu\xa2a\x19'\x1c7,m\xba\xb3" +
	"\xc9\x1e\xa1QS\xf6JOTw\x87\xb6\xea\xa3T\xc1" +
	"\x14\xaa`4\x960\x85\xee\xc4\xf4Q\xea\xd3\x93\x06\x8a" +
	"PpD\xda\xec%\x9d\xc2e\xe1!;I\x93\x98R" +
	"1I\xc5#\x8e\xe1\x1a\x09\xdd\xa4\xae6\xdbJ\x08\xcb" +
	"\x8d:\xb2\xee\xe0s\xb2\x88\xa2\x9b\xdd#\xa3\x83\xc2j" +
	"\xb3-WXn\x99~\xf2\x0a\xaa\xba\xd9/r}U" +
	"\xb6\x13\x12\x8e\x9d\x8e\x19z\x8a\xd5\x0aW8Ex\x8d" +
	"cgX\xd4\x85f\x8c\x04g>d\xa8\x8aE&\x10" +
	"\x19\x83L-\x1a\xd56\x89Y\xd4\x18\x1cr{\x16O" +
	"$XR\"\xe8\xd2\x99\x9a\x12T\xc3\x14\xaa\xf1\x9b\xd4" +
	"\x15\x13)\x16\xd6\xaddQC\xbb\xfaD\x92\xa9\xc5-" +
	"\xf1\xaa\x88\xa7\x15\x910\x06\x8cD\xa7>\xd2g\xdb." +
	"&}L\xa4\xdd\xa1\xa2\xe7\xd7\xeb\xae g]\xda\xd5" +
	"\xef\x10\xe3\xba2\x91u\x1ca\xb9\xfd\x94\xeb\xc7\x88#" +
	"\xe2\xd9\xd4D\xc5\x14\xdb-\xea\xf3\xb8\x9aM\x15~l" +
	"\xa2B\xd1l\x0a\xcd\x0bv@\xd6u\x0d\x8b\x06c\xc2" +
	"\xd4Gc\xba:\x9a\xa10S(\xcch,\xa9{\xea" +
	"ACk\xf4\x84k;,\xf0XL\xcah\xd0\x1d\xea" +
	"\x13[\xb2F\xd4\x11)a\xb9\xa5\x8dM\xea\xa3\x99\xd6" +
	"\x01W(\x8e\xd4\x955\xa6\xbdU8\x865\xc8\x0a\xbf" +
	"!\x12\xa6a\xe9.+\xb1$11\xa0gM\xd5\xcd" +
	"Mjk]F\xac\x1e\x180\x12\x86\xb0\x12\xa3\x85\x96" +
	"\x0c\xa7d7\xdf\xa8H\xab\xb5Uw\x85\xd3\xafo2" +
	"E\xe1\x17P\xd7\xb00\xedP\x1a-lM$\x84)" +
	"\xbc\xe9\xbej\xb4\xcbp\x1d{PXr\xb2R\x86\xaa" +
	"\x98BU\xb2Ux\"\x9d\"a\xb9\xba\x19wuu" +
	"P\xe4+\xb4\xec\xee\x01\x8c9\x8b\xc4]\x91\x0et\x97" +
	"cg\x07\x87\xdc\xb5J*\xad'\xdcnk\x8dp\\" +
	"\xc34\xdc\xd1\x9cY\xcaM\x98\x98,\xa8\xbakK\x0b" +
	"\xfa\xdd\\\xd4\xcf\xb2\xac\xe2\xabS\xff\x90#2C\xb6" +
	"\x99de4quJ8\x83B\xb1\x12b\x8di\xdb" +
	"I\xc3\x1a\x84\xd6:\xb5v`\xb5**\xd6i\x1b\x19" +
	"\xcc\x8a\xf2\xc5\xacd\\XJ\xa9i\x8b\xc8v\xe4\x1b" +
	"(\x06\x06D\xc25\x86IxVvP\x0dLy\xe1" +
	"8\xb6\x13wa\xb5\xb3\x99|\xd5\x92v\x8a\x0c\xab\xcd" +
	"\xe8\x83\x05\xad\x13\xc3z\xdavtW\x11\xc95\x8e\x9d" +
	"Zk\xb9\xc2I\x88\xb4[\xe8\x0c1\xe2:\x18_\xc5" +
	"\x11\x19\xd71t\xb3\xac\xc1[c\x083\xd9\xa6\xd8V" +
	"R\xae>\x9dv\xd2\x180D\xb0S\x07\x0cK7c" +
	"bX\x91C\x9c\x1b\xe1\xc1\xc2\x94\x89\x0e\x18#\"\xd9" +
	"\x15\xac\x14+\x7f\x8c\xc4\x90\xee$\x85e\xa8\xd6`\xa9" +
	"\xb0\x9d<\x915\x18\xf8\xa5A\xd3\xde\x84f\x92?\x87" +
	"\x03\x12G\x08\xab\xd5\x11,\xaa\xaf\xb5\x92b$ \xb0" +
	"3\x99\xd6L\x86\xe4\xca\xe6\x8aL\xb0:\xc8z\x86l" +
	"r\xed\xcc\xa8\xe5\x0e\x89p\xc6\xc8L,\x8df\x8cL" +
	"\xa7m\x8e+\xa0\xe6\x0ad\x8cL\x9f\x18\x10\x8e\x90s" +
	"\xc1,\xfd!\xc7\xa0\x94\xee\x8c\xf68v2\x9aM\x14" +
	"\xad\x0f\x83\x8e\xbd\xd5\x1dj\x1b\xa5\x84)V[I\x81" +
	"\xf9\x98\x1b_O\xd6'\xc8\xf3\x10\x0c;l\xb5\xc6\x03" +
	"\xdd%\xa7QVI\xadu\x1ccPvK\xdc\xd5\x1d" +
	"\xb7h\xd6{e(W&j\xd8\xd6\xea\x80-\x1e\xce" +
	"\xc0\xf6\x0f\xb9L\xed\x0a\x8e\xd2Z\xcbp\x0d\x9d\xcc\x9b" +
	"\x13R\x91\xc8)#\xebv\x06uk\x95\x11\xb1Sz" +
	"&3^\x87r\xc5\xca\xdbp\xc3\x9f\x94\xe4\xb5\xdav" +
	"\xc2\x98\xc19\xe9\x1d\x89\x9c\xfe\xfa\xaf2\xb6T\xfe\xef" +
	"\x17Q\xc6\xd8\x98)\xf4\x81VG\xe8,R<\xe0\x99" +
	"\xace\x1an\x87 O\xbc\xd6\x0aCZ\xd2\xb0\xcc\x90" +
	"\x9e\x14\xc9O(\x94Nt\xd8[\xfbEJ\xc9Y\xfb" +
	"\xd5#i;\x93uDQ\xd7v\x18)\xc3\xc5\x0c\xbe" +
	"\xf8z]k\xba\xd7,\xf2\xcdV\xe5\x11i\xb6:\xdc" +
	"k\x16%\xb2,j\xba\xc6\xb0\x1e\xec\xdb\x8e\xecH\xd6" +
	"\x19e\xd1.\xcf\xcd\xcb\x09R:\xfa\xcb\xd2aj\xfa" +
	"Dn6X\xad\xf1\xa2\xf6t\xea#\x85\xe9n\xd8\x11" +
	"\xe9\xc8\x15\xcb\xdb\x1c\x9b\xa4\xef \xb0|\x96\x91\xf9\xb3" +
	"!\xf0\xcb#]Xe\x99zGIU]\xeb\xd2\x84" +
	"\xd5\xb7GwtJ\x15\xcb\xfal\x9b0\xe8\x18s\x1a" +
	"\x0a\xca\x0c\xcbHe\x95T\xce[rJ\x949WB" +
	"M\x05\xfat\x8d\xed\xb4\xfa\xfei\xa9\x97\xdc\x9dv\x7f" +
	"\x8f\xd2\x9d\xfa\xc8\xefS\xdaok\xa04\xe6r\xf4F" +
	"\xa9\x95\xf9\x82\x96p;1<\x8a\xb0\xf4\xa2\xe1\x09\xd8" +
	"RK\xb8=C\xb6kS\xceZP\xa6H\xe6\x88\x84" +
	"Ai\xc3-u\xd6\xa5\xccH\xe9\xe4\xd9\x8el\xa2\xb6" +
	"\xc4\xb7\xf4\xfaQ\xcdud\xab\x1f\x98\x94\xf3\x8e-\xbf" +
	"\xcb\xd5\xf2E3A\xf3\xf8\x89e\xc3\xc5~\xb5\xd7\x0c" +
	"\xca5C]\xb5\xa8\xa8*\xf8\xbb\x14\x13p9\\v" +
	"\x91\xc7z\xba&\x16\xd6\x169[\xb9\x06\x92'\xec\xb3" +
	"\xd5\x8b\x09#\xb6[\xd2^\xe9\xac\x90\xb00Z\xb6U" +
	"\x9b\x11E\x0bvW6\xb5I8J\xf7@\xccw^" +
	"\xbc\x95-\x82\xa5-\x13\xacF\x96\xa3\xee\x01i\x0a\x8b" +
	":\xd0\xf3L\xd7\x90c\xa7:\xf4Q\xb9h\x8e\xb31" +
	"\xde\xe4\xa5\xdc\x04\xab\xc5\x0c+-e{F\xd6f\xb5" +
	"\xe5\xac\xac\x94\xc6\x84N\x811,W\xe4FG\x90\xb0" +
	"\xbc2\x94\x99\xa0\x88M[\xdd\xa1\xb5V\xc2\x11\xb5\xe5" +
	"\x1c\xd0tB\xbe%\xdcC\xb9(\xe5\xadP\xd9WC" +
	"\xd1\xb5J2\xb3\xc6v\xe4\x0cvFo3\x84I\xc9" +
	"\\\xd1\xba\xb1\xae\xff\xf9\xb7)\x0d\x8b\xfe\xe7_\xb1\xde" +
	"\x8d\x7f(.\x12\xb6\x95\x94\x8f\x85\x85\xf9)\x1e#\xf9" +
	"X[\xd6\xad\x85\xe1\xf9\xc4\xf2\x9d\x8aoR\xf3*\x1b" +
	"\xf1\xe2\xb6r}\x03\xefMd\x12X\xdce\xff\xa0{" +
	"&|\xeb8\x09\xcb+\x1c\x11\xd2\x00\x97\x8f\xd5\xeda" +
	"\xe1$\xf4\x8cK1}Tz_\xc5\xaam\xcbX1" +
	"&XDjM`\xd2\xf5\xe8\x8e\xbb\xcaPl\xd3\x1e" +
	"D\xe0\xd9\xb5\xc6\x18\x19\xe7\xb9\xf5\xc0\x13\xb1X\xd8\xd0" +
	"\xcd\xc2\xb4\x86\x01J\x0b\x87\x0c;)#\xf9\xa8\x17\xb0" +
	"\x17\x1e\x1b\xb2\xdd\xd6\x84\xdbG\xb98\xa1\xb6S\xe8E" +
	"\xb5\x9a\xba\xe5\xc6XTF\xe9\xa3\x05\x81\x0d\xfd\xc6R" +
	"\xdf\xef\xc8\xcd\x8c\xd2\x10\xd8\xf1=#E\xac\x86g\xea" +
	":e\xb7<\x1c\x81UkX(\xfd\x88\xb4\x02\x9a\x17" +
	"P+G`%4,e\xf0\xe25e\x843,Z" +
	")g\xd8#\xa2\xc7\x0exo\xe9D\x9f\xc8\x18\xc9," +
	"\x89\xae>\xb4\x94\x15K\xd2\x86C\xbak;\xa3q\xd7" +
	"\x09\x07=t\xc7\xb6]\xe8\x10\x0b\xeb\xe5hT/\xde" +
	"n\x80 &\xac\x0c\x0b\xa3\xb7J\x86_\x0a\x0b1\xfc" +
	"\xb8\xa9\xd4'\xe5\x0a\xbc\xf3MY\xb9Y\xa1;z\x8a" +
	"\x15U\xbez`@\x10B\x06\x04F\xe5\xabXc\x93" +
	"\x93*\x13\x0bAv\xa3C\xd0\xe4\x0e}\xb0\xb8Z\xac" +
	"\xdb\xacVzk\xb9x,\x8f#\xc0\x9d\xa5\xc5\xbf\xc8" +
	"\xc2\xb6%\x02a\"\xaa\xef\x11d\x09\xcfx\x97x\"" +
	"\xc3\xa98VSo\xb3\x09\xcbB88\xc33\xb6a" +
	"\xb6\xd9\xc3\x82\xd5:A\x97p8\x13\xb7\x0d\xb3\xd3 " +
	"K8\xba\xd9\xd5fG\xbce\xa5\xd4\xbd\xb3\x0d3\x9e" +
	"\x16\x09\xa5x\x07!&\xc2A\xef\xd3\xab\xec\x93w\x1a" +
	"\xd2\x09\xd4e\x0c\x90\x91\xe8\x90N\xa7*\xf4\xf1\x1d\x9d" +
	"/\x83J:Dm\xb1V%dD\xd4J\x03\xae\x80" +
	"y\x0aF\xd3\xbe\xc4\xed\xd4G0\x17\x8a\xb7s\x8a\xc4" +
	"p\xcb\x8a\xf7g\xa4\xb0S\xf1Z^p\xa7j\xcb\x19" +
	"1\xbf\xf4\xcd\x94s\xab'(\xf0I\x1b&\x19\xd7N" +
	"\xe9\xae\xdeG\x88w\\\xddJ\x90(j\x91\xed\xe8\x83" +
	",*\xa4\x19,\xdd\xef\xccH\xa9\xe8f\xb5R\x1af" +
	"JE8\xc4h\xcc\xd5\x9dA\xe1v\xb5Q\xf1\x1b\xe4" +
	"\xaau\x8d\x94\x88\xbb\"\xcd\x8a#\x7f\xe0uVR\x90" +
	"\xd3j\xd9#\x86\xce\xf2\xfb\x0d\xc3\x99~\xdbq\xb36" +
	"\xab-2R.\x8cJa\x1d-\xc5\x04\x8a^\xac\x95" +
	"\x93\xaaH\xec\xfb\xc5\xba\xbb6\x95\x0e\xeb\x89\x12i\xd7" +
	"Z\x8b\x85\xd3\xd9R\xba.\xcdj\xdd\xe0.\xb3\xc4}" +
	"\"\xc3\"i\xc3\x11\xc9\xa0\xb1\x92\x16\xacx\xd7&\x93" +
	"MI3H]\xb9-\xae\xe2z\xe0_w\xf8\xfb\xad" +
	"E\x92~\x91\xa2\x9c\xb7\x1a\x8e\x07\xf6\xb1\\\x7fh\x95" +
	"\xac\x1c\xda~;\xb7\x83D\x85\x00<gOY\xf9\xb5" +
	"0'&\xcf\xad\x12I5;r\xf1211P[" +
	"X\xbe\xbc\xa1\x1b\x16\x8e\xa5\x9bF\xc6/\xa1\x8f\x06|" +
	"\xe1b\xd9\x1a=\x11v\xed\xa0F\xdc\"\xe5\x8a\x91\xf1" +
	"[\xb0%k`5V\xcby+\xebuW81\xc5" +
	"\xf3:=?\x0fn^ \xbc\xb6\x97\xc6\xe5R\xcdj" +
	"\xb1\xb2\x17\x1f\x14t\xd8\x08\xeb\xc8I\xc5\xf4\x94>(" +
	"\x8ag\x9f\xbd4>d;n?\x09_NEO'" +
	"G\x0dk\xb0;\xeb\xb2\xc0o\xe9\x89D6\x955u" +
	"\x16uEru\xbf^\xd8]\xf7\x05\x8a+\x92\xfd\xf9" +
	"\xf5\xacd\xcf>P\xc6\xf7\xa6\xda\x1c;\xed\xbbF\x81" +
	"9\x830\xd5!W$\xdb\xb2n>2/l\xfa\xa4" +
	"m\xc7\x15I\x92\xc2\x92\xe8 \x93M\xc9E\x91\xb2\xc2" +
	"\x13\x17\xeb\x89#\x17L\xd1F\xfe\xa3\x99\xc0\xa0%\xe4" +
	"\xb6\xe7`\x8c\xbcm\xcfQ8\xa19\x1b7\x9c\xe9\xd4" +
	"GV\x0f\x0c(rkK\xe4\xadqZ-\xb2\xc6k" +
	"Sia\x09\xc5u\xf4M\xa6\x90\xfer\xach\xbfJ" +
	"\xf7\xf7XX\x18\xf3Ee\xca\x14ulLF\xa7n" +
	"\xd6\xc1\xea7\x01\xa7>\xa1'\x86D\xb20\x0e\x19W" +
	"\xa4\xe3\xc6\x9d\x82\xa9K\x96yFhz\x90\x86\x97," +
	"[\xe4\xe1\xf3\x8c\"\x8e\x9e\\\xb2\xacdfE%\\" +
	"TJ\xdd\x01\xdb\x1cW\xf6n\x8f\x96\x16\xbe\xdb\xb0\x92" +
	"b\xc4\xfb}\xd9K\xfe\x7f/b,\xb0q\x965Q" +
	"\xa1\xdf\xee\xbb\xbd\xff\\T\xd8\x1a\xca\x0a\xf4\x89C\xab" +
	"SF&\x03e\xcdP\xdd\xd8\x17\x86:\xb3\x0d\x0b\xdf" +
	"?\x83\x89W\xc7hl\xf3\xe6a)g\xb5\x86m\x95" +
	"+0l{\xab\x17S\x05\xc4_\xbb\x8a\xdf\xfb7\x7f" +
	"qj{N\x9cp\xec4\x02W%\xb8\xcd\x95\xc9\x9a" +
	"\xae\xfc\xb5\xef\xff\xe9??\xb0aU\xedOs\xa53" +
	"\xa8IdzX\x04\xbe\x0aJ<`M\xff\xf6O\xbe" +
	"v\xea\x8d|}Yo\xc7\x83E{rE\xbe{\xf7" +
	"_^w\xd5\x07\x93\xfe#W\xc4\x9fi\x81J^\xff" +
	"`\xcf\xd5\x0b\xcf>\xbc#W\xc2\xc8\xac\x97\xbbG\xac" +
	"\x16J\x10\x1c\xd9\xd4j\xd3\xb6\x14o'l\xf5\xb0\xb0" +
	"\xdc50\xb5\x05-\x8c\x98\xee5\x8bR\xc1\xad\x98\xdc" +
	"=\x96\xd0\xc5\xee\xb1\xc4]\xdd%\xd1C\xd4\xbbL\x0d" +
	"Q\x8d\xbc\xc0r;\xc9\xb4`R)n\x92Bu\xfe" +
	"\xfd\x15\x8361\x16\x1f\x02vI\xa1z\xf2\xef\xafl" +
	"\xa1\xcd\x8c\xc5\xd3\xe0\xdb\xc0\x15\xd5\xbb\xbf2J71" +
	"\x16\x1f\x01\xdf\x01\xae\x868\x85\x18\xd3\xee\x91\xf5l\x07" +
	"\xdf\x0d\x1e\xaa\xf0\xee\xaf\xdc/\xeb\xd9\x09\xbe\x07\xbcb" +
	"\x92w\x7f\xe5a\xba\x97\xb1\xf8C\xe0\xfb\xc0'\x85\xbd" +
	"\xfb+\x8f\xca\xf2{\xc1\x9f\x05\x0fWz\xf7W\x9e\xa1" +
	"/2\x16?\x08~\x18\xbc\xb2\xca\xbb\xc0\xf2<}\x9f" +
	"\xb1\xf8a\xf0c\xe0U\xd5\xde\x05\x96\x97\xc9a,~" +
	"\x14\xfc\x04)D\xd5\x9c&\x13i\xaf\x91\xcc=\x05>" +
	"\x8b\xe2\x93Wz\xf7W\xce\xd0.\xc6\xe2g\xc1\xdf!" +
	"\x85\xc6\xf4\xac\xf4\x1c\x0cJ\xb4\xeb\xce\xb0\xc8\xb8\xf9\xf1" +
	"\xff\xaf\x05\xff\xf9\xd2\x0b\xcd\xff\xf5r\xf1\x14\xeaba" +
	"=x\x8c\x94\x9b6\xb5]A\x9c\x11\"\x19\x93g\x95" +
	"\x8c\xea\xc6\x1e\xac\x9f\xab\x1e\xf8\x9f_\xfdqn\x9a\x0c" +
	"y\xbf\x14ca\xf8\x9e\xe3\xe5%\xd3\xa8\xaep}+" +
	"_\xc0\x0b\xa3\xc8\x90>@\x9a\x95)\x93\xb3}\xacV" +
	"wE\xa6\x10u\x06\x7fljN\x91tGg\xaa\x9c" +
	"\xd2C/\xee\x9c\xf1\xa3\x9f\xbe\xbc+WMZ\xfe\x10" +
	"B\xa86\xaf`X/[\xee\x93\x95#\xe1\xd8\x99L" +
	"\x9bc+\xe9\xd6\xa4\x9e\xf6W\xd1\xc2\x81\x93\xb7@\x8d" +
	"\x1b\x8e\xc0B\x95\xd3\x88I\x13iD\xa7D\x9d(&" +
	"\xafv]\xd5\xda\x16\xeb\xb7o\xd1\xc3fV\xeaHe" +
	"\xee\x92W\xfd\x15s\x19\xebmV\xa9w\x114\xc1\xd3" +
	"\x90\xfa+\x970\xd6\xbb@\xa5\xdee\x0a\x85\xf5D2" +
	"g\xf0\"\xc3\xba\x99-\xb8K\x9fx\xc1,n\xd9[" +
	"K.\x98\xf5\xf6\xa8!\xd2\xa4z\xceQ^e,\xbe" +
	"@Q)\xbeL)\xa8\xe7b\x05j\xb5\x08x\x85\x12" +
	"P\xcf\xeb\x94>\xc6\xe2\xcb\xc1cJ@=[\x95o" +
	"2\x16\x8f\x81\xf7(\x01\xf5\xec\x94\xbc\x07|\x83\x12P" +
	"\xcf\xdb$\xdf\x00>\xa4\x04\xd4S(P\xc3$xZ" +
	"\x09\xa8gJ\xf9\x01\xcc\x02\xf86%\xa0\x9e\xa3\x0a\xd4" +
	"p\x1b\xf8N\xa5\xa0\x9eK\xefS>C\xd0s\x08\xf6" +
	")\x01\xfd|T\xf9o\xc6\xe2\x8f\x81\x1f\x00\xaf\x9e\xec" +
	"]0{J\xb9\x93\xb1\xf8\x93\xe0\xcf\x82O\xae\xf1\x14" +
	"\xf4\x19\xc9\x0f\x82\x1f\x06\xaf\x99\xe2]0{^\xfe\xf0" +
	"a\xf0c\xe0S\xa6z\x17\xcc^V`/\x8e\x82\x9f" +
	"\x00\x9fZ\xeb]0{M\xf2\xe3\xe0\xa7\xc1k\xeb\xbc" +
	"\x0bf\xa7dG\x9c\x06?\x07^W\xef]0{K" +
	"\x8e\xcb;\xe0\x1f\x82\xd7_\"/\x98i\x1f\xc8\x819" +
	"\x0f\xfe1\xf8%\x9aw\xbf\xec\xb7(\xdf\xa7\xaa\x14\xaf" +
	"Q\x15\x1a\xcbX\xf6\xd6>\xe1\x0a\xc5\xc2\xccn\xd3\xd3" +
	"z\xc2pG;\xf5\x91\x80\xb3\x842\x85\xb0\xbb\x98\xc2" +
	"\xa7(\xf8\x1d\x03\x8e}\xa7\xb0\xd6\xeb\xe4\x0ag\xad\x15" +
	"\xb7l\xda\x9a\x97\x99\xc6\x96\xac\x91,/\xf3\x8eF\xed" +
	"\xb5d\x0d\x18&\"\xdc@\x18\x94\xd2G03s\x01" +
	"t\xa9\x07\x07\xdfL\xca\x8b\xc5h]J\x98.\xe5\xf6" +
	"\x9a\xc3YG\x14I[\x13\x89\xac\x8a\x1a\xf0\xe2\xf9\xb3" +
	"\xcb\xa2\x9d\xc3r\x9e\xbe<\xa2Xc;\x1dx\x9dh" +
	"R\xfa\xc4\x05\xc7\xcdv\x1c\xf8e,j[}\xbaa" +
	"\x95\x15\xa0\xb5\xc1\x9d\x1cG\x88;E\xf9v\xe6\xa4L" +
	"\x0d$\x0c\x04\xe0\x92\xc0\xbe\xf6V\xd9\x0b\xe4m%!" +
	"\xaa/z\xdbN}\xa4UIz\xc7\x8e\xba\x19\xf3J" +
	"\x95\x8cq\x8f\x9e\xb8\x83\x85\x8d\xc0\xf9\xe1\x04\xb3\xc3\x08" +
	"\xba\xd2\x9fhWJ\xcd\x1bc\xbd!\x0a\\\xd6\xae\xa7" +
	"/\x8e\xf9\x16\xcfdjV\xf4\xee\xce_j}Y\xbd" +
	"\x9e\xb1\xf8\x11\xcc\xd6\xe3\xaaB4\xd73:\xaf\xa8p" +
	"\x15\x8e\x03\x9fV}K\x08\xa3sJ]\x82\xc5\x13\xfc" +
	",\xb8\xa2xF\xe7\x8c\xac\xe6$\xf8\x9b\xe0s\xc83" +
	":?W\xe5\xe5R\xf0\xf7\xc0\x9b\x14\xcf\xe8\xbc\xab\xfe" +
	"\x06\xba\x03\xfe1xD\xf5\x8c\xceo\xd5\xff`\xac/" +
	"\x04\xdd\x09\xc1v\xa9\x9e\xcd\xa9\x0a\xe1gC\xe0u\xe0" +
	"\xa1\x90gs\xa6\x84\xd0\xcc:\xf0\x86\x90\x7f5\x16." +
	"\xc1\x8c\x10T|:xs\xc8\xbf\x1a\x0b\x933'$" +
	"3\xc4\xc1\x17\x86\xfc\xab\xb109W\x84`\xeb\x16\x80" +
	"/\x03\xaf\xac\xf4L\xce\xe2\x90\xb4\xbd\xe0+\xc0\xab\xaa" +
	"<\x93s]\x08\xae\xc5r\xf0\x18\xf8\xec\x90grZ" +
	"C\xf2\xb2\x08x\x0fxu\xb5gr:C\xd2\xf6\x82" +
	"o\x00\x9f\\\xe1\x99\x9c\xdbd=\xb7\x82'\xc1k&" +
	"y&G\x97\xf5$\xc1\xd3\xe0S\xc2\x9e\xc9I\x85\xd0" +
	"\x9di\xf0m\xe0S+=\x933\x1a\xfa\x11l/\xf8" +
	"N\xf0\xda*\xefJ\xeb}\xa1\xb7\x19\x8b\xef\x06\xdf\x0b" +
	"^W\xed]i}D\xf6\xdb^\xf0\xfd\xe0\xf5\x93\xbd" +
	"+\xad\x8f\xcbz\xf6\x83\x1f\x04\xbf\xa4\x86\xd3e\x8ci" +
	"O\x87\xe03\x1d\x04?\x0c\xaeM\xf1\xae\xb4>\x1fz" +
	"\x03\xb3\x07\xfc88\x9f\xea]i}E\xf2\x13\xe0g" +
	"\xc1\xa7M\x96WZ\xb53\xb2\xffO\x83\x9f\x03\xbf\xb4" +
	"\xc6\xbb\xd1\xfa\x96\xec\xe77\xe5\xb8W(T\x7f\xd9\x14" +
	"N\x0d\x18\xf7\x0ay!\xab\x02\xe3\x08>}*\xa7F" +
	"\x8cc\x85L\x10\x07_\x09>\xa3\xce\xbb\xd1zC\x85" +
	"L\x10\x07\xef\x00\x9f\xa9x7Z\xd7V`|\xdb\xc1" +
	"\xfb\xc1g\xd5z7Z{+\xe4\x0dU\xf0\x0d\xe0\x0d" +
	"u\xde\x8d\xd6\xdb*\xd0\xce[\xc1\x93\xe0\x8d\xf5\xde\x8d" +
	"V\xbd\x02K\xd0Fp\xb3B\xa1h\xc6pE\x0f\\" +
	"\x9a}_^\xf3\xc1\x1b\x7f\xfb\xe8s%A\x83K\x86" +
	"mu\x0aw\xc8\x8e&\xdb\xec\xac\xe5\xe6=\x07a\x0d" +
	"\xcb\x07\xab\xffn\xff\xb6\xcbo\x1a;\xe2?\x18\x95N" +
	"\x17\x04?\x8bO\xfb\xab3'\xfe\xf9\\>\xea\xc9\xdc" +
	"(\x0f\xb3HZ\xf2\xd2htk\xab\x9b\xb23ie" +
	"H8F\xa2{i[\xf9\x8d\xa9\xe2bm\xddKr" +
	"\xe5\"E\x9b\xdf\x91\x8c\x91\x92m\xb8}\xf3\xb4\x9f<" +
	"Q{`,\xd7\x86A?\xcb\xc6[`\x06l'\x9a" +
	"\xf2\x1e\xac\x1b\xbbbj}\x87ye\xd5\x8b\xf9\xb8J" +
	"\xee\x88\x9aY\xa6\xa6 \xce_\xee\x0f\x88a\x8f\xc9\xdf" +
	"\xf6\x81\x9f\x9a\xff\xe6B\xa0L\xa7md\x98\xb7T\xd4" +
	"\x15\xbe\xb2\x10(\xd0\xed\x0c\xea,l\x19\x09\xaa+|" +
	"'!\xf8#\x8en\xb1H&m;.\xd5\x15>\x1a" +
	"\xe1\x97\xc0\x12\xd7=2:H~\x0eP\xf08\xccO" +
	"\xa2j\xa3\xdcW\x01\x08m\xc8\x7f\\#\xf7\x1b\xd9\x94" +
	"\xcc\xdfa\x11\xd3\xc8\x04\xd6\xa9L6\xd5\xed\x0c\xae\x11" +
	"$s{2E\x19(I\xdd0G\xe3\xd9\x14\xf9\x99" +
	"?\x195\xf0`^(\x1fw\\\xa3\xa4\xe2\x9c\\\x91" +
	";\x96F\xc2\xaf\xe3N\x11vb\x9d%?\xaf[\x94" +
	"+\x105\xee\x14\xc1\x02C\xd9T6\xb3J7I\xb7" +
	"\x12\xa2Mw\x9c\xc8h\xf7p\xb9\x9f)\xe4i\xc8\x85" +
	"\xb8\xf0\x16v\xda\x95\xa9\x89\x8a\xb5\xda\xdf\xa4\xf1N(" +
	"D`\x9b\xa5P\xa6O\xb8Y\xc7*W\xc6\xef\xe78" +
	"\xb9\"-#\xa32qO\xc24R\xba+d\\\xa4" +
	"\x97\x1cN\xd5\x15\xd6\xb9\\\xe0\xe2\xd5\xb8\x9aE\x10O" +
	"\xe7#\x9c\x9a\xdc6\x9b#\x86\x0d;\x9b\xa1\x98>\x9a" +
	"A\xc8\xad\x8e/#\xb3*\xe5&\xea\xba\xb4mu\x89" +
	"\x91Z7\xa6\x8f\xe6\x03\x8e\xa4>\x9aYo\xb8C~" +
	"\x1c\x96\xdb\x13\xc1t\xea\x8a\xbb\x0e+:\x82\x01\xf5R" +
	"\xffJ\x93\"!\x91\x19\x8e\xd1xq^\xd5'\x064" +
	"q\x7fj\xcb\x89\x1d\x0c)dL\xd1\xae\x86\xa8^." +
	"\xef\xef\xca\xd8\xf8=\x04\xb5\x17H!\xc6\xbc\xe5\xfd#" +
	"\x19b\x7fH*\xf5)\x81\xd5\xfdw2\xc2\xfe\x18\xa5" +
	"\xa7\xcb\x90\xc2\xffb\xc54\xe9\xe9rx\xbaM2\xa4" +
	"P\xbc\xd5\xbdQz\xe4\x0d\xe0\xcbeH\xa1z\xab\xfb" +
	"5\xd2\xc3^\x96\x0fA*B\xde\xea\xde\xa9\xc8k\x1c" +
	"\xf9Pc\x92\xe2-\xefB\xf2B\xa8\x11V\xbd\xe5=" +
	"\xa5|\xa7(\xd4\xa8\x0cy\xcb\xfb\xa8\"\xafk\x80\xef" +
	"\x90\x11E\x85\xb7\xbc\xdf#\xcb\xef\x00\x7fLF\x14\x93" +
	"\xbc\xe5\xfd{\xd2\xb3\x7f,\x1f9L\x0e{\xcb\xfb\xf3" +
	"\xca\x8fr\x91\x83\x8c\x04j*\xbd\xe5\xfd\x94\xb2\x0a\xcb" +
	"\x17\xf8{2\xa2\xa8\xf2\x96\xf7we\xc8%#\x81\x10" +
	"\xbc\x96\xa9\x15\x9cj\x894Ro\x0ax\xfc\xf5\xb5\xd5" +
	"\xde\xea^\xa5\xe2\xb5*\xc1\x9b\xc1\xeb&{\xab\xfb\x1c" +
	"\xc9\x9b\xc0W B\xc8\xa5mP\xaauX7L}" +
	"S\xd8\x14]\xc1\xb9\x905E\x8f\xcej\xfd\xf0y\xf9" +
	"<\xf7\xbe_\x8a\x7f|9\xaf\x1c\xb65,=_u" +
	"\xfc\xf6\xb7L[\x1d\x97=\x9e4\x06\x06\xb2\x19\xc3f" +
	"Q\xab(5;\x9f\xb7id\xd2\xc2\xc9\x94\xad1'" +
	"#\xdb{v\xdc\xb9\xccp\xa6C\xe8\x89!\x83\xbcT" +
	"\x9a\xc0f\xbf)\xb95H\xad\xee*,$\xba\xea\x8c" +
	"\x066T\xbbb\"mgX\xc4(^\xb3\x12\xdeq" +
	"\x02\x895^^\x82Z\xe6\xe8\xd1v\x84\xa7a\xb7\x08" +
	"\xd3N\x18.\x8d\x8eo\xd5\xa79\x8a\xbb\x1bKFW" +
	"\xf7\xd2r't]\xddKuF[\xc6\x1d\x1eLp" +
	"\xd8#\x0f\x84\x8d\x0c\xc9\xce\xb2\xad\xf1\xc7W\xc2I\xd8" +
	"\xa6\xe7!\xc8\xe4\xf5\xd2\x02\x9f\xe8\xf5\xcb\xc4\xc3q\xba" +
	"\xbf@\x0dQ\x95\xd4\xfd*\x82\x8f]\x07mn\x08l" +
	"\xf7\xcd\x90J>\x1d\xb89\xb8\xdd7\x87\xa0\x0c\xcd\xe0" +
	"\x8b\x82\xdb}W\x12\x94j\x11\xf8\x8a\xe0v\xdfu$" +
	"\xf7\x1f\xc0cr\xbb\x8f{\xca\xdf*\xf9J\xf0\x0eR" +
	"\x88\xfc\xaf\xd5\xac\x95\xbb\x83\xed\xc0I\x0a|\xadF'" +
	"\xb8lI\xf04\x05\xbeV\x93\xa2\x9f1\x16w\xc1\xb7" +
	"\x93\xef\x92C\xf7\xef\x92\xcd\xdf\x06\xbe\x93\xa0<\xa9\xf6" +
	"\xd1\xa4\xa3g\x15\xd3H\xb4\xd9V2\xeb\x1f.\xf7\xd5" +
	"\x16\x92\xc6\x99\x7fy#&\xd2L\x9d \xc2\x95\xbdY" +
	"r\x94j\x89Ay\xbcO11\xe8\x08\xe1\xa5G\xe7" +
	"C\xd6!\xbd\\t\x9e\xc1B\xc1\xa8\x90\x17l\xea\xa9" +
	"MI\xbdO\xb0p\xb2\xcc\xd1\x93\x1f\x93R\xd6\x91g" +
	"\x83NmQ\xec:$_\xcd4\x94\xe2W\xf3N\xb1" +
	"\xf2GLn\xbf\x9c\x83L\x15\xe9\xdfs\x05)d\x89" +
	"\xe5\xe7\x91\xea\xca\x1d\xb1\x8e|\x84X\xa1 V\xa8\x84" +
	"\xd1\xe3\x8aB\xa4z\xd3\xa8^n\x0f\xd5\x017\xc8\xdd" +
	"\x0f\xac!D\xda\x0ci\x9b\xa7\x837\xe7\xd6\x16U\xee" +
	"n!\x84h\x06_\xa4\xf8\x91#\xa6\xd1\x95\x92\x17\xb6" +
	"\xb7B\x95\xde4\xbaN\xae-\x85\xed\xad\x8a*o\x1e" +
	"\xb5*\xbb\x8a\xb6\xb7&\xf9!b\xa7\xdc\x05\x92\xdb[" +
	"\xa6\\C\xfc\x10\xd1\x90k\xcbP~\xad\xa8\xf4C\xc4" +
	"{\x94Kr\xdbU{\xe5\x1a\xe2\x87\x88\x8f\xc8\xf7\xda" +
	"\x03~P\xae!~\x88\xf8\xb4\xac\xe7@~\x97i\xb2" +
	"\x1f\"\xbe,\xeb9\x02~V\xae!~\x88xF\xae" +
	"-g\xc1/\xc85\xa4\xda[C>\x92\xef{Av" +
	"\xa7\\CT/D\xac\xc7\x1a\x12\xaf\xc3\xa2\xd0 \x17" +
	"\x91\xc9\xde\"2C\xc5\xfb6\x80/\x97\x8bH\x8d\xb7" +
	"\x88\\\xa3Bo\x96\x83\xf7\xab\x85\xcf\x1ei\xbd*\xda" +
	"\xdf\x03n\xca\xed'\xdb0\xe3Yg\x80\xf4\x84\x90\xe3" +
	"\x1d\xf5\x06|\xe2\xf5\xe5\x8a3\x0b.Q\x1a\x8f\x9e\xcf" +
	"\xad/I=\x956\xac\xc15,\"we\xfd\xe4\xd6" +
	"\xef<\x8a\xff\xbd+\x93[s\xce\xbe\x92\xb2nq\xbd" +
	"0\xc5K \xa3\xba\xc27\xc3J\x02\x03Yv\x95\xed" +
	"\xba\xb9d\xb32e-\x99\xab\xd6=\xc0\xa2\xb2H&" +
	"pD\x97Oc\xf3$E\xc7w\xd2\xd2\xdb\x94\xcbn" +
	"\x0f[\x99\xb2)\x17\xc5\xf1Gq\x01\x1a\x1e\xb7\x80\xd8" +
	"f6%:uV\xeb:\xc6\xc8DR\x82\xb0\xdbL" +
	"\x8e\xabo\xd38\xf3\xae\xa3h\x8fC\xf2h4f\xe8" +
	"\x91A\xdb\xd2\xcd\xf2\xc5\xe2BIdejY\xcc\xd0" +
	"e\xb9q\xcb\xc5\x90\xd0\xdd5\xa6\xbd\x95\x05\x02\x0d0" +
	"\x18\x0e\xcaY\x0eV\xf6\xb1\xa2\"^\x02U\xb9Rz" +
	"Zg\xb5\x892yA\x9f\xca\xd6\xe4n\x1b\x94~`" +
	"-Dj\x88VJK3%\x0c\x95\xaf\x09\xc3\xfd\x0c" +
	"+T\x1f\xf5W\xacia\x98\x14\x0e\xde\x14V\x88\xbe" +
	"\xe0-X\x8dahR\x13\xf0\xc2\xb0Bu\xfeV\xd4" +
	"\x15a\xb9\x97\x03\xbc\x0c\xb5\xdc\xe0oE-\x0e\xc3\x09" +
	"\\\x06\xbe\x12|\x85\xbf\x15uC\x18\x0b\xd3\x0a\xf0v" +
	"p\xaa\xf1\x0c\xcdj\xd9\x9a\x18x\x0f\xb82\xc574" +
	"a\xf9\xdd2\xf0\x0da\x7f=\x84\xa1\xb9M\xd6\xbf\x01" +
	"|(\xec\xef\xaf\xc3\xd0\x88\xf0\xab\x8c\xc5M\xf0\x91\xb0" +
	"\xbf\xbf\x0eC\x93\x0d\xc3`\x8d\x80\xef\x08\xfb\x86\x0c\x86" +
	"\xe6\x1e\xf9\xbb\xdb\xc1\xf7\x85\xfd\x05\x11\x86\xe6Q\xd9\x0b" +
	"{\xc1\xf7\x87}g\x18\x86\xe6q\xf9\xbb\xfb\xc1\x8f\x84" +
	"}g\x18\x86\xe6\x05Y\xcfa\xf0\xd3a\xdf\x19\x86\xa1" +
	"9%\xdb\x7f\x1a\xfc\xc3\xb0\xef\x0c\xc3\xd0| \xfb\xe1" +
	"<xM\xa5\xef\x0c\xc3\xd0TUb\xfd\xaf\xa9T)" +
	"\xbe\xa0\xd2w\x86ahZ*\xd1\x9ef\xf0\x95\x95\x81" +
	"\xbd\xa8\x1b*\xf1^+\xc1;*}o\x98\xc3\x01\x90" +
	"\xf5t\x80\x0f\x81\xd7Uy{QB\xf2!p\x17\xbc" +
	"\xbe\xda\xdb\x8b\xdaR\x89v\xba\xe0\xdb\xc1/\x99\xec\xed" +
	"E\xddU\x09\xc3\xb7\x1d|7\xb86\xd5\xdb\x8b\xba_" +
	"\x96\xdf\x0d\xbe\x17\x9cO\xf6\xf6\xa2\x1e\x91|/\xf8\xb3" +
	"\xe0\xd3j\xbc\xbd\xa8g*\xe1`\x1c\x02?\x0a~\xe9" +
	"\x14o/\xea\xc5J\xcc\x9f#\xe0\xc7\xc1/\x9b\xea\xed" +
	"E\xbd\"\xf91\xf0\x93\xe0\xd3k\xbd\xaf\xab\xbd^\x09" +
	"\x87\xe4\x04\xf8Y\xf0\x195\xde^\xd4\x99J\xb9%\x0a" +
	"~\x1e|f\x9d\xb7\x17\xf5\xbe\xec\xb7\xf7\xc0/\x80\xcf" +
	"\xaa\xf7\xf6\xa2>\x92\xf5|X\xa9R_\x95B\xf5\x0d" +
	"S\xbc\xad\xa8\xdfUb\x18?F\xf1\xe9\xe0\x8d\x97x" +
	"[Q\xd3\xaa\xf0Z\xd3\xab\xb0\xce\x82\xcf\xd68\xcd\xc3" +
	":[%\x83\x0b\xf0\x85\xe0\x91Z\xef\xe3jWT\xa1" +
	"\xdb\x16\x82/\x07o\xe2\xde\xc7\xd5\xae\xa9\xc2p-\x07" +
	"\x8f\x81\xcf\x99\xe6}\\\xadU\x96\x8f\x81\xf7\x80\xcf\xbd" +
	"\xd4\xfb\xb8Z\xa7\xe4=\xe0\x1b\xc0\xe7]\xe6}\\\xed" +
	"6Y\xcf\x06\xf0!\xf0\xe6\xe9\xde\xc7\xd5D\x95\x1c^" +
	"p\x17\xbce\x86\xf7q\xb5-Ux\xaf4\xf86\xf0" +
	"\xf9S\xbd\x8f\xab\x8dV\xc9\xadL\xf0\xbd\xe0\x97\xcf\xf4" +
	">\xae\xf6H\x15\xd4h\x1f\xf8\x93\xe0\x0bj\xbd\x8f\xab" +
	"=!\xdfw?\xf8\x11\xf0+f\xc9\xaf\xabi/H" +
	"~\x18\xfc\x18\xf8g\x1a8]M\xa4\xbd\\\xf56c" +
	"\xf1\xe3\xe0\xa7\xc1?\xdb(?\xae\xa6\x9d\x92\xfdy\x1a" +
	"\xfc\x1c\xf8\xc2:\xef\xdbjoUa\x9a\xbc\x03\x1e\xaa" +
	"V\xa8\xfe\xcaz\xef\xdbjT\xfd\xdfp\x8b\xaa\xd1\xff" +
	"\xe0W]\xc2i)\xfa\xbf\x1a\xd3\xa4\x09|\x05\xf8\xd5" +
	"\xb3\xe5\xb7\xd5\xb4\xeb\xaaQ\xff\x0a\xf0v\xf0E\x11\xef" +
	"\xd3j\xab\xab\xd1o\xed\xe0\xfd\xe0\x8b5N\x9f\xc3:" +
	"^\x8d\xfe\xe9\x017\xc1\x974q\xba\x16\xfe\x8c,o" +
	"\x82\x8f\x80/\x9d\xe3}Z-+\xeb\x1f\x01\xdf\x01\xbe" +
	"l\xae\xf7i\xb5{\xaa1\xdd\xb6\x83\xef\x06\xbff\x1e" +
	"\xa7\xeb\xa1.\xb2\xfcn\xf0\xbd\xe0\x9fk\xf6>\xad\xf6" +
	"\x88\xac\x7f/\xf8~\xf0k[\xbcO\xab=^\x8d\xe9" +
	"\xf9\x18\xf8\x01\xf0\xe5\xf3\xbdO\xab=U\x0d\xf3s\x00" +
	"\xfc\x10\xf8u\xdc\xfb\xb6\xdas\xf2w\x9f\x05?\x01~" +
	"\xfd\xe5\xde\xb7\xd5^\xab\xc6\xfc9\x01~\x16\xfc\xf3\xd3" +
	"\xbco\xab\x9d\xa9F\xd8p\x1a\xfc\xc3\xea\xdcm\xeb6" +
	";\xc5\xa2i\xdbB\xa4VW\xf8\x86k\xce\x95\xb0\xec" +
	"\xadmv*\xcd\"\xb9\x12\xf9/\xce\xfa%F\xe2\xad" +
	"\xf2\x82\xaa\x92\xd0\xcd\xe0\"\xc4&\xf6~~z\xebo" +
	"&\xa9\xb3\xc6\xf2\x9b\x8c\xc3[\xd7\x1bV2\x9e&!" +
	"\x92\xf2\xa2\x09\xb9\x81\xfdTO\xc6\xc2\"\x90\x1d\xf7\xff" +
	"\xe4\xb5xW\xabW\x0f\x93w\x0d\xae(7:'S" +
	"\x8a\xd2\x87K\xd3\xad.v5[\xf7\xf6\x15L\x16\x15" +
	"\xdeqZ\xe96\x81\x9e6LSwXd\xb4\xcf\xc8" +
	"\x14|\xc3\x1c'\x89\xfb\xe4\xa9\xe1D\x8fFG/Z" +
	"5y\xe2k\x17\x8d\xf7Arw\xff\xbct\xc2rB" +
	"\xd7\xd1)\xf7\xdae\xf6$\x06\xe4\xa5?=\x0d\x0f\xb5" +
	"\x8c\x7f2`fGZ\xdd\x0e\x9b\xb6\x0aGn<\x84" +
	"\xf5\xc0\xc6\xc3\xa0\xa3\x0f\x1b\xae\x17\x88\xeb\xe6z\xdd-" +
	"\xb3\xc1\xe0\xdf\x88\x13\x940\xbc\x1b/j\xf1m\xb8\xfc" +
	"\xaexk\xd2\xbb\x0dWN\x1632\x89\xa1Z\xdd\x09" +
	"$\x08\x07\xc5\xde\xbd\xd5\xc2\x8c\xf84\xce\xdb\xa7\x09\x0f" +
	"\x0d\xff\xc4\x97\x15\x9f\x05\xe4.\xb3\x95\xe0\xe1\x84w}" +
	"\x8e\xa9yO?p\x8d-\xea\x05\xb3\xa5\xed\xc8\x87\xb8" +
	"\x91d6!\x92\x17\xffJ\x81\x89\xa9\xdf?d\xb0h" +
	"\xe2\x0eK\x94\xb9\x85\xe7\xc5\x03\xfd4dx\x05\x82I" +
	"\xe0\xa9\x89\xf6\x96J%\x1d\xb5\xa8\xa4\xa0z\xf2x\xd6" +
	"p\xca\x1f\x02\xa7S\x9d\xfaH\x8fpH\xee\xc8\xc8\x8b" +
	";E\xb9\xdf[\xe1\x13\xb7\x1a\xe4\x94=\xbb\x1e\xde\xda" +
	"iX\x13\xd6=\x9c\xe8\x92\x97\xa5\xcaN\x9d\xe1\xad]" +
	"\xc2\xed\xd3\x93,j\x94\xdc\xc0\x17NJ\xb7\x84E\xee" +
	"z\xc3\x94I\xde=\xb61>ct8\xd1\x83A\xb4" +
	"\x14W\x1f\x14q?\x09\xdd\x09\xe4~~\x9a\x8d\xa6\xe1" +
	"\xad\xf2.W\x9arw\xb9~\x9fK\x10G\xa6\xafd" +
	",\x7f\x0f\x82\xda\xb3)#Y|\xee\xed\xe5\xff\xe8\xa6" +
	"RRG9E\xce\xc8\x1c{W(\xc9v\x7fj\xfb" +
	"3;\xeaM\xedra\\\xe0\x88h\x02)A\x98p" +
	"\x8c\xe0\xad\x8c\"Y\xd9|\xfe\x1e\xdb\x11,z\x8b\x0c" +
	"\xec\xc6\xf7\xbb\xfcf\x87Kz\x9f\x97V\x1e\xce'\xe3" +
	"\xca\xc3\x17g@O\x88>\xb2\xb3\x83C%38'" +
	"c\x91\xac\xd5\x1d\xb8-\x99\xc9\xa6\x10\xa5\xeb\x94\x10}" +
	"R2\xfe\x99\xf5\x04\x03:\xee\xdei\xd9\xed\x1f\xb9\xfd" +
	"\xb8\x1e\xf6\xda\xe9\x13){X'\xf3\xff-c\xba8" +
	"\x1b:\x97H\xb2\xc6\xcc2\x1a\x99(\x0e\xac\xbcX\x1c" +
	"\x88\xd8?eyYX\xf2\xa3\x03\"\xd9\x05\xfdI\xa7" +
	"M\xc3\xfb\xf0G\x8f.\xd7\xe2\x1e\xa2\xde\x86|^\xd6" +
	"s3\x19\xeb=\xa8R\xefa\x85riY\xcf;\x8c" +
	"\xf5\x1eR\xa9\xf7\xa8\x7fV\xa10V\xff\xe2&\xc6z" +
	"\x8f\xa8\xd4{\xdc?\xa8P\x19\xab\x7f\x05%\x8f\xa9\xd4" +
	"{\xd2?\xa5\x081V\xff\xfa\xab\x8c\xf5\x9eV\xa9\xf7" +
	"\x9c\x7fDQ\xc1X\xfd[\x80\xef\xa8\xd4\xfb!B2" +
	"o\xef\xb2\xfe\x83]\x8c\xf5~\xa8R\x1f)\xa4\x0e\xa4" +
	"\xa9n\xec\xca\x0d\x07\xdf\xfd\x8f/\xfd\xc1O\xf2\xae\x88" +
	"\x9eJ\x9b\x865\xc8\xca|\xf6\xa1\xab_wXxP" +
	"\xb8\xe3idP\xb8K\x0b\xf7\x0e\x07\xfc\xf3@E8" +
	"\xc5]\x12\xbc\xbe\x1e(\xa3\x8f\x94/\xe3\xda\xe9\x98<" +
	"O\x92y\xcb\xa6>\xfa\xfb$\x93\xc4\xfdSU\xcbH" +
	"\xc8X=\xea\x05\xeb\x18\x8e\xfdj\x88\x16\xc8P=%" +
	"\x13\x17\xcc\x10\xbc\xd0\x10\xbct?T\xcf\x86\xe0\xdd\x8d" +
	"\x80\xef\x08y\xe7M\x08\xd5\xef\x91\xf9\x15\xdb\x81w\x87" +
	"\x02\x9b\x82\xf7\xcb<\x87B~BnS\xf0\x11\x99o" +
	"P\xc8OP\xc9\x8b\xd5\x1f\x97\xf9\x0f\x85\xfc\x84\x90\xe2" +
	"\xc5\xeaO\xcbz\x0a\xf9\x09\x15\xe4\xc5\xea\xcf\xcbz\x0e" +
	"\x83\x9f\x0e\xf9\x07N\x88\xd5O\xc9f\xca<\x84\x0fC" +
	"\xfe\x81\x13b\xf5\x0fd^\xc4\x872\xcf\xa4\xc2\x8f\xb1" +
	"\x11\xabO\x91\xf9\x005\x15\x88\x81+\xfc\x18\x1b\xb1z" +
	"\x8b\xcc+(\xe4! \xc6\xae\x91y\x08p\x96W\x80" +
	"\xdfZ\xe1\xc7\xd8\x88\xd5\xd7\xc9z\xfa\xc1\xd3\x15~\x8c" +
	"\x8dX=%\xeb1\xc1wV\xf816b\xf5\xfbd" +
	"=;\xc0\x1f\x03\x9f\xea\x9f,}\xaf\xe2&\x04C\xe0" +
	"\x87\xc0k\xfdo\xa1?W!?a\x0e~\xb4\xc2?" +
	"qB\xac\xfe\xa2\xac\xff\x08\xf8q\xf0\xfa\x1a/V\x7f" +
	"\xa5\x02\xce\xfbq\xf0w\xc0/\x09y\xb1\xfa/e^" +
	"\xc49\xf0\xf3\xe0Z\x85\x17\xab\xbf/\xf3\x1f\xde\x03\xbf" +
	"\x00\xce'y\xb1\xfaG\x15\xf2K\x9f\xe0\xa1I\x88\xb1" +
	"\xc3^\xacN\x93\xd0\xcf\xa1I\xe8O\xf0K+\xbdX" +
	"}\xca$\x99\xb7\x03\xde\x00~Y\x95\x17\xab\xcf\x98\x84" +
	"\xf1m\x00_\x00>}\x8a\x17\xab\xb7\xc8\xf2\x0b\xc0c" +
	"\xe03\xaa\xbdX\xbdu\x12\x82\x95\x18x\x0f\xf8\xcc\xc9" +
	"^\xac\xde9\x09\xed\xec\x00\xbf\x15|\x96\x9f7\xb2N" +
	"\x96\xbf\x15\xdc\x05o\xa8\xf5b\xf5-\x93d\xaa3\xf8" +
	"n\xf0F?V\xbf_\xf2\x9d\xe0\xfb\xc1g\xfb\xb1\xfa" +
	"\xe3\x93d\x9e\x0c\xf8\x11\xf0\xc8%^\xb0\xfe\x82,\x7f" +
	"\x18\xfc4x\x93\xe6\x05\xeb\xa7$?\x09~\x1e|\x0e" +
	"\xf7\x82\xf5\xf7%\x7f\x0f\xbc2\x8c {\x9a\x17\xacW" +
	"\xc8=\xacPn\xc7\xab~^\x8d\x17\xac7\x86\xbf\x13" +
	"\xdc\xf2\xaao\x9e\xe2\x05\xebW\x84\xd1\x9e\x85\xe0\xcb\xc1" +
	"[\xa6z\xc1\xfa5r\x0f\xa8\xb0\xe75\xbf\xd6\x0b\xd6" +
	"o\x90{F+\xc1;\xc2\x0a\x9c\xc1\x84\xed\xa4\xed\xfc" +
	"\x92\x90;\xe7\xf6N\xb1\x84E\x86\xeb\x18\x03F\xa2$" +
	"\x9fd\\\xf0\xf4\xb5\x7f\xf9\xe1\x8c\xdd\xd1_\xffu!" +
	"i\xe5b\xfb\xb4\xf9+\xcb\xbe\xb9\xf1\x8b\x14b\"8" +
	"\xd3\xdd\xce I[\xa4\xbb\xd23\xcf5\xcd\xf0\xf3\x12" +
	"\xc8\xb6ZSv\xb6\xe8\xca\xa5\x9ep[S)\xdbR" +
	"\x0c\xbd{\xc4H\xea\xeeD\xae\x8f\x9ep\xbb\xf0j4" +
	"\xe0\x1b\xd1\xda\xe0\xed\xd7@\xa9\x98\xb0\x0c\x97\xbc>p" +
	"\x8d\xa8W\xdd\xb8rvj\x8d.?\x14b\xbaz<" +
	"\x9bb\x13\x14X\xcbj\xadt\xd6\x9d@\x1ag\xea\xf8" +
	"[l\xba\x9d\x8a\x9b2\xf9p\xe2\xaaQ`\xe2\xaa!" +
	"-[ub\x95n\xeaVBf\xa4\x97\x9e\xf5\x8a\x84" +
	"\x9dJ\xdb\x19\xe9E\x04\xee\x1b\x17}\xe1e\xfc\xb7\\" +
	"\x0cK8n\xdc6(\xb7\x8eP[i\xcd\xd6\x12[" +
	"~\x1c\x80\x85\x83\xf1B\x9eF\x13\"\xd9\x15p:r" +
	"\x02J\x88\xa4\x1c\x8a\xe2\xef\x0d\xacN\xd8\x99Q\x92\x97" +
	")F\x10bY\x01\xf7\xa8H\\\xeec&\x96p\xe1" +
	"\x80\x08rtS^\xd2R/&\x9c`\xe8\xbd\x0bt" +
	"\xedK\xe9\x16\x19A\x98F8\x13|\xaf\xa1\xa5\x92\xb3" +
	"\xa8\xcc\x05\x0a\\\x7fJmj\xeb^\xb2z\x98lS" +
	"^\x98\xed\x0b\x97\xa9;\x93\xda$\xa7\x15\xab\xc5\xe0\x97" +
	"\x91\xca\x99Q^\xfa{\xdc@\x95\x99T\xb5\x96\x91h" +
	"\x1b/M]\xac\x01\x17\x9d\xd4\x19\x7f\xe2N\xf0l6" +
	"U\xacYj\xf1}\xc2.t?\x19\xb2\xf1F\xa6d" +
	"\xf6A\xbe\xa4\xbb\xc7aQ\xbb8\xec\x84\xa0}\xe9-" +
	"6yC\x91\x11\x94\x1c\xe7\xfeLxy\xa6/k\xc9" +
	"#\xfd\xda\x9c\xd3\x13\xca\xfb\xa0S\xbe\xc8Xo\x8dJ" +
	"\xbd\xd3\x15\xbf\xa2\xb8\xab3U\xde\xd4\xc8\xff\xebE\xbe" +
	"\xe5\xfb\xc4\xdf\xe9\xd4G7\x89U\xb6Mf\xc9\x8f," +
	"a\xac\xb7R\xa5^\xae\xe4\xee\x17\x94^s\x08]\xcc" +
	"u\x83\x11\x8d:y\x97m\x85W1\x91\xf6\x08a-" +
	"\xd8C\xf0%\xa8p\xb9A\xfb\x9e\xbc&\xb3\x0f\xfcI" +
	"R(\x97\x0e\xf0\x84<\xc6\xdf\x0f|\x84\x0a\xae\xb4\xf6" +
	"\x02\xad\x82\x8b\x01~\x94\x0a\xde\xb4\xf6\xa2\xe4\x85[8" +
	"\xbeC\xad\xbd,\xf9\x11\xf0\xe3T\xf0\xa9\xb5W$\xcf" +
	"\xdf\xce\xa9\x0f\xfb\xf9\x00\xaf\xc9\xd4\xa4\xe3\xe0\xa7\xe5\xb9" +
	"\x7f\x98S%\x91vJ\x96/\\\xdb\xa9\xaa\xe4TE" +
	"\xa4\x9d\x91\xfc$\xf8\x9b\xe0\xd5U\x9c\xaa\x89\xb4\x9fK" +
	"~\x1a\xfc\x1c)\xb4x\xf2v\xc5\xbb\xff\xf3\x96L " +
	"x\x13\x82\xf7\xf0@\x0dy>\xdb\xbbX\xa9\xe3\xe7\xc0" +
	"\xcf\x93\xff\xef\xd4L!\xd2\xde\x97\xfd\x96O\xa1\x92\xff" +
	"N\x8d<\xc8\x95\xd7\x97r9T\xe3\xb75\x82\xc7\xa4" +
	"\xcf\xe7\x8fI\xd7c\x19\x8a \x80*\xec\xd0\x0c\xdb\xad" +
	"\xdd\x9d=\xb6\xcd\xc8,$\xb5\xe5\xff\xf1$/\xa9\xed" +
	"n_\x91r\x0f\xdd\xed\xab]\xe1\xbf=;\x10\xfc\xef" +
	"\xa0\xdc;w\xd5\x9dM\xacVO\x19\xc9@5\x86\xd9" +
	"\xd5\xbe\xcco\xed\x95m\x0d\xff\xf7\xed\xcf\xcdDk\xfd" +
	"T\x18?\xff}\xec\xe3\xa7>x\xa3sSO@\xb2" +
	"t\xfc3\xf2G\xd68\xf6\x9dL\x15y'\"\x9cI" +
	"\xc35\xf8\xcf/\xfc\xf8\xd0\xc9k\xe7<;.\xbb3" +
	"*O\x05\xfd\xda\x8e\x9c\x88\xfa\xd5\x14\x9f\xce~j\xf5" +
	"EO:vZD\x1c\xd7\x102\x86\xec\xcfg2\xdc" +
	" \xd3\xba\x0a)\x059\x0dh\x95|\x05x{.5" +
	"\x01*\xb0Z\x1e\xd5\xb7\x83\xf7+~6:T\xa0W" +
	"\xf2~\xf0\x8d\x8a\x9f\x8d\x0e\x15\xb8]\xf2\x8d\xf9\x14\x84" +
	"\x0a\xff\x86\x8d!\xb9\x09>\xa2\xf8\xa9/P\x81\xacL" +
	")p\xc1\xb7+\xfeI\x1fT\xe0.\xc9\x037i*" +
	"=\x15\xb8O\xd6\xb3\x13|\x8f\xe2g\xa3C\x05\x1e\x96" +
	"|O!\xed\xcd\xbf`\xf3=yS\xa7p\xc1fr" +
	"\xfe\x82\xcd\x0fr\xa9\x0c\x87d\xcaB\x0d\xa7\x1a\"\xed" +
	"9\x99r\xf1,\xf8\x11\x99\xb20\xc5\xd3\x80\x17$/" +
	"\\\xb0\x99\xba\x9c\xd3T\"\xedeY\xcf1\xf0\x93\xf2" +
	"\"\x8d\x7f\xc1\xe6u\x99\x8aq\x12\xfcMy\x91\xc6\xbf" +
	"`\xf3s\x99\x1a\"S\"\xde\x91\x17i\xfc\x0b6\xbf" +
	"\x94)\x17\xe7\xc0\xcf\xcbT\x12\xff\x82\xcd\xfb\x92\xbf\x97" +
	"K\xa1X\xac=\xa4r\xd2\x88\xb4\x8fdE\x1f**" +
	"\xf5\xa9\x0a-\xe6\x0f\xab\x1cC\xa9\xfdN\xd9\x15\xc8\xc3" +
	"\xbb[/Q\x19\xbdXe\xf2N\x95\"\x12X\xd3]" +
	";\xde\xb9\x0a\x80]\xb4\x04\xaa(*!\xd7\xc6\x8b\xd6" +
	"1\xae\xc4\xb8:|\xe7.\xe1\xa7\xd4\x95>[V\x92" +
	"k\x99\x94\xc4]\xddJ\xeaN\xb2\xf8\xce\\\xe1\xa7'" +
	".\x94\xd6\x1d\xb7\xb5\xbb3N\xa6\xbdU6\xae6\xd8" +
	"ie\xc4E}\x98\xb0\xe4\xe7HZY\xb4\xbb\xb3\xf0" +
	"\x9c\xff\x95\xce\x80\xac\xf0\x90\x7f\xdf\xdc\xff4$9\xfe" +
	"\x16\x86\x17Y\xe4]\x7f;\x15sF;ur]\xe1" +
	"\xb4\xd9\x96\x1b\x0e~\xe2@\xb7S]\xed\xcb\xdal\xe6" +
	"{3\xa5\x9d\xe2;\x1b\xa5\xbdX\x82'\x0az,\xdb" +
	"s\xe2\xc84\xee\xcc\xed\xac\x10S*\x8a\xd6\xe0\x8aO" +
	"\xb9\xc7\xe5\xdd\xc4\xc9\xff\x83\x7f\xf5\xf4\x9b\xb1\xdc\xae\x97" +
	"Rv\xdb\xabwe\xde^=#3\xf2\x9e\xcd/\xc1" +
	"9{\xf5\x82\xe4\x85%U\xa9\xf4\xec\xd5+2S\xaf" +
	"\xb0t\xe6\xec\xd5)Y>\xbf\x14\xe6\xed\xd5[r\xe5" +
	"/\xac\x849{\xf5.\xbd\xcaX\xfc<\xf8\xc7\x14\xb0" +
	"W\xbf\x95)|\x17\xc0Cy{E\xa4\x91\xbc \x97" +
	"\xcf\x10\xf3\xec\x95L\x11{\xa9(m\xb8\xca\xbf\xb0\xdb" +
	"(\xd5W\xa6\x0d/P\xbc\x8b\xb90W-2\xd1," +
	"\x7f\xffQ\xfe\xc3r\x93\xe5\x05\xc8\xef\xe4\xb2\x89W*" +
	"\x81\x05\xfb\x06\x99e\\0\xdbS\x14\xff\x1f\x9c+\x98" +
	"\xed\xa4\xe2o\x9a`\xc1\xd6%/d\x19\xd7\xfa\x99W" +
	")\xe5\xfa`\x86\x18|f\xb9\xe1J\xdeYY\xdc\x8d" +
	"\xd8%_u\xf1\xbeNI\"\xed}\x08\xb0T\x9e\x0a" +
	"\xde\xd4\xe8\xd77\xa9\xa6\x08D\xbdk\xe4i\x14u\xd8" +
	"\xdeiTD\xa6\xf5\x14\x1e\xde\"?I\xbb\x8eE\xd2" +
	"E\x9f\xe2\x18v\xe5\xd7_\xb2\x8a\xdc\x0a\x0e$\xee\xb1" +
	"\xe0\xc7P\xe5\x055\xc1\x8a\xbe\x1b\x93\xcet\xea#\x9d" +
	"\x86\xa5\x88\\\x0cc[\xde\xe1\x09+\xf2Q\xce\xc8\x15" +
	"|\xe2\xa8<\xff+\x03\xfdr{\x91E2\x99\xe0M" +
	"\xb6\x1c'\x89{t'\xea}\x00\xba\xccniq\xd1" +
	"\x980U}4\xdfC\x09\xff\xbe\x05C\xb7\x8d\xbfp" +
	"\x91,\xaf=\x19Vp\x9d\xf2\xda\x96\xfb|V*\xff" +
	"9\xe3\xdc\x01p\xf1\xe9Q\xd4\xf4\x0ej\xf35\x04\x13" +
	"\xd1\x82;\xdb\xeaDZ\x1f]\xdb\x16\xd3]\x1d\xfeF" +
	"\x8d\x1a\xaa\x19\x1b\x93\xbe\xfc\xea\xeb\x19\xeb]\xa9Ro" +
	"\x87B\x8d\xf4?c\xfe\xbe\xf5Z\xe0\x98J\xbd=\x0a" +
	"5*\xbf\x1b\xf3w\xae;?\xc3Xo\xbbJ\xbd\xfd" +
	"\x0aE-[^\xdf\x9e\x14\x1d\x92\x1f7,|\x97Q" +
	"/\x84\xc5\xff\x7f\x00\x00\x00\xff\xff\x0eP\xae\xc9"

func init() {
	schemas.Register(schema_86ea47c297746539,
		0x811d54ac7debc21e,
		0x8b008567c93f7c7d,
		0x98e203c76f83d365,
		0xa4da01d10b3b6acd,
		0xab56969492d293b3,
		0xb1760f65e652e737,
		0xb4f16ea3144d85a6,
		0xbd3e199eb9b03758,
		0xcd05962719bf7ec8,
		0xd1edcf54f4edf638,
		0xd594e64f6b5f461d,
		0xd599d06dc405571a,
		0xd8af9210839bc071,
		0xdd1e0c7c94dc4211,
		0xe3512e62df901c18,
		0xef3e4198d3e35596,
		0xf03d8fd1bbe75519)
}
