// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	math "math"
	strconv "strconv"
)

type MaybeBool capnp.Struct

// MaybeBool_TypeID is the unique identifier for the type MaybeBool.
const MaybeBool_TypeID = 0xd8af9210839bc071

func NewMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func NewRootMaybeBool(s *capnp.Segment) (MaybeBool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MaybeBool(st), err
}

func ReadRootMaybeBool(msg *capnp.Message) (MaybeBool, error) {
	root, err := msg.Root()
	return MaybeBool(root.Struct()), err
}

func (s MaybeBool) String() string {
	str, _ := text.Marshal(0xd8af9210839bc071, capnp.Struct(s))
	return str
}

func (s MaybeBool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MaybeBool) DecodeFromPtr(p capnp.Ptr) MaybeBool {
	return MaybeBool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MaybeBool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MaybeBool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MaybeBool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MaybeBool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MaybeBool) Value() bool {
	return capnp.Struct(s).Bit(0)
}

func (s MaybeBool) SetValue(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// MaybeBool_List is a list of MaybeBool.
type MaybeBool_List = capnp.StructList[MaybeBool]

// NewMaybeBool creates a new list of MaybeBool.
func NewMaybeBool_List(s *capnp.Segment, sz int32) (MaybeBool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[MaybeBool](l), err
}

// MaybeBool_Future is a wrapper for a MaybeBool promised by a client call.
type MaybeBool_Future struct{ *capnp.Future }

func (f MaybeBool_Future) Struct() (MaybeBool, error) {
	p, err := f.Future.Ptr()
	return MaybeBool(p.Struct()), err
}

type RuntimeState capnp.Struct

// RuntimeState_TypeID is the unique identifier for the type RuntimeState.
const RuntimeState_TypeID = 0xd599d06dc405571a

func NewRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func NewRootRuntimeState(s *capnp.Segment) (RuntimeState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RuntimeState(st), err
}

func ReadRootRuntimeState(msg *capnp.Message) (RuntimeState, error) {
	root, err := msg.Root()
	return RuntimeState(root.Struct()), err
}

func (s RuntimeState) String() string {
	str, _ := text.Marshal(0xd599d06dc405571a, capnp.Struct(s))
	return str
}

func (s RuntimeState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RuntimeState) DecodeFromPtr(p capnp.Ptr) RuntimeState {
	return RuntimeState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RuntimeState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RuntimeState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RuntimeState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RuntimeState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RuntimeState) ModelState() (MonicaModelState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return MonicaModelState(p.Struct()), err
}

func (s RuntimeState) HasModelState() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RuntimeState) SetModelState(v MonicaModelState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModelState sets the modelState field to a newly
// allocated MonicaModelState struct, preferring placement in s's segment.
func (s RuntimeState) NewModelState() (MonicaModelState, error) {
	ss, err := NewMonicaModelState(capnp.Struct(s).Segment())
	if err != nil {
		return MonicaModelState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RuntimeState_List is a list of RuntimeState.
type RuntimeState_List = capnp.StructList[RuntimeState]

// NewRuntimeState creates a new list of RuntimeState.
func NewRuntimeState_List(s *capnp.Segment, sz int32) (RuntimeState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RuntimeState](l), err
}

// RuntimeState_Future is a wrapper for a RuntimeState promised by a client call.
type RuntimeState_Future struct{ *capnp.Future }

func (f RuntimeState_Future) Struct() (RuntimeState, error) {
	p, err := f.Future.Ptr()
	return RuntimeState(p.Struct()), err
}
func (p RuntimeState_Future) ModelState() MonicaModelState_Future {
	return MonicaModelState_Future{Future: p.Future.Field(0, nil)}
}

type CropState capnp.Struct

// CropState_TypeID is the unique identifier for the type CropState.
const CropState_TypeID = 0x8b008567c93f7c7d

func NewCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func NewRootCropState(s *capnp.Segment) (CropState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11})
	return CropState(st), err
}

func ReadRootCropState(msg *capnp.Message) (CropState, error) {
	root, err := msg.Root()
	return CropState(root.Struct()), err
}

func (s CropState) String() string {
	str, _ := text.Marshal(0x8b008567c93f7c7d, capnp.Struct(s))
	return str
}

func (s CropState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropState) DecodeFromPtr(p capnp.Ptr) CropState {
	return CropState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropState) SpeciesName() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s CropState) HasSpeciesName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropState) SpeciesNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s CropState) SetSpeciesName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s CropState) CultivarName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s CropState) HasCultivarName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropState) CultivarNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s CropState) SetCultivarName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s CropState) SeedDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common.Date(p.Struct()), err
}

func (s CropState) HasSeedDate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropState) SetSeedDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSeedDate sets the seedDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewSeedDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) HarvestDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common.Date(p.Struct()), err
}

func (s CropState) HasHarvestDate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropState) SetHarvestDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewHarvestDate sets the harvestDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s CropState) NewHarvestDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsWinterCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsWinterCrop() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropState) SetIsWinterCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewIsWinterCrop sets the isWinterCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsWinterCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) IsPerennialCrop() (MaybeBool, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return MaybeBool(p.Struct()), err
}

func (s CropState) HasIsPerennialCrop() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropState) SetIsPerennialCrop(v MaybeBool) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewIsPerennialCrop sets the isPerennialCrop field to a newly
// allocated MaybeBool struct, preferring placement in s's segment.
func (s CropState) NewIsPerennialCrop() (MaybeBool, error) {
	ss, err := NewMaybeBool(capnp.Struct(s).Segment())
	if err != nil {
		return MaybeBool{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CuttingDates() (common.Date_List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return common.Date_List(p.List()), err
}

func (s CropState) HasCuttingDates() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropState) SetCuttingDates(v common.Date_List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCuttingDates sets the cuttingDates field to a newly
// allocated common.Date_List, preferring placement in s's segment.
func (s CropState) NewCuttingDates(n int32) (common.Date_List, error) {
	l, err := common.NewDate_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Date_List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropState) CropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasCropParams() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropState) SetCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewCropParams sets the cropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) PerennialCropParams() (CropParameters, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return CropParameters(p.Struct()), err
}

func (s CropState) HasPerennialCropParams() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropState) SetPerennialCropParams(v CropParameters) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewPerennialCropParams sets the perennialCropParams field to a newly
// allocated CropParameters struct, preferring placement in s's segment.
func (s CropState) NewPerennialCropParams() (CropParameters, error) {
	ss, err := NewCropParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropResidueParameters(p.Struct()), err
}

func (s CropState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropState) CrossCropAdaptionFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3ff0000000000000)
}

func (s CropState) SetCrossCropAdaptionFactor(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropState) AutomaticHarvest() bool {
	return capnp.Struct(s).Bit(64)
}

func (s CropState) SetAutomaticHarvest(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

func (s CropState) AutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AutomaticHarvestParameters(p.Struct()), err
}

func (s CropState) HasAutomaticHarvestParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropState) SetAutomaticHarvestParams(v AutomaticHarvestParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAutomaticHarvestParams sets the automaticHarvestParams field to a newly
// allocated AutomaticHarvestParameters struct, preferring placement in s's segment.
func (s CropState) NewAutomaticHarvestParams() (AutomaticHarvestParameters, error) {
	ss, err := NewAutomaticHarvestParameters(capnp.Struct(s).Segment())
	if err != nil {
		return AutomaticHarvestParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// CropState_List is a list of CropState.
type CropState_List = capnp.StructList[CropState]

// NewCropState creates a new list of CropState.
func NewCropState_List(s *capnp.Segment, sz int32) (CropState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 11}, sz)
	return capnp.StructList[CropState](l), err
}

// CropState_Future is a wrapper for a CropState promised by a client call.
type CropState_Future struct{ *capnp.Future }

func (f CropState_Future) Struct() (CropState, error) {
	p, err := f.Future.Ptr()
	return CropState(p.Struct()), err
}
func (p CropState_Future) SeedDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p CropState_Future) HarvestDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}
func (p CropState_Future) IsWinterCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(5, nil)}
}
func (p CropState_Future) IsPerennialCrop() MaybeBool_Future {
	return MaybeBool_Future{Future: p.Future.Field(6, nil)}
}
func (p CropState_Future) CropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(8, nil)}
}
func (p CropState_Future) PerennialCropParams() CropParameters_Future {
	return CropParameters_Future{Future: p.Future.Field(9, nil)}
}
func (p CropState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(10, nil)}
}
func (p CropState_Future) AutomaticHarvestParams() AutomaticHarvestParameters_Future {
	return AutomaticHarvestParameters_Future{Future: p.Future.Field(0, nil)}
}

type AOMProperties capnp.Struct

// AOMProperties_TypeID is the unique identifier for the type AOMProperties.
const AOMProperties_TypeID = 0xe3512e62df901c18

func NewAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func NewRootAOMProperties(s *capnp.Segment) (AOMProperties, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0})
	return AOMProperties(st), err
}

func ReadRootAOMProperties(msg *capnp.Message) (AOMProperties, error) {
	root, err := msg.Root()
	return AOMProperties(root.Struct()), err
}

func (s AOMProperties) String() string {
	str, _ := text.Marshal(0xe3512e62df901c18, capnp.Struct(s))
	return str
}

func (s AOMProperties) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AOMProperties) DecodeFromPtr(p capnp.Ptr) AOMProperties {
	return AOMProperties(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AOMProperties) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AOMProperties) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AOMProperties) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AOMProperties) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AOMProperties) AomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s AOMProperties) SetAomSlow(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s AOMProperties) AomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s AOMProperties) SetAomFast(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s AOMProperties) SetAomSlowDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s AOMProperties) SetAomFastDecRatetoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecRatetoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s AOMProperties) SetAomFastDecRatetoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s AOMProperties) SetAomSlowDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s AOMProperties) AomFastDecCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s AOMProperties) SetAomFastDecCoeff(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) PartAOMSlowtoSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s AOMProperties) SetPartAOMSlowtoSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s AOMProperties) PartAOMSlowtoSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s AOMProperties) SetPartAOMSlowtoSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s AOMProperties) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104) ^ 0x3ff0000000000000)
}

func (s AOMProperties) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s AOMProperties) DaysAfterApplication() uint16 {
	return capnp.Struct(s).Uint16(112)
}

func (s AOMProperties) SetDaysAfterApplication(v uint16) {
	capnp.Struct(s).SetUint16(112, v)
}

func (s AOMProperties) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s AOMProperties) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s AOMProperties) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s AOMProperties) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s AOMProperties) AomSlowDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s AOMProperties) SetAomSlowDelta(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s AOMProperties) AomFastDelta() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s AOMProperties) SetAomFastDelta(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s AOMProperties) Incorporation() bool {
	return capnp.Struct(s).Bit(912)
}

func (s AOMProperties) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(912, v)
}

func (s AOMProperties) NoVolatilization() bool {
	return !capnp.Struct(s).Bit(913)
}

func (s AOMProperties) SetNoVolatilization(v bool) {
	capnp.Struct(s).SetBit(913, !v)
}

// AOMProperties_List is a list of AOMProperties.
type AOMProperties_List = capnp.StructList[AOMProperties]

// NewAOMProperties creates a new list of AOMProperties.
func NewAOMProperties_List(s *capnp.Segment, sz int32) (AOMProperties_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 152, PointerCount: 0}, sz)
	return capnp.StructList[AOMProperties](l), err
}

// AOMProperties_Future is a wrapper for a AOMProperties promised by a client call.
type AOMProperties_Future struct{ *capnp.Future }

func (f AOMProperties_Future) Struct() (AOMProperties, error) {
	p, err := f.Future.Ptr()
	return AOMProperties(p.Struct()), err
}

type SoilColumnState capnp.Struct

// SoilColumnState_TypeID is the unique identifier for the type SoilColumnState.
const SoilColumnState_TypeID = 0xef3e4198d3e35596

func NewSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func NewRootSoilColumnState(s *capnp.Segment) (SoilColumnState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4})
	return SoilColumnState(st), err
}

func ReadRootSoilColumnState(msg *capnp.Message) (SoilColumnState, error) {
	root, err := msg.Root()
	return SoilColumnState(root.Struct()), err
}

func (s SoilColumnState) String() string {
	str, _ := text.Marshal(0xef3e4198d3e35596, capnp.Struct(s))
	return str
}

func (s SoilColumnState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState) DecodeFromPtr(p capnp.Ptr) SoilColumnState {
	return SoilColumnState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState) VsSurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState) SetVsSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState) VsInterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState) SetVsInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState) VmGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilColumnState) SetVmGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilColumnState) VsFluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState) SetVsFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState) VqCropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState) SetVqCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState) VtSoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState) SetVtSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilColumnState) VmSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilColumnState) SetVmSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilColumnState) PsMaxMineralisationDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3fd999999999999a)
}

func (s SoilColumnState) SetPsMaxMineralisationDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3fd999999999999a)
}

func (s SoilColumnState) VsNumberOfOrganicLayers() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilColumnState) SetVsNumberOfOrganicLayers(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressing() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilColumnState) SetVfTopDressing(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilColumnState) VfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState) HasVfTopDressingPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState) SetVfTopDressingPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVfTopDressingPartition sets the vfTopDressingPartition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState) NewVfTopDressingPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) VfTopDressingDelay() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilColumnState) SetVfTopDressingDelay(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilColumnState) CropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return CropModuleState(p.Struct()), err
}

func (s SoilColumnState) HasCropModule() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilColumnState) SetCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCropModule sets the cropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s SoilColumnState) NewCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState) DelayedNMinApplications() (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilColumnState_DelayedNMinApplicationParams_List(p.List()), err
}

func (s SoilColumnState) HasDelayedNMinApplications() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilColumnState) SetDelayedNMinApplications(v SoilColumnState_DelayedNMinApplicationParams_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDelayedNMinApplications sets the delayedNMinApplications field to a newly
// allocated SoilColumnState_DelayedNMinApplicationParams_List, preferring placement in s's segment.
func (s SoilColumnState) NewDelayedNMinApplications(n int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := NewSoilColumnState_DelayedNMinApplicationParams_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilColumnState_DelayedNMinApplicationParams_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilColumnState) PmCriticalMoistureDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilColumnState) SetPmCriticalMoistureDepth(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilColumnState) Layers() (SoilLayerState_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SoilLayerState_List(p.List()), err
}

func (s SoilColumnState) HasLayers() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilColumnState) SetLayers(v SoilLayerState_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated SoilLayerState_List, preferring placement in s's segment.
func (s SoilColumnState) NewLayers(n int32) (SoilLayerState_List, error) {
	l, err := NewSoilLayerState_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilLayerState_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// SoilColumnState_List is a list of SoilColumnState.
type SoilColumnState_List = capnp.StructList[SoilColumnState]

// NewSoilColumnState creates a new list of SoilColumnState.
func NewSoilColumnState_List(s *capnp.Segment, sz int32) (SoilColumnState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 4}, sz)
	return capnp.StructList[SoilColumnState](l), err
}

// SoilColumnState_Future is a wrapper for a SoilColumnState promised by a client call.
type SoilColumnState_Future struct{ *capnp.Future }

func (f SoilColumnState_Future) Struct() (SoilColumnState, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState(p.Struct()), err
}
func (p SoilColumnState_Future) VfTopDressingPartition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}
func (p SoilColumnState_Future) CropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(1, nil)}
}

type SoilColumnState_DelayedNMinApplicationParams capnp.Struct

// SoilColumnState_DelayedNMinApplicationParams_TypeID is the unique identifier for the type SoilColumnState_DelayedNMinApplicationParams.
const SoilColumnState_DelayedNMinApplicationParams_TypeID = 0xd1edcf54f4edf638

func NewSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func NewRootSoilColumnState_DelayedNMinApplicationParams(s *capnp.Segment) (SoilColumnState_DelayedNMinApplicationParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1})
	return SoilColumnState_DelayedNMinApplicationParams(st), err
}

func ReadRootSoilColumnState_DelayedNMinApplicationParams(msg *capnp.Message) (SoilColumnState_DelayedNMinApplicationParams, error) {
	root, err := msg.Root()
	return SoilColumnState_DelayedNMinApplicationParams(root.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) String() string {
	str, _ := text.Marshal(0xd1edcf54f4edf638, capnp.Struct(s))
	return str
}

func (s SoilColumnState_DelayedNMinApplicationParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilColumnState_DelayedNMinApplicationParams) DecodeFromPtr(p capnp.Ptr) SoilColumnState_DelayedNMinApplicationParams {
	return SoilColumnState_DelayedNMinApplicationParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilColumnState_DelayedNMinApplicationParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilColumnState_DelayedNMinApplicationParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilColumnState_DelayedNMinApplicationParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilColumnState_DelayedNMinApplicationParams) Fp() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s SoilColumnState_DelayedNMinApplicationParams) HasFp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFp(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFp sets the fp field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s SoilColumnState_DelayedNMinApplicationParams) NewFp() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilColumnState_DelayedNMinApplicationParams) SamplingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetSamplingDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) CropNTarget30() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetCropNTarget30(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMinApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMinApplication(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) FertiliserMaxApplication() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetFertiliserMaxApplication(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilColumnState_DelayedNMinApplicationParams) TopDressingDelay() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilColumnState_DelayedNMinApplicationParams) SetTopDressingDelay(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

// SoilColumnState_DelayedNMinApplicationParams_List is a list of SoilColumnState_DelayedNMinApplicationParams.
type SoilColumnState_DelayedNMinApplicationParams_List = capnp.StructList[SoilColumnState_DelayedNMinApplicationParams]

// NewSoilColumnState_DelayedNMinApplicationParams creates a new list of SoilColumnState_DelayedNMinApplicationParams.
func NewSoilColumnState_DelayedNMinApplicationParams_List(s *capnp.Segment, sz int32) (SoilColumnState_DelayedNMinApplicationParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 1}, sz)
	return capnp.StructList[SoilColumnState_DelayedNMinApplicationParams](l), err
}

// SoilColumnState_DelayedNMinApplicationParams_Future is a wrapper for a SoilColumnState_DelayedNMinApplicationParams promised by a client call.
type SoilColumnState_DelayedNMinApplicationParams_Future struct{ *capnp.Future }

func (f SoilColumnState_DelayedNMinApplicationParams_Future) Struct() (SoilColumnState_DelayedNMinApplicationParams, error) {
	p, err := f.Future.Ptr()
	return SoilColumnState_DelayedNMinApplicationParams(p.Struct()), err
}
func (p SoilColumnState_DelayedNMinApplicationParams_Future) Fp() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilLayerState capnp.Struct

// SoilLayerState_TypeID is the unique identifier for the type SoilLayerState.
const SoilLayerState_TypeID = 0xdd1e0c7c94dc4211

func NewSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func NewRootSoilLayerState(s *capnp.Segment) (SoilLayerState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2})
	return SoilLayerState(st), err
}

func ReadRootSoilLayerState(msg *capnp.Message) (SoilLayerState, error) {
	root, err := msg.Root()
	return SoilLayerState(root.Struct()), err
}

func (s SoilLayerState) String() string {
	str, _ := text.Marshal(0xdd1e0c7c94dc4211, capnp.Struct(s))
	return str
}

func (s SoilLayerState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilLayerState) DecodeFromPtr(p capnp.Ptr) SoilLayerState {
	return SoilLayerState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilLayerState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilLayerState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilLayerState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilLayerState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilLayerState) LayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fb999999999999a)
}

func (s SoilLayerState) SetLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fb999999999999a)
}

func (s SoilLayerState) SoilWaterFlux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilLayerState) SetSoilWaterFlux(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilLayerState) VoAOMPool() (AOMProperties_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return AOMProperties_List(p.List()), err
}

func (s SoilLayerState) HasVoAOMPool() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilLayerState) SetVoAOMPool(v AOMProperties_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVoAOMPool sets the voAOMPool field to a newly
// allocated AOMProperties_List, preferring placement in s's segment.
func (s SoilLayerState) NewVoAOMPool(n int32) (AOMProperties_List, error) {
	l, err := NewAOMProperties_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return AOMProperties_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s SoilLayerState) SomSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilLayerState) SetSomSlow(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilLayerState) SomFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilLayerState) SetSomFast(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilLayerState) SmbSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilLayerState) SetSmbSlow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilLayerState) SmbFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilLayerState) SetSmbFast(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilLayerState) SoilCarbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilLayerState) SetSoilCarbamid(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilLayerState) SoilNH4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNH4(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilNO2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64) ^ 0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SetSoilNO2(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v)^0x3f50624dd2f1a9fc)
}

func (s SoilLayerState) SoilNO3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72) ^ 0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SetSoilNO3(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v)^0x3f1a36e2eb1c432d)
}

func (s SoilLayerState) SoilFrozen() bool {
	return capnp.Struct(s).Bit(640)
}

func (s SoilLayerState) SetSoilFrozen(v bool) {
	capnp.Struct(s).SetBit(640, v)
}

func (s SoilLayerState) Sps() (SoilParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilParameters(p.Struct()), err
}

func (s SoilLayerState) HasSps() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilLayerState) SetSps(v SoilParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSps sets the sps field to a newly
// allocated SoilParameters struct, preferring placement in s's segment.
func (s SoilLayerState) NewSps() (SoilParameters, error) {
	ss, err := NewSoilParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilLayerState) SoilMoistureM3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88) ^ 0x3fd0000000000000)
}

func (s SoilLayerState) SetSoilMoistureM3(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v)^0x3fd0000000000000)
}

func (s SoilLayerState) SoilTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilLayerState) SetSoilTemperature(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// SoilLayerState_List is a list of SoilLayerState.
type SoilLayerState_List = capnp.StructList[SoilLayerState]

// NewSoilLayerState creates a new list of SoilLayerState.
func NewSoilLayerState_List(s *capnp.Segment, sz int32) (SoilLayerState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 2}, sz)
	return capnp.StructList[SoilLayerState](l), err
}

// SoilLayerState_Future is a wrapper for a SoilLayerState promised by a client call.
type SoilLayerState_Future struct{ *capnp.Future }

func (f SoilLayerState_Future) Struct() (SoilLayerState, error) {
	p, err := f.Future.Ptr()
	return SoilLayerState(p.Struct()), err
}
func (p SoilLayerState_Future) Sps() SoilParameters_Future {
	return SoilParameters_Future{Future: p.Future.Field(1, nil)}
}

type MonicaModelState capnp.Struct

// MonicaModelState_TypeID is the unique identifier for the type MonicaModelState.
const MonicaModelState_TypeID = 0xab56969492d293b3

func NewMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func NewRootMonicaModelState(s *capnp.Segment) (MonicaModelState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15})
	return MonicaModelState(st), err
}

func ReadRootMonicaModelState(msg *capnp.Message) (MonicaModelState, error) {
	root, err := msg.Root()
	return MonicaModelState(root.Struct()), err
}

func (s MonicaModelState) String() string {
	str, _ := text.Marshal(0xab56969492d293b3, capnp.Struct(s))
	return str
}

func (s MonicaModelState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState) DecodeFromPtr(p capnp.Ptr) MonicaModelState {
	return MonicaModelState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState) SitePs() (SiteParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SiteParameters(p.Struct()), err
}

func (s MonicaModelState) HasSitePs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MonicaModelState) SetSitePs(v SiteParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSitePs sets the sitePs field to a newly
// allocated SiteParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSitePs() (SiteParameters, error) {
	ss, err := NewSiteParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SiteParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) EnvPs() (EnvironmentParameters, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return EnvironmentParameters(p.Struct()), err
}

func (s MonicaModelState) HasEnvPs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MonicaModelState) SetEnvPs(v EnvironmentParameters) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEnvPs sets the envPs field to a newly
// allocated EnvironmentParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewEnvPs() (EnvironmentParameters, error) {
	ss, err := NewEnvironmentParameters(capnp.Struct(s).Segment())
	if err != nil {
		return EnvironmentParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CropPs() (CropModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return CropModuleParameters(p.Struct()), err
}

func (s MonicaModelState) HasCropPs() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s MonicaModelState) SetCropPs(v CropModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewCropPs sets the cropPs field to a newly
// allocated CropModuleParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewCropPs() (CropModuleParameters, error) {
	ss, err := NewCropModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SimPs() (SimulationParameters, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return SimulationParameters(p.Struct()), err
}

func (s MonicaModelState) HasSimPs() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s MonicaModelState) SetSimPs(v SimulationParameters) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewSimPs sets the simPs field to a newly
// allocated SimulationParameters struct, preferring placement in s's segment.
func (s MonicaModelState) NewSimPs() (SimulationParameters, error) {
	ss, err := NewSimulationParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SimulationParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) GroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return MeasuredGroundwaterTableInformation(p.Struct()), err
}

func (s MonicaModelState) HasGroundwaterInformation() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s MonicaModelState) SetGroundwaterInformation(v MeasuredGroundwaterTableInformation) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewGroundwaterInformation sets the groundwaterInformation field to a newly
// allocated MeasuredGroundwaterTableInformation struct, preferring placement in s's segment.
func (s MonicaModelState) NewGroundwaterInformation() (MeasuredGroundwaterTableInformation, error) {
	ss, err := NewMeasuredGroundwaterTableInformation(capnp.Struct(s).Segment())
	if err != nil {
		return MeasuredGroundwaterTableInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilColumn() (SoilColumnState, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return SoilColumnState(p.Struct()), err
}

func (s MonicaModelState) HasSoilColumn() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s MonicaModelState) SetSoilColumn(v SoilColumnState) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewSoilColumn sets the soilColumn field to a newly
// allocated SoilColumnState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilColumn() (SoilColumnState, error) {
	ss, err := NewSoilColumnState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilColumnState{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTemperature() (SoilTemperatureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return SoilTemperatureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s MonicaModelState) SetSoilTemperature(v SoilTemperatureModuleState) error {
	return capnp.Struct(s).SetPtr(6, capnp.Struct(v).ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated SoilTemperatureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTemperature() (SoilTemperatureModuleState, error) {
	ss, err := NewSoilTemperatureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(6, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilMoisture() (SoilMoistureModuleState, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return SoilMoistureModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s MonicaModelState) SetSoilMoisture(v SoilMoistureModuleState) error {
	return capnp.Struct(s).SetPtr(7, capnp.Struct(v).ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated SoilMoistureModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilMoisture() (SoilMoistureModuleState, error) {
	ss, err := NewSoilMoistureModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(7, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilOrganic() (SoilOrganicModuleState, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return SoilOrganicModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilOrganic() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s MonicaModelState) SetSoilOrganic(v SoilOrganicModuleState) error {
	return capnp.Struct(s).SetPtr(8, capnp.Struct(v).ToPtr())
}

// NewSoilOrganic sets the soilOrganic field to a newly
// allocated SoilOrganicModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilOrganic() (SoilOrganicModuleState, error) {
	ss, err := NewSoilOrganicModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(8, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SoilTransport() (SoilTransportModuleState, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return SoilTransportModuleState(p.Struct()), err
}

func (s MonicaModelState) HasSoilTransport() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s MonicaModelState) SetSoilTransport(v SoilTransportModuleState) error {
	return capnp.Struct(s).SetPtr(9, capnp.Struct(v).ToPtr())
}

// NewSoilTransport sets the soilTransport field to a newly
// allocated SoilTransportModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewSoilTransport() (SoilTransportModuleState, error) {
	ss, err := NewSoilTransportModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(9, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) CurrentCropModule() (CropModuleState, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return CropModuleState(p.Struct()), err
}

func (s MonicaModelState) HasCurrentCropModule() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s MonicaModelState) SetCurrentCropModule(v CropModuleState) error {
	return capnp.Struct(s).SetPtr(10, capnp.Struct(v).ToPtr())
}

// NewCurrentCropModule sets the currentCropModule field to a newly
// allocated CropModuleState struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentCropModule() (CropModuleState, error) {
	ss, err := NewCropModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return CropModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(10, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) SumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s MonicaModelState) SetSumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s MonicaModelState) SumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s MonicaModelState) SetSumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s MonicaModelState) DailySumFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s MonicaModelState) SetDailySumFertiliser(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrgFertiliser() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s MonicaModelState) SetDailySumOrgFertiliser(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s MonicaModelState) DailySumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s MonicaModelState) SetDailySumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s MonicaModelState) SumOrganicFertilizerDM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s MonicaModelState) SetSumOrganicFertilizerDM(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s MonicaModelState) HumusBalanceCarryOver() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s MonicaModelState) SetHumusBalanceCarryOver(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s MonicaModelState) DailySumIrrigationWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s MonicaModelState) SetDailySumIrrigationWater(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonExportedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s MonicaModelState) SetOptCarbonExportedResidues(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s MonicaModelState) OptCarbonReturnedResidues() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s MonicaModelState) SetOptCarbonReturnedResidues(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s MonicaModelState) CurrentStepDate() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return common.Date(p.Struct()), err
}

func (s MonicaModelState) HasCurrentStepDate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s MonicaModelState) SetCurrentStepDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(11, capnp.Struct(v).ToPtr())
}

// NewCurrentStepDate sets the currentStepDate field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentStepDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(11, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s MonicaModelState) ClimateData() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.PointerList(p.List()), err
}

func (s MonicaModelState) HasClimateData() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s MonicaModelState) SetClimateData(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewClimateData sets the climateData field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s MonicaModelState) NewClimateData(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s MonicaModelState) CurrentEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasCurrentEvents() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s MonicaModelState) SetCurrentEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewCurrentEvents sets the currentEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewCurrentEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s MonicaModelState) PreviousDaysEvents() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.TextList(p.List()), err
}

func (s MonicaModelState) HasPreviousDaysEvents() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s MonicaModelState) SetPreviousDaysEvents(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPreviousDaysEvents sets the previousDaysEvents field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s MonicaModelState) NewPreviousDaysEvents(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s MonicaModelState) ClearCropUponNextDay() bool {
	return capnp.Struct(s).Bit(16)
}

func (s MonicaModelState) SetClearCropUponNextDay(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s MonicaModelState) DaysWithCrop() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s MonicaModelState) SetDaysWithCrop(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s MonicaModelState) AccuNStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s MonicaModelState) SetAccuNStress(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s MonicaModelState) AccuWaterStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s MonicaModelState) SetAccuWaterStress(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s MonicaModelState) AccuHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s MonicaModelState) SetAccuHeatStress(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s MonicaModelState) AccuOxygenStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s MonicaModelState) SetAccuOxygenStress(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericCO2Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s MonicaModelState) SetVwAtmosphericCO2Concentration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s MonicaModelState) VwAtmosphericO3Concentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s MonicaModelState) SetVwAtmosphericO3Concentration(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s MonicaModelState) VsGroundwaterDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState) SetVsGroundwaterDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s MonicaModelState) CultivationMethodCount() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState) SetCultivationMethodCount(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// MonicaModelState_List is a list of MonicaModelState.
type MonicaModelState_List = capnp.StructList[MonicaModelState]

// NewMonicaModelState creates a new list of MonicaModelState.
func NewMonicaModelState_List(s *capnp.Segment, sz int32) (MonicaModelState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 144, PointerCount: 15}, sz)
	return capnp.StructList[MonicaModelState](l), err
}

// MonicaModelState_Future is a wrapper for a MonicaModelState promised by a client call.
type MonicaModelState_Future struct{ *capnp.Future }

func (f MonicaModelState_Future) Struct() (MonicaModelState, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState(p.Struct()), err
}
func (p MonicaModelState_Future) SitePs() SiteParameters_Future {
	return SiteParameters_Future{Future: p.Future.Field(0, nil)}
}
func (p MonicaModelState_Future) EnvPs() EnvironmentParameters_Future {
	return EnvironmentParameters_Future{Future: p.Future.Field(1, nil)}
}
func (p MonicaModelState_Future) CropPs() CropModuleParameters_Future {
	return CropModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p MonicaModelState_Future) SimPs() SimulationParameters_Future {
	return SimulationParameters_Future{Future: p.Future.Field(3, nil)}
}
func (p MonicaModelState_Future) GroundwaterInformation() MeasuredGroundwaterTableInformation_Future {
	return MeasuredGroundwaterTableInformation_Future{Future: p.Future.Field(4, nil)}
}
func (p MonicaModelState_Future) SoilColumn() SoilColumnState_Future {
	return SoilColumnState_Future{Future: p.Future.Field(5, nil)}
}
func (p MonicaModelState_Future) SoilTemperature() SoilTemperatureModuleState_Future {
	return SoilTemperatureModuleState_Future{Future: p.Future.Field(6, nil)}
}
func (p MonicaModelState_Future) SoilMoisture() SoilMoistureModuleState_Future {
	return SoilMoistureModuleState_Future{Future: p.Future.Field(7, nil)}
}
func (p MonicaModelState_Future) SoilOrganic() SoilOrganicModuleState_Future {
	return SoilOrganicModuleState_Future{Future: p.Future.Field(8, nil)}
}
func (p MonicaModelState_Future) SoilTransport() SoilTransportModuleState_Future {
	return SoilTransportModuleState_Future{Future: p.Future.Field(9, nil)}
}
func (p MonicaModelState_Future) CurrentCropModule() CropModuleState_Future {
	return CropModuleState_Future{Future: p.Future.Field(10, nil)}
}
func (p MonicaModelState_Future) CurrentStepDate() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(11, nil)}
}

type MonicaModelState_ACDToValue capnp.Struct

// MonicaModelState_ACDToValue_TypeID is the unique identifier for the type MonicaModelState_ACDToValue.
const MonicaModelState_ACDToValue_TypeID = 0x98e203c76f83d365

func NewMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func NewRootMonicaModelState_ACDToValue(s *capnp.Segment) (MonicaModelState_ACDToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return MonicaModelState_ACDToValue(st), err
}

func ReadRootMonicaModelState_ACDToValue(msg *capnp.Message) (MonicaModelState_ACDToValue, error) {
	root, err := msg.Root()
	return MonicaModelState_ACDToValue(root.Struct()), err
}

func (s MonicaModelState_ACDToValue) String() string {
	str, _ := text.Marshal(0x98e203c76f83d365, capnp.Struct(s))
	return str
}

func (s MonicaModelState_ACDToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MonicaModelState_ACDToValue) DecodeFromPtr(p capnp.Ptr) MonicaModelState_ACDToValue {
	return MonicaModelState_ACDToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MonicaModelState_ACDToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MonicaModelState_ACDToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MonicaModelState_ACDToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MonicaModelState_ACDToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MonicaModelState_ACDToValue) Acd() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s MonicaModelState_ACDToValue) SetAcd(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s MonicaModelState_ACDToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s MonicaModelState_ACDToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// MonicaModelState_ACDToValue_List is a list of MonicaModelState_ACDToValue.
type MonicaModelState_ACDToValue_List = capnp.StructList[MonicaModelState_ACDToValue]

// NewMonicaModelState_ACDToValue creates a new list of MonicaModelState_ACDToValue.
func NewMonicaModelState_ACDToValue_List(s *capnp.Segment, sz int32) (MonicaModelState_ACDToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[MonicaModelState_ACDToValue](l), err
}

// MonicaModelState_ACDToValue_Future is a wrapper for a MonicaModelState_ACDToValue promised by a client call.
type MonicaModelState_ACDToValue_Future struct{ *capnp.Future }

func (f MonicaModelState_ACDToValue_Future) Struct() (MonicaModelState_ACDToValue, error) {
	p, err := f.Future.Ptr()
	return MonicaModelState_ACDToValue(p.Struct()), err
}

type CropModuleState capnp.Struct

// CropModuleState_TypeID is the unique identifier for the type CropModuleState.
const CropModuleState_TypeID = 0x811d54ac7debc21e

func NewCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func NewRootCropModuleState(s *capnp.Segment) (CropModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50})
	return CropModuleState(st), err
}

func ReadRootCropModuleState(msg *capnp.Message) (CropModuleState, error) {
	root, err := msg.Root()
	return CropModuleState(root.Struct()), err
}

func (s CropModuleState) String() string {
	str, _ := text.Marshal(0x811d54ac7debc21e, capnp.Struct(s))
	return str
}

func (s CropModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CropModuleState) DecodeFromPtr(p capnp.Ptr) CropModuleState {
	return CropModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CropModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CropModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CropModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CropModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CropModuleState) FrostKillOn() bool {
	return capnp.Struct(s).Bit(0)
}

func (s CropModuleState) SetFrostKillOn(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s CropModuleState) SpeciesParams() (SpeciesParameters, error) {
	p, err := capnp.Struct(s).Ptr(47)
	return SpeciesParameters(p.Struct()), err
}

func (s CropModuleState) HasSpeciesParams() bool {
	return capnp.Struct(s).HasPtr(47)
}

func (s CropModuleState) SetSpeciesParams(v SpeciesParameters) error {
	return capnp.Struct(s).SetPtr(47, capnp.Struct(v).ToPtr())
}

// NewSpeciesParams sets the speciesParams field to a newly
// allocated SpeciesParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewSpeciesParams() (SpeciesParameters, error) {
	ss, err := NewSpeciesParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SpeciesParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(47, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CultivarParams() (CultivarParameters, error) {
	p, err := capnp.Struct(s).Ptr(48)
	return CultivarParameters(p.Struct()), err
}

func (s CropModuleState) HasCultivarParams() bool {
	return capnp.Struct(s).HasPtr(48)
}

func (s CropModuleState) SetCultivarParams(v CultivarParameters) error {
	return capnp.Struct(s).SetPtr(48, capnp.Struct(v).ToPtr())
}

// NewCultivarParams sets the cultivarParams field to a newly
// allocated CultivarParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewCultivarParams() (CultivarParameters, error) {
	ss, err := NewCultivarParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CultivarParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(48, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) ResidueParams() (CropResidueParameters, error) {
	p, err := capnp.Struct(s).Ptr(49)
	return CropResidueParameters(p.Struct()), err
}

func (s CropModuleState) HasResidueParams() bool {
	return capnp.Struct(s).HasPtr(49)
}

func (s CropModuleState) SetResidueParams(v CropResidueParameters) error {
	return capnp.Struct(s).SetPtr(49, capnp.Struct(v).ToPtr())
}

// NewResidueParams sets the residueParams field to a newly
// allocated CropResidueParameters struct, preferring placement in s's segment.
func (s CropModuleState) NewResidueParams() (CropResidueParameters, error) {
	ss, err := NewCropResidueParameters(capnp.Struct(s).Segment())
	if err != nil {
		return CropResidueParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(49, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) IsWinterCrop() bool {
	return capnp.Struct(s).Bit(7285)
}

func (s CropModuleState) SetIsWinterCrop(v bool) {
	capnp.Struct(s).SetBit(7285, v)
}

func (s CropModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s CropModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s CropModuleState) SetAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s CropModuleState) AbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s CropModuleState) SetAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s CropModuleState) PcAbovegroundOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcAbovegroundOrgan() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CropModuleState) SetPcAbovegroundOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPcAbovegroundOrgan sets the pcAbovegroundOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcAbovegroundOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s CropModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s CropModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s CropModuleState) PcAssimilatePartitioningCoeff() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcAssimilatePartitioningCoeff() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s CropModuleState) SetPcAssimilatePartitioningCoeff(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewPcAssimilatePartitioningCoeff sets the pcAssimilatePartitioningCoeff field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcAssimilatePartitioningCoeff(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcAssimilateReallocation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s CropModuleState) SetPcAssimilateReallocation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s CropModuleState) Assimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s CropModuleState) SetAssimilates(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s CropModuleState) AssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s CropModuleState) SetAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s CropModuleState) AstronomicDayLenght() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s CropModuleState) SetAstronomicDayLenght(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s CropModuleState) PcBaseDaylength() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseDaylength() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s CropModuleState) SetPcBaseDaylength(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewPcBaseDaylength sets the pcBaseDaylength field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseDaylength(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBaseTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcBaseTemperature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s CropModuleState) SetPcBaseTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewPcBaseTemperature sets the pcBaseTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcBaseTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcBeginSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s CropModuleState) SetPcBeginSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s CropModuleState) SetBelowgroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s CropModuleState) BelowgroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s CropModuleState) SetBelowgroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s CropModuleState) PcCarboxylationPathway() int64 {
	return int64(capnp.Struct(s).Uint64(128))
}

func (s CropModuleState) SetPcCarboxylationPathway(v int64) {
	capnp.Struct(s).SetUint64(128, uint64(v))
}

func (s CropModuleState) ClearDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s CropModuleState) SetClearDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s CropModuleState) PcCo2Method() uint8 {
	return capnp.Struct(s).Uint8(1) ^ 3
}

func (s CropModuleState) SetPcCo2Method(v uint8) {
	capnp.Struct(s).SetUint8(1, v^3)
}

func (s CropModuleState) CriticalNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s CropModuleState) SetCriticalNConcentration(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s CropModuleState) PcCriticalOxygenContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcCriticalOxygenContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s CropModuleState) SetPcCriticalOxygenContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewPcCriticalOxygenContent sets the pcCriticalOxygenContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcCriticalOxygenContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcCriticalTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s CropModuleState) SetPcCriticalTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s CropModuleState) CropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s CropModuleState) SetCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s CropModuleState) CropFrostRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropFrostRedux(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeatRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropHeatRedux(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) CropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s CropModuleState) SetCropHeight(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s CropModuleState) SetPcCropHeightP1(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s CropModuleState) PcCropHeightP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s CropModuleState) SetPcCropHeightP2(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s CropModuleState) PcCropName() (string, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.Text(), err
}

func (s CropModuleState) HasPcCropName() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s CropModuleState) PcCropNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return p.TextBytes(), err
}

func (s CropModuleState) SetPcCropName(v string) error {
	return capnp.Struct(s).SetText(5, v)
}

func (s CropModuleState) CropNDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s CropModuleState) SetCropNDemand(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s CropModuleState) CropNRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetCropNRedux(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcCropSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224))
}

func (s CropModuleState) SetPcCropSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v))
}

func (s CropModuleState) CropWaterUptake() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCropWaterUptake() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s CropModuleState) SetCropWaterUptake(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCropWaterUptake sets the cropWaterUptake field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCropWaterUptake(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasCurrentTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s CropModuleState) SetCurrentTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewCurrentTemperatureSum sets the currentTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewCurrentTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s CropModuleState) CurrentTotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s CropModuleState) SetCurrentTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s CropModuleState) CurrentTotalTemperatureSumRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s CropModuleState) SetCurrentTotalTemperatureSumRoot(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s CropModuleState) PcCuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s CropModuleState) SetPcCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s CropModuleState) DaylengthFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s CropModuleState) SetDaylengthFactor(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s CropModuleState) PcDaylengthRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDaylengthRequirement() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s CropModuleState) SetPcDaylengthRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewPcDaylengthRequirement sets the pcDaylengthRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDaylengthRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s CropModuleState) DaysAfterBeginFlowering() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s CropModuleState) SetDaysAfterBeginFlowering(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s CropModuleState) Declination() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s CropModuleState) SetDeclination(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s CropModuleState) PcDefaultRadiationUseEfficiency() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s CropModuleState) SetPcDefaultRadiationUseEfficiency(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s CropModuleState) VmDepthGroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(6)
}

func (s CropModuleState) SetVmDepthGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(6, v)
}

func (s CropModuleState) PcDevelopmentAccelerationByNitrogenStress() uint64 {
	return capnp.Struct(s).Uint64(272)
}

func (s CropModuleState) SetPcDevelopmentAccelerationByNitrogenStress(v uint64) {
	capnp.Struct(s).SetUint64(272, v)
}

func (s CropModuleState) DevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(280)
}

func (s CropModuleState) SetDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(280, v)
}

func (s CropModuleState) NoOfCropSteps() uint16 {
	return capnp.Struct(s).Uint16(282)
}

func (s CropModuleState) SetNoOfCropSteps(v uint16) {
	capnp.Struct(s).SetUint16(282, v)
}

func (s CropModuleState) DroughtImpactOnFertility() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetDroughtImpactOnFertility(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) PcDroughtImpactOnFertilityFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s CropModuleState) SetPcDroughtImpactOnFertilityFactor(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s CropModuleState) PcDroughtStressThreshold() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcDroughtStressThreshold() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s CropModuleState) SetPcDroughtStressThreshold(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewPcDroughtStressThreshold sets the pcDroughtStressThreshold field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcDroughtStressThreshold(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcEmergenceFloodingControlOn() bool {
	return capnp.Struct(s).Bit(2)
}

func (s CropModuleState) SetPcEmergenceFloodingControlOn(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

func (s CropModuleState) PcEmergenceMoistureControlOn() bool {
	return capnp.Struct(s).Bit(3)
}

func (s CropModuleState) SetPcEmergenceMoistureControlOn(v bool) {
	capnp.Struct(s).SetBit(3, v)
}

func (s CropModuleState) PcEndSensitivePhaseHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s CropModuleState) SetPcEndSensitivePhaseHeatStress(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s CropModuleState) EffectiveDayLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s CropModuleState) SetEffectiveDayLength(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s CropModuleState) ErrorStatus() bool {
	return capnp.Struct(s).Bit(4)
}

func (s CropModuleState) SetErrorStatus(v bool) {
	capnp.Struct(s).SetBit(4, v)
}

func (s CropModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.Text(), err
}

func (s CropModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s CropModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return p.TextBytes(), err
}

func (s CropModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(10, v)
}

func (s CropModuleState) EvaporatedFromIntercept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(320))
}

func (s CropModuleState) SetEvaporatedFromIntercept(v float64) {
	capnp.Struct(s).SetUint64(320, math.Float64bits(v))
}

func (s CropModuleState) ExtraterrestrialRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(328))
}

func (s CropModuleState) SetExtraterrestrialRadiation(v float64) {
	capnp.Struct(s).SetUint64(328, math.Float64bits(v))
}

func (s CropModuleState) PcFieldConditionModifier() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(336))
}

func (s CropModuleState) SetPcFieldConditionModifier(v float64) {
	capnp.Struct(s).SetUint64(336, math.Float64bits(v))
}

func (s CropModuleState) FinalDevelopmentalStage() uint16 {
	return capnp.Struct(s).Uint16(284)
}

func (s CropModuleState) SetFinalDevelopmentalStage(v uint16) {
	capnp.Struct(s).SetUint16(284, v)
}

func (s CropModuleState) FixedN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(344))
}

func (s CropModuleState) SetFixedN(v float64) {
	capnp.Struct(s).SetUint64(344, math.Float64bits(v))
}

func (s CropModuleState) PcFrostDehardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(352))
}

func (s CropModuleState) SetPcFrostDehardening(v float64) {
	capnp.Struct(s).SetUint64(352, math.Float64bits(v))
}

func (s CropModuleState) PcFrostHardening() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(360))
}

func (s CropModuleState) SetPcFrostHardening(v float64) {
	capnp.Struct(s).SetUint64(360, math.Float64bits(v))
}

func (s CropModuleState) GlobalRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(368))
}

func (s CropModuleState) SetGlobalRadiation(v float64) {
	capnp.Struct(s).SetUint64(368, math.Float64bits(v))
}

func (s CropModuleState) GreenAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(376))
}

func (s CropModuleState) SetGreenAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(376, math.Float64bits(v))
}

func (s CropModuleState) GrossAssimilates() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(384))
}

func (s CropModuleState) SetGrossAssimilates(v float64) {
	capnp.Struct(s).SetUint64(384, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(392))
}

func (s CropModuleState) SetGrossPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(392, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(400))
}

func (s CropModuleState) SetGrossPhotosynthesisMol(v float64) {
	capnp.Struct(s).SetUint64(400, math.Float64bits(v))
}

func (s CropModuleState) GrossPhotosynthesisReferenceMol() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(408))
}

func (s CropModuleState) SetGrossPhotosynthesisReferenceMol(v float64) {
	capnp.Struct(s).SetUint64(408, math.Float64bits(v))
}

func (s CropModuleState) GrossPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(416))
}

func (s CropModuleState) SetGrossPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(416, math.Float64bits(v))
}

func (s CropModuleState) GrowthCycleEnded() bool {
	return capnp.Struct(s).Bit(5)
}

func (s CropModuleState) SetGrowthCycleEnded(v bool) {
	capnp.Struct(s).SetBit(5, v)
}

func (s CropModuleState) GrowthRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(424))
}

func (s CropModuleState) SetGrowthRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(424, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationStart() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(432))
}

func (s CropModuleState) SetPcHeatSumIrrigationStart(v float64) {
	capnp.Struct(s).SetUint64(432, math.Float64bits(v))
}

func (s CropModuleState) PcHeatSumIrrigationEnd() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(440))
}

func (s CropModuleState) SetPcHeatSumIrrigationEnd(v float64) {
	capnp.Struct(s).SetUint64(440, math.Float64bits(v))
}

func (s CropModuleState) VsHeightNN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(448))
}

func (s CropModuleState) SetVsHeightNN(v float64) {
	capnp.Struct(s).SetUint64(448, math.Float64bits(v))
}

func (s CropModuleState) PcInitialKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(456))
}

func (s CropModuleState) SetPcInitialKcFactor(v float64) {
	capnp.Struct(s).SetUint64(456, math.Float64bits(v))
}

func (s CropModuleState) PcInitialOrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcInitialOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s CropModuleState) SetPcInitialOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPcInitialOrganBiomass sets the pcInitialOrganBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcInitialOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcInitialRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(464))
}

func (s CropModuleState) SetPcInitialRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(464, math.Float64bits(v))
}

func (s CropModuleState) InterceptionStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(472))
}

func (s CropModuleState) SetInterceptionStorage(v float64) {
	capnp.Struct(s).SetUint64(472, math.Float64bits(v))
}

func (s CropModuleState) KcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(480) ^ 0x3fe3333333333333)
}

func (s CropModuleState) SetKcFactor(v float64) {
	capnp.Struct(s).SetUint64(480, math.Float64bits(v)^0x3fe3333333333333)
}

func (s CropModuleState) LeafAreaIndex() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(488))
}

func (s CropModuleState) SetLeafAreaIndex(v float64) {
	capnp.Struct(s).SetUint64(488, math.Float64bits(v))
}

func (s CropModuleState) SunlitLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasSunlitLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s CropModuleState) SetSunlitLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewSunlitLeafAreaIndex sets the sunlitLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewSunlitLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s CropModuleState) ShadedLeafAreaIndex() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasShadedLeafAreaIndex() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s CropModuleState) SetShadedLeafAreaIndex(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewShadedLeafAreaIndex sets the shadedLeafAreaIndex field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewShadedLeafAreaIndex(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcLowTemperatureExposure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(496))
}

func (s CropModuleState) SetPcLowTemperatureExposure(v float64) {
	capnp.Struct(s).SetUint64(496, math.Float64bits(v))
}

func (s CropModuleState) PcLimitingTemperatureHeatStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(504))
}

func (s CropModuleState) SetPcLimitingTemperatureHeatStress(v float64) {
	capnp.Struct(s).SetUint64(504, math.Float64bits(v))
}

func (s CropModuleState) Lt50() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(512) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50(v float64) {
	capnp.Struct(s).SetUint64(512, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) Lt50m() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1240) ^ 0xc008000000000000)
}

func (s CropModuleState) SetLt50m(v float64) {
	capnp.Struct(s).SetUint64(1240, math.Float64bits(v)^0xc008000000000000)
}

func (s CropModuleState) PcLt50cultivar() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(520))
}

func (s CropModuleState) SetPcLt50cultivar(v float64) {
	capnp.Struct(s).SetUint64(520, math.Float64bits(v))
}

func (s CropModuleState) PcLuxuryNCoeff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(528))
}

func (s CropModuleState) SetPcLuxuryNCoeff(v float64) {
	capnp.Struct(s).SetUint64(528, math.Float64bits(v))
}

func (s CropModuleState) MaintenanceRespirationAS() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(536))
}

func (s CropModuleState) SetMaintenanceRespirationAS(v float64) {
	capnp.Struct(s).SetUint64(536, math.Float64bits(v))
}

func (s CropModuleState) PcMaxAssimilationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(544))
}

func (s CropModuleState) SetPcMaxAssimilationRate(v float64) {
	capnp.Struct(s).SetUint64(544, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(552))
}

func (s CropModuleState) SetPcMaxCropDiameter(v float64) {
	capnp.Struct(s).SetUint64(552, math.Float64bits(v))
}

func (s CropModuleState) PcMaxCropHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(560))
}

func (s CropModuleState) SetPcMaxCropHeight(v float64) {
	capnp.Struct(s).SetUint64(560, math.Float64bits(v))
}

func (s CropModuleState) MaxNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(568))
}

func (s CropModuleState) SetMaxNUptake(v float64) {
	capnp.Struct(s).SetUint64(568, math.Float64bits(v))
}

func (s CropModuleState) PcMaxNUptakeParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(576))
}

func (s CropModuleState) SetPcMaxNUptakeParam(v float64) {
	capnp.Struct(s).SetUint64(576, math.Float64bits(v))
}

func (s CropModuleState) PcMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(584))
}

func (s CropModuleState) SetPcMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(584, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(592))
}

func (s CropModuleState) SetPcMinimumNConcentration(v float64) {
	capnp.Struct(s).SetUint64(592, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(600))
}

func (s CropModuleState) SetPcMinimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(600, math.Float64bits(v))
}

func (s CropModuleState) PcOptimumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(608))
}

func (s CropModuleState) SetPcOptimumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(608, math.Float64bits(v))
}

func (s CropModuleState) PcMaximumTemperatureForAssimilation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(616))
}

func (s CropModuleState) SetPcMaximumTemperatureForAssimilation(v float64) {
	capnp.Struct(s).SetUint64(616, math.Float64bits(v))
}

func (s CropModuleState) PcMinimumTemperatureRootGrowth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(624))
}

func (s CropModuleState) SetPcMinimumTemperatureRootGrowth(v float64) {
	capnp.Struct(s).SetUint64(624, math.Float64bits(v))
}

func (s CropModuleState) NetMaintenanceRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(632))
}

func (s CropModuleState) SetNetMaintenanceRespiration(v float64) {
	capnp.Struct(s).SetUint64(632, math.Float64bits(v))
}

func (s CropModuleState) NetPhotosynthesis() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(640))
}

func (s CropModuleState) SetNetPhotosynthesis(v float64) {
	capnp.Struct(s).SetUint64(640, math.Float64bits(v))
}

func (s CropModuleState) NetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(648))
}

func (s CropModuleState) SetNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(648, math.Float64bits(v))
}

func (s CropModuleState) NetPrimaryProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(656))
}

func (s CropModuleState) SetNetPrimaryProduction(v float64) {
	capnp.Struct(s).SetUint64(656, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(664))
}

func (s CropModuleState) SetPcNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(664, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(672))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomass(v float64) {
	capnp.Struct(s).SetUint64(672, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationAbovegroundBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(680))
}

func (s CropModuleState) SetNConcentrationAbovegroundBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(680, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationB0() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(688))
}

func (s CropModuleState) SetPcNConcentrationB0(v float64) {
	capnp.Struct(s).SetUint64(688, math.Float64bits(v))
}

func (s CropModuleState) NContentDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(696))
}

func (s CropModuleState) SetNContentDeficit(v float64) {
	capnp.Struct(s).SetUint64(696, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationPN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(704))
}

func (s CropModuleState) SetPcNConcentrationPN(v float64) {
	capnp.Struct(s).SetUint64(704, math.Float64bits(v))
}

func (s CropModuleState) PcNConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(712))
}

func (s CropModuleState) SetPcNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(712, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRoot() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(720))
}

func (s CropModuleState) SetNConcentrationRoot(v float64) {
	capnp.Struct(s).SetUint64(720, math.Float64bits(v))
}

func (s CropModuleState) NConcentrationRootOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(728))
}

func (s CropModuleState) SetNConcentrationRootOld(v float64) {
	capnp.Struct(s).SetUint64(728, math.Float64bits(v))
}

func (s CropModuleState) PcNitrogenResponseOn() bool {
	return capnp.Struct(s).Bit(6)
}

func (s CropModuleState) SetPcNitrogenResponseOn(v bool) {
	capnp.Struct(s).SetBit(6, v)
}

func (s CropModuleState) PcNumberOfDevelopmentalStages() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(736))
}

func (s CropModuleState) SetPcNumberOfDevelopmentalStages(v float64) {
	capnp.Struct(s).SetUint64(736, math.Float64bits(v))
}

func (s CropModuleState) PcNumberOfOrgans() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(744))
}

func (s CropModuleState) SetPcNumberOfOrgans(v float64) {
	capnp.Struct(s).SetUint64(744, math.Float64bits(v))
}

func (s CropModuleState) NUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s CropModuleState) SetNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewNUptakeFromLayer sets the nUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOptimumTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOptimumTemperature() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s CropModuleState) SetPcOptimumTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPcOptimumTemperature sets the pcOptimumTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOptimumTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganBiomass() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s CropModuleState) SetOrganBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewOrganBiomass sets the organBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganDeadBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganDeadBiomass() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s CropModuleState) SetOrganDeadBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewOrganDeadBiomass sets the organDeadBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganDeadBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGreenBiomass() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGreenBiomass() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s CropModuleState) SetOrganGreenBiomass(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewOrganGreenBiomass sets the organGreenBiomass field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGreenBiomass(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganGrowthIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganGrowthIncrement() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s CropModuleState) SetOrganGrowthIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewOrganGrowthIncrement sets the organGrowthIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganGrowthIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganGrowthRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganGrowthRespiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s CropModuleState) SetPcOrganGrowthRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewPcOrganGrowthRespiration sets the pcOrganGrowthRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganGrowthRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForPrimaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForPrimaryYield() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s CropModuleState) SetPcOrganIdsForPrimaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewPcOrganIdsForPrimaryYield sets the pcOrganIdsForPrimaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForPrimaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForSecondaryYield() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(22)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForSecondaryYield() bool {
	return capnp.Struct(s).HasPtr(22)
}

func (s CropModuleState) SetPcOrganIdsForSecondaryYield(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(22, v.ToPtr())
}

// NewPcOrganIdsForSecondaryYield sets the pcOrganIdsForSecondaryYield field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForSecondaryYield(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(22, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganIdsForCutting() (YieldComponent_List, error) {
	p, err := capnp.Struct(s).Ptr(23)
	return YieldComponent_List(p.List()), err
}

func (s CropModuleState) HasPcOrganIdsForCutting() bool {
	return capnp.Struct(s).HasPtr(23)
}

func (s CropModuleState) SetPcOrganIdsForCutting(v YieldComponent_List) error {
	return capnp.Struct(s).SetPtr(23, v.ToPtr())
}

// NewPcOrganIdsForCutting sets the pcOrganIdsForCutting field to a newly
// allocated YieldComponent_List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganIdsForCutting(n int32) (YieldComponent_List, error) {
	l, err := NewYieldComponent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return YieldComponent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(23, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganMaintenanceRespiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(24)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcOrganMaintenanceRespiration() bool {
	return capnp.Struct(s).HasPtr(24)
}

func (s CropModuleState) SetPcOrganMaintenanceRespiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(24, v.ToPtr())
}

// NewPcOrganMaintenanceRespiration sets the pcOrganMaintenanceRespiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganMaintenanceRespiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(24, l.ToPtr())
	return l, err
}
func (s CropModuleState) OrganSenescenceIncrement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(25)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasOrganSenescenceIncrement() bool {
	return capnp.Struct(s).HasPtr(25)
}

func (s CropModuleState) SetOrganSenescenceIncrement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(25, v.ToPtr())
}

// NewOrganSenescenceIncrement sets the organSenescenceIncrement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewOrganSenescenceIncrement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(25, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcOrganSenescenceRate() (capnp.PointerList, error) {
	p, err := capnp.Struct(s).Ptr(26)
	return capnp.PointerList(p.List()), err
}

func (s CropModuleState) HasPcOrganSenescenceRate() bool {
	return capnp.Struct(s).HasPtr(26)
}

func (s CropModuleState) SetPcOrganSenescenceRate(v capnp.PointerList) error {
	return capnp.Struct(s).SetPtr(26, v.ToPtr())
}

// NewPcOrganSenescenceRate sets the pcOrganSenescenceRate field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s CropModuleState) NewPcOrganSenescenceRate(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = capnp.Struct(s).SetPtr(26, l.ToPtr())
	return l, err
}
func (s CropModuleState) OvercastDayRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(752))
}

func (s CropModuleState) SetOvercastDayRadiation(v float64) {
	capnp.Struct(s).SetUint64(752, math.Float64bits(v))
}

func (s CropModuleState) OxygenDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(760))
}

func (s CropModuleState) SetOxygenDeficit(v float64) {
	capnp.Struct(s).SetUint64(760, math.Float64bits(v))
}

func (s CropModuleState) PcPartBiologicalNFixation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(768))
}

func (s CropModuleState) SetPcPartBiologicalNFixation(v float64) {
	capnp.Struct(s).SetUint64(768, math.Float64bits(v))
}

func (s CropModuleState) PcPerennial() bool {
	return capnp.Struct(s).Bit(7)
}

func (s CropModuleState) SetPcPerennial(v bool) {
	capnp.Struct(s).SetBit(7, v)
}

func (s CropModuleState) PhotoperiodicDaylength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(776))
}

func (s CropModuleState) SetPhotoperiodicDaylength(v float64) {
	capnp.Struct(s).SetUint64(776, math.Float64bits(v))
}

func (s CropModuleState) PhotActRadiationMean() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(784))
}

func (s CropModuleState) SetPhotActRadiationMean(v float64) {
	capnp.Struct(s).SetUint64(784, math.Float64bits(v))
}

func (s CropModuleState) PcPlantDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(792))
}

func (s CropModuleState) SetPcPlantDensity(v float64) {
	capnp.Struct(s).SetUint64(792, math.Float64bits(v))
}

func (s CropModuleState) PotentialTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(800))
}

func (s CropModuleState) SetPotentialTranspiration(v float64) {
	capnp.Struct(s).SetUint64(800, math.Float64bits(v))
}

func (s CropModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(808))
}

func (s CropModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(808, math.Float64bits(v))
}

func (s CropModuleState) RelativeTotalDevelopment() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(816))
}

func (s CropModuleState) SetRelativeTotalDevelopment(v float64) {
	capnp.Struct(s).SetUint64(816, math.Float64bits(v))
}

func (s CropModuleState) RemainingEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(824))
}

func (s CropModuleState) SetRemainingEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(824, math.Float64bits(v))
}

func (s CropModuleState) ReserveAssimilatePool() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(832))
}

func (s CropModuleState) SetReserveAssimilatePool(v float64) {
	capnp.Struct(s).SetUint64(832, math.Float64bits(v))
}

func (s CropModuleState) PcResidueNRatio() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(840))
}

func (s CropModuleState) SetPcResidueNRatio(v float64) {
	capnp.Struct(s).SetUint64(840, math.Float64bits(v))
}

func (s CropModuleState) PcRespiratoryStress() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(848))
}

func (s CropModuleState) SetPcRespiratoryStress(v float64) {
	capnp.Struct(s).SetUint64(848, math.Float64bits(v))
}

func (s CropModuleState) RootBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(856))
}

func (s CropModuleState) SetRootBiomass(v float64) {
	capnp.Struct(s).SetUint64(856, math.Float64bits(v))
}

func (s CropModuleState) RootBiomassOld() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(864))
}

func (s CropModuleState) SetRootBiomassOld(v float64) {
	capnp.Struct(s).SetUint64(864, math.Float64bits(v))
}

func (s CropModuleState) RootDensity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(27)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDensity() bool {
	return capnp.Struct(s).HasPtr(27)
}

func (s CropModuleState) SetRootDensity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(27, v.ToPtr())
}

// NewRootDensity sets the rootDensity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDensity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(27, l.ToPtr())
	return l, err
}
func (s CropModuleState) RootDiameter() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(28)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootDiameter() bool {
	return capnp.Struct(s).HasPtr(28)
}

func (s CropModuleState) SetRootDiameter(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(28, v.ToPtr())
}

// NewRootDiameter sets the rootDiameter field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootDiameter(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(28, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootDistributionParam() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(872))
}

func (s CropModuleState) SetPcRootDistributionParam(v float64) {
	capnp.Struct(s).SetUint64(872, math.Float64bits(v))
}

func (s CropModuleState) RootEffectivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(29)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRootEffectivity() bool {
	return capnp.Struct(s).HasPtr(29)
}

func (s CropModuleState) SetRootEffectivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(29, v.ToPtr())
}

// NewRootEffectivity sets the rootEffectivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRootEffectivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(29, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcRootFormFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(880))
}

func (s CropModuleState) SetPcRootFormFactor(v float64) {
	capnp.Struct(s).SetUint64(880, math.Float64bits(v))
}

func (s CropModuleState) PcRootGrowthLag() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(888))
}

func (s CropModuleState) SetPcRootGrowthLag(v float64) {
	capnp.Struct(s).SetUint64(888, math.Float64bits(v))
}

func (s CropModuleState) RootingDepth() uint16 {
	return capnp.Struct(s).Uint16(286)
}

func (s CropModuleState) SetRootingDepth(v uint16) {
	capnp.Struct(s).SetUint16(286, v)
}

func (s CropModuleState) RootingDepthM() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(896))
}

func (s CropModuleState) SetRootingDepthM(v float64) {
	capnp.Struct(s).SetUint64(896, math.Float64bits(v))
}

func (s CropModuleState) RootingZone() uint16 {
	return capnp.Struct(s).Uint16(904)
}

func (s CropModuleState) SetRootingZone(v uint16) {
	capnp.Struct(s).SetUint16(904, v)
}

func (s CropModuleState) PcRootPenetrationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(912))
}

func (s CropModuleState) SetPcRootPenetrationRate(v float64) {
	capnp.Struct(s).SetUint64(912, math.Float64bits(v))
}

func (s CropModuleState) VmSaturationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(920))
}

func (s CropModuleState) SetVmSaturationDeficit(v float64) {
	capnp.Struct(s).SetUint64(920, math.Float64bits(v))
}

func (s CropModuleState) SoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(928))
}

func (s CropModuleState) SetSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(928, math.Float64bits(v))
}

func (s CropModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(30)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(30)
}

func (s CropModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(30, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(30, l.ToPtr())
	return l, err
}
func (s CropModuleState) SoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(936))
}

func (s CropModuleState) SetSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(936, math.Float64bits(v))
}

func (s CropModuleState) VsSoilSpecificMaxRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(944))
}

func (s CropModuleState) SetVsSoilSpecificMaxRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(944, math.Float64bits(v))
}

func (s CropModuleState) PcSpecificLeafArea() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(31)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcSpecificLeafArea() bool {
	return capnp.Struct(s).HasPtr(31)
}

func (s CropModuleState) SetPcSpecificLeafArea(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(31, v.ToPtr())
}

// NewPcSpecificLeafArea sets the pcSpecificLeafArea field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcSpecificLeafArea(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(31, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcSpecificRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(952))
}

func (s CropModuleState) SetPcSpecificRootLength(v float64) {
	capnp.Struct(s).SetUint64(952, math.Float64bits(v))
}

func (s CropModuleState) PcStageAfterCut() uint16 {
	return capnp.Struct(s).Uint16(906)
}

func (s CropModuleState) SetPcStageAfterCut(v uint16) {
	capnp.Struct(s).SetUint16(906, v)
}

func (s CropModuleState) PcStageAtMaxDiameter() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(960))
}

func (s CropModuleState) SetPcStageAtMaxDiameter(v float64) {
	capnp.Struct(s).SetUint64(960, math.Float64bits(v))
}

func (s CropModuleState) PcStageAtMaxHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(968))
}

func (s CropModuleState) SetPcStageAtMaxHeight(v float64) {
	capnp.Struct(s).SetUint64(968, math.Float64bits(v))
}

func (s CropModuleState) PcStageMaxRootNConcentration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(32)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageMaxRootNConcentration() bool {
	return capnp.Struct(s).HasPtr(32)
}

func (s CropModuleState) SetPcStageMaxRootNConcentration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(32, v.ToPtr())
}

// NewPcStageMaxRootNConcentration sets the pcStageMaxRootNConcentration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageMaxRootNConcentration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(32, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageKcFactor() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(33)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageKcFactor() bool {
	return capnp.Struct(s).HasPtr(33)
}

func (s CropModuleState) SetPcStageKcFactor(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(33, v.ToPtr())
}

// NewPcStageKcFactor sets the pcStageKcFactor field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageKcFactor(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(33, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcStageTemperatureSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(34)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcStageTemperatureSum() bool {
	return capnp.Struct(s).HasPtr(34)
}

func (s CropModuleState) SetPcStageTemperatureSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(34, v.ToPtr())
}

// NewPcStageTemperatureSum sets the pcStageTemperatureSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcStageTemperatureSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(34, l.ToPtr())
	return l, err
}
func (s CropModuleState) StomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(976))
}

func (s CropModuleState) SetStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(976, math.Float64bits(v))
}

func (s CropModuleState) PcStorageOrgan() (capnp.BitList, error) {
	p, err := capnp.Struct(s).Ptr(35)
	return capnp.BitList(p.List()), err
}

func (s CropModuleState) HasPcStorageOrgan() bool {
	return capnp.Struct(s).HasPtr(35)
}

func (s CropModuleState) SetPcStorageOrgan(v capnp.BitList) error {
	return capnp.Struct(s).SetPtr(35, v.ToPtr())
}

// NewPcStorageOrgan sets the pcStorageOrgan field to a newly
// allocated capnp.BitList, preferring placement in s's segment.
func (s CropModuleState) NewPcStorageOrgan(n int32) (capnp.BitList, error) {
	l, err := capnp.NewBitList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.BitList{}, err
	}
	err = capnp.Struct(s).SetPtr(35, l.ToPtr())
	return l, err
}
func (s CropModuleState) StorageOrgan() uint16 {
	return capnp.Struct(s).Uint16(908) ^ 4
}

func (s CropModuleState) SetStorageOrgan(v uint16) {
	capnp.Struct(s).SetUint16(908, v^4)
}

func (s CropModuleState) TargetNConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(984))
}

func (s CropModuleState) SetTargetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(984, math.Float64bits(v))
}

func (s CropModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(992) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(992, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) TimeUnderAnoxia() uint64 {
	return capnp.Struct(s).Uint64(1000)
}

func (s CropModuleState) SetTimeUnderAnoxia(v uint64) {
	capnp.Struct(s).SetUint64(1000, v)
}

func (s CropModuleState) VsTortuosity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1008))
}

func (s CropModuleState) SetVsTortuosity(v float64) {
	capnp.Struct(s).SetUint64(1008, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1016))
}

func (s CropModuleState) SetTotalBiomass(v float64) {
	capnp.Struct(s).SetUint64(1016, math.Float64bits(v))
}

func (s CropModuleState) TotalBiomassNContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1024))
}

func (s CropModuleState) SetTotalBiomassNContent(v float64) {
	capnp.Struct(s).SetUint64(1024, math.Float64bits(v))
}

func (s CropModuleState) TotalCropHeatImpact() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1032))
}

func (s CropModuleState) SetTotalCropHeatImpact(v float64) {
	capnp.Struct(s).SetUint64(1032, math.Float64bits(v))
}

func (s CropModuleState) TotalNInput() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1040))
}

func (s CropModuleState) SetTotalNInput(v float64) {
	capnp.Struct(s).SetUint64(1040, math.Float64bits(v))
}

func (s CropModuleState) TotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1048))
}

func (s CropModuleState) SetTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1048, math.Float64bits(v))
}

func (s CropModuleState) TotalRespired() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1056))
}

func (s CropModuleState) SetTotalRespired(v float64) {
	capnp.Struct(s).SetUint64(1056, math.Float64bits(v))
}

func (s CropModuleState) Respiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1064))
}

func (s CropModuleState) SetRespiration(v float64) {
	capnp.Struct(s).SetUint64(1064, math.Float64bits(v))
}

func (s CropModuleState) SumTotalNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1072))
}

func (s CropModuleState) SetSumTotalNUptake(v float64) {
	capnp.Struct(s).SetUint64(1072, math.Float64bits(v))
}

func (s CropModuleState) TotalRootLength() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1080))
}

func (s CropModuleState) SetTotalRootLength(v float64) {
	capnp.Struct(s).SetUint64(1080, math.Float64bits(v))
}

func (s CropModuleState) TotalTemperatureSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1088))
}

func (s CropModuleState) SetTotalTemperatureSum(v float64) {
	capnp.Struct(s).SetUint64(1088, math.Float64bits(v))
}

func (s CropModuleState) TemperatureSumToFlowering() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1096))
}

func (s CropModuleState) SetTemperatureSumToFlowering(v float64) {
	capnp.Struct(s).SetUint64(1096, math.Float64bits(v))
}

func (s CropModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(36)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(36)
}

func (s CropModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(36, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(36, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(37)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTranspirationRedux() bool {
	return capnp.Struct(s).HasPtr(37)
}

func (s CropModuleState) SetTranspirationRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(37, v.ToPtr())
}

// NewTranspirationRedux sets the transpirationRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTranspirationRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(37, l.ToPtr())
	return l, err
}
func (s CropModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1104) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(1104, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) VernalisationDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1112))
}

func (s CropModuleState) SetVernalisationDays(v float64) {
	capnp.Struct(s).SetUint64(1112, math.Float64bits(v))
}

func (s CropModuleState) VernalisationFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1120))
}

func (s CropModuleState) SetVernalisationFactor(v float64) {
	capnp.Struct(s).SetUint64(1120, math.Float64bits(v))
}

func (s CropModuleState) PcVernalisationRequirement() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(38)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasPcVernalisationRequirement() bool {
	return capnp.Struct(s).HasPtr(38)
}

func (s CropModuleState) SetPcVernalisationRequirement(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(38, v.ToPtr())
}

// NewPcVernalisationRequirement sets the pcVernalisationRequirement field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewPcVernalisationRequirement(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(38, l.ToPtr())
	return l, err
}
func (s CropModuleState) PcWaterDeficitResponseOn() bool {
	return capnp.Struct(s).Bit(7280)
}

func (s CropModuleState) SetPcWaterDeficitResponseOn(v bool) {
	capnp.Struct(s).SetBit(7280, v)
}

func (s CropModuleState) DyingOut() bool {
	return capnp.Struct(s).Bit(7281)
}

func (s CropModuleState) SetDyingOut(v bool) {
	capnp.Struct(s).SetBit(7281, v)
}

func (s CropModuleState) AccumulatedETa() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1152))
}

func (s CropModuleState) SetAccumulatedETa(v float64) {
	capnp.Struct(s).SetUint64(1152, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1160))
}

func (s CropModuleState) SetAccumulatedTranspiration(v float64) {
	capnp.Struct(s).SetUint64(1160, math.Float64bits(v))
}

func (s CropModuleState) AccumulatedPrimaryCropYield() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1168))
}

func (s CropModuleState) SetAccumulatedPrimaryCropYield(v float64) {
	capnp.Struct(s).SetUint64(1168, math.Float64bits(v))
}

func (s CropModuleState) SumExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1176))
}

func (s CropModuleState) SetSumExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1176, math.Float64bits(v))
}

func (s CropModuleState) ExportedCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1184))
}

func (s CropModuleState) SetExportedCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1184, math.Float64bits(v))
}

func (s CropModuleState) SumResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1192))
}

func (s CropModuleState) SetSumResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1192, math.Float64bits(v))
}

func (s CropModuleState) ResidueCutBiomass() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1200))
}

func (s CropModuleState) SetResidueCutBiomass(v float64) {
	capnp.Struct(s).SetUint64(1200, math.Float64bits(v))
}

func (s CropModuleState) CuttingDelayDays() uint16 {
	return capnp.Struct(s).Uint16(1208)
}

func (s CropModuleState) SetCuttingDelayDays(v uint16) {
	capnp.Struct(s).SetUint16(1208, v)
}

func (s CropModuleState) VsMaxEffectiveRootingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1216))
}

func (s CropModuleState) SetVsMaxEffectiveRootingDepth(v float64) {
	capnp.Struct(s).SetUint64(1216, math.Float64bits(v))
}

func (s CropModuleState) VsImpenetrableLayerDept() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1224))
}

func (s CropModuleState) SetVsImpenetrableLayerDept(v float64) {
	capnp.Struct(s).SetUint64(1224, math.Float64bits(v))
}

func (s CropModuleState) AnthesisDay() int16 {
	return int16(capnp.Struct(s).Uint16(1210) ^ 65535)
}

func (s CropModuleState) SetAnthesisDay(v int16) {
	capnp.Struct(s).SetUint16(1210, uint16(v)^65535)
}

func (s CropModuleState) MaturityDay() int16 {
	return int16(capnp.Struct(s).Uint16(1212) ^ 65535)
}

func (s CropModuleState) SetMaturityDay(v int16) {
	capnp.Struct(s).SetUint16(1212, uint16(v)^65535)
}

func (s CropModuleState) MaturityReached() bool {
	return capnp.Struct(s).Bit(7282)
}

func (s CropModuleState) SetMaturityReached(v bool) {
	capnp.Struct(s).SetBit(7282, v)
}

func (s CropModuleState) StepSize24() uint16 {
	return capnp.Struct(s).Uint16(1214) ^ 24
}

func (s CropModuleState) SetStepSize24(v uint16) {
	capnp.Struct(s).SetUint16(1214, v^24)
}

func (s CropModuleState) StepSize240() uint16 {
	return capnp.Struct(s).Uint16(1232) ^ 240
}

func (s CropModuleState) SetStepSize240(v uint16) {
	capnp.Struct(s).SetUint16(1232, v^240)
}

func (s CropModuleState) Rad24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(39)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad24() bool {
	return capnp.Struct(s).HasPtr(39)
}

func (s CropModuleState) SetRad24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(39, v.ToPtr())
}

// NewRad24 sets the rad24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(39, l.ToPtr())
	return l, err
}
func (s CropModuleState) Rad240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(40)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasRad240() bool {
	return capnp.Struct(s).HasPtr(40)
}

func (s CropModuleState) SetRad240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(40, v.ToPtr())
}

// NewRad240 sets the rad240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewRad240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(40, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol24() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(41)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol24() bool {
	return capnp.Struct(s).HasPtr(41)
}

func (s CropModuleState) SetTfol24(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(41, v.ToPtr())
}

// NewTfol24 sets the tfol24 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol24(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(41, l.ToPtr())
	return l, err
}
func (s CropModuleState) Tfol240() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(42)
	return capnp.Float64List(p.List()), err
}

func (s CropModuleState) HasTfol240() bool {
	return capnp.Struct(s).HasPtr(42)
}

func (s CropModuleState) SetTfol240(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(42, v.ToPtr())
}

// NewTfol240 sets the tfol240 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s CropModuleState) NewTfol240(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(42, l.ToPtr())
	return l, err
}
func (s CropModuleState) Index24() uint16 {
	return capnp.Struct(s).Uint16(1234)
}

func (s CropModuleState) SetIndex24(v uint16) {
	capnp.Struct(s).SetUint16(1234, v)
}

func (s CropModuleState) Index240() uint16 {
	return capnp.Struct(s).Uint16(1236)
}

func (s CropModuleState) SetIndex240(v uint16) {
	capnp.Struct(s).SetUint16(1236, v)
}

func (s CropModuleState) Full24() bool {
	return capnp.Struct(s).Bit(7283)
}

func (s CropModuleState) SetFull24(v bool) {
	capnp.Struct(s).SetBit(7283, v)
}

func (s CropModuleState) Full240() bool {
	return capnp.Struct(s).Bit(7284)
}

func (s CropModuleState) SetFull240(v bool) {
	capnp.Struct(s).SetBit(7284, v)
}

func (s CropModuleState) GuentherEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(43)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasGuentherEmissions() bool {
	return capnp.Struct(s).HasPtr(43)
}

func (s CropModuleState) SetGuentherEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(43, capnp.Struct(v).ToPtr())
}

// NewGuentherEmissions sets the guentherEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewGuentherEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(43, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) JjvEmissions() (Voc_Emissions, error) {
	p, err := capnp.Struct(s).Ptr(44)
	return Voc_Emissions(p.Struct()), err
}

func (s CropModuleState) HasJjvEmissions() bool {
	return capnp.Struct(s).HasPtr(44)
}

func (s CropModuleState) SetJjvEmissions(v Voc_Emissions) error {
	return capnp.Struct(s).SetPtr(44, capnp.Struct(v).ToPtr())
}

// NewJjvEmissions sets the jjvEmissions field to a newly
// allocated Voc_Emissions struct, preferring placement in s's segment.
func (s CropModuleState) NewJjvEmissions() (Voc_Emissions, error) {
	ss, err := NewVoc_Emissions(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_Emissions{}, err
	}
	err = capnp.Struct(s).SetPtr(44, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) VocSpecies() (Voc_SpeciesData, error) {
	p, err := capnp.Struct(s).Ptr(45)
	return Voc_SpeciesData(p.Struct()), err
}

func (s CropModuleState) HasVocSpecies() bool {
	return capnp.Struct(s).HasPtr(45)
}

func (s CropModuleState) SetVocSpecies(v Voc_SpeciesData) error {
	return capnp.Struct(s).SetPtr(45, capnp.Struct(v).ToPtr())
}

// NewVocSpecies sets the vocSpecies field to a newly
// allocated Voc_SpeciesData struct, preferring placement in s's segment.
func (s CropModuleState) NewVocSpecies() (Voc_SpeciesData, error) {
	ss, err := NewVoc_SpeciesData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_SpeciesData{}, err
	}
	err = capnp.Struct(s).SetPtr(45, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) CropPhotosynthesisResults() (Voc_CPData, error) {
	p, err := capnp.Struct(s).Ptr(46)
	return Voc_CPData(p.Struct()), err
}

func (s CropModuleState) HasCropPhotosynthesisResults() bool {
	return capnp.Struct(s).HasPtr(46)
}

func (s CropModuleState) SetCropPhotosynthesisResults(v Voc_CPData) error {
	return capnp.Struct(s).SetPtr(46, capnp.Struct(v).ToPtr())
}

// NewCropPhotosynthesisResults sets the cropPhotosynthesisResults field to a newly
// allocated Voc_CPData struct, preferring placement in s's segment.
func (s CropModuleState) NewCropPhotosynthesisResults() (Voc_CPData, error) {
	ss, err := NewVoc_CPData(capnp.Struct(s).Segment())
	if err != nil {
		return Voc_CPData{}, err
	}
	err = capnp.Struct(s).SetPtr(46, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s CropModuleState) O3ShortTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1144) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3ShortTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1144, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3LongTermDamage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1136) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3LongTermDamage(v float64) {
	capnp.Struct(s).SetUint64(1136, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3Senescence() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(1128) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3Senescence(v float64) {
	capnp.Struct(s).SetUint64(1128, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) O3SumUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s CropModuleState) SetO3SumUptake(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s CropModuleState) O3WStomatalClosure() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x3ff0000000000000)
}

func (s CropModuleState) SetO3WStomatalClosure(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x3ff0000000000000)
}

func (s CropModuleState) AssimilatePartCoeffsReduced() bool {
	return capnp.Struct(s).Bit(1)
}

func (s CropModuleState) SetAssimilatePartCoeffsReduced(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s CropModuleState) Ktkc() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s CropModuleState) SetKtkc(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s CropModuleState) Ktko() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s CropModuleState) SetKtko(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s CropModuleState) StemElongationEventFired() bool {
	return capnp.Struct(s).Bit(7286)
}

func (s CropModuleState) SetStemElongationEventFired(v bool) {
	capnp.Struct(s).SetBit(7286, v)
}

// CropModuleState_List is a list of CropModuleState.
type CropModuleState_List = capnp.StructList[CropModuleState]

// NewCropModuleState creates a new list of CropModuleState.
func NewCropModuleState_List(s *capnp.Segment, sz int32) (CropModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 1248, PointerCount: 50}, sz)
	return capnp.StructList[CropModuleState](l), err
}

// CropModuleState_Future is a wrapper for a CropModuleState promised by a client call.
type CropModuleState_Future struct{ *capnp.Future }

func (f CropModuleState_Future) Struct() (CropModuleState, error) {
	p, err := f.Future.Ptr()
	return CropModuleState(p.Struct()), err
}
func (p CropModuleState_Future) SpeciesParams() SpeciesParameters_Future {
	return SpeciesParameters_Future{Future: p.Future.Field(47, nil)}
}
func (p CropModuleState_Future) CultivarParams() CultivarParameters_Future {
	return CultivarParameters_Future{Future: p.Future.Field(48, nil)}
}
func (p CropModuleState_Future) ResidueParams() CropResidueParameters_Future {
	return CropResidueParameters_Future{Future: p.Future.Field(49, nil)}
}
func (p CropModuleState_Future) GuentherEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(43, nil)}
}
func (p CropModuleState_Future) JjvEmissions() Voc_Emissions_Future {
	return Voc_Emissions_Future{Future: p.Future.Field(44, nil)}
}
func (p CropModuleState_Future) VocSpecies() Voc_SpeciesData_Future {
	return Voc_SpeciesData_Future{Future: p.Future.Field(45, nil)}
}
func (p CropModuleState_Future) CropPhotosynthesisResults() Voc_CPData_Future {
	return Voc_CPData_Future{Future: p.Future.Field(46, nil)}
}

type SnowModuleState capnp.Struct

// SnowModuleState_TypeID is the unique identifier for the type SnowModuleState.
const SnowModuleState_TypeID = 0xa4da01d10b3b6acd

func NewSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func NewRootSnowModuleState(s *capnp.Segment) (SnowModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0})
	return SnowModuleState(st), err
}

func ReadRootSnowModuleState(msg *capnp.Message) (SnowModuleState, error) {
	root, err := msg.Root()
	return SnowModuleState(root.Struct()), err
}

func (s SnowModuleState) String() string {
	str, _ := text.Marshal(0xa4da01d10b3b6acd, capnp.Struct(s))
	return str
}

func (s SnowModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SnowModuleState) DecodeFromPtr(p capnp.Ptr) SnowModuleState {
	return SnowModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SnowModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SnowModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SnowModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SnowModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SnowModuleState) SnowDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SnowModuleState) SetSnowDensity(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SnowModuleState) SnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SnowModuleState) SetSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SnowModuleState) FrozenWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SnowModuleState) SetFrozenWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SnowModuleState) LiquidWaterInSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SnowModuleState) SetLiquidWaterInSnow(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SnowModuleState) WaterToInfiltrate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SnowModuleState) SetWaterToInfiltrate(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SnowModuleState) MaxSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SnowModuleState) SetMaxSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SnowModuleState) AccumulatedSnowDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SnowModuleState) SetAccumulatedSnowDepth(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SnowModuleState) SnowmeltTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SnowModuleState) SetSnowmeltTemperature(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SnowModuleState) SnowAccumulationThresholdTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SnowModuleState) SetSnowAccumulationThresholdTemperature(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SnowModuleState) TemperatureLimitForLiquidWater() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SnowModuleState) SetTemperatureLimitForLiquidWater(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionRain() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SnowModuleState) SetCorrectionRain(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SnowModuleState) CorrectionSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SnowModuleState) SetCorrectionSnow(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SnowModuleState) SetRefreezeTemperature(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP1() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SnowModuleState) SetRefreezeP1(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SnowModuleState) RefreezeP2() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SnowModuleState) SetRefreezeP2(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SnowModuleState) NewSnowDensityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SnowModuleState) SetNewSnowDensityMin(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SnowModuleState) SnowMaxAdditionalDensity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SnowModuleState) SetSnowMaxAdditionalDensity(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SnowModuleState) SnowPacking() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SnowModuleState) SetSnowPacking(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMin() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SnowModuleState) SetSnowRetentionCapacityMin(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SnowModuleState) SnowRetentionCapacityMax() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SnowModuleState) SetSnowRetentionCapacityMax(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SnowModuleState_List is a list of SnowModuleState.
type SnowModuleState_List = capnp.StructList[SnowModuleState]

// NewSnowModuleState creates a new list of SnowModuleState.
func NewSnowModuleState_List(s *capnp.Segment, sz int32) (SnowModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 160, PointerCount: 0}, sz)
	return capnp.StructList[SnowModuleState](l), err
}

// SnowModuleState_Future is a wrapper for a SnowModuleState promised by a client call.
type SnowModuleState_Future struct{ *capnp.Future }

func (f SnowModuleState_Future) Struct() (SnowModuleState, error) {
	p, err := f.Future.Ptr()
	return SnowModuleState(p.Struct()), err
}

type FrostModuleState capnp.Struct

// FrostModuleState_TypeID is the unique identifier for the type FrostModuleState.
const FrostModuleState_TypeID = 0xb4f16ea3144d85a6

func NewFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func NewRootFrostModuleState(s *capnp.Segment) (FrostModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1})
	return FrostModuleState(st), err
}

func ReadRootFrostModuleState(msg *capnp.Message) (FrostModuleState, error) {
	root, err := msg.Root()
	return FrostModuleState(root.Struct()), err
}

func (s FrostModuleState) String() string {
	str, _ := text.Marshal(0xb4f16ea3144d85a6, capnp.Struct(s))
	return str
}

func (s FrostModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (FrostModuleState) DecodeFromPtr(p capnp.Ptr) FrostModuleState {
	return FrostModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s FrostModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s FrostModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s FrostModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s FrostModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s FrostModuleState) FrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s FrostModuleState) SetFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s FrostModuleState) AccumulatedFrostDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s FrostModuleState) SetAccumulatedFrostDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s FrostModuleState) NegativeDegreeDays() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s FrostModuleState) SetNegativeDegreeDays(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s FrostModuleState) ThawDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s FrostModuleState) SetThawDepth(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s FrostModuleState) FrostDays() uint16 {
	return capnp.Struct(s).Uint16(40)
}

func (s FrostModuleState) SetFrostDays(v uint16) {
	capnp.Struct(s).SetUint16(40, v)
}

func (s FrostModuleState) LambdaRedux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s FrostModuleState) HasLambdaRedux() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s FrostModuleState) SetLambdaRedux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLambdaRedux sets the lambdaRedux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s FrostModuleState) NewLambdaRedux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s FrostModuleState) TemperatureUnderSnow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s FrostModuleState) SetTemperatureUnderSnow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s FrostModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s FrostModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s FrostModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s FrostModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s FrostModuleState) PmHydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s FrostModuleState) SetPmHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// FrostModuleState_List is a list of FrostModuleState.
type FrostModuleState_List = capnp.StructList[FrostModuleState]

// NewFrostModuleState creates a new list of FrostModuleState.
func NewFrostModuleState_List(s *capnp.Segment, sz int32) (FrostModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 72, PointerCount: 1}, sz)
	return capnp.StructList[FrostModuleState](l), err
}

// FrostModuleState_Future is a wrapper for a FrostModuleState promised by a client call.
type FrostModuleState_Future struct{ *capnp.Future }

func (f FrostModuleState_Future) Struct() (FrostModuleState, error) {
	p, err := f.Future.Ptr()
	return FrostModuleState(p.Struct()), err
}

type SoilMoistureModuleState capnp.Struct

// SoilMoistureModuleState_TypeID is the unique identifier for the type SoilMoistureModuleState.
const SoilMoistureModuleState_TypeID = 0xcd05962719bf7ec8

func NewSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func NewRootSoilMoistureModuleState(s *capnp.Segment) (SoilMoistureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22})
	return SoilMoistureModuleState(st), err
}

func ReadRootSoilMoistureModuleState(msg *capnp.Message) (SoilMoistureModuleState, error) {
	root, err := msg.Root()
	return SoilMoistureModuleState(root.Struct()), err
}

func (s SoilMoistureModuleState) String() string {
	str, _ := text.Marshal(0xcd05962719bf7ec8, capnp.Struct(s))
	return str
}

func (s SoilMoistureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilMoistureModuleState) DecodeFromPtr(p capnp.Ptr) SoilMoistureModuleState {
	return SoilMoistureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilMoistureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilMoistureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilMoistureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilMoistureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilMoistureModuleState) ModuleParams() (SoilMoistureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilMoistureModuleParameters(p.Struct()), err
}

func (s SoilMoistureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilMoistureModuleState) SetModuleParams(v SoilMoistureModuleParameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilMoistureModuleParameters struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewModuleParams() (SoilMoistureModuleParameters, error) {
	ss, err := NewSoilMoistureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilMoistureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(24)
}

func (s SoilMoistureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(24, v)
}

func (s SoilMoistureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(26)
}

func (s SoilMoistureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(26, v)
}

func (s SoilMoistureModuleState) ActualEvaporation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilMoistureModuleState) SetActualEvaporation(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilMoistureModuleState) SetActualEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ActualTranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilMoistureModuleState) SetActualTranspiration(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilMoistureModuleState) AvailableWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasAvailableWater() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilMoistureModuleState) SetAvailableWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAvailableWater sets the availableWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewAvailableWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryRise() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilMoistureModuleState) SetCapillaryRise(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilMoistureModuleState) CapillaryRiseRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryRiseRate() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilMoistureModuleState) SetCapillaryRiseRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewCapillaryRiseRate sets the capillaryRiseRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryRiseRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilMoistureModuleState) SetCapillaryWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewCapillaryWater sets the capillaryWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) CapillaryWater70() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasCapillaryWater70() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilMoistureModuleState) SetCapillaryWater70(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewCapillaryWater70 sets the capillaryWater70 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewCapillaryWater70(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evaporation() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvaporation() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilMoistureModuleState) SetEvaporation(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewEvaporation sets the evaporation field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvaporation(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) Evapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilMoistureModuleState) SetEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewEvapotranspiration sets the evapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FieldCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasFieldCapacity() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilMoistureModuleState) SetFieldCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewFieldCapacity sets the fieldCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFieldCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) FluxAtLowerBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilMoistureModuleState) SetFluxAtLowerBoundary(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GravitationalWater() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasGravitationalWater() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilMoistureModuleState) SetGravitationalWater(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewGravitationalWater sets the gravitationalWater field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewGravitationalWater(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) GrossPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilMoistureModuleState) SetGrossPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterAdded() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilMoistureModuleState) SetGroundwaterAdded(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterDischarge() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilMoistureModuleState) SetGroundwaterDischarge(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilMoistureModuleState) GroundwaterTable() uint16 {
	return capnp.Struct(s).Uint16(28)
}

func (s SoilMoistureModuleState) SetGroundwaterTable(v uint16) {
	capnp.Struct(s).SetUint16(28, v)
}

func (s SoilMoistureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilMoistureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) HydraulicConductivityRedux() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilMoistureModuleState) SetHydraulicConductivityRedux(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Infiltration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilMoistureModuleState) SetInfiltration(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Interception() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilMoistureModuleState) SetInterception(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcKcFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120) ^ 0x3fe3333333333333)
}

func (s SoilMoistureModuleState) SetVcKcFactor(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v)^0x3fe3333333333333)
}

func (s SoilMoistureModuleState) Lambda() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLambda() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilMoistureModuleState) SetLambda(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewLambda sets the lambda field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLambda(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) LambdaReduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(128))
}

func (s SoilMoistureModuleState) SetLambdaReduced(v float64) {
	capnp.Struct(s).SetUint64(128, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VsLatitude() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(136))
}

func (s SoilMoistureModuleState) SetVsLatitude(v float64) {
	capnp.Struct(s).SetUint64(136, math.Float64bits(v))
}

func (s SoilMoistureModuleState) LayerThickness() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasLayerThickness() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilMoistureModuleState) SetLayerThickness(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewLayerThickness sets the layerThickness field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewLayerThickness(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) PmLayerThickness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(144))
}

func (s SoilMoistureModuleState) SetPmLayerThickness(v float64) {
	capnp.Struct(s).SetUint64(144, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(152))
}

func (s SoilMoistureModuleState) SetPmLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(152, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmLeachingDepthLayer() uint16 {
	return capnp.Struct(s).Uint16(30)
}

func (s SoilMoistureModuleState) SetPmLeachingDepthLayer(v uint16) {
	capnp.Struct(s).SetUint16(30, v)
}

func (s SoilMoistureModuleState) VwMaxAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(160))
}

func (s SoilMoistureModuleState) SetVwMaxAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(160, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PmMaxPercolationRate() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(168))
}

func (s SoilMoistureModuleState) SetPmMaxPercolationRate(v float64) {
	capnp.Struct(s).SetUint64(168, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMeanAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(176))
}

func (s SoilMoistureModuleState) SetVwMeanAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(176, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwMinAirTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(184))
}

func (s SoilMoistureModuleState) SetVwMinAirTemperature(v float64) {
	capnp.Struct(s).SetUint64(184, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VcNetPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(192))
}

func (s SoilMoistureModuleState) SetVcNetPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(192, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwNetRadiation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(200))
}

func (s SoilMoistureModuleState) SetVwNetRadiation(v float64) {
	capnp.Struct(s).SetUint64(200, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PermanentWiltingPoint() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPermanentWiltingPoint() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilMoistureModuleState) SetPermanentWiltingPoint(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewPermanentWiltingPoint sets the permanentWiltingPoint field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPermanentWiltingPoint(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcPercentageSoilCoverage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(208))
}

func (s SoilMoistureModuleState) SetVcPercentageSoilCoverage(v float64) {
	capnp.Struct(s).SetUint64(208, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilMoistureModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwPrecipitation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(216))
}

func (s SoilMoistureModuleState) SetVwPrecipitation(v float64) {
	capnp.Struct(s).SetUint64(216, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ReferenceEvapotranspiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(224) ^ 0x4018000000000000)
}

func (s SoilMoistureModuleState) SetReferenceEvapotranspiration(v float64) {
	capnp.Struct(s).SetUint64(224, math.Float64bits(v)^0x4018000000000000)
}

func (s SoilMoistureModuleState) RelativeHumidity() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(232))
}

func (s SoilMoistureModuleState) SetRelativeHumidity(v float64) {
	capnp.Struct(s).SetUint64(232, math.Float64bits(v))
}

func (s SoilMoistureModuleState) ResidualEvapotranspiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasResidualEvapotranspiration() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilMoistureModuleState) SetResidualEvapotranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewResidualEvapotranspiration sets the residualEvapotranspiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewResidualEvapotranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SaturatedHydraulicConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSaturatedHydraulicConductivity() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilMoistureModuleState) SetSaturatedHydraulicConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewSaturatedHydraulicConductivity sets the saturatedHydraulicConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSaturatedHydraulicConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisture() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilMoisture() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilMoistureModuleState) SetSoilMoisture(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilMoisture sets the soilMoisture field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilMoisture(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) SoilMoisturecrit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(240))
}

func (s SoilMoistureModuleState) SetSoilMoisturecrit(v float64) {
	capnp.Struct(s).SetUint64(240, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilMoistureDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(248))
}

func (s SoilMoistureModuleState) SetSoilMoistureDeficit(v float64) {
	capnp.Struct(s).SetUint64(248, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SoilPoreVolume() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasSoilPoreVolume() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilMoistureModuleState) SetSoilPoreVolume(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSoilPoreVolume sets the soilPoreVolume field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSoilPoreVolume(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VcStomataResistance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(256))
}

func (s SoilMoistureModuleState) SetVcStomataResistance(v float64) {
	capnp.Struct(s).SetUint64(256, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRoughness() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(264))
}

func (s SoilMoistureModuleState) SetSurfaceRoughness(v float64) {
	capnp.Struct(s).SetUint64(264, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(272))
}

func (s SoilMoistureModuleState) SetSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(272, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SumSurfaceRunOff() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(280))
}

func (s SoilMoistureModuleState) SetSumSurfaceRunOff(v float64) {
	capnp.Struct(s).SetUint64(280, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SurfaceWaterStorage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(288))
}

func (s SoilMoistureModuleState) SetSurfaceWaterStorage(v float64) {
	capnp.Struct(s).SetUint64(288, math.Float64bits(v))
}

func (s SoilMoistureModuleState) PtTimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(296))
}

func (s SoilMoistureModuleState) SetPtTimeStep(v float64) {
	capnp.Struct(s).SetUint64(296, math.Float64bits(v))
}

func (s SoilMoistureModuleState) TotalWaterRemoval() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(304))
}

func (s SoilMoistureModuleState) SetTotalWaterRemoval(v float64) {
	capnp.Struct(s).SetUint64(304, math.Float64bits(v))
}

func (s SoilMoistureModuleState) Transpiration() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasTranspiration() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilMoistureModuleState) SetTranspiration(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewTranspiration sets the transpiration field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewTranspiration(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) TranspirationDeficit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(312))
}

func (s SoilMoistureModuleState) SetTranspirationDeficit(v float64) {
	capnp.Struct(s).SetUint64(312, math.Float64bits(v))
}

func (s SoilMoistureModuleState) WaterFlux() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilMoistureModuleState) HasWaterFlux() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilMoistureModuleState) SetWaterFlux(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewWaterFlux sets the waterFlux field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewWaterFlux(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilMoistureModuleState) VwWindSpeed() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilMoistureModuleState) SetVwWindSpeed(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilMoistureModuleState) VwWindSpeedHeight() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilMoistureModuleState) SetVwWindSpeedHeight(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilMoistureModuleState) XSACriticalSoilMoisture() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilMoistureModuleState) SetXSACriticalSoilMoisture(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilMoistureModuleState) SnowComponent() (SnowModuleState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SnowModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasSnowComponent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilMoistureModuleState) SetSnowComponent(v SnowModuleState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSnowComponent sets the snowComponent field to a newly
// allocated SnowModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewSnowComponent() (SnowModuleState, error) {
	ss, err := NewSnowModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return SnowModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilMoistureModuleState) FrostComponent() (FrostModuleState, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return FrostModuleState(p.Struct()), err
}

func (s SoilMoistureModuleState) HasFrostComponent() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilMoistureModuleState) SetFrostComponent(v FrostModuleState) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFrostComponent sets the frostComponent field to a newly
// allocated FrostModuleState struct, preferring placement in s's segment.
func (s SoilMoistureModuleState) NewFrostComponent() (FrostModuleState, error) {
	ss, err := NewFrostModuleState(capnp.Struct(s).Segment())
	if err != nil {
		return FrostModuleState{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SoilMoistureModuleState_List is a list of SoilMoistureModuleState.
type SoilMoistureModuleState_List = capnp.StructList[SoilMoistureModuleState]

// NewSoilMoistureModuleState creates a new list of SoilMoistureModuleState.
func NewSoilMoistureModuleState_List(s *capnp.Segment, sz int32) (SoilMoistureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 320, PointerCount: 22}, sz)
	return capnp.StructList[SoilMoistureModuleState](l), err
}

// SoilMoistureModuleState_Future is a wrapper for a SoilMoistureModuleState promised by a client call.
type SoilMoistureModuleState_Future struct{ *capnp.Future }

func (f SoilMoistureModuleState_Future) Struct() (SoilMoistureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilMoistureModuleState(p.Struct()), err
}
func (p SoilMoistureModuleState_Future) ModuleParams() SoilMoistureModuleParameters_Future {
	return SoilMoistureModuleParameters_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilMoistureModuleState_Future) SnowComponent() SnowModuleState_Future {
	return SnowModuleState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilMoistureModuleState_Future) FrostComponent() FrostModuleState_Future {
	return FrostModuleState_Future{Future: p.Future.Field(0, nil)}
}

type SoilOrganicModuleState capnp.Struct

// SoilOrganicModuleState_TypeID is the unique identifier for the type SoilOrganicModuleState.
const SoilOrganicModuleState_TypeID = 0xd594e64f6b5f461d

func NewSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func NewRootSoilOrganicModuleState(s *capnp.Segment) (SoilOrganicModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22})
	return SoilOrganicModuleState(st), err
}

func ReadRootSoilOrganicModuleState(msg *capnp.Message) (SoilOrganicModuleState, error) {
	root, err := msg.Root()
	return SoilOrganicModuleState(root.Struct()), err
}

func (s SoilOrganicModuleState) String() string {
	str, _ := text.Marshal(0xd594e64f6b5f461d, capnp.Struct(s))
	return str
}

func (s SoilOrganicModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilOrganicModuleState) DecodeFromPtr(p capnp.Ptr) SoilOrganicModuleState {
	return SoilOrganicModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilOrganicModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilOrganicModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilOrganicModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilOrganicModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilOrganicModuleState) ModuleParams() (SoilOrganicModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilOrganicModuleParameters(p.Struct()), err
}

func (s SoilOrganicModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilOrganicModuleState) SetModuleParams(v SoilOrganicModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilOrganicModuleParameters struct, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewModuleParams() (SoilOrganicModuleParameters, error) {
	ss, err := NewSoilOrganicModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilOrganicModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilOrganicModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(2)
}

func (s SoilOrganicModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(2, v)
}

func (s SoilOrganicModuleState) VsNumberOfOrganicLayers() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s SoilOrganicModuleState) SetVsNumberOfOrganicLayers(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s SoilOrganicModuleState) AddedOrganicMatter() bool {
	return capnp.Struct(s).Bit(1)
}

func (s SoilOrganicModuleState) SetAddedOrganicMatter(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s SoilOrganicModuleState) IrrigationAmount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilOrganicModuleState) SetIrrigationAmount(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ActAmmoniaOxidationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActAmmoniaOxidationRate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilOrganicModuleState) SetActAmmoniaOxidationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewActAmmoniaOxidationRate sets the actAmmoniaOxidationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActAmmoniaOxidationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActNitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActNitrificationRate() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilOrganicModuleState) SetActNitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewActNitrificationRate sets the actNitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActNitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) ActDenitrificationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasActDenitrificationRate() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilOrganicModuleState) SetActDenitrificationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewActDenitrificationRate sets the actDenitrificationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewActDenitrificationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastDeltaSum() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilOrganicModuleState) SetAomFastDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewAomFastDeltaSum sets the aomFastDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastInput() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilOrganicModuleState) SetAomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewAomFastInput sets the aomFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomFastSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomFastSum() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilOrganicModuleState) SetAomFastSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewAomFastSum sets the aomFastSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomFastSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowDeltaSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowDeltaSum() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilOrganicModuleState) SetAomSlowDeltaSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewAomSlowDeltaSum sets the aomSlowDeltaSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowDeltaSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowInput() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilOrganicModuleState) SetAomSlowInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewAomSlowInput sets the aomSlowInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) AomSlowSum() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasAomSlowSum() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilOrganicModuleState) SetAomSlowSum(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewAomSlowSum sets the aomSlowSum field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewAomSlowSum(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) CBalance() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasCBalance() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilOrganicModuleState) SetCBalance(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewCBalance sets the cBalance field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewCBalance(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) DecomposerRespiration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilOrganicModuleState) SetDecomposerRespiration(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilOrganicModuleState) ErrorMessage() (string, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.Text(), err
}

func (s SoilOrganicModuleState) HasErrorMessage() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilOrganicModuleState) ErrorMessageBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return p.TextBytes(), err
}

func (s SoilOrganicModuleState) SetErrorMessage(v string) error {
	return capnp.Struct(s).SetText(11, v)
}

func (s SoilOrganicModuleState) InertSoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasInertSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilOrganicModuleState) SetInertSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewInertSoilOrganicC sets the inertSoilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewInertSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) N2oProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilOrganicModuleState) SetN2oProduced(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedNit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s SoilOrganicModuleState) SetN2oProducedNit(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s SoilOrganicModuleState) N2oProducedDenit() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s SoilOrganicModuleState) SetN2oProducedDenit(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemExchange() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s SoilOrganicModuleState) SetNetEcosystemExchange(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetEcosystemProduction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s SoilOrganicModuleState) SetNetEcosystemProduction(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s SoilOrganicModuleState) SetNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s SoilOrganicModuleState) NetNMineralisationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasNetNMineralisationRate() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilOrganicModuleState) SetNetNMineralisationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewNetNMineralisationRate sets the netNMineralisationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewNetNMineralisationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) TotalNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s SoilOrganicModuleState) SetTotalNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Nh3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s SoilOrganicModuleState) SetNh3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SmbCO2EvolutionRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(14)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbCO2EvolutionRate() bool {
	return capnp.Struct(s).HasPtr(14)
}

func (s SoilOrganicModuleState) SetSmbCO2EvolutionRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(14, v.ToPtr())
}

// NewSmbCO2EvolutionRate sets the smbCO2EvolutionRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbCO2EvolutionRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(14, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(15)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbFastDelta() bool {
	return capnp.Struct(s).HasPtr(15)
}

func (s SoilOrganicModuleState) SetSmbFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(15, v.ToPtr())
}

// NewSmbFastDelta sets the smbFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(15, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SmbSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(16)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSmbSlowDelta() bool {
	return capnp.Struct(s).HasPtr(16)
}

func (s SoilOrganicModuleState) SetSmbSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(16, v.ToPtr())
}

// NewSmbSlowDelta sets the smbSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSmbSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(16, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(17)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(17)
}

func (s SoilOrganicModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(17, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(17, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SoilOrganicC() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(18)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSoilOrganicC() bool {
	return capnp.Struct(s).HasPtr(18)
}

func (s SoilOrganicModuleState) SetSoilOrganicC(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(18, v.ToPtr())
}

// NewSoilOrganicC sets the soilOrganicC field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSoilOrganicC(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(18, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(19)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastDelta() bool {
	return capnp.Struct(s).HasPtr(19)
}

func (s SoilOrganicModuleState) SetSomFastDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(19, v.ToPtr())
}

// NewSomFastDelta sets the somFastDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(19, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomFastInput() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(20)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomFastInput() bool {
	return capnp.Struct(s).HasPtr(20)
}

func (s SoilOrganicModuleState) SetSomFastInput(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(20, v.ToPtr())
}

// NewSomFastInput sets the somFastInput field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomFastInput(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(20, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SomSlowDelta() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(21)
	return capnp.Float64List(p.List()), err
}

func (s SoilOrganicModuleState) HasSomSlowDelta() bool {
	return capnp.Struct(s).HasPtr(21)
}

func (s SoilOrganicModuleState) SetSomSlowDelta(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(21, v.ToPtr())
}

// NewSomSlowDelta sets the somSlowDelta field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilOrganicModuleState) NewSomSlowDelta(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(21, l.ToPtr())
	return l, err
}
func (s SoilOrganicModuleState) SumDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s SoilOrganicModuleState) SetSumDenitrification(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNetNMineralisation() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(104))
}

func (s SoilOrganicModuleState) SetSumNetNMineralisation(v float64) {
	capnp.Struct(s).SetUint64(104, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumN2OProduced() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(112))
}

func (s SoilOrganicModuleState) SetSumN2OProduced(v float64) {
	capnp.Struct(s).SetUint64(112, math.Float64bits(v))
}

func (s SoilOrganicModuleState) SumNH3Volatilised() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(120))
}

func (s SoilOrganicModuleState) SetSumNH3Volatilised(v float64) {
	capnp.Struct(s).SetUint64(120, math.Float64bits(v))
}

func (s SoilOrganicModuleState) TotalDenitrification() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilOrganicModuleState) SetTotalDenitrification(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilOrganicModuleState) Incorporation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s SoilOrganicModuleState) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// SoilOrganicModuleState_List is a list of SoilOrganicModuleState.
type SoilOrganicModuleState_List = capnp.StructList[SoilOrganicModuleState]

// NewSoilOrganicModuleState creates a new list of SoilOrganicModuleState.
func NewSoilOrganicModuleState_List(s *capnp.Segment, sz int32) (SoilOrganicModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 128, PointerCount: 22}, sz)
	return capnp.StructList[SoilOrganicModuleState](l), err
}

// SoilOrganicModuleState_Future is a wrapper for a SoilOrganicModuleState promised by a client call.
type SoilOrganicModuleState_Future struct{ *capnp.Future }

func (f SoilOrganicModuleState_Future) Struct() (SoilOrganicModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilOrganicModuleState(p.Struct()), err
}
func (p SoilOrganicModuleState_Future) ModuleParams() SoilOrganicModuleParameters_Future {
	return SoilOrganicModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTemperatureModuleState capnp.Struct

// SoilTemperatureModuleState_TypeID is the unique identifier for the type SoilTemperatureModuleState.
const SoilTemperatureModuleState_TypeID = 0xbd3e199eb9b03758

func NewSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func NewRootSoilTemperatureModuleState(s *capnp.Segment) (SoilTemperatureModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14})
	return SoilTemperatureModuleState(st), err
}

func ReadRootSoilTemperatureModuleState(msg *capnp.Message) (SoilTemperatureModuleState, error) {
	root, err := msg.Root()
	return SoilTemperatureModuleState(root.Struct()), err
}

func (s SoilTemperatureModuleState) String() string {
	str, _ := text.Marshal(0xbd3e199eb9b03758, capnp.Struct(s))
	return str
}

func (s SoilTemperatureModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTemperatureModuleState) DecodeFromPtr(p capnp.Ptr) SoilTemperatureModuleState {
	return SoilTemperatureModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTemperatureModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTemperatureModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTemperatureModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTemperatureModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTemperatureModuleState) SoilSurfaceTemperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTemperatureModuleState) SetSoilSurfaceTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) SoilColumnVtGroundLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtGroundLayer() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtGroundLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtGroundLayer sets the soilColumnVtGroundLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtGroundLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) SoilColumnVtBottomLayer() (SoilLayerState, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return SoilLayerState(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasSoilColumnVtBottomLayer() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTemperatureModuleState) SetSoilColumnVtBottomLayer(v SoilLayerState) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewSoilColumnVtBottomLayer sets the soilColumnVtBottomLayer field to a newly
// allocated SoilLayerState struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilColumnVtBottomLayer() (SoilLayerState, error) {
	ss, err := NewSoilLayerState(capnp.Struct(s).Segment())
	if err != nil {
		return SoilLayerState{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) ModuleParams() (SoilTemperatureModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTemperatureModuleParameters(p.Struct()), err
}

func (s SoilTemperatureModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTemperatureModuleState) SetModuleParams(v SoilTemperatureModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTemperatureModuleParameters struct, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewModuleParams() (SoilTemperatureModuleParameters, error) {
	ss, err := NewSoilTemperatureModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTemperatureModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTemperatureModuleState) NumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s SoilTemperatureModuleState) SetNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

func (s SoilTemperatureModuleState) VsNumberOfLayers() uint16 {
	return capnp.Struct(s).Uint16(18)
}

func (s SoilTemperatureModuleState) SetVsNumberOfLayers(v uint16) {
	capnp.Struct(s).SetUint16(18, v)
}

func (s SoilTemperatureModuleState) VsSoilMoistureConst() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVsSoilMoistureConst() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTemperatureModuleState) SetVsSoilMoistureConst(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewVsSoilMoistureConst sets the vsSoilMoistureConst field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVsSoilMoistureConst(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) SoilTemperature() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasSoilTemperature() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTemperatureModuleState) SetSoilTemperature(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewSoilTemperature sets the soilTemperature field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewSoilTemperature(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) V() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasV() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTemperatureModuleState) SetV(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewV sets the v field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewV(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrix() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrix() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTemperatureModuleState) SetVolumeMatrix(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewVolumeMatrix sets the volumeMatrix field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrix(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) VolumeMatrixOld() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasVolumeMatrixOld() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTemperatureModuleState) SetVolumeMatrixOld(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVolumeMatrixOld sets the volumeMatrixOld field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewVolumeMatrixOld(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) B() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasB() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTemperatureModuleState) SetB(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewB sets the b field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewB(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixPrimaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixPrimaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTemperatureModuleState) SetMatrixPrimaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewMatrixPrimaryDiagonal sets the matrixPrimaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixPrimaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) MatrixSecundaryDiagonal() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasMatrixSecundaryDiagonal() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTemperatureModuleState) SetMatrixSecundaryDiagonal(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewMatrixSecundaryDiagonal sets the matrixSecundaryDiagonal field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewMatrixSecundaryDiagonal(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatFlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTemperatureModuleState) SetHeatFlow(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTemperatureModuleState) HeatConductivity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivity() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTemperatureModuleState) SetHeatConductivity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewHeatConductivity sets the heatConductivity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatConductivityMean() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(12)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatConductivityMean() bool {
	return capnp.Struct(s).HasPtr(12)
}

func (s SoilTemperatureModuleState) SetHeatConductivityMean(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(12, v.ToPtr())
}

// NewHeatConductivityMean sets the heatConductivityMean field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatConductivityMean(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(12, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) HeatCapacity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(13)
	return capnp.Float64List(p.List()), err
}

func (s SoilTemperatureModuleState) HasHeatCapacity() bool {
	return capnp.Struct(s).HasPtr(13)
}

func (s SoilTemperatureModuleState) SetHeatCapacity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(13, v.ToPtr())
}

// NewHeatCapacity sets the heatCapacity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTemperatureModuleState) NewHeatCapacity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(13, l.ToPtr())
	return l, err
}
func (s SoilTemperatureModuleState) DampingFactor() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x3fe999999999999a)
}

func (s SoilTemperatureModuleState) SetDampingFactor(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x3fe999999999999a)
}

// SoilTemperatureModuleState_List is a list of SoilTemperatureModuleState.
type SoilTemperatureModuleState_List = capnp.StructList[SoilTemperatureModuleState]

// NewSoilTemperatureModuleState creates a new list of SoilTemperatureModuleState.
func NewSoilTemperatureModuleState_List(s *capnp.Segment, sz int32) (SoilTemperatureModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 14}, sz)
	return capnp.StructList[SoilTemperatureModuleState](l), err
}

// SoilTemperatureModuleState_Future is a wrapper for a SoilTemperatureModuleState promised by a client call.
type SoilTemperatureModuleState_Future struct{ *capnp.Future }

func (f SoilTemperatureModuleState_Future) Struct() (SoilTemperatureModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTemperatureModuleState(p.Struct()), err
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtGroundLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(1, nil)}
}
func (p SoilTemperatureModuleState_Future) SoilColumnVtBottomLayer() SoilLayerState_Future {
	return SoilLayerState_Future{Future: p.Future.Field(2, nil)}
}
func (p SoilTemperatureModuleState_Future) ModuleParams() SoilTemperatureModuleParameters_Future {
	return SoilTemperatureModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type SoilTransportModuleState capnp.Struct

// SoilTransportModuleState_TypeID is the unique identifier for the type SoilTransportModuleState.
const SoilTransportModuleState_TypeID = 0xb1760f65e652e737

func NewSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func NewRootSoilTransportModuleState(s *capnp.Segment) (SoilTransportModuleState, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12})
	return SoilTransportModuleState(st), err
}

func ReadRootSoilTransportModuleState(msg *capnp.Message) (SoilTransportModuleState, error) {
	root, err := msg.Root()
	return SoilTransportModuleState(root.Struct()), err
}

func (s SoilTransportModuleState) String() string {
	str, _ := text.Marshal(0xb1760f65e652e737, capnp.Struct(s))
	return str
}

func (s SoilTransportModuleState) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilTransportModuleState) DecodeFromPtr(p capnp.Ptr) SoilTransportModuleState {
	return SoilTransportModuleState(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilTransportModuleState) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilTransportModuleState) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilTransportModuleState) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilTransportModuleState) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilTransportModuleState) ModuleParams() (SoilTransportModuleParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilTransportModuleParameters(p.Struct()), err
}

func (s SoilTransportModuleState) HasModuleParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilTransportModuleState) SetModuleParams(v SoilTransportModuleParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewModuleParams sets the moduleParams field to a newly
// allocated SoilTransportModuleParameters struct, preferring placement in s's segment.
func (s SoilTransportModuleState) NewModuleParams() (SoilTransportModuleParameters, error) {
	ss, err := NewSoilTransportModuleParameters(capnp.Struct(s).Segment())
	if err != nil {
		return SoilTransportModuleParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SoilTransportModuleState) Convection() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasConvection() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SoilTransportModuleState) SetConvection(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewConvection sets the convection field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewConvection(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) CropNUptake() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s SoilTransportModuleState) SetCropNUptake(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s SoilTransportModuleState) DiffusionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDiffusionCoeff() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SoilTransportModuleState) SetDiffusionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewDiffusionCoeff sets the diffusionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDiffusionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) Dispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersion() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SoilTransportModuleState) SetDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewDispersion sets the dispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) DispersionCoeff() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasDispersionCoeff() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SoilTransportModuleState) SetDispersionCoeff(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewDispersionCoeff sets the dispersionCoeff field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewDispersionCoeff(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsLeachingDepth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s SoilTransportModuleState) SetVsLeachingDepth(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s SoilTransportModuleState) LeachingAtBoundary() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s SoilTransportModuleState) SetLeachingAtBoundary(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s SoilTransportModuleState) VsNDeposition() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s SoilTransportModuleState) SetVsNDeposition(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s SoilTransportModuleState) VcNUptakeFromLayer() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVcNUptakeFromLayer() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s SoilTransportModuleState) SetVcNUptakeFromLayer(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewVcNUptakeFromLayer sets the vcNUptakeFromLayer field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVcNUptakeFromLayer(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PoreWaterVelocity() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPoreWaterVelocity() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s SoilTransportModuleState) SetPoreWaterVelocity(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(6, v.ToPtr())
}

// NewPoreWaterVelocity sets the poreWaterVelocity field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPoreWaterVelocity(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(6, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) VsSoilMineralNContent() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(7)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasVsSoilMineralNContent() bool {
	return capnp.Struct(s).HasPtr(7)
}

func (s SoilTransportModuleState) SetVsSoilMineralNContent(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(7, v.ToPtr())
}

// NewVsSoilMineralNContent sets the vsSoilMineralNContent field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewVsSoilMineralNContent(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(7, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(8)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3() bool {
	return capnp.Struct(s).HasPtr(8)
}

func (s SoilTransportModuleState) SetSoilNO3(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(8, v.ToPtr())
}

// NewSoilNO3 sets the soilNO3 field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(8, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) SoilNO3aq() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(9)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasSoilNO3aq() bool {
	return capnp.Struct(s).HasPtr(9)
}

func (s SoilTransportModuleState) SetSoilNO3aq(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(9, v.ToPtr())
}

// NewSoilNO3aq sets the soilNO3aq field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewSoilNO3aq(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(9, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) TimeStep() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40) ^ 0x3ff0000000000000)
}

func (s SoilTransportModuleState) SetTimeStep(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v)^0x3ff0000000000000)
}

func (s SoilTransportModuleState) TotalDispersion() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(10)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasTotalDispersion() bool {
	return capnp.Struct(s).HasPtr(10)
}

func (s SoilTransportModuleState) SetTotalDispersion(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(10, v.ToPtr())
}

// NewTotalDispersion sets the totalDispersion field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewTotalDispersion(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(10, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PercolationRate() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(11)
	return capnp.Float64List(p.List()), err
}

func (s SoilTransportModuleState) HasPercolationRate() bool {
	return capnp.Struct(s).HasPtr(11)
}

func (s SoilTransportModuleState) SetPercolationRate(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(11, v.ToPtr())
}

// NewPercolationRate sets the percolationRate field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s SoilTransportModuleState) NewPercolationRate(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(11, l.ToPtr())
	return l, err
}
func (s SoilTransportModuleState) PcMinimumAvailableN() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s SoilTransportModuleState) SetPcMinimumAvailableN(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// SoilTransportModuleState_List is a list of SoilTransportModuleState.
type SoilTransportModuleState_List = capnp.StructList[SoilTransportModuleState]

// NewSoilTransportModuleState creates a new list of SoilTransportModuleState.
func NewSoilTransportModuleState_List(s *capnp.Segment, sz int32) (SoilTransportModuleState_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 12}, sz)
	return capnp.StructList[SoilTransportModuleState](l), err
}

// SoilTransportModuleState_Future is a wrapper for a SoilTransportModuleState promised by a client call.
type SoilTransportModuleState_Future struct{ *capnp.Future }

func (f SoilTransportModuleState_Future) Struct() (SoilTransportModuleState, error) {
	p, err := f.Future.Ptr()
	return SoilTransportModuleState(p.Struct()), err
}
func (p SoilTransportModuleState_Future) ModuleParams() SoilTransportModuleParameters_Future {
	return SoilTransportModuleParameters_Future{Future: p.Future.Field(0, nil)}
}

type ICData capnp.Struct
type ICData_Which uint16

const (
	ICData_Which_noCrop ICData_Which = 0
	ICData_Which_height ICData_Which = 1
	ICData_Which_lait   ICData_Which = 2
)

func (w ICData_Which) String() string {
	const s = "noCropheightlait"
	switch w {
	case ICData_Which_noCrop:
		return s[0:6]
	case ICData_Which_height:
		return s[6:12]
	case ICData_Which_lait:
		return s[12:16]

	}
	return "ICData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ICData_TypeID is the unique identifier for the type ICData.
const ICData_TypeID = 0xf03d8fd1bbe75519

func NewICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func NewRootICData(s *capnp.Segment) (ICData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ICData(st), err
}

func ReadRootICData(msg *capnp.Message) (ICData, error) {
	root, err := msg.Root()
	return ICData(root.Struct()), err
}

func (s ICData) String() string {
	str, _ := text.Marshal(0xf03d8fd1bbe75519, capnp.Struct(s))
	return str
}

func (s ICData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ICData) DecodeFromPtr(p capnp.Ptr) ICData {
	return ICData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ICData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s ICData) Which() ICData_Which {
	return ICData_Which(capnp.Struct(s).Uint16(0))
}
func (s ICData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ICData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ICData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ICData) SetNoCrop() {
	capnp.Struct(s).SetUint16(0, 0)

}

func (s ICData) Height() float64 {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != height")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetHeight(v float64) {
	capnp.Struct(s).SetUint16(0, 1)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ICData) Lait() float64 {
	if capnp.Struct(s).Uint16(0) != 2 {
		panic("Which() != lait")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ICData) SetLait(v float64) {
	capnp.Struct(s).SetUint16(0, 2)
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// ICData_List is a list of ICData.
type ICData_List = capnp.StructList[ICData]

// NewICData creates a new list of ICData.
func NewICData_List(s *capnp.Segment, sz int32) (ICData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[ICData](l), err
}

// ICData_Future is a wrapper for a ICData promised by a client call.
type ICData_Future struct{ *capnp.Future }

func (f ICData_Future) Struct() (ICData, error) {
	p, err := f.Future.Ptr()
	return ICData(p.Struct()), err
}
