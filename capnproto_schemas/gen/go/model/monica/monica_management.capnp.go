// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	math "math"
	strconv "strconv"
)

type ILRDates capnp.Struct

// ILRDates_TypeID is the unique identifier for the type ILRDates.
const ILRDates_TypeID = 0xa1f99f32eea02590

func NewILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func NewRootILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func ReadRootILRDates(msg *capnp.Message) (ILRDates, error) {
	root, err := msg.Root()
	return ILRDates(root.Struct()), err
}

func (s ILRDates) String() string {
	str, _ := text.Marshal(0xa1f99f32eea02590, capnp.Struct(s))
	return str
}

func (s ILRDates) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ILRDates) DecodeFromPtr(p capnp.Ptr) ILRDates {
	return ILRDates(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ILRDates) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ILRDates) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ILRDates) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ILRDates) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ILRDates) Sowing() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasSowing() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ILRDates) SetSowing(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewSowing() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) EarliestSowing() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasEarliestSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ILRDates) SetEarliestSowing(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliestSowing sets the earliestSowing field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewEarliestSowing() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestSowing() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasLatestSowing() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ILRDates) SetLatestSowing(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatestSowing sets the latestSowing field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestSowing() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) Harvest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ILRDates) SetHarvest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewHarvest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestHarvest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasLatestHarvest() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ILRDates) SetLatestHarvest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewLatestHarvest sets the latestHarvest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestHarvest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ILRDates_List is a list of ILRDates.
type ILRDates_List = capnp.StructList[ILRDates]

// NewILRDates creates a new list of ILRDates.
func NewILRDates_List(s *capnp.Segment, sz int32) (ILRDates_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[ILRDates](l), err
}

// ILRDates_Future is a wrapper for a ILRDates promised by a client call.
type ILRDates_Future struct{ *capnp.Future }

func (f ILRDates_Future) Struct() (ILRDates, error) {
	p, err := f.Future.Ptr()
	return ILRDates(p.Struct()), err
}
func (p ILRDates_Future) Sowing() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p ILRDates_Future) EarliestSowing() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p ILRDates_Future) LatestSowing() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p ILRDates_Future) Harvest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p ILRDates_Future) LatestHarvest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(4, nil)}
}

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0xd0290daf8de9f2b0

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List = capnp.EnumList[EventType]

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	return capnp.NewEnumList[EventType](s, sz)
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xb33447204cdf022c

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List = capnp.EnumList[PlantOrgan]

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	return capnp.NewEnumList[PlantOrgan](s, sz)
}

type Event capnp.Struct
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xcf672ab379467704

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event(root.Struct()), err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xcf672ab379467704, capnp.Struct(s))
	return str
}

func (s Event) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event) DecodeFromPtr(p capnp.Ptr) Event {
	return Event(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event) Which() Event_Which {
	return Event_Which(capnp.Struct(s).Uint16(2))
}
func (s Event) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Event) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Event_at) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_at) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_at) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_at) Date() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s Event_at) HasDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_at) SetDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Event_between) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_between) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_between) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_between) Earliest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s Event_between) HasEarliest() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_between) SetEarliest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common_date.Date(p.Struct()), err
}

func (s Event_between) HasLatest() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Event_between) SetLatest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s Event_after) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_after) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_after) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_after) Event() (Event_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Event_Type(p.Struct()), err
}

func (s Event_after) HasEvent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(3)
}

func (s Event) HasParams() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(3, v)
}
func (s Event) RunAtStartOfDay() bool {
	return capnp.Struct(s).Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	capnp.Struct(s).SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Event](l), err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (f Event_Future) Struct() (Event, error) {
	p, err := f.Future.Ptr()
	return Event(p.Struct()), err
}
func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (f Event_at_Future) Struct() (Event_at, error) {
	p, err := f.Future.Ptr()
	return Event_at(p.Struct()), err
}
func (p Event_at_Future) Date() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (f Event_between_Future) Struct() (Event_between, error) {
	p, err := f.Future.Ptr()
	return Event_between(p.Struct()), err
}
func (p Event_between_Future) Earliest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_between_Future) Latest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (f Event_after_Future) Struct() (Event_after, error) {
	p, err := f.Future.Ptr()
	return Event_after(p.Struct()), err
}
func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xe5484dc513ee11e0

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List = capnp.EnumList[Event_ExternalType]

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	return capnp.NewEnumList[Event_ExternalType](s, sz)
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0xb2bf3a5557791bc1

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List = capnp.EnumList[Event_PhenoStage]

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	return capnp.NewEnumList[Event_PhenoStage](s, sz)
}

type Event_Type capnp.Struct
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xb91010c363e568a4

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type(root.Struct()), err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xb91010c363e568a4, capnp.Struct(s))
	return str
}

func (s Event_Type) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event_Type) DecodeFromPtr(p capnp.Ptr) Event_Type {
	return Event_Type(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event_Type) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(capnp.Struct(s).Uint16(2))
}
func (s Event_Type) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_Type) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_Type) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_Type) External() Event_ExternalType {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List = capnp.StructList[Event_Type]

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Event_Type](l), err
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (f Event_Type_Future) Struct() (Event_Type, error) {
	p, err := f.Future.Ptr()
	return Event_Type(p.Struct()), err
}

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0xcb20e21466098705

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0xcb20e21466098705, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Params_Sowing capnp.Struct

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0xc6880d1c13ec14dc

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing(root.Struct()), err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0xc6880d1c13ec14dc, capnp.Struct(s))
	return str
}

func (s Params_Sowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Sowing) DecodeFromPtr(p capnp.Ptr) Params_Sowing {
	return Params_Sowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Sowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Sowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Sowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Sowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Sowing) Cultivar() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_Sowing) HasCultivar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Sowing) CultivarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_Sowing) SetCultivar(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_Sowing) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := capnp.Struct(s).Ptr(1)
	return crop.Crop(p.Interface().Client())
}

func (s Params_Sowing) HasCrop() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List = capnp.StructList[Params_Sowing]

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Params_Sowing](l), err
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (f Params_Sowing_Future) Struct() (Params_Sowing, error) {
	p, err := f.Future.Ptr()
	return Params_Sowing(p.Struct()), err
}
func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop(p.Future.Field(1, nil).Client())
}

type Params_AutomaticSowing capnp.Struct

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xd1bfc1c9617d9453

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing(root.Struct()), err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xd1bfc1c9617d9453, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing {
	return Params_AutomaticSowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Params_Sowing(p.Struct()), err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(capnp.Struct(s).Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List = capnp.StructList[Params_AutomaticSowing]

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return capnp.StructList[Params_AutomaticSowing](l), err
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing(p.Struct()), err
}
func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}
func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp capnp.Struct

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x846f567433b186d1

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp(root.Struct()), err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x846f567433b186d1, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing_AvgSoilTemp) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing_AvgSoilTemp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing_AvgSoilTemp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List = capnp.StructList[Params_AutomaticSowing_AvgSoilTemp]

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_AutomaticSowing_AvgSoilTemp](l), err
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

type Params_Harvest capnp.Struct

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0x8feb941d70f2a468

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest(root.Struct()), err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0x8feb941d70f2a468, capnp.Struct(s))
	return str
}

func (s Params_Harvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest) DecodeFromPtr(p capnp.Ptr) Params_Harvest {
	return Params_Harvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest) Exported() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List = capnp.StructList[Params_Harvest]

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Harvest](l), err
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (f Params_Harvest_Future) Struct() (Params_Harvest, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest(p.Struct()), err
}
func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0xa9a9bc941e963701

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List = capnp.EnumList[Params_Harvest_CropUsage]

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	return capnp.NewEnumList[Params_Harvest_CropUsage](s, sz)
}

type Params_Harvest_OptCarbonMgmtData capnp.Struct

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0xaf49ab9bbe76e375

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData(root.Struct()), err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0xaf49ab9bbe76e375, capnp.Struct(s))
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest_OptCarbonMgmtData) DecodeFromPtr(p capnp.Ptr) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest_OptCarbonMgmtData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest_OptCarbonMgmtData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest_OptCarbonMgmtData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest_OptCarbonMgmtData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List = capnp.StructList[Params_Harvest_OptCarbonMgmtData]

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[Params_Harvest_OptCarbonMgmtData](l), err
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (f Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

type Params_AutomaticHarvest capnp.Struct

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xf805d22fabb80702

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest(root.Struct()), err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xf805d22fabb80702, capnp.Struct(s))
	return str
}

func (s Params_AutomaticHarvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticHarvest) DecodeFromPtr(p capnp.Ptr) Params_AutomaticHarvest {
	return Params_AutomaticHarvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticHarvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticHarvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticHarvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticHarvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest(p.Struct()), err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(capnp.Struct(s).Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List = capnp.StructList[Params_AutomaticHarvest]

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[Params_AutomaticHarvest](l), err
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (f Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticHarvest(p.Struct()), err
}
func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting capnp.Struct

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0x8460dac6abff7ed9

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting(root.Struct()), err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0x8460dac6abff7ed9, capnp.Struct(s))
	return str
}

func (s Params_Cutting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting) DecodeFromPtr(p capnp.Ptr) Params_Cutting {
	return Params_Cutting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Cutting_Spec_List(p.List()), err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List = capnp.StructList[Params_Cutting]

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Cutting](l), err
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (f Params_Cutting_Future) Struct() (Params_Cutting, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting(p.Struct()), err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0xe444f780b29541a7

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List = capnp.EnumList[Params_Cutting_CL]

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	return capnp.NewEnumList[Params_Cutting_CL](s, sz)
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0x94d32947f136655e

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List = capnp.EnumList[Params_Cutting_Unit]

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	return capnp.NewEnumList[Params_Cutting_Unit](s, sz)
}

type Params_Cutting_Spec capnp.Struct

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0xfae5dcfccbb93a23

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec(root.Struct()), err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0xfae5dcfccbb93a23, capnp.Struct(s))
	return str
}

func (s Params_Cutting_Spec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting_Spec) DecodeFromPtr(p capnp.Ptr) Params_Cutting_Spec {
	return Params_Cutting_Spec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting_Spec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting_Spec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting_Spec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting_Spec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(capnp.Struct(s).Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(capnp.Struct(s).Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(capnp.Struct(s).Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List = capnp.StructList[Params_Cutting_Spec]

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_Cutting_Spec](l), err
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (f Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting_Spec(p.Struct()), err
}

type Params_MineralFertilization capnp.Struct

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xa363d226e178debd

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization(root.Struct()), err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xa363d226e178debd, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization {
	return Params_MineralFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_MineralFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_MineralFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List = capnp.StructList[Params_MineralFertilization]

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_MineralFertilization](l), err
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization(p.Struct()), err
}
func (p Params_MineralFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_MineralFertilization_Parameters capnp.Struct

// Params_MineralFertilization_Parameters_TypeID is the unique identifier for the type Params_MineralFertilization_Parameters.
const Params_MineralFertilization_Parameters_TypeID = 0xc75b5ef2e9b05c2d

func NewParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func NewRootParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func ReadRootParams_MineralFertilization_Parameters(msg *capnp.Message) (Params_MineralFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_MineralFertilization_Parameters(root.Struct()), err
}

func (s Params_MineralFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xc75b5ef2e9b05c2d, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization_Parameters {
	return Params_MineralFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_MineralFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_MineralFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_MineralFertilization_Parameters) Carbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization_Parameters) SetCarbamid(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) Nh4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_MineralFertilization_Parameters) SetNh4(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) No3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_MineralFertilization_Parameters) SetNo3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_MineralFertilization_Parameters_List is a list of Params_MineralFertilization_Parameters.
type Params_MineralFertilization_Parameters_List = capnp.StructList[Params_MineralFertilization_Parameters]

// NewParams_MineralFertilization_Parameters creates a new list of Params_MineralFertilization_Parameters.
func NewParams_MineralFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[Params_MineralFertilization_Parameters](l), err
}

// Params_MineralFertilization_Parameters_Future is a wrapper for a Params_MineralFertilization_Parameters promised by a client call.
type Params_MineralFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Parameters_Future) Struct() (Params_MineralFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

type Params_NDemandFertilization capnp.Struct

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0xc7c14e92e0cd461c

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization(root.Struct()), err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0xc7c14e92e0cd461c, capnp.Struct(s))
	return str
}

func (s Params_NDemandFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_NDemandFertilization) DecodeFromPtr(p capnp.Ptr) Params_NDemandFertilization {
	return Params_NDemandFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_NDemandFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_NDemandFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_NDemandFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_NDemandFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_NDemandFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_NDemandFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_NDemandFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return capnp.Struct(s).Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	capnp.Struct(s).SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List = capnp.StructList[Params_NDemandFertilization]

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Params_NDemandFertilization](l), err
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (f Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_NDemandFertilization(p.Struct()), err
}
func (p Params_NDemandFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization capnp.Struct

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xb492838c7fed50b0

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization(root.Struct()), err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xb492838c7fed50b0, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization {
	return Params_OrganicFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}

func (s Params_OrganicFertilization) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization) SetParams(v Params_OrganicFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List = capnp.StructList[Params_OrganicFertilization]

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Params_OrganicFertilization](l), err
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization(p.Struct()), err
}
func (p Params_OrganicFertilization_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization_OrganicMatterParameters capnp.Struct

// Params_OrganicFertilization_OrganicMatterParameters_TypeID is the unique identifier for the type Params_OrganicFertilization_OrganicMatterParameters.
const Params_OrganicFertilization_OrganicMatterParameters_TypeID = 0x95cdc661a6600137

func NewParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func NewRootParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func ReadRootParams_OrganicFertilization_OrganicMatterParameters(msg *capnp.Message) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_OrganicMatterParameters(root.Struct()), err
}

func (s Params_OrganicFertilization_OrganicMatterParameters) String() string {
	str, _ := text.Marshal(0x95cdc661a6600137, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_OrganicMatterParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_OrganicMatterParameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_OrganicMatterParameters {
	return Params_OrganicFertilization_OrganicMatterParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNO3Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNO3Content(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomCarbamidContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomCarbamidContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMFast(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) NConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// Params_OrganicFertilization_OrganicMatterParameters_List is a list of Params_OrganicFertilization_OrganicMatterParameters.
type Params_OrganicFertilization_OrganicMatterParameters_List = capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters]

// NewParams_OrganicFertilization_OrganicMatterParameters creates a new list of Params_OrganicFertilization_OrganicMatterParameters.
func NewParams_OrganicFertilization_OrganicMatterParameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_OrganicMatterParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters](l), err
}

// Params_OrganicFertilization_OrganicMatterParameters_Future is a wrapper for a Params_OrganicFertilization_OrganicMatterParameters promised by a client call.
type Params_OrganicFertilization_OrganicMatterParameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_OrganicMatterParameters_Future) Struct() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

type Params_OrganicFertilization_Parameters capnp.Struct

// Params_OrganicFertilization_Parameters_TypeID is the unique identifier for the type Params_OrganicFertilization_Parameters.
const Params_OrganicFertilization_Parameters_TypeID = 0xba0c11cf818d29fd

func NewParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func NewRootParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func ReadRootParams_OrganicFertilization_Parameters(msg *capnp.Message) (Params_OrganicFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_Parameters(root.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xba0c11cf818d29fd, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_Parameters {
	return Params_OrganicFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_Parameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization_Parameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization_Parameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_OrganicFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_OrganicFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Params_OrganicFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Params_OrganicFertilization_Parameters_List is a list of Params_OrganicFertilization_Parameters.
type Params_OrganicFertilization_Parameters_List = capnp.StructList[Params_OrganicFertilization_Parameters]

// NewParams_OrganicFertilization_Parameters creates a new list of Params_OrganicFertilization_Parameters.
func NewParams_OrganicFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Params_OrganicFertilization_Parameters](l), err
}

// Params_OrganicFertilization_Parameters_Future is a wrapper for a Params_OrganicFertilization_Parameters promised by a client call.
type Params_OrganicFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Parameters_Future) Struct() (Params_OrganicFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}
func (p Params_OrganicFertilization_Parameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Tillage capnp.Struct

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0xaa49811a4e3e2c59

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage(root.Struct()), err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0xaa49811a4e3e2c59, capnp.Struct(s))
	return str
}

func (s Params_Tillage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Tillage) DecodeFromPtr(p capnp.Ptr) Params_Tillage {
	return Params_Tillage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Tillage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Tillage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Tillage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Tillage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List = capnp.StructList[Params_Tillage]

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Params_Tillage](l), err
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (f Params_Tillage_Future) Struct() (Params_Tillage, error) {
	p, err := f.Future.Ptr()
	return Params_Tillage(p.Struct()), err
}

type Params_Irrigation capnp.Struct

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0xd90939a58e404ff8

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation(root.Struct()), err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0xd90939a58e404ff8, capnp.Struct(s))
	return str
}

func (s Params_Irrigation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation) DecodeFromPtr(p capnp.Ptr) Params_Irrigation {
	return Params_Irrigation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s Params_Irrigation) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Irrigation) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s Params_Irrigation) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List = capnp.StructList[Params_Irrigation]

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Irrigation](l), err
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (f Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation(p.Struct()), err
}
func (p Params_Irrigation_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Irrigation_Parameters capnp.Struct

// Params_Irrigation_Parameters_TypeID is the unique identifier for the type Params_Irrigation_Parameters.
const Params_Irrigation_Parameters_TypeID = 0xaec9e089e87f1599

func NewParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func NewRootParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func ReadRootParams_Irrigation_Parameters(msg *capnp.Message) (Params_Irrigation_Parameters, error) {
	root, err := msg.Root()
	return Params_Irrigation_Parameters(root.Struct()), err
}

func (s Params_Irrigation_Parameters) String() string {
	str, _ := text.Marshal(0xaec9e089e87f1599, capnp.Struct(s))
	return str
}

func (s Params_Irrigation_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation_Parameters) DecodeFromPtr(p capnp.Ptr) Params_Irrigation_Parameters {
	return Params_Irrigation_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation_Parameters) NitrateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation_Parameters) SetNitrateConcentration(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation_Parameters) SulfateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Irrigation_Parameters) SetSulfateConcentration(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Params_Irrigation_Parameters_List is a list of Params_Irrigation_Parameters.
type Params_Irrigation_Parameters_List = capnp.StructList[Params_Irrigation_Parameters]

// NewParams_Irrigation_Parameters creates a new list of Params_Irrigation_Parameters.
func NewParams_Irrigation_Parameters_List(s *capnp.Segment, sz int32) (Params_Irrigation_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_Irrigation_Parameters](l), err
}

// Params_Irrigation_Parameters_Future is a wrapper for a Params_Irrigation_Parameters promised by a client call.
type Params_Irrigation_Parameters_Future struct{ *capnp.Future }

func (f Params_Irrigation_Parameters_Future) Struct() (Params_Irrigation_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation_Parameters(p.Struct()), err
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xbfda1920aff38c07

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "model/monica/monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "model/monica/monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_managementAt_Results capnp.Struct

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xf32d7a3fdc567bdb

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results(root.Struct()), err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xf32d7a3fdc567bdb, capnp.Struct(s))
	return str
}

func (s Service_managementAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_managementAt_Results) DecodeFromPtr(p capnp.Ptr) Service_managementAt_Results {
	return Service_managementAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_managementAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_managementAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_managementAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_managementAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Event_List(p.List()), err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List = capnp.StructList[Service_managementAt_Results]

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_managementAt_Results](l), err
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (f Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	p, err := f.Future.Ptr()
	return Service_managementAt_Results(p.Struct()), err
}

const schema_93337c65a295d42f = "x\xda\xccZ}t\x14\xd7u\xbfwf\x97\xd5\xd7f" +
	"5\x9a\x95\x11\x18\xbcF\x86\xc6(\x80\x01\x91\x12\xeb\xa4" +
	"\x15\xab\x0f,Qdi\xb4\xc26\xd4\xb8\x1e\xad\x9eV" +
	"\xe3\xec\xce,\xb3o\x05\"\x10\x05\x8a[\xe0\x98:\xb8" +
	"P\x7f4i\x09\xb1\x9b\x82iq\x88\xdd\x1a\x1f\x13\x1b" +
	"7v\xb0\x89O\x82\x8d\xcf\xa9\x1d\xa7\xb1\xd3\xb8\xb1\xdb" +
	"$\xe7\xd8>=\x89S\xc7\xd3s\xdf\xec\xee\x8cV\x02" +
	"K\xfe\xa3\xa7\xfc\xb3\xcb}o\xde\xdew\xdf}\xbf\xfb" +
	"\xbb\xbf\xd1\xf2\x9fW\xad\x09\xac\x08\xff\xf3\x15 %*" +
	"08\xcby\xf5K\xce\xc3\xcf\xbdv\xfb\x1e\xd0\x96 " +
	":\xc1?\xaf\x1c\x8e\xfe\xf4\xea\xf3\x10\xc4\x10@s\xbc" +
	"\xfa(\xaa\x1b\xabW\x03\xa8c\xd5[\x01\x9d\x0b\x7f\xf6" +
	"\xadf~\x93\xb5\x07\xb4\xcf\xa3\xec$\x0e\xed\xd4\x9f?" +
	"\xfb\xd4\x05\x08\xd0\xe4\x0f\xaa\xdb$uNM\x08@\xad" +
	"\xaf9\x09\xe8\x8c<\xf8^v\xfe\xa1\xff\xba{\xca\xa5" +
	"\x9f\xaf9\x8a\xea\x9b5\x9f\x06P1LK\xdf\xc6~" +
	"\xff\xdd\x1b\x16\xbf|\x08\x94U\x92\xe7\x15`3\x0b\xbf" +
	"\x80\xea\xae0\xad\xbb3\xdc\x0b\xe8\xac\xc6\xdb\xffN\x7f" +
	"\xee\xc5\xc3\xa0\xc51\xec<\xd2\xf7\xcb\xf1\xbb\xfe\xf4\x9e" +
	"G]'\x0e\x87_\x90\xd4\xb34\xb9\xf9L\xf8'\x12" +
	"\xa0\xf3\x95EG~\xb5\xf2o?\xf8:(\x8b\xd0\xb9" +
	"\xee\xe2\xe1\xa3lG\xf3_B0HSP\xb1Q\xad" +
	"W\xe8\xab\xa2\xc4\x10\xd09\xf3o\xdb\xde\xfc\xbd\x97\x92" +
	"\xdf\x98\xd2\xe7\xa5uU\x92\xdaS7\x1b@\xddXG" +
	">\xe3\xea\xbf\xba\xea\xd0\x93\xc7\x8e\x09\x9fK\xdb\x05l" +
	">]\xf7\x1e\xaa\xaf\xd4\x91\xcf\x17\xeaV\x03:\x1b\x97" +
	"\xfc\xe1\x8dswu\x1f/[W\xf8\xfcf\xddQT" +
	"?\x10\x93\xff\xbb\xae\x15\xd0\xb9\xbf~\xfc\xed}o<" +
	"\xff\x8f\xa0\xadF\xc9\xf9M\xef\x9a\xbfx\xe8\xfa\xcaW" +
	"\xdd\xc9\xf5j\x9d\xa4~V\xa5\xc9+T\xf2!\xff\xef" +
	"\xa3\xdf\xf9\xeb\x87\xbbO\x82\xb6\x0a\x83\x9e\x13b\xf2\xd7" +
	"\xd4\x95\x92z\x86&7\x9fVo\xa6\xfd\x9d\xbdr\xec" +
	"\xe6\x0d-O\x9d\x02\xe53\x92\x13\xd8\xbav\xec\xdbM" +
	"\xa9\x1f\x90\xc7\x9f\xad?\x85jO=\xad\xdb]\x9f\x02" +
	"t\x96H?Y\x7f\xf5\x0d\xab\xbe\x0d\xca\"\xc9\x8b\x1b" +
	"`\xf3\xce\xfa\xdd\xa8\x1e\x143\x0f\xd4\xdf\x0b\xe8\x9d\x80" +
	"\xb6\x04\xa5\xf2\x98]\xa8\xaf\x92\xd4w\xeb\xe9\x9c\x95+" +
	"(+\x1e\x1cy+\xf9/\xb5\xb5\xa7A\xfb\x0c\xa2\xe7" +
	"BGHBl\xfe\x87+v\xa3z\xf6\x0aZ\xfb\xcc" +
	"\x15\xb4\xbb\xdf->\xb0\xeb\x07J\xcd\x13\xa0\xc4}?" +
	"\x14\x94i\xe9\x05\xb3\x07%\xb5s6M\x8e\xcf\xa6\xa5" +
	"o\xbb\xe5\x0b\x9f\xfa\xe2\xc3\xff\xf4\x9d\xb2\xa5\xeb\x03!" +
	"\x04h~u\xf6~\x04T\xdf\x99M\xeb\x86\xeez\xff" +
	"\xe4\xd5s^{\x0a\x94E\xf2\x84\xddu6\xdc\x81\xea" +
	"\xc6\x06ZtC\xc3\x0d\xea\xae\x86\xd9\x00\xce\xeb\xd1_" +
	"\xa8\xf3\xc2{\x9f+\xcf\x0a\x89\xdc\xd8\xd2\xf0\x00\xaa\xfb" +
	"\xc4\x13w6\x90\x1bKo}\xe4\x9d\xf7n\xfb\xe3\xef" +
	"Q~\xca^F\xb9\xb3\x17\xcd\x19\x94\xd4\xee9\xf4\xb5" +
	"s\x8eH\xb9yk_|\xe3\x9e\x1b\xcf~\x8f\x16\x97" +
	"\xcb\xc3\xb7qn\x95\xa4\x8e\xcd\xa5\xc5\xf3s\x7f\x0e\xe8" +
	"|\xf8\xad\xfbfG\xfe\xe6\x86sS\xef\xb1\xe7\xca\x07" +
	"h\x8f\x9b\xaf\xa4=\x96\x96\x9a\x90\xf9\"1\xce\\9" +
	"\x88\xea\x85+\xbf\x09\xb2\xb7\x84\xb6\x08}\xd3:\x03!" +
	"\x19\xb1\xb9g\xde&T\xf5y\xab\x01\x9a\xf7\xcd\xbb\x9b" +
	"\xdc}\xe4\xbdw\x0e\x9c\x0c/\xfe\xe1\xa4\xbc8;\x7f" +
	";\xaa\xaf\xcc\x17\x87>\xff\xd34\xb5\x84\x0f\xda\x12\xac" +
	"(\x0f\xdbCW\xfd\x14\xd5\xb3W\xcd\x06h~\xf1\xaa" +
	"\xd5tSK\x89>%\x14-x\x02\xd5\x8d\x0b\xe8\xee" +
	"\xb1\x05\xb4\xbb\xdf\xfeQ\xfd\xfb\xe7\xf9\xda\x1fM\x1d\x88" +
	"\xb3\x0bl\x0a\xc4\x8b\x0b\xe8>}3~\xf8\xd4\x97\x7f" +
	"\xdd\xf1\xb3I\xd0\xf2KZ4\xd8H\xd1\xc5F\xba\xa6" +
	"o(\xbfR\x9f\xed\xe9zk\xd2\xf5\x086>\x83\xea" +
	"|1sN\xe3\xaf\x01\x9d\x1f}\xf1\xa6\xd7[\xb7/" +
	"}\x1f\x94\xa5\x08\x05\x1f\x9fm\xac\x93\x00\xd5\x1f7\xd2" +
	"\x8fJ\xa1\xc7\x1f\xbe\xee\xa5\xe0oh7\xc1\xf2\xdd\x84" +
	"\xaf\xf9OT\x17_#\x12\xe2\x1aq1\xafi9}" +
	"\xfe\xc3\xd7\xdf\xfa-]c\xd9sR\x9c\xd6\x81\x85/" +
	"\xa0zl\xa1\x88\xda\xc2\x18\x82\x03i'c\x0d\xb1\xf4" +
	"u\x19+h\x1aI\xfd\xba\x8cE\x1f\x7f\x92\xd1M=" +
	"\xc52\xcc\xe4\xcb\x92z\xd6\xcc\xb6\xf4\xe9\xb6\x9e\xc9-" +
	"k\xcfs\x1e2\xcc\x94V\x83\xfeh(s}\xa8\x1b" +
	"n\xf2|P*\x9b\xe4\xf6\xf5\x91\x0d\xa6\xc1#\x89," +
	"Kj\x15r\x00 \x80\x00\xca\xe2A\x00\xedZ\x19\xb5" +
	"\x0e\x09\x11\xa3\x88\x00+\xe2U\x08\xa0\xad\x97Q\xbbE" +
	"B'\x99\xe7\xdc0S\x09\x08eY\x12?\x05\xd8'" +
	"#\xd6z\x8b\x03\x92\x91\xa6\xf5\xe8\xdb\xe299gd" +
	"\x8c\xb4\xce\x0d\xcb\xec\xd79\xebcv\x92\x99\\O1" +
	"\x00\xac\x06\x09\xab\x01K\x9b\xad\x98\xcef\xe3yne" +
	"tn$\x13\xd6V\xc3L-\x8b\x8f\xa6\x12\x96\x91\x1e" +
	"`\x99,\xf4!j5\xee^\x10\x95\xceS\x00Z\x97" +
	"\x8c\xda\x80\x84\x0a\x06\xc4f\x14\xed8\x806 \xa3v" +
	"\xbb\x84\x8a$EQ\x02P6\xbf\x00\xa0\x0d\xc9\xa8e" +
	"%tr\x96\x91\xee`Y\x8e#k-;>\xca\xec" +
	"\x98\x9e2\xcc\x94\xeb\xad\xd3,\xfe\xbd\xdc\x0a\x00\xce\x90" +
	">\x96\xeb6\x13\x16\xba?\x7f\xb3\x111\x87\xac\xad\x18" +
	"\x02\x09C@\x0b\x91\x83\xdd\xc3R|\xd0\x1ae~?" +
	"'o}Z\xe7\xdc\xa5\xdb\xa3!\x96\xe3Z\x05\xfa\x8b" +
	"Se\xbfW%\x94\xca{\x9cv\xdb\xcan\xc8\xe9)" +
	"@\xe6\xf4fy\xbbn\x0fZh\xf6\xa42\xbcC\xe7" +
	"\xa8\x17O\x1bQY\xbc\xaep\xda\xabJ\xa7\xad\xac\xd8" +
	"\x0d\xa0-\x97Q\xfb\xbc\x84\x0e\xdb\x96\xb5l\xce\x86\x80" +
	"\x8e\x15\xa4 R.[\xee\x9a=\xe8\xae\xa8\x03\xd6z" +
	"\x0e\x00b\xado_\xb3\xa6\x9b\xbft\x94\x94\x90\xe0\x1e" +
	"\xa28\x96\xf9\x9bh9eN\x1b\x00J\x8a\xd2\x08\xe0" +
	"d\x0b\xf9\x03r\x8a\x8d\x0f\x1aVF\xcf\xe5Bi\xdd" +
	"(\xfd`\xd5t~\xb0\xd7N\xe9\xa6\x91\\\xcbln" +
	"\xa4\x8d\xed\";\x8b\xc6\x1e\x9dsf\x8b\x89\x8c3;" +
	"\xe7:\xb4\xaaxC\xd4\xcdx\x14 q;\xca\x98H" +
	"#%\x96\x1b7\xd5@\x1b 1Bv\x8e^n\xa9" +
	"[\x84=K\xf6\x1dd\x97\xe5(\xca\xc4\xb8\xf0\x01\x80" +
	"\xc4\x0e\xb2\xef%{ \x10\xc5\x00\x15\x19|\x06 \xb1" +
	"\x97\xec\x87\xc8\x1e\x0cF1\x08\xa0\x1e\x14\xf6Cd?" +
	"B\xf6Y\xb3\xa28\x0b@\xfd\x1a\xee\x07H\x1c!\xfb" +
	"\x09\xb2\x87BQ\xc2 \xf5\x98\xb0\x9f \xfb\xe3d\xaf" +
	"\xa8\x88b\x05\x80\xfa\x18n\x07H<J\xf6\xa7\xc9^" +
	"Y\x19\xc5J*\xc8\xc2\xfe$\xd9\xcf\x91\xbd\xaa*\x8a" +
	"U\x00\xea\xb3x\x1c q\x8e\xec\x17\xc9^]\x1d\xc5" +
	"j\">\xc2~\x91\xeco\x90\xbd\xa6&\x8a5\x00\xea" +
	"\x8f\xc5:\xaf\x93\xfdm\x94\xd0\xd1\xadL\x87=\xd6\xa3" +
	"#\x85\xb5\xdd2y\x88\x99\xbc\x94\xff\xba\x95\xb9\xb1k" +
	"U\xbb\x051\x93\x97\xdb{\x9b\xa7\xb4S\xee\xe9\x981" +
	"\x86h1&O\x1cL\xa4\xad\xad\x1d\x12K\xb6[l" +
	"x8\xc1usH\xb7\x87\xc0?c\xad\x9e\xe3\x97\x99" +
	"\x91\xd5m\x1e\xef\xed\x19@+\xde\xdbC\xab\xc1%\xc6" +
	"h\x1d\xdfX\x92\xe0\xcd\xb0\xe2\xd0\xea>6\xe5\x00=" +
	"S\xbeZ\x02\xd3\xd6\xd6\x01+\xd1\xd3\x16\x99\xf0\xdc\xe4" +
	"\xe1\x09O\x9b\xed\x96I7\x01Zm\x91\xbe\x93\x10%" +
	"p\xd9\x8b\xd0\xbd\xbe?\xd6\xa1s\x96\xa3\xe4\x8e\x96\xe0" +
	"\x7fg\x0b\x80\xb6MFm\x8f\x97\xd9\xca\xae\xed\x00\xda" +
	"\x97e\xd4\xee\xf2A\xe6\xbe;\x00\xb4\xbd2j\x87\xbc" +
	"\x9cV\x0e\xb6\x01hw\xc9\xa8\xdd\xe7%\xb4r\xd8\x06" +
	"\xd0\x0e\xc9\xa8\x1d\x91\xb0\xd5\xc5D\xacu\x0e(\x8d\xf2" +
	"\x89\x8f\xfe\xe3\xde\"`0\xddN\x1b,\xc7\xa15q" +
	"\xa9)i\xf2\x97',\x88L=a|D\xb7GY" +
	"\x8e_\xf2\xd1.\x1db\x97\x9aQ\x0c[h:\xf8\xd1" +
	"c\x98\xcc\xd6\xd3\x13\xf0\x03@\x0b\xa0\x8f\x1d*\xb8\xc9" +
	")\xa2\x08\xc8v\xce_d\xfb\xa7\x80]\x8a\xfc\x12\x19" +
	"\xb5\xcfI\xee\xd9\x1b\xdc\xb0\x00M\xac\xf5\x96t]m" +
	"\xd53V\xde\x97\xf53\x82\xda.7D\xcb\xa8F\xc4" +
	"\xa8H0J\x80\x0aq\xa4\xca\xa0\x80\xdb\xf0=\x00N" +
	"\xcaf\xcc\xec\xd1M\x08\xe5m\xe6\x14\x80\xb6\x0fmk" +
	"(\x9f\xe4\x86\x85\xe6\xcc*\xd7\x80\x91N\x87\x0a?\x16" +
	"(\x95\x9f\xf0J\x00\xadBF-*al\x88e\xf9" +
	"\xc8\x14EvF\x07\xd3m\xdbF\xca\x85\xf3\x12\x82\xa3" +
	"\xc8q_\xf4\x8f{\x91.\xe5\xf8g\xc9\xf89\x97\xf7" +
	"8\xa6\xc1m\x9d\xb3vt\xaf\x98\xadG&\xdc\xb0\\" +
	">=|\x99\xe1\x199\\<\x8fb\x9d\xa62\x1d\x13" +
	"U\x95\x9cn(\x85\xea~\xe22_\x95Q\xfb\xfb\xa2" +
	"\xd3\x88\xcaCD[N\xc8\xa8=N\x17\x13\xa3(!" +
	"*\x8fQr=*\xa3\xf64]L)\x8a2\xa2r" +
	"f\x13\x80\xf6\xa4\x8c\xda9\xba\x98r\x14\x03\x88\xca\xb3" +
	"\xb4\xe7s2j\x17\xa9\xcc\x04\xa2\x18DT.\xbc\x04" +
	"\xa0\xfd\xab\x8c\xda\xcf\xa4R\xa5\xb7\x90\xd0&\xc7\xec\xd1" +
	"\x98\x8b5\x08\x92`\x02I\xdb\xcavg\xb2\xba\x94\xe4" +
	"\xbdfW>\x93\xcf\xb5\xe9i\xddL\xfa\xc9]\xd2c" +
	"#\x18\xf1X\x0b`0BK\xd8,g\x0c\xe5Y\x17" +
	"\xc8lK\xe9\x19\xabP\x9f\xb1p\xc1X\xc4\xee\xf2\x0d" +
	"g\xf4m\xfd\xf4\x98\x94g\xfd,i\x8d2{\xad\xad" +
	"\xbbi9Cb\xd59J\xdf\xfbF\x98i\xc5\x12\xbc" +
	"\x90\xa0\xb5\xe26\xd0%ET\x16\xf5\x0b\xf2\xb1`\x1d" +
	"\x00\xca\xca\xfcu\x00\x0e\xcb0;\xc5\xcc$\xf1\xab\xe1" +
	"\xb4\xb5\x95\xd9\x86\x09\x98rt\x93\x8f\xb0\x9c\x91\x13Y" +
	"\xab\xf3\xbcm\xf01\x7f\x06\x7f\xccMI\xeb&\x17\x1c" +
	"D\x10\x8e\x06\xe1D\xbcI8q}\x93pb\xc5J" +
	"\xe1\xc4b\xfa\x08(\x0bZ(\x88\xca\x9c\x95\x00\x11\xdb" +
	"\xb2x$\xcd\xf4\xe1Xn\xc4\xb2xl\xd8\xce\x1b\xbc" +
	"5\xc7\xed\xfc\x17x,\x97O\xe9\xf6\xcc\xd2r*\x82" +
	"Dw\x15}\xf2\x8cR\xf9\x8c\xaf\x7f\x0for\x8a\x04" +
	"J.gP\xc5\xaf\x84\x825\xa5{\xd8I\x88\xb7F" +
	"Fm\xbd\x87\x82\xddd\xeb\x90Q\xeb\xa3\x8c^\xe3f" +
	"t\x8f\xed\xb5\x1f\xadY\xe1 \xd6z?=5*\x1a" +
	"f\xd2\xb2\xb3\x96\x0de);\x93\xbc\x18\x18\xcb2(" +
	"\x80G\x8d\xe3\xb8\xe8\xe1\xa3\xcca\xfc\xc8)\xa0\xf7\xba" +
	"\x09\xa4\x993\xdb\xd4\xd3D\x9a#^\xcf\x09\x88\x11\xe1" +
	"\x98\x7f\xb4$\xd8\x14Fg\xd4\x0aMIc\x0b\xc1\x0e" +
	"1;\xe7k\x87\xca\xe2]\xc2\xbd\xee\xb9\xfe\x80\x17j" +
	"{O\x93\xd78y\x01/\x1d\xbc\x1bp\xd9\x18\xc2\x1a" +
	"\x90\xb0\x060b\xea\x19V\xfc\xcf\x8c\"\xac\x0fsf" +
	"\x8b\"\x10\xa8E\xc1sEvk\x0be\xd4\x96\x93\x9b" +
	"\x92 \xb9\xca\xd2&/\xea1F\x8fb\xad'5\xb9" +
	"\x0eE\xa8\x1d+5_\xd3\xa3A\x09fGF\x8dd" +
	"\xa1.\x05\x01\x9c\xff\xb9\xfb\xfb\xd7/\xff\xf0\xdd_`" +
	"Q\x01P\x94;@R*CN\xf1a\x88\x98<\xce" +
	"\xd7\xa0(\xf7\xaft}u\xe3\xf9\x0b'O\xcd\xe0\x9e" +
	"\xbbgG,G6SeG\xb4\xce;\x8d\"\xc8\xf7" +
	"\xdc\xe1e\xbf\x0b\xf2\x00\xca\x06\x8aG\x9f\x8c\xda\xad\xa2" +
	"#OscT\xb7)\xa3\x8a\x87\x90%4\xe9`&" +
	"Dr\x06\x1f+F%B`\x8c\x8a\xb3\xe7\xd6\xa7\x16" +
	"~\xe3\xde\x03o\x0bp\x99i\xd6ME~\xca\xb3\xce" +
	"\xc7(\xe7N\xc5(\xc9\xfd\x1d2j{%\xc4B\xd2" +
	"\xddI{\xdf#\xa3\xf6\x15\xaa[\xe8\x12\xca\x03\x8d>" +
	"\x96\x19\x90\\By\xb0\xd1c\x99\x97\xcc\xc2$u\x09" +
	"\x19Ct\xae\x05L\x08\x99#\xab\xbc\xefV\xf3'\xab" +
	"\xd87v\xb0\x8cn\x0e\x95A\xa3\xa8\x1b\xa5M\xeb\xc4" +
	"\x83o\x95Q\x1b\xf1\xa0\x8d\xf5{\x1aC\xe9\x1c3\x94" +
	"\xec#2j\x9c6]\xeb\x16\xeb-dL\xcb\xa8m" +
	"\x93p\xdct\x7fnB[pIj\xe8'Q\x80\xb1" +
	"\x1cU4\x9c\x05Rp\xd6L\xa1o\x90\xf1\xadLf" +
	"f\xf1f\xcae\xd0'nf\xa0\x9c\xb7\x96H<\xc0" +
	"d\x8a\xdd\xea\x92\xf0\xcbp\xef\xc0\xc7\xc5?\xa4gr" +
	"\xda\xb5\x88\x9eb\xabt\xb7x:\xa4\xd2\xb9\xdbS\xc8" +
	"\x95\xce6O\xa4S\xe2\xfb=\xd1\x8dFJ\xb2\xad\x12" +
	"?\xeeI\xb4J\xe7qO\x85V\xba\x8f{\xba\xbe\xd2" +
	"\xd3\xe6\x09\x98J\xf7\xa6B\x97\xe2\x14\xd5\xa8@A\x8e" +
	"\x82\x02\xa1\x83\x92LU4\xc0xA\xe6p\x8a\x17\xa8" +
	"\xc8n\\\xfe\xe8\x14\x13\xab\xcc\xdc[\xc6\x85\\\xf38" +
	"1j=\xc5\x9c\"\xe3\x05\xd92\xa7\x19\xc8\xceQ\xea" +
	"\x9a\x85X\xe8\x09\xa2\xca\x1d\xbe\x97\x07\xca&\x0f\\\x15" +
	"\xa5\xc9\xe9,V\xb4\x08\x95DG\xf0\xa5\x84+\xc2\x08" +
	"\x8b6\xaf\x94\xfa\x8f\xd1\xd5~DF\xedI/\xf5O" +
	"7y\x944,9\x0e\xfa\xe4]\xe5\xcc\\\x90\xc2\xf2" +
	"Gd,\x89\xdf\xcaCm \x85\x03\xbf#cI\xf5" +
	"W\x0e\xac\x04I\x09\xcaB\xdeP\xf2\x94wY\x19\xb5" +
	"\x1d\x12*\xb3\x96\x0bmC\x19\xdb\xed\x81M\x84\x8fe" +
	"\xd9\xe4\xfa\x1b1\xcca\x0bk\x9d\x97_\x93?:\xff" +
	"\xa5\xf3\x17\x8b\xd5L\xe7\xe3\"\xe7\x99\x19\x13E\xa9X" +
	"\xf7\xea@\xc2:\xe2\xa9y3\xce\x13\\G\x9b\xf7\x0e" +
	"w\xe8c0\x89Q|l\xd0[MN\xc1\"\xa8X" +
	"\xee\xf6\xd0-\x02\x80w\xed\x16\xecng\x9b`w\xf9" +
	"\xfd\x82\xdd\xe57\x09v\xb7\x85\x8c\xb3\x14\xe38\x00\x86" +
	"\xdc\x8f\x0a\xf7\xa3R1h\xacJ\xd1\x89\x9aV+\x9b" +
	"\xfb\x01\x0a\xed\xb5\xa3\x97ge\xa13\x06}RV:" +
	"\x86/\x81\xc6y!\xab\xac)\x93\xce\xc9L\x9d\xb9\xe6" +
	"\x94\x99;^P\x8a\x9d\x1c\xe37\xe9\xe9<\xa3\x1a\x99" +
	"\xd3GY\x82\xeb\x9c\xb8\xf3\x8c\x1aW\xbf\xec+\xb4n" +
	"\xaa\xbe\xa5\xf7\x95\x0a\x0e:E\x81\x15B,\x93\xd5\xae" +
	"\x95\x03\x88B\xb0\xab\x14BX\x0d\xca\x98h\x10\xc2\x9c" +
	"\xab\x04\xab\xf5\xc2\xde@\xf6\x85X\xe8\x95$Du\x81" +
	"\x10\xec\xae&\xfb\x12,\xb4K2\xa2\xbaX\xd8\xaf%" +
	"\xfb*,tL\x01\x00u\x85Xg\x15\xd9\xd7\x08a" +
	"\xae \xd8\xfd\x01>\x01\x90XC\xf6\xf5B\x98+\x08" +
	"v\xddB8[O\xf6[\x840W\x10\xec6\xe0:" +
	"\x80\xc4\x00\xd9o'G*]\xbdn3\x0e\x02$n" +
	"%\xf3\x08JH`\\\x09\xa02l\xf1\xcb\x90t4" +
	"\x03,\x93\x1d\xc0\x11\x9b\xe5F\xac\xf4\x90\xaf\x05su" +
	"\xea\x01\x86\x99\xec\xcd\x869$4\xad\x12O2L\xa1" +
	"\xc9C\xcc\xe4\xf1\xc4\xcd\xfe\x1ek\xb2\xfd\xe9\x8dkD" +
	"o\xb3\xadyH\x1f\xebC\x9b%\x8dl\"\x9f\xf1\xeb" +
	"\xd9\xfa\xb6\xf6\xbcm34y\x87>\xd6g\xb3Vw" +
	"Ji\x02g\x19\xfa\x7f\x1c\x07\xadQ\xd6\xa6\xe7X\x84" +
	"\xdc.\x0d\x0f\xea9\xe6J\xe4>\xd1\xce\x7f\xb0X\xeb" +
	"\x9dz\xa1\xae\x944\xa5RU(\xab+\xc1\xe9J\x07" +
	"\xad\xaev r\xab\xf4\x96\xf6rBN\x8b\xc7U\x8b" +
	"`\xb7\xb4\xc5\xab\x92eM\x89\xc7\xa5K\x8b\xcf\xa8\x02" +
	"v\x8e\xb2\x18\x91f\xae\x05\xdc\xaaL \x12n\xf2D" +
	"\x94\xc8\x90\xce\xd9e\x0a\xec\xb4\xdf&\xb5\x1afjY" +
	"\xfbz\x9f6\xd4(\xa0\xaa\xb2\x09 \x94\xccS\xaf9" +
	"\xcc\xa7y\x81]BQ,!\xa5\x9e\xeaZ\xb1\xee\x16" +
	"\x17\x02\x0d\x17\x02\x99\x0b\x81\x9b]\x08\xdc\xecB\xe0F" +
	"\x17\x025\x17\x025\x17\x025\x17\x02\xb5\xb6\xff\xaf\xa0" +
	"7=N\x99`6\xb5\x1f\xcb\xbc\x818_\xd8\xcfr" +
	"\xf94\xc7\\Q)\xf3\x1f\xf2B\x09#\x99T\x86{" +
	"/\xde|\xaf1\xc5\x8b\xb7O\x86\xaa]\xba\x1d\xa1\xd8" +
	"\x14T'\x17:\x95\xfb\xa97\xbbOF\xed\xc1\x02g" +
	"\xa5\x86\xe4\xebd<\"\xa3v\xa2\x08\x9a\x00\xca\xb1\xfd" +
	">)*P\x90\x83\x1f{\x02@{\\F\xed\xbb\x04" +
	"\x97\xb5\xae\xeatv\x10@{ZF\xed\xfb\x12\x02\xb8" +
	"=\xdf\xf3\xc4\x97\xbf+\xa3\xf6C\xe9\xff\x1e\x91\x0ai" +
	"2\x00!#\xc3&\xb6\xe4\xc1\x88<AV\xf6\xfd\x0d" +
	"\xc8'\x7f\xcb\x95\xc8\xb2\xa4\xdb0\xf8\xba\xa4\x95Su" +
	"I+\xbd.\xa9$\xef\xdd\xd9\xe4\x13\xe3\x8b\xf2\xde\xbe" +
	"\xfe\xf26\x09Q9\xb8\xdf\xd3\xddc\"\xb71\xe2\xfd" +
	"\xd9\x87\xcb\x86b\xa3T\x98\x8b\xa1\x88\xe4M\x83c\xc4" +
	"{k\\\x10%\x92y\xdek\xafg\xc3\x804Zz" +
	"\xc1\\\x18u\xdf\x11\xf61,\x7f\xb3+\xce\xe6\x7f\x03" +
	"\x00\x00\xff\xff\xdd\xd3I\x10"
