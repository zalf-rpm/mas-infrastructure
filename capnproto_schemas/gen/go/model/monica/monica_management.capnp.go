// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	math "math"
	strconv "strconv"
)

type ILRDates capnp.Struct

// ILRDates_TypeID is the unique identifier for the type ILRDates.
const ILRDates_TypeID = 0xa1f99f32eea02590

func NewILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func NewRootILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func ReadRootILRDates(msg *capnp.Message) (ILRDates, error) {
	root, err := msg.Root()
	return ILRDates(root.Struct()), err
}

func (s ILRDates) String() string {
	str, _ := text.Marshal(0xa1f99f32eea02590, capnp.Struct(s))
	return str
}

func (s ILRDates) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ILRDates) DecodeFromPtr(p capnp.Ptr) ILRDates {
	return ILRDates(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ILRDates) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ILRDates) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ILRDates) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ILRDates) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ILRDates) Sowing() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasSowing() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ILRDates) SetSowing(v common.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewSowing() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) EarliestSowing() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasEarliestSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ILRDates) SetEarliestSowing(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliestSowing sets the earliestSowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewEarliestSowing() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestSowing() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasLatestSowing() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ILRDates) SetLatestSowing(v common.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatestSowing sets the latestSowing field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestSowing() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) Harvest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ILRDates) SetHarvest(v common.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewHarvest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestHarvest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common.Date(p.Struct()), err
}

func (s ILRDates) HasLatestHarvest() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ILRDates) SetLatestHarvest(v common.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewLatestHarvest sets the latestHarvest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestHarvest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ILRDates_List is a list of ILRDates.
type ILRDates_List = capnp.StructList[ILRDates]

// NewILRDates creates a new list of ILRDates.
func NewILRDates_List(s *capnp.Segment, sz int32) (ILRDates_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[ILRDates](l), err
}

// ILRDates_Future is a wrapper for a ILRDates promised by a client call.
type ILRDates_Future struct{ *capnp.Future }

func (f ILRDates_Future) Struct() (ILRDates, error) {
	p, err := f.Future.Ptr()
	return ILRDates(p.Struct()), err
}
func (p ILRDates_Future) Sowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p ILRDates_Future) EarliestSowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p ILRDates_Future) LatestSowing() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p ILRDates_Future) Harvest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p ILRDates_Future) LatestHarvest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(4, nil)}
}

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0xd0290daf8de9f2b0

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List = capnp.EnumList[EventType]

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	return capnp.NewEnumList[EventType](s, sz)
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xb33447204cdf022c

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List = capnp.EnumList[PlantOrgan]

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	return capnp.NewEnumList[PlantOrgan](s, sz)
}

type Event capnp.Struct
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xcf672ab379467704

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event(root.Struct()), err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xcf672ab379467704, capnp.Struct(s))
	return str
}

func (s Event) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event) DecodeFromPtr(p capnp.Ptr) Event {
	return Event(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event) Which() Event_Which {
	return Event_Which(capnp.Struct(s).Uint16(2))
}
func (s Event) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Event) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Event_at) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_at) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_at) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_at) Date() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s Event_at) HasDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_at) SetDate(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Event_between) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_between) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_between) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_between) Earliest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common.Date(p.Struct()), err
}

func (s Event_between) HasEarliest() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_between) SetEarliest(v common.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common.Date(p.Struct()), err
}

func (s Event_between) HasLatest() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Event_between) SetLatest(v common.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common.Date, error) {
	ss, err := common.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s Event_after) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_after) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_after) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_after) Event() (Event_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Event_Type(p.Struct()), err
}

func (s Event_after) HasEvent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(3)
}

func (s Event) HasParams() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(3, v)
}
func (s Event) RunAtStartOfDay() bool {
	return capnp.Struct(s).Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	capnp.Struct(s).SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Event](l), err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (f Event_Future) Struct() (Event, error) {
	p, err := f.Future.Ptr()
	return Event(p.Struct()), err
}
func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (f Event_at_Future) Struct() (Event_at, error) {
	p, err := f.Future.Ptr()
	return Event_at(p.Struct()), err
}
func (p Event_at_Future) Date() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (f Event_between_Future) Struct() (Event_between, error) {
	p, err := f.Future.Ptr()
	return Event_between(p.Struct()), err
}
func (p Event_between_Future) Earliest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_between_Future) Latest() common.Date_Future {
	return common.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (f Event_after_Future) Struct() (Event_after, error) {
	p, err := f.Future.Ptr()
	return Event_after(p.Struct()), err
}
func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xe5484dc513ee11e0

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List = capnp.EnumList[Event_ExternalType]

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	return capnp.NewEnumList[Event_ExternalType](s, sz)
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0xb2bf3a5557791bc1

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List = capnp.EnumList[Event_PhenoStage]

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	return capnp.NewEnumList[Event_PhenoStage](s, sz)
}

type Event_Type capnp.Struct
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xb91010c363e568a4

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type(root.Struct()), err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xb91010c363e568a4, capnp.Struct(s))
	return str
}

func (s Event_Type) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event_Type) DecodeFromPtr(p capnp.Ptr) Event_Type {
	return Event_Type(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event_Type) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(capnp.Struct(s).Uint16(2))
}
func (s Event_Type) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_Type) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_Type) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_Type) External() Event_ExternalType {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List = capnp.StructList[Event_Type]

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Event_Type](l), err
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (f Event_Type_Future) Struct() (Event_Type, error) {
	p, err := f.Future.Ptr()
	return Event_Type(p.Struct()), err
}

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0xcb20e21466098705

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0xcb20e21466098705, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Params_Sowing capnp.Struct

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0xc6880d1c13ec14dc

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing(root.Struct()), err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0xc6880d1c13ec14dc, capnp.Struct(s))
	return str
}

func (s Params_Sowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Sowing) DecodeFromPtr(p capnp.Ptr) Params_Sowing {
	return Params_Sowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Sowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Sowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Sowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Sowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Sowing) Cultivar() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_Sowing) HasCultivar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Sowing) CultivarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_Sowing) SetCultivar(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_Sowing) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := capnp.Struct(s).Ptr(1)
	return crop.Crop(p.Interface().Client())
}

func (s Params_Sowing) HasCrop() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List = capnp.StructList[Params_Sowing]

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Params_Sowing](l), err
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (f Params_Sowing_Future) Struct() (Params_Sowing, error) {
	p, err := f.Future.Ptr()
	return Params_Sowing(p.Struct()), err
}
func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop(p.Future.Field(1, nil).Client())
}

type Params_AutomaticSowing capnp.Struct

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xd1bfc1c9617d9453

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing(root.Struct()), err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xd1bfc1c9617d9453, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing {
	return Params_AutomaticSowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Params_Sowing(p.Struct()), err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(capnp.Struct(s).Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List = capnp.StructList[Params_AutomaticSowing]

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return capnp.StructList[Params_AutomaticSowing](l), err
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing(p.Struct()), err
}
func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}
func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp capnp.Struct

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x846f567433b186d1

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp(root.Struct()), err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x846f567433b186d1, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing_AvgSoilTemp) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing_AvgSoilTemp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing_AvgSoilTemp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List = capnp.StructList[Params_AutomaticSowing_AvgSoilTemp]

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_AutomaticSowing_AvgSoilTemp](l), err
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

type Params_Harvest capnp.Struct

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0x8feb941d70f2a468

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest(root.Struct()), err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0x8feb941d70f2a468, capnp.Struct(s))
	return str
}

func (s Params_Harvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest) DecodeFromPtr(p capnp.Ptr) Params_Harvest {
	return Params_Harvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest) Exported() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List = capnp.StructList[Params_Harvest]

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Harvest](l), err
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (f Params_Harvest_Future) Struct() (Params_Harvest, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest(p.Struct()), err
}
func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0xa9a9bc941e963701

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List = capnp.EnumList[Params_Harvest_CropUsage]

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	return capnp.NewEnumList[Params_Harvest_CropUsage](s, sz)
}

type Params_Harvest_OptCarbonMgmtData capnp.Struct

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0xaf49ab9bbe76e375

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData(root.Struct()), err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0xaf49ab9bbe76e375, capnp.Struct(s))
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest_OptCarbonMgmtData) DecodeFromPtr(p capnp.Ptr) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest_OptCarbonMgmtData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest_OptCarbonMgmtData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest_OptCarbonMgmtData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest_OptCarbonMgmtData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List = capnp.StructList[Params_Harvest_OptCarbonMgmtData]

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[Params_Harvest_OptCarbonMgmtData](l), err
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (f Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

type Params_AutomaticHarvest capnp.Struct

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xf805d22fabb80702

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest(root.Struct()), err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xf805d22fabb80702, capnp.Struct(s))
	return str
}

func (s Params_AutomaticHarvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticHarvest) DecodeFromPtr(p capnp.Ptr) Params_AutomaticHarvest {
	return Params_AutomaticHarvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticHarvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticHarvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticHarvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticHarvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest(p.Struct()), err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(capnp.Struct(s).Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List = capnp.StructList[Params_AutomaticHarvest]

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[Params_AutomaticHarvest](l), err
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (f Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticHarvest(p.Struct()), err
}
func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting capnp.Struct

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0x8460dac6abff7ed9

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting(root.Struct()), err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0x8460dac6abff7ed9, capnp.Struct(s))
	return str
}

func (s Params_Cutting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting) DecodeFromPtr(p capnp.Ptr) Params_Cutting {
	return Params_Cutting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Cutting_Spec_List(p.List()), err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List = capnp.StructList[Params_Cutting]

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Cutting](l), err
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (f Params_Cutting_Future) Struct() (Params_Cutting, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting(p.Struct()), err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0xe444f780b29541a7

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List = capnp.EnumList[Params_Cutting_CL]

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	return capnp.NewEnumList[Params_Cutting_CL](s, sz)
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0x94d32947f136655e

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List = capnp.EnumList[Params_Cutting_Unit]

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	return capnp.NewEnumList[Params_Cutting_Unit](s, sz)
}

type Params_Cutting_Spec capnp.Struct

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0xfae5dcfccbb93a23

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec(root.Struct()), err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0xfae5dcfccbb93a23, capnp.Struct(s))
	return str
}

func (s Params_Cutting_Spec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting_Spec) DecodeFromPtr(p capnp.Ptr) Params_Cutting_Spec {
	return Params_Cutting_Spec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting_Spec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting_Spec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting_Spec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting_Spec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(capnp.Struct(s).Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(capnp.Struct(s).Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(capnp.Struct(s).Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List = capnp.StructList[Params_Cutting_Spec]

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_Cutting_Spec](l), err
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (f Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting_Spec(p.Struct()), err
}

type Params_MineralFertilization capnp.Struct

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xa363d226e178debd

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization(root.Struct()), err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xa363d226e178debd, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization {
	return Params_MineralFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_MineralFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_MineralFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List = capnp.StructList[Params_MineralFertilization]

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_MineralFertilization](l), err
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization(p.Struct()), err
}
func (p Params_MineralFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_MineralFertilization_Parameters capnp.Struct

// Params_MineralFertilization_Parameters_TypeID is the unique identifier for the type Params_MineralFertilization_Parameters.
const Params_MineralFertilization_Parameters_TypeID = 0xc75b5ef2e9b05c2d

func NewParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func NewRootParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func ReadRootParams_MineralFertilization_Parameters(msg *capnp.Message) (Params_MineralFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_MineralFertilization_Parameters(root.Struct()), err
}

func (s Params_MineralFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xc75b5ef2e9b05c2d, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization_Parameters {
	return Params_MineralFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_MineralFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_MineralFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_MineralFertilization_Parameters) Carbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization_Parameters) SetCarbamid(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) Nh4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_MineralFertilization_Parameters) SetNh4(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) No3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_MineralFertilization_Parameters) SetNo3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_MineralFertilization_Parameters_List is a list of Params_MineralFertilization_Parameters.
type Params_MineralFertilization_Parameters_List = capnp.StructList[Params_MineralFertilization_Parameters]

// NewParams_MineralFertilization_Parameters creates a new list of Params_MineralFertilization_Parameters.
func NewParams_MineralFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[Params_MineralFertilization_Parameters](l), err
}

// Params_MineralFertilization_Parameters_Future is a wrapper for a Params_MineralFertilization_Parameters promised by a client call.
type Params_MineralFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Parameters_Future) Struct() (Params_MineralFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

type Params_NDemandFertilization capnp.Struct

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0xc7c14e92e0cd461c

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization(root.Struct()), err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0xc7c14e92e0cd461c, capnp.Struct(s))
	return str
}

func (s Params_NDemandFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_NDemandFertilization) DecodeFromPtr(p capnp.Ptr) Params_NDemandFertilization {
	return Params_NDemandFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_NDemandFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_NDemandFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_NDemandFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_NDemandFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_NDemandFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_NDemandFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_NDemandFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return capnp.Struct(s).Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	capnp.Struct(s).SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List = capnp.StructList[Params_NDemandFertilization]

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Params_NDemandFertilization](l), err
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (f Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_NDemandFertilization(p.Struct()), err
}
func (p Params_NDemandFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization capnp.Struct

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xb492838c7fed50b0

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization(root.Struct()), err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xb492838c7fed50b0, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization {
	return Params_OrganicFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}

func (s Params_OrganicFertilization) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization) SetParams(v Params_OrganicFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List = capnp.StructList[Params_OrganicFertilization]

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Params_OrganicFertilization](l), err
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization(p.Struct()), err
}
func (p Params_OrganicFertilization_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization_OrganicMatterParameters capnp.Struct

// Params_OrganicFertilization_OrganicMatterParameters_TypeID is the unique identifier for the type Params_OrganicFertilization_OrganicMatterParameters.
const Params_OrganicFertilization_OrganicMatterParameters_TypeID = 0x95cdc661a6600137

func NewParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func NewRootParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func ReadRootParams_OrganicFertilization_OrganicMatterParameters(msg *capnp.Message) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_OrganicMatterParameters(root.Struct()), err
}

func (s Params_OrganicFertilization_OrganicMatterParameters) String() string {
	str, _ := text.Marshal(0x95cdc661a6600137, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_OrganicMatterParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_OrganicMatterParameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_OrganicMatterParameters {
	return Params_OrganicFertilization_OrganicMatterParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNO3Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNO3Content(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomCarbamidContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomCarbamidContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMFast(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) NConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// Params_OrganicFertilization_OrganicMatterParameters_List is a list of Params_OrganicFertilization_OrganicMatterParameters.
type Params_OrganicFertilization_OrganicMatterParameters_List = capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters]

// NewParams_OrganicFertilization_OrganicMatterParameters creates a new list of Params_OrganicFertilization_OrganicMatterParameters.
func NewParams_OrganicFertilization_OrganicMatterParameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_OrganicMatterParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters](l), err
}

// Params_OrganicFertilization_OrganicMatterParameters_Future is a wrapper for a Params_OrganicFertilization_OrganicMatterParameters promised by a client call.
type Params_OrganicFertilization_OrganicMatterParameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_OrganicMatterParameters_Future) Struct() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

type Params_OrganicFertilization_Parameters capnp.Struct

// Params_OrganicFertilization_Parameters_TypeID is the unique identifier for the type Params_OrganicFertilization_Parameters.
const Params_OrganicFertilization_Parameters_TypeID = 0xba0c11cf818d29fd

func NewParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func NewRootParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func ReadRootParams_OrganicFertilization_Parameters(msg *capnp.Message) (Params_OrganicFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_Parameters(root.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xba0c11cf818d29fd, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_Parameters {
	return Params_OrganicFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_Parameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization_Parameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization_Parameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_OrganicFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_OrganicFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Params_OrganicFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Params_OrganicFertilization_Parameters_List is a list of Params_OrganicFertilization_Parameters.
type Params_OrganicFertilization_Parameters_List = capnp.StructList[Params_OrganicFertilization_Parameters]

// NewParams_OrganicFertilization_Parameters creates a new list of Params_OrganicFertilization_Parameters.
func NewParams_OrganicFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Params_OrganicFertilization_Parameters](l), err
}

// Params_OrganicFertilization_Parameters_Future is a wrapper for a Params_OrganicFertilization_Parameters promised by a client call.
type Params_OrganicFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Parameters_Future) Struct() (Params_OrganicFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}
func (p Params_OrganicFertilization_Parameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Tillage capnp.Struct

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0xaa49811a4e3e2c59

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage(root.Struct()), err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0xaa49811a4e3e2c59, capnp.Struct(s))
	return str
}

func (s Params_Tillage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Tillage) DecodeFromPtr(p capnp.Ptr) Params_Tillage {
	return Params_Tillage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Tillage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Tillage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Tillage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Tillage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List = capnp.StructList[Params_Tillage]

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Params_Tillage](l), err
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (f Params_Tillage_Future) Struct() (Params_Tillage, error) {
	p, err := f.Future.Ptr()
	return Params_Tillage(p.Struct()), err
}

type Params_Irrigation capnp.Struct

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0xd90939a58e404ff8

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation(root.Struct()), err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0xd90939a58e404ff8, capnp.Struct(s))
	return str
}

func (s Params_Irrigation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation) DecodeFromPtr(p capnp.Ptr) Params_Irrigation {
	return Params_Irrigation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s Params_Irrigation) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Irrigation) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s Params_Irrigation) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List = capnp.StructList[Params_Irrigation]

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Irrigation](l), err
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (f Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation(p.Struct()), err
}
func (p Params_Irrigation_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Irrigation_Parameters capnp.Struct

// Params_Irrigation_Parameters_TypeID is the unique identifier for the type Params_Irrigation_Parameters.
const Params_Irrigation_Parameters_TypeID = 0xaec9e089e87f1599

func NewParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func NewRootParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func ReadRootParams_Irrigation_Parameters(msg *capnp.Message) (Params_Irrigation_Parameters, error) {
	root, err := msg.Root()
	return Params_Irrigation_Parameters(root.Struct()), err
}

func (s Params_Irrigation_Parameters) String() string {
	str, _ := text.Marshal(0xaec9e089e87f1599, capnp.Struct(s))
	return str
}

func (s Params_Irrigation_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation_Parameters) DecodeFromPtr(p capnp.Ptr) Params_Irrigation_Parameters {
	return Params_Irrigation_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation_Parameters) NitrateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation_Parameters) SetNitrateConcentration(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation_Parameters) SulfateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Irrigation_Parameters) SetSulfateConcentration(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Params_Irrigation_Parameters_List is a list of Params_Irrigation_Parameters.
type Params_Irrigation_Parameters_List = capnp.StructList[Params_Irrigation_Parameters]

// NewParams_Irrigation_Parameters creates a new list of Params_Irrigation_Parameters.
func NewParams_Irrigation_Parameters_List(s *capnp.Segment, sz int32) (Params_Irrigation_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_Irrigation_Parameters](l), err
}

// Params_Irrigation_Parameters_Future is a wrapper for a Params_Irrigation_Parameters promised by a client call.
type Params_Irrigation_Parameters_Future struct{ *capnp.Future }

func (f Params_Irrigation_Parameters_Future) Struct() (Params_Irrigation_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation_Parameters(p.Struct()), err
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xbfda1920aff38c07

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "model/monica/monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "model/monica/monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService_List creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_managementAt_Results capnp.Struct

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xf32d7a3fdc567bdb

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results(root.Struct()), err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xf32d7a3fdc567bdb, capnp.Struct(s))
	return str
}

func (s Service_managementAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_managementAt_Results) DecodeFromPtr(p capnp.Ptr) Service_managementAt_Results {
	return Service_managementAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_managementAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_managementAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_managementAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_managementAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Event_List(p.List()), err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List = capnp.StructList[Service_managementAt_Results]

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_managementAt_Results](l), err
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (f Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	p, err := f.Future.Ptr()
	return Service_managementAt_Results(p.Struct()), err
}

const schema_93337c65a295d42f = "x\xda\xac\xbd}|\x14\xd5\xd9\xff\x7f\xae\x99\x0d\x9b\x04" +
	"\xc2f\x9dA\x9e\x12\x96@B\x81\x82\x02\xc1\x82VM" +
	"B\x02\x82\xcd\xd3f\x83\x8a7*\xc3\xee$\x19\xd8\x9d" +
	"YfgCb\xb1\x8a\xe2]\xb5P\x1f\x0a-X\xec" +
	"\x8d-\xb6>`\x8bV{c\x0b\x15\xad\xb4h\xe5\x16" +
	",\xb6j\xb1E\xab\xad\xb6\xb6_\xb1\xf6[\xda\xaf\xba" +
	"\xbf\xd7\xe7\xcc\xcc\xee\xecfA\xbc_?\xff\x91\xbc\xcf" +
	"\x99\xb3g\xce\xc3u\xaes\xceu]3\xeb\x8fm\x8d" +
	"\xbe\xd9\x15\xd7\xcc`B\xc4'\x94\x0c\xcb|\xf9\x1c\xf9" +
	"\xc6\xff\xfe\xdeK7\xb0p\x1dM\xc8\xfcv\xcd\xbc-" +
	"o\\6\xb8\x87\xf9\xfc\x8c\xd5\x8f:\xfb6\x92f\x9e" +
	"\x8d\x7fN;\xfb\x1b\xc3\x18e&<\xfd\x97\xebvu" +
	"W\xafg\xe1\x89\xb4=s\xbej}\xe3\xe9K\xfe\xfc" +
	"\x9f\xacd\x0e\xcf^}#I\xd3\xaa\xf1\xcf\xba\xeay" +
	"\xf5\x8c2\xff\xec\xaf\xde\xfd\xb7\xcc\x9e\xf5,\xbc\x90(" +
	"3md\xb05>\xb3\xec)VB\xc8\xb3\xf0\xaa\xdb" +
	"\x04)q\x95\x9f1I\xbbj-\xa3\xcc+_\xca<" +
	"\xf4\xf3WWl`\xe1\x19D\x99\x92/\x97\xf5\xc8o" +
	"L\xfc\xa5\x93\xfb\xc0U\xdf&\xe9\xb5\xab\xe61&}" +
	"\xc4s\x1f\xf9\xcfG\xea\xad\xcb\x8c\x0d,|!\x89\x99" +
	"\xc8\xe6\xeb\x94g\x9fz\xf2\x88]\xf1\xeb\xae^ H" +
	"\xf7\\\x8d\xa2\xb7]\xfd\x03d>\xb1\xf9\xdc\x19\xc7\xee" +
	"\xdc\xc0\x825\x94I\xfcn\xe1w~\xf1\xda\xbf\xfe\xc6" +
	"JDdn\xbb\xe6\xc7$\xa9\xd7 \xb3r\x0d2\x7f" +
	"\xbd\xefB\xf9\xda\x13w\xdc\xc2\xc25$xr\xf3z" +
	"|t\xcd\xbfI\x1a\xbb\x02\xb9G\xad@\xee\xbe\xa7n" +
	"\x19\xfb\xe8\x0b\x07n+(Z@\xe6GV\xdcH\xd2" +
	"\x01\x9e\xf9\xa9\x15k\x19=y\xdd\xba\x86g{o\xfe" +
	"Jx\"\x09\x9e\xd6\x1b\xce\x9bL\xe9\"\xe9|\x05\xff" +
	"<O\xf9\xbd\x80\x92w\xbe\x9f\xac\xde\xfc\x97\xdb\x8b\xb6" +
	"\xc7`\xec\xdb$\xdd\x19\xfb\x0cc\xd2#1\xb4\xc7\xd5" +
	"\xea\xe7N\\2\xedW\x9bYp\xae\x90kJF\xf5" +
	"\xa3\xd4\xe7H\x9a\xad\xa2\x123\xd5\x0eF\x99y\xb4\xe2" +
	"\xbb\xca\xcf\x0fma\xe1&\xaa\xc8\xec\xee\xfc\xeb\xf5\x1b" +
	"o\xba\xeb1\xbb\xe5\x16\xaa\xcf\x09\xd2\x1ad\xaeO\xa8" +
	"\xbc\x16\xea\xafn2~!\xbe\xb1\x95\x85g\x93\x90\xf9" +
	"\xe1\xd7^\xbck\xf3\xd7/{\xc8\xce\xfdH\xdf\x1b$" +
	"\x1d\xeaC\xd1\xcf\xf6\xa1\x12\xbe\x1f\xdd\xf4\xd3\xf7\x8f\x0d" +
	"\xdf\xc6\x82\x17\x0a\xff\x9c\xfa\x7f\x9f\xdeW\xfb\xcf\x03\x8c" +
	"\xea\xeb\xb4\x05\x82\xb4PC\xbe&m\x1e\xa3\xcc\x17^" +
	"\xfc\xe1\xeag\xbfy\xf67Y0D\x99\x87\xbe>h" +
	"\xed\xd8u\xe1I\xe7\xcd\x96h\xb7\x91\xa4h\xa31." +
	"\xb4\x06F\x99;\xeav\xfcm\xce\x7f\xfd\xeb^\x16\xac" +
	"\xa3\xcc\xb9G\xb7|[]W\xff5VR\x82\xcc\xdb" +
	"4\x93\xa4\x87Qr\xfd\x03Z\x88\x18e\xf6\xfdn\xe0" +
	"\xf5)/F\xbfS|\x14\xad*\x17\xa4\xb7V\xa1\xec" +
	"\x13\xabP\xe1C\xab>?\xfc\x08\xbd\xba\x13\x03Z\xce" +
	"u\x09\x7f\xbb\xf0\xea\x1bIRW\xe3\x9f\xca\xea^\x1f" +
	"\xa3\xcc\xd2{B}\xd6\xd2\x8e\xef\x15\xeb\xebM\xc9." +
	"\x92\xeeM\xe2\x1d\xefI\xa2\xe8\xc7\x1ey\xfbP|g" +
	"\xdf\x03,|\x01Q&\xf2\x93\xb7v\x7f\xb3\xfc/o" +
	":\x15\xa15\xff&\xa9z\x0d\xfe9v\x0d\xaf7\xcd" +
	"\xfb\xfa\x84\xcd{\x1fx\x80\xf7_\xb6\xeb\x19\xd5_d" +
	"\xbeO\xd22\x13\x05/5\xd1x\xcbf\\\xdc>n" +
	"\xfd\x92\x07\x0b\xde\x90\xd7Y5\xbfM\xd2u<\xf3\xa0" +
	"\x89\xc6\xcbvXx\"\x9d\xe5\x19s\x01\xdez\xe6m" +
	"$=b\x8ef\xac~\x9f\xf9\x03?\xa3\xcc\xb6Q\xd7" +
	"\xbf}\xeb\xf1g\xbf\xcf\xc2\xf3H\xc8\x9c\xech\xfc\xea" +
	"}\xe7\x97\xbdb\x97\xfd\xd7/\x9e%H\x15\xebPv" +
	"\xd9:\xbca\xfa\x0f\xfd?\xfd\xe6CK~\xc0\xc2s" +
	"\xa9$Wg\x9e9\xbdn\x8e mA\xe6\xfa;\xd7" +
	"]\x8e\x17\x9c\xf7\xa7\xae?\xaa\x81\xfeGP\x93a\x9e" +
	"\x9a\x8c@\x9e\x8a/=G\xd2\xb4/\xf1\x89\xf0\xa5\x7f" +
	"\x8a\x8c2O\x8d\x1f\xbc|\xe9\x05O>\xca\x82\x9f\x15" +
	"2\xbe\xb5\x8b\x06\x7f8\xbd\xf7\x05\xb4\xc7\x92\x9b\x1e%" +
	"I\xb9\x09\xd5\xb8\xea\xa6^F\x99\x19\xc2\xef['^" +
	"2\xf7\x87,X'\xe4\xc6\x07\xa3\xfa;o\xba\x91\xa4" +
	"\xfbx\xce{o\xfa\x06\xa3\xcc\x97\x7f\xf3\x83\xb1\x1b\x1b" +
	"\xfe\xf4C\xcc\xec\xda\xc2\x99\xfd\xd6M\x7f&\x896\xf0" +
	"I~S\xa8\x94Q\xe6\xff^\xfc\xe3=G\xe7\xd5<" +
	"\x86\xec\x95\x85\xd9\x9f\xdat#I/m\xc2?\x8fl" +
	"z\x125\xce\xce\xa4\xf0\x0c\x12\x0aG\x1e\xddU.H" +
	"5wa\xbe6\xdd\x05\xb9\xf1\xdd\x9b\xdb\xe4\xef\xe8'" +
	"\x1eCs\x94y\x9a\x83\xe7~\xed\xae\xdbH\xfa\xc7]" +
	"\xf8\xe7\x89\xbb\xe6a\x1an\xbff\xd1\x89\x17\x7f\xb2\xed" +
	"q\xd4\xa5\xbc\xb0.\xeb\xb7\xdcH\xd2\x96-\xbc\xb1\xb7" +
	"\x18\xc8~\xd5-\x0f\xdf~\xe0\xd6\xdb\xfe\x1b\xb3\xd63" +
	"\xdd\xec\xecWm}\x94\xa4\xf4V\xb4\xcb\x9a\xad\xa8K" +
	"V\xec\xe7\x8dk\xde\x8f\xc1m\xd3I\xaa\xd9\xf6\x0d&" +
	"fv\xf6\xbd\x15\xfdYe\xe5\x13,\xfcY\xa2\\\x97" +
	"\xb4\xf8\x05\xa2\xfaM\xdbn$\xe9\xdem|\xf8o\xc3" +
	"\xe0\xf8h\xda\xa6\xf5/\x04G\xfc\x98\x05\x9b<Mc" +
	"\x8b\\\xba{\xa5 \xd5\xdd\x8d\xcc5w\xa3\x02W\xcc" +
	"\xdb\xfd\xc4\xb7\xc6^\xbc\x0f\x8d\xe1\xf34\xc6H\xe4~" +
	"\xe2\xeeWIz\xe9n\xde\xd2w\x9f\x8byx\xf5\x15" +
	"\xabG~\xf1\xa1\x1f\xfd\xb4\xa0&\xa3|~b\xac\xbe" +
	"i\xc7m\xc4H\x0a\xef@5\xfc\x1b\xff\xfe\x83\x89c" +
	"_}\x92\x05\xeb\xc4\xbc\xc1\xf1\xf0\x8eU$=\xb5\x03" +
	"u\xd8\xb7\xe3\x12\xe9\x9d\x1d\xa3\x19\xcb\x94\xfft\xe7\xba" +
	"\xcf\\\x9a\xd9\x8fV.+\x9c\xe1\xaf\xec\xf81I'" +
	"\x90\xaf\xfe\xa3\x1d\xdfC+gW\xb4p\x0dQa\xa7" +
	"\x94\xed\x9c.H\xd3vB\xd6\x9c\xb7\x13U\x99W\xbf" +
	"\xf8\xa7o\xfd|\xfd\xd3Xj\x85\x82\xa5\xf6\x91\x9d\x0f" +
	"\x92\xf4\xecN\xd4\xe6\x00\xcf<\x7f\xb2u\xf3[\xea/" +
	"\x0f\xa0h_A\x9f\xd4\xdc\xf7o\x92.\xba\x0f\x99\xcf" +
	"\xbf\xefO\x8c\\I\x9b_\x0b\x9e\xb5\xee\xbbo\x90\xd4" +
	"\xf4]T\xa2\xed\xbb(\xf7\x98\xfc\xaeTUq\xcb\xcf" +
	"\x0b\xc5#\x7f\xc3\xc7\xbf{7I\x87\xbe\xcb\xe5\xf9w" +
	"\xd1/3\x97\xef~\xe7\xfd\xab\xff\xe3\x17X*\xc4\x9c" +
	"h\xb5sk\xdf[)H\x9b\xbe\x87\x7f\xde\xfa=." +
	"\xc3\xaa\x16\x1d:~W\xfbS\xbf@\xe1b\xe1\x0c\xb8" +
	"\xe7\xferA\xdaw?\x0a\x7f\xe2\xfe?1\xca|\xf8" +
	"\xc8\xd6\xd1\x81o]r\xb0x/\xde\xf9\xc0\xdd\xe8\xc5" +
	"{\x1f@\xad\x1b\xff\xcf\x81\xe9\x93\x1e\xff\xfe\xc1bM" +
	"G\x0f\xdeM\xd2\xd8\x07\xf9\x8a\xfc 2g\x7f7o" +
	"\xbd\xe0y\x07\x1f\\I\xd2\xa6\x07\xbf\xc7\xc4\xcc\xc1/" +
	"=9\xf63_/9\x84!7\xd53\xe4\xb8\xbaS" +
	"\xf6\xd0\xd3$\xd5<\x84\x7fV?\xd40\x92Q\xe6\x85" +
	"+\xfe<L\x1c\x9f9\x84\xfe\x18S\xd0\xc8\xd5\xfb\xde" +
	"'\xe9\xfc}|\xe9\xdewI\x09\xa3\xdf\xd7\xfc\xf2\xee" +
	"\x8f\xee\xfc\x8f\xff\x09\xd7\xd0\x84\x82\xbc\xb7\xfe\xec6\x92" +
	"\xee\xfd\x19o\x90\x9f\xdd\x0e)\xf3\xed\xff\xfa\xf5W\x96" +
	"/\x08\xbc\x80w+/x\xb7\x8aC+I\xaa9\xc4" +
	"\x7f\xe4\x10\x97\x03\xd9f\x0a\xd7\x91\xe7\xed\x16\xfa\xfc\"" +
	"Q\xfd\xb2\x17\xae$)\xf1\xc2<\xc6\xea\xb7\xbcp;" +
	"\xbad\xf7\xfb\xefl\xfaA\xc5\xb4\xc3C\x84\xe3\xa1\xc3" +
	"\xd7\x92\xf4\xfaa.m\x0e\x7f\x06Y+\xdf{cP" +
	"\xde\x14:\xc2\xc2\xe7\x92\x90\xb9\xb8\xaf-]5\xe3\xaf" +
	"\x8e\xec\x7f\xe4\xc88A:r\x04\x8d|\xe8\x08\x1a9" +
	"\xabp\x85gPi\xe18\x9a\xfd\xe2\x1b$\xb5\xbd\x88" +
	"\x99\xb2\xecE^\xed\xf9\xff\xf7\xaf\x1ft\xbf\xf0\xd7#" +
	",<\x8b\x86e\xbe\xbe\xf4\x0f\xbf\xda\xdat\xf1\xffq" +
	"F\xc6\xa1\xa3\xab\x04\xe9\xc4Q\xbe\xc6\x1c\xe5\xb5\xfe\x8a" +
	">\xe6\xeb\xbf\xf8\xf2K/\xa2\xb5\xa7y&V9\xf2" +
	"\xdc\xfb\xeb\xbbIz\xe2\xd7|\xc0\xfe:0\x82Q\xa6" +
	"z\xd15\xab;\xfe\xb8\xf9%\xf4eea_nz" +
	"\xeb\xc7$\xdd\xf7\x16\x7f\xf2\xad\x0cZ|\xdc\xe5%\xcf" +
	"$\x0eo{\x89\x05'R\xa1\xe4]vb\x15I\x89" +
	"\x13\\+=\x81\x05t\xcd\xfeo\xdeTy\xd7\x0f^" +
	"F\xd9T\xa0!l:\x815\x9fg\xbe\x87g\xce." +
	"\x98\xc5\x94\x8f}'~L\xd2K'0\x17_?\x81" +
	"6\xcc6q\xfe\xa8\xb6\xdb\xf0\xa2\xf7\xaf%)\xfc>" +
	"r+\xefc\xba\xfc\xfb\x0b\xa3\xfe\xfeKk\xd1o\x8b" +
	"O\x97\xeb\xfenb\xba\xdc\xfawT\xa3\xfd\xe3\xdfU" +
	"T\xcd\xfa\xf8\xb7h>\xb1`\x00>\xf0\xf7\x1bI\xda" +
	"\xf7w>\x0d\xff\x8e9\x1e\\pl\xf3\xba\x11\x13^" +
	"\xc3\x0bVx\x9a\x83\xd7b\xd9\x07\xd7\x92\x94\xf8\x80O" +
	"\xf7\x0f:\xb0\xca\x8dy\xf8\xf1\xc6\x9f\xf7\xa7\x7fW\xac" +
	"\xec\x8f\xfe\xf9*IcO\xf2\xa9x\x12e\x8f\xa9\xba" +
	"\xe3\xf7+\xcf\x09\xff\x01eK\x05\x8d\xf7\xc8I\x93\xa4" +
	"\x03'\xf9Zz\xf2\xbf \xd6\xbf\xd7\xb4\xe5\xd1\x1b\xfe" +
	"\xd9\xf2\xe6\x10\x15\xb6\xec\xe3\x1f\x93T\xf31\xca\xad\xfe" +
	"\x18*\xd0\xab\x91Q\xdf\x7f\xe5\xf0\xaf\xdf,X\x99m" +
	"\xe9\xf8\xf1\xa3$\x9d\xff1\x9f\x8d\x1f\xff\x06\xe5fu" +
	"\xaf\xa1\xda\xe6\xbc\xa5>z\x91F\xaf\xf1\xd1h\xc6F" +
	"\x0f\xfa\x08\xcdw<\xf87\xe9@\xdb\xe2\xb7\x0aU\x8f" +
	"y\x0f\xf8\xe8i\x1a\xfd\x94\x0fO\x8e\xde\xe7\xa3\x7f2" +
	"\xca\xfc\xcf\xf6\x8f\x96nn\xde\xf4G[c\xca. " +
	"\xa8\xca<\xad\x84\xc6\x09\xa3o\xe5\xbf4\xfa\xe6\x12B" +
	"\xa7\xff\xf6\xe1\xeb\xea\x86\xf7\xcf|\xdb\x9e\xc0\xb9N\xc7" +
	"\xc28\xef\xf5\x12\xba\x9bF\xff\xcb~\xe0\x1f%\x84~" +
	"\x7f\xfa\xa31\xf3J?w\xd7\x9f\x8b4\xf8\xbcC\xc3" +
	"\xe8\xdb4\xfa\xada<\xff\xeb\xc3\x08m\x1e\xfdm\xdd" +
	"\xf1\xcb\x1f\xfa\xf7\x9fY\xf8sD\x99\xf5\x93\xdag}" +
	"fR\xdf\x87\xce\xeb\xae\xf7\xd3\xab4\xfa\x1e?\xffc" +
	"\x9b\x9f\xb8\xd8\xbe\xf0\xef]\x0d\xcf\xfb\x86\xff\x0dU\x12" +
	"\xf3%\xd0\xbc}\xa5d\xd2\xe8#\xa5\xfc\x17\x0e\x95\xf2" +
	"_\xc8N\xdf\xf0D\x1a\xee\x191\xf6;\x97\xd1\x8d4" +
	"\xfa\xba24\xe8\xbc;\xcb\xe8\xcb\x184c\x97\xfe\xe9" +
	"'Gn\xbf\xe8=\x96\xbf\xf3i\xf1\x8b\x8c\xcd;P" +
	"A\x17\xd0\xe8\x97*\xf8O\x1c\xa9\xe0?1\xed\x95\xa9" +
	"g\x09\xd5\xcf\xbc\x87\x97\xae(xim$\x95\x0b\xa3" +
	"o\x1d\xc9\xdf\xe1\xe6\x91\xc4\xb7)\xdf\xbc\xfe\xa1\xf3\xcf" +
	"91\xec}<p\xb6Gb\x04x3\x05y3\x05" +
	"\xf9\x13\xaf\x07\x89\xcb\xdd\x7f\x94\xff\xed\xda\x19-\x8b\xde" +
	"\xc7[\x97\x15\xbc\xf5;U\xf4(\x8d\xa6j\xfe\xc0G" +
	"U\x94A3\xfd\xf6\x8b\x97\x1dk\xb8v\xe6\xdfYp" +
	"&1\xa7=G\x85\xe8,\x81\xd1\xe8\x99!>r\x04" +
	"\xff\x9e\x87\xce}\xb1\xe4$\xe6\x7fI\xc1\xfc\x9fwU" +
	"\x88\xfeL\xa3\x07C\xfc\x8ft\x88\xb8V\xfc\xe1\xc5\x7f" +
	"\xa8\x94\x1f\xb9\xea_\xc5\xda\xfe\xb5\x89t\x1b\x8d\xfe\xc7" +
	"D\xde0'&\xf2\x86\x99|\xc1\x13\xbf\xfc\xf0\xd8[" +
	"\xff\x86\xce-\xe6&\x09\xcf\x7fk\x0d=G\xa3\xef\xab" +
	"\xe1?po\x8d\xdd\xb9\xd9\x01Pd\xf0\xef\x9b\x84\xd7" +
	"|i\x12\x1f\xfc\xafM\xe2\xafp\xd5\xaaQ\xbf\xb8/" +
	"\xb0+S\xb8\xfb\xc5vk^\xc5d<P7\x99?" +
	"]3\x99\xfe)\xb2\x0c\xfbN&a\xc4\xd4\xf8\xb9\x09" +
	"\xa3D\xd7\xa2\xca\xb9\x09\x03\xff\xbb&\xa9\x98J\"u" +
	"NTI\xea\xc9\x0b.3\xa2\xe7D\x92jTSS" +
	"-\x8a\xa50\xd6I\x14\x1e\x10}\x8c\xf9\x08j\x8c8" +
	"\x8e\xb1\xc8\\Q\xa4H\xa3(P\x90H&\xf0\x8b\xc4" +
	"\x05\x8cE\xe6\x83\xb7\x80\x0b\x82L\x02Th\xf1\x02\xc6" +
	"\"\x17\x82/\x06\x17E\x99D\xc6\xa4\x85\xe2\x1c\xc6\"" +
	"\x8d\xe0\xad\xe0>\x9fL>\"i\x09\xe7-\xe0\x9d\xe0" +
	"%%2\x95\x10Im\xe2t\xc6\"\x8b\xc1\xbb\xc1\x87" +
	"\x0d\x93i\x18cR\x98\xf3V\xf0+\xc0\xfd~\x99\xf8" +
	"\x06\x8c\xf3N\xf0\xe5\xe0\xa5\xa52\x952&-\xe3\xbc" +
	"\x1b|\x05xY\x99Le\xd8\xa0p~\x05x\x0c\xbc" +
	"\xbc\\\xa6rHt\xce\x97\x83\xf7\x81\x0f\x1f.\xd3p" +
	"\xc6$\x95\xf3\x15\xe0q\xf0\x11#d\x1aA$i\x9c" +
	"\xc7\xc0\x93\xe0\x15\x152U\x10I\x09\xce\xfb\xc0-\xf0" +
	"\x91#e\x1aI$\xad\x11'1\x16\x89\x83\x0f\x80\x07" +
	"\x022\x05\x88\xa44\xe7I\xf0u\xe0\x95\x952U\x12" +
	"I\x83\xbc\x1c\x0b\xfc\x06\xf0`PF'H\xd7q>" +
	"\x00\xbe\x01\xfc\xac\xb3d:\x8bHZ\xcf\xfbe\x1d\xf8" +
	"-\xe0\x92$\x93D$\xdd\xcc\xf3\xdf\x00\xbe\x11\\\x96" +
	"e\xf4\xa4t+\xe7\x1b\xc0\xef\x00\x1f5J\xa6QD" +
	"\xd2&\xceo\x01\xdf\x0c~\xf6\xd92\x9dM$\xdd\xc9" +
	"\xf9F\xf0\xad\xe0\xa3G\xcb4\x9aH\xda\xc2\xf9\x1d\xe0" +
	"\xdb\xc1\xc7\x8c\x91i\x0c\x91\xb4\x8d\x8f\x87\xcd\xe0;\xc0" +
	"\xc7\x8e\x95i,\x91t\x0f\xe7[\xc1w\x82\x8f\x1b'" +
	"\xd38\"\xe9^\xce\xb7\x83\xdf\x0f>~\xbcL\xe3\x19" +
	"\x93\xee\xe3\xe5\xef\x00\xdf\x05^U%S\x15c\xd2\x03" +
	"\xbc\xddv\x82\xef\x06\xaf\xae\x96\xa9\x9a1\xe9a\xce\xef" +
	"\x07\x7fL\x14H\xd4bT\xc6\x04*ct\xbd\xda\xd3" +
	"f\xe8F\x8a\x863\x81\x863j\xb0\xffv\xff\x0c\xa9" +
	"=KR\xb9\xbf\xac>\xd5R\xec\xbf2\x87\x9e\xc7\x7f" +
	"\xef60\xc6\x02=J\xafj\xe3\xfd\xef50\x16\x88" +
	"ZK\xb2%\x06\xa2V\x9b\x95\xfd\xa3O\xf1\xa4\xf4)" +
	"\x9e\x94X\xca\x93\x12Ky\x9f\x89\xb9)\xef\x1d\xbf:" +
	"\xd8\xc4X\xa0/\xe6&;\xc4\xdf\x17[e\x83\xe3\xbf" +
	"-\xc7\xdf\xa9\xec\xdf'ond,\xb0::\xe7<" +
	"\x074&90\xb2`EO#c\xd7\xf7G\xdb\x94" +
	"\x01\x97\xed\xefF\x9e5\xab\xfa\xa3\xf6\xdf7\xe0OE" +
	"]\xed\xfc\xf9\xde\x0d\xff\xef]\x87\x18.\xd9\xf4\xbaM" +
	"V%\x9cb\x83o\xd8\xc0-\xe3\xf8\xd7\xf0LC*" +
	"\xae\xb4i\xba\xf33s9\x89*qu\x89\xa7\xfdl" +
	"\xd2\xe6m\xd1\xc4\"#\xee6\x88?\xaeh\xd9\x7f\xa7" +
	"\xe2\x8a\xfb\xef\xe2\xf2-e)\x96\xea\x88\xb7f\xd3H" +
	"\xb6\x19\xb1t\\\x8d\x80B\xbaaT\xb8\xe2\xed\xd6\xb1" +
	"+1\xcc\xc7b\x98\x8f\x15(\xf8\xb6#\xde\xee\x1c\xcb" +
	"\x879\xf8V\xf0?9\xe2m\x0b\xe7w\x80o\x07\xff" +
	"#\xd9\xe2m\xdb\xd870<\xc1w\x81\xbf%\xda\xe2" +
	"\xed\x81\xb1w3\x16\xd9\x05\xbe\x07\xfcM\x9fL%\x8c" +
	"I\x8f\xf3\xdf}\x0c|\xffXG\xecA\xbc\xed\x1b{" +
	"%c\x91\xbd\xe0\x07\xc7:b\x8fo=y9\x07\xc1" +
	"\x8f\x8eu\xc4\x1e\xc4\xdb\x91\xb1\x8f2\x169\x0a~|" +
	"\xac@TjK\xb7\xd7x\xf6\xe3\xc0\x1f\"{Y\xa9" +
	"-\xdd\xfe5\xf6\xdb\x8cE>\x04/\x1d\x07\xa9G\xb6" +
	"t+\x19\xf7>c\x91\x11\xe3D\x8a\xcc\x07\x1f^&" +
	"\xd3\x08l\x8f\xc7=\x07i\x0e\xbe\x18|D\xb9L\x15" +
	"\x90\xe6\xe3P\xfd\x16\xf0N\xf0\x8a\xe12\x8d\xc4Nv" +
	"\xdcm\x90\xc2\xe0\xcb\xc1G\x8e\x90)\x00)<\x0e\xbf" +
	"\xbb\x1c\xbc\x0f< \xc8T\x09\xa9:\xeeFHO\xf0" +
	"\x1b\xc0+E\x99\x82\x8cI\xd7\x8d\xbb\x0b\xd2\x0a|;" +
	"x\xb0B\xa6\xb3\x18\xab\xdf6N \xb43\x12v!" +
	"\xe1\xac\x912I\x10\x03\xe3x;\x83\xef\x01\x97\x022" +
	"\xc9h\xe7qh\x9f=\xe0\xcf\x80\xcb\x952\x8dbL" +
	"zj\xdc\x8f\x19\x8b<\x03~\x18|TP\xa6\xb3\xb1" +
	"\x85\xe2?|\x18\xfc\x18\xf8\xd9d\x8b\xb7W\xf8\x0b\xbf" +
	"\x0c\xfe&\xf8\xe8\xb3d\x1a\x83\xed\x02/\xe7M\xf0\xf7" +
	"\xc0\xc7\xf8d\x1a\xcb\x98\xf4\xd7qO3\x16y\x0f|" +
	"\xc4x\x88=I\xa6q\xd8\xbe\x8e\xe7/P9^\xa4" +
	"H\x15\x12\xc6\xc9\xb6|\x1b;~\x15c\x911\xe0\xb5" +
	"\xe0\xe3G\xc9TE$\xd5\x8c\xbf\x96\xb1\xc8D\xf0\x19" +
	"\xe0Ug\xcbTM$M\x1bo2\x16\x99\x0a>\x17" +
	"\xbcz\xb4L\x13\x18\x93f\x8f\xc7\x00\x9a\x05~!\xf8" +
	"\x8412\x85\xb0\x8e\xf3r\xe6\x83\xb7\x80\x87\xc6\xca4" +
	"\x11\xeb5\xe7\x8d\xe0\xad\xe0\x13Kd\xaaaLZ\xc2" +
	"\xcbY\x0c\xde\x0d^3N\xa6IX\x7f\xc7\xa3!:" +
	"\xc1\x97\x83O\x1a/\xd3d\"i\x19\xcf\x7f\x05x\x0c" +
	"|r\x95L\xb5XO\xc7cd\xf5\x81[\xe0\xb5\xc3" +
	"d\xaacLZ3\x1e=\x9f\x04\xdf\x08^\xe7\x97i" +
	"\x0a&\xe4xt\xd8F\xf0\xfb\xc1\xa7T\xcb\xf4\x19\xc8" +
	"\xff\xf1\xaf\xa2\x83\xc1\xf7\x80\x7ff\x82LS\xd1\xc1\xe3" +
	"\xff\x8d\x09\x03~\x10|*\xc94\x0d\x13f<\x9f0" +
	"\xe0G\xc1\xa7\x85d\x9a\x8e\x09\xc3\x7f\xf70\xf81\xf0" +
	"\xe9\xa52}\x961\xe9\x95\xf1\xe8\xc8c\xe0'\xc1?" +
	"+\xc84\x831\xe9\x1f\xe3\xd1\x91'\xc1}U\x02\x05" +
	"gL\x94i&c\x12U\xadd\xac\xab\x0a\xfd\x0b<" +
	"\xb3F\xa6s\xd0\xbfUv\xff\"\xa1\x0a\x09\xe7\x882" +
	"\x9d\x8b\xfe\xadB9U\xe0S\xc1\xcf\x9d$\xd3,\xc6" +
	"\xea\xeb\xaa\xba\xf0\xc0\\$4\"a\xd6F\x99fC" +
	"\xc1\xaa\xc2\x0b4\x82\xb7\x82\xcf\xde$\xd3\x1ctL\x15" +
	":~1x7\xf8\x9cZ\x99\xea\x89\xa4p\x15\xa6\xea" +
	"\x15\xe01\xf0\xfa:\x99\xe62V\xafT\x95\xe3\x07\xe2" +
	"H\x18@\xc2\xdc2\x99\xcecLJ\xf3\x07\xd6\x81o" +
	"\x05?O\x90\xe9sX\xc9\xab\xfe\x8c\x15\x18\xfc~\xf0" +
	"\xcf\x892\xcd#\x92\xee\xe3|\x17\xf8\x1e\xf0ySd" +
	"\x9a\x8f\x1e\xa8B\x0f\xef\x05?\x08>\xff32\x9d\x8f" +
	"\x1e\xe0/p\x10\xfc(\xf8\xf9>\x99. \x92\x8e\xa0" +
	"\xe5\"\x87\xc1\x8f\x81_P.\xd3\xe7\xd1\x03U\x98\x01" +
	"/\x83\xbf\x09\xfe\xf9\xa92]\x88)\xc6[\xeeM\xf0" +
	"\xf7\xc0/\x9c&\xd3E\x98bU/2\x16\xf9\xa0J" +
	"\xa4\xaej\x81\x82\x17M\x97\xe9b\xc6\xa4\x8f\xf8k\xf9" +
	"\xaaE\x8aT\x82_\xfcU\x99\x1a\x18\x93*\xaaQL" +
	"%x\x15x\xc3gejD\xc7TC\xe1\x90\xc1'" +
	"\x827\xce\x90\xa9\x09\xdb\xd9jT\x7f\"\xf8\x0c\xf0\xa6" +
	"\x992-`L\x9aV\x0d\x117\x03|>\xf8\x82s" +
	"dj\x86\xa8\xac\xc6\xc0\x9a\x0b\xde\x08\xde|\xaeL-" +
	"\xe8\xc7jL\xb0\x0b\xc1\x17\x83\xb7\xcc\x92i!D(" +
	"/g1x7\xf8\xc2\xd92-\xc2\x04\xab\x86\xa8\xec" +
	"\x06_\x01\xbeh\x8eL\x97@a\xad\xc6\x00]\x01\x1e" +
	"\x07\xbf\xa4^\xa6\xc5\xd8\xfcW\xf3\x11\x97D\xc2:$" +
	",\x9e+\xd3\x12\xc6\xa4A\xfe\xc0:\xf0[\xc0\x97\x94" +
	"\xc8t)4A\xfe\xc3\xb7\x80o\x06\xbf\xf4<\x99\xbe" +
	"\x00\xcd\x8e\xff\xf0f\xf0\x1d\xe0_\xf8\x9cL\xad\x8cI" +
	"\xf7T\xa3Aw\x82\xef\x06o\x9d'S\x1b4,^" +
	"\xfen\xf0\xbd\xe0m\xf3ejgLz\xa2\x1a\x92`" +
	"\x0f\xf83\xe0\xed\xe7\xcb\xd4\x01\x91[\x0d\xd1\xfa\x0c\xf8" +
	"a\xf0\x8e\xe12uB\xe4Vc\xc6\x1f\x06\x7f\x17\xbc" +
	"\xf3\x02\x99\xc2\x8cI\xefp\xfe.\xf8I\xf0\xf0\xe7e" +
	"\xea\xc2\x8c\xe4\xf5<\x09\xee\x9b P\xb0\xebB\x99\"" +
	"D\x12M\xb8\x94\xb1\xae\x09\x98\x91\xc0\x91\x8bd\xeaf" +
	"L*\x9b\x80\xf9R\x0a.\x83w\x8f\x90i)cR" +
	"p\x02\x8a\x91\xc1g\x81/\xad\x90\xe92\xc6\xa4\x99\x9c" +
	"\xcf\x02o\x05\xbf\xecb\x99.\xc7\xbc\x9b\x80f\xe8\x04" +
	"_\x0e~y\x83LW0V\xbfl\x02o\xff\x15H" +
	"\x88#\xe1\x8aF\x99\x96ag0\x81\xef\x0c\xc0\x93\xe0" +
	"W6\xc9t%cRb\x02\x06D\x1c|\x00\xfc?" +
	"\x16\xc8\xf4\x1f\x98\x8f\x9c[\xe07\x80/o\x96i9" +
	"\xd6B\xfe\xc3\x1b\xc0\xef\x00\xbf\xaaE\xa6\xab\x18\x936" +
	"M@\xfb\xdc\x01\xbe\x1d\xfc\xea\x852]\x0dUd\x02" +
	"\xday;\xf8\xfd\xe0\xd7,\x92\xe9\x1aH\xd0\x09\x18\xa0" +
	";\xc1w\x83\xaf\xb8D\xa6\x15\xe8\xc7\x09\xe8\xaf]\xe0" +
	"{\xc0\x95\xc52)\x98\xd7\xbc\x9c=\xe0\xcf\x80\xaf\\" +
	"\"\xd3J\xf4#\xe7\xcf\x80\x1f\x06\x8f^*S\x14\xfd" +
	"8\x01\x13\xec0\xf81\xf0\xd8\x17d\x8a1V\xff\xca" +
	"\x84Ih\xa07\x91\xf0\x1e\x12\xd4V\x99T\xc6\xea\xff" +
	"j'\x9cD\x82/$P\xb0\xa7M\xa6\x1e\xc6\xea)" +
	"\xc4\x13F\x84D\x8a\x8cABo\xbbL\xbd\x8cI\xa3" +
	"B\x10\xf6U\xe0S\xc1\xfb:d\xeacL\xaa\x0bA" +
	"\x14\xcc\x00\x9f\x0f\xaeu\xca\xa4aN\x86P\xd5\xf9\xe0" +
	"-\xe0\xab\xc22\xad\xc2\xa2\x17\xc2\x14h\x01\xef\x04_" +
	"\xdd%\xd3j\xa8/\xa1\x07\xd1\xc7\xe0\xcb\xc1\xe3\x11\x99" +
	"\xe2\xe8\xe3\xd08T(\x86\x84$\x12\x12\xdd2%\x18" +
	"\xabO\x84\xb8p\x1d@\xc2\x06$\xe8Ke\xd2\x19\xab" +
	"_o\xbf\xc2F$lE\x82q\x99L\x06\x14\xc8\x10" +
	"\xc4\xcaV\xf0\x9d\xe0\xc9\xcbeJ2&\xdd\x1bB\xef" +
	"\xec\x00\xdf\x05\xbe\xe6\x0a\x99\xd6@\xb1\xe1\xf9w\x81\xef" +
	"\x017\x97\xc9d\xa2wxU\xf7\x80?\x03\x9e\xbaR" +
	"\xa6\x14z\x87\xe7\x7f\x06\xfc0\xb8\xf5\x1f2Y\xe8\x9d" +
	"\x10\x9fe\xe0\xc7\xc0\xd3\xc3dJC\xea\xf2r\x8e\x81" +
	"\xbf\x0d\xde\xbf\\\xa6~\xc6\xa4\xb7B\x90\xea\xef\x82\x9f" +
	"\x04_{\x95Lk1\xfbx\xd3\x9d\x04\xf7M\x14(" +
	"80R\xa6\x01\xac\x87\x13\xc1}\x13!F\xc1\x07\x03" +
	"2\x0dB\x8cND\xf9\x13\xc1/\x04\xbf\xb6R\xa6k" +
	"\xa1\x8fL\x84\xb4\x9f\x0f\xde\x0d\xfe\xc5\xa0L_\x84\xf8" +
	"\xe3\xe5t\x83'\xc1\xd7\x9d%\xd3:\xcc\x9a\x89\xe8\xca" +
	"$\xf8F\xf0\xeb$\x99\xae\x83\xbe\xc0\xcb\xdf\x08~?" +
	"\xf8\x97d\x99\xbe\x84\xd1>\x11\xb3f\x17\xf8A\xf0\xeb" +
	"G\xc9t=V\xa5\x89\x18*\xcf\x83\xbf\x0d~\xc3\xd9" +
	"2\xdd\x80\xf7\x9d\x08\x05\xfe]\xf0\xd2\x1a\x81\x82\xebG" +
	"\xcb\xb4\x1e\x9aq\x0d\xca/\xad\x81^\x06~\xe3\x18\x99" +
	"ndL\xaa\xa9A\xfbL\x05o\x01\xbfi\xacL7" +
	"ah\xd5\xe0w\x17\x83\xc7\xc07\x8c\x93i\x03\xf4\xa0" +
	"\x1a\xb4\x7f\x0c\xfc\x0e\xf0\x9b\xaf\x96\xe9f\xccb^\xfe" +
	"\x1d\xe0\xdb\xc1\xff\xf3\x1a\x99\xfe\x13\xb3\xb8\x06bk+" +
	"\xf8N\xf0/\xaf\x90\xe9\xcb\x18'5\xa8\xff\xfd\xe0\x8f" +
	"\x81\xdf\xe2\x97\xe9\x16\xc6\xa4Gj\xb0\xaa\xee\x06\xdf\x0b" +
	"~\xab\"\xd3\xad\x90\xc65\x90\xd2{\xc1\x0f\x82\xdf\xb6" +
	"R\xa6\xdb\xd0\x0e\xfcw\x0f\x82\x1f\x05\xffJT\xa6\xaf" +
	"@?\xaa\x81\x14:\x0c~\x0c|cL\xa6\x8d\x18'" +
	"\xbc\x9cc\xe0o\x83oRe\xda\x84v\xab\xe1\xed\x06" +
	"~\x12\xfc\xab=2}\x15\xe3\x84\xb7\xc3\x87\xe0\xa5\x93" +
	"\x04\x0a\xde\xde+\xd3\xedh\xcfI\xc8?b\x12\xa66" +
	"\xf8\x1d}2\xdd\x81\xa9=\x09\xed3\x06\xbc\x16\xfcN" +
	"M\xa6;\xd1\xce\x930/&\x82\xcf\x00\xbfk\x95L" +
	"wa\x19\x9e\x041=\x03|>\xf8\xd7V\xcb\xf45" +
	"L\xf9Ih\x87\xb9\xe0\x8d\xe0\x9b\xe32m\xc62<" +
	"\x89/\xc3\xe0\x8b\xc1\xb7\x8c\x97i\x0b\x96a\x9e\xbf\x05" +
	"|\x05\xf8\xd7\xabd\xfa:\x96\xdbI\x18\x9f\xcb\xc1\x07" +
	"\xc0\xbf\x91\x90\xe9\x1b\x90\xd2\x93 \xe5\x06\xc07\x80o" +
	"\xad\x96i+c\xd2z^\xcf\x1b\xc0\xb7\x83o\xd3e" +
	"\xda\x86~\x9c\x84\xf1\xbc\x1d\xfc~\xf0\xbb\x0d\x99\xee\xc6" +
	"\xf8\xe4\xf9w\x82\xef\x06\xff\xe6\xed2}\x13\xd2\x98\xff" +
	"\xee.\xf0=\xe0\xdb\x932m\xc7|\x9f\x84\xf1\xf0\x18" +
	"\xf8\xfeI\x02\xcd\xbe\xe7\x19\x92\xe9\x1e\xec\x18\xf9\x0b\xec" +
	"E\xc2A<\xf0-S\xa6o\xa1\x83y\x83\x1e\x04?" +
	"\x0a\xfe_)\x99\xfe\x0b\x1d\xcc\x1b\xee(\xf8q\xf0\x1d" +
	"\x96L;\xb0e\xe4?|\x0c\xfcm\xf0{'\xc8t" +
	"/:\x98\x97\xf36\xb8o\xb2@\xc1o\xa7e\xfa6" +
	"&\xfcdtd\xe9d\xac\xab\xe0\xdf\xe9\x97\xe9;X" +
	"W'cb\x8c\x01\xaf\x05\xdf\x19\x92i':r2" +
	"\x04S-x#\xf8}ke\xba\x0f\x1d3\x19\x03\xb1" +
	"\x11\xbcu\xb2@\xb3\xbf{\x80d\xfa.\x16\xdc\xc9h" +
	"\xa1\xc5H\xe8\xc6\x03\xdf\x1b\x90\xe9{\x90\x10\xfc\x81n" +
	"\xf0\x15\xe0\xf7\x0f\xcat?z\x8c\xff\xc0\x0a\xf08\xf8" +
	"\x03\x13ez\x801I\x9b\x0c\xbd5\x09\xbe\x11\xfc\xc1" +
	"\x1a\x99\x1e\x84\xe4\xe0\xe5\xdf\x02\xbe\x13\xfc\xa1I2=" +
	"\x84\x196\x19/\xbc\x13|?\xf8\xaeke\xda\x85\x86" +
	"\x9e\x0c\x09\xb4\x1f\xfcy\xf0\x87'\xcb\xf40c\xd2\xb3" +
	"\x931\xb2\x0e\x82\xbf\x89\x17\xf8\xfe\xcfI\xa6\xef\x13I" +
	"\xafOF\x8b\x1eG\xc2\xbbx\xe0\x07_\x94\xe9\x07P" +
	"l\xf8\x0b\xbc\x0b~\x12|\xf7:\x99v\x13I\xff\x98" +
	"|)\x14\xda\xc9\"u\xd5\x0a\x14|\xe4:\x99\x1e\x81" +
	"B\xcb\xeb\xf9!\xb2\x97\x82?\xfa%\x99\x1e\xc5L\xaa" +
	"E\xf1\xbeZ(\xba\xe0?\xbc^\xa6\x1fB\xd1\xe5|" +
	"\x04\xf8\x18\xf0\xc7n\x90\xe91\xcc\xb0Z\xfc\xec\x18\xf0" +
	"Z\xf0\xc7\xd7\xcb\xf48:\xa6\x16\x03\xa2\x16|\x16\xf8" +
	"\x8fn\x94\xe9GP\x84j1\xb0f\x80\xcf\x07\xff\xef" +
	"\x9bd\xfao\xcc0^\xfe\\\xf0F\xf0=\x1bd\xda" +
	"\x83\x8e\xac\xc5\x08\xbd\x10|1\xf8\x137\xcb\xf4\x04f" +
	"\x18/\xa7\x05\xbc\x13\xfc\xc7\xff)\xd3\x8f\xb1\xd8\xd6\xe2" +
	"\xbdZ\xc1\xaf\x00\xff\xc9\x97e\xfa\x09c\xd2R\xce\xbb" +
	"\xc1W\x80\xef\xbdE\xa6\xbd\xe8_^\xcf\x15\xe0q\xf0" +
	"}\xb7\xca\xb4\x0f\xfd[\x0b\x89\x98\x04_\x07\xfe\xd3Z" +
	"\x99~\x0a\xfd\x97\xd7g\x00|3\xf8\x93u2=\xc9" +
	"\x98tg-\xc6\xc9f\xf0\xdd\xe0\xfbo\x93i?\x91" +
	"\xf40o\x9f\xdd\xe0{\xc1\x9f\xfa\x8aLOA\x82\xd6" +
	"\xa2\xdf\xf7\x82\x1f\x04\x7fz\xa3LOc\x82\xf1\xfa\x1c" +
	"\x04?\x0a\xfe\xb3)2\xfd\x0c\x13\xac\x16;\xd5\x97\xc1" +
	"?\xa8\x15h\xf63\xc9*\x99\x9eaL:Q\x0b\x91" +
	"x\x12\x09\xbe:\x81\x82\x7f\xd8$\xd3\x01(\xaeu\xab" +
	"\x18\xeb\xaa\x83\xe2\x0a\xfc\xc6We\xfa9\x91TV\x07" +
	"\xc91\x02|\x0c\xf8\xeb\xb7\xcb\xf4\x0b\"iT\x1d\xea" +
	"3\x06\xbc\xb6N\xa0\xd9\x07\xd6T\xc9t\x10\x1dY\x87" +
	"\xf13\x11\x093\xf0\xc0\xcf\xef\x90\xe9Y\x88\xca:\x0c" +
	"\xd0\xa9\xe0s\xc1\x7fq\xa7L\xcf1&\xcd\xaeC}" +
	"\xe6\x83\xb7\x80\x1f\xbcK\xa6_b\x09\xab\xc3\xcc^\x0c" +
	"\xde\x0d\xfe\xec\xd7dz\x1e\x13\xaf\x0e\x13\xa3\x1b|\x05" +
	"\xf8s\x9be:\x84\x8e\xa9\xe3\x13\x0f<\x0e\xfe\xcb-" +
	"2\xfd\x0f:\xa6\x0e\x0d\x1a\x07\x1f\x00\x7f\xfe\xeb2\xbd" +
	"\x00\x11\xca_`\x00|\x03^\xe0\xd0rA\xa6\xc3\x90" +
	"\xa1\xfc\x8d7 \xe1\x0e<\xf0?[e:\x825\xb2" +
	"\x0e-\xba\x19|\x07\xf8\x0b\xdbdz\x11;\x93:\xc8" +
	"\xe2\x1d\xe0\xbbP\xd0\xe1\xab\x04\x99~E$=P\x87" +
	"!w?\x12\x1eC\xc2\x91\xab\x05\x99\x8e\x12I\x8f\xf0" +
	"\x84\xddH\xd8\x8b\x84\x17\xcd*\x99^B'\xd7a\xd0" +
	"\xedA\xc23H\xf8\xd55\x82L\xbf&\x92\x9e\xaa\x83" +
	"v\xbc\x1f\x09\xcf#\xe1h\x9f \xd3o\x88\xa4gy" +
	"Q\x07\x91p\x14\x95z\xe932\xbd\x8c\xee\xaf\x9b\x03" +
	"\x05\x03\xfcm\xf0_O\x95\xe9\x15\xc8\xd1:\xec3\x8f" +
	"\x83\x7f\x08\xfe\x9bi2\xbd\xca\x98\xf4/\xce?\x00\xaf" +
	"\x9c\"P\xf0\xe5\xe92\xfd\x16\xd3x\xca\x02\xc8\xd7)" +
	"\xe8\xe6)\x02\xcd~E\x13d:\x86n\xe6\x09UH" +
	"\x98\x8a\x84WW\x092\xbd\x06-x\x0a\xfa\xbf\x16\x09" +
	"\xb3\x90\xf0\xdbT\x95L\xbf\xc3L\x9e\x82\x9f\x98\x8a\x84" +
	"\xb9H8fU\xc9\xf4{\x8c\x00^\xd4\x0c$\xcc\xc7" +
	"o\xbf\xf6Y\x99\x8ec\x8aO\xe1z3x\x0b\xf8\xef" +
	"f\xc8\xf4:F\xc6\x14L\xfdF\xf0V\xf0\xdf\xcf\x94" +
	"\xe9\x0d\x88\xea)\xfc\xb0\x08\xbc\x1b\xfc\xf892\xfd\x01" +
	"#f\x0a\xa6\xe6\x15\xe01p:W\xa67\xa1\x0cM" +
	"\xc1\xd4\\\x01\x1e\x07\x17f\xc9\xf4\x16F\xcc\x14\x8c\xd4" +
	">p\x0b\\\x9c-\xd3\x1f\x19\x93\xd6\xf0\xfcI\xf0u" +
	"x\x01_\xbaJ\xa6?a\x8e\xf3\x0a\x0d a\x03\x12" +
	"\xde\xe9\xaf\x92\xe9m\x0c\xa5)\x18\xdb\xb7 a3J" +
	"Z\xf6M\x99\xde\xc1&w\x0azg#\xf8\xd6)\x02" +
	"ezL#e}A\x8b3\x7f\xbcC'b\x02\x11" +
	"\xa3\xc0jku\xf6\x06\x00\x7fD\xb3\xe7\xcdJ*\xa5" +
	"%\xb4\xb8\"Xj\xa7bZ\xcd\x86\xda\xd3\x93\xeaR" +
	"ci\x7fT\x8d\xb9\xcfg\x8c\xfa\xcb#\x96\x91P\xc8" +
	"R\xe2\xcdq#\x95\x16M\xefeA\xc6\xa8\x8f\xa4\x13" +
	"K\x93\x16\xf3+\xab\xd5l\xd9\xfd\xa9V\xc5\xd2\xac4" +
	"\x13c9\xa8\xac4\xfa\xd5^\xd3\xa0\xb4\x1e[\xa0\x19" +
	"\x09EL\xa5N\x9d\x18J\xa5:\xe2\xb1lz2\xda" +
	"\xc4s\x90i\xa4\xf5X\x87\xd9+*:\x8dd\xd4)" +
	"\x12\xaf\xebH\x94\x11\xb5\xd2J\xbc\xdb$EO%5" +
	"S\xb1\xfc\x9a\xa1{K\xe0o,\xc4\x15\xfb\x8d5K" +
	"3tM\xef\x0d\xf1Ww\x0bs\xfe7\xdc)3\xef" +
	"\xa9.U\x89\xc7\x8d\xa8\x82\x07\x19\x1b\xd2\x92\xcco\xa9" +
	"\xa9!\x94\x90\xbbK\xb1\xd4\xbc',\xd3\xd0\x8d\x04i" +
	"\xd1\x16e\xb0U\xd5\xfd\xbd}\x96\xa7\xa6\x0b\x94\x94\xda" +
	"\xa2\xd0`\\\xd5{\xad>6\xb4R\xc8\xd0\xadR\"" +
	"\xa9\x9a\x8a\x956I-\x92E\xed\xd5\xf4\x88\xa8\xea)" +
	"\xcd\xd2\xfa\xd5\xce>%\xa5.V\x15+b\x99j*" +
	"\x95\xab\xcbJ5n\xac=U\xb7\x0cI\x1c\xd2-\xcd" +
	"\x8a\xb9\xd2\x18\xa0\xc18o\x95\xce\x06\xc5\xea[\xab\x0c" +
	"R\x09\x13\xa8\x84Q&\x1aW\x15\xb3E\x19\xa4.%" +
	"\xa6!\x0by{\xa4\xd9\x98\xd3\xa6Z\xcc\xdfg\xc4h" +
	"\x18\x13J\x86\x89x\xc4\xd4,-\xaa\xc4\xa9\xbd\xd9\xd0" +
	"\xa3\xaan5\x98\xbcl\xefs<\x8b\xa0\xc4;\x06\x06" +
	"{U\xbd\xd9\xd0-U\xb7\x8a\xb4\x93\x9dQT\xe2\xdd" +
	"\xaa\xdbVE\x1b!j\x1a\xc9\x16MI\xb0\x80j\xa9" +
	"f\x1e^d\x1a)\xd6`af\x0cxG>\xd2P" +
	"\x14\x0b\x9d\"I\xebeb^\xaf6s\xcc\x1a\xb4\xde" +
	">\xabs\xf6\xa9\x12\xe6\x14$\xb4+LL\xa84\x82" +
	"\x094\xc2\xa9R{\x8b\x9a`~E\x8f\xe5U\xb4\xbd" +
	"K\x8d11\xbf&v\x11\x91\xa4\xa0F\xb5\x1e-\xda" +
	"\xa6\x0ct\x19\x86\x85A\xdf\xa2&\xad\xbe\xbc\xe7/W" +
	",\x95\xcc\xa5IKY\xad\x0ei\xcah\xda4U\xdd" +
	"\xea&\xb7\x1dC\xa6\x1aI'N\x95M0\xac\xbc6" +
	"\x8f\x88\xe9D\xee\xc7N\x95\xa9!\x9d@\xf5\xbc\x0d\x90" +
	"\xb6,M\xa7\xde\x165\xae\x0c\xb6(\xe2`\x8a\xfcL" +
	" ?\xa3LL\xb1\xa7\x07\xf5-R\xa2\x96a2\xcf" +
	"c-<\x8dz\xad\xbe.uMZk0\xd5\x84\xaa" +
	"[\x85\x95\x8d)\x83\xa9\xa6\x1eK\x15L>W\x16\xc5" +
	"\x8d\xb5\xaa\xa9\xe9\xbd,\xf7\x1bj4\xae\xe9\x8a\xc5\x0a" +
	"$I\x8b\xda\xa3\xa4\xe3\xa2\xe5\x0ej}iJ]\xd8" +
	"\xd3\xa3E5U\x8f\x0e\xe6j\xd2\x9f\xe0\xcd|\x89\xc0" +
	"\xa5\xd6Z\xc5R\xcdnee\\\xcd\xfd\x02\xca\xeaW" +
	"\xe3\x86/\x89\x1a6E\xa3j\\\xb5\x87\xfb\x82\xc1v" +
	"\xcd2\x8d^U\xe7\x83\x95R\xee\xado&\xc6\x9fH" +
	"&H\xd5-%\x1e\xb1\x14\xb1W\xcd\x16\xa8\x1b\x1d=" +
	"\xe8s\x16\x8aXj\xd2\xd3\\\xa6\x91\xee\xed\xb3\x96\x08" +
	"\x89\xa4\x12\xb5:\xf4E\xaaiiq\xcd\x1at\xc5\x92" +
	";`ZxF\xd1ZR\x98\xd1i\xe6\xbcv\xe6y" +
	"\x05g:u\xf7\x99j\xaa\xcf\x88\xc7X\x91\x99\xb80" +
	"\xa1\x9a\xbd\xaa\xa0G\xd5Eq\xc3\x88iz/f\xad" +
	"\x190<\xabU^\xb66CKaT\x14\xcf\xa6\xc7" +
	"\"\xaa.\x14\x8a\xb6\x10\xafG\xb6\x82jO\x8f\x1a\xb5" +
	"\xb4~Rm)\xdb+z\x86\xbcj\x9a\x86\x19\xb1 " +
	"\xb5\xd3\xa9l\xd1\x9c\xb6\xa9)\x16H)\xbd\xb9Y\xa7" +
	"\xf6+I\xc3T,A\x8d-2\x8d\xc4\x12\xddR\xcd" +
	"\xa8\x9a\xb4r\x8d\xa1\x0eX&\xfaW0\xd5\x94ej" +
	"J\xbc\xa8\xc0[\xa4\xa9\xf1X\xb3`\xe81\xbe\xfa\xb4" +
	"\x191\xadGS\xbd\x8d\xda\xa3\xe9J\xbcE\xed\x17x" +
	"\x17\xbb=\xdc\x9b\x1b2\x0d=\xda\x80\x1ak\xf7\x16\x8a" +
	"\x95\xbf\x85\xd4>\xc5\x8c\xa9\xba&\xea\xbd\x85\x89\x8b\xc9" +
	"N\xd2{=\xbf\xd4\x1b7V\xa2\x9a\xe4\x8caO\x8a" +
	"\xa9\xaaz\x93\xa9\xb2\x06e\x89\x1eS\x07<\x09F*" +
	"\xd5\x94J\x11_\xd9,5\xe5-\x0ei\x9d}\x06Y" +
	"FjP\xb7\xfaT\x7fJK\x9d:\xb5!\xa5\xa5\xda" +
	"r\xd7\xe2\xd9\x0c\xa2\x9b!\xa5\xa5\xba\xd4\x1e\xd5T\xf9" +
	"X\x88\x17\xfe\x90\xa9QB1\x07;M#\xd6\x90\x8e" +
	"\xe6\xad\x0f\xbd\xa6\xb1\xd6\xeak\x1e\xa4h\\]\xa8\xc7" +
	"T\x8cG\xb7\x7f\xed\xb4.\x95l\x0dA3\xfczS" +
	"\xc4\xd3\\|\x18\xa5\x85\xc4\x12\xd3\xd4zy\xb3D," +
	"\xc5\xb4\xf2F\xbd\x9d\x87\xdc<\x0d\x9a\xa1/\xf4\xc8\xe2" +
	"\xfe\x14d\x7f\x9f\xc5\xc4vo/-\xd15KS(" +
	"\xfe\x85(\x9fHd\x16I\xeb0{\x15}\x81\x162" +
	"\x12J*5t\x0e\xb9\xd9\x8a\xcbp\xcd\x19\x94d\xd7" +
	"\xda0\xfdY\xc3\x0eF\x99\xd5Qw\xfe:\xaf\x92\xa9" +
	"\xe7\xff\xfd\xa1\x811\x96\x89\xabJO\x93\xa9*,\x94" +
	"\xdf\xe1\xa9\xb4\x1e\xd7\xacV\x95\xec\xe4%\xba\x1f\xa9\x05" +
	"\x15K\xf5)15\xf6\x09\x99\x92\xd1Vcm\xb7\x9a" +
	"\x10\\i\xbfp i\xa4\xd2\xa6\x9a\xd7\xb4\xadZB" +
	"\xb30\x82O\xbf^\x07\xe2\xd6y\xb3\x1c\xb1U\xba\x9f" +
	"\x8b\xadV\xeb\xbcY\xd14k\x88[Z\xbf\xe2m\xdb" +
	"\xd6\xf4@\xda\x1cd\x0d\xed\xb6\x9a\x975\xb7P\xd0^" +
	"\xba\x02Q\xd3\xa5\xba\xa3Ao\x8a\xe4\xd5\xa7M\x19\xc8" +
	"\x0dw\xcd\x08qE.?\xbd\xd94\x88\xeb\x0e*\x96" +
	"\xcf\"i\xceh\xf0\xfc\xf2@;VY&\xae.(" +
	"\xaa}i\x92\xb0\xfav*\xa6B\x89\xfc\xb4.\xc3 " +
	"t:\xfa\x9c\xfa\xbci\x9a\xae%\xd2B\xc2\xd5\x96\xcc" +
	"\x82\xc9\xec\xe6\x10\x13\x9e6]d\x98M\x8e~Z\xa8" +
	"%w$\xadO\x91\xbbM\x19\xf84\xb9\x9d\xbazr" +
	"c,7\\\xc2ge6\xa3\xaeZm\xe8\x1eA\xd5" +
	"\x95\xbc\xee\xf1\xc8R]\xb5:\xfb\x0c\xcb WZP" +
	"*/\xcdT\xa3\x1a%5\xabPY\xe7iZB!" +
	"[v\xa4\xa3\x81\x02\xdd\xd2nG\xd1m\xc8&gc" +
	"RL;\xd6\x9d&\x17\x8bgMy\xc5\xe3'\xe6\xf5" +
	"\xe7\xeb\xd5v5\xc8\xad\x86\xb8`V^Q\xd0w\xa9" +
	"E\x85\xcaa\xb1\xd3<\xd6\xd9~\xea\xc4@\x9e\xb2\xe5" +
	"V\x90\xec\xc4.C<]b\xc8\xb0\x0a\xea\xcb\x95\x15" +
	"Ru\xf4\x96\xa1\x07Rj\xde\x82\xdd\x9eN\xacTM" +
	"\xa1\xa3\xa7\xc5Q^\xec\x95-\x84\xa5-\xe5-\x86\xe7" +
	"\xa3\x8e\x1e.\x0a\xf3\x1a\xd0\xd6L\x17\x91i$Z\x95" +
	"A\xbeh\x0e\x911\xf6\xe0%w\x80\x050\xc2\x0as" +
	"\x19\xb6\x905X\xa0\x98\x94\xe5\xa9-\xaaB\x9e>," +
	"\x96\xe5\x12S%U\xb7\xf3P\xea\x14Y\x0cZk\xf5" +
	"-\xd1\xa3\xa6\x1a(\xa6\x80&\xa3\xfc-\xa1\x1e\xf2E" +
	")+\x85\x8a\xbe\x1a\xb2.\x11b\xa9E\x86\xc9G\xb0" +
	"9\xb8LS\xe3\x14s\xb3V\xe6L\xf2\x19\x15y(" +
	"\xa2F\x0d=\xc6\x1f\xf3\xab\xf13x\x8c\xf8c\xcdi" +
	"+\x00\xc1\xf3\x89\xf9\xdb\x04G\xa4f\xa7l\xc8\xde\xb7" +
	"\x15k\x1bhoj*\x8a\xc5\x9d\xb7\x0f\x9a\xe7\x94o" +
	"\x1d!U\xb73\x87T.\x80\x8b\xef\xd5\x8d~\xd5\x8c" +
	"*)\x8bZ\x94A\xae}\xe5Om\x83\xef\x15[T" +
	"\x16\xe2\xb3\xc63\xe8:\x15\xd3Z\xa0\x09F\xdc\xe8\xc5" +
	"\xc6\xb3}\x9160Ds\xeb\x84&\xa23\xbf\xa6\xc4" +
	"s\xc3\x1a\x02(\xa9\x9a\xa4\x191\xbe\x93o\xb07\xec" +
	"\xb9\xc7\xfa\x0c\xab)ju\x91\xbbO\x08\xb4\xa9J^" +
	"\xa9qE\xb7ZX\x03\xdf\xa5\x0f\xe6\x12\x0c\xcco," +
	"\xf5\xdd&?\xcc(\xdc\x02\x9b\x8ef$\xa8\x0b\xa1\x99" +
	"Zf\xd1#\x0fS\xc5\xaa\xd5\xaf\x0a\xdd\xd8iyf" +
	"\x9egZ\x99*VBM\x17zO_RJ5\xfb" +
	"\xd5&r\x05{H\xed4<\xda[2\xda\xa5\xa6\xb4" +
	"X\x9a\xd4\xf6.\xd4\x94\xe5\xa7$5\x93\x14\xcb0\x07" +
	"#\x96\xe9\xf7j\xe8\xa6aX\x98C\xcc\xaf\x14\xa3\x0d" +
	"J\xfeq\x03\x12ZT=\xc5\xfch\xad\x82\xee\xe7\x89" +
	"\xb9=\xfc\x90\xa1\xd4\xc5\xd3\x05h\xe7+\xd3\xfc\xb0B" +
	"1\x95\x04\xcb+|aO\x8fJ\xd82`cT\xbc" +
	"\x88E\x06\x99\x89\"{!\xa4]b\x12fr\xab\xd2" +
	"\x9b_,\xd6m\x16\xe0\xda\x9a\xbb\x1f\xcb\xe2\x10p[" +
	"a\xf6+\x99\xdf\xd0U\xcf6\x11\xc5w\xaa\xa4\xab\xb6" +
	"\xf0.\xd0D\xfa\x13\x11\xac\xa6\xf6a\x13\x96\x05\xbfw" +
	"\x84\xa7\x0c-\xdel\xf4\xab,`zU\xc2\xfeT\xc4" +
	"\xd0\xe2m\x1a\xe9\xaa\xa9\xc4\xdb\x9b\x8d\x90\xbd\xac\x14\xaa" +
	"w\x86\x16\x8f$\xd5\xa8\x90\x7f\x82\xd0\xa2\xfa\xbd\xda\xa7" +
	"]\xd8'\x9f4$\xa3\xdcD\xbf\x87\xb4h+W:" +
	"EU\x19\xda\xd0\xd9<(\xa4U\x0d\xe4\xcf\xaa(\xdf" +
	"\x115Q\x8f\xa5B<yw\xd3N\x8a\xd5\xa6\x0c`" +
	",\xe4\x1f\xe7\xe4%C-\xcb?\x9f\xe1\x89m\x82]" +
	"\xf3\x9c:\x15(&\xc4\x9c\xdc_ W\xad>E\x86" +
	"O:0IYFB\xb1\x94.\xc2~\xc7R\xf4(" +
	"\xa9y52L\xa5\x975\xa8\\\x0c\x16\x9ew\xa6x" +
	"\xaa\xda\xc1\x02<\xd5\xcf\x84\x12\xbf\x8fQ\xc6R\xcc^" +
	"\xd5jo\xa6\xfc7p\x8b\xb5\xb4\x84\x1a\xb1\xd4$\xcb" +
	"\xdf\xf9\x03/\xd5c*\x99M\xba1\xa0),{\xde" +
	"\xd0\x9f\xea6L+m\xb0@\x9e\x90\xb2 Tr\xeb" +
	"h!&P\xb4b\x80\x0f\xaa\xbcdG/V\xac%" +
	"\x89\xa4_\x89\x16\xa4\xb6/\xd1\x99?\x99.\xa4K\x93" +
	",`yO\x999\xeeRS,\x94\xd4L5\xe6\x15" +
	"V\\\x82\xe5\x9f\xda\xa4\xd2\x09.\x06\xa9\xdd=\xe2\xca" +
	"/\x07\xfau\xabs\xde\x9a\x97\xd2\xad&\xc8\xd5V\xfd" +
	"\x11\xcf9\x96\xe5t\xad\x90\xe6]\xdbm\xb8'H\x94" +
	"\xdb\x80\xbb\xf2\x94\x15_\x0b\xddd\xb2\xd5*5&\xa6" +
	"\x07N\x9f\xa7E\xed\x09\xe4\x96/\xbb\xeb\xfaUSW" +
	"\xe2Z\xca\xc9\xa1\x0czt\xe1\xfc\xb4EJ\xd4o\x19" +
	"\xde\x19q\x19O\x17\xb4\x94S\x835i\x0d\xab\xb1X" +
	"L[\xb9\\\xb1T\xb3E\xb0\xb5N[\xcf\x83\x9a\xe7" +
	"\xd9^\x1b\xf5\x11\xbeT\xb3\x00V\xf6\xfc\x8b\x82V\x03" +
	"\xdb:2\x13-JB\xe9U\xf3G\x9fQ\x1f\xe93" +
	"L\xab\x9bT'\x9d\xf2\x9e\x8e\x0djzoG\xdab" +
	"\x9e\xdfR\xa2\xd1t\"\x1dWX\x83\xa5\xc6\x16v\xe7" +
	",\xe9\xdd\x04\xc1Rc\xdd\xd9\xf5\xac\xe0\xcc\xde\x93\xc7" +
	"\xd1\xa6\x9aM#\xe9\xa8F\x9e1\x83m\xaaI\x96\x1a" +
	"kN[\xd9\x9dy\xee\xd0'i\x98\x96\x1a#\x9eX" +
	"\xb0;H\xa5\x13|Q\xa4\xb4j'\xe7\xcf\x13\x93/" +
	"\x98j39\x8f\xa6<\x9d\x16\xe5\xc7\x9e\xbd-d\x1f" +
	"{\x0eB\x09ue\\\x7f\xaaM\x19X\xd8\xd3#\xf0" +
	"\xa3-5+\x8d\x93b\x9e4^\x92H\xaa\xba*X" +
	"\xa6\xb22\xaer}\xb9%\xef\xbcJq\xceX\x98\x1f" +
	"\xe3EdB\x85\x98\xc9\xf0\xdd\xa9\x956\xb1\xfa\x9d\x82" +
	"S\x97\xaaD\xfb\xd4X\xae\x1fR\x96\x9a\x8ch\xd7\xaa" +
	"L\x9c3\xd7\x16Bc\xbc\xd4?g\xee,\x1b\xbf\xc7" +
	"(d*\xb19s\x0bFV\x03\x87\xb3\x0a\xa9\xd5c" +
	"\xc4\x87\xe4\xbd\xde\xa6\x85\x99\xaf\xd7\xf4\x98:`\xff>" +
	"o%\xe7\xefY\x8cy\x0e\xce\xd2q\x14\xe8\xd4\xfbz" +
	"\xfb\xcfY\xb9\xa3\xa1\xb4\x8a61iaBK\xa50" +
	"YST\x99\xf3\x9feD\x95\x8c2\xabV\xf5\xf3t" +
	"\x16\xd0\x0c\xbdX\x86~\xc3^\xbd\x98\xa8\"9\x1b\xfb" +
	"\xc6I\x8e\x9aF\x12\x1bW\xc1{\xcc\x95J\xc7-\xfe" +
	"kY?m'w\xcavg\xebd!\xee\xe8F\x95" +
	"9\xafe\xb7\xbc\xb4}\xe2\xc1\x1a:\xdd,Y7E" +
	"'\x8b3\xd2<\x85dC\xd589\xb4\xd4\xe5\xfc\xf4" +
	"\x88\x050\x09\xbc=\x9bX\x187t\xc1>\x09[\xd8" +
	"\xaf\xea\xd6\"\x88\xda\xdc,\x0c\xc5\xad\xf3f%\xbcG" +
	"1\xae\x1fK\xd9)\xfd\xf4\xdaT%\x956\xd5\xd8%" +
	"\x05\xa7\xe2K\xf4\x1e\xc3L\xf0\x9f:\xa7E\xb1\xd4n" +
	"\xe32%\x9eVm?\xbeR\xd7\xd1%8m:c" +
	"\xe1Z\x91\xc2\xb3\x04r|\xf8\x823\xe70\x16\x9e*" +
	"Rx\xae@\x81\x184\xa3\xca\xcc\xa6\xe0$q\xd7\xc7" +
	"\x7f\xfc\x86\xf3\x92\xa1~\x14vzw\x9b\x84\xa2+\xbd" +
	"|/\xe2T\xd5n\xd3s\x9a\xd3\x96\xe5\xd7\xf4\xde\xf0" +
	"\x08\xf2z\x10\x07\xc7y\"\xe2TL\xcf\xf9M\x06\xcb" +
	"\xa6\x8b\xcd\xad\x81\xa5\xbaf\x050\x18\xbc\xb5_\xe9\xd4" +
	"\xb4%[\xfb\xd9M\xe5\xc4X\xb8U\xa4\xf0\x15Bv" +
	"\xf2G\x98?\xa9Fs\xbb\xael\xe1\xce\xae+\x9a\xb6" +
	"\xf8\xe9\x94\x98rO\xa7\xb8J\xd8\xa9\x9aX\xf4=\x02" +
	"\xd6\xf3\xb2\xa5g\xf2\xb2Mi\xae\x93h\xd1\x88\xb1V" +
	"\xd3{\xcfi\xea\xef\x85j\x87-5\xef\x89\x11\xf6\xbb" +
	"\x10\x05\x17>\xcaXx\xb1H\xe1n\x81\x82\xe4\xb3\xbb" +
	"\"\xfc c\xe1n\x91\xc2+r\xbe\x94\xc1\xab\x9ec" +
	",\x1c\x13)\x9c\x14l\x85\xd2>\xc6Zd\x98M\xfd" +
	"\xaa\x19Rz5\xf7\xd0\xda9\x96\xfc\x15?\x96\x8c)" +
	"\x83\xa9%z\xc4 \xfb\xe7/\xd7\x02z\xccX\x9b\x9d" +
	"\xe4)^\xc1%=\x02?M\xf1\xd6\x93\x9d\xbe\x9f\xf3" +
	"\x86#\x86|\x973E\x14SiH@gLy\xde" +
	"\x94\xb1\xe0\xc2\x0b\x18\x0b7\x8a\x14n\xcd9\x8e\x06\x97" +
	",`,\xdc\"R\xb8\xd3\xf3\xa6m+s]\xd9\x90" +
	"t'\\6\x1c\x92=\x16\xafw\xe6u\xf6~\xc1\x99" +
	"\xa2\xdd\xcc?\x98\xcc\xdd:\xb8u\x1fv\xca\xbag\xfb" +
	"*w^}F\xef\xc0_\x81(\xb8\xe4\x02\xef+\x90" +
	"L\x02Q\xb0\xad\xab\xd8+d\xa3\xf6\xd8\xaf\xd0\xa0$" +
	"\x8c\xb4\xab\xd7\xed\x9f\xdd\x08\x0d\xd2\xb9\xffa\xe4\xac\xa0" +
	"\x99\x1e\xfe\xdf\xafy_\x9eYG\xf01\xc8+_8" +
	"\xeb\xcd\xdc\x0c\xcf\xf6\xc0\xeck\x19\x0b\xcf\x12)|\xa1" +
	"\xf0\xff\x93\xactk\xe9;\x9d\x17^\xc4R,RQ" +
	"\xbf\xb9\xa2\x8fFp\xf7\xbb\xab\x88;5\x90H\x918" +
	"\x09T\xe9x\xdfi\xb4\x92\xb1H\x1f\xb0E\xa8\xb9\xe3" +
	"}\xb7\x86V1\x16I\x82\xaf\x03\x17\x1c\xe7\xe2A\xba" +
	"\x94\xb1\xc8\x00\xf8\x06p\xd1'\x93\x8f1i=/\xe7" +
	"\x06\xf0\x8d\xe0\xbe\x12\xdb\xfb\xeeV^\xce-\xe0\x9b\xc1" +
	"K\x1c\xe7\xe2;\xe9F\xc6\"w\x80o\x07\x1f\xe68" +
	"\x17o\xe3\xf9\xb7\x82?\x06\xeew\x9c\x8b\x1f\xa1+\x19" +
	"\x8b\xec\x06\xdf\x0b^\xea8\x17?A\xdff,\xb2\x17" +
	"\xfc x\x99\xe3\\|\x80L\xc6\"\xcf\x80\x1f\xc6\xa0" +
	")\x97i8\x91t\x88\xb8\xe5<\xf01d\x1f\xdeh" +
	"{\xdf\xbdB\xb71\x169\x06\xfe6\x09\x94Q\x9cq" +
	"K\xd1\xc5\x8a\xd9\xaf\xa6\xacl\x8f\xe4\"zy\x17\xc0" +
	"v\xe6W\xbc\x97\xe0nG\x06\xda\xbd8\xa5\xaa\xb1\x16" +
	"ni\xc1\x86\xca\xffL\x9f\xfdK-\xcc_t}(" +
	"\\\x04+sQ9\xb2\x19\xecC \xd2\xf8\x0e&\xc9" +
	"\x8a\xe4q57\x16P,5\x95\x93\xde\xde\x1f\x1b\xe9" +
	"\xaa\x01\x8a\xa90\x91\x0f\xc3l\x807\xa7\x98$\xff!" +
	"M\xa1\xb83)\xfcJ\xd1|\x9f\xbc\xb4GM#\x95" +
	"j6\x0d!\xd9\x14S\x92\xce\x1e w]n\xab\xd7" +
	"C\xba\xc3\xa3f\x7f\xaa\x85\x12\x8f\xfb\xd5\x94\x15.%" +
	"o\xb4\xb1\xb2\xae\\\x1c\xaf`\xd9]\x19\xbc\xd4\xd2\x94" +
	"\xd2\xcbH\xcdt$-nCBz[o\xc2jQ" +
	",R\xdciO\x14\x9cvin\xdagg\xfd\x8d\x9e" +
	"Y\xef\xaa\xe0\xce\xce\xa0\xc4\xde\x86\xd8e\xb6\x91]\xa2" +
	"\x82\x9e\xcaV\xa0`\xa6\x0f;S\x05\x00k!Vt" +
	"[\x1f\x19\xc1\xa5}\xf5\x95(.8v\x01c$\x04" +
	"\x83\x93\x18C\xd7\xf1\x05\x98\x89\xbd\xea\xf5+\x9d\xb3\xfd" +
	"\xb8\xa2e\x7f\xb0\xfcL~\x90o\xf8\xb5\xa8s\xf9~" +
	"\xad\xad\x149\xb0M\xb1,\xd5\xf4HJ\xe6\x88\"\xc7" +
	"\x13\xf8*>g\xb3\xa2(\x1b\xe8@\xe3s6'\x8b" +
	"\x84\xac,2\xf3d\x91\x98\x95Ew3\x16Y\x07~" +
	"\x0b\xb9\x81\x0e\x18\x93n\xe6\x93\xdc#s\x1cYt'" +
	"\xe7\x9b\xc1w\x90'\xd0\xc1=|\xf2\xef\x00\xdfE\x9e" +
	"@\x07\x0fp\xbe\x0b|\x0fy\x02\x1d<N\xd72\x16" +
	"y\x0c|?y\x02\x1d\xec\xe3<'\x8b\xca\xb3\xb2\x88" +
	";\x00\x80\x1f%O\xa0\x83#\x9c\x1f\x05?Nn\xa0" +
	"\x03\xc6\xa4\xd7x9\x1ead$Z\xcc\xc16\x85\xd0" +
	"\xac\xcd\x86n\xf9\xbd\x07\x16\x8a\x91h_<\xb7\xd9`" +
	"\xce\xe9\x98\x97w\xd4\x17\xe5\x18{\x0a%\xb4\x18\xbf\xa8" +
	"\x11\xf3\x13#qcm\x8b\xa0F\xf9ud\xc4R\xf4" +
	"\x98b\xc6\x987\xc7\"%e\x9d&GR1\xad\xa6" +
	"\x8e\xb6n2\x9a:\xdaP\x1a;E\x1a\xca\xf1\xa4E" +
	"u~4\xdb\xc4\x1a\xec\xc7\x8a&\xe0\x99\xc2\xd2\"\x14" +
	"7\xd6v\x1b\x91\xb6\x05\x81\xbc\xe7\x86&\xe7=\xed\xde" +
	"\x19\xb1\xc2\xc3\xeb\xa23\xcf\xbb\xc6\xb6q\xd4\x86l\xdc" +
	"\xd5\xfd\x9c\xa6\xe6\x16l\x06\xfc\xf1\xb4Z\xa0\x15L\xca" +
	"\xed\x05\x82\xc56\x03~%\x1as\xf5\xc5S\xec\x00J" +
	"?Y\xbbr\xa4bn\xca\x9d\xe3\x90n-\xa1\xda\x8a" +
	"\x0a\x17\x07\xc1K\xb98\xa8X\x00}\xc7\xddH3v" +
	"}Z_\xad\x1bk\xf5\x02Y\x0a=\xb8@\x03R\x92" +
	"Z<\xae\x98\x83]ZJ\xb5m\x06\xc3>\xf2D\xda" +
	"\x0b\xd2\xf4\x00\x04Z\xd8\x97m\x82\x0al\x87JE\x0a" +
	"\xd7\x0a\x14\x88k)+\xb7\xe8d\x1fs\x16\x9d\xa2\xca" +
	"\xcd\x10\x09\xb4\xa4\xb5+\x84U\x94\xab\x8fr\xf6w\xae" +
	"\x83\xaa8 Rx\x83\xa7\xa9\xd7C\x01\xbbA\xa4\xf0" +
	"F\x8f\x0a|\xeb*\xc6\xc2\xb7\x88\x14\xde\x9c\x13&\xc1" +
	";\xa1,o\x14)\xbc5'I\x82[\xa0\xd4m\x16" +
	")\xbcC\xa0\x06[\x9b/\xb20\xab\x8a\x19\xd7\xb0(" +
	"5DN\x95\x85\x1b\xa3X\x11\x83\x05\x8ag\xb8\xdeY" +
	"\xfcO\xf9\xe8b\x85\x85N\x95\xc3m6\xff\x99\x08\xee" +
	"6\x8d\x9f\xa6\xe7\x09n\xa7\x17\xb3\x81\xee\x82te\xc6" +
	"\x1dKL4S\xde\x01\xddUd\xbdC\xcb\xcf\x10)" +
	"<_\xb0'\x9d\xc6oXt\xaa\xcc\x15YD)?" +
	"\x93\x98\x12\x11\xddX[\x10S\"\xdc)\xfaH\xe2\x0b" +
	"I\x8d\xf0\x1cc\x91\xa9\x82H\x91\xb9BN\xa7\x9d-" +
	"@\x17\x9d\x05|\xa1\xe0\xd1i\xcf\x17\xba\x18\x8b\xcc\x07" +
	"o\x11<:m\x93p\x17c\x91\x16\xf0N\xc1\xa3\xd3" +
	"\xb6q\xde\x09\xbe\\\xf0\xe8\xb4\xcb8_\x0e\xde'x" +
	"tZU\x80\xee\x1a\x03O\x0a\x1e\x9d6!@\xce'" +
	"\xc1\xd7\x09\x1e\x9dvP\xc0:\xb8\x0e\xfc\x16!\xa7\xd3" +
	"\xd6\xdf,L'(\xc7H\xd8.x\x94\xdam\xc2\xbf" +
	"\xb1P\x81\xef\x02/w\x16\x92\x07\x04,\x18\xf7\x83?" +
	"\x06>\xdcYH\x1e\xe1|7\xf8^\xf0\x11\x15vL" +
	"\x89'\xf8\x0f\xef\x05?\x08^1\xd2\x8e)q@\x80" +
	"\x92\xfd\x0c\xf8a\xf0\x91\x01;\xa6\xc4!\xce\x9f\x07\x7f" +
	"\x19<Pi\xc7\x94x\x897\xc4\xcb\xe0o\x82W\x06" +
	"\xed\x98\x12\xaf\xf3~y\x1b\xfc\x03\xf0\xe0Y<\xa6\x84" +
	"t\x82w\xcc{\xe0\x1f\x82\x9f%\xd9!%\xfe\x85\xfc" +
	"]\xa2H\x91\x11\"6J\xba\xb1\xb6K\xb5TA\xc7" +
	"\xe0lV\x92JT\xb3\x06\xdb\x94\x01\xcfb\x81<\xb9" +
	"\x9b\xb6|\x9a\xb4\x98\xc7\x02\xa5\xc74\xaeU\xf5\xcb\x15" +
	"\xb2Ts\x89\x1e\xd1\x0d\xca\xad\x10qmMZ\x8b\x15" +
	"O\xb3\xcf}\x8c%\xa4\xf7hq\xcb\xc4\x8e\xcak\"" +
	"\x83\x91\xe9\xde\x99\x15\x1e\xda\x92\xa5\xc6xz~2j" +
	"\x97P\xe3\x16\xb9\xe6%\xfe\xb4\xa9\xe6\xa56E\xa3i" +
	"\x11%\xe0\xc5\xb3\xe6\x8ay\xc6\x02\xc5\x0e\xf7\xb9U\xd2" +
	"\"\xc3l\xc5\xeb4\xc4\xf81xn\xf54LS\x8d" +
	"Z\x1ak0\xf4.E\xd3\x8b&\xa0\xb6\xde\xcb[S" +
	"U\xafU\x8b\xd7\xd3Me\xa2\xc7F\xd8\x03\xe7xL" +
	"Y\xd6\xf2V \xfb\xf6\xb8M\xf3\\X\xe3m\xdb\x94" +
	"\x81&!f[\x1a*\xf1\x16;WA\x1fw*\xd1" +
	"\xd5\xcc\xafyL\x06O1:4\xbd\xc8\xa1\x8a\xef\xb4" +
	"{\xf9HR\xa5h\xc1z}e\xb1]\xbc\xe9\xd1\xe7" +
	"?ac\xf4\xc9\x1b\x9e|\xedb\xe8\x1a\x1b1\xb4x" +
	"s\x9fb*QK5\xb5\x94\xa5E\x1d+\xcc\x06\xf3" +
	"\x1c,\xad\x05\xab\x1e\xf6\x1f\xebD\x0a\xdf\x92\x93\xc77" +
	"\xa3\xbe\x1bD\x0a\xdf\x01!\xe7\xb3\x17\xbdM+=\xeb" +
	"\x9bXb/z\xde\xf5-\xe8\x1bf/z\xf7`\xcd" +
	"\xdc.R\xf8~\xe7,\xac{0\xc9\xb7\xac\xee6\xd6" +
	"p\xd4|\x16\xe2\x8a>\x953\x81\xca1\xfc5\x93w" +
	"\x87='\x05&\x90\xc0\x0dF\xd5x\xacYI\xb2\x10" +
	"\xef\xa8,\xd7m[S\x855$\xf3\x13>\xd5\xc6\xc7" +
	"\xd1s\xceA\x7f\x86\xb0eS=\xda\xceJ[\xdb\xb9" +
	"\x8b1\xdbd\xb4M\xd1\x19\xc6r\xc6\xd9\xf6t\x12\xb7" +
	"\xb0\xe2\xa6\x14\x9fn\x1f\xd9\xad\xc5\xe3~\xe7\xc7|\xd9" +
	"\xcd`\xc5\x1cG\xd5\x91\x05\x0a\xc5rs?\xef\xcc\xf0" +
	"\x13\xd7\xbcB\xed\xd2Y\x9d\xb31\xc8\xb1:;\x0ag" +
	"\x9c\x89i5\xbc1\xbb\xb3:\xc0Cz\xed\x87$}" +
	"^\x14\x88&\xd9\x0b\xe2\xb3\xe2\x8f!\xbf\x81_v#" +
	"\xcbaA|\x89G\x84;\x0c~\xcc\x8d,\x87\x05\xf1" +
	"\x15^\xccQ\xf0\xe3\xe05d/\x88\xaf\x89<\xd6\x11" +
	"\xf8\xbb\xe0\x13\x05{A|G\xfc3\xe4:\xf8\x87\xe0" +
	"!\xd1^\x10\xff%\xbe\xcfX\x97\x0fr\xdd\xe7\xa8Z" +
	"<p\xb6\x0f?\xeb\x03\xaf\xf49\xda\x16\xd6\xc3\x0a\x1f" +
	"\xaaY\x09^\xe5s\xf6m\xd8W\x8d\xf5a\xf9\x19\x03" +
	"^\xebs\xf6mX\x0ek|\xdca\x19|\x86\xcf\xd9" +
	"\xb7a9\x9c\xe6\xc3:<\x15|\xae\xcf\xd9\xb7a9" +
	"\x9c\xed\xe3z\x01\xf8\x85>g\xdf\x86\xe5\xf0|\x1f\xf6" +
	"\x97\xf3\xc1[\xc0'\xf8\xec\xe5\xb0\xc9\xc7c\x17\x80w" +
	"\xfa\x9c\xfd\x1c\x96\xc36\x1f\xd7\x0b\xc0\x97\x83\x0f/\xb1" +
	"\x97\xc3e\xbc\x9c+\xc0c\xe0#\x86\xd9\xcb\xa1\xc2\xcb" +
	"\x89\x81'\xc1+\xfc\xf6r\x98\xf0\xa19\x93\xe0\xeb\xc0" +
	"G\x96\xda\xcb\xe1\xa0\xefQ\xe8\x05\xe0\xb7\x80\x07\xca\xec" +
	"\x08K7\xfb\xde`,\xb2\x11|+xe\xb9\x1da" +
	"i\x0bo\xb7\xad\xe0;\xc1\x83\xc3\xed\x08K\xf7\xf2r" +
	"v\x82\xef\x06?k\x84L\xa3\x19\x93\x1e\xf6a\x1f\xbc" +
	"\x1b|/\xb8TaGXz\xc2\xf7\"F\x0f\xf8\xf3" +
	"\xe0\xf2H;\xc2\xd2\xb3\x9c\x1f\x06?\x06>j8\x8f" +
	"\xb0$\xbd\xc2\xdb\xffe\xf07\xc1\xcf\x1ea\x07Xz" +
	"\x9d\xb7\xf3q\xde\xef%\x02\x05GW\xd8\x01\xe4\xcaJ" +
	"x|\x90\x12\xf4#\xf8\x98\x91v\x00\xb9\x9a\x12\xee\xaf" +
	"\x0c\xde\x08>\xb6\xd2\x0e\xb0tQ\x09\xf7W\x06o\x05" +
	"\x1f'\xd8\x01\x96\x96\x94\xa0\x7f\x17\x83w\x83\x8f\x0f\xd8" +
	"\x01\x96\xc2%<`\x12\xf8r\xf0\xaaJ;\xc0\xd2\xb2" +
	"\x12\xd4\xf3\x0a\xf0\x18xu\xd0\x0e\xb0\xa4\x94@=Z" +
	"\x01\x1e/\x81\x82\xafYj'Dv6\xcex\xfe\xb9" +
	"\xacE\x9a\xa1\xb7\xa9V\x9f\xd1\x10k\xe6z\xac\xbbq" +
	"S\xf5~\xfe`6\xf2\xa9\xa3\xee\xf2\xc5\x02\x09\xd9X" +
	"\xad\xee%\\\xca\xbe\\\"\xaee\x14^\x8e\xaem\xb2" +
	"\x12F*)\xf4\xa9\xa6\x16\xc5\x1e\xbe\xa8\x9dD~\xb6" +
	"\xe6\x8e9n\xbeP\xdev6\x94\xd2\x12\xbc\x0e\xd9\xa0" +
	"\x96N\x1dz\x9d\xeb-[\xf9\xe91\xcc\x06\xfbn\x8b" +
	"*s1\xbd\xddSNn\xa0\x13O31\x81\xe4l" +
	"\xecSO2t\x05r\xac\x10\x18U\xe6\xa2\x99{\xf2" +
	"\xb4\x19Z\x8a\xd9jLe.\xf6\xb4'C\x87\xd9\xab" +
	"0lc\xa82\x17\xcf\xd8\xfb#\xa6\xa2\xb3P*i" +
	"\x98\xd8\x07e\x83\xe9;9\xa0~u\x0c\x0c\xf6\x92\xe3" +
	"\x92\xe2\xb5\xcet|z\x9a\xc9\x0dRG\xa8C\xf6S" +
	"\x1e\xeeo\xa4\x13|c\xc4Bq-\xe5\xd1\xa1R\xe9" +
	"D\x87\xd9\xbbH%\xbeiJ\xe59D\xc4\x14->" +
	"\x18I'\xc8\xd9R\xa5D\xcf\x83\xd9D\xfe\xb8ii" +
	"\x05\x05\xbb\xe9B\xc1y\x9a\xea7[\xda\x0a~^\xd1" +
	"\xc9\xcd\xd0\xa0]\xabz3\xf4\xa5\x13\xe9\xd4\x02%N" +
	"\x8a\x1eU\x9b\x15\xd3\x0c\x0dv\xf4\x17\xfb\x99\xdc5\x0c" +
	"W\x12so\xe1\x9cH\x1a\x82\xbe\xd09\xb0t\xae\x9c" +
	"<\xb7\xfe\xb9<]\xaa\x956\xf5by\x9cv\x8e\x90" +
	"\xa5&\xf9Qw\x91\xfdj4\xae%\x14K\xe5\x07\xdd" +
	"J\x81\xadden\x9d\xcb\xde#\xf2\x12\x17\xb2P\xbf" +
	"\xaa[\xd9#\xeb\x11\xae\xd5\x87\xa9\xf6kF:E-" +
	"\xca`ja\xbf\xaa\x8bC\xf3p'?n\xd3\xb34" +
	"i\xe8\xed\xea@\xc0jQ\x06\xb3'\xc81e0u" +
	"\xb9f\xf59\x07\xeb\xee\xed\x1d\x86S{\xc42Y\x9e" +
	"E \xa8\xed\x89V\xe8\xa3\x87\x14\xeep\xd7\x10\xc9w" +
	"\xf3\xf9T\xfb\xf3\\\x0f\x9d\x93=\xce\xa1T\x81\x96\xfa" +
	"`n\xc3\x9d\xd5R\xcf\x03\x9co_\xdcft\x8d{" +
	"\xfb\x9c\xca\xc4*\x95\x8e\xf7\x9c&\xf9SU\xd8\xd5\xc0" +
	"\xdcsr\xbd\xad7\x11\xb2\\MuLV9\xda\xf6" +
	"hN\xad\x0c\xba\xf7{\xf7=\xc7Xx\x97H\xe1=" +
	"\x9e\xfb\xbd\xc7\xbb\x18\x0b?&Rx?\x94\x06\xe8$" +
	"D\xc1}\xd0\xcc\xf7\x8a\x14>\x08\x8d\xc1\x8e\xf9\x18<" +
	"\x80w>(R\xf8(\xd4\x05\x1f\x8fg\x1b<\xf2\"" +
	"c\xe1\x97E\x0a\xbf)\xe4\xc6,\xe9\xcd\x86\x9eR\xcd" +
	"~G8\xba}\x0f\x09\xbd$\x91T\x84\xa8\xd5\xa1/" +
	"v\xa6\x11f\x11\xcbw\xbetn\x03(\x90\xbb5`" +
	"T\x12\xa0\x9c\xca\xbf\x98\x89\xea\x9a\xdc\\q\xe63\xb9" +
	"\x13:`.\xf6$'\x94\x01>w\x84\xb4\xda\xa5F" +
	"\x8d~\xd5\\\x04\x85?\xcf\xa6\xf7\x13\x8f!#\x8eD" +
	"\xe4\xf2\xd0{J\xc2\x8fI\x16\x8b>\x0ar\xad\xf0\x1d" +
	"~\xde\xfe.\x89\x149I\x021fk\x85\xff\xe0W" +
	"m\x1f\x90H]\x82G)\xfc\x88\xdf\xb4}\x88\xdcc" +
	"\x04\xa7W\xa0\x14\x8e\xe2\x9bw\x19\x9b\xf7\x89\x82\xd31" +
	"P\x0a\xab\xf9!C\x15\xf8|\xc1\xe9\x1b(\x85\xe7\xf1" +
	"C\x83\xb9\xd9S\x15t\xcf0~\xaa\xc2\x83QdO" +
	"O\x86\x09\xb6V\xa8r\x9e;=\xf1\x8b\xb6V\x98\x10" +
	"\xee\xce;=)\xf5\xd9Z\xe1\xa0\xc0\x83N\x80o\xe0" +
	"\x87$%\xb6V\xb8\x9e\xe7\xdf\x00\xbe\x83\x1f\x92\x0c\xb3" +
	"\xb5\xc2{\xf8a\xc5\x8e\xeca\xc8p\xbf\xad\x15>!" +
	"<\xea\x1e\x86\xf0\xc3\x8d\x11\xa5\xb6V\xf8\x92\xb0\x00Z" +
	"\x0f\xf8\xbb\xfc\x90\xa4\xcc\xd6\x0a\xdf\xe1\xa7H\xfcp\xc3" +
	"\xc7\xc3\x0d\x97\xd8a\x85I\xbc\xd4s\x88\x11\x0c\x94\xdb" +
	"Ja\x99\x88\xd7*\x05\xaf\xe5\xd1\x86\x87\xdbJa\x0d" +
	"\xe7\x13\xc1/\x14\x85\x9c\xf3\x09%\x9a\xfa\x15-\xae\xac" +
	"\xf4\xc7\xd5v\xefXH\xc7\xd5N\x85\x05\x9c]e\xf6" +
	"\xd3\x18\xaeL5\xf4~\xbe\x99\x17\x87\x1a\xf1q\xe7\xdb" +
	"!>\xf01\xad\xa7'\x9d\xd2\x0c\xd6\xa0\xe79\x98g" +
	"\xbdO\xb5TR5SEKt\xd3\xc8\xb0\x9f\x1db" +
	"]\xda\x9fjU\x95h\x9fF\xb6C\x90\xc7d1\xce" +
	"\xb9\xdeKM\xd6\x02\xe8\x1f\x8ah\x0ez\xcc\xc2\xda[" +
	"\xd4\xa4\x91b!-_\xd5\x89\xdaF\x91\xa4.\xb2\xbd" +
	"+\xc4\"\x06\xd4\x86\xa9\xda\x82\xf925nD5\x8b" +
	"\x06\x87\xd6\xeaL\x0c\x8a\xaf\x87\xa6\xd1\xdeQ_\xcc\xce" +
	"\xb8\xbd\xa3^a\xb4f\x88\x09\xe4)LV\xb9Y\xbb" +
	"\x96\"\xdeX\x86>\xd4\x08W5\xa3F\xdcV,\xf9" +
	"qza\x863\xdb\x94r\xc3\xa7s:\xfbT\xdd\x08" +
	"q\xab^\xcc\xffJ\xbe\x07\x9e\xd6\xc5\xf7\xc0u]\xfc" +
	"\x02\xb0\xe6R\xc6H\x0cV_\xcaXF\xe5\x9e\xacz" +
	"\x94\x91\x9a\xe9q\x0cC\x19\xf5\xe6\x0c\xef\xf2\xef\x08\xce" +
	"t\x7f\x1cWt\x8b++\\\x08\x8d\xe1\x95h\x9a\xce" +
	"+q\xfet^\x89\xd9sx%\xa6\xe1\x7f\xbe`\xcd" +
	"\x05\x10\xa4\xc1\xb1s\x18\x0b\x98\x86a\x05\xe2\xaa\xd2\x13" +
	"J\xf5\x19\x86\x15\xea1\xd3\x9a\xd5\x90\xb2\xcc\xf4j+" +
	"\x94J\xf7*\xe6\x19\x98\x9cD\x1c=R\xe7\x07'|" +
	"\xd6`\x19\x0d\xb8\x06'\x9b\xdd\x15I\xfaH|\xda\xbb" +
	"=u\xd6$\xa9\x8co\x8fF\x80\x8f\xf1\xb9\xd7\x06D" +
	"\xd2(\xdfs\x10t\xe0S\xdd\xed\xacH$\xd5q>" +
	"\x03|\xbe\xcf\x13o\xfd<\xce/\x04_\xec\xf3\xc4[" +
	"_\xc8y+\xf8\x15\xeevv\x18\x91\xb4\x94\xf3\xe5\xe0" +
	"}\xeev\xd6O$\xa9>\xec\xae\xe3\xe0\x03\xeev\xb6" +
	"\x94HJs\x9e\xdb&\xf2kH\"\xe9f\xces\xdb" +
	"D~\x0dI$m\xe1|;\xf8\xfd>\xf7\x1a\x92H" +
	"\xba\xcfwm\xde6\xd1\x8d\xb7\xfe\xb0\xef\xc1\xbcm\xa2" +
	"\x1bo\xfd\x09\xce\xf7\x82\x1f\xf4y\xe2\xad\x1f\xe0\xfc " +
	"\xf8Q\x9f'\xde\xfa\x11\xbe\xfd=\x0a~\xdc\xe7\x89\xb7" +
	"\xfe\x1a\xe7|\x9b\xf8\xae\xcf\x13o\xfd\x1d\xbe\xdd\x7f\x1b" +
	"\xfc\x03\x9f'\xde\xfa\x09\xbe\xdd|\x0f\xfcC_.\xde" +
	"z\xfd\xbf|g\x11c\x11\x1f\xf6q\x95%\xb9\x80\xeb" +
	"\xf5\x15%<aLv\xc3\xe9F\\\xf7l8g\x95" +
	"x\"\xae\xcf,y\x15KVv#\xeaF\\\xbf\x88" +
	"\xf3\x16\xf0\xce\x12O\xc4\xf56\xce\xbb\xc1W\x94x\"" +
	"\xae_UrA\xde\x86\xd3\x8d\xb8\xaep\xbe\x1c\xbc\xaf" +
	"\xc4\x8d\xb8\x8e\x1e\xe6<\xbb\x11\xb5#\xae\x13I\x1a\xdf" +
	"\xe8\xf6\x81[%n\xc4u\"iM\x09Z\xce\x02\xbf" +
	"\x01|\xc2\x04\x99&\x10I\xd7\xf1\xfc\xeb\xc0o\x01\x0f" +
	"\x85d\x0aaDp\xbe\x01\xfc\x0e\xf0\x89\x13e\x9aH" +
	"$m*\xe1q-\xc1\xb7\x83\xd7\xd4\xc8TC$m" +
	"+\xe1q-\xc1\xef\x07\x9f4I\xa6I\x18)\xbc\x9c" +
	"\x9d\xe0\xbb\xc1'O\xb6#\x12?\\\x82\x91\xfb\x18\xf8" +
	"\xfe\x12\x81\xa8\xd6\x0eH\xbc\x8f\xef\xc7\xf7\x02\x1f,\xe1" +
	"g\x89\xa7\xbd\\\xce|n\xed\x07O.\xff\xca0~" +
	"J\x96:\xfd5s\xe6\xc5\xff\xf7\xf3\xdf|k\xd9$" +
	";ob%\xca\xb5\xfd\xbb F\xb3\x99\xdd\xdc\x1f>" +
	"p\xe2\xc5\xb6\x95\x9dnn\x94|\x9a\xdc_\x94\xbf\x7f" +
	"\xc9\xeb\xd7n\xf0\x96\xdd\"\xa8\x8a\xd5w\xa6e\x9f&" +
	"wA\xd9K\xa1\x1c\x0a\xf6-\x9c'@C1\x17h" +
	"\xa7\xf5\x96\x0a\xb9{;\xfb\x89\x00\x1eq\x1e\xb8{\x1b" +
	"\xfe{\xc5\xdb\x84\xa7}`\xffqn^\xf3i\x8bV" +
	"\xce\xa0h\xe7\x81'\xbc\x0f\xb4\xb1\x06e\xa0\xd92\xda" +
	"\xddh\xf9\xb772\xc6\xaf\x0c#\x1dm\x8bHIY" +
	"\xddF\xa4\xa3\xcds\x8d\x9fwt\xca3\xb6-p/" +
	"\xf4;\xda<\x17\xfaym\xe5d\xf4\x94x\xba\x8c\xdc" +
	"\x1e\x01\xe5zl\x152{&\xdc\xfc\x97\xf0\x9e\xaf\x0e" +
	"\xcd\xe5\xb5Z\xc8\xccl\xae\xfa\xcb\x1b\x9f\x9b\xces9" +
	"f\x0a\x11&\xb6-\xc8\xfb\x8c\xc1\xb8F\xee\xc2\xae%" +
	"4\xab9\xae\xd0\xe0B\x1e\xf6\xc1\xd5\x14\x0e\xf3\x1eH" +
	"`)S:\xc4\x01-\x965\x95\xf5\x0e\xfc\xac\xc9\xa2" +
	"\xb7U\xb1\xcb\xd3,\xf5\x0c\x9e\xf2|O\xc1\xf1\xd70" +
	"L\xb2\x9c\xec\xa2\xebv\x9eWx*\xa9F\x9btE" +
	"\x15Lce\x8b\xca\x7f\xaaG\x8b*\x96&\xba\x8aY" +
	"^v-\x910Vb0\xa7\xf2k\xd2.v\xd4{" +
	"\xc7\xda\xa9\xf3-\x9e\xeb\xc9\xd7\x10\xc3O\xce\xce\xfb\xa1" +
	"g\xf1Cv\xc2\x9c\xbc\x84wr\x09\xf5E^\xb8o" +
	"0f\x1a\xf1\xc1\x14\x0bh\xa9/8\x87&\x99??" +
	"\xba\xf5\xe5u\xcbW\xdb\xa33\xca\x8f\xf7\xa0\xce.\xd4" +
	"U\xb37;\x01\x8f\x97\xbc\xd9XP\x80{\xe9\x95\xf9" +
	"\xd5\xf4\xf2\x19\xe7\xfd\xe4\xae\x8b\x0a\x7f\xc1\xbd\x00\xcb\\" +
	"}\xf6\x97\xae\x0d\x1e\x18\xe0\x19\x14~R\xd7\xa7\x92\xa9" +
	"qO\xc4T\xc8R\xb2\x0e(\x8eP\x88\xd9}:\xc7" +
	"\xe0~\xdf\x14u\x9a'\xebhb7\x9f\xde\xa7\xad\xd4" +
	",\x83\x05\xcc\xf6\xc5\xf5y\x91QRm\xca@\x9b\xa6" +
	"\x0b\xd0m\x1dw\x19[\xf7f\xc5\x84\x83\xa5ES\x9d" +
	"\x8a\xc9l\xc3=\xf7cm\x05wT%\xa7\xd5\xb2\x0a" +
	"la[\xb2\x8a\xd5!n\xdc\xf9<\xb6\x90/\x93G" +
	"\xb3z\x89\xf3\x9c\xc1\x93\xabY\xbdFX\xff^\x06\x7f" +
	"\xd3k\xe0\xf5:7\xc0z\x13\xfc=\xf2hV\x7f\xe5" +
	"\xf9\xdf\x06\xff\x80<\x9a\xd5\x09n(\xf6\x1e\xf8\x87\xe4" +
	"\xd1\xac\xfe\xc5\xb7\xb4'\xc1}\x82G\xb3\"\xbe\xf5\xf3" +
	"a+W)\xd8\x9ft\xe0\xf7\x10|\xa7;Bpw" +
	"\xc0e\xa5\xb6b5\x8a\xdf\xef\xe7v\xc0\xe5e\xb6b" +
	"U\xcd\xf3\xf3\x1d\xf0T\xbe\xb3t\x8cM\xeb8\xaf\x05" +
	"\x9f\xc5w\x96\xc3m\xc5j&\xff\xd9\x9c}B\xc5\x08" +
	"[\xb1:\x9f\xef\xa4s\xf6\x09#+l\xc5\xaa\x89\xef" +
	"\x8c\x1b\xc1[\xf9\xf5\xfbH[\xb1Z\xc2w\xb4|'" +
	"}\x05\xbf~\x0f\xd8\x8a\xd5R\xce\xaf\x00\x8f\x09\xce\x1d" +
	"^D\xd1c\x94\x8dC\xe5\x0c\x9b'\xf9*\xa1\xc5\x9b" +
	"\xe3\xca`\xb1\xc4\x06$&\x17\xe7\x0d\x9f\xf1\x8d\xccy" +
	"*b\x19:\xa9\xeec\xd9\x1d^C\\I\xac\x8c)" +
	"\xde\xdf(\xbc\x02\xf4\xfe<w\x0bu\xf6\xad\x1e\x9eT" +
	"\xcd\x84\xa2\xab:Y\x97kq\xee\xa6\xd9ihYs" +
	"\xeel\xcd\xbb\xd5\x01\x8b_\xe9\xe5ll\x0d-\xde\x94" +
	"H\x18,\xa0k\xae/\x9c\xb3F76\xb8Uo\xd7" +
	",\xd36\xb3\xf5N@+\x9b\xde\xdc\xde\xa50\xbf\xa5" +
	"9\xa1\xe9\xf6\xd76:\x09m\x86\x96\"+mr7" +
	"\x86\x90\xaa[\x8b\x9a\x9d,\xcb\xdc,]\xca\xda\x02\x87" +
	"\xe9\\u\x17\xa4\xe3\xab\xc9\xbd\xe8.L\xc4\xa6\x85t" +
	"-\xea\x9cW\x9d*\x99[W\xba\x81<\xec\xe4Ou" +
	"^W\xccr\x931n\x10\x9b\xf5\x02\x08\x96=\xed\xf9" +
	"vi\xc5\x95\x19wC%\x16\x9av\xba\xff\x14\xcd\xd4" +
	"\xe9L\xf9\x19+0\xe5otL\xf9\xcdb\xa6\xfc\xd9" +
	"\x9f.n5\xa4\xe9Q\xc3L\x1aY\x9f\xc5\xd3Z\x02" +
	"{\x0f\xccx\xac\xa1!\x07eSE\x1f\x95\xf1\x83\xb2" +
	"2\xc2\x0e\xa9\x12r\xa2\xcac#?\x96\x8b\x8f1\xc0" +
	"\xb5^\x1b\xf9\x1a\xc2<\xae\x05\x9f\xe5\xb5\x91\x9f\xc9\xed" +
	"Rg\x81_\xe8\xb5\x91?\x9f\xb8\xfd\x11x\x0b\x17g" +
	"\xb2}R\xd6\xc4y#x+Z\xc5\xf9@\xcd\x12n" +
	"R\xbf\x188F\x9e\x0f\xd4(\xdcl4\x06\x9e$\xcf" +
	"\x07j\x12\x84\xdd\x88\x05~\x83k\xaeZ\xc6\x98t\x1d" +
	"\xaf~\xd6L6\x93L,\x1e\x8c\x99JZ\x88k\xd1" +
	"fC\xe7\x17\xe0\xfd\x9a5\xd8\x15\xc8\xc5\x89cN\xbc" +
	"\xc6\x165\xc9\xc4SX\xb8\xf0\xd6,\xf0\x9e\xd6\xd5^" +
	"\xee\xd1O-j\xaf\xa9\xaavD\xb4\xac\xc9J\x9fR" +
	"\xcc:'e\xb5(\x83\x8cr\xa1\xc0l\x01\xd2\xa52" +
	"\x7f\xac\x88\xb7\xa9c\x93Bi\x93\xbb\x03\x9b\x81<\xdb" +
	"\x95>\xfejqM\xc8\x7f5\xdbq5k\x18\xca\xed" +
	"\"#\x16\x13\xd5\xe4\xa7p\xc4\x89h\x96Z\xb0\xe6\xcd" +
	"\xc8\xaeyu\xdc1\"7\x18\xdc5o&\xcda," +
	"2\x15|\xaew\xcd\x9b\xcd\xf3{\x06\x89s\x9ap>" +
	"_\xf3.\x04_\xec]\xf3\x16\xf2\xd1\xd0\x02\xde\xe9]" +
	"\xf3\xda\xf8\x9a\xd7\x0a~\x85w\xcd[\xcay7\xf8\x0a" +
	"\xf2\xacyW\xd1sy\xa3\xc7=MHp\xff\x90\x9c" +
	"\x91\xb5c\xd4\\?H< \xff\x06$\xdc\xe1xR" +
	"\x943&m\xe2F\xca\x1b\x81\xef\xc7\xa8\x8a\xf3\x80\x9a" +
	"15{\x04v\xbc\xf1\xd2F\xc6B\xa9\xb8\x91T\x8b" +
	"l~\xfax\xd4\xa1\xf6\xf6\xdc\x91\xd9\x92Fn\xa7\x91" +
	"\xbb\x94\xcc\xd3^\x8e\xdf\x10n<\x9dt\x8e\x99\x8a\x06" +
	"\x81\xc7B\x9e8J\x8e\xfb\xf1\x9a\"\xa7\x8a\xfb/n" +
	"\xe4\x07\\\x03\\\x1b\x17\xf2]Us?{C#\xd7" +
	"Y\x93\xaa\xaeZ&\xb9\xbe\xaa\x0d\xa6g\xd8\xe7Dt" +
	"$\xa9FEh\xc9\xde\x8b\x84f\xc7\xccJ\xf4\xde\xbf" +
	"8\xda\x13s\x1c\xa1r\xb7_\xd9\xcfm\x17\x98\xc4\x9e" +
	"\xb1En(k$\xe4\x11\xc7\x97\xe6D\xaf+\x8e\xdb" +
	".\xcdI^\xfb\xe6\x85\xb1\xe0\xd2\xe9\x8c\x85;E\x0a" +
	"/?\x85\xe9O\xcc\x0e\x02\xc0\xd90&\xd00F\x01" +
	"\x13\xeb\xa8k\x03\xe4\xd6W<\xd5,\x0a\\p\x99\x11" +
	"\x0d\xd7\x92\xe7\xcb\xaf\xc1\xa6\xae\x9c\x1bj\xb0ie\xce" +
	"\xcb4\xd8tA\xee\x13\x95\xc1\x8bn\xcb})\x12\xd9" +
	"\xb2\x9f\xec\x0c6]\x9a\xfb\xb0t\xb0\xe9\xc6\xdc\xf7E" +
	"\x83Mf\xee\xbb\xc9\xf8\xc3\xf5\x9de\x94\xca\xb8\xdfb" +
	"\xe4\xf7\x90\x0d\xcd\x9dh\xb8L\x9b\x165\x8d\xe6\xb8F" +
	"\xfc\x8a\x92\x7f\xa61\xc3\x039\xa5\x06u\xe6\xb7\xfa\xba" +
	"3\x8b\x8c\xb8\xa6\xf4\xaa\xdd\x18\xc5\x0b\xf5k\x07\x13j" +
	"\x13\x1f?\x9a5\xd8\xcdZU\xa5\x07\xbf\x11\xc2\x8ft" +
	"g\xdc?\x19\xff;\xf5\xa9\xcesy\xdb;\x17\x7f#" +
	"2\x19\xfb\xe6\xcf\xe3nRA\x1fg\x1c\x03\xb5K\xf3" +
	"\x1cN,\xee2\x8f.\x0a\xe4>\xe3\xca\x88\x02n\x10" +
	"\xb6lj\xf6\xfb\xf2N\xea\xa7\xf2\xc3,\xea\x02\xe2\xc8" +
	"G\xff\x19z(\x8e+\xe6\xa18=\xe7\xb5yJ\x0f" +
	"EQ\x8b\xb9\x832\xa0{}\xac\xce\xec\xd6,\x17\xdf" +
	"+\xab\x0e\x88\x16?6o\xcd\x1aS\x95\x08\x90\x88\xa5" +
	"P\xa3e\xec\x0eD[\x1b\x08\xf2]@%p\x157" +
	"b\xb5o-\xa5\xb1\xfc>j\x0cx\xad{\x9f&r" +
	"#\xe5\xa7\xf3v\x01\x82so6\x93\xf3\xdc.\xc0W" +
	"jk\x03\x85\xbb\x80\x922[\x1dh\x12n\xcb\xb3R" +
	"\x1e\xe6XS\xb5qc^n\xa5\x1c\xe7\x9b\x1b\xc7\x9a" +
	"J\xe3\xbb\x86\xbe\xec\xfdX\xa9cM\xb5^8\xcb\xb5" +
	":\xde\xcaw7\x8e5\xd5\x16\xfe^\x9b\xc1w\xf3\xdd" +
	"\x8dcM\xf50/gW\xd6Xx\xb8cMu\x80" +
	"\x97\xb3\x1f\xfc\x18\xdf\xdd8\xd6T\xaf\xf0\xdd\xcd1\xf0" +
	"\x93|wSn\xdf\x9b\xfd\x83\xbf\xefI\xde\x9c\xfc\xde" +
	"L\xb4\xad\xa9\x82\"\x16\xc2J\x11\xed\xc9/\xce\x86\xdb" +
	"\x17gcE\xbco\x15\xf8|~q6\xc2\xbe8;" +
	"O|\xd0\xfd\x1c*\xff\\\xa9\xf3\xc1:),\xaer" +
	"?K\x1a\x17\xdd]O\xda\xec!%\xaa\xf2\xfen\xb0" +
	";\xfc\xd4wj\xd9\xef\xed:\xbb\xe0\x98\x92Hjz" +
	"\xef\"l[\xb2A)\xbcG\x0eY\xbb\x18!\xa1_" +
	"f\xd9\x16=v\xe8/\xaa\xcc}R\xba\xc0\x86\x86\xe7" +
	"]`X\x96\x1b&\xacH^\x9dG\x19\xeb\xe8a\x0d" +
	"<K\xca\x13\\!\x1b\x80\xccN\xc9\x0b\xbc\xc0o\xb7" +
	"\x0cr\xe3\x92\xfa\xf5T\xd1`9\xf9\xa6:\xf9\x19\xa8" +
	"\x7f\xc8\xa5\x99\x11O'\xd46\x85\x05,S\x1b8U" +
	"*!\xb1#\x1e\x1bR\xde\xca!WZ\x0a\xb2v\x9a" +
	"\xc4\x83Z\xb4hJ\xa8\xd7\xd0\x95x\xf1l\x11U\x88" +
	"\xa6yP\xb0\x16M\xe1\xf9\x86\\\x91\xf5\xa9\x8a\xb5\x88" +
	"\x9f\xdc\xe5.\x19\xc1\xa0\xff\x91\xab\x00\xb2\xa2\x8f\xe5e" +
	"\xb1C_\x15\xcb\xa5$\x15\x16\x88\x16\x89\xe8\xf4i\xa4" +
	"\xb9\xd2c\xa9&7\x0f\xf5a_Q\x02a>\xc7\xeb" +
	"\x1c$\xf0i\x1e\x9c9='\xe1C*\x1e\xa5\xca\xcc" +
	"\xce\xbe\xb7\xa2?\xab\xac|\xc2\x19\x1f\x81\x98\xe2\x094" +
	"|f^3\x11\xd5\x0c\xf4kQ\xc7b\xb5\x84\xb1\xcc" +
	"\xff\xbb\xfd\xf9\xf3g}x\xe2]r\xbf\xe9\x1c\x0c\xae" +
	"bB\xb0\xcc\x9fq\x1ff\x01\xddj\xb2\x1a\x89\xdb\x9f" +
	"\xbe\xb4x\xfb\xb2_\x1e\xf9\xc1\xa3g\xe6+\xbdP\xef" +
	"\xd7LCG\x05<\x0e\xdf\xbc\xa0\xec\xc7\xc2\x83\xb42" +
	"\xb3LU\xccn\xe32\x85\xf9\xe3i5<+\xabN" +
	"7\xf1#\x9e\x9c\x1a,8{\xb1\x85\\\xed\xcc\xaa\xc1" +
	"\x10\xca\xd8\x8a\xb5\xf1\x93%\xae\x05\xf7q\xad\xd9\xb1d" +
	"U\xb9\x16\x9c\xd3vK\x1cK\xd6\x04/&\x9eu\x1d" +
	"\x840\x856}3/'\xab\xecra:\x8ck\xbb" +
	"\xa6\xab\xedn%G\x98B\xf8n\xe1Z|\xce\xa5\x10" +
	"\xc2\x14\xda\xf4=\xdc\xe4\"\xe7R\x08aZF$=" +
	"\xc0y\xce\xa5px\xa3}\x84\xf48\xd7\xcas\xae\x83" +
	"Tc\x0b\xdf\x034\x09B\x16\xfcy\x12\xa8A\x89\xaf" +
	"Tc\x8e\xde\x9bYsQ\xf9o\xbe\x93<\xd4\xe0=" +
	"`d\x0d\xb6-`n\xc7\xe69yl\xee\x98\x93b" +
	"9]3\xdb\x11\x8e\xae\x99-#\xc4\xcd\x0e\x87\x14\xc1" +
	"\xcb\xee\xa8O\x9d\xba\x84\xb5\x9a\x1e\x8b$U\x95by" +
	"AE\xb9\x12\xed^\xfc\xb3\x82-\xe3\x90\xbbs\xdb<" +
	"\x86KS\x8a9\xf6\x91\xb9P^\xfb\xe7p\xbd]\xd3" +
	"O\x99a\xae7\x83\xe0fHZ}m\x86\xce\x15{" +
	"7\x92\xbb\xdf\x8c&)\x90y~\xf3\x88\xd9\x03\xfe\xbf" +
	"\x7f\xb5P\x09\xf2\xffo\x03\x84pc*>\xd4\xff\xd9" +
	"_\xbd\xfbo\x99=\xeb\xf9PwC\x86\xd8C=k" +
	"\xcd5{\x9a@9\xf5\xcd\xd5\x8c\xce\xbf\xd1\xb1\xe6\xea" +
	"\x16r\x96\x9a\xa2k\xa9i\x1bj:\x86\"q5/" +
	"|p\x9eM\xa7\xa7\xb7\xb3u)\xba\xb38\xd5\xf7\xca" +
	"]\x05\xd7\xd2\xfa\x03Pp\x0b\x0c\xd1\xe6\x14so\xbc" +
	"\xc0+\xc1\xbc\x9fx.\xf8\xfe\xf3\x19^\xe6\x17\x988" +
	"\x15\xc4\x8f\xa8\xccVF\xb9-\x17\xc3#[\x99\x044" +
	"\xcc>\x91\xc2\x96G\xc3\\\xf3g\x8f\xab\xa0\xeb\x00\xb8" +
	"~e\xceU\xd0k\xe0\xe2\xc4\xdc\xca\x0eNQ\x89\x0d" +
	"\xb1\xa1\x11l3\x18~}gE,E\x0f\xc4\x143" +
	"\x97M\xe7\xdbO\xad \xe0\xd7\xa7\x88\x9e\x91\xef\xdf\xe9" +
	"w%\xa9\xefG7\xfd\xf4\xfdc\xc3\xb7\xf1\xe1\xe5z" +
	"|2\xbf\x96P\xbd\x1e\xea+\x0b]Z\x88\x82\xb3\xd1" +
	"VsE\x0a7\x0a\xd9\xc0\x03\xf6\x93\x14\xc8\x15\xebZ" +
	"\xb8\xb9.\x88d\x07(\xe8X\xc6\x987\xf2\xd2\xa7q" +
	"\x9c\x88\x18k5Q\xef\xfd\x84\xfd)Q\xb0m\xd5'" +
	"\xedO\xb3A\x16<\xfb\xd3$\x8fW\xa9\xeaN(8" +
	"g\x89\x0cDM#I\xc1\xcc\x86\xe5O\xd6~\xe7\x1b" +
	"\x9b\xde\xe6\xd6(\x9fv\xbbS\xccq\xb2p\xbb\xe3\xf1" +
	"\xcb\x19W\xcc\x1bu\xba\xc7Y\xc7\x19\x8b7_\xeaq" +
	"\xd6\x11\xed=Cp\xd3$\x8f\x87\xaa\xcf\xde0\x04\xef" +
	"\x9c\x94\xf3\xe09\xe5\xf6'\xaa\x98+\x95\x84\x16\xf3H" +
	"S\xbf\xde77\xf7o\xa3\xfe\x7fg\xe6\xd9\xde\xa2&" +
	"\x14=Vpl\\0\x03\x170\x16^.R\xb8/" +
	"'\xc8\xd4.\xcf\xact\xfb11\xc73+\xc5J\xdb" +
	"\xc2s\x0d`\\\xa4\xf0\x80@\xd7\xeb\xf6\xcf\xe5\xf9r" +
	"\x9f\xd2\xad\xd4\xebk\xc3(\x94\xb2\x94^\xd5\x96\xf2\xf4" +
	")\xb5\xb4\x95\xaa\xb5V\x15U\xddU\xd3\xc4\x82=7" +
	"W\xd3|\x85>\xafY\x07\xe0bq=\x1a\xec\xd9s" +
	"\x1a\xbf\xdd\xd3K`\xf7\x08!\xa5\x19\xa2^h\x08|" +
	"i1w5\xefi\x80\x962\x92\xa6\xaa\xaby\xab\xab" +
	"\xa1\x1b\x96j\xe6\xaf\xb8g\xa4D:\x81>\xc2S\x89" +
	"2\xc7\xe4w\xa5\xaa\x8a[~\xce\x82K.\xc8D6" +
	"_\xa7<\xfb\xd4\x93GXp\xe1\x8d\x99\xbe\x9d\xef'" +
	"\xab7\xff\xe5v\x16\\\xb8 #\xf8\xf7<t\xee\x8b" +
	"%'Y\xb0\xe9\xb6\xcc+_\xca<\xf4\xf3WWl" +
	"\xe0)\xfb~7\xf0\xfa\x94\x17\xa3\xdfa\xc1\xa6\x073" +
	"U\x8b\x0e\x1d\xbf\xab\xfd\xa9_\xb0\xe0\xc2\x073\xbb;" +
	"\xffz\xfd\xc6\x9b\xeez\x8c\x05\x97<\x98Y6\xe3\xe2" +
	"\xf6q\xeb\x97<\xc8\x82m\x0b2';\x1a\xbfz\xdf" +
	"\xf9e\xaf\xb0\xe0\x92+\x1do\xeb\x8c+%}N@" +
	"(\xe6\xc6\x08)\x14\x9f\x8c]\xef\xc4\xc9\xc8\xb8\x93\xd9" +
	"5\xcf\xb5\xd7\xec\x8c;\xc8\x0bpG\x811\xaf\x8d\xaf" +
	"\xef\xd6\xe2q\xa5W\xcd\xb8&\xdbL4\xf43;\x7f" +
	"p\xbf\x1dQ\xf8\xb9|\x1f\x89>j\xe4\xa7\x0f\x15~" +
	"h\xa8#\xfc\"E\xc6\xf8\x05\x0a68\x0a\xf0(?" +
	"4Q\x19|\xa2_ \xba\xd8V\x80\xab\xfd\xd8]O" +
	"\x04\x9e\xe1\x17\xa8\xd2\xd1\x7f\xa7\xf9\xb9+\x14\xf0\\\x94" +
	"r\x91\xa3\xff\xce\xf6\xdf\xc5Xd.x#\xf8\x85\x8e" +
	"'\xd7E\xfe\x95P\xbb\xc1\x17\x83\xd3\x08[\xff]\xc8" +
	"k\xd3\x02\xde\x09.T8\x87\x0f~\xfe\x15z\xf0\xe5" +
	"~\xe7\xaa\xa3\x941i\x19/\x7f9x\x9f\xdfq\x9d" +
	".\x83>\xee\x87\x9e\x1b\x07\x1f\xf0;\xae\xd3\xe5\x8cI" +
	"i?\xf4\xe2\x01\xf0\x0d~G\x1f\x87\xfe\xbb\x9e\xff\xee" +
	"\x0d\xe0\xdb\xfd\xce)\xf6\x08\xc6\xa4m\xbc\x15\xb6\x82\xef" +
	"\xf4;F\xc1\x15\x8cI\xf7\xf2\xdf\xdd\x09\xbe\xdf\xef\x18" +
	"\x05\x8fdL\xda\xc7\xcb\xd9\x0b\xfe\xb2\xdf1\x0a\x0e0" +
	"&\xbd\xc4\xeb\xff2\xf8\x07~\xc7(\xb8\x921\xe9\x04" +
	"o\x87\xf7\xc0G\x94:F\xc1A\xc6\xa4\xb2\xd2\xbb\xd1" +
	"+\xa5\"E\xa6\x96:F\xc1g1&\xd5\x95\xa2>" +
	"\xb5\xe0\x8d\xa5\x1eW\xae\x8bJ\xf1^\x8d\xe0\xad\xa5\x8e" +
	"U\xb0\xcc\x98\xb4\x84\x97\xd3\x0a\xde\x07^Yf\xbbr" +
	"\xa9\x9c\xf7\x81[\xe0\xc1r\xdb\x95kM)\xb7\xf8\x02" +
	"\xbf\x01\xfc\xac\xe1\xb6+\xd7u\xa5\x0f\xa2}\xc07\x82" +
	"K#mW\xae[y\xfe\x8d\xe0[\xc1\xe5\xe1\xb6+" +
	"\xd7\x16\xce\xb7\x82?\x06>j\x84\xed\xca\xf5H\xe9\xab" +
	"\x8cE\xf6\x80?\x03~v\x85\xed\xca\xf5T)\xc6\xcf" +
	"~\xf0\xe7\xc1G\x8f\xb4]\xb9\x9e\xe5\xfc \xf8Q\xf0" +
	"1\x01\xdb2\xedH\xe9\x95\x8cE\x0e\x83\x1f\x03\x1f;" +
	"\xc2v\xe5z\xa5\x94{\x14\x82\xbf\x07>\xae\xd2v\xe5" +
	"\xfa+o\xb7w\xc1O\x82\x8f\x0f\xda\xae\\\xff\xe0\xe5" +
	"|P*RW\x99@\xc1\xaa\x0a\xdb\x93\xeb\xa3Rt" +
	"\xe3\x87\xc8>\x06\xbc\xfa,\xdb\x93kT\x19^kL" +
	"\x99H\x91Z\xf0\x09\x92L\x93\x19\x93j\xca\xb8\x915" +
	"\xf8\x0c\xf0P\xc0\xb6L\x9bV\x86f\x9b\x01>\x1f|" +
	"\xa2l\x7f*\xff\xbc2t\xd7|\xf0\x16\xf0\x9aQ\xf6" +
	"\xa7\xf2\x9bx\xfe\x16\xf0N\xf0Ig\xdb\x9f\xcao\xe3" +
	"\xbc\x13|9\xf8\xe4\xd1\xf6\xa7\xf2\x97\xf1r\x96\x83\xf7" +
	"\x81\xd7\x8e\xb1?\x95\xaf\x96\xf1\xee\x05\xb7\xc0\xeb\xc6\xda" +
	"\x9f\xca_S\x86\xf7J\x82\xaf\x03\x9f2\xd2\xfeT\xfe" +
	"`\x19\xf7\x04\x04\xdf\x0a\xfe\x99q\xf6\xa7\xf2\xb7\x94a" +
	"\x1am\x07\xbf\x1f|j\xc0\xfeT\xfe}\xfc}w\x82" +
	"\xef\x07\x9f6\x9e\x7f+_\xda\xc7\xf9^\xf0\x83\xe0\xd3" +
	"\xabd:\x97H:P\xf6\x06c\x91\xe7\xc1_\x06\xff" +
	"l5\xffT\xbe\xf4\x12o\xcf\x97\xc1\xdf\x04\x9fQi" +
	"\x7f)\xff\xf52\x0c\x93\xb7\xc1}\xe5\x02\x05g\x06\xed" +
	"/\xe5S\xf9\xbf\x19\x8b\x94\x96\xa3\xfd\xc1\xcf9K\xa6" +
	"z\xb4\x7f9\x86\xc9D\xf0\x0b\xc1\xcf\x9d\xc0\xbf\x94/" +
	"\x9d_\xce/\xb9\xc0\x17\x83\xcf\x0a\xd9\x1f\xca_X\x8e" +
	"v[\x0c\xde\x0d>[\x92\xe9s\x8cI\xe1r\xb4O" +
	"'x\x1c|\xceD\x99\xe61&i<\x7f\x1c|\x00" +
	"\xbc\xbe\xc6\xfeP~\x9a\x97?\x00\xbe\x01|\xee$\xfb" +
	"C\xf9\xeb\xcb1\xdcn\x00\xdf\x08~\xded\x99.\xc0" +
	"t\xe1\xf97\x82o\x05\xff\\\xad\xfd\xa1\xfc-\xbc\xfc" +
	"\xad\xe0;\xc1\xe7\xd5\xd9\x1f\xca\xbf\xb7\x1c\xc3s\x07\xf8" +
	".\xf0\xf9S\xec\x0f\xe5?P\x0e\xf1\xb3\x0b|\x0f\xf8" +
	"\xf9\xb2\xfd\xa5\xfc\xc7\xf9\xef>\x06~\x18\xfc\x82\xcf\xd8" +
	"_\xca?T\x8e\xf1s\x18\xfc\x18\xf8\xe7G\xd9_\xca" +
	"\x7f\xa5\xbc\x0b\xed\x0f\xfeA\xb9\xfb\xed\xbcf#\xc1\x1a" +
	"\x92\x86n\x1f\x09}\xf7\xe66\xf9;\xfa\x89\xc7\xb2\xc7" +
	"\x8b\xba\xb1\xb6\xd9H$Y\xc8\xcdqh\xd5\xe7\x87\x1f" +
	"\xa1Ww\xba9\x06\"M\xfcscBT\x89{\x17" +
	"!v\xea\x13\xd1\x17\xae\xf8\xf30q|&\xeb\xa3\xd7" +
	"\xbf\xf6r\xbe\xc3'U\xb5w\xf8dy\xdc\x11\xed4" +
	"\xe6W=\xb1\x8e\xffW'\x99\xf6\x87\xf2\x16\xf6\x93\xfd" +
	"Q\xa3<\xaf\x187M\xc8\x0b\x06_\x18<\xf7t\x1f" +
	"\xdaS\x9cm3kP\xedH\x09\x85\xee\x12\xce\x95\x1a" +
	"\x0b\xf1K\xb5\x9c\x1b\x90\xc3\xc9\xbdk\x1b\xfaU\xbb\xec" +
	"\xa3\x0d\x83\xa7-\x9a\xec\xe4y\xb3\x86\x9eK\xba_r" +
	"\xb2\xf7\x8a\xc5\x12-S!\xf7\xb5\x8b\xf8f\x14\x1a\xdb" +
	"\x14&\xc7\xd3\x03MV\xabAkU\x93;`\xf8\x15" +
	"\x8f\x03F\xaf\xa9\xf4k\x96\xed\x90\xa0\xc4/W\xac\"" +
	"\x8e\x16\xce\xf7\x8dT\x8aj\xf6\xf7K\xc4\xfco\x1be" +
	"\x0f \x9ab\xf6\xb7\x8d\x8a\xa5\xb5h\xa9h_@1" +
	"=\xe1\xde\xbd\xc9\xf6W\xc8r#\xe2L\x0et\xcf\xe4" +
	"\xe6_s\x82y\xb0|\x877\xf7\xd3D\x05\xb8?j" +
	"\x7f\x0c\x89\x89\xd9\xd3\x7f\x8f\xf1\xa8k\xe8TP\x8f\xac" +
	"\xf5B(\x96\x8e\xaa\xb1\xd3\x7fs2\x8e\xa1\xdf\xdd\xa7" +
	"\xb1\x86\xe8j]-\xf2M%\xfb\x8e\xa0\x9b\xfa4;" +
	"\x837\x96V\xe2T>6\x85)\xad\x01\x14\x92\x9bz" +
	"<\xf2\x86f\x16\x8f\xef\x91L\xb4)\x03\x9d\xaaI\xdc" +
	"3\x85\x7f\x86%/\x92\xff\xda6U\xd1\x9b42\x8b" +
	"\x86%\xe9_\xdb\xa6\xe9\xa7,\xbb?\xda\xce?}S" +
	"t\xe8\xf4\xafmW\xad.%\xc6\x1a\xb4\x82\xef)\x9e" +
	"\xc2\x16\xac\xf0*\"j\xc7\x96\x15\xb0\xfd\x8b8\x9f\x14" +
	"0\xf3\x03\xcd~\xa2\xc3M\xffZ\xfee\x9e$\xb9_" +
	"\xe6\xf94\x9f\xb4\xd8?\xa6\x91\xb1\xecW-hq:" +
	"\xa1\xc5\xf2C\x9a\xd8\xbe\x82J\\((\xa3\xd8Dv" +
	"L\xe3T!\xb6\xd8\x19\xda\xce\xc8n\xb0\x87v\xb1\xab" +
	"\x1d\x8f\x87\xf5)R\xb9\xf5Z\xd4\xd4\xbc\x91\xd7\xf2\xd2" +
	"\x8a~\x9d\xa1\xd30U\xd6p\x19\xbf\xec\x19\xda\xee\xfc" +
	"\x0b\xac\x16)]\xf6G\x02\xfcY\xcbV\xeejj\xf6" +
	"(Q\xb5\x8b\x8cto_\xc1\x08v\xd3X(\xadw" +
	"x\xbe}\x95J'\"H\xa2\xa8\xda\xc5S\x86>s" +
	"9A\x80\x0e\xf9\x8aXQ\xcb\x1e\xee\x86u9\xe4\xb5" +
	"\xd9\xa5&\x8c~\x85\xe2\xff\xbb\xf8\xf7\xf9\xb1\xed\xdd\x18" +
	"A\x8b\xe2iF\x03\xa7\xba\x1b:\xfd\xd9f\xfeF\x90" +
	"\x1f\xb5\x84\xb2G\x9b+\xb2W\xd1w\xf2;\xd5\xcdY" +
	"\x9fF7b\xe2=< \xd4\xce\xec\x9d\xad\x1b1\xf1" +
	"a~W\x9c\x0b\xfc\xe4\x1a\xd4>\xc1#Q\xe5\x02?" +
	"\xb9\x11\x13\x0f\x08\xaf\xe6\x05xr\"&\xd6\xbf$L" +
	"\"\xc6\"\xc7\xb3N\x90n\xc8\xc4w\x84K\xf3\"<" +
	"\xb9!\x13O\xf0\x0a\x9d\xcc:G\xba!\x13I\xbc\xd6" +
	"\xeb\x1c\xe9FL,\x03\xb6\x9d#\xf9\x9d\xb0\x1b11" +
	"(B\xbf\x1d\x93u\x9at#&\xd6\x88\xd0\xafj\xc1" +
	"g\x89\x9e\x88\x893y\xfe\xb9\xe0\x8d\xa2\xeb\xaa\x84\xed" +
	"\x17\x0fX\xd2\x08\xde*\xba\xaeJ\xd8~q\xde\x0a~" +
	"\x85\xe8\xba*1&-\x15\xa1\xef]\x01\x1e\x13]W" +
	"%\xc6$\x85\xf3\x18xRt]\x95\x18\x93\x12\"\xb6" +
	"\x89q\xf0\x01\xd1uU\x82\xfe\xc9\xeb\xb3\x0e\xfc\x16\xd1" +
	"uUbL\xba\x99;}n\x00\xbfCt=\x95\x18" +
	"\x936\x89\xd8\xbd\xdf\x01\xbe]t\x1d\x95\xb0\xcd\x15\xdf" +
	"\x87\x9e\x09\xbeKt\x1d\x95\xa0g\xf2\xfa\xef\x02\xdf#" +
	"\xba\x8eJ\xd03y\xfb\xec\x01\x7fF\x14<\x9f\xaau" +
	"\xc7Y\xc1\xdd\xcb'\x8a\x983\x99\xc5\x9f\xb0\xac\x9f\xd1" +
	"\xba<4\xf8U~\xec\xab\xfced\xc8\xb7\x02\xff\xb7" +
	"\xf1\xb0\xf2L\x07O\x19(\xebLbU}R\xac\xab" +
	"O\x8aX\x95\x8d\xb9\x953\xa8\x9d}\xba\xc49g\x18" +
	"\xad\x8b\xd7\xfd\xb41\xc7\xce8\xc2V^\xfc5WM" +
	"\xc5Bz\xa5j)\xb9\x94\x81\x94\xf2I\xdb\x0c\xfeM" +
	"\xbe\xc4B\xa1\xdf\xd5\xefu\xfbc\xae\x05\xa33\xc1\xf5" +
	"\x90\xa8An\xf4x\xd1\xf2Zo\xd8\xc5\xd2\x12]\xb3" +
	".S\xe2iR?\x8d)\xa7\xe3\xfe\x90\x17\xa1v{" +
	"V\xde\x9e\xe7\xbb /R\x90+o\xcf\xe7|.x" +
	"\xa3\xcf#o/\xf2]\x9a\xe7\xea\xc9\xcf\xf1\xb9\xab\xe7" +
	"\xa5y\x11\x84\xf8Q>\x91\xd4\xc6y\xce\x05\xb4\xc4\xb9" +
	"~^\xca#\x17u\x83\xaf\xe0\xae\xa1>\xdb\x98\xf3*" +
	"\x1eqh\x05x\x9c\xbb\x86\x96\xd8\xc6\x9c\x1aw\x95\xec" +
	"\x03\xb7\xb8k\xa8s\xfd\xbc\x86\xbbt\xe6\"\x0b\x959" +
	"\xd7\xcf\x83\xbeo\xe7\xb9\x8c\x96\x93}\xfd|3\x8f\xc8" +
	"t\x03\xf8F\xee\x1a*\xd8\x1e\x0c\xb7r\xbe\x01\xfc\x0e" +
	"\xee\x1a*\xda\x1e\x0c\x9bx\xfds.\xa6\x15>\xdb\x83" +
	"a\x0b\xe7\x9b\xc1w\xf8\x1c\xdf\xf8\x91D\xd2=\xbc\xdd" +
	"r\x11\x8a\x02\xc3l\x0f\x86{y\xfe\x1d\xe0\xbb\xb8k" +
	"\xa8\xdf\xf6`x\x80\xf3\xfb\xc1\x1f\xe3\xae\xa1\xa5\xb6k" +
	"\xe8#\xbc>\xbb\xc0\xf7p\xd7\xd02\xdb5\xf4q\xfe" +
	"\xbe\x8f\x81\xef\xe7\xae\xa1\xe5\xdc5T\xda\xc7y\xceU" +
	"U\x1e\xce=C\xa5\x03\xbeqy\x91\x8eF\x8d\xb0\x1d" +
	"C\x9f\xe5\xf5|\x06\xfc\xb0\xcf9\x06;\x9bH:\xe4" +
	"\x9b\x94\xe7\xda:z\xa4\xed\x18z\xc4\xb7\x00\xeb&\xf8" +
	"\xcb>\xe7\x18l\x0c\x91\xf4\x92oz^\xc4\xa4\xb1\x95" +
	"\xb6c\xe8+<\x7f\xce\x15v\\\xd0v\x0c}\x8d\xf3" +
	"\\$\xa5\xf1g\xd9\x8e\xa1\xafs~\x0c\xfcm\xf0*" +
	"\xc9v\x0c}\x8b\xf3\x9c\xebl\xb5l\x1f\xbf\xbd\xc3\xc7" +
	"O\xceuv\xc2(\xdb1\xf4\x04\xe79\xd7\xd9\xd0\xd9" +
	"\xb6c\xe8\xbfx;\x9f\x04\xf7q\xc7\xd0\xd1\xb6c(" +
	"\x95\\\xc9XW\x89\x1b\xc0\xa9f\x8c\xed\x17Z\x06l" +
	"\x07p\x92\xb9_\xe8X\xdb/4X\xd2\xc5X\xa4\x12" +
	"\xbc\x8a\xfb\x85\x8e\xb3\xfdB\xc7r\x9e\xf3\xbf\xad\x1d/" +
	"S-\xf7\xbfE9\x13\xc1g\x80\xd7U\xc9TG$" +
	"M\xe3\xf9\xa7\x82\xcf\x05\x9fR-\xd3\x14\"i6\xe7" +
	"\xb3\xc0/,\x11\xa8!\x9dR\xdb\xe7t\xb8\x97\xde\xfc" +
	"O\xcd\xca\xde\x81\xa7S*\xf7W\xf3~\x8b'j\xc4" +
	"\xd4\xcb\x1c\x96\xbd\x18\x02\xec\xf6B\xc1\x81]\x8a\xa5\xb1" +
	"\x80\xa1kV>_l\xa4M\x8a\x0f^\xde\x93L\xb5" +
	"kT\x90\xd8\x19Su&\xba\x8f\x90\xb7\xa8\x06\x83\xfb" +
	"\xa6\x9d\xb2\xb0\x16\xd5\xefM\x0e\xf5%4]\x1f\xea\xff" +
	"\x18\xea3\x92\x96^\xc4\xc1-\xb9\x18\x0f\xd8/bo" +
	"D*\x1bm\xac\x0cx\xb1\xf3PU#v\xafz\xdf" +
	"\xdc6M\xcf\xf3 C1x\x8bb\xf9\xed\xd2\xf2R" +
	"\xed\xaf'LBjhmO2\x15u\xf8o\xbe\x93" +
	"\xbc\xa8\xfc7\xb6\x83\xa5\xc5\xdf\xdcH\xb2\x06\xeb\x12%" +
	"\xed\x06\xc59~\xc3%\xdc\x98;\xaa\xc4\xd5\xee\x98\xca" +
	"\x1ax\x1e\xd7\xbb\xe7\xfcF\xc6\xc4\xd517\xeb\xcaF" +
	"\xc6\x1aV\xb7\xa8)\xc5\xcdP\xda\xc8\x98\xbfG\x1f\x18" +
	"j\x91w}\xbf\xaeY\x09e\xc0[\xff\xd6\xcf\xa3\x86" +
	"\x81\xd5J\xc2\xfd\x0e\xcc\xfcF\xc6\xae\xb7\x903\xdb\x00" +
	"\xb2\x8br\xd5\xb88\x87\xe6\xb8ui\xca>\xe9\xfe\xc6" +
	"\xfe6\xfei\x09\xfb\xc9KX\xc0\xf3\x92\x8d\x8d\xb9\x97" +
	"\xd45\x16\xf0\x94=\x8bo\x14\xf9\xb2\xe6\xed\x1f\xdb\x9d" +
	"\xf4J\xdb\x9d4\xa1\xe9\xd91\xe5\xfdx?\x96\xc5|" +
	">\xc6\xb1x\x01\xd6\x18\xe5ewr{\xf0\xdc\xeco" +
	"\xe7\x95\xe2u\xb2\xcc$M\xa3\xa7\xc8S\xfdI\xc3\xca" +
	"\xc3\xdc\xb2\xe7\x93\xa3m^fD\xcfi\xeel\xf1;" +
	"\x96\xe9S\xb3\x0bm\x19A\x10\xfbH\xa4H\xa57\x14" +
	"|\x05\xe7\xa5\xe0\xb27\x14|\x90\xf3\x11<8\x8d\xd7" +
	"Sp\x14\xe7Y\xcf\x9d\xec\xc6f,A\x10c1\x8e" +
	"L\xf4\x86\x82\xaf\xe6^\x199\x97\x1ew_S\xc3\xf3" +
	"W\x81O\xf5\x86\x82\xaf\xe3\xe5O\x04\x9f\xe1\x0d\x05?" +
	"\x8d\x9b\xa9\xe5\xbc>\xdc\x8d\xcdL\x9e?\xeb\xf5!\xae" +
	"\x8ef\xcdGVg\xed_DC\xcb\xfe3\x9a\xfdg" +
	" j$\xb2{\xd7P\x7f\xb4M\xc9\xaa\xc9\x81U\x9e" +
	"?\xc4U\xab\xb2v5\xabV\xcd\x9e5kV.\xa5" +
	"\xffS\xde\xeb.\xecWE\xdd\xe2_\x0f\xca\x1a\x8c\x07" +
	"\x83\xabr\xf6\xe1\xc1\xe0\x959#\xc4`pzf\xa1" +
	"ke\x1e\xe8\x1eL\xaa\x19\x1e{$b\x7fT\x80\x93" +
	"pU\xf6\x92\xfa\xf1\xe9\x8c\x85w\x8b\x14\xde\x9b\xb3\x0a" +
	"xbz.\xc4S\x85\x90\xc9\x10e\xfe\xfd\x85Q\x7f" +
	"\xff\xa5\xb5\xe8\xb7,\xb8o\x1c\x13*\xc4\x8f\x01?|" +
	"d\xeb\xe8\xc0\xb7.9\xc8\x82\xf7-`B\x85\xef#" +
	"\xc0\xab\xafX=\xf2\x8b\x0f\xfd\xe8\xa7,\xb8i\x0e\x13" +
	"\xb8\xf2\xe4g,\x98\xbe\x80\xb1pR\xa4\xf0:t\xe8" +
	",\xdeA\xc1\xc1\x1bsv\x18\x01k0\xa9\x0e\xb5\x89" +
	"\x0fhz\x8fA\x95\x99_\xbd*~\xfc\xcb/\xfd\xf2" +
	"\xa8ka\xaeX\xd7ss\x00U\x0fq\xe3M\xd7\x16" +
	"\xfd,&\xd0YP\xbc\xd3z\x93\x15\xb1\x142\xad\x8e" +
	"\x1e\xee\xc2T\xe8\x88\xf6\x89\x8d\xde\xa0[h,\xcc\x89" +
	"Yvh\xf2\x0b\xb8m\xca\xfa\x1by\xa4\x94\xeb\x16\xf0" +
	"H)\xe9\xdbx\xa4\x94\xf4\x95<R\xca\x1a\xc0\xff\x8f" +
	"\xb9\xeb\x8f\x91\xa3\xb8\xd2U\xdd\xbb3c\xc0\x9e\x1df" +
	"\x9d\xd8\x80\x19llb|\xe0x\x7f8\xe2\"\xac\xf1" +
	"z\xd7\xcb.x\xd7;\xb3\x0b6(>\xd1\x9e\xa9\xdd" +
	"\xed\xa4\xa7{\xdc\xd3\xb3\xde\xb1\x12\x99D\xf1\x1d\xa0 " +
	"A\xceD\xe1\x14$;\xf2\xe9\x0e\x02w\x10\x8cd\"" +
	"[\xb29'\xc2\x91Q \x07:r\xf9e8\xa23" +
	"\x9c-\xd9\xc8\xdc\x91(dO\xefUUW\xf5\xcc\xec" +
	"z\x9d?N\xc7?\xc8_U\xf7\xf6\xcctW\xbfz" +
	"\xef{\xdf\x17K\xd9\xcf\x12B\xe3\xfc\x7f\x09\xfe\xbf\x05" +
	")\x1b\xc6\xaeJYw\xc3\x8a\x92\xda\x91\xc7\x16N," +
	"\x92[\xf5ErA\xfa!VC\x91|\xc6\xd6\xea\xd9" +
	"{\x03Q\xe4\xf6\x9a\xd6\xc0a\xd5iVHw\x9b\x16" +
	"\xd2\xf7\x0a\xf7\x91\x99\x0a\x0b\x84u\x16\x99\xa9XSX" +
	"\x01'\x94\xcd\x83z\x87\x9c4\xd1\xc3QY+:8" +
	"\x06\x8bc\x1e\x07M\xcf\xadcH\xe4/\xc7\x90\x10\x0e" +
	".\x83\x84\x16CGI&\xbbD\x9a0$bW\xea" +
	"Q\x85\xc6\\-\x94\xce\xbc\xf9\xd7/v\x05\xf7y\xdf" +
	"D\xba\x96t\x83\"qV*c\x0f\"\x15+\xe2\xa3" +
	"\x91\x15\xceh\x11u\x7f\xc4\xd5\x8ae\x8a>\xb2\xe5\xc8" +
	"LU+S\x8b\xe8#\xbb\x15q\xd5w\xd6*V\xc4" +
	"\x0e<O7\xe0\x1bq\xe5\x13+\xe2\x06\xec\xff\x0a\x9b" +
	"\x10S\xf1\x98\xecB|6\xd2_\x96\x10+\xe2\xbd\xc8" +
	"|\x0d\xfb\xcb\xe8\x02\xbe \xee\xc06\xb5/I\"n" +
	"\x1b\x15u\x7f\\'C\xcb\x0f\xb8m`C:F\xa5" +
	"\xc6uDP\xb1V\x19t\xc7\x18-\x95\xb7\xd9n\x11" +
	"5\x19B\xae\xb3\xedb\x92\x97d\xdc\xa0gt[\xfd" +
	"V1\x8a\xf3\x9e\xdc\x925\xddU\xb4j#\x14\xf3\xba" +
	"\xa3\xd5R\x94g\xda[\xf5}F\xdd\xa0\xcf\xaa\x8d\xf8" +
	",\xcb\xa7D\xb2\x0a\xa3\xd5R\x0f\xdd\xe9M\xb1MV" +
	"\x85%\x91</\x87wZ\x15\xc6\xfd\xbc\xb4\xe2\x93\xfe" +
	"\xc3\xd26\xf5\xab\x0b:Ph#\x10\x12h\xea\xe8@" +
	"\x89\xb9\x98#\xbd\x9eS-\xb9\xdcu\xa2\x8f9V\x8d" +
	"\x15\x87\x87l\xb7\xa7\\vP\x9c\xc1sG,\xac\xde" +
	"\xc1c\xa0\xad\xc1\xd75Y\x83}BrGL\x9a;" +
	"\xa91\xb3N\xec$$w\xdc\xa4\xb9\xd3R{\x8f\x90" +
	"\xd4)_\x93\xd9C\xed=BRo\xfeT\xc9\xecq" +
	"\xed=BR\xef\x02x\xd6\xa4\xb9K\xe2\xd6\x8a\x11\x92" +
	"\xba\xf8(!\xb9K&\xcd\xc3\x9bp\xbc\xdc\xc8\xdf\x9a" +
	"\xa9X\xa5\xb2\xd3\x84\x1b\x8c\xcaec\x96O\xe2\x13," +
	"hD3\x13,\xe8R\xbe\xf3\xe3B\x80\xd3`~\xf4" +
	"+\xd1~\x1d}\x8e5\xdd|N\xe0\x95\xfbP\xc0\x11" +
	"\x9b\x01\x1d\xabvEvmbM\xd2\x1a\xa3\xe1\xa7\xf8" +
	"U\x18\xf2|\x8c\x9b\x99K\xad&\xcd\xc7\xc2\x1f#\xfd" +
	"i\xeb\xb3\x84\xe4c\xb0\xe3\x8a\xa9\x9f#\xbd \xf6\x11" +
	"\xc45\x80\xdf\x10S\xbfHzi\xecU\x88S\x00_" +
	"\x1dS?JzU\xec\x1b\x10\x8f\x00\xbe.\xa6~\x97" +
	"\xf4\xed1\xd8\x00\xde\x06\xf8\x1d1\xf5\xd3\xa4\xd7\xe3\xfc" +
	"n\xc07\xc6\xc4S\x0fO\xf7\x86\x18\xac\x12\x1b\x01\xdf" +
	"\x12\x13O=<\xde\x831L\x9c\x02\xbe=&\xa5\x11" +
	"`5\x88\xfd\x90\x90\xd1\xed\x80\x17cR\x1a\x81\x90." +
	"+\x86\x12L\x0e\x0cL\xc7\xa46\x02!]U>\xf0" +
	"\x10\x0c|+&\xc5\x11\x08\xe9z\x84\x0f\xec\x87\x81\x03" +
	"1\xa9\x8e@H\xd7\xd3\xb1\xab`\xe0\x1fa\xe0pL" +
	"\xca#\x10\x92~\x11\xaf\xf50\xe0\xc7cR\x1e\x81\x90" +
	"\xf41\xc4\x8f\x03~:&\xe5\x11\x08I\x9f\xc2\xcfp" +
	"\x1a\xf0w\x00OQL\xe6v\xbd\x1d\xdb\x84\xc9n\x18" +
	"8\x07\x03\xd7\xb6\xf1\xec\xc2\x071X\x1a\xcf\x01\xfe\x09" +
	"\xe0\xe9\x14\xcf\xe6~\x8c\xf8'\x80\xb7\xc4\x0d\x9aj\xa7" +
	"<\x9bK\xe3\xdf $\x1f\x87\xdf\x0c\xe0\xc5\x06O\xe6" +
	".\x8d\xbf')Zw\x02\xfe\x19\x93's\xff2\xfe" +
	"#\xc9\xb9\xda\x0e\xf8g[x2\xf7\xde\xf8\xbfK\x0e" +
	"\x15r\xa5\x96\xb4rn\x8f\xc6\x95\xda\x0f\xf8\xd2\x18\xe7" +
	"\xf6<\x11\xc7\"\x01\xe0/\x00~]\x9cs{\x9e\xc7" +
	"\xf3\x1c\x06\xfc\x0d\xc0\xafOpn\xcf\xeb\xc8}z\x03" +
	"\xf0s\x80\xdf\xb0\x80s{>@\xce\xd8Y\xc0[\x12" +
	"\x82d\xb3\x0c>V\xc2'$\x9f\x90\x94\xa8\x1b\xd3\x9c" +
	"\xda\xb3\x00)HH\x89Z\x02x\xa6\x9dS{\x16'" +
	"\xe0>o\x07\xfc&\xc0oZ\xcc\xa9=\xcb\x12p\xcb" +
	"\xdd\x10R\xa8\x96\x7f\x86s{V%\xe0\xf2W\x03\xde" +
	"\x0d\xf8\x0a\x83s{:\x90j\xb4\x0e\xf0;\x13\x82c" +
	"s3|mH\x1d\xba\x03\xf0\xbe\x84\xe0\xd8\xac$$" +
	"\xdd\x93\xf8\x90\x90\xd1\x01\xc0\xc7\x12\x82c\xb3\x8a\x90t" +
	"\x0e\xa9Xc\x80?\x08\xf8-\xd7qn\xcf\x0e\xc4\x1f" +
	"\x04\xdc\x01\xfcs\xd7sn\x8f\x8d\\#E\xc5Z}" +
	"\x03\xe7\xf6\xecB\x8a\x96\xa2b\xddjrn\xcf\xd7\xf0" +
	"z\xbe\x0a\xf8\xc3\x80\xafY\xc6\xb9=\xfb\x12\x1fE\xa8" +
	"X\x7f1\xcd\xb9=\x1a\x15\xeb\x10\xe0\xb7e8\xb7\xe7" +
	"`\xe2\x0fp\x9b\x87\x14\xad\xdboj\xa7\xb7S\x9a~" +
	"\x11)T\xcf\x01~\x04\xf0\xb5\xcb\xdb\xe9ZJ\xd3/" +
	"'6\x112\xfa\x02\xe0G\x01\xff\xfc\x8av\xfayB" +
	"\xd2\xaf$`\x8bs\x18\xf0\xe3\x80\xaf\xbb\x99s{\x8e" +
	"\xe1|E\xf5\xeaX\xd9N;(M\x9fH\xc0\xd6\xe7" +
	"(\xe0\xaf\x01\xde\xb9\xaa\x9dvR\x9a\xfe1\xe2\x8a\x02" +
	"\xd6uK;\xed\xa24}\x0a\xf1\x93\x80\xbf\x01x\xf7" +
	"\xe7\xdai7\xa5\xe9\xd7\x11W\xd4\xb0\xf5\xab\xdb\xe9z" +
	"\xa4\x86\x01~\x1a\xf0w\x00\xffB\xad\x9d~\x81\xd2\xf4" +
	"\xdb\x09\xb8\xfd\xdf\x01\xfc\xfdD]<\xa6\xb3\x9a\xbd\xe9" +
	"\x9aC\xc5\x1b.HN\xee\xb6j\xb2\x03y\xa6\xc8\xc6" +
	"\xad\xaa\x13\xe4\x0d\xab\xc8K\xc7\xf7V\x18\xeaQel" +
	"\xa5G%H\xc4\x9bl\xcf1\xbc\x09\xbb`9\xc3\xfd" +
	"\xf6t]\x91\xd7v\xed\xc0\xb6\x1c\xcd6=\xac\xd4W" +
	"\xa7\xab~m\xb8\x97$U{\xb9\x88 |\xaf\xdcG" +
	"m\x9eJ\xd6\x0a\x95h\xe5\x1e\x0cQn\xe5>\x19)" +
	"\xb8\xaa\xb1><P\xd7\x8c.\xa1\x0ehi\x986\xd7" +
	"\xf3\x96\xe3c\xa6jb\xed\xf7\xfc\x9eJ\xe8\xb3\xaa\x95" +
	"\x1e\xbcr0\xef\xb9\"-?\xaf\xb9\xd2;\xcb\xe49" +
	"\x0c\xf47\xe5u \xee\x15\xad\xd7\x87\xe4\\\xca\xe7n" +
	"Z7\xfb\xd8\xc8\xf0\xeccy\xcf\xf4T\x0cPdS" +
	"\xcc\xf1\xca\xa5\x16\xe6\x06=\x85\x02s\x988{m\xd8" +
	"\x0e|o\"\x94\x00\x0fCG\xce\x8b\xf1\\\xca\x8b8" +
	"C^\x16]5\xfc\x88\xcf\xa0\xf8\xb04`yf9" +
	"\x8e\x97-D\xbf{\x19\xf0\xcd\xd6>\xc9\xb7IC\x96" +
	"m\xb8\x01s-\xb7\xc0\xf2Lc\x094\x9b|\x97\xef" +
	"\xd1\xdd\xc1$\xce\x93Nd\x0d&\xfc\xd6\x04\x1b\xb2\xa6" +
	"\x8d\xa8\xf1\x7fS\xd6\x80\xb8\x83\xb7R87\xfc\x18q" +
	"\xab\x91V\x12\xd6\x05\xb7N\xd7&\x98;\x8b\x10\xaa\xf8" +
	"\xbb\xdeN\xc3v\xfa}\xaf\xc4\xdd\xfe\xa5bX\xdd\\" +
	"K\xdc\x02\xb4\xea\x16\xb9\xfeg\xf8\xdd\xd0\xf0tx\xfc" +
	"V\x92D1\xf3\xfa\xd1Yb\xc0\xc0\xf2'X0<" +
	"J\xc5x\x9d\xa9\x8e\x18\xee\"t\x9d~'\xa3^," +
	"\xfd\x0a/\xa9ke6\xcf\x0b\xfa\xecJ@}{g" +
	"\x15\xbe\xea\x0cNP+D\xd3\xfe\x11<\xec.\xdf\xdb" +
	"M2\xc1\xe4\x16k\xa2\xe1Q4\xd4#\x93\xc7\xa9I" +
	"o\xb7v\x8d\xe27\xc9S)0\x11\xd7?\x01\x9c|" +
	"\x84\xb9\x8c\x06\xe2F\x8f\xeb|\x1b\x18\xed\xf7\xfc\x12\xc9" +
	"\xf6k]\xc8\xd2yt\xdc.P\xf8\x8b[\x98;\xa1" +
	"\xeb\xb4\xf0\x05f< \x19\xe6\xf7V\x03%\xadb\x97" +
	"l\xb8\x04C\xeb\x80\x1f`V0\x9a\x89J\x96\xcfe" +
	"\xf0^\xf4\xbd\xea\xc4d0h`\xcdn\xab+ZB" +
	"\x82Z\xdd\x15F\xba\xbdP\xbdl/G*\x1a\x14m" +
	"\x10\xdb\x8b\xe9\xae\xce\xf5a\xc2\xcbb2sv\xe1\xa1" +
	"\xb6\x0b\x1b\x09\x01DL?s\xe6I\x0eL\x89)g" +
	"N\xe3\x8c\xaf\x14\xe4\x09\xce\x1c\xff*\x02^\x08\x1c\x08" +
	"6J\x05<\x1b\xf5\xdeP.wK\x96Y\xe3\x9b\xa7" +
	"\xcb\x97kj\xaa\xdf\x8c\xe92\xb3YN\xe3\x87X\xff" +
	"\x90\xd9BWc\xac_BG\x10%\xdd\xfa9\x11\xed" +
	"WQ*u\x1a\xf0o\xb6pEn\x88\xf6\xbf\x8ee" +
	"\x1aU\x86\x93\x12\x02\x8f\xa0R\xaa*\xb7I\x09\x81'" +
	"Q\xa9V\x95\xd5L\xdeX\x9c>\x88\xc6\"J\xd1\xb5" +
	"\x85\xf7\x16\xa7\x9f\xc7\xf3(E\xd7V\xca\xa3\xfdW\xf0" +
	"<G\xc32V\xcc\xe0\xd1\xfe\xdbx\x99\xef\x84\xe5\xa4" +
	"\xb8\xc9\xa3\xfd\x8bh8r\xa9E\x0a\xae&Z8m" +
	"c!\x1am\\\xd3\x0a\xa1]\xab`\xdf_\x0d\xa1\x1d" +
	"\xea\x86*\x83\x8f\xabb\x9c\xb6\xb1\x01\xeb@w\x02\xbe" +
	"\xbdU\xb0\xef\x17B\xe4\x8b\xe7A]\xd5r\xab`\xdf" +
	"C\xa4_\xc2\xf38\xa1\xbe\xe9\xc2\x05<\xd2\xdf\x87\xe7" +
	"A}\xd3\x03\x80/\x12\xda\xdbO\xb7\xde-uL\x8f" +
	"\x00\x9e49m\xe3e\xd4==\x02\xf8\xc9V\xa1\xc9" +
	"}-!\xe9\x13x\xfe\xe3\x80\x9f\x06<u\x0d\x0f\xf4" +
	"O\xa1\x1e\xeai\xc0\xcf\x02~m\x0b\x0f\xf4\x7f\x87\x02" +
	"\xa7\xef\x03~\x01\xf0t+\x8f\xf4\xcf\xa3\xb1\xc89\xc0" +
	"?AA\xda\x18\x8f\xf4?F\xdd\xd6O\x00o\x81\x8d" +
	"\xc4\xe28\x8f\xf4i\x0c\xbe\xe7\x16\xd8H\xb4\x01\xfe\x99" +
	"\x04\x8f\xf4\x17\xe2\x06C\xed\xfe>\xbb\x80G\xfaKq" +
	"\x07\xa3v\x7fK\x16\xf2H\x7f\x15\xce_\x0dx\x1f\xe0" +
	"K\xaf\xe2\x91~O\x0cB\xdc>\xc0G\x00\xbf\xeej" +
	"\x1e\xe9\x0f\xc5\xf6Dvs\xd7\x0bC\x96{q>\xee" +
	"\xe6\x02\xc0oH\xf2P\x7f\x17\xee\"\xcb\xe1\x9em\x99" +
	"`\xf1?\x82\xf8\xc3\x80\x1f\x02\xfcF\xc1\xe2?\x88\xbb" +
	"\xc2C\xe1\xce,s-\x0f\xf5\x8f\xe1\xfc\xa3\xe1\x0e\xec" +
	"\xa64\x0f\xf5\xdfF\xfc-\xc0/\x00\xbe\xbc\x9d\x87\xfa" +
	"\xe7\x11\xc7\x0dX\x02v*+\x16\xf3P\xbf\x15w*" +
	"-\xb2\x17&u\xf35<\xd4_\x16\xff;\xbd\x19&" +
	"\xb5r!\x0f\xf5o\xc5\x1d\xd2m\x80\xdf\x01\xf8\xaaE" +
	"<\xd4_\x8f\xdd!\xaa\x1b\xe6\x96$\x0f\xf57`7" +
	"\xc9F\xc0\xb7\xc4\x8d\xd9\x85\xc7\xb8\xce7s\xa9\x14\xc9" +
	"l\xb0S\x88\xd2\xaa\xff\xe6\xdf\xfey\xe9\xb7\xb2\xff\xf9" +
	"\x92r\x83\x99K\xd5\x81\x8f\x19[\xc7\xc5r#\xa6(" +
	"\xb6t\xb1\xc8\xe0\x95K\xa5\xf7.\x04\x93\xf2\xd2d." +
	"\x97zn\x0f\xaa\xa8Ei\xd2=\xa5\x92\xe7\x1a\xb6\xb5" +
	"UW\x10m\x08j\xacB\x00Q\x95M\xc7E\xb2\x84" +
	"SB\x1bga\xdd\x95J\xa1\xd0,?]\xc3<!" +
	"\xedK\x99\x13X\xa3\xd5\x12\x99e\xc2 I\xba\xe5j" +
	"0\xcb\xe8(1\xab\xa5&c\xa8\xd6;\xd7\xa9a\xc2" +
	"\xec\xa7\x86\xd1\xa6\xa7.\x84\xbe\x10\x0d'-\xb2\x82W" +
	"*{\x15\xe4\x17B\xb4W\x17\xb03\xdf\xf7\xfc!V" +
	"!\xc9\x8a5\xa1Z5m\x97\xf9\xc1\xa8gS\xf9\x1e" +
	"\xa1\xbd\xf5g\x96b\xa0$\xae3\x89C4[`\xc5" +
	"a\x8d\x8e\xa8\xb4CYQ\x94\xc05\x82R\xb0\xb9\xe0" +
	"Uj\xb4\x12\xb0\xd2\xe6\xe9\xc2d\xd2r5\x96Vd" +
	"\x18N\x92E_4W\x9f0<d\xbb\x8cJuQ" +
	"s\xae\xc1Y~z|P\x86\x07\xba\xe8}\xc8-v" +
	"\xecxE\xff\\\x93]\x88\x93,\x9a\xec\xa8\x81Ji" +
	"g\xef\xd6\xce\xcdS\xd4s\xaa*B\xaa\x0fV\x85\xf6" +
	"2I\xc2\x8f\xdfd\x14\xef\x8c\xe6\xa3\xf33\x06P\x16" +
	"EI\xd7.\xf46\x8e\x96\xe6\xba\x809oj)\x8d" +
	"=\xcb\xb1\xd5R\xf4\xc9\x8ah\x89UK\xc3\xf0\xf5S" +
	"^\x89\xb1+uw\x1f\x8cwn\x1d\xf1I\xd6\x8b\x12" +
	"\xd2a`\xa0\xeb>N\xaf\x82/\x9c\x16\xe7.\x1b\xea" +
	"\xe1O\xbe\xea\xa2pCR\x06=\x9a\xe1\xef\x03\x84\xe4" +
	"\xae1in\x89!N\x84\x85A\xf4\xb4\x7f\xe9o\x7f" +
	"\xfe\xed\xfd\xdf\xb9\xef\x07\xf59\xefY\xff\xce\x90U\xdb" +
	"\xc96y\x1eu\xea\xfe\x88n\xb5\xc7}\x93\xff,C" +
	"\xf8A\xdf\xb7\xb3\xdco\x07k4O-\xde{\xf6\x91" +
	"3\xa7\xfeiN\x0f\xdc/*\xd5\x83f\xa2\x07uz" +
	"\x95J\xc3*<\xf9\\\x9f\xbeY\xb9+\xcb\xeb]x" +
	"\x85m\x17\xde\xab\xb5?\x96y\x93\xa4\xe8\xf7\xa5\x84\xd9" +
	" \x95\x150\xd8f\xea\x1d\xd9\xef\x89F\xebH\x1b\xfa" +
	"\x1fDw\xf9!\xd5\x86~\xf0QBr\x87L\x9a{" +
	"AkC\x7f\xfe\xfb\xaaj\x10\xe6e\x8c\xe2\x987(" +
	"\xba\x8a\xc3?\xa9d&\xc2\xcb\x132\x13\xfaaC\xa2" +
	"\xf1\x18\x8f\xcc\xf2\x12\xdb\xecG\xca\xd6e\x1aj\xb65" +
	"\xb60\xd3\xc8E\\q\xd1;\xe3\x06k\xad\x00n\xab" +
	"6Q\xff\x08\xdd\xaa\xdb\x0d\x9a,Zx\xd3^y\xdf" +
	"\xf6\xfd<\xd7P\xe2\xddZDS;\xa04\xb5yS" +
	"3%\xb4o(\xd1\xb3P\xa7\"\xb7G\xc9\x1d\xec\xc5" +
	"d\xc1`\x91\xb6\x12\x83\xb6\xce\xc8\xff\x08!35\xf8" +
	"k\xd8\xb1\xc1\\\xd8\xce\xa8\xaf\x09G\xfa\xfc\x1a\xc9r" +
	"O\xfe\xf9?\xdf\xb0\x1er\xa5\xc3p[sg(\xce" +
	"\xf3$\xaa\xe7(\xd5\x9b\x90\x8e\x8e5\xc7\xefIMH" +
	"\xa9\x93\xfa\xf7\xa8oz(\xf4\xcb\x97E\x8cc\x143" +
	"\x91\x80\x9f\xa4Z\x11\xe3\x04\xe2J\x0cG\x161~\x8c" +
	"x(\x86\x13\x161N!~\x12\xf07\xa8V\xc4x" +
	"\x1d\x0d\x8e\x94\x0c5\x161P\x86\x1a\x9d}\x00\xff\x15" +
	"\xd5\xf4\x9d\x7f\x81\xb8\x92\xa7\x96\xfa\xce\xbfF<\x94\xa7" +
	"\xee\xb8\xfa!A\x8f|\x17\x95U\xcf\xc0\xc094\xf0" +
	"\xa7|_\xf3\x01\xaa\xf6(\xdd\xea\x85Wsz\xe4y" +
	"\xfc\xdeB#\xa6\xd4\xa2k\x844\x1a\xaa\x0eI'\xa6" +
	"\xc6\xa6\xa0&\xe2\xec\x9e\xedl\x83P-\xe3\xf7;\x1a" +
	"\x8fz\xca\xeb\xd9:4\xe2y\x84:\xea\xc1Zr\xc3" +
	"\xe3\xbf\xdd\xb96\xf7\x1f\xe2\xc1\xda+^6\xe1\xa6[" +
	"\xbc\x9a\xd4\xbf\xf9\xbbR\xffw\xc48\x1f\x95\xcc,\x7f" +
	"'IZ%\xbb\xa8\x9d\xc6v\x86\xa5\x88\xbb\xa02]" +
	"\x87\xa4,\xee\x9c\xd3\xd9h\x98\x10Z\xed4\x1c\x83\x7f" +
	"\xa4\xdf\xf7\xf6\x10\x93\x85\x81v\xbcR\xae\xd4idF" +
	"\xac\x05\xb3\xd8J\xd1\xa5\x0b\xeb7\xea\x9d\xcd_~\xa5" +
	"\xa1\xb0\x1a\xa9\xe8i\xf2%+\x9a=\xd0+ti\xc3" +
	"\x84\x906\xdc\xa9DM\xe2%E1\x8f\x97\x14\xafg" +
	"\xa6\xc8\x1c\xab6\xe8\xf6\x91\xf8eU\xbe\xf4'\x16~" +
	"x\xdf+\xb3\x8c\x1f\xd8\xdc\x1b\x7f,\xac9n@/" +
	"+\xa5)(\x1f\xd8\x1e\xc4\xef\x04|@\xef\x1f\xd9\x8c" +
	"Z}\x03\x80\x8f\xe9\xfd#9\xc4\xc7\x00\x7fP\xef\x1f" +
	"\xd9\x81\xf8\x83\xa1\x06\xa1\xa4Y\xd9\x88;\x80O\xeb\xed" +
	"#U\xd4\x14\x0c\x00\x7fHo\x1f\xf9\x1a\xe2\x9a#\xba" +
	"\x10\xa7\xdd\x87\xe7y\x18\xf0\xfd\x86fu\xf3\x04\xe2\xaa" +
	"/F\xf6\x8f<\x8d}.\xca(\xfd\xea\xd0(\xfdY" +
	"\xa9ex\xc4\xd0\xacn^F\xcd\xc5\xc3\x80\x1f74" +
	"\xab\x9bc\x88\xab~\x99Ew\x08\xab\x1b<\xcfk\x80" +
	"\xbfeh\xfd#o\xa2\x16\xe3[\x80\x9f1\xb4\xfe\x91" +
	"_\xa36$j\"\x9e5\xb4\xfe\x91\xdf\xa1\xe6\xe2\xfb" +
	"\x80_0\xb4\xfe\x91\xf3\x88\x9f\x93\x1a\x8a\x1d\xe9\xc7M" +
	"Nh\xfe\x18Ot\xc90i\xde4hG\xfb\x13&" +
	"'4\x7fj<\xaa\xf5\xd7\xec\xb5\xea\x9ep+\xfa\x84" +
	"\x87\xfb$\x83\x15 L\x0fB\xf7\x8b9g\xa0\xf3\x85" +
	">C:\xb4\xcc~\x8e\x86\x19\x0d\xe7\x10\xfb\xb5\x82\xf0" +
	"\x11\xab?\xb6\xe9\xc8\\.2\"\x91?\xb7}\x8c\xe0" +
	"\xbbZ~\xd0\xb3u\x08\xedD\xf0\xe2\x92\xfa\x97\xd6d" +
	"8\xf2\x1d\x0a\xbb\x8f\x1e\x92\xdd:\xa4\x8e\x13\x1cMm" +
	"L\x1d\xc4\xc7\x8aV\xad\xd23\x1e0\xea\x8b\xb5\x85'" +
	"\x0b\xc2\xdd\xbcW\xea\xf3kC\x16\x85\xf7u\xaf\xe7\x06" +
	"q\xe6F~\xb8\xe1\x81\xee^\x8f\x88\x0dJ\xfd\x97\"" +
	"\xf6\x0f\xf5\xdfb\x1d<[\x1e\xc3\xf5\xf8\xbe\x8c*\x81" +
	"\x1f\x18k\xbd\xf2\xb0\xba\xb7\x1a\x04Y\xdb\x9dX\xdb\xbb" +
	"E\xf3\xe3^\x81\xe4\xb6\x05k\x08\x89\x17\xaaA\xd2a" +
	"\xe3\xc1<\x82\xa9^i\xd9Z\xdf\x1f\xb7=\\\xdf\xee" +
	"7\xde\x8b\xac?r}\xb3\x8d\x0f#\xde\x81r}\xab" +
	"\xa1\xb4\xabZg\xc4\xfa\xd6\xb5\xcf@\x8e\xc1\xe30\xf0" +
	"=m\x81\xebz\x8a\x0f\xa8N;\xb9\xc2=o\xfc<" +
	"\xb2r\xc8\x15\xee\x18z0\xa0:\xeai}\x85;\x85" +
	"+\x9cZ9$\x91\xf4M\\\xc9\xd4\xca!\x89\xa4\xbf" +
	"\xc6\x15H\xad\x1cr\x85\xfb\x1d~\x02\xd5\x80'W\xb8" +
	"\x8b8\xff\x02\xe0\x7f4\xb4\x0e\xb9\xdf\xc37\xa4\x1a\xf0" +
	"d\x83\xdc\x02\xf3\xbd\x88\xf8\xaal\x90[j>\xa07" +
	"\xe0u$\x8f\x0b\xb5\xd6\xe5x\xc0j\x18\xe8\x86\x81\xb6" +
	"\x13&.q]\x1d\xe6\xab\xf0\x0d\xf5\xc1\xc8\x08\x8c\xa4" +
	"^\xe5\xd9\xd6\xae!\xf3C\xaaw\xcfu\\\xfb/&" +
	".s]%\xf3\x01\xaa\xf7\xc9u\xa4O\x9a\x98q\xed" +
	"\xdag\xde\x8d,\x10\x189\x80+\xdd\x8fM\xcc\xb9v" +
	"=m\xe6\xa9\xde\xfb\xd6\xb1\xf8'&\xcf\xba\xbe\x8c." +
	"\xe4Ga\xe05l~\xb3\\\xaf\\\xcb3c\xdca" +
	"\x98\xcb\x90\x1am\x91'J\xb5\xf5\x0eY\xd3Z\xb1\xb3" +
	"\xae\xedYN\xa3l\x0b\xb3\xc6{|\x96\xb5\x06\xdd\"" +
	"\x9b\xd6jN6\x96\xfcL\xad\xe6\xa7\x05\x0d~G\x84" +
	"v6\xf7\xdcN}\xae\xa8\x06\x1bZ\xd9\xcfs\xf3\x9e" +
	"\xa7I/\x889=T\x0a\x02\xd2\xe1&\x17\xde\x83\xda" +
	"\x91z\x11\xda+Y\x81\xd5k\xf0\xb6<\xcb-\xb0\x1e" +
	"\xa7<\xa9\xb5r\x85\xe6\x1cY\xcf\xdd\xc4\xb4\x05d\xc2" +
	"\xf7\xb0dI\xe5\xb5g\xdd|\xc4<@\x94\xc5\x87I" +
	"\xb6N\xc7K\x1ei\xd4\x7f\xea8\xd3\x1a\xde\xe6\x9a\xd5" +
	"\xa9\xf1\xb4\xfc\xa0\xeaUlbj\x9d\x8aV\xf1\xcb\xd5" +
	"J\x90\xf7\x0c/\xc0:b\xbf\xe7\xa3W\x8d\x1f\xf7\xca" +
	"\x95p\xa5c\xd3e\xe6\xdb%\x16s\x03\xcb\xd9\xec\xc2" +
	"w\x86\x14f\xc7\x9b\xa8m\xb3\xdc\x89\xcd\xee\x04\xd3U" +
	"\xa2\xe1W\xf2\xdc\x8a\xa6\xb4\xd8\xf4\x0c\\&\x9c\xfb'" +
	"\xcev\x9a$\x9c\xa7\xe14-\xea4\x03^\xd5wj" +
	"\xfdS\xbd\x9b\xf4\x13\x9ave\xae\x83\xc6\xe4\x15n\xe1" +
	"\xa5,\xcb\xad\x84\xebw\xe31}v\x05\x0e\xea\xb3l" +
	"\xa7\x96\xf7\xbc@\x14\xed\xc7<LG\xaac\xf0\xd4\xf7" +
	"1\xc3wCK!\xac\xf1%\xfd~{\xba!\xe1\x12" +
	"\x9bE\xa3\x1ey\x8b\x93\x96o\x15\x02\xe6\xdb\x95\x00+" +
	"f\xf6\xb8\xcd\xa8\x8f\x19\x8d\xc3/\x9e}\xdd94\xf9" +
	"\x0cI\xd15\xc9>+\xb0\xf4<\x8f\xdc\x8f\xaf4h" +
	"\xd2\xb1\x95\xa0q\x9b:\xacN\xd026\x0f\x9d7I" +
	"_\x0f5\xd6WsaHN\xbf\xb69\xfd\x9aq\xfa" +
	"\xf5\x0eN\xbf\xde\xc1\xe9\xd7\xf7s\xfau\x8e\xd3\xafs" +
	"\x9c~\x9d\xe3\xf4\xeb\xdc\xa6\xff\xaf\x84\xeb\xcb\x13\xab\xeb" +
	"\x04{y_\xe4Z)\xcf\xeb\x98UVG\xac^\xd3" +
	"L\xfa\xb3Se\xc1\x925f\x85\x9a\x13\"E7\x7f" +
	"\x16e\x83\xf2\xddX\x9d\xd4\xe0\x97\x09\xc9=h\xd2\x9c" +
	"\xa3rp\xf6\x8afR\x83+t\xa9AAh\x85\xdf" +
	"YJ\x0d\xce\x8cs=\xff-$\xa2\x92\x11/Oz" +
	"\xb4M\x19\x0e\xf0\xbdf|\xdcsh\x9br\x1e\x10\x9c" +
	"^\xe6\xee\xe9)\xa0%\xbdt!\x98w\xaa\x086\x99" +
	"\xb0T\xce.\x9c\xefk\x1b\xc9\xd0\xbdaS\xb3tQ" +
	"^wohN\xa7\xd8\xeb\x8e!aB%\xdd\xf9\xbf" +
	"\xa3\xfc\x89+~\xa0\xe1\xa9]\xdbg\x99\xbc\xbfG\x93" +
	"\xc1\xbc[S\xbc\x14\xd7\xbeo\x8f\xa6x)\xaf\xfd\xb1" +
	"\x9dJ\xdc2\x94d}\x12>\xfa~\x93\xe6\x0e\xa8P" +
	",\xf5\xf4\x1e\xe5#\xde\xd4\xa3\xa2\xc1\x84\xc9$\x065" +
	"\xe1\xd5`\xfb\xd8\xccL\xe2\x80J\xf2X\xbd^\x8e\xc4" +
	"\xdd~>@\xb2\xe5\xe8\xc0\xfc\xb2\xb6\xfd\x9e\x93A\x9b" +
	"\x88\xba_\xb3\xb3Y\xae`S3\x1b\x04\xcd\xa0#\x13" +
	"\xb0R\xf9\x9e\xf07\xc4\x7fuvGX\xea\xf7tv" +
	"\xaf#\x97#*\xcf\xc1&'\xb8\x14\xdf\xf1\xdf\xe7/" +
	"\x8d\xfd\xec\xfc\x9b$E?\x9c\x91\xfcr\xa3)\xc1<" +
	"\xb71\x0c\xbf_D#\xa4\xc3a\x82O\x86\xdf\xc7\x10" +
	"W\x09;\x91\x06I\x9fB\x83$\x95\x98\x93\xe9\x85\xb7" +
	"q\xbe\xf2\x81\x93\xe9\x85w1\xaf\xa8\xf2l2\xf8\xfe" +
	"\x00U\xb3\xeb\xfc\xde \xd8\xc5&\x84f~o?\xd5" +
	"\x1d\x1d\xc2\xe0;\x85\xc1\xb72v\x93\xc1\xf72\xdcm" +
	"\x87\xc6n\xd2\xfaf\x15\xc6\xde\xab\x01\xee\xc6\xd8{\x01" +
	"\x8f\xbd;\xd0y\x1c\x1d\xcf7\x1aZ:p\x03:\xa1" +
	"\xab,\xcbB\x83\x07\xdfZ\x96\xa5h\x08\xda\x02\x04\xdf" +
	"\x16\xe2\xca\x09=)b\xef\x92\xf1E\xdd\xd1af\xaa" +
	"\x82*)\x05\xcau\xacF\x83\x0c\xf2\xab4\xc5\xa1A" +
	"\xd45\xa2\xac\x0c\xbf[\xe3x\x89\x0bXS\xa9`m" +
	":L\xab;\xf7\xa3R\x14\xdd\xe2q\xa5\xa8\x0c\xca\xf0" +
	"\xab\x83wa\x80w/\xc9\x94\x03\xddV|*\x18E" +
	"\xe3\x05\x03\x05#\xb4\xd8G\xbb7\xa7J\xa8\x95\xc0H" +
	"\x84\x07ue\x06\x86\xb3\xd7\xc5\xc3\xbf2>\x86D~" +
	"\x92\xa9Tty\x03\x89S\x84G,?\x1bp_\xa0" +
	"\xc6\xbe\x84\xe8\xd4>\xe6\x98\x96\"\x85\x15\xc4\xbe\x94\xc0" +
	"\xd7\xd66s\xe3\xab\xff\xf5\xb5\xe7\xc6\x96}=t\x8f" +
	"h\xfe\xf4\xe8\x02\xec\xe1\xd3&\"\x98r\x09\x95\x13\x0a" +
	"\x86\x15\xaa&D\x95\x9d\xb2\x0e\x17Q\x0b\xcf\xa0\x1bG" +
	",\x9a\xcd~G\x7f\xea\xb3\x83\xbd\x9a?\x90\xb4\x95\xd1" +
	"\xcdY\x96\xd1?\xcd4\xb1l[f|:C\x9b\x18" +
	"\xb4\xb8\x1e\xdc\x07$\x96\xe5\x86N!s\xcb\xb1\xb4\xc2" +
	"\xf4\xe5\xc3\x8f\xa6\xae,\xf5\x02\x0d\xdd\xe1\x8a\xb3\x03\xfb" +
	"4\xb7\x87\xdehr\xc5\xb1(l\xc7'\x01\x0f\xf4\xbe" +
	"\xd1]\x98aW\xeeVr\xc5\xa9a7T\xe8\x8d\x16" +
	"\xae8\xfb0\xb3\xaf|\x00\xe4\x8a\xf3\x18\x96\x14\x94\x0f" +
	"\x80\\q\x9eD\\UD\xe4v\xffi\xfaj\xc4\x07" +
	"@\xae8\xcf\xa0W\xdb\x0b\x80\x1f\xd5\xfbF_\xc1\xeb" +
	"W+\xa6\xdc\xee\x9fB\\\x95,\xe4v\xff\x17x\x9d" +
	"j\xc5\x94\x09\xcdw\xf1z\xc2\x153\xe9\x8eY\xd5z" +
	":\xe2\xa8Q\xad{F5\x09\x8dF\xa2\xab\x1c\xd9U" +
	"\xb5\xfc`O\xde\xa2\xbb\x1bUP\x8a\x1c\xe9!\xa6\xed" +
	"\xd7\x83\xdbH2\xa2\xc3\"\xe0\x01\x92\xac\x96\xaa\x95\x06" +
	"Z\xa31 \xac7\xe0\xdd\xdbc\xeb\xc4\xeaf3r" +
	"U\xcb7\x83=sO\x82e\x92\xfas\xcf\x19\xa8\x96" +
	"\xaa\xb4\x12\xa9u\xc0\xc6\x99\x98E\xafA/\x8bh\xda" +
	"g\xbc\xdc0\x8fl\x96P-\xaf\x8b\xf7t\xed\x91\x07" +
	"\"\x1a#\xf2\xd6\xde\xd0\xb2S\xd7\x18\x91\xc5\xb5\xcd-" +
	"\xf9\x88\xc4\x88\xa8\xdd\xa6\x87P\xeac\x04\xf0/\xb5(" +
	"\x15\xf1\xf4\xfdHI\xdc\x0ex1\x94\x1e\x81'\x07q" +
	"%1\x12\x13\xce\x176r\x12\x95\xc4H\\8_\xec" +
	"B\\I\x8c\xa0\xf4\x08<Q\x88\x87\xd4F.=\x82" +
	"\xdc\xc6\xf7\x08\x19}\x18\xf0\xfd(=b\xf0;\xfb\x09" +
	"\xc4\x91\xc3x\x12\xa5G\x84\xf2\xef\x09\xbc~\x94\xe2\xb8" +
	"\x80\xd2#-\xfcez\x1e\xaf\xf3\x1c\xe0\x09\xe4\x00\xb6" +
	"\xf2\x97i+z\xba'B\xad\x89E1\xfe2]\xde" +
	"\xfal\x84{\x98\x8c\xf3\x97\xe9\x86V\xecw\x04\xfcK" +
	"\xc8\x01L\xf0T\xfd\xfd\xc8\xd1C\x8f\xf6i\xe4\x00." +
	"\xe0\xa9\xfaj\xab/=\xd7\xd1C\xfd\xda\xabx\xaa\xfe" +
	"\xb1\xd6\xefK\x0f\xf5\xe7\x90\x03x5\xe7\x0c>\x83\x9e" +
	"\xe8/\x84\\\xc2\xf6\x04\xe7\x0c\x9e\xc2\xbf\x8b\\\xc2w" +
	"\xd0\x93^(\xff\xbe\x8d\xd7\xf9\x0e\xe0\xef\xa3'\xbdP" +
	"\xfe}\xb7\xf5#BF\xcf\x02~\x09=\xe9\x85\xf2\xef" +
	"E\xc4\x15\x97p\xc95\x9c3Hc\xf0}&b\x10" +
	"\xe3 \x07p!\xe7\x0c\xa6\x90\xeb\xa7\xb8\x84\xd7-\xe2" +
	"\x9c\xc1\xa5\xd8%\xa5\xb8\x84\xd7'9gP\xe3\x12v" +
	"#\x07\xb0\x8ds\x06;b\xdf\x8et\x8c-\xa3\\z" +
	"\xa4\xbec\xecF\xa1\xfc;\x88\x9dj\xc81\x9cD\x0e" +
	"\xe0B\xce\x19d\xb1\x9f\xcb\xc6\xb0\x87\x91\x03\xb8\x88s" +
	"\x06\xf7!\xb7Qq\x09\x97\xa7\xb8\xf6\xc8A\xecT;" +
	"\x00\xf8s\x80\xaf\xb8\x96k\x8f<\x13{ \xd2\x15v" +
	"\xb3\x90\xfe}\x119\x83/\x00~\x14\xf0\x95\xed\x9c3" +
	"\xf8\x0a\xe2G\x00?\x09\xf8\xaa\xc5\x9c3x\x02q\xd5" +
	"-v\x0b\xe5\x9c\xc1Sx\xfe\xd7\x00\x7f+\xa6\xbb\x0e" +
	"\x98\x83\xaa?\xa5\xc8*\x05\xdf.\x0b\xd1\xce\xd0\x8c\x80" +
	"\xf9\xccum\x8bh)\x95\x92H2R\x91e\x8c\x92" +
	"\xbdE\xdal\x80d\"/S!\x1b\xc8\x86I\x06\xeb" +
	"\x0a\xaa)%X\xbf\x0e.\x88$\xe1\x92\"\x0d\x92\x03" +
	"\xcc\x9e \xc9\xc9`\xa4\xa39\xdc\x19\x81G\xcb\xac`" +
	"\xc0Z8dM\xe7\x9b\xb2\xd4ek\x84\x81\x1e\x98<" +
	"b\xb2\xdd\x89^/\xceT3@\xb3\xfe\x86Q\xe6R" +
	"V)0\xb7\xc0\"\xbc\xad\xba\xb9\xf0\xc2\xe9\xb3j\x0e" +
	"\xc9\xa0\xdfF\xc3\xa9D#\x0b\x95/+\xb3Q\xe2\xb0" +
	"h\xd5\x1c8\x98N\xe6\xd9\xae\xaa\xed\xb3d\xa9\x09\x89" +
	"K\xd0\xd7G)2\xde\xc7&\xfd,\xef@n ]" +
	"I~\xbdH\xf8Z\x8d\xc4?d\xd9\xdfS\x08\x0d\xc2" +
	"\x9a\x0d\x8f\xb1\x12\x95QM|\xb4\x91W8\xc5xr" +
	"\xcd\xe0\xb7\x03\xbf\xf0\x12wTnbF5Z-\x0d" +
	"R\x91.\xf2\xb2\xb0u\xf3\x83\x88\xedUdB\xd2\xdd" +
	"\xac\xe5^e\xd7\xc7\xe5\xc8\xff;\xd9\x84\x0d?\x9bQ" +
	"\xb1\x03{\x8a\x8dLZ\x95\xa6\xf3\x98[\x1c\x85\x97\xb8" +
	"\x11\x9d\x15\xf8q}\x16j\x17\x0fX>7h\xd7\xe2" +
	"pa0;I-\x9f\x8fh\x81\x84\xe3\xed\xc6\x8b\xa4" +
	"\xfc*7Og\xcb^EW.\xf3E\xda\x9cz~" +
	"\x0d;}\xb4wv\x9d]\x89W\x8b\xd8\x95\x08\x1eM" +
	"\xc5\xe8\xf7\xfc\x11\x1fM\xc8\x90\xae\xa3\xc5\xe5\xc3\x7f\xfa" +
	"\xcd\xc2\x1b\xd6\xfd\xe9\x972\xaa\xd6\x0f\x19e\x05\x0fw" +
	"Bp\x10-^\xfe \xda\xef\xf9h;`\xba\x13\xb3" +
	"\xcff\x96\xef\xd4\xf2l\x9c\x8a\xfc\xad,T\xae\xe6\x8a" +
	"\xa2\xe3\x08\x13s\xba\\gr\x04\xdfR\x1fI\xb2\xa9" +
	"m\x9b\xf5\xa6\xaffp\xc9\x9an\x06\xefF\xf1\xdb^" +
	"\x9f\x98^yn\x0e]C\x8eCze\x96\xac \xc3" +
	"\xe4\xb6be\x98\xeb8\xbfBk\x06\x97\xb9\x8e\x8b\x9d" +
	"\x84\xe4\xce\x994\xf7\x89\x96\xeb\xf8\x186\x1a\x17L\x9a" +
	"\xfb\xa3\x96\xfd\xf9\xfd\x1a\xd56\x1ef\x7f>\x85\x99\x9f" +
	"\xc0KO\x0f\xcb)\xddDH\xee\x8f\x10\x13\xe8Qy" +
	"+\xe6\x13\x94\x8a\x8c\x8c\xcaS\x18\x95+U\x18\x19\x95" +
	"/\xc3\xdd@\xa8\xa5\x10\xf7\x95\xd5O\xc6\xb7\x8a*\xe3" +
	"\x92\xc5\x7f\x85\x09\xb3d\xd0\xef\x85\x92\xa2Y\xf8\x87\x9a" +
	"\xba\x97\xffs\x9dF\xbbt\x1d;\x18\xf7(f\x1d\xc7" +
	"}+S\xa8\xe3k\xf2qC\x8e\xe3pg7\xd1\x84" +
	"\x0a;\x0b\x9e[`TV\x83\x9a\xa4}\xe2\x973\x83" +
	"\x9b\xb2\x0bl\xad\x1a\xe8\x09V\xe6Y\xa5\xea\x04\xb42" +
	"[\xf6\xbd4Q\xd2\xb2\xef-\xbb\xfbk/\xad\x99\xf8" +
	"\xd9\x95e\xdf\xeb\xe51\x06,?\x89\xceF\x94\xe6\x96" +
	"H\x0d\x8c\xd4S>!\xb9\xefr\x82\"w~\xa34" +
	"u\x10\xc0\x03&\xcd='\xd5/\x08I=\xf3(!" +
	"\xb9\xe7L\x9a;\"\xa5/\x08I\xbd\xfc#M\xd8\xa0" +
	"\xb5\x0d%\xf7\"\xc2\x06\x84p\xb5\x82Sp\xd7\x9c4" +
	"i\xee\x0d\xe3\xff^Z\xa2\xdeuI\xf3bmM\x9a" +
	"\x84\xee\x15\x13h\x9b2T\xb9\"\xe3\x18U=\x1a#" +
	"d>\x8c\xa5\xcefY\xc8/\xaa\xbd~\xbc\xacb\x8c" +
	"L\xd9\xf2\xb5\xe7\x01\xff\xb5\xee\xcf\xd3J\x11\x9e,(" +
	"\xe6\xc2/T\xcb\x1fw6\xb3Q\xeaTIe\x9e\xe7" +
	"\xa74\xb5o\x8d\xb2\xef\xe2y~JS\x8f\xe4\xeb}" +
	"\x94(M=\xf1\xa8\xca*gp\x95\xa6\xc9\x99\xdb\x8c" +
	"\xdfn\xb9\xe9\xae\xee\x97\x84&P\xb4^\x91\xac\xbav" +
	"@\x933\x7f\xc5\xbep\xf1\xae[\xffu\xbft\x8a+" +
	"T\x83\xad\xfe\x166N(\x8c\xfeC\xcf\x93?|\xe8" +
	"\x7f\xfa\xde\x97\xa3l\xba\xec\xf9\xc1\x08\xa3\xbe\xe4e\x92" +
	"\xc8\xcds\x19g\xe7\x86${\xa6\xc0kc\x94\xce\x14" +
	"~\xb9\xea\xcc\xb6\x1f\xfc\xe1\xc3+\xac\x98\x85\x87\xcd\xdb" +
	"\x02n\xd4\x96\x82\xacu\xdc\x8b\x81p\xbf\xfa\x01\xb2;" +
	"\xcf\xc2\xa2yIO\xc5\\D\xd6dHv\xa4B\xaf" +
	"\xe6c\xcc\xfd\xaa\xdc\xac\x94\xca\xa4\x98Tm1L:" +
	"\xdafhR\x99\x0bQ\x9aX\xe5f\xa5T\xe62\xc4" +
	"\x95\xad\xae\x94\xca\xbc\xdd\x80m\xf2m\x80\xdfah\xfb" +
	"\xd5\xf5x~E\x81K\x88\x1e\xb7\x1e\xa4r)[\xdd" +
	"\x051\xee{>d\xc0:\xa1q\xdd\xae2\xf9\x86\xb5" +
	"\x9e\xebvu\x0b\xdf\xb0\xda\xa8\xd1\xac\xb8n\xd7\xc4y" +
	"*\xa6\x8aY\xe1\xe9\xd0\x87wa\x82oX\xbf\x8e\x1f" +
	"@q\xda\x16Q\xce-{\x02\x19\x1c\x8a\x82\x92\xa4\\" +
	"+\xf3)\xc4\xbf\x0b\xf8!\xe4\x96\x19|\xc3z\x10\xb9" +
	"b\x8a\xeb\x96\x12Mn\xcf\x18\x1f\xe9\x1a\xd0\x10\x8d\xfa" +
	"A\x1f\xea,5r\x9a\xf72\xb7\xd8\xd7\x9c\xed\xec\x8a" +
	"~j*+\xcc\xe6VW\xb1\x82\x84\xbb\xe28\xb5\x0b" +
	"v\x003\xb20E\x9f\xc1J\xcc\x9f@\x82E\xbf\xe3" +
	"yE\xdc3\xb8\x81\xef9f\xf3Y2\xf3\xd9l\x16" +
	"\x86\x8c\xf7\xd8\x0e\x89;:\\\xad0|\xa3Px\xa5" +
	"h\x8c\xfe0\x9c\xb1\xaa\x81\x078\x9d\xd0+\x18\xb4m" +
	"\xe6;\x93w\xb6\xef\xb9\xf8\xf8\xc3\xf2\xc3V+lx" +
	"\xc8v\x87\xcc\x88\xd9[\xc5v'\x86X0\xe9\x15U" +
	"=\xdd\x1d\xb2\xb1\xf3\xd5\xc0\xd6\x09?\xdc\x13\x91&i" +
	"dW\xa4\x80\xa9\xac\xa0ddG\xc0\x92\xe7_\xde\xf8" +
	"\x93\xa9\xeao\xb4\xbf\x8f\x01&\x95\x11\xa6Y\xac4~" +
	"NC+\x1f\x8f\xf9\xf6\xc4\x84\xde\xf1\xd5\xccq\xa35" +
	"\xdeN\xe6\xc7+\x86\x9bd\xe4\xbeA\x92Dr\x8bL" +
	"u\x7f\xb9\xea\xd8\x96\xdbg\x19\xb5\xf0\xcd\xcd\xbf\x9a\x0c" +
	"~7r\xde\xff\x06\x00\x00\xff\xff\x0a\xee\xa9\x1f"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_93337c65a295d42f,
		Nodes: []uint64{
			0x80d5a7b782142e87,
			0x811d54ac7debc21e,
			0x81b8ffeeb01d76f7,
			0x8460dac6abff7ed9,
			0x846f567433b186d1,
			0x8491dc2c2f94f1d1,
			0x8890f17a143c6896,
			0x8ac5cfb21988c168,
			0x8b008567c93f7c7d,
			0x8feb941d70f2a468,
			0x94d32947f136655e,
			0x95cdc661a6600137,
			0x98e203c76f83d365,
			0x990bdcf2be83b604,
			0x9b169bc96bb3d24b,
			0xa1f99f32eea02590,
			0xa363d226e178debd,
			0xa4da01d10b3b6acd,
			0xa74f5574681f9d55,
			0xa968a46ccde8b1b4,
			0xa9a9bc941e963701,
			0xaa49811a4e3e2c59,
			0xab56969492d293b3,
			0xaec9e089e87f1599,
			0xaf49ab9bbe76e375,
			0xb1760f65e652e737,
			0xb2bf3a5557791bc1,
			0xb33447204cdf022c,
			0xb3e73f8c19afd787,
			0xb42137d4b8ba3ef6,
			0xb492838c7fed50b0,
			0xb4f16ea3144d85a6,
			0xb599bbd2f1465f9c,
			0xb78a89c58fad885d,
			0xb87956e2953771db,
			0xb91010c363e568a4,
			0xba0c11cf818d29fd,
			0xbd3e199eb9b03758,
			0xbeb6ab7b0e6b585e,
			0xbfda1920aff38c07,
			0xc0ff4a277ca4be0a,
			0xc1092d6c4c110e29,
			0xc281c6e5be483337,
			0xc5cb65e585742338,
			0xc5f724bd00c2f628,
			0xc6880d1c13ec14dc,
			0xc75b5ef2e9b05c2d,
			0xc7c14e92e0cd461c,
			0xc8479e0f1798b1fc,
			0xc8aeb5222ac5ef40,
			0xcb20e21466098705,
			0xcd05962719bf7ec8,
			0xcdff1b0306ea58cf,
			0xce5b0091fd9acb21,
			0xcf0f425c8bd69fa2,
			0xcf672ab379467704,
			0xd0290daf8de9f2b0,
			0xd11f8d1479e2f010,
			0xd1bfc1c9617d9453,
			0xd1edcf54f4edf638,
			0xd2d587c796186e8b,
			0xd594e64f6b5f461d,
			0xd599d06dc405571a,
			0xd8af9210839bc071,
			0xd90939a58e404ff8,
			0xd9ed2c1c754d683e,
			0xdb4674cbf3154bfa,
			0xdbfe301c0ddefe4e,
			0xdd1e0c7c94dc4211,
			0xde7576c640b5ad18,
			0xe3512e62df901c18,
			0xe444f780b29541a7,
			0xe4d6d0d9ae1553da,
			0xe4eb0a9bb0e5bb53,
			0xe5484dc513ee11e0,
			0xe68d439455fd9cce,
			0xe82d760b257daddb,
			0xea9236083718fdc2,
			0xeafaab57e025db63,
			0xee0b04cc3f52f33c,
			0xef3e4198d3e35596,
			0xf03d8fd1bbe75519,
			0xf0c41d021228d929,
			0xf206f12e39ab7f9b,
			0xf246442c7aee0af5,
			0xf32d7a3fdc567bdb,
			0xf805d22fabb80702,
			0xf95db11410e33efc,
			0xfae5dcfccbb93a23,
			0xfc682227304e2281,
			0xffac0fa5c7156a5d,
		},
		Compressed: true,
	})
}
