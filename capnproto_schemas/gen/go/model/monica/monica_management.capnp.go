// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	common_date "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common_date"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	math "math"
	strconv "strconv"
)

type ILRDates capnp.Struct

// ILRDates_TypeID is the unique identifier for the type ILRDates.
const ILRDates_TypeID = 0xa1f99f32eea02590

func NewILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func NewRootILRDates(s *capnp.Segment) (ILRDates, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return ILRDates(st), err
}

func ReadRootILRDates(msg *capnp.Message) (ILRDates, error) {
	root, err := msg.Root()
	return ILRDates(root.Struct()), err
}

func (s ILRDates) String() string {
	str, _ := text.Marshal(0xa1f99f32eea02590, capnp.Struct(s))
	return str
}

func (s ILRDates) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ILRDates) DecodeFromPtr(p capnp.Ptr) ILRDates {
	return ILRDates(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ILRDates) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ILRDates) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ILRDates) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ILRDates) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ILRDates) Sowing() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasSowing() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ILRDates) SetSowing(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewSowing() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) EarliestSowing() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasEarliestSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ILRDates) SetEarliestSowing(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliestSowing sets the earliestSowing field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewEarliestSowing() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestSowing() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasLatestSowing() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ILRDates) SetLatestSowing(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatestSowing sets the latestSowing field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestSowing() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) Harvest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ILRDates) SetHarvest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewHarvest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ILRDates) LatestHarvest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return common_date.Date(p.Struct()), err
}

func (s ILRDates) HasLatestHarvest() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ILRDates) SetLatestHarvest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewLatestHarvest sets the latestHarvest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s ILRDates) NewLatestHarvest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ILRDates_List is a list of ILRDates.
type ILRDates_List = capnp.StructList[ILRDates]

// NewILRDates creates a new list of ILRDates.
func NewILRDates_List(s *capnp.Segment, sz int32) (ILRDates_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[ILRDates](l), err
}

// ILRDates_Future is a wrapper for a ILRDates promised by a client call.
type ILRDates_Future struct{ *capnp.Future }

func (f ILRDates_Future) Struct() (ILRDates, error) {
	p, err := f.Future.Ptr()
	return ILRDates(p.Struct()), err
}
func (p ILRDates_Future) Sowing() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(0, nil)}
}
func (p ILRDates_Future) EarliestSowing() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p ILRDates_Future) LatestSowing() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p ILRDates_Future) Harvest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(3, nil)}
}
func (p ILRDates_Future) LatestHarvest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(4, nil)}
}

type EventType uint16

// EventType_TypeID is the unique identifier for the type EventType.
const EventType_TypeID = 0xd0290daf8de9f2b0

// Values of EventType.
const (
	EventType_sowing               EventType = 0
	EventType_automaticSowing      EventType = 1
	EventType_harvest              EventType = 2
	EventType_automaticHarvest     EventType = 3
	EventType_irrigation           EventType = 4
	EventType_tillage              EventType = 5
	EventType_organicFertilization EventType = 6
	EventType_mineralFertilization EventType = 7
	EventType_nDemandFertilization EventType = 8
	EventType_cutting              EventType = 9
	EventType_setValue             EventType = 10
	EventType_saveState            EventType = 11
)

// String returns the enum's constant name.
func (c EventType) String() string {
	switch c {
	case EventType_sowing:
		return "sowing"
	case EventType_automaticSowing:
		return "automaticSowing"
	case EventType_harvest:
		return "harvest"
	case EventType_automaticHarvest:
		return "automaticHarvest"
	case EventType_irrigation:
		return "irrigation"
	case EventType_tillage:
		return "tillage"
	case EventType_organicFertilization:
		return "organicFertilization"
	case EventType_mineralFertilization:
		return "mineralFertilization"
	case EventType_nDemandFertilization:
		return "nDemandFertilization"
	case EventType_cutting:
		return "cutting"
	case EventType_setValue:
		return "setValue"
	case EventType_saveState:
		return "saveState"

	default:
		return ""
	}
}

// EventTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func EventTypeFromString(c string) EventType {
	switch c {
	case "sowing":
		return EventType_sowing
	case "automaticSowing":
		return EventType_automaticSowing
	case "harvest":
		return EventType_harvest
	case "automaticHarvest":
		return EventType_automaticHarvest
	case "irrigation":
		return EventType_irrigation
	case "tillage":
		return EventType_tillage
	case "organicFertilization":
		return EventType_organicFertilization
	case "mineralFertilization":
		return EventType_mineralFertilization
	case "nDemandFertilization":
		return EventType_nDemandFertilization
	case "cutting":
		return EventType_cutting
	case "setValue":
		return EventType_setValue
	case "saveState":
		return EventType_saveState

	default:
		return 0
	}
}

type EventType_List = capnp.EnumList[EventType]

func NewEventType_List(s *capnp.Segment, sz int32) (EventType_List, error) {
	return capnp.NewEnumList[EventType](s, sz)
}

type PlantOrgan uint16

// PlantOrgan_TypeID is the unique identifier for the type PlantOrgan.
const PlantOrgan_TypeID = 0xb33447204cdf022c

// Values of PlantOrgan.
const (
	PlantOrgan_root   PlantOrgan = 0
	PlantOrgan_leaf   PlantOrgan = 1
	PlantOrgan_shoot  PlantOrgan = 2
	PlantOrgan_fruit  PlantOrgan = 3
	PlantOrgan_strukt PlantOrgan = 4
	PlantOrgan_sugar  PlantOrgan = 5
)

// String returns the enum's constant name.
func (c PlantOrgan) String() string {
	switch c {
	case PlantOrgan_root:
		return "root"
	case PlantOrgan_leaf:
		return "leaf"
	case PlantOrgan_shoot:
		return "shoot"
	case PlantOrgan_fruit:
		return "fruit"
	case PlantOrgan_strukt:
		return "strukt"
	case PlantOrgan_sugar:
		return "sugar"

	default:
		return ""
	}
}

// PlantOrganFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PlantOrganFromString(c string) PlantOrgan {
	switch c {
	case "root":
		return PlantOrgan_root
	case "leaf":
		return PlantOrgan_leaf
	case "shoot":
		return PlantOrgan_shoot
	case "fruit":
		return PlantOrgan_fruit
	case "strukt":
		return PlantOrgan_strukt
	case "sugar":
		return PlantOrgan_sugar

	default:
		return 0
	}
}

type PlantOrgan_List = capnp.EnumList[PlantOrgan]

func NewPlantOrgan_List(s *capnp.Segment, sz int32) (PlantOrgan_List, error) {
	return capnp.NewEnumList[PlantOrgan](s, sz)
}

type Event capnp.Struct
type Event_at Event
type Event_between Event
type Event_after Event
type Event_Which uint16

const (
	Event_Which_at      Event_Which = 0
	Event_Which_between Event_Which = 1
	Event_Which_after   Event_Which = 2
)

func (w Event_Which) String() string {
	const s = "atbetweenafter"
	switch w {
	case Event_Which_at:
		return s[0:2]
	case Event_Which_between:
		return s[2:9]
	case Event_Which_after:
		return s[9:14]

	}
	return "Event_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_TypeID is the unique identifier for the type Event.
const Event_TypeID = 0xcf672ab379467704

func NewEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func NewRootEvent(s *capnp.Segment) (Event, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Event(st), err
}

func ReadRootEvent(msg *capnp.Message) (Event, error) {
	root, err := msg.Root()
	return Event(root.Struct()), err
}

func (s Event) String() string {
	str, _ := text.Marshal(0xcf672ab379467704, capnp.Struct(s))
	return str
}

func (s Event) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event) DecodeFromPtr(p capnp.Ptr) Event {
	return Event(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event) Which() Event_Which {
	return Event_Which(capnp.Struct(s).Uint16(2))
}
func (s Event) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event) Type() Event_ExternalType {
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event) SetType(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Event) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Event) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Event) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) At() Event_at { return Event_at(s) }

func (s Event) SetAt() {
	capnp.Struct(s).SetUint16(2, 0)
}

func (s Event_at) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_at) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_at) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_at) Date() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s Event_at) HasDate() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_at) SetDate(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewDate sets the date field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_at) NewDate() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) Between() Event_between { return Event_between(s) }

func (s Event) SetBetween() {
	capnp.Struct(s).SetUint16(2, 1)
}

func (s Event_between) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_between) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_between) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_between) Earliest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return common_date.Date(p.Struct()), err
}

func (s Event_between) HasEarliest() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_between) SetEarliest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEarliest sets the earliest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_between) NewEarliest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_between) Latest() (common_date.Date, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return common_date.Date(p.Struct()), err
}

func (s Event_between) HasLatest() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Event_between) SetLatest(v common_date.Date) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewLatest sets the latest field to a newly
// allocated common_date.Date struct, preferring placement in s's segment.
func (s Event_between) NewLatest() (common_date.Date, error) {
	ss, err := common_date.NewDate(capnp.Struct(s).Segment())
	if err != nil {
		return common_date.Date{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event) After() Event_after { return Event_after(s) }

func (s Event) SetAfter() {
	capnp.Struct(s).SetUint16(2, 2)
}

func (s Event_after) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_after) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_after) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_after) Event() (Event_Type, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Event_Type(p.Struct()), err
}

func (s Event_after) HasEvent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Event_after) SetEvent(v Event_Type) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewEvent sets the event field to a newly
// allocated Event_Type struct, preferring placement in s's segment.
func (s Event_after) NewEvent() (Event_Type, error) {
	ss, err := NewEvent_Type(capnp.Struct(s).Segment())
	if err != nil {
		return Event_Type{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Event_after) Days() uint16 {
	return capnp.Struct(s).Uint16(4)
}

func (s Event_after) SetDays(v uint16) {
	capnp.Struct(s).SetUint16(4, v)
}

func (s Event) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(3)
}

func (s Event) HasParams() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Event) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(3, v)
}
func (s Event) RunAtStartOfDay() bool {
	return capnp.Struct(s).Bit(48)
}

func (s Event) SetRunAtStartOfDay(v bool) {
	capnp.Struct(s).SetBit(48, v)
}

// Event_List is a list of Event.
type Event_List = capnp.StructList[Event]

// NewEvent creates a new list of Event.
func NewEvent_List(s *capnp.Segment, sz int32) (Event_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Event](l), err
}

// Event_Future is a wrapper for a Event promised by a client call.
type Event_Future struct{ *capnp.Future }

func (f Event_Future) Struct() (Event, error) {
	p, err := f.Future.Ptr()
	return Event(p.Struct()), err
}
func (p Event_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}
func (p Event_Future) At() Event_at_Future { return Event_at_Future{p.Future} }

// Event_at_Future is a wrapper for a Event_at promised by a client call.
type Event_at_Future struct{ *capnp.Future }

func (f Event_at_Future) Struct() (Event_at, error) {
	p, err := f.Future.Ptr()
	return Event_at(p.Struct()), err
}
func (p Event_at_Future) Date() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Between() Event_between_Future { return Event_between_Future{p.Future} }

// Event_between_Future is a wrapper for a Event_between promised by a client call.
type Event_between_Future struct{ *capnp.Future }

func (f Event_between_Future) Struct() (Event_between, error) {
	p, err := f.Future.Ptr()
	return Event_between(p.Struct()), err
}
func (p Event_between_Future) Earliest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_between_Future) Latest() common_date.Date_Future {
	return common_date.Date_Future{Future: p.Future.Field(2, nil)}
}
func (p Event_Future) After() Event_after_Future { return Event_after_Future{p.Future} }

// Event_after_Future is a wrapper for a Event_after promised by a client call.
type Event_after_Future struct{ *capnp.Future }

func (f Event_after_Future) Struct() (Event_after, error) {
	p, err := f.Future.Ptr()
	return Event_after(p.Struct()), err
}
func (p Event_after_Future) Event() Event_Type_Future {
	return Event_Type_Future{Future: p.Future.Field(1, nil)}
}
func (p Event_Future) Params() *capnp.Future {
	return p.Future.Field(3, nil)
}

type Event_ExternalType uint16

// Event_ExternalType_TypeID is the unique identifier for the type Event_ExternalType.
const Event_ExternalType_TypeID = 0xe5484dc513ee11e0

// Values of Event_ExternalType.
const (
	Event_ExternalType_sowing               Event_ExternalType = 0
	Event_ExternalType_automaticSowing      Event_ExternalType = 1
	Event_ExternalType_harvest              Event_ExternalType = 2
	Event_ExternalType_automaticHarvest     Event_ExternalType = 3
	Event_ExternalType_irrigation           Event_ExternalType = 4
	Event_ExternalType_tillage              Event_ExternalType = 5
	Event_ExternalType_organicFertilization Event_ExternalType = 6
	Event_ExternalType_mineralFertilization Event_ExternalType = 7
	Event_ExternalType_nDemandFertilization Event_ExternalType = 8
	Event_ExternalType_cutting              Event_ExternalType = 9
)

// String returns the enum's constant name.
func (c Event_ExternalType) String() string {
	switch c {
	case Event_ExternalType_sowing:
		return "sowing"
	case Event_ExternalType_automaticSowing:
		return "automaticSowing"
	case Event_ExternalType_harvest:
		return "harvest"
	case Event_ExternalType_automaticHarvest:
		return "automaticHarvest"
	case Event_ExternalType_irrigation:
		return "irrigation"
	case Event_ExternalType_tillage:
		return "tillage"
	case Event_ExternalType_organicFertilization:
		return "organicFertilization"
	case Event_ExternalType_mineralFertilization:
		return "mineralFertilization"
	case Event_ExternalType_nDemandFertilization:
		return "nDemandFertilization"
	case Event_ExternalType_cutting:
		return "cutting"

	default:
		return ""
	}
}

// Event_ExternalTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_ExternalTypeFromString(c string) Event_ExternalType {
	switch c {
	case "sowing":
		return Event_ExternalType_sowing
	case "automaticSowing":
		return Event_ExternalType_automaticSowing
	case "harvest":
		return Event_ExternalType_harvest
	case "automaticHarvest":
		return Event_ExternalType_automaticHarvest
	case "irrigation":
		return Event_ExternalType_irrigation
	case "tillage":
		return Event_ExternalType_tillage
	case "organicFertilization":
		return Event_ExternalType_organicFertilization
	case "mineralFertilization":
		return Event_ExternalType_mineralFertilization
	case "nDemandFertilization":
		return Event_ExternalType_nDemandFertilization
	case "cutting":
		return Event_ExternalType_cutting

	default:
		return 0
	}
}

type Event_ExternalType_List = capnp.EnumList[Event_ExternalType]

func NewEvent_ExternalType_List(s *capnp.Segment, sz int32) (Event_ExternalType_List, error) {
	return capnp.NewEnumList[Event_ExternalType](s, sz)
}

type Event_PhenoStage uint16

// Event_PhenoStage_TypeID is the unique identifier for the type Event_PhenoStage.
const Event_PhenoStage_TypeID = 0xb2bf3a5557791bc1

// Values of Event_PhenoStage.
const (
	Event_PhenoStage_emergence Event_PhenoStage = 0
	Event_PhenoStage_flowering Event_PhenoStage = 1
	Event_PhenoStage_anthesis  Event_PhenoStage = 2
	Event_PhenoStage_maturity  Event_PhenoStage = 3
)

// String returns the enum's constant name.
func (c Event_PhenoStage) String() string {
	switch c {
	case Event_PhenoStage_emergence:
		return "emergence"
	case Event_PhenoStage_flowering:
		return "flowering"
	case Event_PhenoStage_anthesis:
		return "anthesis"
	case Event_PhenoStage_maturity:
		return "maturity"

	default:
		return ""
	}
}

// Event_PhenoStageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Event_PhenoStageFromString(c string) Event_PhenoStage {
	switch c {
	case "emergence":
		return Event_PhenoStage_emergence
	case "flowering":
		return Event_PhenoStage_flowering
	case "anthesis":
		return Event_PhenoStage_anthesis
	case "maturity":
		return Event_PhenoStage_maturity

	default:
		return 0
	}
}

type Event_PhenoStage_List = capnp.EnumList[Event_PhenoStage]

func NewEvent_PhenoStage_List(s *capnp.Segment, sz int32) (Event_PhenoStage_List, error) {
	return capnp.NewEnumList[Event_PhenoStage](s, sz)
}

type Event_Type capnp.Struct
type Event_Type_Which uint16

const (
	Event_Type_Which_external Event_Type_Which = 0
	Event_Type_Which_internal Event_Type_Which = 1
)

func (w Event_Type_Which) String() string {
	const s = "externalinternal"
	switch w {
	case Event_Type_Which_external:
		return s[0:8]
	case Event_Type_Which_internal:
		return s[8:16]

	}
	return "Event_Type_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Event_Type_TypeID is the unique identifier for the type Event_Type.
const Event_Type_TypeID = 0xb91010c363e568a4

func NewEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func NewRootEvent_Type(s *capnp.Segment) (Event_Type, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Event_Type(st), err
}

func ReadRootEvent_Type(msg *capnp.Message) (Event_Type, error) {
	root, err := msg.Root()
	return Event_Type(root.Struct()), err
}

func (s Event_Type) String() string {
	str, _ := text.Marshal(0xb91010c363e568a4, capnp.Struct(s))
	return str
}

func (s Event_Type) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Event_Type) DecodeFromPtr(p capnp.Ptr) Event_Type {
	return Event_Type(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Event_Type) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Event_Type) Which() Event_Type_Which {
	return Event_Type_Which(capnp.Struct(s).Uint16(2))
}
func (s Event_Type) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Event_Type) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Event_Type) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Event_Type) External() Event_ExternalType {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != external")
	}
	return Event_ExternalType(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetExternal(v Event_ExternalType) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Event_Type) Internal() Event_PhenoStage {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != internal")
	}
	return Event_PhenoStage(capnp.Struct(s).Uint16(0))
}

func (s Event_Type) SetInternal(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Event_Type_List is a list of Event_Type.
type Event_Type_List = capnp.StructList[Event_Type]

// NewEvent_Type creates a new list of Event_Type.
func NewEvent_Type_List(s *capnp.Segment, sz int32) (Event_Type_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Event_Type](l), err
}

// Event_Type_Future is a wrapper for a Event_Type promised by a client call.
type Event_Type_Future struct{ *capnp.Future }

func (f Event_Type_Future) Struct() (Event_Type, error) {
	p, err := f.Future.Ptr()
	return Event_Type(p.Struct()), err
}

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0xcb20e21466098705

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0xcb20e21466098705, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Params_Sowing capnp.Struct

// Params_Sowing_TypeID is the unique identifier for the type Params_Sowing.
const Params_Sowing_TypeID = 0xc6880d1c13ec14dc

func NewParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func NewRootParams_Sowing(s *capnp.Segment) (Params_Sowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Params_Sowing(st), err
}

func ReadRootParams_Sowing(msg *capnp.Message) (Params_Sowing, error) {
	root, err := msg.Root()
	return Params_Sowing(root.Struct()), err
}

func (s Params_Sowing) String() string {
	str, _ := text.Marshal(0xc6880d1c13ec14dc, capnp.Struct(s))
	return str
}

func (s Params_Sowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Sowing) DecodeFromPtr(p capnp.Ptr) Params_Sowing {
	return Params_Sowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Sowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Sowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Sowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Sowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Sowing) Cultivar() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_Sowing) HasCultivar() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Sowing) CultivarBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_Sowing) SetCultivar(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_Sowing) PlantDensity() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s Params_Sowing) SetPlantDensity(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s Params_Sowing) Crop() crop.Crop {
	p, _ := capnp.Struct(s).Ptr(1)
	return crop.Crop(p.Interface().Client())
}

func (s Params_Sowing) HasCrop() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_Sowing) SetCrop(v crop.Crop) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Params_Sowing_List is a list of Params_Sowing.
type Params_Sowing_List = capnp.StructList[Params_Sowing]

// NewParams_Sowing creates a new list of Params_Sowing.
func NewParams_Sowing_List(s *capnp.Segment, sz int32) (Params_Sowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Params_Sowing](l), err
}

// Params_Sowing_Future is a wrapper for a Params_Sowing promised by a client call.
type Params_Sowing_Future struct{ *capnp.Future }

func (f Params_Sowing_Future) Struct() (Params_Sowing, error) {
	p, err := f.Future.Ptr()
	return Params_Sowing(p.Struct()), err
}
func (p Params_Sowing_Future) Crop() crop.Crop {
	return crop.Crop(p.Future.Field(1, nil).Client())
}

type Params_AutomaticSowing capnp.Struct

// Params_AutomaticSowing_TypeID is the unique identifier for the type Params_AutomaticSowing.
const Params_AutomaticSowing_TypeID = 0xd1bfc1c9617d9453

func NewParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func NewRootParams_AutomaticSowing(s *capnp.Segment) (Params_AutomaticSowing, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2})
	return Params_AutomaticSowing(st), err
}

func ReadRootParams_AutomaticSowing(msg *capnp.Message) (Params_AutomaticSowing, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing(root.Struct()), err
}

func (s Params_AutomaticSowing) String() string {
	str, _ := text.Marshal(0xd1bfc1c9617d9453, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing {
	return Params_AutomaticSowing(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing) Sowing() (Params_Sowing, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Params_Sowing(p.Struct()), err
}

func (s Params_AutomaticSowing) HasSowing() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_AutomaticSowing) SetSowing(v Params_Sowing) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSowing sets the sowing field to a newly
// allocated Params_Sowing struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewSowing() (Params_Sowing, error) {
	ss, err := NewParams_Sowing(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Sowing{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticSowing) MinTempThreshold() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticSowing) SetMinTempThreshold(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticSowing) DaysInTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing) SetDaysInTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24) ^ 0x4059000000000000)
}

func (s Params_AutomaticSowing) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticSowing) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_AutomaticSowing) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_AutomaticSowing) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_AutomaticSowing) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_AutomaticSowing) TempSumAboveBaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_AutomaticSowing) SetTempSumAboveBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_AutomaticSowing) BaseTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_AutomaticSowing) SetBaseTemp(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_AutomaticSowing) AvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

func (s Params_AutomaticSowing) HasAvgSoilTemp() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticSowing) SetAvgSoilTemp(v Params_AutomaticSowing_AvgSoilTemp) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewAvgSoilTemp sets the avgSoilTemp field to a newly
// allocated Params_AutomaticSowing_AvgSoilTemp struct, preferring placement in s's segment.
func (s Params_AutomaticSowing) NewAvgSoilTemp() (Params_AutomaticSowing_AvgSoilTemp, error) {
	ss, err := NewParams_AutomaticSowing_AvgSoilTemp(capnp.Struct(s).Segment())
	if err != nil {
		return Params_AutomaticSowing_AvgSoilTemp{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_AutomaticSowing_List is a list of Params_AutomaticSowing.
type Params_AutomaticSowing_List = capnp.StructList[Params_AutomaticSowing]

// NewParams_AutomaticSowing creates a new list of Params_AutomaticSowing.
func NewParams_AutomaticSowing_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 64, PointerCount: 2}, sz)
	return capnp.StructList[Params_AutomaticSowing](l), err
}

// Params_AutomaticSowing_Future is a wrapper for a Params_AutomaticSowing promised by a client call.
type Params_AutomaticSowing_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_Future) Struct() (Params_AutomaticSowing, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing(p.Struct()), err
}
func (p Params_AutomaticSowing_Future) Sowing() Params_Sowing_Future {
	return Params_Sowing_Future{Future: p.Future.Field(1, nil)}
}
func (p Params_AutomaticSowing_Future) AvgSoilTemp() Params_AutomaticSowing_AvgSoilTemp_Future {
	return Params_AutomaticSowing_AvgSoilTemp_Future{Future: p.Future.Field(0, nil)}
}

type Params_AutomaticSowing_AvgSoilTemp capnp.Struct

// Params_AutomaticSowing_AvgSoilTemp_TypeID is the unique identifier for the type Params_AutomaticSowing_AvgSoilTemp.
const Params_AutomaticSowing_AvgSoilTemp_TypeID = 0x846f567433b186d1

func NewParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func NewRootParams_AutomaticSowing_AvgSoilTemp(s *capnp.Segment) (Params_AutomaticSowing_AvgSoilTemp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_AutomaticSowing_AvgSoilTemp(st), err
}

func ReadRootParams_AutomaticSowing_AvgSoilTemp(msg *capnp.Message) (Params_AutomaticSowing_AvgSoilTemp, error) {
	root, err := msg.Root()
	return Params_AutomaticSowing_AvgSoilTemp(root.Struct()), err
}

func (s Params_AutomaticSowing_AvgSoilTemp) String() string {
	str, _ := text.Marshal(0x846f567433b186d1, capnp.Struct(s))
	return str
}

func (s Params_AutomaticSowing_AvgSoilTemp) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticSowing_AvgSoilTemp) DecodeFromPtr(p capnp.Ptr) Params_AutomaticSowing_AvgSoilTemp {
	return Params_AutomaticSowing_AvgSoilTemp(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticSowing_AvgSoilTemp) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticSowing_AvgSoilTemp) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticSowing_AvgSoilTemp) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticSowing_AvgSoilTemp) SoilDepthForAveraging() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSoilDepthForAveraging(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

func (s Params_AutomaticSowing_AvgSoilTemp) DaysInSoilTempWindow() uint16 {
	return capnp.Struct(s).Uint16(8)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetDaysInSoilTempWindow(v uint16) {
	capnp.Struct(s).SetUint16(8, v)
}

func (s Params_AutomaticSowing_AvgSoilTemp) SowingIfAboveAvgSoilTemp() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticSowing_AvgSoilTemp) SetSowingIfAboveAvgSoilTemp(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_AutomaticSowing_AvgSoilTemp_List is a list of Params_AutomaticSowing_AvgSoilTemp.
type Params_AutomaticSowing_AvgSoilTemp_List = capnp.StructList[Params_AutomaticSowing_AvgSoilTemp]

// NewParams_AutomaticSowing_AvgSoilTemp creates a new list of Params_AutomaticSowing_AvgSoilTemp.
func NewParams_AutomaticSowing_AvgSoilTemp_List(s *capnp.Segment, sz int32) (Params_AutomaticSowing_AvgSoilTemp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_AutomaticSowing_AvgSoilTemp](l), err
}

// Params_AutomaticSowing_AvgSoilTemp_Future is a wrapper for a Params_AutomaticSowing_AvgSoilTemp promised by a client call.
type Params_AutomaticSowing_AvgSoilTemp_Future struct{ *capnp.Future }

func (f Params_AutomaticSowing_AvgSoilTemp_Future) Struct() (Params_AutomaticSowing_AvgSoilTemp, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticSowing_AvgSoilTemp(p.Struct()), err
}

type Params_Harvest capnp.Struct

// Params_Harvest_TypeID is the unique identifier for the type Params_Harvest.
const Params_Harvest_TypeID = 0x8feb941d70f2a468

func NewParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func NewRootParams_Harvest(s *capnp.Segment) (Params_Harvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Harvest(st), err
}

func ReadRootParams_Harvest(msg *capnp.Message) (Params_Harvest, error) {
	root, err := msg.Root()
	return Params_Harvest(root.Struct()), err
}

func (s Params_Harvest) String() string {
	str, _ := text.Marshal(0x8feb941d70f2a468, capnp.Struct(s))
	return str
}

func (s Params_Harvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest) DecodeFromPtr(p capnp.Ptr) Params_Harvest {
	return Params_Harvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest) Exported() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Params_Harvest) SetExported(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s Params_Harvest) OptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

func (s Params_Harvest) HasOptCarbMgmtData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Harvest) SetOptCarbMgmtData(v Params_Harvest_OptCarbonMgmtData) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOptCarbMgmtData sets the optCarbMgmtData field to a newly
// allocated Params_Harvest_OptCarbonMgmtData struct, preferring placement in s's segment.
func (s Params_Harvest) NewOptCarbMgmtData() (Params_Harvest_OptCarbonMgmtData, error) {
	ss, err := NewParams_Harvest_OptCarbonMgmtData(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest_OptCarbonMgmtData{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Harvest_List is a list of Params_Harvest.
type Params_Harvest_List = capnp.StructList[Params_Harvest]

// NewParams_Harvest creates a new list of Params_Harvest.
func NewParams_Harvest_List(s *capnp.Segment, sz int32) (Params_Harvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Harvest](l), err
}

// Params_Harvest_Future is a wrapper for a Params_Harvest promised by a client call.
type Params_Harvest_Future struct{ *capnp.Future }

func (f Params_Harvest_Future) Struct() (Params_Harvest, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest(p.Struct()), err
}
func (p Params_Harvest_Future) OptCarbMgmtData() Params_Harvest_OptCarbonMgmtData_Future {
	return Params_Harvest_OptCarbonMgmtData_Future{Future: p.Future.Field(0, nil)}
}

type Params_Harvest_CropUsage uint16

// Params_Harvest_CropUsage_TypeID is the unique identifier for the type Params_Harvest_CropUsage.
const Params_Harvest_CropUsage_TypeID = 0xa9a9bc941e963701

// Values of Params_Harvest_CropUsage.
const (
	Params_Harvest_CropUsage_greenManure       Params_Harvest_CropUsage = 0
	Params_Harvest_CropUsage_biomassProduction Params_Harvest_CropUsage = 1
)

// String returns the enum's constant name.
func (c Params_Harvest_CropUsage) String() string {
	switch c {
	case Params_Harvest_CropUsage_greenManure:
		return "greenManure"
	case Params_Harvest_CropUsage_biomassProduction:
		return "biomassProduction"

	default:
		return ""
	}
}

// Params_Harvest_CropUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Harvest_CropUsageFromString(c string) Params_Harvest_CropUsage {
	switch c {
	case "greenManure":
		return Params_Harvest_CropUsage_greenManure
	case "biomassProduction":
		return Params_Harvest_CropUsage_biomassProduction

	default:
		return 0
	}
}

type Params_Harvest_CropUsage_List = capnp.EnumList[Params_Harvest_CropUsage]

func NewParams_Harvest_CropUsage_List(s *capnp.Segment, sz int32) (Params_Harvest_CropUsage_List, error) {
	return capnp.NewEnumList[Params_Harvest_CropUsage](s, sz)
}

type Params_Harvest_OptCarbonMgmtData capnp.Struct

// Params_Harvest_OptCarbonMgmtData_TypeID is the unique identifier for the type Params_Harvest_OptCarbonMgmtData.
const Params_Harvest_OptCarbonMgmtData_TypeID = 0xaf49ab9bbe76e375

func NewParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func NewRootParams_Harvest_OptCarbonMgmtData(s *capnp.Segment) (Params_Harvest_OptCarbonMgmtData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0})
	return Params_Harvest_OptCarbonMgmtData(st), err
}

func ReadRootParams_Harvest_OptCarbonMgmtData(msg *capnp.Message) (Params_Harvest_OptCarbonMgmtData, error) {
	root, err := msg.Root()
	return Params_Harvest_OptCarbonMgmtData(root.Struct()), err
}

func (s Params_Harvest_OptCarbonMgmtData) String() string {
	str, _ := text.Marshal(0xaf49ab9bbe76e375, capnp.Struct(s))
	return str
}

func (s Params_Harvest_OptCarbonMgmtData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Harvest_OptCarbonMgmtData) DecodeFromPtr(p capnp.Ptr) Params_Harvest_OptCarbonMgmtData {
	return Params_Harvest_OptCarbonMgmtData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Harvest_OptCarbonMgmtData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Harvest_OptCarbonMgmtData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Harvest_OptCarbonMgmtData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Harvest_OptCarbonMgmtData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Harvest_OptCarbonMgmtData) OptCarbonConservation() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Params_Harvest_OptCarbonMgmtData) SetOptCarbonConservation(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Params_Harvest_OptCarbonMgmtData) CropImpactOnHumusBalance() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropImpactOnHumusBalance(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) CropUsage() Params_Harvest_CropUsage {
	return Params_Harvest_CropUsage(capnp.Struct(s).Uint16(2) ^ 1)
}

func (s Params_Harvest_OptCarbonMgmtData) SetCropUsage(v Params_Harvest_CropUsage) {
	capnp.Struct(s).SetUint16(2, uint16(v)^1)
}

func (s Params_Harvest_OptCarbonMgmtData) ResidueHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_Harvest_OptCarbonMgmtData) SetResidueHeq(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) OrganicFertilizerHeq() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_Harvest_OptCarbonMgmtData) SetOrganicFertilizerHeq(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_Harvest_OptCarbonMgmtData) MaxResidueRecoverFraction() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_Harvest_OptCarbonMgmtData) SetMaxResidueRecoverFraction(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

// Params_Harvest_OptCarbonMgmtData_List is a list of Params_Harvest_OptCarbonMgmtData.
type Params_Harvest_OptCarbonMgmtData_List = capnp.StructList[Params_Harvest_OptCarbonMgmtData]

// NewParams_Harvest_OptCarbonMgmtData creates a new list of Params_Harvest_OptCarbonMgmtData.
func NewParams_Harvest_OptCarbonMgmtData_List(s *capnp.Segment, sz int32) (Params_Harvest_OptCarbonMgmtData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 0}, sz)
	return capnp.StructList[Params_Harvest_OptCarbonMgmtData](l), err
}

// Params_Harvest_OptCarbonMgmtData_Future is a wrapper for a Params_Harvest_OptCarbonMgmtData promised by a client call.
type Params_Harvest_OptCarbonMgmtData_Future struct{ *capnp.Future }

func (f Params_Harvest_OptCarbonMgmtData_Future) Struct() (Params_Harvest_OptCarbonMgmtData, error) {
	p, err := f.Future.Ptr()
	return Params_Harvest_OptCarbonMgmtData(p.Struct()), err
}

type Params_AutomaticHarvest capnp.Struct

// Params_AutomaticHarvest_TypeID is the unique identifier for the type Params_AutomaticHarvest.
const Params_AutomaticHarvest_TypeID = 0xf805d22fabb80702

func NewParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func NewRootParams_AutomaticHarvest(s *capnp.Segment) (Params_AutomaticHarvest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1})
	return Params_AutomaticHarvest(st), err
}

func ReadRootParams_AutomaticHarvest(msg *capnp.Message) (Params_AutomaticHarvest, error) {
	root, err := msg.Root()
	return Params_AutomaticHarvest(root.Struct()), err
}

func (s Params_AutomaticHarvest) String() string {
	str, _ := text.Marshal(0xf805d22fabb80702, capnp.Struct(s))
	return str
}

func (s Params_AutomaticHarvest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_AutomaticHarvest) DecodeFromPtr(p capnp.Ptr) Params_AutomaticHarvest {
	return Params_AutomaticHarvest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_AutomaticHarvest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_AutomaticHarvest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_AutomaticHarvest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_AutomaticHarvest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_AutomaticHarvest) Harvest() (Params_Harvest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Harvest(p.Struct()), err
}

func (s Params_AutomaticHarvest) HasHarvest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_AutomaticHarvest) SetHarvest(v Params_Harvest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHarvest sets the harvest field to a newly
// allocated Params_Harvest struct, preferring placement in s's segment.
func (s Params_AutomaticHarvest) NewHarvest() (Params_Harvest, error) {
	ss, err := NewParams_Harvest(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Harvest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_AutomaticHarvest) MinPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_AutomaticHarvest) SetMinPercentASW(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxPercentASW() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8) ^ 0x4059000000000000)
}

func (s Params_AutomaticHarvest) SetMaxPercentASW(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v)^0x4059000000000000)
}

func (s Params_AutomaticHarvest) Max3dayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_AutomaticHarvest) SetMax3dayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) MaxCurrentDayPrecipSum() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_AutomaticHarvest) SetMaxCurrentDayPrecipSum(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_AutomaticHarvest) HarvestTime() Event_PhenoStage {
	return Event_PhenoStage(capnp.Struct(s).Uint16(32) ^ 3)
}

func (s Params_AutomaticHarvest) SetHarvestTime(v Event_PhenoStage) {
	capnp.Struct(s).SetUint16(32, uint16(v)^3)
}

// Params_AutomaticHarvest_List is a list of Params_AutomaticHarvest.
type Params_AutomaticHarvest_List = capnp.StructList[Params_AutomaticHarvest]

// NewParams_AutomaticHarvest creates a new list of Params_AutomaticHarvest.
func NewParams_AutomaticHarvest_List(s *capnp.Segment, sz int32) (Params_AutomaticHarvest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 40, PointerCount: 1}, sz)
	return capnp.StructList[Params_AutomaticHarvest](l), err
}

// Params_AutomaticHarvest_Future is a wrapper for a Params_AutomaticHarvest promised by a client call.
type Params_AutomaticHarvest_Future struct{ *capnp.Future }

func (f Params_AutomaticHarvest_Future) Struct() (Params_AutomaticHarvest, error) {
	p, err := f.Future.Ptr()
	return Params_AutomaticHarvest(p.Struct()), err
}
func (p Params_AutomaticHarvest_Future) Harvest() Params_Harvest_Future {
	return Params_Harvest_Future{Future: p.Future.Field(0, nil)}
}

type Params_Cutting capnp.Struct

// Params_Cutting_TypeID is the unique identifier for the type Params_Cutting.
const Params_Cutting_TypeID = 0x8460dac6abff7ed9

func NewParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func NewRootParams_Cutting(s *capnp.Segment) (Params_Cutting, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Cutting(st), err
}

func ReadRootParams_Cutting(msg *capnp.Message) (Params_Cutting, error) {
	root, err := msg.Root()
	return Params_Cutting(root.Struct()), err
}

func (s Params_Cutting) String() string {
	str, _ := text.Marshal(0x8460dac6abff7ed9, capnp.Struct(s))
	return str
}

func (s Params_Cutting) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting) DecodeFromPtr(p capnp.Ptr) Params_Cutting {
	return Params_Cutting(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting) CuttingSpec() (Params_Cutting_Spec_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Cutting_Spec_List(p.List()), err
}

func (s Params_Cutting) HasCuttingSpec() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Cutting) SetCuttingSpec(v Params_Cutting_Spec_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCuttingSpec sets the cuttingSpec field to a newly
// allocated Params_Cutting_Spec_List, preferring placement in s's segment.
func (s Params_Cutting) NewCuttingSpec(n int32) (Params_Cutting_Spec_List, error) {
	l, err := NewParams_Cutting_Spec_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Params_Cutting_Spec_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Params_Cutting) CutMaxAssimilationRatePercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Cutting) SetCutMaxAssimilationRatePercentage(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_Cutting_List is a list of Params_Cutting.
type Params_Cutting_List = capnp.StructList[Params_Cutting]

// NewParams_Cutting creates a new list of Params_Cutting.
func NewParams_Cutting_List(s *capnp.Segment, sz int32) (Params_Cutting_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Cutting](l), err
}

// Params_Cutting_Future is a wrapper for a Params_Cutting promised by a client call.
type Params_Cutting_Future struct{ *capnp.Future }

func (f Params_Cutting_Future) Struct() (Params_Cutting, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting(p.Struct()), err
}

type Params_Cutting_CL uint16

// Params_Cutting_CL_TypeID is the unique identifier for the type Params_Cutting_CL.
const Params_Cutting_CL_TypeID = 0xe444f780b29541a7

// Values of Params_Cutting_CL.
const (
	Params_Cutting_CL_cut  Params_Cutting_CL = 0
	Params_Cutting_CL_left Params_Cutting_CL = 1
)

// String returns the enum's constant name.
func (c Params_Cutting_CL) String() string {
	switch c {
	case Params_Cutting_CL_cut:
		return "cut"
	case Params_Cutting_CL_left:
		return "left"

	default:
		return ""
	}
}

// Params_Cutting_CLFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_CLFromString(c string) Params_Cutting_CL {
	switch c {
	case "cut":
		return Params_Cutting_CL_cut
	case "left":
		return Params_Cutting_CL_left

	default:
		return 0
	}
}

type Params_Cutting_CL_List = capnp.EnumList[Params_Cutting_CL]

func NewParams_Cutting_CL_List(s *capnp.Segment, sz int32) (Params_Cutting_CL_List, error) {
	return capnp.NewEnumList[Params_Cutting_CL](s, sz)
}

type Params_Cutting_Unit uint16

// Params_Cutting_Unit_TypeID is the unique identifier for the type Params_Cutting_Unit.
const Params_Cutting_Unit_TypeID = 0x94d32947f136655e

// Values of Params_Cutting_Unit.
const (
	Params_Cutting_Unit_percentage Params_Cutting_Unit = 0
	Params_Cutting_Unit_biomass    Params_Cutting_Unit = 1
	Params_Cutting_Unit_lai        Params_Cutting_Unit = 2
)

// String returns the enum's constant name.
func (c Params_Cutting_Unit) String() string {
	switch c {
	case Params_Cutting_Unit_percentage:
		return "percentage"
	case Params_Cutting_Unit_biomass:
		return "biomass"
	case Params_Cutting_Unit_lai:
		return "lai"

	default:
		return ""
	}
}

// Params_Cutting_UnitFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Params_Cutting_UnitFromString(c string) Params_Cutting_Unit {
	switch c {
	case "percentage":
		return Params_Cutting_Unit_percentage
	case "biomass":
		return Params_Cutting_Unit_biomass
	case "lai":
		return Params_Cutting_Unit_lai

	default:
		return 0
	}
}

type Params_Cutting_Unit_List = capnp.EnumList[Params_Cutting_Unit]

func NewParams_Cutting_Unit_List(s *capnp.Segment, sz int32) (Params_Cutting_Unit_List, error) {
	return capnp.NewEnumList[Params_Cutting_Unit](s, sz)
}

type Params_Cutting_Spec capnp.Struct

// Params_Cutting_Spec_TypeID is the unique identifier for the type Params_Cutting_Spec.
const Params_Cutting_Spec_TypeID = 0xfae5dcfccbb93a23

func NewParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func NewRootParams_Cutting_Spec(s *capnp.Segment) (Params_Cutting_Spec, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return Params_Cutting_Spec(st), err
}

func ReadRootParams_Cutting_Spec(msg *capnp.Message) (Params_Cutting_Spec, error) {
	root, err := msg.Root()
	return Params_Cutting_Spec(root.Struct()), err
}

func (s Params_Cutting_Spec) String() string {
	str, _ := text.Marshal(0xfae5dcfccbb93a23, capnp.Struct(s))
	return str
}

func (s Params_Cutting_Spec) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Cutting_Spec) DecodeFromPtr(p capnp.Ptr) Params_Cutting_Spec {
	return Params_Cutting_Spec(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Cutting_Spec) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Cutting_Spec) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Cutting_Spec) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Cutting_Spec) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Cutting_Spec) Organ() PlantOrgan {
	return PlantOrgan(capnp.Struct(s).Uint16(0))
}

func (s Params_Cutting_Spec) SetOrgan(v PlantOrgan) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Params_Cutting_Spec) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Cutting_Spec) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_Cutting_Spec) Unit() Params_Cutting_Unit {
	return Params_Cutting_Unit(capnp.Struct(s).Uint16(2))
}

func (s Params_Cutting_Spec) SetUnit(v Params_Cutting_Unit) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Params_Cutting_Spec) CutOrLeft() Params_Cutting_CL {
	return Params_Cutting_CL(capnp.Struct(s).Uint16(4))
}

func (s Params_Cutting_Spec) SetCutOrLeft(v Params_Cutting_CL) {
	capnp.Struct(s).SetUint16(4, uint16(v))
}

func (s Params_Cutting_Spec) ExportPercentage() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16) ^ 0x4059000000000000)
}

func (s Params_Cutting_Spec) SetExportPercentage(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v)^0x4059000000000000)
}

// Params_Cutting_Spec_List is a list of Params_Cutting_Spec.
type Params_Cutting_Spec_List = capnp.StructList[Params_Cutting_Spec]

// NewParams_Cutting_Spec creates a new list of Params_Cutting_Spec.
func NewParams_Cutting_Spec_List(s *capnp.Segment, sz int32) (Params_Cutting_Spec_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[Params_Cutting_Spec](l), err
}

// Params_Cutting_Spec_Future is a wrapper for a Params_Cutting_Spec promised by a client call.
type Params_Cutting_Spec_Future struct{ *capnp.Future }

func (f Params_Cutting_Spec_Future) Struct() (Params_Cutting_Spec, error) {
	p, err := f.Future.Ptr()
	return Params_Cutting_Spec(p.Struct()), err
}

type Params_MineralFertilization capnp.Struct

// Params_MineralFertilization_TypeID is the unique identifier for the type Params_MineralFertilization.
const Params_MineralFertilization_TypeID = 0xa363d226e178debd

func NewParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func NewRootParams_MineralFertilization(s *capnp.Segment) (Params_MineralFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_MineralFertilization(st), err
}

func ReadRootParams_MineralFertilization(msg *capnp.Message) (Params_MineralFertilization, error) {
	root, err := msg.Root()
	return Params_MineralFertilization(root.Struct()), err
}

func (s Params_MineralFertilization) String() string {
	str, _ := text.Marshal(0xa363d226e178debd, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization {
	return Params_MineralFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_MineralFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_MineralFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_MineralFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

// Params_MineralFertilization_List is a list of Params_MineralFertilization.
type Params_MineralFertilization_List = capnp.StructList[Params_MineralFertilization]

// NewParams_MineralFertilization creates a new list of Params_MineralFertilization.
func NewParams_MineralFertilization_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_MineralFertilization](l), err
}

// Params_MineralFertilization_Future is a wrapper for a Params_MineralFertilization promised by a client call.
type Params_MineralFertilization_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Future) Struct() (Params_MineralFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization(p.Struct()), err
}
func (p Params_MineralFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_MineralFertilization_Parameters capnp.Struct

// Params_MineralFertilization_Parameters_TypeID is the unique identifier for the type Params_MineralFertilization_Parameters.
const Params_MineralFertilization_Parameters_TypeID = 0xc75b5ef2e9b05c2d

func NewParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func NewRootParams_MineralFertilization_Parameters(s *capnp.Segment) (Params_MineralFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2})
	return Params_MineralFertilization_Parameters(st), err
}

func ReadRootParams_MineralFertilization_Parameters(msg *capnp.Message) (Params_MineralFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_MineralFertilization_Parameters(root.Struct()), err
}

func (s Params_MineralFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xc75b5ef2e9b05c2d, capnp.Struct(s))
	return str
}

func (s Params_MineralFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_MineralFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_MineralFertilization_Parameters {
	return Params_MineralFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_MineralFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_MineralFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_MineralFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_MineralFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_MineralFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_MineralFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params_MineralFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_MineralFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_MineralFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_MineralFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_MineralFertilization_Parameters) Carbamid() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_MineralFertilization_Parameters) SetCarbamid(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) Nh4() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_MineralFertilization_Parameters) SetNh4(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_MineralFertilization_Parameters) No3() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_MineralFertilization_Parameters) SetNo3(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

// Params_MineralFertilization_Parameters_List is a list of Params_MineralFertilization_Parameters.
type Params_MineralFertilization_Parameters_List = capnp.StructList[Params_MineralFertilization_Parameters]

// NewParams_MineralFertilization_Parameters creates a new list of Params_MineralFertilization_Parameters.
func NewParams_MineralFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_MineralFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 2}, sz)
	return capnp.StructList[Params_MineralFertilization_Parameters](l), err
}

// Params_MineralFertilization_Parameters_Future is a wrapper for a Params_MineralFertilization_Parameters promised by a client call.
type Params_MineralFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_MineralFertilization_Parameters_Future) Struct() (Params_MineralFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

type Params_NDemandFertilization capnp.Struct

// Params_NDemandFertilization_TypeID is the unique identifier for the type Params_NDemandFertilization.
const Params_NDemandFertilization_TypeID = 0xc7c14e92e0cd461c

func NewParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func NewRootParams_NDemandFertilization(s *capnp.Segment) (Params_NDemandFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Params_NDemandFertilization(st), err
}

func ReadRootParams_NDemandFertilization(msg *capnp.Message) (Params_NDemandFertilization, error) {
	root, err := msg.Root()
	return Params_NDemandFertilization(root.Struct()), err
}

func (s Params_NDemandFertilization) String() string {
	str, _ := text.Marshal(0xc7c14e92e0cd461c, capnp.Struct(s))
	return str
}

func (s Params_NDemandFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_NDemandFertilization) DecodeFromPtr(p capnp.Ptr) Params_NDemandFertilization {
	return Params_NDemandFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_NDemandFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_NDemandFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_NDemandFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_NDemandFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_NDemandFertilization) NDemand() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_NDemandFertilization) SetNDemand(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Partition() (Params_MineralFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_MineralFertilization_Parameters(p.Struct()), err
}

func (s Params_NDemandFertilization) HasPartition() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_NDemandFertilization) SetPartition(v Params_MineralFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewPartition sets the partition field to a newly
// allocated Params_MineralFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_NDemandFertilization) NewPartition() (Params_MineralFertilization_Parameters, error) {
	ss, err := NewParams_MineralFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_MineralFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_NDemandFertilization) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_NDemandFertilization) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_NDemandFertilization) Stage() uint8 {
	return capnp.Struct(s).Uint8(16) ^ 1
}

func (s Params_NDemandFertilization) SetStage(v uint8) {
	capnp.Struct(s).SetUint8(16, v^1)
}

// Params_NDemandFertilization_List is a list of Params_NDemandFertilization.
type Params_NDemandFertilization_List = capnp.StructList[Params_NDemandFertilization]

// NewParams_NDemandFertilization creates a new list of Params_NDemandFertilization.
func NewParams_NDemandFertilization_List(s *capnp.Segment, sz int32) (Params_NDemandFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Params_NDemandFertilization](l), err
}

// Params_NDemandFertilization_Future is a wrapper for a Params_NDemandFertilization promised by a client call.
type Params_NDemandFertilization_Future struct{ *capnp.Future }

func (f Params_NDemandFertilization_Future) Struct() (Params_NDemandFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_NDemandFertilization(p.Struct()), err
}
func (p Params_NDemandFertilization_Future) Partition() Params_MineralFertilization_Parameters_Future {
	return Params_MineralFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization capnp.Struct

// Params_OrganicFertilization_TypeID is the unique identifier for the type Params_OrganicFertilization.
const Params_OrganicFertilization_TypeID = 0xb492838c7fed50b0

func NewParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func NewRootParams_OrganicFertilization(s *capnp.Segment) (Params_OrganicFertilization, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Params_OrganicFertilization(st), err
}

func ReadRootParams_OrganicFertilization(msg *capnp.Message) (Params_OrganicFertilization, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization(root.Struct()), err
}

func (s Params_OrganicFertilization) String() string {
	str, _ := text.Marshal(0xb492838c7fed50b0, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization {
	return Params_OrganicFertilization(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization) Params() (Params_OrganicFertilization_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}

func (s Params_OrganicFertilization) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization) SetParams(v Params_OrganicFertilization_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_Parameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization) NewParams() (Params_OrganicFertilization_Parameters, error) {
	ss, err := NewParams_OrganicFertilization_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization) Incorporation() bool {
	return capnp.Struct(s).Bit(64)
}

func (s Params_OrganicFertilization) SetIncorporation(v bool) {
	capnp.Struct(s).SetBit(64, v)
}

// Params_OrganicFertilization_List is a list of Params_OrganicFertilization.
type Params_OrganicFertilization_List = capnp.StructList[Params_OrganicFertilization]

// NewParams_OrganicFertilization creates a new list of Params_OrganicFertilization.
func NewParams_OrganicFertilization_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Params_OrganicFertilization](l), err
}

// Params_OrganicFertilization_Future is a wrapper for a Params_OrganicFertilization promised by a client call.
type Params_OrganicFertilization_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Future) Struct() (Params_OrganicFertilization, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization(p.Struct()), err
}
func (p Params_OrganicFertilization_Future) Params() Params_OrganicFertilization_Parameters_Future {
	return Params_OrganicFertilization_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_OrganicFertilization_OrganicMatterParameters capnp.Struct

// Params_OrganicFertilization_OrganicMatterParameters_TypeID is the unique identifier for the type Params_OrganicFertilization_OrganicMatterParameters.
const Params_OrganicFertilization_OrganicMatterParameters_TypeID = 0x95cdc661a6600137

func NewParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func NewRootParams_OrganicFertilization_OrganicMatterParameters(s *capnp.Segment) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0})
	return Params_OrganicFertilization_OrganicMatterParameters(st), err
}

func ReadRootParams_OrganicFertilization_OrganicMatterParameters(msg *capnp.Message) (Params_OrganicFertilization_OrganicMatterParameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_OrganicMatterParameters(root.Struct()), err
}

func (s Params_OrganicFertilization_OrganicMatterParameters) String() string {
	str, _ := text.Marshal(0x95cdc661a6600137, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_OrganicMatterParameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_OrganicMatterParameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_OrganicMatterParameters {
	return Params_OrganicFertilization_OrganicMatterParameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_OrganicMatterParameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_OrganicMatterParameters) AomDryMatterContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomDryMatterContent(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNH4Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNH4Content(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomNO3Content() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomNO3Content(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomCarbamidContent() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomCarbamidContent(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomSlowDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomSlowDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) AomFastDecCoeffStandard() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetAomFastDecCoeffStandard(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(48))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(48, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMToAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(56))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMToAOMFast(v float64) {
	capnp.Struct(s).SetUint64(56, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(64))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMSlow(v float64) {
	capnp.Struct(s).SetUint64(64, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) CnRatioAOMFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(72))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetCnRatioAOMFast(v float64) {
	capnp.Struct(s).SetUint64(72, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBSlow() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(80))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBSlow(v float64) {
	capnp.Struct(s).SetUint64(80, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) PartAOMSlowToSMBFast() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(88))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetPartAOMSlowToSMBFast(v float64) {
	capnp.Struct(s).SetUint64(88, math.Float64bits(v))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) NConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(96))
}

func (s Params_OrganicFertilization_OrganicMatterParameters) SetNConcentration(v float64) {
	capnp.Struct(s).SetUint64(96, math.Float64bits(v))
}

// Params_OrganicFertilization_OrganicMatterParameters_List is a list of Params_OrganicFertilization_OrganicMatterParameters.
type Params_OrganicFertilization_OrganicMatterParameters_List = capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters]

// NewParams_OrganicFertilization_OrganicMatterParameters creates a new list of Params_OrganicFertilization_OrganicMatterParameters.
func NewParams_OrganicFertilization_OrganicMatterParameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_OrganicMatterParameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 104, PointerCount: 0}, sz)
	return capnp.StructList[Params_OrganicFertilization_OrganicMatterParameters](l), err
}

// Params_OrganicFertilization_OrganicMatterParameters_Future is a wrapper for a Params_OrganicFertilization_OrganicMatterParameters promised by a client call.
type Params_OrganicFertilization_OrganicMatterParameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_OrganicMatterParameters_Future) Struct() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

type Params_OrganicFertilization_Parameters capnp.Struct

// Params_OrganicFertilization_Parameters_TypeID is the unique identifier for the type Params_OrganicFertilization_Parameters.
const Params_OrganicFertilization_Parameters_TypeID = 0xba0c11cf818d29fd

func NewParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func NewRootParams_OrganicFertilization_Parameters(s *capnp.Segment) (Params_OrganicFertilization_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Params_OrganicFertilization_Parameters(st), err
}

func ReadRootParams_OrganicFertilization_Parameters(msg *capnp.Message) (Params_OrganicFertilization_Parameters, error) {
	root, err := msg.Root()
	return Params_OrganicFertilization_Parameters(root.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) String() string {
	str, _ := text.Marshal(0xba0c11cf818d29fd, capnp.Struct(s))
	return str
}

func (s Params_OrganicFertilization_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_OrganicFertilization_Parameters) DecodeFromPtr(p capnp.Ptr) Params_OrganicFertilization_Parameters {
	return Params_OrganicFertilization_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_OrganicFertilization_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_OrganicFertilization_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_OrganicFertilization_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_OrganicFertilization_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_OrganicFertilization_Parameters) Params() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_OrganicFertilization_OrganicMatterParameters(p.Struct()), err
}

func (s Params_OrganicFertilization_Parameters) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_OrganicFertilization_Parameters) SetParams(v Params_OrganicFertilization_OrganicMatterParameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_OrganicFertilization_OrganicMatterParameters struct, preferring placement in s's segment.
func (s Params_OrganicFertilization_Parameters) NewParams() (Params_OrganicFertilization_OrganicMatterParameters, error) {
	ss, err := NewParams_OrganicFertilization_OrganicMatterParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_OrganicFertilization_OrganicMatterParameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Params_OrganicFertilization_Parameters) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Params_OrganicFertilization_Parameters) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Params_OrganicFertilization_Parameters) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Params_OrganicFertilization_Parameters) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Params_OrganicFertilization_Parameters) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Params_OrganicFertilization_Parameters) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Params_OrganicFertilization_Parameters_List is a list of Params_OrganicFertilization_Parameters.
type Params_OrganicFertilization_Parameters_List = capnp.StructList[Params_OrganicFertilization_Parameters]

// NewParams_OrganicFertilization_Parameters creates a new list of Params_OrganicFertilization_Parameters.
func NewParams_OrganicFertilization_Parameters_List(s *capnp.Segment, sz int32) (Params_OrganicFertilization_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Params_OrganicFertilization_Parameters](l), err
}

// Params_OrganicFertilization_Parameters_Future is a wrapper for a Params_OrganicFertilization_Parameters promised by a client call.
type Params_OrganicFertilization_Parameters_Future struct{ *capnp.Future }

func (f Params_OrganicFertilization_Parameters_Future) Struct() (Params_OrganicFertilization_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_OrganicFertilization_Parameters(p.Struct()), err
}
func (p Params_OrganicFertilization_Parameters_Future) Params() Params_OrganicFertilization_OrganicMatterParameters_Future {
	return Params_OrganicFertilization_OrganicMatterParameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Tillage capnp.Struct

// Params_Tillage_TypeID is the unique identifier for the type Params_Tillage.
const Params_Tillage_TypeID = 0xaa49811a4e3e2c59

func NewParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func NewRootParams_Tillage(s *capnp.Segment) (Params_Tillage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Params_Tillage(st), err
}

func ReadRootParams_Tillage(msg *capnp.Message) (Params_Tillage, error) {
	root, err := msg.Root()
	return Params_Tillage(root.Struct()), err
}

func (s Params_Tillage) String() string {
	str, _ := text.Marshal(0xaa49811a4e3e2c59, capnp.Struct(s))
	return str
}

func (s Params_Tillage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Tillage) DecodeFromPtr(p capnp.Ptr) Params_Tillage {
	return Params_Tillage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Tillage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Tillage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Tillage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Tillage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Tillage) Depth() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0) ^ 0x3fd3333333333333)
}

func (s Params_Tillage) SetDepth(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v)^0x3fd3333333333333)
}

// Params_Tillage_List is a list of Params_Tillage.
type Params_Tillage_List = capnp.StructList[Params_Tillage]

// NewParams_Tillage creates a new list of Params_Tillage.
func NewParams_Tillage_List(s *capnp.Segment, sz int32) (Params_Tillage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Params_Tillage](l), err
}

// Params_Tillage_Future is a wrapper for a Params_Tillage promised by a client call.
type Params_Tillage_Future struct{ *capnp.Future }

func (f Params_Tillage_Future) Struct() (Params_Tillage, error) {
	p, err := f.Future.Ptr()
	return Params_Tillage(p.Struct()), err
}

type Params_Irrigation capnp.Struct

// Params_Irrigation_TypeID is the unique identifier for the type Params_Irrigation.
const Params_Irrigation_TypeID = 0xd90939a58e404ff8

func NewParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func NewRootParams_Irrigation(s *capnp.Segment) (Params_Irrigation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Params_Irrigation(st), err
}

func ReadRootParams_Irrigation(msg *capnp.Message) (Params_Irrigation, error) {
	root, err := msg.Root()
	return Params_Irrigation(root.Struct()), err
}

func (s Params_Irrigation) String() string {
	str, _ := text.Marshal(0xd90939a58e404ff8, capnp.Struct(s))
	return str
}

func (s Params_Irrigation) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation) DecodeFromPtr(p capnp.Ptr) Params_Irrigation {
	return Params_Irrigation(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation) Amount() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation) SetAmount(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation) Params() (Params_Irrigation_Parameters, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Params_Irrigation_Parameters(p.Struct()), err
}

func (s Params_Irrigation) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params_Irrigation) SetParams(v Params_Irrigation_Parameters) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated Params_Irrigation_Parameters struct, preferring placement in s's segment.
func (s Params_Irrigation) NewParams() (Params_Irrigation_Parameters, error) {
	ss, err := NewParams_Irrigation_Parameters(capnp.Struct(s).Segment())
	if err != nil {
		return Params_Irrigation_Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Params_Irrigation_List is a list of Params_Irrigation.
type Params_Irrigation_List = capnp.StructList[Params_Irrigation]

// NewParams_Irrigation creates a new list of Params_Irrigation.
func NewParams_Irrigation_List(s *capnp.Segment, sz int32) (Params_Irrigation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Params_Irrigation](l), err
}

// Params_Irrigation_Future is a wrapper for a Params_Irrigation promised by a client call.
type Params_Irrigation_Future struct{ *capnp.Future }

func (f Params_Irrigation_Future) Struct() (Params_Irrigation, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation(p.Struct()), err
}
func (p Params_Irrigation_Future) Params() Params_Irrigation_Parameters_Future {
	return Params_Irrigation_Parameters_Future{Future: p.Future.Field(0, nil)}
}

type Params_Irrigation_Parameters capnp.Struct

// Params_Irrigation_Parameters_TypeID is the unique identifier for the type Params_Irrigation_Parameters.
const Params_Irrigation_Parameters_TypeID = 0xaec9e089e87f1599

func NewParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func NewRootParams_Irrigation_Parameters(s *capnp.Segment) (Params_Irrigation_Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Params_Irrigation_Parameters(st), err
}

func ReadRootParams_Irrigation_Parameters(msg *capnp.Message) (Params_Irrigation_Parameters, error) {
	root, err := msg.Root()
	return Params_Irrigation_Parameters(root.Struct()), err
}

func (s Params_Irrigation_Parameters) String() string {
	str, _ := text.Marshal(0xaec9e089e87f1599, capnp.Struct(s))
	return str
}

func (s Params_Irrigation_Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params_Irrigation_Parameters) DecodeFromPtr(p capnp.Ptr) Params_Irrigation_Parameters {
	return Params_Irrigation_Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params_Irrigation_Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params_Irrigation_Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params_Irrigation_Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params_Irrigation_Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params_Irrigation_Parameters) NitrateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params_Irrigation_Parameters) SetNitrateConcentration(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params_Irrigation_Parameters) SulfateConcentration() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params_Irrigation_Parameters) SetSulfateConcentration(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Params_Irrigation_Parameters_List is a list of Params_Irrigation_Parameters.
type Params_Irrigation_Parameters_List = capnp.StructList[Params_Irrigation_Parameters]

// NewParams_Irrigation_Parameters creates a new list of Params_Irrigation_Parameters.
func NewParams_Irrigation_Parameters_List(s *capnp.Segment, sz int32) (Params_Irrigation_Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Params_Irrigation_Parameters](l), err
}

// Params_Irrigation_Parameters_Future is a wrapper for a Params_Irrigation_Parameters promised by a client call.
type Params_Irrigation_Parameters_Future struct{ *capnp.Future }

func (f Params_Irrigation_Parameters_Future) Struct() (Params_Irrigation_Parameters, error) {
	p, err := f.Future.Ptr()
	return Params_Irrigation_Parameters(p.Struct()), err
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xbfda1920aff38c07

func (c Service) ManagementAt(ctx context.Context, params func(geo.LatLonCoord) error) (Service_managementAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "model/monica/monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(geo.LatLonCoord(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_managementAt_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	ManagementAt(context.Context, Service_managementAt) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbfda1920aff38c07,
			MethodID:      0,
			InterfaceName: "model/monica/monica_management.capnp:Service",
			MethodName:    "managementAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ManagementAt(ctx, Service_managementAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_managementAt holds the state for a server call to Service.managementAt.
// See server.Call for documentation.
type Service_managementAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_managementAt) Args() geo.LatLonCoord {
	return geo.LatLonCoord(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_managementAt) AllocResults() (Service_managementAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_managementAt_Results capnp.Struct

// Service_managementAt_Results_TypeID is the unique identifier for the type Service_managementAt_Results.
const Service_managementAt_Results_TypeID = 0xf32d7a3fdc567bdb

func NewService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func NewRootService_managementAt_Results(s *capnp.Segment) (Service_managementAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_managementAt_Results(st), err
}

func ReadRootService_managementAt_Results(msg *capnp.Message) (Service_managementAt_Results, error) {
	root, err := msg.Root()
	return Service_managementAt_Results(root.Struct()), err
}

func (s Service_managementAt_Results) String() string {
	str, _ := text.Marshal(0xf32d7a3fdc567bdb, capnp.Struct(s))
	return str
}

func (s Service_managementAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_managementAt_Results) DecodeFromPtr(p capnp.Ptr) Service_managementAt_Results {
	return Service_managementAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_managementAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_managementAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_managementAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_managementAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_managementAt_Results) Mgmt() (Event_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Event_List(p.List()), err
}

func (s Service_managementAt_Results) HasMgmt() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_managementAt_Results) SetMgmt(v Event_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMgmt sets the mgmt field to a newly
// allocated Event_List, preferring placement in s's segment.
func (s Service_managementAt_Results) NewMgmt(n int32) (Event_List, error) {
	l, err := NewEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Event_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_managementAt_Results_List is a list of Service_managementAt_Results.
type Service_managementAt_Results_List = capnp.StructList[Service_managementAt_Results]

// NewService_managementAt_Results creates a new list of Service_managementAt_Results.
func NewService_managementAt_Results_List(s *capnp.Segment, sz int32) (Service_managementAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_managementAt_Results](l), err
}

// Service_managementAt_Results_Future is a wrapper for a Service_managementAt_Results promised by a client call.
type Service_managementAt_Results_Future struct{ *capnp.Future }

func (f Service_managementAt_Results_Future) Struct() (Service_managementAt_Results, error) {
	p, err := f.Future.Ptr()
	return Service_managementAt_Results(p.Struct()), err
}

const schema_93337c65a295d42f = "x\xda\xccz\x7ft\x14\xd7u\xff\xbd3\xbb\xac$\xb4" +
	"Y\x0d\xb32\x02\x83\xd7\xc8\xf0\x8dQ\x00\x03\xe2[b" +
	"\x9d\xb8b\xf5\x03K\x14Y\x1a\xad\xf0\x0fj\\\x8fV" +
	"O\xabqvg\x96\xd9\xb7\x0298\x0a\x14Z\xcc1" +
	"upq\xfd\xa3I\x8b\x89i\x0a&\xc5&\xa6\xc7p" +
	"Ll\xdc\xd8\xc1&9\x0969\xa7v\xdc\xc6MC" +
	"k\xda\x90s\x8cOO\xe2\xd4xz\xee\x9b\xdd\x9d\xd1" +
	"J`\xc9\x7f\xf4\x94\x7fv\xb9\xef\xcd\xdb\xfb\xee\xbb\xef" +
	"s?\xf73Zz\xa9jU`Y82\x13\xa4D" +
	"5\x06\xa79o\x7f\xd5y\xe6\xb5w\xee\xdd\x0e\xda\"" +
	"D'\xf8\xa7\x95\x83\xd1_\\\x7f\x06\x82\x18\x02h\xcc" +
	"L\xdf\x8f\xea\x8e\xe9+\x01\xd4\x03\xd37\x01:g\xff" +
	"\xe4\xb9F~\xbb\xb5\x1d\xb4/\xa1\xec$\xf6>\xa0\xbf" +
	"~\xea\xa5\xb3\x10\xa0\xc9\x0b\xaa[$\xb5\xbd:\x04\xa0" +
	"\xc6\xab\x8f\x00:CO_\xca\xce\xdd\xfb\x9f\x0fO\xb8" +
	"\xf4\x7fU\xefG5\x1c\xfe<\x80\xba8LK\xdf\xc3" +
	"~\xef\x83[\x17\xbe\xb5\x17\x94\x15\x92\xe7\x15`\xe3\x9e" +
	"\xf0\x1b\xa8~'L\xeb\x1e\x0cw\x03:+\xf1\xde\xbf" +
	"\xd1_\xfb\xd1\xa3\xa0\xc51\xec<\xdbsq\xf4\xa1?" +
	"~\xe4y\xd7\x89S\xe17$\xf5\"Mn\xbc\x10\xfe" +
	"\xb9\x04\xe8|}\xc1\xbe_/\xff\xeb\x8f\x9e\x02e\x01" +
	":7\x9d{t?\xdb\xd2\xf8\xe7\x10\x0c\xd2\x94\xc5\x8a" +
	"\x8dj\\\xa1\xaf\xb7(1\x04tN\xfe\xf3\xe6\x7f\xf9" +
	"\x7fo&\xbf5\xa1\xcfw\xcd\xa8\x92\xd4\x91\x193\x01" +
	"\xd4\x1d3\xc8g\\\xf9\x17\xd7\xed}\xf1\xe0A\xe1s" +
	"i\xbb\x80\x8d\xe7g\\B\x15U\xf2\xf9\xf2\x8c\x95\x80" +
	"\xce]\x8b~\xff\xb6\xd9[;\x0f\x95\xad+|\x0e\xab" +
	"\xfbQ] &\xcfS\x9b\x01\x9d'jG\xdf\x7f\xf0" +
	"\xbd\xd7\xff\x0e\xb4\x95(9\xbf\xed^\xf5g\x07n\xae" +
	"|\xdb\x9d\x1cWgH\xaa.&oP\xc9\x87\xfc\xbf" +
	"\x0e\x7f\xef/\x9f\xe9<\x02\xda\x0a\x0czN\x88\xc9\xaf" +
	"\xab\xcb%\xf5\x02Mn<\xaf\xdeA\xfb;u\xed\xc8" +
	"\x1d\xeb\x9a^:\x0a\xca\x17$'\xb0i\xf5\xc8w\x1b" +
	"R?&\x8f\xf5\xda\xa3\xa8\x8e\xd4\xd2\xba\xf9\xda\x14\xa0" +
	"\xb3H\xfa\xf9\xda\xebo]\xf1]P\x16H^\xdc\x00" +
	"\x1b\x0f\xd6nC\xf5\xa4\x98y\xbc\xf61@\xef\x04\xb4" +
	"E(\x95\xc7\xecrm\x95\xa4\xce\xbd\x86\xce\xf9\x96k" +
	"(+\x9e\x1e:\x9f\xfc\x87\x9a\x9a\xe3\xa0}\x01\xd1s" +
	"\xa1-$!6\xbe}\xcd6T/^Ck_\xb8" +
	"\x86vwy\xe1\xee\xad?V\xaaO\x80\x12\xf7\xfdP" +
	"P\xa6\xa5\xbbf\xf6K\xea\xc6\x99493\x93\x96\xbe" +
	"\xe7\xce/\x7f\xee+\xcf\xfc\xfd\xf7\xca\x96\xae\x0d\x84\x10" +
	"\xa01X\xb7\x0b\x01\xd5\xda:Z7\xf4\xd0\x87G\xae" +
	"\x9f\xf5\xceK\xa0,\x90\xc7\xecnc\xdd}\xa8\xee\xa8" +
	"\xa3E\xb7\xd6\xdd\xaa~\xa7n&\x80\xf3n\xf4W\xea" +
	"\x9c\xf0\xce\xd7\xca\xb3B\"7\xbeY\xf7$\xaa\xc7\xc4" +
	"\x13\xcf\xd5\x91\x1b\x8b\xef~\xf6\xc2\xa5{\xfe\xf0\x07\x94" +
	"\x9f\xb2\x97Q\xeelmV\xbf\xa4\xe6g\xd1\xd7\x8d\xb3" +
	"D\xca\xcdY\xfd\xa3\xf7\x1e\xb9\xed\xd4\x0fhq\xb9<" +
	"|;fWI\xea\x81\xd9\xb4\xf8S\xb3\xff\x1d\xd0\xf9" +
	"\xf8\xb9\xc7gF\xfe\xea\xd6\xd3\x13\xefq\xe4\xda'i" +
	"\x8f\x0f^K{,-5&\xf3Eb\\\xb8\xb6\x1f" +
	"\xd5\xcb\xd7~\x1bdo\x09m\x01\xfa\xa6\xb5\x07B2" +
	"b\xe3\xc8\x9c\xf5\xa8\xee\x9e\xb3\x12\xa0\xf1\xd8\x9c\x87\xc9" +
	"\xddg/]\xd8}$\xbc\xf0'\xe3\xf2\xe2\xe2\xdc\xfb" +
	"Q\xc5\xeb\xc4\xa1\xcf\xfd<M-\xe1\x83\xb6\x08+\xca" +
	"\xc3v\xf6\xba_\xa0z\xf1\xba\x99\x00\x8d\x1f]\xb7\x92" +
	"nj)\xd1'\x84\xa2y'P\xdd1\x8f\xee\xde\x9e" +
	"y\xb4\xbb\xdf\xfdA\xed\x87g\xf8\xea\x9fM\x1c\x88\x8b" +
	"\xf3l\x0a\xc4G\xf3\xe8>};\xfe\xe8\xd1\xaf\xfd\xa6" +
	"\xed\x97\xe3\xa0eV\xfd\x09T\x97\xd5St\x17\xd7\xd3" +
	"5}O\xf9\xb5\xfajW\xc7\xf9q\xd7cY\xfd+" +
	"\xa8v\x8a\x99\xed\xf5\xbf\x01t~\xf6\x95\xdb\xdfm\xbe" +
	"\x7f\xf1\x87\xa0,F(\xf8\xf8A\xfd\x0c\x09P\xad\xbc" +
	"\x81~T\x0a\xbd\xf0\xccMo\x06\x7fK\xbb\x09\x96\xef" +
	"\xe6\xe6\x1b\xfe\x03\xd5u7\x88\x84\xb8A\\\xcc\x1b\x9a" +
	"\x8e\x9f\xf9\xf8\xdd\xf3\xbf\xa3k,{N\x8a\xd3:>" +
	"\xff\x0dT\x7f:_Dm~\x0c\xc1\x81MN\xc6\x1a" +
	"`\xe9\x9b2V\xd04\x92\xfaM\x19\x8b>\xfe(\xa3" +
	"\x9bz\x8ae\x98\xc9\x97$\xf5\xac\x99m\xea\xd1m=" +
	"\x93[\xd2\x9a\xe7<d\x98)\xad\x1a\xfd\xd1Pf\xfb" +
	"P7\xdc\xe0\xf9\xa0T6\xc8\xadk#\xebL\x83G" +
	"\x12Y\x96\xd4*\xe4\x00@\x00\x01\x94\x85\xfd\x00\xda\x8d" +
	"2jm\x12\"F\x11\x01\x96\xc5\xab\x10@[+\xa3" +
	"v\xa7\x84N2\xcf\xb9a\xa6\x12\x10\xca\xb2$~\x0e" +
	"\xb0GF\xac\xf1\x16\x07$#M\xeb\xd27\xc7sr" +
	"\xce\xc8\x18i\x9d\x1b\x96\xd9\xabs\xd6\xc3\xec$3\xb9" +
	"\x9eb\x008\x1d$\x9c\x0eX\xdal\xc5d6\x1b\xcf" +
	"s+\xa3s#\x99\xb06\x19fjI|8\x95\xb0" +
	"\x8ct\x1f\xcbd\xa1\x07Q\xabv\xf7\x82\xa8\xb4\x1f\x05" +
	"\xd0:d\xd4\xfa$T0 6\xa3h\x87\x00\xb4>" +
	"\x19\xb5{%T$)\x8a\x12\x80\xb2\xe1\x0d\x00m@" +
	"F-+\xa1\x93\xb3\x8ct\x1b\xcbr\x1cZm\xd9\xf1" +
	"af\xc7\xf4\x94a\xa6\\o\x9dF\xf1\xef\xadf\x00" +
	"p\x06\xf4\x91\\\xa7\x99\xb0\xd0\xfd\xf9;\x8c\x889`" +
	"m\xc2\x10H\x18\x02Z\x88\x1c\xec\x1c\x94\xe2\xfd\xd60" +
	"\xf3\xfb9~\xeb\x93:\xe7\x0e\xdd\x1e\x0e\xb1\x1c\xd7*" +
	"\xd0_\x9c*{\xbd*\xa1T>\xe2\xb4\xdaVv]" +
	"NO\x012\xa7;\xcb[u\xbb\xdfB\xb3+\x95\xe1" +
	"m:G\xbdx\xda\x88\xca\xc25\x85\xd3^Q:m" +
	"e\xd96\x00m\xa9\x8c\xda\x97$t\xd8\xe6\xaces" +
	"6\x00t\xac \x05\x91r\xd9r\xd7\xecBwE\x1d" +
	"\xb0\xc6s\x00\x10k|\xfb\x9a6\xd9\xfc\xa5\xa3\xa4\x84" +
	"\x04\xf7\x10\xc5\xb1\xcc]O\xcb)\xb3Z\x00PR\x94" +
	"z\x00'[\xc8\x1f\x90Sl\xb4\xdf\xb02z.\x17" +
	"J\xebF\xe9\x07\xab&\xf3\x83\xddvJ7\x8d\xe4j" +
	"fs#m\xdc/\xb2\xb3h\xec\xd29g\xb6\x98\xc8" +
	"8\xb3s\xaeC+\x8a7D\xdd\x80\xfb\x01\x12\xf7\xa2" +
	"\x8c\x894Rb\xb9qS\x0d\xb4\x01\x12Cd\xe7\xe8" +
	"\xe5\x96\xbaQ\xd8\xb3d\xdfBvY\x8e\xa2\x0c\xa0\x8e" +
	"\xe0\x93\x00\x89-d\xdfI\xf6@ \x8a\x01\xa2\x1e\xf8" +
	"\x0a@b'\xd9\xf7\x92=\x18\x8cb\x90`Q\xd8\xf7" +
	"\x92}\x1f\xd9\xa7M\x8b\xe24\x00\xf5\x9b\xb8\x0b \xb1" +
	"\x8f\xec\x87\xc9\x1e\x0aEQ\x90)a?L\xf6\x17\xc8" +
	"^Q\x11\xc5\x0a\x00\xf5\x18\xde\x0f\x90x\x9e\xec/\x93" +
	"\xbd\xb22\x8a\x95\x00\xeaIa\x7f\x91\xec\xa7\xc9^U" +
	"\x15\xc5*\x00\xf5U<\x04\x908M\xf6sd\x9f>" +
	"=\x8a\xd3\x01\xd4\xb3\xc2~\x8e\xec\xef\x91\xbd\xba:\x8a" +
	"\xd5\x00\xea?\x89u\xde%\xfb\xfb(\xa1\xa3[\x996" +
	"{\xa4KG\x0ak\xabe\xf2\x103y)\xffu+" +
	"s[\xc7\x8aV\x0bb&/\xb7w7Nh\xa7\xdc" +
	"\xd31c\x0c\xd0bL\x1e;\x98H[\x9b\xda$\x96" +
	"l\xb5\xd8\xe0`\x82\xeb\xe6\x80n\x0f\x80\x7f\xc6j=" +
	"\xc7\xaf2#\xab\xdb<\xde\xdd\xd5\x87V\xbc\xbb\x8bV" +
	"\x83+\x8c\xd1:\xbe\xb1$\xc1\x9ba\xc5\xa1\xd9}l" +
	"\xc2\x01z\xa6|\xb5\x04\xa6\xadM}V\xa2\xab%2" +
	"\xe6\xb9\xf1\xc3c\x9e6[-\x93n\x024\xdb\"}" +
	"\xc7!J\xe0\xaa\x17\xa1smo\xacM\xe7,G\xc9" +
	"\x1d-\xc1\xff\x03M\x00\xdaf\x19\xb5\xed^f+[" +
	"\xef\x07\xd0\xbe&\xa3\xf6\x90\x0f2\x1f\xbc\x0f@\xdb)" +
	"\xa3\xb6\xd7\xcbieO\x0b\x80\xf6\x90\x8c\xda\xe3^B" +
	"+\x8f\xda\x00\xda^\x19\xb5}\x126\xbb\x98\x885\xce" +
	"n\xa5^>\xfc\xc9\xbf=V\x04\x0c\xa6\xdbi\x83\xe5" +
	"84'\xae4%M\xfe\xf2\x84\x05\x91\x89'\x8c\x0e" +
	"\xe9\xf60\xcb\xf1+>\xda\xa1C\xecJ3\x8aa\x0b" +
	"M\x06?\xba\x0c\x93\xd9zz\x0c~\x00h\x01\xf4\xb1" +
	"C\x05\xd7;E\x14\x01\xd9\xce\xf9\x8bl\xef\x04\xb0K" +
	"\x91_$\xa3\xf6E\xc9={\x83\x1b\x16\xa0\x895\xde" +
	"\x92\xae\xab\xcdz\xc6\xca\xfb\xb2~JP\xdb\xe1\x86h" +
	"\x09\xd5\x88\x18\x15\x09F\x09P!\x8eT\xe9\x17p\x1b" +
	"~\x04\xc0I\xd9\x8c\x99]\xba\x09\xa1\xbc\xcd\x9c\x02\xd0" +
	"\xf6\xa0m\x0d\xe4\x93\xdc\xb0\xd0\x9cZ\xe5\xea3\xd2\xe9" +
	"P\xe1\xc7\x02\xa5\xf2\x13^\x0e\xa0U\xc8\xa8E%\x8c" +
	"\x0d\xb0,\x1f\x9a\xa0\xc8N\xe9`:m\xdbH\xb9p" +
	"^Bp\x149\xee\x8b\xfe!/\xd2\xa5\x1c\xff\xffd" +
	"\xfc\xa2\xcb{\x1c\xd3\xe0\xb6\xceY+\xbaW\xcc\xd6#" +
	"cnX.\x9f\x1e\xbc\xca\xf0\x94\x1c.\x9eG\xb1N" +
	"S\x99\x8e\x89\xaaJN\xd7\x95B\xf5\x04q\x99o\xc8" +
	"\xa8\xfdm\xd1iD\xe5\x00\xd1\x96\xc32j/\xd0\xc5" +
	"\xc4(J\x88\xca1J\xae\xe7e\xd4^\xa6\x8b)E" +
	"QFTN\xae\x07\xd0^\x94Q;M\x17S\x8eb" +
	"\x00Qy\x95\xf6|ZF\xed\x1c\x95\x99@\x14\x83\x88" +
	"\xca\xd97\x01\xb4\x7f\x94Q\xfb\xa5T\xaa\xf4\x16\x12\xda" +
	"\xe4\x98=\x1cs\xb1\x06A\x12L i[\xd9\xceL" +
	"V\x97\x92\xbc\xdb\xec\xc8g\xf2\xb9\x16=\xad\x9bI?" +
	"\xb9Kzl\x04#\x1ek\x01\x0cFh\x09\x9b\xe5\x8c" +
	"\x81<\xeb\x00\x99m,=c\x15\xea3\x16.\x18\x8b" +
	"\xd8\x1d\xbe\xe1\x8c\xbe\xb9\x97\x1e\x93\xf2\xac\x97%\xada" +
	"f\xaf\xb6u7-\xa7H\xac\xda\x87\xe9{\xcf\x103" +
	"\xadX\x82\x17\x12\xb4F\xdc\x06\xba\xa4\x88\xca\x82^A" +
	">\xe6\xad\x01@Y\x99\xbb\x06\xc0a\x19f\xa7\x98\x99" +
	"$~5\x98\xb661\xdb0\x01S\x8en\xf2!\x96" +
	"3r\"ku\x9e\xb7\x0d>\xe2\xcf\xe0O\xb9)i" +
	"\xdd\xe4\x82\x83\x08\xc2Q'\x9c\x887\x08'nn\x10" +
	"N,[.\x9cXH\x1f\x01e^\x13\x05Q\x99\xb5" +
	"\x1c b[\x16\x8f\xa4\x99>\x18\xcb\x0dY\x16\x8f\x0d" +
	"\xday\x837\xe7\xb8\x9d\xff2\x8f\xe5\xf2)\xdd\x9eZ" +
	"ZND\x90\xe8\xae\xa2O\x9eQ*_\xf1\xf5\xef\xe1" +
	"\xf5N\x91@\xc9\xe5\x0c\xaa\xf8\x95P\xb0\xbat\x0f\xdb" +
	"\x09\xf1V\xc9\xa8\xad\xf5P\xb0\x93lm2j=\x94" +
	"\xd1\xab\xdc\x8c\xee\xb2\xbd\xf6\xa39+\x1c\xc4\x1a\xef\xa7" +
	"'FE\xc3LZv\xd6\xb2\xa1,e\xa7\x92\x17}" +
	"#Y\x06\x05\xf0\xa8v\x1c\x17=|\x949\x8c\x9f8" +
	"\x05\xf4^3\x864sf\x9bz\x9aHs\xc4\xeb9" +
	"\x011\"\x1c\xf3\x8f\x96\x04\x9b\xc2\xe8\x94Z\xa1\x09i" +
	"l!\xd8!f\xe7|\xedPY\xbcK\xb8\xd79\xdb" +
	"\x1f\xf0Bm\xefj\xf0\x1a'/\xe0\xa5\x83w\x03." +
	"\x1b\x03X\x0d\x12V\x03FL=\xc3\x8a\xff\x99R\x84" +
	"\xf5A\xcelQ\x04\x025(x\xae\xc8nm\xbe\x8c" +
	"\xdaRrS\x12$WY\xdc\xe0E=\xc6\xe8Q\xac" +
	"\xf1\xa4&\xd7\xa1\x08\xb5c\xa5\xe6kr4(\xc1\xec" +
	"\xc8\xb0\x91,\xd4\xa5 \x80\xf3\xdf\x0f\xff\xf0\xe6\xa5\x1f" +
	"\x7f\xf0+,*\x00\x8ar\x1fHJe\xc8)>\x0c" +
	"\x11\x93\xc7\xf9*\x14\xe5\xfe\xa7\x1d\xdf\xb8\xeb\xcc\xd9#" +
	"G\xa7p\xcf\xdd\xb3#\x96#\x9b\xa9\xb2#Z\xe3\x9d" +
	"F\x11\xe4\xbb\xee\xf3\xb2\xdf\x05y\x00e\x1d\xc5\xa3G" +
	"F\xedn\xd1\x91\xa7\xb91\xac\xdb\x94Q\xc5C\xc8\x12" +
	"\x9a\xb41\x13\"9\x83\x8f\x14\xa3\x12!0F\xc5\xd9" +
	"~\xf7K\xf3\xbf\xf5\xd8\xee\xf7\x05\xb8L5\xeb&\"" +
	"?\xe5Y\xe7c\x94\xb3'b\x94\xe4\xfe\x16\x19\xb5\x9d" +
	"\x12b!\xe9v\xd0\xde\xb7\xcb\xa8}\x9d\xea\x16\xba\x84" +
	"rw\xbd\x8fe\x06$\x97P\xee\xa9\xf7X\xe6\x15\xb3" +
	"0I]B\xc6\x10\x9dk\x01\x13B\xe6\xd0\x0a\xef\xbb" +
	"\xd5\xf8\xd9*\xf6mm,\xa3\x9b\x03e\xd0(\xeaF" +
	"i\xd3:\xf1\xe0\xbbe\xd4\x86<hc\xbd\x9e\xc6P" +
	":\xc7\x0c%\xfb\x90\x8c\x1a\xa7M\xd7\xb8\xc5z#\x19" +
	"\xd32j\x9b%\x1c5\xdd\x9f\x1b\xd3\x16\\\x91\x1a\xfa" +
	"I\x14`,G\x15\x0d\xa7\x81\x14\x9c6U\xe8\xebg" +
	"|\x13\x93\x99Y\xbc\x99r\x19\xf4\x89\x9b\x19(\xe7\xad" +
	"%\x12\x0f0\x9eb7\xbb$\xfc*\xdc;\xf0i\xf1" +
	"\x0f\xe9\x99\x9cv#\xa2\xa7\xd8*\x9dM\x9e\x0e\xa9\xb4" +
	"o\xf3\x14r\xa5\xbd\xc5\x13\xe9\x94\xf8.Ot\xa3\x91" +
	"\x92l\xab\xc4\x0fy\x12\xad\xd2~\xc8S\xa1\x95\xceC" +
	"\x9e\xae\xaft\xb5x\x02\xa6\xd2\xb9\xbe\xd0\xa58E5" +
	"*P\x90\xa3\xa0@\xe8\xa0$S\x15\x0d0Z\x909" +
	"\x9c\xe2\x05*\xb2\x1b\x97?:\xc5\xc4*3w\x97q" +
	"!\xd7<J\x8cZO1\xa7\xc8xA\xb6\xccI\x06" +
	"\xb2}\x98\xbaf!\x16z\x82\xa8r\x9f\xef\xe5\x81\xb2" +
	"\xde\x03WEip\xda\x8b\x15-B%\xd1\x11|)" +
	"\xe1\x8a0\xc2\xa2\xcd)\xa5\xfe1\xba\xda\xcf\xca\xa8\xbd" +
	"\xe8\xa5\xfe\xf1\x06\x8f\x92\x86%\xc7A\x9f\xbc\xab\x9c\x9c" +
	"\x0dRX\xfe\x84\x8c%\xf1[9\xd0\x02R8p\x99" +
	"\x8c%\xd5_\xd9\xbd\x1c$%(\x0byC\xc9S\xde" +
	"ee\xd4\xb6H\xa8L[*\xb4\x0ded\x9b\x076" +
	"\x11>\x92e\xe3\xebo\xc40\x07-\xacq\xdezG" +
	"\xfe\xe4\xccW\xcf\x9c+V3\x9d\x8f\x8a\x9cgfL" +
	"\x14\xa5b\xdd\x9b\x01\x12\xce \x9e\x9a7\xe3<\xc1u" +
	"\xb4y\xf7`\x9b>\x02\xe3\x18\xc5\xa7\x06\xbd\xd9\xe4\x14" +
	",\x82\x8a\xa5n\x0f\xdd$\x00x\xeb6\xc1\xee\x1eh" +
	"\x11\xec.\xbfK\xb0\xbb\xfcz\xc1\xee6\x92q\x9ab" +
	"\x1c\x02\xc0\x90\xfbQ\xe1~T*\x06\x8dU):Q" +
	"\xd3\xe9\xca\x86^\x80B{\xed\xe8\xe5YY\xe8\x8cA" +
	"\x1f\x97\x95\x8e\xe1K\xa0Q^\xc8*k\xc2\xa4s2" +
	"\x13g\xae9a\xe6\x8e\x16\x94b'\xc7\xf8\xedz:" +
	"\xcf\xa8F\xe6\xf4a\x96\xe0:'\xee<\xa5\xc6\xd5/" +
	"\xfb\x0a\xad\x9b\xaao\xe9}\xa5\x82\xfdNQ`\x85\x10" +
	"\xcbd\xb5\x1b\xe5\x00\xa2\x10\xec*\x85\x10V\x8d2&" +
	"\xea\x840\xe7*\xc1j\xad\xb0\xd7\x91}>\x16z%" +
	"\x09Q\x9d'\x04\xbb\xeb\xc9\xbe\x08\x0b\xed\x92\x8c\xa8." +
	"\x14\xf6\x1b\xc9\xbe\x02\x0b\x1dS\x00@]&\xd6YA" +
	"\xf6UB\x98+\x08v\xb7\xe0\x09\x80\xc4*\xb2\xaf\x15" +
	"\xc2\\A\xb0\xeb\x14\xc2\xd9Z\xb2\xdf)\x84\xb9\x82`" +
	"\xb7\x0e\xd7\x00$\xfa\xc8~/9R\xe9\xeau\x1b\xb0" +
	"\x1f q7\x99\x87PB\x02\xe3J\x00\x95a\x93_" +
	"\x86\xa4\xa3\xe9c\x99l\x1f\x0e\xd9,7d\xa5\x07|" +
	"-\x98\xabS\xf71\xccd\xef0\xcc\x01\xa1i\x95x" +
	"\x92a\x0aM\x1eb&\x8f'\xee\xf0\xf7X\xe3\xed/" +
	"\xdf\xb5J\xf46\x9b\x1b\x07\xf4\x91\x1e\xb4Y\xd2\xc8&" +
	"\xf2\x19\xbf\x9e\xadon\xcd\xdb6C\x93\xb7\xe9#=" +
	"6kv\xa7\x94&p\x96\xa1\xff\xc7\xb1\xdf\x1af-" +
	"z\x8eE\xc8\xed\xd2p\xbf\x9ec\xaeD\xee\x13\xed\xfc" +
	"\x07\x8b5\xde\xa9\x17\xeaJIS*U\x85\xb2\xba\x12" +
	"\x9c\xact\xd0\xecj\x07\"\xb7Joi\xaf&\xe44" +
	"y\\\xb5\x08v\x8b\x9b\xbc*Y\xd6\x94x\\\xba\xb4" +
	"\xf8\x94*`\xfb0\x8b\x11i\xe6Z\xc0\xad\xca\x04\"" +
	"\xe1\x06OD\x89\x0c\xe8\x9c]\xa5\xc0N\xfamR\xb3" +
	"a\xa6\x96\xb4\xae\xf5iC\xf5\x02\xaa*\x1b\x00B\xc9" +
	"<\xf5\x9a\x83|\x92\x17\xd8%\x14\xc5\x12R\xea\xa9n" +
	"\x14\xebnt!\xd0p!\x90\xb9\x10\xb8\xc1\x85\xc0\x0d" +
	".\x04\xde\xe5B\xa0\xe6B\xa0\xe6B\xa0\xe6B\xa0\xd6" +
	"\xf2\x7f\x15\xf4&\xc7)\x13\xcc\xa6\xf6c\x897\x10\xe7" +
	"\xf3{Y.\x9f\xe6\x98+*e\xfeC\x9e/a$" +
	"\x93\xcap\xef\xc5\x9b\xef5\xa6x\xf1\xf6\xd9P\xb5C" +
	"\xb7#\x14\x9b\x82\xea\xe4B\xa7\xf2\x04\xf5f\x8f\xcb\xa8" +
	"=]\xe0\xac\xd4\x90<E\xc6}2j\x87\x8b\xa0\x09" +
	"\xa0\x1c\xdc\xe5\x93\xa2\x02\x059\xf8\xd8\x09\x00\xed\x05\x19" +
	"\xb5\xef\x13\\\xd6\xb8\xaa\xd3\xa9~\x00\xede\x19\xb5\x1f" +
	"J\x08\xe0\xf6|\xaf\x13_\xfe\xbe\x8c\xdaO\xa4\xff}" +
	"D*\xa4I\x1f\x84\x8c\x0c\x1b\xdb\x92\x07#\xf2\x18Y" +
	"\xd9\xf77 \x9f\xfd-W\"\xcb\x92n\xc3\xe0\xeb\x92" +
	"\x96O\xd4%-\xf7\xba\xa4\x92\xbc\xb7\xa3\xc1'\xc6\x17" +
	"\xe5\xbd\x07{\xcb\xdb$De\xcf.Ow\x8f\x89\xdc" +
	"\xc6\x88\xf7g\x1f.\x1b\x8a\x0dSa.\x86\"\x927" +
	"\x0d\x8e\x11\xef\xadqA\x94H\xe6y\xb7\xbd\x96\x0d\x02" +
	"\xd2h\xe9\x05sa\xd4}G\xd8\xc3\xb0\xfc\xcd\xae8" +
	"\x9b\xff\x09\x00\x00\xff\xff\x11\x1cL\xe3"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_93337c65a295d42f,
		Nodes: []uint64{
			0x8460dac6abff7ed9,
			0x846f567433b186d1,
			0x8feb941d70f2a468,
			0x94d32947f136655e,
			0x95cdc661a6600137,
			0xa1f99f32eea02590,
			0xa363d226e178debd,
			0xa9a9bc941e963701,
			0xaa49811a4e3e2c59,
			0xaec9e089e87f1599,
			0xaf49ab9bbe76e375,
			0xb2bf3a5557791bc1,
			0xb33447204cdf022c,
			0xb492838c7fed50b0,
			0xb91010c363e568a4,
			0xba0c11cf818d29fd,
			0xbeb6ab7b0e6b585e,
			0xbfda1920aff38c07,
			0xc6880d1c13ec14dc,
			0xc75b5ef2e9b05c2d,
			0xc7c14e92e0cd461c,
			0xc8479e0f1798b1fc,
			0xcb20e21466098705,
			0xcf672ab379467704,
			0xd0290daf8de9f2b0,
			0xd1bfc1c9617d9453,
			0xd90939a58e404ff8,
			0xdb4674cbf3154bfa,
			0xe444f780b29541a7,
			0xe5484dc513ee11e0,
			0xf32d7a3fdc567bdb,
			0xf805d22fabb80702,
			0xfae5dcfccbb93a23,
		},
		Compressed: true,
	})
}
