// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type SoilCharacteristicData capnp.Struct

// SoilCharacteristicData_TypeID is the unique identifier for the type SoilCharacteristicData.
const SoilCharacteristicData_TypeID = 0xfc682227304e2281

func NewSoilCharacteristicData(s *capnp.Segment) (SoilCharacteristicData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicData(st), err
}

func NewRootSoilCharacteristicData(s *capnp.Segment) (SoilCharacteristicData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicData(st), err
}

func ReadRootSoilCharacteristicData(msg *capnp.Message) (SoilCharacteristicData, error) {
	root, err := msg.Root()
	return SoilCharacteristicData(root.Struct()), err
}

func (s SoilCharacteristicData) String() string {
	str, _ := text.Marshal(0xfc682227304e2281, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicData) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicData {
	return SoilCharacteristicData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicData) List() (SoilCharacteristicData_Data_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilCharacteristicData_Data_List(p.List()), err
}

func (s SoilCharacteristicData) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicData) SetList(v SoilCharacteristicData_Data_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated SoilCharacteristicData_Data_List, preferring placement in s's segment.
func (s SoilCharacteristicData) NewList(n int32) (SoilCharacteristicData_Data_List, error) {
	l, err := NewSoilCharacteristicData_Data_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilCharacteristicData_Data_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SoilCharacteristicData_List is a list of SoilCharacteristicData.
type SoilCharacteristicData_List = capnp.StructList[SoilCharacteristicData]

// NewSoilCharacteristicData creates a new list of SoilCharacteristicData.
func NewSoilCharacteristicData_List(s *capnp.Segment, sz int32) (SoilCharacteristicData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicData](l), err
}

// SoilCharacteristicData_Future is a wrapper for a SoilCharacteristicData promised by a client call.
type SoilCharacteristicData_Future struct{ *capnp.Future }

func (f SoilCharacteristicData_Future) Struct() (SoilCharacteristicData, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicData(p.Struct()), err
}

type SoilCharacteristicData_Data capnp.Struct

// SoilCharacteristicData_Data_TypeID is the unique identifier for the type SoilCharacteristicData_Data.
const SoilCharacteristicData_Data_TypeID = 0xeafaab57e025db63

func NewSoilCharacteristicData_Data(s *capnp.Segment) (SoilCharacteristicData_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicData_Data(st), err
}

func NewRootSoilCharacteristicData_Data(s *capnp.Segment) (SoilCharacteristicData_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicData_Data(st), err
}

func ReadRootSoilCharacteristicData_Data(msg *capnp.Message) (SoilCharacteristicData_Data, error) {
	root, err := msg.Root()
	return SoilCharacteristicData_Data(root.Struct()), err
}

func (s SoilCharacteristicData_Data) String() string {
	str, _ := text.Marshal(0xeafaab57e025db63, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicData_Data) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicData_Data) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicData_Data {
	return SoilCharacteristicData_Data(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicData_Data) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicData_Data) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicData_Data) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicData_Data) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicData_Data) SoilType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilCharacteristicData_Data) HasSoilType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicData_Data) SoilTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilCharacteristicData_Data) SetSoilType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilCharacteristicData_Data) SoilRawDensity() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s SoilCharacteristicData_Data) SetSoilRawDensity(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s SoilCharacteristicData_Data) AirCapacity() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s SoilCharacteristicData_Data) SetAirCapacity(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s SoilCharacteristicData_Data) FieldCapacity() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s SoilCharacteristicData_Data) SetFieldCapacity(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s SoilCharacteristicData_Data) NFieldCapacity() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s SoilCharacteristicData_Data) SetNFieldCapacity(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

// SoilCharacteristicData_Data_List is a list of SoilCharacteristicData_Data.
type SoilCharacteristicData_Data_List = capnp.StructList[SoilCharacteristicData_Data]

// NewSoilCharacteristicData_Data creates a new list of SoilCharacteristicData_Data.
func NewSoilCharacteristicData_Data_List(s *capnp.Segment, sz int32) (SoilCharacteristicData_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicData_Data](l), err
}

// SoilCharacteristicData_Data_Future is a wrapper for a SoilCharacteristicData_Data promised by a client call.
type SoilCharacteristicData_Data_Future struct{ *capnp.Future }

func (f SoilCharacteristicData_Data_Future) Struct() (SoilCharacteristicData_Data, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicData_Data(p.Struct()), err
}

type SoilCharacteristicModifier capnp.Struct

// SoilCharacteristicModifier_TypeID is the unique identifier for the type SoilCharacteristicModifier.
const SoilCharacteristicModifier_TypeID = 0xe4eb0a9bb0e5bb53

func NewSoilCharacteristicModifier(s *capnp.Segment) (SoilCharacteristicModifier, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicModifier(st), err
}

func NewRootSoilCharacteristicModifier(s *capnp.Segment) (SoilCharacteristicModifier, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicModifier(st), err
}

func ReadRootSoilCharacteristicModifier(msg *capnp.Message) (SoilCharacteristicModifier, error) {
	root, err := msg.Root()
	return SoilCharacteristicModifier(root.Struct()), err
}

func (s SoilCharacteristicModifier) String() string {
	str, _ := text.Marshal(0xe4eb0a9bb0e5bb53, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicModifier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicModifier) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicModifier {
	return SoilCharacteristicModifier(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicModifier) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicModifier) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicModifier) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicModifier) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicModifier) List() (SoilCharacteristicModifier_Data_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilCharacteristicModifier_Data_List(p.List()), err
}

func (s SoilCharacteristicModifier) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicModifier) SetList(v SoilCharacteristicModifier_Data_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated SoilCharacteristicModifier_Data_List, preferring placement in s's segment.
func (s SoilCharacteristicModifier) NewList(n int32) (SoilCharacteristicModifier_Data_List, error) {
	l, err := NewSoilCharacteristicModifier_Data_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilCharacteristicModifier_Data_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SoilCharacteristicModifier_List is a list of SoilCharacteristicModifier.
type SoilCharacteristicModifier_List = capnp.StructList[SoilCharacteristicModifier]

// NewSoilCharacteristicModifier creates a new list of SoilCharacteristicModifier.
func NewSoilCharacteristicModifier_List(s *capnp.Segment, sz int32) (SoilCharacteristicModifier_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicModifier](l), err
}

// SoilCharacteristicModifier_Future is a wrapper for a SoilCharacteristicModifier promised by a client call.
type SoilCharacteristicModifier_Future struct{ *capnp.Future }

func (f SoilCharacteristicModifier_Future) Struct() (SoilCharacteristicModifier, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicModifier(p.Struct()), err
}

type SoilCharacteristicModifier_Data capnp.Struct

// SoilCharacteristicModifier_Data_TypeID is the unique identifier for the type SoilCharacteristicModifier_Data.
const SoilCharacteristicModifier_Data_TypeID = 0xa968a46ccde8b1b4

func NewSoilCharacteristicModifier_Data(s *capnp.Segment) (SoilCharacteristicModifier_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicModifier_Data(st), err
}

func NewRootSoilCharacteristicModifier_Data(s *capnp.Segment) (SoilCharacteristicModifier_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicModifier_Data(st), err
}

func ReadRootSoilCharacteristicModifier_Data(msg *capnp.Message) (SoilCharacteristicModifier_Data, error) {
	root, err := msg.Root()
	return SoilCharacteristicModifier_Data(root.Struct()), err
}

func (s SoilCharacteristicModifier_Data) String() string {
	str, _ := text.Marshal(0xa968a46ccde8b1b4, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicModifier_Data) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicModifier_Data) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicModifier_Data {
	return SoilCharacteristicModifier_Data(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicModifier_Data) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicModifier_Data) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicModifier_Data) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicModifier_Data) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicModifier_Data) SoilType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilCharacteristicModifier_Data) HasSoilType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicModifier_Data) SoilTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilCharacteristicModifier_Data) SetSoilType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilCharacteristicModifier_Data) OrganicMatter() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s SoilCharacteristicModifier_Data) SetOrganicMatter(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s SoilCharacteristicModifier_Data) AirCapacity() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s SoilCharacteristicModifier_Data) SetAirCapacity(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s SoilCharacteristicModifier_Data) FieldCapacity() uint8 {
	return capnp.Struct(s).Uint8(5)
}

func (s SoilCharacteristicModifier_Data) SetFieldCapacity(v uint8) {
	capnp.Struct(s).SetUint8(5, v)
}

func (s SoilCharacteristicModifier_Data) NFieldCapacity() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s SoilCharacteristicModifier_Data) SetNFieldCapacity(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

// SoilCharacteristicModifier_Data_List is a list of SoilCharacteristicModifier_Data.
type SoilCharacteristicModifier_Data_List = capnp.StructList[SoilCharacteristicModifier_Data]

// NewSoilCharacteristicModifier_Data creates a new list of SoilCharacteristicModifier_Data.
func NewSoilCharacteristicModifier_Data_List(s *capnp.Segment, sz int32) (SoilCharacteristicModifier_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicModifier_Data](l), err
}

// SoilCharacteristicModifier_Data_Future is a wrapper for a SoilCharacteristicModifier_Data promised by a client call.
type SoilCharacteristicModifier_Data_Future struct{ *capnp.Future }

func (f SoilCharacteristicModifier_Data_Future) Struct() (SoilCharacteristicModifier_Data, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicModifier_Data(p.Struct()), err
}

type CapillaryRiseRate capnp.Struct

// CapillaryRiseRate_TypeID is the unique identifier for the type CapillaryRiseRate.
const CapillaryRiseRate_TypeID = 0x9b169bc96bb3d24b

func NewCapillaryRiseRate(s *capnp.Segment) (CapillaryRiseRate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapillaryRiseRate(st), err
}

func NewRootCapillaryRiseRate(s *capnp.Segment) (CapillaryRiseRate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapillaryRiseRate(st), err
}

func ReadRootCapillaryRiseRate(msg *capnp.Message) (CapillaryRiseRate, error) {
	root, err := msg.Root()
	return CapillaryRiseRate(root.Struct()), err
}

func (s CapillaryRiseRate) String() string {
	str, _ := text.Marshal(0x9b169bc96bb3d24b, capnp.Struct(s))
	return str
}

func (s CapillaryRiseRate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapillaryRiseRate) DecodeFromPtr(p capnp.Ptr) CapillaryRiseRate {
	return CapillaryRiseRate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapillaryRiseRate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapillaryRiseRate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapillaryRiseRate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapillaryRiseRate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapillaryRiseRate) List() (CapillaryRiseRate_Data_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CapillaryRiseRate_Data_List(p.List()), err
}

func (s CapillaryRiseRate) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapillaryRiseRate) SetList(v CapillaryRiseRate_Data_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated CapillaryRiseRate_Data_List, preferring placement in s's segment.
func (s CapillaryRiseRate) NewList(n int32) (CapillaryRiseRate_Data_List, error) {
	l, err := NewCapillaryRiseRate_Data_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CapillaryRiseRate_Data_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapillaryRiseRate_List is a list of CapillaryRiseRate.
type CapillaryRiseRate_List = capnp.StructList[CapillaryRiseRate]

// NewCapillaryRiseRate creates a new list of CapillaryRiseRate.
func NewCapillaryRiseRate_List(s *capnp.Segment, sz int32) (CapillaryRiseRate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapillaryRiseRate](l), err
}

// CapillaryRiseRate_Future is a wrapper for a CapillaryRiseRate promised by a client call.
type CapillaryRiseRate_Future struct{ *capnp.Future }

func (f CapillaryRiseRate_Future) Struct() (CapillaryRiseRate, error) {
	p, err := f.Future.Ptr()
	return CapillaryRiseRate(p.Struct()), err
}

type CapillaryRiseRate_Data capnp.Struct

// CapillaryRiseRate_Data_TypeID is the unique identifier for the type CapillaryRiseRate_Data.
const CapillaryRiseRate_Data_TypeID = 0xb78a89c58fad885d

func NewCapillaryRiseRate_Data(s *capnp.Segment) (CapillaryRiseRate_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapillaryRiseRate_Data(st), err
}

func NewRootCapillaryRiseRate_Data(s *capnp.Segment) (CapillaryRiseRate_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapillaryRiseRate_Data(st), err
}

func ReadRootCapillaryRiseRate_Data(msg *capnp.Message) (CapillaryRiseRate_Data, error) {
	root, err := msg.Root()
	return CapillaryRiseRate_Data(root.Struct()), err
}

func (s CapillaryRiseRate_Data) String() string {
	str, _ := text.Marshal(0xb78a89c58fad885d, capnp.Struct(s))
	return str
}

func (s CapillaryRiseRate_Data) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapillaryRiseRate_Data) DecodeFromPtr(p capnp.Ptr) CapillaryRiseRate_Data {
	return CapillaryRiseRate_Data(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapillaryRiseRate_Data) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapillaryRiseRate_Data) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapillaryRiseRate_Data) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapillaryRiseRate_Data) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapillaryRiseRate_Data) SoilType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapillaryRiseRate_Data) HasSoilType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapillaryRiseRate_Data) SoilTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapillaryRiseRate_Data) SetSoilType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapillaryRiseRate_Data) Distance() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s CapillaryRiseRate_Data) SetDistance(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s CapillaryRiseRate_Data) Rate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CapillaryRiseRate_Data) SetRate(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// CapillaryRiseRate_Data_List is a list of CapillaryRiseRate_Data.
type CapillaryRiseRate_Data_List = capnp.StructList[CapillaryRiseRate_Data]

// NewCapillaryRiseRate_Data creates a new list of CapillaryRiseRate_Data.
func NewCapillaryRiseRate_Data_List(s *capnp.Segment, sz int32) (CapillaryRiseRate_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapillaryRiseRate_Data](l), err
}

// CapillaryRiseRate_Data_Future is a wrapper for a CapillaryRiseRate_Data promised by a client call.
type CapillaryRiseRate_Data_Future struct{ *capnp.Future }

func (f CapillaryRiseRate_Data_Future) Struct() (CapillaryRiseRate_Data, error) {
	p, err := f.Future.Ptr()
	return CapillaryRiseRate_Data(p.Struct()), err
}

const schema_f83caca0747996ab = "x\xda\xbcT\xcdk\x14K\x1c\xfcUw\xef\xe6\x11\x92" +
	"\x977\xcc\xf2\x1e\xef\xb4\x10\x94@\x0e\xf9@\x10\x0c\xc2" +
	"\x0a\xbb\x0a~D\xb6\x13\x83\x1e\x0c\xd2\xceNL\xe3d" +
	"w\x98\x19\x90\x0dz\x10\x0c\xc4`\xd0\x83\x8a\x12\x039" +
	"(\x18\xa2\xa8Q\xf0\xe0\xd9C\x0e^\x82'\xbd((" +
	"\xf8\xf1\x0fh\x10F:\x1b&+n \xc9\xc1[S" +
	"\xfd\xeb\xae\xea\xaa\x9a\xe9y\x8d}\xa2\xb7\xb5C\x10\x93" +
	"=\xa9t|x\xf9\xe9\xd9\xa5\x99\x7fg\xc8\xca\"^" +
	"\xb8Y\x8d\xe6\x1e\xec\xfdF)4\x11\xed\xfa\x8e)\xd8" +
	"\x16\xfb\x8f\xc8\xfe\x9f\xe5\x08\xf1\xb3'\x9f^ywG" +
	"\xe7I\xf6\x01\xf1\xe0\x8b\x8f\x8fg\x9a\xbf~X\x9b>" +
	"\xc8V`\xbb\xcc,\x15\xcb\x82\x10\x0fO>\xbc\xfa\xf2" +
	"\xf2\xd4s\x92\xbd\xc0:Sm|\x82/\xc2\x9e\xe5M" +
	"D\xf6m\xfe\x88\xea\xaek\xa0d\x8fX\x86=$\x8c" +
	"\x92aa\x948ow\xbe;\xbe\xb0\xf2\x85\xe4n " +
	"\xbe\xd8~\xb4\xa7\xa3}\xf4\xc7\xda\xf4\xb4x\x03{^" +
	"\x98\xe5=\xb1\xaa$\x19hp\xf7Rj\x11\xf6\xfb\x94" +
	"\xb9\xfbs*G\xf9x\xacRr\xbd\xee\xb1J\xaa\xac" +
	"\x1d\xd5\x1dV\xb4w\xcaW\x81\x1a\x0b\xbb\x1c\xe5\x97\xfd" +
	"\xbe\xbc\xf2\xb5\xe7\xa9\xa0:\xa0Cw@E.\x91\x14" +
	"\xa8{\xae\x85\xce\xb6\x82\x8a\x94\x14\\\x10\x09\x10Y\xad" +
	"\x9dD\xf2/\x0e\xb9\x83\xa1\xcd\xd3a\x84\xbf\x09E\x0e" +
	"\xfc\xb3~\x8c`\xc0\x84>\xbd\x01\xfd`E{\xf9Q" +
	"\x15('r\x03\x1dF\xda\xe9\xaf\x94\xf4\x88vsA" +
	"\x97a-\x022\x93\x10_8D$\xcfs\xc8I\x06" +
	" \x03\x83M\x04D\xf2\x12\x87\xbc\xc6`1\x91\x01#" +
	"\xb2\xa6O\x13\xc9+\x1c\xf2\x16\x83\xc5S\x19p\"\xeb" +
	"\x86\x99\xbc\xce!\xe7\x18,\x91\xce@\x10Y\xb3\xe3D" +
	"\xf2\x0e\x87\xbc\xcf\x10\x1b}\xc7\xaa\xbeKDh!\x86" +
	"\x16B\\\x09\xce\xa8\xb2v\xfa)\xab\xa2\xc8\x0d\xd0L" +
	"\x0c\xcd\x84X\xe9 \xaf|\xe5P\x93\x8e\xaaH\x13C" +
	"\x9a\x10\x8fh\xd7+\xe5\x95OY\xe5\xd4\xe3\xe5\x03\xb5" +
	"\x0d\xca\xf9\xbfnl9\x9fl\xe2KK\xe2\xcb~\xe3" +
	"K\x81C\x16\xd7}\xe97\xd8\x11\x0ey\xc2\xf8\x82\x9a" +
	"/C&\xb9\"\x87<\xb9\xc1kK:\x8cT\xd9Y" +
	"\xc5\xd6$\xb6\x05*r\x93go;P\x04\xab\xbdJ" +
	"\xbe\xba\xad\xf5*9\xb6\xed^\x19\xae\xae\x82\xe2\x9b\xea" +
	"\xd4x}\xa7X\xa3N\xf1F\x9d\x12\x9b\xec\x94\xc1\x06" +
	"\xd4\xb9\x02\xe5\xdcrh\xda\xc0\x89\x81\xff\xb9R\xfd\xe6" +
	"N\xd6\xa9E\x81\xba\x9f\xd1\xd6\x02J\x8e\xd5\x02\xfa\x19" +
	"\x00\x00\xff\xff|S\x82\x81"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f83caca0747996ab,
		Nodes: []uint64{
			0x9b169bc96bb3d24b,
			0xa968a46ccde8b1b4,
			0xb78a89c58fad885d,
			0xe4eb0a9bb0e5bb53,
			0xeafaab57e025db63,
			0xfc682227304e2281,
		},
		Compressed: true,
	})
}
