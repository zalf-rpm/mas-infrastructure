// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/management"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	service "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/service"
	soil "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/soil"
)

type XYResult capnp.Struct

// XYResult_TypeID is the unique identifier for the type XYResult.
const XYResult_TypeID = 0x851d47c6ccdecf08

func NewXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult(st), err
}

func NewRootXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult(st), err
}

func ReadRootXYResult(msg *capnp.Message) (XYResult, error) {
	root, err := msg.Root()
	return XYResult(root.Struct()), err
}

func (s XYResult) String() string {
	str, _ := text.Marshal(0x851d47c6ccdecf08, capnp.Struct(s))
	return str
}

func (s XYResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (XYResult) DecodeFromPtr(p capnp.Ptr) XYResult {
	return XYResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s XYResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s XYResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s XYResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s XYResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s XYResult) Xs() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s XYResult) HasXs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s XYResult) SetXs(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewXs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s XYResult) Ys() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.Float64List(p.List()), err
}

func (s XYResult) HasYs() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s XYResult) SetYs(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewYs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// XYResult_List is a list of XYResult.
type XYResult_List = capnp.StructList[XYResult]

// NewXYResult creates a new list of XYResult.
func NewXYResult_List(s *capnp.Segment, sz int32) (XYResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[XYResult](l), err
}

// XYResult_Future is a wrapper for a XYResult promised by a client call.
type XYResult_Future struct{ *capnp.Future }

func (f XYResult_Future) Struct() (XYResult, error) {
	p, err := f.Future.Ptr()
	return XYResult(p.Struct()), err
}

type Stat capnp.Struct

// Stat_TypeID is the unique identifier for the type Stat.
const Stat_TypeID = 0xa6be2e805ea10a68

func NewStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat(st), err
}

func NewRootStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat(st), err
}

func ReadRootStat(msg *capnp.Message) (Stat, error) {
	root, err := msg.Root()
	return Stat(root.Struct()), err
}

func (s Stat) String() string {
	str, _ := text.Marshal(0xa6be2e805ea10a68, capnp.Struct(s))
	return str
}

func (s Stat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Stat) DecodeFromPtr(p capnp.Ptr) Stat {
	return Stat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Stat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Stat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Stat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Stat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Stat) Type() Stat_Type {
	return Stat_Type(capnp.Struct(s).Uint16(0) ^ 3)
}

func (s Stat) SetType(v Stat_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v)^3)
}

func (s Stat) Vs() (capnp.Float64List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float64List(p.List()), err
}

func (s Stat) HasVs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Stat) SetVs(v capnp.Float64List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewVs sets the vs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Stat) NewVs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Stat_List is a list of Stat.
type Stat_List = capnp.StructList[Stat]

// NewStat creates a new list of Stat.
func NewStat_List(s *capnp.Segment, sz int32) (Stat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Stat](l), err
}

// Stat_Future is a wrapper for a Stat promised by a client call.
type Stat_Future struct{ *capnp.Future }

func (f Stat_Future) Struct() (Stat, error) {
	p, err := f.Future.Ptr()
	return Stat(p.Struct()), err
}

type Stat_Type uint16

// Stat_Type_TypeID is the unique identifier for the type Stat_Type.
const Stat_Type_TypeID = 0xbd33bb6d8cbd9ed2

// Values of Stat_Type.
const (
	Stat_Type_min    Stat_Type = 0
	Stat_Type_max    Stat_Type = 1
	Stat_Type_sd     Stat_Type = 2
	Stat_Type_avg    Stat_Type = 3
	Stat_Type_median Stat_Type = 4
)

// String returns the enum's constant name.
func (c Stat_Type) String() string {
	switch c {
	case Stat_Type_min:
		return "min"
	case Stat_Type_max:
		return "max"
	case Stat_Type_sd:
		return "sd"
	case Stat_Type_avg:
		return "avg"
	case Stat_Type_median:
		return "median"

	default:
		return ""
	}
}

// Stat_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Stat_TypeFromString(c string) Stat_Type {
	switch c {
	case "min":
		return Stat_Type_min
	case "max":
		return Stat_Type_max
	case "sd":
		return Stat_Type_sd
	case "avg":
		return Stat_Type_avg
	case "median":
		return Stat_Type_median

	default:
		return 0
	}
}

type Stat_Type_List = capnp.EnumList[Stat_Type]

func NewStat_Type_List(s *capnp.Segment, sz int32) (Stat_Type_List, error) {
	return capnp.NewEnumList[Stat_Type](s, sz)
}

type XYPlusResult capnp.Struct

// XYPlusResult_TypeID is the unique identifier for the type XYPlusResult.
const XYPlusResult_TypeID = 0x8f86b66260d02d1d

func NewXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult(st), err
}

func NewRootXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult(st), err
}

func ReadRootXYPlusResult(msg *capnp.Message) (XYPlusResult, error) {
	root, err := msg.Root()
	return XYPlusResult(root.Struct()), err
}

func (s XYPlusResult) String() string {
	str, _ := text.Marshal(0x8f86b66260d02d1d, capnp.Struct(s))
	return str
}

func (s XYPlusResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (XYPlusResult) DecodeFromPtr(p capnp.Ptr) XYPlusResult {
	return XYPlusResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s XYPlusResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s XYPlusResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s XYPlusResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s XYPlusResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s XYPlusResult) Xy() (XYResult, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return XYResult(p.Struct()), err
}

func (s XYPlusResult) HasXy() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s XYPlusResult) SetXy(v XYResult) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewXy sets the xy field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s XYPlusResult) NewXy() (XYResult, error) {
	ss, err := NewXYResult(capnp.Struct(s).Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s XYPlusResult) Stats() (Stat_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Stat_List(p.List()), err
}

func (s XYPlusResult) HasStats() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s XYPlusResult) SetStats(v Stat_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewStats sets the stats field to a newly
// allocated Stat_List, preferring placement in s's segment.
func (s XYPlusResult) NewStats(n int32) (Stat_List, error) {
	l, err := NewStat_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Stat_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// XYPlusResult_List is a list of XYPlusResult.
type XYPlusResult_List = capnp.StructList[XYPlusResult]

// NewXYPlusResult creates a new list of XYPlusResult.
func NewXYPlusResult_List(s *capnp.Segment, sz int32) (XYPlusResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[XYPlusResult](l), err
}

// XYPlusResult_Future is a wrapper for a XYPlusResult promised by a client call.
type XYPlusResult_Future struct{ *capnp.Future }

func (f XYPlusResult_Future) Struct() (XYPlusResult, error) {
	p, err := f.Future.Ptr()
	return XYPlusResult(p.Struct()), err
}
func (p XYPlusResult_Future) Xy() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance capnp.Client

// ClimateInstance_TypeID is the unique identifier for the type ClimateInstance.
const ClimateInstance_TypeID = 0xdfcfeb783c4948fc

func (c ClimateInstance) Run(ctx context.Context, params func(ClimateInstance_run_Params) error) (ClimateInstance_run_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_run_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ClimateInstance_run_Results_Future{Future: ans.Future()}, release

}

func (c ClimateInstance) RunSet(ctx context.Context, params func(ClimateInstance_runSet_Params) error) (ClimateInstance_runSet_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_runSet_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ClimateInstance_runSet_Results_Future{Future: ans.Future()}, release

}

func (c ClimateInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c ClimateInstance) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ClimateInstance) String() string {
	return "ClimateInstance(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ClimateInstance) AddRef() ClimateInstance {
	return ClimateInstance(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ClimateInstance) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ClimateInstance) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ClimateInstance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ClimateInstance) DecodeFromPtr(p capnp.Ptr) ClimateInstance {
	return ClimateInstance(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ClimateInstance) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ClimateInstance) IsSame(other ClimateInstance) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ClimateInstance) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ClimateInstance) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ClimateInstance_Server is a ClimateInstance with a local implementation.
type ClimateInstance_Server interface {
	Run(context.Context, ClimateInstance_run) error

	RunSet(context.Context, ClimateInstance_runSet) error

	Info(context.Context, common.Identifiable_info) error
}

// ClimateInstance_NewServer creates a new Server from an implementation of ClimateInstance_Server.
func ClimateInstance_NewServer(s ClimateInstance_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClimateInstance_Methods(nil, s), s, c)
}

// ClimateInstance_ServerToClient creates a new Client from an implementation of ClimateInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func ClimateInstance_ServerToClient(s ClimateInstance_Server) ClimateInstance {
	return ClimateInstance(capnp.NewClient(ClimateInstance_NewServer(s)))
}

// ClimateInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClimateInstance_Methods(methods []server.Method, s ClimateInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ClimateInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RunSet(ctx, ClimateInstance_runSet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ClimateInstance_run holds the state for a server call to ClimateInstance.run.
// See server.Call for documentation.
type ClimateInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_run) Args() ClimateInstance_run_Params {
	return ClimateInstance_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ClimateInstance_run) AllocResults() (ClimateInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results(r), err
}

// ClimateInstance_runSet holds the state for a server call to ClimateInstance.runSet.
// See server.Call for documentation.
type ClimateInstance_runSet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_runSet) Args() ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ClimateInstance_runSet) AllocResults() (ClimateInstance_runSet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results(r), err
}

// ClimateInstance_List is a list of ClimateInstance.
type ClimateInstance_List = capnp.CapList[ClimateInstance]

// NewClimateInstance creates a new list of ClimateInstance.
func NewClimateInstance_List(s *capnp.Segment, sz int32) (ClimateInstance_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ClimateInstance](l), err
}

type ClimateInstance_run_Params capnp.Struct

// ClimateInstance_run_Params_TypeID is the unique identifier for the type ClimateInstance_run_Params.
const ClimateInstance_run_Params_TypeID = 0xdf787fd9d51f235b

func NewClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params(st), err
}

func NewRootClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params(st), err
}

func ReadRootClimateInstance_run_Params(msg *capnp.Message) (ClimateInstance_run_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Params(root.Struct()), err
}

func (s ClimateInstance_run_Params) String() string {
	str, _ := text.Marshal(0xdf787fd9d51f235b, capnp.Struct(s))
	return str
}

func (s ClimateInstance_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClimateInstance_run_Params) DecodeFromPtr(p capnp.Ptr) ClimateInstance_run_Params {
	return ClimateInstance_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClimateInstance_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClimateInstance_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClimateInstance_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClimateInstance_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClimateInstance_run_Params) TimeSeries() climate.TimeSeries {
	p, _ := capnp.Struct(s).Ptr(0)
	return climate.TimeSeries(p.Interface().Client())
}

func (s ClimateInstance_run_Params) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClimateInstance_run_Params) SetTimeSeries(v climate.TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ClimateInstance_run_Params_List is a list of ClimateInstance_run_Params.
type ClimateInstance_run_Params_List = capnp.StructList[ClimateInstance_run_Params]

// NewClimateInstance_run_Params creates a new list of ClimateInstance_run_Params.
func NewClimateInstance_run_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClimateInstance_run_Params](l), err
}

// ClimateInstance_run_Params_Future is a wrapper for a ClimateInstance_run_Params promised by a client call.
type ClimateInstance_run_Params_Future struct{ *capnp.Future }

func (f ClimateInstance_run_Params_Future) Struct() (ClimateInstance_run_Params, error) {
	p, err := f.Future.Ptr()
	return ClimateInstance_run_Params(p.Struct()), err
}
func (p ClimateInstance_run_Params_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries(p.Future.Field(0, nil).Client())
}

type ClimateInstance_run_Results capnp.Struct

// ClimateInstance_run_Results_TypeID is the unique identifier for the type ClimateInstance_run_Results.
const ClimateInstance_run_Results_TypeID = 0xcc39e47cdead74c4

func NewClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results(st), err
}

func NewRootClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results(st), err
}

func ReadRootClimateInstance_run_Results(msg *capnp.Message) (ClimateInstance_run_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Results(root.Struct()), err
}

func (s ClimateInstance_run_Results) String() string {
	str, _ := text.Marshal(0xcc39e47cdead74c4, capnp.Struct(s))
	return str
}

func (s ClimateInstance_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClimateInstance_run_Results) DecodeFromPtr(p capnp.Ptr) ClimateInstance_run_Results {
	return ClimateInstance_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClimateInstance_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClimateInstance_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClimateInstance_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClimateInstance_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClimateInstance_run_Results) Result() (XYResult, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return XYResult(p.Struct()), err
}

func (s ClimateInstance_run_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClimateInstance_run_Results) SetResult(v XYResult) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s ClimateInstance_run_Results) NewResult() (XYResult, error) {
	ss, err := NewXYResult(capnp.Struct(s).Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClimateInstance_run_Results_List is a list of ClimateInstance_run_Results.
type ClimateInstance_run_Results_List = capnp.StructList[ClimateInstance_run_Results]

// NewClimateInstance_run_Results creates a new list of ClimateInstance_run_Results.
func NewClimateInstance_run_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClimateInstance_run_Results](l), err
}

// ClimateInstance_run_Results_Future is a wrapper for a ClimateInstance_run_Results promised by a client call.
type ClimateInstance_run_Results_Future struct{ *capnp.Future }

func (f ClimateInstance_run_Results_Future) Struct() (ClimateInstance_run_Results, error) {
	p, err := f.Future.Ptr()
	return ClimateInstance_run_Results(p.Struct()), err
}
func (p ClimateInstance_run_Results_Future) Result() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance_runSet_Params capnp.Struct

// ClimateInstance_runSet_Params_TypeID is the unique identifier for the type ClimateInstance_runSet_Params.
const ClimateInstance_runSet_Params_TypeID = 0xaa9d146226037822

func NewClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params(st), err
}

func NewRootClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params(st), err
}

func ReadRootClimateInstance_runSet_Params(msg *capnp.Message) (ClimateInstance_runSet_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Params(root.Struct()), err
}

func (s ClimateInstance_runSet_Params) String() string {
	str, _ := text.Marshal(0xaa9d146226037822, capnp.Struct(s))
	return str
}

func (s ClimateInstance_runSet_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClimateInstance_runSet_Params) DecodeFromPtr(p capnp.Ptr) ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClimateInstance_runSet_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClimateInstance_runSet_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClimateInstance_runSet_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClimateInstance_runSet_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClimateInstance_runSet_Params) Dataset() (climate.TimeSeries_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return climate.TimeSeries_List(p.List()), err
}

func (s ClimateInstance_runSet_Params) HasDataset() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClimateInstance_runSet_Params) SetDataset(v climate.TimeSeries_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewDataset sets the dataset field to a newly
// allocated climate.TimeSeries_List, preferring placement in s's segment.
func (s ClimateInstance_runSet_Params) NewDataset(n int32) (climate.TimeSeries_List, error) {
	l, err := climate.NewTimeSeries_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return climate.TimeSeries_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ClimateInstance_runSet_Params_List is a list of ClimateInstance_runSet_Params.
type ClimateInstance_runSet_Params_List = capnp.StructList[ClimateInstance_runSet_Params]

// NewClimateInstance_runSet_Params creates a new list of ClimateInstance_runSet_Params.
func NewClimateInstance_runSet_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClimateInstance_runSet_Params](l), err
}

// ClimateInstance_runSet_Params_Future is a wrapper for a ClimateInstance_runSet_Params promised by a client call.
type ClimateInstance_runSet_Params_Future struct{ *capnp.Future }

func (f ClimateInstance_runSet_Params_Future) Struct() (ClimateInstance_runSet_Params, error) {
	p, err := f.Future.Ptr()
	return ClimateInstance_runSet_Params(p.Struct()), err
}

type ClimateInstance_runSet_Results capnp.Struct

// ClimateInstance_runSet_Results_TypeID is the unique identifier for the type ClimateInstance_runSet_Results.
const ClimateInstance_runSet_Results_TypeID = 0xe22282cb3449bb4a

func NewClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results(st), err
}

func NewRootClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results(st), err
}

func ReadRootClimateInstance_runSet_Results(msg *capnp.Message) (ClimateInstance_runSet_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Results(root.Struct()), err
}

func (s ClimateInstance_runSet_Results) String() string {
	str, _ := text.Marshal(0xe22282cb3449bb4a, capnp.Struct(s))
	return str
}

func (s ClimateInstance_runSet_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ClimateInstance_runSet_Results) DecodeFromPtr(p capnp.Ptr) ClimateInstance_runSet_Results {
	return ClimateInstance_runSet_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ClimateInstance_runSet_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ClimateInstance_runSet_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ClimateInstance_runSet_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ClimateInstance_runSet_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ClimateInstance_runSet_Results) Result() (XYPlusResult, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return XYPlusResult(p.Struct()), err
}

func (s ClimateInstance_runSet_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ClimateInstance_runSet_Results) SetResult(v XYPlusResult) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYPlusResult struct, preferring placement in s's segment.
func (s ClimateInstance_runSet_Results) NewResult() (XYPlusResult, error) {
	ss, err := NewXYPlusResult(capnp.Struct(s).Segment())
	if err != nil {
		return XYPlusResult{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ClimateInstance_runSet_Results_List is a list of ClimateInstance_runSet_Results.
type ClimateInstance_runSet_Results_List = capnp.StructList[ClimateInstance_runSet_Results]

// NewClimateInstance_runSet_Results creates a new list of ClimateInstance_runSet_Results.
func NewClimateInstance_runSet_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ClimateInstance_runSet_Results](l), err
}

// ClimateInstance_runSet_Results_Future is a wrapper for a ClimateInstance_runSet_Results promised by a client call.
type ClimateInstance_runSet_Results_Future struct{ *capnp.Future }

func (f ClimateInstance_runSet_Results_Future) Struct() (ClimateInstance_runSet_Results, error) {
	p, err := f.Future.Ptr()
	return ClimateInstance_runSet_Results(p.Struct()), err
}
func (p ClimateInstance_runSet_Results_Future) Result() XYPlusResult_Future {
	return XYPlusResult_Future{Future: p.Future.Field(0, nil)}
}

type Env capnp.Struct

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xb7fc866ef1127f7c

func NewEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env(st), err
}

func NewRootEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env(st), err
}

func ReadRootEnv(msg *capnp.Message) (Env, error) {
	root, err := msg.Root()
	return Env(root.Struct()), err
}

func (s Env) String() string {
	str, _ := text.Marshal(0xb7fc866ef1127f7c, capnp.Struct(s))
	return str
}

func (s Env) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Env) DecodeFromPtr(p capnp.Ptr) Env {
	return Env(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Env) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Env) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Env) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Env) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Env) Rest() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Env) HasRest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Env) SetRest(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}
func (s Env) TimeSeries() climate.TimeSeries {
	p, _ := capnp.Struct(s).Ptr(1)
	return climate.TimeSeries(p.Interface().Client())
}

func (s Env) HasTimeSeries() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Env) SetTimeSeries(v climate.TimeSeries) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

func (s Env) SoilProfile() soil.Profile {
	p, _ := capnp.Struct(s).Ptr(2)
	return soil.Profile(p.Interface().Client())
}

func (s Env) HasSoilProfile() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Env) SetSoilProfile(v soil.Profile) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(2, in.ToPtr())
}

func (s Env) MgmtEvents() (management.Event_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return management.Event_List(p.List()), err
}

func (s Env) HasMgmtEvents() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Env) SetMgmtEvents(v management.Event_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewMgmtEvents sets the mgmtEvents field to a newly
// allocated management.Event_List, preferring placement in s's segment.
func (s Env) NewMgmtEvents(n int32) (management.Event_List, error) {
	l, err := management.NewEvent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return management.Event_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Env_List is a list of Env.
type Env_List = capnp.StructList[Env]

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Env](l), err
}

// Env_Future is a wrapper for a Env promised by a client call.
type Env_Future struct{ *capnp.Future }

func (f Env_Future) Struct() (Env, error) {
	p, err := f.Future.Ptr()
	return Env(p.Struct()), err
}
func (p Env_Future) Rest() *capnp.Future {
	return p.Future.Field(0, nil)
}
func (p Env_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries(p.Future.Field(1, nil).Client())
}

func (p Env_Future) SoilProfile() soil.Profile {
	return soil.Profile(p.Future.Field(2, nil).Client())
}

type EnvInstance capnp.Client

// EnvInstance_TypeID is the unique identifier for the type EnvInstance.
const EnvInstance_TypeID = 0xa5feedafa5ec5c4a

func (c EnvInstance) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release

}

func (c EnvInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c EnvInstance) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c EnvInstance) Stop(ctx context.Context, params func(service.Stopable_stop_Params) error) (service.Stopable_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(service.Stopable_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return service.Stopable_stop_Results_Future{Future: ans.Future()}, release

}

func (c EnvInstance) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c EnvInstance) String() string {
	return "EnvInstance(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c EnvInstance) AddRef() EnvInstance {
	return EnvInstance(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c EnvInstance) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c EnvInstance) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c EnvInstance) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EnvInstance) DecodeFromPtr(p capnp.Ptr) EnvInstance {
	return EnvInstance(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c EnvInstance) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c EnvInstance) IsSame(other EnvInstance) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c EnvInstance) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c EnvInstance) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A EnvInstance_Server is a EnvInstance with a local implementation.
type EnvInstance_Server interface {
	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, service.Stopable_stop) error
}

// EnvInstance_NewServer creates a new Server from an implementation of EnvInstance_Server.
func EnvInstance_NewServer(s EnvInstance_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstance_Methods(nil, s), s, c)
}

// EnvInstance_ServerToClient creates a new Client from an implementation of EnvInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstance_ServerToClient(s EnvInstance_Server) EnvInstance {
	return EnvInstance(capnp.NewClient(EnvInstance_NewServer(s)))
}

// EnvInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstance_Methods(methods []server.Method, s EnvInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, service.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstance_run holds the state for a server call to EnvInstance.run.
// See server.Call for documentation.
type EnvInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstance_run) Args() EnvInstance_run_Params {
	return EnvInstance_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EnvInstance_run) AllocResults() (EnvInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results(r), err
}

// EnvInstance_List is a list of EnvInstance.
type EnvInstance_List = capnp.CapList[EnvInstance]

// NewEnvInstance creates a new list of EnvInstance.
func NewEnvInstance_List(s *capnp.Segment, sz int32) (EnvInstance_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EnvInstance](l), err
}

type EnvInstance_run_Params capnp.Struct

// EnvInstance_run_Params_TypeID is the unique identifier for the type EnvInstance_run_Params.
const EnvInstance_run_Params_TypeID = 0x811895634b6bd959

func NewEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params(st), err
}

func NewRootEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params(st), err
}

func ReadRootEnvInstance_run_Params(msg *capnp.Message) (EnvInstance_run_Params, error) {
	root, err := msg.Root()
	return EnvInstance_run_Params(root.Struct()), err
}

func (s EnvInstance_run_Params) String() string {
	str, _ := text.Marshal(0x811895634b6bd959, capnp.Struct(s))
	return str
}

func (s EnvInstance_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvInstance_run_Params) DecodeFromPtr(p capnp.Ptr) EnvInstance_run_Params {
	return EnvInstance_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvInstance_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvInstance_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvInstance_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvInstance_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvInstance_run_Params) Env() (Env, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Env(p.Struct()), err
}

func (s EnvInstance_run_Params) HasEnv() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvInstance_run_Params) SetEnv(v Env) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Env struct, preferring placement in s's segment.
func (s EnvInstance_run_Params) NewEnv() (Env, error) {
	ss, err := NewEnv(capnp.Struct(s).Segment())
	if err != nil {
		return Env{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// EnvInstance_run_Params_List is a list of EnvInstance_run_Params.
type EnvInstance_run_Params_List = capnp.StructList[EnvInstance_run_Params]

// NewEnvInstance_run_Params creates a new list of EnvInstance_run_Params.
func NewEnvInstance_run_Params_List(s *capnp.Segment, sz int32) (EnvInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EnvInstance_run_Params](l), err
}

// EnvInstance_run_Params_Future is a wrapper for a EnvInstance_run_Params promised by a client call.
type EnvInstance_run_Params_Future struct{ *capnp.Future }

func (f EnvInstance_run_Params_Future) Struct() (EnvInstance_run_Params, error) {
	p, err := f.Future.Ptr()
	return EnvInstance_run_Params(p.Struct()), err
}
func (p EnvInstance_run_Params_Future) Env() Env_Future {
	return Env_Future{Future: p.Future.Field(0, nil)}
}

type EnvInstance_run_Results capnp.Struct

// EnvInstance_run_Results_TypeID is the unique identifier for the type EnvInstance_run_Results.
const EnvInstance_run_Results_TypeID = 0xa931ae5cae90ece0

func NewEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results(st), err
}

func NewRootEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results(st), err
}

func ReadRootEnvInstance_run_Results(msg *capnp.Message) (EnvInstance_run_Results, error) {
	root, err := msg.Root()
	return EnvInstance_run_Results(root.Struct()), err
}

func (s EnvInstance_run_Results) String() string {
	str, _ := text.Marshal(0xa931ae5cae90ece0, capnp.Struct(s))
	return str
}

func (s EnvInstance_run_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvInstance_run_Results) DecodeFromPtr(p capnp.Ptr) EnvInstance_run_Results {
	return EnvInstance_run_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvInstance_run_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvInstance_run_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvInstance_run_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvInstance_run_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvInstance_run_Results) Result() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s EnvInstance_run_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvInstance_run_Results) SetResult(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// EnvInstance_run_Results_List is a list of EnvInstance_run_Results.
type EnvInstance_run_Results_List = capnp.StructList[EnvInstance_run_Results]

// NewEnvInstance_run_Results creates a new list of EnvInstance_run_Results.
func NewEnvInstance_run_Results_List(s *capnp.Segment, sz int32) (EnvInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EnvInstance_run_Results](l), err
}

// EnvInstance_run_Results_Future is a wrapper for a EnvInstance_run_Results promised by a client call.
type EnvInstance_run_Results_Future struct{ *capnp.Future }

func (f EnvInstance_run_Results_Future) Struct() (EnvInstance_run_Results, error) {
	p, err := f.Future.Ptr()
	return EnvInstance_run_Results(p.Struct()), err
}
func (p EnvInstance_run_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type EnvInstanceProxy capnp.Client

// EnvInstanceProxy_TypeID is the unique identifier for the type EnvInstanceProxy.
const EnvInstanceProxy_TypeID = 0x87cbebfc1164a24a

func (c EnvInstanceProxy) RegisterEnvInstance(ctx context.Context, params func(EnvInstanceProxy_registerEnvInstance_Params) error) (EnvInstanceProxy_registerEnvInstance_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_registerEnvInstance_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EnvInstanceProxy_registerEnvInstance_Results_Future{Future: ans.Future()}, release

}

func (c EnvInstanceProxy) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release

}

func (c EnvInstanceProxy) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c EnvInstanceProxy) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c EnvInstanceProxy) Stop(ctx context.Context, params func(service.Stopable_stop_Params) error) (service.Stopable_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(service.Stopable_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return service.Stopable_stop_Results_Future{Future: ans.Future()}, release

}

func (c EnvInstanceProxy) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c EnvInstanceProxy) String() string {
	return "EnvInstanceProxy(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c EnvInstanceProxy) AddRef() EnvInstanceProxy {
	return EnvInstanceProxy(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c EnvInstanceProxy) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c EnvInstanceProxy) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c EnvInstanceProxy) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EnvInstanceProxy) DecodeFromPtr(p capnp.Ptr) EnvInstanceProxy {
	return EnvInstanceProxy(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c EnvInstanceProxy) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c EnvInstanceProxy) IsSame(other EnvInstanceProxy) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c EnvInstanceProxy) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c EnvInstanceProxy) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A EnvInstanceProxy_Server is a EnvInstanceProxy with a local implementation.
type EnvInstanceProxy_Server interface {
	RegisterEnvInstance(context.Context, EnvInstanceProxy_registerEnvInstance) error

	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, service.Stopable_stop) error
}

// EnvInstanceProxy_NewServer creates a new Server from an implementation of EnvInstanceProxy_Server.
func EnvInstanceProxy_NewServer(s EnvInstanceProxy_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Methods(nil, s), s, c)
}

// EnvInstanceProxy_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_ServerToClient(s EnvInstanceProxy_Server) EnvInstanceProxy {
	return EnvInstanceProxy(capnp.NewClient(EnvInstanceProxy_NewServer(s)))
}

// EnvInstanceProxy_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Methods(methods []server.Method, s EnvInstanceProxy_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterEnvInstance(ctx, EnvInstanceProxy_registerEnvInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, service.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstanceProxy_registerEnvInstance holds the state for a server call to EnvInstanceProxy.registerEnvInstance.
// See server.Call for documentation.
type EnvInstanceProxy_registerEnvInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_registerEnvInstance) Args() EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_registerEnvInstance) AllocResults() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results(r), err
}

// EnvInstanceProxy_List is a list of EnvInstanceProxy.
type EnvInstanceProxy_List = capnp.CapList[EnvInstanceProxy]

// NewEnvInstanceProxy creates a new list of EnvInstanceProxy.
func NewEnvInstanceProxy_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EnvInstanceProxy](l), err
}

type EnvInstanceProxy_Unregister capnp.Client

// EnvInstanceProxy_Unregister_TypeID is the unique identifier for the type EnvInstanceProxy_Unregister.
const EnvInstanceProxy_Unregister_TypeID = 0xc727892bd5c66f88

func (c EnvInstanceProxy_Unregister) Unregister(ctx context.Context, params func(EnvInstanceProxy_Unregister_unregister_Params) error) (EnvInstanceProxy_Unregister_unregister_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc727892bd5c66f88,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy.Unregister",
			MethodName:    "unregister",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_Unregister_unregister_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return EnvInstanceProxy_Unregister_unregister_Results_Future{Future: ans.Future()}, release

}

func (c EnvInstanceProxy_Unregister) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c EnvInstanceProxy_Unregister) String() string {
	return "EnvInstanceProxy_Unregister(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c EnvInstanceProxy_Unregister) AddRef() EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c EnvInstanceProxy_Unregister) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c EnvInstanceProxy_Unregister) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c EnvInstanceProxy_Unregister) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (EnvInstanceProxy_Unregister) DecodeFromPtr(p capnp.Ptr) EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c EnvInstanceProxy_Unregister) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c EnvInstanceProxy_Unregister) IsSame(other EnvInstanceProxy_Unregister) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c EnvInstanceProxy_Unregister) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c EnvInstanceProxy_Unregister) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A EnvInstanceProxy_Unregister_Server is a EnvInstanceProxy_Unregister with a local implementation.
type EnvInstanceProxy_Unregister_Server interface {
	Unregister(context.Context, EnvInstanceProxy_Unregister_unregister) error
}

// EnvInstanceProxy_Unregister_NewServer creates a new Server from an implementation of EnvInstanceProxy_Unregister_Server.
func EnvInstanceProxy_Unregister_NewServer(s EnvInstanceProxy_Unregister_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Unregister_Methods(nil, s), s, c)
}

// EnvInstanceProxy_Unregister_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Unregister_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_Unregister_ServerToClient(s EnvInstanceProxy_Unregister_Server) EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister(capnp.NewClient(EnvInstanceProxy_Unregister_NewServer(s)))
}

// EnvInstanceProxy_Unregister_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Unregister_Methods(methods []server.Method, s EnvInstanceProxy_Unregister_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc727892bd5c66f88,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy.Unregister",
			MethodName:    "unregister",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unregister(ctx, EnvInstanceProxy_Unregister_unregister{call})
		},
	})

	return methods
}

// EnvInstanceProxy_Unregister_unregister holds the state for a server call to EnvInstanceProxy_Unregister.unregister.
// See server.Call for documentation.
type EnvInstanceProxy_Unregister_unregister struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_Unregister_unregister) Args() EnvInstanceProxy_Unregister_unregister_Params {
	return EnvInstanceProxy_Unregister_unregister_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_Unregister_unregister) AllocResults() (EnvInstanceProxy_Unregister_unregister_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Results(r), err
}

// EnvInstanceProxy_Unregister_List is a list of EnvInstanceProxy_Unregister.
type EnvInstanceProxy_Unregister_List = capnp.CapList[EnvInstanceProxy_Unregister]

// NewEnvInstanceProxy_Unregister creates a new list of EnvInstanceProxy_Unregister.
func NewEnvInstanceProxy_Unregister_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_Unregister_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[EnvInstanceProxy_Unregister](l), err
}

type EnvInstanceProxy_Unregister_unregister_Params capnp.Struct

// EnvInstanceProxy_Unregister_unregister_Params_TypeID is the unique identifier for the type EnvInstanceProxy_Unregister_unregister_Params.
const EnvInstanceProxy_Unregister_unregister_Params_TypeID = 0x82136633e6b6d8ae

func NewEnvInstanceProxy_Unregister_unregister_Params(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Params(st), err
}

func NewRootEnvInstanceProxy_Unregister_unregister_Params(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Params(st), err
}

func ReadRootEnvInstanceProxy_Unregister_unregister_Params(msg *capnp.Message) (EnvInstanceProxy_Unregister_unregister_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_Unregister_unregister_Params(root.Struct()), err
}

func (s EnvInstanceProxy_Unregister_unregister_Params) String() string {
	str, _ := text.Marshal(0x82136633e6b6d8ae, capnp.Struct(s))
	return str
}

func (s EnvInstanceProxy_Unregister_unregister_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvInstanceProxy_Unregister_unregister_Params) DecodeFromPtr(p capnp.Ptr) EnvInstanceProxy_Unregister_unregister_Params {
	return EnvInstanceProxy_Unregister_unregister_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvInstanceProxy_Unregister_unregister_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvInstanceProxy_Unregister_unregister_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvInstanceProxy_Unregister_unregister_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvInstanceProxy_Unregister_unregister_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// EnvInstanceProxy_Unregister_unregister_Params_List is a list of EnvInstanceProxy_Unregister_unregister_Params.
type EnvInstanceProxy_Unregister_unregister_Params_List = capnp.StructList[EnvInstanceProxy_Unregister_unregister_Params]

// NewEnvInstanceProxy_Unregister_unregister_Params creates a new list of EnvInstanceProxy_Unregister_unregister_Params.
func NewEnvInstanceProxy_Unregister_unregister_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_Unregister_unregister_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[EnvInstanceProxy_Unregister_unregister_Params](l), err
}

// EnvInstanceProxy_Unregister_unregister_Params_Future is a wrapper for a EnvInstanceProxy_Unregister_unregister_Params promised by a client call.
type EnvInstanceProxy_Unregister_unregister_Params_Future struct{ *capnp.Future }

func (f EnvInstanceProxy_Unregister_unregister_Params_Future) Struct() (EnvInstanceProxy_Unregister_unregister_Params, error) {
	p, err := f.Future.Ptr()
	return EnvInstanceProxy_Unregister_unregister_Params(p.Struct()), err
}

type EnvInstanceProxy_Unregister_unregister_Results capnp.Struct

// EnvInstanceProxy_Unregister_unregister_Results_TypeID is the unique identifier for the type EnvInstanceProxy_Unregister_unregister_Results.
const EnvInstanceProxy_Unregister_unregister_Results_TypeID = 0xe91cc3866fdea82a

func NewEnvInstanceProxy_Unregister_unregister_Results(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Results(st), err
}

func NewRootEnvInstanceProxy_Unregister_unregister_Results(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Results(st), err
}

func ReadRootEnvInstanceProxy_Unregister_unregister_Results(msg *capnp.Message) (EnvInstanceProxy_Unregister_unregister_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_Unregister_unregister_Results(root.Struct()), err
}

func (s EnvInstanceProxy_Unregister_unregister_Results) String() string {
	str, _ := text.Marshal(0xe91cc3866fdea82a, capnp.Struct(s))
	return str
}

func (s EnvInstanceProxy_Unregister_unregister_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvInstanceProxy_Unregister_unregister_Results) DecodeFromPtr(p capnp.Ptr) EnvInstanceProxy_Unregister_unregister_Results {
	return EnvInstanceProxy_Unregister_unregister_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvInstanceProxy_Unregister_unregister_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvInstanceProxy_Unregister_unregister_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvInstanceProxy_Unregister_unregister_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvInstanceProxy_Unregister_unregister_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvInstanceProxy_Unregister_unregister_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s EnvInstanceProxy_Unregister_unregister_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// EnvInstanceProxy_Unregister_unregister_Results_List is a list of EnvInstanceProxy_Unregister_unregister_Results.
type EnvInstanceProxy_Unregister_unregister_Results_List = capnp.StructList[EnvInstanceProxy_Unregister_unregister_Results]

// NewEnvInstanceProxy_Unregister_unregister_Results creates a new list of EnvInstanceProxy_Unregister_unregister_Results.
func NewEnvInstanceProxy_Unregister_unregister_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_Unregister_unregister_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[EnvInstanceProxy_Unregister_unregister_Results](l), err
}

// EnvInstanceProxy_Unregister_unregister_Results_Future is a wrapper for a EnvInstanceProxy_Unregister_unregister_Results promised by a client call.
type EnvInstanceProxy_Unregister_unregister_Results_Future struct{ *capnp.Future }

func (f EnvInstanceProxy_Unregister_unregister_Results_Future) Struct() (EnvInstanceProxy_Unregister_unregister_Results, error) {
	p, err := f.Future.Ptr()
	return EnvInstanceProxy_Unregister_unregister_Results(p.Struct()), err
}

type EnvInstanceProxy_registerEnvInstance_Params capnp.Struct

// EnvInstanceProxy_registerEnvInstance_Params_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Params.
const EnvInstanceProxy_registerEnvInstance_Params_TypeID = 0xd10259a623f95bb4

func NewEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params(st), err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params(st), err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Params(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Params(root.Struct()), err
}

func (s EnvInstanceProxy_registerEnvInstance_Params) String() string {
	str, _ := text.Marshal(0xd10259a623f95bb4, capnp.Struct(s))
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvInstanceProxy_registerEnvInstance_Params) DecodeFromPtr(p capnp.Ptr) EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvInstanceProxy_registerEnvInstance_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvInstanceProxy_registerEnvInstance_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvInstanceProxy_registerEnvInstance_Params) Instance() EnvInstance {
	p, _ := capnp.Struct(s).Ptr(0)
	return EnvInstance(p.Interface().Client())
}

func (s EnvInstanceProxy_registerEnvInstance_Params) HasInstance() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Params) SetInstance(v EnvInstance) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Params_List is a list of EnvInstanceProxy_registerEnvInstance_Params.
type EnvInstanceProxy_registerEnvInstance_Params_List = capnp.StructList[EnvInstanceProxy_registerEnvInstance_Params]

// NewEnvInstanceProxy_registerEnvInstance_Params creates a new list of EnvInstanceProxy_registerEnvInstance_Params.
func NewEnvInstanceProxy_registerEnvInstance_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EnvInstanceProxy_registerEnvInstance_Params](l), err
}

// EnvInstanceProxy_registerEnvInstance_Params_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Params promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Params_Future struct{ *capnp.Future }

func (f EnvInstanceProxy_registerEnvInstance_Params_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Params, error) {
	p, err := f.Future.Ptr()
	return EnvInstanceProxy_registerEnvInstance_Params(p.Struct()), err
}
func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Instance() EnvInstance {
	return EnvInstance(p.Future.Field(0, nil).Client())
}

type EnvInstanceProxy_registerEnvInstance_Results capnp.Struct

// EnvInstanceProxy_registerEnvInstance_Results_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Results.
const EnvInstanceProxy_registerEnvInstance_Results_TypeID = 0xdf50acfa56a9674e

func NewEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results(st), err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results(st), err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Results(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Results(root.Struct()), err
}

func (s EnvInstanceProxy_registerEnvInstance_Results) String() string {
	str, _ := text.Marshal(0xdf50acfa56a9674e, capnp.Struct(s))
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (EnvInstanceProxy_registerEnvInstance_Results) DecodeFromPtr(p capnp.Ptr) EnvInstanceProxy_registerEnvInstance_Results {
	return EnvInstanceProxy_registerEnvInstance_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s EnvInstanceProxy_registerEnvInstance_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s EnvInstanceProxy_registerEnvInstance_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s EnvInstanceProxy_registerEnvInstance_Results) Unregister() EnvInstanceProxy_Unregister {
	p, _ := capnp.Struct(s).Ptr(0)
	return EnvInstanceProxy_Unregister(p.Interface().Client())
}

func (s EnvInstanceProxy_registerEnvInstance_Results) HasUnregister() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Results) SetUnregister(v EnvInstanceProxy_Unregister) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Results_List is a list of EnvInstanceProxy_registerEnvInstance_Results.
type EnvInstanceProxy_registerEnvInstance_Results_List = capnp.StructList[EnvInstanceProxy_registerEnvInstance_Results]

// NewEnvInstanceProxy_registerEnvInstance_Results creates a new list of EnvInstanceProxy_registerEnvInstance_Results.
func NewEnvInstanceProxy_registerEnvInstance_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[EnvInstanceProxy_registerEnvInstance_Results](l), err
}

// EnvInstanceProxy_registerEnvInstance_Results_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Results promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Results_Future struct{ *capnp.Future }

func (f EnvInstanceProxy_registerEnvInstance_Results_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	p, err := f.Future.Ptr()
	return EnvInstanceProxy_registerEnvInstance_Results(p.Struct()), err
}
func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Unregister() EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister(p.Future.Field(0, nil).Client())
}

type InstanceFactory capnp.Client

// InstanceFactory_TypeID is the unique identifier for the type InstanceFactory.
const InstanceFactory_TypeID = 0xce552eef738a45ea

func (c InstanceFactory) ModelInfo(ctx context.Context, params func(InstanceFactory_modelInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_modelInfo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c InstanceFactory) NewInstance(ctx context.Context, params func(InstanceFactory_newInstance_Params) error) (InstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstance_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return InstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release

}

func (c InstanceFactory) NewInstances(ctx context.Context, params func(InstanceFactory_newInstances_Params) error) (InstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstances_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return InstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release

}

func (c InstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c InstanceFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c InstanceFactory) String() string {
	return "InstanceFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c InstanceFactory) AddRef() InstanceFactory {
	return InstanceFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c InstanceFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c InstanceFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c InstanceFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (InstanceFactory) DecodeFromPtr(p capnp.Ptr) InstanceFactory {
	return InstanceFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c InstanceFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c InstanceFactory) IsSame(other InstanceFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c InstanceFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c InstanceFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A InstanceFactory_Server is a InstanceFactory with a local implementation.
type InstanceFactory_Server interface {
	ModelInfo(context.Context, InstanceFactory_modelInfo) error

	NewInstance(context.Context, InstanceFactory_newInstance) error

	NewInstances(context.Context, InstanceFactory_newInstances) error

	Info(context.Context, common.Identifiable_info) error
}

// InstanceFactory_NewServer creates a new Server from an implementation of InstanceFactory_Server.
func InstanceFactory_NewServer(s InstanceFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(InstanceFactory_Methods(nil, s), s, c)
}

// InstanceFactory_ServerToClient creates a new Client from an implementation of InstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func InstanceFactory_ServerToClient(s InstanceFactory_Server) InstanceFactory {
	return InstanceFactory(capnp.NewClient(InstanceFactory_NewServer(s)))
}

// InstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func InstanceFactory_Methods(methods []server.Method, s InstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelInfo(ctx, InstanceFactory_modelInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, InstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, InstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// InstanceFactory_modelInfo holds the state for a server call to InstanceFactory.modelInfo.
// See server.Call for documentation.
type InstanceFactory_modelInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_modelInfo) Args() InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c InstanceFactory_modelInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation(r), err
}

// InstanceFactory_newInstance holds the state for a server call to InstanceFactory.newInstance.
// See server.Call for documentation.
type InstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstance) Args() InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstance) AllocResults() (InstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results(r), err
}

// InstanceFactory_newInstances holds the state for a server call to InstanceFactory.newInstances.
// See server.Call for documentation.
type InstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstances) Args() InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstances) AllocResults() (InstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results(r), err
}

// InstanceFactory_List is a list of InstanceFactory.
type InstanceFactory_List = capnp.CapList[InstanceFactory]

// NewInstanceFactory creates a new list of InstanceFactory.
func NewInstanceFactory_List(s *capnp.Segment, sz int32) (InstanceFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[InstanceFactory](l), err
}

type InstanceFactory_modelInfo_Params capnp.Struct

// InstanceFactory_modelInfo_Params_TypeID is the unique identifier for the type InstanceFactory_modelInfo_Params.
const InstanceFactory_modelInfo_Params_TypeID = 0xbf49e08cc9412aaf

func NewInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params(st), err
}

func NewRootInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params(st), err
}

func ReadRootInstanceFactory_modelInfo_Params(msg *capnp.Message) (InstanceFactory_modelInfo_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_modelInfo_Params(root.Struct()), err
}

func (s InstanceFactory_modelInfo_Params) String() string {
	str, _ := text.Marshal(0xbf49e08cc9412aaf, capnp.Struct(s))
	return str
}

func (s InstanceFactory_modelInfo_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstanceFactory_modelInfo_Params) DecodeFromPtr(p capnp.Ptr) InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstanceFactory_modelInfo_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstanceFactory_modelInfo_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstanceFactory_modelInfo_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstanceFactory_modelInfo_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// InstanceFactory_modelInfo_Params_List is a list of InstanceFactory_modelInfo_Params.
type InstanceFactory_modelInfo_Params_List = capnp.StructList[InstanceFactory_modelInfo_Params]

// NewInstanceFactory_modelInfo_Params creates a new list of InstanceFactory_modelInfo_Params.
func NewInstanceFactory_modelInfo_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_modelInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[InstanceFactory_modelInfo_Params](l), err
}

// InstanceFactory_modelInfo_Params_Future is a wrapper for a InstanceFactory_modelInfo_Params promised by a client call.
type InstanceFactory_modelInfo_Params_Future struct{ *capnp.Future }

func (f InstanceFactory_modelInfo_Params_Future) Struct() (InstanceFactory_modelInfo_Params, error) {
	p, err := f.Future.Ptr()
	return InstanceFactory_modelInfo_Params(p.Struct()), err
}

type InstanceFactory_newInstance_Params capnp.Struct

// InstanceFactory_newInstance_Params_TypeID is the unique identifier for the type InstanceFactory_newInstance_Params.
const InstanceFactory_newInstance_Params_TypeID = 0x9ee4515395213845

func NewInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params(st), err
}

func NewRootInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params(st), err
}

func ReadRootInstanceFactory_newInstance_Params(msg *capnp.Message) (InstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Params(root.Struct()), err
}

func (s InstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x9ee4515395213845, capnp.Struct(s))
	return str
}

func (s InstanceFactory_newInstance_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstanceFactory_newInstance_Params) DecodeFromPtr(p capnp.Ptr) InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstanceFactory_newInstance_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstanceFactory_newInstance_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstanceFactory_newInstance_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstanceFactory_newInstance_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// InstanceFactory_newInstance_Params_List is a list of InstanceFactory_newInstance_Params.
type InstanceFactory_newInstance_Params_List = capnp.StructList[InstanceFactory_newInstance_Params]

// NewInstanceFactory_newInstance_Params creates a new list of InstanceFactory_newInstance_Params.
func NewInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[InstanceFactory_newInstance_Params](l), err
}

// InstanceFactory_newInstance_Params_Future is a wrapper for a InstanceFactory_newInstance_Params promised by a client call.
type InstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (f InstanceFactory_newInstance_Params_Future) Struct() (InstanceFactory_newInstance_Params, error) {
	p, err := f.Future.Ptr()
	return InstanceFactory_newInstance_Params(p.Struct()), err
}

type InstanceFactory_newInstance_Results capnp.Struct

// InstanceFactory_newInstance_Results_TypeID is the unique identifier for the type InstanceFactory_newInstance_Results.
const InstanceFactory_newInstance_Results_TypeID = 0xf013eda158070488

func NewInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results(st), err
}

func NewRootInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results(st), err
}

func ReadRootInstanceFactory_newInstance_Results(msg *capnp.Message) (InstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Results(root.Struct()), err
}

func (s InstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf013eda158070488, capnp.Struct(s))
	return str
}

func (s InstanceFactory_newInstance_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstanceFactory_newInstance_Results) DecodeFromPtr(p capnp.Ptr) InstanceFactory_newInstance_Results {
	return InstanceFactory_newInstance_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstanceFactory_newInstance_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstanceFactory_newInstance_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstanceFactory_newInstance_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstanceFactory_newInstance_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InstanceFactory_newInstance_Results) Instance() common.Identifiable {
	p, _ := capnp.Struct(s).Ptr(0)
	return common.Identifiable(p.Interface().Client())
}

func (s InstanceFactory_newInstance_Results) HasInstance() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InstanceFactory_newInstance_Results) SetInstance(v common.Identifiable) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// InstanceFactory_newInstance_Results_List is a list of InstanceFactory_newInstance_Results.
type InstanceFactory_newInstance_Results_List = capnp.StructList[InstanceFactory_newInstance_Results]

// NewInstanceFactory_newInstance_Results creates a new list of InstanceFactory_newInstance_Results.
func NewInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[InstanceFactory_newInstance_Results](l), err
}

// InstanceFactory_newInstance_Results_Future is a wrapper for a InstanceFactory_newInstance_Results promised by a client call.
type InstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (f InstanceFactory_newInstance_Results_Future) Struct() (InstanceFactory_newInstance_Results, error) {
	p, err := f.Future.Ptr()
	return InstanceFactory_newInstance_Results(p.Struct()), err
}
func (p InstanceFactory_newInstance_Results_Future) Instance() common.Identifiable {
	return common.Identifiable(p.Future.Field(0, nil).Client())
}

type InstanceFactory_newInstances_Params capnp.Struct

// InstanceFactory_newInstances_Params_TypeID is the unique identifier for the type InstanceFactory_newInstances_Params.
const InstanceFactory_newInstances_Params_TypeID = 0xd9fa9ece71d1db50

func NewInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params(st), err
}

func NewRootInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params(st), err
}

func ReadRootInstanceFactory_newInstances_Params(msg *capnp.Message) (InstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Params(root.Struct()), err
}

func (s InstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0xd9fa9ece71d1db50, capnp.Struct(s))
	return str
}

func (s InstanceFactory_newInstances_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstanceFactory_newInstances_Params) DecodeFromPtr(p capnp.Ptr) InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstanceFactory_newInstances_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstanceFactory_newInstances_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstanceFactory_newInstances_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstanceFactory_newInstances_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s InstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// InstanceFactory_newInstances_Params_List is a list of InstanceFactory_newInstances_Params.
type InstanceFactory_newInstances_Params_List = capnp.StructList[InstanceFactory_newInstances_Params]

// NewInstanceFactory_newInstances_Params creates a new list of InstanceFactory_newInstances_Params.
func NewInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[InstanceFactory_newInstances_Params](l), err
}

// InstanceFactory_newInstances_Params_Future is a wrapper for a InstanceFactory_newInstances_Params promised by a client call.
type InstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (f InstanceFactory_newInstances_Params_Future) Struct() (InstanceFactory_newInstances_Params, error) {
	p, err := f.Future.Ptr()
	return InstanceFactory_newInstances_Params(p.Struct()), err
}

type InstanceFactory_newInstances_Results capnp.Struct

// InstanceFactory_newInstances_Results_TypeID is the unique identifier for the type InstanceFactory_newInstances_Results.
const InstanceFactory_newInstances_Results_TypeID = 0xaf9a1cb72ba68156

func NewInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results(st), err
}

func NewRootInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results(st), err
}

func ReadRootInstanceFactory_newInstances_Results(msg *capnp.Message) (InstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Results(root.Struct()), err
}

func (s InstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xaf9a1cb72ba68156, capnp.Struct(s))
	return str
}

func (s InstanceFactory_newInstances_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (InstanceFactory_newInstances_Results) DecodeFromPtr(p capnp.Ptr) InstanceFactory_newInstances_Results {
	return InstanceFactory_newInstances_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s InstanceFactory_newInstances_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s InstanceFactory_newInstances_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s InstanceFactory_newInstances_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s InstanceFactory_newInstances_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s InstanceFactory_newInstances_Results) Instances() (common.Identifiable_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.Identifiable_List(p.List()), err
}

func (s InstanceFactory_newInstances_Results) HasInstances() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s InstanceFactory_newInstances_Results) SetInstances(v common.Identifiable_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewInstances sets the instances field to a newly
// allocated common.Identifiable_List, preferring placement in s's segment.
func (s InstanceFactory_newInstances_Results) NewInstances(n int32) (common.Identifiable_List, error) {
	l, err := common.NewIdentifiable_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return common.Identifiable_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// InstanceFactory_newInstances_Results_List is a list of InstanceFactory_newInstances_Results.
type InstanceFactory_newInstances_Results_List = capnp.StructList[InstanceFactory_newInstances_Results]

// NewInstanceFactory_newInstances_Results creates a new list of InstanceFactory_newInstances_Results.
func NewInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[InstanceFactory_newInstances_Results](l), err
}

// InstanceFactory_newInstances_Results_Future is a wrapper for a InstanceFactory_newInstances_Results promised by a client call.
type InstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (f InstanceFactory_newInstances_Results_Future) Struct() (InstanceFactory_newInstances_Results, error) {
	p, err := f.Future.Ptr()
	return InstanceFactory_newInstances_Results(p.Struct()), err
}

const schema_9273388a9624d430 = "x\xda\xacWol[W\x15?\xe7]{/\x83\x14" +
	"\xfb\xfa:\xb6S%\x0a\xcb<\xd6f\xc4j\x08\x85\x12" +
	"Q\xc5\x0e\x84\xceAe~\xce:5Y\x8b\xe6$\xaf" +
	"\x99\x87\xfd\x9c\xf8=g6\x1a\x84TZ\xb7UCt" +
	"C\xe5\xc3T\x0a\x9dhG'h\xc4\x04\xdb\x87iC" +
	"+hc\xcb\xd8\xc8X%R\xa0\x1d\xd5\x0at[\x05" +
	"\xfb\xd0\x0fLm\x1f\xba\xcf~~\xd7\x8e\x93\xb4\xd2\x94" +
	"\x0fy\xbe\xef\xf8\x9cs\x7f\xbf\xdf\xf9\xe3M\xb3r\xd4" +
	"\xd5\xb3\xae#\x0c\xd2\xf0\xcf\xd0}\x839\xb2\xf4\xad\xaf" +
	"\x8f\x1f\x0c\xcd\x01\x0d!\x80\x1be/\xf6^\xa2\xeb\x11" +
	"\x90]\xa1\xfd\x80\xe6\x89\xbf<\xfb\xcf\xde=l/\xd0" +
	"\x0d\x08\xe0\xe2\xef\xb7\xfb\xdeBp\x99Mo\x9ey\xfd" +
	"\xe5m\xed\x0f\x02mFs\xd3\xdb\xe1\x1f\xed\xdf\xa2?" +
	"\x0enI\x06`1\xdf\xd3,\xee\xe3O\x83\xbe\xfb\x01" +
	"\xcd\xa1''\xe8\xe5\xf7\x17\x1e\x02\xdaL\x1c[\x00/" +
	"\xb2\x97|\xef\xb1?\xfa\x82\x00l\xc9\xb7\x8d\xf5\xb0 " +
	"\x9bcA\xb3\xbd\xfbO\xf7\x8c=\xbb\xef\x07\x8d\x9c\xcf" +
	"\xb1\xd7\xd8\xf7\x19\x7fz\x84q\xe7\x83[n:8\xac" +
	"\xbc{\x18h\x9b\x95\"@\xef%\xf6m\x9e\xe2\xd0\xae" +
	"\x0f\x8e\xce_\xbcz\xb4A\xd8\x7f\xb0\x93\xec\x82\xe5\xe4" +
	"<\xdb\xc66\xfb\xbf\xc8\xb6\xfb\x83\xe6\xbd\x9f8\xf2\xcd" +
	"\xefE^<\x06J3\x8aq\x91\x1bn\xf7\xefg;" +
	"\xfc<\xd3\xdd~\x1e\xf7\x9d\x0f\x0e\x9c\xd8u\xa2\xe7\xb8" +
	"\x88\xdd\xab\xfeN\x8e\xdd\xa2\x9fc\xd7Y$\x9f\x19\xf3" +
	"\xff\xf8\xe9rb\x96\x93\xde\x0f\xfdI\x0b\\\xcb\xe0\xae" +
	"\xb9c\xb7=\xd7\xf6\xc4\xbch\xd0\xdd\xb2\x9f\x1blm" +
	"\xe1\x06\x0f\xcc\xfa>\xd4\xf6]~\xae\x0e\x06N\x03\x9b" +
	"n\xd9\xcb\x0a-<\xb1\xe9\x96\x7f\x01\xb0R\xc0c\xbe" +
	"u\xf8\x85G\xb3\xcf\xf7\xbe\x00\x94J\xcee\x00\xd9t" +
	"\xe0\x19V\x0ap\xe3B`\x16\xd0\x9c\xef\x8a\xbd\xfa\xe8" +
	";\xf1\xdf\x0a\x98\x1d\x0f\xdc\xc71{8\xf7\xf2\xa9\xdb" +
	"\x1e\xb9\xf5\x15\xa0\xed\xc4\xe1\x8dc\xd6{00\x80\xec" +
	"\xa8\xe5\xe5H`\x1b\xbb\xc4\x9f\xcc\xdf\x1b\xbf<\xf3\xc0" +
	"\xbb_z]\xbc\xc3\xdf\x03\x03\xfc\x0e\xe7\x03\xfc\x0e\xef" +
	"\x0d\xee\xd7\xff\x13\xd9\xf1F\x1d\x09\xc8\xdc\xc1s\x8c\x06" +
	"\xb9\xb7u\xc1W\xd8c\xc1 \x80\xf9\xeb\xbb\xffw\xf3" +
	"\xb1\x11i\x11h{\x15\xd3\xb9\xe0I\xee\xed\xb1 \xf7" +
	"\x96\xf8\xeb\xe2\xf4\x1b\x87?Z\x02\xa5\x0d\xed\xcc\xaf\x04" +
	"\xf7r\x83\x1bC\xdc\xe0\x1b\x93\xc7\xef\xfa\xe8\x17\x89\xb3" +
	"\xa2\x87\x9e\xd0k\xdc`\xd02\xb8\xfb\xe6\x8eSK\xb3" +
	"\xc5\xb3b\xc2\xdf\x09\xf5q\x83\x07-\x83\xcb\xb7\xc7\xbf" +
	"\\|\xff\xcd\xb3\xcb\x12>\x1e:\xc7~\x13\xe2\x09\xff" +
	"*\xf4\x10\xc3V\x9e\xf0\xd0\xf3\xf1\xcf/\xec\xed<W" +
	"\xc3qh\xd4\xe2\xd8\xf2\xd6\xf5\xf33\xb9}\xbfk\xbb" +
	"\x00\xca\x06\xb4+\xa8\xbd\xf547\xe8i\xe5\x06\x0f\xbb" +
	"\xe4\x9dG.\xb2\xff\x8a\x1e\x94V\xebF\xbb[\xfb\xc1" +
	"\xb4\xfe\xa6\xcdlnB\xcdD\xc6SdJ\x9b\xea\x1b" +
	"\xd4f\xe2\x9an\xa4\xb4q5\x92/h\xe1D*\x9f" +
	"\"Y]q\x11\x17\x80\x0b\x01\xe8\xbaN\x00\xa5\x89\xa0" +
	"\xf2U\x09eU\x9bA\xaf#&\x80(R\xecP\\" +
	"\x12\x8a\x87\x14\x83\x8a\x0b\x111A\x10}\x88N\xf9\x00" +
	"\xa0\x17\xb0\x9a\xc2\x0du)$\xf2\xb9b)\xb2C\xcb" +
	"\xab\x93i\xddP\xf3\x91B\xf5\xd1\xca,\x8bz\xf5\xbb" +
	"\xc8\xbf\xbbs$\xa9z\xf4B\xc6H *M\xd5\x9c" +
	"7\xae\x07P\xc2\x04\x95\xa8\x84\x14\xd1\xcf\xf1\xa2[\xf9" +
	"\xe1\x16\x82\xca\x9d\x12\x92\xa2\x8e\x9f\x02+\xbfO\x82\xc4" +
	"\x1fI\xa9\xfe\xa4\x1aI\xaa\xcf\xd2\xc3\xd3\xe47\x144" +
	"\x8e\xa3\xa6\x9d7\x105\xaf\xb8\x88[P!\xdab\xa2" +
	"\xf4I\x80\x98\x1fca\xa4\x9be\xd3\xbe\x1d\xda\xeee" +
	"m\\\xb5\x11\xad\xd6\x8c\x95~\xa3\xc3(ZYT\xe1" +
	"u\xd8\x10\x10\xa7x\xab\xd2\xc4\xd9\xe0,\"*^\x9b" +
	"\x14\xa7$\xd1\xe7\xae=\x885!u'\xe9\x8d}f" +
	"R\xd5\x8d\xb86U\x004\xfa\xef(\x18S\x05\xa3\x16" +
	"\x97\x9d#\x89LAO\xaa\x9c\x04\x80\x15h\xd8$\xd0" +
	"\xd0\xfd9\x00eCYO\xa4XB\xaf\xd3\xff\x01\xb9" +
	"::t#eT\xc9\xf0\x8a\xdd\xa7\x86\x16\x17\x0fo" +
	"s\xf2\xb5\xd4\xb8\x91\xcb\x97\"\x9az\xbf}\x14\xee\xb7" +
	"$\xa3\xaf\xc8\xa3\x95m\x99'{z\xa1\xdd\x8a)\xed" +
	"\x04\x885c\xac\x0di\xb7,\xe7\x0b\xda2dkX" +
	"\x11\x0f\xa3h5\xfdS\xb7\x1f\x1aYX\x9c\x7f\x06\x00" +
	"Lu\xe1\x0b\x7f\xfb\xe9\xe9\xa7^\xe2\xcf\xe7\x03\x07\xb4" +
	"\xae\x17\x17/\\+\xcc\x96\xd0\x87\x8d\x94\x01`\xb1\xed" +
	"\xb4f\xec\xf2\xdcY\x9aRm\xc4\x11\xe9\xc6.\x07\xf1" +
	"*\xe0\xeb\x1d\xc0=FiJE\xa1\xbd\x03\xba=\x04" +
	"\x90\xcc\xac\xa8\xfe\x86m\x82\xf3-g\x8c\x9a>\xd1W" +
	"\xe9\x13~\x09\xfb\xf3\x96\x1e*\xb2\x12\x8a\xdfW\xcf\xdf" +
	"W2\xe9l\xcaPE\xe7\xc3\xaaa\x17\xbb\xe8~\xa0" +
	"\xe2>,\xe1\xecD\xcaH\xe9\xaaa\xa7L\xcd\x7fg" +
	"\xb5\xab\xd1\x9f\xcc<U\xaf\x11\xf7\x1a\x1a\xd1\xc3e\xe5" +
	"\xea\x1c['V\x12@i&\xa8l\x90\xd0L\xdbj" +
	"A\xdd\x89\xe7p[\x1b\x0f+`Y\xd2\xf2V\x1d\xa6" +
	"8-\xbb\x08*\xf7\x0a\x85\xa0\x8e\x02(\x13\x04\x95)" +
	"\x09\xa9$\xf9Q\x02\xa0\xd91\x00%CP)JH" +
	"\x09\xf1#\x01\xa0\x05ni\x10T\x0eH\xe8\xc9\xab\xba" +
	"a\xd5\xaf\xd0p-\\\x8dtV\x1dV\xf3i \xaa" +
	"^\x07\x09\x054\xf5\\:\x93\xc8\xe7\xf6\x80\x9c\xce\xa8" +
	"H\xcd\x8d\x87b?<zr\xd2\xb4\xdfg'\xb3\xc6" +
	"\xe0\x8c\xaa\x01\x11\x8bo\xe0\x0fOL^\xb9\xb8\xfbP" +
	"\xe5\xa21\x17RL\x8aj].\xd3\x8e\x08\x17%\x07" +
	"\xa0|\xa5\xcd\x9dV\x88n\xfeO\xa2\xb7\xac\x07@B" +
	"\xdb\xf9'\x17m\xe9\x03\x90\xb3iM\xce\xa6\x8aD\x9f" +
	"\x90S3\x93\xfdYu\"\x9d\xd2V/s\xebe\\" +
	"\xdb\x93\x0b'R\x9e\x9a\"w\xad1R\x84\xa2\xb77" +
	"R\xb4'+\xa5\xa3\x001/\xc6>\x8d\xb4G6\x0b" +
	"B?\xbf\x9e\x9e\x9c\xc0\xb5E^\xd5\xdd\x1a\x15\xb4\xac" +
	";\xd6v3\x11\x179\x97/\xf1\xcb5[\x97\xb3\xf7" +
	"2\xfc\xf3iru\xe1\xbb\x0boS%\x09\x12\x8d\xcb" +
	"\xe8\xec\xb9ho\x0ct\xeb\x18Ht\xb3\x8cRu-" +
	"B{\xa5\xa4\x1b\xef\x03\x89\xde$\x9b6\xe6\x80\xb9(" +
	"\x9av\x11\x01\x9fX\xe2g\x0f/\xab\xca`\x12[\xe0" +
	"\xea3\xdf\xa6GxQn\x02\xb5\x08\x0dU\x0a\xf3\x1e" +
	"\xb10\x01\x90\x8a]\xe6c\x9b\x82\xe5\xba\xb8\xe6V\xd2" +
	" \xdf\xc7\x01x$\xa5MBS+d\xc7\xd4\xfc\x1d" +
	"{\xd0\xfe\x06\xeaH@B\xb2\xe6B\xd4\x08\x9c\x86}" +
	"k\xb4\x02\xcfg%\xacQ/RgS\xa9\xc1G\x14" +
	"n\xcdm\xc9J\xba\xad\x0c\xd5FQC\xd2\x9aM\xa8" +
	"F\xbc\xa2{\xae\xa2\xf2\xf2\xc0\xc5ko\xd6h\xff&" +
	"\xa0=\x9d \xd1[\xb8x\xed\xdfBh/\xcc\xb4\xb5" +
	"\x0f$\xba\xce\x1a\xd2Q\xec/O\x90U\x04\xb8\xda\xdc" +
	"\xb1P%k\xce5\xaf\xf3\xb3\xb2\xae*\xafg\xa3m" +
	"\x14l\xc0\x096\xab\x17\xc6\xc7U]G\x04\x09\xf1:" +
	"\x94\xd8\xb0\xb7\x0c\x09$\xd5V\x8e8\xcb(\xe0\xff\x03" +
	"\x00\x00\xff\xff\x0c[\x97\xcd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_9273388a9624d430,
		Nodes: []uint64{
			0x811895634b6bd959,
			0x82136633e6b6d8ae,
			0x851d47c6ccdecf08,
			0x87cbebfc1164a24a,
			0x8f86b66260d02d1d,
			0x9ee4515395213845,
			0xa5feedafa5ec5c4a,
			0xa6be2e805ea10a68,
			0xa931ae5cae90ece0,
			0xaa9d146226037822,
			0xaf9a1cb72ba68156,
			0xb7fc866ef1127f7c,
			0xbd33bb6d8cbd9ed2,
			0xbf49e08cc9412aaf,
			0xc727892bd5c66f88,
			0xcc39e47cdead74c4,
			0xce552eef738a45ea,
			0xd10259a623f95bb4,
			0xd9fa9ece71d1db50,
			0xdf50acfa56a9674e,
			0xdf787fd9d51f235b,
			0xdfcfeb783c4948fc,
			0xe22282cb3449bb4a,
			0xe91cc3866fdea82a,
			0xf013eda158070488,
		},
		Compressed: true,
	})
}
