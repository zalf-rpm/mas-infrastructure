// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/management"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	soil "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/soil"
)

type XYResult struct{ capnp.Struct }

// XYResult_TypeID is the unique identifier for the type XYResult.
const XYResult_TypeID = 0x851d47c6ccdecf08

func NewXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func NewRootXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func ReadRootXYResult(msg *capnp.Message) (XYResult, error) {
	root, err := msg.Root()
	return XYResult{root.Struct()}, err
}

func (s XYResult) String() string {
	str, _ := text.Marshal(0x851d47c6ccdecf08, s.Struct)
	return str
}

func (s XYResult) Xs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasXs() bool {
	return s.Struct.HasPtr(0)
}

func (s XYResult) SetXs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewXs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s XYResult) Ys() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasYs() bool {
	return s.Struct.HasPtr(1)
}

func (s XYResult) SetYs(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewYs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYResult_List is a list of XYResult.
type XYResult_List struct{ capnp.List }

// NewXYResult creates a new list of XYResult.
func NewXYResult_List(s *capnp.Segment, sz int32) (XYResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYResult_List{l}, err
}

func (s XYResult_List) At(i int) XYResult { return XYResult{s.List.Struct(i)} }

func (s XYResult_List) Set(i int, v XYResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYResult_List) String() string {
	str, _ := text.MarshalList(0x851d47c6ccdecf08, s.List)
	return str
}

// XYResult_Future is a wrapper for a XYResult promised by a client call.
type XYResult_Future struct{ *capnp.Future }

func (p XYResult_Future) Struct() (XYResult, error) {
	s, err := p.Future.Struct()
	return XYResult{s}, err
}

type Stat struct{ capnp.Struct }

// Stat_TypeID is the unique identifier for the type Stat.
const Stat_TypeID = 0xa6be2e805ea10a68

func NewStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func NewRootStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func ReadRootStat(msg *capnp.Message) (Stat, error) {
	root, err := msg.Root()
	return Stat{root.Struct()}, err
}

func (s Stat) String() string {
	str, _ := text.Marshal(0xa6be2e805ea10a68, s.Struct)
	return str
}

func (s Stat) Type() Stat_Type {
	return Stat_Type(s.Struct.Uint16(0) ^ 3)
}

func (s Stat) SetType(v Stat_Type) {
	s.Struct.SetUint16(0, uint16(v)^3)
}

func (s Stat) Vs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Stat) HasVs() bool {
	return s.Struct.HasPtr(0)
}

func (s Stat) SetVs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVs sets the vs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Stat) NewVs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Stat_List is a list of Stat.
type Stat_List struct{ capnp.List }

// NewStat creates a new list of Stat.
func NewStat_List(s *capnp.Segment, sz int32) (Stat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Stat_List{l}, err
}

func (s Stat_List) At(i int) Stat { return Stat{s.List.Struct(i)} }

func (s Stat_List) Set(i int, v Stat) error { return s.List.SetStruct(i, v.Struct) }

func (s Stat_List) String() string {
	str, _ := text.MarshalList(0xa6be2e805ea10a68, s.List)
	return str
}

// Stat_Future is a wrapper for a Stat promised by a client call.
type Stat_Future struct{ *capnp.Future }

func (p Stat_Future) Struct() (Stat, error) {
	s, err := p.Future.Struct()
	return Stat{s}, err
}

type Stat_Type uint16

// Stat_Type_TypeID is the unique identifier for the type Stat_Type.
const Stat_Type_TypeID = 0xbd33bb6d8cbd9ed2

// Values of Stat_Type.
const (
	Stat_Type_min    Stat_Type = 0
	Stat_Type_max    Stat_Type = 1
	Stat_Type_sd     Stat_Type = 2
	Stat_Type_avg    Stat_Type = 3
	Stat_Type_median Stat_Type = 4
)

// String returns the enum's constant name.
func (c Stat_Type) String() string {
	switch c {
	case Stat_Type_min:
		return "min"
	case Stat_Type_max:
		return "max"
	case Stat_Type_sd:
		return "sd"
	case Stat_Type_avg:
		return "avg"
	case Stat_Type_median:
		return "median"

	default:
		return ""
	}
}

// Stat_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Stat_TypeFromString(c string) Stat_Type {
	switch c {
	case "min":
		return Stat_Type_min
	case "max":
		return Stat_Type_max
	case "sd":
		return Stat_Type_sd
	case "avg":
		return Stat_Type_avg
	case "median":
		return Stat_Type_median

	default:
		return 0
	}
}

type Stat_Type_List struct{ capnp.List }

func NewStat_Type_List(s *capnp.Segment, sz int32) (Stat_Type_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Stat_Type_List{l.List}, err
}

func (l Stat_Type_List) At(i int) Stat_Type {
	ul := capnp.UInt16List{List: l.List}
	return Stat_Type(ul.At(i))
}

func (l Stat_Type_List) Set(i int, v Stat_Type) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type XYPlusResult struct{ capnp.Struct }

// XYPlusResult_TypeID is the unique identifier for the type XYPlusResult.
const XYPlusResult_TypeID = 0x8f86b66260d02d1d

func NewXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func NewRootXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func ReadRootXYPlusResult(msg *capnp.Message) (XYPlusResult, error) {
	root, err := msg.Root()
	return XYPlusResult{root.Struct()}, err
}

func (s XYPlusResult) String() string {
	str, _ := text.Marshal(0x8f86b66260d02d1d, s.Struct)
	return str
}

func (s XYPlusResult) Xy() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s XYPlusResult) HasXy() bool {
	return s.Struct.HasPtr(0)
}

func (s XYPlusResult) SetXy(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewXy sets the xy field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s XYPlusResult) NewXy() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s XYPlusResult) Stats() (Stat_List, error) {
	p, err := s.Struct.Ptr(1)
	return Stat_List{List: p.List()}, err
}

func (s XYPlusResult) HasStats() bool {
	return s.Struct.HasPtr(1)
}

func (s XYPlusResult) SetStats(v Stat_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewStats sets the stats field to a newly
// allocated Stat_List, preferring placement in s's segment.
func (s XYPlusResult) NewStats(n int32) (Stat_List, error) {
	l, err := NewStat_List(s.Struct.Segment(), n)
	if err != nil {
		return Stat_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYPlusResult_List is a list of XYPlusResult.
type XYPlusResult_List struct{ capnp.List }

// NewXYPlusResult creates a new list of XYPlusResult.
func NewXYPlusResult_List(s *capnp.Segment, sz int32) (XYPlusResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYPlusResult_List{l}, err
}

func (s XYPlusResult_List) At(i int) XYPlusResult { return XYPlusResult{s.List.Struct(i)} }

func (s XYPlusResult_List) Set(i int, v XYPlusResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYPlusResult_List) String() string {
	str, _ := text.MarshalList(0x8f86b66260d02d1d, s.List)
	return str
}

// XYPlusResult_Future is a wrapper for a XYPlusResult promised by a client call.
type XYPlusResult_Future struct{ *capnp.Future }

func (p XYPlusResult_Future) Struct() (XYPlusResult, error) {
	s, err := p.Future.Struct()
	return XYPlusResult{s}, err
}

func (p XYPlusResult_Future) Xy() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance struct{ Client *capnp.Client }

// ClimateInstance_TypeID is the unique identifier for the type ClimateInstance.
const ClimateInstance_TypeID = 0xdfcfeb783c4948fc

func (c ClimateInstance) Run(ctx context.Context, params func(ClimateInstance_run_Params) error) (ClimateInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) RunSet(ctx context.Context, params func(ClimateInstance_runSet_Params) error) (ClimateInstance_runSet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_runSet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_runSet_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c ClimateInstance) AddRef() ClimateInstance {
	return ClimateInstance{
		Client: c.Client.AddRef(),
	}
}

func (c ClimateInstance) Release() {
	c.Client.Release()
}

// A ClimateInstance_Server is a ClimateInstance with a local implementation.
type ClimateInstance_Server interface {
	Run(context.Context, ClimateInstance_run) error

	RunSet(context.Context, ClimateInstance_runSet) error

	Info(context.Context, common.Identifiable_info) error
}

// ClimateInstance_NewServer creates a new Server from an implementation of ClimateInstance_Server.
func ClimateInstance_NewServer(s ClimateInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClimateInstance_Methods(nil, s), s, c, policy)
}

// ClimateInstance_ServerToClient creates a new Client from an implementation of ClimateInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func ClimateInstance_ServerToClient(s ClimateInstance_Server, policy *server.Policy) ClimateInstance {
	return ClimateInstance{Client: capnp.NewClient(ClimateInstance_NewServer(s, policy))}
}

// ClimateInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClimateInstance_Methods(methods []server.Method, s ClimateInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ClimateInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RunSet(ctx, ClimateInstance_runSet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ClimateInstance_run holds the state for a server call to ClimateInstance.run.
// See server.Call for documentation.
type ClimateInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_run) Args() ClimateInstance_run_Params {
	return ClimateInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_run) AllocResults() (ClimateInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{Struct: r}, err
}

// ClimateInstance_runSet holds the state for a server call to ClimateInstance.runSet.
// See server.Call for documentation.
type ClimateInstance_runSet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_runSet) Args() ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_runSet) AllocResults() (ClimateInstance_runSet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{Struct: r}, err
}

type ClimateInstance_run_Params struct{ capnp.Struct }

// ClimateInstance_run_Params_TypeID is the unique identifier for the type ClimateInstance_run_Params.
const ClimateInstance_run_Params_TypeID = 0xdf787fd9d51f235b

func NewClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func NewRootClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func ReadRootClimateInstance_run_Params(msg *capnp.Message) (ClimateInstance_run_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Params{root.Struct()}, err
}

func (s ClimateInstance_run_Params) String() string {
	str, _ := text.Marshal(0xdf787fd9d51f235b, s.Struct)
	return str
}

func (s ClimateInstance_run_Params) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s ClimateInstance_run_Params) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Params) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ClimateInstance_run_Params_List is a list of ClimateInstance_run_Params.
type ClimateInstance_run_Params_List struct{ capnp.List }

// NewClimateInstance_run_Params creates a new list of ClimateInstance_run_Params.
func NewClimateInstance_run_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Params_List{l}, err
}

func (s ClimateInstance_run_Params_List) At(i int) ClimateInstance_run_Params {
	return ClimateInstance_run_Params{s.List.Struct(i)}
}

func (s ClimateInstance_run_Params_List) Set(i int, v ClimateInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0xdf787fd9d51f235b, s.List)
	return str
}

// ClimateInstance_run_Params_Future is a wrapper for a ClimateInstance_run_Params promised by a client call.
type ClimateInstance_run_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Params_Future) Struct() (ClimateInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Params{s}, err
}

func (p ClimateInstance_run_Params_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type ClimateInstance_run_Results struct{ capnp.Struct }

// ClimateInstance_run_Results_TypeID is the unique identifier for the type ClimateInstance_run_Results.
const ClimateInstance_run_Results_TypeID = 0xcc39e47cdead74c4

func NewClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func NewRootClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func ReadRootClimateInstance_run_Results(msg *capnp.Message) (ClimateInstance_run_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Results{root.Struct()}, err
}

func (s ClimateInstance_run_Results) String() string {
	str, _ := text.Marshal(0xcc39e47cdead74c4, s.Struct)
	return str
}

func (s ClimateInstance_run_Results) Result() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Results) SetResult(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s ClimateInstance_run_Results) NewResult() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_run_Results_List is a list of ClimateInstance_run_Results.
type ClimateInstance_run_Results_List struct{ capnp.List }

// NewClimateInstance_run_Results creates a new list of ClimateInstance_run_Results.
func NewClimateInstance_run_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Results_List{l}, err
}

func (s ClimateInstance_run_Results_List) At(i int) ClimateInstance_run_Results {
	return ClimateInstance_run_Results{s.List.Struct(i)}
}

func (s ClimateInstance_run_Results_List) Set(i int, v ClimateInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xcc39e47cdead74c4, s.List)
	return str
}

// ClimateInstance_run_Results_Future is a wrapper for a ClimateInstance_run_Results promised by a client call.
type ClimateInstance_run_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Results_Future) Struct() (ClimateInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Results{s}, err
}

func (p ClimateInstance_run_Results_Future) Result() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance_runSet_Params struct{ capnp.Struct }

// ClimateInstance_runSet_Params_TypeID is the unique identifier for the type ClimateInstance_runSet_Params.
const ClimateInstance_runSet_Params_TypeID = 0xaa9d146226037822

func NewClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func NewRootClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func ReadRootClimateInstance_runSet_Params(msg *capnp.Message) (ClimateInstance_runSet_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Params{root.Struct()}, err
}

func (s ClimateInstance_runSet_Params) String() string {
	str, _ := text.Marshal(0xaa9d146226037822, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Params) Dataset() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s ClimateInstance_runSet_Params) HasDataset() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Params) SetDataset(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDataset sets the dataset field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ClimateInstance_runSet_Params) NewDataset(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ClimateInstance_runSet_Params_List is a list of ClimateInstance_runSet_Params.
type ClimateInstance_runSet_Params_List struct{ capnp.List }

// NewClimateInstance_runSet_Params creates a new list of ClimateInstance_runSet_Params.
func NewClimateInstance_runSet_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Params_List{l}, err
}

func (s ClimateInstance_runSet_Params_List) At(i int) ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Params_List) Set(i int, v ClimateInstance_runSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Params_List) String() string {
	str, _ := text.MarshalList(0xaa9d146226037822, s.List)
	return str
}

// ClimateInstance_runSet_Params_Future is a wrapper for a ClimateInstance_runSet_Params promised by a client call.
type ClimateInstance_runSet_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Params_Future) Struct() (ClimateInstance_runSet_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Params{s}, err
}

type ClimateInstance_runSet_Results struct{ capnp.Struct }

// ClimateInstance_runSet_Results_TypeID is the unique identifier for the type ClimateInstance_runSet_Results.
const ClimateInstance_runSet_Results_TypeID = 0xe22282cb3449bb4a

func NewClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func NewRootClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func ReadRootClimateInstance_runSet_Results(msg *capnp.Message) (ClimateInstance_runSet_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Results{root.Struct()}, err
}

func (s ClimateInstance_runSet_Results) String() string {
	str, _ := text.Marshal(0xe22282cb3449bb4a, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Results) Result() (XYPlusResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYPlusResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_runSet_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Results) SetResult(v XYPlusResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYPlusResult struct, preferring placement in s's segment.
func (s ClimateInstance_runSet_Results) NewResult() (XYPlusResult, error) {
	ss, err := NewXYPlusResult(s.Struct.Segment())
	if err != nil {
		return XYPlusResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_runSet_Results_List is a list of ClimateInstance_runSet_Results.
type ClimateInstance_runSet_Results_List struct{ capnp.List }

// NewClimateInstance_runSet_Results creates a new list of ClimateInstance_runSet_Results.
func NewClimateInstance_runSet_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Results_List{l}, err
}

func (s ClimateInstance_runSet_Results_List) At(i int) ClimateInstance_runSet_Results {
	return ClimateInstance_runSet_Results{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Results_List) Set(i int, v ClimateInstance_runSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Results_List) String() string {
	str, _ := text.MarshalList(0xe22282cb3449bb4a, s.List)
	return str
}

// ClimateInstance_runSet_Results_Future is a wrapper for a ClimateInstance_runSet_Results promised by a client call.
type ClimateInstance_runSet_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Results_Future) Struct() (ClimateInstance_runSet_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Results{s}, err
}

func (p ClimateInstance_runSet_Results_Future) Result() XYPlusResult_Future {
	return XYPlusResult_Future{Future: p.Future.Field(0, nil)}
}

type Env struct{ capnp.Struct }

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xb7fc866ef1127f7c

func NewEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func NewRootEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func ReadRootEnv(msg *capnp.Message) (Env, error) {
	root, err := msg.Root()
	return Env{root.Struct()}, err
}

func (s Env) String() string {
	str, _ := text.Marshal(0xb7fc866ef1127f7c, s.Struct)
	return str
}

func (s Env) Rest() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Env) HasRest() bool {
	return s.Struct.HasPtr(0)
}

func (s Env) SetRest(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Env) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(1)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s Env) HasTimeSeries() bool {
	return s.Struct.HasPtr(1)
}

func (s Env) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Env) SoilProfile() (soil.Profile, error) {
	p, err := s.Struct.Ptr(2)
	return soil.Profile{Struct: p.Struct()}, err
}

func (s Env) HasSoilProfile() bool {
	return s.Struct.HasPtr(2)
}

func (s Env) SetSoilProfile(v soil.Profile) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSoilProfile sets the soilProfile field to a newly
// allocated soil.Profile struct, preferring placement in s's segment.
func (s Env) NewSoilProfile() (soil.Profile, error) {
	ss, err := soil.NewProfile(s.Struct.Segment())
	if err != nil {
		return soil.Profile{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Env) MgmtEvents() (management.Event_List, error) {
	p, err := s.Struct.Ptr(3)
	return management.Event_List{List: p.List()}, err
}

func (s Env) HasMgmtEvents() bool {
	return s.Struct.HasPtr(3)
}

func (s Env) SetMgmtEvents(v management.Event_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMgmtEvents sets the mgmtEvents field to a newly
// allocated management.Event_List, preferring placement in s's segment.
func (s Env) NewMgmtEvents(n int32) (management.Event_List, error) {
	l, err := management.NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return management.Event_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Env_List is a list of Env.
type Env_List struct{ capnp.List }

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Env_List{l}, err
}

func (s Env_List) At(i int) Env { return Env{s.List.Struct(i)} }

func (s Env_List) Set(i int, v Env) error { return s.List.SetStruct(i, v.Struct) }

func (s Env_List) String() string {
	str, _ := text.MarshalList(0xb7fc866ef1127f7c, s.List)
	return str
}

// Env_Future is a wrapper for a Env promised by a client call.
type Env_Future struct{ *capnp.Future }

func (p Env_Future) Struct() (Env, error) {
	s, err := p.Future.Struct()
	return Env{s}, err
}

func (p Env_Future) Rest() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Env_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(1, nil).Client()}
}

func (p Env_Future) SoilProfile() soil.Profile_Future {
	return soil.Profile_Future{Future: p.Future.Field(2, nil)}
}

type EnvInstance struct{ Client *capnp.Client }

// EnvInstance_TypeID is the unique identifier for the type EnvInstance.
const EnvInstance_TypeID = 0xa5feedafa5ec5c4a

func (c EnvInstance) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstance) AddRef() EnvInstance {
	return EnvInstance{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstance) Release() {
	c.Client.Release()
}

// A EnvInstance_Server is a EnvInstance with a local implementation.
type EnvInstance_Server interface {
	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstance_NewServer creates a new Server from an implementation of EnvInstance_Server.
func EnvInstance_NewServer(s EnvInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstance_Methods(nil, s), s, c, policy)
}

// EnvInstance_ServerToClient creates a new Client from an implementation of EnvInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstance_ServerToClient(s EnvInstance_Server, policy *server.Policy) EnvInstance {
	return EnvInstance{Client: capnp.NewClient(EnvInstance_NewServer(s, policy))}
}

// EnvInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstance_Methods(methods []server.Method, s EnvInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstance_run holds the state for a server call to EnvInstance.run.
// See server.Call for documentation.
type EnvInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstance_run) Args() EnvInstance_run_Params {
	return EnvInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstance_run) AllocResults() (EnvInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{Struct: r}, err
}

type EnvInstance_run_Params struct{ capnp.Struct }

// EnvInstance_run_Params_TypeID is the unique identifier for the type EnvInstance_run_Params.
const EnvInstance_run_Params_TypeID = 0x811895634b6bd959

func NewEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func NewRootEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func ReadRootEnvInstance_run_Params(msg *capnp.Message) (EnvInstance_run_Params, error) {
	root, err := msg.Root()
	return EnvInstance_run_Params{root.Struct()}, err
}

func (s EnvInstance_run_Params) String() string {
	str, _ := text.Marshal(0x811895634b6bd959, s.Struct)
	return str
}

func (s EnvInstance_run_Params) Env() (Env, error) {
	p, err := s.Struct.Ptr(0)
	return Env{Struct: p.Struct()}, err
}

func (s EnvInstance_run_Params) HasEnv() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Params) SetEnv(v Env) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Env struct, preferring placement in s's segment.
func (s EnvInstance_run_Params) NewEnv() (Env, error) {
	ss, err := NewEnv(s.Struct.Segment())
	if err != nil {
		return Env{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EnvInstance_run_Params_List is a list of EnvInstance_run_Params.
type EnvInstance_run_Params_List struct{ capnp.List }

// NewEnvInstance_run_Params creates a new list of EnvInstance_run_Params.
func NewEnvInstance_run_Params_List(s *capnp.Segment, sz int32) (EnvInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Params_List{l}, err
}

func (s EnvInstance_run_Params_List) At(i int) EnvInstance_run_Params {
	return EnvInstance_run_Params{s.List.Struct(i)}
}

func (s EnvInstance_run_Params_List) Set(i int, v EnvInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0x811895634b6bd959, s.List)
	return str
}

// EnvInstance_run_Params_Future is a wrapper for a EnvInstance_run_Params promised by a client call.
type EnvInstance_run_Params_Future struct{ *capnp.Future }

func (p EnvInstance_run_Params_Future) Struct() (EnvInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Params{s}, err
}

func (p EnvInstance_run_Params_Future) Env() Env_Future {
	return Env_Future{Future: p.Future.Field(0, nil)}
}

type EnvInstance_run_Results struct{ capnp.Struct }

// EnvInstance_run_Results_TypeID is the unique identifier for the type EnvInstance_run_Results.
const EnvInstance_run_Results_TypeID = 0xa931ae5cae90ece0

func NewEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func NewRootEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func ReadRootEnvInstance_run_Results(msg *capnp.Message) (EnvInstance_run_Results, error) {
	root, err := msg.Root()
	return EnvInstance_run_Results{root.Struct()}, err
}

func (s EnvInstance_run_Results) String() string {
	str, _ := text.Marshal(0xa931ae5cae90ece0, s.Struct)
	return str
}

func (s EnvInstance_run_Results) Result() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s EnvInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Results) SetResult(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// EnvInstance_run_Results_List is a list of EnvInstance_run_Results.
type EnvInstance_run_Results_List struct{ capnp.List }

// NewEnvInstance_run_Results creates a new list of EnvInstance_run_Results.
func NewEnvInstance_run_Results_List(s *capnp.Segment, sz int32) (EnvInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Results_List{l}, err
}

func (s EnvInstance_run_Results_List) At(i int) EnvInstance_run_Results {
	return EnvInstance_run_Results{s.List.Struct(i)}
}

func (s EnvInstance_run_Results_List) Set(i int, v EnvInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xa931ae5cae90ece0, s.List)
	return str
}

// EnvInstance_run_Results_Future is a wrapper for a EnvInstance_run_Results promised by a client call.
type EnvInstance_run_Results_Future struct{ *capnp.Future }

func (p EnvInstance_run_Results_Future) Struct() (EnvInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Results{s}, err
}

func (p EnvInstance_run_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type EnvInstanceProxy struct{ Client *capnp.Client }

// EnvInstanceProxy_TypeID is the unique identifier for the type EnvInstanceProxy.
const EnvInstanceProxy_TypeID = 0x87cbebfc1164a24a

func (c EnvInstanceProxy) RegisterEnvInstance(ctx context.Context, params func(EnvInstanceProxy_registerEnvInstance_Params) error) (EnvInstanceProxy_registerEnvInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_registerEnvInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstanceProxy_registerEnvInstance_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstanceProxy) AddRef() EnvInstanceProxy {
	return EnvInstanceProxy{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstanceProxy) Release() {
	c.Client.Release()
}

// A EnvInstanceProxy_Server is a EnvInstanceProxy with a local implementation.
type EnvInstanceProxy_Server interface {
	RegisterEnvInstance(context.Context, EnvInstanceProxy_registerEnvInstance) error

	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstanceProxy_NewServer creates a new Server from an implementation of EnvInstanceProxy_Server.
func EnvInstanceProxy_NewServer(s EnvInstanceProxy_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Methods(nil, s), s, c, policy)
}

// EnvInstanceProxy_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_ServerToClient(s EnvInstanceProxy_Server, policy *server.Policy) EnvInstanceProxy {
	return EnvInstanceProxy{Client: capnp.NewClient(EnvInstanceProxy_NewServer(s, policy))}
}

// EnvInstanceProxy_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Methods(methods []server.Method, s EnvInstanceProxy_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterEnvInstance(ctx, EnvInstanceProxy_registerEnvInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstanceProxy_registerEnvInstance holds the state for a server call to EnvInstanceProxy.registerEnvInstance.
// See server.Call for documentation.
type EnvInstanceProxy_registerEnvInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_registerEnvInstance) Args() EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_registerEnvInstance) AllocResults() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{Struct: r}, err
}

type EnvInstanceProxy_registerEnvInstance_Params struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Params_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Params.
const EnvInstanceProxy_registerEnvInstance_Params_TypeID = 0xd10259a623f95bb4

func NewEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Params(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Params{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params) String() string {
	str, _ := text.Marshal(0xd10259a623f95bb4, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Instance() EnvInstance {
	p, _ := s.Struct.Ptr(0)
	return EnvInstance{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Params) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Params) SetInstance(v EnvInstance) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Params_List is a list of EnvInstanceProxy_registerEnvInstance_Params.
type EnvInstanceProxy_registerEnvInstance_Params_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Params creates a new list of EnvInstanceProxy_registerEnvInstance_Params.
func NewEnvInstanceProxy_registerEnvInstance_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Params_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) At(i int) EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) String() string {
	str, _ := text.MarshalList(0xd10259a623f95bb4, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Params_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Params promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Params_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Params{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Instance() EnvInstance {
	return EnvInstance{Client: p.Future.Field(0, nil).Client()}
}

type EnvInstanceProxy_registerEnvInstance_Results struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Results_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Results.
const EnvInstanceProxy_registerEnvInstance_Results_TypeID = 0xdf50acfa56a9674e

func NewEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Results(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Results{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results) String() string {
	str, _ := text.Marshal(0xdf50acfa56a9674e, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Unregister() common.Action {
	p, _ := s.Struct.Ptr(0)
	return common.Action{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Results) SetUnregister(v common.Action) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Results_List is a list of EnvInstanceProxy_registerEnvInstance_Results.
type EnvInstanceProxy_registerEnvInstance_Results_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Results creates a new list of EnvInstanceProxy_registerEnvInstance_Results.
func NewEnvInstanceProxy_registerEnvInstance_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Results_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) At(i int) EnvInstanceProxy_registerEnvInstance_Results {
	return EnvInstanceProxy_registerEnvInstance_Results{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xdf50acfa56a9674e, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Results_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Results promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Results_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Results{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Unregister() common.Action {
	return common.Action{Client: p.Future.Field(0, nil).Client()}
}

type InstanceFactory struct{ Client *capnp.Client }

// InstanceFactory_TypeID is the unique identifier for the type InstanceFactory.
const InstanceFactory_TypeID = 0xce552eef738a45ea

func (c InstanceFactory) ModelInfo(ctx context.Context, params func(InstanceFactory_modelInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_modelInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstance(ctx context.Context, params func(InstanceFactory_newInstance_Params) error) (InstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstances(ctx context.Context, params func(InstanceFactory_newInstances_Params) error) (InstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstances_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c InstanceFactory) AddRef() InstanceFactory {
	return InstanceFactory{
		Client: c.Client.AddRef(),
	}
}

func (c InstanceFactory) Release() {
	c.Client.Release()
}

// A InstanceFactory_Server is a InstanceFactory with a local implementation.
type InstanceFactory_Server interface {
	ModelInfo(context.Context, InstanceFactory_modelInfo) error

	NewInstance(context.Context, InstanceFactory_newInstance) error

	NewInstances(context.Context, InstanceFactory_newInstances) error

	Info(context.Context, common.Identifiable_info) error
}

// InstanceFactory_NewServer creates a new Server from an implementation of InstanceFactory_Server.
func InstanceFactory_NewServer(s InstanceFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(InstanceFactory_Methods(nil, s), s, c, policy)
}

// InstanceFactory_ServerToClient creates a new Client from an implementation of InstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func InstanceFactory_ServerToClient(s InstanceFactory_Server, policy *server.Policy) InstanceFactory {
	return InstanceFactory{Client: capnp.NewClient(InstanceFactory_NewServer(s, policy))}
}

// InstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func InstanceFactory_Methods(methods []server.Method, s InstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelInfo(ctx, InstanceFactory_modelInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, InstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, InstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// InstanceFactory_modelInfo holds the state for a server call to InstanceFactory.modelInfo.
// See server.Call for documentation.
type InstanceFactory_modelInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_modelInfo) Args() InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_modelInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// InstanceFactory_newInstance holds the state for a server call to InstanceFactory.newInstance.
// See server.Call for documentation.
type InstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstance) Args() InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstance) AllocResults() (InstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{Struct: r}, err
}

// InstanceFactory_newInstances holds the state for a server call to InstanceFactory.newInstances.
// See server.Call for documentation.
type InstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstances) Args() InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstances) AllocResults() (InstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{Struct: r}, err
}

type InstanceFactory_modelInfo_Params struct{ capnp.Struct }

// InstanceFactory_modelInfo_Params_TypeID is the unique identifier for the type InstanceFactory_modelInfo_Params.
const InstanceFactory_modelInfo_Params_TypeID = 0xbf49e08cc9412aaf

func NewInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func NewRootInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func ReadRootInstanceFactory_modelInfo_Params(msg *capnp.Message) (InstanceFactory_modelInfo_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_modelInfo_Params{root.Struct()}, err
}

func (s InstanceFactory_modelInfo_Params) String() string {
	str, _ := text.Marshal(0xbf49e08cc9412aaf, s.Struct)
	return str
}

// InstanceFactory_modelInfo_Params_List is a list of InstanceFactory_modelInfo_Params.
type InstanceFactory_modelInfo_Params_List struct{ capnp.List }

// NewInstanceFactory_modelInfo_Params creates a new list of InstanceFactory_modelInfo_Params.
func NewInstanceFactory_modelInfo_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_modelInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_modelInfo_Params_List{l}, err
}

func (s InstanceFactory_modelInfo_Params_List) At(i int) InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{s.List.Struct(i)}
}

func (s InstanceFactory_modelInfo_Params_List) Set(i int, v InstanceFactory_modelInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_modelInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xbf49e08cc9412aaf, s.List)
	return str
}

// InstanceFactory_modelInfo_Params_Future is a wrapper for a InstanceFactory_modelInfo_Params promised by a client call.
type InstanceFactory_modelInfo_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_modelInfo_Params_Future) Struct() (InstanceFactory_modelInfo_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_modelInfo_Params{s}, err
}

type InstanceFactory_newInstance_Params struct{ capnp.Struct }

// InstanceFactory_newInstance_Params_TypeID is the unique identifier for the type InstanceFactory_newInstance_Params.
const InstanceFactory_newInstance_Params_TypeID = 0x9ee4515395213845

func NewInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func NewRootInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func ReadRootInstanceFactory_newInstance_Params(msg *capnp.Message) (InstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x9ee4515395213845, s.Struct)
	return str
}

// InstanceFactory_newInstance_Params_List is a list of InstanceFactory_newInstance_Params.
type InstanceFactory_newInstance_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Params creates a new list of InstanceFactory_newInstance_Params.
func NewInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_newInstance_Params_List{l}, err
}

func (s InstanceFactory_newInstance_Params_List) At(i int) InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Params_List) Set(i int, v InstanceFactory_newInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Params_List) String() string {
	str, _ := text.MarshalList(0x9ee4515395213845, s.List)
	return str
}

// InstanceFactory_newInstance_Params_Future is a wrapper for a InstanceFactory_newInstance_Params promised by a client call.
type InstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Params_Future) Struct() (InstanceFactory_newInstance_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Params{s}, err
}

type InstanceFactory_newInstance_Results struct{ capnp.Struct }

// InstanceFactory_newInstance_Results_TypeID is the unique identifier for the type InstanceFactory_newInstance_Results.
const InstanceFactory_newInstance_Results_TypeID = 0xf013eda158070488

func NewInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func NewRootInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func ReadRootInstanceFactory_newInstance_Results(msg *capnp.Message) (InstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf013eda158070488, s.Struct)
	return str
}

func (s InstanceFactory_newInstance_Results) Instance() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s InstanceFactory_newInstance_Results) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstance_Results) SetInstance(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// InstanceFactory_newInstance_Results_List is a list of InstanceFactory_newInstance_Results.
type InstanceFactory_newInstance_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Results creates a new list of InstanceFactory_newInstance_Results.
func NewInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstance_Results_List{l}, err
}

func (s InstanceFactory_newInstance_Results_List) At(i int) InstanceFactory_newInstance_Results {
	return InstanceFactory_newInstance_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Results_List) Set(i int, v InstanceFactory_newInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xf013eda158070488, s.List)
	return str
}

// InstanceFactory_newInstance_Results_Future is a wrapper for a InstanceFactory_newInstance_Results promised by a client call.
type InstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Results_Future) Struct() (InstanceFactory_newInstance_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Results{s}, err
}

func (p InstanceFactory_newInstance_Results_Future) Instance() *capnp.Future {
	return p.Future.Field(0, nil)
}

type InstanceFactory_newInstances_Params struct{ capnp.Struct }

// InstanceFactory_newInstances_Params_TypeID is the unique identifier for the type InstanceFactory_newInstances_Params.
const InstanceFactory_newInstances_Params_TypeID = 0xd9fa9ece71d1db50

func NewInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func NewRootInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func ReadRootInstanceFactory_newInstances_Params(msg *capnp.Message) (InstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0xd9fa9ece71d1db50, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s InstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// InstanceFactory_newInstances_Params_List is a list of InstanceFactory_newInstances_Params.
type InstanceFactory_newInstances_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Params creates a new list of InstanceFactory_newInstances_Params.
func NewInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return InstanceFactory_newInstances_Params_List{l}, err
}

func (s InstanceFactory_newInstances_Params_List) At(i int) InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Params_List) Set(i int, v InstanceFactory_newInstances_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Params_List) String() string {
	str, _ := text.MarshalList(0xd9fa9ece71d1db50, s.List)
	return str
}

// InstanceFactory_newInstances_Params_Future is a wrapper for a InstanceFactory_newInstances_Params promised by a client call.
type InstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Params_Future) Struct() (InstanceFactory_newInstances_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Params{s}, err
}

type InstanceFactory_newInstances_Results struct{ capnp.Struct }

// InstanceFactory_newInstances_Results_TypeID is the unique identifier for the type InstanceFactory_newInstances_Results.
const InstanceFactory_newInstances_Results_TypeID = 0xaf9a1cb72ba68156

func NewInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func NewRootInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func ReadRootInstanceFactory_newInstances_Results(msg *capnp.Message) (InstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xaf9a1cb72ba68156, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Results) Instances() (common.ListEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.ListEntry_List{List: p.List()}, err
}

func (s InstanceFactory_newInstances_Results) HasInstances() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstances_Results) SetInstances(v common.ListEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInstances sets the instances field to a newly
// allocated common.ListEntry_List, preferring placement in s's segment.
func (s InstanceFactory_newInstances_Results) NewInstances(n int32) (common.ListEntry_List, error) {
	l, err := common.NewListEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return common.ListEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// InstanceFactory_newInstances_Results_List is a list of InstanceFactory_newInstances_Results.
type InstanceFactory_newInstances_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Results creates a new list of InstanceFactory_newInstances_Results.
func NewInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstances_Results_List{l}, err
}

func (s InstanceFactory_newInstances_Results_List) At(i int) InstanceFactory_newInstances_Results {
	return InstanceFactory_newInstances_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Results_List) Set(i int, v InstanceFactory_newInstances_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Results_List) String() string {
	str, _ := text.MarshalList(0xaf9a1cb72ba68156, s.List)
	return str
}

// InstanceFactory_newInstances_Results_Future is a wrapper for a InstanceFactory_newInstances_Results promised by a client call.
type InstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Results_Future) Struct() (InstanceFactory_newInstances_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Results{s}, err
}

const schema_9273388a9624d430 = "x\xda\xacW]l\x1bY\x15>g\xae\xbd\x13 \x8b" +
	"}}\x9d\xd8\x1b%Dx\x1d E\x89\x1a\xb2\x856" +
	"\xa2\x8a\x1d\xf0v\x1d\x04\xebq\x96U\xd2\xed\xa2:\xc9" +
	"$\xebb\x8f\xb3\x9eq\xd6A\xcb\x86V\xea\x16\xa2\x95" +
	"X\x16\x8a\xd4\xaa\x0d\xa4RZ\xb5\x82F\xad\x10}\xa8" +
	"JE@\xfc4\xfd\xa1\xd0\x0a\xa5@[E\x95@m" +
	"#\xda\x87>P\x95\x0e\xbac\xcfx\xec8$H(" +
	"\x0f\x19_\x9f9\xf7\xbb\xdf\xf9\xcew\xae7\xbe \x86" +
	"\x84\x0e\xe7\xf9\x00@\xdf\x0f\xd0\xf9\x8c>\xb0\xf8\xf5/" +
	"\x0d\xed\xf7\xef\x06\xeaG\x00'\x8an\xec\x8c\xd0\x06\x04" +
	"d_\xa6\xdd\x80z\xcd\x95\x9b\x17\x7f\xb3\xadi/\xd0" +
	"Z\xd47^\x0b\xfepj\xb3\xfa\x018\x05\x11\x80\x1d" +
	"\xa6'\xd8,\xe5O3\xf4-@\xbd\xf7\xc80}r" +
	"oa\x1f\xd0ZR\x8a\x05p#k\xf2\xdce\xad\x1e" +
	"\x1e\xda\xe2\xd9\xc6\xbe\xe9\xf1\xb1K\x1e\x9f\xde\xd4\xf6\x87" +
	"\x9d\x83?\x7f\xf7\xbb\xd5\x92_\xf2\\`\x8b\xc6\x1b\xd7" +
	"=<yd\xf3\xc7\xf7\xf7Iw\xa6\x816\"\x80\x83" +
	"\x03\x0d\xb3o 8\xf4\xde\x1d\xf7g\xe7\x96\x9f\xceV" +
	"\xd9\xb6\x8d\xcd\xb3M\x8c'\xe9`\xdb\xd8n\xf69v" +
	"\x80\xf9\xf47><\xf3\xb5o\xb5\xff\xe2(H\xb5h" +
	"\xdf\x17y\xe0\x016\xc5f\x98\x0f\x80\x1dg|\xdf\xdb" +
	"\xf7\xdf?\xb9\xe3d\xc7q;Cu\xde\x00g\xa8\xc9" +
	"\xcb\x19\x0a\xe4\xc9'\x06\xbd\x87O\x14\x80\x19I:\xb7" +
	"z\xe3< j\x04\xbc\xba\xfb\xe8\xa7\xcf4\x1e\x9c\xb3" +
	"\x02\xdc\xd89\xe1\x9d\xe2\x01\xdf1\x02\xde\x9e\xf4<T" +
	"\xde}r\xa6\x82\x06~F\xb6\xec\xdd\xc3\x1ez9\xb0" +
	"e\xef\xdf\x01\xd8\xa3:\x97\xfe\xc7\xe9s\xef\xa5\xcfv" +
	"\x9e\x03J\x85\xd2a\x00\xd9r\xddi\xf6\xa8\x8e\x07?" +
	"\xac\x9b\x04\xd4\xe76\x84\x7f\xff\xde\xed\xe8y\x1bg-" +
	"\xf5\xbb8g\xbf\xd6~z\xf3\xed;[.\xdaA\xd3" +
	"\xfa\x1e\x8e\xe9\xb9z\x8e\xe9ndJ\xfdg\xfbW/" +
	"W!uK\xfd\x12\x8b\xd4\xf3]\xc2\xf5\xbfe\xad>" +
	"\x1f\xeb\xf0\xb9\xf4\x9f\xbd\xf6\xaf\xe7\x8f\x0e\x08W\x816" +
	"Y\xa7l\xf5\xcd\xf3\x8c[|<c\xec/W\xdf\xbc" +
	"<\xfdx\x11\xa4F4\xd1\xcc\xfa\xf6\xf0\x80SF\xc0" +
	"WF\x8f\xbf\xfa\xf8'\xb1[\xf6\x0c\x8b\xbe\x0b<`" +
	"\xd9\x08x\xed\xf9\xe6\xeb\x8b\x93\xf9[e\xa0\xfd]\x06" +
	"h?\x0fx\xf2R\xf4\xf3\xf9{WnU\x80F\xb6" +
	"\xd5\xbf\xc4\xa2~\x0e9\xe2\xdf\xc7\xf6\xfb}\x00z\xef" +
	"\xd9\xe8\x0b\x0b{\x02K\xf6l{\xfd\xdby\xb6\xef\x19" +
	"\xd9\xbe\xed\x10\xfbg\x96\xd9\x03{\xddN\xf9\x0d\xc0\xe7" +
	"\xfc\xdd\xa0\x1b\x7f#z:3,\xa7\xda\x87\x12dL" +
	"\x19\xeb\x8a(\xe3QE\xd5\x12\xca\x90\xdc\x9e\xcd)\xc1" +
	"X\"\x9b iUr\x10\x07\x80\x03\x01\xe8\xb3\x01\x00" +
	"\xa9\x86\xa0\xf4E\x01EY\x19Gw\xa9\xfe\x00!\xa4" +
	"\xd8,9\x04\xb4/R\xf4I\x0eD\xc4\x18A\xf4 " +
	"\x96\x14\x0f\x80n@\x0b\x02r\x08\xfd\x03q\xd9\xa5\xe6" +
	"RZ\x0cQ\xaa\xb1\xf6mm\x00\x90\x82\x04\xa5\x90\x80" +
	"\x14\xd1\xcbk@\xb7\xf2\xc5\xcd\x04\xa5W\x04$y\x15" +
	"?\x0a\xc6\x1e\x1f\x01\x81?\x92\x89\xca\x15k'\xa1\xe2" +
	"\xb01W6\x93\x9f\xe0;:\x88\x13\xc0R\x03\x9aE" +
	"\xa5\xf4\x08@\xd8\x8b\xe1 \xd2M\xa2\x9e\x95G\x93\xaa" +
	"&g\xd1\xcc!*C\xb2yt\xcbG\x0c\x8c\xd5\x16" +
	"C\xc8\x09)\xf1P\xa2\xcdF\x0d\xc5OJ5\x9c6" +
	"N7\xa2\xe46\xd933\x01\xa0\xc7Y\xbe\x10\xaeA" +
	"\xea\x8c\xd3\x0fu\xe9qY\xd5\xa2\xcaX\x0eP\xeb~" +
	"9\xa7\x8d\xe5\xb4\xf2\xc3\xf7\x0f\xc4R95.s\xa6" +
	"\x01V\xe1z\xa3\x8d\xeb\xb6\xcf\x00H\x9f*\x14\x9e\xe4" +
	"'\xd0]\xf2V@^\xc6fUKh\x16\xe3n{" +
	"g\x97q\xef\xe0\xdb\x9b\xc4\xbf\x98\x18\xd22\xd9\x89v" +
	"E~\xcb\\\x0avs\xd5\xa5\xd5U\x8b\x05\xa5:\x99" +
	"\xfe\x8f\xa6\xcdQ\x1a\x00\x08\xd7b\xb8\x11i\x9b(f" +
	"s\xca\x0af\xcb\xaab_\x0c\xa1a\xa8\xd7_:4" +
	"\xb0pu\xee4\x00\xe8\xf2\xc2g\xff\xfa\xe3\x1b\xc7~" +
	"\xc9\x9f{;\xa6\x1f\x08=\xef\\^/\xcd\x86\x9a\xfb" +
	"\xb4\x84\x06`T\xbbd{\xb8\xc1\xf5\xca\xc4\x98l2" +
	"\x8eH[7\x94\x18\xb7\x08o(\x11\xee\xd2&\xc6d" +
	"\xb4Y'\xa0\xd3E\x00\xc9\xf8\xaa\x12\xaf\xda\xcf\xbc\xde" +
	"bJ+k\xe8\xaebC{\x05\xec\xce\x1az(\xca" +
	"\xca\xd6\xa5\x9e\xca\xfa}!\x95L'4\xd9\x9e\xbcO" +
	"\xd6\x0c\xbfHcY\xfa\x9eb\xfa\xa0\x80\x93\xc3\x09-" +
	"\xa1\xca\x9a\x09\x99\xea\xffH+OC?\x1a?V\xa9" +
	"\x11\xe7\x1a\x1aQ\x83\x05\xe5\xaa\x9c\xdb\xd2^q\x00\xa9" +
	"\x96\xa0\xd4/\xa0\x9e4\xd5\x826M~\xcc\x19\xfa\xdb" +
	"\x8b\xe7q\xbe\xcc\xaal\x8b+\xac\xca\x9a#\x00e\x00" +
	"\xb1\xc8\xae\xa1E\xb7\x85 \xc1\xeb\xb8\x83\xa0\xf4\x86\xad" +
	"s\xe4\xed\x00\xd20AiL@*\x08^\x14\x00h" +
	"z\x10@J\x11\x94\xf2\x02RB\xbcH\x00h\x8eG" +
	"j\x04\xa5\xf7\x05teeU30\xd8\xac\xd4(\x84" +
	"\x96L\xcb}r6\x09DV+8\xa4\x80\xba\x9aI" +
	"\xa6b\xd9\xcc\x08\x88\xc9\x94\x8cn\xbd\xf5P\xf8\xfb\xb3" +
	"\xf3\xa3z\xb1M\xf5\xf4hZ\x8b\x8c\xcb\x0a\x10{\xb7" +
	"\xf6\xfc\xee\xe0\xe8\xbf\x97_?T\xacD\xd8\x81\x14\xe3" +
	"vy\xaf\xd4us;W1'\xa0p\xa4M\x01\x03" +
	"B\x1b\xff'\xd0\x96\x06\x00$\xb4\x89\x7fr\xd0\xba." +
	"\x001\x9dT\xc4t\"O\xd4a11>\xda\x9d\x96" +
	"\x87\x93\x09\xe5\xbf\xfb\x82\xf1eT\x19\xc9\x04c\x09W" +
	"\x99+\xac&CK\x19kh|\x85\x7f\x95\xfb\x8d\x1d" +
	"\x88\x98\xc9\x1a\xb3\xa1\xd6\xf0\x1c\xf3V\x82\x7f\xbaA\x9e" +
	".\xbc\xb3p\x8dJq\x80p\x8co\xf4\xba\x88\xa5\xab" +
	"\x1e\x9a\x13\x98J\x83F@x'\xd27E\x14\xac\xbb" +
	"\x04\x9aw+*\xef\x02\x08\x0fcXC\xbaW\xd4\xcd" +
	"S\x03fL\x91ZB,8\x95n6\x03\xd8'O" +
	"Y\xd0\x9ao\xbax#\xfd/\xaf\x1a6f\xb3GC" +
	"$\xbbt\xcb\x97\x0dW\xb3h|\xa6r\xc6\xf2\x11\xdb" +
	"nNN\xdb\x17\x05\xd7(/Xo\xb1\x93w\xda;" +
	"\x19\x00\xa9\xdd\x96\xfeoc\xd3\xe8\x9b\xf5{O\x15\xbc" +
	"\x1f\x00\xf0\x9d\xa4F\x01u%\x97\x1e\x94\xb3/\x8f\xa0" +
	"\xf9\x06\xaaH@@b\xdbd\xfd\xe4T5\xba\xedE" +
	"z\xfc\x02\xea9\xa5\xf0\x1a\x109\x8bT\xdf\x17Q\xfe" +
	"\xfc\xab\xa5k\x87M;(\x9b\x07\xd5\xfa\xa58nW" +
	"K\xbf\x86\xdb\x945\x8d==\xd7e\xe1Z\xc1\x9b\xc6" +
	"\xbc\xfb\xa2ys\xa7\x1d\x01\x10h\x0b\xef\x17\xf3\x17\x08" +
	"\x9aWZ\xfa\\\x17\x08\xf4Yc|\x87\xb0\xbb0[" +
	"V\xcao]\x13\xc9\xa0\x8f\xac9\xf1\xdc\xa5\x1fs\x15" +
	"n\xb0\x96\x1c\xaa\xfaM\xaf\x8d@\xbb|+G\x8a\x07" +
	"\xf0?\x01\x00\x00\xff\xff<\x1c3\xff"

func init() {
	schemas.Register(schema_9273388a9624d430,
		0x811895634b6bd959,
		0x851d47c6ccdecf08,
		0x87cbebfc1164a24a,
		0x8f86b66260d02d1d,
		0x9ee4515395213845,
		0xa5feedafa5ec5c4a,
		0xa6be2e805ea10a68,
		0xa931ae5cae90ece0,
		0xaa9d146226037822,
		0xaf9a1cb72ba68156,
		0xb7fc866ef1127f7c,
		0xbd33bb6d8cbd9ed2,
		0xbf49e08cc9412aaf,
		0xcc39e47cdead74c4,
		0xce552eef738a45ea,
		0xd10259a623f95bb4,
		0xd9fa9ece71d1db50,
		0xdf50acfa56a9674e,
		0xdf787fd9d51f235b,
		0xdfcfeb783c4948fc,
		0xe22282cb3449bb4a,
		0xf013eda158070488)
}
