// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/management"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	service "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/service"
	soil "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/soil"
)

type XYResult struct{ capnp.Struct }

// XYResult_TypeID is the unique identifier for the type XYResult.
const XYResult_TypeID = 0x851d47c6ccdecf08

func NewXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func NewRootXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func ReadRootXYResult(msg *capnp.Message) (XYResult, error) {
	root, err := msg.Root()
	return XYResult{root.Struct()}, err
}

func (s XYResult) String() string {
	str, _ := text.Marshal(0x851d47c6ccdecf08, s.Struct)
	return str
}

func (s XYResult) Xs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasXs() bool {
	return s.Struct.HasPtr(0)
}

func (s XYResult) SetXs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewXs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s XYResult) Ys() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasYs() bool {
	return s.Struct.HasPtr(1)
}

func (s XYResult) SetYs(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewYs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYResult_List is a list of XYResult.
type XYResult_List struct{ capnp.List }

// NewXYResult creates a new list of XYResult.
func NewXYResult_List(s *capnp.Segment, sz int32) (XYResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYResult_List{l}, err
}

func (s XYResult_List) At(i int) XYResult { return XYResult{s.List.Struct(i)} }

func (s XYResult_List) Set(i int, v XYResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYResult_List) String() string {
	str, _ := text.MarshalList(0x851d47c6ccdecf08, s.List)
	return str
}

// XYResult_Future is a wrapper for a XYResult promised by a client call.
type XYResult_Future struct{ *capnp.Future }

func (p XYResult_Future) Struct() (XYResult, error) {
	s, err := p.Future.Struct()
	return XYResult{s}, err
}

type Stat struct{ capnp.Struct }

// Stat_TypeID is the unique identifier for the type Stat.
const Stat_TypeID = 0xa6be2e805ea10a68

func NewStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func NewRootStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func ReadRootStat(msg *capnp.Message) (Stat, error) {
	root, err := msg.Root()
	return Stat{root.Struct()}, err
}

func (s Stat) String() string {
	str, _ := text.Marshal(0xa6be2e805ea10a68, s.Struct)
	return str
}

func (s Stat) Type() Stat_Type {
	return Stat_Type(s.Struct.Uint16(0) ^ 3)
}

func (s Stat) SetType(v Stat_Type) {
	s.Struct.SetUint16(0, uint16(v)^3)
}

func (s Stat) Vs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Stat) HasVs() bool {
	return s.Struct.HasPtr(0)
}

func (s Stat) SetVs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVs sets the vs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Stat) NewVs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Stat_List is a list of Stat.
type Stat_List struct{ capnp.List }

// NewStat creates a new list of Stat.
func NewStat_List(s *capnp.Segment, sz int32) (Stat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Stat_List{l}, err
}

func (s Stat_List) At(i int) Stat { return Stat{s.List.Struct(i)} }

func (s Stat_List) Set(i int, v Stat) error { return s.List.SetStruct(i, v.Struct) }

func (s Stat_List) String() string {
	str, _ := text.MarshalList(0xa6be2e805ea10a68, s.List)
	return str
}

// Stat_Future is a wrapper for a Stat promised by a client call.
type Stat_Future struct{ *capnp.Future }

func (p Stat_Future) Struct() (Stat, error) {
	s, err := p.Future.Struct()
	return Stat{s}, err
}

type Stat_Type uint16

// Stat_Type_TypeID is the unique identifier for the type Stat_Type.
const Stat_Type_TypeID = 0xbd33bb6d8cbd9ed2

// Values of Stat_Type.
const (
	Stat_Type_min    Stat_Type = 0
	Stat_Type_max    Stat_Type = 1
	Stat_Type_sd     Stat_Type = 2
	Stat_Type_avg    Stat_Type = 3
	Stat_Type_median Stat_Type = 4
)

// String returns the enum's constant name.
func (c Stat_Type) String() string {
	switch c {
	case Stat_Type_min:
		return "min"
	case Stat_Type_max:
		return "max"
	case Stat_Type_sd:
		return "sd"
	case Stat_Type_avg:
		return "avg"
	case Stat_Type_median:
		return "median"

	default:
		return ""
	}
}

// Stat_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Stat_TypeFromString(c string) Stat_Type {
	switch c {
	case "min":
		return Stat_Type_min
	case "max":
		return Stat_Type_max
	case "sd":
		return Stat_Type_sd
	case "avg":
		return Stat_Type_avg
	case "median":
		return Stat_Type_median

	default:
		return 0
	}
}

type Stat_Type_List struct{ capnp.List }

func NewStat_Type_List(s *capnp.Segment, sz int32) (Stat_Type_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Stat_Type_List{l.List}, err
}

func (l Stat_Type_List) At(i int) Stat_Type {
	ul := capnp.UInt16List{List: l.List}
	return Stat_Type(ul.At(i))
}

func (l Stat_Type_List) Set(i int, v Stat_Type) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type XYPlusResult struct{ capnp.Struct }

// XYPlusResult_TypeID is the unique identifier for the type XYPlusResult.
const XYPlusResult_TypeID = 0x8f86b66260d02d1d

func NewXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func NewRootXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func ReadRootXYPlusResult(msg *capnp.Message) (XYPlusResult, error) {
	root, err := msg.Root()
	return XYPlusResult{root.Struct()}, err
}

func (s XYPlusResult) String() string {
	str, _ := text.Marshal(0x8f86b66260d02d1d, s.Struct)
	return str
}

func (s XYPlusResult) Xy() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s XYPlusResult) HasXy() bool {
	return s.Struct.HasPtr(0)
}

func (s XYPlusResult) SetXy(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewXy sets the xy field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s XYPlusResult) NewXy() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s XYPlusResult) Stats() (Stat_List, error) {
	p, err := s.Struct.Ptr(1)
	return Stat_List{List: p.List()}, err
}

func (s XYPlusResult) HasStats() bool {
	return s.Struct.HasPtr(1)
}

func (s XYPlusResult) SetStats(v Stat_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewStats sets the stats field to a newly
// allocated Stat_List, preferring placement in s's segment.
func (s XYPlusResult) NewStats(n int32) (Stat_List, error) {
	l, err := NewStat_List(s.Struct.Segment(), n)
	if err != nil {
		return Stat_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYPlusResult_List is a list of XYPlusResult.
type XYPlusResult_List struct{ capnp.List }

// NewXYPlusResult creates a new list of XYPlusResult.
func NewXYPlusResult_List(s *capnp.Segment, sz int32) (XYPlusResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYPlusResult_List{l}, err
}

func (s XYPlusResult_List) At(i int) XYPlusResult { return XYPlusResult{s.List.Struct(i)} }

func (s XYPlusResult_List) Set(i int, v XYPlusResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYPlusResult_List) String() string {
	str, _ := text.MarshalList(0x8f86b66260d02d1d, s.List)
	return str
}

// XYPlusResult_Future is a wrapper for a XYPlusResult promised by a client call.
type XYPlusResult_Future struct{ *capnp.Future }

func (p XYPlusResult_Future) Struct() (XYPlusResult, error) {
	s, err := p.Future.Struct()
	return XYPlusResult{s}, err
}

func (p XYPlusResult_Future) Xy() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance struct{ Client *capnp.Client }

// ClimateInstance_TypeID is the unique identifier for the type ClimateInstance.
const ClimateInstance_TypeID = 0xdfcfeb783c4948fc

func (c ClimateInstance) Run(ctx context.Context, params func(ClimateInstance_run_Params) error) (ClimateInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) RunSet(ctx context.Context, params func(ClimateInstance_runSet_Params) error) (ClimateInstance_runSet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_runSet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_runSet_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c ClimateInstance) AddRef() ClimateInstance {
	return ClimateInstance{
		Client: c.Client.AddRef(),
	}
}

func (c ClimateInstance) Release() {
	c.Client.Release()
}

// A ClimateInstance_Server is a ClimateInstance with a local implementation.
type ClimateInstance_Server interface {
	Run(context.Context, ClimateInstance_run) error

	RunSet(context.Context, ClimateInstance_runSet) error

	Info(context.Context, common.Identifiable_info) error
}

// ClimateInstance_NewServer creates a new Server from an implementation of ClimateInstance_Server.
func ClimateInstance_NewServer(s ClimateInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClimateInstance_Methods(nil, s), s, c, policy)
}

// ClimateInstance_ServerToClient creates a new Client from an implementation of ClimateInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func ClimateInstance_ServerToClient(s ClimateInstance_Server, policy *server.Policy) ClimateInstance {
	return ClimateInstance{Client: capnp.NewClient(ClimateInstance_NewServer(s, policy))}
}

// ClimateInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClimateInstance_Methods(methods []server.Method, s ClimateInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ClimateInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RunSet(ctx, ClimateInstance_runSet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ClimateInstance_run holds the state for a server call to ClimateInstance.run.
// See server.Call for documentation.
type ClimateInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_run) Args() ClimateInstance_run_Params {
	return ClimateInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_run) AllocResults() (ClimateInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{Struct: r}, err
}

// ClimateInstance_runSet holds the state for a server call to ClimateInstance.runSet.
// See server.Call for documentation.
type ClimateInstance_runSet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_runSet) Args() ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_runSet) AllocResults() (ClimateInstance_runSet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{Struct: r}, err
}

type ClimateInstance_run_Params struct{ capnp.Struct }

// ClimateInstance_run_Params_TypeID is the unique identifier for the type ClimateInstance_run_Params.
const ClimateInstance_run_Params_TypeID = 0xdf787fd9d51f235b

func NewClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func NewRootClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func ReadRootClimateInstance_run_Params(msg *capnp.Message) (ClimateInstance_run_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Params{root.Struct()}, err
}

func (s ClimateInstance_run_Params) String() string {
	str, _ := text.Marshal(0xdf787fd9d51f235b, s.Struct)
	return str
}

func (s ClimateInstance_run_Params) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s ClimateInstance_run_Params) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Params) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ClimateInstance_run_Params_List is a list of ClimateInstance_run_Params.
type ClimateInstance_run_Params_List struct{ capnp.List }

// NewClimateInstance_run_Params creates a new list of ClimateInstance_run_Params.
func NewClimateInstance_run_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Params_List{l}, err
}

func (s ClimateInstance_run_Params_List) At(i int) ClimateInstance_run_Params {
	return ClimateInstance_run_Params{s.List.Struct(i)}
}

func (s ClimateInstance_run_Params_List) Set(i int, v ClimateInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0xdf787fd9d51f235b, s.List)
	return str
}

// ClimateInstance_run_Params_Future is a wrapper for a ClimateInstance_run_Params promised by a client call.
type ClimateInstance_run_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Params_Future) Struct() (ClimateInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Params{s}, err
}

func (p ClimateInstance_run_Params_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type ClimateInstance_run_Results struct{ capnp.Struct }

// ClimateInstance_run_Results_TypeID is the unique identifier for the type ClimateInstance_run_Results.
const ClimateInstance_run_Results_TypeID = 0xcc39e47cdead74c4

func NewClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func NewRootClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func ReadRootClimateInstance_run_Results(msg *capnp.Message) (ClimateInstance_run_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Results{root.Struct()}, err
}

func (s ClimateInstance_run_Results) String() string {
	str, _ := text.Marshal(0xcc39e47cdead74c4, s.Struct)
	return str
}

func (s ClimateInstance_run_Results) Result() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Results) SetResult(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s ClimateInstance_run_Results) NewResult() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_run_Results_List is a list of ClimateInstance_run_Results.
type ClimateInstance_run_Results_List struct{ capnp.List }

// NewClimateInstance_run_Results creates a new list of ClimateInstance_run_Results.
func NewClimateInstance_run_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Results_List{l}, err
}

func (s ClimateInstance_run_Results_List) At(i int) ClimateInstance_run_Results {
	return ClimateInstance_run_Results{s.List.Struct(i)}
}

func (s ClimateInstance_run_Results_List) Set(i int, v ClimateInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xcc39e47cdead74c4, s.List)
	return str
}

// ClimateInstance_run_Results_Future is a wrapper for a ClimateInstance_run_Results promised by a client call.
type ClimateInstance_run_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Results_Future) Struct() (ClimateInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Results{s}, err
}

func (p ClimateInstance_run_Results_Future) Result() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance_runSet_Params struct{ capnp.Struct }

// ClimateInstance_runSet_Params_TypeID is the unique identifier for the type ClimateInstance_runSet_Params.
const ClimateInstance_runSet_Params_TypeID = 0xaa9d146226037822

func NewClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func NewRootClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func ReadRootClimateInstance_runSet_Params(msg *capnp.Message) (ClimateInstance_runSet_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Params{root.Struct()}, err
}

func (s ClimateInstance_runSet_Params) String() string {
	str, _ := text.Marshal(0xaa9d146226037822, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Params) Dataset() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s ClimateInstance_runSet_Params) HasDataset() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Params) SetDataset(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDataset sets the dataset field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ClimateInstance_runSet_Params) NewDataset(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ClimateInstance_runSet_Params_List is a list of ClimateInstance_runSet_Params.
type ClimateInstance_runSet_Params_List struct{ capnp.List }

// NewClimateInstance_runSet_Params creates a new list of ClimateInstance_runSet_Params.
func NewClimateInstance_runSet_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Params_List{l}, err
}

func (s ClimateInstance_runSet_Params_List) At(i int) ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Params_List) Set(i int, v ClimateInstance_runSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Params_List) String() string {
	str, _ := text.MarshalList(0xaa9d146226037822, s.List)
	return str
}

// ClimateInstance_runSet_Params_Future is a wrapper for a ClimateInstance_runSet_Params promised by a client call.
type ClimateInstance_runSet_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Params_Future) Struct() (ClimateInstance_runSet_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Params{s}, err
}

type ClimateInstance_runSet_Results struct{ capnp.Struct }

// ClimateInstance_runSet_Results_TypeID is the unique identifier for the type ClimateInstance_runSet_Results.
const ClimateInstance_runSet_Results_TypeID = 0xe22282cb3449bb4a

func NewClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func NewRootClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func ReadRootClimateInstance_runSet_Results(msg *capnp.Message) (ClimateInstance_runSet_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Results{root.Struct()}, err
}

func (s ClimateInstance_runSet_Results) String() string {
	str, _ := text.Marshal(0xe22282cb3449bb4a, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Results) Result() (XYPlusResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYPlusResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_runSet_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Results) SetResult(v XYPlusResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYPlusResult struct, preferring placement in s's segment.
func (s ClimateInstance_runSet_Results) NewResult() (XYPlusResult, error) {
	ss, err := NewXYPlusResult(s.Struct.Segment())
	if err != nil {
		return XYPlusResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_runSet_Results_List is a list of ClimateInstance_runSet_Results.
type ClimateInstance_runSet_Results_List struct{ capnp.List }

// NewClimateInstance_runSet_Results creates a new list of ClimateInstance_runSet_Results.
func NewClimateInstance_runSet_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Results_List{l}, err
}

func (s ClimateInstance_runSet_Results_List) At(i int) ClimateInstance_runSet_Results {
	return ClimateInstance_runSet_Results{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Results_List) Set(i int, v ClimateInstance_runSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Results_List) String() string {
	str, _ := text.MarshalList(0xe22282cb3449bb4a, s.List)
	return str
}

// ClimateInstance_runSet_Results_Future is a wrapper for a ClimateInstance_runSet_Results promised by a client call.
type ClimateInstance_runSet_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Results_Future) Struct() (ClimateInstance_runSet_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Results{s}, err
}

func (p ClimateInstance_runSet_Results_Future) Result() XYPlusResult_Future {
	return XYPlusResult_Future{Future: p.Future.Field(0, nil)}
}

type Env struct{ capnp.Struct }

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xb7fc866ef1127f7c

func NewEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func NewRootEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func ReadRootEnv(msg *capnp.Message) (Env, error) {
	root, err := msg.Root()
	return Env{root.Struct()}, err
}

func (s Env) String() string {
	str, _ := text.Marshal(0xb7fc866ef1127f7c, s.Struct)
	return str
}

func (s Env) Rest() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Env) HasRest() bool {
	return s.Struct.HasPtr(0)
}

func (s Env) SetRest(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Env) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(1)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s Env) HasTimeSeries() bool {
	return s.Struct.HasPtr(1)
}

func (s Env) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Env) SoilProfile() soil.Profile {
	p, _ := s.Struct.Ptr(2)
	return soil.Profile{Client: p.Interface().Client()}
}

func (s Env) HasSoilProfile() bool {
	return s.Struct.HasPtr(2)
}

func (s Env) SetSoilProfile(v soil.Profile) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(2, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(2, in.ToPtr())
}

func (s Env) MgmtEvents() (management.Event_List, error) {
	p, err := s.Struct.Ptr(3)
	return management.Event_List{List: p.List()}, err
}

func (s Env) HasMgmtEvents() bool {
	return s.Struct.HasPtr(3)
}

func (s Env) SetMgmtEvents(v management.Event_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMgmtEvents sets the mgmtEvents field to a newly
// allocated management.Event_List, preferring placement in s's segment.
func (s Env) NewMgmtEvents(n int32) (management.Event_List, error) {
	l, err := management.NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return management.Event_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Env_List is a list of Env.
type Env_List struct{ capnp.List }

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Env_List{l}, err
}

func (s Env_List) At(i int) Env { return Env{s.List.Struct(i)} }

func (s Env_List) Set(i int, v Env) error { return s.List.SetStruct(i, v.Struct) }

func (s Env_List) String() string {
	str, _ := text.MarshalList(0xb7fc866ef1127f7c, s.List)
	return str
}

// Env_Future is a wrapper for a Env promised by a client call.
type Env_Future struct{ *capnp.Future }

func (p Env_Future) Struct() (Env, error) {
	s, err := p.Future.Struct()
	return Env{s}, err
}

func (p Env_Future) Rest() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Env_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(1, nil).Client()}
}

func (p Env_Future) SoilProfile() soil.Profile {
	return soil.Profile{Client: p.Future.Field(2, nil).Client()}
}

type EnvInstance struct{ Client *capnp.Client }

// EnvInstance_TypeID is the unique identifier for the type EnvInstance.
const EnvInstance_TypeID = 0xa5feedafa5ec5c4a

func (c EnvInstance) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Stop(ctx context.Context, params func(service.Stopable_stop_Params) error) (service.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(service.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return service.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstance) AddRef() EnvInstance {
	return EnvInstance{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstance) Release() {
	c.Client.Release()
}

// A EnvInstance_Server is a EnvInstance with a local implementation.
type EnvInstance_Server interface {
	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, service.Stopable_stop) error
}

// EnvInstance_NewServer creates a new Server from an implementation of EnvInstance_Server.
func EnvInstance_NewServer(s EnvInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstance_Methods(nil, s), s, c, policy)
}

// EnvInstance_ServerToClient creates a new Client from an implementation of EnvInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstance_ServerToClient(s EnvInstance_Server, policy *server.Policy) EnvInstance {
	return EnvInstance{Client: capnp.NewClient(EnvInstance_NewServer(s, policy))}
}

// EnvInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstance_Methods(methods []server.Method, s EnvInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, service.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstance_run holds the state for a server call to EnvInstance.run.
// See server.Call for documentation.
type EnvInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstance_run) Args() EnvInstance_run_Params {
	return EnvInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstance_run) AllocResults() (EnvInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{Struct: r}, err
}

type EnvInstance_run_Params struct{ capnp.Struct }

// EnvInstance_run_Params_TypeID is the unique identifier for the type EnvInstance_run_Params.
const EnvInstance_run_Params_TypeID = 0x811895634b6bd959

func NewEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func NewRootEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func ReadRootEnvInstance_run_Params(msg *capnp.Message) (EnvInstance_run_Params, error) {
	root, err := msg.Root()
	return EnvInstance_run_Params{root.Struct()}, err
}

func (s EnvInstance_run_Params) String() string {
	str, _ := text.Marshal(0x811895634b6bd959, s.Struct)
	return str
}

func (s EnvInstance_run_Params) Env() (Env, error) {
	p, err := s.Struct.Ptr(0)
	return Env{Struct: p.Struct()}, err
}

func (s EnvInstance_run_Params) HasEnv() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Params) SetEnv(v Env) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Env struct, preferring placement in s's segment.
func (s EnvInstance_run_Params) NewEnv() (Env, error) {
	ss, err := NewEnv(s.Struct.Segment())
	if err != nil {
		return Env{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EnvInstance_run_Params_List is a list of EnvInstance_run_Params.
type EnvInstance_run_Params_List struct{ capnp.List }

// NewEnvInstance_run_Params creates a new list of EnvInstance_run_Params.
func NewEnvInstance_run_Params_List(s *capnp.Segment, sz int32) (EnvInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Params_List{l}, err
}

func (s EnvInstance_run_Params_List) At(i int) EnvInstance_run_Params {
	return EnvInstance_run_Params{s.List.Struct(i)}
}

func (s EnvInstance_run_Params_List) Set(i int, v EnvInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0x811895634b6bd959, s.List)
	return str
}

// EnvInstance_run_Params_Future is a wrapper for a EnvInstance_run_Params promised by a client call.
type EnvInstance_run_Params_Future struct{ *capnp.Future }

func (p EnvInstance_run_Params_Future) Struct() (EnvInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Params{s}, err
}

func (p EnvInstance_run_Params_Future) Env() Env_Future {
	return Env_Future{Future: p.Future.Field(0, nil)}
}

type EnvInstance_run_Results struct{ capnp.Struct }

// EnvInstance_run_Results_TypeID is the unique identifier for the type EnvInstance_run_Results.
const EnvInstance_run_Results_TypeID = 0xa931ae5cae90ece0

func NewEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func NewRootEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func ReadRootEnvInstance_run_Results(msg *capnp.Message) (EnvInstance_run_Results, error) {
	root, err := msg.Root()
	return EnvInstance_run_Results{root.Struct()}, err
}

func (s EnvInstance_run_Results) String() string {
	str, _ := text.Marshal(0xa931ae5cae90ece0, s.Struct)
	return str
}

func (s EnvInstance_run_Results) Result() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s EnvInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Results) SetResult(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// EnvInstance_run_Results_List is a list of EnvInstance_run_Results.
type EnvInstance_run_Results_List struct{ capnp.List }

// NewEnvInstance_run_Results creates a new list of EnvInstance_run_Results.
func NewEnvInstance_run_Results_List(s *capnp.Segment, sz int32) (EnvInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Results_List{l}, err
}

func (s EnvInstance_run_Results_List) At(i int) EnvInstance_run_Results {
	return EnvInstance_run_Results{s.List.Struct(i)}
}

func (s EnvInstance_run_Results_List) Set(i int, v EnvInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xa931ae5cae90ece0, s.List)
	return str
}

// EnvInstance_run_Results_Future is a wrapper for a EnvInstance_run_Results promised by a client call.
type EnvInstance_run_Results_Future struct{ *capnp.Future }

func (p EnvInstance_run_Results_Future) Struct() (EnvInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Results{s}, err
}

func (p EnvInstance_run_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type EnvInstanceProxy struct{ Client *capnp.Client }

// EnvInstanceProxy_TypeID is the unique identifier for the type EnvInstanceProxy.
const EnvInstanceProxy_TypeID = 0x87cbebfc1164a24a

func (c EnvInstanceProxy) RegisterEnvInstance(ctx context.Context, params func(EnvInstanceProxy_registerEnvInstance_Params) error) (EnvInstanceProxy_registerEnvInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_registerEnvInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstanceProxy_registerEnvInstance_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Stop(ctx context.Context, params func(service.Stopable_stop_Params) error) (service.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(service.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return service.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstanceProxy) AddRef() EnvInstanceProxy {
	return EnvInstanceProxy{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstanceProxy) Release() {
	c.Client.Release()
}

// A EnvInstanceProxy_Server is a EnvInstanceProxy with a local implementation.
type EnvInstanceProxy_Server interface {
	RegisterEnvInstance(context.Context, EnvInstanceProxy_registerEnvInstance) error

	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, service.Stopable_stop) error
}

// EnvInstanceProxy_NewServer creates a new Server from an implementation of EnvInstanceProxy_Server.
func EnvInstanceProxy_NewServer(s EnvInstanceProxy_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Methods(nil, s), s, c, policy)
}

// EnvInstanceProxy_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_ServerToClient(s EnvInstanceProxy_Server, policy *server.Policy) EnvInstanceProxy {
	return EnvInstanceProxy{Client: capnp.NewClient(EnvInstanceProxy_NewServer(s, policy))}
}

// EnvInstanceProxy_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Methods(methods []server.Method, s EnvInstanceProxy_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterEnvInstance(ctx, EnvInstanceProxy_registerEnvInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe9d1be2a6e9016e5,
			MethodID:      0,
			InterfaceName: "service.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, service.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstanceProxy_registerEnvInstance holds the state for a server call to EnvInstanceProxy.registerEnvInstance.
// See server.Call for documentation.
type EnvInstanceProxy_registerEnvInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_registerEnvInstance) Args() EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_registerEnvInstance) AllocResults() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{Struct: r}, err
}

type EnvInstanceProxy_Unregister struct{ Client *capnp.Client }

// EnvInstanceProxy_Unregister_TypeID is the unique identifier for the type EnvInstanceProxy_Unregister.
const EnvInstanceProxy_Unregister_TypeID = 0xc727892bd5c66f88

func (c EnvInstanceProxy_Unregister) Unregister(ctx context.Context, params func(EnvInstanceProxy_Unregister_unregister_Params) error) (EnvInstanceProxy_Unregister_unregister_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc727892bd5c66f88,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy.Unregister",
			MethodName:    "unregister",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_Unregister_unregister_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstanceProxy_Unregister_unregister_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstanceProxy_Unregister) AddRef() EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstanceProxy_Unregister) Release() {
	c.Client.Release()
}

// A EnvInstanceProxy_Unregister_Server is a EnvInstanceProxy_Unregister with a local implementation.
type EnvInstanceProxy_Unregister_Server interface {
	Unregister(context.Context, EnvInstanceProxy_Unregister_unregister) error
}

// EnvInstanceProxy_Unregister_NewServer creates a new Server from an implementation of EnvInstanceProxy_Unregister_Server.
func EnvInstanceProxy_Unregister_NewServer(s EnvInstanceProxy_Unregister_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Unregister_Methods(nil, s), s, c, policy)
}

// EnvInstanceProxy_Unregister_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Unregister_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_Unregister_ServerToClient(s EnvInstanceProxy_Unregister_Server, policy *server.Policy) EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister{Client: capnp.NewClient(EnvInstanceProxy_Unregister_NewServer(s, policy))}
}

// EnvInstanceProxy_Unregister_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Unregister_Methods(methods []server.Method, s EnvInstanceProxy_Unregister_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc727892bd5c66f88,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy.Unregister",
			MethodName:    "unregister",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unregister(ctx, EnvInstanceProxy_Unregister_unregister{call})
		},
	})

	return methods
}

// EnvInstanceProxy_Unregister_unregister holds the state for a server call to EnvInstanceProxy_Unregister.unregister.
// See server.Call for documentation.
type EnvInstanceProxy_Unregister_unregister struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_Unregister_unregister) Args() EnvInstanceProxy_Unregister_unregister_Params {
	return EnvInstanceProxy_Unregister_unregister_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_Unregister_unregister) AllocResults() (EnvInstanceProxy_Unregister_unregister_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Results{Struct: r}, err
}

type EnvInstanceProxy_Unregister_unregister_Params struct{ capnp.Struct }

// EnvInstanceProxy_Unregister_unregister_Params_TypeID is the unique identifier for the type EnvInstanceProxy_Unregister_unregister_Params.
const EnvInstanceProxy_Unregister_unregister_Params_TypeID = 0x82136633e6b6d8ae

func NewEnvInstanceProxy_Unregister_unregister_Params(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Params{st}, err
}

func NewRootEnvInstanceProxy_Unregister_unregister_Params(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Params{st}, err
}

func ReadRootEnvInstanceProxy_Unregister_unregister_Params(msg *capnp.Message) (EnvInstanceProxy_Unregister_unregister_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_Unregister_unregister_Params{root.Struct()}, err
}

func (s EnvInstanceProxy_Unregister_unregister_Params) String() string {
	str, _ := text.Marshal(0x82136633e6b6d8ae, s.Struct)
	return str
}

// EnvInstanceProxy_Unregister_unregister_Params_List is a list of EnvInstanceProxy_Unregister_unregister_Params.
type EnvInstanceProxy_Unregister_unregister_Params_List struct{ capnp.List }

// NewEnvInstanceProxy_Unregister_unregister_Params creates a new list of EnvInstanceProxy_Unregister_unregister_Params.
func NewEnvInstanceProxy_Unregister_unregister_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_Unregister_unregister_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EnvInstanceProxy_Unregister_unregister_Params_List{l}, err
}

func (s EnvInstanceProxy_Unregister_unregister_Params_List) At(i int) EnvInstanceProxy_Unregister_unregister_Params {
	return EnvInstanceProxy_Unregister_unregister_Params{s.List.Struct(i)}
}

func (s EnvInstanceProxy_Unregister_unregister_Params_List) Set(i int, v EnvInstanceProxy_Unregister_unregister_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_Unregister_unregister_Params_List) String() string {
	str, _ := text.MarshalList(0x82136633e6b6d8ae, s.List)
	return str
}

// EnvInstanceProxy_Unregister_unregister_Params_Future is a wrapper for a EnvInstanceProxy_Unregister_unregister_Params promised by a client call.
type EnvInstanceProxy_Unregister_unregister_Params_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_Unregister_unregister_Params_Future) Struct() (EnvInstanceProxy_Unregister_unregister_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_Unregister_unregister_Params{s}, err
}

type EnvInstanceProxy_Unregister_unregister_Results struct{ capnp.Struct }

// EnvInstanceProxy_Unregister_unregister_Results_TypeID is the unique identifier for the type EnvInstanceProxy_Unregister_unregister_Results.
const EnvInstanceProxy_Unregister_unregister_Results_TypeID = 0xe91cc3866fdea82a

func NewEnvInstanceProxy_Unregister_unregister_Results(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Results{st}, err
}

func NewRootEnvInstanceProxy_Unregister_unregister_Results(s *capnp.Segment) (EnvInstanceProxy_Unregister_unregister_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return EnvInstanceProxy_Unregister_unregister_Results{st}, err
}

func ReadRootEnvInstanceProxy_Unregister_unregister_Results(msg *capnp.Message) (EnvInstanceProxy_Unregister_unregister_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_Unregister_unregister_Results{root.Struct()}, err
}

func (s EnvInstanceProxy_Unregister_unregister_Results) String() string {
	str, _ := text.Marshal(0xe91cc3866fdea82a, s.Struct)
	return str
}

func (s EnvInstanceProxy_Unregister_unregister_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s EnvInstanceProxy_Unregister_unregister_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// EnvInstanceProxy_Unregister_unregister_Results_List is a list of EnvInstanceProxy_Unregister_unregister_Results.
type EnvInstanceProxy_Unregister_unregister_Results_List struct{ capnp.List }

// NewEnvInstanceProxy_Unregister_unregister_Results creates a new list of EnvInstanceProxy_Unregister_unregister_Results.
func NewEnvInstanceProxy_Unregister_unregister_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_Unregister_unregister_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return EnvInstanceProxy_Unregister_unregister_Results_List{l}, err
}

func (s EnvInstanceProxy_Unregister_unregister_Results_List) At(i int) EnvInstanceProxy_Unregister_unregister_Results {
	return EnvInstanceProxy_Unregister_unregister_Results{s.List.Struct(i)}
}

func (s EnvInstanceProxy_Unregister_unregister_Results_List) Set(i int, v EnvInstanceProxy_Unregister_unregister_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_Unregister_unregister_Results_List) String() string {
	str, _ := text.MarshalList(0xe91cc3866fdea82a, s.List)
	return str
}

// EnvInstanceProxy_Unregister_unregister_Results_Future is a wrapper for a EnvInstanceProxy_Unregister_unregister_Results promised by a client call.
type EnvInstanceProxy_Unregister_unregister_Results_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_Unregister_unregister_Results_Future) Struct() (EnvInstanceProxy_Unregister_unregister_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_Unregister_unregister_Results{s}, err
}

type EnvInstanceProxy_registerEnvInstance_Params struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Params_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Params.
const EnvInstanceProxy_registerEnvInstance_Params_TypeID = 0xd10259a623f95bb4

func NewEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Params(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Params{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params) String() string {
	str, _ := text.Marshal(0xd10259a623f95bb4, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Instance() EnvInstance {
	p, _ := s.Struct.Ptr(0)
	return EnvInstance{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Params) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Params) SetInstance(v EnvInstance) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Params_List is a list of EnvInstanceProxy_registerEnvInstance_Params.
type EnvInstanceProxy_registerEnvInstance_Params_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Params creates a new list of EnvInstanceProxy_registerEnvInstance_Params.
func NewEnvInstanceProxy_registerEnvInstance_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Params_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) At(i int) EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) String() string {
	str, _ := text.MarshalList(0xd10259a623f95bb4, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Params_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Params promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Params_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Params{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Instance() EnvInstance {
	return EnvInstance{Client: p.Future.Field(0, nil).Client()}
}

type EnvInstanceProxy_registerEnvInstance_Results struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Results_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Results.
const EnvInstanceProxy_registerEnvInstance_Results_TypeID = 0xdf50acfa56a9674e

func NewEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Results(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Results{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results) String() string {
	str, _ := text.Marshal(0xdf50acfa56a9674e, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Unregister() EnvInstanceProxy_Unregister {
	p, _ := s.Struct.Ptr(0)
	return EnvInstanceProxy_Unregister{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Results) SetUnregister(v EnvInstanceProxy_Unregister) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Results_List is a list of EnvInstanceProxy_registerEnvInstance_Results.
type EnvInstanceProxy_registerEnvInstance_Results_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Results creates a new list of EnvInstanceProxy_registerEnvInstance_Results.
func NewEnvInstanceProxy_registerEnvInstance_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Results_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) At(i int) EnvInstanceProxy_registerEnvInstance_Results {
	return EnvInstanceProxy_registerEnvInstance_Results{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xdf50acfa56a9674e, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Results_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Results promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Results_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Results{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Unregister() EnvInstanceProxy_Unregister {
	return EnvInstanceProxy_Unregister{Client: p.Future.Field(0, nil).Client()}
}

type InstanceFactory struct{ Client *capnp.Client }

// InstanceFactory_TypeID is the unique identifier for the type InstanceFactory.
const InstanceFactory_TypeID = 0xce552eef738a45ea

func (c InstanceFactory) ModelInfo(ctx context.Context, params func(InstanceFactory_modelInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_modelInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstance(ctx context.Context, params func(InstanceFactory_newInstance_Params) error) (InstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstances(ctx context.Context, params func(InstanceFactory_newInstances_Params) error) (InstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstances_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c InstanceFactory) AddRef() InstanceFactory {
	return InstanceFactory{
		Client: c.Client.AddRef(),
	}
}

func (c InstanceFactory) Release() {
	c.Client.Release()
}

// A InstanceFactory_Server is a InstanceFactory with a local implementation.
type InstanceFactory_Server interface {
	ModelInfo(context.Context, InstanceFactory_modelInfo) error

	NewInstance(context.Context, InstanceFactory_newInstance) error

	NewInstances(context.Context, InstanceFactory_newInstances) error

	Info(context.Context, common.Identifiable_info) error
}

// InstanceFactory_NewServer creates a new Server from an implementation of InstanceFactory_Server.
func InstanceFactory_NewServer(s InstanceFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(InstanceFactory_Methods(nil, s), s, c, policy)
}

// InstanceFactory_ServerToClient creates a new Client from an implementation of InstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func InstanceFactory_ServerToClient(s InstanceFactory_Server, policy *server.Policy) InstanceFactory {
	return InstanceFactory{Client: capnp.NewClient(InstanceFactory_NewServer(s, policy))}
}

// InstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func InstanceFactory_Methods(methods []server.Method, s InstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelInfo(ctx, InstanceFactory_modelInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, InstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, InstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// InstanceFactory_modelInfo holds the state for a server call to InstanceFactory.modelInfo.
// See server.Call for documentation.
type InstanceFactory_modelInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_modelInfo) Args() InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_modelInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// InstanceFactory_newInstance holds the state for a server call to InstanceFactory.newInstance.
// See server.Call for documentation.
type InstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstance) Args() InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstance) AllocResults() (InstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{Struct: r}, err
}

// InstanceFactory_newInstances holds the state for a server call to InstanceFactory.newInstances.
// See server.Call for documentation.
type InstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstances) Args() InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstances) AllocResults() (InstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{Struct: r}, err
}

type InstanceFactory_modelInfo_Params struct{ capnp.Struct }

// InstanceFactory_modelInfo_Params_TypeID is the unique identifier for the type InstanceFactory_modelInfo_Params.
const InstanceFactory_modelInfo_Params_TypeID = 0xbf49e08cc9412aaf

func NewInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func NewRootInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func ReadRootInstanceFactory_modelInfo_Params(msg *capnp.Message) (InstanceFactory_modelInfo_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_modelInfo_Params{root.Struct()}, err
}

func (s InstanceFactory_modelInfo_Params) String() string {
	str, _ := text.Marshal(0xbf49e08cc9412aaf, s.Struct)
	return str
}

// InstanceFactory_modelInfo_Params_List is a list of InstanceFactory_modelInfo_Params.
type InstanceFactory_modelInfo_Params_List struct{ capnp.List }

// NewInstanceFactory_modelInfo_Params creates a new list of InstanceFactory_modelInfo_Params.
func NewInstanceFactory_modelInfo_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_modelInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_modelInfo_Params_List{l}, err
}

func (s InstanceFactory_modelInfo_Params_List) At(i int) InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{s.List.Struct(i)}
}

func (s InstanceFactory_modelInfo_Params_List) Set(i int, v InstanceFactory_modelInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_modelInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xbf49e08cc9412aaf, s.List)
	return str
}

// InstanceFactory_modelInfo_Params_Future is a wrapper for a InstanceFactory_modelInfo_Params promised by a client call.
type InstanceFactory_modelInfo_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_modelInfo_Params_Future) Struct() (InstanceFactory_modelInfo_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_modelInfo_Params{s}, err
}

type InstanceFactory_newInstance_Params struct{ capnp.Struct }

// InstanceFactory_newInstance_Params_TypeID is the unique identifier for the type InstanceFactory_newInstance_Params.
const InstanceFactory_newInstance_Params_TypeID = 0x9ee4515395213845

func NewInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func NewRootInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func ReadRootInstanceFactory_newInstance_Params(msg *capnp.Message) (InstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x9ee4515395213845, s.Struct)
	return str
}

// InstanceFactory_newInstance_Params_List is a list of InstanceFactory_newInstance_Params.
type InstanceFactory_newInstance_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Params creates a new list of InstanceFactory_newInstance_Params.
func NewInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_newInstance_Params_List{l}, err
}

func (s InstanceFactory_newInstance_Params_List) At(i int) InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Params_List) Set(i int, v InstanceFactory_newInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Params_List) String() string {
	str, _ := text.MarshalList(0x9ee4515395213845, s.List)
	return str
}

// InstanceFactory_newInstance_Params_Future is a wrapper for a InstanceFactory_newInstance_Params promised by a client call.
type InstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Params_Future) Struct() (InstanceFactory_newInstance_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Params{s}, err
}

type InstanceFactory_newInstance_Results struct{ capnp.Struct }

// InstanceFactory_newInstance_Results_TypeID is the unique identifier for the type InstanceFactory_newInstance_Results.
const InstanceFactory_newInstance_Results_TypeID = 0xf013eda158070488

func NewInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func NewRootInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func ReadRootInstanceFactory_newInstance_Results(msg *capnp.Message) (InstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf013eda158070488, s.Struct)
	return str
}

func (s InstanceFactory_newInstance_Results) Instance() common.Identifiable {
	p, _ := s.Struct.Ptr(0)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s InstanceFactory_newInstance_Results) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstance_Results) SetInstance(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// InstanceFactory_newInstance_Results_List is a list of InstanceFactory_newInstance_Results.
type InstanceFactory_newInstance_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Results creates a new list of InstanceFactory_newInstance_Results.
func NewInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstance_Results_List{l}, err
}

func (s InstanceFactory_newInstance_Results_List) At(i int) InstanceFactory_newInstance_Results {
	return InstanceFactory_newInstance_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Results_List) Set(i int, v InstanceFactory_newInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xf013eda158070488, s.List)
	return str
}

// InstanceFactory_newInstance_Results_Future is a wrapper for a InstanceFactory_newInstance_Results promised by a client call.
type InstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Results_Future) Struct() (InstanceFactory_newInstance_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Results{s}, err
}

func (p InstanceFactory_newInstance_Results_Future) Instance() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(0, nil).Client()}
}

type InstanceFactory_newInstances_Params struct{ capnp.Struct }

// InstanceFactory_newInstances_Params_TypeID is the unique identifier for the type InstanceFactory_newInstances_Params.
const InstanceFactory_newInstances_Params_TypeID = 0xd9fa9ece71d1db50

func NewInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func NewRootInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func ReadRootInstanceFactory_newInstances_Params(msg *capnp.Message) (InstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0xd9fa9ece71d1db50, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s InstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// InstanceFactory_newInstances_Params_List is a list of InstanceFactory_newInstances_Params.
type InstanceFactory_newInstances_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Params creates a new list of InstanceFactory_newInstances_Params.
func NewInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return InstanceFactory_newInstances_Params_List{l}, err
}

func (s InstanceFactory_newInstances_Params_List) At(i int) InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Params_List) Set(i int, v InstanceFactory_newInstances_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Params_List) String() string {
	str, _ := text.MarshalList(0xd9fa9ece71d1db50, s.List)
	return str
}

// InstanceFactory_newInstances_Params_Future is a wrapper for a InstanceFactory_newInstances_Params promised by a client call.
type InstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Params_Future) Struct() (InstanceFactory_newInstances_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Params{s}, err
}

type InstanceFactory_newInstances_Results struct{ capnp.Struct }

// InstanceFactory_newInstances_Results_TypeID is the unique identifier for the type InstanceFactory_newInstances_Results.
const InstanceFactory_newInstances_Results_TypeID = 0xaf9a1cb72ba68156

func NewInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func NewRootInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func ReadRootInstanceFactory_newInstances_Results(msg *capnp.Message) (InstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xaf9a1cb72ba68156, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Results) Instances() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s InstanceFactory_newInstances_Results) HasInstances() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstances_Results) SetInstances(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInstances sets the instances field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s InstanceFactory_newInstances_Results) NewInstances(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// InstanceFactory_newInstances_Results_List is a list of InstanceFactory_newInstances_Results.
type InstanceFactory_newInstances_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Results creates a new list of InstanceFactory_newInstances_Results.
func NewInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstances_Results_List{l}, err
}

func (s InstanceFactory_newInstances_Results_List) At(i int) InstanceFactory_newInstances_Results {
	return InstanceFactory_newInstances_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Results_List) Set(i int, v InstanceFactory_newInstances_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Results_List) String() string {
	str, _ := text.MarshalList(0xaf9a1cb72ba68156, s.List)
	return str
}

// InstanceFactory_newInstances_Results_Future is a wrapper for a InstanceFactory_newInstances_Results promised by a client call.
type InstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Results_Future) Struct() (InstanceFactory_newInstances_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Results{s}, err
}

const schema_9273388a9624d430 = "x\xda\xacWol\x1bg\x19\x7f\x9e{\xed]\x06\x19" +
	"\xf6\xeb\xd7\xb1\x9d*QI\xea\xb2&\xa3VC(\x94" +
	"\x88)v t\x0e\x1a\xf39\xcb\xd4d\x1d\xda%\xb9" +
	"d\x1e\xf69\xf8\xce\x99\x8d6\xc2*\xad\xdb\xaaIT" +
	"C\xe5\xc3\xd4\x95uR;6\xb1VL\xb0i\x9a:" +
	"D\x81\x95.\xd3F\xc6\"\x91\x02\xed\xa86`\x7f*" +
	"\xd8G\xa6\xd2C\xef\xd9\xe7{\xed8\xc9*\xa1|\xc8" +
	"\xf9\xbd\xc7\xcf\xf3\xbc\xbf\xdf\xef\xf9\xe3\x1d\x059.\xf5" +
	"y\xcfl\x01\x18}\x02\xbd\xd7X\xe3+\xdf\xf9\xe6\xd4" +
	"\xa1\xc8\xfd@#\x08\xe0E\xd9\x8f\xfdg\xe9&\x04d" +
	"Kt\x10\xd0:\xf1\xa7\xe7\xff\xde?\xc3\xf6\x01\xdd\x86" +
	"\x00\x1e\xfe\xbe+\xf0&\x82\xc7jy\xe3\xfck\xaf\xec" +
	"\xee|\x00h+Z;\xde\x8a\xfe\xf8\xc0.\xe3Q\xf0" +
	"J2\x00k\x0b<\xc3:\x03\xfc\xa9=p\x0f\xa05" +
	"\xf2\xe44\xbd\xfc\xc1\xe2\x83@[\x89k\x0b\xe0Gv" +
	"(\xf0>;\x1a\x08\x03\xb0g\x03\xbb\x99\x97\x85\xd9\x18" +
	"\x0b[\x9d\xdb\xffp\xe7\xe4\xf3\xfb\x7f\xd8\xcc\xf9\x18{" +
	"\x95\xa9\x8c?\xdd\xc1\xb8\xf3\xe1]]\x87F\x95w\x8e" +
	"\x00\xed\xb0S\x04\xe8?\xcb\xbe\xc7S\x1c\xd9\xfb\xe1\xb1" +
	"\x93\x97\xae\x1ck\x12\xf6\x97\xec4;e;y\x91\xed" +
	"f\xd7\x06\xbf\xcc\xba\x82a\xeb\xaeO\x1d\xfd\xf6\x0fb" +
	"/\x1f\x07\xa5\x15\xc5\xb8\xc8\x0d\xbb\x82\x07XO\x90g" +
	"\xda\x17\xe4q\xdf\xfe\xf0\xe0\x89\xbd'\xfa\x9e\x16\xb1{" +
	"<\xd8\xcd\xb1;\x16\xe4\xd8u\x97\xc8\xe7&\x83\x8f?" +
	"SI\xccv\xd2\xff\xbb`\xda\x06\xd76\xb8\xed\xfe\xe3" +
	"7\xbc\xd0\xf1\xd8I\xd1\x00\xdb\x0ep\x03\xda\xc6\x0d\xee" +
	"]\x08|\xa4\xef\xbf\xfcB\x03\x0c\x9c\x066\xdc\xb6\x8f" +
	"%\xdbxb\xc3m\xff\x00`7\x87|\xd6\x9bGN" +
	"=\x92{\xa9\xff\x14P*\xb9\x97\x01d\xc3\xa1\xe7\xd8" +
	"\xcd!n\x9c\x0c-\x00Z'{\x13g\x1fy;\xf9" +
	"+\x01\xb3\xfbBws\xcc\x1e\xca\xbf\xb2|\xc3\xc3\xd7" +
	"\x9f\x01\xdaI\\\xde8f\xfd\x99\xd0\x10\xb2\xb2\xed\xa5" +
	"\x18\xda\xcd\xce\xf2'\xeb\xb7\xe6\xb3\xe7\xef}\xe7+\xaf" +
	"\x89w\xf8yh\x88\xdf\xe1\xc5\x10\xbf\xc3\xfb\xc3\x07\x8c" +
	"\x7f\xc5\xc6^o \x01\xd9J\xe8\"{\xd7\xf6\xf6\xb7" +
	"\xd0\x19\xa6\x85\xc3\x00\xd6/n\xff\xcf\x96\xe3\xe3\xd2\x12" +
	"\xd0\xce\x1a\xa6c\xe1\xd3\xdc\x9b\x16\xe6\xdeR\x7f^\xfa" +
	"\xee\xebG>^\x01\xa5\x03\x9d\xcc\x97\xc2\xfb\xb8\xc1_" +
	"m\x83o\xcd>}\xdb\xc7?K]\x10=x#\xaf" +
	"r\x83\xf6\x087\xb8}\xcb\xe6\xe5\x95\x85\xd2\x051a" +
	"%2\xc0\x0d\xc6m\x83\xcb7%\xbfZ\xfa\xe0\x8d\x0b" +
	"\xab\x12\xbe/r\x91=\x1c\xe1\x09?\x10y\x90-G" +
	"x\xc2#/%\xbf\xb8\xb8\xaf\xfbb\x1d\xc7\x91\x09\x9b" +
	"c\xdb[\xefO\xcf\xe7\xf7\xff\xa6\xe3=P\xb6\xa1S" +
	"A\x1fE\xceq\x03o;7x\xc8#\xef9z\x89" +
	"\xfd[\xf4\xb0\xb5\xdd\xbeQ_\xfb X\xf6\xdf\x8c\x95" +
	"\xcbOk\xd9\xd8\x94J\xe6\xf4\xb9\x81a}>\xa9\x1b" +
	"\xa6\xaaOi\xb1BQ\x8f\xa6\xd4\x82Jr\x86\xe2!" +
	"\x1e\x00\x0f\x02\xd0\xeb\xba\x01\x94\x16\x82\xca\xd7%\x945" +
	"}\x1e\xfd\xae\x98\x00\xe2Hq\xb3\xe2\x91P<\xa4\x18" +
	"V<\x88\x88)\x82\x18@t\xcb\x07\x00\xfd\x80\xb5\x14" +
	"\xaeiH!U\xc8\x97\xca\xb11\xbd\xa0\xcdf\x0cS" +
	"+\xc4\x8a\xb5G;\xb3\x1c\x1a\xb5\xef\"\xff\xee\x9e\xf1" +
	"\xb4\xe63\x8aY3\x85\xa8\xb4\xd4r\xee\xd9\x04\xa0D" +
	"\x09*q\x09)b\x90\xe3Eo\xe4\x87\xbb\x08*\xb7" +
	"JHJ\x06~\x06\xec\xfc>\x0d\x12\x7f$\xe5\xc6\x93" +
	"Z$\xa91K\x1fO\x93\xdfP\xd08NXN\xde" +
	"@\xb4\x82\xe2!^A\x85\xe8\x88\x89\xd2'\x01\x12A" +
	"LD\x91\xee\x94-\xe7v\xe8\xb8\x97\xf5)\xcdA\xb4" +
	"V3v\xfa\xcd\x0e\xe3hgQ\x83\xd7eC@\x9c" +
	"\xe2\xf5J\x0bg\x83\xb3\x88\xa8\xf8\x1dR\xdc\x92\xc4\x80" +
	"\xb7\xfe \xd1\x82\xd4\x9b\xa6\xd7\x0eXi\xcd0\x93\xfa" +
	"\\\x11\xd0\x1c\xbc\xa5h\xce\x15\xcdz\\\xf6\x8c\xa7\xb2" +
	"E#\xadq\x12\x00\xd6\xa0a\x87@\xc3\xf6/\x00(" +
	"\xdb*z\"\xa52\xfa\xdd\xfe\x0f\xc8\xd5\xb1\xd90U" +
	"\xb3F\x86_\xec>u\xb4xxx\x87\x93o\xa8S" +
	"f\xbeP\x8e\xe9\xda=\xceQt\xd0\x96\x8c\xb1&\x8f" +
	"v\xb6\x15\x9e\x9c\xe9\x85N+\xa6\xb4\x1b \xd1\x8a\x89" +
	"\x0e\xa4\xdbe\xb9P\xd4W![\xc7\x8ax\x18G\xbb" +
	"\xe9/\xdftx|q\xe9\xe4s\x00`i\x8b_\xfa" +
	"\xcb\x13\xe7\x9e\xfa5\x7f~7tP\xef}y\xe9\xbd" +
	"O\x0a\xb3-\xf4QS5\x01l\xb6\xdd\xd6\x8c\xbd\xbe" +
	"[\xcbs\x9a\x838\"\xed\xe9u\x11\xaf\x01\xbe\xc9\x05" +
	"\xdcg\x96\xe74\x14\xda;\xa0\xd7G\x00\xc9\xfc\x9a\xea" +
	"o\xda&8\xdfr\xd6\xac\xeb\x13\x03\xd5>\x11\x94p" +
	"\xb0`\xeb\xa1*+\xa1\xf8\x03\x8d\xfc}-\x9b\xc9\xa9" +
	"\xa6&:\x1f\xd5L\xa7\xd8E\xf7CU\xf7Q\x09\x17" +
	"\xa6US54\xd3I\x99Z\xff\xcc\xe9W\xe2?\x99" +
	"\x7f\xaaQ#\xde\x0d4bD+\xca58\xb6n\xac" +
	"4\x80\xd2JP\xd9&\xa1\x95q\xd4\x82\x86\x1b\xcf\xe5" +
	"\xb6>\x1eV\xc1\xb2\xa5\xe5\xaf9T9-{\x09*" +
	"w\x09\x85\xa0M\x00(\xd3\x04\x959\x09\xa9$\x05Q" +
	"\x02\xa0\xb9I\x00%KP)IH\x09\x09\"\x01\xa0" +
	"Eni\x12T\x0eJ\xe8+h\x86i\xd7\xaf\xd0p" +
	"m\\\xcdLN\x1b\xd5\x0a\x19 \x9a\xd1\x00\x09\x05\xb4" +
	"\x8c|&\x9b*\xe4g@\xced5\xa4V\xcf\xe1\xc4" +
	"\x8f\x8e\x9d\x9e\xb5\x9c\xf7\xb9\xd9\x9c9<\xaf\xe9@\xc4" +
	"\xe2\x1b\xfa\xfdc\xb3\xff\xbdt\xc7\xe1\xeaE\x13\x1e\xa4" +
	"\x98\x16\xd5\xbaZ\xa6\x9bc\\\x94\x1c\x80\xca\x95vv" +
	"\xdb!\xb6\xf3\x7f\x12\xdd\xba\x09\x00\x09\xed\xe4\x9f<\xb4" +
	"m\x00@\xceet9\xa7\x96\x881-\xab\xf3\xb3\x83" +
	"9m:\xa3\xea\xeb\x97\xb9\xfd2\xa9\xcf\xe4\xa3)\xd5" +
	"WW\xe4\x9e\x0dF\x8aP\xf4\xceF\x8a\xced\xa5t" +
	"\x02 \xe1\xc7\xc4g\x91\xf6\xc9VQ\xe8\xe7W\xd3\x93" +
	"S\xb8\xb1\xc8k\xba\xdb\xa0\x82Vu\xc7\xfan&\xe2" +
	"\"\xe7\x0be~\xb9V\xfbr\xce^\x86\x7f<G\xae" +
	",~\x7f\xf1-\xaa\xa4A\xa2I\x19\xdd=\x17\x9d\x8d" +
	"\x81\xde8\x09\x12\xdd)\xa3T[\x8b\xd0Y)i\xcf" +
	"\xdd \xd1.\xd9r0\x07\xcc\xc7\xd1r\x8a\x08\xf8\xc4" +
	"\x12?\xfbxYU\x07\x93\xd8\x02\xd7\x9f\xf9\x0e=\xc2" +
	"\x8bJ\x13\xa8Gh\xa4Z\x98w\x8a\x85\x09\x80T\xec" +
	"2\xff\xb7)X\xa9\x8bO\xdcJ\x9a\xe4\xfb(\x00\x8f" +
	"\xa4tHh\xe9\xc5\xdc\xa4V\xb8e\x06\x9do\xa0\x81" +
	"\x04$$\x1b.D\xcd\xc0i\xda\xb7&\xaa\xf0|^" +
	"\xc2:\xf5\"u7\x95:|D\xe1\xd6\xdd\x96\xac\xa5" +
	"\xdb\xeaPm\x165\"m\xd8\x84\xea\xc4+\xba\xe7*" +
	"\xaa,\x0f\\\xbc\xcef\x8d\xceo\x02\xda\xd7\x0d\x12\xdd" +
	"\xca\xc5\xeb\xfc\x16Bga\xa6\xed\x03 \xd1\xeb\xec!" +
	"\x1d\xc7\xc1\xca\x04YG\x80\xeb\xcd\x1d\x1bU\xb2\xe1\\" +
	"\xf3\xbb?+\x1b\xaa\xf2j6\xdaf\xc1\x86\xdc`\x0b" +
	"FqjJ3\x0cD\x90\x10\xafB\x89M{\xcb\x88" +
	"@R}\xe5\x88\xb3\x8c\x02\xfe/\x00\x00\xff\xff\x9fc" +
	"\x93\x1a"

func init() {
	schemas.Register(schema_9273388a9624d430,
		0x811895634b6bd959,
		0x82136633e6b6d8ae,
		0x851d47c6ccdecf08,
		0x87cbebfc1164a24a,
		0x8f86b66260d02d1d,
		0x9ee4515395213845,
		0xa5feedafa5ec5c4a,
		0xa6be2e805ea10a68,
		0xa931ae5cae90ece0,
		0xaa9d146226037822,
		0xaf9a1cb72ba68156,
		0xb7fc866ef1127f7c,
		0xbd33bb6d8cbd9ed2,
		0xbf49e08cc9412aaf,
		0xc727892bd5c66f88,
		0xcc39e47cdead74c4,
		0xce552eef738a45ea,
		0xd10259a623f95bb4,
		0xd9fa9ece71d1db50,
		0xdf50acfa56a9674e,
		0xdf787fd9d51f235b,
		0xdfcfeb783c4948fc,
		0xe22282cb3449bb4a,
		0xe91cc3866fdea82a,
		0xf013eda158070488)
}
