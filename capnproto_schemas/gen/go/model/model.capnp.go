// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/management"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	soil "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/soil"
)

type XYResult struct{ capnp.Struct }

// XYResult_TypeID is the unique identifier for the type XYResult.
const XYResult_TypeID = 0x851d47c6ccdecf08

func NewXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func NewRootXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func ReadRootXYResult(msg *capnp.Message) (XYResult, error) {
	root, err := msg.Root()
	return XYResult{root.Struct()}, err
}

func (s XYResult) String() string {
	str, _ := text.Marshal(0x851d47c6ccdecf08, s.Struct)
	return str
}

func (s XYResult) Xs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasXs() bool {
	return s.Struct.HasPtr(0)
}

func (s XYResult) SetXs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewXs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s XYResult) Ys() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasYs() bool {
	return s.Struct.HasPtr(1)
}

func (s XYResult) SetYs(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewYs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYResult_List is a list of XYResult.
type XYResult_List struct{ capnp.List }

// NewXYResult creates a new list of XYResult.
func NewXYResult_List(s *capnp.Segment, sz int32) (XYResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYResult_List{l}, err
}

func (s XYResult_List) At(i int) XYResult { return XYResult{s.List.Struct(i)} }

func (s XYResult_List) Set(i int, v XYResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYResult_List) String() string {
	str, _ := text.MarshalList(0x851d47c6ccdecf08, s.List)
	return str
}

// XYResult_Future is a wrapper for a XYResult promised by a client call.
type XYResult_Future struct{ *capnp.Future }

func (p XYResult_Future) Struct() (XYResult, error) {
	s, err := p.Future.Struct()
	return XYResult{s}, err
}

type Stat struct{ capnp.Struct }

// Stat_TypeID is the unique identifier for the type Stat.
const Stat_TypeID = 0xa6be2e805ea10a68

func NewStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func NewRootStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func ReadRootStat(msg *capnp.Message) (Stat, error) {
	root, err := msg.Root()
	return Stat{root.Struct()}, err
}

func (s Stat) String() string {
	str, _ := text.Marshal(0xa6be2e805ea10a68, s.Struct)
	return str
}

func (s Stat) Type() Stat_Type {
	return Stat_Type(s.Struct.Uint16(0) ^ 3)
}

func (s Stat) SetType(v Stat_Type) {
	s.Struct.SetUint16(0, uint16(v)^3)
}

func (s Stat) Vs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Stat) HasVs() bool {
	return s.Struct.HasPtr(0)
}

func (s Stat) SetVs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVs sets the vs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Stat) NewVs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Stat_List is a list of Stat.
type Stat_List struct{ capnp.List }

// NewStat creates a new list of Stat.
func NewStat_List(s *capnp.Segment, sz int32) (Stat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Stat_List{l}, err
}

func (s Stat_List) At(i int) Stat { return Stat{s.List.Struct(i)} }

func (s Stat_List) Set(i int, v Stat) error { return s.List.SetStruct(i, v.Struct) }

func (s Stat_List) String() string {
	str, _ := text.MarshalList(0xa6be2e805ea10a68, s.List)
	return str
}

// Stat_Future is a wrapper for a Stat promised by a client call.
type Stat_Future struct{ *capnp.Future }

func (p Stat_Future) Struct() (Stat, error) {
	s, err := p.Future.Struct()
	return Stat{s}, err
}

type Stat_Type uint16

// Stat_Type_TypeID is the unique identifier for the type Stat_Type.
const Stat_Type_TypeID = 0xbd33bb6d8cbd9ed2

// Values of Stat_Type.
const (
	Stat_Type_min    Stat_Type = 0
	Stat_Type_max    Stat_Type = 1
	Stat_Type_sd     Stat_Type = 2
	Stat_Type_avg    Stat_Type = 3
	Stat_Type_median Stat_Type = 4
)

// String returns the enum's constant name.
func (c Stat_Type) String() string {
	switch c {
	case Stat_Type_min:
		return "min"
	case Stat_Type_max:
		return "max"
	case Stat_Type_sd:
		return "sd"
	case Stat_Type_avg:
		return "avg"
	case Stat_Type_median:
		return "median"

	default:
		return ""
	}
}

// Stat_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Stat_TypeFromString(c string) Stat_Type {
	switch c {
	case "min":
		return Stat_Type_min
	case "max":
		return Stat_Type_max
	case "sd":
		return Stat_Type_sd
	case "avg":
		return Stat_Type_avg
	case "median":
		return Stat_Type_median

	default:
		return 0
	}
}

type Stat_Type_List struct{ capnp.List }

func NewStat_Type_List(s *capnp.Segment, sz int32) (Stat_Type_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Stat_Type_List{l.List}, err
}

func (l Stat_Type_List) At(i int) Stat_Type {
	ul := capnp.UInt16List{List: l.List}
	return Stat_Type(ul.At(i))
}

func (l Stat_Type_List) Set(i int, v Stat_Type) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type XYPlusResult struct{ capnp.Struct }

// XYPlusResult_TypeID is the unique identifier for the type XYPlusResult.
const XYPlusResult_TypeID = 0x8f86b66260d02d1d

func NewXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func NewRootXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func ReadRootXYPlusResult(msg *capnp.Message) (XYPlusResult, error) {
	root, err := msg.Root()
	return XYPlusResult{root.Struct()}, err
}

func (s XYPlusResult) String() string {
	str, _ := text.Marshal(0x8f86b66260d02d1d, s.Struct)
	return str
}

func (s XYPlusResult) Xy() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s XYPlusResult) HasXy() bool {
	return s.Struct.HasPtr(0)
}

func (s XYPlusResult) SetXy(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewXy sets the xy field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s XYPlusResult) NewXy() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s XYPlusResult) Stats() (Stat_List, error) {
	p, err := s.Struct.Ptr(1)
	return Stat_List{List: p.List()}, err
}

func (s XYPlusResult) HasStats() bool {
	return s.Struct.HasPtr(1)
}

func (s XYPlusResult) SetStats(v Stat_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewStats sets the stats field to a newly
// allocated Stat_List, preferring placement in s's segment.
func (s XYPlusResult) NewStats(n int32) (Stat_List, error) {
	l, err := NewStat_List(s.Struct.Segment(), n)
	if err != nil {
		return Stat_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYPlusResult_List is a list of XYPlusResult.
type XYPlusResult_List struct{ capnp.List }

// NewXYPlusResult creates a new list of XYPlusResult.
func NewXYPlusResult_List(s *capnp.Segment, sz int32) (XYPlusResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYPlusResult_List{l}, err
}

func (s XYPlusResult_List) At(i int) XYPlusResult { return XYPlusResult{s.List.Struct(i)} }

func (s XYPlusResult_List) Set(i int, v XYPlusResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYPlusResult_List) String() string {
	str, _ := text.MarshalList(0x8f86b66260d02d1d, s.List)
	return str
}

// XYPlusResult_Future is a wrapper for a XYPlusResult promised by a client call.
type XYPlusResult_Future struct{ *capnp.Future }

func (p XYPlusResult_Future) Struct() (XYPlusResult, error) {
	s, err := p.Future.Struct()
	return XYPlusResult{s}, err
}

func (p XYPlusResult_Future) Xy() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance struct{ Client *capnp.Client }

// ClimateInstance_TypeID is the unique identifier for the type ClimateInstance.
const ClimateInstance_TypeID = 0xdfcfeb783c4948fc

func (c ClimateInstance) Run(ctx context.Context, params func(ClimateInstance_run_Params) error) (ClimateInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) RunSet(ctx context.Context, params func(ClimateInstance_runSet_Params) error) (ClimateInstance_runSet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_runSet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_runSet_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c ClimateInstance) AddRef() ClimateInstance {
	return ClimateInstance{
		Client: c.Client.AddRef(),
	}
}

func (c ClimateInstance) Release() {
	c.Client.Release()
}

// A ClimateInstance_Server is a ClimateInstance with a local implementation.
type ClimateInstance_Server interface {
	Run(context.Context, ClimateInstance_run) error

	RunSet(context.Context, ClimateInstance_runSet) error

	Info(context.Context, common.Identifiable_info) error
}

// ClimateInstance_NewServer creates a new Server from an implementation of ClimateInstance_Server.
func ClimateInstance_NewServer(s ClimateInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClimateInstance_Methods(nil, s), s, c, policy)
}

// ClimateInstance_ServerToClient creates a new Client from an implementation of ClimateInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func ClimateInstance_ServerToClient(s ClimateInstance_Server, policy *server.Policy) ClimateInstance {
	return ClimateInstance{Client: capnp.NewClient(ClimateInstance_NewServer(s, policy))}
}

// ClimateInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClimateInstance_Methods(methods []server.Method, s ClimateInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ClimateInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RunSet(ctx, ClimateInstance_runSet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ClimateInstance_run holds the state for a server call to ClimateInstance.run.
// See server.Call for documentation.
type ClimateInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_run) Args() ClimateInstance_run_Params {
	return ClimateInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_run) AllocResults() (ClimateInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{Struct: r}, err
}

// ClimateInstance_runSet holds the state for a server call to ClimateInstance.runSet.
// See server.Call for documentation.
type ClimateInstance_runSet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_runSet) Args() ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_runSet) AllocResults() (ClimateInstance_runSet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{Struct: r}, err
}

type ClimateInstance_run_Params struct{ capnp.Struct }

// ClimateInstance_run_Params_TypeID is the unique identifier for the type ClimateInstance_run_Params.
const ClimateInstance_run_Params_TypeID = 0xdf787fd9d51f235b

func NewClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func NewRootClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func ReadRootClimateInstance_run_Params(msg *capnp.Message) (ClimateInstance_run_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Params{root.Struct()}, err
}

func (s ClimateInstance_run_Params) String() string {
	str, _ := text.Marshal(0xdf787fd9d51f235b, s.Struct)
	return str
}

func (s ClimateInstance_run_Params) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s ClimateInstance_run_Params) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Params) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ClimateInstance_run_Params_List is a list of ClimateInstance_run_Params.
type ClimateInstance_run_Params_List struct{ capnp.List }

// NewClimateInstance_run_Params creates a new list of ClimateInstance_run_Params.
func NewClimateInstance_run_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Params_List{l}, err
}

func (s ClimateInstance_run_Params_List) At(i int) ClimateInstance_run_Params {
	return ClimateInstance_run_Params{s.List.Struct(i)}
}

func (s ClimateInstance_run_Params_List) Set(i int, v ClimateInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0xdf787fd9d51f235b, s.List)
	return str
}

// ClimateInstance_run_Params_Future is a wrapper for a ClimateInstance_run_Params promised by a client call.
type ClimateInstance_run_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Params_Future) Struct() (ClimateInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Params{s}, err
}

func (p ClimateInstance_run_Params_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type ClimateInstance_run_Results struct{ capnp.Struct }

// ClimateInstance_run_Results_TypeID is the unique identifier for the type ClimateInstance_run_Results.
const ClimateInstance_run_Results_TypeID = 0xcc39e47cdead74c4

func NewClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func NewRootClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func ReadRootClimateInstance_run_Results(msg *capnp.Message) (ClimateInstance_run_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Results{root.Struct()}, err
}

func (s ClimateInstance_run_Results) String() string {
	str, _ := text.Marshal(0xcc39e47cdead74c4, s.Struct)
	return str
}

func (s ClimateInstance_run_Results) Result() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Results) SetResult(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s ClimateInstance_run_Results) NewResult() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_run_Results_List is a list of ClimateInstance_run_Results.
type ClimateInstance_run_Results_List struct{ capnp.List }

// NewClimateInstance_run_Results creates a new list of ClimateInstance_run_Results.
func NewClimateInstance_run_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Results_List{l}, err
}

func (s ClimateInstance_run_Results_List) At(i int) ClimateInstance_run_Results {
	return ClimateInstance_run_Results{s.List.Struct(i)}
}

func (s ClimateInstance_run_Results_List) Set(i int, v ClimateInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xcc39e47cdead74c4, s.List)
	return str
}

// ClimateInstance_run_Results_Future is a wrapper for a ClimateInstance_run_Results promised by a client call.
type ClimateInstance_run_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Results_Future) Struct() (ClimateInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Results{s}, err
}

func (p ClimateInstance_run_Results_Future) Result() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance_runSet_Params struct{ capnp.Struct }

// ClimateInstance_runSet_Params_TypeID is the unique identifier for the type ClimateInstance_runSet_Params.
const ClimateInstance_runSet_Params_TypeID = 0xaa9d146226037822

func NewClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func NewRootClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func ReadRootClimateInstance_runSet_Params(msg *capnp.Message) (ClimateInstance_runSet_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Params{root.Struct()}, err
}

func (s ClimateInstance_runSet_Params) String() string {
	str, _ := text.Marshal(0xaa9d146226037822, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Params) Dataset() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s ClimateInstance_runSet_Params) HasDataset() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Params) SetDataset(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDataset sets the dataset field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ClimateInstance_runSet_Params) NewDataset(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ClimateInstance_runSet_Params_List is a list of ClimateInstance_runSet_Params.
type ClimateInstance_runSet_Params_List struct{ capnp.List }

// NewClimateInstance_runSet_Params creates a new list of ClimateInstance_runSet_Params.
func NewClimateInstance_runSet_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Params_List{l}, err
}

func (s ClimateInstance_runSet_Params_List) At(i int) ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Params_List) Set(i int, v ClimateInstance_runSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Params_List) String() string {
	str, _ := text.MarshalList(0xaa9d146226037822, s.List)
	return str
}

// ClimateInstance_runSet_Params_Future is a wrapper for a ClimateInstance_runSet_Params promised by a client call.
type ClimateInstance_runSet_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Params_Future) Struct() (ClimateInstance_runSet_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Params{s}, err
}

type ClimateInstance_runSet_Results struct{ capnp.Struct }

// ClimateInstance_runSet_Results_TypeID is the unique identifier for the type ClimateInstance_runSet_Results.
const ClimateInstance_runSet_Results_TypeID = 0xe22282cb3449bb4a

func NewClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func NewRootClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func ReadRootClimateInstance_runSet_Results(msg *capnp.Message) (ClimateInstance_runSet_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Results{root.Struct()}, err
}

func (s ClimateInstance_runSet_Results) String() string {
	str, _ := text.Marshal(0xe22282cb3449bb4a, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Results) Result() (XYPlusResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYPlusResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_runSet_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Results) SetResult(v XYPlusResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYPlusResult struct, preferring placement in s's segment.
func (s ClimateInstance_runSet_Results) NewResult() (XYPlusResult, error) {
	ss, err := NewXYPlusResult(s.Struct.Segment())
	if err != nil {
		return XYPlusResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_runSet_Results_List is a list of ClimateInstance_runSet_Results.
type ClimateInstance_runSet_Results_List struct{ capnp.List }

// NewClimateInstance_runSet_Results creates a new list of ClimateInstance_runSet_Results.
func NewClimateInstance_runSet_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Results_List{l}, err
}

func (s ClimateInstance_runSet_Results_List) At(i int) ClimateInstance_runSet_Results {
	return ClimateInstance_runSet_Results{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Results_List) Set(i int, v ClimateInstance_runSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Results_List) String() string {
	str, _ := text.MarshalList(0xe22282cb3449bb4a, s.List)
	return str
}

// ClimateInstance_runSet_Results_Future is a wrapper for a ClimateInstance_runSet_Results promised by a client call.
type ClimateInstance_runSet_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Results_Future) Struct() (ClimateInstance_runSet_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Results{s}, err
}

func (p ClimateInstance_runSet_Results_Future) Result() XYPlusResult_Future {
	return XYPlusResult_Future{Future: p.Future.Field(0, nil)}
}

type Env struct{ capnp.Struct }

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xb7fc866ef1127f7c

func NewEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func NewRootEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func ReadRootEnv(msg *capnp.Message) (Env, error) {
	root, err := msg.Root()
	return Env{root.Struct()}, err
}

func (s Env) String() string {
	str, _ := text.Marshal(0xb7fc866ef1127f7c, s.Struct)
	return str
}

func (s Env) Rest() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Env) HasRest() bool {
	return s.Struct.HasPtr(0)
}

func (s Env) SetRest(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Env) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(1)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s Env) HasTimeSeries() bool {
	return s.Struct.HasPtr(1)
}

func (s Env) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Env) SoilProfile() (soil.Profile, error) {
	p, err := s.Struct.Ptr(2)
	return soil.Profile{Struct: p.Struct()}, err
}

func (s Env) HasSoilProfile() bool {
	return s.Struct.HasPtr(2)
}

func (s Env) SetSoilProfile(v soil.Profile) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSoilProfile sets the soilProfile field to a newly
// allocated soil.Profile struct, preferring placement in s's segment.
func (s Env) NewSoilProfile() (soil.Profile, error) {
	ss, err := soil.NewProfile(s.Struct.Segment())
	if err != nil {
		return soil.Profile{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Env) MgmtEvents() (management.Event_List, error) {
	p, err := s.Struct.Ptr(3)
	return management.Event_List{List: p.List()}, err
}

func (s Env) HasMgmtEvents() bool {
	return s.Struct.HasPtr(3)
}

func (s Env) SetMgmtEvents(v management.Event_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMgmtEvents sets the mgmtEvents field to a newly
// allocated management.Event_List, preferring placement in s's segment.
func (s Env) NewMgmtEvents(n int32) (management.Event_List, error) {
	l, err := management.NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return management.Event_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Env_List is a list of Env.
type Env_List struct{ capnp.List }

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Env_List{l}, err
}

func (s Env_List) At(i int) Env { return Env{s.List.Struct(i)} }

func (s Env_List) Set(i int, v Env) error { return s.List.SetStruct(i, v.Struct) }

func (s Env_List) String() string {
	str, _ := text.MarshalList(0xb7fc866ef1127f7c, s.List)
	return str
}

// Env_Future is a wrapper for a Env promised by a client call.
type Env_Future struct{ *capnp.Future }

func (p Env_Future) Struct() (Env, error) {
	s, err := p.Future.Struct()
	return Env{s}, err
}

func (p Env_Future) Rest() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Env_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(1, nil).Client()}
}

func (p Env_Future) SoilProfile() soil.Profile_Future {
	return soil.Profile_Future{Future: p.Future.Field(2, nil)}
}

type EnvInstance struct{ Client *capnp.Client }

// EnvInstance_TypeID is the unique identifier for the type EnvInstance.
const EnvInstance_TypeID = 0xa5feedafa5ec5c4a

func (c EnvInstance) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Save(ctx context.Context, params func(persistence.Persistent_save_Params) error) (persistence.Persistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_save_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstance) AddRef() EnvInstance {
	return EnvInstance{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstance) Release() {
	c.Client.Release()
}

// A EnvInstance_Server is a EnvInstance with a local implementation.
type EnvInstance_Server interface {
	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstance_NewServer creates a new Server from an implementation of EnvInstance_Server.
func EnvInstance_NewServer(s EnvInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstance_Methods(nil, s), s, c, policy)
}

// EnvInstance_ServerToClient creates a new Client from an implementation of EnvInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstance_ServerToClient(s EnvInstance_Server, policy *server.Policy) EnvInstance {
	return EnvInstance{Client: capnp.NewClient(EnvInstance_NewServer(s, policy))}
}

// EnvInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstance_Methods(methods []server.Method, s EnvInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstance_run holds the state for a server call to EnvInstance.run.
// See server.Call for documentation.
type EnvInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstance_run) Args() EnvInstance_run_Params {
	return EnvInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstance_run) AllocResults() (EnvInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{Struct: r}, err
}

type EnvInstance_run_Params struct{ capnp.Struct }

// EnvInstance_run_Params_TypeID is the unique identifier for the type EnvInstance_run_Params.
const EnvInstance_run_Params_TypeID = 0x811895634b6bd959

func NewEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func NewRootEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func ReadRootEnvInstance_run_Params(msg *capnp.Message) (EnvInstance_run_Params, error) {
	root, err := msg.Root()
	return EnvInstance_run_Params{root.Struct()}, err
}

func (s EnvInstance_run_Params) String() string {
	str, _ := text.Marshal(0x811895634b6bd959, s.Struct)
	return str
}

func (s EnvInstance_run_Params) Env() (Env, error) {
	p, err := s.Struct.Ptr(0)
	return Env{Struct: p.Struct()}, err
}

func (s EnvInstance_run_Params) HasEnv() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Params) SetEnv(v Env) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Env struct, preferring placement in s's segment.
func (s EnvInstance_run_Params) NewEnv() (Env, error) {
	ss, err := NewEnv(s.Struct.Segment())
	if err != nil {
		return Env{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EnvInstance_run_Params_List is a list of EnvInstance_run_Params.
type EnvInstance_run_Params_List struct{ capnp.List }

// NewEnvInstance_run_Params creates a new list of EnvInstance_run_Params.
func NewEnvInstance_run_Params_List(s *capnp.Segment, sz int32) (EnvInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Params_List{l}, err
}

func (s EnvInstance_run_Params_List) At(i int) EnvInstance_run_Params {
	return EnvInstance_run_Params{s.List.Struct(i)}
}

func (s EnvInstance_run_Params_List) Set(i int, v EnvInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0x811895634b6bd959, s.List)
	return str
}

// EnvInstance_run_Params_Future is a wrapper for a EnvInstance_run_Params promised by a client call.
type EnvInstance_run_Params_Future struct{ *capnp.Future }

func (p EnvInstance_run_Params_Future) Struct() (EnvInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Params{s}, err
}

func (p EnvInstance_run_Params_Future) Env() Env_Future {
	return Env_Future{Future: p.Future.Field(0, nil)}
}

type EnvInstance_run_Results struct{ capnp.Struct }

// EnvInstance_run_Results_TypeID is the unique identifier for the type EnvInstance_run_Results.
const EnvInstance_run_Results_TypeID = 0xa931ae5cae90ece0

func NewEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func NewRootEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func ReadRootEnvInstance_run_Results(msg *capnp.Message) (EnvInstance_run_Results, error) {
	root, err := msg.Root()
	return EnvInstance_run_Results{root.Struct()}, err
}

func (s EnvInstance_run_Results) String() string {
	str, _ := text.Marshal(0xa931ae5cae90ece0, s.Struct)
	return str
}

func (s EnvInstance_run_Results) Result() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s EnvInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Results) SetResult(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// EnvInstance_run_Results_List is a list of EnvInstance_run_Results.
type EnvInstance_run_Results_List struct{ capnp.List }

// NewEnvInstance_run_Results creates a new list of EnvInstance_run_Results.
func NewEnvInstance_run_Results_List(s *capnp.Segment, sz int32) (EnvInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Results_List{l}, err
}

func (s EnvInstance_run_Results_List) At(i int) EnvInstance_run_Results {
	return EnvInstance_run_Results{s.List.Struct(i)}
}

func (s EnvInstance_run_Results_List) Set(i int, v EnvInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xa931ae5cae90ece0, s.List)
	return str
}

// EnvInstance_run_Results_Future is a wrapper for a EnvInstance_run_Results promised by a client call.
type EnvInstance_run_Results_Future struct{ *capnp.Future }

func (p EnvInstance_run_Results_Future) Struct() (EnvInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Results{s}, err
}

func (p EnvInstance_run_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type EnvInstanceProxy struct{ Client *capnp.Client }

// EnvInstanceProxy_TypeID is the unique identifier for the type EnvInstanceProxy.
const EnvInstanceProxy_TypeID = 0x87cbebfc1164a24a

func (c EnvInstanceProxy) RegisterEnvInstance(ctx context.Context, params func(EnvInstanceProxy_registerEnvInstance_Params) error) (EnvInstanceProxy_registerEnvInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_registerEnvInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstanceProxy_registerEnvInstance_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Save(ctx context.Context, params func(persistence.Persistent_save_Params) error) (persistence.Persistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_save_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstanceProxy) AddRef() EnvInstanceProxy {
	return EnvInstanceProxy{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstanceProxy) Release() {
	c.Client.Release()
}

// A EnvInstanceProxy_Server is a EnvInstanceProxy with a local implementation.
type EnvInstanceProxy_Server interface {
	RegisterEnvInstance(context.Context, EnvInstanceProxy_registerEnvInstance) error

	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstanceProxy_NewServer creates a new Server from an implementation of EnvInstanceProxy_Server.
func EnvInstanceProxy_NewServer(s EnvInstanceProxy_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Methods(nil, s), s, c, policy)
}

// EnvInstanceProxy_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_ServerToClient(s EnvInstanceProxy_Server, policy *server.Policy) EnvInstanceProxy {
	return EnvInstanceProxy{Client: capnp.NewClient(EnvInstanceProxy_NewServer(s, policy))}
}

// EnvInstanceProxy_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Methods(methods []server.Method, s EnvInstanceProxy_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterEnvInstance(ctx, EnvInstanceProxy_registerEnvInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstanceProxy_registerEnvInstance holds the state for a server call to EnvInstanceProxy.registerEnvInstance.
// See server.Call for documentation.
type EnvInstanceProxy_registerEnvInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_registerEnvInstance) Args() EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_registerEnvInstance) AllocResults() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{Struct: r}, err
}

type EnvInstanceProxy_registerEnvInstance_Params struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Params_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Params.
const EnvInstanceProxy_registerEnvInstance_Params_TypeID = 0xd10259a623f95bb4

func NewEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Params(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Params{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params) String() string {
	str, _ := text.Marshal(0xd10259a623f95bb4, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Instance() EnvInstance {
	p, _ := s.Struct.Ptr(0)
	return EnvInstance{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Params) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Params) SetInstance(v EnvInstance) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Params_List is a list of EnvInstanceProxy_registerEnvInstance_Params.
type EnvInstanceProxy_registerEnvInstance_Params_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Params creates a new list of EnvInstanceProxy_registerEnvInstance_Params.
func NewEnvInstanceProxy_registerEnvInstance_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Params_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) At(i int) EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) String() string {
	str, _ := text.MarshalList(0xd10259a623f95bb4, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Params_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Params promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Params_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Params{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Instance() EnvInstance {
	return EnvInstance{Client: p.Future.Field(0, nil).Client()}
}

type EnvInstanceProxy_registerEnvInstance_Results struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Results_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Results.
const EnvInstanceProxy_registerEnvInstance_Results_TypeID = 0xdf50acfa56a9674e

func NewEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Results(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Results{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results) String() string {
	str, _ := text.Marshal(0xdf50acfa56a9674e, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Unregister() common.Action {
	p, _ := s.Struct.Ptr(0)
	return common.Action{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Results) SetUnregister(v common.Action) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Results_List is a list of EnvInstanceProxy_registerEnvInstance_Results.
type EnvInstanceProxy_registerEnvInstance_Results_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Results creates a new list of EnvInstanceProxy_registerEnvInstance_Results.
func NewEnvInstanceProxy_registerEnvInstance_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Results_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) At(i int) EnvInstanceProxy_registerEnvInstance_Results {
	return EnvInstanceProxy_registerEnvInstance_Results{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xdf50acfa56a9674e, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Results_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Results promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Results_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Results{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Unregister() common.Action {
	return common.Action{Client: p.Future.Field(0, nil).Client()}
}

type InstanceFactory struct{ Client *capnp.Client }

// InstanceFactory_TypeID is the unique identifier for the type InstanceFactory.
const InstanceFactory_TypeID = 0xce552eef738a45ea

func (c InstanceFactory) ModelInfo(ctx context.Context, params func(InstanceFactory_modelInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_modelInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstance(ctx context.Context, params func(InstanceFactory_newInstance_Params) error) (InstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstances(ctx context.Context, params func(InstanceFactory_newInstances_Params) error) (InstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstances_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c InstanceFactory) AddRef() InstanceFactory {
	return InstanceFactory{
		Client: c.Client.AddRef(),
	}
}

func (c InstanceFactory) Release() {
	c.Client.Release()
}

// A InstanceFactory_Server is a InstanceFactory with a local implementation.
type InstanceFactory_Server interface {
	ModelInfo(context.Context, InstanceFactory_modelInfo) error

	NewInstance(context.Context, InstanceFactory_newInstance) error

	NewInstances(context.Context, InstanceFactory_newInstances) error

	Info(context.Context, common.Identifiable_info) error
}

// InstanceFactory_NewServer creates a new Server from an implementation of InstanceFactory_Server.
func InstanceFactory_NewServer(s InstanceFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(InstanceFactory_Methods(nil, s), s, c, policy)
}

// InstanceFactory_ServerToClient creates a new Client from an implementation of InstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func InstanceFactory_ServerToClient(s InstanceFactory_Server, policy *server.Policy) InstanceFactory {
	return InstanceFactory{Client: capnp.NewClient(InstanceFactory_NewServer(s, policy))}
}

// InstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func InstanceFactory_Methods(methods []server.Method, s InstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelInfo(ctx, InstanceFactory_modelInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, InstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, InstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// InstanceFactory_modelInfo holds the state for a server call to InstanceFactory.modelInfo.
// See server.Call for documentation.
type InstanceFactory_modelInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_modelInfo) Args() InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_modelInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// InstanceFactory_newInstance holds the state for a server call to InstanceFactory.newInstance.
// See server.Call for documentation.
type InstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstance) Args() InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstance) AllocResults() (InstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{Struct: r}, err
}

// InstanceFactory_newInstances holds the state for a server call to InstanceFactory.newInstances.
// See server.Call for documentation.
type InstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstances) Args() InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstances) AllocResults() (InstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{Struct: r}, err
}

type InstanceFactory_modelInfo_Params struct{ capnp.Struct }

// InstanceFactory_modelInfo_Params_TypeID is the unique identifier for the type InstanceFactory_modelInfo_Params.
const InstanceFactory_modelInfo_Params_TypeID = 0xbf49e08cc9412aaf

func NewInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func NewRootInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func ReadRootInstanceFactory_modelInfo_Params(msg *capnp.Message) (InstanceFactory_modelInfo_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_modelInfo_Params{root.Struct()}, err
}

func (s InstanceFactory_modelInfo_Params) String() string {
	str, _ := text.Marshal(0xbf49e08cc9412aaf, s.Struct)
	return str
}

// InstanceFactory_modelInfo_Params_List is a list of InstanceFactory_modelInfo_Params.
type InstanceFactory_modelInfo_Params_List struct{ capnp.List }

// NewInstanceFactory_modelInfo_Params creates a new list of InstanceFactory_modelInfo_Params.
func NewInstanceFactory_modelInfo_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_modelInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_modelInfo_Params_List{l}, err
}

func (s InstanceFactory_modelInfo_Params_List) At(i int) InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{s.List.Struct(i)}
}

func (s InstanceFactory_modelInfo_Params_List) Set(i int, v InstanceFactory_modelInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_modelInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xbf49e08cc9412aaf, s.List)
	return str
}

// InstanceFactory_modelInfo_Params_Future is a wrapper for a InstanceFactory_modelInfo_Params promised by a client call.
type InstanceFactory_modelInfo_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_modelInfo_Params_Future) Struct() (InstanceFactory_modelInfo_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_modelInfo_Params{s}, err
}

type InstanceFactory_newInstance_Params struct{ capnp.Struct }

// InstanceFactory_newInstance_Params_TypeID is the unique identifier for the type InstanceFactory_newInstance_Params.
const InstanceFactory_newInstance_Params_TypeID = 0x9ee4515395213845

func NewInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func NewRootInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func ReadRootInstanceFactory_newInstance_Params(msg *capnp.Message) (InstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x9ee4515395213845, s.Struct)
	return str
}

// InstanceFactory_newInstance_Params_List is a list of InstanceFactory_newInstance_Params.
type InstanceFactory_newInstance_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Params creates a new list of InstanceFactory_newInstance_Params.
func NewInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_newInstance_Params_List{l}, err
}

func (s InstanceFactory_newInstance_Params_List) At(i int) InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Params_List) Set(i int, v InstanceFactory_newInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Params_List) String() string {
	str, _ := text.MarshalList(0x9ee4515395213845, s.List)
	return str
}

// InstanceFactory_newInstance_Params_Future is a wrapper for a InstanceFactory_newInstance_Params promised by a client call.
type InstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Params_Future) Struct() (InstanceFactory_newInstance_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Params{s}, err
}

type InstanceFactory_newInstance_Results struct{ capnp.Struct }

// InstanceFactory_newInstance_Results_TypeID is the unique identifier for the type InstanceFactory_newInstance_Results.
const InstanceFactory_newInstance_Results_TypeID = 0xf013eda158070488

func NewInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func NewRootInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func ReadRootInstanceFactory_newInstance_Results(msg *capnp.Message) (InstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf013eda158070488, s.Struct)
	return str
}

func (s InstanceFactory_newInstance_Results) Instance() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s InstanceFactory_newInstance_Results) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstance_Results) SetInstance(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// InstanceFactory_newInstance_Results_List is a list of InstanceFactory_newInstance_Results.
type InstanceFactory_newInstance_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Results creates a new list of InstanceFactory_newInstance_Results.
func NewInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstance_Results_List{l}, err
}

func (s InstanceFactory_newInstance_Results_List) At(i int) InstanceFactory_newInstance_Results {
	return InstanceFactory_newInstance_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Results_List) Set(i int, v InstanceFactory_newInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xf013eda158070488, s.List)
	return str
}

// InstanceFactory_newInstance_Results_Future is a wrapper for a InstanceFactory_newInstance_Results promised by a client call.
type InstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Results_Future) Struct() (InstanceFactory_newInstance_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Results{s}, err
}

func (p InstanceFactory_newInstance_Results_Future) Instance() *capnp.Future {
	return p.Future.Field(0, nil)
}

type InstanceFactory_newInstances_Params struct{ capnp.Struct }

// InstanceFactory_newInstances_Params_TypeID is the unique identifier for the type InstanceFactory_newInstances_Params.
const InstanceFactory_newInstances_Params_TypeID = 0xd9fa9ece71d1db50

func NewInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func NewRootInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func ReadRootInstanceFactory_newInstances_Params(msg *capnp.Message) (InstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0xd9fa9ece71d1db50, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s InstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// InstanceFactory_newInstances_Params_List is a list of InstanceFactory_newInstances_Params.
type InstanceFactory_newInstances_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Params creates a new list of InstanceFactory_newInstances_Params.
func NewInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return InstanceFactory_newInstances_Params_List{l}, err
}

func (s InstanceFactory_newInstances_Params_List) At(i int) InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Params_List) Set(i int, v InstanceFactory_newInstances_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Params_List) String() string {
	str, _ := text.MarshalList(0xd9fa9ece71d1db50, s.List)
	return str
}

// InstanceFactory_newInstances_Params_Future is a wrapper for a InstanceFactory_newInstances_Params promised by a client call.
type InstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Params_Future) Struct() (InstanceFactory_newInstances_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Params{s}, err
}

type InstanceFactory_newInstances_Results struct{ capnp.Struct }

// InstanceFactory_newInstances_Results_TypeID is the unique identifier for the type InstanceFactory_newInstances_Results.
const InstanceFactory_newInstances_Results_TypeID = 0xaf9a1cb72ba68156

func NewInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func NewRootInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func ReadRootInstanceFactory_newInstances_Results(msg *capnp.Message) (InstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xaf9a1cb72ba68156, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Results) Instances() (common.ListEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.ListEntry_List{List: p.List()}, err
}

func (s InstanceFactory_newInstances_Results) HasInstances() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstances_Results) SetInstances(v common.ListEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInstances sets the instances field to a newly
// allocated common.ListEntry_List, preferring placement in s's segment.
func (s InstanceFactory_newInstances_Results) NewInstances(n int32) (common.ListEntry_List, error) {
	l, err := common.NewListEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return common.ListEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// InstanceFactory_newInstances_Results_List is a list of InstanceFactory_newInstances_Results.
type InstanceFactory_newInstances_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Results creates a new list of InstanceFactory_newInstances_Results.
func NewInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstances_Results_List{l}, err
}

func (s InstanceFactory_newInstances_Results_List) At(i int) InstanceFactory_newInstances_Results {
	return InstanceFactory_newInstances_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Results_List) Set(i int, v InstanceFactory_newInstances_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Results_List) String() string {
	str, _ := text.MarshalList(0xaf9a1cb72ba68156, s.List)
	return str
}

// InstanceFactory_newInstances_Results_Future is a wrapper for a InstanceFactory_newInstances_Results promised by a client call.
type InstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Results_Future) Struct() (InstanceFactory_newInstances_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Results{s}, err
}

const schema_9273388a9624d430 = "x\xda\xacW\x7fl\x14i\x19~\xdf\xf9v\x99\xaa\xbd" +
	"\xdb\xf9v\xb6]\xaeim\xae\xb7\xa8\xc5\xb4\xa1V\x14" +
	"\x1a/\xdd\xad\xf6\xb8\xd6\xc4\xdb\xd9\x9e\x97\x96\x03\xc3\xb6" +
	"\x1dz\x8b;\xb3\xbd\x9d\xd9\xde\xae\xb9\\\x85\x040\x0d" +
	"\x8d\x80\xa9\x7f\x10\xa8B\x02\x04\xa24\x12\x95\x18R\x89" +
	"U\xd4R\x04\xab\x10S\xe4g\x03Q~4\xe2\x9f\x12" +
	"d\xcc7\xbb3;\xbb\xdd\xda\x9a\x98\xfe\xd1\xd9o\xdf" +
	"y\xbf\xe7{\xde\xe7}\xdeo\xd7\xdd\\\x15\xe4\x9a\xdc" +
	"F-@\x97\x8e\xeeUF\xcf\xdc7\xbf\xda7\xb6z" +
	"'\xd0\xd5\x08\xe0F^\xc0\xe6\x07\x9e*\x04\x14\x17<" +
	"\xad\x80F\xd9\xd5\xdb\x97\x7f\xbb\xa9f7\xd0r4\xd6" +
	"]\x0b|\x7fd\x83v\x10\xdc\x1c\x0f \xbe.\x9c\x16" +
	"\xdb\x05\xf6\x14\x12>\x004:\x8f\xf5\xd3\xe7\x8fg\xf6" +
	"\x02-'\xf9X\x00\x01\xc5I\xe1\x918m\x86^\x14" +
	"6\x895\xd4/*\xd4o\xd44\xfcq[\xef\xcf\xf7" +
	"|\xb7Tr\x85^\x123\x94=\xa5(K\xde\xbe\xe1" +
	"\xd5\xb1.\xe9\xfe8\xd0j\x04p1\xa0\xf7\xe8\xb7\x10" +
	"\\F\xe7\x96'\xc7'\x16^\x1c/\xb1\xed\x1f\xe8\x94" +
	"x\xddL2K7\x89\xafz\xbf(n\xf4\xfa\x8d\xf7" +
	">~\xf4\x1b\xdfn\xfc\xe5\x09\x90\xca\xd1\xb9/\xb2\xc0" +
	"\x8d\xde\x111\xe4\xf5\x03\x88\x1d^\xb6\xef\xdd'\xfb\xcf" +
	"l9\xd3t\xca\xc9\xd0\xcf\xbcu\x8c\xa1I/c\xa8" +
	".M>\xd5\xeb;r:\x0b\xccL\xd2|\xcb\x1ba" +
	"\x01\x0f\xcd\x80wv\x9e\xf8\xec\xb9\xeaC\x13v\x80\x80" +
	"\xcd\xaf\x88#,\xa0^d\x01\x1f\x0e{\xff\xa9\xeey" +
	"~\xae\x88\x06vFqT\xdc%\x1e\x10\x19\xb0Q\xf1" +
	"o\x00\xe2\x98\xcfc\xfci|r\x9fr\xbey\x12(" +
	"\xe5\xf2\x87\x01\x14G}g\xc51\x1f\x0b>\xe0\x1b\x06" +
	"4&\xd6\x86\xa6\xf7\xdd\xed\xb8\xe0\xe0\xec\xa2o\x07\xe3" +
	"\xec7\xfa\x8fo\x7fx\x7f\xe3e'\xe8\x9f\xf8\xda\x18" +
	"\xa6_\xf8\x18\xa6G\xed#\xda?\x1a\xbf~\xa5\x04\xa9" +
	"s\xbey\xf1\x81\xb9\xcb=\xdf\xef\xc4\xe9\x0a\xbf8[" +
	"\xe11~\xfa\xee\xbf^;\xd1\xc3\xcd\x02\xad\xb1O9" +
	"]1\xc52\xceU\xb0\x8c\xe1\xbf\xce\xbe\x7fe\xfc\xd9" +
	"\x1cH\xd5h\xa1i\xaf\xdc\xc5\x02\xa4J\x16\xf0\xb5\x81" +
	"S\xef<\xfbQ\xf8\x8e3C\xa6\xf2\x12\x0b\x185\x03" +
	"\xde}\xad\xf6\xfa\xdcp\xfaN\x01\xe8\xca\x16\x13\xb4\x19" +
	"\xf0\xfc\xcd\x8e/\xa5\x1f_\xbdS\x04\x1a\xc5[\x95\xf3" +
	"\xe2\xc3J\x06\xf9A\xe5^q\xbd\xdf\x0f`t\x9e\xef" +
	"\xf8\xfc\xcc\xae\xbayg\xb65\xfe\xcd,[\x93\x9fe" +
	"\xfb\x8e\x8b\xef>\xba >u\xd6M\xf2\x9b\x80\xb7\xfa" +
	"[\xc10\xff^6\x94D\xbf\x1co\xec\x8b\x92Au" +
	"\xb0\xa5]\x1d\xeaP5=\xaa\xf6\xc9\x8d\xc9\x94\x1a\x08" +
	"G\x93Q\xa2h\x92\x8b\xb8\x00\\\x08@_\xaa\x03\x90" +
	"\xca\x08J_\xe1\x90\x97\xd5!\x14\xf2\xf5\x07\x08\"\xc5" +
	"Z\xc9\xc5\xa1s\x91\xa2_r!\"\x86\x09\xa2\x171" +
	"\xafx\x00\x14\x00m\x08\xc8 t\xf7Dd\x8f\x96\x8a" +
	"\xebaD\xa9\xcc\xde\xb7\xbe\x0a@\x0a\x10\x94\x82\x1cR" +
	"D\x1f\xab\x01}\x9d-n (\xbd\xcd!Ik\xf8" +
	"2\x98{|\x028\xf6H2\xc5+\xf6N\\\xd1a" +
	"\xc3\x9ed\"\x9da;\xba\x88\x1b\xc0V\x03ZE\xa5" +
	"\xf4\x18@\xc8\x87\xa1\x00\xd2\xf5\xbc\x91\x94\x07b\x9a." +
	"'\xd1\xca\xc1\xab}\xb2ut\xdbGL\x8c\xa5\x16\x83" +
	"\xc8\x08\xc9\xf3\x90\xa7\xcdA\x0d\xc5OKe\x8c6F" +
	"7\xa2$X\xecY\x99\x00\xd0\xeb.\\\x08\x95!u" +
	"G\xe8\xc7Z\x8c\x88\xac\xe9\x1d\xea`\x0aPo}+" +
	"\xa5\x0f\xa6\xf4\xc2\xc3w\xf7\x84\xe3)-\"3\xa6\x01" +
	"\x96\xe0z\x9d\x83\xeb\x86\xcf\x01H\x9f\xc9\x16\x9e\xa43" +
	"(\xe4\xbd\x15\x90\x95\xb1V\xd3\xa3\xba\xcd\xb8\xe0\xec\xec" +
	"\x02\xee]l{\x8b\xf87\xa2}z\"\x99iT\xe5" +
	"\x0f\xac\xa5@+S\x9d\xa2-Y,\xc8\xd7\xc9\xf2\x7f" +
	"\xb4l\x8e\xd2:\x80P9\x86\xaa\x916\xf0|2\xa5" +
	".b\xb6\xa0*\xce\xc5 \x9a\x86z\xfd\xcd\xc3=3" +
	"\xb3\x13g\x01\xc0\x90g\xbep\xf3\x877N\xfe\x8a=" +
	"w6\x8d?\xe5\xda>\xba\xb2R\x9aM5w\xe9Q" +
	"\x1d\xc0\xacv\xde\xf6p\xad\xe7\xed\xcc\xa0l1\x8eH" +
	"\xeb\xd7\xe6\x19\xb7\x09\xaf\xca\x13\xee\xd13\x832:\xac" +
	"\x13\xd0\xed!\x80dhI\x89\x97\xecgVo>\xae" +
	"\x174tK\xae\xa1}\x1c\xb6&M=\xe4d\xe5\xe8" +
	"Roq\xfd\xbe\x1c\x8f)Q]v&\xef\x92u\xd3" +
	"/\x14,H\xdf\x96K\x1f\xe0p\xb8?\xaaG5Y" +
	"\xb7 S\xe3\xef\x8a\xfa\"\xf8\x83\xa1\x93\xc5\x1aq/" +
	"\xa3\x11-\x90U\xae\xc6\xb8\xcd\xef\x15\x01\x90\xca\x09J" +
	"\xdd\x1c\x1a1K-\xe8\xd0\xe4'\xdd\xc1[o\\\xc0" +
	"\xa9\x02\xabr,.\xb2*{\x8e\x00\x14\x00\xc4\x1c\xbb" +
	"\xa6\x16\x05\x1bA\x94\xd5q\x0bA\xe9=G\xe7\xc8\x9b" +
	"\x01\xa4~\x82\xd2 \x87\x94\xe3|\xc8\x01P\xa5\x17@" +
	"\x8a\x13\x94\xd2\x1cRB|H\x00h\x8aE\xea\x04\xa5" +
	"\xfd\x1cz\x92\xb2\xa6\x9b\x18\x1cVj\x16B\x8f)r" +
	"\x97\x9c\x8c\x01\x91\xb5\"\x0e)\xa0\xa1%b\xf1p2" +
	"\xb1\x1d\xf8X\\F\xc1\xa8?\x1c\xfa\xde\xf1\xa9\x01#" +
	"\xd7\xa6\x862\xa0\xe8\xedC\xb2\x0a\xc4\xd9\xadm\xbf?" +
	"4\xf0\xef\x85\xad\x87s\x95\x08\xb9\x90b\xc4)\xef\xc5" +
	"\xba\xaemd*f\x04d\x8f\xb4\xbe\xce\x84\xd0\xc0\xfe" +
	"qtM\x15\x00\x12Z\xc3>\xb9hE\x0b\x00\xaf\xc4" +
	"T^\x89\xa6\x89\xd6\xcfG\x87\x06Z\x15\xb9?\x16U" +
	"\xff\xbb/\x98_v\xa8\xdb\x13\x81p\xd4S\xe0\x0aK" +
	"\xc9\xd0V\xc62\x1a_\xe4_\x85~\xe3\x04\xc2'\x92" +
	"\xe6l(7=\xc7\xba\x95\xe0\x9fo\x90\x173\x1f\xcd" +
	"\\\xa3R\x04 \x14f\x1bm\xe51\x7f\xd5Ck\x02" +
	"S\xa9\xd7\x0c\x08mC\xfa>\x8f\x9c}\x97@\xebn" +
	"E\xe5\x1d\x00\xa1~\x0c\xe9Hw\xf3\x86uj\xc0\x84" +
	"%R[\x88Y\xa72\xacf\x00\xe7\xe4)\x08Z\xf6" +
	"M\x0fk\xa4\xff\xe5U\xd3\xc6\x1c\xf6h\x8ad\x87a" +
	"\xfb\xb2\xe9j6\x8d\xab\x8ag,\x1b\xb1\x8d\xd6\xe4t" +
	"|\x91u\x8d\xc2\x82u\xe6:y\x9b\xb3\x93\x01\x90:" +
	"m\xe9\xff66\xcd\xbeY\xb9\xf7\x94\xc0{\x10\x80\xed" +
	"$Ush\xa8)\xa5WN\xbe\xb5\x1d\xad7PC" +
	"\x02\x1c\x12\xc7&+'\xa7\xa4\xd1m\xce\xd1\xb3\x9aC" +
	"#\xa5f_\x03\"'\x91\x1a{\xdb\xd5\xbf\xfcz\xfe" +
	"\xda\x11\xcb\x0e\x0a\xe6A\xa9~\xc9\x8d\xdb\xa5\xd2/\xe3" +
	"6\x05M\xe3L\xcft\x99\xbdV\xb0\xa6\xb1\xee\xbeh" +
	"\xdd\xdciS\x1dpt\x0d\xeb\x17\xeb\x17\x08ZWZ" +
	"\xfaJ\x0bp\xf4%s|\x07\xb15;[\x16\xcbo" +
	"E\x13\xc9\xa4\x8f,;\xf1\x84\xfc\x8f\xb9\"7XN" +
	"\x0e%\xfd\xa6\xd3A\xa0S\xbe\xc5#\xc5\x0b\xf8\x9f\x00" +
	"\x00\x00\xff\xff\x8a\x1e9\xf4"

func init() {
	schemas.Register(schema_9273388a9624d430,
		0x811895634b6bd959,
		0x851d47c6ccdecf08,
		0x87cbebfc1164a24a,
		0x8f86b66260d02d1d,
		0x9ee4515395213845,
		0xa5feedafa5ec5c4a,
		0xa6be2e805ea10a68,
		0xa931ae5cae90ece0,
		0xaa9d146226037822,
		0xaf9a1cb72ba68156,
		0xb7fc866ef1127f7c,
		0xbd33bb6d8cbd9ed2,
		0xbf49e08cc9412aaf,
		0xcc39e47cdead74c4,
		0xce552eef738a45ea,
		0xd10259a623f95bb4,
		0xd9fa9ece71d1db50,
		0xdf50acfa56a9674e,
		0xdf787fd9d51f235b,
		0xdfcfeb783c4948fc,
		0xe22282cb3449bb4a,
		0xf013eda158070488)
}
