// Code generated by capnpc-go. DO NOT EDIT.

package yieldstat

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	crop "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/crop"
	math "math"
)

type ResultId uint16

// ResultId_TypeID is the unique identifier for the type ResultId.
const ResultId_TypeID = 0xcfe218c48d227e0d

// Values of ResultId.
const (
	ResultId_primaryYield               ResultId = 0
	ResultId_dryMatter                  ResultId = 1
	ResultId_carbonInAboveGroundBiomass ResultId = 2
	ResultId_sumFertilizer              ResultId = 3
	ResultId_sumIrrigation              ResultId = 4
	ResultId_primaryYieldCU             ResultId = 5
)

// String returns the enum's constant name.
func (c ResultId) String() string {
	switch c {
	case ResultId_primaryYield:
		return "primaryYield"
	case ResultId_dryMatter:
		return "dryMatter"
	case ResultId_carbonInAboveGroundBiomass:
		return "carbonInAboveGroundBiomass"
	case ResultId_sumFertilizer:
		return "sumFertilizer"
	case ResultId_sumIrrigation:
		return "sumIrrigation"
	case ResultId_primaryYieldCU:
		return "primaryYieldCU"

	default:
		return ""
	}
}

// ResultIdFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultIdFromString(c string) ResultId {
	switch c {
	case "primaryYield":
		return ResultId_primaryYield
	case "dryMatter":
		return ResultId_dryMatter
	case "carbonInAboveGroundBiomass":
		return ResultId_carbonInAboveGroundBiomass
	case "sumFertilizer":
		return ResultId_sumFertilizer
	case "sumIrrigation":
		return ResultId_sumIrrigation
	case "primaryYieldCU":
		return ResultId_primaryYieldCU

	default:
		return 0
	}
}

type ResultId_List = capnp.EnumList[ResultId]

func NewResultId_List(s *capnp.Segment, sz int32) (ResultId_List, error) {
	return capnp.NewEnumList[ResultId](s, sz)
}

type RestInput capnp.Struct

// RestInput_TypeID is the unique identifier for the type RestInput.
const RestInput_TypeID = 0xa47f8d65869200af

func NewRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput(st), err
}

func NewRootRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput(st), err
}

func ReadRootRestInput(msg *capnp.Message) (RestInput, error) {
	root, err := msg.Root()
	return RestInput(root.Struct()), err
}

func (s RestInput) String() string {
	str, _ := text.Marshal(0xa47f8d65869200af, capnp.Struct(s))
	return str
}

func (s RestInput) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RestInput) DecodeFromPtr(p capnp.Ptr) RestInput {
	return RestInput(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RestInput) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RestInput) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RestInput) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RestInput) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RestInput) UseDevTrend() bool {
	return capnp.Struct(s).Bit(0)
}

func (s RestInput) SetUseDevTrend(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s RestInput) UseCO2Increase() bool {
	return !capnp.Struct(s).Bit(1)
}

func (s RestInput) SetUseCO2Increase(v bool) {
	capnp.Struct(s).SetBit(1, !v)
}

func (s RestInput) Dgm() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s RestInput) SetDgm(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s RestInput) Hft() uint8 {
	return capnp.Struct(s).Uint8(1)
}

func (s RestInput) SetHft(v uint8) {
	capnp.Struct(s).SetUint8(1, v)
}

func (s RestInput) Nft() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s RestInput) SetNft(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s RestInput) Sft() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s RestInput) SetSft(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s RestInput) Slope() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s RestInput) SetSlope(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

func (s RestInput) Steino() uint8 {
	return capnp.Struct(s).Uint8(5)
}

func (s RestInput) SetSteino(v uint8) {
	capnp.Struct(s).SetUint8(5, v)
}

func (s RestInput) Az() uint8 {
	return capnp.Struct(s).Uint8(6)
}

func (s RestInput) SetAz(v uint8) {
	capnp.Struct(s).SetUint8(6, v)
}

func (s RestInput) Klz() uint8 {
	return capnp.Struct(s).Uint8(7)
}

func (s RestInput) SetKlz(v uint8) {
	capnp.Struct(s).SetUint8(7, v)
}

func (s RestInput) Stt() uint8 {
	return capnp.Struct(s).Uint8(16)
}

func (s RestInput) SetStt(v uint8) {
	capnp.Struct(s).SetUint8(16, v)
}

func (s RestInput) GermanFederalStates() int8 {
	return int8(capnp.Struct(s).Uint8(17) ^ 255)
}

func (s RestInput) SetGermanFederalStates(v int8) {
	capnp.Struct(s).SetUint8(17, uint8(v)^255)
}

func (s RestInput) GetDryYearWaterNeed() bool {
	return capnp.Struct(s).Bit(2)
}

func (s RestInput) SetGetDryYearWaterNeed(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

// RestInput_List is a list of RestInput.
type RestInput_List = capnp.StructList[RestInput]

// NewRestInput creates a new list of RestInput.
func NewRestInput_List(s *capnp.Segment, sz int32) (RestInput_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return capnp.StructList[RestInput](l), err
}

// RestInput_Future is a wrapper for a RestInput promised by a client call.
type RestInput_Future struct{ *capnp.Future }

func (f RestInput_Future) Struct() (RestInput, error) {
	p, err := f.Future.Ptr()
	return RestInput(p.Struct()), err
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x8db55634a0e7d054

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x8db55634a0e7d054, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Cultivar() crop.Cultivar {
	return crop.Cultivar(capnp.Struct(s).Uint16(0))
}

func (s Result) SetCultivar(v crop.Cultivar) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Result) IsNoData() bool {
	return capnp.Struct(s).Bit(16)
}

func (s Result) SetIsNoData(v bool) {
	capnp.Struct(s).SetBit(16, v)
}

func (s Result) Values() (Result_ResultToValue_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Result_ResultToValue_List(p.List()), err
}

func (s Result) HasValues() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) SetValues(v Result_ResultToValue_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Result_ResultToValue_List, preferring placement in s's segment.
func (s Result) NewValues(n int32) (Result_ResultToValue_List, error) {
	l, err := NewResult_ResultToValue_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Result_ResultToValue_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}

type Result_ResultToValue capnp.Struct

// Result_ResultToValue_TypeID is the unique identifier for the type Result_ResultToValue.
const Result_ResultToValue_TypeID = 0x8d365bd4f0136fc0

func NewResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue(st), err
}

func NewRootResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue(st), err
}

func ReadRootResult_ResultToValue(msg *capnp.Message) (Result_ResultToValue, error) {
	root, err := msg.Root()
	return Result_ResultToValue(root.Struct()), err
}

func (s Result_ResultToValue) String() string {
	str, _ := text.Marshal(0x8d365bd4f0136fc0, capnp.Struct(s))
	return str
}

func (s Result_ResultToValue) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result_ResultToValue) DecodeFromPtr(p capnp.Ptr) Result_ResultToValue {
	return Result_ResultToValue(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result_ResultToValue) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result_ResultToValue) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result_ResultToValue) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result_ResultToValue) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result_ResultToValue) Id() ResultId {
	return ResultId(capnp.Struct(s).Uint16(0))
}

func (s Result_ResultToValue) SetId(v ResultId) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Result_ResultToValue) Value() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Result_ResultToValue) SetValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Result_ResultToValue_List is a list of Result_ResultToValue.
type Result_ResultToValue_List = capnp.StructList[Result_ResultToValue]

// NewResult_ResultToValue creates a new list of Result_ResultToValue.
func NewResult_ResultToValue_List(s *capnp.Segment, sz int32) (Result_ResultToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Result_ResultToValue](l), err
}

// Result_ResultToValue_Future is a wrapper for a Result_ResultToValue promised by a client call.
type Result_ResultToValue_Future struct{ *capnp.Future }

func (f Result_ResultToValue_Future) Struct() (Result_ResultToValue, error) {
	p, err := f.Future.Ptr()
	return Result_ResultToValue(p.Struct()), err
}

type Output capnp.Struct

// Output_TypeID is the unique identifier for the type Output.
const Output_TypeID = 0x932a681f81b4be19

func NewOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output(st), err
}

func NewRootOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output(st), err
}

func ReadRootOutput(msg *capnp.Message) (Output, error) {
	root, err := msg.Root()
	return Output(root.Struct()), err
}

func (s Output) String() string {
	str, _ := text.Marshal(0x932a681f81b4be19, capnp.Struct(s))
	return str
}

func (s Output) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Output) DecodeFromPtr(p capnp.Ptr) Output {
	return Output(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Output) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Output) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Output) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Output) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Output) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Output) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Output) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Output) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Output) RunFailed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Output) SetRunFailed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Output) Reason() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Output) HasReason() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Output) ReasonBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Output) SetReason(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Output) Results() (Output_YearToResult_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Output_YearToResult_List(p.List()), err
}

func (s Output) HasResults() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Output) SetResults(v Output_YearToResult_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewResults sets the results field to a newly
// allocated Output_YearToResult_List, preferring placement in s's segment.
func (s Output) NewResults(n int32) (Output_YearToResult_List, error) {
	l, err := NewOutput_YearToResult_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Output_YearToResult_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Output_List is a list of Output.
type Output_List = capnp.StructList[Output]

// NewOutput creates a new list of Output.
func NewOutput_List(s *capnp.Segment, sz int32) (Output_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Output](l), err
}

// Output_Future is a wrapper for a Output promised by a client call.
type Output_Future struct{ *capnp.Future }

func (f Output_Future) Struct() (Output, error) {
	p, err := f.Future.Ptr()
	return Output(p.Struct()), err
}

type Output_YearToResult capnp.Struct

// Output_YearToResult_TypeID is the unique identifier for the type Output_YearToResult.
const Output_YearToResult_TypeID = 0xa008c533888c3a5e

func NewOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult(st), err
}

func NewRootOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult(st), err
}

func ReadRootOutput_YearToResult(msg *capnp.Message) (Output_YearToResult, error) {
	root, err := msg.Root()
	return Output_YearToResult(root.Struct()), err
}

func (s Output_YearToResult) String() string {
	str, _ := text.Marshal(0xa008c533888c3a5e, capnp.Struct(s))
	return str
}

func (s Output_YearToResult) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Output_YearToResult) DecodeFromPtr(p capnp.Ptr) Output_YearToResult {
	return Output_YearToResult(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Output_YearToResult) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Output_YearToResult) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Output_YearToResult) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Output_YearToResult) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Output_YearToResult) Year() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Output_YearToResult) SetYear(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Output_YearToResult) Result() (Result, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Result(p.Struct()), err
}

func (s Output_YearToResult) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Output_YearToResult) SetResult(v Result) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s Output_YearToResult) NewResult() (Result, error) {
	ss, err := NewResult(capnp.Struct(s).Segment())
	if err != nil {
		return Result{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Output_YearToResult_List is a list of Output_YearToResult.
type Output_YearToResult_List = capnp.StructList[Output_YearToResult]

// NewOutput_YearToResult creates a new list of Output_YearToResult.
func NewOutput_YearToResult_List(s *capnp.Segment, sz int32) (Output_YearToResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Output_YearToResult](l), err
}

// Output_YearToResult_Future is a wrapper for a Output_YearToResult promised by a client call.
type Output_YearToResult_Future struct{ *capnp.Future }

func (f Output_YearToResult_Future) Struct() (Output_YearToResult, error) {
	p, err := f.Future.Ptr()
	return Output_YearToResult(p.Struct()), err
}
func (p Output_YearToResult_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

const schema_b80c8fd14e523f9b = "x\xda\x8c\x93\xdf\x8b\x15e\x18\xc7\x9f\xef\xfb\xce\xec\x1c" +
	"\xdd\xb5\xb3\xc3L\xa4\xde\xacHP\x0a\xfeH-\xf2\x80" +
	"l\xeaf\xac\xa4\xee\x9c\xb3ZK\x16\x8c;o\xee\xd8" +
	"\x9c\x99\xe3;3\xabg\xb1T\xb0\xd8\xc0CYB\x17" +
	"!,R\x17F`\x17\x06]EA]\x97\x10\x04\x81" +
	"\x04\xdex\xdb?\x10\x13\xcf\x1c\xcf\x99E0\xbc\x9aw" +
	">\xcf\xf3>\xf3\xfd\xbe\xf3}w\x9e\x15\xaf\x18/\xac" +
	"\xfb\xd3 \xe1\xbdl\x8e\x14?%\xce?\x7f\xbc\xf5R" +
	"\x8f\xbc\xe7 \x8a\xd9\xdf\x1f\xac\xec9\xf1}\x8f\x0c\x8b" +
	"h\xb7'\xbe\x81\x13\x0a\x8b\xc8Q\xe2\x1c\xa1*{\x9b" +
	"\x80\xe2\xcb\xc9\xe6\xd1\xbb\x9f\x8c\xfd@&\xb8\xfbg\xd1" +
	"\x80sW<C\xe4\xdc\x13\xb7\x09\xc5\x86\x1f\xef\\\x9e" +
	"X\xd8\xfa\xf9\xa3\xdd\x92\xbb{\xb2\x01\xe7\x86\xe4\xee[" +
	"\xf2\x01\xa1x\xa7quy\xf7\xaf\xb5\x15\x16\xb2jo" +
	"\x7f\xf65\xe3&\x9c[,\xca\xf9\xda8G\xf8\xf7\xf6" +
	"g\x1f\xa9\xde\xc5\xaf\xbcM\x90\xd5\xe4R4\xcc&\x9c" +
	"\xa7M^\xda\xe6\xdf\x82P\xac\xfb`s\xef\x97\xf5\xf7" +
	"\x7f#{\x93\xa8\x9a\x09\xbb7\xd4\x0e\xc3\xd9V\xe3\xa9" +
	"[j_\xd0\\\xd1N\x02\x15\xed\xe8\x86\xa6\x8a\x824" +
	"\xf3\xb3\x1d\xdd\xf0\xe1j\xfb\xbc\xdf\x89;\x8d\xa6J\xf3" +
	"(\xdb\xde\x7f\xcc&'\xea~\x94\xab\x19\xc0\xabI\x83" +
	"\xc8\x00\x91\xbde#\x91\xf7\xac\x84\xb7S\xc0\x06\\0" +
	"\xdc\xb6\x8b\xc8{^\xc2\xdb# \xc3\x00\xf5J\x14\x01" +
	"u\xc2\xc4\"O\xc2(\x09\x8c\x12\x86B\xe4\xe3\x84L" +
	"\xf6%x\x06P\xfdB\x1b\xba\x18H\xa3\x89\x13<\xd1" +
	"\x1b\x1b\x0a{\xf50\x917%\xe1\xcd\xb0\xb0q\x17\x00" +
	"\xec#\x0c_\x97\xf0\xde\x14\x80p!\x88\xec\xe3\x0d\"" +
	"oF\xc2\x8b\x04\x8a\xf9<\xca\xc2E_\x13\x11\xea\xc5" +
	"\x9d\xfbA\xad\xf9\xdd\xe5{\x0fU\x17az4\x99\xf2" +
	"3\x9f\xab \x01\x10&K')\x9e\"\xccH`\xbc" +
	"\x92G`\xf8\x04\xde\x8e\xe5Y'\xef{\x1b\xa6\xc2\xc6" +
	"\x99bN\xf9z6i*\xaa\x97\xde\xc7\x87\xd6|>" +
	"\xf3\x93\x12\xde\x82@y\xe4\x80\xad\x9aD^ \xe1u" +
	"\x04l\x81\xbe\xb56[[\x90\xf02\x01[\x0a\x17\x92" +
	"\xc8>{\x80\xc8\x8b$\xbc\xe5\xfe\xcf\x19#\x811B" +
	"\xa1\xf3\xf8\x90\x1fF\x8a\x10\x0c\xcdi\xe5\xa7I<h" +
	"\xb9\xa8\xcb\xd3^ev\xa8\xf7\x11\xb3\x8fMT\xdf\xeb" +
	"\xf6\x81\xb5\xd4\xca\xa3\xec\x91@m\xad\x025\xccS\xa3" +
	"\xcaS\xbd\xab|\x0dI\x02\xb2\x14\xc8\x8a0^\xddU" +
	"\x02\xc6W)1\xfe'\xdb\xd9t\xdc\xc9Q~\x7fO" +
	"\xff\xfb\x80\xf36N\x11\xb5NB\xa2\xb5\x80A\xa6\x01" +
	"Ga\x89\xa8\x150\xef`p\xc6\x80\xd3\xc6f\xa2\xd6" +
	"\x02\xf3\x8c\xb9\x84\x0b\x098gK\x1e1?\xcf\xdc\x10" +
	".\x0c\xc0\xc9K\xdea~\x81\xb9)]\x98\x80\xd3-" +
	"y\xc6\xfc\x12\xf3\x11\xc3\xc5\x08\xe0\xbc\x8f]D\xad\xf3" +
	"\xcc\xaf0\xb7L\x17\x16\xe0\\F\x83\xa8u\x81\xf92" +
	"\xf3\xda\x88\x8b\x1a\xe0|\x88\x8dD\xadK\xcc\xaf2_" +
	"c\xb9X\x038\x1f\x97\xf3\xaf0\xff\x94\xf9\xdaq\x17" +
	"k\x01\xa7W\xf2e\xe6\xd7\x99\x8f\xda.F\x01\xe7\x1a" +
	"n\x12\xb5\xae3_a>&\\\x8c\x01\xce\x8d\x92\xaf" +
	"0\xff\x16\x02E\x9e\xaa)\xb58\xab\xc9R\xf108" +
	"L\x0f\x1e\xdb5\x1d\xd3\xe4<gHq\xc1\xe4\x8a\x15" +
	"\x9cn\x0f\xee\xbd\xb5\xf0n\x86\x11\x12\x18!X\xf1\xaa" +
	"uZ\xad'\xd2(\xe9\xa8\xc1\xdbd\x9a\xa90N\x06" +
	"\xaf\xd2_\x1a\xeey/\xaa\xd6i6\xdc_\x9cV\xba" +
	"\xed\xc7\x87\x14\x02\xa5\xfd\xa8\x95\xf9V\xa6R\x08\x12\xa6" +
	"(\xcar6\xa5\xbbs\x0a\xbe~\xc3\xcf\x94>j)" +
	"U\xd9x\x92\x14\xe5Q6\x1d\x10q\x8a\xd6\x97\xb7n" +
	"\xff\x19\x0e\xa1\xbd\xafI\x04a\xef\xfd\x8b\x08\xd2\xde\xa7" +
	"\x89`\xd8{\xf9a\xda/.\x11\x15\x1d\x1d\xb6}\xdd" +
	"\x9d\xa3:\x0f-\x02\xdd=\xe2g\x99\"\xe8b\xde\xd7" +
	"\xa7\x92x:\x16\xfbO%\x8b\xea5\x9d\xe4qp " +
	"L\xda\xbeL\xd3\"\xcd\xdb\x87\x94\xceB\x9a\x88\xc2%" +
	"\xa5\xf9}Z\xeb\xf04M\xf8Y\x98\xc4\xd5\xdcI\x9e" +
	"{\xf0\xf8\x7f\x01\x00\x00\xff\xff\x89'\xa6l"

func init() {
	schemas.Register(schema_b80c8fd14e523f9b,
		0x8d365bd4f0136fc0,
		0x8db55634a0e7d054,
		0x932a681f81b4be19,
		0xa008c533888c3a5e,
		0xa47f8d65869200af,
		0xcfe218c48d227e0d)
}
