// Code generated by capnpc-go. DO NOT EDIT.

package yieldstat

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	crop "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/crop"
	math "math"
)

type ResultId uint16

// ResultId_TypeID is the unique identifier for the type ResultId.
const ResultId_TypeID = 0xcfe218c48d227e0d

// Values of ResultId.
const (
	ResultId_primaryYield               ResultId = 0
	ResultId_dryMatter                  ResultId = 1
	ResultId_carbonInAboveGroundBiomass ResultId = 2
	ResultId_sumFertilizer              ResultId = 3
	ResultId_sumIrrigation              ResultId = 4
	ResultId_primaryYieldCU             ResultId = 5
)

// String returns the enum's constant name.
func (c ResultId) String() string {
	switch c {
	case ResultId_primaryYield:
		return "primaryYield"
	case ResultId_dryMatter:
		return "dryMatter"
	case ResultId_carbonInAboveGroundBiomass:
		return "carbonInAboveGroundBiomass"
	case ResultId_sumFertilizer:
		return "sumFertilizer"
	case ResultId_sumIrrigation:
		return "sumIrrigation"
	case ResultId_primaryYieldCU:
		return "primaryYieldCU"

	default:
		return ""
	}
}

// ResultIdFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultIdFromString(c string) ResultId {
	switch c {
	case "primaryYield":
		return ResultId_primaryYield
	case "dryMatter":
		return ResultId_dryMatter
	case "carbonInAboveGroundBiomass":
		return ResultId_carbonInAboveGroundBiomass
	case "sumFertilizer":
		return ResultId_sumFertilizer
	case "sumIrrigation":
		return ResultId_sumIrrigation
	case "primaryYieldCU":
		return ResultId_primaryYieldCU

	default:
		return 0
	}
}

type ResultId_List struct{ capnp.List }

func NewResultId_List(s *capnp.Segment, sz int32) (ResultId_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ResultId_List{l.List}, err
}

func (l ResultId_List) At(i int) ResultId {
	ul := capnp.UInt16List{List: l.List}
	return ResultId(ul.At(i))
}

func (l ResultId_List) Set(i int, v ResultId) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type RestInput struct{ capnp.Struct }

// RestInput_TypeID is the unique identifier for the type RestInput.
const RestInput_TypeID = 0xa47f8d65869200af

func NewRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput{st}, err
}

func NewRootRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput{st}, err
}

func ReadRootRestInput(msg *capnp.Message) (RestInput, error) {
	root, err := msg.Root()
	return RestInput{root.Struct()}, err
}

func (s RestInput) String() string {
	str, _ := text.Marshal(0xa47f8d65869200af, s.Struct)
	return str
}

func (s RestInput) UseDevTrend() bool {
	return s.Struct.Bit(0)
}

func (s RestInput) SetUseDevTrend(v bool) {
	s.Struct.SetBit(0, v)
}

func (s RestInput) UseCO2Increase() bool {
	return !s.Struct.Bit(1)
}

func (s RestInput) SetUseCO2Increase(v bool) {
	s.Struct.SetBit(1, !v)
}

func (s RestInput) Dgm() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s RestInput) SetDgm(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s RestInput) Hft() uint8 {
	return s.Struct.Uint8(1)
}

func (s RestInput) SetHft(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s RestInput) Nft() uint8 {
	return s.Struct.Uint8(2)
}

func (s RestInput) SetNft(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s RestInput) Sft() uint8 {
	return s.Struct.Uint8(3)
}

func (s RestInput) SetSft(v uint8) {
	s.Struct.SetUint8(3, v)
}

func (s RestInput) Slope() uint8 {
	return s.Struct.Uint8(4)
}

func (s RestInput) SetSlope(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s RestInput) Steino() uint8 {
	return s.Struct.Uint8(5)
}

func (s RestInput) SetSteino(v uint8) {
	s.Struct.SetUint8(5, v)
}

func (s RestInput) Az() uint8 {
	return s.Struct.Uint8(6)
}

func (s RestInput) SetAz(v uint8) {
	s.Struct.SetUint8(6, v)
}

func (s RestInput) Klz() uint8 {
	return s.Struct.Uint8(7)
}

func (s RestInput) SetKlz(v uint8) {
	s.Struct.SetUint8(7, v)
}

func (s RestInput) Stt() uint8 {
	return s.Struct.Uint8(16)
}

func (s RestInput) SetStt(v uint8) {
	s.Struct.SetUint8(16, v)
}

func (s RestInput) GermanFederalStates() int8 {
	return int8(s.Struct.Uint8(17) ^ 255)
}

func (s RestInput) SetGermanFederalStates(v int8) {
	s.Struct.SetUint8(17, uint8(v)^255)
}

func (s RestInput) GetDryYearWaterNeed() bool {
	return s.Struct.Bit(2)
}

func (s RestInput) SetGetDryYearWaterNeed(v bool) {
	s.Struct.SetBit(2, v)
}

// RestInput_List is a list of RestInput.
type RestInput_List struct{ capnp.List }

// NewRestInput creates a new list of RestInput.
func NewRestInput_List(s *capnp.Segment, sz int32) (RestInput_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return RestInput_List{l}, err
}

func (s RestInput_List) At(i int) RestInput { return RestInput{s.List.Struct(i)} }

func (s RestInput_List) Set(i int, v RestInput) error { return s.List.SetStruct(i, v.Struct) }

func (s RestInput_List) String() string {
	str, _ := text.MarshalList(0xa47f8d65869200af, s.List)
	return str
}

// RestInput_Future is a wrapper for a RestInput promised by a client call.
type RestInput_Future struct{ *capnp.Future }

func (p RestInput_Future) Struct() (RestInput, error) {
	s, err := p.Future.Struct()
	return RestInput{s}, err
}

type Result struct{ capnp.Struct }

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x8db55634a0e7d054

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Result{st}, err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Result{st}, err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result{root.Struct()}, err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x8db55634a0e7d054, s.Struct)
	return str
}

func (s Result) Cultivar() crop.Cultivar {
	return crop.Cultivar(s.Struct.Uint16(0))
}

func (s Result) SetCultivar(v crop.Cultivar) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Result) IsNoData() bool {
	return s.Struct.Bit(16)
}

func (s Result) SetIsNoData(v bool) {
	s.Struct.SetBit(16, v)
}

func (s Result) Values() (Result_ResultToValue_List, error) {
	p, err := s.Struct.Ptr(0)
	return Result_ResultToValue_List{List: p.List()}, err
}

func (s Result) HasValues() bool {
	return s.Struct.HasPtr(0)
}

func (s Result) SetValues(v Result_ResultToValue_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Result_ResultToValue_List, preferring placement in s's segment.
func (s Result) NewValues(n int32) (Result_ResultToValue_List, error) {
	l, err := NewResult_ResultToValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Result_ResultToValue_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Result_List is a list of Result.
type Result_List struct{ capnp.List }

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Result_List{l}, err
}

func (s Result_List) At(i int) Result { return Result{s.List.Struct(i)} }

func (s Result_List) Set(i int, v Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Result_List) String() string {
	str, _ := text.MarshalList(0x8db55634a0e7d054, s.List)
	return str
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (p Result_Future) Struct() (Result, error) {
	s, err := p.Future.Struct()
	return Result{s}, err
}

type Result_ResultToValue struct{ capnp.Struct }

// Result_ResultToValue_TypeID is the unique identifier for the type Result_ResultToValue.
const Result_ResultToValue_TypeID = 0x8d365bd4f0136fc0

func NewResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue{st}, err
}

func NewRootResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue{st}, err
}

func ReadRootResult_ResultToValue(msg *capnp.Message) (Result_ResultToValue, error) {
	root, err := msg.Root()
	return Result_ResultToValue{root.Struct()}, err
}

func (s Result_ResultToValue) String() string {
	str, _ := text.Marshal(0x8d365bd4f0136fc0, s.Struct)
	return str
}

func (s Result_ResultToValue) Id() ResultId {
	return ResultId(s.Struct.Uint16(0))
}

func (s Result_ResultToValue) SetId(v ResultId) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Result_ResultToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Result_ResultToValue) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Result_ResultToValue_List is a list of Result_ResultToValue.
type Result_ResultToValue_List struct{ capnp.List }

// NewResult_ResultToValue creates a new list of Result_ResultToValue.
func NewResult_ResultToValue_List(s *capnp.Segment, sz int32) (Result_ResultToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Result_ResultToValue_List{l}, err
}

func (s Result_ResultToValue_List) At(i int) Result_ResultToValue {
	return Result_ResultToValue{s.List.Struct(i)}
}

func (s Result_ResultToValue_List) Set(i int, v Result_ResultToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Result_ResultToValue_List) String() string {
	str, _ := text.MarshalList(0x8d365bd4f0136fc0, s.List)
	return str
}

// Result_ResultToValue_Future is a wrapper for a Result_ResultToValue promised by a client call.
type Result_ResultToValue_Future struct{ *capnp.Future }

func (p Result_ResultToValue_Future) Struct() (Result_ResultToValue, error) {
	s, err := p.Future.Struct()
	return Result_ResultToValue{s}, err
}

type Output struct{ capnp.Struct }

// Output_TypeID is the unique identifier for the type Output.
const Output_TypeID = 0x932a681f81b4be19

func NewOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output{st}, err
}

func NewRootOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output{st}, err
}

func ReadRootOutput(msg *capnp.Message) (Output, error) {
	root, err := msg.Root()
	return Output{root.Struct()}, err
}

func (s Output) String() string {
	str, _ := text.Marshal(0x932a681f81b4be19, s.Struct)
	return str
}

func (s Output) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Output) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Output) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Output) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Output) RunFailed() bool {
	return s.Struct.Bit(0)
}

func (s Output) SetRunFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Output) Reason() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Output) HasReason() bool {
	return s.Struct.HasPtr(1)
}

func (s Output) ReasonBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Output) SetReason(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Output) Results() (Output_YearToResult_List, error) {
	p, err := s.Struct.Ptr(2)
	return Output_YearToResult_List{List: p.List()}, err
}

func (s Output) HasResults() bool {
	return s.Struct.HasPtr(2)
}

func (s Output) SetResults(v Output_YearToResult_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewResults sets the results field to a newly
// allocated Output_YearToResult_List, preferring placement in s's segment.
func (s Output) NewResults(n int32) (Output_YearToResult_List, error) {
	l, err := NewOutput_YearToResult_List(s.Struct.Segment(), n)
	if err != nil {
		return Output_YearToResult_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Output_List is a list of Output.
type Output_List struct{ capnp.List }

// NewOutput creates a new list of Output.
func NewOutput_List(s *capnp.Segment, sz int32) (Output_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Output_List{l}, err
}

func (s Output_List) At(i int) Output { return Output{s.List.Struct(i)} }

func (s Output_List) Set(i int, v Output) error { return s.List.SetStruct(i, v.Struct) }

func (s Output_List) String() string {
	str, _ := text.MarshalList(0x932a681f81b4be19, s.List)
	return str
}

// Output_Future is a wrapper for a Output promised by a client call.
type Output_Future struct{ *capnp.Future }

func (p Output_Future) Struct() (Output, error) {
	s, err := p.Future.Struct()
	return Output{s}, err
}

type Output_YearToResult struct{ capnp.Struct }

// Output_YearToResult_TypeID is the unique identifier for the type Output_YearToResult.
const Output_YearToResult_TypeID = 0xa008c533888c3a5e

func NewOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult{st}, err
}

func NewRootOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult{st}, err
}

func ReadRootOutput_YearToResult(msg *capnp.Message) (Output_YearToResult, error) {
	root, err := msg.Root()
	return Output_YearToResult{root.Struct()}, err
}

func (s Output_YearToResult) String() string {
	str, _ := text.Marshal(0xa008c533888c3a5e, s.Struct)
	return str
}

func (s Output_YearToResult) Year() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Output_YearToResult) SetYear(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Output_YearToResult) Result() (Result, error) {
	p, err := s.Struct.Ptr(0)
	return Result{Struct: p.Struct()}, err
}

func (s Output_YearToResult) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s Output_YearToResult) SetResult(v Result) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s Output_YearToResult) NewResult() (Result, error) {
	ss, err := NewResult(s.Struct.Segment())
	if err != nil {
		return Result{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Output_YearToResult_List is a list of Output_YearToResult.
type Output_YearToResult_List struct{ capnp.List }

// NewOutput_YearToResult creates a new list of Output_YearToResult.
func NewOutput_YearToResult_List(s *capnp.Segment, sz int32) (Output_YearToResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Output_YearToResult_List{l}, err
}

func (s Output_YearToResult_List) At(i int) Output_YearToResult {
	return Output_YearToResult{s.List.Struct(i)}
}

func (s Output_YearToResult_List) Set(i int, v Output_YearToResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Output_YearToResult_List) String() string {
	str, _ := text.MarshalList(0xa008c533888c3a5e, s.List)
	return str
}

// Output_YearToResult_Future is a wrapper for a Output_YearToResult promised by a client call.
type Output_YearToResult_Future struct{ *capnp.Future }

func (p Output_YearToResult_Future) Struct() (Output_YearToResult, error) {
	s, err := p.Future.Struct()
	return Output_YearToResult{s}, err
}

func (p Output_YearToResult_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

const schema_b80c8fd14e523f9b = "x\xda\x8c\x93\xdf\x8b\x15\xe5\x1f\xc7?\xef\xe7\x99\xd99" +
	"\xba\xfb\xfd\x9e\x1df\"\xf5fE\x82R\xf0Gj\x91" +
	"\x07dS7c%u\xe7\x9c\xd5Z\xb2`\xdcyr" +
	"\xc7\xe6\xcc\x1c\x9f\x99Y=\x8b\xa5\x82\xc5\x06\x1e\xca\x12" +
	"\xba\x08a\x91\xba0\x02\xbb0\xe8*\x0a\xea\xba\x84 " +
	"\x08$\xf0\xc6\xdb\xfe\x81\x98\xf8\xcc\xf1\x9cY\x16\x0c\xaf" +
	"\xe6\x99\xd7\xe7\xf3|\xe6\xfd~\xe6\xfd\xecJ\xc4\xcb\xe2" +
	"y\xf3\x0f\x83\xc8{\xc9\x1c)~L\x9c\xbf\x7f\x7f\xf3" +
	"\xc5\x1ey\xcfB\x14\xb3\xbf=\\\xd9{\xf2\xbb\x1e\x19" +
	"\x16\xd1\x1eO|\x0d'\x14\x16\x91\xa3\xc4yBU\xf6" +
	"6\x03\xc5\x17\x93\xcdc\xf7>\x1e\xfb\x9eLp\xf7O" +
	"\xa2\x01\xe7\x9ex\x9a\xc8\xb9/\xee\x10\x8a\x8d?\xdc\xbd" +
	"2\xb1\xb0\xed\xb3\xb5\xdd\x92\xbb{\xb2\x01\xe7\xa6\xe4\xee" +
	"\xdb\xf2!\xa1x\xbbqmy\xcf/\xb5\x15\x16\xb2j" +
	"o\x7f\xf6u\xe3\x16\x9c\xdb,\xca\xf9\xca8O\xf8\xe7" +
	"\xce\xa7\x1f\xaa\xde\xa5/\xbd\xcd\x90\xd5\xe4R4\xcc&" +
	"\x9c\xa7L^\xda\xe6_\x82P\xfc\xef\xfd-\xbd\x9f7" +
	"<\xf8\x95\xec\xcd\xa2j&\xec\xd9X;\x02g{\x8d" +
	"\xa7n\xad}NsE;\x09T\xb4\xb3\x1b\x9a*\x0a" +
	"\xd2\xcc\xcfvv\xc3G\xab\x1d\xf3~'\xee4\x9a*" +
	"\xcd\xa3lG\xff1\x9b\x9c\xac\xfbQ\xaef\x00\xaf&" +
	"\x0d\"\x03D\xf6\xd6MD\xde3\x12\xde.\x01\x1bp" +
	"\xc1p\xfbn\"\xef9\x09o\xaf\x80\x0c\x03\xd4+Q" +
	"\x04\xd4\x09\x13\x8b<\x09\xa3$0J\x18\x0a\x91\x8f\x13" +
	"2\xd9\x97\xe0\x19@\xf5\x0bm\xe8b \x8d&N\xf2" +
	"Dol(\xec\x95#D\xde\x94\x847\xc3\xc2\xc6]" +
	"\x00\xb0\x8f2|M\xc2{C\x00\xc2\x85 \xb2O4" +
	"\x88\xbc\x19\x09/\x12(\xe6\xf3(\x0b\x17}MD\xa8" +
	"\x17w\x1f\x04\xb5\xe6\xb7W\xee?R]\x84\xe9\xb1d" +
	"\xca\xcf|\xae\x82\x04@\x98,\x9d\xa4\xf8?aF\x02" +
	"\xe3\x95<\x02\xc3'\xf0v<\xcf:y\xdf\xdb0\x15" +
	"6\xce\x16s\xca\xd7\xb3ISQ\xbd\xf4>>\xb4\xe6" +
	"\xf3\x99\x9f\x92\xf0\x16\x04\xca#\x07l\xd5$\xf2\x02\x09" +
	"\xaf#`\x0b\xf4\xad\xb5\xd9\xda\x82\x84\x97\x09\xd8R\xb8" +
	"\x90D\xf6\xb9\x83D^$\xe1-\xf7\x7f\xce\x18\x09\x8c" +
	"\x11\x0a\x9d\xc7\x87\xfd0R\x84`hN+?M\xe2" +
	"A\xcb%]\x9e\xf6*\xb3C\xbdk\xcc>6Q}" +
	"\xaf;\x06\xd6R+\x8f\xb25\x81\xdaV\x05j\x98\xa7" +
	"F\x95\xa7zW\xf9\x1a\x92\x04d)\x90\x15a\xbc\xba" +
	"\xab\x04\x8c\xafRb\xfcG\xb6\xb3\xe9\xb8\x93\xa3\xfc\xfe" +
	"\xde\xfe\xf7\x01\xe7-\x9c&j\x9d\x82Dk\x01\x83L" +
	"\x03\x8e\xc2\x12Q+`\xde\xc1\xe0\x8c\x01\xa7\x8d-D" +
	"\xad\x05\xe6\x19s\x09\x17\x12p\xce\x95<b~\x81\xb9" +
	"!\\\x18\x80\x93\x97\xbc\xc3\xfc\"sS\xba0\x01\xa7" +
	"[\xf2\x8c\xf9e\xe6#\x86\x8b\x11\xc0y\x0f\xbb\x89Z" +
	"\x17\x98_en\x99.,\xc0\xb9\x82\x06Q\xeb\"\xf3" +
	"e\xe6\xb5\x11\x175\xc0\xf9\x00\x9b\x88Z\x97\x99_c" +
	"\xbe\xcer\xb1\x0ep>*\xe7_e\xfe\x09\xf3\xf5\xe3" +
	".\xd6\x03N\xaf\xe4\xcb\xcco0\x1f\xb5]\x8c\x02\xce" +
	"u\xdc\"j\xdd`\xbe\xc2|L\xb8\x18\x03\x9c\x9b%" +
	"_a\xfe\x0d\x04\x8a<USjqV\x93\xa5\xe2a" +
	"p\x98\x1e:\xbe{:\xa6\xc9y\xce\x90\xe2\x82\xc9\x15" +
	"+8\xd3\x1e\xdc{k\xe1\x9d\x0c#$0B\xb0\xe2" +
	"U\xeb\xb4ZO\xa4Q\xd2Q\x83\xb7\xc94Sa\x9c" +
	"\x0c^\xa5\xbf4\xdc\xf3nT\xad\xd3l\xb8\xbf8\xa3" +
	"t\xdb\x8f\x0f+\x04J\xfbQ+\xf3\xadL\xa5\x10$" +
	"LQ\x94\xe5lJw\xe7\x14|\xfd\xba\x9f)}\xcc" +
	"R\xaa\xb2\xf1$)\xca\xa3l: \xe2\x14m(o" +
	"\xdd\x81\xb3\x1cB{\x7f\x93\x08\xc2\xde\xf7'\x11\xa4\xbd" +
	"_\x13\xc1\xb0\xf7\xf1\xc3\xb4_X\"*::l\xfb" +
	"\xba;Gu\x1eZ\x04\xba{\xd4\xcf2E\xd0\xc5\xbc" +
	"\xafO'\xf1t,\x0e\x9cN\x16\xd5\xab:\xc9\xe3\xe0" +
	"`\x98\xb4}\x99\xa6E\x9a\xb7\x0f+\x9d\x854\x11\x85" +
	"KJ\xf3\xfb\xb4\xd6\xe1\x19\x9a\xf0\xb30\x89\xab\xb9\x93" +
	"<\xf7\xd0\x89\x7f\x03\x00\x00\xff\xff'=\xa6^"

func init() {
	schemas.Register(schema_b80c8fd14e523f9b,
		0x8d365bd4f0136fc0,
		0x8db55634a0e7d054,
		0x932a681f81b4be19,
		0xa008c533888c3a5e,
		0xa47f8d65869200af,
		0xcfe218c48d227e0d)
}
