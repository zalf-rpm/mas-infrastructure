// Code generated by capnpc-go. DO NOT EDIT.

package yieldstat

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type ResultId uint16

// ResultId_TypeID is the unique identifier for the type ResultId.
const ResultId_TypeID = 0xcfe218c48d227e0d

// Values of ResultId.
const (
	ResultId_primaryYield               ResultId = 0
	ResultId_dryMatter                  ResultId = 1
	ResultId_carbonInAboveGroundBiomass ResultId = 2
	ResultId_sumFertilizer              ResultId = 3
	ResultId_sumIrrigation              ResultId = 4
	ResultId_primaryYieldCU             ResultId = 5
)

// String returns the enum's constant name.
func (c ResultId) String() string {
	switch c {
	case ResultId_primaryYield:
		return "primaryYield"
	case ResultId_dryMatter:
		return "dryMatter"
	case ResultId_carbonInAboveGroundBiomass:
		return "carbonInAboveGroundBiomass"
	case ResultId_sumFertilizer:
		return "sumFertilizer"
	case ResultId_sumIrrigation:
		return "sumIrrigation"
	case ResultId_primaryYieldCU:
		return "primaryYieldCU"

	default:
		return ""
	}
}

// ResultIdFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ResultIdFromString(c string) ResultId {
	switch c {
	case "primaryYield":
		return ResultId_primaryYield
	case "dryMatter":
		return ResultId_dryMatter
	case "carbonInAboveGroundBiomass":
		return ResultId_carbonInAboveGroundBiomass
	case "sumFertilizer":
		return ResultId_sumFertilizer
	case "sumIrrigation":
		return ResultId_sumIrrigation
	case "primaryYieldCU":
		return ResultId_primaryYieldCU

	default:
		return 0
	}
}

type ResultId_List struct{ capnp.List }

func NewResultId_List(s *capnp.Segment, sz int32) (ResultId_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ResultId_List{l.List}, err
}

func (l ResultId_List) At(i int) ResultId {
	ul := capnp.UInt16List{List: l.List}
	return ResultId(ul.At(i))
}

func (l ResultId_List) Set(i int, v ResultId) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type RestInput struct{ capnp.Struct }

// RestInput_TypeID is the unique identifier for the type RestInput.
const RestInput_TypeID = 0xa47f8d65869200af

func NewRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput{st}, err
}

func NewRootRestInput(s *capnp.Segment) (RestInput, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return RestInput{st}, err
}

func ReadRootRestInput(msg *capnp.Message) (RestInput, error) {
	root, err := msg.Root()
	return RestInput{root.Struct()}, err
}

func (s RestInput) String() string {
	str, _ := text.Marshal(0xa47f8d65869200af, s.Struct)
	return str
}

func (s RestInput) UseDevTrend() bool {
	return s.Struct.Bit(0)
}

func (s RestInput) SetUseDevTrend(v bool) {
	s.Struct.SetBit(0, v)
}

func (s RestInput) UseCO2Increase() bool {
	return !s.Struct.Bit(1)
}

func (s RestInput) SetUseCO2Increase(v bool) {
	s.Struct.SetBit(1, !v)
}

func (s RestInput) Dgm() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s RestInput) SetDgm(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s RestInput) Hft() uint8 {
	return s.Struct.Uint8(1)
}

func (s RestInput) SetHft(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s RestInput) Nft() uint8 {
	return s.Struct.Uint8(2)
}

func (s RestInput) SetNft(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s RestInput) Sft() uint8 {
	return s.Struct.Uint8(3)
}

func (s RestInput) SetSft(v uint8) {
	s.Struct.SetUint8(3, v)
}

func (s RestInput) Slope() uint8 {
	return s.Struct.Uint8(4)
}

func (s RestInput) SetSlope(v uint8) {
	s.Struct.SetUint8(4, v)
}

func (s RestInput) Steino() uint8 {
	return s.Struct.Uint8(5)
}

func (s RestInput) SetSteino(v uint8) {
	s.Struct.SetUint8(5, v)
}

func (s RestInput) Az() uint8 {
	return s.Struct.Uint8(6)
}

func (s RestInput) SetAz(v uint8) {
	s.Struct.SetUint8(6, v)
}

func (s RestInput) Klz() uint8 {
	return s.Struct.Uint8(7)
}

func (s RestInput) SetKlz(v uint8) {
	s.Struct.SetUint8(7, v)
}

func (s RestInput) Stt() uint8 {
	return s.Struct.Uint8(16)
}

func (s RestInput) SetStt(v uint8) {
	s.Struct.SetUint8(16, v)
}

func (s RestInput) GermanFederalStates() int8 {
	return int8(s.Struct.Uint8(17) ^ 255)
}

func (s RestInput) SetGermanFederalStates(v int8) {
	s.Struct.SetUint8(17, uint8(v)^255)
}

func (s RestInput) GetDryYearWaterNeed() bool {
	return s.Struct.Bit(2)
}

func (s RestInput) SetGetDryYearWaterNeed(v bool) {
	s.Struct.SetBit(2, v)
}

// RestInput_List is a list of RestInput.
type RestInput_List struct{ capnp.List }

// NewRestInput creates a new list of RestInput.
func NewRestInput_List(s *capnp.Segment, sz int32) (RestInput_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return RestInput_List{l}, err
}

func (s RestInput_List) At(i int) RestInput { return RestInput{s.List.Struct(i)} }

func (s RestInput_List) Set(i int, v RestInput) error { return s.List.SetStruct(i, v.Struct) }

func (s RestInput_List) String() string {
	str, _ := text.MarshalList(0xa47f8d65869200af, s.List)
	return str
}

// RestInput_Future is a wrapper for a RestInput promised by a client call.
type RestInput_Future struct{ *capnp.Future }

func (p RestInput_Future) Struct() (RestInput, error) {
	s, err := p.Future.Struct()
	return RestInput{s}, err
}

type Result struct{ capnp.Struct }

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0x8db55634a0e7d054

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result{st}, err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result{st}, err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result{root.Struct()}, err
}

func (s Result) String() string {
	str, _ := text.Marshal(0x8db55634a0e7d054, s.Struct)
	return str
}

func (s Result) Cultivar() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Result) HasCultivar() bool {
	return s.Struct.HasPtr(0)
}

func (s Result) CultivarBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Result) SetCultivar(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Result) IsNoData() bool {
	return s.Struct.Bit(0)
}

func (s Result) SetIsNoData(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Result) Values() (Result_ResultToValue_List, error) {
	p, err := s.Struct.Ptr(1)
	return Result_ResultToValue_List{List: p.List()}, err
}

func (s Result) HasValues() bool {
	return s.Struct.HasPtr(1)
}

func (s Result) SetValues(v Result_ResultToValue_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewValues sets the values field to a newly
// allocated Result_ResultToValue_List, preferring placement in s's segment.
func (s Result) NewValues(n int32) (Result_ResultToValue_List, error) {
	l, err := NewResult_ResultToValue_List(s.Struct.Segment(), n)
	if err != nil {
		return Result_ResultToValue_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Result_List is a list of Result.
type Result_List struct{ capnp.List }

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Result_List{l}, err
}

func (s Result_List) At(i int) Result { return Result{s.List.Struct(i)} }

func (s Result_List) Set(i int, v Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Result_List) String() string {
	str, _ := text.MarshalList(0x8db55634a0e7d054, s.List)
	return str
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (p Result_Future) Struct() (Result, error) {
	s, err := p.Future.Struct()
	return Result{s}, err
}

type Result_ResultToValue struct{ capnp.Struct }

// Result_ResultToValue_TypeID is the unique identifier for the type Result_ResultToValue.
const Result_ResultToValue_TypeID = 0x8d365bd4f0136fc0

func NewResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue{st}, err
}

func NewRootResult_ResultToValue(s *capnp.Segment) (Result_ResultToValue, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Result_ResultToValue{st}, err
}

func ReadRootResult_ResultToValue(msg *capnp.Message) (Result_ResultToValue, error) {
	root, err := msg.Root()
	return Result_ResultToValue{root.Struct()}, err
}

func (s Result_ResultToValue) String() string {
	str, _ := text.Marshal(0x8d365bd4f0136fc0, s.Struct)
	return str
}

func (s Result_ResultToValue) Id() ResultId {
	return ResultId(s.Struct.Uint16(0))
}

func (s Result_ResultToValue) SetId(v ResultId) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Result_ResultToValue) Value() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Result_ResultToValue) SetValue(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Result_ResultToValue_List is a list of Result_ResultToValue.
type Result_ResultToValue_List struct{ capnp.List }

// NewResult_ResultToValue creates a new list of Result_ResultToValue.
func NewResult_ResultToValue_List(s *capnp.Segment, sz int32) (Result_ResultToValue_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Result_ResultToValue_List{l}, err
}

func (s Result_ResultToValue_List) At(i int) Result_ResultToValue {
	return Result_ResultToValue{s.List.Struct(i)}
}

func (s Result_ResultToValue_List) Set(i int, v Result_ResultToValue) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Result_ResultToValue_List) String() string {
	str, _ := text.MarshalList(0x8d365bd4f0136fc0, s.List)
	return str
}

// Result_ResultToValue_Future is a wrapper for a Result_ResultToValue promised by a client call.
type Result_ResultToValue_Future struct{ *capnp.Future }

func (p Result_ResultToValue_Future) Struct() (Result_ResultToValue, error) {
	s, err := p.Future.Struct()
	return Result_ResultToValue{s}, err
}

type Output struct{ capnp.Struct }

// Output_TypeID is the unique identifier for the type Output.
const Output_TypeID = 0x932a681f81b4be19

func NewOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output{st}, err
}

func NewRootOutput(s *capnp.Segment) (Output, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Output{st}, err
}

func ReadRootOutput(msg *capnp.Message) (Output, error) {
	root, err := msg.Root()
	return Output{root.Struct()}, err
}

func (s Output) String() string {
	str, _ := text.Marshal(0x932a681f81b4be19, s.Struct)
	return str
}

func (s Output) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Output) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Output) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Output) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Output) RunFailed() bool {
	return s.Struct.Bit(0)
}

func (s Output) SetRunFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Output) Reason() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Output) HasReason() bool {
	return s.Struct.HasPtr(1)
}

func (s Output) ReasonBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Output) SetReason(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Output) Results() (Output_YearToResult_List, error) {
	p, err := s.Struct.Ptr(2)
	return Output_YearToResult_List{List: p.List()}, err
}

func (s Output) HasResults() bool {
	return s.Struct.HasPtr(2)
}

func (s Output) SetResults(v Output_YearToResult_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewResults sets the results field to a newly
// allocated Output_YearToResult_List, preferring placement in s's segment.
func (s Output) NewResults(n int32) (Output_YearToResult_List, error) {
	l, err := NewOutput_YearToResult_List(s.Struct.Segment(), n)
	if err != nil {
		return Output_YearToResult_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// Output_List is a list of Output.
type Output_List struct{ capnp.List }

// NewOutput creates a new list of Output.
func NewOutput_List(s *capnp.Segment, sz int32) (Output_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return Output_List{l}, err
}

func (s Output_List) At(i int) Output { return Output{s.List.Struct(i)} }

func (s Output_List) Set(i int, v Output) error { return s.List.SetStruct(i, v.Struct) }

func (s Output_List) String() string {
	str, _ := text.MarshalList(0x932a681f81b4be19, s.List)
	return str
}

// Output_Future is a wrapper for a Output promised by a client call.
type Output_Future struct{ *capnp.Future }

func (p Output_Future) Struct() (Output, error) {
	s, err := p.Future.Struct()
	return Output{s}, err
}

type Output_YearToResult struct{ capnp.Struct }

// Output_YearToResult_TypeID is the unique identifier for the type Output_YearToResult.
const Output_YearToResult_TypeID = 0xa008c533888c3a5e

func NewOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult{st}, err
}

func NewRootOutput_YearToResult(s *capnp.Segment) (Output_YearToResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Output_YearToResult{st}, err
}

func ReadRootOutput_YearToResult(msg *capnp.Message) (Output_YearToResult, error) {
	root, err := msg.Root()
	return Output_YearToResult{root.Struct()}, err
}

func (s Output_YearToResult) String() string {
	str, _ := text.Marshal(0xa008c533888c3a5e, s.Struct)
	return str
}

func (s Output_YearToResult) Year() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Output_YearToResult) SetYear(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Output_YearToResult) Result() (Result, error) {
	p, err := s.Struct.Ptr(0)
	return Result{Struct: p.Struct()}, err
}

func (s Output_YearToResult) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s Output_YearToResult) SetResult(v Result) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s Output_YearToResult) NewResult() (Result, error) {
	ss, err := NewResult(s.Struct.Segment())
	if err != nil {
		return Result{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Output_YearToResult_List is a list of Output_YearToResult.
type Output_YearToResult_List struct{ capnp.List }

// NewOutput_YearToResult creates a new list of Output_YearToResult.
func NewOutput_YearToResult_List(s *capnp.Segment, sz int32) (Output_YearToResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Output_YearToResult_List{l}, err
}

func (s Output_YearToResult_List) At(i int) Output_YearToResult {
	return Output_YearToResult{s.List.Struct(i)}
}

func (s Output_YearToResult_List) Set(i int, v Output_YearToResult) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Output_YearToResult_List) String() string {
	str, _ := text.MarshalList(0xa008c533888c3a5e, s.List)
	return str
}

// Output_YearToResult_Future is a wrapper for a Output_YearToResult promised by a client call.
type Output_YearToResult_Future struct{ *capnp.Future }

func (p Output_YearToResult_Future) Struct() (Output_YearToResult, error) {
	s, err := p.Future.Struct()
	return Output_YearToResult{s}, err
}

func (p Output_YearToResult_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

const schema_b80c8fd14e523f9b = "x\xda\x8c\x93O\x88\x1cE\x14\xc6\xdfW\xd5\xb3\xbd\xc9" +
	"n\x9cm\xba\xc1\x98\xcb\x84 D\x03&1\x9b\x08\x19" +
	"\x08c\x92Md\x83I\xb6f6\xd1\xc5(tv\xca" +
	"L\xc7\x9e\xeeIu\xf7&\xb3D\x93@\"+d\xf1" +
	"_\xc0\x83\x08K\xf0\xa2\x08\xb9(\xe8AQ\xd0\xb3\x06" +
	"\xf4\xe2E\xf0\x92\xabW\x0f\xd2\xf2z\x9c\xe9e!\x92" +
	"S\xbf\xfe\xd5\xab\xd7\xdfW\xfd\xd5\xde\x05\xf1\xbcx\xb6" +
	"\xb2\xd3\"R{+c\xf9\xf7\xb1\xfb\xd7\xaf\xaf<\xb7" +
	"Jj'D>\xff\xcb\x83\xb5\xfdg\xbfZ%\xcb&" +
	"\x9a\xfe\x1b\x9f\xc3u\x84M\xe4n\x11\x97\x09\xe5\xb2\xda" +
	"\x0e\xe4\x1f7\x9a\xa7\xee\xbf;\xf95U\xb8e:\x10" +
	"u\xb8}\xf18\x91{K\xdc#\xe4O|\xf7\xe5\x8d" +
	"Zg\xd7\x87\x1b\xbb%w\x1f\x90u\xb8\xc7$w+" +
	"\xf9\x80\x90\xbfV\xbf\xbd2\xfd\xd3\xf8\x1a\x0bY\xb7\xb7" +
	"\x02\xee>h\xdd\x85\xabX\x94{\xd2\xbaL\xf8\xe7\xde" +
	"\x07o\xeb\xd5k\x9f\xaa\xed\x90\xe5\xe4B\xf4gV\x13" +
	"\xee\xb7E\xf9\x8d\xf5\x87 \xe4[\xde\xda\xb1\xfa\xe3\xd6" +
	"?\x7f&g\xbb(\x9b\x09\xd3?\xd8'\xe0\xfef\xf3" +
	"\xd4\xfb\xf6Gt4\xef\xc6m\x1d\xee\xe9\x07\x15\x1d\xb6" +
	"\x93\xd4O\xf7\xf4\x83\xff\xaa\xdd\x8b~/\xea\xd5\x9b:" +
	"\xc9\xc2t\xf7\xe01\x1f\x9f\xad\xfaa\xa6\xe7\x005." +
	"-\"\x0bD\xce\xd3\xdb\x88\xd4\x93\x12j\xaf\x80\x03x" +
	"`\xf8\xcc>\"\xf5\x94\x84\xda/ \x836\xaa\xa5(" +
	"\x02\xaa\x84\xda\x12O\xc2\x04\x09L\x10FB\xe4\xc3\x84" +
	"4\x06\x12\x94\x05\x94\xbf\xd0\x81\xc9\x87\xd2\xa8v\x96'" +
	"\xaa\xc9\x91\xb0c'\x88\xd4\x8c\x84\x9a\x13(t\x01\xce" +
	"If/J\xa8\x97\x05\x1c\x01\x0f\x82\xc89S'R" +
	"s\x12*\x14\xc8\x17\xb30\x0d\x96|CD\x98$\x81" +
	"IB\x1e$\xa7\xe2\x19?\xf5\x99\x81\x04@h\x14\xfa" +
	"\x13<F\x98\x93\xc0T)\x8a\xc0\xf0\x11\x1c\x9d\xce\xd2" +
	"^6p4\xca\x82\x83\x8b\xf9\x82\xf6\xcd|\xdc\xd4T" +
	"-\x1cO\x8d\x0c\xf9|\xd2\xe7$T\xa74\xa4\x9bD" +
	"\xaa-\xa1z\xeb\x0cu\xd9PGB\xa5\x02\x8e\x14\x1e" +
	"$\x91s\xe9\x08\x91\x0a%\xd4\xca\xe0\x97\x0c\xcd\x99," +
	":\xee\x07\xa1&\xb4G\xe6\x8c\xf6\x938\x1a\xb6\\3" +
	"\xc5\x19\xaf3;\xd2\xbb\xc1\xecCs4\xf0\xba{h" +
	"-\xb1\xb30\xdd\x10\xa3]e\x8cF)\xaa\x97)\xaa" +
	"\xf6\xb5o I@\x16\x02Y\x11\xa6\xca\x1bJ\xc0\xd4" +
	":%\xd6\xff$:\x9d\x8dz\x19\x8a\xef\xef\x1f|\x1f" +
	"p_\xc5y\xa2\xd69H\xb4:\x18&\x19p5\x96" +
	"\x89Zm\xe6=\x0c\xcf\x18p\xbb\xd8A\xd4\xea0O" +
	"\x99Kx\x90\x80{\xa9\xe0!\xf3+\xcc-\xe1\xc1\x02" +
	"\xdc\xac\xe0=\xe6W\x99W\xa4\x87\x0a\xe0\xf6\x0b\x9e2" +
	"\xbf\xce|\xcc\xf20\x06\xb8ob\x1fQ\xeb\x0a\xf3\x9b" +
	"\xcc\xed\x8a\x07\x1bpo\xa0N\xd4\xba\xca|\x85\xf9\xf8" +
	"\x98\x87q\xc0\xbd\x85mD\xad\xeb\xcco3\xdfd{" +
	"\xd8\x04\xb8\xef\x14\xf3o2\x7f\x8f\xf9\xe6)\x0f\x9b\x01" +
	"w\xb5\xe0+\xcc\xef0\x9fp<L\x00\xee\xfb\xb8K" +
	"\xd4\xba\xc3|\x8d\xf9\xa4\xf00\x09\xb8\x9f\x14|\x8d\xf9" +
	"\x17\x10\xc8\xb3D\xcf\xe8\xa5yC\xb6\x8eF\xc1az" +
	"\xf4\xf4\xbe\xd9\x88\x1a\x8b\x9c!\xcd\x0b\x15^\xb1\xdb\x17" +
	"\xba\xc3\xdbnw^O1F\x02c\x04;ZW'" +
	"e]K\xc2\xb8\xa7\x87o\x8d$\xd5A\x14\x0f_\xa5" +
	"\xbf<\xda\xf3FX\xd6I:\xda\x9f_\xd0\xa6\xebG" +
	"\xc75\xda\xda\xf8a+\xf5\xedT'\x10$*\"/" +
	"\x96\xd3\x19\xd3_\xd0\xf0\xcdK~\xaa\xcd)[\xeb\xd2" +
	"\xc6\xa3\xa4(\x0b\xd3\xd96\x11\xa7hkq\xeb\x0e_" +
	"\xe4\x10:\x87\x9aD\x10\xce\xc1\xdf\x89 \x9dC\x86\x08" +
	"\x96s\x90\x1f\x15\xe7\xc02Q\xde3A\xd77\xfd\x05" +
	"\xaa\xf2\xd0\xbcm\xfa'\xfd4\xd5\x04\x93/\xfa\xe6|" +
	"\x1c\xcdF\xe2\xf0\xf9xI\xbf`\xe2,j\x1f\x09\xe2" +
	"\xae/\x93$O\xb2\xeeqm\xd2\x80ja\xb0\xac\x0d" +
	"\xbf\xcf\x1a\x13\\\xa0\x9a\x9f\x06qT\xcem\xf0\xdc\xa3" +
	"g\xfe\x0d\x00\x00\xff\xffyk\xa0\xcf"

func init() {
	schemas.Register(schema_b80c8fd14e523f9b,
		0x8d365bd4f0136fc0,
		0x8db55634a0e7d054,
		0x932a681f81b4be19,
		0xa008c533888c3a5e,
		0xa47f8d65869200af,
		0xcfe218c48d227e0d)
}
