// Code generated by capnpc-go. DO NOT EDIT.

package weberest

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type DWLABImport struct{ Client *capnp.Client }

// DWLABImport_TypeID is the unique identifier for the type DWLABImport.
const DWLABImport_TypeID = 0xa1a4ad9d143eaa6f

func (c DWLABImport) ImportData(ctx context.Context, params func(DWLABImport_importData_Params) error) (DWLABImport_importData_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "models/weberest/web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DWLABImport_importData_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return DWLABImport_importData_Results_Future{Future: ans.Future()}, release
}

func (c DWLABImport) AddRef() DWLABImport {
	return DWLABImport{
		Client: c.Client.AddRef(),
	}
}

func (c DWLABImport) Release() {
	c.Client.Release()
}

// A DWLABImport_Server is a DWLABImport with a local implementation.
type DWLABImport_Server interface {
	ImportData(context.Context, DWLABImport_importData) error
}

// DWLABImport_NewServer creates a new Server from an implementation of DWLABImport_Server.
func DWLABImport_NewServer(s DWLABImport_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DWLABImport_Methods(nil, s), s, c, policy)
}

// DWLABImport_ServerToClient creates a new Client from an implementation of DWLABImport_Server.
// The caller is responsible for calling Release on the returned Client.
func DWLABImport_ServerToClient(s DWLABImport_Server, policy *server.Policy) DWLABImport {
	return DWLABImport{Client: capnp.NewClient(DWLABImport_NewServer(s, policy))}
}

// DWLABImport_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DWLABImport_Methods(methods []server.Method, s DWLABImport_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "models/weberest/web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ImportData(ctx, DWLABImport_importData{call})
		},
	})

	return methods
}

// DWLABImport_importData holds the state for a server call to DWLABImport.importData.
// See server.Call for documentation.
type DWLABImport_importData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DWLABImport_importData) Args() DWLABImport_importData_Params {
	return DWLABImport_importData_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c DWLABImport_importData) AllocResults() (DWLABImport_importData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{Struct: r}, err
}

type DWLABImport_importData_Params struct{ capnp.Struct }

// DWLABImport_importData_Params_TypeID is the unique identifier for the type DWLABImport_importData_Params.
const DWLABImport_importData_Params_TypeID = 0xeb03972caa23c7d2

func NewDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params{st}, err
}

func NewRootDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params{st}, err
}

func ReadRootDWLABImport_importData_Params(msg *capnp.Message) (DWLABImport_importData_Params, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Params{root.Struct()}, err
}

func (s DWLABImport_importData_Params) String() string {
	str, _ := text.Marshal(0xeb03972caa23c7d2, s.Struct)
	return str
}

func (s DWLABImport_importData_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s DWLABImport_importData_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DWLABImport_importData_Params) Dwla() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasDwla() bool {
	return s.Struct.HasPtr(1)
}

func (s DWLABImport_importData_Params) DwlaBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetDwla(v string) error {
	return s.Struct.SetText(1, v)
}

func (s DWLABImport_importData_Params) Dwlb() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasDwlb() bool {
	return s.Struct.HasPtr(2)
}

func (s DWLABImport_importData_Params) DwlbBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetDwlb(v string) error {
	return s.Struct.SetText(2, v)
}

// DWLABImport_importData_Params_List is a list of DWLABImport_importData_Params.
type DWLABImport_importData_Params_List struct{ capnp.List }

// NewDWLABImport_importData_Params creates a new list of DWLABImport_importData_Params.
func NewDWLABImport_importData_Params_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return DWLABImport_importData_Params_List{l}, err
}

func (s DWLABImport_importData_Params_List) At(i int) DWLABImport_importData_Params {
	return DWLABImport_importData_Params{s.List.Struct(i)}
}

func (s DWLABImport_importData_Params_List) Set(i int, v DWLABImport_importData_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DWLABImport_importData_Params_List) String() string {
	str, _ := text.MarshalList(0xeb03972caa23c7d2, s.List)
	return str
}

// DWLABImport_importData_Params_Future is a wrapper for a DWLABImport_importData_Params promised by a client call.
type DWLABImport_importData_Params_Future struct{ *capnp.Future }

func (p DWLABImport_importData_Params_Future) Struct() (DWLABImport_importData_Params, error) {
	s, err := p.Future.Struct()
	return DWLABImport_importData_Params{s}, err
}

type DWLABImport_importData_Results struct{ capnp.Struct }

// DWLABImport_importData_Results_TypeID is the unique identifier for the type DWLABImport_importData_Results.
const DWLABImport_importData_Results_TypeID = 0xb9bc568c49fcca07

func NewDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{st}, err
}

func NewRootDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{st}, err
}

func ReadRootDWLABImport_importData_Results(msg *capnp.Message) (DWLABImport_importData_Results, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Results{root.Struct()}, err
}

func (s DWLABImport_importData_Results) String() string {
	str, _ := text.Marshal(0xb9bc568c49fcca07, s.Struct)
	return str
}

func (s DWLABImport_importData_Results) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Results) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s DWLABImport_importData_Results) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Results) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DWLABImport_importData_Results) SuccessA() bool {
	return s.Struct.Bit(0)
}

func (s DWLABImport_importData_Results) SetSuccessA(v bool) {
	s.Struct.SetBit(0, v)
}

func (s DWLABImport_importData_Results) SuccessB() bool {
	return s.Struct.Bit(1)
}

func (s DWLABImport_importData_Results) SetSuccessB(v bool) {
	s.Struct.SetBit(1, v)
}

// DWLABImport_importData_Results_List is a list of DWLABImport_importData_Results.
type DWLABImport_importData_Results_List struct{ capnp.List }

// NewDWLABImport_importData_Results creates a new list of DWLABImport_importData_Results.
func NewDWLABImport_importData_Results_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return DWLABImport_importData_Results_List{l}, err
}

func (s DWLABImport_importData_Results_List) At(i int) DWLABImport_importData_Results {
	return DWLABImport_importData_Results{s.List.Struct(i)}
}

func (s DWLABImport_importData_Results_List) Set(i int, v DWLABImport_importData_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DWLABImport_importData_Results_List) String() string {
	str, _ := text.MarshalList(0xb9bc568c49fcca07, s.List)
	return str
}

// DWLABImport_importData_Results_Future is a wrapper for a DWLABImport_importData_Results promised by a client call.
type DWLABImport_importData_Results_Future struct{ *capnp.Future }

func (p DWLABImport_importData_Results_Future) Struct() (DWLABImport_importData_Results, error) {
	s, err := p.Future.Struct()
	return DWLABImport_importData_Results{s}, err
}

const schema_c4b468a2826bb79b = "x\xda\xac\x90\xbf\xeb\xd3P\x14\xc5\xcf\xb9/\xf9F\xa1" +
	"\xa0\x8f\xd4\xc5UE(\xa6\xadt\xaa\xa0\xb4\xa5\xa2\x95" +
	"\x0ay\"\x0a\xc5\xe5\xa5\x09XlmiR\xba;\xbb" +
	";\x88\x83\xe2T\x90.\x82\x08\x8e\x82\xd0\xd1\xff\xc0\xd9" +
	"\xbf@P\"\xb1\xf4\xc7\xe2 \xb8\xdd{8\xef\x9d\xf3" +
	"\xb9\xf5\xb3l\xc9U\xf7\xb2\x03\x98\xba{\x92OW7" +
	"\xca\xaf\xde\xbd}\x0d\x1d\xa8\xfc\xe5\x87'\xcf\xde<~" +
	"\xff\x19`\xe3\x077\xf4\xcf\x89\x07\xf8Zn\xf9\xd7\x8b" +
	")\xf76?{\xcf\x1f|\xfa\x08\xd3$\x01\x97\x1e\xd0" +
	"\xb8$\x91\x80~[\xd6`\xfe\xf5\xcb\x85\xd5\x95\x17\xea" +
	";t\xb30\xa8\xc2\xf0M\x06\x85\xe1\x97\xac\x11\xe7\x93" +
	"i\x9c\x8c\xd3\xda\xf2$\x89\x92y\x92f\xb5e\x12\x05" +
	"\xdb1\x88mf\x83\xd1d6\x9dg\xd5\xa1\x9d=\x9d" +
	"]\xeb>\xec\xb7;\xbd?\x0a\x10\x92\xc6Q.\xb0O" +
	"\xe1\xae\x90\xd6\x03\x88>\xed\xe5\xdb\xd7]\x0b\x95\xd9\x16" +
	"Cr\x1fx\xea_\x03\xab\xbb\xbf2{\xf1^\x92." +
	"\xbcq\x96\x9a\x92r\x00\x87\x80\xbey\x1e0-E\xd3" +
	"\x17\x92\xe5\xe2\x1e\xbaw\x070\xb7\x15\xcd}\xa1\x16\x96" +
	")\x806\x85\x18*\x9aGB5\x8aY\x82\xb0\x04\xe6" +
	"\xe9b8L\xd2\xb4\x0d\x80\x84\x90\x07\xads\xac\xfd\x17" +
	"\x80\xd0\xce\xad\x9a\xfc\xad\xbf\xde\x03T\x00\xd3U4a" +
	"\x01 [\x80\xbb\x95\x03\xd5\x11\xc0\x99x9\xb6\xc7K" +
	"\xb4[~\x07\x00\x00\xff\xff[G\x9b}"

func init() {
	schemas.Register(schema_c4b468a2826bb79b,
		0xa1a4ad9d143eaa6f,
		0xb9bc568c49fcca07,
		0xeb03972caa23c7d2)
}
