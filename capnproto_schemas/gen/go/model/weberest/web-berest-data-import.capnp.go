// Code generated by capnpc-go. DO NOT EDIT.

package weberest

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type DWLABImport struct{ Client *capnp.Client }

// DWLABImport_TypeID is the unique identifier for the type DWLABImport.
const DWLABImport_TypeID = 0xa1a4ad9d143eaa6f

func (c DWLABImport) ImportData(ctx context.Context, params func(DWLABImport_importData_Params) error) (DWLABImport_importData_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "model/weberest/web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DWLABImport_importData_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return DWLABImport_importData_Results_Future{Future: ans.Future()}, release
}

func (c DWLABImport) AddRef() DWLABImport {
	return DWLABImport{
		Client: c.Client.AddRef(),
	}
}

func (c DWLABImport) Release() {
	c.Client.Release()
}

// A DWLABImport_Server is a DWLABImport with a local implementation.
type DWLABImport_Server interface {
	ImportData(context.Context, DWLABImport_importData) error
}

// DWLABImport_NewServer creates a new Server from an implementation of DWLABImport_Server.
func DWLABImport_NewServer(s DWLABImport_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DWLABImport_Methods(nil, s), s, c, policy)
}

// DWLABImport_ServerToClient creates a new Client from an implementation of DWLABImport_Server.
// The caller is responsible for calling Release on the returned Client.
func DWLABImport_ServerToClient(s DWLABImport_Server, policy *server.Policy) DWLABImport {
	return DWLABImport{Client: capnp.NewClient(DWLABImport_NewServer(s, policy))}
}

// DWLABImport_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DWLABImport_Methods(methods []server.Method, s DWLABImport_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "model/weberest/web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ImportData(ctx, DWLABImport_importData{call})
		},
	})

	return methods
}

// DWLABImport_importData holds the state for a server call to DWLABImport.importData.
// See server.Call for documentation.
type DWLABImport_importData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DWLABImport_importData) Args() DWLABImport_importData_Params {
	return DWLABImport_importData_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c DWLABImport_importData) AllocResults() (DWLABImport_importData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{Struct: r}, err
}

type DWLABImport_importData_Params struct{ capnp.Struct }

// DWLABImport_importData_Params_TypeID is the unique identifier for the type DWLABImport_importData_Params.
const DWLABImport_importData_Params_TypeID = 0xeb03972caa23c7d2

func NewDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params{st}, err
}

func NewRootDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params{st}, err
}

func ReadRootDWLABImport_importData_Params(msg *capnp.Message) (DWLABImport_importData_Params, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Params{root.Struct()}, err
}

func (s DWLABImport_importData_Params) String() string {
	str, _ := text.Marshal(0xeb03972caa23c7d2, s.Struct)
	return str
}

func (s DWLABImport_importData_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s DWLABImport_importData_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DWLABImport_importData_Params) Dwla() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s DWLABImport_importData_Params) HasDwla() bool {
	return s.Struct.HasPtr(1)
}

func (s DWLABImport_importData_Params) SetDwla(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s DWLABImport_importData_Params) Dwlb() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s DWLABImport_importData_Params) HasDwlb() bool {
	return s.Struct.HasPtr(2)
}

func (s DWLABImport_importData_Params) SetDwlb(v []byte) error {
	return s.Struct.SetData(2, v)
}

// DWLABImport_importData_Params_List is a list of DWLABImport_importData_Params.
type DWLABImport_importData_Params_List struct{ capnp.List }

// NewDWLABImport_importData_Params creates a new list of DWLABImport_importData_Params.
func NewDWLABImport_importData_Params_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return DWLABImport_importData_Params_List{l}, err
}

func (s DWLABImport_importData_Params_List) At(i int) DWLABImport_importData_Params {
	return DWLABImport_importData_Params{s.List.Struct(i)}
}

func (s DWLABImport_importData_Params_List) Set(i int, v DWLABImport_importData_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DWLABImport_importData_Params_List) String() string {
	str, _ := text.MarshalList(0xeb03972caa23c7d2, s.List)
	return str
}

// DWLABImport_importData_Params_Future is a wrapper for a DWLABImport_importData_Params promised by a client call.
type DWLABImport_importData_Params_Future struct{ *capnp.Future }

func (p DWLABImport_importData_Params_Future) Struct() (DWLABImport_importData_Params, error) {
	s, err := p.Future.Struct()
	return DWLABImport_importData_Params{s}, err
}

type DWLABImport_importData_Results struct{ capnp.Struct }

// DWLABImport_importData_Results_TypeID is the unique identifier for the type DWLABImport_importData_Results.
const DWLABImport_importData_Results_TypeID = 0xb9bc568c49fcca07

func NewDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{st}, err
}

func NewRootDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{st}, err
}

func ReadRootDWLABImport_importData_Results(msg *capnp.Message) (DWLABImport_importData_Results, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Results{root.Struct()}, err
}

func (s DWLABImport_importData_Results) String() string {
	str, _ := text.Marshal(0xb9bc568c49fcca07, s.Struct)
	return str
}

func (s DWLABImport_importData_Results) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Results) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s DWLABImport_importData_Results) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Results) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DWLABImport_importData_Results) SuccessA() bool {
	return s.Struct.Bit(0)
}

func (s DWLABImport_importData_Results) SetSuccessA(v bool) {
	s.Struct.SetBit(0, v)
}

func (s DWLABImport_importData_Results) SuccessB() bool {
	return s.Struct.Bit(1)
}

func (s DWLABImport_importData_Results) SetSuccessB(v bool) {
	s.Struct.SetBit(1, v)
}

// DWLABImport_importData_Results_List is a list of DWLABImport_importData_Results.
type DWLABImport_importData_Results_List struct{ capnp.List }

// NewDWLABImport_importData_Results creates a new list of DWLABImport_importData_Results.
func NewDWLABImport_importData_Results_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return DWLABImport_importData_Results_List{l}, err
}

func (s DWLABImport_importData_Results_List) At(i int) DWLABImport_importData_Results {
	return DWLABImport_importData_Results{s.List.Struct(i)}
}

func (s DWLABImport_importData_Results_List) Set(i int, v DWLABImport_importData_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DWLABImport_importData_Results_List) String() string {
	str, _ := text.MarshalList(0xb9bc568c49fcca07, s.List)
	return str
}

// DWLABImport_importData_Results_Future is a wrapper for a DWLABImport_importData_Results promised by a client call.
type DWLABImport_importData_Results_Future struct{ *capnp.Future }

func (p DWLABImport_importData_Results_Future) Struct() (DWLABImport_importData_Results, error) {
	s, err := p.Future.Struct()
	return DWLABImport_importData_Results{s}, err
}

const schema_c4b468a2826bb79b = "x\xda\xac\x90?\xab\x13A\x14\xc5\xcf\xb9\xb3\xfbV!" +
	"\xe11l*;Q\x10\x1e//\x914QP\x92\x10" +
	"\xd1H\x84\x9d \x0a\xc1f\x92]0\x98\x98\x90\xdd\x90" +
	"\xde\xda\xdeB,\x14\xab\x80\xa4\x11D\xb0\x12A\xb0\xb4" +
	"\xf7\x13\xf8\x09\x02\xc2\xca\xba\xe4Oc!\xd8\xdd\xfb\xe3" +
	"\xcc\x9c\xdfL\xf5\x98\x0d\xb9\xea^q\x00Su\x8f\xd2" +
	"\xe9\xeaf\xe9\xd5\xbb\xb7\xaf\xa1OU\xfa\xf2\xc3\x93g" +
	"o\x1e\xbf\xff\x02\xb0\xb6\xe1g\xfaZ<\xc0/\xcam" +
	"\xffZ6\xa5\xde\xb7_\x9d\xe7\x0f>}\x84\xa9\x93\x80" +
	"K\x0f\xa8]\x94\xbe\x80\xfe\x0dY\x83\xe9\xf7\xaf\x97V" +
	"\xa7/\xd4O\xe8z\x16PY\xe0\x87\xf4\xb2\xc0F\xd6" +
	"\x08\xd3\xc94\x8c\xc6\x95et4\x88\xe6Q\x9cT\x96" +
	"\xd1\xa0\x9c\x8f\xe5\xd0&\xb6<\x9a\xcc\xa6\xf3\xe4lh" +
	"gOg\xd7\xdb\x0f\xbb\xcdV\xe7\x0fA@\x1aG\xb9" +
	"\xc0\xae\x83[\x1d\xad\xfb\x10}\xdeK\xf3\xc3m\x0b\x95" +
	"\xd8\x06\x03rWw\xee\x1f\xeb\xce\xb6W%\xf6r/" +
	"\x8a\x17c\x95\xc4\xa6\xa0\x1c\xc0!\xa0o]\x00LC" +
	"\xd1t\x85d)\xfb\x0c\xdd\xb9\x0b\x98;\x8a\xe6\xbeP" +
	"\x0bK\x14@\x9b\x0c\x06\x8a\xe6\x91P\x8dB\x16 ," +
	"\x80i\xbc\x18\x0e\xa38n\x02 !\xe4\x9e\xb5\x0e\xd9" +
	"\xff\xf0\x0f\xec\xdcN\xf87}\xbd\xf3?\x01L[\xd1" +
	"\x04\x99\xbf\xe4\xfe\xf7N\xf6\x8f:\xf0?\x0e\x97c\xcb" +
	"\"\x84\xc5|\x19l\x97\xdf\x01\x00\x00\xff\xff\x01\xdc\x99" +
	"\xea"

func init() {
	schemas.Register(schema_c4b468a2826bb79b,
		0xa1a4ad9d143eaa6f,
		0xb9bc568c49fcca07,
		0xeb03972caa23c7d2)
}
