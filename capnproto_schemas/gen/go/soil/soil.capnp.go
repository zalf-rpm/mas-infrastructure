// Code generated by capnpc-go. DO NOT EDIT.

package soil

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type SType uint16

// SType_TypeID is the unique identifier for the type SType.
const SType_TypeID = 0xc2e4a3c8ff61b40a

// Values of SType.
const (
	SType_unknown SType = 0
	SType_ka5     SType = 1
)

// String returns the enum's constant name.
func (c SType) String() string {
	switch c {
	case SType_unknown:
		return "unknown"
	case SType_ka5:
		return "ka5"

	default:
		return ""
	}
}

// STypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func STypeFromString(c string) SType {
	switch c {
	case "unknown":
		return SType_unknown
	case "ka5":
		return SType_ka5

	default:
		return 0
	}
}

type SType_List struct{ capnp.List }

func NewSType_List(s *capnp.Segment, sz int32) (SType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SType_List{l.List}, err
}

func (l SType_List) At(i int) SType {
	ul := capnp.UInt16List{List: l.List}
	return SType(ul.At(i))
}

func (l SType_List) Set(i int, v SType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PropertyName uint16

// PropertyName_TypeID is the unique identifier for the type PropertyName.
const PropertyName_TypeID = 0x9e391ae1c6cd2567

// Values of PropertyName.
const (
	PropertyName_soilType                         PropertyName = 0
	PropertyName_sand                             PropertyName = 1
	PropertyName_clay                             PropertyName = 2
	PropertyName_silt                             PropertyName = 3
	PropertyName_pH                               PropertyName = 4
	PropertyName_sceleton                         PropertyName = 5
	PropertyName_organicCarbon                    PropertyName = 6
	PropertyName_organicMatter                    PropertyName = 7
	PropertyName_bulkDensity                      PropertyName = 8
	PropertyName_rawDensity                       PropertyName = 9
	PropertyName_fieldCapacity                    PropertyName = 10
	PropertyName_permanentWiltingPoint            PropertyName = 11
	PropertyName_saturation                       PropertyName = 12
	PropertyName_soilMoisture                     PropertyName = 13
	PropertyName_soilWaterConductivityCoefficient PropertyName = 14
	PropertyName_ammonium                         PropertyName = 15
	PropertyName_nitrate                          PropertyName = 16
	PropertyName_cnRatio                          PropertyName = 17
	PropertyName_inGroundwater                    PropertyName = 18
	PropertyName_impenetrable                     PropertyName = 19
)

// String returns the enum's constant name.
func (c PropertyName) String() string {
	switch c {
	case PropertyName_soilType:
		return "soilType"
	case PropertyName_sand:
		return "sand"
	case PropertyName_clay:
		return "clay"
	case PropertyName_silt:
		return "silt"
	case PropertyName_pH:
		return "pH"
	case PropertyName_sceleton:
		return "sceleton"
	case PropertyName_organicCarbon:
		return "organicCarbon"
	case PropertyName_organicMatter:
		return "organicMatter"
	case PropertyName_bulkDensity:
		return "bulkDensity"
	case PropertyName_rawDensity:
		return "rawDensity"
	case PropertyName_fieldCapacity:
		return "fieldCapacity"
	case PropertyName_permanentWiltingPoint:
		return "permanentWiltingPoint"
	case PropertyName_saturation:
		return "saturation"
	case PropertyName_soilMoisture:
		return "soilMoisture"
	case PropertyName_soilWaterConductivityCoefficient:
		return "soilWaterConductivityCoefficient"
	case PropertyName_ammonium:
		return "ammonium"
	case PropertyName_nitrate:
		return "nitrate"
	case PropertyName_cnRatio:
		return "cnRatio"
	case PropertyName_inGroundwater:
		return "inGroundwater"
	case PropertyName_impenetrable:
		return "impenetrable"

	default:
		return ""
	}
}

// PropertyNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropertyNameFromString(c string) PropertyName {
	switch c {
	case "soilType":
		return PropertyName_soilType
	case "sand":
		return PropertyName_sand
	case "clay":
		return PropertyName_clay
	case "silt":
		return PropertyName_silt
	case "pH":
		return PropertyName_pH
	case "sceleton":
		return PropertyName_sceleton
	case "organicCarbon":
		return PropertyName_organicCarbon
	case "organicMatter":
		return PropertyName_organicMatter
	case "bulkDensity":
		return PropertyName_bulkDensity
	case "rawDensity":
		return PropertyName_rawDensity
	case "fieldCapacity":
		return PropertyName_fieldCapacity
	case "permanentWiltingPoint":
		return PropertyName_permanentWiltingPoint
	case "saturation":
		return PropertyName_saturation
	case "soilMoisture":
		return PropertyName_soilMoisture
	case "soilWaterConductivityCoefficient":
		return PropertyName_soilWaterConductivityCoefficient
	case "ammonium":
		return PropertyName_ammonium
	case "nitrate":
		return PropertyName_nitrate
	case "cnRatio":
		return PropertyName_cnRatio
	case "inGroundwater":
		return PropertyName_inGroundwater
	case "impenetrable":
		return PropertyName_impenetrable

	default:
		return 0
	}
}

type PropertyName_List struct{ capnp.List }

func NewPropertyName_List(s *capnp.Segment, sz int32) (PropertyName_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PropertyName_List{l.List}, err
}

func (l PropertyName_List) At(i int) PropertyName {
	ul := capnp.UInt16List{List: l.List}
	return PropertyName(ul.At(i))
}

func (l PropertyName_List) Set(i int, v PropertyName) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Layer struct{ capnp.Struct }

// Layer_TypeID is the unique identifier for the type Layer.
const Layer_TypeID = 0x984640f05b3ada4f

func NewLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func NewRootLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func ReadRootLayer(msg *capnp.Message) (Layer, error) {
	root, err := msg.Root()
	return Layer{root.Struct()}, err
}

func (s Layer) String() string {
	str, _ := text.Marshal(0x984640f05b3ada4f, s.Struct)
	return str
}

func (s Layer) Properties() (Layer_Property_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_Property_List{List: p.List()}, err
}

func (s Layer) HasProperties() bool {
	return s.Struct.HasPtr(0)
}

func (s Layer) SetProperties(v Layer_Property_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Layer_Property_List, preferring placement in s's segment.
func (s Layer) NewProperties(n int32) (Layer_Property_List, error) {
	l, err := NewLayer_Property_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_Property_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Layer) Size() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Layer) SetSize(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Layer) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Layer) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s Layer) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Layer) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// Layer_List is a list of Layer.
type Layer_List struct{ capnp.List }

// NewLayer creates a new list of Layer.
func NewLayer_List(s *capnp.Segment, sz int32) (Layer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Layer_List{l}, err
}

func (s Layer_List) At(i int) Layer { return Layer{s.List.Struct(i)} }

func (s Layer_List) Set(i int, v Layer) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_List) String() string {
	str, _ := text.MarshalList(0x984640f05b3ada4f, s.List)
	return str
}

// Layer_Future is a wrapper for a Layer promised by a client call.
type Layer_Future struct{ *capnp.Future }

func (p Layer_Future) Struct() (Layer, error) {
	s, err := p.Future.Struct()
	return Layer{s}, err
}

type Layer_Property struct{ capnp.Struct }
type Layer_Property_Which uint16

const (
	Layer_Property_Which_f32Value Layer_Property_Which = 0
	Layer_Property_Which_bValue   Layer_Property_Which = 1
	Layer_Property_Which_type     Layer_Property_Which = 2
)

func (w Layer_Property_Which) String() string {
	const s = "f32ValuebValuetype"
	switch w {
	case Layer_Property_Which_f32Value:
		return s[0:8]
	case Layer_Property_Which_bValue:
		return s[8:14]
	case Layer_Property_Which_type:
		return s[14:18]

	}
	return "Layer_Property_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Layer_Property_TypeID is the unique identifier for the type Layer_Property.
const Layer_Property_TypeID = 0x92f4b81bcfdb71b0

func NewLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func NewRootLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func ReadRootLayer_Property(msg *capnp.Message) (Layer_Property, error) {
	root, err := msg.Root()
	return Layer_Property{root.Struct()}, err
}

func (s Layer_Property) String() string {
	str, _ := text.Marshal(0x92f4b81bcfdb71b0, s.Struct)
	return str
}

func (s Layer_Property) Which() Layer_Property_Which {
	return Layer_Property_Which(s.Struct.Uint16(2))
}
func (s Layer_Property) Name() PropertyName {
	return PropertyName(s.Struct.Uint16(0))
}

func (s Layer_Property) SetName(v PropertyName) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Layer_Property) F32Value() float32 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != f32Value")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Layer_Property) SetF32Value(v float32) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Layer_Property) BValue() bool {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bValue")
	}
	return s.Struct.Bit(32)
}

func (s Layer_Property) SetBValue(v bool) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetBit(32, v)
}

func (s Layer_Property) Type() (string, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != type")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Layer_Property) HasType() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Layer_Property) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Layer_Property) SetType(v string) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetText(0, v)
}

// Layer_Property_List is a list of Layer_Property.
type Layer_Property_List struct{ capnp.List }

// NewLayer_Property creates a new list of Layer_Property.
func NewLayer_Property_List(s *capnp.Segment, sz int32) (Layer_Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Layer_Property_List{l}, err
}

func (s Layer_Property_List) At(i int) Layer_Property { return Layer_Property{s.List.Struct(i)} }

func (s Layer_Property_List) Set(i int, v Layer_Property) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_Property_List) String() string {
	str, _ := text.MarshalList(0x92f4b81bcfdb71b0, s.List)
	return str
}

// Layer_Property_Future is a wrapper for a Layer_Property promised by a client call.
type Layer_Property_Future struct{ *capnp.Future }

func (p Layer_Property_Future) Struct() (Layer_Property, error) {
	s, err := p.Future.Struct()
	return Layer_Property{s}, err
}

type Query struct{ capnp.Struct }

// Query_TypeID is the unique identifier for the type Query.
const Query_TypeID = 0xbd4065087e22ca0d

func NewQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func NewRootQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func ReadRootQuery(msg *capnp.Message) (Query, error) {
	root, err := msg.Root()
	return Query{root.Struct()}, err
}

func (s Query) String() string {
	str, _ := text.Marshal(0xbd4065087e22ca0d, s.Struct)
	return str
}

func (s Query) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Query) OnlyRawData() bool {
	return !s.Struct.Bit(0)
}

func (s Query) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, !v)
}

// Query_List is a list of Query.
type Query_List struct{ capnp.List }

// NewQuery creates a new list of Query.
func NewQuery_List(s *capnp.Segment, sz int32) (Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_List{l}, err
}

func (s Query_List) At(i int) Query { return Query{s.List.Struct(i)} }

func (s Query_List) Set(i int, v Query) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_List) String() string {
	str, _ := text.MarshalList(0xbd4065087e22ca0d, s.List)
	return str
}

// Query_Future is a wrapper for a Query promised by a client call.
type Query_Future struct{ *capnp.Future }

func (p Query_Future) Struct() (Query, error) {
	s, err := p.Future.Struct()
	return Query{s}, err
}

type Query_Result struct{ capnp.Struct }

// Query_Result_TypeID is the unique identifier for the type Query_Result.
const Query_Result_TypeID = 0xbf4e1b07ad88943f

func NewQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func NewRootQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func ReadRootQuery_Result(msg *capnp.Message) (Query_Result, error) {
	root, err := msg.Root()
	return Query_Result{root.Struct()}, err
}

func (s Query_Result) String() string {
	str, _ := text.Marshal(0xbf4e1b07ad88943f, s.Struct)
	return str
}

func (s Query_Result) Failed() bool {
	return s.Struct.Bit(0)
}

func (s Query_Result) SetFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Query_Result) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query_Result) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query_Result) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query_Result) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Query_Result_List is a list of Query_Result.
type Query_Result_List struct{ capnp.List }

// NewQuery_Result creates a new list of Query_Result.
func NewQuery_Result_List(s *capnp.Segment, sz int32) (Query_Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_Result_List{l}, err
}

func (s Query_Result_List) At(i int) Query_Result { return Query_Result{s.List.Struct(i)} }

func (s Query_Result_List) Set(i int, v Query_Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_Result_List) String() string {
	str, _ := text.MarshalList(0xbf4e1b07ad88943f, s.List)
	return str
}

// Query_Result_Future is a wrapper for a Query_Result promised by a client call.
type Query_Result_Future struct{ *capnp.Future }

func (p Query_Result_Future) Struct() (Query_Result, error) {
	s, err := p.Future.Struct()
	return Query_Result{s}, err
}

type Profile struct{ capnp.Struct }

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0xff67c2a593419c29

func NewProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Profile{st}, err
}

func NewRootProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Profile{st}, err
}

func ReadRootProfile(msg *capnp.Message) (Profile, error) {
	root, err := msg.Root()
	return Profile{root.Struct()}, err
}

func (s Profile) String() string {
	str, _ := text.Marshal(0xff67c2a593419c29, s.Struct)
	return str
}

func (s Profile) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Profile) HasId() bool {
	return s.Struct.HasPtr(1)
}

func (s Profile) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Profile) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Profile) Layers() (Layer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_List{List: p.List()}, err
}

func (s Profile) HasLayers() bool {
	return s.Struct.HasPtr(0)
}

func (s Profile) SetLayers(v Layer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated Layer_List, preferring placement in s's segment.
func (s Profile) NewLayers(n int32) (Layer_List, error) {
	l, err := NewLayer_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Profile) PercentageOfArea() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x42c80000)
}

func (s Profile) SetPercentageOfArea(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x42c80000)
}

// Profile_List is a list of Profile.
type Profile_List struct{ capnp.List }

// NewProfile creates a new list of Profile.
func NewProfile_List(s *capnp.Segment, sz int32) (Profile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Profile_List{l}, err
}

func (s Profile_List) At(i int) Profile { return Profile{s.List.Struct(i)} }

func (s Profile_List) Set(i int, v Profile) error { return s.List.SetStruct(i, v.Struct) }

func (s Profile_List) String() string {
	str, _ := text.MarshalList(0xff67c2a593419c29, s.List)
	return str
}

// Profile_Future is a wrapper for a Profile promised by a client call.
type Profile_Future struct{ *capnp.Future }

func (p Profile_Future) Struct() (Profile, error) {
	s, err := p.Future.Struct()
	return Profile{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xa09aa71427dc64e1

func (c Service) CheckAvailableParameters(ctx context.Context, params func(Query) error) (Query_Result_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Query_Result_Future{Future: ans.Future()}, release
}
func (c Service) GetAllAvailableParameters(ctx context.Context, params func(Service_getAllAvailableParameters_Params) error) (Service_getAllAvailableParameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAllAvailableParameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getAllAvailableParameters_Results_Future{Future: ans.Future()}, release
}
func (c Service) ProfilesAt(ctx context.Context, params func(Service_profilesAt_Params) error) (Service_profilesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "profilesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_profilesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_profilesAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	CheckAvailableParameters(context.Context, Service_checkAvailableParameters) error

	GetAllAvailableParameters(context.Context, Service_getAllAvailableParameters) error

	ProfilesAt(context.Context, Service_profilesAt) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CheckAvailableParameters(ctx, Service_checkAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAllAvailableParameters(ctx, Service_getAllAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "profilesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ProfilesAt(ctx, Service_profilesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_checkAvailableParameters holds the state for a server call to Service.checkAvailableParameters.
// See server.Call for documentation.
type Service_checkAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_checkAvailableParameters) Args() Query {
	return Query{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_checkAvailableParameters) AllocResults() (Query_Result, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{Struct: r}, err
}

// Service_getAllAvailableParameters holds the state for a server call to Service.getAllAvailableParameters.
// See server.Call for documentation.
type Service_getAllAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAllAvailableParameters) Args() Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getAllAvailableParameters) AllocResults() (Service_getAllAvailableParameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{Struct: r}, err
}

// Service_profilesAt holds the state for a server call to Service.profilesAt.
// See server.Call for documentation.
type Service_profilesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_profilesAt) Args() Service_profilesAt_Params {
	return Service_profilesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_profilesAt) AllocResults() (Service_profilesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{Struct: r}, err
}

type Service_getAllAvailableParameters_Params struct{ capnp.Struct }

// Service_getAllAvailableParameters_Params_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Params.
const Service_getAllAvailableParameters_Params_TypeID = 0x8dec5fd8eb3e7c27

func NewService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func NewRootService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func ReadRootService_getAllAvailableParameters_Params(msg *capnp.Message) (Service_getAllAvailableParameters_Params, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Params{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Params) String() string {
	str, _ := text.Marshal(0x8dec5fd8eb3e7c27, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Params) OnlyRawData() bool {
	return s.Struct.Bit(0)
}

func (s Service_getAllAvailableParameters_Params) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_getAllAvailableParameters_Params_List is a list of Service_getAllAvailableParameters_Params.
type Service_getAllAvailableParameters_Params_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Params creates a new list of Service_getAllAvailableParameters_Params.
func NewService_getAllAvailableParameters_Params_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Service_getAllAvailableParameters_Params_List{l}, err
}

func (s Service_getAllAvailableParameters_Params_List) At(i int) Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Params_List) Set(i int, v Service_getAllAvailableParameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Params_List) String() string {
	str, _ := text.MarshalList(0x8dec5fd8eb3e7c27, s.List)
	return str
}

// Service_getAllAvailableParameters_Params_Future is a wrapper for a Service_getAllAvailableParameters_Params promised by a client call.
type Service_getAllAvailableParameters_Params_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Params_Future) Struct() (Service_getAllAvailableParameters_Params, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Params{s}, err
}

type Service_getAllAvailableParameters_Results struct{ capnp.Struct }

// Service_getAllAvailableParameters_Results_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Results.
const Service_getAllAvailableParameters_Results_TypeID = 0x98a2bf8e6ad97ee3

func NewService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func NewRootService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func ReadRootService_getAllAvailableParameters_Results(msg *capnp.Message) (Service_getAllAvailableParameters_Results, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Results{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Results) String() string {
	str, _ := text.Marshal(0x98a2bf8e6ad97ee3, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Results) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getAllAvailableParameters_Results) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Service_getAllAvailableParameters_Results) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_getAllAvailableParameters_Results) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Service_getAllAvailableParameters_Results_List is a list of Service_getAllAvailableParameters_Results.
type Service_getAllAvailableParameters_Results_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Results creates a new list of Service_getAllAvailableParameters_Results.
func NewService_getAllAvailableParameters_Results_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_getAllAvailableParameters_Results_List{l}, err
}

func (s Service_getAllAvailableParameters_Results_List) At(i int) Service_getAllAvailableParameters_Results {
	return Service_getAllAvailableParameters_Results{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Results_List) Set(i int, v Service_getAllAvailableParameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Results_List) String() string {
	str, _ := text.MarshalList(0x98a2bf8e6ad97ee3, s.List)
	return str
}

// Service_getAllAvailableParameters_Results_Future is a wrapper for a Service_getAllAvailableParameters_Results promised by a client call.
type Service_getAllAvailableParameters_Results_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Results_Future) Struct() (Service_getAllAvailableParameters_Results, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Results{s}, err
}

type Service_profilesAt_Params struct{ capnp.Struct }

// Service_profilesAt_Params_TypeID is the unique identifier for the type Service_profilesAt_Params.
const Service_profilesAt_Params_TypeID = 0xdb97e739bf9693c1

func NewService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func NewRootService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func ReadRootService_profilesAt_Params(msg *capnp.Message) (Service_profilesAt_Params, error) {
	root, err := msg.Root()
	return Service_profilesAt_Params{root.Struct()}, err
}

func (s Service_profilesAt_Params) String() string {
	str, _ := text.Marshal(0xdb97e739bf9693c1, s.Struct)
	return str
}

func (s Service_profilesAt_Params) Coord() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasCoord() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Params) SetCoord(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCoord sets the coord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Service_profilesAt_Params) Query() (Query, error) {
	p, err := s.Struct.Ptr(1)
	return Query{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasQuery() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_profilesAt_Params) SetQuery(v Query) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Query struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewQuery() (Query, error) {
	ss, err := NewQuery(s.Struct.Segment())
	if err != nil {
		return Query{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Service_profilesAt_Params_List is a list of Service_profilesAt_Params.
type Service_profilesAt_Params_List struct{ capnp.List }

// NewService_profilesAt_Params creates a new list of Service_profilesAt_Params.
func NewService_profilesAt_Params_List(s *capnp.Segment, sz int32) (Service_profilesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_profilesAt_Params_List{l}, err
}

func (s Service_profilesAt_Params_List) At(i int) Service_profilesAt_Params {
	return Service_profilesAt_Params{s.List.Struct(i)}
}

func (s Service_profilesAt_Params_List) Set(i int, v Service_profilesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xdb97e739bf9693c1, s.List)
	return str
}

// Service_profilesAt_Params_Future is a wrapper for a Service_profilesAt_Params promised by a client call.
type Service_profilesAt_Params_Future struct{ *capnp.Future }

func (p Service_profilesAt_Params_Future) Struct() (Service_profilesAt_Params, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Params{s}, err
}

func (p Service_profilesAt_Params_Future) Coord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Service_profilesAt_Params_Future) Query() Query_Future {
	return Query_Future{Future: p.Future.Field(1, nil)}
}

type Service_profilesAt_Results struct{ capnp.Struct }

// Service_profilesAt_Results_TypeID is the unique identifier for the type Service_profilesAt_Results.
const Service_profilesAt_Results_TypeID = 0xa0915e668c9317ad

func NewService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func NewRootService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func ReadRootService_profilesAt_Results(msg *capnp.Message) (Service_profilesAt_Results, error) {
	root, err := msg.Root()
	return Service_profilesAt_Results{root.Struct()}, err
}

func (s Service_profilesAt_Results) String() string {
	str, _ := text.Marshal(0xa0915e668c9317ad, s.Struct)
	return str
}

func (s Service_profilesAt_Results) Profiles() (Profile_List, error) {
	p, err := s.Struct.Ptr(0)
	return Profile_List{List: p.List()}, err
}

func (s Service_profilesAt_Results) HasProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Results) SetProfiles(v Profile_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated Profile_List, preferring placement in s's segment.
func (s Service_profilesAt_Results) NewProfiles(n int32) (Profile_List, error) {
	l, err := NewProfile_List(s.Struct.Segment(), n)
	if err != nil {
		return Profile_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_profilesAt_Results_List is a list of Service_profilesAt_Results.
type Service_profilesAt_Results_List struct{ capnp.List }

// NewService_profilesAt_Results creates a new list of Service_profilesAt_Results.
func NewService_profilesAt_Results_List(s *capnp.Segment, sz int32) (Service_profilesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_profilesAt_Results_List{l}, err
}

func (s Service_profilesAt_Results_List) At(i int) Service_profilesAt_Results {
	return Service_profilesAt_Results{s.List.Struct(i)}
}

func (s Service_profilesAt_Results_List) Set(i int, v Service_profilesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xa0915e668c9317ad, s.List)
	return str
}

// Service_profilesAt_Results_Future is a wrapper for a Service_profilesAt_Results promised by a client call.
type Service_profilesAt_Results_Future struct{ *capnp.Future }

func (p Service_profilesAt_Results_Future) Struct() (Service_profilesAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Results{s}, err
}

const schema_ff3f350f11891951 = "x\xda\xacV]l\x14_\x15?\xe7N\xdb\xd9n\xb7" +
	"\xec^\xa7\x09\x02!k\x08\x86\x8f\x84\x86\x16\xabi\x1f" +
	"l\x97\xb6\x8a\x0d\x1f{\xeb\x07\x16A\xb9\xdd\xbd[\x86" +
	"\xce\xce\x0c3w[\xd6\x10\xf0\xc5D\x1a\xf1\x0bQ " +
	"h\x10C\x08&\x0dJ4\xd1\x07B\xda\x04\xe5Cb" +
	" !Q\xc0\x07\xa2\x86\x18y\x90D\x9f\x14\xaf\xb9\xbb" +
	";\xbb\xdb\x96\x7f\xfe\xff\x07\x9e\xee\xce\x9d\xb3\xe7\xfe~" +
	"\xe7\xfe\xce\xef\xcc\xf6W\xc6\x10\xe9i\x9dJ\x00\xb0\xef" +
	"\xb4\xb6\xa9M'>\xf9\x8f?~\xe5\xd5\x19`\x16\"" +
	"@\x8b\x09\xb0cM\xdb\x15\x04\xb4\xb6\xb4\x0d\x02\xaa\x9f" +
	"\x1f{\xf6\x87u\xbf\xfe\xd7\xf7\x80QD\xb5\xef\xe9\xc0" +
	"\x97\xfe9\xf4\xa9\xf30\x8a\xa6\x81h\xedi{lM" +
	"\xb4\x99\x00\xd6\xe7\xdb^B\xd3{\xd6\x81\xa8\xd8\x9a\xd3" +
	"4\xd97\xa8\xa0\x95\xe8\x90m\xe6\x9c\xd5g\xae\x06\xb0" +
	"2\xe6\x0d@\xf5\x97\x93\x7f:\xfa\xad\xdbW\xce\x03\xb5" +
	"\x10\xaa1;^\x9b?\xd3gcl\x16PM}\xf4" +
	"\xe1o_\xac\xed\xff1\xd0\x0e\xd2H\x06h}=\xb6" +
	"h\x9d\x89\xe9\xf8\xd3\xb1\x97\x08\xa8\xe6W\x9f\xfdf\xe1" +
	"\xcb\xdf\xbd\\K\x85\xfa\xd5\xbf\xdb{u\xaa7\xed\x9a" +
	"\xc6\x8b\xfc\xf3M]\xd7.^\x06\xdaa,I\xd5\x13" +
	"\xbfh\xf5\xc75\xbc\xbe\xf8\xef\xac{\xf1M\x00\xaa\xf3" +
	"\xfe\x86\x9311t\xeb\xad,\x16\xe2s\xd6\xbd\xb8f" +
	"\xf1(\xaeY\x0c~\xff\x1b\xf3\xe6\xba\xbd\xb7\xab\x05\xaa" +
	"\xff\xb5\x1a|\xaec\xd1\xfaQ\x87\xfeu\xa1C\x07\xc7" +
	"\x7f\xc9\xd5\xdd\x9f\xfeuq\x05\xa3\x89\xc4\x9c\xc5\x13:" +
	"\xf0P\xe2\x13\x80j\xe1\xec\x0fn\xf7\xbf\xfc\xe1\xb3\xe6" +
	"\xda\xf0\xc4VM\xc8N\xe8\xdal\xb9\x949{uq" +
	"J\xbd\x15\xe3\x9d\xc4E\xeba%\xdb\xbd\xc4\x0dP\xd0" +
	"\xaeB\xcfv\xbas\xdcou\xfd\x81\xcf\x8a`\xc6\xce" +
	"\x89\xee)!3\x8e\x93\x99\xe1\xb6\xc3'\x1d\x91\xe5\x01" +
	"/\x0a)\x82pc\x96\x07&/\x86\xac\xc5h\x01h" +
	"A\x00\xda9\x09\xc0\x12\x06\xb2\x0f\x13T\x9e\xeb\x94\xc7" +
	"\xf9\xec\x08\x98\\rD \xa8\xef :\x82\xb8\xfe\xc0" +
	"n^\x16Aw6\xf0|\x11H,g\x11Y\xaa\x9e" +
	"\x8bo\x05`\x07\x0ddG\x08\xaeG\xa5\xb0KK\x8f" +
	"\x8a1\x00\x967\x90\xf9\x04\xd7\x93\xff\xa9\x8ft!\x01" +
	"\xa0\xc5\x01\x00v\xc4@&\x09v\x1aoT\x17\x1a\x00" +
	"\xf4\x98\xce\xe1\x18\xc8\x8e\x13L\xba\xbc(0\xd9\x90\x0b" +
	" &\x01UaG\xef\x17\xb8S\x12\x00\x80q \x18" +
	"\x07\x1c\x9c\xac\xecD\x98\x93\xb2\xec\x0bL\x00\xc1D\x13" +
	"\x01\x8c\x08\x00\xb0\x16lj\x01\x8ac\xaa\xc6\xa9\x0c\x95" +
	"zD\x94F\x0f\x00\xb0\x11\x03\xd9a\x82X\xe3sH" +
	"C\xfc\xa2\x81,O\x90\x12\xac\xb2\xe1\xba\x8e\x87\x0dd" +
	"\x0eA\xe5Ws\xd9`\x88\x10W\x01f\x0d\xc4T\xe3" +
	"8@\xbd\x99\x0c\xed\xaf\x8a\x08\xbf\xca\x8b0\x17\xd8\xbe" +
	"\x04\xd3\xf6\xdc\x15\xc8?\xd8\xed\x8e\x8b0Yrd\xc8" +
	"bu\xfc[\xc6\x01\xd8f\x03\xd9\x08A\x1a\x11\xc8\xe8" +
	"\x0b\x192\x90\x1d$\xa8\x8a\xdc\xcds\xe9\x05\x80\xe5\x08" +
	"\xea\xd2\x8a\xaf\x02T\x9e/m\xcf\xe5\x8e\xae\xf8{\x06" +
	"5\xeb$\xaa\xe6^^\x14\xa0U\x92\xadT\xe9\xefc" +
	":\x98\xfem+\x00\x12\xfag\xbd\x18\xf4\x89^Z\xe8" +
	"\xc3\xb5\x00\xd8J\xef\xe8\x906\xba\x10\x00\xa0Io\xe9" +
	"%F\x7f3\x09\x80\xed\xf4W\x07\xf4\x8d\xd3_\xe8\xcd" +
	"\x0e:\x7f\x13\x00\x13t^ov\xd2\xebG5\xb6\x9e" +
	"\xabq\x04\xc0$\x9d\xd7iR\xf4\xfaN\x00\xa4\xf4'" +
	"z\xf9\x10\xbd\xa0\xffh\xd1sG\x01*h?W\xf6" +
	"\xb5\x88\x92!w\xf3\xc9\x9c\xc3\xcb\xc9\xd0v\xa4\xe1\xef" +
	"RaN8Bz.\x00(/\x98\xe2\xae\x9d\x1b\x86" +
	"4\x0f&=7z\xde\x03i.\xa5\x08\xd4d\xc9\x99" +
	"\x1e\x11n\x08\xa6-\xcb*\xe0\xb3\xfa\xc1\x06C\x96U" +
	"\xc1\x16N~\x98\xfb\x90\xe69\xfd\xd2\x17A\x91\xbb\xc2" +
	"E\xb9\xdfv\xa4\xedN\xa5\xb3\x9e\xedJ\x15rY\x0a" +
	"\xb8\x16\x8c\xe7V\x90\xed\xf1\xec\x10\x92\xb2\x14\x88\xca\xe3" +
	"~.\x85\x11\x0c{n\xbe\x94\x93\xf6\x8c-\xcb\xc3\x9e" +
	"(\x14\xec\x9c-\\\x09\xa0x\xb1\xe8\xb9v\xa9\x08\x00" +
	"\xa7\\[\x06\\\x8aS9w\x9cK\xdbS\xb6\xfb\xe9" +
	"\xc0+\xb9yH\xcfr\x0d\xd7.\xfa\xc2\x152\x80\xa4" +
	"\x96O\xfd\xd6\x8c&\x89\xf9\x81W\xb0\x1d\x11f\xe4\xc6" +
	"q\x91\x0e+\x9aj\xb2\x8c\xb1\x9ael\xaeJ\xbd\x12" +
	"\xda\xa4\x8cT\xc3\xc3\x96)\x03\xa33\x8c\x9c\xd0\xa2H" +
	"\x18\xadM\xae\x8c\x91\xe3Rv\x1f\x08e&b}\x8c" +
	"a4S\xe8\xe8c t\xd4DR\xb7R\x8c\x86\x04" +
	"\xed?\x00\x84\xf6\x98*wD\xe4\xa633\x9c,o" +
	"\x11\x80!TQ\x03\x91\xe5\x1d\x84\xe1P\x13!##" +
	"\x87\x90\xc5\x10\xd5\x93]\x97&\x1e<\xbaqS\x8bA" +
	"<\xf8\xf8\xf3\xcbO\xaf-@MB\x11-V\x12A" +
	"\xb9\xe6+\xf5\xc9Aq`p\\\xe8\xfa5[\xcax" +
	"\xc3R\xea-yh\xacf\x9d\xc7\x09\"\xe9B\x82H" +
	"K\xdaR\xa4\x81\xeck\xef\xb4MW\x98|\xeb\x0a\x97" +
	"\xaf\x90\xe9\xae\"\x87\xeaE\xd5\xd1\x0f\xd4\xbccw\xc3" +
	"\x10?\xa3\x19\xedZn\x88c5C<Ap\xb0\xc0" +
	"mG\xe4\xeb\x13\xe5\xdd{NEY\xd5v\xd6xc" +
	"\x15\x08tg\xc5m\xda7\x00\x9c*\xb9\xd3\xae7\xeb" +
	"\x9a\xd3\xbc\xef\xfd$\x9f\xe5\xc9@\x0f\xc9&\x17\xed\x05" +
	"`\x1b\x0dd\xdb\x9b\xael[o\xcdZ?F0\x9d" +
	"\xf3\xbc \x8f)\xf5\x9fo\xff\xbe\x7f\xfb\x7f_\xbf\xd2" +
	"\x07\xa7\x00\xd3\xc7t%1\xd5\xf8|\xa8\xee/\xc1\x9d" +
	"\xd5G\x1bN\xad#Z\x10\x97\x16\xfa`U\x11\x88H" +
	"'\xe6\x1a\x036U\xab\xb3X\xdb\x18<\x83\x8e\x9en" +
	"M#\xa7\xfe\xd9V+\x97/\x82\x9cp%\xc7)\xb1" +
	"\xaf\x90\x09\x04\xafN\xd0\x85\xf8\xdd\x9d\x80\x86\x9d\x8f\x06" +
	"\xcf\xff\x03\x00\x00\xff\xff\x0fN\xc5\xcc"

func init() {
	schemas.Register(schema_ff3f350f11891951,
		0x8dec5fd8eb3e7c27,
		0x92f4b81bcfdb71b0,
		0x984640f05b3ada4f,
		0x98a2bf8e6ad97ee3,
		0x9e391ae1c6cd2567,
		0xa0915e668c9317ad,
		0xa09aa71427dc64e1,
		0xbd4065087e22ca0d,
		0xbf4e1b07ad88943f,
		0xc2e4a3c8ff61b40a,
		0xdb97e739bf9693c1,
		0xff67c2a593419c29)
}
