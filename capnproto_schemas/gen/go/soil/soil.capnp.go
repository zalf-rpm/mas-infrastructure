// Code generated by capnpc-go. DO NOT EDIT.

package soil

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type SType uint16

// SType_TypeID is the unique identifier for the type SType.
const SType_TypeID = 0xc2e4a3c8ff61b40a

// Values of SType.
const (
	SType_unknown SType = 0
	SType_ka5     SType = 1
)

// String returns the enum's constant name.
func (c SType) String() string {
	switch c {
	case SType_unknown:
		return "unknown"
	case SType_ka5:
		return "ka5"

	default:
		return ""
	}
}

// STypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func STypeFromString(c string) SType {
	switch c {
	case "unknown":
		return SType_unknown
	case "ka5":
		return SType_ka5

	default:
		return 0
	}
}

type SType_List = capnp.EnumList[SType]

func NewSType_List(s *capnp.Segment, sz int32) (SType_List, error) {
	return capnp.NewEnumList[SType](s, sz)
}

type PropertyName uint16

// PropertyName_TypeID is the unique identifier for the type PropertyName.
const PropertyName_TypeID = 0x9e391ae1c6cd2567

// Values of PropertyName.
const (
	PropertyName_soilType                         PropertyName = 0
	PropertyName_sand                             PropertyName = 1
	PropertyName_clay                             PropertyName = 2
	PropertyName_silt                             PropertyName = 3
	PropertyName_pH                               PropertyName = 4
	PropertyName_sceleton                         PropertyName = 5
	PropertyName_organicCarbon                    PropertyName = 6
	PropertyName_organicMatter                    PropertyName = 7
	PropertyName_bulkDensity                      PropertyName = 8
	PropertyName_rawDensity                       PropertyName = 9
	PropertyName_fieldCapacity                    PropertyName = 10
	PropertyName_permanentWiltingPoint            PropertyName = 11
	PropertyName_saturation                       PropertyName = 12
	PropertyName_soilMoisture                     PropertyName = 13
	PropertyName_soilWaterConductivityCoefficient PropertyName = 14
	PropertyName_ammonium                         PropertyName = 15
	PropertyName_nitrate                          PropertyName = 16
	PropertyName_cnRatio                          PropertyName = 17
	PropertyName_inGroundwater                    PropertyName = 18
	PropertyName_impenetrable                     PropertyName = 19
)

// String returns the enum's constant name.
func (c PropertyName) String() string {
	switch c {
	case PropertyName_soilType:
		return "soilType"
	case PropertyName_sand:
		return "sand"
	case PropertyName_clay:
		return "clay"
	case PropertyName_silt:
		return "silt"
	case PropertyName_pH:
		return "pH"
	case PropertyName_sceleton:
		return "sceleton"
	case PropertyName_organicCarbon:
		return "organicCarbon"
	case PropertyName_organicMatter:
		return "organicMatter"
	case PropertyName_bulkDensity:
		return "bulkDensity"
	case PropertyName_rawDensity:
		return "rawDensity"
	case PropertyName_fieldCapacity:
		return "fieldCapacity"
	case PropertyName_permanentWiltingPoint:
		return "permanentWiltingPoint"
	case PropertyName_saturation:
		return "saturation"
	case PropertyName_soilMoisture:
		return "soilMoisture"
	case PropertyName_soilWaterConductivityCoefficient:
		return "soilWaterConductivityCoefficient"
	case PropertyName_ammonium:
		return "ammonium"
	case PropertyName_nitrate:
		return "nitrate"
	case PropertyName_cnRatio:
		return "cnRatio"
	case PropertyName_inGroundwater:
		return "inGroundwater"
	case PropertyName_impenetrable:
		return "impenetrable"

	default:
		return ""
	}
}

// PropertyNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropertyNameFromString(c string) PropertyName {
	switch c {
	case "soilType":
		return PropertyName_soilType
	case "sand":
		return PropertyName_sand
	case "clay":
		return PropertyName_clay
	case "silt":
		return PropertyName_silt
	case "pH":
		return PropertyName_pH
	case "sceleton":
		return PropertyName_sceleton
	case "organicCarbon":
		return PropertyName_organicCarbon
	case "organicMatter":
		return PropertyName_organicMatter
	case "bulkDensity":
		return PropertyName_bulkDensity
	case "rawDensity":
		return PropertyName_rawDensity
	case "fieldCapacity":
		return PropertyName_fieldCapacity
	case "permanentWiltingPoint":
		return PropertyName_permanentWiltingPoint
	case "saturation":
		return PropertyName_saturation
	case "soilMoisture":
		return PropertyName_soilMoisture
	case "soilWaterConductivityCoefficient":
		return PropertyName_soilWaterConductivityCoefficient
	case "ammonium":
		return PropertyName_ammonium
	case "nitrate":
		return PropertyName_nitrate
	case "cnRatio":
		return PropertyName_cnRatio
	case "inGroundwater":
		return PropertyName_inGroundwater
	case "impenetrable":
		return PropertyName_impenetrable

	default:
		return 0
	}
}

type PropertyName_List = capnp.EnumList[PropertyName]

func NewPropertyName_List(s *capnp.Segment, sz int32) (PropertyName_List, error) {
	return capnp.NewEnumList[PropertyName](s, sz)
}

type Layer capnp.Struct

// Layer_TypeID is the unique identifier for the type Layer.
const Layer_TypeID = 0x984640f05b3ada4f

func NewLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer(st), err
}

func NewRootLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer(st), err
}

func ReadRootLayer(msg *capnp.Message) (Layer, error) {
	root, err := msg.Root()
	return Layer(root.Struct()), err
}

func (s Layer) String() string {
	str, _ := text.Marshal(0x984640f05b3ada4f, capnp.Struct(s))
	return str
}

func (s Layer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Layer) DecodeFromPtr(p capnp.Ptr) Layer {
	return Layer(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Layer) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Layer) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Layer) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Layer) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Layer) Properties() (Layer_Property_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Layer_Property_List(p.List()), err
}

func (s Layer) HasProperties() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Layer) SetProperties(v Layer_Property_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Layer_Property_List, preferring placement in s's segment.
func (s Layer) NewProperties(n int32) (Layer_Property_List, error) {
	l, err := NewLayer_Property_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Layer_Property_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Layer) Size() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s Layer) SetSize(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s Layer) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Layer) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Layer) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Layer) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Layer_List is a list of Layer.
type Layer_List = capnp.StructList[Layer]

// NewLayer creates a new list of Layer.
func NewLayer_List(s *capnp.Segment, sz int32) (Layer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Layer](l), err
}

// Layer_Future is a wrapper for a Layer promised by a client call.
type Layer_Future struct{ *capnp.Future }

func (f Layer_Future) Struct() (Layer, error) {
	p, err := f.Future.Ptr()
	return Layer(p.Struct()), err
}

type Layer_Property capnp.Struct
type Layer_Property_Which uint16

const (
	Layer_Property_Which_f32Value Layer_Property_Which = 0
	Layer_Property_Which_bValue   Layer_Property_Which = 1
	Layer_Property_Which_type     Layer_Property_Which = 2
	Layer_Property_Which_unset    Layer_Property_Which = 3
)

func (w Layer_Property_Which) String() string {
	const s = "f32ValuebValuetypeunset"
	switch w {
	case Layer_Property_Which_f32Value:
		return s[0:8]
	case Layer_Property_Which_bValue:
		return s[8:14]
	case Layer_Property_Which_type:
		return s[14:18]
	case Layer_Property_Which_unset:
		return s[18:23]

	}
	return "Layer_Property_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Layer_Property_TypeID is the unique identifier for the type Layer_Property.
const Layer_Property_TypeID = 0x92f4b81bcfdb71b0

func NewLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property(st), err
}

func NewRootLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property(st), err
}

func ReadRootLayer_Property(msg *capnp.Message) (Layer_Property, error) {
	root, err := msg.Root()
	return Layer_Property(root.Struct()), err
}

func (s Layer_Property) String() string {
	str, _ := text.Marshal(0x92f4b81bcfdb71b0, capnp.Struct(s))
	return str
}

func (s Layer_Property) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Layer_Property) DecodeFromPtr(p capnp.Ptr) Layer_Property {
	return Layer_Property(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Layer_Property) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Layer_Property) Which() Layer_Property_Which {
	return Layer_Property_Which(capnp.Struct(s).Uint16(2))
}
func (s Layer_Property) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Layer_Property) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Layer_Property) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Layer_Property) Name() PropertyName {
	return PropertyName(capnp.Struct(s).Uint16(0))
}

func (s Layer_Property) SetName(v PropertyName) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Layer_Property) F32Value() float32 {
	if capnp.Struct(s).Uint16(2) != 0 {
		panic("Which() != f32Value")
	}
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s Layer_Property) SetF32Value(v float32) {
	capnp.Struct(s).SetUint16(2, 0)
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

func (s Layer_Property) BValue() bool {
	if capnp.Struct(s).Uint16(2) != 1 {
		panic("Which() != bValue")
	}
	return capnp.Struct(s).Bit(32)
}

func (s Layer_Property) SetBValue(v bool) {
	capnp.Struct(s).SetUint16(2, 1)
	capnp.Struct(s).SetBit(32, v)
}

func (s Layer_Property) Type() (string, error) {
	if capnp.Struct(s).Uint16(2) != 2 {
		panic("Which() != type")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Layer_Property) HasType() bool {
	if capnp.Struct(s).Uint16(2) != 2 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Layer_Property) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Layer_Property) SetType(v string) error {
	capnp.Struct(s).SetUint16(2, 2)
	return capnp.Struct(s).SetText(0, v)
}

func (s Layer_Property) SetUnset() {
	capnp.Struct(s).SetUint16(2, 3)

}

// Layer_Property_List is a list of Layer_Property.
type Layer_Property_List = capnp.StructList[Layer_Property]

// NewLayer_Property creates a new list of Layer_Property.
func NewLayer_Property_List(s *capnp.Segment, sz int32) (Layer_Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Layer_Property](l), err
}

// Layer_Property_Future is a wrapper for a Layer_Property promised by a client call.
type Layer_Property_Future struct{ *capnp.Future }

func (f Layer_Property_Future) Struct() (Layer_Property, error) {
	p, err := f.Future.Ptr()
	return Layer_Property(p.Struct()), err
}

type Query capnp.Struct

// Query_TypeID is the unique identifier for the type Query.
const Query_TypeID = 0xbd4065087e22ca0d

func NewQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query(st), err
}

func NewRootQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query(st), err
}

func ReadRootQuery(msg *capnp.Message) (Query, error) {
	root, err := msg.Root()
	return Query(root.Struct()), err
}

func (s Query) String() string {
	str, _ := text.Marshal(0xbd4065087e22ca0d, capnp.Struct(s))
	return str
}

func (s Query) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Query) DecodeFromPtr(p capnp.Ptr) Query {
	return Query(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Query) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Query) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Query) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Query) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Query) Mandatory() (PropertyName_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PropertyName_List(p.List()), err
}

func (s Query) HasMandatory() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Query) SetMandatory(v PropertyName_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Query) Optional() (PropertyName_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PropertyName_List(p.List()), err
}

func (s Query) HasOptional() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Query) SetOptional(v PropertyName_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Query) OnlyRawData() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Query) SetOnlyRawData(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

// Query_List is a list of Query.
type Query_List = capnp.StructList[Query]

// NewQuery creates a new list of Query.
func NewQuery_List(s *capnp.Segment, sz int32) (Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Query](l), err
}

// Query_Future is a wrapper for a Query promised by a client call.
type Query_Future struct{ *capnp.Future }

func (f Query_Future) Struct() (Query, error) {
	p, err := f.Future.Ptr()
	return Query(p.Struct()), err
}

type Query_Result capnp.Struct

// Query_Result_TypeID is the unique identifier for the type Query_Result.
const Query_Result_TypeID = 0xbf4e1b07ad88943f

func NewQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result(st), err
}

func NewRootQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result(st), err
}

func ReadRootQuery_Result(msg *capnp.Message) (Query_Result, error) {
	root, err := msg.Root()
	return Query_Result(root.Struct()), err
}

func (s Query_Result) String() string {
	str, _ := text.Marshal(0xbf4e1b07ad88943f, capnp.Struct(s))
	return str
}

func (s Query_Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Query_Result) DecodeFromPtr(p capnp.Ptr) Query_Result {
	return Query_Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Query_Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Query_Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Query_Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Query_Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Query_Result) Failed() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Query_Result) SetFailed(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Query_Result) Mandatory() (PropertyName_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PropertyName_List(p.List()), err
}

func (s Query_Result) HasMandatory() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Query_Result) SetMandatory(v PropertyName_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Query_Result) Optional() (PropertyName_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PropertyName_List(p.List()), err
}

func (s Query_Result) HasOptional() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Query_Result) SetOptional(v PropertyName_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Query_Result_List is a list of Query_Result.
type Query_Result_List = capnp.StructList[Query_Result]

// NewQuery_Result creates a new list of Query_Result.
func NewQuery_Result_List(s *capnp.Segment, sz int32) (Query_Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Query_Result](l), err
}

// Query_Result_Future is a wrapper for a Query_Result promised by a client call.
type Query_Result_Future struct{ *capnp.Future }

func (f Query_Result_Future) Struct() (Query_Result, error) {
	p, err := f.Future.Ptr()
	return Query_Result(p.Struct()), err
}

type ProfileData capnp.Struct

// ProfileData_TypeID is the unique identifier for the type ProfileData.
const ProfileData_TypeID = 0xdf4bbf1c883a8790

func NewProfileData(s *capnp.Segment) (ProfileData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ProfileData(st), err
}

func NewRootProfileData(s *capnp.Segment) (ProfileData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ProfileData(st), err
}

func ReadRootProfileData(msg *capnp.Message) (ProfileData, error) {
	root, err := msg.Root()
	return ProfileData(root.Struct()), err
}

func (s ProfileData) String() string {
	str, _ := text.Marshal(0xdf4bbf1c883a8790, capnp.Struct(s))
	return str
}

func (s ProfileData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProfileData) DecodeFromPtr(p capnp.Ptr) ProfileData {
	return ProfileData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProfileData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProfileData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProfileData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProfileData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProfileData) Layers() (Layer_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Layer_List(p.List()), err
}

func (s ProfileData) HasLayers() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProfileData) SetLayers(v Layer_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated Layer_List, preferring placement in s's segment.
func (s ProfileData) NewLayers(n int32) (Layer_List, error) {
	l, err := NewLayer_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Layer_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s ProfileData) PercentageOfArea() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0) ^ 0x42c80000)
}

func (s ProfileData) SetPercentageOfArea(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v)^0x42c80000)
}

// ProfileData_List is a list of ProfileData.
type ProfileData_List = capnp.StructList[ProfileData]

// NewProfileData creates a new list of ProfileData.
func NewProfileData_List(s *capnp.Segment, sz int32) (ProfileData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ProfileData](l), err
}

// ProfileData_Future is a wrapper for a ProfileData promised by a client call.
type ProfileData_Future struct{ *capnp.Future }

func (f ProfileData_Future) Struct() (ProfileData, error) {
	p, err := f.Future.Ptr()
	return ProfileData(p.Struct()), err
}

type Profile capnp.Client

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0xff67c2a593419c29

func (c Profile) Data(ctx context.Context, params func(Profile_data_Params) error) (ProfileData_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      0,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Profile_data_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProfileData_Future{Future: ans.Future()}, release

}

func (c Profile) GeoLocation(ctx context.Context, params func(Profile_geoLocation_Params) error) (geo.LatLonCoord_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      1,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "geoLocation",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Profile_geoLocation_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return geo.LatLonCoord_Future{Future: ans.Future()}, release

}

func (c Profile) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Profile) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Profile) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Profile) String() string {
	return "Profile(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Profile) AddRef() Profile {
	return Profile(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Profile) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Profile) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Profile) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Profile) DecodeFromPtr(p capnp.Ptr) Profile {
	return Profile(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Profile) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Profile) IsSame(other Profile) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Profile) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Profile) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Profile_Server is a Profile with a local implementation.
type Profile_Server interface {
	Data(context.Context, Profile_data) error

	GeoLocation(context.Context, Profile_geoLocation) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Profile_NewServer creates a new Server from an implementation of Profile_Server.
func Profile_NewServer(s Profile_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Profile_Methods(nil, s), s, c)
}

// Profile_ServerToClient creates a new Client from an implementation of Profile_Server.
// The caller is responsible for calling Release on the returned Client.
func Profile_ServerToClient(s Profile_Server) Profile {
	return Profile(capnp.NewClient(Profile_NewServer(s)))
}

// Profile_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Profile_Methods(methods []server.Method, s Profile_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      0,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, Profile_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      1,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "geoLocation",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GeoLocation(ctx, Profile_geoLocation{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Profile_data holds the state for a server call to Profile.data.
// See server.Call for documentation.
type Profile_data struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Profile_data) Args() Profile_data_Params {
	return Profile_data_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Profile_data) AllocResults() (ProfileData, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ProfileData(r), err
}

// Profile_geoLocation holds the state for a server call to Profile.geoLocation.
// See server.Call for documentation.
type Profile_geoLocation struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Profile_geoLocation) Args() Profile_geoLocation_Params {
	return Profile_geoLocation_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Profile_geoLocation) AllocResults() (geo.LatLonCoord, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return geo.LatLonCoord(r), err
}

// Profile_List is a list of Profile.
type Profile_List = capnp.CapList[Profile]

// NewProfile creates a new list of Profile.
func NewProfile_List(s *capnp.Segment, sz int32) (Profile_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Profile](l), err
}

type Profile_data_Params capnp.Struct

// Profile_data_Params_TypeID is the unique identifier for the type Profile_data_Params.
const Profile_data_Params_TypeID = 0xe704b695746374e2

func NewProfile_data_Params(s *capnp.Segment) (Profile_data_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_data_Params(st), err
}

func NewRootProfile_data_Params(s *capnp.Segment) (Profile_data_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_data_Params(st), err
}

func ReadRootProfile_data_Params(msg *capnp.Message) (Profile_data_Params, error) {
	root, err := msg.Root()
	return Profile_data_Params(root.Struct()), err
}

func (s Profile_data_Params) String() string {
	str, _ := text.Marshal(0xe704b695746374e2, capnp.Struct(s))
	return str
}

func (s Profile_data_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Profile_data_Params) DecodeFromPtr(p capnp.Ptr) Profile_data_Params {
	return Profile_data_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Profile_data_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Profile_data_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Profile_data_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Profile_data_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Profile_data_Params_List is a list of Profile_data_Params.
type Profile_data_Params_List = capnp.StructList[Profile_data_Params]

// NewProfile_data_Params creates a new list of Profile_data_Params.
func NewProfile_data_Params_List(s *capnp.Segment, sz int32) (Profile_data_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Profile_data_Params](l), err
}

// Profile_data_Params_Future is a wrapper for a Profile_data_Params promised by a client call.
type Profile_data_Params_Future struct{ *capnp.Future }

func (f Profile_data_Params_Future) Struct() (Profile_data_Params, error) {
	p, err := f.Future.Ptr()
	return Profile_data_Params(p.Struct()), err
}

type Profile_geoLocation_Params capnp.Struct

// Profile_geoLocation_Params_TypeID is the unique identifier for the type Profile_geoLocation_Params.
const Profile_geoLocation_Params_TypeID = 0x8d2a23f8fd1b9151

func NewProfile_geoLocation_Params(s *capnp.Segment) (Profile_geoLocation_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_geoLocation_Params(st), err
}

func NewRootProfile_geoLocation_Params(s *capnp.Segment) (Profile_geoLocation_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_geoLocation_Params(st), err
}

func ReadRootProfile_geoLocation_Params(msg *capnp.Message) (Profile_geoLocation_Params, error) {
	root, err := msg.Root()
	return Profile_geoLocation_Params(root.Struct()), err
}

func (s Profile_geoLocation_Params) String() string {
	str, _ := text.Marshal(0x8d2a23f8fd1b9151, capnp.Struct(s))
	return str
}

func (s Profile_geoLocation_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Profile_geoLocation_Params) DecodeFromPtr(p capnp.Ptr) Profile_geoLocation_Params {
	return Profile_geoLocation_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Profile_geoLocation_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Profile_geoLocation_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Profile_geoLocation_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Profile_geoLocation_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Profile_geoLocation_Params_List is a list of Profile_geoLocation_Params.
type Profile_geoLocation_Params_List = capnp.StructList[Profile_geoLocation_Params]

// NewProfile_geoLocation_Params creates a new list of Profile_geoLocation_Params.
func NewProfile_geoLocation_Params_List(s *capnp.Segment, sz int32) (Profile_geoLocation_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Profile_geoLocation_Params](l), err
}

// Profile_geoLocation_Params_Future is a wrapper for a Profile_geoLocation_Params promised by a client call.
type Profile_geoLocation_Params_Future struct{ *capnp.Future }

func (f Profile_geoLocation_Params_Future) Struct() (Profile_geoLocation_Params, error) {
	p, err := f.Future.Ptr()
	return Profile_geoLocation_Params(p.Struct()), err
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xa09aa71427dc64e1

func (c Service) CheckAvailableParameters(ctx context.Context, params func(Query) error) (Query_Result_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Query_Result_Future{Future: ans.Future()}, release

}

func (c Service) GetAllAvailableParameters(ctx context.Context, params func(Service_getAllAvailableParameters_Params) error) (Service_getAllAvailableParameters_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAllAvailableParameters_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_getAllAvailableParameters_Results_Future{Future: ans.Future()}, release

}

func (c Service) ClosestProfilesAt(ctx context.Context, params func(Service_closestProfilesAt_Params) error) (Service_closestProfilesAt_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "closestProfilesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_closestProfilesAt_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_closestProfilesAt_Results_Future{Future: ans.Future()}, release

}

func (c Service) StreamAllProfiles(ctx context.Context, params func(Query) error) (Service_streamAllProfiles_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      3,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "streamAllProfiles",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_streamAllProfiles_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	CheckAvailableParameters(context.Context, Service_checkAvailableParameters) error

	GetAllAvailableParameters(context.Context, Service_getAllAvailableParameters) error

	ClosestProfilesAt(context.Context, Service_closestProfilesAt) error

	StreamAllProfiles(context.Context, Service_streamAllProfiles) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CheckAvailableParameters(ctx, Service_checkAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAllAvailableParameters(ctx, Service_getAllAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "closestProfilesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestProfilesAt(ctx, Service_closestProfilesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      3,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "streamAllProfiles",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamAllProfiles(ctx, Service_streamAllProfiles{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_checkAvailableParameters holds the state for a server call to Service.checkAvailableParameters.
// See server.Call for documentation.
type Service_checkAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_checkAvailableParameters) Args() Query {
	return Query(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_checkAvailableParameters) AllocResults() (Query_Result, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result(r), err
}

// Service_getAllAvailableParameters holds the state for a server call to Service.getAllAvailableParameters.
// See server.Call for documentation.
type Service_getAllAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAllAvailableParameters) Args() Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_getAllAvailableParameters) AllocResults() (Service_getAllAvailableParameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results(r), err
}

// Service_closestProfilesAt holds the state for a server call to Service.closestProfilesAt.
// See server.Call for documentation.
type Service_closestProfilesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_closestProfilesAt) Args() Service_closestProfilesAt_Params {
	return Service_closestProfilesAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_closestProfilesAt) AllocResults() (Service_closestProfilesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_closestProfilesAt_Results(r), err
}

// Service_streamAllProfiles holds the state for a server call to Service.streamAllProfiles.
// See server.Call for documentation.
type Service_streamAllProfiles struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_streamAllProfiles) Args() Query {
	return Query(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_streamAllProfiles) AllocResults() (Service_streamAllProfiles_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_streamAllProfiles_Results(r), err
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

type Service_Stream capnp.Client

// Service_Stream_TypeID is the unique identifier for the type Service_Stream.
const Service_Stream_TypeID = 0xf4f8ab568ffbc939

func (c Service_Stream) NextProfiles(ctx context.Context, params func(Service_Stream_nextProfiles_Params) error) (Service_Stream_nextProfiles_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4f8ab568ffbc939,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service.Stream",
			MethodName:    "nextProfiles",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_Stream_nextProfiles_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Service_Stream_nextProfiles_Results_Future{Future: ans.Future()}, release

}

func (c Service_Stream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service_Stream) String() string {
	return "Service_Stream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service_Stream) AddRef() Service_Stream {
	return Service_Stream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service_Stream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service_Stream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service_Stream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service_Stream) DecodeFromPtr(p capnp.Ptr) Service_Stream {
	return Service_Stream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service_Stream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service_Stream) IsSame(other Service_Stream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service_Stream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service_Stream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Stream_Server is a Service_Stream with a local implementation.
type Service_Stream_Server interface {
	NextProfiles(context.Context, Service_Stream_nextProfiles) error
}

// Service_Stream_NewServer creates a new Server from an implementation of Service_Stream_Server.
func Service_Stream_NewServer(s Service_Stream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Stream_Methods(nil, s), s, c)
}

// Service_Stream_ServerToClient creates a new Client from an implementation of Service_Stream_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_Stream_ServerToClient(s Service_Stream_Server) Service_Stream {
	return Service_Stream(capnp.NewClient(Service_Stream_NewServer(s)))
}

// Service_Stream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Stream_Methods(methods []server.Method, s Service_Stream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4f8ab568ffbc939,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service.Stream",
			MethodName:    "nextProfiles",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextProfiles(ctx, Service_Stream_nextProfiles{call})
		},
	})

	return methods
}

// Service_Stream_nextProfiles holds the state for a server call to Service_Stream.nextProfiles.
// See server.Call for documentation.
type Service_Stream_nextProfiles struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_Stream_nextProfiles) Args() Service_Stream_nextProfiles_Params {
	return Service_Stream_nextProfiles_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Service_Stream_nextProfiles) AllocResults() (Service_Stream_nextProfiles_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_Stream_nextProfiles_Results(r), err
}

// Service_Stream_List is a list of Service_Stream.
type Service_Stream_List = capnp.CapList[Service_Stream]

// NewService_Stream creates a new list of Service_Stream.
func NewService_Stream_List(s *capnp.Segment, sz int32) (Service_Stream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service_Stream](l), err
}

type Service_Stream_nextProfiles_Params capnp.Struct

// Service_Stream_nextProfiles_Params_TypeID is the unique identifier for the type Service_Stream_nextProfiles_Params.
const Service_Stream_nextProfiles_Params_TypeID = 0x81da248df613bc05

func NewService_Stream_nextProfiles_Params(s *capnp.Segment) (Service_Stream_nextProfiles_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_Stream_nextProfiles_Params(st), err
}

func NewRootService_Stream_nextProfiles_Params(s *capnp.Segment) (Service_Stream_nextProfiles_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_Stream_nextProfiles_Params(st), err
}

func ReadRootService_Stream_nextProfiles_Params(msg *capnp.Message) (Service_Stream_nextProfiles_Params, error) {
	root, err := msg.Root()
	return Service_Stream_nextProfiles_Params(root.Struct()), err
}

func (s Service_Stream_nextProfiles_Params) String() string {
	str, _ := text.Marshal(0x81da248df613bc05, capnp.Struct(s))
	return str
}

func (s Service_Stream_nextProfiles_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_Stream_nextProfiles_Params) DecodeFromPtr(p capnp.Ptr) Service_Stream_nextProfiles_Params {
	return Service_Stream_nextProfiles_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_Stream_nextProfiles_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_Stream_nextProfiles_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_Stream_nextProfiles_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_Stream_nextProfiles_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_Stream_nextProfiles_Params) MaxCount() int64 {
	return int64(capnp.Struct(s).Uint64(0) ^ 100)
}

func (s Service_Stream_nextProfiles_Params) SetMaxCount(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v)^100)
}

// Service_Stream_nextProfiles_Params_List is a list of Service_Stream_nextProfiles_Params.
type Service_Stream_nextProfiles_Params_List = capnp.StructList[Service_Stream_nextProfiles_Params]

// NewService_Stream_nextProfiles_Params creates a new list of Service_Stream_nextProfiles_Params.
func NewService_Stream_nextProfiles_Params_List(s *capnp.Segment, sz int32) (Service_Stream_nextProfiles_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Service_Stream_nextProfiles_Params](l), err
}

// Service_Stream_nextProfiles_Params_Future is a wrapper for a Service_Stream_nextProfiles_Params promised by a client call.
type Service_Stream_nextProfiles_Params_Future struct{ *capnp.Future }

func (f Service_Stream_nextProfiles_Params_Future) Struct() (Service_Stream_nextProfiles_Params, error) {
	p, err := f.Future.Ptr()
	return Service_Stream_nextProfiles_Params(p.Struct()), err
}

type Service_Stream_nextProfiles_Results capnp.Struct

// Service_Stream_nextProfiles_Results_TypeID is the unique identifier for the type Service_Stream_nextProfiles_Results.
const Service_Stream_nextProfiles_Results_TypeID = 0x9f7ae4c2748bddf8

func NewService_Stream_nextProfiles_Results(s *capnp.Segment) (Service_Stream_nextProfiles_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_Stream_nextProfiles_Results(st), err
}

func NewRootService_Stream_nextProfiles_Results(s *capnp.Segment) (Service_Stream_nextProfiles_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_Stream_nextProfiles_Results(st), err
}

func ReadRootService_Stream_nextProfiles_Results(msg *capnp.Message) (Service_Stream_nextProfiles_Results, error) {
	root, err := msg.Root()
	return Service_Stream_nextProfiles_Results(root.Struct()), err
}

func (s Service_Stream_nextProfiles_Results) String() string {
	str, _ := text.Marshal(0x9f7ae4c2748bddf8, capnp.Struct(s))
	return str
}

func (s Service_Stream_nextProfiles_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_Stream_nextProfiles_Results) DecodeFromPtr(p capnp.Ptr) Service_Stream_nextProfiles_Results {
	return Service_Stream_nextProfiles_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_Stream_nextProfiles_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_Stream_nextProfiles_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_Stream_nextProfiles_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_Stream_nextProfiles_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_Stream_nextProfiles_Results) Profiles() (Profile_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Profile_List(p.List()), err
}

func (s Service_Stream_nextProfiles_Results) HasProfiles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_Stream_nextProfiles_Results) SetProfiles(v Profile_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated Profile_List, preferring placement in s's segment.
func (s Service_Stream_nextProfiles_Results) NewProfiles(n int32) (Profile_List, error) {
	l, err := NewProfile_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Profile_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_Stream_nextProfiles_Results_List is a list of Service_Stream_nextProfiles_Results.
type Service_Stream_nextProfiles_Results_List = capnp.StructList[Service_Stream_nextProfiles_Results]

// NewService_Stream_nextProfiles_Results creates a new list of Service_Stream_nextProfiles_Results.
func NewService_Stream_nextProfiles_Results_List(s *capnp.Segment, sz int32) (Service_Stream_nextProfiles_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_Stream_nextProfiles_Results](l), err
}

// Service_Stream_nextProfiles_Results_Future is a wrapper for a Service_Stream_nextProfiles_Results promised by a client call.
type Service_Stream_nextProfiles_Results_Future struct{ *capnp.Future }

func (f Service_Stream_nextProfiles_Results_Future) Struct() (Service_Stream_nextProfiles_Results, error) {
	p, err := f.Future.Ptr()
	return Service_Stream_nextProfiles_Results(p.Struct()), err
}

type Service_getAllAvailableParameters_Params capnp.Struct

// Service_getAllAvailableParameters_Params_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Params.
const Service_getAllAvailableParameters_Params_TypeID = 0x8dec5fd8eb3e7c27

func NewService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params(st), err
}

func NewRootService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params(st), err
}

func ReadRootService_getAllAvailableParameters_Params(msg *capnp.Message) (Service_getAllAvailableParameters_Params, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Params(root.Struct()), err
}

func (s Service_getAllAvailableParameters_Params) String() string {
	str, _ := text.Marshal(0x8dec5fd8eb3e7c27, capnp.Struct(s))
	return str
}

func (s Service_getAllAvailableParameters_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAllAvailableParameters_Params) DecodeFromPtr(p capnp.Ptr) Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAllAvailableParameters_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAllAvailableParameters_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAllAvailableParameters_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAllAvailableParameters_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getAllAvailableParameters_Params) OnlyRawData() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Service_getAllAvailableParameters_Params) SetOnlyRawData(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Service_getAllAvailableParameters_Params_List is a list of Service_getAllAvailableParameters_Params.
type Service_getAllAvailableParameters_Params_List = capnp.StructList[Service_getAllAvailableParameters_Params]

// NewService_getAllAvailableParameters_Params creates a new list of Service_getAllAvailableParameters_Params.
func NewService_getAllAvailableParameters_Params_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Service_getAllAvailableParameters_Params](l), err
}

// Service_getAllAvailableParameters_Params_Future is a wrapper for a Service_getAllAvailableParameters_Params promised by a client call.
type Service_getAllAvailableParameters_Params_Future struct{ *capnp.Future }

func (f Service_getAllAvailableParameters_Params_Future) Struct() (Service_getAllAvailableParameters_Params, error) {
	p, err := f.Future.Ptr()
	return Service_getAllAvailableParameters_Params(p.Struct()), err
}

type Service_getAllAvailableParameters_Results capnp.Struct

// Service_getAllAvailableParameters_Results_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Results.
const Service_getAllAvailableParameters_Results_TypeID = 0x98a2bf8e6ad97ee3

func NewService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results(st), err
}

func NewRootService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results(st), err
}

func ReadRootService_getAllAvailableParameters_Results(msg *capnp.Message) (Service_getAllAvailableParameters_Results, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Results(root.Struct()), err
}

func (s Service_getAllAvailableParameters_Results) String() string {
	str, _ := text.Marshal(0x98a2bf8e6ad97ee3, capnp.Struct(s))
	return str
}

func (s Service_getAllAvailableParameters_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_getAllAvailableParameters_Results) DecodeFromPtr(p capnp.Ptr) Service_getAllAvailableParameters_Results {
	return Service_getAllAvailableParameters_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_getAllAvailableParameters_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_getAllAvailableParameters_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_getAllAvailableParameters_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_getAllAvailableParameters_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_getAllAvailableParameters_Results) Mandatory() (PropertyName_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return PropertyName_List(p.List()), err
}

func (s Service_getAllAvailableParameters_Results) HasMandatory() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_getAllAvailableParameters_Results) SetMandatory(v PropertyName_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}
func (s Service_getAllAvailableParameters_Results) Optional() (PropertyName_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return PropertyName_List(p.List()), err
}

func (s Service_getAllAvailableParameters_Results) HasOptional() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Service_getAllAvailableParameters_Results) SetOptional(v PropertyName_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Service_getAllAvailableParameters_Results_List is a list of Service_getAllAvailableParameters_Results.
type Service_getAllAvailableParameters_Results_List = capnp.StructList[Service_getAllAvailableParameters_Results]

// NewService_getAllAvailableParameters_Results creates a new list of Service_getAllAvailableParameters_Results.
func NewService_getAllAvailableParameters_Results_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Service_getAllAvailableParameters_Results](l), err
}

// Service_getAllAvailableParameters_Results_Future is a wrapper for a Service_getAllAvailableParameters_Results promised by a client call.
type Service_getAllAvailableParameters_Results_Future struct{ *capnp.Future }

func (f Service_getAllAvailableParameters_Results_Future) Struct() (Service_getAllAvailableParameters_Results, error) {
	p, err := f.Future.Ptr()
	return Service_getAllAvailableParameters_Results(p.Struct()), err
}

type Service_closestProfilesAt_Params capnp.Struct

// Service_closestProfilesAt_Params_TypeID is the unique identifier for the type Service_closestProfilesAt_Params.
const Service_closestProfilesAt_Params_TypeID = 0xdb97e739bf9693c1

func NewService_closestProfilesAt_Params(s *capnp.Segment) (Service_closestProfilesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_closestProfilesAt_Params(st), err
}

func NewRootService_closestProfilesAt_Params(s *capnp.Segment) (Service_closestProfilesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_closestProfilesAt_Params(st), err
}

func ReadRootService_closestProfilesAt_Params(msg *capnp.Message) (Service_closestProfilesAt_Params, error) {
	root, err := msg.Root()
	return Service_closestProfilesAt_Params(root.Struct()), err
}

func (s Service_closestProfilesAt_Params) String() string {
	str, _ := text.Marshal(0xdb97e739bf9693c1, capnp.Struct(s))
	return str
}

func (s Service_closestProfilesAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_closestProfilesAt_Params) DecodeFromPtr(p capnp.Ptr) Service_closestProfilesAt_Params {
	return Service_closestProfilesAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_closestProfilesAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_closestProfilesAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_closestProfilesAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_closestProfilesAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_closestProfilesAt_Params) Coord() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Service_closestProfilesAt_Params) HasCoord() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_closestProfilesAt_Params) SetCoord(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCoord sets the coord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Service_closestProfilesAt_Params) NewCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Service_closestProfilesAt_Params) Query() (Query, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Query(p.Struct()), err
}

func (s Service_closestProfilesAt_Params) HasQuery() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Service_closestProfilesAt_Params) SetQuery(v Query) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Query struct, preferring placement in s's segment.
func (s Service_closestProfilesAt_Params) NewQuery() (Query, error) {
	ss, err := NewQuery(capnp.Struct(s).Segment())
	if err != nil {
		return Query{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Service_closestProfilesAt_Params_List is a list of Service_closestProfilesAt_Params.
type Service_closestProfilesAt_Params_List = capnp.StructList[Service_closestProfilesAt_Params]

// NewService_closestProfilesAt_Params creates a new list of Service_closestProfilesAt_Params.
func NewService_closestProfilesAt_Params_List(s *capnp.Segment, sz int32) (Service_closestProfilesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Service_closestProfilesAt_Params](l), err
}

// Service_closestProfilesAt_Params_Future is a wrapper for a Service_closestProfilesAt_Params promised by a client call.
type Service_closestProfilesAt_Params_Future struct{ *capnp.Future }

func (f Service_closestProfilesAt_Params_Future) Struct() (Service_closestProfilesAt_Params, error) {
	p, err := f.Future.Ptr()
	return Service_closestProfilesAt_Params(p.Struct()), err
}
func (p Service_closestProfilesAt_Params_Future) Coord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}
func (p Service_closestProfilesAt_Params_Future) Query() Query_Future {
	return Query_Future{Future: p.Future.Field(1, nil)}
}

type Service_closestProfilesAt_Results capnp.Struct

// Service_closestProfilesAt_Results_TypeID is the unique identifier for the type Service_closestProfilesAt_Results.
const Service_closestProfilesAt_Results_TypeID = 0xa0915e668c9317ad

func NewService_closestProfilesAt_Results(s *capnp.Segment) (Service_closestProfilesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_closestProfilesAt_Results(st), err
}

func NewRootService_closestProfilesAt_Results(s *capnp.Segment) (Service_closestProfilesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_closestProfilesAt_Results(st), err
}

func ReadRootService_closestProfilesAt_Results(msg *capnp.Message) (Service_closestProfilesAt_Results, error) {
	root, err := msg.Root()
	return Service_closestProfilesAt_Results(root.Struct()), err
}

func (s Service_closestProfilesAt_Results) String() string {
	str, _ := text.Marshal(0xa0915e668c9317ad, capnp.Struct(s))
	return str
}

func (s Service_closestProfilesAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_closestProfilesAt_Results) DecodeFromPtr(p capnp.Ptr) Service_closestProfilesAt_Results {
	return Service_closestProfilesAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_closestProfilesAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_closestProfilesAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_closestProfilesAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_closestProfilesAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_closestProfilesAt_Results) Profiles() (Profile_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Profile_List(p.List()), err
}

func (s Service_closestProfilesAt_Results) HasProfiles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_closestProfilesAt_Results) SetProfiles(v Profile_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated Profile_List, preferring placement in s's segment.
func (s Service_closestProfilesAt_Results) NewProfiles(n int32) (Profile_List, error) {
	l, err := NewProfile_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Profile_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Service_closestProfilesAt_Results_List is a list of Service_closestProfilesAt_Results.
type Service_closestProfilesAt_Results_List = capnp.StructList[Service_closestProfilesAt_Results]

// NewService_closestProfilesAt_Results creates a new list of Service_closestProfilesAt_Results.
func NewService_closestProfilesAt_Results_List(s *capnp.Segment, sz int32) (Service_closestProfilesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_closestProfilesAt_Results](l), err
}

// Service_closestProfilesAt_Results_Future is a wrapper for a Service_closestProfilesAt_Results promised by a client call.
type Service_closestProfilesAt_Results_Future struct{ *capnp.Future }

func (f Service_closestProfilesAt_Results_Future) Struct() (Service_closestProfilesAt_Results, error) {
	p, err := f.Future.Ptr()
	return Service_closestProfilesAt_Results(p.Struct()), err
}

type Service_streamAllProfiles_Results capnp.Struct

// Service_streamAllProfiles_Results_TypeID is the unique identifier for the type Service_streamAllProfiles_Results.
const Service_streamAllProfiles_Results_TypeID = 0xd1a74147c92b7957

func NewService_streamAllProfiles_Results(s *capnp.Segment) (Service_streamAllProfiles_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_streamAllProfiles_Results(st), err
}

func NewRootService_streamAllProfiles_Results(s *capnp.Segment) (Service_streamAllProfiles_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_streamAllProfiles_Results(st), err
}

func ReadRootService_streamAllProfiles_Results(msg *capnp.Message) (Service_streamAllProfiles_Results, error) {
	root, err := msg.Root()
	return Service_streamAllProfiles_Results(root.Struct()), err
}

func (s Service_streamAllProfiles_Results) String() string {
	str, _ := text.Marshal(0xd1a74147c92b7957, capnp.Struct(s))
	return str
}

func (s Service_streamAllProfiles_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Service_streamAllProfiles_Results) DecodeFromPtr(p capnp.Ptr) Service_streamAllProfiles_Results {
	return Service_streamAllProfiles_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Service_streamAllProfiles_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Service_streamAllProfiles_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Service_streamAllProfiles_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Service_streamAllProfiles_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Service_streamAllProfiles_Results) AllProfiles() Service_Stream {
	p, _ := capnp.Struct(s).Ptr(0)
	return Service_Stream(p.Interface().Client())
}

func (s Service_streamAllProfiles_Results) HasAllProfiles() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Service_streamAllProfiles_Results) SetAllProfiles(v Service_Stream) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Service_streamAllProfiles_Results_List is a list of Service_streamAllProfiles_Results.
type Service_streamAllProfiles_Results_List = capnp.StructList[Service_streamAllProfiles_Results]

// NewService_streamAllProfiles_Results creates a new list of Service_streamAllProfiles_Results.
func NewService_streamAllProfiles_Results_List(s *capnp.Segment, sz int32) (Service_streamAllProfiles_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Service_streamAllProfiles_Results](l), err
}

// Service_streamAllProfiles_Results_Future is a wrapper for a Service_streamAllProfiles_Results promised by a client call.
type Service_streamAllProfiles_Results_Future struct{ *capnp.Future }

func (f Service_streamAllProfiles_Results_Future) Struct() (Service_streamAllProfiles_Results, error) {
	p, err := f.Future.Ptr()
	return Service_streamAllProfiles_Results(p.Struct()), err
}
func (p Service_streamAllProfiles_Results_Future) AllProfiles() Service_Stream {
	return Service_Stream(p.Future.Field(0, nil).Client())
}

const schema_ff3f350f11891951 = "x\xda\xacW\x7f\x8c\x14w\x15\x7fof\x97\xb9_\xbb" +
	"s_\xe7\x0c\x16l\xd6\xd4kh1^\xf8a5\\" +
	"\xa2{\xcb\x1dB\x11\xda\x9d\xab\x16\xa9\xad\xf6{\xbb\xdf" +
	";\xe7\x98\x9dYf\xbe\xcb\xb1\xa4\x94\x92\xd4\x14\x10l" +
	")E)\xa9\x0a5\x84\xa0^\xaa\x8d5j$\x84K" +
	"4\xa5\x95\xd4\x92\\\xa2\xb4\xc4Tk\x88\xb1\x7fh\xd2" +
	"\x18b\x8b_\xf3fwv\x87;44\xe1\xaf\xf9\xf5" +
	"\xbe\xef\xbd\xcf\xfb\xf1yo\x96\xfd>5\x94Z\x9ey" +
	"-\x0b\x9a\xfd\xe3\xf4\x02\x95\xfe\xb5\xf5\xaf\x03\xfd\x17w" +
	"\x83\xbd\x08\x11 e\x00\xac\xdch\x04\x08hm6\xf2" +
	"\x80\xca>\xb8\xf8\xea\x95\x8f/=\x00\xcc\x8a\xbf\xef4" +
	"V \xa4\xd4\x92G>\xf7\xf7?|\xed\x9d\x03`[" +
	"\xad\xa3\xc2x\x9e\x8e\xd6\xa2\xa3?\xd9\xfa\xc6k\x8b\x7f" +
	"\xf1\xee\xd3`3Du\xef\xc5\xc1\xaf\xfcc\xe8\xf3G" +
	"`\x0d\x1a)D\xebY\xe3\x82u\xc2\xa0C\xc7\x8d\x1c" +
	"BB\xc0\xeeFT\xf6-{\x99yW^AZ3" +
	"\x00\xac\x97:\xf6Y\xa7;\x16\x02X\xe7:^\x00T" +
	"\x7fy\xf4\x8f\x93\xdf:\xf3\xfc\x91\x86[\x91\xcc\xcaz" +
	"\xe7\x0f\xc9\xf8\xde\xce)@5q\xfb\xf9\xdf\xbe\xb5h" +
	"\xd5\xf7\x80ukme\x80V\xa6k\xc6\xfap\x17\xc9" +
	"\xb3\xae\xcbd\xf7\xca\xa5o\xca\x99\xb7w|\x1f\xd8\"" +
	"R\x85\x11\xc4\xee\x1d\x91\xaan\xc21\xbd\xf0\xd0\xfe\xf1" +
	"\xaf\x1e<\xd6\xb4\x15\x09\x9c\xee\x9e$\x81s\x91\xc0[" +
	"\xe57\x97\xf4\x9d<z\x0cX\xb7~\x8d\xad\xab\xddG" +
	"\xadt\xcfB\x80\x95\x99\x1e\x03\xad\xd9\x9e%\x00*\xf3" +
	"\xcam\x8fv\x88\xa1\xd3\xd7\xc5y\xbeg\x9f5K'" +
	"\xacK=\x843\xff\xcc\x9eic\xf1=g\x1a1l" +
	"\x1dm\x08\x1f\xcf\xccX\xa72tw\"C\xc2]?" +
	"\xe3\xea\xe5\x1f\xbc=3\x0f\xb3\xc8\xee\xb3*Y\x12t" +
	"\xb2\x9f\x01T\x9b\xea\x9f8\xb7\xb6p\xf2\xf5$\xa2J" +
	"6BT\xcf\x12\xa2\xb3\x87\xbe}f\xd5\xe5\xef\xbc\x91" +
	"\x0c\xefw\xb3c$p*K\xe1}\xea\x89\xc1=\x1f" +
	"=\xf3\x85?\xcd\x05A\xaa\xac\xb4\xf9++c\xd2]" +
	"\xa7I\xc2\x7f\x96%y\xf8\xe7\xa9\xcb\xed\x1a\xb2v\x9a" +
	"\xff\x86\x94Zu\xee\xbd'\xef\xff\xd1\x95w\x81Yz" +
	";\x8a\x80\x167/X\x95H\x83c\xae\xb5\x0e\xd3\x9d" +
	"\xba\xf3\xb9\xc2\xa1\x133\x13j^\x94w\x9aG\xado" +
	"D\xc2\xbb\xcd'\xacYs\x09(\xe8P\xa1\xef\xb8\x03" +
	"%^My\xd5\xc1\xfbD\xb0\xcd)\x89\x81\xfbd " +
	"xe\xc0\x13\xdbe1\xf0\xc7\x1dW\x84\xfd\xc5\x1c\x0f" +
	"x%\xb4Sz\x0a \x85\x88,\xb3\x1e\xc0\xee\xd1\xd1" +
	"\xfe\x88\x86\xaa\xc2\xb7\x0f\xfb5O\x02\x00\xa6A\xc34" +
	"\x96\x01Z\xcau\xaf:\xd8\xd440!\xfc\x0d~\x89" +
	"K\xc7\xf7b\xa5-\xb9t\xc2\x89\x09!\x0b\xae[\xd8" +
	"\xc6\x1d\x97\x8f\xb9\xa2H\x92B\x8a \xec/\xf2\xc0H" +
	"\xb8\x02\xc02c\x09W|\xcf\xad\x8f\xf2\xa9\x110\xb8" +
	"\xe4\x88\xa0!\x95olB\xf3\xaa\x83\x1bx]\x04\x03" +
	"\xc5\xc0\xaf\x8a@b\xbd\x88h\xf7\xb5t\xed\\\x0a`" +
	"o\xd7\xd1~\\\xc3[Q)\xec\xa3\xb6e\xbb\x09\xed" +
	"c:\xda\xfb5\xbcU\xfb\x8f\xfaX\x1fj\x00l\xef" +
	" \x80\xfd\xb8\x8e\xf6S\x1af\xf4\xab\xaa\x0fu\x00v" +
	"\x80t\xec\xd1\xd1~F\xc3L\xea}\xd5\x87)\x00v" +
	"p\x05\x80\xbd_G\xfb\x88\x86\xa6\xc7+\x02\xcdv\xff" +
	"\x01\xa2\x09\xa8\xc6W\xae\xb8\x9f\xbb5Aq\xec\x02\x0d" +
	"\xbb\x00\xf3c\xd1\x9b\x18\x89)\xebU\x81=\xa0a\x0f" +
	"`\xae\xe6\x85B\xc2\x82\x16<\x8c\xe1\x01\xd8)L\x90" +
	"\x0b\xc3\xf5\xaa\x89\xb8\x0eQ\xb4b\xc0k\x1e\x00\xb0G" +
	"t\xb4\x1f\xd6\x10\x9bh\x1f\"\x00_\xd6\xd1.k\xc8" +
	"4l`\xe5\x14\xe5\x87u\xb4]\x0dU\xb5\xa1\xcb\x01" +
	"]\x84\x98\x05,\xea\x88\xbdms\x80\xf4\xd2\x0c\x9d\x1d" +
	"\"\xc6\xa1\xca\",\x05NU\x82\xe1\xf8^\x8c\xe0\x03" +
	"\xe6~T\x84f\xcd\x95\xa1\xdd\xd1\xf2\xff\xceQ\x00\xfb" +
	"\x0e\x1d\xed\x11\x0dY\x0c\xa0@\xe9\x1a\xd2\xd1~0*" +
	"N\xaf\xcc\xa5\x1f\x00\xd6cW\xaf\x8d|\x16P\xf9U" +
	"*I\xeeR\xe4\xff\xa7P\xb2\x8a\xe2h\xde\xc3+\x02" +
	"\xa8\x86\x8aQ\x94\xfe\xb6\x9e\x84\xd9_\x97\x02\xa0\xc6." +
	"\xd1Eg\xb3tI\xb1\xf3\x8b\xa8=\xd8oHd\x01" +
	";\x1b\x00\xa0\xc1N\xd3\xa5\x83\xfdr\x0c\x00;\xd9K" +
	"\x0fP\xe6\xd9O\xe9e7\x9b~\x11\x00{\xd84\xbd" +
	"\xcc\xb0S\x93\xe4\xdb\xf2\x13]\x08\x80&\x9b&5\xbd" +
	"\xec\xd4j\x00d\xec8]>\xc4\x9e\xa5\x83\x16;<" +
	"\xd9l\xbf/\xd6\xabTLf\xc8\xbd\xb2Yry\xdd" +
	"\x0c\x1dW\xea\xd5u*,\x09WH\xdf\x03\x00\xe5\x07" +
	"\x13\xdcsJ\xc3\x90\xe3\xc1\x98\xef\xc5\xcf\x1b!\xc7\xa5" +
	"\x14\x81\x1a\xab\xb9[F\x84\x17\x82\xe1\xc8\xba\x0a\xf8\x14" +
	"=8\xa0\xcb\xba\x1aw\x84[\x1e\xe6U\xc8\xf1\x12}" +
	"\xac\x8a\xa0\xc2=\xe1\xa1\xdc\xe4\xb8\xd2\xf1&rE\xdf" +
	"\xf1\xa4\x0a\xb9\xac\x05\x9c\x0a\xc6\xf7\"\xcf6\xfaN\x08" +
	"\xa6\xac\x05\"z\xdc\xc4\xa5\xd0\x83a\xdf+\xd7J\xd2" +
	"\xd9\xe6\xc8\xfa\xb0/\xc6\xc7\x9d\x92#\x88V\x14\xafT" +
	"|\xcf\xa9U\x00`\x97\xe7\xc8\x80K\xb1\xab\xe4\x8d\x12" +
	"\x91(\xc7[\x1b\xf85\xaf\x0c\xb9)N\xee:\x95\xaa" +
	"\xf0\x84\x0c\xc0\xa4\xf2\xb9a\x8e\x1b\xcd\x8b0*\xae\x04" +
	"\xb3\xc4$wG\xa3\xe6#\xc1D\x89\xb06\xdf\xce)" +
	"\x91\xa4\xb1\x92\xeb\x87\"l\x19*\xc8v\x1d\xdf\x0cS" +
	"\x18\x9b\xd2K\"\xea\xfa\xf6\xc0\xc0\xc1|\x03\xa9\xdd\xab" +
	"\xa7\x13S\x15\xe3\x89\xc9\xb6\xbe\x02\x1a\xdbj \xb66" +
	"\x15\x8c\xb7\x06&.\x80\xc6\x84\x81Zk\xd2a<\xe5" +
	"\xd9\xe6\xa7Ac_2Po\xeb\x8c\xe7%\xbb\x9b\xbe" +
	"\xad1T\xe9\xeb\xa2\xb4\xa5\xb0\x8dks\xfb\x18`\x08" +
	"U\xdc\xe5\xda\xdc6\xc7p\x08U\x1c3\x8c\x83\x86r" +
	"\x08U\x18\x81)\xb8\xe86\x83I\xb2v\x07\xa2\x9a]" +
	"\xf7\xdc\xe6W_\x7f\xe1E*g\xf1\xea\xa7\xdf<v" +
	"\xf1\xe4YH\xcc \x0a\x92]\x13A\xbd\xc9\x8c\xad\x95" +
	"\x81b4\x1a%>I\x8a\xa3mRl\x91\xcaC\x94" +
	"\xa1\x07u\xb4\xb7k\x88Z\x1fj\x88\xacF\xa4(u" +
	"\xb4\x1f\xbb\xa9D3o\x88\xa5\xe7M\xb1\x08\xcc@\xc3" +
	"\xf3\x88\x7f\x12\xde\x0f6\xd9oC\x9b\xd2\xef&D\xeb" +
	"\xe6R\xfa\xfa&\xa5?\xa2a~\x9c;\xae(\xb7&" +
	"\xe6\xcdg\xcd\xa8N\x1b\x84D\xfevD.\xb0\xd5\x11" +
	"_v\xde\x06\xb0\xab\xe6m\xf1\xfc)\xcf\xd8\xc2\xef\xba" +
	"n\x1f\xc5\xd9w\xdb-{\x9d>J.\x03\xbc)\x0b" +
	"\x86+Bd\xed\xce \x9b7\xdc\xad\xf1\xc6\x91\x18:" +
	"4\xcb\xfbu\xb4\x97%\xea\xe3\x93+\x9a\x93\xe8S\x1a" +
	"\xe6J\xbe\x1f\x94\xb1W\xbd\xf7\xe4\xefV-{\xff\x9f" +
	"\xef\x90\xc5^\xc0\xdcVJ\x1b\xf6\xb6\x97\xd4\xc6\xfbk" +
	"\x82\x14\x99\xce\xbbb\x84K\x1eE\xaamw\xb0iw" +
	"\xa8\x99YD\xf6\xd9}\xedl\xe7]\x1a\xfe\x89\x89\xdc" +
	"\xfa]h\xe6\xa2*\x82\x92\xf0$\xc7\x09q\xefx!" +
	"\x10\xbc\xb1h\x9c\xedzy\xf5\xfc\xf9\x16-le." +
	"y\x7f\xbex\xed\xa6\xa6\xcd\xa5R\xac\x90\xa3\xa9\x88d" +
	"\xe2\xbf%\x8c\xff\x19\x18\x9b\x04\x8du\x1a*\xa6[0" +
	")\xb2CX\xc4\xeb\x00\xd7]\xd1\x00M\xba\xe2\xa5\x18" +
	"\xe3U\x9a-_\x0a\x1a\xbb\x9d\x08+\xfe\xe9\xc28\xc6" +
	"\xec\x961\xd0\x183L\xf29b\x98\xc6\xae\x19m\x1c" +
	"\xff\x9f'\xfe\x1b\x00\x00\xff\xff\xae\xce\xf3S"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_ff3f350f11891951,
		Nodes: []uint64{
			0x81da248df613bc05,
			0x8d2a23f8fd1b9151,
			0x8dec5fd8eb3e7c27,
			0x92f4b81bcfdb71b0,
			0x984640f05b3ada4f,
			0x98a2bf8e6ad97ee3,
			0x9e391ae1c6cd2567,
			0x9f7ae4c2748bddf8,
			0xa0915e668c9317ad,
			0xa09aa71427dc64e1,
			0xbd4065087e22ca0d,
			0xbf4e1b07ad88943f,
			0xc2e4a3c8ff61b40a,
			0xd1a74147c92b7957,
			0xdb97e739bf9693c1,
			0xdf4bbf1c883a8790,
			0xe704b695746374e2,
			0xf4f8ab568ffbc939,
			0xff67c2a593419c29,
		},
		Compressed: true,
	})
}
