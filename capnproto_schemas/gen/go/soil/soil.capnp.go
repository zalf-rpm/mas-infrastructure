// Code generated by capnpc-go. DO NOT EDIT.

package soil

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type SType uint16

// SType_TypeID is the unique identifier for the type SType.
const SType_TypeID = 0xc2e4a3c8ff61b40a

// Values of SType.
const (
	SType_unknown SType = 0
	SType_ka5     SType = 1
)

// String returns the enum's constant name.
func (c SType) String() string {
	switch c {
	case SType_unknown:
		return "unknown"
	case SType_ka5:
		return "ka5"

	default:
		return ""
	}
}

// STypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func STypeFromString(c string) SType {
	switch c {
	case "unknown":
		return SType_unknown
	case "ka5":
		return SType_ka5

	default:
		return 0
	}
}

type SType_List struct{ capnp.List }

func NewSType_List(s *capnp.Segment, sz int32) (SType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SType_List{l.List}, err
}

func (l SType_List) At(i int) SType {
	ul := capnp.UInt16List{List: l.List}
	return SType(ul.At(i))
}

func (l SType_List) Set(i int, v SType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PropertyName uint16

// PropertyName_TypeID is the unique identifier for the type PropertyName.
const PropertyName_TypeID = 0x9e391ae1c6cd2567

// Values of PropertyName.
const (
	PropertyName_soilType                         PropertyName = 0
	PropertyName_sand                             PropertyName = 1
	PropertyName_clay                             PropertyName = 2
	PropertyName_silt                             PropertyName = 3
	PropertyName_pH                               PropertyName = 4
	PropertyName_sceleton                         PropertyName = 5
	PropertyName_organicCarbon                    PropertyName = 6
	PropertyName_organicMatter                    PropertyName = 7
	PropertyName_bulkDensity                      PropertyName = 8
	PropertyName_rawDensity                       PropertyName = 9
	PropertyName_fieldCapacity                    PropertyName = 10
	PropertyName_permanentWiltingPoint            PropertyName = 11
	PropertyName_saturation                       PropertyName = 12
	PropertyName_soilMoisture                     PropertyName = 13
	PropertyName_soilWaterConductivityCoefficient PropertyName = 14
	PropertyName_ammonium                         PropertyName = 15
	PropertyName_nitrate                          PropertyName = 16
	PropertyName_cnRatio                          PropertyName = 17
	PropertyName_inGroundwater                    PropertyName = 18
	PropertyName_impenetrable                     PropertyName = 19
)

// String returns the enum's constant name.
func (c PropertyName) String() string {
	switch c {
	case PropertyName_soilType:
		return "soilType"
	case PropertyName_sand:
		return "sand"
	case PropertyName_clay:
		return "clay"
	case PropertyName_silt:
		return "silt"
	case PropertyName_pH:
		return "pH"
	case PropertyName_sceleton:
		return "sceleton"
	case PropertyName_organicCarbon:
		return "organicCarbon"
	case PropertyName_organicMatter:
		return "organicMatter"
	case PropertyName_bulkDensity:
		return "bulkDensity"
	case PropertyName_rawDensity:
		return "rawDensity"
	case PropertyName_fieldCapacity:
		return "fieldCapacity"
	case PropertyName_permanentWiltingPoint:
		return "permanentWiltingPoint"
	case PropertyName_saturation:
		return "saturation"
	case PropertyName_soilMoisture:
		return "soilMoisture"
	case PropertyName_soilWaterConductivityCoefficient:
		return "soilWaterConductivityCoefficient"
	case PropertyName_ammonium:
		return "ammonium"
	case PropertyName_nitrate:
		return "nitrate"
	case PropertyName_cnRatio:
		return "cnRatio"
	case PropertyName_inGroundwater:
		return "inGroundwater"
	case PropertyName_impenetrable:
		return "impenetrable"

	default:
		return ""
	}
}

// PropertyNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropertyNameFromString(c string) PropertyName {
	switch c {
	case "soilType":
		return PropertyName_soilType
	case "sand":
		return PropertyName_sand
	case "clay":
		return PropertyName_clay
	case "silt":
		return PropertyName_silt
	case "pH":
		return PropertyName_pH
	case "sceleton":
		return PropertyName_sceleton
	case "organicCarbon":
		return PropertyName_organicCarbon
	case "organicMatter":
		return PropertyName_organicMatter
	case "bulkDensity":
		return PropertyName_bulkDensity
	case "rawDensity":
		return PropertyName_rawDensity
	case "fieldCapacity":
		return PropertyName_fieldCapacity
	case "permanentWiltingPoint":
		return PropertyName_permanentWiltingPoint
	case "saturation":
		return PropertyName_saturation
	case "soilMoisture":
		return PropertyName_soilMoisture
	case "soilWaterConductivityCoefficient":
		return PropertyName_soilWaterConductivityCoefficient
	case "ammonium":
		return PropertyName_ammonium
	case "nitrate":
		return PropertyName_nitrate
	case "cnRatio":
		return PropertyName_cnRatio
	case "inGroundwater":
		return PropertyName_inGroundwater
	case "impenetrable":
		return PropertyName_impenetrable

	default:
		return 0
	}
}

type PropertyName_List struct{ capnp.List }

func NewPropertyName_List(s *capnp.Segment, sz int32) (PropertyName_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PropertyName_List{l.List}, err
}

func (l PropertyName_List) At(i int) PropertyName {
	ul := capnp.UInt16List{List: l.List}
	return PropertyName(ul.At(i))
}

func (l PropertyName_List) Set(i int, v PropertyName) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Layer struct{ capnp.Struct }

// Layer_TypeID is the unique identifier for the type Layer.
const Layer_TypeID = 0x984640f05b3ada4f

func NewLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func NewRootLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func ReadRootLayer(msg *capnp.Message) (Layer, error) {
	root, err := msg.Root()
	return Layer{root.Struct()}, err
}

func (s Layer) String() string {
	str, _ := text.Marshal(0x984640f05b3ada4f, s.Struct)
	return str
}

func (s Layer) Properties() (Layer_Property_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_Property_List{List: p.List()}, err
}

func (s Layer) HasProperties() bool {
	return s.Struct.HasPtr(0)
}

func (s Layer) SetProperties(v Layer_Property_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Layer_Property_List, preferring placement in s's segment.
func (s Layer) NewProperties(n int32) (Layer_Property_List, error) {
	l, err := NewLayer_Property_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_Property_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Layer) Size() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Layer) SetSize(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Layer) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Layer) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s Layer) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Layer) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// Layer_List is a list of Layer.
type Layer_List struct{ capnp.List }

// NewLayer creates a new list of Layer.
func NewLayer_List(s *capnp.Segment, sz int32) (Layer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Layer_List{l}, err
}

func (s Layer_List) At(i int) Layer { return Layer{s.List.Struct(i)} }

func (s Layer_List) Set(i int, v Layer) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_List) String() string {
	str, _ := text.MarshalList(0x984640f05b3ada4f, s.List)
	return str
}

// Layer_Future is a wrapper for a Layer promised by a client call.
type Layer_Future struct{ *capnp.Future }

func (p Layer_Future) Struct() (Layer, error) {
	s, err := p.Future.Struct()
	return Layer{s}, err
}

type Layer_Property struct{ capnp.Struct }
type Layer_Property_Which uint16

const (
	Layer_Property_Which_f32Value Layer_Property_Which = 0
	Layer_Property_Which_bValue   Layer_Property_Which = 1
	Layer_Property_Which_type     Layer_Property_Which = 2
	Layer_Property_Which_unset    Layer_Property_Which = 3
)

func (w Layer_Property_Which) String() string {
	const s = "f32ValuebValuetypeunset"
	switch w {
	case Layer_Property_Which_f32Value:
		return s[0:8]
	case Layer_Property_Which_bValue:
		return s[8:14]
	case Layer_Property_Which_type:
		return s[14:18]
	case Layer_Property_Which_unset:
		return s[18:23]

	}
	return "Layer_Property_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Layer_Property_TypeID is the unique identifier for the type Layer_Property.
const Layer_Property_TypeID = 0x92f4b81bcfdb71b0

func NewLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func NewRootLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func ReadRootLayer_Property(msg *capnp.Message) (Layer_Property, error) {
	root, err := msg.Root()
	return Layer_Property{root.Struct()}, err
}

func (s Layer_Property) String() string {
	str, _ := text.Marshal(0x92f4b81bcfdb71b0, s.Struct)
	return str
}

func (s Layer_Property) Which() Layer_Property_Which {
	return Layer_Property_Which(s.Struct.Uint16(2))
}
func (s Layer_Property) Name() PropertyName {
	return PropertyName(s.Struct.Uint16(0))
}

func (s Layer_Property) SetName(v PropertyName) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Layer_Property) F32Value() float32 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != f32Value")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Layer_Property) SetF32Value(v float32) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Layer_Property) BValue() bool {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bValue")
	}
	return s.Struct.Bit(32)
}

func (s Layer_Property) SetBValue(v bool) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetBit(32, v)
}

func (s Layer_Property) Type() (string, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != type")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Layer_Property) HasType() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Layer_Property) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Layer_Property) SetType(v string) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetText(0, v)
}

func (s Layer_Property) SetUnset() {
	s.Struct.SetUint16(2, 3)

}

// Layer_Property_List is a list of Layer_Property.
type Layer_Property_List struct{ capnp.List }

// NewLayer_Property creates a new list of Layer_Property.
func NewLayer_Property_List(s *capnp.Segment, sz int32) (Layer_Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Layer_Property_List{l}, err
}

func (s Layer_Property_List) At(i int) Layer_Property { return Layer_Property{s.List.Struct(i)} }

func (s Layer_Property_List) Set(i int, v Layer_Property) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_Property_List) String() string {
	str, _ := text.MarshalList(0x92f4b81bcfdb71b0, s.List)
	return str
}

// Layer_Property_Future is a wrapper for a Layer_Property promised by a client call.
type Layer_Property_Future struct{ *capnp.Future }

func (p Layer_Property_Future) Struct() (Layer_Property, error) {
	s, err := p.Future.Struct()
	return Layer_Property{s}, err
}

type Query struct{ capnp.Struct }

// Query_TypeID is the unique identifier for the type Query.
const Query_TypeID = 0xbd4065087e22ca0d

func NewQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func NewRootQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func ReadRootQuery(msg *capnp.Message) (Query, error) {
	root, err := msg.Root()
	return Query{root.Struct()}, err
}

func (s Query) String() string {
	str, _ := text.Marshal(0xbd4065087e22ca0d, s.Struct)
	return str
}

func (s Query) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Query) OnlyRawData() bool {
	return !s.Struct.Bit(0)
}

func (s Query) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, !v)
}

// Query_List is a list of Query.
type Query_List struct{ capnp.List }

// NewQuery creates a new list of Query.
func NewQuery_List(s *capnp.Segment, sz int32) (Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_List{l}, err
}

func (s Query_List) At(i int) Query { return Query{s.List.Struct(i)} }

func (s Query_List) Set(i int, v Query) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_List) String() string {
	str, _ := text.MarshalList(0xbd4065087e22ca0d, s.List)
	return str
}

// Query_Future is a wrapper for a Query promised by a client call.
type Query_Future struct{ *capnp.Future }

func (p Query_Future) Struct() (Query, error) {
	s, err := p.Future.Struct()
	return Query{s}, err
}

type Query_Result struct{ capnp.Struct }

// Query_Result_TypeID is the unique identifier for the type Query_Result.
const Query_Result_TypeID = 0xbf4e1b07ad88943f

func NewQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func NewRootQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func ReadRootQuery_Result(msg *capnp.Message) (Query_Result, error) {
	root, err := msg.Root()
	return Query_Result{root.Struct()}, err
}

func (s Query_Result) String() string {
	str, _ := text.Marshal(0xbf4e1b07ad88943f, s.Struct)
	return str
}

func (s Query_Result) Failed() bool {
	return s.Struct.Bit(0)
}

func (s Query_Result) SetFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Query_Result) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query_Result) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query_Result) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query_Result) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Query_Result_List is a list of Query_Result.
type Query_Result_List struct{ capnp.List }

// NewQuery_Result creates a new list of Query_Result.
func NewQuery_Result_List(s *capnp.Segment, sz int32) (Query_Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_Result_List{l}, err
}

func (s Query_Result_List) At(i int) Query_Result { return Query_Result{s.List.Struct(i)} }

func (s Query_Result_List) Set(i int, v Query_Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_Result_List) String() string {
	str, _ := text.MarshalList(0xbf4e1b07ad88943f, s.List)
	return str
}

// Query_Result_Future is a wrapper for a Query_Result promised by a client call.
type Query_Result_Future struct{ *capnp.Future }

func (p Query_Result_Future) Struct() (Query_Result, error) {
	s, err := p.Future.Struct()
	return Query_Result{s}, err
}

type ProfileData struct{ capnp.Struct }

// ProfileData_TypeID is the unique identifier for the type ProfileData.
const ProfileData_TypeID = 0xdf4bbf1c883a8790

func NewProfileData(s *capnp.Segment) (ProfileData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ProfileData{st}, err
}

func NewRootProfileData(s *capnp.Segment) (ProfileData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ProfileData{st}, err
}

func ReadRootProfileData(msg *capnp.Message) (ProfileData, error) {
	root, err := msg.Root()
	return ProfileData{root.Struct()}, err
}

func (s ProfileData) String() string {
	str, _ := text.Marshal(0xdf4bbf1c883a8790, s.Struct)
	return str
}

func (s ProfileData) Layers() (Layer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_List{List: p.List()}, err
}

func (s ProfileData) HasLayers() bool {
	return s.Struct.HasPtr(0)
}

func (s ProfileData) SetLayers(v Layer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated Layer_List, preferring placement in s's segment.
func (s ProfileData) NewLayers(n int32) (Layer_List, error) {
	l, err := NewLayer_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ProfileData) PercentageOfArea() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x42c80000)
}

func (s ProfileData) SetPercentageOfArea(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x42c80000)
}

// ProfileData_List is a list of ProfileData.
type ProfileData_List struct{ capnp.List }

// NewProfileData creates a new list of ProfileData.
func NewProfileData_List(s *capnp.Segment, sz int32) (ProfileData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ProfileData_List{l}, err
}

func (s ProfileData_List) At(i int) ProfileData { return ProfileData{s.List.Struct(i)} }

func (s ProfileData_List) Set(i int, v ProfileData) error { return s.List.SetStruct(i, v.Struct) }

func (s ProfileData_List) String() string {
	str, _ := text.MarshalList(0xdf4bbf1c883a8790, s.List)
	return str
}

// ProfileData_Future is a wrapper for a ProfileData promised by a client call.
type ProfileData_Future struct{ *capnp.Future }

func (p ProfileData_Future) Struct() (ProfileData, error) {
	s, err := p.Future.Struct()
	return ProfileData{s}, err
}

type Profile struct{ Client *capnp.Client }

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0xff67c2a593419c29

func (c Profile) Data(ctx context.Context, params func(Profile_data_Params) error) (ProfileData_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      0,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "data",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Profile_data_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ProfileData_Future{Future: ans.Future()}, release
}
func (c Profile) GeoLocation(ctx context.Context, params func(Profile_geoLocation_Params) error) (geo.LatLonCoord_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      1,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "geoLocation",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Profile_geoLocation_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return geo.LatLonCoord_Future{Future: ans.Future()}, release
}
func (c Profile) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Profile) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Profile) AddRef() Profile {
	return Profile{
		Client: c.Client.AddRef(),
	}
}

func (c Profile) Release() {
	c.Client.Release()
}

// A Profile_Server is a Profile with a local implementation.
type Profile_Server interface {
	Data(context.Context, Profile_data) error

	GeoLocation(context.Context, Profile_geoLocation) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Profile_NewServer creates a new Server from an implementation of Profile_Server.
func Profile_NewServer(s Profile_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Profile_Methods(nil, s), s, c, policy)
}

// Profile_ServerToClient creates a new Client from an implementation of Profile_Server.
// The caller is responsible for calling Release on the returned Client.
func Profile_ServerToClient(s Profile_Server, policy *server.Policy) Profile {
	return Profile{Client: capnp.NewClient(Profile_NewServer(s, policy))}
}

// Profile_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Profile_Methods(methods []server.Method, s Profile_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      0,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "data",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Data(ctx, Profile_data{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xff67c2a593419c29,
			MethodID:      1,
			InterfaceName: "soil.capnp:Profile",
			MethodName:    "geoLocation",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GeoLocation(ctx, Profile_geoLocation{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Profile_data holds the state for a server call to Profile.data.
// See server.Call for documentation.
type Profile_data struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Profile_data) Args() Profile_data_Params {
	return Profile_data_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Profile_data) AllocResults() (ProfileData, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ProfileData{Struct: r}, err
}

// Profile_geoLocation holds the state for a server call to Profile.geoLocation.
// See server.Call for documentation.
type Profile_geoLocation struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Profile_geoLocation) Args() Profile_geoLocation_Params {
	return Profile_geoLocation_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Profile_geoLocation) AllocResults() (geo.LatLonCoord, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return geo.LatLonCoord{Struct: r}, err
}

type Profile_data_Params struct{ capnp.Struct }

// Profile_data_Params_TypeID is the unique identifier for the type Profile_data_Params.
const Profile_data_Params_TypeID = 0xe704b695746374e2

func NewProfile_data_Params(s *capnp.Segment) (Profile_data_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_data_Params{st}, err
}

func NewRootProfile_data_Params(s *capnp.Segment) (Profile_data_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_data_Params{st}, err
}

func ReadRootProfile_data_Params(msg *capnp.Message) (Profile_data_Params, error) {
	root, err := msg.Root()
	return Profile_data_Params{root.Struct()}, err
}

func (s Profile_data_Params) String() string {
	str, _ := text.Marshal(0xe704b695746374e2, s.Struct)
	return str
}

// Profile_data_Params_List is a list of Profile_data_Params.
type Profile_data_Params_List struct{ capnp.List }

// NewProfile_data_Params creates a new list of Profile_data_Params.
func NewProfile_data_Params_List(s *capnp.Segment, sz int32) (Profile_data_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Profile_data_Params_List{l}, err
}

func (s Profile_data_Params_List) At(i int) Profile_data_Params {
	return Profile_data_Params{s.List.Struct(i)}
}

func (s Profile_data_Params_List) Set(i int, v Profile_data_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Profile_data_Params_List) String() string {
	str, _ := text.MarshalList(0xe704b695746374e2, s.List)
	return str
}

// Profile_data_Params_Future is a wrapper for a Profile_data_Params promised by a client call.
type Profile_data_Params_Future struct{ *capnp.Future }

func (p Profile_data_Params_Future) Struct() (Profile_data_Params, error) {
	s, err := p.Future.Struct()
	return Profile_data_Params{s}, err
}

type Profile_geoLocation_Params struct{ capnp.Struct }

// Profile_geoLocation_Params_TypeID is the unique identifier for the type Profile_geoLocation_Params.
const Profile_geoLocation_Params_TypeID = 0x8d2a23f8fd1b9151

func NewProfile_geoLocation_Params(s *capnp.Segment) (Profile_geoLocation_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_geoLocation_Params{st}, err
}

func NewRootProfile_geoLocation_Params(s *capnp.Segment) (Profile_geoLocation_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Profile_geoLocation_Params{st}, err
}

func ReadRootProfile_geoLocation_Params(msg *capnp.Message) (Profile_geoLocation_Params, error) {
	root, err := msg.Root()
	return Profile_geoLocation_Params{root.Struct()}, err
}

func (s Profile_geoLocation_Params) String() string {
	str, _ := text.Marshal(0x8d2a23f8fd1b9151, s.Struct)
	return str
}

// Profile_geoLocation_Params_List is a list of Profile_geoLocation_Params.
type Profile_geoLocation_Params_List struct{ capnp.List }

// NewProfile_geoLocation_Params creates a new list of Profile_geoLocation_Params.
func NewProfile_geoLocation_Params_List(s *capnp.Segment, sz int32) (Profile_geoLocation_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Profile_geoLocation_Params_List{l}, err
}

func (s Profile_geoLocation_Params_List) At(i int) Profile_geoLocation_Params {
	return Profile_geoLocation_Params{s.List.Struct(i)}
}

func (s Profile_geoLocation_Params_List) Set(i int, v Profile_geoLocation_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Profile_geoLocation_Params_List) String() string {
	str, _ := text.MarshalList(0x8d2a23f8fd1b9151, s.List)
	return str
}

// Profile_geoLocation_Params_Future is a wrapper for a Profile_geoLocation_Params promised by a client call.
type Profile_geoLocation_Params_Future struct{ *capnp.Future }

func (p Profile_geoLocation_Params_Future) Struct() (Profile_geoLocation_Params, error) {
	s, err := p.Future.Struct()
	return Profile_geoLocation_Params{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xa09aa71427dc64e1

func (c Service) CheckAvailableParameters(ctx context.Context, params func(Query) error) (Query_Result_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Query_Result_Future{Future: ans.Future()}, release
}
func (c Service) GetAllAvailableParameters(ctx context.Context, params func(Service_getAllAvailableParameters_Params) error) (Service_getAllAvailableParameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAllAvailableParameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getAllAvailableParameters_Results_Future{Future: ans.Future()}, release
}
func (c Service) ClosestProfilesAt(ctx context.Context, params func(Service_closestProfilesAt_Params) error) (Service_closestProfilesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "closestProfilesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_closestProfilesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_closestProfilesAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) StreamAllProfiles(ctx context.Context, params func(Query) error) (Service_streamAllProfiles_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      3,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "streamAllProfiles",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_streamAllProfiles_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	CheckAvailableParameters(context.Context, Service_checkAvailableParameters) error

	GetAllAvailableParameters(context.Context, Service_getAllAvailableParameters) error

	ClosestProfilesAt(context.Context, Service_closestProfilesAt) error

	StreamAllProfiles(context.Context, Service_streamAllProfiles) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CheckAvailableParameters(ctx, Service_checkAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAllAvailableParameters(ctx, Service_getAllAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "closestProfilesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestProfilesAt(ctx, Service_closestProfilesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      3,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "streamAllProfiles",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamAllProfiles(ctx, Service_streamAllProfiles{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_checkAvailableParameters holds the state for a server call to Service.checkAvailableParameters.
// See server.Call for documentation.
type Service_checkAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_checkAvailableParameters) Args() Query {
	return Query{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_checkAvailableParameters) AllocResults() (Query_Result, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{Struct: r}, err
}

// Service_getAllAvailableParameters holds the state for a server call to Service.getAllAvailableParameters.
// See server.Call for documentation.
type Service_getAllAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAllAvailableParameters) Args() Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getAllAvailableParameters) AllocResults() (Service_getAllAvailableParameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{Struct: r}, err
}

// Service_closestProfilesAt holds the state for a server call to Service.closestProfilesAt.
// See server.Call for documentation.
type Service_closestProfilesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_closestProfilesAt) Args() Service_closestProfilesAt_Params {
	return Service_closestProfilesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_closestProfilesAt) AllocResults() (Service_closestProfilesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_closestProfilesAt_Results{Struct: r}, err
}

// Service_streamAllProfiles holds the state for a server call to Service.streamAllProfiles.
// See server.Call for documentation.
type Service_streamAllProfiles struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_streamAllProfiles) Args() Query {
	return Query{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_streamAllProfiles) AllocResults() (Service_streamAllProfiles_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_streamAllProfiles_Results{Struct: r}, err
}

type Service_Stream struct{ Client *capnp.Client }

// Service_Stream_TypeID is the unique identifier for the type Service_Stream.
const Service_Stream_TypeID = 0xf4f8ab568ffbc939

func (c Service_Stream) NextProfiles(ctx context.Context, params func(Service_Stream_nextProfiles_Params) error) (Service_Stream_nextProfiles_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf4f8ab568ffbc939,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service.Stream",
			MethodName:    "nextProfiles",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_Stream_nextProfiles_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_Stream_nextProfiles_Results_Future{Future: ans.Future()}, release
}

func (c Service_Stream) AddRef() Service_Stream {
	return Service_Stream{
		Client: c.Client.AddRef(),
	}
}

func (c Service_Stream) Release() {
	c.Client.Release()
}

// A Service_Stream_Server is a Service_Stream with a local implementation.
type Service_Stream_Server interface {
	NextProfiles(context.Context, Service_Stream_nextProfiles) error
}

// Service_Stream_NewServer creates a new Server from an implementation of Service_Stream_Server.
func Service_Stream_NewServer(s Service_Stream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Stream_Methods(nil, s), s, c, policy)
}

// Service_Stream_ServerToClient creates a new Client from an implementation of Service_Stream_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_Stream_ServerToClient(s Service_Stream_Server, policy *server.Policy) Service_Stream {
	return Service_Stream{Client: capnp.NewClient(Service_Stream_NewServer(s, policy))}
}

// Service_Stream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Stream_Methods(methods []server.Method, s Service_Stream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf4f8ab568ffbc939,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service.Stream",
			MethodName:    "nextProfiles",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextProfiles(ctx, Service_Stream_nextProfiles{call})
		},
	})

	return methods
}

// Service_Stream_nextProfiles holds the state for a server call to Service_Stream.nextProfiles.
// See server.Call for documentation.
type Service_Stream_nextProfiles struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_Stream_nextProfiles) Args() Service_Stream_nextProfiles_Params {
	return Service_Stream_nextProfiles_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_Stream_nextProfiles) AllocResults() (Service_Stream_nextProfiles_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_Stream_nextProfiles_Results{Struct: r}, err
}

type Service_Stream_nextProfiles_Params struct{ capnp.Struct }

// Service_Stream_nextProfiles_Params_TypeID is the unique identifier for the type Service_Stream_nextProfiles_Params.
const Service_Stream_nextProfiles_Params_TypeID = 0x81da248df613bc05

func NewService_Stream_nextProfiles_Params(s *capnp.Segment) (Service_Stream_nextProfiles_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_Stream_nextProfiles_Params{st}, err
}

func NewRootService_Stream_nextProfiles_Params(s *capnp.Segment) (Service_Stream_nextProfiles_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_Stream_nextProfiles_Params{st}, err
}

func ReadRootService_Stream_nextProfiles_Params(msg *capnp.Message) (Service_Stream_nextProfiles_Params, error) {
	root, err := msg.Root()
	return Service_Stream_nextProfiles_Params{root.Struct()}, err
}

func (s Service_Stream_nextProfiles_Params) String() string {
	str, _ := text.Marshal(0x81da248df613bc05, s.Struct)
	return str
}

func (s Service_Stream_nextProfiles_Params) MaxCount() int64 {
	return int64(s.Struct.Uint64(0) ^ 100)
}

func (s Service_Stream_nextProfiles_Params) SetMaxCount(v int64) {
	s.Struct.SetUint64(0, uint64(v)^100)
}

// Service_Stream_nextProfiles_Params_List is a list of Service_Stream_nextProfiles_Params.
type Service_Stream_nextProfiles_Params_List struct{ capnp.List }

// NewService_Stream_nextProfiles_Params creates a new list of Service_Stream_nextProfiles_Params.
func NewService_Stream_nextProfiles_Params_List(s *capnp.Segment, sz int32) (Service_Stream_nextProfiles_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Service_Stream_nextProfiles_Params_List{l}, err
}

func (s Service_Stream_nextProfiles_Params_List) At(i int) Service_Stream_nextProfiles_Params {
	return Service_Stream_nextProfiles_Params{s.List.Struct(i)}
}

func (s Service_Stream_nextProfiles_Params_List) Set(i int, v Service_Stream_nextProfiles_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_Stream_nextProfiles_Params_List) String() string {
	str, _ := text.MarshalList(0x81da248df613bc05, s.List)
	return str
}

// Service_Stream_nextProfiles_Params_Future is a wrapper for a Service_Stream_nextProfiles_Params promised by a client call.
type Service_Stream_nextProfiles_Params_Future struct{ *capnp.Future }

func (p Service_Stream_nextProfiles_Params_Future) Struct() (Service_Stream_nextProfiles_Params, error) {
	s, err := p.Future.Struct()
	return Service_Stream_nextProfiles_Params{s}, err
}

type Service_Stream_nextProfiles_Results struct{ capnp.Struct }

// Service_Stream_nextProfiles_Results_TypeID is the unique identifier for the type Service_Stream_nextProfiles_Results.
const Service_Stream_nextProfiles_Results_TypeID = 0x9f7ae4c2748bddf8

func NewService_Stream_nextProfiles_Results(s *capnp.Segment) (Service_Stream_nextProfiles_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_Stream_nextProfiles_Results{st}, err
}

func NewRootService_Stream_nextProfiles_Results(s *capnp.Segment) (Service_Stream_nextProfiles_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_Stream_nextProfiles_Results{st}, err
}

func ReadRootService_Stream_nextProfiles_Results(msg *capnp.Message) (Service_Stream_nextProfiles_Results, error) {
	root, err := msg.Root()
	return Service_Stream_nextProfiles_Results{root.Struct()}, err
}

func (s Service_Stream_nextProfiles_Results) String() string {
	str, _ := text.Marshal(0x9f7ae4c2748bddf8, s.Struct)
	return str
}

func (s Service_Stream_nextProfiles_Results) Profiles() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Service_Stream_nextProfiles_Results) HasProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_Stream_nextProfiles_Results) SetProfiles(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Service_Stream_nextProfiles_Results) NewProfiles(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_Stream_nextProfiles_Results_List is a list of Service_Stream_nextProfiles_Results.
type Service_Stream_nextProfiles_Results_List struct{ capnp.List }

// NewService_Stream_nextProfiles_Results creates a new list of Service_Stream_nextProfiles_Results.
func NewService_Stream_nextProfiles_Results_List(s *capnp.Segment, sz int32) (Service_Stream_nextProfiles_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_Stream_nextProfiles_Results_List{l}, err
}

func (s Service_Stream_nextProfiles_Results_List) At(i int) Service_Stream_nextProfiles_Results {
	return Service_Stream_nextProfiles_Results{s.List.Struct(i)}
}

func (s Service_Stream_nextProfiles_Results_List) Set(i int, v Service_Stream_nextProfiles_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_Stream_nextProfiles_Results_List) String() string {
	str, _ := text.MarshalList(0x9f7ae4c2748bddf8, s.List)
	return str
}

// Service_Stream_nextProfiles_Results_Future is a wrapper for a Service_Stream_nextProfiles_Results promised by a client call.
type Service_Stream_nextProfiles_Results_Future struct{ *capnp.Future }

func (p Service_Stream_nextProfiles_Results_Future) Struct() (Service_Stream_nextProfiles_Results, error) {
	s, err := p.Future.Struct()
	return Service_Stream_nextProfiles_Results{s}, err
}

type Service_getAllAvailableParameters_Params struct{ capnp.Struct }

// Service_getAllAvailableParameters_Params_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Params.
const Service_getAllAvailableParameters_Params_TypeID = 0x8dec5fd8eb3e7c27

func NewService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func NewRootService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func ReadRootService_getAllAvailableParameters_Params(msg *capnp.Message) (Service_getAllAvailableParameters_Params, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Params{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Params) String() string {
	str, _ := text.Marshal(0x8dec5fd8eb3e7c27, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Params) OnlyRawData() bool {
	return s.Struct.Bit(0)
}

func (s Service_getAllAvailableParameters_Params) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_getAllAvailableParameters_Params_List is a list of Service_getAllAvailableParameters_Params.
type Service_getAllAvailableParameters_Params_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Params creates a new list of Service_getAllAvailableParameters_Params.
func NewService_getAllAvailableParameters_Params_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Service_getAllAvailableParameters_Params_List{l}, err
}

func (s Service_getAllAvailableParameters_Params_List) At(i int) Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Params_List) Set(i int, v Service_getAllAvailableParameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Params_List) String() string {
	str, _ := text.MarshalList(0x8dec5fd8eb3e7c27, s.List)
	return str
}

// Service_getAllAvailableParameters_Params_Future is a wrapper for a Service_getAllAvailableParameters_Params promised by a client call.
type Service_getAllAvailableParameters_Params_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Params_Future) Struct() (Service_getAllAvailableParameters_Params, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Params{s}, err
}

type Service_getAllAvailableParameters_Results struct{ capnp.Struct }

// Service_getAllAvailableParameters_Results_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Results.
const Service_getAllAvailableParameters_Results_TypeID = 0x98a2bf8e6ad97ee3

func NewService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func NewRootService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func ReadRootService_getAllAvailableParameters_Results(msg *capnp.Message) (Service_getAllAvailableParameters_Results, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Results{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Results) String() string {
	str, _ := text.Marshal(0x98a2bf8e6ad97ee3, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Results) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getAllAvailableParameters_Results) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Service_getAllAvailableParameters_Results) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_getAllAvailableParameters_Results) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Service_getAllAvailableParameters_Results_List is a list of Service_getAllAvailableParameters_Results.
type Service_getAllAvailableParameters_Results_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Results creates a new list of Service_getAllAvailableParameters_Results.
func NewService_getAllAvailableParameters_Results_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_getAllAvailableParameters_Results_List{l}, err
}

func (s Service_getAllAvailableParameters_Results_List) At(i int) Service_getAllAvailableParameters_Results {
	return Service_getAllAvailableParameters_Results{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Results_List) Set(i int, v Service_getAllAvailableParameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Results_List) String() string {
	str, _ := text.MarshalList(0x98a2bf8e6ad97ee3, s.List)
	return str
}

// Service_getAllAvailableParameters_Results_Future is a wrapper for a Service_getAllAvailableParameters_Results promised by a client call.
type Service_getAllAvailableParameters_Results_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Results_Future) Struct() (Service_getAllAvailableParameters_Results, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Results{s}, err
}

type Service_closestProfilesAt_Params struct{ capnp.Struct }

// Service_closestProfilesAt_Params_TypeID is the unique identifier for the type Service_closestProfilesAt_Params.
const Service_closestProfilesAt_Params_TypeID = 0xdb97e739bf9693c1

func NewService_closestProfilesAt_Params(s *capnp.Segment) (Service_closestProfilesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_closestProfilesAt_Params{st}, err
}

func NewRootService_closestProfilesAt_Params(s *capnp.Segment) (Service_closestProfilesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_closestProfilesAt_Params{st}, err
}

func ReadRootService_closestProfilesAt_Params(msg *capnp.Message) (Service_closestProfilesAt_Params, error) {
	root, err := msg.Root()
	return Service_closestProfilesAt_Params{root.Struct()}, err
}

func (s Service_closestProfilesAt_Params) String() string {
	str, _ := text.Marshal(0xdb97e739bf9693c1, s.Struct)
	return str
}

func (s Service_closestProfilesAt_Params) Coord() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Service_closestProfilesAt_Params) HasCoord() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_closestProfilesAt_Params) SetCoord(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCoord sets the coord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Service_closestProfilesAt_Params) NewCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Service_closestProfilesAt_Params) Query() (Query, error) {
	p, err := s.Struct.Ptr(1)
	return Query{Struct: p.Struct()}, err
}

func (s Service_closestProfilesAt_Params) HasQuery() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_closestProfilesAt_Params) SetQuery(v Query) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Query struct, preferring placement in s's segment.
func (s Service_closestProfilesAt_Params) NewQuery() (Query, error) {
	ss, err := NewQuery(s.Struct.Segment())
	if err != nil {
		return Query{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Service_closestProfilesAt_Params_List is a list of Service_closestProfilesAt_Params.
type Service_closestProfilesAt_Params_List struct{ capnp.List }

// NewService_closestProfilesAt_Params creates a new list of Service_closestProfilesAt_Params.
func NewService_closestProfilesAt_Params_List(s *capnp.Segment, sz int32) (Service_closestProfilesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_closestProfilesAt_Params_List{l}, err
}

func (s Service_closestProfilesAt_Params_List) At(i int) Service_closestProfilesAt_Params {
	return Service_closestProfilesAt_Params{s.List.Struct(i)}
}

func (s Service_closestProfilesAt_Params_List) Set(i int, v Service_closestProfilesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_closestProfilesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xdb97e739bf9693c1, s.List)
	return str
}

// Service_closestProfilesAt_Params_Future is a wrapper for a Service_closestProfilesAt_Params promised by a client call.
type Service_closestProfilesAt_Params_Future struct{ *capnp.Future }

func (p Service_closestProfilesAt_Params_Future) Struct() (Service_closestProfilesAt_Params, error) {
	s, err := p.Future.Struct()
	return Service_closestProfilesAt_Params{s}, err
}

func (p Service_closestProfilesAt_Params_Future) Coord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Service_closestProfilesAt_Params_Future) Query() Query_Future {
	return Query_Future{Future: p.Future.Field(1, nil)}
}

type Service_closestProfilesAt_Results struct{ capnp.Struct }

// Service_closestProfilesAt_Results_TypeID is the unique identifier for the type Service_closestProfilesAt_Results.
const Service_closestProfilesAt_Results_TypeID = 0xa0915e668c9317ad

func NewService_closestProfilesAt_Results(s *capnp.Segment) (Service_closestProfilesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_closestProfilesAt_Results{st}, err
}

func NewRootService_closestProfilesAt_Results(s *capnp.Segment) (Service_closestProfilesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_closestProfilesAt_Results{st}, err
}

func ReadRootService_closestProfilesAt_Results(msg *capnp.Message) (Service_closestProfilesAt_Results, error) {
	root, err := msg.Root()
	return Service_closestProfilesAt_Results{root.Struct()}, err
}

func (s Service_closestProfilesAt_Results) String() string {
	str, _ := text.Marshal(0xa0915e668c9317ad, s.Struct)
	return str
}

func (s Service_closestProfilesAt_Results) Profiles() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Service_closestProfilesAt_Results) HasProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_closestProfilesAt_Results) SetProfiles(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Service_closestProfilesAt_Results) NewProfiles(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_closestProfilesAt_Results_List is a list of Service_closestProfilesAt_Results.
type Service_closestProfilesAt_Results_List struct{ capnp.List }

// NewService_closestProfilesAt_Results creates a new list of Service_closestProfilesAt_Results.
func NewService_closestProfilesAt_Results_List(s *capnp.Segment, sz int32) (Service_closestProfilesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_closestProfilesAt_Results_List{l}, err
}

func (s Service_closestProfilesAt_Results_List) At(i int) Service_closestProfilesAt_Results {
	return Service_closestProfilesAt_Results{s.List.Struct(i)}
}

func (s Service_closestProfilesAt_Results_List) Set(i int, v Service_closestProfilesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_closestProfilesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xa0915e668c9317ad, s.List)
	return str
}

// Service_closestProfilesAt_Results_Future is a wrapper for a Service_closestProfilesAt_Results promised by a client call.
type Service_closestProfilesAt_Results_Future struct{ *capnp.Future }

func (p Service_closestProfilesAt_Results_Future) Struct() (Service_closestProfilesAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_closestProfilesAt_Results{s}, err
}

type Service_streamAllProfiles_Results struct{ capnp.Struct }

// Service_streamAllProfiles_Results_TypeID is the unique identifier for the type Service_streamAllProfiles_Results.
const Service_streamAllProfiles_Results_TypeID = 0xd1a74147c92b7957

func NewService_streamAllProfiles_Results(s *capnp.Segment) (Service_streamAllProfiles_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_streamAllProfiles_Results{st}, err
}

func NewRootService_streamAllProfiles_Results(s *capnp.Segment) (Service_streamAllProfiles_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_streamAllProfiles_Results{st}, err
}

func ReadRootService_streamAllProfiles_Results(msg *capnp.Message) (Service_streamAllProfiles_Results, error) {
	root, err := msg.Root()
	return Service_streamAllProfiles_Results{root.Struct()}, err
}

func (s Service_streamAllProfiles_Results) String() string {
	str, _ := text.Marshal(0xd1a74147c92b7957, s.Struct)
	return str
}

func (s Service_streamAllProfiles_Results) AllProfiles() Service_Stream {
	p, _ := s.Struct.Ptr(0)
	return Service_Stream{Client: p.Interface().Client()}
}

func (s Service_streamAllProfiles_Results) HasAllProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_streamAllProfiles_Results) SetAllProfiles(v Service_Stream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Service_streamAllProfiles_Results_List is a list of Service_streamAllProfiles_Results.
type Service_streamAllProfiles_Results_List struct{ capnp.List }

// NewService_streamAllProfiles_Results creates a new list of Service_streamAllProfiles_Results.
func NewService_streamAllProfiles_Results_List(s *capnp.Segment, sz int32) (Service_streamAllProfiles_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_streamAllProfiles_Results_List{l}, err
}

func (s Service_streamAllProfiles_Results_List) At(i int) Service_streamAllProfiles_Results {
	return Service_streamAllProfiles_Results{s.List.Struct(i)}
}

func (s Service_streamAllProfiles_Results_List) Set(i int, v Service_streamAllProfiles_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_streamAllProfiles_Results_List) String() string {
	str, _ := text.MarshalList(0xd1a74147c92b7957, s.List)
	return str
}

// Service_streamAllProfiles_Results_Future is a wrapper for a Service_streamAllProfiles_Results promised by a client call.
type Service_streamAllProfiles_Results_Future struct{ *capnp.Future }

func (p Service_streamAllProfiles_Results_Future) Struct() (Service_streamAllProfiles_Results, error) {
	s, err := p.Future.Struct()
	return Service_streamAllProfiles_Results{s}, err
}

func (p Service_streamAllProfiles_Results_Future) AllProfiles() Service_Stream {
	return Service_Stream{Client: p.Future.Field(0, nil).Client()}
}

const schema_ff3f350f11891951 = "x\xda\xacW\x7fl\x1cW\xf1\x9fy{\xce\xda9\xfb" +
	"\xd6\xef\xbb\x96\xf2mBuP\\\xa5\x0d\xaa\x95\x1f\x04" +
	"dK\xe5|\xb1C~\x90\xb4\xf7\\\xda\x90\xd2@\x9f" +
	"\xef\x9e\xcd:{\xbb\xe7\xddwq.j\x9aV\xaa\xd4" +
	"$$\xb4nZ\x08Q\x0biQ\x15\x0c\xb2J+@" +
	"\x80\xa8\xa2\x18\x81\xfa\x83\x0a%R%\x926B\x86V" +
	"QE\xff\x00\xa9B\x11mx\xe8\xed\xdd\xdem\xec\x80" +
	"\x8a\x94\xbf\xf6nwvf>\x9f7\xf3\x99\xd9\xd5\xbf" +
	"I\x0d\x925mS\x19\x00\xf6\xc3\xb6%\xaa\xed\xd7\xf6" +
	"?\x8e\xf6^x\x18\xd8rD\x80\x94\x09\xb0\xeeSf" +
	"\x80\x80\xf6mf\x0eP\xb1\xe9\x15W.\x7fz\xd5Q" +
	"\xa0v\xfc\x9c\x99k\x11Rj\xe5\x03_\xf8\xeb\x1f\xbf" +
	"\xfe\xfeQ`v\xf3\xd5~\xf39\xfd\xea\x96\xe8\xd5\x9f" +
	"L\xbe\xf5\x87\x15\xbf\xf8\xe0\x09`\x14Q\xddya\xe0" +
	"\xab\x7f\x1b\xfc\xe2q\xd8\x88f\x0a\xd1.\x9b\xe7\xec\x9a" +
	"\xa9_\xaa\x9aY\x84\x84\x01K#*v\xc3!j\xad" +
	"\xcf)h#&\x80}\xa8\xfd\xb0=\xdd\xbe\x0c\xc0~" +
	"\xa6\xfd\x05@\xf5\x97\x07\xcfO|\xeb\xf4s\xc7\xebi" +
	"E6\xeb\xb6w\xfcH\x07\xdf\xd51\x05\xa8\xc6o~" +
	"\xe3w\xf3\xcb\xfb\xbf\x074MZ\xce\x00\xed\xf9\x8e9" +
	"\xfb\xbd\x0em\xffn\xc7%\x1d\xf7\xf2\xc5o\xca\xb9w" +
	"\xf6}\x1f\xe8r\xed\x0a#\x88\xe9}\x91\xab\xb4\xc61" +
	"\xbb\xec\xd8\x91\xb1\xafM\x9fl\xc4\x8a\x0c\xa6\xd3\x13\xda" +
	"\xe0\x99\xc8`\xbe\xf4\xf6\xca\x9eS'N\x02M\x1bW" +
	"\xc5:\x9b>a\x9fO/\x03X7\x9f6\xd1\x9e\xe9" +
	"\\\x09\xa0\xba^\xbb\xe9\xc1v1\xf8\xf25q>\xdb" +
	"y\xd8\x9e\xe9\xd48_\xec\xd48sO\x1e\x9c5W" +
	"\xdcq\xba\xcea\xf3\xd5\xbaq\xb5k\xce\xde\xdf\xa5\x7f" +
	"\xd5\xba\xb4\xf1\xd2\x9fr\xf5\xca\x0f\xde\x99[\x84\xb9?" +
	"s\xd8\xceg\xb4\xe1\xed\x99\xcf\x03\xaa\x1d\xb5\xcf\xbc\xba" +
	")\x7f\xeal\x12Q>\x13!\xda\x9e\xd1\x88\xce\x1c\xfb" +
	"\xf6\xe9\xfeK\xdfy+I\xefdfT\x1b\xec\xcfh" +
	"z\x1f\x7ft\xe0\xe0'N\x7f\xe9O\x0bAhW\xf6" +
	"\xf9\xcc\xaf\xec\xf9(\xdc\xc5\xc8\xf8\xcf\xb2(\x9f\xfay" +
	"\xeaR\xab\x86lf\xfd\x13R\xaa\xff\xd5\x0f\x1f\xbb\xe7" +
	"\xc7\x97?\x00j\x1b-\x16\x01\xed\xf5\xd69;oE" +
	"\x09[\x9blG\xffR\xb7>\x9d?\xf6\xfc\xdc\xb8Z" +
	"\xc42\xb3N\xd8;#\xe3\xbb\xadG\xed\x19k%\\" +
	"Q\xa1\xef\xb8}E^Iy\x95\x81\xbbD\xb0\xc7)" +
	"\x8a\xbe\xbbd x\xb9\xcf\x13{e!\xf0\xc7\x1cW" +
	"\x84\xbd\x85,\x0fx9d)#\x05\x90BD\xda\xb5" +
	"\x15\x80u\x1a\xc8\xfe\x9f\xa0*\xf3\xbdC~\xd5\x93\x00" +
	"\x80m@\xb0\x0dK\x00M\xe7\x86W\x19hx\xea\x1b" +
	"\x17\xfe6\xbf\xc8\xa5\xe3{\xb1\xd3\xa6][\"\x89q" +
	"!\xf3\xae\x9b\xdf\xc3\x1d\x97\x8f\xba\xa2\xa0-\x85\x14A" +
	"\xd8[\xe0\x81\x99H\x05\x80v\x8d&R\xf1=\xb76" +
	"\xc2\xa7\x86\xc1\xe4\x92#\x02A]\xbcq\x08\xe2U\x06" +
	"\xb6\xf1\x9a\x08\xfa\x0a\x81_\x11\x81\xc4Z\x01\x91\xf54" +
	"}\xed_\x05\xc0\xf6\x1a\xc8\x1e!x#*\x85=\xba" +
	"i\xe9\xc3\x1a\xedC\x06\xb2#\x04o$\xffR\x9f\xec" +
	"A\x02@\x0f\x0d\x00\xb0G\x0cd\x8f\x13\xec2\xae\xa8" +
	"\x1e4\x00\xe8Q\xed\xe3\xa0\x81\xecI\x82]\xa9\x8fT" +
	"\x0f\xa6\x00\xe8\xf4Z\x00v\xc4@v\x9c\xa0\xe5\xf1\xb2" +
	"@\xab\xd5}\x80h\x01\xaa\xb1uk\xef\xe1nUh" +
	"\x1e\x97\x02\xc1\xa5\x80\xb9\xd1\xe8N\x8c\xc4\x92\xb5\x8a\xc0" +
	"N \xd8\x09\x98\xadz\xa1\x90\xb0\xa4\x09\x0fcx\x00" +
	",\x85\x09i\xa1\xb8U5\x10\xd7 b+\x06\xbc\xf1" +
	"^\x006l \xbb\x9f 6\xd0\xee\xd2\x00\xbeb " +
	"+\x11\xa4\x04\xebX\xb9f\xf9~\x03\x99KPU\xea" +
	"\xbe\x1c0D\x88\x19\xc0\x82\x81\xd8\xdd\x0a\x07\xa8oZ" +
	"\xa1\xb3O\xc48TI\x84\xc5\xc0\xa9H0\x1d\xdf\x8b" +
	"\x11\xfc\x8fg?\"B\xab\xea\xca\x90\xb57\xf3\xbfu" +
	"\x04\x80\xddb \x1b&Hc\x00y}\\\x83\x06\xb2" +
	"\xfb\xa2\xe2\xf4J\\\xfa\x01`-N\xf5j\xe63\x80" +
	"\xca\xaf\xe8\x92\xe4\xaef\xfe?\x1a%\xab(f\xf3\x0e" +
	"^\x16\xa0k\xa8\x10\xb1\xf4\xdeVmL\xdf]\x05\x80" +
	"\x84^\xd4\x17\x83\xbe\xa9/)\xfa\xc6r\xdd\x1e\xf4\xb7" +
	"\xdad\x09=\x13\x00\xa0I_\xd6\x97v\xfa\xcbQ\x00" +
	"\xec\xa0?\xbbW\x9f<}Q\xdfL\xd3\xd9\x97\x00\xb0" +
	"\x93\xce\xea\x9b]tfB\xe7\xb6\xe6\xf9\xa5\x08\x80\x16" +
	"\x9d\xd5n\xba\xe9\xcc\x06\x00\xa4\xf4Y}\xf9?\xfa]" +
	"\xfd\xa2M\x9f\x9ah\xb4\xdf\x97k\x15]LV\xc8\xbd" +
	"\x92Uty\xcd\x0a\x1dW\x1a\x95\xcd*,\x0aWH" +
	"\xdf\x03\x00\xe5\x07\xe3\xdcs\x8aC\x90\xe5\xc1\xa8\xef\xc5" +
	"\xff\xb7C\x96K)\x025Zuw\x0f\x0b/\x04\xd3" +
	"\x915\x15\xf0)\xfd\xc7\x01C\xd6\xd4\x98#\xdc\xd2\x10" +
	"\xaf@\x96\x17\xf5\xc3\x8a\x08\xca\xdc\x13\x1e\xca\x1d\x8e+" +
	"\x1do<[\xf0\x1dO\xaa\x90\xcbj\xc0u\xc1\xf8^" +
	"\x94\xd9v\xdf\x09\xc1\x92\xd5@D\x7fwp)\x8c`" +
	"\xc8\xf7J\xd5\xa2t\xf68\xb26\xe4\x8b\xb11\xa7\xe8" +
	"\x08-+\x8a\x97\xcb\xbe\xe7T\xcb\x00p\xc0sd\xc0" +
	"\xa58P\xf4F\xb4\x90(\xc7\xdb\x14\xf8U\xaf\x04\xd9" +
	")\xae\xd3u\xca\x15\xe1\x09\x19\x80\xa5\xcb\xe7ck\xdc" +
	"HN\x84Qq%\x94%\x16\xb9[\xea5\x1f\x19&" +
	"J\x84\xb6\xd4vA\x89$\x83\x15]?\x14a3P" +
	"^\xb6\xea\xf8z\x84\xc28\x94Q\x14Q\xd7\xb7\xc6\x05" +
	"\x0e\xe4\xeaHY\xb7\xd1\x96\x98\xa9\x18\xcfK:\xf9\x1a" +
	"\x10:i\"6\xf7\x14\x8cw\x06*\xce\x01\xa1\xc2D" +
	"\xd2\x9cs\x18\xcfx\xba\xf3\x09 \xf4n\x13\x8d\x96\xcf" +
	"xZ\xd2-\xfa\xd9FS\x15\xbf!\x8a\xbb\xf3{8" +
	"Y\xd8\xc7\x00\x83\xa8\xe2.'\x0b\xdb\x1c\xc3AT1" +
	"g\x18\x93\x86r\x10U\x18\x81\xc9\xbb\xe86\xc8\xd4\xb6" +
	"\xac\x1dQ\xbd\xb9\xf9\xe9\x9d\xaf\x9f}\xe1%]\xce\xe2" +
	"\xf5\xcf\xbd}\xf2\xc2\xa93\x90\x98A\x9a$V\x15A" +
	"\xad\xa1\x8c\xcd\x85As4\x12\x1d|R\x14GZ\xa2" +
	"\xd8\x14\x95]\xfa\x84\xee3\x90\xed%\x88\xa4\x07\x09\"" +
	"\xadjQ\x94\x06\xb2\x87\xae\xab\xd0,\x1abm\x8b\xa6" +
	"X\x04\xa6\xaf\x9ey\xa4?\x89\xec\x07\x1a\xea\xb7\xad%" +
	"\xe9[4\xa2\xcd\x0b%}kC\xd2\x1f \x98\x1b\xe3" +
	"\x8e+J\xcd\x89y\xfdU3\xaa\xd3\xba \xe9|\xdb" +
	"\xa3\x14\xe8\x86H/;n\x028P\xf5v{\xfe\x94" +
	"g\xee\xe6\xeb\xaf\xd9G\xf1\xe9\xbb\xad\x96\xbdF\x1f%" +
	"\x97\x01\xde\xb0\x05\xd3\x15!\xd2Vg\xe8\x98\x1f\xbb[" +
	"\xe3\x8d#1t\xf4,\xef5\x90\xadN\xd4\xc7mk" +
	"\x1b\x93\xe8\xb3\x04\xb3E\xdf\x0fJ\xd8\xad>|\xec\xf7" +
	"\xfd\xab?\xfa\xfb\xfb:b7`vR\x1f\x1bv\xb7" +
	"V\xd4\xfa\xfd\xabH\x8aB\xe7\\1\xcc%\x8f\x98j" +
	"\xc5\x1dh\xc4\x1dl\x9c,\"\xbd\xfdp\xeb\xb4s\xae" +
	"\x1e\xfe\x89\x89\xdc\xfcXh\x9cEE\x04E\xe1I\x8e" +
	"\xe3\xe2\xce\xb1| x}\xd18\xb3\xf4\x95\x0d\x8b\xe7" +
	"[\xb4\xb0\x95\xb8\xe4\xbd\xb9\xc2\xd5\x9b\x1aY(\xa5X" +
	"\xd6\x89\xa6\"\x91\x89\xbf\x950\xfeb\xa0t\x02\x08\xed" +
	"0U,\xb7`if\x07\xb1\x80\xd7\x00n\xb8\xa2\x0e" +
	"Z\xfb\x8aWb\x8c\x17i\xbaf\x15\x10z\xb3\x16\xac" +
	"\xf8\x93\x0bc\x8e\xe9\x0d\xa3@(5-\x9ds\xa40" +
	"\xf5]3\xda8\xfe\xbbN\xfc;\x00\x00\xff\xff2\xa8" +
	"\xf2`"

func init() {
	schemas.Register(schema_ff3f350f11891951,
		0x81da248df613bc05,
		0x8d2a23f8fd1b9151,
		0x8dec5fd8eb3e7c27,
		0x92f4b81bcfdb71b0,
		0x984640f05b3ada4f,
		0x98a2bf8e6ad97ee3,
		0x9e391ae1c6cd2567,
		0x9f7ae4c2748bddf8,
		0xa0915e668c9317ad,
		0xa09aa71427dc64e1,
		0xbd4065087e22ca0d,
		0xbf4e1b07ad88943f,
		0xc2e4a3c8ff61b40a,
		0xd1a74147c92b7957,
		0xdb97e739bf9693c1,
		0xdf4bbf1c883a8790,
		0xe704b695746374e2,
		0xf4f8ab568ffbc939,
		0xff67c2a593419c29)
}
