// Code generated by capnpc-go. DO NOT EDIT.

package soil

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type SType uint16

// SType_TypeID is the unique identifier for the type SType.
const SType_TypeID = 0xc2e4a3c8ff61b40a

// Values of SType.
const (
	SType_unknown SType = 0
	SType_ka5     SType = 1
)

// String returns the enum's constant name.
func (c SType) String() string {
	switch c {
	case SType_unknown:
		return "unknown"
	case SType_ka5:
		return "ka5"

	default:
		return ""
	}
}

// STypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func STypeFromString(c string) SType {
	switch c {
	case "unknown":
		return SType_unknown
	case "ka5":
		return SType_ka5

	default:
		return 0
	}
}

type SType_List struct{ capnp.List }

func NewSType_List(s *capnp.Segment, sz int32) (SType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SType_List{l.List}, err
}

func (l SType_List) At(i int) SType {
	ul := capnp.UInt16List{List: l.List}
	return SType(ul.At(i))
}

func (l SType_List) Set(i int, v SType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PropertyName uint16

// PropertyName_TypeID is the unique identifier for the type PropertyName.
const PropertyName_TypeID = 0x9e391ae1c6cd2567

// Values of PropertyName.
const (
	PropertyName_soilType                         PropertyName = 0
	PropertyName_sand                             PropertyName = 1
	PropertyName_clay                             PropertyName = 2
	PropertyName_silt                             PropertyName = 3
	PropertyName_pH                               PropertyName = 4
	PropertyName_sceleton                         PropertyName = 5
	PropertyName_organicCarbon                    PropertyName = 6
	PropertyName_organicMatter                    PropertyName = 7
	PropertyName_bulkDensity                      PropertyName = 8
	PropertyName_rawDensity                       PropertyName = 9
	PropertyName_fieldCapacity                    PropertyName = 10
	PropertyName_permanentWiltingPoint            PropertyName = 11
	PropertyName_saturation                       PropertyName = 12
	PropertyName_soilMoisture                     PropertyName = 13
	PropertyName_soilWaterConductivityCoefficient PropertyName = 14
	PropertyName_ammonium                         PropertyName = 15
	PropertyName_nitrate                          PropertyName = 16
	PropertyName_cnRatio                          PropertyName = 17
	PropertyName_inGroundwater                    PropertyName = 18
	PropertyName_impenetrable                     PropertyName = 19
)

// String returns the enum's constant name.
func (c PropertyName) String() string {
	switch c {
	case PropertyName_soilType:
		return "soilType"
	case PropertyName_sand:
		return "sand"
	case PropertyName_clay:
		return "clay"
	case PropertyName_silt:
		return "silt"
	case PropertyName_pH:
		return "pH"
	case PropertyName_sceleton:
		return "sceleton"
	case PropertyName_organicCarbon:
		return "organicCarbon"
	case PropertyName_organicMatter:
		return "organicMatter"
	case PropertyName_bulkDensity:
		return "bulkDensity"
	case PropertyName_rawDensity:
		return "rawDensity"
	case PropertyName_fieldCapacity:
		return "fieldCapacity"
	case PropertyName_permanentWiltingPoint:
		return "permanentWiltingPoint"
	case PropertyName_saturation:
		return "saturation"
	case PropertyName_soilMoisture:
		return "soilMoisture"
	case PropertyName_soilWaterConductivityCoefficient:
		return "soilWaterConductivityCoefficient"
	case PropertyName_ammonium:
		return "ammonium"
	case PropertyName_nitrate:
		return "nitrate"
	case PropertyName_cnRatio:
		return "cnRatio"
	case PropertyName_inGroundwater:
		return "inGroundwater"
	case PropertyName_impenetrable:
		return "impenetrable"

	default:
		return ""
	}
}

// PropertyNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropertyNameFromString(c string) PropertyName {
	switch c {
	case "soilType":
		return PropertyName_soilType
	case "sand":
		return PropertyName_sand
	case "clay":
		return PropertyName_clay
	case "silt":
		return PropertyName_silt
	case "pH":
		return PropertyName_pH
	case "sceleton":
		return PropertyName_sceleton
	case "organicCarbon":
		return PropertyName_organicCarbon
	case "organicMatter":
		return PropertyName_organicMatter
	case "bulkDensity":
		return PropertyName_bulkDensity
	case "rawDensity":
		return PropertyName_rawDensity
	case "fieldCapacity":
		return PropertyName_fieldCapacity
	case "permanentWiltingPoint":
		return PropertyName_permanentWiltingPoint
	case "saturation":
		return PropertyName_saturation
	case "soilMoisture":
		return PropertyName_soilMoisture
	case "soilWaterConductivityCoefficient":
		return PropertyName_soilWaterConductivityCoefficient
	case "ammonium":
		return PropertyName_ammonium
	case "nitrate":
		return PropertyName_nitrate
	case "cnRatio":
		return PropertyName_cnRatio
	case "inGroundwater":
		return PropertyName_inGroundwater
	case "impenetrable":
		return PropertyName_impenetrable

	default:
		return 0
	}
}

type PropertyName_List struct{ capnp.List }

func NewPropertyName_List(s *capnp.Segment, sz int32) (PropertyName_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PropertyName_List{l.List}, err
}

func (l PropertyName_List) At(i int) PropertyName {
	ul := capnp.UInt16List{List: l.List}
	return PropertyName(ul.At(i))
}

func (l PropertyName_List) Set(i int, v PropertyName) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Layer struct{ capnp.Struct }

// Layer_TypeID is the unique identifier for the type Layer.
const Layer_TypeID = 0x984640f05b3ada4f

func NewLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func NewRootLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func ReadRootLayer(msg *capnp.Message) (Layer, error) {
	root, err := msg.Root()
	return Layer{root.Struct()}, err
}

func (s Layer) String() string {
	str, _ := text.Marshal(0x984640f05b3ada4f, s.Struct)
	return str
}

func (s Layer) Properties() (Layer_Property_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_Property_List{List: p.List()}, err
}

func (s Layer) HasProperties() bool {
	return s.Struct.HasPtr(0)
}

func (s Layer) SetProperties(v Layer_Property_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Layer_Property_List, preferring placement in s's segment.
func (s Layer) NewProperties(n int32) (Layer_Property_List, error) {
	l, err := NewLayer_Property_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_Property_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Layer) Size() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Layer) SetSize(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Layer) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Layer) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s Layer) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Layer) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// Layer_List is a list of Layer.
type Layer_List struct{ capnp.List }

// NewLayer creates a new list of Layer.
func NewLayer_List(s *capnp.Segment, sz int32) (Layer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Layer_List{l}, err
}

func (s Layer_List) At(i int) Layer { return Layer{s.List.Struct(i)} }

func (s Layer_List) Set(i int, v Layer) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_List) String() string {
	str, _ := text.MarshalList(0x984640f05b3ada4f, s.List)
	return str
}

// Layer_Future is a wrapper for a Layer promised by a client call.
type Layer_Future struct{ *capnp.Future }

func (p Layer_Future) Struct() (Layer, error) {
	s, err := p.Future.Struct()
	return Layer{s}, err
}

type Layer_Property struct{ capnp.Struct }
type Layer_Property_Which uint16

const (
	Layer_Property_Which_f32Value Layer_Property_Which = 0
	Layer_Property_Which_bValue   Layer_Property_Which = 1
	Layer_Property_Which_type     Layer_Property_Which = 2
)

func (w Layer_Property_Which) String() string {
	const s = "f32ValuebValuetype"
	switch w {
	case Layer_Property_Which_f32Value:
		return s[0:8]
	case Layer_Property_Which_bValue:
		return s[8:14]
	case Layer_Property_Which_type:
		return s[14:18]

	}
	return "Layer_Property_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Layer_Property_TypeID is the unique identifier for the type Layer_Property.
const Layer_Property_TypeID = 0x92f4b81bcfdb71b0

func NewLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func NewRootLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func ReadRootLayer_Property(msg *capnp.Message) (Layer_Property, error) {
	root, err := msg.Root()
	return Layer_Property{root.Struct()}, err
}

func (s Layer_Property) String() string {
	str, _ := text.Marshal(0x92f4b81bcfdb71b0, s.Struct)
	return str
}

func (s Layer_Property) Which() Layer_Property_Which {
	return Layer_Property_Which(s.Struct.Uint16(2))
}
func (s Layer_Property) Name() PropertyName {
	return PropertyName(s.Struct.Uint16(0))
}

func (s Layer_Property) SetName(v PropertyName) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Layer_Property) F32Value() float32 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != f32Value")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Layer_Property) SetF32Value(v float32) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Layer_Property) BValue() bool {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bValue")
	}
	return s.Struct.Bit(32)
}

func (s Layer_Property) SetBValue(v bool) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetBit(32, v)
}

func (s Layer_Property) Type() (string, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != type")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Layer_Property) HasType() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Layer_Property) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Layer_Property) SetType(v string) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetText(0, v)
}

// Layer_Property_List is a list of Layer_Property.
type Layer_Property_List struct{ capnp.List }

// NewLayer_Property creates a new list of Layer_Property.
func NewLayer_Property_List(s *capnp.Segment, sz int32) (Layer_Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Layer_Property_List{l}, err
}

func (s Layer_Property_List) At(i int) Layer_Property { return Layer_Property{s.List.Struct(i)} }

func (s Layer_Property_List) Set(i int, v Layer_Property) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_Property_List) String() string {
	str, _ := text.MarshalList(0x92f4b81bcfdb71b0, s.List)
	return str
}

// Layer_Property_Future is a wrapper for a Layer_Property promised by a client call.
type Layer_Property_Future struct{ *capnp.Future }

func (p Layer_Property_Future) Struct() (Layer_Property, error) {
	s, err := p.Future.Struct()
	return Layer_Property{s}, err
}

type Query struct{ capnp.Struct }

// Query_TypeID is the unique identifier for the type Query.
const Query_TypeID = 0xbd4065087e22ca0d

func NewQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func NewRootQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func ReadRootQuery(msg *capnp.Message) (Query, error) {
	root, err := msg.Root()
	return Query{root.Struct()}, err
}

func (s Query) String() string {
	str, _ := text.Marshal(0xbd4065087e22ca0d, s.Struct)
	return str
}

func (s Query) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Query) OnlyRawData() bool {
	return !s.Struct.Bit(0)
}

func (s Query) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, !v)
}

// Query_List is a list of Query.
type Query_List struct{ capnp.List }

// NewQuery creates a new list of Query.
func NewQuery_List(s *capnp.Segment, sz int32) (Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_List{l}, err
}

func (s Query_List) At(i int) Query { return Query{s.List.Struct(i)} }

func (s Query_List) Set(i int, v Query) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_List) String() string {
	str, _ := text.MarshalList(0xbd4065087e22ca0d, s.List)
	return str
}

// Query_Future is a wrapper for a Query promised by a client call.
type Query_Future struct{ *capnp.Future }

func (p Query_Future) Struct() (Query, error) {
	s, err := p.Future.Struct()
	return Query{s}, err
}

type Query_Result struct{ capnp.Struct }

// Query_Result_TypeID is the unique identifier for the type Query_Result.
const Query_Result_TypeID = 0xbf4e1b07ad88943f

func NewQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func NewRootQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func ReadRootQuery_Result(msg *capnp.Message) (Query_Result, error) {
	root, err := msg.Root()
	return Query_Result{root.Struct()}, err
}

func (s Query_Result) String() string {
	str, _ := text.Marshal(0xbf4e1b07ad88943f, s.Struct)
	return str
}

func (s Query_Result) Failed() bool {
	return s.Struct.Bit(0)
}

func (s Query_Result) SetFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Query_Result) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query_Result) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query_Result) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query_Result) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Query_Result_List is a list of Query_Result.
type Query_Result_List struct{ capnp.List }

// NewQuery_Result creates a new list of Query_Result.
func NewQuery_Result_List(s *capnp.Segment, sz int32) (Query_Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_Result_List{l}, err
}

func (s Query_Result_List) At(i int) Query_Result { return Query_Result{s.List.Struct(i)} }

func (s Query_Result_List) Set(i int, v Query_Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_Result_List) String() string {
	str, _ := text.MarshalList(0xbf4e1b07ad88943f, s.List)
	return str
}

// Query_Result_Future is a wrapper for a Query_Result promised by a client call.
type Query_Result_Future struct{ *capnp.Future }

func (p Query_Result_Future) Struct() (Query_Result, error) {
	s, err := p.Future.Struct()
	return Query_Result{s}, err
}

type Profile struct{ capnp.Struct }

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0xff67c2a593419c29

func NewProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Profile{st}, err
}

func NewRootProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Profile{st}, err
}

func ReadRootProfile(msg *capnp.Message) (Profile, error) {
	root, err := msg.Root()
	return Profile{root.Struct()}, err
}

func (s Profile) String() string {
	str, _ := text.Marshal(0xff67c2a593419c29, s.Struct)
	return str
}

func (s Profile) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Profile) HasId() bool {
	return s.Struct.HasPtr(1)
}

func (s Profile) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Profile) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Profile) Layers() (Layer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_List{List: p.List()}, err
}

func (s Profile) HasLayers() bool {
	return s.Struct.HasPtr(0)
}

func (s Profile) SetLayers(v Layer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated Layer_List, preferring placement in s's segment.
func (s Profile) NewLayers(n int32) (Layer_List, error) {
	l, err := NewLayer_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Profile) PercentageOfArea() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x42c80000)
}

func (s Profile) SetPercentageOfArea(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x42c80000)
}

// Profile_List is a list of Profile.
type Profile_List struct{ capnp.List }

// NewProfile creates a new list of Profile.
func NewProfile_List(s *capnp.Segment, sz int32) (Profile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Profile_List{l}, err
}

func (s Profile_List) At(i int) Profile { return Profile{s.List.Struct(i)} }

func (s Profile_List) Set(i int, v Profile) error { return s.List.SetStruct(i, v.Struct) }

func (s Profile_List) String() string {
	str, _ := text.MarshalList(0xff67c2a593419c29, s.List)
	return str
}

// Profile_Future is a wrapper for a Profile promised by a client call.
type Profile_Future struct{ *capnp.Future }

func (p Profile_Future) Struct() (Profile, error) {
	s, err := p.Future.Struct()
	return Profile{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xa09aa71427dc64e1

func (c Service) CheckAvailableParameters(ctx context.Context, params func(Query) error) (Query_Result_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Query_Result_Future{Future: ans.Future()}, release
}
func (c Service) GetAllAvailableParameters(ctx context.Context, params func(Service_getAllAvailableParameters_Params) error) (Service_getAllAvailableParameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAllAvailableParameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getAllAvailableParameters_Results_Future{Future: ans.Future()}, release
}
func (c Service) ProfilesAt(ctx context.Context, params func(Service_profilesAt_Params) error) (Service_profilesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "profilesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_profilesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_profilesAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_save_Params) error) (persistence.Persistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_save_Results_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	CheckAvailableParameters(context.Context, Service_checkAvailableParameters) error

	GetAllAvailableParameters(context.Context, Service_getAllAvailableParameters) error

	ProfilesAt(context.Context, Service_profilesAt) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CheckAvailableParameters(ctx, Service_checkAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAllAvailableParameters(ctx, Service_getAllAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "profilesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ProfilesAt(ctx, Service_profilesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_checkAvailableParameters holds the state for a server call to Service.checkAvailableParameters.
// See server.Call for documentation.
type Service_checkAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_checkAvailableParameters) Args() Query {
	return Query{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_checkAvailableParameters) AllocResults() (Query_Result, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{Struct: r}, err
}

// Service_getAllAvailableParameters holds the state for a server call to Service.getAllAvailableParameters.
// See server.Call for documentation.
type Service_getAllAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAllAvailableParameters) Args() Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getAllAvailableParameters) AllocResults() (Service_getAllAvailableParameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{Struct: r}, err
}

// Service_profilesAt holds the state for a server call to Service.profilesAt.
// See server.Call for documentation.
type Service_profilesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_profilesAt) Args() Service_profilesAt_Params {
	return Service_profilesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_profilesAt) AllocResults() (Service_profilesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{Struct: r}, err
}

type Service_getAllAvailableParameters_Params struct{ capnp.Struct }

// Service_getAllAvailableParameters_Params_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Params.
const Service_getAllAvailableParameters_Params_TypeID = 0x8dec5fd8eb3e7c27

func NewService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func NewRootService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func ReadRootService_getAllAvailableParameters_Params(msg *capnp.Message) (Service_getAllAvailableParameters_Params, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Params{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Params) String() string {
	str, _ := text.Marshal(0x8dec5fd8eb3e7c27, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Params) OnlyRawData() bool {
	return s.Struct.Bit(0)
}

func (s Service_getAllAvailableParameters_Params) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_getAllAvailableParameters_Params_List is a list of Service_getAllAvailableParameters_Params.
type Service_getAllAvailableParameters_Params_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Params creates a new list of Service_getAllAvailableParameters_Params.
func NewService_getAllAvailableParameters_Params_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Service_getAllAvailableParameters_Params_List{l}, err
}

func (s Service_getAllAvailableParameters_Params_List) At(i int) Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Params_List) Set(i int, v Service_getAllAvailableParameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Params_List) String() string {
	str, _ := text.MarshalList(0x8dec5fd8eb3e7c27, s.List)
	return str
}

// Service_getAllAvailableParameters_Params_Future is a wrapper for a Service_getAllAvailableParameters_Params promised by a client call.
type Service_getAllAvailableParameters_Params_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Params_Future) Struct() (Service_getAllAvailableParameters_Params, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Params{s}, err
}

type Service_getAllAvailableParameters_Results struct{ capnp.Struct }

// Service_getAllAvailableParameters_Results_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Results.
const Service_getAllAvailableParameters_Results_TypeID = 0x98a2bf8e6ad97ee3

func NewService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func NewRootService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func ReadRootService_getAllAvailableParameters_Results(msg *capnp.Message) (Service_getAllAvailableParameters_Results, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Results{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Results) String() string {
	str, _ := text.Marshal(0x98a2bf8e6ad97ee3, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Results) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getAllAvailableParameters_Results) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Service_getAllAvailableParameters_Results) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_getAllAvailableParameters_Results) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Service_getAllAvailableParameters_Results_List is a list of Service_getAllAvailableParameters_Results.
type Service_getAllAvailableParameters_Results_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Results creates a new list of Service_getAllAvailableParameters_Results.
func NewService_getAllAvailableParameters_Results_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_getAllAvailableParameters_Results_List{l}, err
}

func (s Service_getAllAvailableParameters_Results_List) At(i int) Service_getAllAvailableParameters_Results {
	return Service_getAllAvailableParameters_Results{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Results_List) Set(i int, v Service_getAllAvailableParameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Results_List) String() string {
	str, _ := text.MarshalList(0x98a2bf8e6ad97ee3, s.List)
	return str
}

// Service_getAllAvailableParameters_Results_Future is a wrapper for a Service_getAllAvailableParameters_Results promised by a client call.
type Service_getAllAvailableParameters_Results_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Results_Future) Struct() (Service_getAllAvailableParameters_Results, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Results{s}, err
}

type Service_profilesAt_Params struct{ capnp.Struct }

// Service_profilesAt_Params_TypeID is the unique identifier for the type Service_profilesAt_Params.
const Service_profilesAt_Params_TypeID = 0xdb97e739bf9693c1

func NewService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func NewRootService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func ReadRootService_profilesAt_Params(msg *capnp.Message) (Service_profilesAt_Params, error) {
	root, err := msg.Root()
	return Service_profilesAt_Params{root.Struct()}, err
}

func (s Service_profilesAt_Params) String() string {
	str, _ := text.Marshal(0xdb97e739bf9693c1, s.Struct)
	return str
}

func (s Service_profilesAt_Params) Coord() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasCoord() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Params) SetCoord(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCoord sets the coord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Service_profilesAt_Params) Query() (Query, error) {
	p, err := s.Struct.Ptr(1)
	return Query{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasQuery() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_profilesAt_Params) SetQuery(v Query) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Query struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewQuery() (Query, error) {
	ss, err := NewQuery(s.Struct.Segment())
	if err != nil {
		return Query{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Service_profilesAt_Params_List is a list of Service_profilesAt_Params.
type Service_profilesAt_Params_List struct{ capnp.List }

// NewService_profilesAt_Params creates a new list of Service_profilesAt_Params.
func NewService_profilesAt_Params_List(s *capnp.Segment, sz int32) (Service_profilesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_profilesAt_Params_List{l}, err
}

func (s Service_profilesAt_Params_List) At(i int) Service_profilesAt_Params {
	return Service_profilesAt_Params{s.List.Struct(i)}
}

func (s Service_profilesAt_Params_List) Set(i int, v Service_profilesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xdb97e739bf9693c1, s.List)
	return str
}

// Service_profilesAt_Params_Future is a wrapper for a Service_profilesAt_Params promised by a client call.
type Service_profilesAt_Params_Future struct{ *capnp.Future }

func (p Service_profilesAt_Params_Future) Struct() (Service_profilesAt_Params, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Params{s}, err
}

func (p Service_profilesAt_Params_Future) Coord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Service_profilesAt_Params_Future) Query() Query_Future {
	return Query_Future{Future: p.Future.Field(1, nil)}
}

type Service_profilesAt_Results struct{ capnp.Struct }

// Service_profilesAt_Results_TypeID is the unique identifier for the type Service_profilesAt_Results.
const Service_profilesAt_Results_TypeID = 0xa0915e668c9317ad

func NewService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func NewRootService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func ReadRootService_profilesAt_Results(msg *capnp.Message) (Service_profilesAt_Results, error) {
	root, err := msg.Root()
	return Service_profilesAt_Results{root.Struct()}, err
}

func (s Service_profilesAt_Results) String() string {
	str, _ := text.Marshal(0xa0915e668c9317ad, s.Struct)
	return str
}

func (s Service_profilesAt_Results) Profiles() (Profile_List, error) {
	p, err := s.Struct.Ptr(0)
	return Profile_List{List: p.List()}, err
}

func (s Service_profilesAt_Results) HasProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Results) SetProfiles(v Profile_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated Profile_List, preferring placement in s's segment.
func (s Service_profilesAt_Results) NewProfiles(n int32) (Profile_List, error) {
	l, err := NewProfile_List(s.Struct.Segment(), n)
	if err != nil {
		return Profile_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_profilesAt_Results_List is a list of Service_profilesAt_Results.
type Service_profilesAt_Results_List struct{ capnp.List }

// NewService_profilesAt_Results creates a new list of Service_profilesAt_Results.
func NewService_profilesAt_Results_List(s *capnp.Segment, sz int32) (Service_profilesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_profilesAt_Results_List{l}, err
}

func (s Service_profilesAt_Results_List) At(i int) Service_profilesAt_Results {
	return Service_profilesAt_Results{s.List.Struct(i)}
}

func (s Service_profilesAt_Results_List) Set(i int, v Service_profilesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xa0915e668c9317ad, s.List)
	return str
}

// Service_profilesAt_Results_Future is a wrapper for a Service_profilesAt_Results promised by a client call.
type Service_profilesAt_Results_Future struct{ *capnp.Future }

func (p Service_profilesAt_Results_Future) Struct() (Service_profilesAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Results{s}, err
}

const schema_ff3f350f11891951 = "x\xda\xacVmh\\Y\x19~\xdfsg2_\xc9" +
	"\xce\x1co`\xb5\xcb2\xb2t\xe9\xb6\xb0\xa1M\xad\x92" +
	"\x80&\xd3$Z\xc3~\xcc\x89\xe2\xba\xb5\xab{2s" +
	"&=\xcd\x9d{o\xee=\x93\xec\xc8\xd2\xfaS\x83\x1f" +
	"\xd4\xb6ZK\x95\xb6RJ\x85P[\x14\xec\x8fR\x12" +
	"Pkk\x91\x16\x02\xf6\xc3\x1fE\xa5\x88\x15\x14\xf4G" +
	"\xd1z\xe4\xcc\xcc\x9d\x99$\x15\xfd\xd1_g\xee\xb9\xef" +
	"}\xcf\xf3\xbc\xe7y\x9fw\xb6\x1f\xb5F\xc9\x8e\xf8\xb9" +
	"\x14\x00\xf3\xe3=z\xcb\xfb\x9f\xf8\xf3o\xbf\xf4\xe8\x1b" +
	"\xc0lD\x80X\x02`\xe7\xe5\xd8\x19\x04\xb4\x7f\x15\x1b" +
	"\x01\xd4?\x9e\xbb\xf7\x9b\x17~\xf6\xf7o\x03\xa3\x88\xfa" +
	"\xcd\xbb\xc3_\xf8\xeb\xe8'\x8f\xc3\x04&,D\xfb/" +
	"\xb1\xdb\xf6c\xf3\x91\xfd\x8f\xd8C\xe8z\xcf2\x88\x9a" +
	"}\xe8k4\xbbkDC\x9c\x98\x90\x9b\xf1E{5" +
	"\xfe<\x80\xfd ~\x01P\xff\xfe\xe0\x9d\x03\xdf\xbcz" +
	"\xe68P\x1b\xa1\x19\xb3\xf3p\xcf\x8f\xcc\xd9\xa7{\x16" +
	"\x00\xf5\xcc\xcb7\x7f\xf1`\xd3\xd0\x0f\x80fH'\x19" +
	"\xa0\xfdrb\xc5~5a\xe2\xb7&\x1e\"\xa0^z" +
	"\xfe\xc8\xd7+_<|\xaa\x95\x0a\xcd\xabc\xc9A\x93" +
	"\xea\xfbIC\xe3A\xf9\xfe\x96\xfes'N\x01\xcdX" +
	"kR\xddJ\x9e\xb0\xef$\x0d\xbc\xd5\xe4/m\x99\xda" +
	"\x02\xa0\xfb\xae\xbft0)F\xaf<\x95\x05O-\xda" +
	"2eX\xcc\xa5\x0c\x8b\x91\xa3_]J\xbc\xf0\xc6\xd5" +
	"f\x81\xda\x9f6\x83w\xa5W\xec\x8f\xa7\xcd\xaf\xa1\xb4" +
	"\x09N\xff\x84\xebk?\xfc\xc3\xca\x06F\x8f\xd3\x8b6" +
	"fL\xe0\x93\xf4\xc7\x00\xf5\xf2\x91\xef\\\x1dz\xf8\xdd" +
	"{\xdd\xb5\xc1\xcc6C(\x951\xb5\xd9z\xb2p\xe4" +
	"\xec\xca\x8c~*F\x919aW\x1b\xd9d\xe6\x02\\" +
	"\xd4\xa1'\x9d\x81\x12\xf7\xe3\xae?\xfc\x19\x11\xcc\xcb\x92" +
	"\x18\x98\x11\xaa\xe08\x85y.\x1d>\xed\x88\"\x0fx" +
	"U(\x11\x84\x9b\x8b<H\xf0j\xc8bV\x0c \x86" +
	"\x00\xb4o\x1a\x80\xf5Z\xc8>HP{\xaeS\x9f\xe2" +
	"\x0b\xe3\x90\xe0\x8a#\x02As\x03\xd1\x11\xc4\xf5\x87_" +
	"\xe3u\x11\x0c\x14\x03\xcf\x17\x81\xc2z\x11\x91\xe5\xda\xb9" +
	"\xf86\x00\xb6\xcfB\xb6\x9f\xe0\x8b\xa85\xf6\x1b\xe1Q" +
	"1\x09\xc0\xca\x162\x9f\xe0\x8b\xe4\xdf\xfa\xc3\xfdH\x00" +
	"hu\x18\x80\xed\xb7\x90)\x82}\xd6\x13\xdd\x8f\x16\x00" +
	"\x9d39\x1c\x0b\xd9{\x04\xb3.\xaf\x0a\xccv\xc4\x02" +
	"\x88Y@]\xd99\xf89\xee\xd4\x04\x00`\x1a\x08\xa6" +
	"\x01G\xa6\x1b;\x11\xe6\xac\xaa\xfb\x02{\x81`o\x17" +
	"\x01\x8c\x08\x00\xb0\x18v5\x00\xc5I\xdd\xe2T\x87F" +
	"=\"J\x13{\x01\xd8\xb8\x85\xec]\x82\xd8\xe2\xf3\x8e" +
	"\x81\xf8y\x0bY\x99 %\xd8d\xc3M\x1d\xdf\xb5\x90" +
	"9\x04\xb5\xdf\xcc%\xc1\x12!>\x07X\xb4\x10s\x9d" +
	"\xe3\x00\xcdf6\x94_\x16\x11~]\x16a)\x90\xbe" +
	"\x82\x84\xf4\xdc\x0d\xc8\xff\xbf\xdb\x9d\x12a\xb6\xe6\xa8\x90" +
	"%\xdb\xf8\xb7N\x01\xb0W,d\xe3\x04iD\xa0`" +
	".d\xd4B\xb6\x8f\xa0\xaer\xb7\xcc\x95\x17\x00\xd6#" +
	"\xa8k+\xfe\x1c\xa0\xf6|%=\x97;\xa6\xe2\xff5" +
	"\xa8['Q5\xdf\xe0U\x01F%\xc5F\x95\xfe4" +
	"i\x82\xe9\x1f\xb7\x01 \xa1\xbf3\x8bEW\xcd\x12\xa3" +
	"77\x01`\x9c\xfe\xdc\x84\xf4\xd0\xe5\x00\x00\x13\xf4\x8a" +
	"Y\x92\xf4\xf24\x00\xa6\xe8O\xf7\x9a\x1b\xa7\x17\xcdf" +
	"\x86.]\x02\xc0^\xbad6\xfb\xe8\xf9\x03\x06\xdb\x8e" +
	"\xb3i\x04\xc0,]2ir\xf4\xfcn\x00\xa4\xf4\xb4" +
	"Y>@\xbfg>\xb4\xe9\xb1\x03\x00\x0d\xb4\x9f\xad\xfb" +
	"FD\xd9\x90\xbb\xe5l\xc9\xe1\xf5l(\x1de\xf9{" +
	"tX\x12\x8eP\x9e\x0b\x00\xda\x0bf\xb8+Kc\x90" +
	"\xe7\xc1\xb4\xe7F\xcf\xafC\x9e+%\x02=]sf" +
	"\xc7\x85\x1bBB\xaa\xba\x0e\xf8\x82y\x90`\xa9\xba\xae" +
	"H\xe1\x94\xc7\xb8\x0fy^2/}\x11T\xb9+\\" +
	"ToIGIw&_\xf4\xa4\xabt\xc8U-\xe0" +
	"F0\x9e\xdb@\xf6\xba'C\xc8\xaaZ \x1a\x8fo" +
	"q%\xac`\xccs\xcb\xb5\x92\x92\xf3R\xd5\xc7<Q" +
	"\xa9\xc8\x92\x14\xae\x02\xd0\xbcZ\xf5\\Y\xab\x02\xc0!" +
	"W\xaa\x80+q\xa8\xe4Nq%=-\xddO\x05^" +
	"\xcd-C~\x81\x1b\xb8\xb2\xea\x0bW\xa8\x00\xb2F>" +
	"\xed[\xb3\xba$\xe6\x07^E:\",\xa8\xcdS\"" +
	"\x1f64\xd5e\x19\x93-\xcbx\xa5)\xf5Fh\x97" +
	"2r\x1d\x07[\xa7\x0c\x8c\xce\xb0J\xc2\x88\xa2\xd7\x8a" +
	"wy2F~K\xd9u \x94%\x10\xdbC\x0c\xa3" +
	"\x89B'n\x03\xa1\x13\x09$m#\xc5hD\xd0\xa1" +
	"\xbd@\xe8\x8e\x84.\xed\x17\xa5\xd9\xc2<'\xeb[\x04" +
	"`\x14u\xd4@d}\x07a8\xdaE\xc8*\xa8Q" +
	"dID\xbd\xba\xe7\xe4\xdb7n]\xb8d\xc4 n" +
	"|\xf4\xfe\xa9\xbb\xe7\x96\xa1%\xa1\x88\x16\xab\x89\xa0\xde" +
	"\xf2\x95\xf6\xdc\xa08<2%L\xfd\xba-e\xaac" +
	")\xed\x96|g\xb2e\x9d\xef\x11D\xd2\x8f\x04\x91\xd6" +
	"\x8c\xa5(\x0b\xd9W\x9ei\x9bn0\xf9\xf8\x06\x97o" +
	"\x90\x19h\"\x87\xe6E\xb5\xd1\x0f\xb7\xbc\xe3\xb5\x8e!" +
	"~\xda0\xda\xb3\xde\x10'[\x86\xf8>\xc1\x91\x0a\x97" +
	"\x8e(\xb7'\xca\xb3\xf7\x9c\x86\xb2\x9a\xedl\xf0&\x1b" +
	"\x10\xe8\xee\x86\xdb\xa4^\x028Tsg]o\xc1M" +
	"\xcc\xf2]\xffK\xf2E\x9e\x0d\xcc\x90\xecr\xd1A\x00" +
	"\xb6\xd9B\xb6\xbd\xeb\xca^\x1dlY\xebG\x08\xe6K" +
	"\x9e\x17\x941\xa7\xff\xf9\xad_\x0fm\xff\xd7\xdf\x1e\x99" +
	"\x83s\x80\xf99SI\xccu\xfe<4\xf7\xd7\xe0." +
	"\x9a\xa3-\xa7\xd5\x111\xc4\xb5\x85\xde\xd7T\x04\"\xd2" +
	"\xb7\x17;\x036\xd7\xaa\xb3\xd8\xd4\x19<#\x8e\x99n" +
	"]#\xa7\xfd\xa7\xadU._\x04%\xe1*\x8e3\xe2" +
	"\xcdJ!\x10\xbc9A\x97\xd3\xd7v\x03Z\xb2\x1c\x0d" +
	"\x9e\xff\x04\x00\x00\xff\xff\xfd4\xc6\xab"

func init() {
	schemas.Register(schema_ff3f350f11891951,
		0x8dec5fd8eb3e7c27,
		0x92f4b81bcfdb71b0,
		0x984640f05b3ada4f,
		0x98a2bf8e6ad97ee3,
		0x9e391ae1c6cd2567,
		0xa0915e668c9317ad,
		0xa09aa71427dc64e1,
		0xbd4065087e22ca0d,
		0xbf4e1b07ad88943f,
		0xc2e4a3c8ff61b40a,
		0xdb97e739bf9693c1,
		0xff67c2a593419c29)
}
