// Code generated by capnpc-go. DO NOT EDIT.

package soil

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type SType uint16

// SType_TypeID is the unique identifier for the type SType.
const SType_TypeID = 0xc2e4a3c8ff61b40a

// Values of SType.
const (
	SType_unknown SType = 0
	SType_ka5     SType = 1
)

// String returns the enum's constant name.
func (c SType) String() string {
	switch c {
	case SType_unknown:
		return "unknown"
	case SType_ka5:
		return "ka5"

	default:
		return ""
	}
}

// STypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func STypeFromString(c string) SType {
	switch c {
	case "unknown":
		return SType_unknown
	case "ka5":
		return SType_ka5

	default:
		return 0
	}
}

type SType_List struct{ capnp.List }

func NewSType_List(s *capnp.Segment, sz int32) (SType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SType_List{l.List}, err
}

func (l SType_List) At(i int) SType {
	ul := capnp.UInt16List{List: l.List}
	return SType(ul.At(i))
}

func (l SType_List) Set(i int, v SType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PropertyName uint16

// PropertyName_TypeID is the unique identifier for the type PropertyName.
const PropertyName_TypeID = 0x9e391ae1c6cd2567

// Values of PropertyName.
const (
	PropertyName_soilType                         PropertyName = 0
	PropertyName_sand                             PropertyName = 1
	PropertyName_clay                             PropertyName = 2
	PropertyName_silt                             PropertyName = 3
	PropertyName_pH                               PropertyName = 4
	PropertyName_sceleton                         PropertyName = 5
	PropertyName_organicCarbon                    PropertyName = 6
	PropertyName_organicMatter                    PropertyName = 7
	PropertyName_bulkDensity                      PropertyName = 8
	PropertyName_rawDensity                       PropertyName = 9
	PropertyName_fieldCapacity                    PropertyName = 10
	PropertyName_permanentWiltingPoint            PropertyName = 11
	PropertyName_saturation                       PropertyName = 12
	PropertyName_soilMoisture                     PropertyName = 13
	PropertyName_soilWaterConductivityCoefficient PropertyName = 14
	PropertyName_ammonium                         PropertyName = 15
	PropertyName_nitrate                          PropertyName = 16
	PropertyName_cnRatio                          PropertyName = 17
	PropertyName_inGroundwater                    PropertyName = 18
	PropertyName_impenetrable                     PropertyName = 19
)

// String returns the enum's constant name.
func (c PropertyName) String() string {
	switch c {
	case PropertyName_soilType:
		return "soilType"
	case PropertyName_sand:
		return "sand"
	case PropertyName_clay:
		return "clay"
	case PropertyName_silt:
		return "silt"
	case PropertyName_pH:
		return "pH"
	case PropertyName_sceleton:
		return "sceleton"
	case PropertyName_organicCarbon:
		return "organicCarbon"
	case PropertyName_organicMatter:
		return "organicMatter"
	case PropertyName_bulkDensity:
		return "bulkDensity"
	case PropertyName_rawDensity:
		return "rawDensity"
	case PropertyName_fieldCapacity:
		return "fieldCapacity"
	case PropertyName_permanentWiltingPoint:
		return "permanentWiltingPoint"
	case PropertyName_saturation:
		return "saturation"
	case PropertyName_soilMoisture:
		return "soilMoisture"
	case PropertyName_soilWaterConductivityCoefficient:
		return "soilWaterConductivityCoefficient"
	case PropertyName_ammonium:
		return "ammonium"
	case PropertyName_nitrate:
		return "nitrate"
	case PropertyName_cnRatio:
		return "cnRatio"
	case PropertyName_inGroundwater:
		return "inGroundwater"
	case PropertyName_impenetrable:
		return "impenetrable"

	default:
		return ""
	}
}

// PropertyNameFromString returns the enum value with a name,
// or the zero value if there's no such value.
func PropertyNameFromString(c string) PropertyName {
	switch c {
	case "soilType":
		return PropertyName_soilType
	case "sand":
		return PropertyName_sand
	case "clay":
		return PropertyName_clay
	case "silt":
		return PropertyName_silt
	case "pH":
		return PropertyName_pH
	case "sceleton":
		return PropertyName_sceleton
	case "organicCarbon":
		return PropertyName_organicCarbon
	case "organicMatter":
		return PropertyName_organicMatter
	case "bulkDensity":
		return PropertyName_bulkDensity
	case "rawDensity":
		return PropertyName_rawDensity
	case "fieldCapacity":
		return PropertyName_fieldCapacity
	case "permanentWiltingPoint":
		return PropertyName_permanentWiltingPoint
	case "saturation":
		return PropertyName_saturation
	case "soilMoisture":
		return PropertyName_soilMoisture
	case "soilWaterConductivityCoefficient":
		return PropertyName_soilWaterConductivityCoefficient
	case "ammonium":
		return PropertyName_ammonium
	case "nitrate":
		return PropertyName_nitrate
	case "cnRatio":
		return PropertyName_cnRatio
	case "inGroundwater":
		return PropertyName_inGroundwater
	case "impenetrable":
		return PropertyName_impenetrable

	default:
		return 0
	}
}

type PropertyName_List struct{ capnp.List }

func NewPropertyName_List(s *capnp.Segment, sz int32) (PropertyName_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return PropertyName_List{l.List}, err
}

func (l PropertyName_List) At(i int) PropertyName {
	ul := capnp.UInt16List{List: l.List}
	return PropertyName(ul.At(i))
}

func (l PropertyName_List) Set(i int, v PropertyName) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Layer struct{ capnp.Struct }

// Layer_TypeID is the unique identifier for the type Layer.
const Layer_TypeID = 0x984640f05b3ada4f

func NewLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func NewRootLayer(s *capnp.Segment) (Layer, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Layer{st}, err
}

func ReadRootLayer(msg *capnp.Message) (Layer, error) {
	root, err := msg.Root()
	return Layer{root.Struct()}, err
}

func (s Layer) String() string {
	str, _ := text.Marshal(0x984640f05b3ada4f, s.Struct)
	return str
}

func (s Layer) Properties() (Layer_Property_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_Property_List{List: p.List()}, err
}

func (s Layer) HasProperties() bool {
	return s.Struct.HasPtr(0)
}

func (s Layer) SetProperties(v Layer_Property_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Layer_Property_List, preferring placement in s's segment.
func (s Layer) NewProperties(n int32) (Layer_Property_List, error) {
	l, err := NewLayer_Property_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_Property_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Layer) Size() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s Layer) SetSize(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s Layer) Description() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Layer) HasDescription() bool {
	return s.Struct.HasPtr(1)
}

func (s Layer) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Layer) SetDescription(v string) error {
	return s.Struct.SetText(1, v)
}

// Layer_List is a list of Layer.
type Layer_List struct{ capnp.List }

// NewLayer creates a new list of Layer.
func NewLayer_List(s *capnp.Segment, sz int32) (Layer_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Layer_List{l}, err
}

func (s Layer_List) At(i int) Layer { return Layer{s.List.Struct(i)} }

func (s Layer_List) Set(i int, v Layer) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_List) String() string {
	str, _ := text.MarshalList(0x984640f05b3ada4f, s.List)
	return str
}

// Layer_Future is a wrapper for a Layer promised by a client call.
type Layer_Future struct{ *capnp.Future }

func (p Layer_Future) Struct() (Layer, error) {
	s, err := p.Future.Struct()
	return Layer{s}, err
}

type Layer_Property struct{ capnp.Struct }
type Layer_Property_Which uint16

const (
	Layer_Property_Which_f32Value Layer_Property_Which = 0
	Layer_Property_Which_bValue   Layer_Property_Which = 1
	Layer_Property_Which_type     Layer_Property_Which = 2
	Layer_Property_Which_unset    Layer_Property_Which = 3
)

func (w Layer_Property_Which) String() string {
	const s = "f32ValuebValuetypeunset"
	switch w {
	case Layer_Property_Which_f32Value:
		return s[0:8]
	case Layer_Property_Which_bValue:
		return s[8:14]
	case Layer_Property_Which_type:
		return s[14:18]
	case Layer_Property_Which_unset:
		return s[18:23]

	}
	return "Layer_Property_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Layer_Property_TypeID is the unique identifier for the type Layer_Property.
const Layer_Property_TypeID = 0x92f4b81bcfdb71b0

func NewLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func NewRootLayer_Property(s *capnp.Segment) (Layer_Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Layer_Property{st}, err
}

func ReadRootLayer_Property(msg *capnp.Message) (Layer_Property, error) {
	root, err := msg.Root()
	return Layer_Property{root.Struct()}, err
}

func (s Layer_Property) String() string {
	str, _ := text.Marshal(0x92f4b81bcfdb71b0, s.Struct)
	return str
}

func (s Layer_Property) Which() Layer_Property_Which {
	return Layer_Property_Which(s.Struct.Uint16(2))
}
func (s Layer_Property) Name() PropertyName {
	return PropertyName(s.Struct.Uint16(0))
}

func (s Layer_Property) SetName(v PropertyName) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Layer_Property) F32Value() float32 {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != f32Value")
	}
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s Layer_Property) SetF32Value(v float32) {
	s.Struct.SetUint16(2, 0)
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s Layer_Property) BValue() bool {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bValue")
	}
	return s.Struct.Bit(32)
}

func (s Layer_Property) SetBValue(v bool) {
	s.Struct.SetUint16(2, 1)
	s.Struct.SetBit(32, v)
}

func (s Layer_Property) Type() (string, error) {
	if s.Struct.Uint16(2) != 2 {
		panic("Which() != type")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Layer_Property) HasType() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Layer_Property) TypeBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Layer_Property) SetType(v string) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetText(0, v)
}

func (s Layer_Property) SetUnset() {
	s.Struct.SetUint16(2, 3)

}

// Layer_Property_List is a list of Layer_Property.
type Layer_Property_List struct{ capnp.List }

// NewLayer_Property creates a new list of Layer_Property.
func NewLayer_Property_List(s *capnp.Segment, sz int32) (Layer_Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Layer_Property_List{l}, err
}

func (s Layer_Property_List) At(i int) Layer_Property { return Layer_Property{s.List.Struct(i)} }

func (s Layer_Property_List) Set(i int, v Layer_Property) error { return s.List.SetStruct(i, v.Struct) }

func (s Layer_Property_List) String() string {
	str, _ := text.MarshalList(0x92f4b81bcfdb71b0, s.List)
	return str
}

// Layer_Property_Future is a wrapper for a Layer_Property promised by a client call.
type Layer_Property_Future struct{ *capnp.Future }

func (p Layer_Property_Future) Struct() (Layer_Property, error) {
	s, err := p.Future.Struct()
	return Layer_Property{s}, err
}

type Query struct{ capnp.Struct }

// Query_TypeID is the unique identifier for the type Query.
const Query_TypeID = 0xbd4065087e22ca0d

func NewQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func NewRootQuery(s *capnp.Segment) (Query, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query{st}, err
}

func ReadRootQuery(msg *capnp.Message) (Query, error) {
	root, err := msg.Root()
	return Query{root.Struct()}, err
}

func (s Query) String() string {
	str, _ := text.Marshal(0xbd4065087e22ca0d, s.Struct)
	return str
}

func (s Query) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Query) OnlyRawData() bool {
	return !s.Struct.Bit(0)
}

func (s Query) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, !v)
}

// Query_List is a list of Query.
type Query_List struct{ capnp.List }

// NewQuery creates a new list of Query.
func NewQuery_List(s *capnp.Segment, sz int32) (Query_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_List{l}, err
}

func (s Query_List) At(i int) Query { return Query{s.List.Struct(i)} }

func (s Query_List) Set(i int, v Query) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_List) String() string {
	str, _ := text.MarshalList(0xbd4065087e22ca0d, s.List)
	return str
}

// Query_Future is a wrapper for a Query promised by a client call.
type Query_Future struct{ *capnp.Future }

func (p Query_Future) Struct() (Query, error) {
	s, err := p.Future.Struct()
	return Query{s}, err
}

type Query_Result struct{ capnp.Struct }

// Query_Result_TypeID is the unique identifier for the type Query_Result.
const Query_Result_TypeID = 0xbf4e1b07ad88943f

func NewQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func NewRootQuery_Result(s *capnp.Segment) (Query_Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{st}, err
}

func ReadRootQuery_Result(msg *capnp.Message) (Query_Result, error) {
	root, err := msg.Root()
	return Query_Result{root.Struct()}, err
}

func (s Query_Result) String() string {
	str, _ := text.Marshal(0xbf4e1b07ad88943f, s.Struct)
	return str
}

func (s Query_Result) Failed() bool {
	return s.Struct.Bit(0)
}

func (s Query_Result) SetFailed(v bool) {
	s.Struct.SetBit(0, v)
}

func (s Query_Result) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Query_Result) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Query_Result) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Query_Result) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Query_Result) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Query_Result) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Query_Result_List is a list of Query_Result.
type Query_Result_List struct{ capnp.List }

// NewQuery_Result creates a new list of Query_Result.
func NewQuery_Result_List(s *capnp.Segment, sz int32) (Query_Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Query_Result_List{l}, err
}

func (s Query_Result_List) At(i int) Query_Result { return Query_Result{s.List.Struct(i)} }

func (s Query_Result_List) Set(i int, v Query_Result) error { return s.List.SetStruct(i, v.Struct) }

func (s Query_Result_List) String() string {
	str, _ := text.MarshalList(0xbf4e1b07ad88943f, s.List)
	return str
}

// Query_Result_Future is a wrapper for a Query_Result promised by a client call.
type Query_Result_Future struct{ *capnp.Future }

func (p Query_Result_Future) Struct() (Query_Result, error) {
	s, err := p.Future.Struct()
	return Query_Result{s}, err
}

type Profile struct{ capnp.Struct }

// Profile_TypeID is the unique identifier for the type Profile.
const Profile_TypeID = 0xff67c2a593419c29

func NewProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Profile{st}, err
}

func NewRootProfile(s *capnp.Segment) (Profile, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Profile{st}, err
}

func ReadRootProfile(msg *capnp.Message) (Profile, error) {
	root, err := msg.Root()
	return Profile{root.Struct()}, err
}

func (s Profile) String() string {
	str, _ := text.Marshal(0xff67c2a593419c29, s.Struct)
	return str
}

func (s Profile) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Profile) HasId() bool {
	return s.Struct.HasPtr(1)
}

func (s Profile) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Profile) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Profile) Layers() (Layer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Layer_List{List: p.List()}, err
}

func (s Profile) HasLayers() bool {
	return s.Struct.HasPtr(0)
}

func (s Profile) SetLayers(v Layer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLayers sets the layers field to a newly
// allocated Layer_List, preferring placement in s's segment.
func (s Profile) NewLayers(n int32) (Layer_List, error) {
	l, err := NewLayer_List(s.Struct.Segment(), n)
	if err != nil {
		return Layer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Profile) PercentageOfArea() float32 {
	return math.Float32frombits(s.Struct.Uint32(0) ^ 0x42c80000)
}

func (s Profile) SetPercentageOfArea(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v)^0x42c80000)
}

// Profile_List is a list of Profile.
type Profile_List struct{ capnp.List }

// NewProfile creates a new list of Profile.
func NewProfile_List(s *capnp.Segment, sz int32) (Profile_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return Profile_List{l}, err
}

func (s Profile_List) At(i int) Profile { return Profile{s.List.Struct(i)} }

func (s Profile_List) Set(i int, v Profile) error { return s.List.SetStruct(i, v.Struct) }

func (s Profile_List) String() string {
	str, _ := text.MarshalList(0xff67c2a593419c29, s.List)
	return str
}

// Profile_Future is a wrapper for a Profile promised by a client call.
type Profile_Future struct{ *capnp.Future }

func (p Profile_Future) Struct() (Profile, error) {
	s, err := p.Future.Struct()
	return Profile{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xa09aa71427dc64e1

func (c Service) CheckAvailableParameters(ctx context.Context, params func(Query) error) (Query_Result_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Query{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Query_Result_Future{Future: ans.Future()}, release
}
func (c Service) GetAllAvailableParameters(ctx context.Context, params func(Service_getAllAvailableParameters_Params) error) (Service_getAllAvailableParameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_getAllAvailableParameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_getAllAvailableParameters_Results_Future{Future: ans.Future()}, release
}
func (c Service) ProfilesAt(ctx context.Context, params func(Service_profilesAt_Params) error) (Service_profilesAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "profilesAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_profilesAt_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_profilesAt_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	CheckAvailableParameters(context.Context, Service_checkAvailableParameters) error

	GetAllAvailableParameters(context.Context, Service_getAllAvailableParameters) error

	ProfilesAt(context.Context, Service_profilesAt) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      0,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "checkAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CheckAvailableParameters(ctx, Service_checkAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      1,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "getAllAvailableParameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetAllAvailableParameters(ctx, Service_getAllAvailableParameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa09aa71427dc64e1,
			MethodID:      2,
			InterfaceName: "soil.capnp:Service",
			MethodName:    "profilesAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ProfilesAt(ctx, Service_profilesAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_checkAvailableParameters holds the state for a server call to Service.checkAvailableParameters.
// See server.Call for documentation.
type Service_checkAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_checkAvailableParameters) Args() Query {
	return Query{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_checkAvailableParameters) AllocResults() (Query_Result, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Query_Result{Struct: r}, err
}

// Service_getAllAvailableParameters holds the state for a server call to Service.getAllAvailableParameters.
// See server.Call for documentation.
type Service_getAllAvailableParameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_getAllAvailableParameters) Args() Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_getAllAvailableParameters) AllocResults() (Service_getAllAvailableParameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{Struct: r}, err
}

// Service_profilesAt holds the state for a server call to Service.profilesAt.
// See server.Call for documentation.
type Service_profilesAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_profilesAt) Args() Service_profilesAt_Params {
	return Service_profilesAt_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_profilesAt) AllocResults() (Service_profilesAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{Struct: r}, err
}

type Service_getAllAvailableParameters_Params struct{ capnp.Struct }

// Service_getAllAvailableParameters_Params_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Params.
const Service_getAllAvailableParameters_Params_TypeID = 0x8dec5fd8eb3e7c27

func NewService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func NewRootService_getAllAvailableParameters_Params(s *capnp.Segment) (Service_getAllAvailableParameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Service_getAllAvailableParameters_Params{st}, err
}

func ReadRootService_getAllAvailableParameters_Params(msg *capnp.Message) (Service_getAllAvailableParameters_Params, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Params{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Params) String() string {
	str, _ := text.Marshal(0x8dec5fd8eb3e7c27, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Params) OnlyRawData() bool {
	return s.Struct.Bit(0)
}

func (s Service_getAllAvailableParameters_Params) SetOnlyRawData(v bool) {
	s.Struct.SetBit(0, v)
}

// Service_getAllAvailableParameters_Params_List is a list of Service_getAllAvailableParameters_Params.
type Service_getAllAvailableParameters_Params_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Params creates a new list of Service_getAllAvailableParameters_Params.
func NewService_getAllAvailableParameters_Params_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Service_getAllAvailableParameters_Params_List{l}, err
}

func (s Service_getAllAvailableParameters_Params_List) At(i int) Service_getAllAvailableParameters_Params {
	return Service_getAllAvailableParameters_Params{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Params_List) Set(i int, v Service_getAllAvailableParameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Params_List) String() string {
	str, _ := text.MarshalList(0x8dec5fd8eb3e7c27, s.List)
	return str
}

// Service_getAllAvailableParameters_Params_Future is a wrapper for a Service_getAllAvailableParameters_Params promised by a client call.
type Service_getAllAvailableParameters_Params_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Params_Future) Struct() (Service_getAllAvailableParameters_Params, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Params{s}, err
}

type Service_getAllAvailableParameters_Results struct{ capnp.Struct }

// Service_getAllAvailableParameters_Results_TypeID is the unique identifier for the type Service_getAllAvailableParameters_Results.
const Service_getAllAvailableParameters_Results_TypeID = 0x98a2bf8e6ad97ee3

func NewService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func NewRootService_getAllAvailableParameters_Results(s *capnp.Segment) (Service_getAllAvailableParameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_getAllAvailableParameters_Results{st}, err
}

func ReadRootService_getAllAvailableParameters_Results(msg *capnp.Message) (Service_getAllAvailableParameters_Results, error) {
	root, err := msg.Root()
	return Service_getAllAvailableParameters_Results{root.Struct()}, err
}

func (s Service_getAllAvailableParameters_Results) String() string {
	str, _ := text.Marshal(0x98a2bf8e6ad97ee3, s.Struct)
	return str
}

func (s Service_getAllAvailableParameters_Results) Mandatory() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(0)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasMandatory() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_getAllAvailableParameters_Results) SetMandatory(v PropertyName_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMandatory sets the mandatory field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewMandatory(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Service_getAllAvailableParameters_Results) Optional() (PropertyName_List, error) {
	p, err := s.Struct.Ptr(1)
	return PropertyName_List{List: p.List()}, err
}

func (s Service_getAllAvailableParameters_Results) HasOptional() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_getAllAvailableParameters_Results) SetOptional(v PropertyName_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewOptional sets the optional field to a newly
// allocated PropertyName_List, preferring placement in s's segment.
func (s Service_getAllAvailableParameters_Results) NewOptional(n int32) (PropertyName_List, error) {
	l, err := NewPropertyName_List(s.Struct.Segment(), n)
	if err != nil {
		return PropertyName_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// Service_getAllAvailableParameters_Results_List is a list of Service_getAllAvailableParameters_Results.
type Service_getAllAvailableParameters_Results_List struct{ capnp.List }

// NewService_getAllAvailableParameters_Results creates a new list of Service_getAllAvailableParameters_Results.
func NewService_getAllAvailableParameters_Results_List(s *capnp.Segment, sz int32) (Service_getAllAvailableParameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_getAllAvailableParameters_Results_List{l}, err
}

func (s Service_getAllAvailableParameters_Results_List) At(i int) Service_getAllAvailableParameters_Results {
	return Service_getAllAvailableParameters_Results{s.List.Struct(i)}
}

func (s Service_getAllAvailableParameters_Results_List) Set(i int, v Service_getAllAvailableParameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_getAllAvailableParameters_Results_List) String() string {
	str, _ := text.MarshalList(0x98a2bf8e6ad97ee3, s.List)
	return str
}

// Service_getAllAvailableParameters_Results_Future is a wrapper for a Service_getAllAvailableParameters_Results promised by a client call.
type Service_getAllAvailableParameters_Results_Future struct{ *capnp.Future }

func (p Service_getAllAvailableParameters_Results_Future) Struct() (Service_getAllAvailableParameters_Results, error) {
	s, err := p.Future.Struct()
	return Service_getAllAvailableParameters_Results{s}, err
}

type Service_profilesAt_Params struct{ capnp.Struct }

// Service_profilesAt_Params_TypeID is the unique identifier for the type Service_profilesAt_Params.
const Service_profilesAt_Params_TypeID = 0xdb97e739bf9693c1

func NewService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func NewRootService_profilesAt_Params(s *capnp.Segment) (Service_profilesAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Service_profilesAt_Params{st}, err
}

func ReadRootService_profilesAt_Params(msg *capnp.Message) (Service_profilesAt_Params, error) {
	root, err := msg.Root()
	return Service_profilesAt_Params{root.Struct()}, err
}

func (s Service_profilesAt_Params) String() string {
	str, _ := text.Marshal(0xdb97e739bf9693c1, s.Struct)
	return str
}

func (s Service_profilesAt_Params) Coord() (geo.LatLonCoord, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasCoord() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Params) SetCoord(v geo.LatLonCoord) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCoord sets the coord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Service_profilesAt_Params) Query() (Query, error) {
	p, err := s.Struct.Ptr(1)
	return Query{Struct: p.Struct()}, err
}

func (s Service_profilesAt_Params) HasQuery() bool {
	return s.Struct.HasPtr(1)
}

func (s Service_profilesAt_Params) SetQuery(v Query) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated Query struct, preferring placement in s's segment.
func (s Service_profilesAt_Params) NewQuery() (Query, error) {
	ss, err := NewQuery(s.Struct.Segment())
	if err != nil {
		return Query{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Service_profilesAt_Params_List is a list of Service_profilesAt_Params.
type Service_profilesAt_Params_List struct{ capnp.List }

// NewService_profilesAt_Params creates a new list of Service_profilesAt_Params.
func NewService_profilesAt_Params_List(s *capnp.Segment, sz int32) (Service_profilesAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Service_profilesAt_Params_List{l}, err
}

func (s Service_profilesAt_Params_List) At(i int) Service_profilesAt_Params {
	return Service_profilesAt_Params{s.List.Struct(i)}
}

func (s Service_profilesAt_Params_List) Set(i int, v Service_profilesAt_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Params_List) String() string {
	str, _ := text.MarshalList(0xdb97e739bf9693c1, s.List)
	return str
}

// Service_profilesAt_Params_Future is a wrapper for a Service_profilesAt_Params promised by a client call.
type Service_profilesAt_Params_Future struct{ *capnp.Future }

func (p Service_profilesAt_Params_Future) Struct() (Service_profilesAt_Params, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Params{s}, err
}

func (p Service_profilesAt_Params_Future) Coord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Service_profilesAt_Params_Future) Query() Query_Future {
	return Query_Future{Future: p.Future.Field(1, nil)}
}

type Service_profilesAt_Results struct{ capnp.Struct }

// Service_profilesAt_Results_TypeID is the unique identifier for the type Service_profilesAt_Results.
const Service_profilesAt_Results_TypeID = 0xa0915e668c9317ad

func NewService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func NewRootService_profilesAt_Results(s *capnp.Segment) (Service_profilesAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_profilesAt_Results{st}, err
}

func ReadRootService_profilesAt_Results(msg *capnp.Message) (Service_profilesAt_Results, error) {
	root, err := msg.Root()
	return Service_profilesAt_Results{root.Struct()}, err
}

func (s Service_profilesAt_Results) String() string {
	str, _ := text.Marshal(0xa0915e668c9317ad, s.Struct)
	return str
}

func (s Service_profilesAt_Results) Profiles() (Profile_List, error) {
	p, err := s.Struct.Ptr(0)
	return Profile_List{List: p.List()}, err
}

func (s Service_profilesAt_Results) HasProfiles() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_profilesAt_Results) SetProfiles(v Profile_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewProfiles sets the profiles field to a newly
// allocated Profile_List, preferring placement in s's segment.
func (s Service_profilesAt_Results) NewProfiles(n int32) (Profile_List, error) {
	l, err := NewProfile_List(s.Struct.Segment(), n)
	if err != nil {
		return Profile_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Service_profilesAt_Results_List is a list of Service_profilesAt_Results.
type Service_profilesAt_Results_List struct{ capnp.List }

// NewService_profilesAt_Results creates a new list of Service_profilesAt_Results.
func NewService_profilesAt_Results_List(s *capnp.Segment, sz int32) (Service_profilesAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_profilesAt_Results_List{l}, err
}

func (s Service_profilesAt_Results_List) At(i int) Service_profilesAt_Results {
	return Service_profilesAt_Results{s.List.Struct(i)}
}

func (s Service_profilesAt_Results_List) Set(i int, v Service_profilesAt_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_profilesAt_Results_List) String() string {
	str, _ := text.MarshalList(0xa0915e668c9317ad, s.List)
	return str
}

// Service_profilesAt_Results_Future is a wrapper for a Service_profilesAt_Results promised by a client call.
type Service_profilesAt_Results_Future struct{ *capnp.Future }

func (p Service_profilesAt_Results_Future) Struct() (Service_profilesAt_Results, error) {
	s, err := p.Future.Struct()
	return Service_profilesAt_Results{s}, err
}

const schema_ff3f350f11891951 = "x\xda\xacVolTY\x15?\xe7\xbe\x99y\xd3\xf9" +
	"\xb3\xd3\xebk\xb2.\x9b\xcd\x98\x0d\x86\x85d\x1bZ\\" +
	"M\x9bh;\xb4Ul\x96\xdd\xb9\xf5\xcf\x0a\xb2\xba\xb7" +
	"3w\xba\x8f\xbeyo\xfa\xde\x9dv\xc7\xec\x02&|" +
	"\x80\x06\x14\x04\x14\x08\x18\xc4\x10\x82I\x83\x12M\xf4\x03" +
	"!m\x82\"H\x0c$$\xf2\xc7\x0fD\x0d1\xf2A" +
	"\x13\xbf\x01^sg\xe6\xcdL\x0b\xc6l\xc2\xa7;\xef" +
	"\xcey\xe7\x9e\xdf\xef\xfe\xce\xef\xbc\xf5\x8f\x8ca\xd2\x17" +
	"\x9dJ\x01\xb0\x03\xd1\x98Z\xf3\xe1\x17\xfe\xf1\xa7o?" +
	"\xdc\x0f\xccB\x04\x88\x98\x00\x1b^\x8a\x9dF@km" +
	"l\x08P\xfd|\xe6\xee\x1f_\xfe\xf5\xbf\x7f\x00\x8c\"" +
	"\xaa\xb7\xef\x0c~\xf3\x9f\xc3_<\x0achF\x10\xad" +
	"\xcd\xb1\x9b\xd6\x96\x98~\xe9k\xb1,BG\x00K\"" +
	"*\xf6\xd2^\x9aycHA\x94\x98\x00\x96m\xce[" +
	"3\xe6\x8b\x00\xd6G\xe6y@\xf5\x97\x1d\xb7\xb7\x7f\xef" +
	"\xd2\xe9\xa3@-\x84F\xcc\x86\xd7\xe3?\xd3\x87\x7f>" +
	">\x07\xa8\xa6>}\xfd\xb7\xf7W\x0d\xfc\x18h\x92\xb4" +
	"\x93\x01Z\x8b\xf1%\xeb\xf7q\x1d\x7f9\xfe@\x9f\xbb" +
	"\xf0\xe2\xa1}\xa5o\x1d<\xd5L\x85\xfa\xaf\xbeD\xbf" +
	"N5\x90\xd08\xee\x17\xef\xad\xe99{\xfc\x14\xd0\xa4" +
	"\xb1,U9q\xdc\xaa&ty3\x89\xdfY\xd1\xe4" +
	"\x1a\x00\x95\xbe\xfa\xea\x8e\xb8\x18\xbe\xf8L\x14O\x12\xf3" +
	"V4\xa9Q\xa4\x93\x1a\xc5\xd0\xe1=\x0b\xe6\xcbo]" +
	"j0\xd4z\xb5\x11|#\xb9d\xddN\xea_\xb7\xea" +
	"\xc1\x89_ru\xe5\xa7\x7f]z\x0a\xd1\x91\xd4\xbcu" +
	"2\xa5\x03\x8f\xa5>\x07\xa8\x16\x0f\xfd\xf0\xd2\xc0\x83\x1f" +
	"\xdd\xed\xe4\xe6dj\x9d\x06t&\xa5\xb9Y{\"w" +
	"\xe8\xcc\xd2\x94zf\x8d\x98>nu\xa5\xf5\xafh\xfa" +
	"<(\xe8R\x81g;\xbd\x05^\x89\xba\x95\xc1\xaf\x08" +
	"\x7f\xd6.\x88\xde)!s\x8e\x93\x9b\xe5\xb6\xc3'\x1d" +
	"\x91\xe7>/\x0b)\xfc`u\x9e\xfb&/\x07,b" +
	"D\x00\"\x08@\xd3\x93\x00,e \xfb$A\xe5\xb9" +
	"Nm\x82\xcf\x8d\x82\xc9%G\x04\x82\xfa\x0e\xc2#\x88" +
	"[\x19|\x93\xd7\x84\xdf\x9b\xf7\xbd\x8a\xf0%\xd6\xf2\x88" +
	"\xac\xa7\x95\xeb\xa3u\x00\xec\x03\x03\xd9n\x82\xaf\xa0R" +
	"\xd8\xa3\xb5G\xbf;\x0e\xc0v\x19\xc8\xf6\x11|\x85\xfc" +
	"G}\xaa\x07\x09\x00\xdd;\x08\xc0v\x1b\xc8\x0e\x10L" +
	"\x1bOT\x0f\x1a\x00t\xbf\xce\xb1\xc7@v\x98`:" +
	"\xf2X\xf5`\x04\x80\x1e\xec\x07`\xfb\x0cdG\x09f" +
	"\\^\x16\x98i\x8b\x08\x103\x80\xaa\xb4\xa1\xff\xeb\xdc" +
	"\xa9\x0a\x00\xc0\x04\x10L\x00\x0eM\xd6wB$\x19Y" +
	"\xab\x08L\x01\xc1\x14`\xb6\xea\x06BB\xac\x05\x0fC" +
	"x\x00,\x82\x1d\x1dBq\\5\x11\xd7\xa0\xceV\x08" +
	"xl+\x00\x1b5\x90\xbdG\x10\x9bh\xdf\xd5\x00\xbe" +
	"a +\x12\xa4\x04\x1bX\xb9f\xf9=\x03\x99CP" +
	"U\x1a\xb9l0D\x80/\x00\xe6\x0d\xc4\xee\xf6q\x80" +
	"z3\x13\xd8\xdf\x11!\x0eU\x14A\xc1\xb7+\x12L" +
	"\xdbsC\x04\x1f\xf3\xee'D\x90\xa9:2`\xf1V" +
	"\xfdk'\x00\xd8k\x06\xb2Q\x824\x04\x90\xd3\xd75" +
	"l \xdbFP\x95\xb9[\xe4\xd2\xf3\x01ka\xa9\xcb" +
	"\x99\x7f\x01Py\x15i{.w4\xf3\xff3\xa8S" +
	"E!\x9bo\xf1\xb2\x00\xad\xa1|\x9d\xa5\xbf\x8f\xeb`" +
	"\xfa\xb7u\x00H\xe8\x9f\xf5b\xd0[z\x89\xd0\xeb\xab" +
	"\x000J/\xeb\x90\x18]\xf4\x01\xd0\xa4\x17\xf5\x12\xa7" +
	"\xbf\x99\x04\xc0.\xfa\xab\xad\xfa\xe6\xe9/\xf4f\x92." +
	"\\\x00\xc0\x14]\xd0\x9bizn\xbb\xae\xad\xefL\x02" +
	"\x010C\x17t\x9anzn#\x00R\xfa\x13\xbd|" +
	"\x82\x1e\xd3/Z\xf4\xc8v\x80z\xb5_\xadU\xb4\x98" +
	"2\x01w\x8b\x99\x82\xc3k\x99\xc0v\xa4Q\xd9\xa4\x82" +
	"\x82p\x84\xf4\\\x00P\x9e?\xc5]\xbb0\x02Y\xee" +
	"Ozn\xf8\xbc\x19\xb2\\J\xe1\xab\xc9\xaa3=*" +
	"\xdc\x00L[\xd6\x94\xcf\xe7\xf4\x83\x0d\x86\xac\xa9\x92-" +
	"\x9c\xe2\x08\xaf@\x96\x17\xf4\x9f\x15\xe1\x97\xb9+\\\x94" +
	"\xef\xd8\x8e\xb4\xdd\xa9l\xde\xb3]\xa9\x02.\xab>\xd7" +
	"\x82\xf1\xdcze\x9b=;\x80\x8c\xac\xfa\xa2\xfe\xf8\x0e" +
	"\x97\xc2\xf0G<\xb7X-H{\xd6\x96\xb5\x11O\x94" +
	"Jv\xc1\x16\xae\x04P\xbc\\\xf6\\\xbbZ\x06\x80\x9d" +
	"\xae-}.\xc5\xce\x82;\xc1\xa5\xed)\xdb\xfd\x92\xef" +
	"U\xdd\"d\xe7\xb8.\xd7.W\x84+\xa4\x0f\x19-" +
	"\x9f\xd6\xad\x19\x1d\x12\xab\xf8^\xc9vD\x90\x93\xab'" +
	"D6\xa8k\xaa\xc3P\xc6\x9b\x86\xf2ZC\xea\xf5\xd0" +
	"\x0eet\xb7\x1dn\x8520<\xc3(\x08-\x8a\x94" +
	"\x11\xed\xf0l\x0c\xfd\x98\xb2\xab@(3\x11[S\x0e" +
	"\xc3\x89C\xc7n\x02\xa1c&\x92\x96\xd1b8B\xe8" +
	"\xc0V \xb4\xcfT\x85\xf7Ea:7\xcb\xc9\xca\x16" +
	"\x01\x18F\x156\x10Y\xd9A\x18\x0cw\x002rr" +
	"\x18Y\x1cQ\xdd\xdatb\xcb\xb5\x1b\xe7/h1\x88" +
	"k\x9f\xbdw\xea\xce\xd9EhJ(\x84\xc5\xaa\xc2\xaf" +
	"5}\xa55W(\x0e\x0eM\x08\xcd_\xa7\xa5L\xb4" +
	"-\xa5\xd5\x92\xefjN\xb7\x19\xc8> \x88\xa4\x07\x09" +
	"\"\xadjK\x91\x06\xb2]\xcf\xb5M\x9f\x1a\x01\xd1\xa7" +
	"f@\x1dLo\xa3rh\\T\xab\xfa\xc1\xa6w\xbc" +
	"\xd96\xc4/kD\x9bV\x1a\xe2x\xd3\x10?$8" +
	"T\xe2\xb6#\x8a\xady\xf3\xfc=\xa7\xae\xacF;\xeb" +
	"z\xe3\xf5\x12\xe8\xc6\xba\xdbt\xbd\x0a\xb0\xb3\xeaN\xbb" +
	"\xde\x9ckN\xf37\xfe\x9f\xe4\xf3<\xe3\xeb\x11\xda\xe1" +
	"\xa2z8\xad6\x90\xad\xef\xb8\xb2\xd7\xfb\x9b\xd6\xfa\x19" +
	"\x82\xd9\x82\xe7\xf9E\xecV\x8f\xbe\xff\x87\x81\xf5\x8f\xff" +
	"\xf5P\x1f\xdc\x0d\x98\x9d\xd1Lbw\xfb\xe3\xa2\xb1\xbf" +
	"\xac\xee\xbc>\xdap\x9a\x1d\x11A\\N\xf4\xb6\x86\"" +
	"\x10\x91n\x99o\xaa\xe4}\x82\xddM\x9e\xc5\xaa\xf6\xe0" +
	"\x19r\xf4t\xeb\x189\xad\x8f\xba&]\x15\xe1\x17\x84" +
	"+9N\x89\xb7K9_\xf0\xc6$]L\\\xd9\x08" +
	"h\xd8\xc5p\xf0\xfc7\x00\x00\xff\xff4\x09\xcb<"

func init() {
	schemas.Register(schema_ff3f350f11891951,
		0x8dec5fd8eb3e7c27,
		0x92f4b81bcfdb71b0,
		0x984640f05b3ada4f,
		0x98a2bf8e6ad97ee3,
		0x9e391ae1c6cd2567,
		0xa0915e668c9317ad,
		0xa09aa71427dc64e1,
		0xbd4065087e22ca0d,
		0xbf4e1b07ad88943f,
		0xc2e4a3c8ff61b40a,
		0xdb97e739bf9693c1,
		0xff67c2a593419c29)
}
