// Code generated by capnpc-go. DO NOT EDIT.

package geo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

// Constants defined in geo.capnp.
const (
	EPSG_wgs84  = uint32(4326)
	EPSG_utm21S = uint32(32721)
	EPSG_utm32N = uint32(25832)
	EPSG_gk5    = uint32(31469)
	EPSG_gk4    = uint32(31468)
	EPSG_gk3    = uint32(31467)
)

type CoordType uint16

// CoordType_TypeID is the unique identifier for the type CoordType.
const CoordType_TypeID = 0xe529b4deb322ece8

// Values of CoordType.
const (
	CoordType_gk     CoordType = 0
	CoordType_utm    CoordType = 1
	CoordType_latlon CoordType = 2
)

// String returns the enum's constant name.
func (c CoordType) String() string {
	switch c {
	case CoordType_gk:
		return "gk"
	case CoordType_utm:
		return "utm"
	case CoordType_latlon:
		return "latlon"

	default:
		return ""
	}
}

// CoordTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CoordTypeFromString(c string) CoordType {
	switch c {
	case "gk":
		return CoordType_gk
	case "utm":
		return CoordType_utm
	case "latlon":
		return CoordType_latlon

	default:
		return 0
	}
}

type CoordType_List struct{ capnp.List }

func NewCoordType_List(s *capnp.Segment, sz int32) (CoordType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CoordType_List{l.List}, err
}

func (l CoordType_List) At(i int) CoordType {
	ul := capnp.UInt16List{List: l.List}
	return CoordType(ul.At(i))
}

func (l CoordType_List) Set(i int, v CoordType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type EPSG struct{ capnp.Struct }

// EPSG_TypeID is the unique identifier for the type EPSG.
const EPSG_TypeID = 0xb79427a74eb97fc0

func NewEPSG(s *capnp.Segment) (EPSG, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EPSG{st}, err
}

func NewRootEPSG(s *capnp.Segment) (EPSG, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EPSG{st}, err
}

func ReadRootEPSG(msg *capnp.Message) (EPSG, error) {
	root, err := msg.Root()
	return EPSG{root.Struct()}, err
}

func (s EPSG) String() string {
	str, _ := text.Marshal(0xb79427a74eb97fc0, s.Struct)
	return str
}

// EPSG_List is a list of EPSG.
type EPSG_List struct{ capnp.List }

// NewEPSG creates a new list of EPSG.
func NewEPSG_List(s *capnp.Segment, sz int32) (EPSG_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EPSG_List{l}, err
}

func (s EPSG_List) At(i int) EPSG { return EPSG{s.List.Struct(i)} }

func (s EPSG_List) Set(i int, v EPSG) error { return s.List.SetStruct(i, v.Struct) }

func (s EPSG_List) String() string {
	str, _ := text.MarshalList(0xb79427a74eb97fc0, s.List)
	return str
}

// EPSG_Future is a wrapper for a EPSG promised by a client call.
type EPSG_Future struct{ *capnp.Future }

func (p EPSG_Future) Struct() (EPSG, error) {
	s, err := p.Future.Struct()
	return EPSG{s}, err
}

type UTMCoord struct{ capnp.Struct }

// UTMCoord_TypeID is the unique identifier for the type UTMCoord.
const UTMCoord_TypeID = 0xeb1acd255e40f049

func NewUTMCoord(s *capnp.Segment) (UTMCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UTMCoord{st}, err
}

func NewRootUTMCoord(s *capnp.Segment) (UTMCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UTMCoord{st}, err
}

func ReadRootUTMCoord(msg *capnp.Message) (UTMCoord, error) {
	root, err := msg.Root()
	return UTMCoord{root.Struct()}, err
}

func (s UTMCoord) String() string {
	str, _ := text.Marshal(0xeb1acd255e40f049, s.Struct)
	return str
}

func (s UTMCoord) Zone() uint8 {
	return s.Struct.Uint8(0)
}

func (s UTMCoord) SetZone(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s UTMCoord) LatitudeBand() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UTMCoord) HasLatitudeBand() bool {
	return s.Struct.HasPtr(0)
}

func (s UTMCoord) LatitudeBandBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UTMCoord) SetLatitudeBand(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UTMCoord) R() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s UTMCoord) SetR(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s UTMCoord) H() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s UTMCoord) SetH(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// UTMCoord_List is a list of UTMCoord.
type UTMCoord_List struct{ capnp.List }

// NewUTMCoord creates a new list of UTMCoord.
func NewUTMCoord_List(s *capnp.Segment, sz int32) (UTMCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return UTMCoord_List{l}, err
}

func (s UTMCoord_List) At(i int) UTMCoord { return UTMCoord{s.List.Struct(i)} }

func (s UTMCoord_List) Set(i int, v UTMCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s UTMCoord_List) String() string {
	str, _ := text.MarshalList(0xeb1acd255e40f049, s.List)
	return str
}

// UTMCoord_Future is a wrapper for a UTMCoord promised by a client call.
type UTMCoord_Future struct{ *capnp.Future }

func (p UTMCoord_Future) Struct() (UTMCoord, error) {
	s, err := p.Future.Struct()
	return UTMCoord{s}, err
}

type LatLonCoord struct{ capnp.Struct }

// LatLonCoord_TypeID is the unique identifier for the type LatLonCoord.
const LatLonCoord_TypeID = 0xecf1fc3039cc8ffb

func NewLatLonCoord(s *capnp.Segment) (LatLonCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LatLonCoord{st}, err
}

func NewRootLatLonCoord(s *capnp.Segment) (LatLonCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LatLonCoord{st}, err
}

func ReadRootLatLonCoord(msg *capnp.Message) (LatLonCoord, error) {
	root, err := msg.Root()
	return LatLonCoord{root.Struct()}, err
}

func (s LatLonCoord) String() string {
	str, _ := text.Marshal(0xecf1fc3039cc8ffb, s.Struct)
	return str
}

func (s LatLonCoord) Lat() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s LatLonCoord) SetLat(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s LatLonCoord) Lon() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s LatLonCoord) SetLon(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// LatLonCoord_List is a list of LatLonCoord.
type LatLonCoord_List struct{ capnp.List }

// NewLatLonCoord creates a new list of LatLonCoord.
func NewLatLonCoord_List(s *capnp.Segment, sz int32) (LatLonCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return LatLonCoord_List{l}, err
}

func (s LatLonCoord_List) At(i int) LatLonCoord { return LatLonCoord{s.List.Struct(i)} }

func (s LatLonCoord_List) Set(i int, v LatLonCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s LatLonCoord_List) String() string {
	str, _ := text.MarshalList(0xecf1fc3039cc8ffb, s.List)
	return str
}

// LatLonCoord_Future is a wrapper for a LatLonCoord promised by a client call.
type LatLonCoord_Future struct{ *capnp.Future }

func (p LatLonCoord_Future) Struct() (LatLonCoord, error) {
	s, err := p.Future.Struct()
	return LatLonCoord{s}, err
}

type GKCoord struct{ capnp.Struct }

// GKCoord_TypeID is the unique identifier for the type GKCoord.
const GKCoord_TypeID = 0x97ff7d61786091ae

func NewGKCoord(s *capnp.Segment) (GKCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GKCoord{st}, err
}

func NewRootGKCoord(s *capnp.Segment) (GKCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GKCoord{st}, err
}

func ReadRootGKCoord(msg *capnp.Message) (GKCoord, error) {
	root, err := msg.Root()
	return GKCoord{root.Struct()}, err
}

func (s GKCoord) String() string {
	str, _ := text.Marshal(0x97ff7d61786091ae, s.Struct)
	return str
}

func (s GKCoord) MeridianNo() uint8 {
	return s.Struct.Uint8(0)
}

func (s GKCoord) SetMeridianNo(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s GKCoord) R() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s GKCoord) SetR(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s GKCoord) H() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s GKCoord) SetH(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// GKCoord_List is a list of GKCoord.
type GKCoord_List struct{ capnp.List }

// NewGKCoord creates a new list of GKCoord.
func NewGKCoord_List(s *capnp.Segment, sz int32) (GKCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return GKCoord_List{l}, err
}

func (s GKCoord_List) At(i int) GKCoord { return GKCoord{s.List.Struct(i)} }

func (s GKCoord_List) Set(i int, v GKCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s GKCoord_List) String() string {
	str, _ := text.MarshalList(0x97ff7d61786091ae, s.List)
	return str
}

// GKCoord_Future is a wrapper for a GKCoord promised by a client call.
type GKCoord_Future struct{ *capnp.Future }

func (p GKCoord_Future) Struct() (GKCoord, error) {
	s, err := p.Future.Struct()
	return GKCoord{s}, err
}

type Point2D struct{ capnp.Struct }

// Point2D_TypeID is the unique identifier for the type Point2D.
const Point2D_TypeID = 0xc88fb91c1e6986e2

func NewPoint2D(s *capnp.Segment) (Point2D, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Point2D{st}, err
}

func NewRootPoint2D(s *capnp.Segment) (Point2D, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Point2D{st}, err
}

func ReadRootPoint2D(msg *capnp.Message) (Point2D, error) {
	root, err := msg.Root()
	return Point2D{root.Struct()}, err
}

func (s Point2D) String() string {
	str, _ := text.Marshal(0xc88fb91c1e6986e2, s.Struct)
	return str
}

func (s Point2D) X() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Point2D) SetX(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Point2D) Y() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Point2D) SetY(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Point2D_List is a list of Point2D.
type Point2D_List struct{ capnp.List }

// NewPoint2D creates a new list of Point2D.
func NewPoint2D_List(s *capnp.Segment, sz int32) (Point2D_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Point2D_List{l}, err
}

func (s Point2D_List) At(i int) Point2D { return Point2D{s.List.Struct(i)} }

func (s Point2D_List) Set(i int, v Point2D) error { return s.List.SetStruct(i, v.Struct) }

func (s Point2D_List) String() string {
	str, _ := text.MarshalList(0xc88fb91c1e6986e2, s.List)
	return str
}

// Point2D_Future is a wrapper for a Point2D promised by a client call.
type Point2D_Future struct{ *capnp.Future }

func (p Point2D_Future) Struct() (Point2D, error) {
	s, err := p.Future.Struct()
	return Point2D{s}, err
}

type RowCol struct{ capnp.Struct }

// RowCol_TypeID is the unique identifier for the type RowCol.
const RowCol_TypeID = 0xb0c6993e13e314ad

func NewRowCol(s *capnp.Segment) (RowCol, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RowCol{st}, err
}

func NewRootRowCol(s *capnp.Segment) (RowCol, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return RowCol{st}, err
}

func ReadRootRowCol(msg *capnp.Message) (RowCol, error) {
	root, err := msg.Root()
	return RowCol{root.Struct()}, err
}

func (s RowCol) String() string {
	str, _ := text.Marshal(0xb0c6993e13e314ad, s.Struct)
	return str
}

func (s RowCol) Row() uint64 {
	return s.Struct.Uint64(0)
}

func (s RowCol) SetRow(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s RowCol) Col() uint64 {
	return s.Struct.Uint64(8)
}

func (s RowCol) SetCol(v uint64) {
	s.Struct.SetUint64(8, v)
}

// RowCol_List is a list of RowCol.
type RowCol_List struct{ capnp.List }

// NewRowCol creates a new list of RowCol.
func NewRowCol_List(s *capnp.Segment, sz int32) (RowCol_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return RowCol_List{l}, err
}

func (s RowCol_List) At(i int) RowCol { return RowCol{s.List.Struct(i)} }

func (s RowCol_List) Set(i int, v RowCol) error { return s.List.SetStruct(i, v.Struct) }

func (s RowCol_List) String() string {
	str, _ := text.MarshalList(0xb0c6993e13e314ad, s.List)
	return str
}

// RowCol_Future is a wrapper for a RowCol promised by a client call.
type RowCol_Future struct{ *capnp.Future }

func (p RowCol_Future) Struct() (RowCol, error) {
	s, err := p.Future.Struct()
	return RowCol{s}, err
}

type Coord struct{ capnp.Struct }
type Coord_Which uint16

const (
	Coord_Which_gk     Coord_Which = 0
	Coord_Which_latlon Coord_Which = 1
	Coord_Which_utm    Coord_Which = 2
	Coord_Which_p2D    Coord_Which = 3
	Coord_Which_rowcol Coord_Which = 4
)

func (w Coord_Which) String() string {
	const s = "gklatlonutmp2Drowcol"
	switch w {
	case Coord_Which_gk:
		return s[0:2]
	case Coord_Which_latlon:
		return s[2:8]
	case Coord_Which_utm:
		return s[8:11]
	case Coord_Which_p2D:
		return s[11:14]
	case Coord_Which_rowcol:
		return s[14:20]

	}
	return "Coord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Coord_TypeID is the unique identifier for the type Coord.
const Coord_TypeID = 0xb8f6a6192a7359f8

func NewCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Coord{st}, err
}

func NewRootCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Coord{st}, err
}

func ReadRootCoord(msg *capnp.Message) (Coord, error) {
	root, err := msg.Root()
	return Coord{root.Struct()}, err
}

func (s Coord) String() string {
	str, _ := text.Marshal(0xb8f6a6192a7359f8, s.Struct)
	return str
}

func (s Coord) Which() Coord_Which {
	return Coord_Which(s.Struct.Uint16(0))
}
func (s Coord) Gk() (GKCoord, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != gk")
	}
	p, err := s.Struct.Ptr(0)
	return GKCoord{Struct: p.Struct()}, err
}

func (s Coord) HasGk() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetGk(v GKCoord) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGk sets the gk field to a newly
// allocated GKCoord struct, preferring placement in s's segment.
func (s Coord) NewGk() (GKCoord, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewGKCoord(s.Struct.Segment())
	if err != nil {
		return GKCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Latlon() (LatLonCoord, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != latlon")
	}
	p, err := s.Struct.Ptr(0)
	return LatLonCoord{Struct: p.Struct()}, err
}

func (s Coord) HasLatlon() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetLatlon(v LatLonCoord) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated LatLonCoord struct, preferring placement in s's segment.
func (s Coord) NewLatlon() (LatLonCoord, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Utm() (UTMCoord, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != utm")
	}
	p, err := s.Struct.Ptr(0)
	return UTMCoord{Struct: p.Struct()}, err
}

func (s Coord) HasUtm() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetUtm(v UTMCoord) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewUtm sets the utm field to a newly
// allocated UTMCoord struct, preferring placement in s's segment.
func (s Coord) NewUtm() (UTMCoord, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewUTMCoord(s.Struct.Segment())
	if err != nil {
		return UTMCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) P2D() (Point2D, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != p2D")
	}
	p, err := s.Struct.Ptr(0)
	return Point2D{Struct: p.Struct()}, err
}

func (s Coord) HasP2D() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetP2D(v Point2D) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewP2D sets the p2D field to a newly
// allocated Point2D struct, preferring placement in s's segment.
func (s Coord) NewP2D() (Point2D, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPoint2D(s.Struct.Segment())
	if err != nil {
		return Point2D{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Rowcol() (RowCol, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != rowcol")
	}
	p, err := s.Struct.Ptr(0)
	return RowCol{Struct: p.Struct()}, err
}

func (s Coord) HasRowcol() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetRowcol(v RowCol) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRowcol sets the rowcol field to a newly
// allocated RowCol struct, preferring placement in s's segment.
func (s Coord) NewRowcol() (RowCol, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewRowCol(s.Struct.Segment())
	if err != nil {
		return RowCol{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Coord_List is a list of Coord.
type Coord_List struct{ capnp.List }

// NewCoord creates a new list of Coord.
func NewCoord_List(s *capnp.Segment, sz int32) (Coord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Coord_List{l}, err
}

func (s Coord_List) At(i int) Coord { return Coord{s.List.Struct(i)} }

func (s Coord_List) Set(i int, v Coord) error { return s.List.SetStruct(i, v.Struct) }

func (s Coord_List) String() string {
	str, _ := text.MarshalList(0xb8f6a6192a7359f8, s.List)
	return str
}

// Coord_Future is a wrapper for a Coord promised by a client call.
type Coord_Future struct{ *capnp.Future }

func (p Coord_Future) Struct() (Coord, error) {
	s, err := p.Future.Struct()
	return Coord{s}, err
}

func (p Coord_Future) Gk() GKCoord_Future {
	return GKCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Latlon() LatLonCoord_Future {
	return LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Utm() UTMCoord_Future {
	return UTMCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) P2D() Point2D_Future {
	return Point2D_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Rowcol() RowCol_Future {
	return RowCol_Future{Future: p.Future.Field(0, nil)}
}

type RectBounds struct{ capnp.Struct }

// RectBounds_TypeID is the unique identifier for the type RectBounds.
const RectBounds_TypeID = 0xb952dbe83866da4a

func NewRectBounds(s *capnp.Segment) (RectBounds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RectBounds{st}, err
}

func NewRootRectBounds(s *capnp.Segment) (RectBounds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RectBounds{st}, err
}

func ReadRootRectBounds(msg *capnp.Message) (RectBounds, error) {
	root, err := msg.Root()
	return RectBounds{root.Struct()}, err
}

func (s RectBounds) String() string {
	str, _ := text.Marshal(0xb952dbe83866da4a, s.Struct)
	return str
}

func (s RectBounds) Tl() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s RectBounds) HasTl() bool {
	return s.Struct.HasPtr(0)
}

func (s RectBounds) SetTl(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s RectBounds) Br() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s RectBounds) HasBr() bool {
	return s.Struct.HasPtr(1)
}

func (s RectBounds) SetBr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// RectBounds_List is a list of RectBounds.
type RectBounds_List struct{ capnp.List }

// NewRectBounds creates a new list of RectBounds.
func NewRectBounds_List(s *capnp.Segment, sz int32) (RectBounds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RectBounds_List{l}, err
}

func (s RectBounds_List) At(i int) RectBounds { return RectBounds{s.List.Struct(i)} }

func (s RectBounds_List) Set(i int, v RectBounds) error { return s.List.SetStruct(i, v.Struct) }

func (s RectBounds_List) String() string {
	str, _ := text.MarshalList(0xb952dbe83866da4a, s.List)
	return str
}

// RectBounds_Future is a wrapper for a RectBounds promised by a client call.
type RectBounds_Future struct{ *capnp.Future }

func (p RectBounds_Future) Struct() (RectBounds, error) {
	s, err := p.Future.Struct()
	return RectBounds{s}, err
}

func (p RectBounds_Future) Tl() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p RectBounds_Future) Br() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_9090542079c7fc24 = "x\xda\x94Toh[\xe5\x17>\xcf\xfb\xde\xdc\xdbm" +
	"-\xc9\xed\xcd\xe0\xb7\xf2\xdb\xaaaC;\xd9h\xd3\x15" +
	"f?\xd8\xb9?\xcc?[\xed\xbbDP\x1116\xf1" +
	"6&\xcd\x8d\xe9-i\x8beN\xd6\xd9\xca\xca\xba\xd1" +
	"Q-\x82 \xe8pP\xabS\xd0~\x10T\xfc\xb3\x0f" +
	"\xdb\x07\xbf*+l\xceYY\x85\x89(B\xabW\xde" +
	"\x9b6\xb9\xcb\xeeP?\xe5p\xee\xf3\x9e<\xe79\xcf" +
	"9\xcdg\xd8.\xd6\x12\xe8\xd0\x88D<\xa0:\x97\xa7" +
	"^\xce\xb6\xb1\xe3\xa7I\x0f*\xce\xa7\x87\xe7:\xcf\xdc" +
	"5\xf9\x11\x11\x8c\x11>m\x8cs\x8d(6\xca9b" +
	"\x93\x9c\x81\xc8y\xf7\xe4\xd3\x03\x89ag\x8a\xc4Zp" +
	"g\xf3\xf2\xd7\x83w\xc4'&H\xd1\x88\x8c\x11~\xaa" +
	"\xf4\xc2\x18\xe3\xb3\x04g&\xfc\xbdq\xdfk_\xbd'" +
	"\xb1\xac\x0a\xbbEy\xc5\xd8\xe6FMJ\x91P\xf9g" +
	"}-\xaa\xcb*C\xc6\x98b\x12w\xfex\xbco\xeb" +
	"\x86\xb7\x7f\xffX\x16\xf4\xa0\xf6A\x0b\x10\x193\xcaK" +
	"\xc6\xfb\xf2E\xeb\x8c\xd2\x08\x82\xf3\xd0\xb7\xcf\xee\\\xf8" +
	"\xee\xd0\xdc\xcd5\x03L\x0b\xc1\xf8$p\xd6\xf82 " +
	"\xcb\x7f\x16(\x12\x19mj\xd0\xb9r,\xbd\xe9\xffs" +
	"'\xce\xfb\xf1\xdd\xa6\x9e2\xdaT\x19\xb5\xa8\x92\xefH" +
	"\xcd\xfeM\xaf\xc6\x96\xce\xdf\"\xdb\xb8z\xce8-\x81" +
	"\xb1\x09\x95#\xf6\xba\xea\xca\xf6\xeb\x95\xa9\xc9k\xf3\xe6" +
	"\x85\x7f\x09\x1f\xbe\xe7\x8d\x81/\x92\xb3\x17}\xe0g}" +
	"\xe0\x1b\xc5\xe7\xf3\x97.\xcd^\xf5\x81O\xfb\xc0\x17\x16" +
	"#\x1f\xcc\x7f\xd8\xf4\x03\xe9k=m\xba\xf07Kp" +
	"\xe3\xa4\xfa\x08\xc1y\xf0\xc6\xae\xa7\xb6\\l\xb8^5" +
	"\xec\x00$\xe4-u\xda\x98q\xc1\xef\xa8?\x12\x9c\xa5" +
	"\x13\x17\xeem^\xfee\xd1O\xbd#\xda9cLs" +
	"\x87\xa9I\xf5\x8e\xcd\xec\xcc7/\xcc\xfdv\x0b\xe1\xcb" +
	"\xda\xb4\xf1\x93\x04\xc6\xaej\x1c\xb1\x1b\x1a\x03\xedv\xcc" +
	"\x94\xb5\xbd;\x91\xcf!\xdf\xbe\xaf+\xb6\x7f\xbb\xc93" +
	"m]\x00j\x88\xb5\xd4\xfc<D\xf0\"\xf6?\xbc\xc7" +
	"\xb2\x0aHv\x01\xa2\x96+D\x0a\x88\xf4}O\x10\x89" +
	"\xbd\x1c\xa2\x8bA\x07\xc2\x90\xc9\x83\xf5D\xe2\x01\x0e\x11" +
	"g\xd0\x19\x0b\x83\x11\xe9B&\x0fp\x88\xc7\x18\x9c\xde" +
	"T!\x9dL'r\xc4;-\xa8\xc4\xa0\x12P\xc0:" +
	"bXG@\xcfj\xe4%p\xc8*\xee\xb1\xb2D\x92" +
	"@M\x99@S\x84Hl\xe6\x10\xcd\x1e\x02\xdbd\xf2" +
	"n\x0e\xb1\x83A+XE\xac!\x865\x04\xad\xdb\xca" +
	"\xae\xc6\xe5\xd2\xd4Qj_\xfc\x0f\xf08\xa4)\xea1" +
	"\xe3\x96v\x8f\xd5\xeel\xf7l\xf7\xc6\x88\xc7&\x1b\"" +
	"\x9e\x11\xac\x8f4\x16\xcd\xbe\x9d;:\xfa\xed\xdehK" +
	"L\xfe\xb4F;53\xd3\xa6\x99\x99\x1d\x9a\x99i\xf5" +
	"v'\xc5M\xba\xbd\x85\xb9R\xeb8ns\xc3\x0dD" +
	"b\x80C\x1ce\xa8\xc3_N\xa9\xbb#\xedD\xe2\x05" +
	"\x0e1\xcaP\xc7\xfetJ\xfa\x8e\xc8\x9e_\xe4\x10\xc7" +
	"\x19\xea\xf8\xb2\x13\x06'\xd2\xc7d\xf6(\x87\x98`\xa8" +
	"S\x96\x9c0\x14\"}\\V\x18\xe5\x10\x93\x0c\xdc\xcc" +
	" T\xb9?\x04\x84\x08\x1d\xd9\x84\x9d\xb5r\x08U\xec" +
	"W\xfa\xa0\xf5\xdb\xbd\x08U\x1c\xbc\x92\xcdG\xf7\"T" +
	"Y\xf4\x95\"\x05\xab(\x05\x0fU.V\xe9\xc3MS" +
	"Mu\xdb\xbb\xad`\x7f.\xd9W5\xd8\x06\xbf\xc16" +
	"T\x06\xcb\xed,\xea\xe19GD\xa8'\xf0g\x0a~" +
	"\xe9\xfb\x15\xe8\x18r\\\x99\xd3\xb9\x04u\xd8\xa9\xf8`" +
	">\xe5\xa5\xd2e\xa5sv\x14{\xabx\xd4\xfb\xf1\xa8" +
	"\xaf\xf0\xc0@\xd9\xb7\x83~\xbeuW\xab\xbf\xd15A" +
	"y\xbb\xbe9|\x1bPk\xb4\xb3\x0cZH\xfa\x80\x8a" +
	"Ai\xaa2\xe6Z\xc8\x07c\xf2L\x05\xb1X\xb5\xc8" +
	"\xae\x04qm0\x9frW\xd95\xcf\xc6\x069\x1a}" +
	"}\x84\x08L\xafk'\xe2fF\xcez\xc5\x08\xde\xf7" +
	"\x8f\xc6\x0f\xee\xb1,^p/A\xa8\xacSb+\x91" +
	"x\x92C\xf40\xac\xca\x94z\x8eH$9D^\x1e" +
	"\x02\x94\x8c\xda+\xb5\xeb\xe1\x106\x83\xceY\xc9\xa7\xcf" +
	"\xcbd\x96C\x0c0\x04\x87\xac\\j\xf5*8\xd9\x84" +
	"\x9d\xb6\xfb\x93)\x0a\xeeN\xe4\x92\xa8%\x86\xda\x7f>" +
	"\x16\x07\x12\xf6\x01+\xd7\xe8\xf6\xfa_\x0fF6a\xaf" +
	"\x96\xd4\xe4\x12\xdcn\xa6&\xcf\xb4\x96U\xbe>D\xf8" +
	";\x00\x00\xff\xff\xb1\x9a\x10?"

func init() {
	schemas.Register(schema_9090542079c7fc24,
		0x958c02356c8797e1,
		0x97ff7d61786091ae,
		0xb0c6993e13e314ad,
		0xb79427a74eb97fc0,
		0xb8f6a6192a7359f8,
		0xb952dbe83866da4a,
		0xc88fb91c1e6986e2,
		0xc8fb53981e470885,
		0xcc67dee69497e2f3,
		0xcdaf64c4789f2b7d,
		0xe4afdddddec2511d,
		0xe529b4deb322ece8,
		0xeb1acd255e40f049,
		0xecf1fc3039cc8ffb,
		0xf5b9e8307038ad86)
}
