// Code generated by capnpc-go. DO NOT EDIT.

package geo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

// Constants defined in geo.capnp.
const (
	EPSG_wgs84  = uint32(4326)
	EPSG_utm21S = uint32(32721)
	EPSG_utm32N = uint32(25832)
	EPSG_gk5    = uint32(31469)
	EPSG_gk4    = uint32(31468)
	EPSG_gk3    = uint32(31467)
)

type CoordType uint16

// CoordType_TypeID is the unique identifier for the type CoordType.
const CoordType_TypeID = 0xe529b4deb322ece8

// Values of CoordType.
const (
	CoordType_gk     CoordType = 0
	CoordType_utm    CoordType = 1
	CoordType_latlon CoordType = 2
)

// String returns the enum's constant name.
func (c CoordType) String() string {
	switch c {
	case CoordType_gk:
		return "gk"
	case CoordType_utm:
		return "utm"
	case CoordType_latlon:
		return "latlon"

	default:
		return ""
	}
}

// CoordTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CoordTypeFromString(c string) CoordType {
	switch c {
	case "gk":
		return CoordType_gk
	case "utm":
		return CoordType_utm
	case "latlon":
		return CoordType_latlon

	default:
		return 0
	}
}

type CoordType_List struct{ capnp.List }

func NewCoordType_List(s *capnp.Segment, sz int32) (CoordType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CoordType_List{l.List}, err
}

func (l CoordType_List) At(i int) CoordType {
	ul := capnp.UInt16List{List: l.List}
	return CoordType(ul.At(i))
}

func (l CoordType_List) Set(i int, v CoordType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type EPSG struct{ capnp.Struct }

// EPSG_TypeID is the unique identifier for the type EPSG.
const EPSG_TypeID = 0xb79427a74eb97fc0

func NewEPSG(s *capnp.Segment) (EPSG, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EPSG{st}, err
}

func NewRootEPSG(s *capnp.Segment) (EPSG, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EPSG{st}, err
}

func ReadRootEPSG(msg *capnp.Message) (EPSG, error) {
	root, err := msg.Root()
	return EPSG{root.Struct()}, err
}

func (s EPSG) String() string {
	str, _ := text.Marshal(0xb79427a74eb97fc0, s.Struct)
	return str
}

// EPSG_List is a list of EPSG.
type EPSG_List struct{ capnp.List }

// NewEPSG creates a new list of EPSG.
func NewEPSG_List(s *capnp.Segment, sz int32) (EPSG_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EPSG_List{l}, err
}

func (s EPSG_List) At(i int) EPSG { return EPSG{s.List.Struct(i)} }

func (s EPSG_List) Set(i int, v EPSG) error { return s.List.SetStruct(i, v.Struct) }

func (s EPSG_List) String() string {
	str, _ := text.MarshalList(0xb79427a74eb97fc0, s.List)
	return str
}

// EPSG_Future is a wrapper for a EPSG promised by a client call.
type EPSG_Future struct{ *capnp.Future }

func (p EPSG_Future) Struct() (EPSG, error) {
	s, err := p.Future.Struct()
	return EPSG{s}, err
}

type UTMCoord struct{ capnp.Struct }

// UTMCoord_TypeID is the unique identifier for the type UTMCoord.
const UTMCoord_TypeID = 0xeb1acd255e40f049

func NewUTMCoord(s *capnp.Segment) (UTMCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UTMCoord{st}, err
}

func NewRootUTMCoord(s *capnp.Segment) (UTMCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UTMCoord{st}, err
}

func ReadRootUTMCoord(msg *capnp.Message) (UTMCoord, error) {
	root, err := msg.Root()
	return UTMCoord{root.Struct()}, err
}

func (s UTMCoord) String() string {
	str, _ := text.Marshal(0xeb1acd255e40f049, s.Struct)
	return str
}

func (s UTMCoord) Zone() uint8 {
	return s.Struct.Uint8(0)
}

func (s UTMCoord) SetZone(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s UTMCoord) LatitudeBand() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UTMCoord) HasLatitudeBand() bool {
	return s.Struct.HasPtr(0)
}

func (s UTMCoord) LatitudeBandBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UTMCoord) SetLatitudeBand(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UTMCoord) R() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s UTMCoord) SetR(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s UTMCoord) H() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s UTMCoord) SetH(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// UTMCoord_List is a list of UTMCoord.
type UTMCoord_List struct{ capnp.List }

// NewUTMCoord creates a new list of UTMCoord.
func NewUTMCoord_List(s *capnp.Segment, sz int32) (UTMCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return UTMCoord_List{l}, err
}

func (s UTMCoord_List) At(i int) UTMCoord { return UTMCoord{s.List.Struct(i)} }

func (s UTMCoord_List) Set(i int, v UTMCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s UTMCoord_List) String() string {
	str, _ := text.MarshalList(0xeb1acd255e40f049, s.List)
	return str
}

// UTMCoord_Future is a wrapper for a UTMCoord promised by a client call.
type UTMCoord_Future struct{ *capnp.Future }

func (p UTMCoord_Future) Struct() (UTMCoord, error) {
	s, err := p.Future.Struct()
	return UTMCoord{s}, err
}

type LatLonCoord struct{ capnp.Struct }

// LatLonCoord_TypeID is the unique identifier for the type LatLonCoord.
const LatLonCoord_TypeID = 0xecf1fc3039cc8ffb

func NewLatLonCoord(s *capnp.Segment) (LatLonCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LatLonCoord{st}, err
}

func NewRootLatLonCoord(s *capnp.Segment) (LatLonCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LatLonCoord{st}, err
}

func ReadRootLatLonCoord(msg *capnp.Message) (LatLonCoord, error) {
	root, err := msg.Root()
	return LatLonCoord{root.Struct()}, err
}

func (s LatLonCoord) String() string {
	str, _ := text.Marshal(0xecf1fc3039cc8ffb, s.Struct)
	return str
}

func (s LatLonCoord) Lat() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s LatLonCoord) SetLat(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s LatLonCoord) Lon() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s LatLonCoord) SetLon(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// LatLonCoord_List is a list of LatLonCoord.
type LatLonCoord_List struct{ capnp.List }

// NewLatLonCoord creates a new list of LatLonCoord.
func NewLatLonCoord_List(s *capnp.Segment, sz int32) (LatLonCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return LatLonCoord_List{l}, err
}

func (s LatLonCoord_List) At(i int) LatLonCoord { return LatLonCoord{s.List.Struct(i)} }

func (s LatLonCoord_List) Set(i int, v LatLonCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s LatLonCoord_List) String() string {
	str, _ := text.MarshalList(0xecf1fc3039cc8ffb, s.List)
	return str
}

// LatLonCoord_Future is a wrapper for a LatLonCoord promised by a client call.
type LatLonCoord_Future struct{ *capnp.Future }

func (p LatLonCoord_Future) Struct() (LatLonCoord, error) {
	s, err := p.Future.Struct()
	return LatLonCoord{s}, err
}

type GKCoord struct{ capnp.Struct }

// GKCoord_TypeID is the unique identifier for the type GKCoord.
const GKCoord_TypeID = 0x97ff7d61786091ae

func NewGKCoord(s *capnp.Segment) (GKCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GKCoord{st}, err
}

func NewRootGKCoord(s *capnp.Segment) (GKCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GKCoord{st}, err
}

func ReadRootGKCoord(msg *capnp.Message) (GKCoord, error) {
	root, err := msg.Root()
	return GKCoord{root.Struct()}, err
}

func (s GKCoord) String() string {
	str, _ := text.Marshal(0x97ff7d61786091ae, s.Struct)
	return str
}

func (s GKCoord) MeridianNo() uint8 {
	return s.Struct.Uint8(0)
}

func (s GKCoord) SetMeridianNo(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s GKCoord) R() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s GKCoord) SetR(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

func (s GKCoord) H() float64 {
	return math.Float64frombits(s.Struct.Uint64(16))
}

func (s GKCoord) SetH(v float64) {
	s.Struct.SetUint64(16, math.Float64bits(v))
}

// GKCoord_List is a list of GKCoord.
type GKCoord_List struct{ capnp.List }

// NewGKCoord creates a new list of GKCoord.
func NewGKCoord_List(s *capnp.Segment, sz int32) (GKCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return GKCoord_List{l}, err
}

func (s GKCoord_List) At(i int) GKCoord { return GKCoord{s.List.Struct(i)} }

func (s GKCoord_List) Set(i int, v GKCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s GKCoord_List) String() string {
	str, _ := text.MarshalList(0x97ff7d61786091ae, s.List)
	return str
}

// GKCoord_Future is a wrapper for a GKCoord promised by a client call.
type GKCoord_Future struct{ *capnp.Future }

func (p GKCoord_Future) Struct() (GKCoord, error) {
	s, err := p.Future.Struct()
	return GKCoord{s}, err
}

type Point2D struct{ capnp.Struct }

// Point2D_TypeID is the unique identifier for the type Point2D.
const Point2D_TypeID = 0xc88fb91c1e6986e2

func NewPoint2D(s *capnp.Segment) (Point2D, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Point2D{st}, err
}

func NewRootPoint2D(s *capnp.Segment) (Point2D, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Point2D{st}, err
}

func ReadRootPoint2D(msg *capnp.Message) (Point2D, error) {
	root, err := msg.Root()
	return Point2D{root.Struct()}, err
}

func (s Point2D) String() string {
	str, _ := text.Marshal(0xc88fb91c1e6986e2, s.Struct)
	return str
}

func (s Point2D) X() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s Point2D) SetX(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s Point2D) Y() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s Point2D) SetY(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// Point2D_List is a list of Point2D.
type Point2D_List struct{ capnp.List }

// NewPoint2D creates a new list of Point2D.
func NewPoint2D_List(s *capnp.Segment, sz int32) (Point2D_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Point2D_List{l}, err
}

func (s Point2D_List) At(i int) Point2D { return Point2D{s.List.Struct(i)} }

func (s Point2D_List) Set(i int, v Point2D) error { return s.List.SetStruct(i, v.Struct) }

func (s Point2D_List) String() string {
	str, _ := text.MarshalList(0xc88fb91c1e6986e2, s.List)
	return str
}

// Point2D_Future is a wrapper for a Point2D promised by a client call.
type Point2D_Future struct{ *capnp.Future }

func (p Point2D_Future) Struct() (Point2D, error) {
	s, err := p.Future.Struct()
	return Point2D{s}, err
}

type Coord struct{ capnp.Struct }
type Coord_Which uint16

const (
	Coord_Which_gk     Coord_Which = 0
	Coord_Which_latlon Coord_Which = 1
	Coord_Which_utm    Coord_Which = 2
	Coord_Which_p2D    Coord_Which = 3
)

func (w Coord_Which) String() string {
	const s = "gklatlonutmp2D"
	switch w {
	case Coord_Which_gk:
		return s[0:2]
	case Coord_Which_latlon:
		return s[2:8]
	case Coord_Which_utm:
		return s[8:11]
	case Coord_Which_p2D:
		return s[11:14]

	}
	return "Coord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Coord_TypeID is the unique identifier for the type Coord.
const Coord_TypeID = 0xb8f6a6192a7359f8

func NewCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Coord{st}, err
}

func NewRootCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Coord{st}, err
}

func ReadRootCoord(msg *capnp.Message) (Coord, error) {
	root, err := msg.Root()
	return Coord{root.Struct()}, err
}

func (s Coord) String() string {
	str, _ := text.Marshal(0xb8f6a6192a7359f8, s.Struct)
	return str
}

func (s Coord) Which() Coord_Which {
	return Coord_Which(s.Struct.Uint16(0))
}
func (s Coord) Gk() (GKCoord, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != gk")
	}
	p, err := s.Struct.Ptr(0)
	return GKCoord{Struct: p.Struct()}, err
}

func (s Coord) HasGk() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetGk(v GKCoord) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGk sets the gk field to a newly
// allocated GKCoord struct, preferring placement in s's segment.
func (s Coord) NewGk() (GKCoord, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewGKCoord(s.Struct.Segment())
	if err != nil {
		return GKCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Latlon() (LatLonCoord, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != latlon")
	}
	p, err := s.Struct.Ptr(0)
	return LatLonCoord{Struct: p.Struct()}, err
}

func (s Coord) HasLatlon() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetLatlon(v LatLonCoord) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated LatLonCoord struct, preferring placement in s's segment.
func (s Coord) NewLatlon() (LatLonCoord, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Utm() (UTMCoord, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != utm")
	}
	p, err := s.Struct.Ptr(0)
	return UTMCoord{Struct: p.Struct()}, err
}

func (s Coord) HasUtm() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetUtm(v UTMCoord) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewUtm sets the utm field to a newly
// allocated UTMCoord struct, preferring placement in s's segment.
func (s Coord) NewUtm() (UTMCoord, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewUTMCoord(s.Struct.Segment())
	if err != nil {
		return UTMCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) P2D() (Point2D, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != p2D")
	}
	p, err := s.Struct.Ptr(0)
	return Point2D{Struct: p.Struct()}, err
}

func (s Coord) HasP2D() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetP2D(v Point2D) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewP2D sets the p2D field to a newly
// allocated Point2D struct, preferring placement in s's segment.
func (s Coord) NewP2D() (Point2D, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPoint2D(s.Struct.Segment())
	if err != nil {
		return Point2D{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Coord_List is a list of Coord.
type Coord_List struct{ capnp.List }

// NewCoord creates a new list of Coord.
func NewCoord_List(s *capnp.Segment, sz int32) (Coord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Coord_List{l}, err
}

func (s Coord_List) At(i int) Coord { return Coord{s.List.Struct(i)} }

func (s Coord_List) Set(i int, v Coord) error { return s.List.SetStruct(i, v.Struct) }

func (s Coord_List) String() string {
	str, _ := text.MarshalList(0xb8f6a6192a7359f8, s.List)
	return str
}

// Coord_Future is a wrapper for a Coord promised by a client call.
type Coord_Future struct{ *capnp.Future }

func (p Coord_Future) Struct() (Coord, error) {
	s, err := p.Future.Struct()
	return Coord{s}, err
}

func (p Coord_Future) Gk() GKCoord_Future {
	return GKCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Latlon() LatLonCoord_Future {
	return LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Utm() UTMCoord_Future {
	return UTMCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) P2D() Point2D_Future {
	return Point2D_Future{Future: p.Future.Field(0, nil)}
}

type RectBounds struct{ capnp.Struct }

// RectBounds_TypeID is the unique identifier for the type RectBounds.
const RectBounds_TypeID = 0xb952dbe83866da4a

func NewRectBounds(s *capnp.Segment) (RectBounds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RectBounds{st}, err
}

func NewRootRectBounds(s *capnp.Segment) (RectBounds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RectBounds{st}, err
}

func ReadRootRectBounds(msg *capnp.Message) (RectBounds, error) {
	root, err := msg.Root()
	return RectBounds{root.Struct()}, err
}

func (s RectBounds) String() string {
	str, _ := text.Marshal(0xb952dbe83866da4a, s.Struct)
	return str
}

func (s RectBounds) Tl() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s RectBounds) HasTl() bool {
	return s.Struct.HasPtr(0)
}

func (s RectBounds) SetTl(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s RectBounds) Br() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s RectBounds) HasBr() bool {
	return s.Struct.HasPtr(1)
}

func (s RectBounds) SetBr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// RectBounds_List is a list of RectBounds.
type RectBounds_List struct{ capnp.List }

// NewRectBounds creates a new list of RectBounds.
func NewRectBounds_List(s *capnp.Segment, sz int32) (RectBounds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RectBounds_List{l}, err
}

func (s RectBounds_List) At(i int) RectBounds { return RectBounds{s.List.Struct(i)} }

func (s RectBounds_List) Set(i int, v RectBounds) error { return s.List.SetStruct(i, v.Struct) }

func (s RectBounds_List) String() string {
	str, _ := text.MarshalList(0xb952dbe83866da4a, s.List)
	return str
}

// RectBounds_Future is a wrapper for a RectBounds promised by a client call.
type RectBounds_Future struct{ *capnp.Future }

func (p RectBounds_Future) Struct() (RectBounds, error) {
	s, err := p.Future.Struct()
	return RectBounds{s}, err
}

func (p RectBounds_Future) Tl() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p RectBounds_Future) Br() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_9090542079c7fc24 = "x\xda\x8c\x94_h\x1cU\x14\xc6\xcfw\xef\xccNH" +
	"\x13vg'\x05\x13\x9a\xc6,\x0d6\x15K\xb2I " +
	"\xeeKj\x9a\x10\xff\xa4q\xa7\x1b\xc1H\x95\x8e\xddq" +
	"\xb2\xdd?\xb3&\x13\xf2\x07JA\xb0\xbe\x08\xad\xa5\x12" +
	"\xc9\x8b\xe0\x83BA\x03U\xd0<\x08*\x8a\x11\x9a\x07" +
	"\xc1'%\x81\x16\xdb\x06\x1aA\x91\x8a\xd2\xc4\x91;\x9b" +
	"\xdd\x197[\xf4i/g\x7f\xf7p\xee\xf7}g\xba" +
	"\xce\xb2c\xac[\xbe\x13\"\xd2\x93r\xc8\xbd\xb1\xf8F" +
	"\xae\x8f\xbd\xf96\xa9a\xc9\xfd\xe2\xfc\xca\xd8\x07\x8f\\" +
	"\xf9\x94\x08\xda\x04_\xd2\x0c\xae\x10\xa5Nq\x8e\xd4$" +
	"g r?z\xeb\xf4\x9cq\xce]$\xbd\x1e\xdc=" +
	"\xb4\xfd\xed\xfc\xc3\xe3\x97.\x91\xa4\x10i\x13\xfcr\xe9" +
	"\x86\xf6\"_&\xf8\xdd\xd4zT\xa1\x7f\xf1\x05m\x87" +
	"[\xc4\xdd?'\xa6\x8f4\xbf\xff\xc7g\xa2a\x80\x1a" +
	"\x86\"\x11i\xed\xd2kZ\x87w\xa3]\xbaCp\x9f" +
	"\xfe\xf1\x95\xfe\xcd\x9fN\xae\xfc\xbb\xa5\xcc\x94\x08\xb4{" +
	"\xd2Um\xa7\xd4]\x9a%\xd2\xf2r\xd8\xbdy!s" +
	"\xf0\xc0\xca\xc5U\xd1\x9dU\xcd`\xca\x97\xb5\xbc,N" +
	"\x19y\x96\xe0\xbe^7r\xf0\x9d\xd4\xfd\xd5=J|" +
	"#_\xd3\xd6\x04\x98Z\x959R?\xc8\x9e\x12\xbf\xdf" +
	"\\\xbcr{\xc3\xba\xfe?\xf1s\x8f\xbe;\xf7uz" +
	"y\xad\x06~\xb5\x06\xde\xaa\x7f\xb5\xb1\xbe\xbe\xfcs\x0d" +
	"|\xa9\x06\xbe\xb9\x15\xfbx\xe3\x93\xce[\xa4\xd6\x07\x9e" +
	"\xe9\xe1\xef\x95p\xed;\xf9Y\x82\xfb\xd4\xaf\xc7^\xea" +
	"Xk\xb9[\xe5\x9f\x0c\x81\xac\xcbK\xda-\x0f\xbe!" +
	"\x0b\xb5\xef_\xbc\xfex\xd7\xf6o[\xb5\xd4[\x09]" +
	"\xd3\xbe\x0c\x89\xd3\xe7!\xa1\xde\x85\x0f\xfb\x8b]\x9b+" +
	"\xf7\xf6\x0c\xdc\xac,i\xed\x8a\x18\xf8\x80\xc2\x91:\xac" +
	"0\xd0\xa0k\x99\xf6\xd13F\xb1\x80bb8\x99\x1a" +
	"9j\xf1l_\x12@\x1d\xb1\xee\xba_\x16\x08Ab" +
	"\xe4\x99\xe3\xb6=\x85t\x12\xd0\x1b\xb8D$\x81H\x1d" +
	"~\x81H\x1f\xe2\xd0\x93\x0c*\xd0\x04Q<\x11%\xd2" +
	"\x9f\xe4\xd0\xc7\x19T\xc6\x9a\xc0\x88T]\x14G9\xf4" +
	"\xe7\x19\xdc\xbc9\x95Ig\x8c\x02\xf11\x1b!b\x08" +
	"\x110\x85}\xc4\xb0\x8f\x80\xc9\xf2\xa92\x00\x0d\x94f" +
	"\xd4\x1f\x02\x026v\xc6\x03\x89\xe9H\x04\xf2\xd0\x9e\x08" +
	"lUk,\xe0es,\xa0\xd3\xfeX\xdb\xac5\xdd" +
	"\xdf;0\xe3\xe4\xe3\xdd)\xf1\xd3\x13\x1fS\xacl\x9f" +
	"be{\x15+\xdb\x13\xd4@(\x90&\xa1@\x84K" +
	"\x0d\xae\xebI`\xb4\x10\xe9\xa78\xf4I\x86F\xfc\xed" +
	"\x9640\x13D\xfai\x0e=\xc7\xd0\xc8v\xdc\x92\x08" +
	"\x99\x18\x91\x9e\xe6\xd0\x8b\x0c\x8d|\xdbm\x02'R\xf3" +
	"\xa2:\xc9\xa1;\x0c\xdc\xca\"\xe2o8\x01\x11\xc2@" +
	"\xceprv\x01\x11?\x0d\xa5?\x94\x19'\x8f\x88\x1f" +
	"\xa8\xddj1>\x84\x88\xbfw\xa5j\xf0!'\xcd3" +
	"\xce\xa0\x1d\x9e)\xa4\xa7\xc5k\xea*~v\x8a\xc7\x1c" +
	"\xe2\xd0\xbb\x02~>&\x8a\x879\xf4^\x06\xee\xe4\x10" +
	"E\xe0#@\x84(\x81\xbf<U\xab\xfc\x84\x04\x15\x0b" +
	"\xae\xa7[\xa6`\xd0\x80c\x8e\xcf\x17\xcd\xe0(I;" +
	"Sp\xe2\x18\xaa\x9a#Zk\x8e\xa8?\x07\xe6*i" +
	"\x99\xdf\x93\x96r\xa0g\xda<W+\x99\xfe\xfe\xfc\x03" +
	"\xa0\x9e\xf8X\x05\xdaL\xd7\x80f\xc3\"%\x15\xe6v" +
	"\xa4\x06c\xf1\xacOlU\xad\x8f'\xc1\xb82_4" +
	"\xbd\x05\xf2\xd2\xd0\xda\"\xacQ\xf7\xc7\x88\xc0\xd4\xc6\x04" +
	"\x11\xb7\xb2\xc2\xd2]\xbf\x83\xf7\x9f\x1b?q\xdc\xb6\xf9" +
	"Tz7}\xbb:\x19G\xfc\xf0\x95e2\xcf\xfa!" +
	"S\x19J\xc9\xcbG\xfd\x8c\xa9\x9c\x95\x82\xf7\xaa(\xe6" +
	"8\xf49\x86\xf0\x82]0\xcb\xbb\xe8\xe6\x0c'\xe3\xcc" +
	"\xa4M\x0a\x0f\x1a\x854\x1a\x88\xa1\xe1?V\x14\xc5\xc4" +
	"\xa8\xe1\x8c\xda\x856\xef\xadU~\xc6j\xf9\x19\xf3\xfd" +
	"Tr\x86Sn\xa9\x88\xac?\xc8S\x8bg{**" +
	"\xdf] \xfc\x13\x00\x00\xff\xff\xa7\xab\xebV"

func init() {
	schemas.Register(schema_9090542079c7fc24,
		0x958c02356c8797e1,
		0x97ff7d61786091ae,
		0xb79427a74eb97fc0,
		0xb8f6a6192a7359f8,
		0xb952dbe83866da4a,
		0xc88fb91c1e6986e2,
		0xc8fb53981e470885,
		0xcc67dee69497e2f3,
		0xcdaf64c4789f2b7d,
		0xe4afdddddec2511d,
		0xe529b4deb322ece8,
		0xeb1acd255e40f049,
		0xecf1fc3039cc8ffb,
		0xf5b9e8307038ad86)
}
