// Code generated by capnpc-go. DO NOT EDIT.

package geo

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
	strconv "strconv"
)

// Constants defined in geo_coord.capnp.
const (
	EPSG_wgs84  = uint32(4326)
	EPSG_utm21S = uint32(32721)
	EPSG_utm32N = uint32(25832)
	EPSG_gk5    = uint32(31469)
	EPSG_gk4    = uint32(31468)
	EPSG_gk3    = uint32(31467)
)

type CoordType uint16

// CoordType_TypeID is the unique identifier for the type CoordType.
const CoordType_TypeID = 0xe529b4deb322ece8

// Values of CoordType.
const (
	CoordType_gk     CoordType = 0
	CoordType_utm    CoordType = 1
	CoordType_latlon CoordType = 2
)

// String returns the enum's constant name.
func (c CoordType) String() string {
	switch c {
	case CoordType_gk:
		return "gk"
	case CoordType_utm:
		return "utm"
	case CoordType_latlon:
		return "latlon"

	default:
		return ""
	}
}

// CoordTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CoordTypeFromString(c string) CoordType {
	switch c {
	case "gk":
		return CoordType_gk
	case "utm":
		return CoordType_utm
	case "latlon":
		return CoordType_latlon

	default:
		return 0
	}
}

type CoordType_List struct{ capnp.List }

func NewCoordType_List(s *capnp.Segment, sz int32) (CoordType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CoordType_List{l.List}, err
}

func (l CoordType_List) At(i int) CoordType {
	ul := capnp.UInt16List{List: l.List}
	return CoordType(ul.At(i))
}

func (l CoordType_List) Set(i int, v CoordType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type EPSG struct{ capnp.Struct }

// EPSG_TypeID is the unique identifier for the type EPSG.
const EPSG_TypeID = 0xb79427a74eb97fc0

func NewEPSG(s *capnp.Segment) (EPSG, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EPSG{st}, err
}

func NewRootEPSG(s *capnp.Segment) (EPSG, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return EPSG{st}, err
}

func ReadRootEPSG(msg *capnp.Message) (EPSG, error) {
	root, err := msg.Root()
	return EPSG{root.Struct()}, err
}

func (s EPSG) String() string {
	str, _ := text.Marshal(0xb79427a74eb97fc0, s.Struct)
	return str
}

// EPSG_List is a list of EPSG.
type EPSG_List struct{ capnp.List }

// NewEPSG creates a new list of EPSG.
func NewEPSG_List(s *capnp.Segment, sz int32) (EPSG_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return EPSG_List{l}, err
}

func (s EPSG_List) At(i int) EPSG { return EPSG{s.List.Struct(i)} }

func (s EPSG_List) Set(i int, v EPSG) error { return s.List.SetStruct(i, v.Struct) }

func (s EPSG_List) String() string {
	str, _ := text.MarshalList(0xb79427a74eb97fc0, s.List)
	return str
}

// EPSG_Future is a wrapper for a EPSG promised by a client call.
type EPSG_Future struct{ *capnp.Future }

func (p EPSG_Future) Struct() (EPSG, error) {
	s, err := p.Future.Struct()
	return EPSG{s}, err
}

type UTMCoord struct{ capnp.Struct }

// UTMCoord_TypeID is the unique identifier for the type UTMCoord.
const UTMCoord_TypeID = 0xeb1acd255e40f049

func NewUTMCoord(s *capnp.Segment) (UTMCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UTMCoord{st}, err
}

func NewRootUTMCoord(s *capnp.Segment) (UTMCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return UTMCoord{st}, err
}

func ReadRootUTMCoord(msg *capnp.Message) (UTMCoord, error) {
	root, err := msg.Root()
	return UTMCoord{root.Struct()}, err
}

func (s UTMCoord) String() string {
	str, _ := text.Marshal(0xeb1acd255e40f049, s.Struct)
	return str
}

func (s UTMCoord) Zone() uint8 {
	return s.Struct.Uint8(0)
}

func (s UTMCoord) SetZone(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s UTMCoord) LatitudeBand() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s UTMCoord) HasLatitudeBand() bool {
	return s.Struct.HasPtr(0)
}

func (s UTMCoord) LatitudeBandBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s UTMCoord) SetLatitudeBand(v string) error {
	return s.Struct.SetText(0, v)
}

func (s UTMCoord) R() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s UTMCoord) SetR(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s UTMCoord) H() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s UTMCoord) SetH(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// UTMCoord_List is a list of UTMCoord.
type UTMCoord_List struct{ capnp.List }

// NewUTMCoord creates a new list of UTMCoord.
func NewUTMCoord_List(s *capnp.Segment, sz int32) (UTMCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return UTMCoord_List{l}, err
}

func (s UTMCoord_List) At(i int) UTMCoord { return UTMCoord{s.List.Struct(i)} }

func (s UTMCoord_List) Set(i int, v UTMCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s UTMCoord_List) String() string {
	str, _ := text.MarshalList(0xeb1acd255e40f049, s.List)
	return str
}

// UTMCoord_Future is a wrapper for a UTMCoord promised by a client call.
type UTMCoord_Future struct{ *capnp.Future }

func (p UTMCoord_Future) Struct() (UTMCoord, error) {
	s, err := p.Future.Struct()
	return UTMCoord{s}, err
}

type LatLonCoord struct{ capnp.Struct }

// LatLonCoord_TypeID is the unique identifier for the type LatLonCoord.
const LatLonCoord_TypeID = 0xecf1fc3039cc8ffb

func NewLatLonCoord(s *capnp.Segment) (LatLonCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LatLonCoord{st}, err
}

func NewRootLatLonCoord(s *capnp.Segment) (LatLonCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return LatLonCoord{st}, err
}

func ReadRootLatLonCoord(msg *capnp.Message) (LatLonCoord, error) {
	root, err := msg.Root()
	return LatLonCoord{root.Struct()}, err
}

func (s LatLonCoord) String() string {
	str, _ := text.Marshal(0xecf1fc3039cc8ffb, s.Struct)
	return str
}

func (s LatLonCoord) Lat() float64 {
	return math.Float64frombits(s.Struct.Uint64(0))
}

func (s LatLonCoord) SetLat(v float64) {
	s.Struct.SetUint64(0, math.Float64bits(v))
}

func (s LatLonCoord) Lon() float64 {
	return math.Float64frombits(s.Struct.Uint64(8))
}

func (s LatLonCoord) SetLon(v float64) {
	s.Struct.SetUint64(8, math.Float64bits(v))
}

// LatLonCoord_List is a list of LatLonCoord.
type LatLonCoord_List struct{ capnp.List }

// NewLatLonCoord creates a new list of LatLonCoord.
func NewLatLonCoord_List(s *capnp.Segment, sz int32) (LatLonCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return LatLonCoord_List{l}, err
}

func (s LatLonCoord_List) At(i int) LatLonCoord { return LatLonCoord{s.List.Struct(i)} }

func (s LatLonCoord_List) Set(i int, v LatLonCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s LatLonCoord_List) String() string {
	str, _ := text.MarshalList(0xecf1fc3039cc8ffb, s.List)
	return str
}

// LatLonCoord_Future is a wrapper for a LatLonCoord promised by a client call.
type LatLonCoord_Future struct{ *capnp.Future }

func (p LatLonCoord_Future) Struct() (LatLonCoord, error) {
	s, err := p.Future.Struct()
	return LatLonCoord{s}, err
}

type GKCoord struct{ capnp.Struct }

// GKCoord_TypeID is the unique identifier for the type GKCoord.
const GKCoord_TypeID = 0x97ff7d61786091ae

func NewGKCoord(s *capnp.Segment) (GKCoord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GKCoord{st}, err
}

func NewRootGKCoord(s *capnp.Segment) (GKCoord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0})
	return GKCoord{st}, err
}

func ReadRootGKCoord(msg *capnp.Message) (GKCoord, error) {
	root, err := msg.Root()
	return GKCoord{root.Struct()}, err
}

func (s GKCoord) String() string {
	str, _ := text.Marshal(0x97ff7d61786091ae, s.Struct)
	return str
}

func (s GKCoord) MeridianNo() uint8 {
	return s.Struct.Uint8(0)
}

func (s GKCoord) SetMeridianNo(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s GKCoord) R() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s GKCoord) SetR(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s GKCoord) H() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s GKCoord) SetH(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// GKCoord_List is a list of GKCoord.
type GKCoord_List struct{ capnp.List }

// NewGKCoord creates a new list of GKCoord.
func NewGKCoord_List(s *capnp.Segment, sz int32) (GKCoord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 0}, sz)
	return GKCoord_List{l}, err
}

func (s GKCoord_List) At(i int) GKCoord { return GKCoord{s.List.Struct(i)} }

func (s GKCoord_List) Set(i int, v GKCoord) error { return s.List.SetStruct(i, v.Struct) }

func (s GKCoord_List) String() string {
	str, _ := text.MarshalList(0x97ff7d61786091ae, s.List)
	return str
}

// GKCoord_Future is a wrapper for a GKCoord promised by a client call.
type GKCoord_Future struct{ *capnp.Future }

func (p GKCoord_Future) Struct() (GKCoord, error) {
	s, err := p.Future.Struct()
	return GKCoord{s}, err
}

type Point2D struct{ capnp.Struct }

// Point2D_TypeID is the unique identifier for the type Point2D.
const Point2D_TypeID = 0xc88fb91c1e6986e2

func NewPoint2D(s *capnp.Segment) (Point2D, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Point2D{st}, err
}

func NewRootPoint2D(s *capnp.Segment) (Point2D, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Point2D{st}, err
}

func ReadRootPoint2D(msg *capnp.Message) (Point2D, error) {
	root, err := msg.Root()
	return Point2D{root.Struct()}, err
}

func (s Point2D) String() string {
	str, _ := text.Marshal(0xc88fb91c1e6986e2, s.Struct)
	return str
}

func (s Point2D) X() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s Point2D) SetX(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s Point2D) Y() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Point2D) SetY(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

// Point2D_List is a list of Point2D.
type Point2D_List struct{ capnp.List }

// NewPoint2D creates a new list of Point2D.
func NewPoint2D_List(s *capnp.Segment, sz int32) (Point2D_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return Point2D_List{l}, err
}

func (s Point2D_List) At(i int) Point2D { return Point2D{s.List.Struct(i)} }

func (s Point2D_List) Set(i int, v Point2D) error { return s.List.SetStruct(i, v.Struct) }

func (s Point2D_List) String() string {
	str, _ := text.MarshalList(0xc88fb91c1e6986e2, s.List)
	return str
}

// Point2D_Future is a wrapper for a Point2D promised by a client call.
type Point2D_Future struct{ *capnp.Future }

func (p Point2D_Future) Struct() (Point2D, error) {
	s, err := p.Future.Struct()
	return Point2D{s}, err
}

type Coord struct{ capnp.Struct }
type Coord_Which uint16

const (
	Coord_Which_gk     Coord_Which = 0
	Coord_Which_latlon Coord_Which = 1
	Coord_Which_utm    Coord_Which = 2
	Coord_Which_p2D    Coord_Which = 3
)

func (w Coord_Which) String() string {
	const s = "gklatlonutmp2D"
	switch w {
	case Coord_Which_gk:
		return s[0:2]
	case Coord_Which_latlon:
		return s[2:8]
	case Coord_Which_utm:
		return s[8:11]
	case Coord_Which_p2D:
		return s[11:14]

	}
	return "Coord_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Coord_TypeID is the unique identifier for the type Coord.
const Coord_TypeID = 0xb8f6a6192a7359f8

func NewCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Coord{st}, err
}

func NewRootCoord(s *capnp.Segment) (Coord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Coord{st}, err
}

func ReadRootCoord(msg *capnp.Message) (Coord, error) {
	root, err := msg.Root()
	return Coord{root.Struct()}, err
}

func (s Coord) String() string {
	str, _ := text.Marshal(0xb8f6a6192a7359f8, s.Struct)
	return str
}

func (s Coord) Which() Coord_Which {
	return Coord_Which(s.Struct.Uint16(0))
}
func (s Coord) Gk() (GKCoord, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != gk")
	}
	p, err := s.Struct.Ptr(0)
	return GKCoord{Struct: p.Struct()}, err
}

func (s Coord) HasGk() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetGk(v GKCoord) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGk sets the gk field to a newly
// allocated GKCoord struct, preferring placement in s's segment.
func (s Coord) NewGk() (GKCoord, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewGKCoord(s.Struct.Segment())
	if err != nil {
		return GKCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Latlon() (LatLonCoord, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != latlon")
	}
	p, err := s.Struct.Ptr(0)
	return LatLonCoord{Struct: p.Struct()}, err
}

func (s Coord) HasLatlon() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetLatlon(v LatLonCoord) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewLatlon sets the latlon field to a newly
// allocated LatLonCoord struct, preferring placement in s's segment.
func (s Coord) NewLatlon() (LatLonCoord, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewLatLonCoord(s.Struct.Segment())
	if err != nil {
		return LatLonCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) Utm() (UTMCoord, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != utm")
	}
	p, err := s.Struct.Ptr(0)
	return UTMCoord{Struct: p.Struct()}, err
}

func (s Coord) HasUtm() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetUtm(v UTMCoord) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewUtm sets the utm field to a newly
// allocated UTMCoord struct, preferring placement in s's segment.
func (s Coord) NewUtm() (UTMCoord, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewUTMCoord(s.Struct.Segment())
	if err != nil {
		return UTMCoord{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Coord) P2D() (Point2D, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != p2D")
	}
	p, err := s.Struct.Ptr(0)
	return Point2D{Struct: p.Struct()}, err
}

func (s Coord) HasP2D() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Coord) SetP2D(v Point2D) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewP2D sets the p2D field to a newly
// allocated Point2D struct, preferring placement in s's segment.
func (s Coord) NewP2D() (Point2D, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPoint2D(s.Struct.Segment())
	if err != nil {
		return Point2D{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Coord_List is a list of Coord.
type Coord_List struct{ capnp.List }

// NewCoord creates a new list of Coord.
func NewCoord_List(s *capnp.Segment, sz int32) (Coord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Coord_List{l}, err
}

func (s Coord_List) At(i int) Coord { return Coord{s.List.Struct(i)} }

func (s Coord_List) Set(i int, v Coord) error { return s.List.SetStruct(i, v.Struct) }

func (s Coord_List) String() string {
	str, _ := text.MarshalList(0xb8f6a6192a7359f8, s.List)
	return str
}

// Coord_Future is a wrapper for a Coord promised by a client call.
type Coord_Future struct{ *capnp.Future }

func (p Coord_Future) Struct() (Coord, error) {
	s, err := p.Future.Struct()
	return Coord{s}, err
}

func (p Coord_Future) Gk() GKCoord_Future {
	return GKCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Latlon() LatLonCoord_Future {
	return LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) Utm() UTMCoord_Future {
	return UTMCoord_Future{Future: p.Future.Field(0, nil)}
}

func (p Coord_Future) P2D() Point2D_Future {
	return Point2D_Future{Future: p.Future.Field(0, nil)}
}

type RectBounds struct{ capnp.Struct }

// RectBounds_TypeID is the unique identifier for the type RectBounds.
const RectBounds_TypeID = 0xb952dbe83866da4a

func NewRectBounds(s *capnp.Segment) (RectBounds, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RectBounds{st}, err
}

func NewRootRectBounds(s *capnp.Segment) (RectBounds, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return RectBounds{st}, err
}

func ReadRootRectBounds(msg *capnp.Message) (RectBounds, error) {
	root, err := msg.Root()
	return RectBounds{root.Struct()}, err
}

func (s RectBounds) String() string {
	str, _ := text.Marshal(0xb952dbe83866da4a, s.Struct)
	return str
}

func (s RectBounds) Tl() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s RectBounds) HasTl() bool {
	return s.Struct.HasPtr(0)
}

func (s RectBounds) SetTl(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s RectBounds) Br() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s RectBounds) HasBr() bool {
	return s.Struct.HasPtr(1)
}

func (s RectBounds) SetBr(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// RectBounds_List is a list of RectBounds.
type RectBounds_List struct{ capnp.List }

// NewRectBounds creates a new list of RectBounds.
func NewRectBounds_List(s *capnp.Segment, sz int32) (RectBounds_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return RectBounds_List{l}, err
}

func (s RectBounds_List) At(i int) RectBounds { return RectBounds{s.List.Struct(i)} }

func (s RectBounds_List) Set(i int, v RectBounds) error { return s.List.SetStruct(i, v.Struct) }

func (s RectBounds_List) String() string {
	str, _ := text.MarshalList(0xb952dbe83866da4a, s.List)
	return str
}

// RectBounds_Future is a wrapper for a RectBounds promised by a client call.
type RectBounds_Future struct{ *capnp.Future }

func (p RectBounds_Future) Struct() (RectBounds, error) {
	s, err := p.Future.Struct()
	return RectBounds{s}, err
}

func (p RectBounds_Future) Tl() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p RectBounds_Future) Br() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_9090542079c7fc24 = "x\xda\x84\x94[h\x1cU\x18\xc7\xbf\xef\x9c=;\x91" +
	"f\xc9\xcc\x9e\x16l0\xad.-\x9aJK\xb2I " +
	"\xe6%5M\x88\x974\xe6t#\xb4\xe2%cv\x9c" +
	"\xac{\x995\x995\x17\x08}\xb2\xbe\x08\xadP\x89o" +
	"\xbe)\x08\x1aPA\xf3&A\xb0\x84\xf6A\xc1\x07\xa3" +
	"\x09&4\xed\x96&\xd0\xe2\x05\xa1\xa9#gf\xb33" +
	"\xcdl\xf4i\x87o\x7fs\xf8\x9f\xff\xf7\xffO\xcb\xdb" +
	"\xe4$ie7\xa3\x00b\x88E\x9d\xb5\xb9ws\x1d" +
	"\xe4\xbd\x0f@;\x10q\xbe=\xbf0\xf8\xc9\xe3\x97\xbf" +
	"\x06@~\x8e.q\x83*\x00\xa9\x11J1\x95\xa3\x04" +
	"\x01\x9c\xcf\xdf\x1f\x99\xd2g\x9d9\x10*R\xe7\xc8\xf6" +
	"\xf7\xd3\x8f\x0e_\xba\x04\x11\x05\x80\xbfB\x17\xbd7\xb8" +
	"N\xe7\x01\xfd\xd34\x15w\xa1\xf7\xe9\xa7\x9cEL\xa0" +
	"\xce\xdf\xe7&\x8e\x1d\xfc\xf8\xafo\xe4\x81\x01\xaa\x0f\x95" +
	"\x08\x00o\x8e|\xc1[\xdd7\x8eGn\x02:\xcf-" +
	"\xbf\xd1Y\xfe\xe5\xcc\xc2\x83G2\xa2\xa8\xc8\x91-\xf3" +
	"\x18\x93\xecCl\x12\x80\xcf\xb2\x06g\xfdB\xe6\xd0#" +
	"\x0b\x17\xaf\xc8\xd3\xc9.\x0d%\xb6\xc8g]~\x9aM" +
	"\x02:\xef\xd4\xf5\x1f\xfa0u\xefJ\xc8\x89\x9f\xd8:" +
	"_\x93`\xeaWF1Uf\xae\x13\xbf\xaf\xcf]\xbe" +
	"\xb1j^\x0d\xe1?\xb3u\xbe\xe1\xe2\xbfI|\xd3\xc3" +
	"g\x9f\xfch\xea\xbb\xf4\xfc\xb5\x10\xbe\xc2\x96\xf9-\x17" +
	"\xbf.\xf1;\x1e\xde$\x16WWV\xe6\xaf\x87\xf05" +
	"\xb6\xc4\xb7\\\xbc,\xf1?<\xbc\xbc\x99\xf8r\xf5\xab" +
	"\xe6\x0d\xd0\xd4\xc05\x01\xf9\x06\xfb\x91\xdfu/\xb9\xc5" +
	"^\x00t\x9e\xbds\xf2\xd5\xa3\xd7\x1ao\xef\xda\x1fC" +
	"\x89`t\x89\xc7\xa2\xae\x83Q\xe9\xf6\xbd\x8bW\x9fj" +
	"\xd9\xbe\xbbY\xcb\xbd\xb5\xe8:\xdfr\xd9[Q\xe9\xde" +
	"\x85\xcf:\x8b-\xe5\x85?C\x82\xfb\x94%.\x14)" +
	"x@\xa1\x98:\xab\x10\x84\x1e\xc74\xac\xd7F-k" +
	"\x9c\xa4O\x8c\xea\xc5B\xb1\xabo(\xd5\x7f\xc2\xccv" +
	"\x00\x0c!b\x1d\x90\xd6\xba\xad\x19\xc00\xd8\xff\xfc)" +
	"\xcb\x1aOKL\xd4\xd3\x08@\x04\x01\xb4\xbe\x97\x00D" +
	"/E1DPC\xdc\x8frx:\x0e \x9e\xa1(" +
	"\x86\x09j\x84\xecG\x02\xa0\x099\x1c\xa0(\xce\x12t" +
	"\xf2\xc6x&\x9d\xd1\x0b@\x07-\x8c\x02\xc1( \x8e" +
	"#\x03\x82\x0c\x10\xc7v\x9e\xaa2pGF\x83\x14," +
	"\x1eF\x0cl\xb69\x19\x08\xd1\xd1\xae@D\x1e\xeb\x0a" +
	"\x14\xad)\x11X\xef\xc1D\xd0\xba\xc4\xe1Is\xa2\xb3" +
	"\xbd\xbbd\xe7\x93\xad)\xf9\xd3\x96\x1cT\xccl\x87b" +
	"f\xdb\x153\xdb\x16\x16r\xd8\xb5C\xba\xa1\xd2H\xbd" +
	"\xe3\xb8v\xe8\x8d\x00\xe2e\x8ab\x8c`\x0c\xffq<" +
	"?\x8c.\x001BQ\xe4\x08\xc6\xc8}\xc73$\x93" +
	"\x00\x10i\x8a\xa2H0F\xb7\x9d\xfdH\x01\xb4\xbc\x9c" +
	"\x8eQ\x146AjfQ\xf5\xab\x0f\x88*`wN" +
	"\xb7sV\x01U?&\xde\x1fJ\xc9\xce\xa3\xea'\xad" +
	"2-&{Q\xf5\x0b\xe9M\xc3\xeb=c\x8c\xda=" +
	"V\xa9@\xd3\x13\xf2Nu\xd5\x0d7\xcb+\x1d\xa1(" +
	"Z\x02\x1b>.\x87OP\x14\xed\x04\xa9\x9d\xc38\x06" +
	"\xbe\x11\x00\x18\x07\xa4\xaf\x8f\xd7\x1a?\x1dA\x0dg\x1c" +
	"\xd7\xbcLA\x87n\xdb\x18\x9e.\x1aaACV\xa6" +
	"`'{a\x97\x9ax-5q_\x0dNUS4" +
	"\x1dJ\xd1\x83\xa9/\xd9y%\xd9\x9a\xaa\xe6\xfe\x87\xf3" +
	"\xff\x89\xb6%\x07\xabh9\xbd':iN\xd0\xce\xf6" +
	"*yC\xdd\x934\xb3\xed\x81\xd6m\xd6l\x9d\xeb\xd3" +
	"\xf0t\x11\x0d\xb7wnp\x9a\x1a\xe5\x16\xb5\x03\x09\x00" +
	"$Z\xac\x0b\x80\x9aY\xb9\xfdJ4\xc2\xa7\xbc8|" +
	"\xda+/T\xf2ZqS?\xe6\xc7u\xc7L\xe3M" +
	"?\x96\x1aA/\xab\xf9\xb8\x9fJ\x8d\x12/\xaao\xc9" +
	"a\x8e\xa2\x98\"\xd80c\x15\x8c\x9d&;9\xdd\xce" +
	"\xd8\xa5\xb4\x01\x0d=z!\x8d\xf5@\xb0\xfe\x7f\x0a^" +
	"\xd5:\xa0\xdb\x03V\xe1\x94\xa5T\xda\x15\xd8}\xa2\xd6" +
	"\xee\x13\xfe\xee\x95\x9cn\xe3> \xb8\x0fP\x91\x1d\xa9" +
	"<\xef\xe9\x7f[\xc0\xff\xdb3\x80\xff\x06\x00\x00\xff\xff" +
	"[\x93\x0dx"

func init() {
	schemas.Register(schema_9090542079c7fc24,
		0x958c02356c8797e1,
		0x97ff7d61786091ae,
		0xb79427a74eb97fc0,
		0xb8f6a6192a7359f8,
		0xb952dbe83866da4a,
		0xc88fb91c1e6986e2,
		0xc8fb53981e470885,
		0xcc67dee69497e2f3,
		0xcdaf64c4789f2b7d,
		0xe4afdddddec2511d,
		0xe529b4deb322ece8,
		0xeb1acd255e40f049,
		0xecf1fc3039cc8ffb,
		0xf5b9e8307038ad86)
}
