// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
)

type Date capnp.Struct

// Date_TypeID is the unique identifier for the type Date.
const Date_TypeID = 0x97e6feac0322118d

func NewDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date(st), err
}

func NewRootDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date(st), err
}

func ReadRootDate(msg *capnp.Message) (Date, error) {
	root, err := msg.Root()
	return Date(root.Struct()), err
}

func (s Date) String() string {
	str, _ := text.Marshal(0x97e6feac0322118d, capnp.Struct(s))
	return str
}

func (s Date) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Date) DecodeFromPtr(p capnp.Ptr) Date {
	return Date(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Date) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Date) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Date) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Date) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Date) Year() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Date) SetYear(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Date) Month() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s Date) SetMonth(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s Date) Day() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s Date) SetDay(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

// Date_List is a list of Date.
type Date_List = capnp.StructList[Date]

// NewDate creates a new list of Date.
func NewDate_List(s *capnp.Segment, sz int32) (Date_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Date](l), err
}

// Date_Future is a wrapper for a Date promised by a client call.
type Date_Future struct{ *capnp.Future }

func (f Date_Future) Struct() (Date, error) {
	p, err := f.Future.Ptr()
	return Date(p.Struct()), err
}
