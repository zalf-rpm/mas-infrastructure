// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Date struct{ capnp.Struct }

// Date_TypeID is the unique identifier for the type Date.
const Date_TypeID = 0x97e6feac0322118d

func NewDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date{st}, err
}

func NewRootDate(s *capnp.Segment) (Date, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Date{st}, err
}

func ReadRootDate(msg *capnp.Message) (Date, error) {
	root, err := msg.Root()
	return Date{root.Struct()}, err
}

func (s Date) String() string {
	str, _ := text.Marshal(0x97e6feac0322118d, s.Struct)
	return str
}

func (s Date) Year() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s Date) SetYear(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Date) Month() uint8 {
	return s.Struct.Uint8(2)
}

func (s Date) SetMonth(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s Date) Day() uint8 {
	return s.Struct.Uint8(3)
}

func (s Date) SetDay(v uint8) {
	s.Struct.SetUint8(3, v)
}

// Date_List is a list of Date.
type Date_List struct{ capnp.List }

// NewDate creates a new list of Date.
func NewDate_List(s *capnp.Segment, sz int32) (Date_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Date_List{l}, err
}

func (s Date_List) At(i int) Date { return Date{s.List.Struct(i)} }

func (s Date_List) Set(i int, v Date) error { return s.List.SetStruct(i, v.Struct) }

func (s Date_List) String() string {
	str, _ := text.MarshalList(0x97e6feac0322118d, s.List)
	return str
}

// Date_Future is a wrapper for a Date promised by a client call.
type Date_Future struct{ *capnp.Future }

func (p Date_Future) Struct() (Date, error) {
	s, err := p.Future.Struct()
	return Date{s}, err
}

const schema_e8ea2bc38b07f62a = "x\xda4\xc8\xbdJ\xc3`\x14\x06\xe0\xf7='?\x83" +
	"\x82~$\xa3\"f\x8c \xe8\xe8\x140\x82\x82B\x0e" +
	"x\x03\x1f&\xe0b\x12$K\xd6\xac\xe2\xecM\x08^" +
	"\x84\xf7RJ/\xa0cSJ\xe9\xf6\xf0\x9cN\x85\xdc" +
	"\x84\x9d\x00v\x16F\xf3\xb7\xcb\xf4w\xb3\xf8\x81\x1d\x91" +
	"s\xbe\x8e\xbf\xfe\xafVK\x041\x90\x9csJ.\xb9" +
	"\xd7\x1f\xee\xe7\xda\x0f\xcd\xf5\x9b\xef\xd9\xf6w\xa5\x1f\x1a" +
	"T\xa4\x1dk\x00\x04\x04\xdcC\x0eX\xa1\xb4g\xa1\xa3" +
	"\xa4\xdc\xe5\xd3-`\xa5\xd2*\xa1\x13M)\x80{\xc9" +
	"\x00{T\xda\xab\xf0dl\xfc'\x15B\x05/>\xba" +
	"vxg\x04a\x04\xc6\xb5\x1f\x0f\xde\x06\x00\x00\xff\xff" +
	"]`!+"

func init() {
	schemas.Register(schema_e8ea2bc38b07f62a,
		0x97e6feac0322118d)
}
