// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	strconv "strconv"
)

type IdInformation struct{ capnp.Struct }

// IdInformation_TypeID is the unique identifier for the type IdInformation.
const IdInformation_TypeID = 0xd4cb7ecbfe03dad3

func NewIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func NewRootIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func ReadRootIdInformation(msg *capnp.Message) (IdInformation, error) {
	root, err := msg.Root()
	return IdInformation{root.Struct()}, err
}

func (s IdInformation) String() string {
	str, _ := text.Marshal(0xd4cb7ecbfe03dad3, s.Struct)
	return str
}

func (s IdInformation) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IdInformation) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s IdInformation) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IdInformation) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IdInformation) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IdInformation) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s IdInformation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IdInformation) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IdInformation) Description() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s IdInformation) HasDescription() bool {
	return s.Struct.HasPtr(2)
}

func (s IdInformation) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s IdInformation) SetDescription(v string) error {
	return s.Struct.SetText(2, v)
}

// IdInformation_List is a list of IdInformation.
type IdInformation_List struct{ capnp.List }

// NewIdInformation creates a new list of IdInformation.
func NewIdInformation_List(s *capnp.Segment, sz int32) (IdInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return IdInformation_List{l}, err
}

func (s IdInformation_List) At(i int) IdInformation { return IdInformation{s.List.Struct(i)} }

func (s IdInformation_List) Set(i int, v IdInformation) error { return s.List.SetStruct(i, v.Struct) }

func (s IdInformation_List) String() string {
	str, _ := text.MarshalList(0xd4cb7ecbfe03dad3, s.List)
	return str
}

// IdInformation_Future is a wrapper for a IdInformation promised by a client call.
type IdInformation_Future struct{ *capnp.Future }

func (p IdInformation_Future) Struct() (IdInformation, error) {
	s, err := p.Future.Struct()
	return IdInformation{s}, err
}

type Identifiable struct{ Client *capnp.Client }

// Identifiable_TypeID is the unique identifier for the type Identifiable.
const Identifiable_TypeID = 0xb2afd1cb599c48d5

func (c Identifiable) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c Identifiable) AddRef() Identifiable {
	return Identifiable{
		Client: c.Client.AddRef(),
	}
}

func (c Identifiable) Release() {
	c.Client.Release()
}

// A Identifiable_Server is a Identifiable with a local implementation.
type Identifiable_Server interface {
	Info(context.Context, Identifiable_info) error
}

// Identifiable_NewServer creates a new Server from an implementation of Identifiable_Server.
func Identifiable_NewServer(s Identifiable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Identifiable_Methods(nil, s), s, c, policy)
}

// Identifiable_ServerToClient creates a new Client from an implementation of Identifiable_Server.
// The caller is responsible for calling Release on the returned Client.
func Identifiable_ServerToClient(s Identifiable_Server, policy *server.Policy) Identifiable {
	return Identifiable{Client: capnp.NewClient(Identifiable_NewServer(s, policy))}
}

// Identifiable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Identifiable_Methods(methods []server.Method, s Identifiable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// Identifiable_info holds the state for a server call to Identifiable.info.
// See server.Call for documentation.
type Identifiable_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Identifiable_info) Args() Identifiable_info_Params {
	return Identifiable_info_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Identifiable_info) AllocResults() (IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{Struct: r}, err
}

type Identifiable_info_Params struct{ capnp.Struct }

// Identifiable_info_Params_TypeID is the unique identifier for the type Identifiable_info_Params.
const Identifiable_info_Params_TypeID = 0x9d8aa1cf1e49deb1

func NewIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func NewRootIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func ReadRootIdentifiable_info_Params(msg *capnp.Message) (Identifiable_info_Params, error) {
	root, err := msg.Root()
	return Identifiable_info_Params{root.Struct()}, err
}

func (s Identifiable_info_Params) String() string {
	str, _ := text.Marshal(0x9d8aa1cf1e49deb1, s.Struct)
	return str
}

// Identifiable_info_Params_List is a list of Identifiable_info_Params.
type Identifiable_info_Params_List struct{ capnp.List }

// NewIdentifiable_info_Params creates a new list of Identifiable_info_Params.
func NewIdentifiable_info_Params_List(s *capnp.Segment, sz int32) (Identifiable_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Identifiable_info_Params_List{l}, err
}

func (s Identifiable_info_Params_List) At(i int) Identifiable_info_Params {
	return Identifiable_info_Params{s.List.Struct(i)}
}

func (s Identifiable_info_Params_List) Set(i int, v Identifiable_info_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Identifiable_info_Params_List) String() string {
	str, _ := text.MarshalList(0x9d8aa1cf1e49deb1, s.List)
	return str
}

// Identifiable_info_Params_Future is a wrapper for a Identifiable_info_Params promised by a client call.
type Identifiable_info_Params_Future struct{ *capnp.Future }

func (p Identifiable_info_Params_Future) Struct() (Identifiable_info_Params, error) {
	s, err := p.Future.Struct()
	return Identifiable_info_Params{s}, err
}

type StructuredText struct{ capnp.Struct }
type StructuredText_structure StructuredText
type StructuredText_structure_Which uint16

const (
	StructuredText_structure_Which_none StructuredText_structure_Which = 0
	StructuredText_structure_Which_json StructuredText_structure_Which = 1
	StructuredText_structure_Which_xml  StructuredText_structure_Which = 2
)

func (w StructuredText_structure_Which) String() string {
	const s = "nonejsonxml"
	switch w {
	case StructuredText_structure_Which_none:
		return s[0:4]
	case StructuredText_structure_Which_json:
		return s[4:8]
	case StructuredText_structure_Which_xml:
		return s[8:11]

	}
	return "StructuredText_structure_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StructuredText_TypeID is the unique identifier for the type StructuredText.
const StructuredText_TypeID = 0xed6c098b67cad454

func NewStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func NewRootStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func ReadRootStructuredText(msg *capnp.Message) (StructuredText, error) {
	root, err := msg.Root()
	return StructuredText{root.Struct()}, err
}

func (s StructuredText) String() string {
	str, _ := text.Marshal(0xed6c098b67cad454, s.Struct)
	return str
}

func (s StructuredText) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StructuredText) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s StructuredText) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StructuredText) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StructuredText) Structure() StructuredText_structure { return StructuredText_structure(s) }

func (s StructuredText_structure) Which() StructuredText_structure_Which {
	return StructuredText_structure_Which(s.Struct.Uint16(0))
}
func (s StructuredText_structure) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s StructuredText_structure) SetJson() {
	s.Struct.SetUint16(0, 1)

}

func (s StructuredText_structure) SetXml() {
	s.Struct.SetUint16(0, 2)

}

// StructuredText_List is a list of StructuredText.
type StructuredText_List struct{ capnp.List }

// NewStructuredText creates a new list of StructuredText.
func NewStructuredText_List(s *capnp.Segment, sz int32) (StructuredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StructuredText_List{l}, err
}

func (s StructuredText_List) At(i int) StructuredText { return StructuredText{s.List.Struct(i)} }

func (s StructuredText_List) Set(i int, v StructuredText) error { return s.List.SetStruct(i, v.Struct) }

func (s StructuredText_List) String() string {
	str, _ := text.MarshalList(0xed6c098b67cad454, s.List)
	return str
}

// StructuredText_Future is a wrapper for a StructuredText promised by a client call.
type StructuredText_Future struct{ *capnp.Future }

func (p StructuredText_Future) Struct() (StructuredText, error) {
	s, err := p.Future.Struct()
	return StructuredText{s}, err
}

func (p StructuredText_Future) Structure() StructuredText_structure_Future {
	return StructuredText_structure_Future{p.Future}
}

// StructuredText_structure_Future is a wrapper for a StructuredText_structure promised by a client call.
type StructuredText_structure_Future struct{ *capnp.Future }

func (p StructuredText_structure_Future) Struct() (StructuredText_structure, error) {
	s, err := p.Future.Struct()
	return StructuredText_structure{s}, err
}

type Callback struct{ Client *capnp.Client }

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x902904cd51bff117

func (c Callback) Call(ctx context.Context, params func(Callback_call_Params) error) (Callback_call_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_call_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Callback_call_Results_Future{Future: ans.Future()}, release
}

func (c Callback) AddRef() Callback {
	return Callback{
		Client: c.Client.AddRef(),
	}
}

func (c Callback) Release() {
	c.Client.Release()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	Call(context.Context, Callback_call) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c, policy)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server, policy *server.Policy) Callback {
	return Callback{Client: capnp.NewClient(Callback_NewServer(s, policy))}
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, Callback_call{call})
		},
	})

	return methods
}

// Callback_call holds the state for a server call to Callback.call.
// See server.Call for documentation.
type Callback_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_call) Args() Callback_call_Params {
	return Callback_call_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Callback_call) AllocResults() (Callback_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{Struct: r}, err
}

type Callback_call_Params struct{ capnp.Struct }

// Callback_call_Params_TypeID is the unique identifier for the type Callback_call_Params.
const Callback_call_Params_TypeID = 0x83b4353989cbcb47

func NewCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func NewRootCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func ReadRootCallback_call_Params(msg *capnp.Message) (Callback_call_Params, error) {
	root, err := msg.Root()
	return Callback_call_Params{root.Struct()}, err
}

func (s Callback_call_Params) String() string {
	str, _ := text.Marshal(0x83b4353989cbcb47, s.Struct)
	return str
}

// Callback_call_Params_List is a list of Callback_call_Params.
type Callback_call_Params_List struct{ capnp.List }

// NewCallback_call_Params creates a new list of Callback_call_Params.
func NewCallback_call_Params_List(s *capnp.Segment, sz int32) (Callback_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Params_List{l}, err
}

func (s Callback_call_Params_List) At(i int) Callback_call_Params {
	return Callback_call_Params{s.List.Struct(i)}
}

func (s Callback_call_Params_List) Set(i int, v Callback_call_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Params_List) String() string {
	str, _ := text.MarshalList(0x83b4353989cbcb47, s.List)
	return str
}

// Callback_call_Params_Future is a wrapper for a Callback_call_Params promised by a client call.
type Callback_call_Params_Future struct{ *capnp.Future }

func (p Callback_call_Params_Future) Struct() (Callback_call_Params, error) {
	s, err := p.Future.Struct()
	return Callback_call_Params{s}, err
}

type Callback_call_Results struct{ capnp.Struct }

// Callback_call_Results_TypeID is the unique identifier for the type Callback_call_Results.
const Callback_call_Results_TypeID = 0xb16b6184cf8b8acf

func NewCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func NewRootCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func ReadRootCallback_call_Results(msg *capnp.Message) (Callback_call_Results, error) {
	root, err := msg.Root()
	return Callback_call_Results{root.Struct()}, err
}

func (s Callback_call_Results) String() string {
	str, _ := text.Marshal(0xb16b6184cf8b8acf, s.Struct)
	return str
}

// Callback_call_Results_List is a list of Callback_call_Results.
type Callback_call_Results_List struct{ capnp.List }

// NewCallback_call_Results creates a new list of Callback_call_Results.
func NewCallback_call_Results_List(s *capnp.Segment, sz int32) (Callback_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Results_List{l}, err
}

func (s Callback_call_Results_List) At(i int) Callback_call_Results {
	return Callback_call_Results{s.List.Struct(i)}
}

func (s Callback_call_Results_List) Set(i int, v Callback_call_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Results_List) String() string {
	str, _ := text.MarshalList(0xb16b6184cf8b8acf, s.List)
	return str
}

// Callback_call_Results_Future is a wrapper for a Callback_call_Results promised by a client call.
type Callback_call_Results_Future struct{ *capnp.Future }

func (p Callback_call_Results_Future) Struct() (Callback_call_Results, error) {
	s, err := p.Future.Struct()
	return Callback_call_Results{s}, err
}

type ZmqPipelineAddresses struct{ capnp.Struct }

// ZmqPipelineAddresses_TypeID is the unique identifier for the type ZmqPipelineAddresses.
const ZmqPipelineAddresses_TypeID = 0xfe04fe97ba25a27e

func NewZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func NewRootZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func ReadRootZmqPipelineAddresses(msg *capnp.Message) (ZmqPipelineAddresses, error) {
	root, err := msg.Root()
	return ZmqPipelineAddresses{root.Struct()}, err
}

func (s ZmqPipelineAddresses) String() string {
	str, _ := text.Marshal(0xfe04fe97ba25a27e, s.Struct)
	return str
}

func (s ZmqPipelineAddresses) Input() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasInput() bool {
	return s.Struct.HasPtr(0)
}

func (s ZmqPipelineAddresses) InputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetInput(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZmqPipelineAddresses) Output() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasOutput() bool {
	return s.Struct.HasPtr(1)
}

func (s ZmqPipelineAddresses) OutputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetOutput(v string) error {
	return s.Struct.SetText(1, v)
}

// ZmqPipelineAddresses_List is a list of ZmqPipelineAddresses.
type ZmqPipelineAddresses_List struct{ capnp.List }

// NewZmqPipelineAddresses creates a new list of ZmqPipelineAddresses.
func NewZmqPipelineAddresses_List(s *capnp.Segment, sz int32) (ZmqPipelineAddresses_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ZmqPipelineAddresses_List{l}, err
}

func (s ZmqPipelineAddresses_List) At(i int) ZmqPipelineAddresses {
	return ZmqPipelineAddresses{s.List.Struct(i)}
}

func (s ZmqPipelineAddresses_List) Set(i int, v ZmqPipelineAddresses) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZmqPipelineAddresses_List) String() string {
	str, _ := text.MarshalList(0xfe04fe97ba25a27e, s.List)
	return str
}

// ZmqPipelineAddresses_Future is a wrapper for a ZmqPipelineAddresses promised by a client call.
type ZmqPipelineAddresses_Future struct{ *capnp.Future }

func (p ZmqPipelineAddresses_Future) Struct() (ZmqPipelineAddresses, error) {
	s, err := p.Future.Struct()
	return ZmqPipelineAddresses{s}, err
}

type CapHolder struct{ Client *capnp.Client }

// CapHolder_TypeID is the unique identifier for the type CapHolder.
const CapHolder_TypeID = 0xcac9c6537df1a097

func (c CapHolder) Cap(ctx context.Context, params func(CapHolder_cap_Params) error) (CapHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c CapHolder) Release(ctx context.Context, params func(CapHolder_release_Params) error) (CapHolder_release_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_release_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_release_Results_Future{Future: ans.Future()}, release
}

func (c CapHolder) AddRef() CapHolder {
	return CapHolder{
		Client: c.Client.AddRef(),
	}
}

func (c CapHolder) Release() {
	c.Client.Release()
}

// A CapHolder_Server is a CapHolder with a local implementation.
type CapHolder_Server interface {
	Cap(context.Context, CapHolder_cap) error

	Release(context.Context, CapHolder_release) error
}

// CapHolder_NewServer creates a new Server from an implementation of CapHolder_Server.
func CapHolder_NewServer(s CapHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHolder_Methods(nil, s), s, c, policy)
}

// CapHolder_ServerToClient creates a new Client from an implementation of CapHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHolder_ServerToClient(s CapHolder_Server, policy *server.Policy) CapHolder {
	return CapHolder{Client: capnp.NewClient(CapHolder_NewServer(s, policy))}
}

// CapHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHolder_Methods(methods []server.Method, s CapHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, CapHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Release(ctx, CapHolder_release{call})
		},
	})

	return methods
}

// CapHolder_cap holds the state for a server call to CapHolder.cap.
// See server.Call for documentation.
type CapHolder_cap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_cap) Args() CapHolder_cap_Params {
	return CapHolder_cap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_cap) AllocResults() (CapHolder_cap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{Struct: r}, err
}

// CapHolder_release holds the state for a server call to CapHolder.release.
// See server.Call for documentation.
type CapHolder_release struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_release) Args() CapHolder_release_Params {
	return CapHolder_release_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_release) AllocResults() (CapHolder_release_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_release_Results{Struct: r}, err
}

type CapHolder_cap_Params struct{ capnp.Struct }

// CapHolder_cap_Params_TypeID is the unique identifier for the type CapHolder_cap_Params.
const CapHolder_cap_Params_TypeID = 0xda52b34d937fa814

func NewCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func NewRootCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func ReadRootCapHolder_cap_Params(msg *capnp.Message) (CapHolder_cap_Params, error) {
	root, err := msg.Root()
	return CapHolder_cap_Params{root.Struct()}, err
}

func (s CapHolder_cap_Params) String() string {
	str, _ := text.Marshal(0xda52b34d937fa814, s.Struct)
	return str
}

// CapHolder_cap_Params_List is a list of CapHolder_cap_Params.
type CapHolder_cap_Params_List struct{ capnp.List }

// NewCapHolder_cap_Params creates a new list of CapHolder_cap_Params.
func NewCapHolder_cap_Params_List(s *capnp.Segment, sz int32) (CapHolder_cap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_cap_Params_List{l}, err
}

func (s CapHolder_cap_Params_List) At(i int) CapHolder_cap_Params {
	return CapHolder_cap_Params{s.List.Struct(i)}
}

func (s CapHolder_cap_Params_List) Set(i int, v CapHolder_cap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Params_List) String() string {
	str, _ := text.MarshalList(0xda52b34d937fa814, s.List)
	return str
}

// CapHolder_cap_Params_Future is a wrapper for a CapHolder_cap_Params promised by a client call.
type CapHolder_cap_Params_Future struct{ *capnp.Future }

func (p CapHolder_cap_Params_Future) Struct() (CapHolder_cap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Params{s}, err
}

type CapHolder_cap_Results struct{ capnp.Struct }

// CapHolder_cap_Results_TypeID is the unique identifier for the type CapHolder_cap_Results.
const CapHolder_cap_Results_TypeID = 0xdc9b0f483595691f

func NewCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func NewRootCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func ReadRootCapHolder_cap_Results(msg *capnp.Message) (CapHolder_cap_Results, error) {
	root, err := msg.Root()
	return CapHolder_cap_Results{root.Struct()}, err
}

func (s CapHolder_cap_Results) String() string {
	str, _ := text.Marshal(0xdc9b0f483595691f, s.Struct)
	return str
}

func (s CapHolder_cap_Results) Object() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s CapHolder_cap_Results) HasObject() bool {
	return s.Struct.HasPtr(0)
}

func (s CapHolder_cap_Results) SetObject(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// CapHolder_cap_Results_List is a list of CapHolder_cap_Results.
type CapHolder_cap_Results_List struct{ capnp.List }

// NewCapHolder_cap_Results creates a new list of CapHolder_cap_Results.
func NewCapHolder_cap_Results_List(s *capnp.Segment, sz int32) (CapHolder_cap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CapHolder_cap_Results_List{l}, err
}

func (s CapHolder_cap_Results_List) At(i int) CapHolder_cap_Results {
	return CapHolder_cap_Results{s.List.Struct(i)}
}

func (s CapHolder_cap_Results_List) Set(i int, v CapHolder_cap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Results_List) String() string {
	str, _ := text.MarshalList(0xdc9b0f483595691f, s.List)
	return str
}

// CapHolder_cap_Results_Future is a wrapper for a CapHolder_cap_Results promised by a client call.
type CapHolder_cap_Results_Future struct{ *capnp.Future }

func (p CapHolder_cap_Results_Future) Struct() (CapHolder_cap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Results{s}, err
}

func (p CapHolder_cap_Results_Future) Object() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapHolder_release_Params struct{ capnp.Struct }

// CapHolder_release_Params_TypeID is the unique identifier for the type CapHolder_release_Params.
const CapHolder_release_Params_TypeID = 0x82449708d4fd120d

func NewCapHolder_release_Params(s *capnp.Segment) (CapHolder_release_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_release_Params{st}, err
}

func NewRootCapHolder_release_Params(s *capnp.Segment) (CapHolder_release_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_release_Params{st}, err
}

func ReadRootCapHolder_release_Params(msg *capnp.Message) (CapHolder_release_Params, error) {
	root, err := msg.Root()
	return CapHolder_release_Params{root.Struct()}, err
}

func (s CapHolder_release_Params) String() string {
	str, _ := text.Marshal(0x82449708d4fd120d, s.Struct)
	return str
}

// CapHolder_release_Params_List is a list of CapHolder_release_Params.
type CapHolder_release_Params_List struct{ capnp.List }

// NewCapHolder_release_Params creates a new list of CapHolder_release_Params.
func NewCapHolder_release_Params_List(s *capnp.Segment, sz int32) (CapHolder_release_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_release_Params_List{l}, err
}

func (s CapHolder_release_Params_List) At(i int) CapHolder_release_Params {
	return CapHolder_release_Params{s.List.Struct(i)}
}

func (s CapHolder_release_Params_List) Set(i int, v CapHolder_release_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_release_Params_List) String() string {
	str, _ := text.MarshalList(0x82449708d4fd120d, s.List)
	return str
}

// CapHolder_release_Params_Future is a wrapper for a CapHolder_release_Params promised by a client call.
type CapHolder_release_Params_Future struct{ *capnp.Future }

func (p CapHolder_release_Params_Future) Struct() (CapHolder_release_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_release_Params{s}, err
}

type CapHolder_release_Results struct{ capnp.Struct }

// CapHolder_release_Results_TypeID is the unique identifier for the type CapHolder_release_Results.
const CapHolder_release_Results_TypeID = 0xc1374ccca01e2b53

func NewCapHolder_release_Results(s *capnp.Segment) (CapHolder_release_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_release_Results{st}, err
}

func NewRootCapHolder_release_Results(s *capnp.Segment) (CapHolder_release_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_release_Results{st}, err
}

func ReadRootCapHolder_release_Results(msg *capnp.Message) (CapHolder_release_Results, error) {
	root, err := msg.Root()
	return CapHolder_release_Results{root.Struct()}, err
}

func (s CapHolder_release_Results) String() string {
	str, _ := text.Marshal(0xc1374ccca01e2b53, s.Struct)
	return str
}

// CapHolder_release_Results_List is a list of CapHolder_release_Results.
type CapHolder_release_Results_List struct{ capnp.List }

// NewCapHolder_release_Results creates a new list of CapHolder_release_Results.
func NewCapHolder_release_Results_List(s *capnp.Segment, sz int32) (CapHolder_release_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_release_Results_List{l}, err
}

func (s CapHolder_release_Results_List) At(i int) CapHolder_release_Results {
	return CapHolder_release_Results{s.List.Struct(i)}
}

func (s CapHolder_release_Results_List) Set(i int, v CapHolder_release_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_release_Results_List) String() string {
	str, _ := text.MarshalList(0xc1374ccca01e2b53, s.List)
	return str
}

// CapHolder_release_Results_Future is a wrapper for a CapHolder_release_Results promised by a client call.
type CapHolder_release_Results_Future struct{ *capnp.Future }

func (p CapHolder_release_Results_Future) Struct() (CapHolder_release_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_release_Results{s}, err
}

type PersistCapHolder struct{ Client *capnp.Client }

// PersistCapHolder_TypeID is the unique identifier for the type PersistCapHolder.
const PersistCapHolder_TypeID = 0x8dbca6a407dd8082

func (c PersistCapHolder) Cap(ctx context.Context, params func(CapHolder_cap_Params) error) (CapHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c PersistCapHolder) Release(ctx context.Context, params func(CapHolder_release_Params) error) (CapHolder_release_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_release_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_release_Results_Future{Future: ans.Future()}, release
}
func (c PersistCapHolder) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c PersistCapHolder) AddRef() PersistCapHolder {
	return PersistCapHolder{
		Client: c.Client.AddRef(),
	}
}

func (c PersistCapHolder) Release() {
	c.Client.Release()
}

// A PersistCapHolder_Server is a PersistCapHolder with a local implementation.
type PersistCapHolder_Server interface {
	Cap(context.Context, CapHolder_cap) error

	Release(context.Context, CapHolder_release) error

	Save(context.Context, persistence.Persistent_save) error
}

// PersistCapHolder_NewServer creates a new Server from an implementation of PersistCapHolder_Server.
func PersistCapHolder_NewServer(s PersistCapHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PersistCapHolder_Methods(nil, s), s, c, policy)
}

// PersistCapHolder_ServerToClient creates a new Client from an implementation of PersistCapHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func PersistCapHolder_ServerToClient(s PersistCapHolder_Server, policy *server.Policy) PersistCapHolder {
	return PersistCapHolder{Client: capnp.NewClient(PersistCapHolder_NewServer(s, policy))}
}

// PersistCapHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PersistCapHolder_Methods(methods []server.Method, s PersistCapHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, CapHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Release(ctx, CapHolder_release{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc8cb212fcd9f5691,
			MethodID:      0,
			InterfaceName: "capnp/persistent.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

type ListEntry struct{ capnp.Struct }

// ListEntry_TypeID is the unique identifier for the type ListEntry.
const ListEntry_TypeID = 0xc201bf46dd40051e

func NewListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func NewRootListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func ReadRootListEntry(msg *capnp.Message) (ListEntry, error) {
	root, err := msg.Root()
	return ListEntry{root.Struct()}, err
}

func (s ListEntry) String() string {
	str, _ := text.Marshal(0xc201bf46dd40051e, s.Struct)
	return str
}

func (s ListEntry) Entry() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListEntry) HasEntry() bool {
	return s.Struct.HasPtr(0)
}

func (s ListEntry) SetEntry(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListEntry_List is a list of ListEntry.
type ListEntry_List struct{ capnp.List }

// NewListEntry creates a new list of ListEntry.
func NewListEntry_List(s *capnp.Segment, sz int32) (ListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListEntry_List{l}, err
}

func (s ListEntry_List) At(i int) ListEntry { return ListEntry{s.List.Struct(i)} }

func (s ListEntry_List) Set(i int, v ListEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ListEntry_List) String() string {
	str, _ := text.MarshalList(0xc201bf46dd40051e, s.List)
	return str
}

// ListEntry_Future is a wrapper for a ListEntry promised by a client call.
type ListEntry_Future struct{ *capnp.Future }

func (p ListEntry_Future) Struct() (ListEntry, error) {
	s, err := p.Future.Struct()
	return ListEntry{s}, err
}

func (p ListEntry_Future) Entry() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Stopable struct{ Client *capnp.Client }

// Stopable_TypeID is the unique identifier for the type Stopable.
const Stopable_TypeID = 0xce7e4202f09e314a

func (c Stopable) Stop(ctx context.Context, params func(Stopable_stop_Params) error) (Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c Stopable) AddRef() Stopable {
	return Stopable{
		Client: c.Client.AddRef(),
	}
}

func (c Stopable) Release() {
	c.Client.Release()
}

// A Stopable_Server is a Stopable with a local implementation.
type Stopable_Server interface {
	Stop(context.Context, Stopable_stop) error
}

// Stopable_NewServer creates a new Server from an implementation of Stopable_Server.
func Stopable_NewServer(s Stopable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stopable_Methods(nil, s), s, c, policy)
}

// Stopable_ServerToClient creates a new Client from an implementation of Stopable_Server.
// The caller is responsible for calling Release on the returned Client.
func Stopable_ServerToClient(s Stopable_Server, policy *server.Policy) Stopable {
	return Stopable{Client: capnp.NewClient(Stopable_NewServer(s, policy))}
}

// Stopable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stopable_Methods(methods []server.Method, s Stopable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Stopable_stop{call})
		},
	})

	return methods
}

// Stopable_stop holds the state for a server call to Stopable.stop.
// See server.Call for documentation.
type Stopable_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stopable_stop) Args() Stopable_stop_Params {
	return Stopable_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Stopable_stop) AllocResults() (Stopable_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{Struct: r}, err
}

type Stopable_stop_Params struct{ capnp.Struct }

// Stopable_stop_Params_TypeID is the unique identifier for the type Stopable_stop_Params.
const Stopable_stop_Params_TypeID = 0x98a27c9476315729

func NewStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func NewRootStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func ReadRootStopable_stop_Params(msg *capnp.Message) (Stopable_stop_Params, error) {
	root, err := msg.Root()
	return Stopable_stop_Params{root.Struct()}, err
}

func (s Stopable_stop_Params) String() string {
	str, _ := text.Marshal(0x98a27c9476315729, s.Struct)
	return str
}

// Stopable_stop_Params_List is a list of Stopable_stop_Params.
type Stopable_stop_Params_List struct{ capnp.List }

// NewStopable_stop_Params creates a new list of Stopable_stop_Params.
func NewStopable_stop_Params_List(s *capnp.Segment, sz int32) (Stopable_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Params_List{l}, err
}

func (s Stopable_stop_Params_List) At(i int) Stopable_stop_Params {
	return Stopable_stop_Params{s.List.Struct(i)}
}

func (s Stopable_stop_Params_List) Set(i int, v Stopable_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Params_List) String() string {
	str, _ := text.MarshalList(0x98a27c9476315729, s.List)
	return str
}

// Stopable_stop_Params_Future is a wrapper for a Stopable_stop_Params promised by a client call.
type Stopable_stop_Params_Future struct{ *capnp.Future }

func (p Stopable_stop_Params_Future) Struct() (Stopable_stop_Params, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Params{s}, err
}

type Stopable_stop_Results struct{ capnp.Struct }

// Stopable_stop_Results_TypeID is the unique identifier for the type Stopable_stop_Results.
const Stopable_stop_Results_TypeID = 0xd3a3b24aaa056a5c

func NewStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func NewRootStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func ReadRootStopable_stop_Results(msg *capnp.Message) (Stopable_stop_Results, error) {
	root, err := msg.Root()
	return Stopable_stop_Results{root.Struct()}, err
}

func (s Stopable_stop_Results) String() string {
	str, _ := text.Marshal(0xd3a3b24aaa056a5c, s.Struct)
	return str
}

// Stopable_stop_Results_List is a list of Stopable_stop_Results.
type Stopable_stop_Results_List struct{ capnp.List }

// NewStopable_stop_Results creates a new list of Stopable_stop_Results.
func NewStopable_stop_Results_List(s *capnp.Segment, sz int32) (Stopable_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Results_List{l}, err
}

func (s Stopable_stop_Results_List) At(i int) Stopable_stop_Results {
	return Stopable_stop_Results{s.List.Struct(i)}
}

func (s Stopable_stop_Results_List) Set(i int, v Stopable_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Results_List) String() string {
	str, _ := text.MarshalList(0xd3a3b24aaa056a5c, s.List)
	return str
}

// Stopable_stop_Results_Future is a wrapper for a Stopable_stop_Results promised by a client call.
type Stopable_stop_Results_Future struct{ *capnp.Future }

func (p Stopable_stop_Results_Future) Struct() (Stopable_stop_Results, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Results{s}, err
}

type Pair struct{ capnp.Struct }

// Pair_TypeID is the unique identifier for the type Pair.
const Pair_TypeID = 0xb9d4864725174733

func NewPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func NewRootPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func ReadRootPair(msg *capnp.Message) (Pair, error) {
	root, err := msg.Root()
	return Pair{root.Struct()}, err
}

func (s Pair) String() string {
	str, _ := text.Marshal(0xb9d4864725174733, s.Struct)
	return str
}

func (s Pair) Fst() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pair) HasFst() bool {
	return s.Struct.HasPtr(0)
}

func (s Pair) SetFst(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pair) Snd() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Pair) HasSnd() bool {
	return s.Struct.HasPtr(1)
}

func (s Pair) SetSnd(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Pair_List is a list of Pair.
type Pair_List struct{ capnp.List }

// NewPair creates a new list of Pair.
func NewPair_List(s *capnp.Segment, sz int32) (Pair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pair_List{l}, err
}

func (s Pair_List) At(i int) Pair { return Pair{s.List.Struct(i)} }

func (s Pair_List) Set(i int, v Pair) error { return s.List.SetStruct(i, v.Struct) }

func (s Pair_List) String() string {
	str, _ := text.MarshalList(0xb9d4864725174733, s.List)
	return str
}

// Pair_Future is a wrapper for a Pair promised by a client call.
type Pair_Future struct{ *capnp.Future }

func (p Pair_Future) Struct() (Pair, error) {
	s, err := p.Future.Struct()
	return Pair{s}, err
}

func (p Pair_Future) Fst() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pair_Future) Snd() *capnp.Future {
	return p.Future.Field(1, nil)
}

type LL struct{ capnp.Struct }

// LL_TypeID is the unique identifier for the type LL.
const LL_TypeID = 0xd67792aa3fc241be

func NewLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func NewRootLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func ReadRootLL(msg *capnp.Message) (LL, error) {
	root, err := msg.Root()
	return LL{root.Struct()}, err
}

func (s LL) String() string {
	str, _ := text.Marshal(0xd67792aa3fc241be, s.Struct)
	return str
}

func (s LL) Head() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s LL) HasHead() bool {
	return s.Struct.HasPtr(0)
}

func (s LL) SetHead(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s LL) Tail() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s LL) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s LL) SetTail(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// LL_List is a list of LL.
type LL_List struct{ capnp.List }

// NewLL creates a new list of LL.
func NewLL_List(s *capnp.Segment, sz int32) (LL_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LL_List{l}, err
}

func (s LL_List) At(i int) LL { return LL{s.List.Struct(i)} }

func (s LL_List) Set(i int, v LL) error { return s.List.SetStruct(i, v.Struct) }

func (s LL_List) String() string {
	str, _ := text.MarshalList(0xd67792aa3fc241be, s.List)
	return str
}

// LL_Future is a wrapper for a LL promised by a client call.
type LL_Future struct{ *capnp.Future }

func (p LL_Future) Struct() (LL, error) {
	s, err := p.Future.Struct()
	return LL{s}, err
}

func (p LL_Future) Head() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p LL_Future) Tail() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_99f1c9a775a88ac9 = "x\xda\x94U]l\x14U\x14>gf\xef\xdc\xc5\xb0" +
	"\xd9\xceN\xb1\xb11l$\x10\xa4J\xa5\xad\xc4\xd8@" +
	"\xb6\x8b@[\xd2\xc6\x9d\xb6\xfeF\x1e\xa6\xbb\xb7:\xb0" +
	";\xb3\xee\xccRH\xf81h4BH\x04%H\x14" +
	"\x05\x14\x05\x12CZ\xf5\x01\"\x12I4\x96\x05\x09R" +
	"L$\xe2\x83O\xfa@\"&>\xd21w\xb6\xf3\xc3" +
	"n+JB\xb3s\xcfw\xef9\xe7\xfb\xbe{\xee\xb2" +
	"\xe5b\x97\xd0FN\xdd\x03\xa0n%\x92\x13K\xdc\x9e" +
	"\x8c\x1eX\xbd\x13\xe4&\x04\x88\xd0\x06\xecXI\xda\x11" +
	"\"Nw\xa5\xf2\xe6\xe3\xcb\xbfx\x15\xe4{\xdd\x08@" +
	"\xc7\"\x92\xe0\x91\x9d\xaf\xdc\xa0\x1f\x7f\xf2\xd5\x1e\x90c" +
	"\xa23\xb1\xebx\xf9\xd3\x89[\x07\x01\xa0\x01\x95\x18\xf9" +
	"K\xb9\x8fP\x00e\x1e\xa1\xca<\xb2X9D\xe2N" +
	"\xd3\xads\xea\xa5\xc8\x92\xb7j6\xa0\xb2\x97\x8c+\x07" +
	"]\xf8~\xd2\xad\x9c\xe5\xbf\x9c%\xcf\xb4mzg\xeb" +
	"\xd1wCy\x8fU\xf3\x8e\xfd\xda;\xff\xf2\x91]\x87" +
	"@n\xf6\"{\xaa\xb5^\xde\xb5\xfb\xf2k\xda\xc6\xb1" +
	"\xd0\x9e2i\xe6\x91k=\xef?W\xb9rj\xbc." +
	"\xf5z\xf2\xa3\xa2\xbb\xa9\x19\xe9V\xf6\xb8\xa9;\xba\x9b" +
	"\x16u\xbf>y\x1a\xe4\x18\x06`\"\xd0\x06T\xcad" +
	"\x9f\xb2\xcd\xc5o!\xa3\x00\xcaM\xd2\xe4\x0c>4\xff" +
	"\xf0\xc5\xbe\xc7\xbe\x09\x91\xf7\x07\xe9\xe4i\xe7\x93\xae\x1b" +
	"k\xcf\xe1\xf9\x9a\x93\x90\x9ft\x85\x9cQ~vO\xba" +
	"FR\x00JL\x8a;\x07\x0e\xdf\xda6\xf8\xdd\xc4\x85" +
	"\x19(%\xd2\x19%&q\xf8\x1c\xe9\x0d\xe5\x84D\x95" +
	"\x13R\xdcY\xd7\xf6\xc1\x9f\xc2\xaa\xed?\xd4\xf5uH" +
	"\x1aW\x8e\xb9\xf0#R\xb72\xc1\x7f9/l '" +
	"\xd7\x8d\x7ft5D\xcf\x98\xe4\xd2s\xf5\xba8U\xd9" +
	"^\x99\xac\xa9S\xe4\xfb\x0fJ\xd7\xfd\x93N\x01:_" +
	"\xa7\xcf\xa7N\xee\x1b\xfdi&vV\xd2\x9dJ\x9ar" +
	"\xecJ\xca\xd9\x19\xa3MN\xe3\xf1\x1do\xf7\x7f>p" +
	"=\xc4\xceg\xd4\x152\xa9\xef_\xde\x13\x7f\xef\x97j" +
	"\xc4e\xa5c?mF^>M\x01:\x17\x87\xcf\x8f" +
	"\x0d\xfc]\xf9\x1d\xd4\xfb\x11\x9d\xa1\xc9\x0b/\xee\x9e\x93" +
	"\xbf\x09O!E\x11\xa0\xe3,m\xe7\xd8o)/\xcb" +
	"\x8f\xaa1\xbc\x93k\x00e}\xf47E\x8f\xba*G" +
	"G\x01\x9d\xedG\x17\x9d90\x15\x99\xaa\xeb\x01\xa0\xe3" +
	"D4\x81\xcai\x17\xfcet\x14L'k\x16\x0a\xa6" +
	"\xd1\x9a\x15\xb5\xa2Q\xec|B+\xf6\x98\xf9\x1c+\xb5" +
	"\x96X\x9ei\x16[\x98Ij%\xad`\xd5\xe1\xf2\xf9" +
	"a-\xbb\xb15\xab\xe5\xf3\x0b3\x1c\x82\x01Fp1" +
	"\x19V\xb2t\xcb\xe6G&\xdd33\x88\x19\x91\xa8Q" +
	"\xc4\xc0\x0a\xe9(:{\x9f\xfe\xf0\xd2#\x0fT\xbe\x87" +
	"\xf42\x941\xa9F\x84\x10\x00@\xc6&5\x82\xc87" +
	"#&\x10\x83\xab\xc9cU\xb8\x7f\x04_Z\xccS " +
	"\xaaQ\x91\xffm\x10\x11\xe7\x82\xc0\xff\xa7#(cg" +
	"\xea\xc9\xe1\x0d,k\xfb\xd5\xa2\xd7Q\xd2m)\x83\xa8" +
	"FD\x02\xe0\x0f\x07\xf4n\x9e,\xb7\x80 \x13\x1a\xe7" +
	"]wa\x06\xb1\x86\x96A\xdb,j\xc3y\xd6j\xd9" +
	"f\xb1\x8e\x96*\xa67\xc7\x0c[\x1f\xd1]\x9cn\x8c" +
	"\x98\xff\x89\xe2\x01f\x95\xf3\xa2]\xcbq\xe80dA" +
	"\xe5\xde\x10A\xcf\xfa~\xe5<\xe1\x9d\x95W\xdb\xcfh" +
	":r\x81\xd4\xa8\x18\x01\x88 \x80\xbcd\x01\x80\xbaP" +
	"Du\x99\x802b#\xf2\xc5\xa5|\xf1A\x11\xd5G" +
	"\x05\xa4#\x96\xed\x0a\xe2\x8f\x14\x00L\x00R\xcb\xc8a" +
	"\x82\xd4\x07\xd2Q\x94IB&\x09\\\x8b\x83wu\xde" +
	"@\x8a\xf7\x1cj\xb9Zi\x9fn\xa5\xec5\x86]\xda" +
	"R\xed\xd7+7\xd6\x0e\xc0%W\x1b\x05L2\x1ew" +
	"k\xf3\x87\xd4t\x09\xdc\x02\xc3N\xc6\xd4\x0d\x9b\x95\x86" +
	"\x80n)\xb2:'\x14S=\x9ea\xd5\xa8K\xa8w" +
	"\xcd\xd1\xbb\xd5r\xdb\x02\x80\xf4\xc3\x98^\x81r?E" +
	"\xf4\xdf\x18\xf4\xe6\xa5\x9c^\x05\x90^\x81\xe9>\x94\xd7" +
	"S\x9a\xd5\x8au\xdev\x19\x9di\xb1\x0bwL\xb3\xf0" +
	"\x7f\xf6d\x10\xff\xcd\xe1\x83\xb6\x99t\xdd\x19\xf8\xc4{" +
	"\x86\xd0\x1b\x9e\xbeO\xb8\x81\xef\xee\xf0Y]\xd9k\x8c" +
	"\x98\xa5\x82f\xeb\xa2i\xf0ts}\x99\xd64\x03\xa8" +
	"]\"\xaa}!W\xf5\xb6\x00\xa8\xabET3\x02\xca" +
	"\x82\xd0\x88\x02\x80\xdc?\x0c\xa0\xf6\x89\xa8>+\xa0\xa8" +
	"\xe7\xa6/1\xc6\x0d\xad\xc0\xbc\x0f'\xc7\xaclI/" +
	"\xda@u\xd3\xf0Wk\x1c\xd3\x075\xcen\x99\xc9\xd9" +
	"-\x81\xb3\xe3/1-\xe7\xda\xc7\x7f\x0f\xaa\xf6\x89\xdb" +
	"\x9a\x9e\xafz\xbb&\x12x\xbb\x07\x87f\xf5vV\x9b" +
	"m,\xdc\x89\xf1\x88\x0d\xfb\xbb3\xf0w\xcat\x05v" +
	"+\x0cMJ^G\x9d^\xa5r\xd6.\x97Xn\x88" +
	"m\xb6[-\xbbTN\xba\xdf\\\x92\xb9\x8eS\xed}" +
	"MK J\x0c\xa7\x9c\xaa\x00aUb\xc2m\xa7\x91" +
	"\xbfKr?\x9f\x00=\"\xaaC\x02\xc6\x0d\xd3` " +
	"\xc57X\xa6\x01\x12\xdd\\\xc8\x83T\xe3\x85P\x01\x94" +
	"m\xb6k\x84h\x0f\x84\xe0\xff\x827Q^:\x00B" +
	"r\x93\x96/\x07Z[\xd3G\x01\xb2\x9a.\x9f/\xbc" +
	"\x9c\xd1\x8b,\xaf\x1b,\x9d\xcb\x95\x98e1\xb4fO" +
	"\x15h\xde\x19h\x9e\xd4\x8db\xd9\xf6\x92\xa5\xcc\xb2\x1d" +
	"\xfa\xfc'\x00\x00\xff\xffqi\xee\x9d"

func init() {
	schemas.Register(schema_99f1c9a775a88ac9,
		0x82449708d4fd120d,
		0x83b4353989cbcb47,
		0x8dbca6a407dd8082,
		0x902904cd51bff117,
		0x98a27c9476315729,
		0x9d8aa1cf1e49deb1,
		0xb16b6184cf8b8acf,
		0xb2afd1cb599c48d5,
		0xb9d4864725174733,
		0xc1374ccca01e2b53,
		0xc201bf46dd40051e,
		0xcac9c6537df1a097,
		0xce7e4202f09e314a,
		0xd3a3b24aaa056a5c,
		0xd4cb7ecbfe03dad3,
		0xd67792aa3fc241be,
		0xda52b34d937fa814,
		0xdc9b0f483595691f,
		0xe8cbf552b1c262cc,
		0xed6c098b67cad454,
		0xfe04fe97ba25a27e)
}
