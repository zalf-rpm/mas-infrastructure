// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	strconv "strconv"
)

type IdInformation struct{ capnp.Struct }

// IdInformation_TypeID is the unique identifier for the type IdInformation.
const IdInformation_TypeID = 0xd4cb7ecbfe03dad3

func NewIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func NewRootIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func ReadRootIdInformation(msg *capnp.Message) (IdInformation, error) {
	root, err := msg.Root()
	return IdInformation{root.Struct()}, err
}

func (s IdInformation) String() string {
	str, _ := text.Marshal(0xd4cb7ecbfe03dad3, s.Struct)
	return str
}

func (s IdInformation) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IdInformation) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s IdInformation) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IdInformation) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IdInformation) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IdInformation) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s IdInformation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IdInformation) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IdInformation) Description() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s IdInformation) HasDescription() bool {
	return s.Struct.HasPtr(2)
}

func (s IdInformation) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s IdInformation) SetDescription(v string) error {
	return s.Struct.SetText(2, v)
}

// IdInformation_List is a list of IdInformation.
type IdInformation_List struct{ capnp.List }

// NewIdInformation creates a new list of IdInformation.
func NewIdInformation_List(s *capnp.Segment, sz int32) (IdInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return IdInformation_List{l}, err
}

func (s IdInformation_List) At(i int) IdInformation { return IdInformation{s.List.Struct(i)} }

func (s IdInformation_List) Set(i int, v IdInformation) error { return s.List.SetStruct(i, v.Struct) }

func (s IdInformation_List) String() string {
	str, _ := text.MarshalList(0xd4cb7ecbfe03dad3, s.List)
	return str
}

// IdInformation_Future is a wrapper for a IdInformation promised by a client call.
type IdInformation_Future struct{ *capnp.Future }

func (p IdInformation_Future) Struct() (IdInformation, error) {
	s, err := p.Future.Struct()
	return IdInformation{s}, err
}

type Identifiable struct{ Client *capnp.Client }

// Identifiable_TypeID is the unique identifier for the type Identifiable.
const Identifiable_TypeID = 0xb2afd1cb599c48d5

func (c Identifiable) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c Identifiable) AddRef() Identifiable {
	return Identifiable{
		Client: c.Client.AddRef(),
	}
}

func (c Identifiable) Release() {
	c.Client.Release()
}

// A Identifiable_Server is a Identifiable with a local implementation.
type Identifiable_Server interface {
	Info(context.Context, Identifiable_info) error
}

// Identifiable_NewServer creates a new Server from an implementation of Identifiable_Server.
func Identifiable_NewServer(s Identifiable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Identifiable_Methods(nil, s), s, c, policy)
}

// Identifiable_ServerToClient creates a new Client from an implementation of Identifiable_Server.
// The caller is responsible for calling Release on the returned Client.
func Identifiable_ServerToClient(s Identifiable_Server, policy *server.Policy) Identifiable {
	return Identifiable{Client: capnp.NewClient(Identifiable_NewServer(s, policy))}
}

// Identifiable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Identifiable_Methods(methods []server.Method, s Identifiable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// Identifiable_info holds the state for a server call to Identifiable.info.
// See server.Call for documentation.
type Identifiable_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Identifiable_info) Args() Identifiable_info_Params {
	return Identifiable_info_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Identifiable_info) AllocResults() (IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{Struct: r}, err
}

type Identifiable_info_Params struct{ capnp.Struct }

// Identifiable_info_Params_TypeID is the unique identifier for the type Identifiable_info_Params.
const Identifiable_info_Params_TypeID = 0x9d8aa1cf1e49deb1

func NewIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func NewRootIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func ReadRootIdentifiable_info_Params(msg *capnp.Message) (Identifiable_info_Params, error) {
	root, err := msg.Root()
	return Identifiable_info_Params{root.Struct()}, err
}

func (s Identifiable_info_Params) String() string {
	str, _ := text.Marshal(0x9d8aa1cf1e49deb1, s.Struct)
	return str
}

// Identifiable_info_Params_List is a list of Identifiable_info_Params.
type Identifiable_info_Params_List struct{ capnp.List }

// NewIdentifiable_info_Params creates a new list of Identifiable_info_Params.
func NewIdentifiable_info_Params_List(s *capnp.Segment, sz int32) (Identifiable_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Identifiable_info_Params_List{l}, err
}

func (s Identifiable_info_Params_List) At(i int) Identifiable_info_Params {
	return Identifiable_info_Params{s.List.Struct(i)}
}

func (s Identifiable_info_Params_List) Set(i int, v Identifiable_info_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Identifiable_info_Params_List) String() string {
	str, _ := text.MarshalList(0x9d8aa1cf1e49deb1, s.List)
	return str
}

// Identifiable_info_Params_Future is a wrapper for a Identifiable_info_Params promised by a client call.
type Identifiable_info_Params_Future struct{ *capnp.Future }

func (p Identifiable_info_Params_Future) Struct() (Identifiable_info_Params, error) {
	s, err := p.Future.Struct()
	return Identifiable_info_Params{s}, err
}

type StructuredText struct{ capnp.Struct }
type StructuredText_structure StructuredText
type StructuredText_structure_Which uint16

const (
	StructuredText_structure_Which_none StructuredText_structure_Which = 0
	StructuredText_structure_Which_json StructuredText_structure_Which = 1
	StructuredText_structure_Which_xml  StructuredText_structure_Which = 2
)

func (w StructuredText_structure_Which) String() string {
	const s = "nonejsonxml"
	switch w {
	case StructuredText_structure_Which_none:
		return s[0:4]
	case StructuredText_structure_Which_json:
		return s[4:8]
	case StructuredText_structure_Which_xml:
		return s[8:11]

	}
	return "StructuredText_structure_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StructuredText_TypeID is the unique identifier for the type StructuredText.
const StructuredText_TypeID = 0xed6c098b67cad454

func NewStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func NewRootStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func ReadRootStructuredText(msg *capnp.Message) (StructuredText, error) {
	root, err := msg.Root()
	return StructuredText{root.Struct()}, err
}

func (s StructuredText) String() string {
	str, _ := text.Marshal(0xed6c098b67cad454, s.Struct)
	return str
}

func (s StructuredText) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StructuredText) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s StructuredText) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StructuredText) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StructuredText) Structure() StructuredText_structure { return StructuredText_structure(s) }

func (s StructuredText_structure) Which() StructuredText_structure_Which {
	return StructuredText_structure_Which(s.Struct.Uint16(0))
}
func (s StructuredText_structure) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s StructuredText_structure) SetJson() {
	s.Struct.SetUint16(0, 1)

}

func (s StructuredText_structure) SetXml() {
	s.Struct.SetUint16(0, 2)

}

// StructuredText_List is a list of StructuredText.
type StructuredText_List struct{ capnp.List }

// NewStructuredText creates a new list of StructuredText.
func NewStructuredText_List(s *capnp.Segment, sz int32) (StructuredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StructuredText_List{l}, err
}

func (s StructuredText_List) At(i int) StructuredText { return StructuredText{s.List.Struct(i)} }

func (s StructuredText_List) Set(i int, v StructuredText) error { return s.List.SetStruct(i, v.Struct) }

func (s StructuredText_List) String() string {
	str, _ := text.MarshalList(0xed6c098b67cad454, s.List)
	return str
}

// StructuredText_Future is a wrapper for a StructuredText promised by a client call.
type StructuredText_Future struct{ *capnp.Future }

func (p StructuredText_Future) Struct() (StructuredText, error) {
	s, err := p.Future.Struct()
	return StructuredText{s}, err
}

func (p StructuredText_Future) Structure() StructuredText_structure_Future {
	return StructuredText_structure_Future{p.Future}
}

// StructuredText_structure_Future is a wrapper for a StructuredText_structure promised by a client call.
type StructuredText_structure_Future struct{ *capnp.Future }

func (p StructuredText_structure_Future) Struct() (StructuredText_structure, error) {
	s, err := p.Future.Struct()
	return StructuredText_structure{s}, err
}

type Callback struct{ Client *capnp.Client }

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x902904cd51bff117

func (c Callback) Call(ctx context.Context, params func(Callback_call_Params) error) (Callback_call_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_call_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Callback_call_Results_Future{Future: ans.Future()}, release
}

func (c Callback) AddRef() Callback {
	return Callback{
		Client: c.Client.AddRef(),
	}
}

func (c Callback) Release() {
	c.Client.Release()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	Call(context.Context, Callback_call) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c, policy)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server, policy *server.Policy) Callback {
	return Callback{Client: capnp.NewClient(Callback_NewServer(s, policy))}
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, Callback_call{call})
		},
	})

	return methods
}

// Callback_call holds the state for a server call to Callback.call.
// See server.Call for documentation.
type Callback_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_call) Args() Callback_call_Params {
	return Callback_call_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Callback_call) AllocResults() (Callback_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{Struct: r}, err
}

type Callback_call_Params struct{ capnp.Struct }

// Callback_call_Params_TypeID is the unique identifier for the type Callback_call_Params.
const Callback_call_Params_TypeID = 0x83b4353989cbcb47

func NewCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func NewRootCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func ReadRootCallback_call_Params(msg *capnp.Message) (Callback_call_Params, error) {
	root, err := msg.Root()
	return Callback_call_Params{root.Struct()}, err
}

func (s Callback_call_Params) String() string {
	str, _ := text.Marshal(0x83b4353989cbcb47, s.Struct)
	return str
}

// Callback_call_Params_List is a list of Callback_call_Params.
type Callback_call_Params_List struct{ capnp.List }

// NewCallback_call_Params creates a new list of Callback_call_Params.
func NewCallback_call_Params_List(s *capnp.Segment, sz int32) (Callback_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Params_List{l}, err
}

func (s Callback_call_Params_List) At(i int) Callback_call_Params {
	return Callback_call_Params{s.List.Struct(i)}
}

func (s Callback_call_Params_List) Set(i int, v Callback_call_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Params_List) String() string {
	str, _ := text.MarshalList(0x83b4353989cbcb47, s.List)
	return str
}

// Callback_call_Params_Future is a wrapper for a Callback_call_Params promised by a client call.
type Callback_call_Params_Future struct{ *capnp.Future }

func (p Callback_call_Params_Future) Struct() (Callback_call_Params, error) {
	s, err := p.Future.Struct()
	return Callback_call_Params{s}, err
}

type Callback_call_Results struct{ capnp.Struct }

// Callback_call_Results_TypeID is the unique identifier for the type Callback_call_Results.
const Callback_call_Results_TypeID = 0xb16b6184cf8b8acf

func NewCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func NewRootCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func ReadRootCallback_call_Results(msg *capnp.Message) (Callback_call_Results, error) {
	root, err := msg.Root()
	return Callback_call_Results{root.Struct()}, err
}

func (s Callback_call_Results) String() string {
	str, _ := text.Marshal(0xb16b6184cf8b8acf, s.Struct)
	return str
}

// Callback_call_Results_List is a list of Callback_call_Results.
type Callback_call_Results_List struct{ capnp.List }

// NewCallback_call_Results creates a new list of Callback_call_Results.
func NewCallback_call_Results_List(s *capnp.Segment, sz int32) (Callback_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Results_List{l}, err
}

func (s Callback_call_Results_List) At(i int) Callback_call_Results {
	return Callback_call_Results{s.List.Struct(i)}
}

func (s Callback_call_Results_List) Set(i int, v Callback_call_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Results_List) String() string {
	str, _ := text.MarshalList(0xb16b6184cf8b8acf, s.List)
	return str
}

// Callback_call_Results_Future is a wrapper for a Callback_call_Results promised by a client call.
type Callback_call_Results_Future struct{ *capnp.Future }

func (p Callback_call_Results_Future) Struct() (Callback_call_Results, error) {
	s, err := p.Future.Struct()
	return Callback_call_Results{s}, err
}

type Action struct{ Client *capnp.Client }

// Action_TypeID is the unique identifier for the type Action.
const Action_TypeID = 0x9dd4e2c3d76e4587

func (c Action) Do(ctx context.Context, params func(Action_do_Params) error) (Action_do_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9dd4e2c3d76e4587,
			MethodID:      0,
			InterfaceName: "common.capnp:Action",
			MethodName:    "do",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Action_do_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Action_do_Results_Future{Future: ans.Future()}, release
}
func (c Action) Save(ctx context.Context, params func(persistence.Persistent_save_Params) error) (persistence.Persistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_save_Results_Future{Future: ans.Future()}, release
}

func (c Action) AddRef() Action {
	return Action{
		Client: c.Client.AddRef(),
	}
}

func (c Action) Release() {
	c.Client.Release()
}

// A Action_Server is a Action with a local implementation.
type Action_Server interface {
	Do(context.Context, Action_do) error

	Save(context.Context, persistence.Persistent_save) error
}

// Action_NewServer creates a new Server from an implementation of Action_Server.
func Action_NewServer(s Action_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Action_Methods(nil, s), s, c, policy)
}

// Action_ServerToClient creates a new Client from an implementation of Action_Server.
// The caller is responsible for calling Release on the returned Client.
func Action_ServerToClient(s Action_Server, policy *server.Policy) Action {
	return Action{Client: capnp.NewClient(Action_NewServer(s, policy))}
}

// Action_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Action_Methods(methods []server.Method, s Action_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9dd4e2c3d76e4587,
			MethodID:      0,
			InterfaceName: "common.capnp:Action",
			MethodName:    "do",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Do(ctx, Action_do{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Action_do holds the state for a server call to Action.do.
// See server.Call for documentation.
type Action_do struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Action_do) Args() Action_do_Params {
	return Action_do_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Action_do) AllocResults() (Action_do_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Results{Struct: r}, err
}

type Action_do_Params struct{ capnp.Struct }

// Action_do_Params_TypeID is the unique identifier for the type Action_do_Params.
const Action_do_Params_TypeID = 0xf9033a317ba0d0c6

func NewAction_do_Params(s *capnp.Segment) (Action_do_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Params{st}, err
}

func NewRootAction_do_Params(s *capnp.Segment) (Action_do_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Params{st}, err
}

func ReadRootAction_do_Params(msg *capnp.Message) (Action_do_Params, error) {
	root, err := msg.Root()
	return Action_do_Params{root.Struct()}, err
}

func (s Action_do_Params) String() string {
	str, _ := text.Marshal(0xf9033a317ba0d0c6, s.Struct)
	return str
}

// Action_do_Params_List is a list of Action_do_Params.
type Action_do_Params_List struct{ capnp.List }

// NewAction_do_Params creates a new list of Action_do_Params.
func NewAction_do_Params_List(s *capnp.Segment, sz int32) (Action_do_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Action_do_Params_List{l}, err
}

func (s Action_do_Params_List) At(i int) Action_do_Params { return Action_do_Params{s.List.Struct(i)} }

func (s Action_do_Params_List) Set(i int, v Action_do_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action_do_Params_List) String() string {
	str, _ := text.MarshalList(0xf9033a317ba0d0c6, s.List)
	return str
}

// Action_do_Params_Future is a wrapper for a Action_do_Params promised by a client call.
type Action_do_Params_Future struct{ *capnp.Future }

func (p Action_do_Params_Future) Struct() (Action_do_Params, error) {
	s, err := p.Future.Struct()
	return Action_do_Params{s}, err
}

type Action_do_Results struct{ capnp.Struct }

// Action_do_Results_TypeID is the unique identifier for the type Action_do_Results.
const Action_do_Results_TypeID = 0xcc040dde1a99ddff

func NewAction_do_Results(s *capnp.Segment) (Action_do_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Results{st}, err
}

func NewRootAction_do_Results(s *capnp.Segment) (Action_do_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Results{st}, err
}

func ReadRootAction_do_Results(msg *capnp.Message) (Action_do_Results, error) {
	root, err := msg.Root()
	return Action_do_Results{root.Struct()}, err
}

func (s Action_do_Results) String() string {
	str, _ := text.Marshal(0xcc040dde1a99ddff, s.Struct)
	return str
}

// Action_do_Results_List is a list of Action_do_Results.
type Action_do_Results_List struct{ capnp.List }

// NewAction_do_Results creates a new list of Action_do_Results.
func NewAction_do_Results_List(s *capnp.Segment, sz int32) (Action_do_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Action_do_Results_List{l}, err
}

func (s Action_do_Results_List) At(i int) Action_do_Results {
	return Action_do_Results{s.List.Struct(i)}
}

func (s Action_do_Results_List) Set(i int, v Action_do_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action_do_Results_List) String() string {
	str, _ := text.MarshalList(0xcc040dde1a99ddff, s.List)
	return str
}

// Action_do_Results_Future is a wrapper for a Action_do_Results promised by a client call.
type Action_do_Results_Future struct{ *capnp.Future }

func (p Action_do_Results_Future) Struct() (Action_do_Results, error) {
	s, err := p.Future.Struct()
	return Action_do_Results{s}, err
}

type Action1 struct{ Client *capnp.Client }

// Action1_TypeID is the unique identifier for the type Action1.
const Action1_TypeID = 0xc12db9a9ae07a763

func (c Action1) Do(ctx context.Context, params func(Action1_do_Params) error) (Action1_do_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc12db9a9ae07a763,
			MethodID:      0,
			InterfaceName: "common.capnp:Action1",
			MethodName:    "do",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Action1_do_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Action1_do_Results_Future{Future: ans.Future()}, release
}
func (c Action1) Save(ctx context.Context, params func(persistence.Persistent_save_Params) error) (persistence.Persistent_save_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_save_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_save_Results_Future{Future: ans.Future()}, release
}

func (c Action1) AddRef() Action1 {
	return Action1{
		Client: c.Client.AddRef(),
	}
}

func (c Action1) Release() {
	c.Client.Release()
}

// A Action1_Server is a Action1 with a local implementation.
type Action1_Server interface {
	Do(context.Context, Action1_do) error

	Save(context.Context, persistence.Persistent_save) error
}

// Action1_NewServer creates a new Server from an implementation of Action1_Server.
func Action1_NewServer(s Action1_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Action1_Methods(nil, s), s, c, policy)
}

// Action1_ServerToClient creates a new Client from an implementation of Action1_Server.
// The caller is responsible for calling Release on the returned Client.
func Action1_ServerToClient(s Action1_Server, policy *server.Policy) Action1 {
	return Action1{Client: capnp.NewClient(Action1_NewServer(s, policy))}
}

// Action1_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Action1_Methods(methods []server.Method, s Action1_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc12db9a9ae07a763,
			MethodID:      0,
			InterfaceName: "common.capnp:Action1",
			MethodName:    "do",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Do(ctx, Action1_do{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Action1_do holds the state for a server call to Action1.do.
// See server.Call for documentation.
type Action1_do struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Action1_do) Args() Action1_do_Params {
	return Action1_do_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Action1_do) AllocResults() (Action1_do_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action1_do_Results{Struct: r}, err
}

type Action1_do_Params struct{ capnp.Struct }

// Action1_do_Params_TypeID is the unique identifier for the type Action1_do_Params.
const Action1_do_Params_TypeID = 0xa1eb17b1112501da

func NewAction1_do_Params(s *capnp.Segment) (Action1_do_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Action1_do_Params{st}, err
}

func NewRootAction1_do_Params(s *capnp.Segment) (Action1_do_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Action1_do_Params{st}, err
}

func ReadRootAction1_do_Params(msg *capnp.Message) (Action1_do_Params, error) {
	root, err := msg.Root()
	return Action1_do_Params{root.Struct()}, err
}

func (s Action1_do_Params) String() string {
	str, _ := text.Marshal(0xa1eb17b1112501da, s.Struct)
	return str
}

func (s Action1_do_Params) P() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Action1_do_Params) HasP() bool {
	return s.Struct.HasPtr(0)
}

func (s Action1_do_Params) SetP(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Action1_do_Params_List is a list of Action1_do_Params.
type Action1_do_Params_List struct{ capnp.List }

// NewAction1_do_Params creates a new list of Action1_do_Params.
func NewAction1_do_Params_List(s *capnp.Segment, sz int32) (Action1_do_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Action1_do_Params_List{l}, err
}

func (s Action1_do_Params_List) At(i int) Action1_do_Params {
	return Action1_do_Params{s.List.Struct(i)}
}

func (s Action1_do_Params_List) Set(i int, v Action1_do_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action1_do_Params_List) String() string {
	str, _ := text.MarshalList(0xa1eb17b1112501da, s.List)
	return str
}

// Action1_do_Params_Future is a wrapper for a Action1_do_Params promised by a client call.
type Action1_do_Params_Future struct{ *capnp.Future }

func (p Action1_do_Params_Future) Struct() (Action1_do_Params, error) {
	s, err := p.Future.Struct()
	return Action1_do_Params{s}, err
}

func (p Action1_do_Params_Future) P() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Action1_do_Results struct{ capnp.Struct }

// Action1_do_Results_TypeID is the unique identifier for the type Action1_do_Results.
const Action1_do_Results_TypeID = 0xfd65c3cd7f2f47fa

func NewAction1_do_Results(s *capnp.Segment) (Action1_do_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action1_do_Results{st}, err
}

func NewRootAction1_do_Results(s *capnp.Segment) (Action1_do_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action1_do_Results{st}, err
}

func ReadRootAction1_do_Results(msg *capnp.Message) (Action1_do_Results, error) {
	root, err := msg.Root()
	return Action1_do_Results{root.Struct()}, err
}

func (s Action1_do_Results) String() string {
	str, _ := text.Marshal(0xfd65c3cd7f2f47fa, s.Struct)
	return str
}

// Action1_do_Results_List is a list of Action1_do_Results.
type Action1_do_Results_List struct{ capnp.List }

// NewAction1_do_Results creates a new list of Action1_do_Results.
func NewAction1_do_Results_List(s *capnp.Segment, sz int32) (Action1_do_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Action1_do_Results_List{l}, err
}

func (s Action1_do_Results_List) At(i int) Action1_do_Results {
	return Action1_do_Results{s.List.Struct(i)}
}

func (s Action1_do_Results_List) Set(i int, v Action1_do_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action1_do_Results_List) String() string {
	str, _ := text.MarshalList(0xfd65c3cd7f2f47fa, s.List)
	return str
}

// Action1_do_Results_Future is a wrapper for a Action1_do_Results promised by a client call.
type Action1_do_Results_Future struct{ *capnp.Future }

func (p Action1_do_Results_Future) Struct() (Action1_do_Results, error) {
	s, err := p.Future.Struct()
	return Action1_do_Results{s}, err
}

type Factory struct{ Client *capnp.Client }

// Factory_TypeID is the unique identifier for the type Factory.
const Factory_TypeID = 0xa869f50b8c586ed9

func (c Factory) Produce(ctx context.Context, params func(Factory_produce_Params) error) (Factory_produce_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa869f50b8c586ed9,
			MethodID:      0,
			InterfaceName: "common.capnp:Factory",
			MethodName:    "produce",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_produce_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Factory_produce_Results_Future{Future: ans.Future()}, release
}

func (c Factory) AddRef() Factory {
	return Factory{
		Client: c.Client.AddRef(),
	}
}

func (c Factory) Release() {
	c.Client.Release()
}

// A Factory_Server is a Factory with a local implementation.
type Factory_Server interface {
	Produce(context.Context, Factory_produce) error
}

// Factory_NewServer creates a new Server from an implementation of Factory_Server.
func Factory_NewServer(s Factory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Factory_Methods(nil, s), s, c, policy)
}

// Factory_ServerToClient creates a new Client from an implementation of Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func Factory_ServerToClient(s Factory_Server, policy *server.Policy) Factory {
	return Factory{Client: capnp.NewClient(Factory_NewServer(s, policy))}
}

// Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Factory_Methods(methods []server.Method, s Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa869f50b8c586ed9,
			MethodID:      0,
			InterfaceName: "common.capnp:Factory",
			MethodName:    "produce",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Produce(ctx, Factory_produce{call})
		},
	})

	return methods
}

// Factory_produce holds the state for a server call to Factory.produce.
// See server.Call for documentation.
type Factory_produce struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_produce) Args() Factory_produce_Params {
	return Factory_produce_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Factory_produce) AllocResults() (Factory_produce_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Results{Struct: r}, err
}

type Factory_produce_Params struct{ capnp.Struct }

// Factory_produce_Params_TypeID is the unique identifier for the type Factory_produce_Params.
const Factory_produce_Params_TypeID = 0xfd058bbd1f9508cd

func NewFactory_produce_Params(s *capnp.Segment) (Factory_produce_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Params{st}, err
}

func NewRootFactory_produce_Params(s *capnp.Segment) (Factory_produce_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Params{st}, err
}

func ReadRootFactory_produce_Params(msg *capnp.Message) (Factory_produce_Params, error) {
	root, err := msg.Root()
	return Factory_produce_Params{root.Struct()}, err
}

func (s Factory_produce_Params) String() string {
	str, _ := text.Marshal(0xfd058bbd1f9508cd, s.Struct)
	return str
}

func (s Factory_produce_Params) In() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Factory_produce_Params) HasIn() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_produce_Params) SetIn(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Factory_produce_Params_List is a list of Factory_produce_Params.
type Factory_produce_Params_List struct{ capnp.List }

// NewFactory_produce_Params creates a new list of Factory_produce_Params.
func NewFactory_produce_Params_List(s *capnp.Segment, sz int32) (Factory_produce_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Factory_produce_Params_List{l}, err
}

func (s Factory_produce_Params_List) At(i int) Factory_produce_Params {
	return Factory_produce_Params{s.List.Struct(i)}
}

func (s Factory_produce_Params_List) Set(i int, v Factory_produce_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_produce_Params_List) String() string {
	str, _ := text.MarshalList(0xfd058bbd1f9508cd, s.List)
	return str
}

// Factory_produce_Params_Future is a wrapper for a Factory_produce_Params promised by a client call.
type Factory_produce_Params_Future struct{ *capnp.Future }

func (p Factory_produce_Params_Future) Struct() (Factory_produce_Params, error) {
	s, err := p.Future.Struct()
	return Factory_produce_Params{s}, err
}

func (p Factory_produce_Params_Future) In() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Factory_produce_Results struct{ capnp.Struct }

// Factory_produce_Results_TypeID is the unique identifier for the type Factory_produce_Results.
const Factory_produce_Results_TypeID = 0xd010f77f1bdf0522

func NewFactory_produce_Results(s *capnp.Segment) (Factory_produce_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Results{st}, err
}

func NewRootFactory_produce_Results(s *capnp.Segment) (Factory_produce_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Results{st}, err
}

func ReadRootFactory_produce_Results(msg *capnp.Message) (Factory_produce_Results, error) {
	root, err := msg.Root()
	return Factory_produce_Results{root.Struct()}, err
}

func (s Factory_produce_Results) String() string {
	str, _ := text.Marshal(0xd010f77f1bdf0522, s.Struct)
	return str
}

func (s Factory_produce_Results) Out() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Factory_produce_Results) HasOut() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_produce_Results) SetOut(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Factory_produce_Results_List is a list of Factory_produce_Results.
type Factory_produce_Results_List struct{ capnp.List }

// NewFactory_produce_Results creates a new list of Factory_produce_Results.
func NewFactory_produce_Results_List(s *capnp.Segment, sz int32) (Factory_produce_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Factory_produce_Results_List{l}, err
}

func (s Factory_produce_Results_List) At(i int) Factory_produce_Results {
	return Factory_produce_Results{s.List.Struct(i)}
}

func (s Factory_produce_Results_List) Set(i int, v Factory_produce_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_produce_Results_List) String() string {
	str, _ := text.MarshalList(0xd010f77f1bdf0522, s.List)
	return str
}

// Factory_produce_Results_Future is a wrapper for a Factory_produce_Results promised by a client call.
type Factory_produce_Results_Future struct{ *capnp.Future }

func (p Factory_produce_Results_Future) Struct() (Factory_produce_Results, error) {
	s, err := p.Future.Struct()
	return Factory_produce_Results{s}, err
}

func (p Factory_produce_Results_Future) Out() *capnp.Future {
	return p.Future.Field(0, nil)
}

type ZmqPipelineAddresses struct{ capnp.Struct }

// ZmqPipelineAddresses_TypeID is the unique identifier for the type ZmqPipelineAddresses.
const ZmqPipelineAddresses_TypeID = 0xfe04fe97ba25a27e

func NewZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func NewRootZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func ReadRootZmqPipelineAddresses(msg *capnp.Message) (ZmqPipelineAddresses, error) {
	root, err := msg.Root()
	return ZmqPipelineAddresses{root.Struct()}, err
}

func (s ZmqPipelineAddresses) String() string {
	str, _ := text.Marshal(0xfe04fe97ba25a27e, s.Struct)
	return str
}

func (s ZmqPipelineAddresses) Input() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasInput() bool {
	return s.Struct.HasPtr(0)
}

func (s ZmqPipelineAddresses) InputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetInput(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZmqPipelineAddresses) Output() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasOutput() bool {
	return s.Struct.HasPtr(1)
}

func (s ZmqPipelineAddresses) OutputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetOutput(v string) error {
	return s.Struct.SetText(1, v)
}

// ZmqPipelineAddresses_List is a list of ZmqPipelineAddresses.
type ZmqPipelineAddresses_List struct{ capnp.List }

// NewZmqPipelineAddresses creates a new list of ZmqPipelineAddresses.
func NewZmqPipelineAddresses_List(s *capnp.Segment, sz int32) (ZmqPipelineAddresses_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ZmqPipelineAddresses_List{l}, err
}

func (s ZmqPipelineAddresses_List) At(i int) ZmqPipelineAddresses {
	return ZmqPipelineAddresses{s.List.Struct(i)}
}

func (s ZmqPipelineAddresses_List) Set(i int, v ZmqPipelineAddresses) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZmqPipelineAddresses_List) String() string {
	str, _ := text.MarshalList(0xfe04fe97ba25a27e, s.List)
	return str
}

// ZmqPipelineAddresses_Future is a wrapper for a ZmqPipelineAddresses promised by a client call.
type ZmqPipelineAddresses_Future struct{ *capnp.Future }

func (p ZmqPipelineAddresses_Future) Struct() (ZmqPipelineAddresses, error) {
	s, err := p.Future.Struct()
	return ZmqPipelineAddresses{s}, err
}

type ValueHolder struct{ Client *capnp.Client }

// ValueHolder_TypeID is the unique identifier for the type ValueHolder.
const ValueHolder_TypeID = 0xf1c80d9ce9dfd993

func (c ValueHolder) Value(ctx context.Context, params func(ValueHolder_value_Params) error) (ValueHolder_value_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1c80d9ce9dfd993,
			MethodID:      0,
			InterfaceName: "common.capnp:ValueHolder",
			MethodName:    "value",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ValueHolder_value_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ValueHolder_value_Results_Future{Future: ans.Future()}, release
}

func (c ValueHolder) AddRef() ValueHolder {
	return ValueHolder{
		Client: c.Client.AddRef(),
	}
}

func (c ValueHolder) Release() {
	c.Client.Release()
}

// A ValueHolder_Server is a ValueHolder with a local implementation.
type ValueHolder_Server interface {
	Value(context.Context, ValueHolder_value) error
}

// ValueHolder_NewServer creates a new Server from an implementation of ValueHolder_Server.
func ValueHolder_NewServer(s ValueHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ValueHolder_Methods(nil, s), s, c, policy)
}

// ValueHolder_ServerToClient creates a new Client from an implementation of ValueHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func ValueHolder_ServerToClient(s ValueHolder_Server, policy *server.Policy) ValueHolder {
	return ValueHolder{Client: capnp.NewClient(ValueHolder_NewServer(s, policy))}
}

// ValueHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ValueHolder_Methods(methods []server.Method, s ValueHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1c80d9ce9dfd993,
			MethodID:      0,
			InterfaceName: "common.capnp:ValueHolder",
			MethodName:    "value",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Value(ctx, ValueHolder_value{call})
		},
	})

	return methods
}

// ValueHolder_value holds the state for a server call to ValueHolder.value.
// See server.Call for documentation.
type ValueHolder_value struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ValueHolder_value) Args() ValueHolder_value_Params {
	return ValueHolder_value_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ValueHolder_value) AllocResults() (ValueHolder_value_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValueHolder_value_Results{Struct: r}, err
}

type ValueHolder_value_Params struct{ capnp.Struct }

// ValueHolder_value_Params_TypeID is the unique identifier for the type ValueHolder_value_Params.
const ValueHolder_value_Params_TypeID = 0xfb528c3db0280a11

func NewValueHolder_value_Params(s *capnp.Segment) (ValueHolder_value_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ValueHolder_value_Params{st}, err
}

func NewRootValueHolder_value_Params(s *capnp.Segment) (ValueHolder_value_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ValueHolder_value_Params{st}, err
}

func ReadRootValueHolder_value_Params(msg *capnp.Message) (ValueHolder_value_Params, error) {
	root, err := msg.Root()
	return ValueHolder_value_Params{root.Struct()}, err
}

func (s ValueHolder_value_Params) String() string {
	str, _ := text.Marshal(0xfb528c3db0280a11, s.Struct)
	return str
}

// ValueHolder_value_Params_List is a list of ValueHolder_value_Params.
type ValueHolder_value_Params_List struct{ capnp.List }

// NewValueHolder_value_Params creates a new list of ValueHolder_value_Params.
func NewValueHolder_value_Params_List(s *capnp.Segment, sz int32) (ValueHolder_value_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ValueHolder_value_Params_List{l}, err
}

func (s ValueHolder_value_Params_List) At(i int) ValueHolder_value_Params {
	return ValueHolder_value_Params{s.List.Struct(i)}
}

func (s ValueHolder_value_Params_List) Set(i int, v ValueHolder_value_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValueHolder_value_Params_List) String() string {
	str, _ := text.MarshalList(0xfb528c3db0280a11, s.List)
	return str
}

// ValueHolder_value_Params_Future is a wrapper for a ValueHolder_value_Params promised by a client call.
type ValueHolder_value_Params_Future struct{ *capnp.Future }

func (p ValueHolder_value_Params_Future) Struct() (ValueHolder_value_Params, error) {
	s, err := p.Future.Struct()
	return ValueHolder_value_Params{s}, err
}

type ValueHolder_value_Results struct{ capnp.Struct }

// ValueHolder_value_Results_TypeID is the unique identifier for the type ValueHolder_value_Results.
const ValueHolder_value_Results_TypeID = 0xade9d46971ea9ee3

func NewValueHolder_value_Results(s *capnp.Segment) (ValueHolder_value_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValueHolder_value_Results{st}, err
}

func NewRootValueHolder_value_Results(s *capnp.Segment) (ValueHolder_value_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValueHolder_value_Results{st}, err
}

func ReadRootValueHolder_value_Results(msg *capnp.Message) (ValueHolder_value_Results, error) {
	root, err := msg.Root()
	return ValueHolder_value_Results{root.Struct()}, err
}

func (s ValueHolder_value_Results) String() string {
	str, _ := text.Marshal(0xade9d46971ea9ee3, s.Struct)
	return str
}

func (s ValueHolder_value_Results) Val() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ValueHolder_value_Results) HasVal() bool {
	return s.Struct.HasPtr(0)
}

func (s ValueHolder_value_Results) SetVal(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ValueHolder_value_Results_List is a list of ValueHolder_value_Results.
type ValueHolder_value_Results_List struct{ capnp.List }

// NewValueHolder_value_Results creates a new list of ValueHolder_value_Results.
func NewValueHolder_value_Results_List(s *capnp.Segment, sz int32) (ValueHolder_value_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValueHolder_value_Results_List{l}, err
}

func (s ValueHolder_value_Results_List) At(i int) ValueHolder_value_Results {
	return ValueHolder_value_Results{s.List.Struct(i)}
}

func (s ValueHolder_value_Results_List) Set(i int, v ValueHolder_value_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValueHolder_value_Results_List) String() string {
	str, _ := text.MarshalList(0xade9d46971ea9ee3, s.List)
	return str
}

// ValueHolder_value_Results_Future is a wrapper for a ValueHolder_value_Results promised by a client call.
type ValueHolder_value_Results_Future struct{ *capnp.Future }

func (p ValueHolder_value_Results_Future) Struct() (ValueHolder_value_Results, error) {
	s, err := p.Future.Struct()
	return ValueHolder_value_Results{s}, err
}

func (p ValueHolder_value_Results_Future) Val() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapHolder struct{ Client *capnp.Client }

// CapHolder_TypeID is the unique identifier for the type CapHolder.
const CapHolder_TypeID = 0xcac9c6537df1a097

func (c CapHolder) Cap(ctx context.Context, params func(CapHolder_cap_Params) error) (CapHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c CapHolder) ReleaseCap(ctx context.Context, params func(CapHolder_releaseCap_Params) error) (CapHolder_releaseCap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_releaseCap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_releaseCap_Results_Future{Future: ans.Future()}, release
}

func (c CapHolder) AddRef() CapHolder {
	return CapHolder{
		Client: c.Client.AddRef(),
	}
}

func (c CapHolder) Release() {
	c.Client.Release()
}

// A CapHolder_Server is a CapHolder with a local implementation.
type CapHolder_Server interface {
	Cap(context.Context, CapHolder_cap) error

	ReleaseCap(context.Context, CapHolder_releaseCap) error
}

// CapHolder_NewServer creates a new Server from an implementation of CapHolder_Server.
func CapHolder_NewServer(s CapHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHolder_Methods(nil, s), s, c, policy)
}

// CapHolder_ServerToClient creates a new Client from an implementation of CapHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHolder_ServerToClient(s CapHolder_Server, policy *server.Policy) CapHolder {
	return CapHolder{Client: capnp.NewClient(CapHolder_NewServer(s, policy))}
}

// CapHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHolder_Methods(methods []server.Method, s CapHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, CapHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseCap(ctx, CapHolder_releaseCap{call})
		},
	})

	return methods
}

// CapHolder_cap holds the state for a server call to CapHolder.cap.
// See server.Call for documentation.
type CapHolder_cap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_cap) Args() CapHolder_cap_Params {
	return CapHolder_cap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_cap) AllocResults() (CapHolder_cap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{Struct: r}, err
}

// CapHolder_releaseCap holds the state for a server call to CapHolder.releaseCap.
// See server.Call for documentation.
type CapHolder_releaseCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_releaseCap) Args() CapHolder_releaseCap_Params {
	return CapHolder_releaseCap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_releaseCap) AllocResults() (CapHolder_releaseCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{Struct: r}, err
}

type CapHolder_cap_Params struct{ capnp.Struct }

// CapHolder_cap_Params_TypeID is the unique identifier for the type CapHolder_cap_Params.
const CapHolder_cap_Params_TypeID = 0xda52b34d937fa814

func NewCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func NewRootCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func ReadRootCapHolder_cap_Params(msg *capnp.Message) (CapHolder_cap_Params, error) {
	root, err := msg.Root()
	return CapHolder_cap_Params{root.Struct()}, err
}

func (s CapHolder_cap_Params) String() string {
	str, _ := text.Marshal(0xda52b34d937fa814, s.Struct)
	return str
}

// CapHolder_cap_Params_List is a list of CapHolder_cap_Params.
type CapHolder_cap_Params_List struct{ capnp.List }

// NewCapHolder_cap_Params creates a new list of CapHolder_cap_Params.
func NewCapHolder_cap_Params_List(s *capnp.Segment, sz int32) (CapHolder_cap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_cap_Params_List{l}, err
}

func (s CapHolder_cap_Params_List) At(i int) CapHolder_cap_Params {
	return CapHolder_cap_Params{s.List.Struct(i)}
}

func (s CapHolder_cap_Params_List) Set(i int, v CapHolder_cap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Params_List) String() string {
	str, _ := text.MarshalList(0xda52b34d937fa814, s.List)
	return str
}

// CapHolder_cap_Params_Future is a wrapper for a CapHolder_cap_Params promised by a client call.
type CapHolder_cap_Params_Future struct{ *capnp.Future }

func (p CapHolder_cap_Params_Future) Struct() (CapHolder_cap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Params{s}, err
}

type CapHolder_cap_Results struct{ capnp.Struct }

// CapHolder_cap_Results_TypeID is the unique identifier for the type CapHolder_cap_Results.
const CapHolder_cap_Results_TypeID = 0xdc9b0f483595691f

func NewCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func NewRootCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func ReadRootCapHolder_cap_Results(msg *capnp.Message) (CapHolder_cap_Results, error) {
	root, err := msg.Root()
	return CapHolder_cap_Results{root.Struct()}, err
}

func (s CapHolder_cap_Results) String() string {
	str, _ := text.Marshal(0xdc9b0f483595691f, s.Struct)
	return str
}

func (s CapHolder_cap_Results) Object() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s CapHolder_cap_Results) HasObject() bool {
	return s.Struct.HasPtr(0)
}

func (s CapHolder_cap_Results) SetObject(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// CapHolder_cap_Results_List is a list of CapHolder_cap_Results.
type CapHolder_cap_Results_List struct{ capnp.List }

// NewCapHolder_cap_Results creates a new list of CapHolder_cap_Results.
func NewCapHolder_cap_Results_List(s *capnp.Segment, sz int32) (CapHolder_cap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CapHolder_cap_Results_List{l}, err
}

func (s CapHolder_cap_Results_List) At(i int) CapHolder_cap_Results {
	return CapHolder_cap_Results{s.List.Struct(i)}
}

func (s CapHolder_cap_Results_List) Set(i int, v CapHolder_cap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Results_List) String() string {
	str, _ := text.MarshalList(0xdc9b0f483595691f, s.List)
	return str
}

// CapHolder_cap_Results_Future is a wrapper for a CapHolder_cap_Results promised by a client call.
type CapHolder_cap_Results_Future struct{ *capnp.Future }

func (p CapHolder_cap_Results_Future) Struct() (CapHolder_cap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Results{s}, err
}

func (p CapHolder_cap_Results_Future) Object() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapHolder_releaseCap_Params struct{ capnp.Struct }

// CapHolder_releaseCap_Params_TypeID is the unique identifier for the type CapHolder_releaseCap_Params.
const CapHolder_releaseCap_Params_TypeID = 0x82449708d4fd120d

func NewCapHolder_releaseCap_Params(s *capnp.Segment) (CapHolder_releaseCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Params{st}, err
}

func NewRootCapHolder_releaseCap_Params(s *capnp.Segment) (CapHolder_releaseCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Params{st}, err
}

func ReadRootCapHolder_releaseCap_Params(msg *capnp.Message) (CapHolder_releaseCap_Params, error) {
	root, err := msg.Root()
	return CapHolder_releaseCap_Params{root.Struct()}, err
}

func (s CapHolder_releaseCap_Params) String() string {
	str, _ := text.Marshal(0x82449708d4fd120d, s.Struct)
	return str
}

// CapHolder_releaseCap_Params_List is a list of CapHolder_releaseCap_Params.
type CapHolder_releaseCap_Params_List struct{ capnp.List }

// NewCapHolder_releaseCap_Params creates a new list of CapHolder_releaseCap_Params.
func NewCapHolder_releaseCap_Params_List(s *capnp.Segment, sz int32) (CapHolder_releaseCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_releaseCap_Params_List{l}, err
}

func (s CapHolder_releaseCap_Params_List) At(i int) CapHolder_releaseCap_Params {
	return CapHolder_releaseCap_Params{s.List.Struct(i)}
}

func (s CapHolder_releaseCap_Params_List) Set(i int, v CapHolder_releaseCap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_releaseCap_Params_List) String() string {
	str, _ := text.MarshalList(0x82449708d4fd120d, s.List)
	return str
}

// CapHolder_releaseCap_Params_Future is a wrapper for a CapHolder_releaseCap_Params promised by a client call.
type CapHolder_releaseCap_Params_Future struct{ *capnp.Future }

func (p CapHolder_releaseCap_Params_Future) Struct() (CapHolder_releaseCap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_releaseCap_Params{s}, err
}

type CapHolder_releaseCap_Results struct{ capnp.Struct }

// CapHolder_releaseCap_Results_TypeID is the unique identifier for the type CapHolder_releaseCap_Results.
const CapHolder_releaseCap_Results_TypeID = 0xc1374ccca01e2b53

func NewCapHolder_releaseCap_Results(s *capnp.Segment) (CapHolder_releaseCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{st}, err
}

func NewRootCapHolder_releaseCap_Results(s *capnp.Segment) (CapHolder_releaseCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{st}, err
}

func ReadRootCapHolder_releaseCap_Results(msg *capnp.Message) (CapHolder_releaseCap_Results, error) {
	root, err := msg.Root()
	return CapHolder_releaseCap_Results{root.Struct()}, err
}

func (s CapHolder_releaseCap_Results) String() string {
	str, _ := text.Marshal(0xc1374ccca01e2b53, s.Struct)
	return str
}

// CapHolder_releaseCap_Results_List is a list of CapHolder_releaseCap_Results.
type CapHolder_releaseCap_Results_List struct{ capnp.List }

// NewCapHolder_releaseCap_Results creates a new list of CapHolder_releaseCap_Results.
func NewCapHolder_releaseCap_Results_List(s *capnp.Segment, sz int32) (CapHolder_releaseCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_releaseCap_Results_List{l}, err
}

func (s CapHolder_releaseCap_Results_List) At(i int) CapHolder_releaseCap_Results {
	return CapHolder_releaseCap_Results{s.List.Struct(i)}
}

func (s CapHolder_releaseCap_Results_List) Set(i int, v CapHolder_releaseCap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_releaseCap_Results_List) String() string {
	str, _ := text.MarshalList(0xc1374ccca01e2b53, s.List)
	return str
}

// CapHolder_releaseCap_Results_Future is a wrapper for a CapHolder_releaseCap_Results promised by a client call.
type CapHolder_releaseCap_Results_Future struct{ *capnp.Future }

func (p CapHolder_releaseCap_Results_Future) Struct() (CapHolder_releaseCap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_releaseCap_Results{s}, err
}

type IdentifiableHolder struct{ Client *capnp.Client }

// IdentifiableHolder_TypeID is the unique identifier for the type IdentifiableHolder.
const IdentifiableHolder_TypeID = 0xee543d7c305d56f6

func (c IdentifiableHolder) Cap(ctx context.Context, params func(IdentifiableHolder_cap_Params) error) (IdentifiableHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      0,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IdentifiableHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdentifiableHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c IdentifiableHolder) ReleaseCap(ctx context.Context, params func(IdentifiableHolder_releaseCap_Params) error) (IdentifiableHolder_releaseCap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      1,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IdentifiableHolder_releaseCap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdentifiableHolder_releaseCap_Results_Future{Future: ans.Future()}, release
}
func (c IdentifiableHolder) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c IdentifiableHolder) AddRef() IdentifiableHolder {
	return IdentifiableHolder{
		Client: c.Client.AddRef(),
	}
}

func (c IdentifiableHolder) Release() {
	c.Client.Release()
}

// A IdentifiableHolder_Server is a IdentifiableHolder with a local implementation.
type IdentifiableHolder_Server interface {
	Cap(context.Context, IdentifiableHolder_cap) error

	ReleaseCap(context.Context, IdentifiableHolder_releaseCap) error

	Info(context.Context, Identifiable_info) error
}

// IdentifiableHolder_NewServer creates a new Server from an implementation of IdentifiableHolder_Server.
func IdentifiableHolder_NewServer(s IdentifiableHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IdentifiableHolder_Methods(nil, s), s, c, policy)
}

// IdentifiableHolder_ServerToClient creates a new Client from an implementation of IdentifiableHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func IdentifiableHolder_ServerToClient(s IdentifiableHolder_Server, policy *server.Policy) IdentifiableHolder {
	return IdentifiableHolder{Client: capnp.NewClient(IdentifiableHolder_NewServer(s, policy))}
}

// IdentifiableHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IdentifiableHolder_Methods(methods []server.Method, s IdentifiableHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      0,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, IdentifiableHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      1,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseCap(ctx, IdentifiableHolder_releaseCap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// IdentifiableHolder_cap holds the state for a server call to IdentifiableHolder.cap.
// See server.Call for documentation.
type IdentifiableHolder_cap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IdentifiableHolder_cap) Args() IdentifiableHolder_cap_Params {
	return IdentifiableHolder_cap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IdentifiableHolder_cap) AllocResults() (IdentifiableHolder_cap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdentifiableHolder_cap_Results{Struct: r}, err
}

// IdentifiableHolder_releaseCap holds the state for a server call to IdentifiableHolder.releaseCap.
// See server.Call for documentation.
type IdentifiableHolder_releaseCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IdentifiableHolder_releaseCap) Args() IdentifiableHolder_releaseCap_Params {
	return IdentifiableHolder_releaseCap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IdentifiableHolder_releaseCap) AllocResults() (IdentifiableHolder_releaseCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Results{Struct: r}, err
}

type IdentifiableHolder_cap_Params struct{ capnp.Struct }

// IdentifiableHolder_cap_Params_TypeID is the unique identifier for the type IdentifiableHolder_cap_Params.
const IdentifiableHolder_cap_Params_TypeID = 0x93a1b0e66bcacfbb

func NewIdentifiableHolder_cap_Params(s *capnp.Segment) (IdentifiableHolder_cap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_cap_Params{st}, err
}

func NewRootIdentifiableHolder_cap_Params(s *capnp.Segment) (IdentifiableHolder_cap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_cap_Params{st}, err
}

func ReadRootIdentifiableHolder_cap_Params(msg *capnp.Message) (IdentifiableHolder_cap_Params, error) {
	root, err := msg.Root()
	return IdentifiableHolder_cap_Params{root.Struct()}, err
}

func (s IdentifiableHolder_cap_Params) String() string {
	str, _ := text.Marshal(0x93a1b0e66bcacfbb, s.Struct)
	return str
}

// IdentifiableHolder_cap_Params_List is a list of IdentifiableHolder_cap_Params.
type IdentifiableHolder_cap_Params_List struct{ capnp.List }

// NewIdentifiableHolder_cap_Params creates a new list of IdentifiableHolder_cap_Params.
func NewIdentifiableHolder_cap_Params_List(s *capnp.Segment, sz int32) (IdentifiableHolder_cap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IdentifiableHolder_cap_Params_List{l}, err
}

func (s IdentifiableHolder_cap_Params_List) At(i int) IdentifiableHolder_cap_Params {
	return IdentifiableHolder_cap_Params{s.List.Struct(i)}
}

func (s IdentifiableHolder_cap_Params_List) Set(i int, v IdentifiableHolder_cap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_cap_Params_List) String() string {
	str, _ := text.MarshalList(0x93a1b0e66bcacfbb, s.List)
	return str
}

// IdentifiableHolder_cap_Params_Future is a wrapper for a IdentifiableHolder_cap_Params promised by a client call.
type IdentifiableHolder_cap_Params_Future struct{ *capnp.Future }

func (p IdentifiableHolder_cap_Params_Future) Struct() (IdentifiableHolder_cap_Params, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_cap_Params{s}, err
}

type IdentifiableHolder_cap_Results struct{ capnp.Struct }

// IdentifiableHolder_cap_Results_TypeID is the unique identifier for the type IdentifiableHolder_cap_Results.
const IdentifiableHolder_cap_Results_TypeID = 0xb9fe596d7cadbdcc

func NewIdentifiableHolder_cap_Results(s *capnp.Segment) (IdentifiableHolder_cap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdentifiableHolder_cap_Results{st}, err
}

func NewRootIdentifiableHolder_cap_Results(s *capnp.Segment) (IdentifiableHolder_cap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdentifiableHolder_cap_Results{st}, err
}

func ReadRootIdentifiableHolder_cap_Results(msg *capnp.Message) (IdentifiableHolder_cap_Results, error) {
	root, err := msg.Root()
	return IdentifiableHolder_cap_Results{root.Struct()}, err
}

func (s IdentifiableHolder_cap_Results) String() string {
	str, _ := text.Marshal(0xb9fe596d7cadbdcc, s.Struct)
	return str
}

func (s IdentifiableHolder_cap_Results) Cap() Identifiable {
	p, _ := s.Struct.Ptr(0)
	return Identifiable{Client: p.Interface().Client()}
}

func (s IdentifiableHolder_cap_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s IdentifiableHolder_cap_Results) SetCap(v Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IdentifiableHolder_cap_Results_List is a list of IdentifiableHolder_cap_Results.
type IdentifiableHolder_cap_Results_List struct{ capnp.List }

// NewIdentifiableHolder_cap_Results creates a new list of IdentifiableHolder_cap_Results.
func NewIdentifiableHolder_cap_Results_List(s *capnp.Segment, sz int32) (IdentifiableHolder_cap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IdentifiableHolder_cap_Results_List{l}, err
}

func (s IdentifiableHolder_cap_Results_List) At(i int) IdentifiableHolder_cap_Results {
	return IdentifiableHolder_cap_Results{s.List.Struct(i)}
}

func (s IdentifiableHolder_cap_Results_List) Set(i int, v IdentifiableHolder_cap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_cap_Results_List) String() string {
	str, _ := text.MarshalList(0xb9fe596d7cadbdcc, s.List)
	return str
}

// IdentifiableHolder_cap_Results_Future is a wrapper for a IdentifiableHolder_cap_Results promised by a client call.
type IdentifiableHolder_cap_Results_Future struct{ *capnp.Future }

func (p IdentifiableHolder_cap_Results_Future) Struct() (IdentifiableHolder_cap_Results, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_cap_Results{s}, err
}

func (p IdentifiableHolder_cap_Results_Future) Cap() Identifiable {
	return Identifiable{Client: p.Future.Field(0, nil).Client()}
}

type IdentifiableHolder_releaseCap_Params struct{ capnp.Struct }

// IdentifiableHolder_releaseCap_Params_TypeID is the unique identifier for the type IdentifiableHolder_releaseCap_Params.
const IdentifiableHolder_releaseCap_Params_TypeID = 0xd69f2da1efe3faaf

func NewIdentifiableHolder_releaseCap_Params(s *capnp.Segment) (IdentifiableHolder_releaseCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Params{st}, err
}

func NewRootIdentifiableHolder_releaseCap_Params(s *capnp.Segment) (IdentifiableHolder_releaseCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Params{st}, err
}

func ReadRootIdentifiableHolder_releaseCap_Params(msg *capnp.Message) (IdentifiableHolder_releaseCap_Params, error) {
	root, err := msg.Root()
	return IdentifiableHolder_releaseCap_Params{root.Struct()}, err
}

func (s IdentifiableHolder_releaseCap_Params) String() string {
	str, _ := text.Marshal(0xd69f2da1efe3faaf, s.Struct)
	return str
}

// IdentifiableHolder_releaseCap_Params_List is a list of IdentifiableHolder_releaseCap_Params.
type IdentifiableHolder_releaseCap_Params_List struct{ capnp.List }

// NewIdentifiableHolder_releaseCap_Params creates a new list of IdentifiableHolder_releaseCap_Params.
func NewIdentifiableHolder_releaseCap_Params_List(s *capnp.Segment, sz int32) (IdentifiableHolder_releaseCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IdentifiableHolder_releaseCap_Params_List{l}, err
}

func (s IdentifiableHolder_releaseCap_Params_List) At(i int) IdentifiableHolder_releaseCap_Params {
	return IdentifiableHolder_releaseCap_Params{s.List.Struct(i)}
}

func (s IdentifiableHolder_releaseCap_Params_List) Set(i int, v IdentifiableHolder_releaseCap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_releaseCap_Params_List) String() string {
	str, _ := text.MarshalList(0xd69f2da1efe3faaf, s.List)
	return str
}

// IdentifiableHolder_releaseCap_Params_Future is a wrapper for a IdentifiableHolder_releaseCap_Params promised by a client call.
type IdentifiableHolder_releaseCap_Params_Future struct{ *capnp.Future }

func (p IdentifiableHolder_releaseCap_Params_Future) Struct() (IdentifiableHolder_releaseCap_Params, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_releaseCap_Params{s}, err
}

type IdentifiableHolder_releaseCap_Results struct{ capnp.Struct }

// IdentifiableHolder_releaseCap_Results_TypeID is the unique identifier for the type IdentifiableHolder_releaseCap_Results.
const IdentifiableHolder_releaseCap_Results_TypeID = 0x8ca159db7de3927b

func NewIdentifiableHolder_releaseCap_Results(s *capnp.Segment) (IdentifiableHolder_releaseCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Results{st}, err
}

func NewRootIdentifiableHolder_releaseCap_Results(s *capnp.Segment) (IdentifiableHolder_releaseCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Results{st}, err
}

func ReadRootIdentifiableHolder_releaseCap_Results(msg *capnp.Message) (IdentifiableHolder_releaseCap_Results, error) {
	root, err := msg.Root()
	return IdentifiableHolder_releaseCap_Results{root.Struct()}, err
}

func (s IdentifiableHolder_releaseCap_Results) String() string {
	str, _ := text.Marshal(0x8ca159db7de3927b, s.Struct)
	return str
}

// IdentifiableHolder_releaseCap_Results_List is a list of IdentifiableHolder_releaseCap_Results.
type IdentifiableHolder_releaseCap_Results_List struct{ capnp.List }

// NewIdentifiableHolder_releaseCap_Results creates a new list of IdentifiableHolder_releaseCap_Results.
func NewIdentifiableHolder_releaseCap_Results_List(s *capnp.Segment, sz int32) (IdentifiableHolder_releaseCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IdentifiableHolder_releaseCap_Results_List{l}, err
}

func (s IdentifiableHolder_releaseCap_Results_List) At(i int) IdentifiableHolder_releaseCap_Results {
	return IdentifiableHolder_releaseCap_Results{s.List.Struct(i)}
}

func (s IdentifiableHolder_releaseCap_Results_List) Set(i int, v IdentifiableHolder_releaseCap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_releaseCap_Results_List) String() string {
	str, _ := text.MarshalList(0x8ca159db7de3927b, s.List)
	return str
}

// IdentifiableHolder_releaseCap_Results_Future is a wrapper for a IdentifiableHolder_releaseCap_Results promised by a client call.
type IdentifiableHolder_releaseCap_Results_Future struct{ *capnp.Future }

func (p IdentifiableHolder_releaseCap_Results_Future) Struct() (IdentifiableHolder_releaseCap_Results, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_releaseCap_Results{s}, err
}

type ListEntry struct{ capnp.Struct }

// ListEntry_TypeID is the unique identifier for the type ListEntry.
const ListEntry_TypeID = 0xc201bf46dd40051e

func NewListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func NewRootListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func ReadRootListEntry(msg *capnp.Message) (ListEntry, error) {
	root, err := msg.Root()
	return ListEntry{root.Struct()}, err
}

func (s ListEntry) String() string {
	str, _ := text.Marshal(0xc201bf46dd40051e, s.Struct)
	return str
}

func (s ListEntry) Entry() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListEntry) HasEntry() bool {
	return s.Struct.HasPtr(0)
}

func (s ListEntry) SetEntry(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListEntry_List is a list of ListEntry.
type ListEntry_List struct{ capnp.List }

// NewListEntry creates a new list of ListEntry.
func NewListEntry_List(s *capnp.Segment, sz int32) (ListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListEntry_List{l}, err
}

func (s ListEntry_List) At(i int) ListEntry { return ListEntry{s.List.Struct(i)} }

func (s ListEntry_List) Set(i int, v ListEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ListEntry_List) String() string {
	str, _ := text.MarshalList(0xc201bf46dd40051e, s.List)
	return str
}

// ListEntry_Future is a wrapper for a ListEntry promised by a client call.
type ListEntry_Future struct{ *capnp.Future }

func (p ListEntry_Future) Struct() (ListEntry, error) {
	s, err := p.Future.Struct()
	return ListEntry{s}, err
}

func (p ListEntry_Future) Entry() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Stopable struct{ Client *capnp.Client }

// Stopable_TypeID is the unique identifier for the type Stopable.
const Stopable_TypeID = 0xce7e4202f09e314a

func (c Stopable) Stop(ctx context.Context, params func(Stopable_stop_Params) error) (Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c Stopable) AddRef() Stopable {
	return Stopable{
		Client: c.Client.AddRef(),
	}
}

func (c Stopable) Release() {
	c.Client.Release()
}

// A Stopable_Server is a Stopable with a local implementation.
type Stopable_Server interface {
	Stop(context.Context, Stopable_stop) error
}

// Stopable_NewServer creates a new Server from an implementation of Stopable_Server.
func Stopable_NewServer(s Stopable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stopable_Methods(nil, s), s, c, policy)
}

// Stopable_ServerToClient creates a new Client from an implementation of Stopable_Server.
// The caller is responsible for calling Release on the returned Client.
func Stopable_ServerToClient(s Stopable_Server, policy *server.Policy) Stopable {
	return Stopable{Client: capnp.NewClient(Stopable_NewServer(s, policy))}
}

// Stopable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stopable_Methods(methods []server.Method, s Stopable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Stopable_stop{call})
		},
	})

	return methods
}

// Stopable_stop holds the state for a server call to Stopable.stop.
// See server.Call for documentation.
type Stopable_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stopable_stop) Args() Stopable_stop_Params {
	return Stopable_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Stopable_stop) AllocResults() (Stopable_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{Struct: r}, err
}

type Stopable_stop_Params struct{ capnp.Struct }

// Stopable_stop_Params_TypeID is the unique identifier for the type Stopable_stop_Params.
const Stopable_stop_Params_TypeID = 0x98a27c9476315729

func NewStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func NewRootStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func ReadRootStopable_stop_Params(msg *capnp.Message) (Stopable_stop_Params, error) {
	root, err := msg.Root()
	return Stopable_stop_Params{root.Struct()}, err
}

func (s Stopable_stop_Params) String() string {
	str, _ := text.Marshal(0x98a27c9476315729, s.Struct)
	return str
}

// Stopable_stop_Params_List is a list of Stopable_stop_Params.
type Stopable_stop_Params_List struct{ capnp.List }

// NewStopable_stop_Params creates a new list of Stopable_stop_Params.
func NewStopable_stop_Params_List(s *capnp.Segment, sz int32) (Stopable_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Params_List{l}, err
}

func (s Stopable_stop_Params_List) At(i int) Stopable_stop_Params {
	return Stopable_stop_Params{s.List.Struct(i)}
}

func (s Stopable_stop_Params_List) Set(i int, v Stopable_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Params_List) String() string {
	str, _ := text.MarshalList(0x98a27c9476315729, s.List)
	return str
}

// Stopable_stop_Params_Future is a wrapper for a Stopable_stop_Params promised by a client call.
type Stopable_stop_Params_Future struct{ *capnp.Future }

func (p Stopable_stop_Params_Future) Struct() (Stopable_stop_Params, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Params{s}, err
}

type Stopable_stop_Results struct{ capnp.Struct }

// Stopable_stop_Results_TypeID is the unique identifier for the type Stopable_stop_Results.
const Stopable_stop_Results_TypeID = 0xd3a3b24aaa056a5c

func NewStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func NewRootStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func ReadRootStopable_stop_Results(msg *capnp.Message) (Stopable_stop_Results, error) {
	root, err := msg.Root()
	return Stopable_stop_Results{root.Struct()}, err
}

func (s Stopable_stop_Results) String() string {
	str, _ := text.Marshal(0xd3a3b24aaa056a5c, s.Struct)
	return str
}

// Stopable_stop_Results_List is a list of Stopable_stop_Results.
type Stopable_stop_Results_List struct{ capnp.List }

// NewStopable_stop_Results creates a new list of Stopable_stop_Results.
func NewStopable_stop_Results_List(s *capnp.Segment, sz int32) (Stopable_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Results_List{l}, err
}

func (s Stopable_stop_Results_List) At(i int) Stopable_stop_Results {
	return Stopable_stop_Results{s.List.Struct(i)}
}

func (s Stopable_stop_Results_List) Set(i int, v Stopable_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Results_List) String() string {
	str, _ := text.MarshalList(0xd3a3b24aaa056a5c, s.List)
	return str
}

// Stopable_stop_Results_Future is a wrapper for a Stopable_stop_Results promised by a client call.
type Stopable_stop_Results_Future struct{ *capnp.Future }

func (p Stopable_stop_Results_Future) Struct() (Stopable_stop_Results, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Results{s}, err
}

type Pair struct{ capnp.Struct }

// Pair_TypeID is the unique identifier for the type Pair.
const Pair_TypeID = 0xb9d4864725174733

func NewPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func NewRootPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func ReadRootPair(msg *capnp.Message) (Pair, error) {
	root, err := msg.Root()
	return Pair{root.Struct()}, err
}

func (s Pair) String() string {
	str, _ := text.Marshal(0xb9d4864725174733, s.Struct)
	return str
}

func (s Pair) Fst() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pair) HasFst() bool {
	return s.Struct.HasPtr(0)
}

func (s Pair) SetFst(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pair) Snd() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Pair) HasSnd() bool {
	return s.Struct.HasPtr(1)
}

func (s Pair) SetSnd(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Pair_List is a list of Pair.
type Pair_List struct{ capnp.List }

// NewPair creates a new list of Pair.
func NewPair_List(s *capnp.Segment, sz int32) (Pair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pair_List{l}, err
}

func (s Pair_List) At(i int) Pair { return Pair{s.List.Struct(i)} }

func (s Pair_List) Set(i int, v Pair) error { return s.List.SetStruct(i, v.Struct) }

func (s Pair_List) String() string {
	str, _ := text.MarshalList(0xb9d4864725174733, s.List)
	return str
}

// Pair_Future is a wrapper for a Pair promised by a client call.
type Pair_Future struct{ *capnp.Future }

func (p Pair_Future) Struct() (Pair, error) {
	s, err := p.Future.Struct()
	return Pair{s}, err
}

func (p Pair_Future) Fst() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pair_Future) Snd() *capnp.Future {
	return p.Future.Field(1, nil)
}

type LL struct{ capnp.Struct }

// LL_TypeID is the unique identifier for the type LL.
const LL_TypeID = 0xd67792aa3fc241be

func NewLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func NewRootLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func ReadRootLL(msg *capnp.Message) (LL, error) {
	root, err := msg.Root()
	return LL{root.Struct()}, err
}

func (s LL) String() string {
	str, _ := text.Marshal(0xd67792aa3fc241be, s.Struct)
	return str
}

func (s LL) Head() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s LL) HasHead() bool {
	return s.Struct.HasPtr(0)
}

func (s LL) SetHead(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s LL) Tail() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s LL) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s LL) SetTail(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// LL_List is a list of LL.
type LL_List struct{ capnp.List }

// NewLL creates a new list of LL.
func NewLL_List(s *capnp.Segment, sz int32) (LL_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LL_List{l}, err
}

func (s LL_List) At(i int) LL { return LL{s.List.Struct(i)} }

func (s LL_List) Set(i int, v LL) error { return s.List.SetStruct(i, v.Struct) }

func (s LL_List) String() string {
	str, _ := text.MarshalList(0xd67792aa3fc241be, s.List)
	return str
}

// LL_Future is a wrapper for a LL promised by a client call.
type LL_Future struct{ *capnp.Future }

func (p LL_Future) Struct() (LL, error) {
	s, err := p.Future.Struct()
	return LL{s}, err
}

func (p LL_Future) Head() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p LL_Future) Tail() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Clock struct{ Client *capnp.Client }

// Clock_TypeID is the unique identifier for the type Clock.
const Clock_TypeID = 0xa8b91e2c1f8c929a

func (c Clock) Tick(ctx context.Context, params func(Clock_tick_Params) error) (Clock_tick_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa8b91e2c1f8c929a,
			MethodID:      0,
			InterfaceName: "common.capnp:Clock",
			MethodName:    "tick",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Clock_tick_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Clock_tick_Results_Future{Future: ans.Future()}, release
}

func (c Clock) AddRef() Clock {
	return Clock{
		Client: c.Client.AddRef(),
	}
}

func (c Clock) Release() {
	c.Client.Release()
}

// A Clock_Server is a Clock with a local implementation.
type Clock_Server interface {
	Tick(context.Context, Clock_tick) error
}

// Clock_NewServer creates a new Server from an implementation of Clock_Server.
func Clock_NewServer(s Clock_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Clock_Methods(nil, s), s, c, policy)
}

// Clock_ServerToClient creates a new Client from an implementation of Clock_Server.
// The caller is responsible for calling Release on the returned Client.
func Clock_ServerToClient(s Clock_Server, policy *server.Policy) Clock {
	return Clock{Client: capnp.NewClient(Clock_NewServer(s, policy))}
}

// Clock_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Clock_Methods(methods []server.Method, s Clock_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa8b91e2c1f8c929a,
			MethodID:      0,
			InterfaceName: "common.capnp:Clock",
			MethodName:    "tick",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Tick(ctx, Clock_tick{call})
		},
	})

	return methods
}

// Clock_tick holds the state for a server call to Clock.tick.
// See server.Call for documentation.
type Clock_tick struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Clock_tick) Args() Clock_tick_Params {
	return Clock_tick_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Clock_tick) AllocResults() (Clock_tick_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Clock_tick_Results{Struct: r}, err
}

type Clock_tick_Params struct{ capnp.Struct }

// Clock_tick_Params_TypeID is the unique identifier for the type Clock_tick_Params.
const Clock_tick_Params_TypeID = 0xfd0735841a7da108

func NewClock_tick_Params(s *capnp.Segment) (Clock_tick_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Clock_tick_Params{st}, err
}

func NewRootClock_tick_Params(s *capnp.Segment) (Clock_tick_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Clock_tick_Params{st}, err
}

func ReadRootClock_tick_Params(msg *capnp.Message) (Clock_tick_Params, error) {
	root, err := msg.Root()
	return Clock_tick_Params{root.Struct()}, err
}

func (s Clock_tick_Params) String() string {
	str, _ := text.Marshal(0xfd0735841a7da108, s.Struct)
	return str
}

func (s Clock_tick_Params) Time() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Clock_tick_Params) HasTime() bool {
	return s.Struct.HasPtr(0)
}

func (s Clock_tick_Params) SetTime(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Clock_tick_Params_List is a list of Clock_tick_Params.
type Clock_tick_Params_List struct{ capnp.List }

// NewClock_tick_Params creates a new list of Clock_tick_Params.
func NewClock_tick_Params_List(s *capnp.Segment, sz int32) (Clock_tick_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Clock_tick_Params_List{l}, err
}

func (s Clock_tick_Params_List) At(i int) Clock_tick_Params {
	return Clock_tick_Params{s.List.Struct(i)}
}

func (s Clock_tick_Params_List) Set(i int, v Clock_tick_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Clock_tick_Params_List) String() string {
	str, _ := text.MarshalList(0xfd0735841a7da108, s.List)
	return str
}

// Clock_tick_Params_Future is a wrapper for a Clock_tick_Params promised by a client call.
type Clock_tick_Params_Future struct{ *capnp.Future }

func (p Clock_tick_Params_Future) Struct() (Clock_tick_Params, error) {
	s, err := p.Future.Struct()
	return Clock_tick_Params{s}, err
}

func (p Clock_tick_Params_Future) Time() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Clock_tick_Results struct{ capnp.Struct }

// Clock_tick_Results_TypeID is the unique identifier for the type Clock_tick_Results.
const Clock_tick_Results_TypeID = 0xc953edb8b6293faf

func NewClock_tick_Results(s *capnp.Segment) (Clock_tick_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Clock_tick_Results{st}, err
}

func NewRootClock_tick_Results(s *capnp.Segment) (Clock_tick_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Clock_tick_Results{st}, err
}

func ReadRootClock_tick_Results(msg *capnp.Message) (Clock_tick_Results, error) {
	root, err := msg.Root()
	return Clock_tick_Results{root.Struct()}, err
}

func (s Clock_tick_Results) String() string {
	str, _ := text.Marshal(0xc953edb8b6293faf, s.Struct)
	return str
}

// Clock_tick_Results_List is a list of Clock_tick_Results.
type Clock_tick_Results_List struct{ capnp.List }

// NewClock_tick_Results creates a new list of Clock_tick_Results.
func NewClock_tick_Results_List(s *capnp.Segment, sz int32) (Clock_tick_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Clock_tick_Results_List{l}, err
}

func (s Clock_tick_Results_List) At(i int) Clock_tick_Results {
	return Clock_tick_Results{s.List.Struct(i)}
}

func (s Clock_tick_Results_List) Set(i int, v Clock_tick_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Clock_tick_Results_List) String() string {
	str, _ := text.MarshalList(0xc953edb8b6293faf, s.List)
	return str
}

// Clock_tick_Results_Future is a wrapper for a Clock_tick_Results promised by a client call.
type Clock_tick_Results_Future struct{ *capnp.Future }

func (p Clock_tick_Results_Future) Struct() (Clock_tick_Results, error) {
	s, err := p.Future.Struct()
	return Clock_tick_Results{s}, err
}

type IP struct{ capnp.Struct }

// IP_TypeID is the unique identifier for the type IP.
const IP_TypeID = 0xd39ff99bbab1a74e

func NewIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP{st}, err
}

func NewRootIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP{st}, err
}

func ReadRootIP(msg *capnp.Message) (IP, error) {
	root, err := msg.Root()
	return IP{root.Struct()}, err
}

func (s IP) String() string {
	str, _ := text.Marshal(0xd39ff99bbab1a74e, s.Struct)
	return str
}

func (s IP) Attributes() (IP_KV_List, error) {
	p, err := s.Struct.Ptr(0)
	return IP_KV_List{List: p.List()}, err
}

func (s IP) HasAttributes() bool {
	return s.Struct.HasPtr(0)
}

func (s IP) SetAttributes(v IP_KV_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAttributes sets the attributes field to a newly
// allocated IP_KV_List, preferring placement in s's segment.
func (s IP) NewAttributes(n int32) (IP_KV_List, error) {
	l, err := NewIP_KV_List(s.Struct.Segment(), n)
	if err != nil {
		return IP_KV_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s IP) Content() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s IP) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s IP) SetContent(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// IP_List is a list of IP.
type IP_List struct{ capnp.List }

// NewIP creates a new list of IP.
func NewIP_List(s *capnp.Segment, sz int32) (IP_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IP_List{l}, err
}

func (s IP_List) At(i int) IP { return IP{s.List.Struct(i)} }

func (s IP_List) Set(i int, v IP) error { return s.List.SetStruct(i, v.Struct) }

func (s IP_List) String() string {
	str, _ := text.MarshalList(0xd39ff99bbab1a74e, s.List)
	return str
}

// IP_Future is a wrapper for a IP promised by a client call.
type IP_Future struct{ *capnp.Future }

func (p IP_Future) Struct() (IP, error) {
	s, err := p.Future.Struct()
	return IP{s}, err
}

func (p IP_Future) Content() *capnp.Future {
	return p.Future.Field(1, nil)
}

type IP_KV struct{ capnp.Struct }

// IP_KV_TypeID is the unique identifier for the type IP_KV.
const IP_KV_TypeID = 0xb07588184ad8aac5

func NewIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP_KV{st}, err
}

func NewRootIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP_KV{st}, err
}

func ReadRootIP_KV(msg *capnp.Message) (IP_KV, error) {
	root, err := msg.Root()
	return IP_KV{root.Struct()}, err
}

func (s IP_KV) String() string {
	str, _ := text.Marshal(0xb07588184ad8aac5, s.Struct)
	return str
}

func (s IP_KV) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IP_KV) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s IP_KV) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IP_KV) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IP_KV) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s IP_KV) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s IP_KV) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// IP_KV_List is a list of IP_KV.
type IP_KV_List struct{ capnp.List }

// NewIP_KV creates a new list of IP_KV.
func NewIP_KV_List(s *capnp.Segment, sz int32) (IP_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IP_KV_List{l}, err
}

func (s IP_KV_List) At(i int) IP_KV { return IP_KV{s.List.Struct(i)} }

func (s IP_KV_List) Set(i int, v IP_KV) error { return s.List.SetStruct(i, v.Struct) }

func (s IP_KV_List) String() string {
	str, _ := text.MarshalList(0xb07588184ad8aac5, s.List)
	return str
}

// IP_KV_Future is a wrapper for a IP_KV promised by a client call.
type IP_KV_Future struct{ *capnp.Future }

func (p IP_KV_Future) Struct() (IP_KV, error) {
	s, err := p.Future.Struct()
	return IP_KV{s}, err
}

func (p IP_KV_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Channel struct{ Client *capnp.Client }

// Channel_TypeID is the unique identifier for the type Channel.
const Channel_TypeID = 0xf0c0f9413a3083be

func (c Channel) SetBufferSize(ctx context.Context, params func(Channel_setBufferSize_Params) error) (Channel_setBufferSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setBufferSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setBufferSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_setBufferSize_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Reader(ctx context.Context, params func(Channel_reader_Params) error) (Channel_reader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "reader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_reader_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_reader_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Writer(ctx context.Context, params func(Channel_writer_Params) error) (Channel_writer_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      2,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "writer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_writer_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_writer_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Endpoints(ctx context.Context, params func(Channel_endpoints_Params) error) (Channel_endpoints_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      3,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "endpoints",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_endpoints_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_endpoints_Results_Future{Future: ans.Future()}, release
}
func (c Channel) SetAutoCloseSemantics(ctx context.Context, params func(Channel_setAutoCloseSemantics_Params) error) (Channel_setAutoCloseSemantics_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      4,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setAutoCloseSemantics_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_setAutoCloseSemantics_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Close(ctx context.Context, params func(Channel_close_Params) error) (Channel_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      5,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel) AddRef() Channel {
	return Channel{
		Client: c.Client.AddRef(),
	}
}

func (c Channel) Release() {
	c.Client.Release()
}

// A Channel_Server is a Channel with a local implementation.
type Channel_Server interface {
	SetBufferSize(context.Context, Channel_setBufferSize) error

	Reader(context.Context, Channel_reader) error

	Writer(context.Context, Channel_writer) error

	Endpoints(context.Context, Channel_endpoints) error

	SetAutoCloseSemantics(context.Context, Channel_setAutoCloseSemantics) error

	Close(context.Context, Channel_close) error
}

// Channel_NewServer creates a new Server from an implementation of Channel_Server.
func Channel_NewServer(s Channel_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Methods(nil, s), s, c, policy)
}

// Channel_ServerToClient creates a new Client from an implementation of Channel_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_ServerToClient(s Channel_Server, policy *server.Policy) Channel {
	return Channel{Client: capnp.NewClient(Channel_NewServer(s, policy))}
}

// Channel_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Methods(methods []server.Method, s Channel_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setBufferSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetBufferSize(ctx, Channel_setBufferSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "reader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reader(ctx, Channel_reader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      2,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "writer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Writer(ctx, Channel_writer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      3,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "endpoints",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Endpoints(ctx, Channel_endpoints{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      4,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetAutoCloseSemantics(ctx, Channel_setAutoCloseSemantics{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      5,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_close{call})
		},
	})

	return methods
}

// Channel_setBufferSize holds the state for a server call to Channel.setBufferSize.
// See server.Call for documentation.
type Channel_setBufferSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setBufferSize) Args() Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_setBufferSize) AllocResults() (Channel_setBufferSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{Struct: r}, err
}

// Channel_reader holds the state for a server call to Channel.reader.
// See server.Call for documentation.
type Channel_reader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_reader) Args() Channel_reader_Params {
	return Channel_reader_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_reader) AllocResults() (Channel_reader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{Struct: r}, err
}

// Channel_writer holds the state for a server call to Channel.writer.
// See server.Call for documentation.
type Channel_writer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_writer) Args() Channel_writer_Params {
	return Channel_writer_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_writer) AllocResults() (Channel_writer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{Struct: r}, err
}

// Channel_endpoints holds the state for a server call to Channel.endpoints.
// See server.Call for documentation.
type Channel_endpoints struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_endpoints) Args() Channel_endpoints_Params {
	return Channel_endpoints_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_endpoints) AllocResults() (Channel_endpoints_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{Struct: r}, err
}

// Channel_setAutoCloseSemantics holds the state for a server call to Channel.setAutoCloseSemantics.
// See server.Call for documentation.
type Channel_setAutoCloseSemantics struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setAutoCloseSemantics) Args() Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_setAutoCloseSemantics) AllocResults() (Channel_setAutoCloseSemantics_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{Struct: r}, err
}

// Channel_close holds the state for a server call to Channel.close.
// See server.Call for documentation.
type Channel_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_close) Args() Channel_close_Params {
	return Channel_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_close) AllocResults() (Channel_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{Struct: r}, err
}

type Channel_CloseSemantics uint16

// Channel_CloseSemantics_TypeID is the unique identifier for the type Channel_CloseSemantics.
const Channel_CloseSemantics_TypeID = 0x956ee3f21ad6b221

// Values of Channel_CloseSemantics.
const (
	Channel_CloseSemantics_fbp Channel_CloseSemantics = 0
	Channel_CloseSemantics_no  Channel_CloseSemantics = 1
)

// String returns the enum's constant name.
func (c Channel_CloseSemantics) String() string {
	switch c {
	case Channel_CloseSemantics_fbp:
		return "fbp"
	case Channel_CloseSemantics_no:
		return "no"

	default:
		return ""
	}
}

// Channel_CloseSemanticsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Channel_CloseSemanticsFromString(c string) Channel_CloseSemantics {
	switch c {
	case "fbp":
		return Channel_CloseSemantics_fbp
	case "no":
		return Channel_CloseSemantics_no

	default:
		return 0
	}
}

type Channel_CloseSemantics_List struct{ capnp.List }

func NewChannel_CloseSemantics_List(s *capnp.Segment, sz int32) (Channel_CloseSemantics_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Channel_CloseSemantics_List{l.List}, err
}

func (l Channel_CloseSemantics_List) At(i int) Channel_CloseSemantics {
	ul := capnp.UInt16List{List: l.List}
	return Channel_CloseSemantics(ul.At(i))
}

func (l Channel_CloseSemantics_List) Set(i int, v Channel_CloseSemantics) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Channel_Msg struct{ capnp.Struct }
type Channel_Msg_Which uint16

const (
	Channel_Msg_Which_value Channel_Msg_Which = 0
	Channel_Msg_Which_done  Channel_Msg_Which = 1
)

func (w Channel_Msg_Which) String() string {
	const s = "valuedone"
	switch w {
	case Channel_Msg_Which_value:
		return s[0:5]
	case Channel_Msg_Which_done:
		return s[5:9]

	}
	return "Channel_Msg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Channel_Msg_TypeID is the unique identifier for the type Channel_Msg.
const Channel_Msg_TypeID = 0x876b422c6839e6b2

func NewChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{st}, err
}

func NewRootChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{st}, err
}

func ReadRootChannel_Msg(msg *capnp.Message) (Channel_Msg, error) {
	root, err := msg.Root()
	return Channel_Msg{root.Struct()}, err
}

func (s Channel_Msg) String() string {
	str, _ := text.Marshal(0x876b422c6839e6b2, s.Struct)
	return str
}

func (s Channel_Msg) Which() Channel_Msg_Which {
	return Channel_Msg_Which(s.Struct.Uint16(0))
}
func (s Channel_Msg) Value() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != value")
	}
	return s.Struct.Ptr(0)
}

func (s Channel_Msg) HasValue() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Channel_Msg) SetValue(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s Channel_Msg) SetDone() {
	s.Struct.SetUint16(0, 1)

}

// Channel_Msg_List is a list of Channel_Msg.
type Channel_Msg_List struct{ capnp.List }

// NewChannel_Msg creates a new list of Channel_Msg.
func NewChannel_Msg_List(s *capnp.Segment, sz int32) (Channel_Msg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Channel_Msg_List{l}, err
}

func (s Channel_Msg_List) At(i int) Channel_Msg { return Channel_Msg{s.List.Struct(i)} }

func (s Channel_Msg_List) Set(i int, v Channel_Msg) error { return s.List.SetStruct(i, v.Struct) }

func (s Channel_Msg_List) String() string {
	str, _ := text.MarshalList(0x876b422c6839e6b2, s.List)
	return str
}

// Channel_Msg_Future is a wrapper for a Channel_Msg promised by a client call.
type Channel_Msg_Future struct{ *capnp.Future }

func (p Channel_Msg_Future) Struct() (Channel_Msg, error) {
	s, err := p.Future.Struct()
	return Channel_Msg{s}, err
}

func (p Channel_Msg_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Channel_Reader struct{ Client *capnp.Client }

// Channel_Reader_TypeID is the unique identifier for the type Channel_Reader.
const Channel_Reader_TypeID = 0x9c656810b30decd7

func (c Channel_Reader) Read(ctx context.Context, params func(Channel_Reader_read_Params) error) (Channel_Msg_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Msg_Future{Future: ans.Future()}, release
}
func (c Channel_Reader) Close(ctx context.Context, params func(Channel_Reader_close_Params) error) (Channel_Reader_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Reader_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel_Reader) AddRef() Channel_Reader {
	return Channel_Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Channel_Reader) Release() {
	c.Client.Release()
}

// A Channel_Reader_Server is a Channel_Reader with a local implementation.
type Channel_Reader_Server interface {
	Read(context.Context, Channel_Reader_read) error

	Close(context.Context, Channel_Reader_close) error
}

// Channel_Reader_NewServer creates a new Server from an implementation of Channel_Reader_Server.
func Channel_Reader_NewServer(s Channel_Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Reader_Methods(nil, s), s, c, policy)
}

// Channel_Reader_ServerToClient creates a new Client from an implementation of Channel_Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Reader_ServerToClient(s Channel_Reader_Server, policy *server.Policy) Channel_Reader {
	return Channel_Reader{Client: capnp.NewClient(Channel_Reader_NewServer(s, policy))}
}

// Channel_Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Reader_Methods(methods []server.Method, s Channel_Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Channel_Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Reader_close{call})
		},
	})

	return methods
}

// Channel_Reader_read holds the state for a server call to Channel_Reader.read.
// See server.Call for documentation.
type Channel_Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_read) Args() Channel_Reader_read_Params {
	return Channel_Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Reader_read) AllocResults() (Channel_Msg, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{Struct: r}, err
}

// Channel_Reader_close holds the state for a server call to Channel_Reader.close.
// See server.Call for documentation.
type Channel_Reader_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_close) Args() Channel_Reader_close_Params {
	return Channel_Reader_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Reader_close) AllocResults() (Channel_Reader_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{Struct: r}, err
}

type Channel_Reader_read_Params struct{ capnp.Struct }

// Channel_Reader_read_Params_TypeID is the unique identifier for the type Channel_Reader_read_Params.
const Channel_Reader_read_Params_TypeID = 0xf8dc00b2d60ea82f

func NewChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params{st}, err
}

func NewRootChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params{st}, err
}

func ReadRootChannel_Reader_read_Params(msg *capnp.Message) (Channel_Reader_read_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_read_Params{root.Struct()}, err
}

func (s Channel_Reader_read_Params) String() string {
	str, _ := text.Marshal(0xf8dc00b2d60ea82f, s.Struct)
	return str
}

// Channel_Reader_read_Params_List is a list of Channel_Reader_read_Params.
type Channel_Reader_read_Params_List struct{ capnp.List }

// NewChannel_Reader_read_Params creates a new list of Channel_Reader_read_Params.
func NewChannel_Reader_read_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_read_Params_List{l}, err
}

func (s Channel_Reader_read_Params_List) At(i int) Channel_Reader_read_Params {
	return Channel_Reader_read_Params{s.List.Struct(i)}
}

func (s Channel_Reader_read_Params_List) Set(i int, v Channel_Reader_read_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_read_Params_List) String() string {
	str, _ := text.MarshalList(0xf8dc00b2d60ea82f, s.List)
	return str
}

// Channel_Reader_read_Params_Future is a wrapper for a Channel_Reader_read_Params promised by a client call.
type Channel_Reader_read_Params_Future struct{ *capnp.Future }

func (p Channel_Reader_read_Params_Future) Struct() (Channel_Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_read_Params{s}, err
}

type Channel_Reader_close_Params struct{ capnp.Struct }

// Channel_Reader_close_Params_TypeID is the unique identifier for the type Channel_Reader_close_Params.
const Channel_Reader_close_Params_TypeID = 0x926107b4c88d431f

func NewChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params{st}, err
}

func NewRootChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params{st}, err
}

func ReadRootChannel_Reader_close_Params(msg *capnp.Message) (Channel_Reader_close_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Params{root.Struct()}, err
}

func (s Channel_Reader_close_Params) String() string {
	str, _ := text.Marshal(0x926107b4c88d431f, s.Struct)
	return str
}

// Channel_Reader_close_Params_List is a list of Channel_Reader_close_Params.
type Channel_Reader_close_Params_List struct{ capnp.List }

// NewChannel_Reader_close_Params creates a new list of Channel_Reader_close_Params.
func NewChannel_Reader_close_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_close_Params_List{l}, err
}

func (s Channel_Reader_close_Params_List) At(i int) Channel_Reader_close_Params {
	return Channel_Reader_close_Params{s.List.Struct(i)}
}

func (s Channel_Reader_close_Params_List) Set(i int, v Channel_Reader_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_close_Params_List) String() string {
	str, _ := text.MarshalList(0x926107b4c88d431f, s.List)
	return str
}

// Channel_Reader_close_Params_Future is a wrapper for a Channel_Reader_close_Params promised by a client call.
type Channel_Reader_close_Params_Future struct{ *capnp.Future }

func (p Channel_Reader_close_Params_Future) Struct() (Channel_Reader_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_close_Params{s}, err
}

type Channel_Reader_close_Results struct{ capnp.Struct }

// Channel_Reader_close_Results_TypeID is the unique identifier for the type Channel_Reader_close_Results.
const Channel_Reader_close_Results_TypeID = 0xec0d27e49a0f9f3a

func NewChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{st}, err
}

func NewRootChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{st}, err
}

func ReadRootChannel_Reader_close_Results(msg *capnp.Message) (Channel_Reader_close_Results, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Results{root.Struct()}, err
}

func (s Channel_Reader_close_Results) String() string {
	str, _ := text.Marshal(0xec0d27e49a0f9f3a, s.Struct)
	return str
}

// Channel_Reader_close_Results_List is a list of Channel_Reader_close_Results.
type Channel_Reader_close_Results_List struct{ capnp.List }

// NewChannel_Reader_close_Results creates a new list of Channel_Reader_close_Results.
func NewChannel_Reader_close_Results_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_close_Results_List{l}, err
}

func (s Channel_Reader_close_Results_List) At(i int) Channel_Reader_close_Results {
	return Channel_Reader_close_Results{s.List.Struct(i)}
}

func (s Channel_Reader_close_Results_List) Set(i int, v Channel_Reader_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_close_Results_List) String() string {
	str, _ := text.MarshalList(0xec0d27e49a0f9f3a, s.List)
	return str
}

// Channel_Reader_close_Results_Future is a wrapper for a Channel_Reader_close_Results promised by a client call.
type Channel_Reader_close_Results_Future struct{ *capnp.Future }

func (p Channel_Reader_close_Results_Future) Struct() (Channel_Reader_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_close_Results{s}, err
}

type Channel_Writer struct{ Client *capnp.Client }

// Channel_Writer_TypeID is the unique identifier for the type Channel_Writer.
const Channel_Writer_TypeID = 0x9b5844944dc0f458

func (c Channel_Writer) Write(ctx context.Context, params func(Channel_Msg) error) (Channel_Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Msg{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c Channel_Writer) Close(ctx context.Context, params func(Channel_Writer_close_Params) error) (Channel_Writer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Writer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Writer_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel_Writer) AddRef() Channel_Writer {
	return Channel_Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Channel_Writer) Release() {
	c.Client.Release()
}

// A Channel_Writer_Server is a Channel_Writer with a local implementation.
type Channel_Writer_Server interface {
	Write(context.Context, Channel_Writer_write) error

	Close(context.Context, Channel_Writer_close) error
}

// Channel_Writer_NewServer creates a new Server from an implementation of Channel_Writer_Server.
func Channel_Writer_NewServer(s Channel_Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Writer_Methods(nil, s), s, c, policy)
}

// Channel_Writer_ServerToClient creates a new Client from an implementation of Channel_Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Writer_ServerToClient(s Channel_Writer_Server, policy *server.Policy) Channel_Writer {
	return Channel_Writer{Client: capnp.NewClient(Channel_Writer_NewServer(s, policy))}
}

// Channel_Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Writer_Methods(methods []server.Method, s Channel_Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Channel_Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Writer_close{call})
		},
	})

	return methods
}

// Channel_Writer_write holds the state for a server call to Channel_Writer.write.
// See server.Call for documentation.
type Channel_Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_write) Args() Channel_Msg {
	return Channel_Msg{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Writer_write) AllocResults() (Channel_Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{Struct: r}, err
}

// Channel_Writer_close holds the state for a server call to Channel_Writer.close.
// See server.Call for documentation.
type Channel_Writer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_close) Args() Channel_Writer_close_Params {
	return Channel_Writer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Writer_close) AllocResults() (Channel_Writer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{Struct: r}, err
}

type Channel_Writer_write_Results struct{ capnp.Struct }

// Channel_Writer_write_Results_TypeID is the unique identifier for the type Channel_Writer_write_Results.
const Channel_Writer_write_Results_TypeID = 0x98be830bb53c6eb9

func NewChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{st}, err
}

func NewRootChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{st}, err
}

func ReadRootChannel_Writer_write_Results(msg *capnp.Message) (Channel_Writer_write_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_write_Results{root.Struct()}, err
}

func (s Channel_Writer_write_Results) String() string {
	str, _ := text.Marshal(0x98be830bb53c6eb9, s.Struct)
	return str
}

// Channel_Writer_write_Results_List is a list of Channel_Writer_write_Results.
type Channel_Writer_write_Results_List struct{ capnp.List }

// NewChannel_Writer_write_Results creates a new list of Channel_Writer_write_Results.
func NewChannel_Writer_write_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_write_Results_List{l}, err
}

func (s Channel_Writer_write_Results_List) At(i int) Channel_Writer_write_Results {
	return Channel_Writer_write_Results{s.List.Struct(i)}
}

func (s Channel_Writer_write_Results_List) Set(i int, v Channel_Writer_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_write_Results_List) String() string {
	str, _ := text.MarshalList(0x98be830bb53c6eb9, s.List)
	return str
}

// Channel_Writer_write_Results_Future is a wrapper for a Channel_Writer_write_Results promised by a client call.
type Channel_Writer_write_Results_Future struct{ *capnp.Future }

func (p Channel_Writer_write_Results_Future) Struct() (Channel_Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_write_Results{s}, err
}

type Channel_Writer_close_Params struct{ capnp.Struct }

// Channel_Writer_close_Params_TypeID is the unique identifier for the type Channel_Writer_close_Params.
const Channel_Writer_close_Params_TypeID = 0xb86feee7ac7bebec

func NewChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params{st}, err
}

func NewRootChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params{st}, err
}

func ReadRootChannel_Writer_close_Params(msg *capnp.Message) (Channel_Writer_close_Params, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Params{root.Struct()}, err
}

func (s Channel_Writer_close_Params) String() string {
	str, _ := text.Marshal(0xb86feee7ac7bebec, s.Struct)
	return str
}

// Channel_Writer_close_Params_List is a list of Channel_Writer_close_Params.
type Channel_Writer_close_Params_List struct{ capnp.List }

// NewChannel_Writer_close_Params creates a new list of Channel_Writer_close_Params.
func NewChannel_Writer_close_Params_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_close_Params_List{l}, err
}

func (s Channel_Writer_close_Params_List) At(i int) Channel_Writer_close_Params {
	return Channel_Writer_close_Params{s.List.Struct(i)}
}

func (s Channel_Writer_close_Params_List) Set(i int, v Channel_Writer_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_close_Params_List) String() string {
	str, _ := text.MarshalList(0xb86feee7ac7bebec, s.List)
	return str
}

// Channel_Writer_close_Params_Future is a wrapper for a Channel_Writer_close_Params promised by a client call.
type Channel_Writer_close_Params_Future struct{ *capnp.Future }

func (p Channel_Writer_close_Params_Future) Struct() (Channel_Writer_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_close_Params{s}, err
}

type Channel_Writer_close_Results struct{ capnp.Struct }

// Channel_Writer_close_Results_TypeID is the unique identifier for the type Channel_Writer_close_Results.
const Channel_Writer_close_Results_TypeID = 0x86215e947f0afb85

func NewChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{st}, err
}

func NewRootChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{st}, err
}

func ReadRootChannel_Writer_close_Results(msg *capnp.Message) (Channel_Writer_close_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Results{root.Struct()}, err
}

func (s Channel_Writer_close_Results) String() string {
	str, _ := text.Marshal(0x86215e947f0afb85, s.Struct)
	return str
}

// Channel_Writer_close_Results_List is a list of Channel_Writer_close_Results.
type Channel_Writer_close_Results_List struct{ capnp.List }

// NewChannel_Writer_close_Results creates a new list of Channel_Writer_close_Results.
func NewChannel_Writer_close_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_close_Results_List{l}, err
}

func (s Channel_Writer_close_Results_List) At(i int) Channel_Writer_close_Results {
	return Channel_Writer_close_Results{s.List.Struct(i)}
}

func (s Channel_Writer_close_Results_List) Set(i int, v Channel_Writer_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_close_Results_List) String() string {
	str, _ := text.MarshalList(0x86215e947f0afb85, s.List)
	return str
}

// Channel_Writer_close_Results_Future is a wrapper for a Channel_Writer_close_Results promised by a client call.
type Channel_Writer_close_Results_Future struct{ *capnp.Future }

func (p Channel_Writer_close_Results_Future) Struct() (Channel_Writer_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_close_Results{s}, err
}

type Channel_setBufferSize_Params struct{ capnp.Struct }

// Channel_setBufferSize_Params_TypeID is the unique identifier for the type Channel_setBufferSize_Params.
const Channel_setBufferSize_Params_TypeID = 0xee378f318f32b853

func NewChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params{st}, err
}

func NewRootChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params{st}, err
}

func ReadRootChannel_setBufferSize_Params(msg *capnp.Message) (Channel_setBufferSize_Params, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Params{root.Struct()}, err
}

func (s Channel_setBufferSize_Params) String() string {
	str, _ := text.Marshal(0xee378f318f32b853, s.Struct)
	return str
}

func (s Channel_setBufferSize_Params) Size() uint64 {
	return s.Struct.Uint64(0) ^ 1
}

func (s Channel_setBufferSize_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v^1)
}

// Channel_setBufferSize_Params_List is a list of Channel_setBufferSize_Params.
type Channel_setBufferSize_Params_List struct{ capnp.List }

// NewChannel_setBufferSize_Params creates a new list of Channel_setBufferSize_Params.
func NewChannel_setBufferSize_Params_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_setBufferSize_Params_List{l}, err
}

func (s Channel_setBufferSize_Params_List) At(i int) Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params{s.List.Struct(i)}
}

func (s Channel_setBufferSize_Params_List) Set(i int, v Channel_setBufferSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setBufferSize_Params_List) String() string {
	str, _ := text.MarshalList(0xee378f318f32b853, s.List)
	return str
}

// Channel_setBufferSize_Params_Future is a wrapper for a Channel_setBufferSize_Params promised by a client call.
type Channel_setBufferSize_Params_Future struct{ *capnp.Future }

func (p Channel_setBufferSize_Params_Future) Struct() (Channel_setBufferSize_Params, error) {
	s, err := p.Future.Struct()
	return Channel_setBufferSize_Params{s}, err
}

type Channel_setBufferSize_Results struct{ capnp.Struct }

// Channel_setBufferSize_Results_TypeID is the unique identifier for the type Channel_setBufferSize_Results.
const Channel_setBufferSize_Results_TypeID = 0xabd31dc62bd9a48b

func NewChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{st}, err
}

func NewRootChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{st}, err
}

func ReadRootChannel_setBufferSize_Results(msg *capnp.Message) (Channel_setBufferSize_Results, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Results{root.Struct()}, err
}

func (s Channel_setBufferSize_Results) String() string {
	str, _ := text.Marshal(0xabd31dc62bd9a48b, s.Struct)
	return str
}

// Channel_setBufferSize_Results_List is a list of Channel_setBufferSize_Results.
type Channel_setBufferSize_Results_List struct{ capnp.List }

// NewChannel_setBufferSize_Results creates a new list of Channel_setBufferSize_Results.
func NewChannel_setBufferSize_Results_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_setBufferSize_Results_List{l}, err
}

func (s Channel_setBufferSize_Results_List) At(i int) Channel_setBufferSize_Results {
	return Channel_setBufferSize_Results{s.List.Struct(i)}
}

func (s Channel_setBufferSize_Results_List) Set(i int, v Channel_setBufferSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setBufferSize_Results_List) String() string {
	str, _ := text.MarshalList(0xabd31dc62bd9a48b, s.List)
	return str
}

// Channel_setBufferSize_Results_Future is a wrapper for a Channel_setBufferSize_Results promised by a client call.
type Channel_setBufferSize_Results_Future struct{ *capnp.Future }

func (p Channel_setBufferSize_Results_Future) Struct() (Channel_setBufferSize_Results, error) {
	s, err := p.Future.Struct()
	return Channel_setBufferSize_Results{s}, err
}

type Channel_reader_Params struct{ capnp.Struct }

// Channel_reader_Params_TypeID is the unique identifier for the type Channel_reader_Params.
const Channel_reader_Params_TypeID = 0xb6563114436deea9

func NewChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params{st}, err
}

func NewRootChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params{st}, err
}

func ReadRootChannel_reader_Params(msg *capnp.Message) (Channel_reader_Params, error) {
	root, err := msg.Root()
	return Channel_reader_Params{root.Struct()}, err
}

func (s Channel_reader_Params) String() string {
	str, _ := text.Marshal(0xb6563114436deea9, s.Struct)
	return str
}

// Channel_reader_Params_List is a list of Channel_reader_Params.
type Channel_reader_Params_List struct{ capnp.List }

// NewChannel_reader_Params creates a new list of Channel_reader_Params.
func NewChannel_reader_Params_List(s *capnp.Segment, sz int32) (Channel_reader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_reader_Params_List{l}, err
}

func (s Channel_reader_Params_List) At(i int) Channel_reader_Params {
	return Channel_reader_Params{s.List.Struct(i)}
}

func (s Channel_reader_Params_List) Set(i int, v Channel_reader_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_reader_Params_List) String() string {
	str, _ := text.MarshalList(0xb6563114436deea9, s.List)
	return str
}

// Channel_reader_Params_Future is a wrapper for a Channel_reader_Params promised by a client call.
type Channel_reader_Params_Future struct{ *capnp.Future }

func (p Channel_reader_Params_Future) Struct() (Channel_reader_Params, error) {
	s, err := p.Future.Struct()
	return Channel_reader_Params{s}, err
}

type Channel_reader_Results struct{ capnp.Struct }

// Channel_reader_Results_TypeID is the unique identifier for the type Channel_reader_Results.
const Channel_reader_Results_TypeID = 0x89aeecad59dc62ee

func NewChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{st}, err
}

func NewRootChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{st}, err
}

func ReadRootChannel_reader_Results(msg *capnp.Message) (Channel_reader_Results, error) {
	root, err := msg.Root()
	return Channel_reader_Results{root.Struct()}, err
}

func (s Channel_reader_Results) String() string {
	str, _ := text.Marshal(0x89aeecad59dc62ee, s.Struct)
	return str
}

func (s Channel_reader_Results) R() Channel_Reader {
	p, _ := s.Struct.Ptr(0)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s Channel_reader_Results) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_reader_Results) SetR(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Channel_reader_Results_List is a list of Channel_reader_Results.
type Channel_reader_Results_List struct{ capnp.List }

// NewChannel_reader_Results creates a new list of Channel_reader_Results.
func NewChannel_reader_Results_List(s *capnp.Segment, sz int32) (Channel_reader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Channel_reader_Results_List{l}, err
}

func (s Channel_reader_Results_List) At(i int) Channel_reader_Results {
	return Channel_reader_Results{s.List.Struct(i)}
}

func (s Channel_reader_Results_List) Set(i int, v Channel_reader_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_reader_Results_List) String() string {
	str, _ := text.MarshalList(0x89aeecad59dc62ee, s.List)
	return str
}

// Channel_reader_Results_Future is a wrapper for a Channel_reader_Results promised by a client call.
type Channel_reader_Results_Future struct{ *capnp.Future }

func (p Channel_reader_Results_Future) Struct() (Channel_reader_Results, error) {
	s, err := p.Future.Struct()
	return Channel_reader_Results{s}, err
}

func (p Channel_reader_Results_Future) R() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(0, nil).Client()}
}

type Channel_writer_Params struct{ capnp.Struct }

// Channel_writer_Params_TypeID is the unique identifier for the type Channel_writer_Params.
const Channel_writer_Params_TypeID = 0x9882f67fa6ace6a1

func NewChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params{st}, err
}

func NewRootChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params{st}, err
}

func ReadRootChannel_writer_Params(msg *capnp.Message) (Channel_writer_Params, error) {
	root, err := msg.Root()
	return Channel_writer_Params{root.Struct()}, err
}

func (s Channel_writer_Params) String() string {
	str, _ := text.Marshal(0x9882f67fa6ace6a1, s.Struct)
	return str
}

// Channel_writer_Params_List is a list of Channel_writer_Params.
type Channel_writer_Params_List struct{ capnp.List }

// NewChannel_writer_Params creates a new list of Channel_writer_Params.
func NewChannel_writer_Params_List(s *capnp.Segment, sz int32) (Channel_writer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_writer_Params_List{l}, err
}

func (s Channel_writer_Params_List) At(i int) Channel_writer_Params {
	return Channel_writer_Params{s.List.Struct(i)}
}

func (s Channel_writer_Params_List) Set(i int, v Channel_writer_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_writer_Params_List) String() string {
	str, _ := text.MarshalList(0x9882f67fa6ace6a1, s.List)
	return str
}

// Channel_writer_Params_Future is a wrapper for a Channel_writer_Params promised by a client call.
type Channel_writer_Params_Future struct{ *capnp.Future }

func (p Channel_writer_Params_Future) Struct() (Channel_writer_Params, error) {
	s, err := p.Future.Struct()
	return Channel_writer_Params{s}, err
}

type Channel_writer_Results struct{ capnp.Struct }

// Channel_writer_Results_TypeID is the unique identifier for the type Channel_writer_Results.
const Channel_writer_Results_TypeID = 0xd7e3695f7166e987

func NewChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{st}, err
}

func NewRootChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{st}, err
}

func ReadRootChannel_writer_Results(msg *capnp.Message) (Channel_writer_Results, error) {
	root, err := msg.Root()
	return Channel_writer_Results{root.Struct()}, err
}

func (s Channel_writer_Results) String() string {
	str, _ := text.Marshal(0xd7e3695f7166e987, s.Struct)
	return str
}

func (s Channel_writer_Results) W() Channel_Writer {
	p, _ := s.Struct.Ptr(0)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s Channel_writer_Results) HasW() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_writer_Results) SetW(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Channel_writer_Results_List is a list of Channel_writer_Results.
type Channel_writer_Results_List struct{ capnp.List }

// NewChannel_writer_Results creates a new list of Channel_writer_Results.
func NewChannel_writer_Results_List(s *capnp.Segment, sz int32) (Channel_writer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Channel_writer_Results_List{l}, err
}

func (s Channel_writer_Results_List) At(i int) Channel_writer_Results {
	return Channel_writer_Results{s.List.Struct(i)}
}

func (s Channel_writer_Results_List) Set(i int, v Channel_writer_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_writer_Results_List) String() string {
	str, _ := text.MarshalList(0xd7e3695f7166e987, s.List)
	return str
}

// Channel_writer_Results_Future is a wrapper for a Channel_writer_Results promised by a client call.
type Channel_writer_Results_Future struct{ *capnp.Future }

func (p Channel_writer_Results_Future) Struct() (Channel_writer_Results, error) {
	s, err := p.Future.Struct()
	return Channel_writer_Results{s}, err
}

func (p Channel_writer_Results_Future) W() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(0, nil).Client()}
}

type Channel_endpoints_Params struct{ capnp.Struct }

// Channel_endpoints_Params_TypeID is the unique identifier for the type Channel_endpoints_Params.
const Channel_endpoints_Params_TypeID = 0xdb1f001689bbac5d

func NewChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params{st}, err
}

func NewRootChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params{st}, err
}

func ReadRootChannel_endpoints_Params(msg *capnp.Message) (Channel_endpoints_Params, error) {
	root, err := msg.Root()
	return Channel_endpoints_Params{root.Struct()}, err
}

func (s Channel_endpoints_Params) String() string {
	str, _ := text.Marshal(0xdb1f001689bbac5d, s.Struct)
	return str
}

// Channel_endpoints_Params_List is a list of Channel_endpoints_Params.
type Channel_endpoints_Params_List struct{ capnp.List }

// NewChannel_endpoints_Params creates a new list of Channel_endpoints_Params.
func NewChannel_endpoints_Params_List(s *capnp.Segment, sz int32) (Channel_endpoints_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_endpoints_Params_List{l}, err
}

func (s Channel_endpoints_Params_List) At(i int) Channel_endpoints_Params {
	return Channel_endpoints_Params{s.List.Struct(i)}
}

func (s Channel_endpoints_Params_List) Set(i int, v Channel_endpoints_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_endpoints_Params_List) String() string {
	str, _ := text.MarshalList(0xdb1f001689bbac5d, s.List)
	return str
}

// Channel_endpoints_Params_Future is a wrapper for a Channel_endpoints_Params promised by a client call.
type Channel_endpoints_Params_Future struct{ *capnp.Future }

func (p Channel_endpoints_Params_Future) Struct() (Channel_endpoints_Params, error) {
	s, err := p.Future.Struct()
	return Channel_endpoints_Params{s}, err
}

type Channel_endpoints_Results struct{ capnp.Struct }

// Channel_endpoints_Results_TypeID is the unique identifier for the type Channel_endpoints_Results.
const Channel_endpoints_Results_TypeID = 0xc8a1bc4350302330

func NewChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{st}, err
}

func NewRootChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{st}, err
}

func ReadRootChannel_endpoints_Results(msg *capnp.Message) (Channel_endpoints_Results, error) {
	root, err := msg.Root()
	return Channel_endpoints_Results{root.Struct()}, err
}

func (s Channel_endpoints_Results) String() string {
	str, _ := text.Marshal(0xc8a1bc4350302330, s.Struct)
	return str
}

func (s Channel_endpoints_Results) R() Channel_Reader {
	p, _ := s.Struct.Ptr(0)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s Channel_endpoints_Results) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_endpoints_Results) SetR(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Channel_endpoints_Results) W() Channel_Writer {
	p, _ := s.Struct.Ptr(1)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s Channel_endpoints_Results) HasW() bool {
	return s.Struct.HasPtr(1)
}

func (s Channel_endpoints_Results) SetW(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Channel_endpoints_Results_List is a list of Channel_endpoints_Results.
type Channel_endpoints_Results_List struct{ capnp.List }

// NewChannel_endpoints_Results creates a new list of Channel_endpoints_Results.
func NewChannel_endpoints_Results_List(s *capnp.Segment, sz int32) (Channel_endpoints_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Channel_endpoints_Results_List{l}, err
}

func (s Channel_endpoints_Results_List) At(i int) Channel_endpoints_Results {
	return Channel_endpoints_Results{s.List.Struct(i)}
}

func (s Channel_endpoints_Results_List) Set(i int, v Channel_endpoints_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_endpoints_Results_List) String() string {
	str, _ := text.MarshalList(0xc8a1bc4350302330, s.List)
	return str
}

// Channel_endpoints_Results_Future is a wrapper for a Channel_endpoints_Results promised by a client call.
type Channel_endpoints_Results_Future struct{ *capnp.Future }

func (p Channel_endpoints_Results_Future) Struct() (Channel_endpoints_Results, error) {
	s, err := p.Future.Struct()
	return Channel_endpoints_Results{s}, err
}

func (p Channel_endpoints_Results_Future) R() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(0, nil).Client()}
}

func (p Channel_endpoints_Results_Future) W() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(1, nil).Client()}
}

type Channel_setAutoCloseSemantics_Params struct{ capnp.Struct }

// Channel_setAutoCloseSemantics_Params_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Params.
const Channel_setAutoCloseSemantics_Params_TypeID = 0xd8727b5440681ed4

func NewChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params{st}, err
}

func NewRootChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params{st}, err
}

func ReadRootChannel_setAutoCloseSemantics_Params(msg *capnp.Message) (Channel_setAutoCloseSemantics_Params, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Params{root.Struct()}, err
}

func (s Channel_setAutoCloseSemantics_Params) String() string {
	str, _ := text.Marshal(0xd8727b5440681ed4, s.Struct)
	return str
}

func (s Channel_setAutoCloseSemantics_Params) Cs() Channel_CloseSemantics {
	return Channel_CloseSemantics(s.Struct.Uint16(0))
}

func (s Channel_setAutoCloseSemantics_Params) SetCs(v Channel_CloseSemantics) {
	s.Struct.SetUint16(0, uint16(v))
}

// Channel_setAutoCloseSemantics_Params_List is a list of Channel_setAutoCloseSemantics_Params.
type Channel_setAutoCloseSemantics_Params_List struct{ capnp.List }

// NewChannel_setAutoCloseSemantics_Params creates a new list of Channel_setAutoCloseSemantics_Params.
func NewChannel_setAutoCloseSemantics_Params_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_setAutoCloseSemantics_Params_List{l}, err
}

func (s Channel_setAutoCloseSemantics_Params_List) At(i int) Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params{s.List.Struct(i)}
}

func (s Channel_setAutoCloseSemantics_Params_List) Set(i int, v Channel_setAutoCloseSemantics_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setAutoCloseSemantics_Params_List) String() string {
	str, _ := text.MarshalList(0xd8727b5440681ed4, s.List)
	return str
}

// Channel_setAutoCloseSemantics_Params_Future is a wrapper for a Channel_setAutoCloseSemantics_Params promised by a client call.
type Channel_setAutoCloseSemantics_Params_Future struct{ *capnp.Future }

func (p Channel_setAutoCloseSemantics_Params_Future) Struct() (Channel_setAutoCloseSemantics_Params, error) {
	s, err := p.Future.Struct()
	return Channel_setAutoCloseSemantics_Params{s}, err
}

type Channel_setAutoCloseSemantics_Results struct{ capnp.Struct }

// Channel_setAutoCloseSemantics_Results_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Results.
const Channel_setAutoCloseSemantics_Results_TypeID = 0xe8ba8300eb17a23c

func NewChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{st}, err
}

func NewRootChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{st}, err
}

func ReadRootChannel_setAutoCloseSemantics_Results(msg *capnp.Message) (Channel_setAutoCloseSemantics_Results, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Results{root.Struct()}, err
}

func (s Channel_setAutoCloseSemantics_Results) String() string {
	str, _ := text.Marshal(0xe8ba8300eb17a23c, s.Struct)
	return str
}

// Channel_setAutoCloseSemantics_Results_List is a list of Channel_setAutoCloseSemantics_Results.
type Channel_setAutoCloseSemantics_Results_List struct{ capnp.List }

// NewChannel_setAutoCloseSemantics_Results creates a new list of Channel_setAutoCloseSemantics_Results.
func NewChannel_setAutoCloseSemantics_Results_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_setAutoCloseSemantics_Results_List{l}, err
}

func (s Channel_setAutoCloseSemantics_Results_List) At(i int) Channel_setAutoCloseSemantics_Results {
	return Channel_setAutoCloseSemantics_Results{s.List.Struct(i)}
}

func (s Channel_setAutoCloseSemantics_Results_List) Set(i int, v Channel_setAutoCloseSemantics_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setAutoCloseSemantics_Results_List) String() string {
	str, _ := text.MarshalList(0xe8ba8300eb17a23c, s.List)
	return str
}

// Channel_setAutoCloseSemantics_Results_Future is a wrapper for a Channel_setAutoCloseSemantics_Results promised by a client call.
type Channel_setAutoCloseSemantics_Results_Future struct{ *capnp.Future }

func (p Channel_setAutoCloseSemantics_Results_Future) Struct() (Channel_setAutoCloseSemantics_Results, error) {
	s, err := p.Future.Struct()
	return Channel_setAutoCloseSemantics_Results{s}, err
}

type Channel_close_Params struct{ capnp.Struct }

// Channel_close_Params_TypeID is the unique identifier for the type Channel_close_Params.
const Channel_close_Params_TypeID = 0xf8224774a4d4d6f5

func NewChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params{st}, err
}

func NewRootChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params{st}, err
}

func ReadRootChannel_close_Params(msg *capnp.Message) (Channel_close_Params, error) {
	root, err := msg.Root()
	return Channel_close_Params{root.Struct()}, err
}

func (s Channel_close_Params) String() string {
	str, _ := text.Marshal(0xf8224774a4d4d6f5, s.Struct)
	return str
}

func (s Channel_close_Params) WaitForEmptyBuffer() bool {
	return !s.Struct.Bit(0)
}

func (s Channel_close_Params) SetWaitForEmptyBuffer(v bool) {
	s.Struct.SetBit(0, !v)
}

// Channel_close_Params_List is a list of Channel_close_Params.
type Channel_close_Params_List struct{ capnp.List }

// NewChannel_close_Params creates a new list of Channel_close_Params.
func NewChannel_close_Params_List(s *capnp.Segment, sz int32) (Channel_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_close_Params_List{l}, err
}

func (s Channel_close_Params_List) At(i int) Channel_close_Params {
	return Channel_close_Params{s.List.Struct(i)}
}

func (s Channel_close_Params_List) Set(i int, v Channel_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_close_Params_List) String() string {
	str, _ := text.MarshalList(0xf8224774a4d4d6f5, s.List)
	return str
}

// Channel_close_Params_Future is a wrapper for a Channel_close_Params promised by a client call.
type Channel_close_Params_Future struct{ *capnp.Future }

func (p Channel_close_Params_Future) Struct() (Channel_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_close_Params{s}, err
}

type Channel_close_Results struct{ capnp.Struct }

// Channel_close_Results_TypeID is the unique identifier for the type Channel_close_Results.
const Channel_close_Results_TypeID = 0xf20dfadcec8a0e13

func NewChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{st}, err
}

func NewRootChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{st}, err
}

func ReadRootChannel_close_Results(msg *capnp.Message) (Channel_close_Results, error) {
	root, err := msg.Root()
	return Channel_close_Results{root.Struct()}, err
}

func (s Channel_close_Results) String() string {
	str, _ := text.Marshal(0xf20dfadcec8a0e13, s.Struct)
	return str
}

// Channel_close_Results_List is a list of Channel_close_Results.
type Channel_close_Results_List struct{ capnp.List }

// NewChannel_close_Results creates a new list of Channel_close_Results.
func NewChannel_close_Results_List(s *capnp.Segment, sz int32) (Channel_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_close_Results_List{l}, err
}

func (s Channel_close_Results_List) At(i int) Channel_close_Results {
	return Channel_close_Results{s.List.Struct(i)}
}

func (s Channel_close_Results_List) Set(i int, v Channel_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_close_Results_List) String() string {
	str, _ := text.MarshalList(0xf20dfadcec8a0e13, s.List)
	return str
}

// Channel_close_Results_Future is a wrapper for a Channel_close_Results promised by a client call.
type Channel_close_Results_Future struct{ *capnp.Future }

func (p Channel_close_Results_Future) Struct() (Channel_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_close_Results{s}, err
}

const schema_99f1c9a775a88ac9 = "x\xda\xbcY}\x94\x14\xd5\x95\xbf\xb7j\xda\xc2dj" +
	"\xaa_\xbf\x99t\x98Ez\x9d\x85\xb3Bddf\xc2" +
	"z\x9c\x83\xa7\xa7\x18\x87\x01\x03\x9b\xe9\x19D\xf1\xc4\xdd" +
	"\xad\xe9.\xa4\xa4\xbf\xe8\xae\x16Qq\x8e\x10\xc2\xfau" +
	"\xb2\xa2\x1c\x05%:l\\\x94\xd5\xe8\x90\x8f#d5" +
	"j\x8e\x1e\x01\x89\xba\x12\x8c\x04\xe3*\x89++\x92\xe0" +
	"\x09\xd9H\x16j\xcf{\xd5\xaf\xab\xa6\xba\x9b\x80\xe7\xec" +
	"\xce_=U\xef\xddw\xdf\xbd\xbf\xfb\xbb\x1f5s\xf7" +
	"\x84\x1e\xa9#4\xd2\x0a0\xf4U\x0c\x9d\xe7\xa8\x91S" +
	"\xfb'<p\xc5\x1a Q\x04hP\xc2\xd85U\xed" +
	"Dhp\xfa\xf7\xee\xbd\xe3\xb2Y?X\x0b\xe4K\xfc" +
	"\x0d@\x97\xaaF\xd8\x9bu\x7f\xfa\xc2\xc8\xfd\x7fw\xe1" +
	"\xb7\x80L\x12{N4\x0e\xb27;>\xbcl\xd9\xc5" +
	"s\x96\xaf\x87D\x0b\xa2\xf3\xfc\xda\x99\xdd\xfag/\xfc" +
	"\x0e\xfaP\x91\xc2H\xdfo\xdcC?iT\x00\xe8\x91" +
	"\xc6\x95\x80\xce\xb1\xe1CK\x9e:\xfa\xbd;\x80\xb4 " +
	"@\x08\x99\xa0>\xb5\x0d\x01\xe9B5\x0e\xe8\xdc\xb2\xe1" +
	"\xf0\xea_.\x19\xbd\x1b\xc8_\x0a\x15nW\xd7\xb0\x83" +
	"\xa2\xc7\x7f\x92\xd8\xd70\xed\x9f\x80\xa8\xb2\xb3\xfb\xce\xc7" +
	"K\xdbv\x1f\xdf\x04\x804\xa3\xee\xa0%\x95\x9d\xb1B" +
	"\xed\xa7\x9b\xd8/'\xd6{\xcf\xab?P\x8c\x0d>}" +
	"oW\xafdb~\xfc\xfa\x9e\xe5\x1f>3z\x9f\xef" +
	"\x80\x8cz-{s\xe1\x8e\x03\xad\x9f\x1e\xcen\x04\xd2" +
	"\"y\x17\x01\x08c\xd7\x12\xb5\x0d\xa9\xc5\xcf0\xd5K" +
	"\x01\x9d\xd1\x0f\x9f\xfc\x97\x91?\xacy\xd0\xbd\x07\x97o" +
	"\xa9\xadL\xca\xb4\xab;n\xbc\xff\xd6\xad\x0f\xfal\x98" +
	"pm\xb83;\xfb\x87_\\\xfb\xfc\x83>\x9d.S" +
	"\xb9\x0d\xaf\xf9\xfd\x0b\x0b\xef\xbf\xe2\x9a\x87\x80\xb4\xc8\xe3" +
	"O\xa6S\xd5\x0fh\x87\xaa\xd0\x0e5F\xafR\xd7\xd3" +
	"\x13\xfczo\x1fU\xbf\x1f^f>\\c\xc3\xbb\xea" +
	"\x07\xf4\x88\xaa\xd0#j\x8c\xaaM\xeb\xe9SMl\xc3" +
	"\xd8\xaf\xe6O~}\xf4\xce-@Z\x85V\x1b\x9b\xb8" +
	"\xcf\xd7\xf7e\xdf\xfe\xe9\x07\xfb\xb7T\x99uu\xd3V" +
	"\xba\x8em\xa6\xb77\xf5\xd3'\x9a\xa2\x00\xceA\x9cJ" +
	"\xc6\xa2\x1f\x8fV\xdc\x07@75\x9d\x04\xa4[\x9a\x98" +
	"\xf7\xde\xc9^s\xf7\x17OX\x8f\x07\x841\xbd\x9ek" +
	"\xdaN_\xe6\xe2^l\xea\xa7DS(\xd1\xa2\xce\xe6" +
	"\x0dw\xc7.\x9e\xbc\xb3\xd6\x06U\xdbL[4\xb6\x81" +
	"h\xfd\xd4\xd0\x14jh\x9as\xd7w\xdf\xf9\xca+\x17" +
	"\xbc\xf5\xaf>\xc3_\xa5q\xf7\x1d\xfe\xce\x7f\xad\xb0\xf6" +
	"\x1fy\x0a\xc8\xc4\x0a\xb4t\xad\x9bAk\xbe\xc6\x94{" +
	"y\xfb/\xae\xfc\xf2?\x96\x9e\x01\x12F\xe7o\xb7\x8d" +
	"\xedz\xe8\xb3G\xde\x82\x90\xc4\x8e\xb0\xb4\xcdt\x05?" +
	",\xa31\x9c\xbe~\xe7]\xaf\x7f\xd3X>\xe6\xf3\xe2" +
	"n\x8d\xfb\xf7\xe7\xf3\x1e^\xb2\xf7\xcd\xa7wT\xd9k" +
	"L\xfbw\xfa\x1c\x17\xb1S\xeb\xa7\xef\xb3_\xce\x13\xc7" +
	"2\xbd\xcd\x1d\x8b\x7f\xe4\xd3\xb6,\xe6\xe8\xc7\xb7<\xf9" +
	"\x9f\xc7r\xcf\xfa\xc00\xa6q\x80v\xf5G\xa7\xf6\x7f" +
	"k\xffN *z\x07\x84$%\x8ct\x8b\xb6\x81>" +
	"\xc6\xcf\x18\xd5V\x02\xd0\x96p\xd4y\xed\xb9\xa7n\xcd" +
	",9\xbd\xd3\x054\xf7I\x17\x09\x0f\xb3{_\x10f" +
	"\xf7NnS\xbe\xf7\xc4\xce\x19/Vi|yx;" +
	"\xed\x0b3iz\xb8\x9fZa\xe6\xe1\xa1\xafL~\xf4" +
	"\xb5\x05\x97\xbe\xe8#\x87%\xe1n\xa6\xd7\xe4P\xcf\xbb" +
	"s\x7f\x82/\x05\xf4bv\xa6zx\x17\x9d\xcf%\xf5" +
	"\x85\xe3\x00tuXsf\xfe\xd5\xcc\x81\xde\x7f\x1b}" +
	"\xb5\x8c\x15\xa6\x7fW)\xcc\xfd\xb1:\xccl\xfct|" +
	"\xda\x8f\x9e\xfddh7\x10*\x8eB\"\xb1\xa3\x1ex" +
	"\xf4\xf8\xea\xa1Wv\xef\xa9\x81\x8a\xdf\x84w\xd1O\xf8" +
	"IG\xc2\xeb\xe9\x18Q\xe8\x18\xd1\x1c\xe7\xddM\xad\xbf" +
	"R\x1b^\x03\xd2\\v\x17}\x8c\x9c\x84\x06\xe7\xca\x8e" +
	"\xef\xfcN\x9as\xdb\xcf\xaa\xee~\x07\xd9A\xef%l" +
	"\xe1=\xa4\x9f\xfe\x90\xfdr\xdaB\xef\xfd\xc5\xc8\x7f\x87" +
	"\xdf\xf0\x93\xd3\x162\x9di\xfc\x18a\x96\xac\x80&\xe8" +
	"\x1a\x00\xfa2YCw\x93(\x00}\x93\xb0\xdb}\xe3" +
	"\x86\xd0\xf6+w\xfc\xf3[>\x04\xe9\x11\xee\xfa\xb7\x0e" +
	"\xca\xa7\xf7\xde\xb6w\x7f@\x8a\xcc\xa4L\x8b\x1c\xa4\xb3" +
	"\"\xecWG\xe4i@\xe7y\xfd\xa5\xf8\xf6\x0d+\x0f" +
	"\xd4\x02\xc3\xbe\xc8\x1a\xfa&_\xbb/\xc2\xc0\xa0\xd3\xa8" +
	"\xf3\xf4\xc9\xc3\xbf\x1d\x9d\xf1\xc8\x01\x1f\xbb]No\xe6" +
	"q~d\xe9\x8a\xbf\xb7\x0e\xbf\xed\xbf\xdc4\xca\x99\xb7" +
	"\x83\xb2\xcb\xed\x9f\xbc\xacg\xd1-\x85_p\"/\xfb" +
	"\xc3\xa4\x1b\xd8\x82\x12_\xd0\xfc\xf8\xc8}\x0b\xbf?x" +
	"\xd0\x07\x8d'(c\xb6\xf7\xae{\xf2\xc7w|)\xf6" +
	"K\x0f\xe4\xf7R\xce-1k\xe3\xacy\xdaC\x87\xdc" +
	"\x1d\xee\x99\xabh+\x13y;\x13\xf9\xdb\xd9[\xa3\x1f" +
	"\xaf\xdd\xf5\x91\xb7q\x94nf\x1b_\x1b~il\xf0" +
	"\xc4\xde\x8f 1\x09\xd1Y\xb4\x7f\xcf\xf5w\x9d\x9f\xfe" +
	"\x04\xaeB\x05e\x00W<\xd2M\x94\x99\xa8\xfb\x11m" +
	"\xf3\xaf\xffZ=\xea\x8b\xa4\x8efN\xab\x95}\x09\x15" +
	"\xc7C\x16\x80^\xd0\xfc\x01\x9d\xd6\xcc~Mmf\xfe" +
	"\x1az\xb6\xf3\xdb\x1d\xdf\xbe\xf4\x98\xff\xfa\x16\x93\x83\xb4" +
	"\xd4\xcc\xae\xff\x87\xc5\xd7\xcd\xbc\xf5\xf2E\xc7\x82P\xea" +
	"\xda\xd8,!\x1d\xe5\xa2\xb64\xaf\xa7--,\x8e*" +
	"\xa4\\\x0d\xe1P\xcbv\xaa\xb6\xf43\xd7\xb4\xacG:" +
	"#\xaa\xd0\x19Q\xcd\xb9\xef\x9d\xf7\x8e<\xac\xbez\xbc" +
	"\xc6\x8e\x0b\xa3{\xd82\x86\x8fh?]\x15U\xe8\xaa" +
	"\xa8\xe6\xd0\xa6;\x8f\x1e:\xa9~\xea#\x97L\x94#" +
	"\xec\xc4\x81\xfd\xdf\xb5\xfb\xdb\xfe\xe8\xbf\xcbU\xd1\x08\xbb" +
	"\xcbu\xd18\xe0{\x97<\xdet`\xc7\xa1?z\x16" +
	"[\x17\x9d\xc36\xbe\xf2\xc6\xa3\xb7tt\xcb\x9f\xf9\xe2" +
	"(\x13\xfd\x14\x1a\x1c\xf2\x85\x8b\x9e\xb9\xfc\xee\xc1?\xb9" +
	"\xe4\xca\xb7$\xa2\xdc\xc7\xfb&l\x8c=wW\xe8\x94" +
	"\x1fW\x97E9\xaetv\x963atu\xeb7g" +
	")\xa7\xdc0w\xf9\xc2\x88\xb2\x9ca\xf2\xf7'\xfb/" +
	"\x19\xd9\xf7S\xf3\x94\xb8\x06@\xd7\xba(\xa7\x81\xdb\xb6" +
	"N\xdd\xf5\xc0\xe9\x86\xd35\xc2\xad\xcb\x8aF\x90Y\x02" +
	"\x80\x96\xa2+a\x9d\x93\xcce2\xb9l{R6\xf2" +
	"\xd9|w\xaf\x91\x9f\x97K\xa7\xccB{\xc1L\x9bF" +
	"\xd1\x9c2\x103\x0aF\xa6X\xb5.\x9d\x1e6\x92\xcb" +
	"\xdb\x93F:=e\x80-AoM\x83\xbbf\x99\x91" +
	"\xcd\x9a\xe9\xf6\xab\x0b\x96m\x16\xda\x93\xe9\\\xd1\x9c2" +
	"h\x16Ki\xdb\xb7V\x1a\xb7va\xf1z\x80\x01\xc4" +
	"\xc4\x04\xb9\xa1\xd1q\x1a\x10\x80L\xeb\x04HL\x911" +
	"1SB\x15O;\xcd\xcc7d\xc6t\x80\xc4E2" +
	"&\xbe*a\xecF#]21\xe2/\xa4\x000\x02" +
	"\xa8\xa5rY\x13\xce\x0bj_>\xad`\x1a)\xb3\xc0" +
	"uR\xd2v1\xd1 7\x00\xf03\xd5\x08@b\x82" +
	"\x8c\x89\x8b$\xc4\x02\x12\xafr\x00\xe8A\x82\xb1D\x83" +
	"\xe4;\x8ci\x84\x84\xe5\x8c\xf29\x0a?g~\xca\xcc" +
	"\xda\xd6R\xcb\x18N\x9b\x01\xb3\xbav(\x82\xd8 \xac" +
	"\x1a\xe3fe\x16h\x90C\x00\x95\xd2\x12Ef%d" +
	":H$\xa4h\xcc\xf2=8\x80X\xc7\xec\x83\xfcr" +
	"e\xb3s\x0f\x15\x01\x02kk(\x984\xf2|\xb5\\" +
	"\xed\xf3\xb2\xe0^&q\xc8\xcc\x18Y[\xb1\x92E\xee" +
	"-\x94\x00\x08i\x03@$\xe7\xb7\x02(K\x87\xf3r" +
	"6WG\xc2J\x8e\x88:\xc7\x0c\xd9\xb9<\xd3\xa7\xbd" +
	"h\xe7\xf2g\x07-.\xef\xcfA\xeb\xea\x82\xa5\xd8f" +
	"\x81\x9b\x16%\xe7g\xf7\x1e?\xbdj[\xeaS`\x9e" +
	"\xd4\x9b\x11\x1b\x01\x08^\xeb\xb0\xe5L,\xc8f\x81c" +
	"\x80yA\x14\xeb(jQ\xd2\xd1\x09\xa0_\x8c\xfal" +
	"$\x0b\x15\xc4J]\x82\xa2\xe2':[1\x1b\xf5\x05" +
	"H\xaeSb\\\xc5\x9a\xb8\xa9\xf9\xb0\x07c\xdcq\xe7" +
	"\xb2\xc3\x0f\x05)\x08\x05%uvWg\xa8\xf1_]" +
	"P\x9e\xd7\xaf\x90\x8e\xe9\xe3\xaf.z\x06\x14\x19e\xfc" +
	"\xd55\x16e\xff\x7f7\x97\xab\x80\xddne\x97\xe6\xaa" +
	"x\x0c\xf9:=i+V.\xeb\xc5\x9b`r\x14\xa5" +
	"\x11!\xad<\xde\xe4T\xae\x87\x99\x0f\x1ds\xef\xdf\x1c" +
	"z\xf4\xe0\xb6\x17\xc1\x17N\x92\x90f\xe5\xb2\x1d\xed\xa9" +
	"\xdc\x94\xb8\x1bq\xb5(\xa5YB\xccc\x04$FP" +
	"\x01}\xe6\x1aI\xcd\xce\x15Vy\x0a\x89<\x81\xa2\xca" +
	"\"d\x0e\x80\xde\x88\xfa$$3\x94\x91|!\x97*" +
	"%+\xe6\xaat\x12~s\x8d{\xc8\xcd\xa5O@\x12" +
	"\xea$\xa1\xee\xd8\xfcl\xbed\xc7\xbf^\xb2\xf3%;" +
	"\xa0Lo:'\xfb\xb9Hd$\x14\x15(\xe3\"O" +
	"\x15\xcd\xb6\x92\xcb\xc5\x91\x95\x06\xc5\xaf\xc7\xb8\x87\xae\x1e" +
	"\x0dH0\x82\x8b\xea\xc4w\xd1\xb4\xe7\x94\x96.5\x0b" +
	"C\xd6\xcd\xe5\x00\x97\xed a,f\xe4_f/\x9e" +
	"\x08\xa6\x0c\xc6]v\xf5[\xbf\xcd\xb3\xber\xa3\x91\xe6" +
	"\xc9\xa2R:\xb8\xc9\"p\xfd\xf9\x03\xed\xf2\xd7\x16\x97" +
	"\x93QY\xcc\xb46/\x17\x11\xc4r*\xea\xf4R\x91" +
	"\xb2\xdc\\\x85\x8d a#T\xd2R\xc0\xd3\xb52h" +
	"\xd5\xd5\xa4 \x8c\xd1\xf4\x1c!\xbaR\x14%q%)" +
	"0\xa8\xd7\x8a\x87@\xc6\x0b2\xef\x19\x12vU\xe6p" +
	"\x8d3`XX8\x1b\xdb\xb4\xf9l\xb3\xb4hs\xbb" +
	"WZ5\xd7\xeeJ1\x9b\xc2H\xa8\xfa\x05Gi\x84" +
	"\x84\"8\x17\x87\xce.u\xd5\xca\xe5~\xd7'\x8d<" +
	"\x12\xaf\x19e\xf9\xaa\xca\xf1z\xd2\xd6X\x1c{\x06\x17" +
	"\xfd;\x8a\xa2\xeb\xecX\xa1^M%\xf0\x198w\x81" +
	"U\x8c\xdb}Y[\x84\x7f\xe5\x02\x9d\xde\x05b&{" +
	"\xcf\xadXi,\xcb\xc6b\xa14\xec\x0c\xe4\xac\xacm" +
	"\x16\x16\x81\xb2*o\xd6A\x81\x99M\xe5\xd9\xb2\xa2\x17" +
	")>7F\xcan\xbc\xc2\xe7F\x9d=\x9c-c\xe2" +
	"\x1b\xe7T\x0f\xe1J$\xde\x94\xe6\xecJ\xa7\x90\xe0\x9e" +
	"\xe4\xf2v\xc6(\xf5J\xa5|\xdc\xb5\xaa\x0bB\xe6%" +
	"\xd1h\xa1\xe8\x9fHG\xdb\xf8T%Fx(\xdau" +
	"\xa2\xcf!zLO\xa1n#Y\xa70x\x08\x0d+" +
	"\xcd\xb4\x9f\xc1\xc6=\xec\xc1\x91\xb2GyZ=~\xcf" +
	"%\xd1\xc8?\xec|)\x98V\xcbkzA6\xf2u" +
	"$\xd5\x11/\x08\xb2;\xfe\xf5\xe1\x1b\xcc\xa4]3\xdd" +
	"\xb0lS\x07PCv.\xc6k)\x0f\xc9b\xcc\x86" +
	"\xa2\xcf\xaeP\x07+\xb7jQ\xc7\\#\xc92R{" +
	"9\xd10whg\"\xd7\\\xc9v\x83\xb9\x92u\xea" +
	"\xb0+\xf0\xb8\xf1\xa6K\xd8*\x7fm\xb1\x1f\x88\xd7\x96" +
	"\xa9c\x1c\x10\xe7\x94\x818OB\xc7\xb0\xed\x825\\" +
	"b\xb5Z\x11\x9b\x00\x07d\xc4\xb0'\x11\x90=\x1cI" +
	"\xe6\xb2\xb6\x99\xb5\xeb\xf0\xf0\xf8r\xb3.\x0f\xcf\xcf." +
	"\xcd\x152\x86m\xc9n\xb5\xd0XQ\xb3\xaf\x15 \xd1" +
	"#cb\x81O\xcd\xf9\xac;\xb9B\xc6\xc4\x80\x84D" +
	"\x92\x9ay}\xbcp\x18 \xb1@\xc6\xc45\x12\xcaV" +
	"J\xa4\x09-kdL\xf1\x8f\x932\x8b\xc9\x82\x95\xb7" +
	"\x81\xd5%\x95\xa7\x01\xa2X\x00\x01\xea\x9d^\x8bz}" +
	"\x1d\x92\xb6\xcc4Rn\x83$&#\xe5\x06\xc96\xac" +
	"\xb4\xeb\xaf\xc0\x1b\x8f|\xe7U\xe5\xe7346\xe5\xc2" +
	"\xe7\xcc\x95\xff\x9f\xeb\xb8>?mx\x85\x83^\xb2s" +
	"\xbeV\xc5J\x16E3\xe1?\xb5\xd5;UN\x16Q" +
	"\xf3\xa6\xd9\xf5\x8f\xd5j$\xf3|\xa0}\xf2\xf7,\xf5" +
	"\xc8\xb7^k\x9d\x0f\xe43\x06H\xbf\xce\xdd^\xb4\xc5" +
	"s\x9c\x18\xb8g+\xe4\x11\x88\xb7\xb3\xb1L\x9d\xd2j" +
	"\xc8.\x94\x92v\xa9`\xa6\x16\x997\xd9\xedE\xbbP" +
	"\x8a\xf1\xff\x19\xfe\x1b\x9dr+\xde7\xdd\x8b\x00\xb7A" +
	"\x97\x02!\xa0J\xa7\x9cf\x94Y\x0c0\xaa\x98'c" +
	"b\x91\x84Z\x967\xe7\xda\x0d\xc5\\\x16\xceSn\xca" +
	"\xa4}\x9d\xfa\x19\x9a\xd9:\x8d\x9eOY\xc5\xbc\xc9\x0e" +
	"D\x88o\x88\xc0\xfe\xbcQ\x19\x991\x08R\xb9T\x13" +
	"\xe1V,\x8b\x024\xcf\xaa2\x0d\x00\x0b\x91\xa8\xd3=" +
	"'iE\xebf\x13\xcf\x07\x09\xcfg\xf6:C\xab\xe2" +
	":\x1e\xbc\x94&\xbe\xba\xa0\x98V\xb3\x94&\x91\xa9," +
	"\x99\x89\x99%\x8ao?d\xe2\x1c21\x06Hf\xf1" +
	"D\xf6\xb9\xd2S\xb9\x9a\xf1\x0a\xa4`\xe1\xd7\xbb\xcc\xd0" +
	"\x98\x05\x12aD\xdf\xa7\x9f\x897\xfb:\xc4\x89m\xfe" +
	"/-\xdd\xbe\xef4\xa4\xdb\x11\xc8\x83\xb8\x8b=ea" +
	"\xf1\xfa\xb8\xeb\xdf\xb8[y&\xbe\xcc\xef.&\x8b(" +
	"\xbe]\x90\xb1\x02\x80\xfe\x0c\xea/ y\x93Y@|" +
	"&@\xf1y\x8c\xbc\xdc\x0d\xa0\xbf\x80\xfa\x1bH\xdeW" +
	"P\xaa|oB1\xc6%?g+\xde@\xfd?\x90" +
	"\x1cWP\x163X\xdf\xd8\xfd7\x83\x00\xfa\xafQ\xff" +
	"=\xd2\x10*\xd8P\x99\xf0\xe2\xec\xad\xd1\x8fa\xed\xae" +
	"\x8f\xc8g;\x00\xf4\xff\xc1\xdeFDz\x01*\x18\xaa" +
	"\x8c\x0eQL\x17)\xc1N\x00\xb6\xa2w\x12\"\x9d\x81" +
	"\x8a#0\x031\x8e\x9as\xe9p\xe3n\xe1~N[" +
	"\\\xae=\x97-\x8e\xe0&\xc0\xe29\xed\x13\xa4\x82\x82" +
	"Ub\xdc\xb5\xff\xe7]\x7f\xb9}\\\x1c`\x02_G" +
	"\xe8N\x13\xdd\xdaG\x0ccQ|\xf2\"\xa4\xd3\xd7\xbf" +
	"\xba\x1c \x0e\xab\xf4\x86~\x0d\xc6=\xac\xdd\xc0\x8e'" +
	"{\x1faU\xb3\xeb\xf8E58d3@\",c" +
	"b\x92\x84\xceJ\xc3\xb2\xe7\xe6\x0a}\x98\xc9\xdb\xab\x18" +
	"\x8cd\xb3\x80\x08R\x08\xb1j\xee\x18`M\x86\x1d\xd1" +
	"\xc7\x8d+\xa2\xbd\x02\xb2v*\xaa\xee\xack\xaf\x0b\x96" +
	"\x88\x03FA\x09\x0c?Z=:\x94\xad,\xcfW\xf5" +
	"\xeaC)\xd8\x00\xd4\x98\xa5\xf8\xd9\xd5\xb62\xee\xec\xb7" +
	"2^\x08\x08T\x82\xc3\x99\x9a\x1d\xc5\xb5\x99\x15\x03V" +
	"\xdeL[YSO\xa5\x0af\xb1hb\xb1~\x12\xf1" +
	"\xca\xacn\xdf \xda\xca\xe6K\xb6H#\xf1\x1c\x9f\xaa" +
	"\x88\x7f\xff7\x00\x00\xff\xff\xaa\x82\x88\x80"

func init() {
	schemas.Register(schema_99f1c9a775a88ac9,
		0x82449708d4fd120d,
		0x83b4353989cbcb47,
		0x86215e947f0afb85,
		0x876b422c6839e6b2,
		0x89aeecad59dc62ee,
		0x8ca159db7de3927b,
		0x902904cd51bff117,
		0x926107b4c88d431f,
		0x93a1b0e66bcacfbb,
		0x956ee3f21ad6b221,
		0x9882f67fa6ace6a1,
		0x98a27c9476315729,
		0x98be830bb53c6eb9,
		0x9b5844944dc0f458,
		0x9c656810b30decd7,
		0x9d8aa1cf1e49deb1,
		0x9dd4e2c3d76e4587,
		0xa1eb17b1112501da,
		0xa869f50b8c586ed9,
		0xa8b91e2c1f8c929a,
		0xabd31dc62bd9a48b,
		0xade9d46971ea9ee3,
		0xb07588184ad8aac5,
		0xb16b6184cf8b8acf,
		0xb2afd1cb599c48d5,
		0xb6563114436deea9,
		0xb86feee7ac7bebec,
		0xb9d4864725174733,
		0xb9fe596d7cadbdcc,
		0xc12db9a9ae07a763,
		0xc1374ccca01e2b53,
		0xc201bf46dd40051e,
		0xc8a1bc4350302330,
		0xc953edb8b6293faf,
		0xcac9c6537df1a097,
		0xcc040dde1a99ddff,
		0xce7e4202f09e314a,
		0xd010f77f1bdf0522,
		0xd39ff99bbab1a74e,
		0xd3a3b24aaa056a5c,
		0xd4cb7ecbfe03dad3,
		0xd67792aa3fc241be,
		0xd69f2da1efe3faaf,
		0xd7e3695f7166e987,
		0xd8727b5440681ed4,
		0xda52b34d937fa814,
		0xdb1f001689bbac5d,
		0xdc9b0f483595691f,
		0xe8ba8300eb17a23c,
		0xe8cbf552b1c262cc,
		0xec0d27e49a0f9f3a,
		0xed6c098b67cad454,
		0xee378f318f32b853,
		0xee543d7c305d56f6,
		0xf0c0f9413a3083be,
		0xf1c80d9ce9dfd993,
		0xf20dfadcec8a0e13,
		0xf8224774a4d4d6f5,
		0xf8dc00b2d60ea82f,
		0xf9033a317ba0d0c6,
		0xfb528c3db0280a11,
		0xfd058bbd1f9508cd,
		0xfd0735841a7da108,
		0xfd65c3cd7f2f47fa,
		0xfe04fe97ba25a27e)
}
