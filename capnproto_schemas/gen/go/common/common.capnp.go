// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type IdInformation struct{ capnp.Struct }

// IdInformation_TypeID is the unique identifier for the type IdInformation.
const IdInformation_TypeID = 0xd4cb7ecbfe03dad3

func NewIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func NewRootIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func ReadRootIdInformation(msg *capnp.Message) (IdInformation, error) {
	root, err := msg.Root()
	return IdInformation{root.Struct()}, err
}

func (s IdInformation) String() string {
	str, _ := text.Marshal(0xd4cb7ecbfe03dad3, s.Struct)
	return str
}

func (s IdInformation) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IdInformation) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s IdInformation) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IdInformation) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IdInformation) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IdInformation) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s IdInformation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IdInformation) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IdInformation) Description() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s IdInformation) HasDescription() bool {
	return s.Struct.HasPtr(2)
}

func (s IdInformation) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s IdInformation) SetDescription(v string) error {
	return s.Struct.SetText(2, v)
}

// IdInformation_List is a list of IdInformation.
type IdInformation_List struct{ capnp.List }

// NewIdInformation creates a new list of IdInformation.
func NewIdInformation_List(s *capnp.Segment, sz int32) (IdInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return IdInformation_List{l}, err
}

func (s IdInformation_List) At(i int) IdInformation { return IdInformation{s.List.Struct(i)} }

func (s IdInformation_List) Set(i int, v IdInformation) error { return s.List.SetStruct(i, v.Struct) }

func (s IdInformation_List) String() string {
	str, _ := text.MarshalList(0xd4cb7ecbfe03dad3, s.List)
	return str
}

// IdInformation_Future is a wrapper for a IdInformation promised by a client call.
type IdInformation_Future struct{ *capnp.Future }

func (p IdInformation_Future) Struct() (IdInformation, error) {
	s, err := p.Future.Struct()
	return IdInformation{s}, err
}

type Identifiable struct{ Client *capnp.Client }

// Identifiable_TypeID is the unique identifier for the type Identifiable.
const Identifiable_TypeID = 0xb2afd1cb599c48d5

func (c Identifiable) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c Identifiable) AddRef() Identifiable {
	return Identifiable{
		Client: c.Client.AddRef(),
	}
}

func (c Identifiable) Release() {
	c.Client.Release()
}

// A Identifiable_Server is a Identifiable with a local implementation.
type Identifiable_Server interface {
	Info(context.Context, Identifiable_info) error
}

// Identifiable_NewServer creates a new Server from an implementation of Identifiable_Server.
func Identifiable_NewServer(s Identifiable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Identifiable_Methods(nil, s), s, c, policy)
}

// Identifiable_ServerToClient creates a new Client from an implementation of Identifiable_Server.
// The caller is responsible for calling Release on the returned Client.
func Identifiable_ServerToClient(s Identifiable_Server, policy *server.Policy) Identifiable {
	return Identifiable{Client: capnp.NewClient(Identifiable_NewServer(s, policy))}
}

// Identifiable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Identifiable_Methods(methods []server.Method, s Identifiable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// Identifiable_info holds the state for a server call to Identifiable.info.
// See server.Call for documentation.
type Identifiable_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Identifiable_info) Args() Identifiable_info_Params {
	return Identifiable_info_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Identifiable_info) AllocResults() (IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{Struct: r}, err
}

type Identifiable_info_Params struct{ capnp.Struct }

// Identifiable_info_Params_TypeID is the unique identifier for the type Identifiable_info_Params.
const Identifiable_info_Params_TypeID = 0x9d8aa1cf1e49deb1

func NewIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func NewRootIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func ReadRootIdentifiable_info_Params(msg *capnp.Message) (Identifiable_info_Params, error) {
	root, err := msg.Root()
	return Identifiable_info_Params{root.Struct()}, err
}

func (s Identifiable_info_Params) String() string {
	str, _ := text.Marshal(0x9d8aa1cf1e49deb1, s.Struct)
	return str
}

// Identifiable_info_Params_List is a list of Identifiable_info_Params.
type Identifiable_info_Params_List struct{ capnp.List }

// NewIdentifiable_info_Params creates a new list of Identifiable_info_Params.
func NewIdentifiable_info_Params_List(s *capnp.Segment, sz int32) (Identifiable_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Identifiable_info_Params_List{l}, err
}

func (s Identifiable_info_Params_List) At(i int) Identifiable_info_Params {
	return Identifiable_info_Params{s.List.Struct(i)}
}

func (s Identifiable_info_Params_List) Set(i int, v Identifiable_info_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Identifiable_info_Params_List) String() string {
	str, _ := text.MarshalList(0x9d8aa1cf1e49deb1, s.List)
	return str
}

// Identifiable_info_Params_Future is a wrapper for a Identifiable_info_Params promised by a client call.
type Identifiable_info_Params_Future struct{ *capnp.Future }

func (p Identifiable_info_Params_Future) Struct() (Identifiable_info_Params, error) {
	s, err := p.Future.Struct()
	return Identifiable_info_Params{s}, err
}

type StructuredText struct{ capnp.Struct }
type StructuredText_structure StructuredText
type StructuredText_structure_Which uint16

const (
	StructuredText_structure_Which_none StructuredText_structure_Which = 0
	StructuredText_structure_Which_json StructuredText_structure_Which = 1
	StructuredText_structure_Which_xml  StructuredText_structure_Which = 2
)

func (w StructuredText_structure_Which) String() string {
	const s = "nonejsonxml"
	switch w {
	case StructuredText_structure_Which_none:
		return s[0:4]
	case StructuredText_structure_Which_json:
		return s[4:8]
	case StructuredText_structure_Which_xml:
		return s[8:11]

	}
	return "StructuredText_structure_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StructuredText_TypeID is the unique identifier for the type StructuredText.
const StructuredText_TypeID = 0xed6c098b67cad454

func NewStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func NewRootStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func ReadRootStructuredText(msg *capnp.Message) (StructuredText, error) {
	root, err := msg.Root()
	return StructuredText{root.Struct()}, err
}

func (s StructuredText) String() string {
	str, _ := text.Marshal(0xed6c098b67cad454, s.Struct)
	return str
}

func (s StructuredText) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StructuredText) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s StructuredText) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StructuredText) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StructuredText) Structure() StructuredText_structure { return StructuredText_structure(s) }

func (s StructuredText_structure) Which() StructuredText_structure_Which {
	return StructuredText_structure_Which(s.Struct.Uint16(0))
}
func (s StructuredText_structure) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s StructuredText_structure) SetJson() {
	s.Struct.SetUint16(0, 1)

}

func (s StructuredText_structure) SetXml() {
	s.Struct.SetUint16(0, 2)

}

// StructuredText_List is a list of StructuredText.
type StructuredText_List struct{ capnp.List }

// NewStructuredText creates a new list of StructuredText.
func NewStructuredText_List(s *capnp.Segment, sz int32) (StructuredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StructuredText_List{l}, err
}

func (s StructuredText_List) At(i int) StructuredText { return StructuredText{s.List.Struct(i)} }

func (s StructuredText_List) Set(i int, v StructuredText) error { return s.List.SetStruct(i, v.Struct) }

func (s StructuredText_List) String() string {
	str, _ := text.MarshalList(0xed6c098b67cad454, s.List)
	return str
}

// StructuredText_Future is a wrapper for a StructuredText promised by a client call.
type StructuredText_Future struct{ *capnp.Future }

func (p StructuredText_Future) Struct() (StructuredText, error) {
	s, err := p.Future.Struct()
	return StructuredText{s}, err
}

func (p StructuredText_Future) Structure() StructuredText_structure_Future {
	return StructuredText_structure_Future{p.Future}
}

// StructuredText_structure_Future is a wrapper for a StructuredText_structure promised by a client call.
type StructuredText_structure_Future struct{ *capnp.Future }

func (p StructuredText_structure_Future) Struct() (StructuredText_structure, error) {
	s, err := p.Future.Struct()
	return StructuredText_structure{s}, err
}

type Callback struct{ Client *capnp.Client }

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x902904cd51bff117

func (c Callback) Call(ctx context.Context, params func(Callback_call_Params) error) (Callback_call_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_call_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Callback_call_Results_Future{Future: ans.Future()}, release
}

func (c Callback) AddRef() Callback {
	return Callback{
		Client: c.Client.AddRef(),
	}
}

func (c Callback) Release() {
	c.Client.Release()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	Call(context.Context, Callback_call) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c, policy)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server, policy *server.Policy) Callback {
	return Callback{Client: capnp.NewClient(Callback_NewServer(s, policy))}
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, Callback_call{call})
		},
	})

	return methods
}

// Callback_call holds the state for a server call to Callback.call.
// See server.Call for documentation.
type Callback_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_call) Args() Callback_call_Params {
	return Callback_call_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Callback_call) AllocResults() (Callback_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{Struct: r}, err
}

type Callback_call_Params struct{ capnp.Struct }

// Callback_call_Params_TypeID is the unique identifier for the type Callback_call_Params.
const Callback_call_Params_TypeID = 0x83b4353989cbcb47

func NewCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func NewRootCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func ReadRootCallback_call_Params(msg *capnp.Message) (Callback_call_Params, error) {
	root, err := msg.Root()
	return Callback_call_Params{root.Struct()}, err
}

func (s Callback_call_Params) String() string {
	str, _ := text.Marshal(0x83b4353989cbcb47, s.Struct)
	return str
}

// Callback_call_Params_List is a list of Callback_call_Params.
type Callback_call_Params_List struct{ capnp.List }

// NewCallback_call_Params creates a new list of Callback_call_Params.
func NewCallback_call_Params_List(s *capnp.Segment, sz int32) (Callback_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Params_List{l}, err
}

func (s Callback_call_Params_List) At(i int) Callback_call_Params {
	return Callback_call_Params{s.List.Struct(i)}
}

func (s Callback_call_Params_List) Set(i int, v Callback_call_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Params_List) String() string {
	str, _ := text.MarshalList(0x83b4353989cbcb47, s.List)
	return str
}

// Callback_call_Params_Future is a wrapper for a Callback_call_Params promised by a client call.
type Callback_call_Params_Future struct{ *capnp.Future }

func (p Callback_call_Params_Future) Struct() (Callback_call_Params, error) {
	s, err := p.Future.Struct()
	return Callback_call_Params{s}, err
}

type Callback_call_Results struct{ capnp.Struct }

// Callback_call_Results_TypeID is the unique identifier for the type Callback_call_Results.
const Callback_call_Results_TypeID = 0xb16b6184cf8b8acf

func NewCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func NewRootCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func ReadRootCallback_call_Results(msg *capnp.Message) (Callback_call_Results, error) {
	root, err := msg.Root()
	return Callback_call_Results{root.Struct()}, err
}

func (s Callback_call_Results) String() string {
	str, _ := text.Marshal(0xb16b6184cf8b8acf, s.Struct)
	return str
}

// Callback_call_Results_List is a list of Callback_call_Results.
type Callback_call_Results_List struct{ capnp.List }

// NewCallback_call_Results creates a new list of Callback_call_Results.
func NewCallback_call_Results_List(s *capnp.Segment, sz int32) (Callback_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Results_List{l}, err
}

func (s Callback_call_Results_List) At(i int) Callback_call_Results {
	return Callback_call_Results{s.List.Struct(i)}
}

func (s Callback_call_Results_List) Set(i int, v Callback_call_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Results_List) String() string {
	str, _ := text.MarshalList(0xb16b6184cf8b8acf, s.List)
	return str
}

// Callback_call_Results_Future is a wrapper for a Callback_call_Results promised by a client call.
type Callback_call_Results_Future struct{ *capnp.Future }

func (p Callback_call_Results_Future) Struct() (Callback_call_Results, error) {
	s, err := p.Future.Struct()
	return Callback_call_Results{s}, err
}

type ZmqPipelineAddresses struct{ capnp.Struct }

// ZmqPipelineAddresses_TypeID is the unique identifier for the type ZmqPipelineAddresses.
const ZmqPipelineAddresses_TypeID = 0xfe04fe97ba25a27e

func NewZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func NewRootZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func ReadRootZmqPipelineAddresses(msg *capnp.Message) (ZmqPipelineAddresses, error) {
	root, err := msg.Root()
	return ZmqPipelineAddresses{root.Struct()}, err
}

func (s ZmqPipelineAddresses) String() string {
	str, _ := text.Marshal(0xfe04fe97ba25a27e, s.Struct)
	return str
}

func (s ZmqPipelineAddresses) Input() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasInput() bool {
	return s.Struct.HasPtr(0)
}

func (s ZmqPipelineAddresses) InputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetInput(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZmqPipelineAddresses) Output() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasOutput() bool {
	return s.Struct.HasPtr(1)
}

func (s ZmqPipelineAddresses) OutputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetOutput(v string) error {
	return s.Struct.SetText(1, v)
}

// ZmqPipelineAddresses_List is a list of ZmqPipelineAddresses.
type ZmqPipelineAddresses_List struct{ capnp.List }

// NewZmqPipelineAddresses creates a new list of ZmqPipelineAddresses.
func NewZmqPipelineAddresses_List(s *capnp.Segment, sz int32) (ZmqPipelineAddresses_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ZmqPipelineAddresses_List{l}, err
}

func (s ZmqPipelineAddresses_List) At(i int) ZmqPipelineAddresses {
	return ZmqPipelineAddresses{s.List.Struct(i)}
}

func (s ZmqPipelineAddresses_List) Set(i int, v ZmqPipelineAddresses) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZmqPipelineAddresses_List) String() string {
	str, _ := text.MarshalList(0xfe04fe97ba25a27e, s.List)
	return str
}

// ZmqPipelineAddresses_Future is a wrapper for a ZmqPipelineAddresses promised by a client call.
type ZmqPipelineAddresses_Future struct{ *capnp.Future }

func (p ZmqPipelineAddresses_Future) Struct() (ZmqPipelineAddresses, error) {
	s, err := p.Future.Struct()
	return ZmqPipelineAddresses{s}, err
}

type CapHolder struct{ Client *capnp.Client }

// CapHolder_TypeID is the unique identifier for the type CapHolder.
const CapHolder_TypeID = 0xcac9c6537df1a097

func (c CapHolder) Cap(ctx context.Context, params func(CapHolder_cap_Params) error) (CapHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c CapHolder) ReleaseCap(ctx context.Context, params func(CapHolder_releaseCap_Params) error) (CapHolder_releaseCap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_releaseCap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_releaseCap_Results_Future{Future: ans.Future()}, release
}

func (c CapHolder) AddRef() CapHolder {
	return CapHolder{
		Client: c.Client.AddRef(),
	}
}

func (c CapHolder) Release() {
	c.Client.Release()
}

// A CapHolder_Server is a CapHolder with a local implementation.
type CapHolder_Server interface {
	Cap(context.Context, CapHolder_cap) error

	ReleaseCap(context.Context, CapHolder_releaseCap) error
}

// CapHolder_NewServer creates a new Server from an implementation of CapHolder_Server.
func CapHolder_NewServer(s CapHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHolder_Methods(nil, s), s, c, policy)
}

// CapHolder_ServerToClient creates a new Client from an implementation of CapHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHolder_ServerToClient(s CapHolder_Server, policy *server.Policy) CapHolder {
	return CapHolder{Client: capnp.NewClient(CapHolder_NewServer(s, policy))}
}

// CapHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHolder_Methods(methods []server.Method, s CapHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, CapHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseCap(ctx, CapHolder_releaseCap{call})
		},
	})

	return methods
}

// CapHolder_cap holds the state for a server call to CapHolder.cap.
// See server.Call for documentation.
type CapHolder_cap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_cap) Args() CapHolder_cap_Params {
	return CapHolder_cap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_cap) AllocResults() (CapHolder_cap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{Struct: r}, err
}

// CapHolder_releaseCap holds the state for a server call to CapHolder.releaseCap.
// See server.Call for documentation.
type CapHolder_releaseCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_releaseCap) Args() CapHolder_releaseCap_Params {
	return CapHolder_releaseCap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_releaseCap) AllocResults() (CapHolder_releaseCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{Struct: r}, err
}

type CapHolder_cap_Params struct{ capnp.Struct }

// CapHolder_cap_Params_TypeID is the unique identifier for the type CapHolder_cap_Params.
const CapHolder_cap_Params_TypeID = 0xda52b34d937fa814

func NewCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func NewRootCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func ReadRootCapHolder_cap_Params(msg *capnp.Message) (CapHolder_cap_Params, error) {
	root, err := msg.Root()
	return CapHolder_cap_Params{root.Struct()}, err
}

func (s CapHolder_cap_Params) String() string {
	str, _ := text.Marshal(0xda52b34d937fa814, s.Struct)
	return str
}

// CapHolder_cap_Params_List is a list of CapHolder_cap_Params.
type CapHolder_cap_Params_List struct{ capnp.List }

// NewCapHolder_cap_Params creates a new list of CapHolder_cap_Params.
func NewCapHolder_cap_Params_List(s *capnp.Segment, sz int32) (CapHolder_cap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_cap_Params_List{l}, err
}

func (s CapHolder_cap_Params_List) At(i int) CapHolder_cap_Params {
	return CapHolder_cap_Params{s.List.Struct(i)}
}

func (s CapHolder_cap_Params_List) Set(i int, v CapHolder_cap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Params_List) String() string {
	str, _ := text.MarshalList(0xda52b34d937fa814, s.List)
	return str
}

// CapHolder_cap_Params_Future is a wrapper for a CapHolder_cap_Params promised by a client call.
type CapHolder_cap_Params_Future struct{ *capnp.Future }

func (p CapHolder_cap_Params_Future) Struct() (CapHolder_cap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Params{s}, err
}

type CapHolder_cap_Results struct{ capnp.Struct }

// CapHolder_cap_Results_TypeID is the unique identifier for the type CapHolder_cap_Results.
const CapHolder_cap_Results_TypeID = 0xdc9b0f483595691f

func NewCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func NewRootCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func ReadRootCapHolder_cap_Results(msg *capnp.Message) (CapHolder_cap_Results, error) {
	root, err := msg.Root()
	return CapHolder_cap_Results{root.Struct()}, err
}

func (s CapHolder_cap_Results) String() string {
	str, _ := text.Marshal(0xdc9b0f483595691f, s.Struct)
	return str
}

func (s CapHolder_cap_Results) Object() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s CapHolder_cap_Results) HasObject() bool {
	return s.Struct.HasPtr(0)
}

func (s CapHolder_cap_Results) SetObject(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// CapHolder_cap_Results_List is a list of CapHolder_cap_Results.
type CapHolder_cap_Results_List struct{ capnp.List }

// NewCapHolder_cap_Results creates a new list of CapHolder_cap_Results.
func NewCapHolder_cap_Results_List(s *capnp.Segment, sz int32) (CapHolder_cap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CapHolder_cap_Results_List{l}, err
}

func (s CapHolder_cap_Results_List) At(i int) CapHolder_cap_Results {
	return CapHolder_cap_Results{s.List.Struct(i)}
}

func (s CapHolder_cap_Results_List) Set(i int, v CapHolder_cap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Results_List) String() string {
	str, _ := text.MarshalList(0xdc9b0f483595691f, s.List)
	return str
}

// CapHolder_cap_Results_Future is a wrapper for a CapHolder_cap_Results promised by a client call.
type CapHolder_cap_Results_Future struct{ *capnp.Future }

func (p CapHolder_cap_Results_Future) Struct() (CapHolder_cap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Results{s}, err
}

func (p CapHolder_cap_Results_Future) Object() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapHolder_releaseCap_Params struct{ capnp.Struct }

// CapHolder_releaseCap_Params_TypeID is the unique identifier for the type CapHolder_releaseCap_Params.
const CapHolder_releaseCap_Params_TypeID = 0x82449708d4fd120d

func NewCapHolder_releaseCap_Params(s *capnp.Segment) (CapHolder_releaseCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Params{st}, err
}

func NewRootCapHolder_releaseCap_Params(s *capnp.Segment) (CapHolder_releaseCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Params{st}, err
}

func ReadRootCapHolder_releaseCap_Params(msg *capnp.Message) (CapHolder_releaseCap_Params, error) {
	root, err := msg.Root()
	return CapHolder_releaseCap_Params{root.Struct()}, err
}

func (s CapHolder_releaseCap_Params) String() string {
	str, _ := text.Marshal(0x82449708d4fd120d, s.Struct)
	return str
}

// CapHolder_releaseCap_Params_List is a list of CapHolder_releaseCap_Params.
type CapHolder_releaseCap_Params_List struct{ capnp.List }

// NewCapHolder_releaseCap_Params creates a new list of CapHolder_releaseCap_Params.
func NewCapHolder_releaseCap_Params_List(s *capnp.Segment, sz int32) (CapHolder_releaseCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_releaseCap_Params_List{l}, err
}

func (s CapHolder_releaseCap_Params_List) At(i int) CapHolder_releaseCap_Params {
	return CapHolder_releaseCap_Params{s.List.Struct(i)}
}

func (s CapHolder_releaseCap_Params_List) Set(i int, v CapHolder_releaseCap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_releaseCap_Params_List) String() string {
	str, _ := text.MarshalList(0x82449708d4fd120d, s.List)
	return str
}

// CapHolder_releaseCap_Params_Future is a wrapper for a CapHolder_releaseCap_Params promised by a client call.
type CapHolder_releaseCap_Params_Future struct{ *capnp.Future }

func (p CapHolder_releaseCap_Params_Future) Struct() (CapHolder_releaseCap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_releaseCap_Params{s}, err
}

type CapHolder_releaseCap_Results struct{ capnp.Struct }

// CapHolder_releaseCap_Results_TypeID is the unique identifier for the type CapHolder_releaseCap_Results.
const CapHolder_releaseCap_Results_TypeID = 0xc1374ccca01e2b53

func NewCapHolder_releaseCap_Results(s *capnp.Segment) (CapHolder_releaseCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{st}, err
}

func NewRootCapHolder_releaseCap_Results(s *capnp.Segment) (CapHolder_releaseCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{st}, err
}

func ReadRootCapHolder_releaseCap_Results(msg *capnp.Message) (CapHolder_releaseCap_Results, error) {
	root, err := msg.Root()
	return CapHolder_releaseCap_Results{root.Struct()}, err
}

func (s CapHolder_releaseCap_Results) String() string {
	str, _ := text.Marshal(0xc1374ccca01e2b53, s.Struct)
	return str
}

// CapHolder_releaseCap_Results_List is a list of CapHolder_releaseCap_Results.
type CapHolder_releaseCap_Results_List struct{ capnp.List }

// NewCapHolder_releaseCap_Results creates a new list of CapHolder_releaseCap_Results.
func NewCapHolder_releaseCap_Results_List(s *capnp.Segment, sz int32) (CapHolder_releaseCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_releaseCap_Results_List{l}, err
}

func (s CapHolder_releaseCap_Results_List) At(i int) CapHolder_releaseCap_Results {
	return CapHolder_releaseCap_Results{s.List.Struct(i)}
}

func (s CapHolder_releaseCap_Results_List) Set(i int, v CapHolder_releaseCap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_releaseCap_Results_List) String() string {
	str, _ := text.MarshalList(0xc1374ccca01e2b53, s.List)
	return str
}

// CapHolder_releaseCap_Results_Future is a wrapper for a CapHolder_releaseCap_Results promised by a client call.
type CapHolder_releaseCap_Results_Future struct{ *capnp.Future }

func (p CapHolder_releaseCap_Results_Future) Struct() (CapHolder_releaseCap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_releaseCap_Results{s}, err
}

type ListEntry struct{ capnp.Struct }

// ListEntry_TypeID is the unique identifier for the type ListEntry.
const ListEntry_TypeID = 0xc201bf46dd40051e

func NewListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func NewRootListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func ReadRootListEntry(msg *capnp.Message) (ListEntry, error) {
	root, err := msg.Root()
	return ListEntry{root.Struct()}, err
}

func (s ListEntry) String() string {
	str, _ := text.Marshal(0xc201bf46dd40051e, s.Struct)
	return str
}

func (s ListEntry) Entry() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListEntry) HasEntry() bool {
	return s.Struct.HasPtr(0)
}

func (s ListEntry) SetEntry(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListEntry_List is a list of ListEntry.
type ListEntry_List struct{ capnp.List }

// NewListEntry creates a new list of ListEntry.
func NewListEntry_List(s *capnp.Segment, sz int32) (ListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListEntry_List{l}, err
}

func (s ListEntry_List) At(i int) ListEntry { return ListEntry{s.List.Struct(i)} }

func (s ListEntry_List) Set(i int, v ListEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ListEntry_List) String() string {
	str, _ := text.MarshalList(0xc201bf46dd40051e, s.List)
	return str
}

// ListEntry_Future is a wrapper for a ListEntry promised by a client call.
type ListEntry_Future struct{ *capnp.Future }

func (p ListEntry_Future) Struct() (ListEntry, error) {
	s, err := p.Future.Struct()
	return ListEntry{s}, err
}

func (p ListEntry_Future) Entry() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Stopable struct{ Client *capnp.Client }

// Stopable_TypeID is the unique identifier for the type Stopable.
const Stopable_TypeID = 0xce7e4202f09e314a

func (c Stopable) Stop(ctx context.Context, params func(Stopable_stop_Params) error) (Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c Stopable) AddRef() Stopable {
	return Stopable{
		Client: c.Client.AddRef(),
	}
}

func (c Stopable) Release() {
	c.Client.Release()
}

// A Stopable_Server is a Stopable with a local implementation.
type Stopable_Server interface {
	Stop(context.Context, Stopable_stop) error
}

// Stopable_NewServer creates a new Server from an implementation of Stopable_Server.
func Stopable_NewServer(s Stopable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stopable_Methods(nil, s), s, c, policy)
}

// Stopable_ServerToClient creates a new Client from an implementation of Stopable_Server.
// The caller is responsible for calling Release on the returned Client.
func Stopable_ServerToClient(s Stopable_Server, policy *server.Policy) Stopable {
	return Stopable{Client: capnp.NewClient(Stopable_NewServer(s, policy))}
}

// Stopable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stopable_Methods(methods []server.Method, s Stopable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Stopable_stop{call})
		},
	})

	return methods
}

// Stopable_stop holds the state for a server call to Stopable.stop.
// See server.Call for documentation.
type Stopable_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stopable_stop) Args() Stopable_stop_Params {
	return Stopable_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Stopable_stop) AllocResults() (Stopable_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{Struct: r}, err
}

type Stopable_stop_Params struct{ capnp.Struct }

// Stopable_stop_Params_TypeID is the unique identifier for the type Stopable_stop_Params.
const Stopable_stop_Params_TypeID = 0x98a27c9476315729

func NewStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func NewRootStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func ReadRootStopable_stop_Params(msg *capnp.Message) (Stopable_stop_Params, error) {
	root, err := msg.Root()
	return Stopable_stop_Params{root.Struct()}, err
}

func (s Stopable_stop_Params) String() string {
	str, _ := text.Marshal(0x98a27c9476315729, s.Struct)
	return str
}

// Stopable_stop_Params_List is a list of Stopable_stop_Params.
type Stopable_stop_Params_List struct{ capnp.List }

// NewStopable_stop_Params creates a new list of Stopable_stop_Params.
func NewStopable_stop_Params_List(s *capnp.Segment, sz int32) (Stopable_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Params_List{l}, err
}

func (s Stopable_stop_Params_List) At(i int) Stopable_stop_Params {
	return Stopable_stop_Params{s.List.Struct(i)}
}

func (s Stopable_stop_Params_List) Set(i int, v Stopable_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Params_List) String() string {
	str, _ := text.MarshalList(0x98a27c9476315729, s.List)
	return str
}

// Stopable_stop_Params_Future is a wrapper for a Stopable_stop_Params promised by a client call.
type Stopable_stop_Params_Future struct{ *capnp.Future }

func (p Stopable_stop_Params_Future) Struct() (Stopable_stop_Params, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Params{s}, err
}

type Stopable_stop_Results struct{ capnp.Struct }

// Stopable_stop_Results_TypeID is the unique identifier for the type Stopable_stop_Results.
const Stopable_stop_Results_TypeID = 0xd3a3b24aaa056a5c

func NewStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func NewRootStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func ReadRootStopable_stop_Results(msg *capnp.Message) (Stopable_stop_Results, error) {
	root, err := msg.Root()
	return Stopable_stop_Results{root.Struct()}, err
}

func (s Stopable_stop_Results) String() string {
	str, _ := text.Marshal(0xd3a3b24aaa056a5c, s.Struct)
	return str
}

// Stopable_stop_Results_List is a list of Stopable_stop_Results.
type Stopable_stop_Results_List struct{ capnp.List }

// NewStopable_stop_Results creates a new list of Stopable_stop_Results.
func NewStopable_stop_Results_List(s *capnp.Segment, sz int32) (Stopable_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Results_List{l}, err
}

func (s Stopable_stop_Results_List) At(i int) Stopable_stop_Results {
	return Stopable_stop_Results{s.List.Struct(i)}
}

func (s Stopable_stop_Results_List) Set(i int, v Stopable_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Results_List) String() string {
	str, _ := text.MarshalList(0xd3a3b24aaa056a5c, s.List)
	return str
}

// Stopable_stop_Results_Future is a wrapper for a Stopable_stop_Results promised by a client call.
type Stopable_stop_Results_Future struct{ *capnp.Future }

func (p Stopable_stop_Results_Future) Struct() (Stopable_stop_Results, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Results{s}, err
}

type Pair struct{ capnp.Struct }

// Pair_TypeID is the unique identifier for the type Pair.
const Pair_TypeID = 0xb9d4864725174733

func NewPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func NewRootPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func ReadRootPair(msg *capnp.Message) (Pair, error) {
	root, err := msg.Root()
	return Pair{root.Struct()}, err
}

func (s Pair) String() string {
	str, _ := text.Marshal(0xb9d4864725174733, s.Struct)
	return str
}

func (s Pair) Fst() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pair) HasFst() bool {
	return s.Struct.HasPtr(0)
}

func (s Pair) SetFst(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pair) Snd() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Pair) HasSnd() bool {
	return s.Struct.HasPtr(1)
}

func (s Pair) SetSnd(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Pair_List is a list of Pair.
type Pair_List struct{ capnp.List }

// NewPair creates a new list of Pair.
func NewPair_List(s *capnp.Segment, sz int32) (Pair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pair_List{l}, err
}

func (s Pair_List) At(i int) Pair { return Pair{s.List.Struct(i)} }

func (s Pair_List) Set(i int, v Pair) error { return s.List.SetStruct(i, v.Struct) }

func (s Pair_List) String() string {
	str, _ := text.MarshalList(0xb9d4864725174733, s.List)
	return str
}

// Pair_Future is a wrapper for a Pair promised by a client call.
type Pair_Future struct{ *capnp.Future }

func (p Pair_Future) Struct() (Pair, error) {
	s, err := p.Future.Struct()
	return Pair{s}, err
}

func (p Pair_Future) Fst() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pair_Future) Snd() *capnp.Future {
	return p.Future.Field(1, nil)
}

type LL struct{ capnp.Struct }

// LL_TypeID is the unique identifier for the type LL.
const LL_TypeID = 0xd67792aa3fc241be

func NewLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func NewRootLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func ReadRootLL(msg *capnp.Message) (LL, error) {
	root, err := msg.Root()
	return LL{root.Struct()}, err
}

func (s LL) String() string {
	str, _ := text.Marshal(0xd67792aa3fc241be, s.Struct)
	return str
}

func (s LL) Head() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s LL) HasHead() bool {
	return s.Struct.HasPtr(0)
}

func (s LL) SetHead(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s LL) Tail() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s LL) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s LL) SetTail(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// LL_List is a list of LL.
type LL_List struct{ capnp.List }

// NewLL creates a new list of LL.
func NewLL_List(s *capnp.Segment, sz int32) (LL_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LL_List{l}, err
}

func (s LL_List) At(i int) LL { return LL{s.List.Struct(i)} }

func (s LL_List) Set(i int, v LL) error { return s.List.SetStruct(i, v.Struct) }

func (s LL_List) String() string {
	str, _ := text.MarshalList(0xd67792aa3fc241be, s.List)
	return str
}

// LL_Future is a wrapper for a LL promised by a client call.
type LL_Future struct{ *capnp.Future }

func (p LL_Future) Struct() (LL, error) {
	s, err := p.Future.Struct()
	return LL{s}, err
}

func (p LL_Future) Head() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p LL_Future) Tail() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_99f1c9a775a88ac9 = "x\xda\x8cU_l\x14\xd5\x17>g\xe6\xceLI\xba" +
	"Yf\xa7\xf95i~a\x13\x02\x89\xadRikc" +
	"lL\xb6\x0b\x94\xb6\xa4\x95\x9d\xb6FK$q\xba{" +
	"\xab\x03\xb33\xc3\xcc,\x85D!\xc1\x7f\x01B\xa2(" +
	"A\xa25\x80!\"\x89!\xad\xfaP\x12%\xf6\xc1\x04" +
	"\x8a\x12\xa4\x98@\xd4\x07_\xf4\xc5\xc4>\xf8H\xc7\xdc" +
	"\x99\xce\xce2K\x83\xfb\xb4s\xcf7\xe7\x9c\xfb}\xe7" +
	";\xb3\xf9\x0f\xae\x97\xeb\x10v\xae\x01P\x0dA\xf4S" +
	"\x99\xfb\x8b\x0d\xa7\xb7\x1d\x01\xb9\x19\x01\x88\xb4\x16\xbbN" +
	"\x90N\x04\xe2\xf7/,\x1c}\xa6\xfb\xab7@\xfe_" +
	"\x10\x01\xe8\xaa\x90\x0c\x8b4/]U\x7f \xad\xef\x82" +
	"\x9c\xe2\xfdk\xc7.V>\xbb\xb6t\x06\x00\x95\xddd" +
	"V\xa1\x0c\xa9h\xa4_9\xca\xfe\xf9\xad/t\xec\xff" +
	"\xe0\xb5\xf3\x1f\xd6\xa4\xd9\x17\xa6\x99\xf9mp\xdd\xcds" +
	"\xc7\xa6An\x89\"\xe3a\xe9\x9b\xc7\x8e\xdf|S\xdb" +
	";S\xf3N\x9e\xb4\xb0\xc8\x9d\x81\x8f\xc7\x17n]\x9e" +
	"\xad+\xddJ~R\xba\x83\xd2\x1d\xa4_\x19\x0fJw" +
	"\xf57o\xec\x7f{q\x0e\xe4\x14\xc6`\x81\x93\xd6\xa2" +
	"\x92''\x95\xc1\x00\xdfG\xa6\x00\x949\xd2\xec\x8f>" +
	"\xbe\xee\xec\x8d\xa1\xa7\xbf\xab\xe1\xe2k\xd2\xc3\xca\xae\x13" +
	"z\x7f\xdd~\x15\xe7\x13\x99\x90e\x9a&W\x94\x0bA" +
	"\xa6s$\x07\xa0\xdc%i\xff\xf4\xd9\xa5\xd7G\xbf\xbf" +
	"v=\xd1&\xacE\xe5\x16\xb9\xa2\xdc\x0d\xe0w\xc8;" +
	"\xca\xb4 )\xd3B\xda\xdf\xd1\xf1\xc9\xdf\xdc\x96C?" +
	"\xd6\xdd\xeb=aV9#0\xf8)\xa1_\xf9\x86\xfd" +
	"\xf3_\xda#\\\xda1\xfb\xe9\xed\x1az.\x08\x01=" +
	"\xb7\xef\xf1\xcb\x0b\x87\x16\x16\x13}\xf2\xec\xfd\x13\xc2\xbd" +
	"j\xa6\xcb\x80\xfe\xb7\xf9\xf9\xdc\xa5\x93S??\x8c\x9d" +
	"\x0e\xf1\x88\xd2-\x06l\x8a\x8c\x9d\x0bb\xb3\xdft\xf1" +
	"\xf0\xfb\xc3_\x8e\xdc\xaba\xe7\x9c\x18\x08\x99\xd5Ou" +
	"\x0f\xa4?\xfa%\x8c\x04\xact\x1d\x15[\x90\xb5/\xe6" +
	"\x00\xfd\x1b\x13\xf33#\xff,\xfc\x09\xea\xff\x11\xfd\xb1" +
	"\xc5\xeb\xaf\x1c_c\xfc\x05\xcf\xa3\x84<@\xd7\x8c\xd8" +
	"\xc9\xb0s\"k\xab\x1aUS\xf8 \xd7\x00\x8a*\xfd" +
	"\xae\xec\x96\xd8\xbfqi\x0a\xd0?t~\xe3\x95\xd3\xcb" +
	"d\xb9\xee\x0e\x00]\xd3R\x06\x95/\x02\xf0\xe7\xd2\x14" +
	"<\xe7\x17\xadr\xd92\xdb\x8b\xbcf\x9bv\xcfV\xcd" +
	"\x1e\xb0\x8c\x12u\xda\x1djP\xcd\xa5\x1b\x0aY\xcd\xd1" +
	"\xcan\x1d\xce0&\xb4\xe2\xde\xf6\xa2f\x18\x1b\x0a\x0c" +
	"\x821\x06#L6\x00\x15\x10U\xc2\x0b\x00U\xf7`" +
	"4\xcb\xb2\xdc\x06\x9c,Hi\x96\xa7\x17\x0b\x88\x89B" +
	"\xa3\x9eek\x13\x06mw=\xcb\xae+\x14b\x06K" +
	"\xd4\xf4\xf4I=\xc0\xe9\xe6\xa4\xf5\x9f\x9a\x1e\xa1n\xc5" +
	"\xe0\xbd\x18\xc4%\x93!\x8d;\x8fl\x89\xd10U;" +
	"g\x05\x1f\xec<\xbc~A\xd3\xd1a\x09\x1ax\x02@" +
	"\x10@n]\x0f\xa0n\xe0Q\xdd\xcc\xa1\x8c\xd8\x84\xec" +
	"p\x13;|\x8cG\xf5)\x0e\xa5I\xd7\xc3\x0cbl" +
	"R\x00\xcc\x00J\xaeY\xc2\x8cP\x1f\xc87\xa0,d" +
	"d!\x83\xdbq\xf4\x91Z\x8e\xe4\xd8\x9d\xbd\xa4PC" +
	"\xba\x9b\xf3\xfaL\xcf9\x18\xde7j7\xd5\x09\xa06" +
	"\xf0\xa86q\x98\xa5,\x1e\xf4V\xb5\xfdJ\x0b\x04e" +
	"\x9c\xf0\x0b\x96nz\xd4\x19\x03\xe9\xa0M\xeb&\xc1\xce" +
	"\x85\xad\x84|0B#\xe3`\xe4\x13\xb9c=@\xfe" +
	"\x09\xcc?\x8b\xf2\xb0\x84X]\xc2\x18m 9\xbfE" +
	"\xceg\xf3%\xcc{(\xbf%IE\xcd\x961\xab\x12" +
	"\x0e\xe3\xd5\x12P\xfa\xb0\xc3^<\xbcB\x83J\x90\xf3" +
	"\x97N<\xd9\x9cyyn\x1e\x182\xdf\x84\xd8\xc8\xde" +
	"\xdb\xe5\xaf`\xb6\x02\xaf\xd9\xabdZ%}\x01C*" +
	"zr;'\xf6\xd0\xa2\x97\xe0`\xd4\xb3\xb2\xc1$\xc7" +
	"3\x15}\x040Z]\xd5\x99b\xc3\xfeh7\xac:" +
	"\xc1\x83\xe6\xa4\xe5\x945O\xe7-\x93\x95k\xacJ\xda" +
	"\xd7\x02\xa0\xf6\xf2\xa8\x0e\xd5L\xe0`\x1b\x80\xba\x8dG" +
	"\xb5\xc0\xa1\xccqM\xc8\x01\xc8\xc3\x13\x00\xea\x10\x8f\xea" +
	"\x8b\x1c\xf2z\x09\x1b\x81\xc3F\xc0\xb4\xa9\x95i\xf4\xe0" +
	"\x97\xa8[tt\xdb\x03I\xb7\xcc\xeaib\xba\x86 " +
	"\xe1\x82\xb6\x87\xb9\xa0-vA\xfaU\xaa\x95\x82Q\xab" +
	"n\xe3p\xd4\xd2\x9e\xa6\x1b\xa1\x0f\x12\x91\xd8\x07\x038" +
	"\xb6\xaa\x0f\x8a\xdaj+\xe4ALDl\xad\x17zb" +
	"/\xe4\xac@\xe0\xa0\xc3\xea\x10\x84}\xd4\xe9\xe5T\x8a" +
	"^\xc5\xa1\xa51z\xc0kw=\xa7\x92\x0d\x9e\x99$" +
	"\x8d\xbe\x1f\xde\xbd\xaf-\x16%\x85\xcb~(@\xad*" +
	")\xee\xbe\xdf\xc4\xbe\x0a\xf20\xdb\x16\x03<\xaac\x1c" +
	"\xa6M\xcb\xa4 \xa6\xf7\xb8\x96\x09\xa2t\xa0l\x80\x98" +
	"\x98\x85\x9a\x06$z\xc0K\x08\xd1\x19\x0b\xc1~\xf1\x17" +
	"I\xde4\x02\\v\xbffTb\xad\xdd\x95T\x804" +
	"q\xcb]\xe5}\x05\xdd\xa6\x86n\xd2|\xa9\xe4P\xd7" +
	"\xa5\xe8\xae^*\xd6\xbc'\xd6<\xab\x9bv\xc5\x8b\x8a" +
	"\xe5\xac\x8aW\xf3\xf8o\x00\x00\x00\xff\xff\x9f)\xb9P"

func init() {
	schemas.Register(schema_99f1c9a775a88ac9,
		0x82449708d4fd120d,
		0x83b4353989cbcb47,
		0x902904cd51bff117,
		0x98a27c9476315729,
		0x9d8aa1cf1e49deb1,
		0xb16b6184cf8b8acf,
		0xb2afd1cb599c48d5,
		0xb9d4864725174733,
		0xc1374ccca01e2b53,
		0xc201bf46dd40051e,
		0xcac9c6537df1a097,
		0xce7e4202f09e314a,
		0xd3a3b24aaa056a5c,
		0xd4cb7ecbfe03dad3,
		0xd67792aa3fc241be,
		0xda52b34d937fa814,
		0xdc9b0f483595691f,
		0xe8cbf552b1c262cc,
		0xed6c098b67cad454,
		0xfe04fe97ba25a27e)
}
