// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
	strconv "strconv"
)

type IdInformation struct{ capnp.Struct }

// IdInformation_TypeID is the unique identifier for the type IdInformation.
const IdInformation_TypeID = 0xd4cb7ecbfe03dad3

func NewIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func NewRootIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func ReadRootIdInformation(msg *capnp.Message) (IdInformation, error) {
	root, err := msg.Root()
	return IdInformation{root.Struct()}, err
}

func (s IdInformation) String() string {
	str, _ := text.Marshal(0xd4cb7ecbfe03dad3, s.Struct)
	return str
}

func (s IdInformation) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IdInformation) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s IdInformation) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IdInformation) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IdInformation) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IdInformation) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s IdInformation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IdInformation) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IdInformation) Description() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s IdInformation) HasDescription() bool {
	return s.Struct.HasPtr(2)
}

func (s IdInformation) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s IdInformation) SetDescription(v string) error {
	return s.Struct.SetText(2, v)
}

// IdInformation_List is a list of IdInformation.
type IdInformation_List struct{ capnp.List }

// NewIdInformation creates a new list of IdInformation.
func NewIdInformation_List(s *capnp.Segment, sz int32) (IdInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return IdInformation_List{l}, err
}

func (s IdInformation_List) At(i int) IdInformation { return IdInformation{s.List.Struct(i)} }

func (s IdInformation_List) Set(i int, v IdInformation) error { return s.List.SetStruct(i, v.Struct) }

func (s IdInformation_List) String() string {
	str, _ := text.MarshalList(0xd4cb7ecbfe03dad3, s.List)
	return str
}

// IdInformation_Future is a wrapper for a IdInformation promised by a client call.
type IdInformation_Future struct{ *capnp.Future }

func (p IdInformation_Future) Struct() (IdInformation, error) {
	s, err := p.Future.Struct()
	return IdInformation{s}, err
}

type Identifiable struct{ Client *capnp.Client }

// Identifiable_TypeID is the unique identifier for the type Identifiable.
const Identifiable_TypeID = 0xb2afd1cb599c48d5

func (c Identifiable) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c Identifiable) AddRef() Identifiable {
	return Identifiable{
		Client: c.Client.AddRef(),
	}
}

func (c Identifiable) Release() {
	c.Client.Release()
}

// A Identifiable_Server is a Identifiable with a local implementation.
type Identifiable_Server interface {
	Info(context.Context, Identifiable_info) error
}

// Identifiable_NewServer creates a new Server from an implementation of Identifiable_Server.
func Identifiable_NewServer(s Identifiable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Identifiable_Methods(nil, s), s, c, policy)
}

// Identifiable_ServerToClient creates a new Client from an implementation of Identifiable_Server.
// The caller is responsible for calling Release on the returned Client.
func Identifiable_ServerToClient(s Identifiable_Server, policy *server.Policy) Identifiable {
	return Identifiable{Client: capnp.NewClient(Identifiable_NewServer(s, policy))}
}

// Identifiable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Identifiable_Methods(methods []server.Method, s Identifiable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// Identifiable_info holds the state for a server call to Identifiable.info.
// See server.Call for documentation.
type Identifiable_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Identifiable_info) Args() Identifiable_info_Params {
	return Identifiable_info_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Identifiable_info) AllocResults() (IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{Struct: r}, err
}

type Identifiable_info_Params struct{ capnp.Struct }

// Identifiable_info_Params_TypeID is the unique identifier for the type Identifiable_info_Params.
const Identifiable_info_Params_TypeID = 0x9d8aa1cf1e49deb1

func NewIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func NewRootIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func ReadRootIdentifiable_info_Params(msg *capnp.Message) (Identifiable_info_Params, error) {
	root, err := msg.Root()
	return Identifiable_info_Params{root.Struct()}, err
}

func (s Identifiable_info_Params) String() string {
	str, _ := text.Marshal(0x9d8aa1cf1e49deb1, s.Struct)
	return str
}

// Identifiable_info_Params_List is a list of Identifiable_info_Params.
type Identifiable_info_Params_List struct{ capnp.List }

// NewIdentifiable_info_Params creates a new list of Identifiable_info_Params.
func NewIdentifiable_info_Params_List(s *capnp.Segment, sz int32) (Identifiable_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Identifiable_info_Params_List{l}, err
}

func (s Identifiable_info_Params_List) At(i int) Identifiable_info_Params {
	return Identifiable_info_Params{s.List.Struct(i)}
}

func (s Identifiable_info_Params_List) Set(i int, v Identifiable_info_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Identifiable_info_Params_List) String() string {
	str, _ := text.MarshalList(0x9d8aa1cf1e49deb1, s.List)
	return str
}

// Identifiable_info_Params_Future is a wrapper for a Identifiable_info_Params promised by a client call.
type Identifiable_info_Params_Future struct{ *capnp.Future }

func (p Identifiable_info_Params_Future) Struct() (Identifiable_info_Params, error) {
	s, err := p.Future.Struct()
	return Identifiable_info_Params{s}, err
}

type StructuredText struct{ capnp.Struct }
type StructuredText_structure StructuredText
type StructuredText_structure_Which uint16

const (
	StructuredText_structure_Which_none StructuredText_structure_Which = 0
	StructuredText_structure_Which_json StructuredText_structure_Which = 1
	StructuredText_structure_Which_xml  StructuredText_structure_Which = 2
)

func (w StructuredText_structure_Which) String() string {
	const s = "nonejsonxml"
	switch w {
	case StructuredText_structure_Which_none:
		return s[0:4]
	case StructuredText_structure_Which_json:
		return s[4:8]
	case StructuredText_structure_Which_xml:
		return s[8:11]

	}
	return "StructuredText_structure_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StructuredText_TypeID is the unique identifier for the type StructuredText.
const StructuredText_TypeID = 0xed6c098b67cad454

func NewStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func NewRootStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func ReadRootStructuredText(msg *capnp.Message) (StructuredText, error) {
	root, err := msg.Root()
	return StructuredText{root.Struct()}, err
}

func (s StructuredText) String() string {
	str, _ := text.Marshal(0xed6c098b67cad454, s.Struct)
	return str
}

func (s StructuredText) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StructuredText) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s StructuredText) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StructuredText) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StructuredText) Structure() StructuredText_structure { return StructuredText_structure(s) }

func (s StructuredText_structure) Which() StructuredText_structure_Which {
	return StructuredText_structure_Which(s.Struct.Uint16(0))
}
func (s StructuredText_structure) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s StructuredText_structure) SetJson() {
	s.Struct.SetUint16(0, 1)

}

func (s StructuredText_structure) SetXml() {
	s.Struct.SetUint16(0, 2)

}

// StructuredText_List is a list of StructuredText.
type StructuredText_List struct{ capnp.List }

// NewStructuredText creates a new list of StructuredText.
func NewStructuredText_List(s *capnp.Segment, sz int32) (StructuredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StructuredText_List{l}, err
}

func (s StructuredText_List) At(i int) StructuredText { return StructuredText{s.List.Struct(i)} }

func (s StructuredText_List) Set(i int, v StructuredText) error { return s.List.SetStruct(i, v.Struct) }

func (s StructuredText_List) String() string {
	str, _ := text.MarshalList(0xed6c098b67cad454, s.List)
	return str
}

// StructuredText_Future is a wrapper for a StructuredText promised by a client call.
type StructuredText_Future struct{ *capnp.Future }

func (p StructuredText_Future) Struct() (StructuredText, error) {
	s, err := p.Future.Struct()
	return StructuredText{s}, err
}

func (p StructuredText_Future) Structure() StructuredText_structure_Future {
	return StructuredText_structure_Future{p.Future}
}

// StructuredText_structure_Future is a wrapper for a StructuredText_structure promised by a client call.
type StructuredText_structure_Future struct{ *capnp.Future }

func (p StructuredText_structure_Future) Struct() (StructuredText_structure, error) {
	s, err := p.Future.Struct()
	return StructuredText_structure{s}, err
}

type Callback struct{ Client *capnp.Client }

// Callback_TypeID is the unique identifier for the type Callback.
const Callback_TypeID = 0x902904cd51bff117

func (c Callback) Call(ctx context.Context, params func(Callback_call_Params) error) (Callback_call_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Callback_call_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Callback_call_Results_Future{Future: ans.Future()}, release
}

func (c Callback) AddRef() Callback {
	return Callback{
		Client: c.Client.AddRef(),
	}
}

func (c Callback) Release() {
	c.Client.Release()
}

// A Callback_Server is a Callback with a local implementation.
type Callback_Server interface {
	Call(context.Context, Callback_call) error
}

// Callback_NewServer creates a new Server from an implementation of Callback_Server.
func Callback_NewServer(s Callback_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Callback_Methods(nil, s), s, c, policy)
}

// Callback_ServerToClient creates a new Client from an implementation of Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Callback_ServerToClient(s Callback_Server, policy *server.Policy) Callback {
	return Callback{Client: capnp.NewClient(Callback_NewServer(s, policy))}
}

// Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Callback_Methods(methods []server.Method, s Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x902904cd51bff117,
			MethodID:      0,
			InterfaceName: "common.capnp:Callback",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, Callback_call{call})
		},
	})

	return methods
}

// Callback_call holds the state for a server call to Callback.call.
// See server.Call for documentation.
type Callback_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Callback_call) Args() Callback_call_Params {
	return Callback_call_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Callback_call) AllocResults() (Callback_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{Struct: r}, err
}

type Callback_call_Params struct{ capnp.Struct }

// Callback_call_Params_TypeID is the unique identifier for the type Callback_call_Params.
const Callback_call_Params_TypeID = 0x83b4353989cbcb47

func NewCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func NewRootCallback_call_Params(s *capnp.Segment) (Callback_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Params{st}, err
}

func ReadRootCallback_call_Params(msg *capnp.Message) (Callback_call_Params, error) {
	root, err := msg.Root()
	return Callback_call_Params{root.Struct()}, err
}

func (s Callback_call_Params) String() string {
	str, _ := text.Marshal(0x83b4353989cbcb47, s.Struct)
	return str
}

// Callback_call_Params_List is a list of Callback_call_Params.
type Callback_call_Params_List struct{ capnp.List }

// NewCallback_call_Params creates a new list of Callback_call_Params.
func NewCallback_call_Params_List(s *capnp.Segment, sz int32) (Callback_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Params_List{l}, err
}

func (s Callback_call_Params_List) At(i int) Callback_call_Params {
	return Callback_call_Params{s.List.Struct(i)}
}

func (s Callback_call_Params_List) Set(i int, v Callback_call_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Params_List) String() string {
	str, _ := text.MarshalList(0x83b4353989cbcb47, s.List)
	return str
}

// Callback_call_Params_Future is a wrapper for a Callback_call_Params promised by a client call.
type Callback_call_Params_Future struct{ *capnp.Future }

func (p Callback_call_Params_Future) Struct() (Callback_call_Params, error) {
	s, err := p.Future.Struct()
	return Callback_call_Params{s}, err
}

type Callback_call_Results struct{ capnp.Struct }

// Callback_call_Results_TypeID is the unique identifier for the type Callback_call_Results.
const Callback_call_Results_TypeID = 0xb16b6184cf8b8acf

func NewCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func NewRootCallback_call_Results(s *capnp.Segment) (Callback_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Callback_call_Results{st}, err
}

func ReadRootCallback_call_Results(msg *capnp.Message) (Callback_call_Results, error) {
	root, err := msg.Root()
	return Callback_call_Results{root.Struct()}, err
}

func (s Callback_call_Results) String() string {
	str, _ := text.Marshal(0xb16b6184cf8b8acf, s.Struct)
	return str
}

// Callback_call_Results_List is a list of Callback_call_Results.
type Callback_call_Results_List struct{ capnp.List }

// NewCallback_call_Results creates a new list of Callback_call_Results.
func NewCallback_call_Results_List(s *capnp.Segment, sz int32) (Callback_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Callback_call_Results_List{l}, err
}

func (s Callback_call_Results_List) At(i int) Callback_call_Results {
	return Callback_call_Results{s.List.Struct(i)}
}

func (s Callback_call_Results_List) Set(i int, v Callback_call_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Callback_call_Results_List) String() string {
	str, _ := text.MarshalList(0xb16b6184cf8b8acf, s.List)
	return str
}

// Callback_call_Results_Future is a wrapper for a Callback_call_Results promised by a client call.
type Callback_call_Results_Future struct{ *capnp.Future }

func (p Callback_call_Results_Future) Struct() (Callback_call_Results, error) {
	s, err := p.Future.Struct()
	return Callback_call_Results{s}, err
}

type Action struct{ Client *capnp.Client }

// Action_TypeID is the unique identifier for the type Action.
const Action_TypeID = 0x9dd4e2c3d76e4587

func (c Action) Do(ctx context.Context, params func(Action_do_Params) error) (Action_do_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9dd4e2c3d76e4587,
			MethodID:      0,
			InterfaceName: "common.capnp:Action",
			MethodName:    "do",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Action_do_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Action_do_Results_Future{Future: ans.Future()}, release
}
func (c Action) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Action) AddRef() Action {
	return Action{
		Client: c.Client.AddRef(),
	}
}

func (c Action) Release() {
	c.Client.Release()
}

// A Action_Server is a Action with a local implementation.
type Action_Server interface {
	Do(context.Context, Action_do) error

	Save(context.Context, persistence.Persistent_save) error
}

// Action_NewServer creates a new Server from an implementation of Action_Server.
func Action_NewServer(s Action_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Action_Methods(nil, s), s, c, policy)
}

// Action_ServerToClient creates a new Client from an implementation of Action_Server.
// The caller is responsible for calling Release on the returned Client.
func Action_ServerToClient(s Action_Server, policy *server.Policy) Action {
	return Action{Client: capnp.NewClient(Action_NewServer(s, policy))}
}

// Action_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Action_Methods(methods []server.Method, s Action_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9dd4e2c3d76e4587,
			MethodID:      0,
			InterfaceName: "common.capnp:Action",
			MethodName:    "do",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Do(ctx, Action_do{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Action_do holds the state for a server call to Action.do.
// See server.Call for documentation.
type Action_do struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Action_do) Args() Action_do_Params {
	return Action_do_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Action_do) AllocResults() (Action_do_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Results{Struct: r}, err
}

type Action_do_Params struct{ capnp.Struct }

// Action_do_Params_TypeID is the unique identifier for the type Action_do_Params.
const Action_do_Params_TypeID = 0xf9033a317ba0d0c6

func NewAction_do_Params(s *capnp.Segment) (Action_do_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Params{st}, err
}

func NewRootAction_do_Params(s *capnp.Segment) (Action_do_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Params{st}, err
}

func ReadRootAction_do_Params(msg *capnp.Message) (Action_do_Params, error) {
	root, err := msg.Root()
	return Action_do_Params{root.Struct()}, err
}

func (s Action_do_Params) String() string {
	str, _ := text.Marshal(0xf9033a317ba0d0c6, s.Struct)
	return str
}

// Action_do_Params_List is a list of Action_do_Params.
type Action_do_Params_List struct{ capnp.List }

// NewAction_do_Params creates a new list of Action_do_Params.
func NewAction_do_Params_List(s *capnp.Segment, sz int32) (Action_do_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Action_do_Params_List{l}, err
}

func (s Action_do_Params_List) At(i int) Action_do_Params { return Action_do_Params{s.List.Struct(i)} }

func (s Action_do_Params_List) Set(i int, v Action_do_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action_do_Params_List) String() string {
	str, _ := text.MarshalList(0xf9033a317ba0d0c6, s.List)
	return str
}

// Action_do_Params_Future is a wrapper for a Action_do_Params promised by a client call.
type Action_do_Params_Future struct{ *capnp.Future }

func (p Action_do_Params_Future) Struct() (Action_do_Params, error) {
	s, err := p.Future.Struct()
	return Action_do_Params{s}, err
}

type Action_do_Results struct{ capnp.Struct }

// Action_do_Results_TypeID is the unique identifier for the type Action_do_Results.
const Action_do_Results_TypeID = 0xcc040dde1a99ddff

func NewAction_do_Results(s *capnp.Segment) (Action_do_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Results{st}, err
}

func NewRootAction_do_Results(s *capnp.Segment) (Action_do_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action_do_Results{st}, err
}

func ReadRootAction_do_Results(msg *capnp.Message) (Action_do_Results, error) {
	root, err := msg.Root()
	return Action_do_Results{root.Struct()}, err
}

func (s Action_do_Results) String() string {
	str, _ := text.Marshal(0xcc040dde1a99ddff, s.Struct)
	return str
}

// Action_do_Results_List is a list of Action_do_Results.
type Action_do_Results_List struct{ capnp.List }

// NewAction_do_Results creates a new list of Action_do_Results.
func NewAction_do_Results_List(s *capnp.Segment, sz int32) (Action_do_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Action_do_Results_List{l}, err
}

func (s Action_do_Results_List) At(i int) Action_do_Results {
	return Action_do_Results{s.List.Struct(i)}
}

func (s Action_do_Results_List) Set(i int, v Action_do_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action_do_Results_List) String() string {
	str, _ := text.MarshalList(0xcc040dde1a99ddff, s.List)
	return str
}

// Action_do_Results_Future is a wrapper for a Action_do_Results promised by a client call.
type Action_do_Results_Future struct{ *capnp.Future }

func (p Action_do_Results_Future) Struct() (Action_do_Results, error) {
	s, err := p.Future.Struct()
	return Action_do_Results{s}, err
}

type Action1 struct{ Client *capnp.Client }

// Action1_TypeID is the unique identifier for the type Action1.
const Action1_TypeID = 0xc12db9a9ae07a763

func (c Action1) Do(ctx context.Context, params func(Action1_do_Params) error) (Action1_do_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc12db9a9ae07a763,
			MethodID:      0,
			InterfaceName: "common.capnp:Action1",
			MethodName:    "do",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Action1_do_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Action1_do_Results_Future{Future: ans.Future()}, release
}
func (c Action1) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Action1) AddRef() Action1 {
	return Action1{
		Client: c.Client.AddRef(),
	}
}

func (c Action1) Release() {
	c.Client.Release()
}

// A Action1_Server is a Action1 with a local implementation.
type Action1_Server interface {
	Do(context.Context, Action1_do) error

	Save(context.Context, persistence.Persistent_save) error
}

// Action1_NewServer creates a new Server from an implementation of Action1_Server.
func Action1_NewServer(s Action1_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Action1_Methods(nil, s), s, c, policy)
}

// Action1_ServerToClient creates a new Client from an implementation of Action1_Server.
// The caller is responsible for calling Release on the returned Client.
func Action1_ServerToClient(s Action1_Server, policy *server.Policy) Action1 {
	return Action1{Client: capnp.NewClient(Action1_NewServer(s, policy))}
}

// Action1_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Action1_Methods(methods []server.Method, s Action1_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc12db9a9ae07a763,
			MethodID:      0,
			InterfaceName: "common.capnp:Action1",
			MethodName:    "do",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Do(ctx, Action1_do{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Action1_do holds the state for a server call to Action1.do.
// See server.Call for documentation.
type Action1_do struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Action1_do) Args() Action1_do_Params {
	return Action1_do_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Action1_do) AllocResults() (Action1_do_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action1_do_Results{Struct: r}, err
}

type Action1_do_Params struct{ capnp.Struct }

// Action1_do_Params_TypeID is the unique identifier for the type Action1_do_Params.
const Action1_do_Params_TypeID = 0xa1eb17b1112501da

func NewAction1_do_Params(s *capnp.Segment) (Action1_do_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Action1_do_Params{st}, err
}

func NewRootAction1_do_Params(s *capnp.Segment) (Action1_do_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Action1_do_Params{st}, err
}

func ReadRootAction1_do_Params(msg *capnp.Message) (Action1_do_Params, error) {
	root, err := msg.Root()
	return Action1_do_Params{root.Struct()}, err
}

func (s Action1_do_Params) String() string {
	str, _ := text.Marshal(0xa1eb17b1112501da, s.Struct)
	return str
}

func (s Action1_do_Params) P() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Action1_do_Params) HasP() bool {
	return s.Struct.HasPtr(0)
}

func (s Action1_do_Params) SetP(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Action1_do_Params_List is a list of Action1_do_Params.
type Action1_do_Params_List struct{ capnp.List }

// NewAction1_do_Params creates a new list of Action1_do_Params.
func NewAction1_do_Params_List(s *capnp.Segment, sz int32) (Action1_do_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Action1_do_Params_List{l}, err
}

func (s Action1_do_Params_List) At(i int) Action1_do_Params {
	return Action1_do_Params{s.List.Struct(i)}
}

func (s Action1_do_Params_List) Set(i int, v Action1_do_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action1_do_Params_List) String() string {
	str, _ := text.MarshalList(0xa1eb17b1112501da, s.List)
	return str
}

// Action1_do_Params_Future is a wrapper for a Action1_do_Params promised by a client call.
type Action1_do_Params_Future struct{ *capnp.Future }

func (p Action1_do_Params_Future) Struct() (Action1_do_Params, error) {
	s, err := p.Future.Struct()
	return Action1_do_Params{s}, err
}

func (p Action1_do_Params_Future) P() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Action1_do_Results struct{ capnp.Struct }

// Action1_do_Results_TypeID is the unique identifier for the type Action1_do_Results.
const Action1_do_Results_TypeID = 0xfd65c3cd7f2f47fa

func NewAction1_do_Results(s *capnp.Segment) (Action1_do_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action1_do_Results{st}, err
}

func NewRootAction1_do_Results(s *capnp.Segment) (Action1_do_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Action1_do_Results{st}, err
}

func ReadRootAction1_do_Results(msg *capnp.Message) (Action1_do_Results, error) {
	root, err := msg.Root()
	return Action1_do_Results{root.Struct()}, err
}

func (s Action1_do_Results) String() string {
	str, _ := text.Marshal(0xfd65c3cd7f2f47fa, s.Struct)
	return str
}

// Action1_do_Results_List is a list of Action1_do_Results.
type Action1_do_Results_List struct{ capnp.List }

// NewAction1_do_Results creates a new list of Action1_do_Results.
func NewAction1_do_Results_List(s *capnp.Segment, sz int32) (Action1_do_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Action1_do_Results_List{l}, err
}

func (s Action1_do_Results_List) At(i int) Action1_do_Results {
	return Action1_do_Results{s.List.Struct(i)}
}

func (s Action1_do_Results_List) Set(i int, v Action1_do_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Action1_do_Results_List) String() string {
	str, _ := text.MarshalList(0xfd65c3cd7f2f47fa, s.List)
	return str
}

// Action1_do_Results_Future is a wrapper for a Action1_do_Results promised by a client call.
type Action1_do_Results_Future struct{ *capnp.Future }

func (p Action1_do_Results_Future) Struct() (Action1_do_Results, error) {
	s, err := p.Future.Struct()
	return Action1_do_Results{s}, err
}

type Factory struct{ Client *capnp.Client }

// Factory_TypeID is the unique identifier for the type Factory.
const Factory_TypeID = 0xa869f50b8c586ed9

func (c Factory) Produce(ctx context.Context, params func(Factory_produce_Params) error) (Factory_produce_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa869f50b8c586ed9,
			MethodID:      0,
			InterfaceName: "common.capnp:Factory",
			MethodName:    "produce",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Factory_produce_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Factory_produce_Results_Future{Future: ans.Future()}, release
}

func (c Factory) AddRef() Factory {
	return Factory{
		Client: c.Client.AddRef(),
	}
}

func (c Factory) Release() {
	c.Client.Release()
}

// A Factory_Server is a Factory with a local implementation.
type Factory_Server interface {
	Produce(context.Context, Factory_produce) error
}

// Factory_NewServer creates a new Server from an implementation of Factory_Server.
func Factory_NewServer(s Factory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Factory_Methods(nil, s), s, c, policy)
}

// Factory_ServerToClient creates a new Client from an implementation of Factory_Server.
// The caller is responsible for calling Release on the returned Client.
func Factory_ServerToClient(s Factory_Server, policy *server.Policy) Factory {
	return Factory{Client: capnp.NewClient(Factory_NewServer(s, policy))}
}

// Factory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Factory_Methods(methods []server.Method, s Factory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa869f50b8c586ed9,
			MethodID:      0,
			InterfaceName: "common.capnp:Factory",
			MethodName:    "produce",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Produce(ctx, Factory_produce{call})
		},
	})

	return methods
}

// Factory_produce holds the state for a server call to Factory.produce.
// See server.Call for documentation.
type Factory_produce struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Factory_produce) Args() Factory_produce_Params {
	return Factory_produce_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Factory_produce) AllocResults() (Factory_produce_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Results{Struct: r}, err
}

type Factory_produce_Params struct{ capnp.Struct }

// Factory_produce_Params_TypeID is the unique identifier for the type Factory_produce_Params.
const Factory_produce_Params_TypeID = 0xfd058bbd1f9508cd

func NewFactory_produce_Params(s *capnp.Segment) (Factory_produce_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Params{st}, err
}

func NewRootFactory_produce_Params(s *capnp.Segment) (Factory_produce_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Params{st}, err
}

func ReadRootFactory_produce_Params(msg *capnp.Message) (Factory_produce_Params, error) {
	root, err := msg.Root()
	return Factory_produce_Params{root.Struct()}, err
}

func (s Factory_produce_Params) String() string {
	str, _ := text.Marshal(0xfd058bbd1f9508cd, s.Struct)
	return str
}

func (s Factory_produce_Params) In() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Factory_produce_Params) HasIn() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_produce_Params) SetIn(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Factory_produce_Params_List is a list of Factory_produce_Params.
type Factory_produce_Params_List struct{ capnp.List }

// NewFactory_produce_Params creates a new list of Factory_produce_Params.
func NewFactory_produce_Params_List(s *capnp.Segment, sz int32) (Factory_produce_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Factory_produce_Params_List{l}, err
}

func (s Factory_produce_Params_List) At(i int) Factory_produce_Params {
	return Factory_produce_Params{s.List.Struct(i)}
}

func (s Factory_produce_Params_List) Set(i int, v Factory_produce_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_produce_Params_List) String() string {
	str, _ := text.MarshalList(0xfd058bbd1f9508cd, s.List)
	return str
}

// Factory_produce_Params_Future is a wrapper for a Factory_produce_Params promised by a client call.
type Factory_produce_Params_Future struct{ *capnp.Future }

func (p Factory_produce_Params_Future) Struct() (Factory_produce_Params, error) {
	s, err := p.Future.Struct()
	return Factory_produce_Params{s}, err
}

func (p Factory_produce_Params_Future) In() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Factory_produce_Results struct{ capnp.Struct }

// Factory_produce_Results_TypeID is the unique identifier for the type Factory_produce_Results.
const Factory_produce_Results_TypeID = 0xd010f77f1bdf0522

func NewFactory_produce_Results(s *capnp.Segment) (Factory_produce_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Results{st}, err
}

func NewRootFactory_produce_Results(s *capnp.Segment) (Factory_produce_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Factory_produce_Results{st}, err
}

func ReadRootFactory_produce_Results(msg *capnp.Message) (Factory_produce_Results, error) {
	root, err := msg.Root()
	return Factory_produce_Results{root.Struct()}, err
}

func (s Factory_produce_Results) String() string {
	str, _ := text.Marshal(0xd010f77f1bdf0522, s.Struct)
	return str
}

func (s Factory_produce_Results) Out() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Factory_produce_Results) HasOut() bool {
	return s.Struct.HasPtr(0)
}

func (s Factory_produce_Results) SetOut(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Factory_produce_Results_List is a list of Factory_produce_Results.
type Factory_produce_Results_List struct{ capnp.List }

// NewFactory_produce_Results creates a new list of Factory_produce_Results.
func NewFactory_produce_Results_List(s *capnp.Segment, sz int32) (Factory_produce_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Factory_produce_Results_List{l}, err
}

func (s Factory_produce_Results_List) At(i int) Factory_produce_Results {
	return Factory_produce_Results{s.List.Struct(i)}
}

func (s Factory_produce_Results_List) Set(i int, v Factory_produce_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Factory_produce_Results_List) String() string {
	str, _ := text.MarshalList(0xd010f77f1bdf0522, s.List)
	return str
}

// Factory_produce_Results_Future is a wrapper for a Factory_produce_Results promised by a client call.
type Factory_produce_Results_Future struct{ *capnp.Future }

func (p Factory_produce_Results_Future) Struct() (Factory_produce_Results, error) {
	s, err := p.Future.Struct()
	return Factory_produce_Results{s}, err
}

func (p Factory_produce_Results_Future) Out() *capnp.Future {
	return p.Future.Field(0, nil)
}

type ZmqPipelineAddresses struct{ capnp.Struct }

// ZmqPipelineAddresses_TypeID is the unique identifier for the type ZmqPipelineAddresses.
const ZmqPipelineAddresses_TypeID = 0xfe04fe97ba25a27e

func NewZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func NewRootZmqPipelineAddresses(s *capnp.Segment) (ZmqPipelineAddresses, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ZmqPipelineAddresses{st}, err
}

func ReadRootZmqPipelineAddresses(msg *capnp.Message) (ZmqPipelineAddresses, error) {
	root, err := msg.Root()
	return ZmqPipelineAddresses{root.Struct()}, err
}

func (s ZmqPipelineAddresses) String() string {
	str, _ := text.Marshal(0xfe04fe97ba25a27e, s.Struct)
	return str
}

func (s ZmqPipelineAddresses) Input() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasInput() bool {
	return s.Struct.HasPtr(0)
}

func (s ZmqPipelineAddresses) InputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetInput(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ZmqPipelineAddresses) Output() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZmqPipelineAddresses) HasOutput() bool {
	return s.Struct.HasPtr(1)
}

func (s ZmqPipelineAddresses) OutputBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZmqPipelineAddresses) SetOutput(v string) error {
	return s.Struct.SetText(1, v)
}

// ZmqPipelineAddresses_List is a list of ZmqPipelineAddresses.
type ZmqPipelineAddresses_List struct{ capnp.List }

// NewZmqPipelineAddresses creates a new list of ZmqPipelineAddresses.
func NewZmqPipelineAddresses_List(s *capnp.Segment, sz int32) (ZmqPipelineAddresses_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ZmqPipelineAddresses_List{l}, err
}

func (s ZmqPipelineAddresses_List) At(i int) ZmqPipelineAddresses {
	return ZmqPipelineAddresses{s.List.Struct(i)}
}

func (s ZmqPipelineAddresses_List) Set(i int, v ZmqPipelineAddresses) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ZmqPipelineAddresses_List) String() string {
	str, _ := text.MarshalList(0xfe04fe97ba25a27e, s.List)
	return str
}

// ZmqPipelineAddresses_Future is a wrapper for a ZmqPipelineAddresses promised by a client call.
type ZmqPipelineAddresses_Future struct{ *capnp.Future }

func (p ZmqPipelineAddresses_Future) Struct() (ZmqPipelineAddresses, error) {
	s, err := p.Future.Struct()
	return ZmqPipelineAddresses{s}, err
}

type ValueHolder struct{ Client *capnp.Client }

// ValueHolder_TypeID is the unique identifier for the type ValueHolder.
const ValueHolder_TypeID = 0xf1c80d9ce9dfd993

func (c ValueHolder) Value(ctx context.Context, params func(ValueHolder_value_Params) error) (ValueHolder_value_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf1c80d9ce9dfd993,
			MethodID:      0,
			InterfaceName: "common.capnp:ValueHolder",
			MethodName:    "value",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ValueHolder_value_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ValueHolder_value_Results_Future{Future: ans.Future()}, release
}
func (c ValueHolder) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c ValueHolder) AddRef() ValueHolder {
	return ValueHolder{
		Client: c.Client.AddRef(),
	}
}

func (c ValueHolder) Release() {
	c.Client.Release()
}

// A ValueHolder_Server is a ValueHolder with a local implementation.
type ValueHolder_Server interface {
	Value(context.Context, ValueHolder_value) error

	Save(context.Context, persistence.Persistent_save) error
}

// ValueHolder_NewServer creates a new Server from an implementation of ValueHolder_Server.
func ValueHolder_NewServer(s ValueHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ValueHolder_Methods(nil, s), s, c, policy)
}

// ValueHolder_ServerToClient creates a new Client from an implementation of ValueHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func ValueHolder_ServerToClient(s ValueHolder_Server, policy *server.Policy) ValueHolder {
	return ValueHolder{Client: capnp.NewClient(ValueHolder_NewServer(s, policy))}
}

// ValueHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ValueHolder_Methods(methods []server.Method, s ValueHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf1c80d9ce9dfd993,
			MethodID:      0,
			InterfaceName: "common.capnp:ValueHolder",
			MethodName:    "value",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Value(ctx, ValueHolder_value{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// ValueHolder_value holds the state for a server call to ValueHolder.value.
// See server.Call for documentation.
type ValueHolder_value struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ValueHolder_value) Args() ValueHolder_value_Params {
	return ValueHolder_value_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ValueHolder_value) AllocResults() (ValueHolder_value_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValueHolder_value_Results{Struct: r}, err
}

type ValueHolder_value_Params struct{ capnp.Struct }

// ValueHolder_value_Params_TypeID is the unique identifier for the type ValueHolder_value_Params.
const ValueHolder_value_Params_TypeID = 0xfb528c3db0280a11

func NewValueHolder_value_Params(s *capnp.Segment) (ValueHolder_value_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ValueHolder_value_Params{st}, err
}

func NewRootValueHolder_value_Params(s *capnp.Segment) (ValueHolder_value_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ValueHolder_value_Params{st}, err
}

func ReadRootValueHolder_value_Params(msg *capnp.Message) (ValueHolder_value_Params, error) {
	root, err := msg.Root()
	return ValueHolder_value_Params{root.Struct()}, err
}

func (s ValueHolder_value_Params) String() string {
	str, _ := text.Marshal(0xfb528c3db0280a11, s.Struct)
	return str
}

// ValueHolder_value_Params_List is a list of ValueHolder_value_Params.
type ValueHolder_value_Params_List struct{ capnp.List }

// NewValueHolder_value_Params creates a new list of ValueHolder_value_Params.
func NewValueHolder_value_Params_List(s *capnp.Segment, sz int32) (ValueHolder_value_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ValueHolder_value_Params_List{l}, err
}

func (s ValueHolder_value_Params_List) At(i int) ValueHolder_value_Params {
	return ValueHolder_value_Params{s.List.Struct(i)}
}

func (s ValueHolder_value_Params_List) Set(i int, v ValueHolder_value_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValueHolder_value_Params_List) String() string {
	str, _ := text.MarshalList(0xfb528c3db0280a11, s.List)
	return str
}

// ValueHolder_value_Params_Future is a wrapper for a ValueHolder_value_Params promised by a client call.
type ValueHolder_value_Params_Future struct{ *capnp.Future }

func (p ValueHolder_value_Params_Future) Struct() (ValueHolder_value_Params, error) {
	s, err := p.Future.Struct()
	return ValueHolder_value_Params{s}, err
}

type ValueHolder_value_Results struct{ capnp.Struct }

// ValueHolder_value_Results_TypeID is the unique identifier for the type ValueHolder_value_Results.
const ValueHolder_value_Results_TypeID = 0xade9d46971ea9ee3

func NewValueHolder_value_Results(s *capnp.Segment) (ValueHolder_value_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValueHolder_value_Results{st}, err
}

func NewRootValueHolder_value_Results(s *capnp.Segment) (ValueHolder_value_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ValueHolder_value_Results{st}, err
}

func ReadRootValueHolder_value_Results(msg *capnp.Message) (ValueHolder_value_Results, error) {
	root, err := msg.Root()
	return ValueHolder_value_Results{root.Struct()}, err
}

func (s ValueHolder_value_Results) String() string {
	str, _ := text.Marshal(0xade9d46971ea9ee3, s.Struct)
	return str
}

func (s ValueHolder_value_Results) Val() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ValueHolder_value_Results) HasVal() bool {
	return s.Struct.HasPtr(0)
}

func (s ValueHolder_value_Results) SetVal(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ValueHolder_value_Results_List is a list of ValueHolder_value_Results.
type ValueHolder_value_Results_List struct{ capnp.List }

// NewValueHolder_value_Results creates a new list of ValueHolder_value_Results.
func NewValueHolder_value_Results_List(s *capnp.Segment, sz int32) (ValueHolder_value_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ValueHolder_value_Results_List{l}, err
}

func (s ValueHolder_value_Results_List) At(i int) ValueHolder_value_Results {
	return ValueHolder_value_Results{s.List.Struct(i)}
}

func (s ValueHolder_value_Results_List) Set(i int, v ValueHolder_value_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ValueHolder_value_Results_List) String() string {
	str, _ := text.MarshalList(0xade9d46971ea9ee3, s.List)
	return str
}

// ValueHolder_value_Results_Future is a wrapper for a ValueHolder_value_Results promised by a client call.
type ValueHolder_value_Results_Future struct{ *capnp.Future }

func (p ValueHolder_value_Results_Future) Struct() (ValueHolder_value_Results, error) {
	s, err := p.Future.Struct()
	return ValueHolder_value_Results{s}, err
}

func (p ValueHolder_value_Results_Future) Val() *capnp.Future {
	return p.Future.Field(0, nil)
}

type AnyValueHolder struct{ Client *capnp.Client }

// AnyValueHolder_TypeID is the unique identifier for the type AnyValueHolder.
const AnyValueHolder_TypeID = 0x89f6c5dd387cc101

func (c AnyValueHolder) Value(ctx context.Context, params func(AnyValueHolder_value_Params) error) (AnyValueHolder_value_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x89f6c5dd387cc101,
			MethodID:      0,
			InterfaceName: "common.capnp:AnyValueHolder",
			MethodName:    "value",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AnyValueHolder_value_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return AnyValueHolder_value_Results_Future{Future: ans.Future()}, release
}
func (c AnyValueHolder) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c AnyValueHolder) AddRef() AnyValueHolder {
	return AnyValueHolder{
		Client: c.Client.AddRef(),
	}
}

func (c AnyValueHolder) Release() {
	c.Client.Release()
}

// A AnyValueHolder_Server is a AnyValueHolder with a local implementation.
type AnyValueHolder_Server interface {
	Value(context.Context, AnyValueHolder_value) error

	Save(context.Context, persistence.Persistent_save) error
}

// AnyValueHolder_NewServer creates a new Server from an implementation of AnyValueHolder_Server.
func AnyValueHolder_NewServer(s AnyValueHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AnyValueHolder_Methods(nil, s), s, c, policy)
}

// AnyValueHolder_ServerToClient creates a new Client from an implementation of AnyValueHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func AnyValueHolder_ServerToClient(s AnyValueHolder_Server, policy *server.Policy) AnyValueHolder {
	return AnyValueHolder{Client: capnp.NewClient(AnyValueHolder_NewServer(s, policy))}
}

// AnyValueHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AnyValueHolder_Methods(methods []server.Method, s AnyValueHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x89f6c5dd387cc101,
			MethodID:      0,
			InterfaceName: "common.capnp:AnyValueHolder",
			MethodName:    "value",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Value(ctx, AnyValueHolder_value{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// AnyValueHolder_value holds the state for a server call to AnyValueHolder.value.
// See server.Call for documentation.
type AnyValueHolder_value struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AnyValueHolder_value) Args() AnyValueHolder_value_Params {
	return AnyValueHolder_value_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c AnyValueHolder_value) AllocResults() (AnyValueHolder_value_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyValueHolder_value_Results{Struct: r}, err
}

type AnyValueHolder_value_Params struct{ capnp.Struct }

// AnyValueHolder_value_Params_TypeID is the unique identifier for the type AnyValueHolder_value_Params.
const AnyValueHolder_value_Params_TypeID = 0xc9851222d70aff42

func NewAnyValueHolder_value_Params(s *capnp.Segment) (AnyValueHolder_value_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AnyValueHolder_value_Params{st}, err
}

func NewRootAnyValueHolder_value_Params(s *capnp.Segment) (AnyValueHolder_value_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AnyValueHolder_value_Params{st}, err
}

func ReadRootAnyValueHolder_value_Params(msg *capnp.Message) (AnyValueHolder_value_Params, error) {
	root, err := msg.Root()
	return AnyValueHolder_value_Params{root.Struct()}, err
}

func (s AnyValueHolder_value_Params) String() string {
	str, _ := text.Marshal(0xc9851222d70aff42, s.Struct)
	return str
}

// AnyValueHolder_value_Params_List is a list of AnyValueHolder_value_Params.
type AnyValueHolder_value_Params_List struct{ capnp.List }

// NewAnyValueHolder_value_Params creates a new list of AnyValueHolder_value_Params.
func NewAnyValueHolder_value_Params_List(s *capnp.Segment, sz int32) (AnyValueHolder_value_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return AnyValueHolder_value_Params_List{l}, err
}

func (s AnyValueHolder_value_Params_List) At(i int) AnyValueHolder_value_Params {
	return AnyValueHolder_value_Params{s.List.Struct(i)}
}

func (s AnyValueHolder_value_Params_List) Set(i int, v AnyValueHolder_value_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnyValueHolder_value_Params_List) String() string {
	str, _ := text.MarshalList(0xc9851222d70aff42, s.List)
	return str
}

// AnyValueHolder_value_Params_Future is a wrapper for a AnyValueHolder_value_Params promised by a client call.
type AnyValueHolder_value_Params_Future struct{ *capnp.Future }

func (p AnyValueHolder_value_Params_Future) Struct() (AnyValueHolder_value_Params, error) {
	s, err := p.Future.Struct()
	return AnyValueHolder_value_Params{s}, err
}

type AnyValueHolder_value_Results struct{ capnp.Struct }

// AnyValueHolder_value_Results_TypeID is the unique identifier for the type AnyValueHolder_value_Results.
const AnyValueHolder_value_Results_TypeID = 0xb5fca46714e53e71

func NewAnyValueHolder_value_Results(s *capnp.Segment) (AnyValueHolder_value_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyValueHolder_value_Results{st}, err
}

func NewRootAnyValueHolder_value_Results(s *capnp.Segment) (AnyValueHolder_value_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return AnyValueHolder_value_Results{st}, err
}

func ReadRootAnyValueHolder_value_Results(msg *capnp.Message) (AnyValueHolder_value_Results, error) {
	root, err := msg.Root()
	return AnyValueHolder_value_Results{root.Struct()}, err
}

func (s AnyValueHolder_value_Results) String() string {
	str, _ := text.Marshal(0xb5fca46714e53e71, s.Struct)
	return str
}

func (s AnyValueHolder_value_Results) Val() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s AnyValueHolder_value_Results) HasVal() bool {
	return s.Struct.HasPtr(0)
}

func (s AnyValueHolder_value_Results) SetVal(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// AnyValueHolder_value_Results_List is a list of AnyValueHolder_value_Results.
type AnyValueHolder_value_Results_List struct{ capnp.List }

// NewAnyValueHolder_value_Results creates a new list of AnyValueHolder_value_Results.
func NewAnyValueHolder_value_Results_List(s *capnp.Segment, sz int32) (AnyValueHolder_value_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return AnyValueHolder_value_Results_List{l}, err
}

func (s AnyValueHolder_value_Results_List) At(i int) AnyValueHolder_value_Results {
	return AnyValueHolder_value_Results{s.List.Struct(i)}
}

func (s AnyValueHolder_value_Results_List) Set(i int, v AnyValueHolder_value_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s AnyValueHolder_value_Results_List) String() string {
	str, _ := text.MarshalList(0xb5fca46714e53e71, s.List)
	return str
}

// AnyValueHolder_value_Results_Future is a wrapper for a AnyValueHolder_value_Results promised by a client call.
type AnyValueHolder_value_Results_Future struct{ *capnp.Future }

func (p AnyValueHolder_value_Results_Future) Struct() (AnyValueHolder_value_Results, error) {
	s, err := p.Future.Struct()
	return AnyValueHolder_value_Results{s}, err
}

func (p AnyValueHolder_value_Results_Future) Val() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapHolder struct{ Client *capnp.Client }

// CapHolder_TypeID is the unique identifier for the type CapHolder.
const CapHolder_TypeID = 0xcac9c6537df1a097

func (c CapHolder) Cap(ctx context.Context, params func(CapHolder_cap_Params) error) (CapHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c CapHolder) ReleaseCap(ctx context.Context, params func(CapHolder_releaseCap_Params) error) (CapHolder_releaseCap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(CapHolder_releaseCap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return CapHolder_releaseCap_Results_Future{Future: ans.Future()}, release
}

func (c CapHolder) AddRef() CapHolder {
	return CapHolder{
		Client: c.Client.AddRef(),
	}
}

func (c CapHolder) Release() {
	c.Client.Release()
}

// A CapHolder_Server is a CapHolder with a local implementation.
type CapHolder_Server interface {
	Cap(context.Context, CapHolder_cap) error

	ReleaseCap(context.Context, CapHolder_releaseCap) error
}

// CapHolder_NewServer creates a new Server from an implementation of CapHolder_Server.
func CapHolder_NewServer(s CapHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(CapHolder_Methods(nil, s), s, c, policy)
}

// CapHolder_ServerToClient creates a new Client from an implementation of CapHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func CapHolder_ServerToClient(s CapHolder_Server, policy *server.Policy) CapHolder {
	return CapHolder{Client: capnp.NewClient(CapHolder_NewServer(s, policy))}
}

// CapHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func CapHolder_Methods(methods []server.Method, s CapHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      0,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, CapHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcac9c6537df1a097,
			MethodID:      1,
			InterfaceName: "common.capnp:CapHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseCap(ctx, CapHolder_releaseCap{call})
		},
	})

	return methods
}

// CapHolder_cap holds the state for a server call to CapHolder.cap.
// See server.Call for documentation.
type CapHolder_cap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_cap) Args() CapHolder_cap_Params {
	return CapHolder_cap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_cap) AllocResults() (CapHolder_cap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{Struct: r}, err
}

// CapHolder_releaseCap holds the state for a server call to CapHolder.releaseCap.
// See server.Call for documentation.
type CapHolder_releaseCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c CapHolder_releaseCap) Args() CapHolder_releaseCap_Params {
	return CapHolder_releaseCap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c CapHolder_releaseCap) AllocResults() (CapHolder_releaseCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{Struct: r}, err
}

type CapHolder_cap_Params struct{ capnp.Struct }

// CapHolder_cap_Params_TypeID is the unique identifier for the type CapHolder_cap_Params.
const CapHolder_cap_Params_TypeID = 0xda52b34d937fa814

func NewCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func NewRootCapHolder_cap_Params(s *capnp.Segment) (CapHolder_cap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_cap_Params{st}, err
}

func ReadRootCapHolder_cap_Params(msg *capnp.Message) (CapHolder_cap_Params, error) {
	root, err := msg.Root()
	return CapHolder_cap_Params{root.Struct()}, err
}

func (s CapHolder_cap_Params) String() string {
	str, _ := text.Marshal(0xda52b34d937fa814, s.Struct)
	return str
}

// CapHolder_cap_Params_List is a list of CapHolder_cap_Params.
type CapHolder_cap_Params_List struct{ capnp.List }

// NewCapHolder_cap_Params creates a new list of CapHolder_cap_Params.
func NewCapHolder_cap_Params_List(s *capnp.Segment, sz int32) (CapHolder_cap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_cap_Params_List{l}, err
}

func (s CapHolder_cap_Params_List) At(i int) CapHolder_cap_Params {
	return CapHolder_cap_Params{s.List.Struct(i)}
}

func (s CapHolder_cap_Params_List) Set(i int, v CapHolder_cap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Params_List) String() string {
	str, _ := text.MarshalList(0xda52b34d937fa814, s.List)
	return str
}

// CapHolder_cap_Params_Future is a wrapper for a CapHolder_cap_Params promised by a client call.
type CapHolder_cap_Params_Future struct{ *capnp.Future }

func (p CapHolder_cap_Params_Future) Struct() (CapHolder_cap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Params{s}, err
}

type CapHolder_cap_Results struct{ capnp.Struct }

// CapHolder_cap_Results_TypeID is the unique identifier for the type CapHolder_cap_Results.
const CapHolder_cap_Results_TypeID = 0xdc9b0f483595691f

func NewCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func NewRootCapHolder_cap_Results(s *capnp.Segment) (CapHolder_cap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapHolder_cap_Results{st}, err
}

func ReadRootCapHolder_cap_Results(msg *capnp.Message) (CapHolder_cap_Results, error) {
	root, err := msg.Root()
	return CapHolder_cap_Results{root.Struct()}, err
}

func (s CapHolder_cap_Results) String() string {
	str, _ := text.Marshal(0xdc9b0f483595691f, s.Struct)
	return str
}

func (s CapHolder_cap_Results) Object() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s CapHolder_cap_Results) HasObject() bool {
	return s.Struct.HasPtr(0)
}

func (s CapHolder_cap_Results) SetObject(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// CapHolder_cap_Results_List is a list of CapHolder_cap_Results.
type CapHolder_cap_Results_List struct{ capnp.List }

// NewCapHolder_cap_Results creates a new list of CapHolder_cap_Results.
func NewCapHolder_cap_Results_List(s *capnp.Segment, sz int32) (CapHolder_cap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return CapHolder_cap_Results_List{l}, err
}

func (s CapHolder_cap_Results_List) At(i int) CapHolder_cap_Results {
	return CapHolder_cap_Results{s.List.Struct(i)}
}

func (s CapHolder_cap_Results_List) Set(i int, v CapHolder_cap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_cap_Results_List) String() string {
	str, _ := text.MarshalList(0xdc9b0f483595691f, s.List)
	return str
}

// CapHolder_cap_Results_Future is a wrapper for a CapHolder_cap_Results promised by a client call.
type CapHolder_cap_Results_Future struct{ *capnp.Future }

func (p CapHolder_cap_Results_Future) Struct() (CapHolder_cap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_cap_Results{s}, err
}

func (p CapHolder_cap_Results_Future) Object() *capnp.Future {
	return p.Future.Field(0, nil)
}

type CapHolder_releaseCap_Params struct{ capnp.Struct }

// CapHolder_releaseCap_Params_TypeID is the unique identifier for the type CapHolder_releaseCap_Params.
const CapHolder_releaseCap_Params_TypeID = 0x82449708d4fd120d

func NewCapHolder_releaseCap_Params(s *capnp.Segment) (CapHolder_releaseCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Params{st}, err
}

func NewRootCapHolder_releaseCap_Params(s *capnp.Segment) (CapHolder_releaseCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Params{st}, err
}

func ReadRootCapHolder_releaseCap_Params(msg *capnp.Message) (CapHolder_releaseCap_Params, error) {
	root, err := msg.Root()
	return CapHolder_releaseCap_Params{root.Struct()}, err
}

func (s CapHolder_releaseCap_Params) String() string {
	str, _ := text.Marshal(0x82449708d4fd120d, s.Struct)
	return str
}

// CapHolder_releaseCap_Params_List is a list of CapHolder_releaseCap_Params.
type CapHolder_releaseCap_Params_List struct{ capnp.List }

// NewCapHolder_releaseCap_Params creates a new list of CapHolder_releaseCap_Params.
func NewCapHolder_releaseCap_Params_List(s *capnp.Segment, sz int32) (CapHolder_releaseCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_releaseCap_Params_List{l}, err
}

func (s CapHolder_releaseCap_Params_List) At(i int) CapHolder_releaseCap_Params {
	return CapHolder_releaseCap_Params{s.List.Struct(i)}
}

func (s CapHolder_releaseCap_Params_List) Set(i int, v CapHolder_releaseCap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_releaseCap_Params_List) String() string {
	str, _ := text.MarshalList(0x82449708d4fd120d, s.List)
	return str
}

// CapHolder_releaseCap_Params_Future is a wrapper for a CapHolder_releaseCap_Params promised by a client call.
type CapHolder_releaseCap_Params_Future struct{ *capnp.Future }

func (p CapHolder_releaseCap_Params_Future) Struct() (CapHolder_releaseCap_Params, error) {
	s, err := p.Future.Struct()
	return CapHolder_releaseCap_Params{s}, err
}

type CapHolder_releaseCap_Results struct{ capnp.Struct }

// CapHolder_releaseCap_Results_TypeID is the unique identifier for the type CapHolder_releaseCap_Results.
const CapHolder_releaseCap_Results_TypeID = 0xc1374ccca01e2b53

func NewCapHolder_releaseCap_Results(s *capnp.Segment) (CapHolder_releaseCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{st}, err
}

func NewRootCapHolder_releaseCap_Results(s *capnp.Segment) (CapHolder_releaseCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return CapHolder_releaseCap_Results{st}, err
}

func ReadRootCapHolder_releaseCap_Results(msg *capnp.Message) (CapHolder_releaseCap_Results, error) {
	root, err := msg.Root()
	return CapHolder_releaseCap_Results{root.Struct()}, err
}

func (s CapHolder_releaseCap_Results) String() string {
	str, _ := text.Marshal(0xc1374ccca01e2b53, s.Struct)
	return str
}

// CapHolder_releaseCap_Results_List is a list of CapHolder_releaseCap_Results.
type CapHolder_releaseCap_Results_List struct{ capnp.List }

// NewCapHolder_releaseCap_Results creates a new list of CapHolder_releaseCap_Results.
func NewCapHolder_releaseCap_Results_List(s *capnp.Segment, sz int32) (CapHolder_releaseCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return CapHolder_releaseCap_Results_List{l}, err
}

func (s CapHolder_releaseCap_Results_List) At(i int) CapHolder_releaseCap_Results {
	return CapHolder_releaseCap_Results{s.List.Struct(i)}
}

func (s CapHolder_releaseCap_Results_List) Set(i int, v CapHolder_releaseCap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CapHolder_releaseCap_Results_List) String() string {
	str, _ := text.MarshalList(0xc1374ccca01e2b53, s.List)
	return str
}

// CapHolder_releaseCap_Results_Future is a wrapper for a CapHolder_releaseCap_Results promised by a client call.
type CapHolder_releaseCap_Results_Future struct{ *capnp.Future }

func (p CapHolder_releaseCap_Results_Future) Struct() (CapHolder_releaseCap_Results, error) {
	s, err := p.Future.Struct()
	return CapHolder_releaseCap_Results{s}, err
}

type IdentifiableHolder struct{ Client *capnp.Client }

// IdentifiableHolder_TypeID is the unique identifier for the type IdentifiableHolder.
const IdentifiableHolder_TypeID = 0xee543d7c305d56f6

func (c IdentifiableHolder) Cap(ctx context.Context, params func(IdentifiableHolder_cap_Params) error) (IdentifiableHolder_cap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      0,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "cap",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IdentifiableHolder_cap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdentifiableHolder_cap_Results_Future{Future: ans.Future()}, release
}
func (c IdentifiableHolder) ReleaseCap(ctx context.Context, params func(IdentifiableHolder_releaseCap_Params) error) (IdentifiableHolder_releaseCap_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      1,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(IdentifiableHolder_releaseCap_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdentifiableHolder_releaseCap_Results_Future{Future: ans.Future()}, release
}
func (c IdentifiableHolder) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c IdentifiableHolder) AddRef() IdentifiableHolder {
	return IdentifiableHolder{
		Client: c.Client.AddRef(),
	}
}

func (c IdentifiableHolder) Release() {
	c.Client.Release()
}

// A IdentifiableHolder_Server is a IdentifiableHolder with a local implementation.
type IdentifiableHolder_Server interface {
	Cap(context.Context, IdentifiableHolder_cap) error

	ReleaseCap(context.Context, IdentifiableHolder_releaseCap) error

	Info(context.Context, Identifiable_info) error
}

// IdentifiableHolder_NewServer creates a new Server from an implementation of IdentifiableHolder_Server.
func IdentifiableHolder_NewServer(s IdentifiableHolder_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(IdentifiableHolder_Methods(nil, s), s, c, policy)
}

// IdentifiableHolder_ServerToClient creates a new Client from an implementation of IdentifiableHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func IdentifiableHolder_ServerToClient(s IdentifiableHolder_Server, policy *server.Policy) IdentifiableHolder {
	return IdentifiableHolder{Client: capnp.NewClient(IdentifiableHolder_NewServer(s, policy))}
}

// IdentifiableHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func IdentifiableHolder_Methods(methods []server.Method, s IdentifiableHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      0,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "cap",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cap(ctx, IdentifiableHolder_cap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xee543d7c305d56f6,
			MethodID:      1,
			InterfaceName: "common.capnp:IdentifiableHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseCap(ctx, IdentifiableHolder_releaseCap{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// IdentifiableHolder_cap holds the state for a server call to IdentifiableHolder.cap.
// See server.Call for documentation.
type IdentifiableHolder_cap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IdentifiableHolder_cap) Args() IdentifiableHolder_cap_Params {
	return IdentifiableHolder_cap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IdentifiableHolder_cap) AllocResults() (IdentifiableHolder_cap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdentifiableHolder_cap_Results{Struct: r}, err
}

// IdentifiableHolder_releaseCap holds the state for a server call to IdentifiableHolder.releaseCap.
// See server.Call for documentation.
type IdentifiableHolder_releaseCap struct {
	*server.Call
}

// Args returns the call's arguments.
func (c IdentifiableHolder_releaseCap) Args() IdentifiableHolder_releaseCap_Params {
	return IdentifiableHolder_releaseCap_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c IdentifiableHolder_releaseCap) AllocResults() (IdentifiableHolder_releaseCap_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Results{Struct: r}, err
}

type IdentifiableHolder_cap_Params struct{ capnp.Struct }

// IdentifiableHolder_cap_Params_TypeID is the unique identifier for the type IdentifiableHolder_cap_Params.
const IdentifiableHolder_cap_Params_TypeID = 0x93a1b0e66bcacfbb

func NewIdentifiableHolder_cap_Params(s *capnp.Segment) (IdentifiableHolder_cap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_cap_Params{st}, err
}

func NewRootIdentifiableHolder_cap_Params(s *capnp.Segment) (IdentifiableHolder_cap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_cap_Params{st}, err
}

func ReadRootIdentifiableHolder_cap_Params(msg *capnp.Message) (IdentifiableHolder_cap_Params, error) {
	root, err := msg.Root()
	return IdentifiableHolder_cap_Params{root.Struct()}, err
}

func (s IdentifiableHolder_cap_Params) String() string {
	str, _ := text.Marshal(0x93a1b0e66bcacfbb, s.Struct)
	return str
}

// IdentifiableHolder_cap_Params_List is a list of IdentifiableHolder_cap_Params.
type IdentifiableHolder_cap_Params_List struct{ capnp.List }

// NewIdentifiableHolder_cap_Params creates a new list of IdentifiableHolder_cap_Params.
func NewIdentifiableHolder_cap_Params_List(s *capnp.Segment, sz int32) (IdentifiableHolder_cap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IdentifiableHolder_cap_Params_List{l}, err
}

func (s IdentifiableHolder_cap_Params_List) At(i int) IdentifiableHolder_cap_Params {
	return IdentifiableHolder_cap_Params{s.List.Struct(i)}
}

func (s IdentifiableHolder_cap_Params_List) Set(i int, v IdentifiableHolder_cap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_cap_Params_List) String() string {
	str, _ := text.MarshalList(0x93a1b0e66bcacfbb, s.List)
	return str
}

// IdentifiableHolder_cap_Params_Future is a wrapper for a IdentifiableHolder_cap_Params promised by a client call.
type IdentifiableHolder_cap_Params_Future struct{ *capnp.Future }

func (p IdentifiableHolder_cap_Params_Future) Struct() (IdentifiableHolder_cap_Params, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_cap_Params{s}, err
}

type IdentifiableHolder_cap_Results struct{ capnp.Struct }

// IdentifiableHolder_cap_Results_TypeID is the unique identifier for the type IdentifiableHolder_cap_Results.
const IdentifiableHolder_cap_Results_TypeID = 0xb9fe596d7cadbdcc

func NewIdentifiableHolder_cap_Results(s *capnp.Segment) (IdentifiableHolder_cap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdentifiableHolder_cap_Results{st}, err
}

func NewRootIdentifiableHolder_cap_Results(s *capnp.Segment) (IdentifiableHolder_cap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IdentifiableHolder_cap_Results{st}, err
}

func ReadRootIdentifiableHolder_cap_Results(msg *capnp.Message) (IdentifiableHolder_cap_Results, error) {
	root, err := msg.Root()
	return IdentifiableHolder_cap_Results{root.Struct()}, err
}

func (s IdentifiableHolder_cap_Results) String() string {
	str, _ := text.Marshal(0xb9fe596d7cadbdcc, s.Struct)
	return str
}

func (s IdentifiableHolder_cap_Results) Cap() Identifiable {
	p, _ := s.Struct.Ptr(0)
	return Identifiable{Client: p.Interface().Client()}
}

func (s IdentifiableHolder_cap_Results) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s IdentifiableHolder_cap_Results) SetCap(v Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// IdentifiableHolder_cap_Results_List is a list of IdentifiableHolder_cap_Results.
type IdentifiableHolder_cap_Results_List struct{ capnp.List }

// NewIdentifiableHolder_cap_Results creates a new list of IdentifiableHolder_cap_Results.
func NewIdentifiableHolder_cap_Results_List(s *capnp.Segment, sz int32) (IdentifiableHolder_cap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IdentifiableHolder_cap_Results_List{l}, err
}

func (s IdentifiableHolder_cap_Results_List) At(i int) IdentifiableHolder_cap_Results {
	return IdentifiableHolder_cap_Results{s.List.Struct(i)}
}

func (s IdentifiableHolder_cap_Results_List) Set(i int, v IdentifiableHolder_cap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_cap_Results_List) String() string {
	str, _ := text.MarshalList(0xb9fe596d7cadbdcc, s.List)
	return str
}

// IdentifiableHolder_cap_Results_Future is a wrapper for a IdentifiableHolder_cap_Results promised by a client call.
type IdentifiableHolder_cap_Results_Future struct{ *capnp.Future }

func (p IdentifiableHolder_cap_Results_Future) Struct() (IdentifiableHolder_cap_Results, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_cap_Results{s}, err
}

func (p IdentifiableHolder_cap_Results_Future) Cap() Identifiable {
	return Identifiable{Client: p.Future.Field(0, nil).Client()}
}

type IdentifiableHolder_releaseCap_Params struct{ capnp.Struct }

// IdentifiableHolder_releaseCap_Params_TypeID is the unique identifier for the type IdentifiableHolder_releaseCap_Params.
const IdentifiableHolder_releaseCap_Params_TypeID = 0xd69f2da1efe3faaf

func NewIdentifiableHolder_releaseCap_Params(s *capnp.Segment) (IdentifiableHolder_releaseCap_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Params{st}, err
}

func NewRootIdentifiableHolder_releaseCap_Params(s *capnp.Segment) (IdentifiableHolder_releaseCap_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Params{st}, err
}

func ReadRootIdentifiableHolder_releaseCap_Params(msg *capnp.Message) (IdentifiableHolder_releaseCap_Params, error) {
	root, err := msg.Root()
	return IdentifiableHolder_releaseCap_Params{root.Struct()}, err
}

func (s IdentifiableHolder_releaseCap_Params) String() string {
	str, _ := text.Marshal(0xd69f2da1efe3faaf, s.Struct)
	return str
}

// IdentifiableHolder_releaseCap_Params_List is a list of IdentifiableHolder_releaseCap_Params.
type IdentifiableHolder_releaseCap_Params_List struct{ capnp.List }

// NewIdentifiableHolder_releaseCap_Params creates a new list of IdentifiableHolder_releaseCap_Params.
func NewIdentifiableHolder_releaseCap_Params_List(s *capnp.Segment, sz int32) (IdentifiableHolder_releaseCap_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IdentifiableHolder_releaseCap_Params_List{l}, err
}

func (s IdentifiableHolder_releaseCap_Params_List) At(i int) IdentifiableHolder_releaseCap_Params {
	return IdentifiableHolder_releaseCap_Params{s.List.Struct(i)}
}

func (s IdentifiableHolder_releaseCap_Params_List) Set(i int, v IdentifiableHolder_releaseCap_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_releaseCap_Params_List) String() string {
	str, _ := text.MarshalList(0xd69f2da1efe3faaf, s.List)
	return str
}

// IdentifiableHolder_releaseCap_Params_Future is a wrapper for a IdentifiableHolder_releaseCap_Params promised by a client call.
type IdentifiableHolder_releaseCap_Params_Future struct{ *capnp.Future }

func (p IdentifiableHolder_releaseCap_Params_Future) Struct() (IdentifiableHolder_releaseCap_Params, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_releaseCap_Params{s}, err
}

type IdentifiableHolder_releaseCap_Results struct{ capnp.Struct }

// IdentifiableHolder_releaseCap_Results_TypeID is the unique identifier for the type IdentifiableHolder_releaseCap_Results.
const IdentifiableHolder_releaseCap_Results_TypeID = 0x8ca159db7de3927b

func NewIdentifiableHolder_releaseCap_Results(s *capnp.Segment) (IdentifiableHolder_releaseCap_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Results{st}, err
}

func NewRootIdentifiableHolder_releaseCap_Results(s *capnp.Segment) (IdentifiableHolder_releaseCap_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return IdentifiableHolder_releaseCap_Results{st}, err
}

func ReadRootIdentifiableHolder_releaseCap_Results(msg *capnp.Message) (IdentifiableHolder_releaseCap_Results, error) {
	root, err := msg.Root()
	return IdentifiableHolder_releaseCap_Results{root.Struct()}, err
}

func (s IdentifiableHolder_releaseCap_Results) String() string {
	str, _ := text.Marshal(0x8ca159db7de3927b, s.Struct)
	return str
}

// IdentifiableHolder_releaseCap_Results_List is a list of IdentifiableHolder_releaseCap_Results.
type IdentifiableHolder_releaseCap_Results_List struct{ capnp.List }

// NewIdentifiableHolder_releaseCap_Results creates a new list of IdentifiableHolder_releaseCap_Results.
func NewIdentifiableHolder_releaseCap_Results_List(s *capnp.Segment, sz int32) (IdentifiableHolder_releaseCap_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return IdentifiableHolder_releaseCap_Results_List{l}, err
}

func (s IdentifiableHolder_releaseCap_Results_List) At(i int) IdentifiableHolder_releaseCap_Results {
	return IdentifiableHolder_releaseCap_Results{s.List.Struct(i)}
}

func (s IdentifiableHolder_releaseCap_Results_List) Set(i int, v IdentifiableHolder_releaseCap_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IdentifiableHolder_releaseCap_Results_List) String() string {
	str, _ := text.MarshalList(0x8ca159db7de3927b, s.List)
	return str
}

// IdentifiableHolder_releaseCap_Results_Future is a wrapper for a IdentifiableHolder_releaseCap_Results promised by a client call.
type IdentifiableHolder_releaseCap_Results_Future struct{ *capnp.Future }

func (p IdentifiableHolder_releaseCap_Results_Future) Struct() (IdentifiableHolder_releaseCap_Results, error) {
	s, err := p.Future.Struct()
	return IdentifiableHolder_releaseCap_Results{s}, err
}

type ListEntry struct{ capnp.Struct }

// ListEntry_TypeID is the unique identifier for the type ListEntry.
const ListEntry_TypeID = 0xc201bf46dd40051e

func NewListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func NewRootListEntry(s *capnp.Segment) (ListEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ListEntry{st}, err
}

func ReadRootListEntry(msg *capnp.Message) (ListEntry, error) {
	root, err := msg.Root()
	return ListEntry{root.Struct()}, err
}

func (s ListEntry) String() string {
	str, _ := text.Marshal(0xc201bf46dd40051e, s.Struct)
	return str
}

func (s ListEntry) Entry() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s ListEntry) HasEntry() bool {
	return s.Struct.HasPtr(0)
}

func (s ListEntry) SetEntry(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// ListEntry_List is a list of ListEntry.
type ListEntry_List struct{ capnp.List }

// NewListEntry creates a new list of ListEntry.
func NewListEntry_List(s *capnp.Segment, sz int32) (ListEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ListEntry_List{l}, err
}

func (s ListEntry_List) At(i int) ListEntry { return ListEntry{s.List.Struct(i)} }

func (s ListEntry_List) Set(i int, v ListEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s ListEntry_List) String() string {
	str, _ := text.MarshalList(0xc201bf46dd40051e, s.List)
	return str
}

// ListEntry_Future is a wrapper for a ListEntry promised by a client call.
type ListEntry_Future struct{ *capnp.Future }

func (p ListEntry_Future) Struct() (ListEntry, error) {
	s, err := p.Future.Struct()
	return ListEntry{s}, err
}

func (p ListEntry_Future) Entry() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Stopable struct{ Client *capnp.Client }

// Stopable_TypeID is the unique identifier for the type Stopable.
const Stopable_TypeID = 0xce7e4202f09e314a

func (c Stopable) Stop(ctx context.Context, params func(Stopable_stop_Params) error) (Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c Stopable) AddRef() Stopable {
	return Stopable{
		Client: c.Client.AddRef(),
	}
}

func (c Stopable) Release() {
	c.Client.Release()
}

// A Stopable_Server is a Stopable with a local implementation.
type Stopable_Server interface {
	Stop(context.Context, Stopable_stop) error
}

// Stopable_NewServer creates a new Server from an implementation of Stopable_Server.
func Stopable_NewServer(s Stopable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Stopable_Methods(nil, s), s, c, policy)
}

// Stopable_ServerToClient creates a new Client from an implementation of Stopable_Server.
// The caller is responsible for calling Release on the returned Client.
func Stopable_ServerToClient(s Stopable_Server, policy *server.Policy) Stopable {
	return Stopable{Client: capnp.NewClient(Stopable_NewServer(s, policy))}
}

// Stopable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Stopable_Methods(methods []server.Method, s Stopable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, Stopable_stop{call})
		},
	})

	return methods
}

// Stopable_stop holds the state for a server call to Stopable.stop.
// See server.Call for documentation.
type Stopable_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Stopable_stop) Args() Stopable_stop_Params {
	return Stopable_stop_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Stopable_stop) AllocResults() (Stopable_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{Struct: r}, err
}

type Stopable_stop_Params struct{ capnp.Struct }

// Stopable_stop_Params_TypeID is the unique identifier for the type Stopable_stop_Params.
const Stopable_stop_Params_TypeID = 0x98a27c9476315729

func NewStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func NewRootStopable_stop_Params(s *capnp.Segment) (Stopable_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Params{st}, err
}

func ReadRootStopable_stop_Params(msg *capnp.Message) (Stopable_stop_Params, error) {
	root, err := msg.Root()
	return Stopable_stop_Params{root.Struct()}, err
}

func (s Stopable_stop_Params) String() string {
	str, _ := text.Marshal(0x98a27c9476315729, s.Struct)
	return str
}

// Stopable_stop_Params_List is a list of Stopable_stop_Params.
type Stopable_stop_Params_List struct{ capnp.List }

// NewStopable_stop_Params creates a new list of Stopable_stop_Params.
func NewStopable_stop_Params_List(s *capnp.Segment, sz int32) (Stopable_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Params_List{l}, err
}

func (s Stopable_stop_Params_List) At(i int) Stopable_stop_Params {
	return Stopable_stop_Params{s.List.Struct(i)}
}

func (s Stopable_stop_Params_List) Set(i int, v Stopable_stop_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Params_List) String() string {
	str, _ := text.MarshalList(0x98a27c9476315729, s.List)
	return str
}

// Stopable_stop_Params_Future is a wrapper for a Stopable_stop_Params promised by a client call.
type Stopable_stop_Params_Future struct{ *capnp.Future }

func (p Stopable_stop_Params_Future) Struct() (Stopable_stop_Params, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Params{s}, err
}

type Stopable_stop_Results struct{ capnp.Struct }

// Stopable_stop_Results_TypeID is the unique identifier for the type Stopable_stop_Results.
const Stopable_stop_Results_TypeID = 0xd3a3b24aaa056a5c

func NewStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func NewRootStopable_stop_Results(s *capnp.Segment) (Stopable_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Stopable_stop_Results{st}, err
}

func ReadRootStopable_stop_Results(msg *capnp.Message) (Stopable_stop_Results, error) {
	root, err := msg.Root()
	return Stopable_stop_Results{root.Struct()}, err
}

func (s Stopable_stop_Results) String() string {
	str, _ := text.Marshal(0xd3a3b24aaa056a5c, s.Struct)
	return str
}

// Stopable_stop_Results_List is a list of Stopable_stop_Results.
type Stopable_stop_Results_List struct{ capnp.List }

// NewStopable_stop_Results creates a new list of Stopable_stop_Results.
func NewStopable_stop_Results_List(s *capnp.Segment, sz int32) (Stopable_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Stopable_stop_Results_List{l}, err
}

func (s Stopable_stop_Results_List) At(i int) Stopable_stop_Results {
	return Stopable_stop_Results{s.List.Struct(i)}
}

func (s Stopable_stop_Results_List) Set(i int, v Stopable_stop_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Stopable_stop_Results_List) String() string {
	str, _ := text.MarshalList(0xd3a3b24aaa056a5c, s.List)
	return str
}

// Stopable_stop_Results_Future is a wrapper for a Stopable_stop_Results promised by a client call.
type Stopable_stop_Results_Future struct{ *capnp.Future }

func (p Stopable_stop_Results_Future) Struct() (Stopable_stop_Results, error) {
	s, err := p.Future.Struct()
	return Stopable_stop_Results{s}, err
}

type Pair struct{ capnp.Struct }

// Pair_TypeID is the unique identifier for the type Pair.
const Pair_TypeID = 0xb9d4864725174733

func NewPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func NewRootPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func ReadRootPair(msg *capnp.Message) (Pair, error) {
	root, err := msg.Root()
	return Pair{root.Struct()}, err
}

func (s Pair) String() string {
	str, _ := text.Marshal(0xb9d4864725174733, s.Struct)
	return str
}

func (s Pair) Fst() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pair) HasFst() bool {
	return s.Struct.HasPtr(0)
}

func (s Pair) SetFst(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pair) Snd() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Pair) HasSnd() bool {
	return s.Struct.HasPtr(1)
}

func (s Pair) SetSnd(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Pair_List is a list of Pair.
type Pair_List struct{ capnp.List }

// NewPair creates a new list of Pair.
func NewPair_List(s *capnp.Segment, sz int32) (Pair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pair_List{l}, err
}

func (s Pair_List) At(i int) Pair { return Pair{s.List.Struct(i)} }

func (s Pair_List) Set(i int, v Pair) error { return s.List.SetStruct(i, v.Struct) }

func (s Pair_List) String() string {
	str, _ := text.MarshalList(0xb9d4864725174733, s.List)
	return str
}

// Pair_Future is a wrapper for a Pair promised by a client call.
type Pair_Future struct{ *capnp.Future }

func (p Pair_Future) Struct() (Pair, error) {
	s, err := p.Future.Struct()
	return Pair{s}, err
}

func (p Pair_Future) Fst() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pair_Future) Snd() *capnp.Future {
	return p.Future.Field(1, nil)
}

type LL struct{ capnp.Struct }

// LL_TypeID is the unique identifier for the type LL.
const LL_TypeID = 0xd67792aa3fc241be

func NewLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func NewRootLL(s *capnp.Segment) (LL, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return LL{st}, err
}

func ReadRootLL(msg *capnp.Message) (LL, error) {
	root, err := msg.Root()
	return LL{root.Struct()}, err
}

func (s LL) String() string {
	str, _ := text.Marshal(0xd67792aa3fc241be, s.Struct)
	return str
}

func (s LL) Head() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s LL) HasHead() bool {
	return s.Struct.HasPtr(0)
}

func (s LL) SetHead(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s LL) Tail() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s LL) HasTail() bool {
	return s.Struct.HasPtr(1)
}

func (s LL) SetTail(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// LL_List is a list of LL.
type LL_List struct{ capnp.List }

// NewLL creates a new list of LL.
func NewLL_List(s *capnp.Segment, sz int32) (LL_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return LL_List{l}, err
}

func (s LL_List) At(i int) LL { return LL{s.List.Struct(i)} }

func (s LL_List) Set(i int, v LL) error { return s.List.SetStruct(i, v.Struct) }

func (s LL_List) String() string {
	str, _ := text.MarshalList(0xd67792aa3fc241be, s.List)
	return str
}

// LL_Future is a wrapper for a LL promised by a client call.
type LL_Future struct{ *capnp.Future }

func (p LL_Future) Struct() (LL, error) {
	s, err := p.Future.Struct()
	return LL{s}, err
}

func (p LL_Future) Head() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p LL_Future) Tail() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Clock struct{ Client *capnp.Client }

// Clock_TypeID is the unique identifier for the type Clock.
const Clock_TypeID = 0xa8b91e2c1f8c929a

func (c Clock) Tick(ctx context.Context, params func(Clock_tick_Params) error) (Clock_tick_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa8b91e2c1f8c929a,
			MethodID:      0,
			InterfaceName: "common.capnp:Clock",
			MethodName:    "tick",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Clock_tick_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Clock_tick_Results_Future{Future: ans.Future()}, release
}

func (c Clock) AddRef() Clock {
	return Clock{
		Client: c.Client.AddRef(),
	}
}

func (c Clock) Release() {
	c.Client.Release()
}

// A Clock_Server is a Clock with a local implementation.
type Clock_Server interface {
	Tick(context.Context, Clock_tick) error
}

// Clock_NewServer creates a new Server from an implementation of Clock_Server.
func Clock_NewServer(s Clock_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Clock_Methods(nil, s), s, c, policy)
}

// Clock_ServerToClient creates a new Client from an implementation of Clock_Server.
// The caller is responsible for calling Release on the returned Client.
func Clock_ServerToClient(s Clock_Server, policy *server.Policy) Clock {
	return Clock{Client: capnp.NewClient(Clock_NewServer(s, policy))}
}

// Clock_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Clock_Methods(methods []server.Method, s Clock_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa8b91e2c1f8c929a,
			MethodID:      0,
			InterfaceName: "common.capnp:Clock",
			MethodName:    "tick",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Tick(ctx, Clock_tick{call})
		},
	})

	return methods
}

// Clock_tick holds the state for a server call to Clock.tick.
// See server.Call for documentation.
type Clock_tick struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Clock_tick) Args() Clock_tick_Params {
	return Clock_tick_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Clock_tick) AllocResults() (Clock_tick_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Clock_tick_Results{Struct: r}, err
}

type Clock_tick_Params struct{ capnp.Struct }

// Clock_tick_Params_TypeID is the unique identifier for the type Clock_tick_Params.
const Clock_tick_Params_TypeID = 0xfd0735841a7da108

func NewClock_tick_Params(s *capnp.Segment) (Clock_tick_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Clock_tick_Params{st}, err
}

func NewRootClock_tick_Params(s *capnp.Segment) (Clock_tick_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Clock_tick_Params{st}, err
}

func ReadRootClock_tick_Params(msg *capnp.Message) (Clock_tick_Params, error) {
	root, err := msg.Root()
	return Clock_tick_Params{root.Struct()}, err
}

func (s Clock_tick_Params) String() string {
	str, _ := text.Marshal(0xfd0735841a7da108, s.Struct)
	return str
}

func (s Clock_tick_Params) Time() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Clock_tick_Params) HasTime() bool {
	return s.Struct.HasPtr(0)
}

func (s Clock_tick_Params) SetTime(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Clock_tick_Params_List is a list of Clock_tick_Params.
type Clock_tick_Params_List struct{ capnp.List }

// NewClock_tick_Params creates a new list of Clock_tick_Params.
func NewClock_tick_Params_List(s *capnp.Segment, sz int32) (Clock_tick_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Clock_tick_Params_List{l}, err
}

func (s Clock_tick_Params_List) At(i int) Clock_tick_Params {
	return Clock_tick_Params{s.List.Struct(i)}
}

func (s Clock_tick_Params_List) Set(i int, v Clock_tick_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Clock_tick_Params_List) String() string {
	str, _ := text.MarshalList(0xfd0735841a7da108, s.List)
	return str
}

// Clock_tick_Params_Future is a wrapper for a Clock_tick_Params promised by a client call.
type Clock_tick_Params_Future struct{ *capnp.Future }

func (p Clock_tick_Params_Future) Struct() (Clock_tick_Params, error) {
	s, err := p.Future.Struct()
	return Clock_tick_Params{s}, err
}

func (p Clock_tick_Params_Future) Time() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Clock_tick_Results struct{ capnp.Struct }

// Clock_tick_Results_TypeID is the unique identifier for the type Clock_tick_Results.
const Clock_tick_Results_TypeID = 0xc953edb8b6293faf

func NewClock_tick_Results(s *capnp.Segment) (Clock_tick_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Clock_tick_Results{st}, err
}

func NewRootClock_tick_Results(s *capnp.Segment) (Clock_tick_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Clock_tick_Results{st}, err
}

func ReadRootClock_tick_Results(msg *capnp.Message) (Clock_tick_Results, error) {
	root, err := msg.Root()
	return Clock_tick_Results{root.Struct()}, err
}

func (s Clock_tick_Results) String() string {
	str, _ := text.Marshal(0xc953edb8b6293faf, s.Struct)
	return str
}

// Clock_tick_Results_List is a list of Clock_tick_Results.
type Clock_tick_Results_List struct{ capnp.List }

// NewClock_tick_Results creates a new list of Clock_tick_Results.
func NewClock_tick_Results_List(s *capnp.Segment, sz int32) (Clock_tick_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Clock_tick_Results_List{l}, err
}

func (s Clock_tick_Results_List) At(i int) Clock_tick_Results {
	return Clock_tick_Results{s.List.Struct(i)}
}

func (s Clock_tick_Results_List) Set(i int, v Clock_tick_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Clock_tick_Results_List) String() string {
	str, _ := text.MarshalList(0xc953edb8b6293faf, s.List)
	return str
}

// Clock_tick_Results_Future is a wrapper for a Clock_tick_Results promised by a client call.
type Clock_tick_Results_Future struct{ *capnp.Future }

func (p Clock_tick_Results_Future) Struct() (Clock_tick_Results, error) {
	s, err := p.Future.Struct()
	return Clock_tick_Results{s}, err
}

type IP struct{ capnp.Struct }

// IP_TypeID is the unique identifier for the type IP.
const IP_TypeID = 0xd39ff99bbab1a74e

func NewIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP{st}, err
}

func NewRootIP(s *capnp.Segment) (IP, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP{st}, err
}

func ReadRootIP(msg *capnp.Message) (IP, error) {
	root, err := msg.Root()
	return IP{root.Struct()}, err
}

func (s IP) String() string {
	str, _ := text.Marshal(0xd39ff99bbab1a74e, s.Struct)
	return str
}

func (s IP) Attributes() (IP_KV_List, error) {
	p, err := s.Struct.Ptr(0)
	return IP_KV_List{List: p.List()}, err
}

func (s IP) HasAttributes() bool {
	return s.Struct.HasPtr(0)
}

func (s IP) SetAttributes(v IP_KV_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAttributes sets the attributes field to a newly
// allocated IP_KV_List, preferring placement in s's segment.
func (s IP) NewAttributes(n int32) (IP_KV_List, error) {
	l, err := NewIP_KV_List(s.Struct.Segment(), n)
	if err != nil {
		return IP_KV_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s IP) Content() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s IP) HasContent() bool {
	return s.Struct.HasPtr(1)
}

func (s IP) SetContent(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// IP_List is a list of IP.
type IP_List struct{ capnp.List }

// NewIP creates a new list of IP.
func NewIP_List(s *capnp.Segment, sz int32) (IP_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IP_List{l}, err
}

func (s IP_List) At(i int) IP { return IP{s.List.Struct(i)} }

func (s IP_List) Set(i int, v IP) error { return s.List.SetStruct(i, v.Struct) }

func (s IP_List) String() string {
	str, _ := text.MarshalList(0xd39ff99bbab1a74e, s.List)
	return str
}

// IP_Future is a wrapper for a IP promised by a client call.
type IP_Future struct{ *capnp.Future }

func (p IP_Future) Struct() (IP, error) {
	s, err := p.Future.Struct()
	return IP{s}, err
}

func (p IP_Future) Content() *capnp.Future {
	return p.Future.Field(1, nil)
}

type IP_KV struct{ capnp.Struct }

// IP_KV_TypeID is the unique identifier for the type IP_KV.
const IP_KV_TypeID = 0xb07588184ad8aac5

func NewIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP_KV{st}, err
}

func NewRootIP_KV(s *capnp.Segment) (IP_KV, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return IP_KV{st}, err
}

func ReadRootIP_KV(msg *capnp.Message) (IP_KV, error) {
	root, err := msg.Root()
	return IP_KV{root.Struct()}, err
}

func (s IP_KV) String() string {
	str, _ := text.Marshal(0xb07588184ad8aac5, s.Struct)
	return str
}

func (s IP_KV) Key() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IP_KV) HasKey() bool {
	return s.Struct.HasPtr(0)
}

func (s IP_KV) KeyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IP_KV) SetKey(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IP_KV) Value() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s IP_KV) HasValue() bool {
	return s.Struct.HasPtr(1)
}

func (s IP_KV) SetValue(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// IP_KV_List is a list of IP_KV.
type IP_KV_List struct{ capnp.List }

// NewIP_KV creates a new list of IP_KV.
func NewIP_KV_List(s *capnp.Segment, sz int32) (IP_KV_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return IP_KV_List{l}, err
}

func (s IP_KV_List) At(i int) IP_KV { return IP_KV{s.List.Struct(i)} }

func (s IP_KV_List) Set(i int, v IP_KV) error { return s.List.SetStruct(i, v.Struct) }

func (s IP_KV_List) String() string {
	str, _ := text.MarshalList(0xb07588184ad8aac5, s.List)
	return str
}

// IP_KV_Future is a wrapper for a IP_KV promised by a client call.
type IP_KV_Future struct{ *capnp.Future }

func (p IP_KV_Future) Struct() (IP_KV, error) {
	s, err := p.Future.Struct()
	return IP_KV{s}, err
}

func (p IP_KV_Future) Value() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Channel struct{ Client *capnp.Client }

// Channel_TypeID is the unique identifier for the type Channel.
const Channel_TypeID = 0xf0c0f9413a3083be

func (c Channel) SetBufferSize(ctx context.Context, params func(Channel_setBufferSize_Params) error) (Channel_setBufferSize_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setBufferSize",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setBufferSize_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_setBufferSize_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Reader(ctx context.Context, params func(Channel_reader_Params) error) (Channel_reader_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "reader",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_reader_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_reader_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Writer(ctx context.Context, params func(Channel_writer_Params) error) (Channel_writer_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      2,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "writer",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_writer_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_writer_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Endpoints(ctx context.Context, params func(Channel_endpoints_Params) error) (Channel_endpoints_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      3,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "endpoints",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_endpoints_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_endpoints_Results_Future{Future: ans.Future()}, release
}
func (c Channel) SetAutoCloseSemantics(ctx context.Context, params func(Channel_setAutoCloseSemantics_Params) error) (Channel_setAutoCloseSemantics_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      4,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_setAutoCloseSemantics_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_setAutoCloseSemantics_Results_Future{Future: ans.Future()}, release
}
func (c Channel) Close(ctx context.Context, params func(Channel_close_Params) error) (Channel_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      5,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel) AddRef() Channel {
	return Channel{
		Client: c.Client.AddRef(),
	}
}

func (c Channel) Release() {
	c.Client.Release()
}

// A Channel_Server is a Channel with a local implementation.
type Channel_Server interface {
	SetBufferSize(context.Context, Channel_setBufferSize) error

	Reader(context.Context, Channel_reader) error

	Writer(context.Context, Channel_writer) error

	Endpoints(context.Context, Channel_endpoints) error

	SetAutoCloseSemantics(context.Context, Channel_setAutoCloseSemantics) error

	Close(context.Context, Channel_close) error
}

// Channel_NewServer creates a new Server from an implementation of Channel_Server.
func Channel_NewServer(s Channel_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Methods(nil, s), s, c, policy)
}

// Channel_ServerToClient creates a new Client from an implementation of Channel_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_ServerToClient(s Channel_Server, policy *server.Policy) Channel {
	return Channel{Client: capnp.NewClient(Channel_NewServer(s, policy))}
}

// Channel_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Methods(methods []server.Method, s Channel_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setBufferSize",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetBufferSize(ctx, Channel_setBufferSize{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "reader",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Reader(ctx, Channel_reader{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      2,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "writer",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Writer(ctx, Channel_writer{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      3,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "endpoints",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Endpoints(ctx, Channel_endpoints{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      4,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "setAutoCloseSemantics",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetAutoCloseSemantics(ctx, Channel_setAutoCloseSemantics{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf0c0f9413a3083be,
			MethodID:      5,
			InterfaceName: "common.capnp:Channel",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_close{call})
		},
	})

	return methods
}

// Channel_setBufferSize holds the state for a server call to Channel.setBufferSize.
// See server.Call for documentation.
type Channel_setBufferSize struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setBufferSize) Args() Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_setBufferSize) AllocResults() (Channel_setBufferSize_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{Struct: r}, err
}

// Channel_reader holds the state for a server call to Channel.reader.
// See server.Call for documentation.
type Channel_reader struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_reader) Args() Channel_reader_Params {
	return Channel_reader_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_reader) AllocResults() (Channel_reader_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{Struct: r}, err
}

// Channel_writer holds the state for a server call to Channel.writer.
// See server.Call for documentation.
type Channel_writer struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_writer) Args() Channel_writer_Params {
	return Channel_writer_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_writer) AllocResults() (Channel_writer_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{Struct: r}, err
}

// Channel_endpoints holds the state for a server call to Channel.endpoints.
// See server.Call for documentation.
type Channel_endpoints struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_endpoints) Args() Channel_endpoints_Params {
	return Channel_endpoints_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_endpoints) AllocResults() (Channel_endpoints_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{Struct: r}, err
}

// Channel_setAutoCloseSemantics holds the state for a server call to Channel.setAutoCloseSemantics.
// See server.Call for documentation.
type Channel_setAutoCloseSemantics struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_setAutoCloseSemantics) Args() Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_setAutoCloseSemantics) AllocResults() (Channel_setAutoCloseSemantics_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{Struct: r}, err
}

// Channel_close holds the state for a server call to Channel.close.
// See server.Call for documentation.
type Channel_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_close) Args() Channel_close_Params {
	return Channel_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_close) AllocResults() (Channel_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{Struct: r}, err
}

type Channel_CloseSemantics uint16

// Channel_CloseSemantics_TypeID is the unique identifier for the type Channel_CloseSemantics.
const Channel_CloseSemantics_TypeID = 0x956ee3f21ad6b221

// Values of Channel_CloseSemantics.
const (
	Channel_CloseSemantics_fbp Channel_CloseSemantics = 0
	Channel_CloseSemantics_no  Channel_CloseSemantics = 1
)

// String returns the enum's constant name.
func (c Channel_CloseSemantics) String() string {
	switch c {
	case Channel_CloseSemantics_fbp:
		return "fbp"
	case Channel_CloseSemantics_no:
		return "no"

	default:
		return ""
	}
}

// Channel_CloseSemanticsFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Channel_CloseSemanticsFromString(c string) Channel_CloseSemantics {
	switch c {
	case "fbp":
		return Channel_CloseSemantics_fbp
	case "no":
		return Channel_CloseSemantics_no

	default:
		return 0
	}
}

type Channel_CloseSemantics_List struct{ capnp.List }

func NewChannel_CloseSemantics_List(s *capnp.Segment, sz int32) (Channel_CloseSemantics_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Channel_CloseSemantics_List{l.List}, err
}

func (l Channel_CloseSemantics_List) At(i int) Channel_CloseSemantics {
	ul := capnp.UInt16List{List: l.List}
	return Channel_CloseSemantics(ul.At(i))
}

func (l Channel_CloseSemantics_List) Set(i int, v Channel_CloseSemantics) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Channel_Msg struct{ capnp.Struct }
type Channel_Msg_Which uint16

const (
	Channel_Msg_Which_value Channel_Msg_Which = 0
	Channel_Msg_Which_done  Channel_Msg_Which = 1
)

func (w Channel_Msg_Which) String() string {
	const s = "valuedone"
	switch w {
	case Channel_Msg_Which_value:
		return s[0:5]
	case Channel_Msg_Which_done:
		return s[5:9]

	}
	return "Channel_Msg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Channel_Msg_TypeID is the unique identifier for the type Channel_Msg.
const Channel_Msg_TypeID = 0x876b422c6839e6b2

func NewChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{st}, err
}

func NewRootChannel_Msg(s *capnp.Segment) (Channel_Msg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{st}, err
}

func ReadRootChannel_Msg(msg *capnp.Message) (Channel_Msg, error) {
	root, err := msg.Root()
	return Channel_Msg{root.Struct()}, err
}

func (s Channel_Msg) String() string {
	str, _ := text.Marshal(0x876b422c6839e6b2, s.Struct)
	return str
}

func (s Channel_Msg) Which() Channel_Msg_Which {
	return Channel_Msg_Which(s.Struct.Uint16(0))
}
func (s Channel_Msg) Value() (capnp.Ptr, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != value")
	}
	return s.Struct.Ptr(0)
}

func (s Channel_Msg) HasValue() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Channel_Msg) SetValue(v capnp.Ptr) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v)
}

func (s Channel_Msg) SetDone() {
	s.Struct.SetUint16(0, 1)

}

// Channel_Msg_List is a list of Channel_Msg.
type Channel_Msg_List struct{ capnp.List }

// NewChannel_Msg creates a new list of Channel_Msg.
func NewChannel_Msg_List(s *capnp.Segment, sz int32) (Channel_Msg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Channel_Msg_List{l}, err
}

func (s Channel_Msg_List) At(i int) Channel_Msg { return Channel_Msg{s.List.Struct(i)} }

func (s Channel_Msg_List) Set(i int, v Channel_Msg) error { return s.List.SetStruct(i, v.Struct) }

func (s Channel_Msg_List) String() string {
	str, _ := text.MarshalList(0x876b422c6839e6b2, s.List)
	return str
}

// Channel_Msg_Future is a wrapper for a Channel_Msg promised by a client call.
type Channel_Msg_Future struct{ *capnp.Future }

func (p Channel_Msg_Future) Struct() (Channel_Msg, error) {
	s, err := p.Future.Struct()
	return Channel_Msg{s}, err
}

func (p Channel_Msg_Future) Value() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Channel_Reader struct{ Client *capnp.Client }

// Channel_Reader_TypeID is the unique identifier for the type Channel_Reader.
const Channel_Reader_TypeID = 0x9c656810b30decd7

func (c Channel_Reader) Read(ctx context.Context, params func(Channel_Reader_read_Params) error) (Channel_Msg_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Msg_Future{Future: ans.Future()}, release
}
func (c Channel_Reader) Close(ctx context.Context, params func(Channel_Reader_close_Params) error) (Channel_Reader_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Reader_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Reader_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel_Reader) AddRef() Channel_Reader {
	return Channel_Reader{
		Client: c.Client.AddRef(),
	}
}

func (c Channel_Reader) Release() {
	c.Client.Release()
}

// A Channel_Reader_Server is a Channel_Reader with a local implementation.
type Channel_Reader_Server interface {
	Read(context.Context, Channel_Reader_read) error

	Close(context.Context, Channel_Reader_close) error
}

// Channel_Reader_NewServer creates a new Server from an implementation of Channel_Reader_Server.
func Channel_Reader_NewServer(s Channel_Reader_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Reader_Methods(nil, s), s, c, policy)
}

// Channel_Reader_ServerToClient creates a new Client from an implementation of Channel_Reader_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Reader_ServerToClient(s Channel_Reader_Server, policy *server.Policy) Channel_Reader {
	return Channel_Reader{Client: capnp.NewClient(Channel_Reader_NewServer(s, policy))}
}

// Channel_Reader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Reader_Methods(methods []server.Method, s Channel_Reader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, Channel_Reader_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c656810b30decd7,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Reader",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Reader_close{call})
		},
	})

	return methods
}

// Channel_Reader_read holds the state for a server call to Channel_Reader.read.
// See server.Call for documentation.
type Channel_Reader_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_read) Args() Channel_Reader_read_Params {
	return Channel_Reader_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Reader_read) AllocResults() (Channel_Msg, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Channel_Msg{Struct: r}, err
}

// Channel_Reader_close holds the state for a server call to Channel_Reader.close.
// See server.Call for documentation.
type Channel_Reader_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Reader_close) Args() Channel_Reader_close_Params {
	return Channel_Reader_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Reader_close) AllocResults() (Channel_Reader_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{Struct: r}, err
}

type Channel_Reader_read_Params struct{ capnp.Struct }

// Channel_Reader_read_Params_TypeID is the unique identifier for the type Channel_Reader_read_Params.
const Channel_Reader_read_Params_TypeID = 0xf8dc00b2d60ea82f

func NewChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params{st}, err
}

func NewRootChannel_Reader_read_Params(s *capnp.Segment) (Channel_Reader_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_read_Params{st}, err
}

func ReadRootChannel_Reader_read_Params(msg *capnp.Message) (Channel_Reader_read_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_read_Params{root.Struct()}, err
}

func (s Channel_Reader_read_Params) String() string {
	str, _ := text.Marshal(0xf8dc00b2d60ea82f, s.Struct)
	return str
}

// Channel_Reader_read_Params_List is a list of Channel_Reader_read_Params.
type Channel_Reader_read_Params_List struct{ capnp.List }

// NewChannel_Reader_read_Params creates a new list of Channel_Reader_read_Params.
func NewChannel_Reader_read_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_read_Params_List{l}, err
}

func (s Channel_Reader_read_Params_List) At(i int) Channel_Reader_read_Params {
	return Channel_Reader_read_Params{s.List.Struct(i)}
}

func (s Channel_Reader_read_Params_List) Set(i int, v Channel_Reader_read_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_read_Params_List) String() string {
	str, _ := text.MarshalList(0xf8dc00b2d60ea82f, s.List)
	return str
}

// Channel_Reader_read_Params_Future is a wrapper for a Channel_Reader_read_Params promised by a client call.
type Channel_Reader_read_Params_Future struct{ *capnp.Future }

func (p Channel_Reader_read_Params_Future) Struct() (Channel_Reader_read_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_read_Params{s}, err
}

type Channel_Reader_close_Params struct{ capnp.Struct }

// Channel_Reader_close_Params_TypeID is the unique identifier for the type Channel_Reader_close_Params.
const Channel_Reader_close_Params_TypeID = 0x926107b4c88d431f

func NewChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params{st}, err
}

func NewRootChannel_Reader_close_Params(s *capnp.Segment) (Channel_Reader_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Params{st}, err
}

func ReadRootChannel_Reader_close_Params(msg *capnp.Message) (Channel_Reader_close_Params, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Params{root.Struct()}, err
}

func (s Channel_Reader_close_Params) String() string {
	str, _ := text.Marshal(0x926107b4c88d431f, s.Struct)
	return str
}

// Channel_Reader_close_Params_List is a list of Channel_Reader_close_Params.
type Channel_Reader_close_Params_List struct{ capnp.List }

// NewChannel_Reader_close_Params creates a new list of Channel_Reader_close_Params.
func NewChannel_Reader_close_Params_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_close_Params_List{l}, err
}

func (s Channel_Reader_close_Params_List) At(i int) Channel_Reader_close_Params {
	return Channel_Reader_close_Params{s.List.Struct(i)}
}

func (s Channel_Reader_close_Params_List) Set(i int, v Channel_Reader_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_close_Params_List) String() string {
	str, _ := text.MarshalList(0x926107b4c88d431f, s.List)
	return str
}

// Channel_Reader_close_Params_Future is a wrapper for a Channel_Reader_close_Params promised by a client call.
type Channel_Reader_close_Params_Future struct{ *capnp.Future }

func (p Channel_Reader_close_Params_Future) Struct() (Channel_Reader_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_close_Params{s}, err
}

type Channel_Reader_close_Results struct{ capnp.Struct }

// Channel_Reader_close_Results_TypeID is the unique identifier for the type Channel_Reader_close_Results.
const Channel_Reader_close_Results_TypeID = 0xec0d27e49a0f9f3a

func NewChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{st}, err
}

func NewRootChannel_Reader_close_Results(s *capnp.Segment) (Channel_Reader_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Reader_close_Results{st}, err
}

func ReadRootChannel_Reader_close_Results(msg *capnp.Message) (Channel_Reader_close_Results, error) {
	root, err := msg.Root()
	return Channel_Reader_close_Results{root.Struct()}, err
}

func (s Channel_Reader_close_Results) String() string {
	str, _ := text.Marshal(0xec0d27e49a0f9f3a, s.Struct)
	return str
}

// Channel_Reader_close_Results_List is a list of Channel_Reader_close_Results.
type Channel_Reader_close_Results_List struct{ capnp.List }

// NewChannel_Reader_close_Results creates a new list of Channel_Reader_close_Results.
func NewChannel_Reader_close_Results_List(s *capnp.Segment, sz int32) (Channel_Reader_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Reader_close_Results_List{l}, err
}

func (s Channel_Reader_close_Results_List) At(i int) Channel_Reader_close_Results {
	return Channel_Reader_close_Results{s.List.Struct(i)}
}

func (s Channel_Reader_close_Results_List) Set(i int, v Channel_Reader_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Reader_close_Results_List) String() string {
	str, _ := text.MarshalList(0xec0d27e49a0f9f3a, s.List)
	return str
}

// Channel_Reader_close_Results_Future is a wrapper for a Channel_Reader_close_Results promised by a client call.
type Channel_Reader_close_Results_Future struct{ *capnp.Future }

func (p Channel_Reader_close_Results_Future) Struct() (Channel_Reader_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Reader_close_Results{s}, err
}

type Channel_Writer struct{ Client *capnp.Client }

// Channel_Writer_TypeID is the unique identifier for the type Channel_Writer.
const Channel_Writer_TypeID = 0x9b5844944dc0f458

func (c Channel_Writer) Write(ctx context.Context, params func(Channel_Msg) error) (Channel_Writer_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Msg{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Writer_write_Results_Future{Future: ans.Future()}, release
}
func (c Channel_Writer) Close(ctx context.Context, params func(Channel_Writer_close_Params) error) (Channel_Writer_close_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "close",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Channel_Writer_close_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Channel_Writer_close_Results_Future{Future: ans.Future()}, release
}

func (c Channel_Writer) AddRef() Channel_Writer {
	return Channel_Writer{
		Client: c.Client.AddRef(),
	}
}

func (c Channel_Writer) Release() {
	c.Client.Release()
}

// A Channel_Writer_Server is a Channel_Writer with a local implementation.
type Channel_Writer_Server interface {
	Write(context.Context, Channel_Writer_write) error

	Close(context.Context, Channel_Writer_close) error
}

// Channel_Writer_NewServer creates a new Server from an implementation of Channel_Writer_Server.
func Channel_Writer_NewServer(s Channel_Writer_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Channel_Writer_Methods(nil, s), s, c, policy)
}

// Channel_Writer_ServerToClient creates a new Client from an implementation of Channel_Writer_Server.
// The caller is responsible for calling Release on the returned Client.
func Channel_Writer_ServerToClient(s Channel_Writer_Server, policy *server.Policy) Channel_Writer {
	return Channel_Writer{Client: capnp.NewClient(Channel_Writer_NewServer(s, policy))}
}

// Channel_Writer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Channel_Writer_Methods(methods []server.Method, s Channel_Writer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      0,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, Channel_Writer_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b5844944dc0f458,
			MethodID:      1,
			InterfaceName: "common.capnp:Channel.Writer",
			MethodName:    "close",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Close(ctx, Channel_Writer_close{call})
		},
	})

	return methods
}

// Channel_Writer_write holds the state for a server call to Channel_Writer.write.
// See server.Call for documentation.
type Channel_Writer_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_write) Args() Channel_Msg {
	return Channel_Msg{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Writer_write) AllocResults() (Channel_Writer_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{Struct: r}, err
}

// Channel_Writer_close holds the state for a server call to Channel_Writer.close.
// See server.Call for documentation.
type Channel_Writer_close struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Channel_Writer_close) Args() Channel_Writer_close_Params {
	return Channel_Writer_close_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Channel_Writer_close) AllocResults() (Channel_Writer_close_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{Struct: r}, err
}

type Channel_Writer_write_Results struct{ capnp.Struct }

// Channel_Writer_write_Results_TypeID is the unique identifier for the type Channel_Writer_write_Results.
const Channel_Writer_write_Results_TypeID = 0x98be830bb53c6eb9

func NewChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{st}, err
}

func NewRootChannel_Writer_write_Results(s *capnp.Segment) (Channel_Writer_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_write_Results{st}, err
}

func ReadRootChannel_Writer_write_Results(msg *capnp.Message) (Channel_Writer_write_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_write_Results{root.Struct()}, err
}

func (s Channel_Writer_write_Results) String() string {
	str, _ := text.Marshal(0x98be830bb53c6eb9, s.Struct)
	return str
}

// Channel_Writer_write_Results_List is a list of Channel_Writer_write_Results.
type Channel_Writer_write_Results_List struct{ capnp.List }

// NewChannel_Writer_write_Results creates a new list of Channel_Writer_write_Results.
func NewChannel_Writer_write_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_write_Results_List{l}, err
}

func (s Channel_Writer_write_Results_List) At(i int) Channel_Writer_write_Results {
	return Channel_Writer_write_Results{s.List.Struct(i)}
}

func (s Channel_Writer_write_Results_List) Set(i int, v Channel_Writer_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_write_Results_List) String() string {
	str, _ := text.MarshalList(0x98be830bb53c6eb9, s.List)
	return str
}

// Channel_Writer_write_Results_Future is a wrapper for a Channel_Writer_write_Results promised by a client call.
type Channel_Writer_write_Results_Future struct{ *capnp.Future }

func (p Channel_Writer_write_Results_Future) Struct() (Channel_Writer_write_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_write_Results{s}, err
}

type Channel_Writer_close_Params struct{ capnp.Struct }

// Channel_Writer_close_Params_TypeID is the unique identifier for the type Channel_Writer_close_Params.
const Channel_Writer_close_Params_TypeID = 0xb86feee7ac7bebec

func NewChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params{st}, err
}

func NewRootChannel_Writer_close_Params(s *capnp.Segment) (Channel_Writer_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Params{st}, err
}

func ReadRootChannel_Writer_close_Params(msg *capnp.Message) (Channel_Writer_close_Params, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Params{root.Struct()}, err
}

func (s Channel_Writer_close_Params) String() string {
	str, _ := text.Marshal(0xb86feee7ac7bebec, s.Struct)
	return str
}

// Channel_Writer_close_Params_List is a list of Channel_Writer_close_Params.
type Channel_Writer_close_Params_List struct{ capnp.List }

// NewChannel_Writer_close_Params creates a new list of Channel_Writer_close_Params.
func NewChannel_Writer_close_Params_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_close_Params_List{l}, err
}

func (s Channel_Writer_close_Params_List) At(i int) Channel_Writer_close_Params {
	return Channel_Writer_close_Params{s.List.Struct(i)}
}

func (s Channel_Writer_close_Params_List) Set(i int, v Channel_Writer_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_close_Params_List) String() string {
	str, _ := text.MarshalList(0xb86feee7ac7bebec, s.List)
	return str
}

// Channel_Writer_close_Params_Future is a wrapper for a Channel_Writer_close_Params promised by a client call.
type Channel_Writer_close_Params_Future struct{ *capnp.Future }

func (p Channel_Writer_close_Params_Future) Struct() (Channel_Writer_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_close_Params{s}, err
}

type Channel_Writer_close_Results struct{ capnp.Struct }

// Channel_Writer_close_Results_TypeID is the unique identifier for the type Channel_Writer_close_Results.
const Channel_Writer_close_Results_TypeID = 0x86215e947f0afb85

func NewChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{st}, err
}

func NewRootChannel_Writer_close_Results(s *capnp.Segment) (Channel_Writer_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_Writer_close_Results{st}, err
}

func ReadRootChannel_Writer_close_Results(msg *capnp.Message) (Channel_Writer_close_Results, error) {
	root, err := msg.Root()
	return Channel_Writer_close_Results{root.Struct()}, err
}

func (s Channel_Writer_close_Results) String() string {
	str, _ := text.Marshal(0x86215e947f0afb85, s.Struct)
	return str
}

// Channel_Writer_close_Results_List is a list of Channel_Writer_close_Results.
type Channel_Writer_close_Results_List struct{ capnp.List }

// NewChannel_Writer_close_Results creates a new list of Channel_Writer_close_Results.
func NewChannel_Writer_close_Results_List(s *capnp.Segment, sz int32) (Channel_Writer_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_Writer_close_Results_List{l}, err
}

func (s Channel_Writer_close_Results_List) At(i int) Channel_Writer_close_Results {
	return Channel_Writer_close_Results{s.List.Struct(i)}
}

func (s Channel_Writer_close_Results_List) Set(i int, v Channel_Writer_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_Writer_close_Results_List) String() string {
	str, _ := text.MarshalList(0x86215e947f0afb85, s.List)
	return str
}

// Channel_Writer_close_Results_Future is a wrapper for a Channel_Writer_close_Results promised by a client call.
type Channel_Writer_close_Results_Future struct{ *capnp.Future }

func (p Channel_Writer_close_Results_Future) Struct() (Channel_Writer_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_Writer_close_Results{s}, err
}

type Channel_setBufferSize_Params struct{ capnp.Struct }

// Channel_setBufferSize_Params_TypeID is the unique identifier for the type Channel_setBufferSize_Params.
const Channel_setBufferSize_Params_TypeID = 0xee378f318f32b853

func NewChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params{st}, err
}

func NewRootChannel_setBufferSize_Params(s *capnp.Segment) (Channel_setBufferSize_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setBufferSize_Params{st}, err
}

func ReadRootChannel_setBufferSize_Params(msg *capnp.Message) (Channel_setBufferSize_Params, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Params{root.Struct()}, err
}

func (s Channel_setBufferSize_Params) String() string {
	str, _ := text.Marshal(0xee378f318f32b853, s.Struct)
	return str
}

func (s Channel_setBufferSize_Params) Size() uint64 {
	return s.Struct.Uint64(0) ^ 1
}

func (s Channel_setBufferSize_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v^1)
}

// Channel_setBufferSize_Params_List is a list of Channel_setBufferSize_Params.
type Channel_setBufferSize_Params_List struct{ capnp.List }

// NewChannel_setBufferSize_Params creates a new list of Channel_setBufferSize_Params.
func NewChannel_setBufferSize_Params_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_setBufferSize_Params_List{l}, err
}

func (s Channel_setBufferSize_Params_List) At(i int) Channel_setBufferSize_Params {
	return Channel_setBufferSize_Params{s.List.Struct(i)}
}

func (s Channel_setBufferSize_Params_List) Set(i int, v Channel_setBufferSize_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setBufferSize_Params_List) String() string {
	str, _ := text.MarshalList(0xee378f318f32b853, s.List)
	return str
}

// Channel_setBufferSize_Params_Future is a wrapper for a Channel_setBufferSize_Params promised by a client call.
type Channel_setBufferSize_Params_Future struct{ *capnp.Future }

func (p Channel_setBufferSize_Params_Future) Struct() (Channel_setBufferSize_Params, error) {
	s, err := p.Future.Struct()
	return Channel_setBufferSize_Params{s}, err
}

type Channel_setBufferSize_Results struct{ capnp.Struct }

// Channel_setBufferSize_Results_TypeID is the unique identifier for the type Channel_setBufferSize_Results.
const Channel_setBufferSize_Results_TypeID = 0xabd31dc62bd9a48b

func NewChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{st}, err
}

func NewRootChannel_setBufferSize_Results(s *capnp.Segment) (Channel_setBufferSize_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setBufferSize_Results{st}, err
}

func ReadRootChannel_setBufferSize_Results(msg *capnp.Message) (Channel_setBufferSize_Results, error) {
	root, err := msg.Root()
	return Channel_setBufferSize_Results{root.Struct()}, err
}

func (s Channel_setBufferSize_Results) String() string {
	str, _ := text.Marshal(0xabd31dc62bd9a48b, s.Struct)
	return str
}

// Channel_setBufferSize_Results_List is a list of Channel_setBufferSize_Results.
type Channel_setBufferSize_Results_List struct{ capnp.List }

// NewChannel_setBufferSize_Results creates a new list of Channel_setBufferSize_Results.
func NewChannel_setBufferSize_Results_List(s *capnp.Segment, sz int32) (Channel_setBufferSize_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_setBufferSize_Results_List{l}, err
}

func (s Channel_setBufferSize_Results_List) At(i int) Channel_setBufferSize_Results {
	return Channel_setBufferSize_Results{s.List.Struct(i)}
}

func (s Channel_setBufferSize_Results_List) Set(i int, v Channel_setBufferSize_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setBufferSize_Results_List) String() string {
	str, _ := text.MarshalList(0xabd31dc62bd9a48b, s.List)
	return str
}

// Channel_setBufferSize_Results_Future is a wrapper for a Channel_setBufferSize_Results promised by a client call.
type Channel_setBufferSize_Results_Future struct{ *capnp.Future }

func (p Channel_setBufferSize_Results_Future) Struct() (Channel_setBufferSize_Results, error) {
	s, err := p.Future.Struct()
	return Channel_setBufferSize_Results{s}, err
}

type Channel_reader_Params struct{ capnp.Struct }

// Channel_reader_Params_TypeID is the unique identifier for the type Channel_reader_Params.
const Channel_reader_Params_TypeID = 0xb6563114436deea9

func NewChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params{st}, err
}

func NewRootChannel_reader_Params(s *capnp.Segment) (Channel_reader_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_reader_Params{st}, err
}

func ReadRootChannel_reader_Params(msg *capnp.Message) (Channel_reader_Params, error) {
	root, err := msg.Root()
	return Channel_reader_Params{root.Struct()}, err
}

func (s Channel_reader_Params) String() string {
	str, _ := text.Marshal(0xb6563114436deea9, s.Struct)
	return str
}

// Channel_reader_Params_List is a list of Channel_reader_Params.
type Channel_reader_Params_List struct{ capnp.List }

// NewChannel_reader_Params creates a new list of Channel_reader_Params.
func NewChannel_reader_Params_List(s *capnp.Segment, sz int32) (Channel_reader_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_reader_Params_List{l}, err
}

func (s Channel_reader_Params_List) At(i int) Channel_reader_Params {
	return Channel_reader_Params{s.List.Struct(i)}
}

func (s Channel_reader_Params_List) Set(i int, v Channel_reader_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_reader_Params_List) String() string {
	str, _ := text.MarshalList(0xb6563114436deea9, s.List)
	return str
}

// Channel_reader_Params_Future is a wrapper for a Channel_reader_Params promised by a client call.
type Channel_reader_Params_Future struct{ *capnp.Future }

func (p Channel_reader_Params_Future) Struct() (Channel_reader_Params, error) {
	s, err := p.Future.Struct()
	return Channel_reader_Params{s}, err
}

type Channel_reader_Results struct{ capnp.Struct }

// Channel_reader_Results_TypeID is the unique identifier for the type Channel_reader_Results.
const Channel_reader_Results_TypeID = 0x89aeecad59dc62ee

func NewChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{st}, err
}

func NewRootChannel_reader_Results(s *capnp.Segment) (Channel_reader_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_reader_Results{st}, err
}

func ReadRootChannel_reader_Results(msg *capnp.Message) (Channel_reader_Results, error) {
	root, err := msg.Root()
	return Channel_reader_Results{root.Struct()}, err
}

func (s Channel_reader_Results) String() string {
	str, _ := text.Marshal(0x89aeecad59dc62ee, s.Struct)
	return str
}

func (s Channel_reader_Results) R() Channel_Reader {
	p, _ := s.Struct.Ptr(0)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s Channel_reader_Results) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_reader_Results) SetR(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Channel_reader_Results_List is a list of Channel_reader_Results.
type Channel_reader_Results_List struct{ capnp.List }

// NewChannel_reader_Results creates a new list of Channel_reader_Results.
func NewChannel_reader_Results_List(s *capnp.Segment, sz int32) (Channel_reader_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Channel_reader_Results_List{l}, err
}

func (s Channel_reader_Results_List) At(i int) Channel_reader_Results {
	return Channel_reader_Results{s.List.Struct(i)}
}

func (s Channel_reader_Results_List) Set(i int, v Channel_reader_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_reader_Results_List) String() string {
	str, _ := text.MarshalList(0x89aeecad59dc62ee, s.List)
	return str
}

// Channel_reader_Results_Future is a wrapper for a Channel_reader_Results promised by a client call.
type Channel_reader_Results_Future struct{ *capnp.Future }

func (p Channel_reader_Results_Future) Struct() (Channel_reader_Results, error) {
	s, err := p.Future.Struct()
	return Channel_reader_Results{s}, err
}

func (p Channel_reader_Results_Future) R() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(0, nil).Client()}
}

type Channel_writer_Params struct{ capnp.Struct }

// Channel_writer_Params_TypeID is the unique identifier for the type Channel_writer_Params.
const Channel_writer_Params_TypeID = 0x9882f67fa6ace6a1

func NewChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params{st}, err
}

func NewRootChannel_writer_Params(s *capnp.Segment) (Channel_writer_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_writer_Params{st}, err
}

func ReadRootChannel_writer_Params(msg *capnp.Message) (Channel_writer_Params, error) {
	root, err := msg.Root()
	return Channel_writer_Params{root.Struct()}, err
}

func (s Channel_writer_Params) String() string {
	str, _ := text.Marshal(0x9882f67fa6ace6a1, s.Struct)
	return str
}

// Channel_writer_Params_List is a list of Channel_writer_Params.
type Channel_writer_Params_List struct{ capnp.List }

// NewChannel_writer_Params creates a new list of Channel_writer_Params.
func NewChannel_writer_Params_List(s *capnp.Segment, sz int32) (Channel_writer_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_writer_Params_List{l}, err
}

func (s Channel_writer_Params_List) At(i int) Channel_writer_Params {
	return Channel_writer_Params{s.List.Struct(i)}
}

func (s Channel_writer_Params_List) Set(i int, v Channel_writer_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_writer_Params_List) String() string {
	str, _ := text.MarshalList(0x9882f67fa6ace6a1, s.List)
	return str
}

// Channel_writer_Params_Future is a wrapper for a Channel_writer_Params promised by a client call.
type Channel_writer_Params_Future struct{ *capnp.Future }

func (p Channel_writer_Params_Future) Struct() (Channel_writer_Params, error) {
	s, err := p.Future.Struct()
	return Channel_writer_Params{s}, err
}

type Channel_writer_Results struct{ capnp.Struct }

// Channel_writer_Results_TypeID is the unique identifier for the type Channel_writer_Results.
const Channel_writer_Results_TypeID = 0xd7e3695f7166e987

func NewChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{st}, err
}

func NewRootChannel_writer_Results(s *capnp.Segment) (Channel_writer_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Channel_writer_Results{st}, err
}

func ReadRootChannel_writer_Results(msg *capnp.Message) (Channel_writer_Results, error) {
	root, err := msg.Root()
	return Channel_writer_Results{root.Struct()}, err
}

func (s Channel_writer_Results) String() string {
	str, _ := text.Marshal(0xd7e3695f7166e987, s.Struct)
	return str
}

func (s Channel_writer_Results) W() Channel_Writer {
	p, _ := s.Struct.Ptr(0)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s Channel_writer_Results) HasW() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_writer_Results) SetW(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Channel_writer_Results_List is a list of Channel_writer_Results.
type Channel_writer_Results_List struct{ capnp.List }

// NewChannel_writer_Results creates a new list of Channel_writer_Results.
func NewChannel_writer_Results_List(s *capnp.Segment, sz int32) (Channel_writer_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Channel_writer_Results_List{l}, err
}

func (s Channel_writer_Results_List) At(i int) Channel_writer_Results {
	return Channel_writer_Results{s.List.Struct(i)}
}

func (s Channel_writer_Results_List) Set(i int, v Channel_writer_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_writer_Results_List) String() string {
	str, _ := text.MarshalList(0xd7e3695f7166e987, s.List)
	return str
}

// Channel_writer_Results_Future is a wrapper for a Channel_writer_Results promised by a client call.
type Channel_writer_Results_Future struct{ *capnp.Future }

func (p Channel_writer_Results_Future) Struct() (Channel_writer_Results, error) {
	s, err := p.Future.Struct()
	return Channel_writer_Results{s}, err
}

func (p Channel_writer_Results_Future) W() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(0, nil).Client()}
}

type Channel_endpoints_Params struct{ capnp.Struct }

// Channel_endpoints_Params_TypeID is the unique identifier for the type Channel_endpoints_Params.
const Channel_endpoints_Params_TypeID = 0xdb1f001689bbac5d

func NewChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params{st}, err
}

func NewRootChannel_endpoints_Params(s *capnp.Segment) (Channel_endpoints_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_endpoints_Params{st}, err
}

func ReadRootChannel_endpoints_Params(msg *capnp.Message) (Channel_endpoints_Params, error) {
	root, err := msg.Root()
	return Channel_endpoints_Params{root.Struct()}, err
}

func (s Channel_endpoints_Params) String() string {
	str, _ := text.Marshal(0xdb1f001689bbac5d, s.Struct)
	return str
}

// Channel_endpoints_Params_List is a list of Channel_endpoints_Params.
type Channel_endpoints_Params_List struct{ capnp.List }

// NewChannel_endpoints_Params creates a new list of Channel_endpoints_Params.
func NewChannel_endpoints_Params_List(s *capnp.Segment, sz int32) (Channel_endpoints_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_endpoints_Params_List{l}, err
}

func (s Channel_endpoints_Params_List) At(i int) Channel_endpoints_Params {
	return Channel_endpoints_Params{s.List.Struct(i)}
}

func (s Channel_endpoints_Params_List) Set(i int, v Channel_endpoints_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_endpoints_Params_List) String() string {
	str, _ := text.MarshalList(0xdb1f001689bbac5d, s.List)
	return str
}

// Channel_endpoints_Params_Future is a wrapper for a Channel_endpoints_Params promised by a client call.
type Channel_endpoints_Params_Future struct{ *capnp.Future }

func (p Channel_endpoints_Params_Future) Struct() (Channel_endpoints_Params, error) {
	s, err := p.Future.Struct()
	return Channel_endpoints_Params{s}, err
}

type Channel_endpoints_Results struct{ capnp.Struct }

// Channel_endpoints_Results_TypeID is the unique identifier for the type Channel_endpoints_Results.
const Channel_endpoints_Results_TypeID = 0xc8a1bc4350302330

func NewChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{st}, err
}

func NewRootChannel_endpoints_Results(s *capnp.Segment) (Channel_endpoints_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Channel_endpoints_Results{st}, err
}

func ReadRootChannel_endpoints_Results(msg *capnp.Message) (Channel_endpoints_Results, error) {
	root, err := msg.Root()
	return Channel_endpoints_Results{root.Struct()}, err
}

func (s Channel_endpoints_Results) String() string {
	str, _ := text.Marshal(0xc8a1bc4350302330, s.Struct)
	return str
}

func (s Channel_endpoints_Results) R() Channel_Reader {
	p, _ := s.Struct.Ptr(0)
	return Channel_Reader{Client: p.Interface().Client()}
}

func (s Channel_endpoints_Results) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Channel_endpoints_Results) SetR(v Channel_Reader) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Channel_endpoints_Results) W() Channel_Writer {
	p, _ := s.Struct.Ptr(1)
	return Channel_Writer{Client: p.Interface().Client()}
}

func (s Channel_endpoints_Results) HasW() bool {
	return s.Struct.HasPtr(1)
}

func (s Channel_endpoints_Results) SetW(v Channel_Writer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Channel_endpoints_Results_List is a list of Channel_endpoints_Results.
type Channel_endpoints_Results_List struct{ capnp.List }

// NewChannel_endpoints_Results creates a new list of Channel_endpoints_Results.
func NewChannel_endpoints_Results_List(s *capnp.Segment, sz int32) (Channel_endpoints_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Channel_endpoints_Results_List{l}, err
}

func (s Channel_endpoints_Results_List) At(i int) Channel_endpoints_Results {
	return Channel_endpoints_Results{s.List.Struct(i)}
}

func (s Channel_endpoints_Results_List) Set(i int, v Channel_endpoints_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_endpoints_Results_List) String() string {
	str, _ := text.MarshalList(0xc8a1bc4350302330, s.List)
	return str
}

// Channel_endpoints_Results_Future is a wrapper for a Channel_endpoints_Results promised by a client call.
type Channel_endpoints_Results_Future struct{ *capnp.Future }

func (p Channel_endpoints_Results_Future) Struct() (Channel_endpoints_Results, error) {
	s, err := p.Future.Struct()
	return Channel_endpoints_Results{s}, err
}

func (p Channel_endpoints_Results_Future) R() Channel_Reader {
	return Channel_Reader{Client: p.Future.Field(0, nil).Client()}
}

func (p Channel_endpoints_Results_Future) W() Channel_Writer {
	return Channel_Writer{Client: p.Future.Field(1, nil).Client()}
}

type Channel_setAutoCloseSemantics_Params struct{ capnp.Struct }

// Channel_setAutoCloseSemantics_Params_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Params.
const Channel_setAutoCloseSemantics_Params_TypeID = 0xd8727b5440681ed4

func NewChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params{st}, err
}

func NewRootChannel_setAutoCloseSemantics_Params(s *capnp.Segment) (Channel_setAutoCloseSemantics_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Params{st}, err
}

func ReadRootChannel_setAutoCloseSemantics_Params(msg *capnp.Message) (Channel_setAutoCloseSemantics_Params, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Params{root.Struct()}, err
}

func (s Channel_setAutoCloseSemantics_Params) String() string {
	str, _ := text.Marshal(0xd8727b5440681ed4, s.Struct)
	return str
}

func (s Channel_setAutoCloseSemantics_Params) Cs() Channel_CloseSemantics {
	return Channel_CloseSemantics(s.Struct.Uint16(0))
}

func (s Channel_setAutoCloseSemantics_Params) SetCs(v Channel_CloseSemantics) {
	s.Struct.SetUint16(0, uint16(v))
}

// Channel_setAutoCloseSemantics_Params_List is a list of Channel_setAutoCloseSemantics_Params.
type Channel_setAutoCloseSemantics_Params_List struct{ capnp.List }

// NewChannel_setAutoCloseSemantics_Params creates a new list of Channel_setAutoCloseSemantics_Params.
func NewChannel_setAutoCloseSemantics_Params_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_setAutoCloseSemantics_Params_List{l}, err
}

func (s Channel_setAutoCloseSemantics_Params_List) At(i int) Channel_setAutoCloseSemantics_Params {
	return Channel_setAutoCloseSemantics_Params{s.List.Struct(i)}
}

func (s Channel_setAutoCloseSemantics_Params_List) Set(i int, v Channel_setAutoCloseSemantics_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setAutoCloseSemantics_Params_List) String() string {
	str, _ := text.MarshalList(0xd8727b5440681ed4, s.List)
	return str
}

// Channel_setAutoCloseSemantics_Params_Future is a wrapper for a Channel_setAutoCloseSemantics_Params promised by a client call.
type Channel_setAutoCloseSemantics_Params_Future struct{ *capnp.Future }

func (p Channel_setAutoCloseSemantics_Params_Future) Struct() (Channel_setAutoCloseSemantics_Params, error) {
	s, err := p.Future.Struct()
	return Channel_setAutoCloseSemantics_Params{s}, err
}

type Channel_setAutoCloseSemantics_Results struct{ capnp.Struct }

// Channel_setAutoCloseSemantics_Results_TypeID is the unique identifier for the type Channel_setAutoCloseSemantics_Results.
const Channel_setAutoCloseSemantics_Results_TypeID = 0xe8ba8300eb17a23c

func NewChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{st}, err
}

func NewRootChannel_setAutoCloseSemantics_Results(s *capnp.Segment) (Channel_setAutoCloseSemantics_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_setAutoCloseSemantics_Results{st}, err
}

func ReadRootChannel_setAutoCloseSemantics_Results(msg *capnp.Message) (Channel_setAutoCloseSemantics_Results, error) {
	root, err := msg.Root()
	return Channel_setAutoCloseSemantics_Results{root.Struct()}, err
}

func (s Channel_setAutoCloseSemantics_Results) String() string {
	str, _ := text.Marshal(0xe8ba8300eb17a23c, s.Struct)
	return str
}

// Channel_setAutoCloseSemantics_Results_List is a list of Channel_setAutoCloseSemantics_Results.
type Channel_setAutoCloseSemantics_Results_List struct{ capnp.List }

// NewChannel_setAutoCloseSemantics_Results creates a new list of Channel_setAutoCloseSemantics_Results.
func NewChannel_setAutoCloseSemantics_Results_List(s *capnp.Segment, sz int32) (Channel_setAutoCloseSemantics_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_setAutoCloseSemantics_Results_List{l}, err
}

func (s Channel_setAutoCloseSemantics_Results_List) At(i int) Channel_setAutoCloseSemantics_Results {
	return Channel_setAutoCloseSemantics_Results{s.List.Struct(i)}
}

func (s Channel_setAutoCloseSemantics_Results_List) Set(i int, v Channel_setAutoCloseSemantics_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_setAutoCloseSemantics_Results_List) String() string {
	str, _ := text.MarshalList(0xe8ba8300eb17a23c, s.List)
	return str
}

// Channel_setAutoCloseSemantics_Results_Future is a wrapper for a Channel_setAutoCloseSemantics_Results promised by a client call.
type Channel_setAutoCloseSemantics_Results_Future struct{ *capnp.Future }

func (p Channel_setAutoCloseSemantics_Results_Future) Struct() (Channel_setAutoCloseSemantics_Results, error) {
	s, err := p.Future.Struct()
	return Channel_setAutoCloseSemantics_Results{s}, err
}

type Channel_close_Params struct{ capnp.Struct }

// Channel_close_Params_TypeID is the unique identifier for the type Channel_close_Params.
const Channel_close_Params_TypeID = 0xf8224774a4d4d6f5

func NewChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params{st}, err
}

func NewRootChannel_close_Params(s *capnp.Segment) (Channel_close_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Channel_close_Params{st}, err
}

func ReadRootChannel_close_Params(msg *capnp.Message) (Channel_close_Params, error) {
	root, err := msg.Root()
	return Channel_close_Params{root.Struct()}, err
}

func (s Channel_close_Params) String() string {
	str, _ := text.Marshal(0xf8224774a4d4d6f5, s.Struct)
	return str
}

func (s Channel_close_Params) WaitForEmptyBuffer() bool {
	return !s.Struct.Bit(0)
}

func (s Channel_close_Params) SetWaitForEmptyBuffer(v bool) {
	s.Struct.SetBit(0, !v)
}

// Channel_close_Params_List is a list of Channel_close_Params.
type Channel_close_Params_List struct{ capnp.List }

// NewChannel_close_Params creates a new list of Channel_close_Params.
func NewChannel_close_Params_List(s *capnp.Segment, sz int32) (Channel_close_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Channel_close_Params_List{l}, err
}

func (s Channel_close_Params_List) At(i int) Channel_close_Params {
	return Channel_close_Params{s.List.Struct(i)}
}

func (s Channel_close_Params_List) Set(i int, v Channel_close_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_close_Params_List) String() string {
	str, _ := text.MarshalList(0xf8224774a4d4d6f5, s.List)
	return str
}

// Channel_close_Params_Future is a wrapper for a Channel_close_Params promised by a client call.
type Channel_close_Params_Future struct{ *capnp.Future }

func (p Channel_close_Params_Future) Struct() (Channel_close_Params, error) {
	s, err := p.Future.Struct()
	return Channel_close_Params{s}, err
}

type Channel_close_Results struct{ capnp.Struct }

// Channel_close_Results_TypeID is the unique identifier for the type Channel_close_Results.
const Channel_close_Results_TypeID = 0xf20dfadcec8a0e13

func NewChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{st}, err
}

func NewRootChannel_close_Results(s *capnp.Segment) (Channel_close_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Channel_close_Results{st}, err
}

func ReadRootChannel_close_Results(msg *capnp.Message) (Channel_close_Results, error) {
	root, err := msg.Root()
	return Channel_close_Results{root.Struct()}, err
}

func (s Channel_close_Results) String() string {
	str, _ := text.Marshal(0xf20dfadcec8a0e13, s.Struct)
	return str
}

// Channel_close_Results_List is a list of Channel_close_Results.
type Channel_close_Results_List struct{ capnp.List }

// NewChannel_close_Results creates a new list of Channel_close_Results.
func NewChannel_close_Results_List(s *capnp.Segment, sz int32) (Channel_close_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Channel_close_Results_List{l}, err
}

func (s Channel_close_Results_List) At(i int) Channel_close_Results {
	return Channel_close_Results{s.List.Struct(i)}
}

func (s Channel_close_Results_List) Set(i int, v Channel_close_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Channel_close_Results_List) String() string {
	str, _ := text.MarshalList(0xf20dfadcec8a0e13, s.List)
	return str
}

// Channel_close_Results_Future is a wrapper for a Channel_close_Results promised by a client call.
type Channel_close_Results_Future struct{ *capnp.Future }

func (p Channel_close_Results_Future) Struct() (Channel_close_Results, error) {
	s, err := p.Future.Struct()
	return Channel_close_Results{s}, err
}

const schema_99f1c9a775a88ac9 = "x\xda\xbcY\x7f\x94S\xd5\x9d\xff~\xdfK|`\x19" +
	"^n\xeed\xd2\xccR\xb2\xce\xe2Y\xa1223\xcb" +
	"\xba\xce\xc1\xcdd\xc6a\xc02\xdb\xc9\x0cE\xf1\x94\xdd" +
	"f\x92\x87D2I&y\x11\xc7_\x1c\xa1\x94\xc5\x1f" +
	"\xa7\x0b\xcaQP\xaa\xc3\xdaEX\xa9Bk\x8f\xd0\xc5" +
	"\x8a=x\x04\x9c*+b\xa1XW\xa8\xae\xac@\x0b" +
	"\xa7\xba\x85\x16\xde\x9e{_n\xde\xcbK2B\xcf\xd9" +
	"\xce_\x99\xf7\xee\xfd\xde\xef\x8f\xcf\xfd|\x7f\xbci\xb9" +
	"\xb1mR\x93\xbbk\"@\xdf\xb7\xd0}\x85Q\xe3\xbd" +
	"pp\xcc\xe37-\x03\xe2G\x00\x97\xe2\xc1\x96\xb1j" +
	"3\x82\xcb\xe8\xda\xbf\x7f\xd5\x0d\xd3\x7f\xb4\x1cH\x1d\x7f" +
	"\x03\xd0rf\xbc\x97\xbdY\xf1\x87+\x97>\xf6\x8fW" +
	"}\x07\xc8\x04\xb1\xe7\xf0\xf8^\xf6f\xfb\xc77,\xba" +
	"\xb6}\xf1J\x88\xf8\x10\x8dW\x96Ok\x0d\x9f{\xf5" +
	"\xb7\xd0\x89\x8a\xe4A\xbag\xfc>z`\xbc\x02@G" +
	"\xc6/\x014N\xf7\x1f\x9d\xbf\xf5\xe4\x0fV\x01\xf1!" +
	"\x80\x1b\x99\xa0\xc9j\x03\x02\xd2&5\x04h\xe0\xee{" +
	"\xff\xee\xfd=\x9f\xaf\x02R#\x1b{\x1f|.\xbfi" +
	"\xef\x99u\x00H5\xf5\x18\x1dT\x99\xa4\x01\xb5\x8b\xae" +
	"U\xfd\x00\xc6=k\x8e\xdf\xf7\xcb\xf9\xc3\x0f\x03\xf9K" +
	"\xa1\xef\x0au\x19\xd3\xca\x7f\xe6\xa7\x91\x11\xd7\xe4\x7f)" +
	"\x133\xa8n\xa7C\\L^\xed\xa2\x1b\xd8/#\xd8" +
	"\xf1\xc8\x1b?R\xa2kl\xc6\xadPofb~\xf2" +
	"\xd6\xbe\xc5\x1f\xbf8\xfc\xa8\xed\x80A\xf56\xf6\xe6\xaa" +
	"\xed\x87\xea\xcf\x1eO\xad\x05\xe2\x93,\xab\x01<\xd8\xb2" +
	"@m@:\xc0\xcfH\xa8\xd7\x03\x1a\xc3\x1f?\xffo" +
	"K?_\xf6\x84i4\x97?\xa0\xd63)\x93oi" +
	"\xba\xf3\xb1{7>as\xf87T\xee\xf0\x1d\xa9\x19" +
	"/}i\xf9+O\xd8t\xbaQ\xe5\x0e\xbf\xf5w\xaf" +
	"v?v\xd3\xadO\x02\xf1\xc9\xa5'\xd3\xc9\xea1:" +
	"]U\xe8t5H\xe7\xab+\xe99n\xde{'k" +
	"~\xe8Y\xa4=Ua\xc3\x87\xea1zJU\xe8)" +
	"5H\x89g%\xdd\xe6a\x1b\xb6\xfdj\xf6\xc4\xb7\x86" +
	"\x1f\xdc\x00\xa4^h\xb5\xce\xc3\x01\xb2\xb23\xf5\xde\xcf" +
	"\x8e\x1d\xdcP\xe6\xd6\x07<\x1b\xe9*\xb6\x99\xae\xf0t" +
	"\xd1\xad\x1e\x16\x9d#x5\xd9\xe6\xfft\xb8\x18k\x00" +
	"\xba\xc1s\x1e\x90\x0e{X\xa8\x0f\xa7n}\xf8K\x9f" +
	"%\x9es\x08cz\xed\xf6l\xa1{\xb9\xb8=\x9e." +
	"\xea#\x0a\xf5\x11\xbf\xb1~\xcd\xc3\xc1k'\xee\xa8\xb4" +
	"\x81\x90\xf54@\xd8\x06\x1f\xe9\xa2\x1aQ\xa8FT\xe3" +
	"\xa1g\x0f\x7f\xf5\xf5\xaf\xbc\xf3\xef6\xc7\xcf'<|" +
	"\xc7\xbf\xf7?\x83\x89\x83'\xb6\x02\x09\x14q\xd8IZ" +
	"\x19\x0e\xbb\x09Sn\xcf\x96_\xdc\xfc\xe5\x7f\xce\xbf\x08" +
	"\xc4\x83\xc6?l\xda\xb6\xf3\xc9sO\xbf\x03n\x89\x03" +
	"\x90\xac\xa7y~\xd8 a\xa0~\xeb\xc1\x87\xde\xfav" +
	"t\xf16[\x14G\x08\x8f\xef\xbb\xb3\x9e\x9a\xbf\xff\xc0" +
	"\x0b\xdb\xcb\xfc\xf5\x12\xf9O\xba\x9b\x8b\xd8E\xba\xe8G" +
	"\xec\x971\xf8\xf7\x1f\xd5\xde\xfe\xec\x1f_2C\xce\xfd" +
	"\xd52Bz\x99N\x87\xb9N\x9bO\x0ft\xd46\xcd" +
	"\xfb\xb1\xcd\x9cs\xe69'?\xbd\xe7\xf9\xff>\x9d~" +
	"\xd9\x86\x96\x0f\x09GpK\x97\xff\xea\xae\xef\x1c\xdc\x01" +
	"\xa4\x06-\x0d\xdc\x92\xe2A:B\xd6\xd0w\xb9\x12\x07" +
	"\xc8\x12\x00\xda\xe9\xf5\x1bo\xee\xdaz\xef\xc0\xfc\x8b;" +
	"L\xc4\x9bJ\x84\xbd\xfd\xdc1^\xa6Dl\x93\xf2\x83" +
	"\xcd;\xa6\xee.3i\xc0\xbb\x85\xe6\xbd\xdc+\xde." +
	"\xba\xce\xcb \xd0\xf7\xd5\x89\xcf\xbc9\xe7\xfa\xdd6\xaa" +
	"Y\xe5mezMt\xb7\xbd?\xf3\xa7\xf8\x9aC/" +
	"\x16\x08:\xe8\xddI\x87\xb8\xa4\xbc7\x04@\xb7zU" +
	"c\xda_M\xeb\xe9\xf8\x8f\xe17\x0a`b\xfa\xb7|" +
	"\xdf\xcb\x03\xb6\xd5\xcb\x82\xf0Bh\xf2\x8f_>\xd5\xb7" +
	"\x17\x08\x15G5Q\x89\x1d\xd5n\\\xf9^\x83w\xc5" +
	"^\xe1\x1c\x80\x16\x1f\xe5\xcey\xfc\x993\xf7\xf5\xbd\xbe" +
	"w_\x05@!\xddI\xc7R\xa6\x83\x9b\xae\xa4#T" +
	"\xa1#T5\x8c\xf7\xd7\xd5\xff\xaa\xc6\xf5&\x90\xda\x82" +
	"(\xba\x9b\x9e\x07\x97qs\xd3\xf7~+\xb5\xdf\xff\xf3" +
	"2\xaf|\x9fn\xa7[\xb9\x9c\xcd\xb4\x8b\x1e`\xbf\x8c" +
	"\x06\xf7\x07\x7f\xb1\xf4\x7f=o\xdbIp\x07\x9d\xc2l" +
	"\xd9M\x99\x8f\x8bxs\x06\x0d\x80~H\x97\xd1\x8f\xa8" +
	"\x1f\x80\x9e\xa2\xcc\xeeo\xde\xe1\xder\xf3\xf6\x7f}\xc7" +
	"\x06\xbe\x05\xb5\x1c\x14\xef\x1c\x91/\xee\xbf\x7f\xffA\x87" +
	"\x14\x99I\xe9\xac=B#\xb5\xecWw\xed\x0b\x80\xc6" +
	"+\xe1\xd7B[\xd6,9T\x09&'j\x97\xd1S" +
	"|\xed\x89Z\x06\x93\x05>\xbf\xf1\xc2\xf9\xe3\xbf\x19\x9e" +
	"\xfa\xf4!\x1b1\xce\xf7\xdd\xcd)\xe2\xc4\xc2\xc1\x7fJ" +
	"\x1c\x7f\xcfn\\\xa7\x8f3|\xb7\x8f\x19wp\xe2\xa2" +
	"\xb6\xb9\xf7d\x7f\xc1\x13F!R\x0f\xf8\xd6\xb0\x05\xab" +
	"\xf9\x82\xda\xe7\x96>\xda\xfd\xc3\xde#6\xd0\xec\xf11" +
	"R\xfc`\xc1\xf3?YU\x17\xfc\xa5\x05\xff\xad>N" +
	"K\xc1\xc4\xda\xe9\xb3\xd4'\x8f\x9a;\xcc3\xd7\xfa\xea" +
	"\x99\xc8\x0dL\xe4ofl\xf4\x7f\xba|\xe7'\xd6\xc6" +
	"]\xbe\xf5l\xe3\x9b\xfd\xafm\xeb\xfdl\xff'\x10\x99" +
	"\x80h\xcc=\xb8\xef\xf6\x87\xc6&O\xc17PA\x19" +
	"\xc0\x14\x8f\xf4%\x1fsQ\xeb\xd3\xea\xfa_\xffu\xcd" +
	"I\xdb\x1d\xeb\xae\xe3\x8c\\\xdc\x17\xa9\xc1R0\x03\xd0" +
	"\x1b\xea\x8e\xd1\xce:\xf6+\\\xc7\xe2\xd5\xf7r\xf3w" +
	"\x9b\xbe{\xfdi\xbb\xf9+\xea\xf8-_]\xc7\xcc\xff" +
	"|\xde\x82i\xf7\xde8\xf7\xb4\x13J-\xdb\xea$\xa4" +
	"\xbb\xb8\xa8\x1du+i\x93\x9f\xdd\xb0\"\x9f\x97C\xf8" +
	"*\xff\x16:\xd9\xdf\xc5B\xe3_\x89tv@\xa1\xb3" +
	"\x03\xaa\xf1\xe8\xe1\x0fN<U\xf3\xc6\x99\x0a;n\x0c" +
	"\xecc\xcb\x18>\x02]tm\xc0O7\x04T\x83\x8e" +
	"\x7f\xf0\xe4\xd1\xf35gm\xb4\xb3:\xc0\x11\xf6\xd9\xa1" +
	"\x83\xcf\xea]\x0d\xbf\xb7\xdb2\x14\xf02[\x1e\x08\x84" +
	"\x00?\xb8\xee\xb9\xf1\x87\xb6\x1f\xfd\xbd\xe5\xb1\xcd\x81v" +
	"\xb6\xf1\xf5\xb7\x9f\xb9\xa7\xa9U>g\xbbG\xab\x03g" +
	"\xc1e\x90+\xafy\xf1\xc6\x87{\xff`\xf22\xdf\x92" +
	"\x0f\xf0\x18\x8f\x8cY\x1b\xdc\xf5\x90\xfb\x82\x1dW\x0b\x02" +
	"\x1cW\x1a;\xcb\x183|_\xfd\xb7\xa7+\x17L\x02" +
	"0\x99dE\x80\xa5\x9bU\xfc\xfd\xf9\xae\xeb\x96\x8e\xfc" +
	"L\xbb \xcc\x00h\xd9\x1c\xe0\x04q\xff\xc6\xabw>" +
	"~\xd1u\xb1\xc2uky$\xe0E\xba\x81\xfbd]" +
	"`\x09\xbco\xc4\xd2\x03\x03\xe9TcL\x8efR\x99" +
	"\xd6\x8ehfV:\x19\xd7\xb2\x8dY-\xa9Es\xda" +
	"\xa4\x9e`4\x1b\x1d\xc8\x95\xadK&\xfb\xa3\xb1\xc5\x8d" +
	"\xb1h29\xa9\x87-Ak\x8d\xcb\\\xb3(\x9aJ" +
	"i\xc9\xc6[\xb2\x09]\xcb6\xc6\x92\xe9\x9c6\xa9W" +
	"\xcb\xe5\x93\xbam\xadT\xb2\xb6;w;@\x0fbd" +
	"\x8c\xec\x1ag\x18.\x04 \x93\x9b\x01\"\x93d\x8cL" +
	"\x93\xb0\x06/\x1a\xb5,6d\xea\x14\x80\xc852F" +
	"\xfeF\xc2\xe0\x9d\xd1d^C\xaf\xbd`\x03@/\xa0" +
	"\x1aO\xa74\xb8\xc2\xa9}\xe1\xb4\xac\x16\x8dkY\xae" +
	"\x93\x92\xd4s\x11\x97\xec\x02\xe0g\xd6x\x01\"cd" +
	"\x8c\\#!f\x91XE\x07@\x1b\x12\x0cF\\\x92" +
	"\xed0\xa6\x11\x12\x96MJ\xac\x0a\xa7\x86\xe61\xcdf" +
	"\xa5\x93J\\\xcb2\xbb\\\xb2\x1b\xa0H\xe1(r$" +
	"!\xcd \x11\xb7bZ\xd2\x86\x11\x17\xa2\xa1\xed\xff\xdb" +
	"\xa3\xcf\x1c\xd9\xb4\x1b\x00\x8a\x82\x15.xv\\K\xe9" +
	"\x89\x85\x89h\x7fRs\xc4\xcbtp\x0e\xc4\x06\x11\xae" +
	" \x8f\x97\xa5\x82\xa8\x8dQd{B\xa6p\x15T\x16" +
	"\xd26\xecA\xac\x12\xcf^\xee\xb5B<y\xe8s6" +
	"\x05]\xd5\x14\x8cE3|\xb5\\\x0e\xa6\x82\xe0\x0e&" +
	"\xb1O\x1b\x88\xa6t%\x11\xcbq\x18\xa0\x04@H\x03" +
	"\x00\"\x19[\x0f\xa0,\xec\xcf\xc8\xa9t\x15\x09K8" +
	"\xd4\xaa\x1c\xd3\xa7\xa73L\x9f\xc6\x9c\x9e\xce\\\x1af" +
	"\xb9\xbc/\xc2\xec-\xd9\x84\xa2\x17\xa2\x8b\x92\xf1\xf3\xd5" +
	"g.\x0em\x8a\x9f\x05\x06\x91p-\xe28\x00\x82\xb7" +
	"\x19l9\x13\x0b\xb2\x96\xe5\xe0bQ\x10\xdd\x06\x8a\xfa" +
	"\x9845\x03\x84\xaf\xc5\xf0\x0c$\xdd\x0ab\xb1\x14B" +
	"\xd1\xb2\x900[1\x03\xc3s\x90,P\x82\\\xc5\x8a" +
	"\x80\xac\xf8\xb0\x0d\x83<p\x97\xb3\xc3\x0e\x05\xc9\x09\x85" +
	"\"\xb0\xbf\xc0t\x86\x1a\xbb\xe9\x82K\xad\x86\x8b4M" +
	")5]\xf41(RU\xa9\xe9*\xbb\xbe\x7f>\xcb" +
	"\xe52`7&R\x0b\xd3e\x04\x89\xe6\xd5\x8f\xe9J" +
	"\"\x9d\xb2\xee\x9bH\x11(j.B\xea\xf9}\x93\xe3" +
	"\xe9Q\xee\xbb$\xa4%\xd2\xa9\xa6\xc6xzR\xc8\xbc" +
	"q\x95\xb8\xaaVB\xcc\xa0\x17$\xc6|\x0e}fF" +
	"c\xaa\x9e\xce\x0eY\x0a\x89\x04\x84\xa2|#\xa4\x1d " +
	"<\x0e\xc3\x13\x90LU\x96f\xb2\xe9x>VtW" +
	"\xb1\xbb\xb1\xbb\xab\xe4!wWx\x0c\x12w3q\xb7" +
	"\x06g\xa72y=\xf4\xf5\xbc\x9e\xc9\xeb\x0ee:\x92" +
	"i\xd9\xceE\"\xd5\xa1(z\x19\x17Y\xaa\xa8z\"" +
	"\xb6X\x1cYl\x9a\xecz\x94<4\xf5p!A/" +
	"\xce\xadr\xbfs\x9a\xde\x9e_\xb8P\xcb\xf6%\xee." +
	"\\pYw\x12\x86\xe0n\xc6^\x9c\x97'\xf5\x86L" +
	"v\xb5{\xbf\xc1\xf2\xberg4\xc9\xb3P\xb1&1" +
	"\xb3\x90\xc3\xfc\xd9=\x8d\xf2\xd7\xe6\x15\xb2\\A\xcc\xe4" +
	"\x06+\xc9\x11\xc4B\x8ek\xb6r\x9c\xb2X\x1b\xc2q" +
	" \xe18(\xe6;G\xa4+\xa5\xe62\xd3$'\x8c" +
	"Q\xb3\x02!:e\x14\xb5v1)0\xa8WJ\x0a" +
	"\xb6\x14gsS\x810GuSe\xe5K3\xb3\x93" +
	"\xc8G),\xca\x12\x91\xe9\xeb\x9eh\x02\xb3\x97\xe2\xea" +
	"\x06\x9b\xab\x17\xe6t\x1e\xc6b\xb3i\x86Q\xc9\xa5\xe2" +
	"\xe8u\x97\xbf\xe0\xa0\xf7\x12\xb7\x17gb\xdf\xa5e\xc2" +
	"J5\x87\xddE\xb1h\x06\x89\xd5o\xb3\xf4W\x86\xa3" +
	"pLW\x19-X\xf1\x13#\x0a\x14\xc5\xe1\xa5\x91L" +
	"\xb5\xdaO\xc0\xddq\xee\x9cD.\xa4w\xa6t\xc1&" +
	"E\x03\x9a-\x03\x82\x1a{\xcf\xbdXl\x8d\x0b\xceb" +
	"7\xb3\xdf\xe8I'R\xba\x96\x9d\x0b\xcaPF\xab\x82" +
	"\x02-\x15\xcf\xb0e9\xeb\xe2\xd9\xc2\xe8-\x84\xf1&" +
	"[\x18\xc3\xec\xe1\x0c\x19#\xdf\xbc\xac\xba\x0d\x97 \xb1" +
	"\x06Q\x97V\xe2\x8d\x11T\x16[\xdc\xc8\x08\xaar\xe5" +
	"U\xf1~T\xc1jG4\x132\xd7\x99\x80e\x11\x15" +
	"\xcd#\x8a\x9e\x9045\x94fI1\xfeD1\x9c " +
	"\xe1v\x12\x0e\x86\xe3\x18\xd6\x91\xacP\x18\x94\x845\xc5" +
	"\x01\x81\x9d<K\x1e\xb6\xe1\xd2B\xf4yF?\xf3\xc8" +
	"u~\xef\xb7v\xbc\xe6\xcc\xe8\x855\x1d G3U" +
	"$U\x11/\xb8\xb95\xf4\xf5\xfe;\xb4\x98^1\xd3" +
	"\xb1DW\x05|}z:\xc8\xcb8\x0b\xf5b\xea\x88" +
	"bvPd-V\xe9U\xca\xe23\xa31\x96\x0c\x1b" +
	"\x0b9\x8e\x85N\x1d\x8d\xd7\xd3y\xdd\xbc\xf8\xc5\x84W" +
	"\x85\xd8\x81\xdf1k\xd8\x86\xf5\xf2\xd7\xe6\xd9A{[" +
	"\x81fJ@\xdb^\x00\xed,\x09\x8d\xa8\xaeg\x13\xfd" +
	"yV&\xe6p<`\x8f\x8c\xe8\xb1$\x02\xb2\x87K" +
	"c\xe9\x94\xae\xa5\xf4*,ZZ\xe9VM\x01\xb3S" +
	"\x0b\xd3\xd9\x81\xa8\x9e\x90\xcdBe\\Q\xcd\xcez\x80" +
	"H\x9b\x8c\x91965g\xb3\x8e\xeb&\x19#=\x12" +
	"\x12I\xaa\xe5\xa5yw?@d\x8e\x8c\x91[%\x94" +
	"\x13q\x91\xa1\xd4Tt@\x13\xff\x18q-\x17\xcb&" +
	"2:\xb0\x92\xa8\xf8\xd4A*s\xc0A\xd3S*\xd1" +
	"\xb4\xad\xebS\x17i\xd1\xb8\xd9\xf4\x89iO\xa1\xe9\xd3" +
	"\xa3\x89\xa4\x19/\xc7\x1b\x8b\xa8g\x95\x95\x06\xa3\xf4T" +
	"\x85\x9ak\xf4\xa6\xe3\x8b\xba\xc8?\x81b\xdc\xce\x9a%" +
	"\x9c\xd7\xd3\xb6.)\x11\xcb\x89>\xc6~j\xbdu\xaa" +
	"\x1c\xcb\xa1j\x0d\xf7\xab\x1f\xabV\xa8#2\x8e\xce\xcd" +
	"\xde.U#\xeaj\xe3\x82\x8c#\xf71@\xdaun" +
	"\xb5n[(\xcd\x89\x81G\xb6H\x1e\x8e\xfbv)\x9e" +
	"\xa9R\xd5\xf5\xe9\xd9|L\xcfg\xb5\xf8\\\xed.\xbd" +
	"1\xa7g\xf3A\xfe?\xc3\xff8\xa30^\xe8\x9cb" +
	"\xdd\x00s\xe8 9\xae@\x8dt\xc1\xa8E\x99\xdd\x01" +
	"F\x15\xb3d\x8c\xcc\x95PM\xf1\x81\x83zG.\x9d" +
	"\x82+\x94\xbb\x06\x92\xb6\xe9\xc3(}t\x95\x1e\xd3\xa6" +
	"\xac\xa2\xdd\xa5;n\x88m0\xc2\xfe\xac\xf1\x1f\x99\xda" +
	"\x0bR\xa1J\x14\xd7-W\x10\x05\xa8]RQ\xec\x00" +
	"\x16\"\xa9\x99b\x05I\xcd%\xee\xd6p,H8\x96" +
	"\xf9k\x94.\xc9\x0c<X)M|\x84B1\x9bg" +
	")M\"W\xb3d&\xe6\xb0(>\x85\x91@;\x09" +
	"\x04\x01\xc9t\x9e\xc8\xfe\xa4\xf4T\xa8|\xacb\xaa," +
	"\xf1.\x8a\xaa\xcc\x03\x11\x0f\xa2\xedKX\xe0n[s" +
	"\x1ah\xb0\x7fxj\xb5}\xb6\"\xad\x86@\x1e\x84L" +
	"\xec)\xdd\xb9\xdbCf|Cf\x95\x1a\xf92\xb7]" +
	"LKQ|\xca!\xdb\xb2\x00\xe1\x171\xfc*\x92\x03" +
	"\xcc\x03\xe2\xa3\x08\x8aO\x8bdO+@\xf8U\x0c\xbf" +
	"\x8d\xe4C\x05\xa5\xe2\xe77\x14\xa3i\xf2.[\xf16" +
	"\x86\xff\x0b\xc9\x19\x05e1W\xb6}d\xf8\xa8\x17 " +
	"\xfck\x0c\xff\x0e\xa9\x1b\x15t\x15\xa7\xd68c\xa3\xff" +
	"SX\xbe\xf3\x13rn;@\xf8\x8f\xd81\x0e\x91~" +
	"\x05\x15t\x17\xc7\xa1(&\xa6\x94`3\x00[\xd11" +
	"\x01\x91NE\xc5\x10\x98\x81 G\xcd\xe54\xd7!\xb3" +
	"\xc8\xbf\xac-&\xd7^\xce\x16Cp\x13`\xee\xb2\xf6" +
	"\x09RA\xc1*A\x1e\xda\xff\xf7\x81C\xa1s\x9d\xe7" +
	"`\x02[\x15iNH\xcd\xdaG\x0c\x98Q|\x01$" +
	"\xa4\xd9\xd6:\x9b\x1c \x0e+\xb6\xa5v\x0dJ\x1e\x96" +
	"7\x09e\x8dt)\xf3\xdb\xd8\xab\x9cjK\x17U " +
	"\x94\xf5\x00\x11\x8f\x8c\x91\x09\x12\x1aK\xa2\x09}f:" +
	"\xdb\x89\x03\x19}\x88aJ\xd6\xb2\x88 \xb9\x11m\xc4" +
	"\xafT\xa2P\x06$QT\x97V\xdf\xc5j\xb2r^" +
	"\xaaP\x9aW\\\xe7\xac\x17{\xa2Y\xc51\x84\xa9\xb7" +
	"\xb8QN\xa4x\xf2\xaaV,J\xce\xce\xa1\xc2L\xc7" +
	"N\xb5zb\xc0\x1cn\x17\xc7\x1c\x0e\x81\x8asHT" +
	"\xb1\x15\xb9m`\xb0'\x91\xd1\x92\x89\x94\x16\x8e\xc7\xb3" +
	"Z.\xa7a\xaezF\xb1j\xaeV\xdb\xa4=\x91\xca" +
	"\xe4u\x91SBi>\xdd\x11\xff\xfe_\x00\x00\x00\xff" +
	"\xff\xc8\xe0\xf9\xea"

func init() {
	schemas.Register(schema_99f1c9a775a88ac9,
		0x82449708d4fd120d,
		0x83b4353989cbcb47,
		0x86215e947f0afb85,
		0x876b422c6839e6b2,
		0x89aeecad59dc62ee,
		0x89f6c5dd387cc101,
		0x8ca159db7de3927b,
		0x902904cd51bff117,
		0x926107b4c88d431f,
		0x93a1b0e66bcacfbb,
		0x956ee3f21ad6b221,
		0x9882f67fa6ace6a1,
		0x98a27c9476315729,
		0x98be830bb53c6eb9,
		0x9b5844944dc0f458,
		0x9c656810b30decd7,
		0x9d8aa1cf1e49deb1,
		0x9dd4e2c3d76e4587,
		0xa1eb17b1112501da,
		0xa869f50b8c586ed9,
		0xa8b91e2c1f8c929a,
		0xabd31dc62bd9a48b,
		0xade9d46971ea9ee3,
		0xb07588184ad8aac5,
		0xb16b6184cf8b8acf,
		0xb2afd1cb599c48d5,
		0xb5fca46714e53e71,
		0xb6563114436deea9,
		0xb86feee7ac7bebec,
		0xb9d4864725174733,
		0xb9fe596d7cadbdcc,
		0xc12db9a9ae07a763,
		0xc1374ccca01e2b53,
		0xc201bf46dd40051e,
		0xc8a1bc4350302330,
		0xc953edb8b6293faf,
		0xc9851222d70aff42,
		0xcac9c6537df1a097,
		0xcc040dde1a99ddff,
		0xce7e4202f09e314a,
		0xd010f77f1bdf0522,
		0xd39ff99bbab1a74e,
		0xd3a3b24aaa056a5c,
		0xd4cb7ecbfe03dad3,
		0xd67792aa3fc241be,
		0xd69f2da1efe3faaf,
		0xd7e3695f7166e987,
		0xd8727b5440681ed4,
		0xda52b34d937fa814,
		0xdb1f001689bbac5d,
		0xdc9b0f483595691f,
		0xe8ba8300eb17a23c,
		0xe8cbf552b1c262cc,
		0xec0d27e49a0f9f3a,
		0xed6c098b67cad454,
		0xee378f318f32b853,
		0xee543d7c305d56f6,
		0xf0c0f9413a3083be,
		0xf1c80d9ce9dfd993,
		0xf20dfadcec8a0e13,
		0xf8224774a4d4d6f5,
		0xf8dc00b2d60ea82f,
		0xf9033a317ba0d0c6,
		0xfb528c3db0280a11,
		0xfd058bbd1f9508cd,
		0xfd0735841a7da108,
		0xfd65c3cd7f2f47fa,
		0xfe04fe97ba25a27e)
}
