// Code generated by capnpc-go. DO NOT EDIT.

package common

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	strconv "strconv"
)

type IdInformation struct{ capnp.Struct }

// IdInformation_TypeID is the unique identifier for the type IdInformation.
const IdInformation_TypeID = 0xd4cb7ecbfe03dad3

func NewIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func NewRootIdInformation(s *capnp.Segment) (IdInformation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{st}, err
}

func ReadRootIdInformation(msg *capnp.Message) (IdInformation, error) {
	root, err := msg.Root()
	return IdInformation{root.Struct()}, err
}

func (s IdInformation) String() string {
	str, _ := text.Marshal(0xd4cb7ecbfe03dad3, s.Struct)
	return str
}

func (s IdInformation) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s IdInformation) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s IdInformation) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s IdInformation) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s IdInformation) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IdInformation) HasName() bool {
	return s.Struct.HasPtr(1)
}

func (s IdInformation) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IdInformation) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IdInformation) Description() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s IdInformation) HasDescription() bool {
	return s.Struct.HasPtr(2)
}

func (s IdInformation) DescriptionBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s IdInformation) SetDescription(v string) error {
	return s.Struct.SetText(2, v)
}

// IdInformation_List is a list of IdInformation.
type IdInformation_List struct{ capnp.List }

// NewIdInformation creates a new list of IdInformation.
func NewIdInformation_List(s *capnp.Segment, sz int32) (IdInformation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return IdInformation_List{l}, err
}

func (s IdInformation_List) At(i int) IdInformation { return IdInformation{s.List.Struct(i)} }

func (s IdInformation_List) Set(i int, v IdInformation) error { return s.List.SetStruct(i, v.Struct) }

func (s IdInformation_List) String() string {
	str, _ := text.MarshalList(0xd4cb7ecbfe03dad3, s.List)
	return str
}

// IdInformation_Future is a wrapper for a IdInformation promised by a client call.
type IdInformation_Future struct{ *capnp.Future }

func (p IdInformation_Future) Struct() (IdInformation, error) {
	s, err := p.Future.Struct()
	return IdInformation{s}, err
}

type Identifiable struct{ Client *capnp.Client }

// Identifiable_TypeID is the unique identifier for the type Identifiable.
const Identifiable_TypeID = 0xb2afd1cb599c48d5

func (c Identifiable) Info(ctx context.Context, params func(Identifiable_info_Params) error) (IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return IdInformation_Future{Future: ans.Future()}, release
}

func (c Identifiable) AddRef() Identifiable {
	return Identifiable{
		Client: c.Client.AddRef(),
	}
}

func (c Identifiable) Release() {
	c.Client.Release()
}

// A Identifiable_Server is a Identifiable with a local implementation.
type Identifiable_Server interface {
	Info(context.Context, Identifiable_info) error
}

// Identifiable_NewServer creates a new Server from an implementation of Identifiable_Server.
func Identifiable_NewServer(s Identifiable_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Identifiable_Methods(nil, s), s, c, policy)
}

// Identifiable_ServerToClient creates a new Client from an implementation of Identifiable_Server.
// The caller is responsible for calling Release on the returned Client.
func Identifiable_ServerToClient(s Identifiable_Server, policy *server.Policy) Identifiable {
	return Identifiable{Client: capnp.NewClient(Identifiable_NewServer(s, policy))}
}

// Identifiable_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Identifiable_Methods(methods []server.Method, s Identifiable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, Identifiable_info{call})
		},
	})

	return methods
}

// Identifiable_info holds the state for a server call to Identifiable.info.
// See server.Call for documentation.
type Identifiable_info struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Identifiable_info) Args() Identifiable_info_Params {
	return Identifiable_info_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Identifiable_info) AllocResults() (IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return IdInformation{Struct: r}, err
}

type Identifiable_info_Params struct{ capnp.Struct }

// Identifiable_info_Params_TypeID is the unique identifier for the type Identifiable_info_Params.
const Identifiable_info_Params_TypeID = 0x9d8aa1cf1e49deb1

func NewIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func NewRootIdentifiable_info_Params(s *capnp.Segment) (Identifiable_info_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Identifiable_info_Params{st}, err
}

func ReadRootIdentifiable_info_Params(msg *capnp.Message) (Identifiable_info_Params, error) {
	root, err := msg.Root()
	return Identifiable_info_Params{root.Struct()}, err
}

func (s Identifiable_info_Params) String() string {
	str, _ := text.Marshal(0x9d8aa1cf1e49deb1, s.Struct)
	return str
}

// Identifiable_info_Params_List is a list of Identifiable_info_Params.
type Identifiable_info_Params_List struct{ capnp.List }

// NewIdentifiable_info_Params creates a new list of Identifiable_info_Params.
func NewIdentifiable_info_Params_List(s *capnp.Segment, sz int32) (Identifiable_info_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Identifiable_info_Params_List{l}, err
}

func (s Identifiable_info_Params_List) At(i int) Identifiable_info_Params {
	return Identifiable_info_Params{s.List.Struct(i)}
}

func (s Identifiable_info_Params_List) Set(i int, v Identifiable_info_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Identifiable_info_Params_List) String() string {
	str, _ := text.MarshalList(0x9d8aa1cf1e49deb1, s.List)
	return str
}

// Identifiable_info_Params_Future is a wrapper for a Identifiable_info_Params promised by a client call.
type Identifiable_info_Params_Future struct{ *capnp.Future }

func (p Identifiable_info_Params_Future) Struct() (Identifiable_info_Params, error) {
	s, err := p.Future.Struct()
	return Identifiable_info_Params{s}, err
}

type StructuredText struct{ capnp.Struct }
type StructuredText_structure StructuredText
type StructuredText_structure_Which uint16

const (
	StructuredText_structure_Which_none StructuredText_structure_Which = 0
	StructuredText_structure_Which_json StructuredText_structure_Which = 1
	StructuredText_structure_Which_xml  StructuredText_structure_Which = 2
)

func (w StructuredText_structure_Which) String() string {
	const s = "nonejsonxml"
	switch w {
	case StructuredText_structure_Which_none:
		return s[0:4]
	case StructuredText_structure_Which_json:
		return s[4:8]
	case StructuredText_structure_Which_xml:
		return s[8:11]

	}
	return "StructuredText_structure_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StructuredText_TypeID is the unique identifier for the type StructuredText.
const StructuredText_TypeID = 0xed6c098b67cad454

func NewStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func NewRootStructuredText(s *capnp.Segment) (StructuredText, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return StructuredText{st}, err
}

func ReadRootStructuredText(msg *capnp.Message) (StructuredText, error) {
	root, err := msg.Root()
	return StructuredText{root.Struct()}, err
}

func (s StructuredText) String() string {
	str, _ := text.Marshal(0xed6c098b67cad454, s.Struct)
	return str
}

func (s StructuredText) Value() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StructuredText) HasValue() bool {
	return s.Struct.HasPtr(0)
}

func (s StructuredText) ValueBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StructuredText) SetValue(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StructuredText) Structure() StructuredText_structure { return StructuredText_structure(s) }

func (s StructuredText_structure) Which() StructuredText_structure_Which {
	return StructuredText_structure_Which(s.Struct.Uint16(0))
}
func (s StructuredText_structure) SetNone() {
	s.Struct.SetUint16(0, 0)

}

func (s StructuredText_structure) SetJson() {
	s.Struct.SetUint16(0, 1)

}

func (s StructuredText_structure) SetXml() {
	s.Struct.SetUint16(0, 2)

}

// StructuredText_List is a list of StructuredText.
type StructuredText_List struct{ capnp.List }

// NewStructuredText creates a new list of StructuredText.
func NewStructuredText_List(s *capnp.Segment, sz int32) (StructuredText_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return StructuredText_List{l}, err
}

func (s StructuredText_List) At(i int) StructuredText { return StructuredText{s.List.Struct(i)} }

func (s StructuredText_List) Set(i int, v StructuredText) error { return s.List.SetStruct(i, v.Struct) }

func (s StructuredText_List) String() string {
	str, _ := text.MarshalList(0xed6c098b67cad454, s.List)
	return str
}

// StructuredText_Future is a wrapper for a StructuredText promised by a client call.
type StructuredText_Future struct{ *capnp.Future }

func (p StructuredText_Future) Struct() (StructuredText, error) {
	s, err := p.Future.Struct()
	return StructuredText{s}, err
}

func (p StructuredText_Future) Structure() StructuredText_structure_Future {
	return StructuredText_structure_Future{p.Future}
}

// StructuredText_structure_Future is a wrapper for a StructuredText_structure promised by a client call.
type StructuredText_structure_Future struct{ *capnp.Future }

func (p StructuredText_structure_Future) Struct() (StructuredText_structure, error) {
	s, err := p.Future.Struct()
	return StructuredText_structure{s}, err
}

type Pair struct{ capnp.Struct }

// Pair_TypeID is the unique identifier for the type Pair.
const Pair_TypeID = 0xb9d4864725174733

func NewPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func NewRootPair(s *capnp.Segment) (Pair, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Pair{st}, err
}

func ReadRootPair(msg *capnp.Message) (Pair, error) {
	root, err := msg.Root()
	return Pair{root.Struct()}, err
}

func (s Pair) String() string {
	str, _ := text.Marshal(0xb9d4864725174733, s.Struct)
	return str
}

func (s Pair) Fst() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Pair) HasFst() bool {
	return s.Struct.HasPtr(0)
}

func (s Pair) SetFst(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Pair) Snd() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Pair) HasSnd() bool {
	return s.Struct.HasPtr(1)
}

func (s Pair) SetSnd(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Pair_List is a list of Pair.
type Pair_List struct{ capnp.List }

// NewPair creates a new list of Pair.
func NewPair_List(s *capnp.Segment, sz int32) (Pair_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Pair_List{l}, err
}

func (s Pair_List) At(i int) Pair { return Pair{s.List.Struct(i)} }

func (s Pair_List) Set(i int, v Pair) error { return s.List.SetStruct(i, v.Struct) }

func (s Pair_List) String() string {
	str, _ := text.MarshalList(0xb9d4864725174733, s.List)
	return str
}

// Pair_Future is a wrapper for a Pair promised by a client call.
type Pair_Future struct{ *capnp.Future }

func (p Pair_Future) Struct() (Pair, error) {
	s, err := p.Future.Struct()
	return Pair{s}, err
}

func (p Pair_Future) Fst() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Pair_Future) Snd() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_99f1c9a775a88ac9 = "x\xdad\x921L\x14[\x14\x86\xff\xff\xde\x9d\x1d^" +
	"\xb2\x9b}w\x87\x84<\xf2\"\x89\xc1\xa8$\x10\x04+" +
	"+\x8c\"l\x84d/`\xa2\xe5\xb0;k\xc6\xec\xcc" +
	"\xe0\xcc\xac`ci\x81\x9d\x9d\x89\x16V\xda\x11\xec(" +
	"l\xecpM\x8c\x8a\x0d\x85\x89VZPXXP\xc0" +
	"\x98Ydw]\xa6\xbb\xe7~\xf9\xe7;\xe7\xdc\xf1\xeb" +
	"\x9c\x12\x17\x8c\xb3\x19@\x8f\x1b\xd9d\xf3K\xe9\xd4\xfb" +
	"\xe7\xeb\xcf\xa0\x06\x09dL`r\x9f\x13D&\xf9<" +
	"\xfb\xf4V\xf3\xc3\xc6+\xa8\xbcL\xb6\xd7_6^l" +
	"\xff|\x02\xd0\xfa\xca\x8f\xd6\x1eM\xc0\xfa\xc1\x19K\x09" +
	"\x13H&g\x06\xce\xcc<\xdc\xd9\x82\xca\xb3\x03\x1b\xc2" +
	"\xfc\x97\xd6>\x1f[L)\xeb\x80\xab\x80uW\x0c$" +
	"\x9fv\xe5a\xf3As\xa7\x87\x97)\xe5\x89]\xeb~" +
	"\x8bo\x88\x0d0y\xb7\xfcfs\xe1W\xf3;\xf4\xff" +
	"d\xb2\xb4\xf3\xf6\xf6\xa3\x7f\xea{\xb8A\x93\x12\x98T" +
	"r\x82\xa0\xf5\x9fL\xd9\xf6\xad\xce\xb3;\xb8\xa5\xbb)" +
	"\xbfY\xaf[\xbf\xd8\x92\xab\xb8\x92T\x02\xcf\x0b\xfc\xb1" +
	"\x8a\xb4W\xfc\x95K\xa5\xaa\xe3\xc7n\xcd\xb5\x97\xeb\xce" +
	"\x98\xeb\xd7\x82\xe1\xf2\x90\x1d\xda^\xd4\xe6D/G\xa7" +
	"L\xea\x8c4\x80\xf6 y\xdc\x9aR#\x10\xca0\x0b" +
	"i\xd6\x14\xcbd;\x88\xad\xa0\xb2\xed2L\x03\xfad" +
	"\x06\xc8\x10P\xe7O\x03zXR\x8f\x0b*\xb2\x9fi" +
	"q4-\x9e\x93\xd4\x17\x05\xcdZ\x14\xb3Hv\x06\x0e" +
	"\xb0\x08\x9a\x91_e\xd18yq\xb9\x8f\xca(*\xa3" +
	"\xc8k\\<\xd1I\xc9\xaf\x05\xa1g\xc7\xae\x0c\xfc\xd4" +
	"$\xd76\x99\x1e\x04\xf4\x94\xa4\x9e\xeb2)\x8d\x00\xfa" +
	"\xaa\xa4.\x0b*!\xfa)\x005\xbf\x0c\xe89I}" +
	"SP\xbaU\xe6 \x98\x03\x0b\xbe\xed9\xc7\x87\xa4\xea" +
	"D\x95\xd0]\x89a\xba\x81\xdf\xae\xfe\xbd\x80\xc58l" +
	"T\xe2F\xe8T\x97\x9c\xb5x,\x8a\xc3\xc6P\xeb\x9c" +
	"j\xe5\x92\xe4\xc8az\xa4#\x96\xe7ar$\xd1m" +
	"\x96\x17\x07I\x7f\xfa4\xd4|:\xb9YI\xbd$X" +
	"\xf0\x03\xdfA\xb6p'\x0a|d\xcd5\xaf\x8el\xcf" +
	"<\xba\x04Lg-\xeeY\xcdDg5\xe9\xd7y\x96" +
	"jt\x01b\xe8\x9e]ot\xfa\x8d\xfeD\x81\xce\xef" +
	"\x00\x00\x00\xff\xffK\xcc\xee\xa8"

func init() {
	schemas.Register(schema_99f1c9a775a88ac9,
		0x9d8aa1cf1e49deb1,
		0xb2afd1cb599c48d5,
		0xb9d4864725174733,
		0xd4cb7ecbfe03dad3,
		0xe8cbf552b1c262cc,
		0xed6c098b67cad454)
}
