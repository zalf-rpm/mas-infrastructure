// Code generated by capnpc-go. DO NOT EDIT.

package grid

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	geo "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/geo"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	math "math"
	strconv "strconv"
)

type Aggregation uint16

// Aggregation_TypeID is the unique identifier for the type Aggregation.
const Aggregation_TypeID = 0xa5ecdc7767a6b301

// Values of Aggregation.
const (
	Aggregation_none    Aggregation = 0
	Aggregation_avg     Aggregation = 8
	Aggregation_wAvg    Aggregation = 1
	Aggregation_iAvg    Aggregation = 6
	Aggregation_median  Aggregation = 9
	Aggregation_wMedian Aggregation = 2
	Aggregation_iMedian Aggregation = 7
	Aggregation_min     Aggregation = 3
	Aggregation_wMin    Aggregation = 12
	Aggregation_iMin    Aggregation = 13
	Aggregation_max     Aggregation = 4
	Aggregation_wMax    Aggregation = 14
	Aggregation_iMax    Aggregation = 15
	Aggregation_sum     Aggregation = 5
	Aggregation_wSum    Aggregation = 10
	Aggregation_iSum    Aggregation = 11
)

// String returns the enum's constant name.
func (c Aggregation) String() string {
	switch c {
	case Aggregation_none:
		return "none"
	case Aggregation_avg:
		return "avg"
	case Aggregation_wAvg:
		return "wAvg"
	case Aggregation_iAvg:
		return "iAvg"
	case Aggregation_median:
		return "median"
	case Aggregation_wMedian:
		return "wMedian"
	case Aggregation_iMedian:
		return "iMedian"
	case Aggregation_min:
		return "min"
	case Aggregation_wMin:
		return "wMin"
	case Aggregation_iMin:
		return "iMin"
	case Aggregation_max:
		return "max"
	case Aggregation_wMax:
		return "wMax"
	case Aggregation_iMax:
		return "iMax"
	case Aggregation_sum:
		return "sum"
	case Aggregation_wSum:
		return "wSum"
	case Aggregation_iSum:
		return "iSum"

	default:
		return ""
	}
}

// AggregationFromString returns the enum value with a name,
// or the zero value if there's no such value.
func AggregationFromString(c string) Aggregation {
	switch c {
	case "none":
		return Aggregation_none
	case "avg":
		return Aggregation_avg
	case "wAvg":
		return Aggregation_wAvg
	case "iAvg":
		return Aggregation_iAvg
	case "median":
		return Aggregation_median
	case "wMedian":
		return Aggregation_wMedian
	case "iMedian":
		return Aggregation_iMedian
	case "min":
		return Aggregation_min
	case "wMin":
		return Aggregation_wMin
	case "iMin":
		return Aggregation_iMin
	case "max":
		return Aggregation_max
	case "wMax":
		return Aggregation_wMax
	case "iMax":
		return Aggregation_iMax
	case "sum":
		return Aggregation_sum
	case "wSum":
		return Aggregation_wSum
	case "iSum":
		return Aggregation_iSum

	default:
		return 0
	}
}

type Aggregation_List = capnp.EnumList[Aggregation]

func NewAggregation_List(s *capnp.Segment, sz int32) (Aggregation_List, error) {
	return capnp.NewEnumList[Aggregation](s, sz)
}

type Grid capnp.Client

// Grid_TypeID is the unique identifier for the type Grid.
const Grid_TypeID = 0xe42973b29661e3c6

func (c Grid) ClosestValueAt(ctx context.Context, params func(Grid_closestValueAt_Params) error) (Grid_closestValueAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      0,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "closestValueAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_closestValueAt_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_closestValueAt_Results_Future{Future: ans.Future()}, release
}
func (c Grid) Resolution(ctx context.Context, params func(Grid_resolution_Params) error) (Grid_resolution_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      1,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "resolution",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_resolution_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_resolution_Results_Future{Future: ans.Future()}, release
}
func (c Grid) Dimension(ctx context.Context, params func(Grid_dimension_Params) error) (Grid_dimension_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      2,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "dimension",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_dimension_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_dimension_Results_Future{Future: ans.Future()}, release
}
func (c Grid) NoDataValue(ctx context.Context, params func(Grid_noDataValue_Params) error) (Grid_noDataValue_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      3,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "noDataValue",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_noDataValue_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_noDataValue_Results_Future{Future: ans.Future()}, release
}
func (c Grid) ValueAt(ctx context.Context, params func(Grid_valueAt_Params) error) (Grid_valueAt_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      4,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "valueAt",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 32, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_valueAt_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_valueAt_Results_Future{Future: ans.Future()}, release
}
func (c Grid) LatLonBounds(ctx context.Context, params func(Grid_latLonBounds_Params) error) (Grid_latLonBounds_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      5,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "latLonBounds",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_latLonBounds_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_latLonBounds_Results_Future{Future: ans.Future()}, release
}
func (c Grid) StreamCells(ctx context.Context, params func(Grid_streamCells_Params) error) (Grid_streamCells_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      6,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "streamCells",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_streamCells_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_streamCells_Results_Future{Future: ans.Future()}, release
}
func (c Grid) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Grid) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Grid) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Grid) AddRef() Grid {
	return Grid(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Grid) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Grid) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Grid) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Grid) DecodeFromPtr(p capnp.Ptr) Grid {
	return Grid(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Grid) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Grid) IsSame(other Grid) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Grid) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Grid) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Grid_Server is a Grid with a local implementation.
type Grid_Server interface {
	ClosestValueAt(context.Context, Grid_closestValueAt) error

	Resolution(context.Context, Grid_resolution) error

	Dimension(context.Context, Grid_dimension) error

	NoDataValue(context.Context, Grid_noDataValue) error

	ValueAt(context.Context, Grid_valueAt) error

	LatLonBounds(context.Context, Grid_latLonBounds) error

	StreamCells(context.Context, Grid_streamCells) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Grid_NewServer creates a new Server from an implementation of Grid_Server.
func Grid_NewServer(s Grid_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Grid_Methods(nil, s), s, c)
}

// Grid_ServerToClient creates a new Client from an implementation of Grid_Server.
// The caller is responsible for calling Release on the returned Client.
func Grid_ServerToClient(s Grid_Server) Grid {
	return Grid(capnp.NewClient(Grid_NewServer(s)))
}

// Grid_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Grid_Methods(methods []server.Method, s Grid_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 9)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      0,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "closestValueAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ClosestValueAt(ctx, Grid_closestValueAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      1,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "resolution",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Resolution(ctx, Grid_resolution{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      2,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "dimension",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Dimension(ctx, Grid_dimension{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      3,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "noDataValue",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NoDataValue(ctx, Grid_noDataValue{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      4,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "valueAt",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ValueAt(ctx, Grid_valueAt{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      5,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "latLonBounds",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.LatLonBounds(ctx, Grid_latLonBounds{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe42973b29661e3c6,
			MethodID:      6,
			InterfaceName: "grid.capnp:Grid",
			MethodName:    "streamCells",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.StreamCells(ctx, Grid_streamCells{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Grid_closestValueAt holds the state for a server call to Grid.closestValueAt.
// See server.Call for documentation.
type Grid_closestValueAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_closestValueAt) Args() Grid_closestValueAt_Params {
	return Grid_closestValueAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_closestValueAt) AllocResults() (Grid_closestValueAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Grid_closestValueAt_Results(r), err
}

// Grid_resolution holds the state for a server call to Grid.resolution.
// See server.Call for documentation.
type Grid_resolution struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_resolution) Args() Grid_resolution_Params {
	return Grid_resolution_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_resolution) AllocResults() (Grid_resolution_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Grid_resolution_Results(r), err
}

// Grid_dimension holds the state for a server call to Grid.dimension.
// See server.Call for documentation.
type Grid_dimension struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_dimension) Args() Grid_dimension_Params {
	return Grid_dimension_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_dimension) AllocResults() (Grid_dimension_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_dimension_Results(r), err
}

// Grid_noDataValue holds the state for a server call to Grid.noDataValue.
// See server.Call for documentation.
type Grid_noDataValue struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_noDataValue) Args() Grid_noDataValue_Params {
	return Grid_noDataValue_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_noDataValue) AllocResults() (Grid_noDataValue_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Grid_noDataValue_Results(r), err
}

// Grid_valueAt holds the state for a server call to Grid.valueAt.
// See server.Call for documentation.
type Grid_valueAt struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_valueAt) Args() Grid_valueAt_Params {
	return Grid_valueAt_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_valueAt) AllocResults() (Grid_valueAt_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Grid_valueAt_Results(r), err
}

// Grid_latLonBounds holds the state for a server call to Grid.latLonBounds.
// See server.Call for documentation.
type Grid_latLonBounds struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_latLonBounds) Args() Grid_latLonBounds_Params {
	return Grid_latLonBounds_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_latLonBounds) AllocResults() (Grid_latLonBounds_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Grid_latLonBounds_Results(r), err
}

// Grid_streamCells holds the state for a server call to Grid.streamCells.
// See server.Call for documentation.
type Grid_streamCells struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_streamCells) Args() Grid_streamCells_Params {
	return Grid_streamCells_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_streamCells) AllocResults() (Grid_streamCells_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_streamCells_Results(r), err
}

// Grid_List is a list of Grid.
type Grid_List = capnp.CapList[Grid]

// NewGrid creates a new list of Grid.
func NewGrid_List(s *capnp.Segment, sz int32) (Grid_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Grid](l), err
}

type Grid_Value capnp.Struct
type Grid_Value_Which uint16

const (
	Grid_Value_Which_f  Grid_Value_Which = 0
	Grid_Value_Which_i  Grid_Value_Which = 1
	Grid_Value_Which_ui Grid_Value_Which = 2
	Grid_Value_Which_no Grid_Value_Which = 3
)

func (w Grid_Value_Which) String() string {
	const s = "fiuino"
	switch w {
	case Grid_Value_Which_f:
		return s[0:1]
	case Grid_Value_Which_i:
		return s[1:2]
	case Grid_Value_Which_ui:
		return s[2:4]
	case Grid_Value_Which_no:
		return s[4:6]

	}
	return "Grid_Value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Grid_Value_TypeID is the unique identifier for the type Grid_Value.
const Grid_Value_TypeID = 0xfe2e0dfae573d9d0

func NewGrid_Value(s *capnp.Segment) (Grid_Value, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_Value(st), err
}

func NewRootGrid_Value(s *capnp.Segment) (Grid_Value, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_Value(st), err
}

func ReadRootGrid_Value(msg *capnp.Message) (Grid_Value, error) {
	root, err := msg.Root()
	return Grid_Value(root.Struct()), err
}

func (s Grid_Value) String() string {
	str, _ := text.Marshal(0xfe2e0dfae573d9d0, capnp.Struct(s))
	return str
}

func (s Grid_Value) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_Value) DecodeFromPtr(p capnp.Ptr) Grid_Value {
	return Grid_Value(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_Value) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Grid_Value) Which() Grid_Value_Which {
	return Grid_Value_Which(capnp.Struct(s).Uint16(8))
}
func (s Grid_Value) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_Value) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_Value) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_Value) F() float64 {
	if capnp.Struct(s).Uint16(8) != 0 {
		panic("Which() != f")
	}
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Grid_Value) SetF(v float64) {
	capnp.Struct(s).SetUint16(8, 0)
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Grid_Value) I() int64 {
	if capnp.Struct(s).Uint16(8) != 1 {
		panic("Which() != i")
	}
	return int64(capnp.Struct(s).Uint64(0))
}

func (s Grid_Value) SetI(v int64) {
	capnp.Struct(s).SetUint16(8, 1)
	capnp.Struct(s).SetUint64(0, uint64(v))
}

func (s Grid_Value) Ui() uint64 {
	if capnp.Struct(s).Uint16(8) != 2 {
		panic("Which() != ui")
	}
	return capnp.Struct(s).Uint64(0)
}

func (s Grid_Value) SetUi(v uint64) {
	capnp.Struct(s).SetUint16(8, 2)
	capnp.Struct(s).SetUint64(0, v)
}

func (s Grid_Value) No() bool {
	if capnp.Struct(s).Uint16(8) != 3 {
		panic("Which() != no")
	}
	return capnp.Struct(s).Bit(0)
}

func (s Grid_Value) SetNo(v bool) {
	capnp.Struct(s).SetUint16(8, 3)
	capnp.Struct(s).SetBit(0, v)
}

// Grid_Value_List is a list of Grid_Value.
type Grid_Value_List = capnp.StructList[Grid_Value]

// NewGrid_Value creates a new list of Grid_Value.
func NewGrid_Value_List(s *capnp.Segment, sz int32) (Grid_Value_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Grid_Value](l), err
}

// Grid_Value_Future is a wrapper for a Grid_Value promised by a client call.
type Grid_Value_Future struct{ *capnp.Future }

func (f Grid_Value_Future) Struct() (Grid_Value, error) {
	p, err := f.Future.Ptr()
	return Grid_Value(p.Struct()), err
}

type Grid_RowCol capnp.Struct

// Grid_RowCol_TypeID is the unique identifier for the type Grid_RowCol.
const Grid_RowCol_TypeID = 0xb9e2d85d086206ff

func NewGrid_RowCol(s *capnp.Segment) (Grid_RowCol, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_RowCol(st), err
}

func NewRootGrid_RowCol(s *capnp.Segment) (Grid_RowCol, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_RowCol(st), err
}

func ReadRootGrid_RowCol(msg *capnp.Message) (Grid_RowCol, error) {
	root, err := msg.Root()
	return Grid_RowCol(root.Struct()), err
}

func (s Grid_RowCol) String() string {
	str, _ := text.Marshal(0xb9e2d85d086206ff, capnp.Struct(s))
	return str
}

func (s Grid_RowCol) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_RowCol) DecodeFromPtr(p capnp.Ptr) Grid_RowCol {
	return Grid_RowCol(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_RowCol) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_RowCol) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_RowCol) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_RowCol) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_RowCol) Row() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Grid_RowCol) SetRow(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Grid_RowCol) Col() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Grid_RowCol) SetCol(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// Grid_RowCol_List is a list of Grid_RowCol.
type Grid_RowCol_List = capnp.StructList[Grid_RowCol]

// NewGrid_RowCol creates a new list of Grid_RowCol.
func NewGrid_RowCol_List(s *capnp.Segment, sz int32) (Grid_RowCol_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Grid_RowCol](l), err
}

// Grid_RowCol_Future is a wrapper for a Grid_RowCol promised by a client call.
type Grid_RowCol_Future struct{ *capnp.Future }

func (f Grid_RowCol_Future) Struct() (Grid_RowCol, error) {
	p, err := f.Future.Ptr()
	return Grid_RowCol(p.Struct()), err
}

type Grid_AggregationPart capnp.Struct

// Grid_AggregationPart_TypeID is the unique identifier for the type Grid_AggregationPart.
const Grid_AggregationPart_TypeID = 0xac444617ef333a1d

func NewGrid_AggregationPart(s *capnp.Segment) (Grid_AggregationPart, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Grid_AggregationPart(st), err
}

func NewRootGrid_AggregationPart(s *capnp.Segment) (Grid_AggregationPart, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return Grid_AggregationPart(st), err
}

func ReadRootGrid_AggregationPart(msg *capnp.Message) (Grid_AggregationPart, error) {
	root, err := msg.Root()
	return Grid_AggregationPart(root.Struct()), err
}

func (s Grid_AggregationPart) String() string {
	str, _ := text.Marshal(0xac444617ef333a1d, capnp.Struct(s))
	return str
}

func (s Grid_AggregationPart) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_AggregationPart) DecodeFromPtr(p capnp.Ptr) Grid_AggregationPart {
	return Grid_AggregationPart(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_AggregationPart) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_AggregationPart) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_AggregationPart) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_AggregationPart) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_AggregationPart) Value() (Grid_Value, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Grid_Value(p.Struct()), err
}

func (s Grid_AggregationPart) HasValue() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_AggregationPart) SetValue(v Grid_Value) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewValue sets the value field to a newly
// allocated Grid_Value struct, preferring placement in s's segment.
func (s Grid_AggregationPart) NewValue() (Grid_Value, error) {
	ss, err := NewGrid_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_AggregationPart) RowCol() (Grid_RowCol, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Grid_RowCol(p.Struct()), err
}

func (s Grid_AggregationPart) HasRowCol() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Grid_AggregationPart) SetRowCol(v Grid_RowCol) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewRowCol sets the rowCol field to a newly
// allocated Grid_RowCol struct, preferring placement in s's segment.
func (s Grid_AggregationPart) NewRowCol() (Grid_RowCol, error) {
	ss, err := NewGrid_RowCol(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_RowCol{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_AggregationPart) AreaFrac() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Grid_AggregationPart) SetAreaFrac(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Grid_AggregationPart) IValue() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Grid_AggregationPart) SetIValue(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

// Grid_AggregationPart_List is a list of Grid_AggregationPart.
type Grid_AggregationPart_List = capnp.StructList[Grid_AggregationPart]

// NewGrid_AggregationPart creates a new list of Grid_AggregationPart.
func NewGrid_AggregationPart_List(s *capnp.Segment, sz int32) (Grid_AggregationPart_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[Grid_AggregationPart](l), err
}

// Grid_AggregationPart_Future is a wrapper for a Grid_AggregationPart promised by a client call.
type Grid_AggregationPart_Future struct{ *capnp.Future }

func (f Grid_AggregationPart_Future) Struct() (Grid_AggregationPart, error) {
	p, err := f.Future.Ptr()
	return Grid_AggregationPart(p.Struct()), err
}
func (p Grid_AggregationPart_Future) Value() Grid_Value_Future {
	return Grid_Value_Future{Future: p.Future.Field(0, nil)}
}
func (p Grid_AggregationPart_Future) RowCol() Grid_RowCol_Future {
	return Grid_RowCol_Future{Future: p.Future.Field(1, nil)}
}

type Grid_Callback capnp.Client

// Grid_Callback_TypeID is the unique identifier for the type Grid_Callback.
const Grid_Callback_TypeID = 0xd639518280cb55d3

func (c Grid_Callback) SendCells(ctx context.Context, params func(Grid_Callback_sendCells_Params) error) (Grid_Callback_sendCells_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd639518280cb55d3,
			MethodID:      0,
			InterfaceName: "grid.capnp:Grid.Callback",
			MethodName:    "sendCells",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Grid_Callback_sendCells_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Grid_Callback_sendCells_Results_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Grid_Callback) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Grid_Callback) AddRef() Grid_Callback {
	return Grid_Callback(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Grid_Callback) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Grid_Callback) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Grid_Callback) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Grid_Callback) DecodeFromPtr(p capnp.Ptr) Grid_Callback {
	return Grid_Callback(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Grid_Callback) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Grid_Callback) IsSame(other Grid_Callback) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Grid_Callback) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Grid_Callback) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Grid_Callback_Server is a Grid_Callback with a local implementation.
type Grid_Callback_Server interface {
	SendCells(context.Context, Grid_Callback_sendCells) error
}

// Grid_Callback_NewServer creates a new Server from an implementation of Grid_Callback_Server.
func Grid_Callback_NewServer(s Grid_Callback_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Grid_Callback_Methods(nil, s), s, c)
}

// Grid_Callback_ServerToClient creates a new Client from an implementation of Grid_Callback_Server.
// The caller is responsible for calling Release on the returned Client.
func Grid_Callback_ServerToClient(s Grid_Callback_Server) Grid_Callback {
	return Grid_Callback(capnp.NewClient(Grid_Callback_NewServer(s)))
}

// Grid_Callback_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Grid_Callback_Methods(methods []server.Method, s Grid_Callback_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd639518280cb55d3,
			MethodID:      0,
			InterfaceName: "grid.capnp:Grid.Callback",
			MethodName:    "sendCells",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendCells(ctx, Grid_Callback_sendCells{call})
		},
	})

	return methods
}

// Grid_Callback_sendCells holds the state for a server call to Grid_Callback.sendCells.
// See server.Call for documentation.
type Grid_Callback_sendCells struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Grid_Callback_sendCells) Args() Grid_Callback_sendCells_Params {
	return Grid_Callback_sendCells_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Grid_Callback_sendCells) AllocResults() (Grid_Callback_sendCells_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_Callback_sendCells_Results(r), err
}

// Grid_Callback_List is a list of Grid_Callback.
type Grid_Callback_List = capnp.CapList[Grid_Callback]

// NewGrid_Callback creates a new list of Grid_Callback.
func NewGrid_Callback_List(s *capnp.Segment, sz int32) (Grid_Callback_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Grid_Callback](l), err
}

type Grid_Callback_sendCells_Params capnp.Struct

// Grid_Callback_sendCells_Params_TypeID is the unique identifier for the type Grid_Callback_sendCells_Params.
const Grid_Callback_sendCells_Params_TypeID = 0xe9b0c7718f68f6bb

func NewGrid_Callback_sendCells_Params(s *capnp.Segment) (Grid_Callback_sendCells_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Grid_Callback_sendCells_Params(st), err
}

func NewRootGrid_Callback_sendCells_Params(s *capnp.Segment) (Grid_Callback_sendCells_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Grid_Callback_sendCells_Params(st), err
}

func ReadRootGrid_Callback_sendCells_Params(msg *capnp.Message) (Grid_Callback_sendCells_Params, error) {
	root, err := msg.Root()
	return Grid_Callback_sendCells_Params(root.Struct()), err
}

func (s Grid_Callback_sendCells_Params) String() string {
	str, _ := text.Marshal(0xe9b0c7718f68f6bb, capnp.Struct(s))
	return str
}

func (s Grid_Callback_sendCells_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_Callback_sendCells_Params) DecodeFromPtr(p capnp.Ptr) Grid_Callback_sendCells_Params {
	return Grid_Callback_sendCells_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_Callback_sendCells_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_Callback_sendCells_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_Callback_sendCells_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_Callback_sendCells_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_Callback_sendCells_Params) Cells() (Grid_RowCol_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Grid_RowCol_List(p.List()), err
}

func (s Grid_Callback_sendCells_Params) HasCells() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_Callback_sendCells_Params) SetCells(v Grid_RowCol_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewCells sets the cells field to a newly
// allocated Grid_RowCol_List, preferring placement in s's segment.
func (s Grid_Callback_sendCells_Params) NewCells(n int32) (Grid_RowCol_List, error) {
	l, err := NewGrid_RowCol_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Grid_RowCol_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Grid_Callback_sendCells_Params_List is a list of Grid_Callback_sendCells_Params.
type Grid_Callback_sendCells_Params_List = capnp.StructList[Grid_Callback_sendCells_Params]

// NewGrid_Callback_sendCells_Params creates a new list of Grid_Callback_sendCells_Params.
func NewGrid_Callback_sendCells_Params_List(s *capnp.Segment, sz int32) (Grid_Callback_sendCells_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Grid_Callback_sendCells_Params](l), err
}

// Grid_Callback_sendCells_Params_Future is a wrapper for a Grid_Callback_sendCells_Params promised by a client call.
type Grid_Callback_sendCells_Params_Future struct{ *capnp.Future }

func (f Grid_Callback_sendCells_Params_Future) Struct() (Grid_Callback_sendCells_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_Callback_sendCells_Params(p.Struct()), err
}

type Grid_Callback_sendCells_Results capnp.Struct

// Grid_Callback_sendCells_Results_TypeID is the unique identifier for the type Grid_Callback_sendCells_Results.
const Grid_Callback_sendCells_Results_TypeID = 0x8e536f6e598b2579

func NewGrid_Callback_sendCells_Results(s *capnp.Segment) (Grid_Callback_sendCells_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_Callback_sendCells_Results(st), err
}

func NewRootGrid_Callback_sendCells_Results(s *capnp.Segment) (Grid_Callback_sendCells_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_Callback_sendCells_Results(st), err
}

func ReadRootGrid_Callback_sendCells_Results(msg *capnp.Message) (Grid_Callback_sendCells_Results, error) {
	root, err := msg.Root()
	return Grid_Callback_sendCells_Results(root.Struct()), err
}

func (s Grid_Callback_sendCells_Results) String() string {
	str, _ := text.Marshal(0x8e536f6e598b2579, capnp.Struct(s))
	return str
}

func (s Grid_Callback_sendCells_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_Callback_sendCells_Results) DecodeFromPtr(p capnp.Ptr) Grid_Callback_sendCells_Results {
	return Grid_Callback_sendCells_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_Callback_sendCells_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_Callback_sendCells_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_Callback_sendCells_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_Callback_sendCells_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Grid_Callback_sendCells_Results_List is a list of Grid_Callback_sendCells_Results.
type Grid_Callback_sendCells_Results_List = capnp.StructList[Grid_Callback_sendCells_Results]

// NewGrid_Callback_sendCells_Results creates a new list of Grid_Callback_sendCells_Results.
func NewGrid_Callback_sendCells_Results_List(s *capnp.Segment, sz int32) (Grid_Callback_sendCells_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Grid_Callback_sendCells_Results](l), err
}

// Grid_Callback_sendCells_Results_Future is a wrapper for a Grid_Callback_sendCells_Results promised by a client call.
type Grid_Callback_sendCells_Results_Future struct{ *capnp.Future }

func (f Grid_Callback_sendCells_Results_Future) Struct() (Grid_Callback_sendCells_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_Callback_sendCells_Results(p.Struct()), err
}

type Grid_closestValueAt_Params capnp.Struct

// Grid_closestValueAt_Params_TypeID is the unique identifier for the type Grid_closestValueAt_Params.
const Grid_closestValueAt_Params_TypeID = 0xeb7e6f1c610c079a

func NewGrid_closestValueAt_Params(s *capnp.Segment) (Grid_closestValueAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Grid_closestValueAt_Params(st), err
}

func NewRootGrid_closestValueAt_Params(s *capnp.Segment) (Grid_closestValueAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return Grid_closestValueAt_Params(st), err
}

func ReadRootGrid_closestValueAt_Params(msg *capnp.Message) (Grid_closestValueAt_Params, error) {
	root, err := msg.Root()
	return Grid_closestValueAt_Params(root.Struct()), err
}

func (s Grid_closestValueAt_Params) String() string {
	str, _ := text.Marshal(0xeb7e6f1c610c079a, capnp.Struct(s))
	return str
}

func (s Grid_closestValueAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_closestValueAt_Params) DecodeFromPtr(p capnp.Ptr) Grid_closestValueAt_Params {
	return Grid_closestValueAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_closestValueAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_closestValueAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_closestValueAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_closestValueAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_closestValueAt_Params) LatlonCoord() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Grid_closestValueAt_Params) HasLatlonCoord() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_closestValueAt_Params) SetLatlonCoord(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLatlonCoord sets the latlonCoord field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Grid_closestValueAt_Params) NewLatlonCoord() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_closestValueAt_Params) IgnoreNoData() bool {
	return !capnp.Struct(s).Bit(0)
}

func (s Grid_closestValueAt_Params) SetIgnoreNoData(v bool) {
	capnp.Struct(s).SetBit(0, !v)
}

func (s Grid_closestValueAt_Params) Resolution() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Grid_closestValueAt_Params) SetResolution(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Grid_closestValueAt_Params) Agg() Aggregation {
	return Aggregation(capnp.Struct(s).Uint16(2))
}

func (s Grid_closestValueAt_Params) SetAgg(v Aggregation) {
	capnp.Struct(s).SetUint16(2, uint16(v))
}

func (s Grid_closestValueAt_Params) ReturnRowCols() bool {
	return capnp.Struct(s).Bit(1)
}

func (s Grid_closestValueAt_Params) SetReturnRowCols(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

func (s Grid_closestValueAt_Params) IncludeAggParts() bool {
	return capnp.Struct(s).Bit(2)
}

func (s Grid_closestValueAt_Params) SetIncludeAggParts(v bool) {
	capnp.Struct(s).SetBit(2, v)
}

// Grid_closestValueAt_Params_List is a list of Grid_closestValueAt_Params.
type Grid_closestValueAt_Params_List = capnp.StructList[Grid_closestValueAt_Params]

// NewGrid_closestValueAt_Params creates a new list of Grid_closestValueAt_Params.
func NewGrid_closestValueAt_Params_List(s *capnp.Segment, sz int32) (Grid_closestValueAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return capnp.StructList[Grid_closestValueAt_Params](l), err
}

// Grid_closestValueAt_Params_Future is a wrapper for a Grid_closestValueAt_Params promised by a client call.
type Grid_closestValueAt_Params_Future struct{ *capnp.Future }

func (f Grid_closestValueAt_Params_Future) Struct() (Grid_closestValueAt_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_closestValueAt_Params(p.Struct()), err
}
func (p Grid_closestValueAt_Params_Future) LatlonCoord() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}

type Grid_closestValueAt_Results capnp.Struct

// Grid_closestValueAt_Results_TypeID is the unique identifier for the type Grid_closestValueAt_Results.
const Grid_closestValueAt_Results_TypeID = 0xa8bd0263833540b0

func NewGrid_closestValueAt_Results(s *capnp.Segment) (Grid_closestValueAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Grid_closestValueAt_Results(st), err
}

func NewRootGrid_closestValueAt_Results(s *capnp.Segment) (Grid_closestValueAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Grid_closestValueAt_Results(st), err
}

func ReadRootGrid_closestValueAt_Results(msg *capnp.Message) (Grid_closestValueAt_Results, error) {
	root, err := msg.Root()
	return Grid_closestValueAt_Results(root.Struct()), err
}

func (s Grid_closestValueAt_Results) String() string {
	str, _ := text.Marshal(0xa8bd0263833540b0, capnp.Struct(s))
	return str
}

func (s Grid_closestValueAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_closestValueAt_Results) DecodeFromPtr(p capnp.Ptr) Grid_closestValueAt_Results {
	return Grid_closestValueAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_closestValueAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_closestValueAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_closestValueAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_closestValueAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_closestValueAt_Results) Val() (Grid_Value, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Grid_Value(p.Struct()), err
}

func (s Grid_closestValueAt_Results) HasVal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_closestValueAt_Results) SetVal(v Grid_Value) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVal sets the val field to a newly
// allocated Grid_Value struct, preferring placement in s's segment.
func (s Grid_closestValueAt_Results) NewVal() (Grid_Value, error) {
	ss, err := NewGrid_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_closestValueAt_Results) Tl() (Grid_RowCol, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Grid_RowCol(p.Struct()), err
}

func (s Grid_closestValueAt_Results) HasTl() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Grid_closestValueAt_Results) SetTl(v Grid_RowCol) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewTl sets the tl field to a newly
// allocated Grid_RowCol struct, preferring placement in s's segment.
func (s Grid_closestValueAt_Results) NewTl() (Grid_RowCol, error) {
	ss, err := NewGrid_RowCol(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_RowCol{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_closestValueAt_Results) Br() (Grid_RowCol, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Grid_RowCol(p.Struct()), err
}

func (s Grid_closestValueAt_Results) HasBr() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Grid_closestValueAt_Results) SetBr(v Grid_RowCol) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewBr sets the br field to a newly
// allocated Grid_RowCol struct, preferring placement in s's segment.
func (s Grid_closestValueAt_Results) NewBr() (Grid_RowCol, error) {
	ss, err := NewGrid_RowCol(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_RowCol{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_closestValueAt_Results) AggParts() (Grid_AggregationPart_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Grid_AggregationPart_List(p.List()), err
}

func (s Grid_closestValueAt_Results) HasAggParts() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Grid_closestValueAt_Results) SetAggParts(v Grid_AggregationPart_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewAggParts sets the aggParts field to a newly
// allocated Grid_AggregationPart_List, preferring placement in s's segment.
func (s Grid_closestValueAt_Results) NewAggParts(n int32) (Grid_AggregationPart_List, error) {
	l, err := NewGrid_AggregationPart_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Grid_AggregationPart_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Grid_closestValueAt_Results_List is a list of Grid_closestValueAt_Results.
type Grid_closestValueAt_Results_List = capnp.StructList[Grid_closestValueAt_Results]

// NewGrid_closestValueAt_Results creates a new list of Grid_closestValueAt_Results.
func NewGrid_closestValueAt_Results_List(s *capnp.Segment, sz int32) (Grid_closestValueAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Grid_closestValueAt_Results](l), err
}

// Grid_closestValueAt_Results_Future is a wrapper for a Grid_closestValueAt_Results promised by a client call.
type Grid_closestValueAt_Results_Future struct{ *capnp.Future }

func (f Grid_closestValueAt_Results_Future) Struct() (Grid_closestValueAt_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_closestValueAt_Results(p.Struct()), err
}
func (p Grid_closestValueAt_Results_Future) Val() Grid_Value_Future {
	return Grid_Value_Future{Future: p.Future.Field(0, nil)}
}
func (p Grid_closestValueAt_Results_Future) Tl() Grid_RowCol_Future {
	return Grid_RowCol_Future{Future: p.Future.Field(1, nil)}
}
func (p Grid_closestValueAt_Results_Future) Br() Grid_RowCol_Future {
	return Grid_RowCol_Future{Future: p.Future.Field(2, nil)}
}

type Grid_resolution_Params capnp.Struct

// Grid_resolution_Params_TypeID is the unique identifier for the type Grid_resolution_Params.
const Grid_resolution_Params_TypeID = 0xf79edcb97e1e2deb

func NewGrid_resolution_Params(s *capnp.Segment) (Grid_resolution_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_resolution_Params(st), err
}

func NewRootGrid_resolution_Params(s *capnp.Segment) (Grid_resolution_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_resolution_Params(st), err
}

func ReadRootGrid_resolution_Params(msg *capnp.Message) (Grid_resolution_Params, error) {
	root, err := msg.Root()
	return Grid_resolution_Params(root.Struct()), err
}

func (s Grid_resolution_Params) String() string {
	str, _ := text.Marshal(0xf79edcb97e1e2deb, capnp.Struct(s))
	return str
}

func (s Grid_resolution_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_resolution_Params) DecodeFromPtr(p capnp.Ptr) Grid_resolution_Params {
	return Grid_resolution_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_resolution_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_resolution_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_resolution_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_resolution_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Grid_resolution_Params_List is a list of Grid_resolution_Params.
type Grid_resolution_Params_List = capnp.StructList[Grid_resolution_Params]

// NewGrid_resolution_Params creates a new list of Grid_resolution_Params.
func NewGrid_resolution_Params_List(s *capnp.Segment, sz int32) (Grid_resolution_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Grid_resolution_Params](l), err
}

// Grid_resolution_Params_Future is a wrapper for a Grid_resolution_Params promised by a client call.
type Grid_resolution_Params_Future struct{ *capnp.Future }

func (f Grid_resolution_Params_Future) Struct() (Grid_resolution_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_resolution_Params(p.Struct()), err
}

type Grid_resolution_Results capnp.Struct

// Grid_resolution_Results_TypeID is the unique identifier for the type Grid_resolution_Results.
const Grid_resolution_Results_TypeID = 0x8cd7ba490778c79a

func NewGrid_resolution_Results(s *capnp.Segment) (Grid_resolution_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Grid_resolution_Results(st), err
}

func NewRootGrid_resolution_Results(s *capnp.Segment) (Grid_resolution_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Grid_resolution_Results(st), err
}

func ReadRootGrid_resolution_Results(msg *capnp.Message) (Grid_resolution_Results, error) {
	root, err := msg.Root()
	return Grid_resolution_Results(root.Struct()), err
}

func (s Grid_resolution_Results) String() string {
	str, _ := text.Marshal(0x8cd7ba490778c79a, capnp.Struct(s))
	return str
}

func (s Grid_resolution_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_resolution_Results) DecodeFromPtr(p capnp.Ptr) Grid_resolution_Results {
	return Grid_resolution_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_resolution_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_resolution_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_resolution_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_resolution_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_resolution_Results) Res() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Grid_resolution_Results) SetRes(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Grid_resolution_Results_List is a list of Grid_resolution_Results.
type Grid_resolution_Results_List = capnp.StructList[Grid_resolution_Results]

// NewGrid_resolution_Results creates a new list of Grid_resolution_Results.
func NewGrid_resolution_Results_List(s *capnp.Segment, sz int32) (Grid_resolution_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Grid_resolution_Results](l), err
}

// Grid_resolution_Results_Future is a wrapper for a Grid_resolution_Results promised by a client call.
type Grid_resolution_Results_Future struct{ *capnp.Future }

func (f Grid_resolution_Results_Future) Struct() (Grid_resolution_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_resolution_Results(p.Struct()), err
}

type Grid_dimension_Params capnp.Struct

// Grid_dimension_Params_TypeID is the unique identifier for the type Grid_dimension_Params.
const Grid_dimension_Params_TypeID = 0xa6005af20cc08dbe

func NewGrid_dimension_Params(s *capnp.Segment) (Grid_dimension_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_dimension_Params(st), err
}

func NewRootGrid_dimension_Params(s *capnp.Segment) (Grid_dimension_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_dimension_Params(st), err
}

func ReadRootGrid_dimension_Params(msg *capnp.Message) (Grid_dimension_Params, error) {
	root, err := msg.Root()
	return Grid_dimension_Params(root.Struct()), err
}

func (s Grid_dimension_Params) String() string {
	str, _ := text.Marshal(0xa6005af20cc08dbe, capnp.Struct(s))
	return str
}

func (s Grid_dimension_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_dimension_Params) DecodeFromPtr(p capnp.Ptr) Grid_dimension_Params {
	return Grid_dimension_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_dimension_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_dimension_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_dimension_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_dimension_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Grid_dimension_Params_List is a list of Grid_dimension_Params.
type Grid_dimension_Params_List = capnp.StructList[Grid_dimension_Params]

// NewGrid_dimension_Params creates a new list of Grid_dimension_Params.
func NewGrid_dimension_Params_List(s *capnp.Segment, sz int32) (Grid_dimension_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Grid_dimension_Params](l), err
}

// Grid_dimension_Params_Future is a wrapper for a Grid_dimension_Params promised by a client call.
type Grid_dimension_Params_Future struct{ *capnp.Future }

func (f Grid_dimension_Params_Future) Struct() (Grid_dimension_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_dimension_Params(p.Struct()), err
}

type Grid_dimension_Results capnp.Struct

// Grid_dimension_Results_TypeID is the unique identifier for the type Grid_dimension_Results.
const Grid_dimension_Results_TypeID = 0xe7a46f6b1610256f

func NewGrid_dimension_Results(s *capnp.Segment) (Grid_dimension_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_dimension_Results(st), err
}

func NewRootGrid_dimension_Results(s *capnp.Segment) (Grid_dimension_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return Grid_dimension_Results(st), err
}

func ReadRootGrid_dimension_Results(msg *capnp.Message) (Grid_dimension_Results, error) {
	root, err := msg.Root()
	return Grid_dimension_Results(root.Struct()), err
}

func (s Grid_dimension_Results) String() string {
	str, _ := text.Marshal(0xe7a46f6b1610256f, capnp.Struct(s))
	return str
}

func (s Grid_dimension_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_dimension_Results) DecodeFromPtr(p capnp.Ptr) Grid_dimension_Results {
	return Grid_dimension_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_dimension_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_dimension_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_dimension_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_dimension_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_dimension_Results) Rows() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Grid_dimension_Results) SetRows(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Grid_dimension_Results) Cols() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Grid_dimension_Results) SetCols(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// Grid_dimension_Results_List is a list of Grid_dimension_Results.
type Grid_dimension_Results_List = capnp.StructList[Grid_dimension_Results]

// NewGrid_dimension_Results creates a new list of Grid_dimension_Results.
func NewGrid_dimension_Results_List(s *capnp.Segment, sz int32) (Grid_dimension_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[Grid_dimension_Results](l), err
}

// Grid_dimension_Results_Future is a wrapper for a Grid_dimension_Results promised by a client call.
type Grid_dimension_Results_Future struct{ *capnp.Future }

func (f Grid_dimension_Results_Future) Struct() (Grid_dimension_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_dimension_Results(p.Struct()), err
}

type Grid_noDataValue_Params capnp.Struct

// Grid_noDataValue_Params_TypeID is the unique identifier for the type Grid_noDataValue_Params.
const Grid_noDataValue_Params_TypeID = 0xf804a76f2ada54b6

func NewGrid_noDataValue_Params(s *capnp.Segment) (Grid_noDataValue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_noDataValue_Params(st), err
}

func NewRootGrid_noDataValue_Params(s *capnp.Segment) (Grid_noDataValue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_noDataValue_Params(st), err
}

func ReadRootGrid_noDataValue_Params(msg *capnp.Message) (Grid_noDataValue_Params, error) {
	root, err := msg.Root()
	return Grid_noDataValue_Params(root.Struct()), err
}

func (s Grid_noDataValue_Params) String() string {
	str, _ := text.Marshal(0xf804a76f2ada54b6, capnp.Struct(s))
	return str
}

func (s Grid_noDataValue_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_noDataValue_Params) DecodeFromPtr(p capnp.Ptr) Grid_noDataValue_Params {
	return Grid_noDataValue_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_noDataValue_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_noDataValue_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_noDataValue_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_noDataValue_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Grid_noDataValue_Params_List is a list of Grid_noDataValue_Params.
type Grid_noDataValue_Params_List = capnp.StructList[Grid_noDataValue_Params]

// NewGrid_noDataValue_Params creates a new list of Grid_noDataValue_Params.
func NewGrid_noDataValue_Params_List(s *capnp.Segment, sz int32) (Grid_noDataValue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Grid_noDataValue_Params](l), err
}

// Grid_noDataValue_Params_Future is a wrapper for a Grid_noDataValue_Params promised by a client call.
type Grid_noDataValue_Params_Future struct{ *capnp.Future }

func (f Grid_noDataValue_Params_Future) Struct() (Grid_noDataValue_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_noDataValue_Params(p.Struct()), err
}

type Grid_noDataValue_Results capnp.Struct

// Grid_noDataValue_Results_TypeID is the unique identifier for the type Grid_noDataValue_Results.
const Grid_noDataValue_Results_TypeID = 0x9bc132bd2a1b1fcf

func NewGrid_noDataValue_Results(s *capnp.Segment) (Grid_noDataValue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Grid_noDataValue_Results(st), err
}

func NewRootGrid_noDataValue_Results(s *capnp.Segment) (Grid_noDataValue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Grid_noDataValue_Results(st), err
}

func ReadRootGrid_noDataValue_Results(msg *capnp.Message) (Grid_noDataValue_Results, error) {
	root, err := msg.Root()
	return Grid_noDataValue_Results(root.Struct()), err
}

func (s Grid_noDataValue_Results) String() string {
	str, _ := text.Marshal(0x9bc132bd2a1b1fcf, capnp.Struct(s))
	return str
}

func (s Grid_noDataValue_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_noDataValue_Results) DecodeFromPtr(p capnp.Ptr) Grid_noDataValue_Results {
	return Grid_noDataValue_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_noDataValue_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_noDataValue_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_noDataValue_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_noDataValue_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_noDataValue_Results) Nodata() (Grid_Value, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Grid_Value(p.Struct()), err
}

func (s Grid_noDataValue_Results) HasNodata() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_noDataValue_Results) SetNodata(v Grid_Value) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewNodata sets the nodata field to a newly
// allocated Grid_Value struct, preferring placement in s's segment.
func (s Grid_noDataValue_Results) NewNodata() (Grid_Value, error) {
	ss, err := NewGrid_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Grid_noDataValue_Results_List is a list of Grid_noDataValue_Results.
type Grid_noDataValue_Results_List = capnp.StructList[Grid_noDataValue_Results]

// NewGrid_noDataValue_Results creates a new list of Grid_noDataValue_Results.
func NewGrid_noDataValue_Results_List(s *capnp.Segment, sz int32) (Grid_noDataValue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Grid_noDataValue_Results](l), err
}

// Grid_noDataValue_Results_Future is a wrapper for a Grid_noDataValue_Results promised by a client call.
type Grid_noDataValue_Results_Future struct{ *capnp.Future }

func (f Grid_noDataValue_Results_Future) Struct() (Grid_noDataValue_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_noDataValue_Results(p.Struct()), err
}
func (p Grid_noDataValue_Results_Future) Nodata() Grid_Value_Future {
	return Grid_Value_Future{Future: p.Future.Field(0, nil)}
}

type Grid_valueAt_Params capnp.Struct

// Grid_valueAt_Params_TypeID is the unique identifier for the type Grid_valueAt_Params.
const Grid_valueAt_Params_TypeID = 0x948ff2bdd6e6972f

func NewGrid_valueAt_Params(s *capnp.Segment) (Grid_valueAt_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Grid_valueAt_Params(st), err
}

func NewRootGrid_valueAt_Params(s *capnp.Segment) (Grid_valueAt_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return Grid_valueAt_Params(st), err
}

func ReadRootGrid_valueAt_Params(msg *capnp.Message) (Grid_valueAt_Params, error) {
	root, err := msg.Root()
	return Grid_valueAt_Params(root.Struct()), err
}

func (s Grid_valueAt_Params) String() string {
	str, _ := text.Marshal(0x948ff2bdd6e6972f, capnp.Struct(s))
	return str
}

func (s Grid_valueAt_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_valueAt_Params) DecodeFromPtr(p capnp.Ptr) Grid_valueAt_Params {
	return Grid_valueAt_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_valueAt_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_valueAt_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_valueAt_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_valueAt_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_valueAt_Params) Row() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Grid_valueAt_Params) SetRow(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Grid_valueAt_Params) Col() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Grid_valueAt_Params) SetCol(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Grid_valueAt_Params) Resolution() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s Grid_valueAt_Params) SetResolution(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s Grid_valueAt_Params) Agg() Aggregation {
	return Aggregation(capnp.Struct(s).Uint16(24))
}

func (s Grid_valueAt_Params) SetAgg(v Aggregation) {
	capnp.Struct(s).SetUint16(24, uint16(v))
}

func (s Grid_valueAt_Params) IncludeAggParts() bool {
	return capnp.Struct(s).Bit(208)
}

func (s Grid_valueAt_Params) SetIncludeAggParts(v bool) {
	capnp.Struct(s).SetBit(208, v)
}

// Grid_valueAt_Params_List is a list of Grid_valueAt_Params.
type Grid_valueAt_Params_List = capnp.StructList[Grid_valueAt_Params]

// NewGrid_valueAt_Params creates a new list of Grid_valueAt_Params.
func NewGrid_valueAt_Params_List(s *capnp.Segment, sz int32) (Grid_valueAt_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[Grid_valueAt_Params](l), err
}

// Grid_valueAt_Params_Future is a wrapper for a Grid_valueAt_Params promised by a client call.
type Grid_valueAt_Params_Future struct{ *capnp.Future }

func (f Grid_valueAt_Params_Future) Struct() (Grid_valueAt_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_valueAt_Params(p.Struct()), err
}

type Grid_valueAt_Results capnp.Struct

// Grid_valueAt_Results_TypeID is the unique identifier for the type Grid_valueAt_Results.
const Grid_valueAt_Results_TypeID = 0xa21ef33efc715994

func NewGrid_valueAt_Results(s *capnp.Segment) (Grid_valueAt_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Grid_valueAt_Results(st), err
}

func NewRootGrid_valueAt_Results(s *capnp.Segment) (Grid_valueAt_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Grid_valueAt_Results(st), err
}

func ReadRootGrid_valueAt_Results(msg *capnp.Message) (Grid_valueAt_Results, error) {
	root, err := msg.Root()
	return Grid_valueAt_Results(root.Struct()), err
}

func (s Grid_valueAt_Results) String() string {
	str, _ := text.Marshal(0xa21ef33efc715994, capnp.Struct(s))
	return str
}

func (s Grid_valueAt_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_valueAt_Results) DecodeFromPtr(p capnp.Ptr) Grid_valueAt_Results {
	return Grid_valueAt_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_valueAt_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_valueAt_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_valueAt_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_valueAt_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_valueAt_Results) Val() (Grid_Value, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Grid_Value(p.Struct()), err
}

func (s Grid_valueAt_Results) HasVal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_valueAt_Results) SetVal(v Grid_Value) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVal sets the val field to a newly
// allocated Grid_Value struct, preferring placement in s's segment.
func (s Grid_valueAt_Results) NewVal() (Grid_Value, error) {
	ss, err := NewGrid_Value(capnp.Struct(s).Segment())
	if err != nil {
		return Grid_Value{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_valueAt_Results) AggParts() (Grid_AggregationPart_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Grid_AggregationPart_List(p.List()), err
}

func (s Grid_valueAt_Results) HasAggParts() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Grid_valueAt_Results) SetAggParts(v Grid_AggregationPart_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewAggParts sets the aggParts field to a newly
// allocated Grid_AggregationPart_List, preferring placement in s's segment.
func (s Grid_valueAt_Results) NewAggParts(n int32) (Grid_AggregationPart_List, error) {
	l, err := NewGrid_AggregationPart_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Grid_AggregationPart_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Grid_valueAt_Results_List is a list of Grid_valueAt_Results.
type Grid_valueAt_Results_List = capnp.StructList[Grid_valueAt_Results]

// NewGrid_valueAt_Results creates a new list of Grid_valueAt_Results.
func NewGrid_valueAt_Results_List(s *capnp.Segment, sz int32) (Grid_valueAt_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Grid_valueAt_Results](l), err
}

// Grid_valueAt_Results_Future is a wrapper for a Grid_valueAt_Results promised by a client call.
type Grid_valueAt_Results_Future struct{ *capnp.Future }

func (f Grid_valueAt_Results_Future) Struct() (Grid_valueAt_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_valueAt_Results(p.Struct()), err
}
func (p Grid_valueAt_Results_Future) Val() Grid_Value_Future {
	return Grid_Value_Future{Future: p.Future.Field(0, nil)}
}

type Grid_latLonBounds_Params capnp.Struct

// Grid_latLonBounds_Params_TypeID is the unique identifier for the type Grid_latLonBounds_Params.
const Grid_latLonBounds_Params_TypeID = 0xf37338992466bd97

func NewGrid_latLonBounds_Params(s *capnp.Segment) (Grid_latLonBounds_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Grid_latLonBounds_Params(st), err
}

func NewRootGrid_latLonBounds_Params(s *capnp.Segment) (Grid_latLonBounds_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Grid_latLonBounds_Params(st), err
}

func ReadRootGrid_latLonBounds_Params(msg *capnp.Message) (Grid_latLonBounds_Params, error) {
	root, err := msg.Root()
	return Grid_latLonBounds_Params(root.Struct()), err
}

func (s Grid_latLonBounds_Params) String() string {
	str, _ := text.Marshal(0xf37338992466bd97, capnp.Struct(s))
	return str
}

func (s Grid_latLonBounds_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_latLonBounds_Params) DecodeFromPtr(p capnp.Ptr) Grid_latLonBounds_Params {
	return Grid_latLonBounds_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_latLonBounds_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_latLonBounds_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_latLonBounds_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_latLonBounds_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_latLonBounds_Params) UseCellCenter() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Grid_latLonBounds_Params) SetUseCellCenter(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Grid_latLonBounds_Params_List is a list of Grid_latLonBounds_Params.
type Grid_latLonBounds_Params_List = capnp.StructList[Grid_latLonBounds_Params]

// NewGrid_latLonBounds_Params creates a new list of Grid_latLonBounds_Params.
func NewGrid_latLonBounds_Params_List(s *capnp.Segment, sz int32) (Grid_latLonBounds_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Grid_latLonBounds_Params](l), err
}

// Grid_latLonBounds_Params_Future is a wrapper for a Grid_latLonBounds_Params promised by a client call.
type Grid_latLonBounds_Params_Future struct{ *capnp.Future }

func (f Grid_latLonBounds_Params_Future) Struct() (Grid_latLonBounds_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_latLonBounds_Params(p.Struct()), err
}

type Grid_latLonBounds_Results capnp.Struct

// Grid_latLonBounds_Results_TypeID is the unique identifier for the type Grid_latLonBounds_Results.
const Grid_latLonBounds_Results_TypeID = 0xe57fce57d3443377

func NewGrid_latLonBounds_Results(s *capnp.Segment) (Grid_latLonBounds_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Grid_latLonBounds_Results(st), err
}

func NewRootGrid_latLonBounds_Results(s *capnp.Segment) (Grid_latLonBounds_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Grid_latLonBounds_Results(st), err
}

func ReadRootGrid_latLonBounds_Results(msg *capnp.Message) (Grid_latLonBounds_Results, error) {
	root, err := msg.Root()
	return Grid_latLonBounds_Results(root.Struct()), err
}

func (s Grid_latLonBounds_Results) String() string {
	str, _ := text.Marshal(0xe57fce57d3443377, capnp.Struct(s))
	return str
}

func (s Grid_latLonBounds_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_latLonBounds_Results) DecodeFromPtr(p capnp.Ptr) Grid_latLonBounds_Results {
	return Grid_latLonBounds_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_latLonBounds_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_latLonBounds_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_latLonBounds_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_latLonBounds_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_latLonBounds_Results) Tl() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Grid_latLonBounds_Results) HasTl() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_latLonBounds_Results) SetTl(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTl sets the tl field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Grid_latLonBounds_Results) NewTl() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_latLonBounds_Results) Tr() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Grid_latLonBounds_Results) HasTr() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Grid_latLonBounds_Results) SetTr(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewTr sets the tr field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Grid_latLonBounds_Results) NewTr() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_latLonBounds_Results) Br() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Grid_latLonBounds_Results) HasBr() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Grid_latLonBounds_Results) SetBr(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewBr sets the br field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Grid_latLonBounds_Results) NewBr() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Grid_latLonBounds_Results) Bl() (geo.LatLonCoord, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return geo.LatLonCoord(p.Struct()), err
}

func (s Grid_latLonBounds_Results) HasBl() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Grid_latLonBounds_Results) SetBl(v geo.LatLonCoord) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewBl sets the bl field to a newly
// allocated geo.LatLonCoord struct, preferring placement in s's segment.
func (s Grid_latLonBounds_Results) NewBl() (geo.LatLonCoord, error) {
	ss, err := geo.NewLatLonCoord(capnp.Struct(s).Segment())
	if err != nil {
		return geo.LatLonCoord{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Grid_latLonBounds_Results_List is a list of Grid_latLonBounds_Results.
type Grid_latLonBounds_Results_List = capnp.StructList[Grid_latLonBounds_Results]

// NewGrid_latLonBounds_Results creates a new list of Grid_latLonBounds_Results.
func NewGrid_latLonBounds_Results_List(s *capnp.Segment, sz int32) (Grid_latLonBounds_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Grid_latLonBounds_Results](l), err
}

// Grid_latLonBounds_Results_Future is a wrapper for a Grid_latLonBounds_Results promised by a client call.
type Grid_latLonBounds_Results_Future struct{ *capnp.Future }

func (f Grid_latLonBounds_Results_Future) Struct() (Grid_latLonBounds_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_latLonBounds_Results(p.Struct()), err
}
func (p Grid_latLonBounds_Results_Future) Tl() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(0, nil)}
}
func (p Grid_latLonBounds_Results_Future) Tr() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(1, nil)}
}
func (p Grid_latLonBounds_Results_Future) Br() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(2, nil)}
}
func (p Grid_latLonBounds_Results_Future) Bl() geo.LatLonCoord_Future {
	return geo.LatLonCoord_Future{Future: p.Future.Field(3, nil)}
}

type Grid_streamCells_Params capnp.Struct

// Grid_streamCells_Params_TypeID is the unique identifier for the type Grid_streamCells_Params.
const Grid_streamCells_Params_TypeID = 0xd9add1b3fdcfdbba

func NewGrid_streamCells_Params(s *capnp.Segment) (Grid_streamCells_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Grid_streamCells_Params(st), err
}

func NewRootGrid_streamCells_Params(s *capnp.Segment) (Grid_streamCells_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Grid_streamCells_Params(st), err
}

func ReadRootGrid_streamCells_Params(msg *capnp.Message) (Grid_streamCells_Params, error) {
	root, err := msg.Root()
	return Grid_streamCells_Params(root.Struct()), err
}

func (s Grid_streamCells_Params) String() string {
	str, _ := text.Marshal(0xd9add1b3fdcfdbba, capnp.Struct(s))
	return str
}

func (s Grid_streamCells_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_streamCells_Params) DecodeFromPtr(p capnp.Ptr) Grid_streamCells_Params {
	return Grid_streamCells_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_streamCells_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_streamCells_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_streamCells_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_streamCells_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Grid_streamCells_Params) Callback() Grid_Callback {
	p, _ := capnp.Struct(s).Ptr(0)
	return Grid_Callback(p.Interface().Client())
}

func (s Grid_streamCells_Params) HasCallback() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Grid_streamCells_Params) SetCallback(v Grid_Callback) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s Grid_streamCells_Params) MaxNoOfCellsPerSend() uint64 {
	return capnp.Struct(s).Uint64(0) ^ 100
}

func (s Grid_streamCells_Params) SetMaxNoOfCellsPerSend(v uint64) {
	capnp.Struct(s).SetUint64(0, v^100)
}

// Grid_streamCells_Params_List is a list of Grid_streamCells_Params.
type Grid_streamCells_Params_List = capnp.StructList[Grid_streamCells_Params]

// NewGrid_streamCells_Params creates a new list of Grid_streamCells_Params.
func NewGrid_streamCells_Params_List(s *capnp.Segment, sz int32) (Grid_streamCells_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Grid_streamCells_Params](l), err
}

// Grid_streamCells_Params_Future is a wrapper for a Grid_streamCells_Params promised by a client call.
type Grid_streamCells_Params_Future struct{ *capnp.Future }

func (f Grid_streamCells_Params_Future) Struct() (Grid_streamCells_Params, error) {
	p, err := f.Future.Ptr()
	return Grid_streamCells_Params(p.Struct()), err
}
func (p Grid_streamCells_Params_Future) Callback() Grid_Callback {
	return Grid_Callback(p.Future.Field(0, nil).Client())
}

type Grid_streamCells_Results capnp.Struct

// Grid_streamCells_Results_TypeID is the unique identifier for the type Grid_streamCells_Results.
const Grid_streamCells_Results_TypeID = 0x9b8dd52b78a7ebd2

func NewGrid_streamCells_Results(s *capnp.Segment) (Grid_streamCells_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_streamCells_Results(st), err
}

func NewRootGrid_streamCells_Results(s *capnp.Segment) (Grid_streamCells_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Grid_streamCells_Results(st), err
}

func ReadRootGrid_streamCells_Results(msg *capnp.Message) (Grid_streamCells_Results, error) {
	root, err := msg.Root()
	return Grid_streamCells_Results(root.Struct()), err
}

func (s Grid_streamCells_Results) String() string {
	str, _ := text.Marshal(0x9b8dd52b78a7ebd2, capnp.Struct(s))
	return str
}

func (s Grid_streamCells_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Grid_streamCells_Results) DecodeFromPtr(p capnp.Ptr) Grid_streamCells_Results {
	return Grid_streamCells_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Grid_streamCells_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Grid_streamCells_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Grid_streamCells_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Grid_streamCells_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Grid_streamCells_Results_List is a list of Grid_streamCells_Results.
type Grid_streamCells_Results_List = capnp.StructList[Grid_streamCells_Results]

// NewGrid_streamCells_Results creates a new list of Grid_streamCells_Results.
func NewGrid_streamCells_Results_List(s *capnp.Segment, sz int32) (Grid_streamCells_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Grid_streamCells_Results](l), err
}

// Grid_streamCells_Results_Future is a wrapper for a Grid_streamCells_Results promised by a client call.
type Grid_streamCells_Results_Future struct{ *capnp.Future }

func (f Grid_streamCells_Results_Future) Struct() (Grid_streamCells_Results, error) {
	p, err := f.Future.Ptr()
	return Grid_streamCells_Results(p.Struct()), err
}

const schema_d373e9739460aa23 = "x\xda\xa4Vo\x8c\x14g\x19\x7f\x9e\xf7\xdden\xef" +
	"v\x99{\xd9E\xdb\xb3\xf6\x12<\xa2\x9c\x82\xf4\xae\x1a" +
	"{\x1f\xdc\xbd\x1e\x96B\xbcz\xef\xe1\xb59\"I\xe7" +
	"v\x87e\xda\xd9\x19\x98\xd9\xbd=\x8c\x16\xc16\xd2\xe8" +
	"II\xd0JmLij)\x06c\xa1\xad)\xe8i" +
	"\xfbET\x8c-\x92\xb6R\xf9\xa4\"!\xd4\x98\xb6\xf1" +
	"_\xa5\x1d\xf3\xcc\xee;\xb3\xc7\xad\x10\xe2\x97\x9d\xd9\xf7" +
	"}\xe6y\xdf\xdf\xf3{\xfe\xfcV\xefN\x16\x127e" +
	"^\xd3\x81\xc9\xe7\x93\x8b\x82GN\xcch\xeb\x8e\xbf\xf6" +
	"\x0d\x90\xdd\x88\x00\x09\x0d`\xf0\x94\xd6\x83\x80\xd93Z" +
	"\x1e0\xd8\xbe\xfc\xeb\x93\x8e\xbb\xe1\x9b \xaeW\xfb\xff" +
	"\xd66\"$\x82\x8f?\xfc\x97W\xe7\xde\xda\xb3\x8f>" +
	"M4\xb6\xb2\xe7\xb4w\x00\x07/h\xbd\x08\x18\xfc\xee" +
	"\xe2\xc1\x99\x8f\xbe2\xfb]\x10\xdd\xeaSL-\xa3O" +
	"_\xea\xfd@\xff\xdc\xc0\x8b\xcd\x9d$\xd2\xd6\x85\x8ee" +
	"t\xea\x9b\x1dt\xea\xbe\xc9m\x97>\xfd\xf6\x8d\x8f7" +
	"\x0d\x18\x19\x88\x14#\x83\xa5\xa9:`\x80\xcf<Y\xae" +
	"\x9f}\xe3\xfb \xbaX\xf0\xa1\x1f\xdc\xbd\xcf\xbf\xe0\x9f" +
	"\x06\xc0\xec\x03\xa9\xe3\xd9\xd9\x14\xd9?\x98\xfa\x1a\x02\xfe" +
	"\xfcg\xb3/\xa4\xdf\xda\xf8d|\x87Jg'\xdd\xe1" +
	"\xe9\xc2'\xbeZdsO5\x8f\x08\xb7&:\x87\xe8" +
	"\x88M\x9d\xe7\x01\x83\x0f\x0e\x0d\xfe\xed\xfd\xb7\xad9L" +
	"\xf8X\xf0\x8b?\x19\xdf>\xea\xaf\xf8s\xf32\x9f\xe9" +
	"b\x98\x95]\x84y\xb4\x8b\xac\x83ES\x1d\x9b~\xff" +
	"\xc7c\x97Y\x87QY\x9e>\x9e]\x99\xa6\xb7\x15i" +
	"\xba\xfc\xe9\x89\x93_\xd9%oy\x15D7\x8fM\xe9" +
	"\xf2\xe9_g\xf7\x86\x86\xb3\xe9\xb5\xd9c\xf4\x16\x1c\xff" +
	"\xc3K\xef>s\xea\x87g\x9a\x0c5\x82u \x1dR" +
	"t(t\x17y\x10]|^,DfWvif" +
	"-\xc0\xe0\xba\xcc\x09\xccn_\xfca\x80\xa0>\xb8\xe6" +
	"\xf4]\xbf\xddq\xae\x15\xf7\xb6\xc5\xfd\xe4n\xfbbB" +
	"\xe2.\xef~\xdf\xbd\xee\x13\xe7C$\xcd\x98\x8d\xeaK" +
	"\xc8`B\xa7\xf3~\xf2\x8f-{\xb6\x9dx\xfaB#" +
	"%\x1a\x17:\xa2\x8f\x93\xc1\x9cN\xec=\xa2\xa5\x8d\x1b" +
	"\xdc\xfb.6=4,\xfe\xaa\x0f \xe0\xe0\xdf\xf5\xbb" +
	"(7\x1e\x9e\xdb\xdc\xb7\xffS\xfe\xdb\xady7!\xc2" +
	"\x0c\xd8$\xc8\xc7\xc5\x957\xdew\xec\xec\xf7\xfe\xd9\x92" +
	"<;\xc5\x12\"\xee\xc7\x9f\x7f\xbd\xdf=\x98\xf8W\xcb" +
	"\x8e%zh\xe7\xe53\xfe\xb9w2\xab\xde\xbb\x8c\x83" +
	"5Z\x02\x13Y)\x8ef'\x05\xc5vB\x9c\x87\x00" +
	"RA\xd9\xb3J\xab\x8a\xc6V\xeel\x1dZK\xef\x9e" +
	"\xe9\xbbv\xadj\xb9N\xdf\xb8\xe9\xd7l^\xf5e\x82" +
	"Sn#\x80\xc8,\x03\x90\x1d\x1ce\x8e\xa1\xe6\x99>" +
	"\xa6\x80a\x0a0\xf2\x93P~F\x0c\xdb\x9e2\x8a\xf7" +
	"\xae\xf2M\xa74b\xda\xb6\x1f\xf9\x8b\x8c\x992\x9e6" +
	"\xec\x9a9\\\xed\xcb\x8f\x19\x9eQ\xf1e.:\xf0\xcb" +
	"t\xe0\x0cGy?C\x81\x98\xa3@\x89\x9d\xb4\xf8%" +
	"\x8er7C\xc1X\x8e\x02,\x1e\xd8\x08 \xef\xe7(" +
	"\x1fb(x:\x87\x1cQ\xcc\x92\xe5n\x8er\x1fC" +
	"\x91x9\x87\x09D\xb1w\x17\x80|\x88\xa3|\x94@" +
	"\xb8u\x05B+\xbav\x04H\xc5\x01\xb8\xebD\x06F" +
	"\xb9\x8cz\\w\x80\xa8\x03\x06\x96S\xb4k%s\x18" +
	"\xcb\xe51\xc3\xab\xfa\x80\x08\x0c\xb1%*Qt\xfd\xaa" +
	"g\x1a\x958\x1c\x9a\xdd\x12\x8e\xc8\xcaq\xd7\x18U\xe3" +
	"N\x0aJd\xd5J\xc2PLB\xdeqKF\xd5\xc0" +
	"\xee\x98x@\xecnw\xb6\x0arHC\xd5'\x17\xca" +
	"\xe3\x0a\x0aS\x1fG\xb9\xba%\xca+\xd7\x03\xc8\x8fq" +
	"\x94\xb73\xd4\xa6\x0d\xbb\xcd\x19\x86B\x0c\x80\x8b\x01\xc7" +
	"8bw\xdc3\x00i1\xba\x08:[\x87\x86\xcbe" +
	"\xcf\xcc\x97\x0d\xca\xaf1DY\x08\xa9;\xd6\x0f\x80L" +
	"\x1c\xa1GR\x1c\xba\x15\x005q`\x19\x00v\x8a\xfd" +
	"\xf4\xc8\x88\xbd\xf4\xe0\xe2A2Y$v\x92\x09\x8a\xed" +
	"\xb4\x98\x10\xdb\x86\xe8xa\xd1\x9e.\x0czt\x88I" +
	"z\xa4\x84\xa4G\x97XG\x8f\xb4\x18\xee\x07\xd0\x1d\xd7" +
	"1\xf5\xfa\xf0tyG}\xd4,Y\x86\xa3U,G" +
	"\xab\x183\x9a_\xab\xe8\x16mX\xcd\x0dc\xba\x9c\xaf" +
	"\x84\xafz}\x03m\xd2O}\xd4rt\x8b~\xea\xa3" +
	"\xc6\x8cn\x8d\x1a3\x0b\x83]\xb2*\xa6\xe3S\x155" +
	"R\x1a`\xa1M\xd1v}\xd3\xaf\xde\xa9x\xc97\x88" +
	"\x91\xdd\x11/\x06\xf1\xf2\x05\x8erK\x0b/f\x0f\x80" +
	"\xbc\x9b\xa3\xb4[\xb2\xdf\xa2\xc5\x12G\xb9\x95\xb2\x9f\xe7" +
	"\x90\x03\x88\x0a1h7\xea\xa4=\x83\xbcJ\x8bQ\xdf" +
	"n.Ny\x0b\x17\xaf\x8d\xeb\x08cHx\x93o\xc3" +
	"\xab\x02\x91\xde\x82o\xa0\x1d\xbe\xa1\x18\x1f*x\x84d" +
	"\x0bGY%x\xd8\x80G\xbc\x87\xf0f\x18\xf6\x86\xd9" +
	"\xbd\x10`\xdes\xeb#\xae\xdd\x0e\x8fg\x1a\xb7yF" +
	"\x91\xf0t\x01\xc3.\xc0\xbc\x15r\xa1\xfe\xce\xcb\xdc\x10" +
	"M~<\xf4F \xaeV<\xb4\xf8\x11\x8e\xf2\xe6+" +
	"\xf4\x98\x05}P5M\x08\xe3\x94\xe0I\x80h\xd2\xa0" +
	"R!B\x8c\x03\x13)-P\x9d\x15\xd0/\xe0\x18^" +
	"\xa5\xddP\x1e\xf2\x8a\xdfz\xf1\xf5\xf1\x1d\xc3{#\x8a" +
	"\x9b\x1e\x07\x907s\x94\x05\x86A1\xba\x0e\xa0\x88'" +
	"6\x95\x1e`P1f\xeep?\xb7y\x04\xc9\xfd\x98" +
	"\xe9m\xd0L\xa7\xd4\xc0\x86\xa5\x96|W\xd1\x0b\xc7\\" +
	"\xcc\x8f\xb8~ \xe6D,\x1d\x8asI\x88]-\xf2" +
	"@\xac\xef\x0dYi\xc6>P\x19\xc5TJ\xc5A\x93" +
	"7\x84\x11S\xa3\x17\x95\xbc\x11\xa7\xbe\x08L\xfcJC" +
	"\x16\x8dTT\xa2O\xccm\x04&\x9e\xd3\x90+\x95\x14" +
	"\x0f\x7fq\x88\"}@\xc3x\xe0\xa2\x92m\xe2[S" +
	"\xc0\xc4\xac\x86\x18\x89@T\x8a\x8d\xfa\x13\x135\x0d\x93" +
	"\xd1\x8cG%9\x84u\x0f0ah\xb8(R5\xa8" +
	"D\xa2\x98 \x9f\xa3Z\xa0:\x03\xe4\x1b\xbd\xa10\x7f" +
	"\x1e\x150P\xfd\x05\x90\xfe\xa9\x81\x01\x9a]3\x0b\xb8" +
	"c:\xfa\xcc6\xaa\x9fu\x9d[]\xd0kN\xc9/" +
	"`\xa0R\x024\xdb\xf6\x0b(;\x10\x83Wn\x7ft" +
	"\xf2\xe4\xa9\x1f\x1d\x05\x80\xc0<\xf9\xc9\xb3\x8f\xbd~\xf0" +
	"Eh\xd7\xb1\x947\xf2EsD\xbf\xbc_\xf5\xfc\x7f" +
	"\xfd\xaa'\xae\xf2Fg\xfa\xcf\x9e\xdf\xdc\xb2\xfa\xd2\x9b" +
	"oD\xed\xcak\xb38\xd5v\xb1\xcd\xe7Wj\xd3\x8d" +
	"\xa9\x88\xf3\xea\xa3\xbf]a\xf7\xc7E\xa3{n=\x92" +
	"@z\xd1\xb5\xafM\x0f\x85\x93\x01\xe7M\xf6\x81\xe6d" +
	"\xefc\xd8[$\xa3\xb8\xd5\xb6\xf6\xaf\xb6\xad\xf6\xb2q" +
	"2\xd6\xdb\xd0R\xd7E\xde\xf7O\x01\xc8\xefp\x94O" +
	"\xc4\xf5~\xe0\x1e\x00\xf9\x18Gy\x98\xc8\xc1\x1c2D" +
	"q\x88\xa4\xd4S\x1c\xe5\xb3\xaa\xdb\"\x8a#\xd4\xd1\x0e" +
	"s\x94\xcf\x93\x94\xc2\x86\x94z\xce\x03\x90\xcfr\x94/" +
	"0\x14I\x96\xc3$\xa2\x98#}\xf5S\x8e\xf2\x97," +
	"L@\xdbuF\\\xd0\\\xaf\xd4\x86\x12\xab\xec\xb8\x9e" +
	"y\x87\x0b:\xa50)\xa7d(\x9d\xaeA\x7fyf" +
	"\xb5\xe69\xe3.\xf4R\x83\xf0#\xf5u\x0d\xbal^" +
	"b\x8f\x19\x9eF\x91k\xf2\x82(2\x043\xcdQ^" +
	"\xc70\xa8\xf9&\xf17\x02\xbd\xa6S5\xbd\xff\xed\xb4" +
	"EJ7\xa9\xbe\xb2\xd4kv\xe8\x85c\xa7\xd1\x00\x9b" +
	"\xa33\x1d\x04\x8dZ[\x12\xd7Z\x06\xdf\x0b\x9a\xc5\xb6" +
	"$.\xb6\x0c{7XXm\x19~)XXn\xb8" +
	"YM=\xb40\x09\x0c\x93\x80\xbcf\xa9\xc8s\xc7U" +
	"8\xff\x1b\x00\x00\xff\xff\x18:\x11?"

func init() {
	schemas.Register(schema_d373e9739460aa23,
		0x8cd7ba490778c79a,
		0x8e536f6e598b2579,
		0x948ff2bdd6e6972f,
		0x9b8dd52b78a7ebd2,
		0x9bc132bd2a1b1fcf,
		0xa21ef33efc715994,
		0xa5ecdc7767a6b301,
		0xa6005af20cc08dbe,
		0xa8bd0263833540b0,
		0xac444617ef333a1d,
		0xb9e2d85d086206ff,
		0xd639518280cb55d3,
		0xd9add1b3fdcfdbba,
		0xe42973b29661e3c6,
		0xe57fce57d3443377,
		0xe7a46f6b1610256f,
		0xe9b0c7718f68f6bb,
		0xeb7e6f1c610c079a,
		0xf37338992466bd97,
		0xf79edcb97e1e2deb,
		0xf804a76f2ada54b6,
		0xfe2e0dfae573d9d0)
}
