// Code generated by capnpc-go. DO NOT EDIT.

package weberest

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type DWLABImport struct{ Client *capnp.Client }

// DWLABImport_TypeID is the unique identifier for the type DWLABImport.
const DWLABImport_TypeID = 0xa1a4ad9d143eaa6f

func (c DWLABImport) ImportData(ctx context.Context, params func(DWLABImport_importData_Params) error) (DWLABImport_importData_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(DWLABImport_importData_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return DWLABImport_importData_Results_Future{Future: ans.Future()}, release
}

func (c DWLABImport) AddRef() DWLABImport {
	return DWLABImport{
		Client: c.Client.AddRef(),
	}
}

func (c DWLABImport) Release() {
	c.Client.Release()
}

// A DWLABImport_Server is a DWLABImport with a local implementation.
type DWLABImport_Server interface {
	ImportData(context.Context, DWLABImport_importData) error
}

// DWLABImport_NewServer creates a new Server from an implementation of DWLABImport_Server.
func DWLABImport_NewServer(s DWLABImport_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(DWLABImport_Methods(nil, s), s, c, policy)
}

// DWLABImport_ServerToClient creates a new Client from an implementation of DWLABImport_Server.
// The caller is responsible for calling Release on the returned Client.
func DWLABImport_ServerToClient(s DWLABImport_Server, policy *server.Policy) DWLABImport {
	return DWLABImport{Client: capnp.NewClient(DWLABImport_NewServer(s, policy))}
}

// DWLABImport_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func DWLABImport_Methods(methods []server.Method, s DWLABImport_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa1a4ad9d143eaa6f,
			MethodID:      0,
			InterfaceName: "web-berest-data-import.capnp:DWLABImport",
			MethodName:    "importData",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ImportData(ctx, DWLABImport_importData{call})
		},
	})

	return methods
}

// DWLABImport_importData holds the state for a server call to DWLABImport.importData.
// See server.Call for documentation.
type DWLABImport_importData struct {
	*server.Call
}

// Args returns the call's arguments.
func (c DWLABImport_importData) Args() DWLABImport_importData_Params {
	return DWLABImport_importData_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c DWLABImport_importData) AllocResults() (DWLABImport_importData_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{Struct: r}, err
}

type DWLABImport_importData_Params struct{ capnp.Struct }

// DWLABImport_importData_Params_TypeID is the unique identifier for the type DWLABImport_importData_Params.
const DWLABImport_importData_Params_TypeID = 0xeb03972caa23c7d2

func NewDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params{st}, err
}

func NewRootDWLABImport_importData_Params(s *capnp.Segment) (DWLABImport_importData_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return DWLABImport_importData_Params{st}, err
}

func ReadRootDWLABImport_importData_Params(msg *capnp.Message) (DWLABImport_importData_Params, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Params{root.Struct()}, err
}

func (s DWLABImport_importData_Params) String() string {
	str, _ := text.Marshal(0xeb03972caa23c7d2, s.Struct)
	return str
}

func (s DWLABImport_importData_Params) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s DWLABImport_importData_Params) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DWLABImport_importData_Params) Dwla() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasDwla() bool {
	return s.Struct.HasPtr(1)
}

func (s DWLABImport_importData_Params) DwlaBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetDwla(v string) error {
	return s.Struct.SetText(1, v)
}

func (s DWLABImport_importData_Params) Dwlb() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s DWLABImport_importData_Params) HasDwlb() bool {
	return s.Struct.HasPtr(2)
}

func (s DWLABImport_importData_Params) DwlbBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Params) SetDwlb(v string) error {
	return s.Struct.SetText(2, v)
}

// DWLABImport_importData_Params_List is a list of DWLABImport_importData_Params.
type DWLABImport_importData_Params_List struct{ capnp.List }

// NewDWLABImport_importData_Params creates a new list of DWLABImport_importData_Params.
func NewDWLABImport_importData_Params_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return DWLABImport_importData_Params_List{l}, err
}

func (s DWLABImport_importData_Params_List) At(i int) DWLABImport_importData_Params {
	return DWLABImport_importData_Params{s.List.Struct(i)}
}

func (s DWLABImport_importData_Params_List) Set(i int, v DWLABImport_importData_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DWLABImport_importData_Params_List) String() string {
	str, _ := text.MarshalList(0xeb03972caa23c7d2, s.List)
	return str
}

// DWLABImport_importData_Params_Future is a wrapper for a DWLABImport_importData_Params promised by a client call.
type DWLABImport_importData_Params_Future struct{ *capnp.Future }

func (p DWLABImport_importData_Params_Future) Struct() (DWLABImport_importData_Params, error) {
	s, err := p.Future.Struct()
	return DWLABImport_importData_Params{s}, err
}

type DWLABImport_importData_Results struct{ capnp.Struct }

// DWLABImport_importData_Results_TypeID is the unique identifier for the type DWLABImport_importData_Results.
const DWLABImport_importData_Results_TypeID = 0xb9bc568c49fcca07

func NewDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{st}, err
}

func NewRootDWLABImport_importData_Results(s *capnp.Segment) (DWLABImport_importData_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return DWLABImport_importData_Results{st}, err
}

func ReadRootDWLABImport_importData_Results(msg *capnp.Message) (DWLABImport_importData_Results, error) {
	root, err := msg.Root()
	return DWLABImport_importData_Results{root.Struct()}, err
}

func (s DWLABImport_importData_Results) String() string {
	str, _ := text.Marshal(0xb9bc568c49fcca07, s.Struct)
	return str
}

func (s DWLABImport_importData_Results) Id() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s DWLABImport_importData_Results) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s DWLABImport_importData_Results) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s DWLABImport_importData_Results) SetId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s DWLABImport_importData_Results) SuccessA() bool {
	return s.Struct.Bit(0)
}

func (s DWLABImport_importData_Results) SetSuccessA(v bool) {
	s.Struct.SetBit(0, v)
}

func (s DWLABImport_importData_Results) SuccessB() bool {
	return s.Struct.Bit(1)
}

func (s DWLABImport_importData_Results) SetSuccessB(v bool) {
	s.Struct.SetBit(1, v)
}

// DWLABImport_importData_Results_List is a list of DWLABImport_importData_Results.
type DWLABImport_importData_Results_List struct{ capnp.List }

// NewDWLABImport_importData_Results creates a new list of DWLABImport_importData_Results.
func NewDWLABImport_importData_Results_List(s *capnp.Segment, sz int32) (DWLABImport_importData_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return DWLABImport_importData_Results_List{l}, err
}

func (s DWLABImport_importData_Results_List) At(i int) DWLABImport_importData_Results {
	return DWLABImport_importData_Results{s.List.Struct(i)}
}

func (s DWLABImport_importData_Results_List) Set(i int, v DWLABImport_importData_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s DWLABImport_importData_Results_List) String() string {
	str, _ := text.MarshalList(0xb9bc568c49fcca07, s.List)
	return str
}

// DWLABImport_importData_Results_Future is a wrapper for a DWLABImport_importData_Results promised by a client call.
type DWLABImport_importData_Results_Future struct{ *capnp.Future }

func (p DWLABImport_importData_Results_Future) Struct() (DWLABImport_importData_Results, error) {
	s, err := p.Future.Struct()
	return DWLABImport_importData_Results{s}, err
}

const schema_c4b468a2826bb79b = "x\xda\x9c\x8f\xcf\xcb\x12Q\x14\x86\xdf\xf7\xdc\x19\x07\xc3" +
	"\x88\xcb\xb8\x0a\\\x15\x84\x92\xa2H\x9b\x16\xa1b\x94b" +
	"07\xa2 \xda\\\x9d\x81$MqF\xdc\xb7n\xdf" +
	"\"Z\x14\xad\x84p\x13D\xd02\x08\xda\xd5\xb2e\xd0" +
	"\xaa\xbf \x08&&\xf1\xc7\xe6\xe3\x83ow\xcf\xc3{" +
	"\xeey\xde\xfa9\xb6\xa4\xe1^q\x00Sws\xe9l" +
	"}\xa3\xf8\xea\xdd\xdb\xd7\xd0%\x95\xbe\xfc\xf0\xe4\xd9\x9b" +
	"\xc7\xef?\x03l\xfea\x9f\xfey\xf1\x00?/\xb7\xfc" +
	"k\xd9+\xf5\xbe\xfe\xed=\xbf\xff\xe9#L\x99\x04\\" +
	"z@\xb3$?\x09\xfa\x0d\xd9\x80\xe9\xf7/\x97\xd6W" +
	"_\xa8\xdf\xd0\xe5,\xa0\xb2\xc07\xf9\x91\x05~\xc9\x06" +
	"a\xba\x8a\x86\xd5a\xb4\x88\x9c8\xa9\x866\xb1\xd5\xf1" +
	"t>[$\xb5\x91\x9d?\x9d_\xef>\x18\xb4;\xbd" +
	"\xff\x04\x08H\xe3(\x17\xd8\xff\xca\x9d\x80\xd6\x0f!:" +
	"\xef\xa5\xdb\xed\xae\x85Jl\x8b\x01\xb9?\x90;\xed@" +
	"m\xb7\x9b\xd8\xcbw\xa3x\xe9M\x92\xd8\x14\x94\x038" +
	"\x04\xf4\xcd\x8b\x80i)\x9a\x81\x90,f}u\xaf\x0f" +
	"\x98\xdb\x8a\xe6\x9eP\x0b\x8b\x14@\x9b\x0c\x06\x8a\xe6\x91" +
	"P\x8dC\x16 ,\x80i\xbc\x1c\x8d\xa28n\x03 " +
	"!\xe4\x81u\x8e\xd9\x99\x84\x03\xbb\xb0jz\x92\xaf\xde" +
	"\x0bW\x00\xd3U4A&,[\xe1;\x95C\x8b#" +
	"\xe1\x0b\xe1jb\x8f\x87\xe1n\xf8\x17\x00\x00\xff\xff\xaf" +
	"\x13\x88\x9e"

func init() {
	schemas.Register(schema_c4b468a2826bb79b,
		0xa1a4ad9d143eaa6f,
		0xb9bc568c49fcca07,
		0xeb03972caa23c7d2)
}
