// Code generated by capnpc-go. DO NOT EDIT.

package models

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	climate "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/climate"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	management "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/management"
	soil "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/soil"
)

type XYResult struct{ capnp.Struct }

// XYResult_TypeID is the unique identifier for the type XYResult.
const XYResult_TypeID = 0x851d47c6ccdecf08

func NewXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func NewRootXYResult(s *capnp.Segment) (XYResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYResult{st}, err
}

func ReadRootXYResult(msg *capnp.Message) (XYResult, error) {
	root, err := msg.Root()
	return XYResult{root.Struct()}, err
}

func (s XYResult) String() string {
	str, _ := text.Marshal(0x851d47c6ccdecf08, s.Struct)
	return str
}

func (s XYResult) Xs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasXs() bool {
	return s.Struct.HasPtr(0)
}

func (s XYResult) SetXs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewXs sets the xs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewXs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s XYResult) Ys() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.Float64List{List: p.List()}, err
}

func (s XYResult) HasYs() bool {
	return s.Struct.HasPtr(1)
}

func (s XYResult) SetYs(v capnp.Float64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewYs sets the ys field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s XYResult) NewYs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYResult_List is a list of XYResult.
type XYResult_List struct{ capnp.List }

// NewXYResult creates a new list of XYResult.
func NewXYResult_List(s *capnp.Segment, sz int32) (XYResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYResult_List{l}, err
}

func (s XYResult_List) At(i int) XYResult { return XYResult{s.List.Struct(i)} }

func (s XYResult_List) Set(i int, v XYResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYResult_List) String() string {
	str, _ := text.MarshalList(0x851d47c6ccdecf08, s.List)
	return str
}

// XYResult_Future is a wrapper for a XYResult promised by a client call.
type XYResult_Future struct{ *capnp.Future }

func (p XYResult_Future) Struct() (XYResult, error) {
	s, err := p.Future.Struct()
	return XYResult{s}, err
}

type Stat struct{ capnp.Struct }

// Stat_TypeID is the unique identifier for the type Stat.
const Stat_TypeID = 0xa6be2e805ea10a68

func NewStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func NewRootStat(s *capnp.Segment) (Stat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Stat{st}, err
}

func ReadRootStat(msg *capnp.Message) (Stat, error) {
	root, err := msg.Root()
	return Stat{root.Struct()}, err
}

func (s Stat) String() string {
	str, _ := text.Marshal(0xa6be2e805ea10a68, s.Struct)
	return str
}

func (s Stat) Type() Stat_Type {
	return Stat_Type(s.Struct.Uint16(0) ^ 3)
}

func (s Stat) SetType(v Stat_Type) {
	s.Struct.SetUint16(0, uint16(v)^3)
}

func (s Stat) Vs() (capnp.Float64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.Float64List{List: p.List()}, err
}

func (s Stat) HasVs() bool {
	return s.Struct.HasPtr(0)
}

func (s Stat) SetVs(v capnp.Float64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewVs sets the vs field to a newly
// allocated capnp.Float64List, preferring placement in s's segment.
func (s Stat) NewVs(n int32) (capnp.Float64List, error) {
	l, err := capnp.NewFloat64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Float64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Stat_List is a list of Stat.
type Stat_List struct{ capnp.List }

// NewStat creates a new list of Stat.
func NewStat_List(s *capnp.Segment, sz int32) (Stat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Stat_List{l}, err
}

func (s Stat_List) At(i int) Stat { return Stat{s.List.Struct(i)} }

func (s Stat_List) Set(i int, v Stat) error { return s.List.SetStruct(i, v.Struct) }

func (s Stat_List) String() string {
	str, _ := text.MarshalList(0xa6be2e805ea10a68, s.List)
	return str
}

// Stat_Future is a wrapper for a Stat promised by a client call.
type Stat_Future struct{ *capnp.Future }

func (p Stat_Future) Struct() (Stat, error) {
	s, err := p.Future.Struct()
	return Stat{s}, err
}

type Stat_Type uint16

// Stat_Type_TypeID is the unique identifier for the type Stat_Type.
const Stat_Type_TypeID = 0xbd33bb6d8cbd9ed2

// Values of Stat_Type.
const (
	Stat_Type_min    Stat_Type = 0
	Stat_Type_max    Stat_Type = 1
	Stat_Type_sd     Stat_Type = 2
	Stat_Type_avg    Stat_Type = 3
	Stat_Type_median Stat_Type = 4
)

// String returns the enum's constant name.
func (c Stat_Type) String() string {
	switch c {
	case Stat_Type_min:
		return "min"
	case Stat_Type_max:
		return "max"
	case Stat_Type_sd:
		return "sd"
	case Stat_Type_avg:
		return "avg"
	case Stat_Type_median:
		return "median"

	default:
		return ""
	}
}

// Stat_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Stat_TypeFromString(c string) Stat_Type {
	switch c {
	case "min":
		return Stat_Type_min
	case "max":
		return Stat_Type_max
	case "sd":
		return Stat_Type_sd
	case "avg":
		return Stat_Type_avg
	case "median":
		return Stat_Type_median

	default:
		return 0
	}
}

type Stat_Type_List struct{ capnp.List }

func NewStat_Type_List(s *capnp.Segment, sz int32) (Stat_Type_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return Stat_Type_List{l.List}, err
}

func (l Stat_Type_List) At(i int) Stat_Type {
	ul := capnp.UInt16List{List: l.List}
	return Stat_Type(ul.At(i))
}

func (l Stat_Type_List) Set(i int, v Stat_Type) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type XYPlusResult struct{ capnp.Struct }

// XYPlusResult_TypeID is the unique identifier for the type XYPlusResult.
const XYPlusResult_TypeID = 0x8f86b66260d02d1d

func NewXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func NewRootXYPlusResult(s *capnp.Segment) (XYPlusResult, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return XYPlusResult{st}, err
}

func ReadRootXYPlusResult(msg *capnp.Message) (XYPlusResult, error) {
	root, err := msg.Root()
	return XYPlusResult{root.Struct()}, err
}

func (s XYPlusResult) String() string {
	str, _ := text.Marshal(0x8f86b66260d02d1d, s.Struct)
	return str
}

func (s XYPlusResult) Xy() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s XYPlusResult) HasXy() bool {
	return s.Struct.HasPtr(0)
}

func (s XYPlusResult) SetXy(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewXy sets the xy field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s XYPlusResult) NewXy() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s XYPlusResult) Stats() (Stat_List, error) {
	p, err := s.Struct.Ptr(1)
	return Stat_List{List: p.List()}, err
}

func (s XYPlusResult) HasStats() bool {
	return s.Struct.HasPtr(1)
}

func (s XYPlusResult) SetStats(v Stat_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewStats sets the stats field to a newly
// allocated Stat_List, preferring placement in s's segment.
func (s XYPlusResult) NewStats(n int32) (Stat_List, error) {
	l, err := NewStat_List(s.Struct.Segment(), n)
	if err != nil {
		return Stat_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// XYPlusResult_List is a list of XYPlusResult.
type XYPlusResult_List struct{ capnp.List }

// NewXYPlusResult creates a new list of XYPlusResult.
func NewXYPlusResult_List(s *capnp.Segment, sz int32) (XYPlusResult_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return XYPlusResult_List{l}, err
}

func (s XYPlusResult_List) At(i int) XYPlusResult { return XYPlusResult{s.List.Struct(i)} }

func (s XYPlusResult_List) Set(i int, v XYPlusResult) error { return s.List.SetStruct(i, v.Struct) }

func (s XYPlusResult_List) String() string {
	str, _ := text.MarshalList(0x8f86b66260d02d1d, s.List)
	return str
}

// XYPlusResult_Future is a wrapper for a XYPlusResult promised by a client call.
type XYPlusResult_Future struct{ *capnp.Future }

func (p XYPlusResult_Future) Struct() (XYPlusResult, error) {
	s, err := p.Future.Struct()
	return XYPlusResult{s}, err
}

func (p XYPlusResult_Future) Xy() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance struct{ Client *capnp.Client }

// ClimateInstance_TypeID is the unique identifier for the type ClimateInstance.
const ClimateInstance_TypeID = 0xdfcfeb783c4948fc

func (c ClimateInstance) Run(ctx context.Context, params func(ClimateInstance_run_Params) error) (ClimateInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) RunSet(ctx context.Context, params func(ClimateInstance_runSet_Params) error) (ClimateInstance_runSet_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ClimateInstance_runSet_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return ClimateInstance_runSet_Results_Future{Future: ans.Future()}, release
}
func (c ClimateInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c ClimateInstance) AddRef() ClimateInstance {
	return ClimateInstance{
		Client: c.Client.AddRef(),
	}
}

func (c ClimateInstance) Release() {
	c.Client.Release()
}

// A ClimateInstance_Server is a ClimateInstance with a local implementation.
type ClimateInstance_Server interface {
	Run(context.Context, ClimateInstance_run) error

	RunSet(context.Context, ClimateInstance_runSet) error

	Info(context.Context, common.Identifiable_info) error
}

// ClimateInstance_NewServer creates a new Server from an implementation of ClimateInstance_Server.
func ClimateInstance_NewServer(s ClimateInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ClimateInstance_Methods(nil, s), s, c, policy)
}

// ClimateInstance_ServerToClient creates a new Client from an implementation of ClimateInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func ClimateInstance_ServerToClient(s ClimateInstance_Server, policy *server.Policy) ClimateInstance {
	return ClimateInstance{Client: capnp.NewClient(ClimateInstance_NewServer(s, policy))}
}

// ClimateInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ClimateInstance_Methods(methods []server.Method, s ClimateInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      0,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, ClimateInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdfcfeb783c4948fc,
			MethodID:      1,
			InterfaceName: "model.capnp:ClimateInstance",
			MethodName:    "runSet",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RunSet(ctx, ClimateInstance_runSet{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// ClimateInstance_run holds the state for a server call to ClimateInstance.run.
// See server.Call for documentation.
type ClimateInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_run) Args() ClimateInstance_run_Params {
	return ClimateInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_run) AllocResults() (ClimateInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{Struct: r}, err
}

// ClimateInstance_runSet holds the state for a server call to ClimateInstance.runSet.
// See server.Call for documentation.
type ClimateInstance_runSet struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ClimateInstance_runSet) Args() ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c ClimateInstance_runSet) AllocResults() (ClimateInstance_runSet_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{Struct: r}, err
}

type ClimateInstance_run_Params struct{ capnp.Struct }

// ClimateInstance_run_Params_TypeID is the unique identifier for the type ClimateInstance_run_Params.
const ClimateInstance_run_Params_TypeID = 0xdf787fd9d51f235b

func NewClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func NewRootClimateInstance_run_Params(s *capnp.Segment) (ClimateInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Params{st}, err
}

func ReadRootClimateInstance_run_Params(msg *capnp.Message) (ClimateInstance_run_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Params{root.Struct()}, err
}

func (s ClimateInstance_run_Params) String() string {
	str, _ := text.Marshal(0xdf787fd9d51f235b, s.Struct)
	return str
}

func (s ClimateInstance_run_Params) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(0)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s ClimateInstance_run_Params) HasTimeSeries() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Params) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// ClimateInstance_run_Params_List is a list of ClimateInstance_run_Params.
type ClimateInstance_run_Params_List struct{ capnp.List }

// NewClimateInstance_run_Params creates a new list of ClimateInstance_run_Params.
func NewClimateInstance_run_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Params_List{l}, err
}

func (s ClimateInstance_run_Params_List) At(i int) ClimateInstance_run_Params {
	return ClimateInstance_run_Params{s.List.Struct(i)}
}

func (s ClimateInstance_run_Params_List) Set(i int, v ClimateInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0xdf787fd9d51f235b, s.List)
	return str
}

// ClimateInstance_run_Params_Future is a wrapper for a ClimateInstance_run_Params promised by a client call.
type ClimateInstance_run_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Params_Future) Struct() (ClimateInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Params{s}, err
}

func (p ClimateInstance_run_Params_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(0, nil).Client()}
}

type ClimateInstance_run_Results struct{ capnp.Struct }

// ClimateInstance_run_Results_TypeID is the unique identifier for the type ClimateInstance_run_Results.
const ClimateInstance_run_Results_TypeID = 0xcc39e47cdead74c4

func NewClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func NewRootClimateInstance_run_Results(s *capnp.Segment) (ClimateInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_run_Results{st}, err
}

func ReadRootClimateInstance_run_Results(msg *capnp.Message) (ClimateInstance_run_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_run_Results{root.Struct()}, err
}

func (s ClimateInstance_run_Results) String() string {
	str, _ := text.Marshal(0xcc39e47cdead74c4, s.Struct)
	return str
}

func (s ClimateInstance_run_Results) Result() (XYResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_run_Results) SetResult(v XYResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYResult struct, preferring placement in s's segment.
func (s ClimateInstance_run_Results) NewResult() (XYResult, error) {
	ss, err := NewXYResult(s.Struct.Segment())
	if err != nil {
		return XYResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_run_Results_List is a list of ClimateInstance_run_Results.
type ClimateInstance_run_Results_List struct{ capnp.List }

// NewClimateInstance_run_Results creates a new list of ClimateInstance_run_Results.
func NewClimateInstance_run_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_run_Results_List{l}, err
}

func (s ClimateInstance_run_Results_List) At(i int) ClimateInstance_run_Results {
	return ClimateInstance_run_Results{s.List.Struct(i)}
}

func (s ClimateInstance_run_Results_List) Set(i int, v ClimateInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xcc39e47cdead74c4, s.List)
	return str
}

// ClimateInstance_run_Results_Future is a wrapper for a ClimateInstance_run_Results promised by a client call.
type ClimateInstance_run_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_run_Results_Future) Struct() (ClimateInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_run_Results{s}, err
}

func (p ClimateInstance_run_Results_Future) Result() XYResult_Future {
	return XYResult_Future{Future: p.Future.Field(0, nil)}
}

type ClimateInstance_runSet_Params struct{ capnp.Struct }

// ClimateInstance_runSet_Params_TypeID is the unique identifier for the type ClimateInstance_runSet_Params.
const ClimateInstance_runSet_Params_TypeID = 0xaa9d146226037822

func NewClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func NewRootClimateInstance_runSet_Params(s *capnp.Segment) (ClimateInstance_runSet_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Params{st}, err
}

func ReadRootClimateInstance_runSet_Params(msg *capnp.Message) (ClimateInstance_runSet_Params, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Params{root.Struct()}, err
}

func (s ClimateInstance_runSet_Params) String() string {
	str, _ := text.Marshal(0xaa9d146226037822, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Params) Dataset() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s ClimateInstance_runSet_Params) HasDataset() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Params) SetDataset(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewDataset sets the dataset field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ClimateInstance_runSet_Params) NewDataset(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ClimateInstance_runSet_Params_List is a list of ClimateInstance_runSet_Params.
type ClimateInstance_runSet_Params_List struct{ capnp.List }

// NewClimateInstance_runSet_Params creates a new list of ClimateInstance_runSet_Params.
func NewClimateInstance_runSet_Params_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Params_List{l}, err
}

func (s ClimateInstance_runSet_Params_List) At(i int) ClimateInstance_runSet_Params {
	return ClimateInstance_runSet_Params{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Params_List) Set(i int, v ClimateInstance_runSet_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Params_List) String() string {
	str, _ := text.MarshalList(0xaa9d146226037822, s.List)
	return str
}

// ClimateInstance_runSet_Params_Future is a wrapper for a ClimateInstance_runSet_Params promised by a client call.
type ClimateInstance_runSet_Params_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Params_Future) Struct() (ClimateInstance_runSet_Params, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Params{s}, err
}

type ClimateInstance_runSet_Results struct{ capnp.Struct }

// ClimateInstance_runSet_Results_TypeID is the unique identifier for the type ClimateInstance_runSet_Results.
const ClimateInstance_runSet_Results_TypeID = 0xe22282cb3449bb4a

func NewClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func NewRootClimateInstance_runSet_Results(s *capnp.Segment) (ClimateInstance_runSet_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ClimateInstance_runSet_Results{st}, err
}

func ReadRootClimateInstance_runSet_Results(msg *capnp.Message) (ClimateInstance_runSet_Results, error) {
	root, err := msg.Root()
	return ClimateInstance_runSet_Results{root.Struct()}, err
}

func (s ClimateInstance_runSet_Results) String() string {
	str, _ := text.Marshal(0xe22282cb3449bb4a, s.Struct)
	return str
}

func (s ClimateInstance_runSet_Results) Result() (XYPlusResult, error) {
	p, err := s.Struct.Ptr(0)
	return XYPlusResult{Struct: p.Struct()}, err
}

func (s ClimateInstance_runSet_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ClimateInstance_runSet_Results) SetResult(v XYPlusResult) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResult sets the result field to a newly
// allocated XYPlusResult struct, preferring placement in s's segment.
func (s ClimateInstance_runSet_Results) NewResult() (XYPlusResult, error) {
	ss, err := NewXYPlusResult(s.Struct.Segment())
	if err != nil {
		return XYPlusResult{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ClimateInstance_runSet_Results_List is a list of ClimateInstance_runSet_Results.
type ClimateInstance_runSet_Results_List struct{ capnp.List }

// NewClimateInstance_runSet_Results creates a new list of ClimateInstance_runSet_Results.
func NewClimateInstance_runSet_Results_List(s *capnp.Segment, sz int32) (ClimateInstance_runSet_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ClimateInstance_runSet_Results_List{l}, err
}

func (s ClimateInstance_runSet_Results_List) At(i int) ClimateInstance_runSet_Results {
	return ClimateInstance_runSet_Results{s.List.Struct(i)}
}

func (s ClimateInstance_runSet_Results_List) Set(i int, v ClimateInstance_runSet_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ClimateInstance_runSet_Results_List) String() string {
	str, _ := text.MarshalList(0xe22282cb3449bb4a, s.List)
	return str
}

// ClimateInstance_runSet_Results_Future is a wrapper for a ClimateInstance_runSet_Results promised by a client call.
type ClimateInstance_runSet_Results_Future struct{ *capnp.Future }

func (p ClimateInstance_runSet_Results_Future) Struct() (ClimateInstance_runSet_Results, error) {
	s, err := p.Future.Struct()
	return ClimateInstance_runSet_Results{s}, err
}

func (p ClimateInstance_runSet_Results_Future) Result() XYPlusResult_Future {
	return XYPlusResult_Future{Future: p.Future.Field(0, nil)}
}

type Env struct{ capnp.Struct }

// Env_TypeID is the unique identifier for the type Env.
const Env_TypeID = 0xb7fc866ef1127f7c

func NewEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func NewRootEnv(s *capnp.Segment) (Env, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Env{st}, err
}

func ReadRootEnv(msg *capnp.Message) (Env, error) {
	root, err := msg.Root()
	return Env{root.Struct()}, err
}

func (s Env) String() string {
	str, _ := text.Marshal(0xb7fc866ef1127f7c, s.Struct)
	return str
}

func (s Env) Rest() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Env) HasRest() bool {
	return s.Struct.HasPtr(0)
}

func (s Env) SetRest(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Env) TimeSeries() climate.TimeSeries {
	p, _ := s.Struct.Ptr(1)
	return climate.TimeSeries{Client: p.Interface().Client()}
}

func (s Env) HasTimeSeries() bool {
	return s.Struct.HasPtr(1)
}

func (s Env) SetTimeSeries(v climate.TimeSeries) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Env) SoilProfile() (soil.Profile, error) {
	p, err := s.Struct.Ptr(2)
	return soil.Profile{Struct: p.Struct()}, err
}

func (s Env) HasSoilProfile() bool {
	return s.Struct.HasPtr(2)
}

func (s Env) SetSoilProfile(v soil.Profile) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSoilProfile sets the soilProfile field to a newly
// allocated soil.Profile struct, preferring placement in s's segment.
func (s Env) NewSoilProfile() (soil.Profile, error) {
	ss, err := soil.NewProfile(s.Struct.Segment())
	if err != nil {
		return soil.Profile{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Env) MgmtEvents() (management.Event_List, error) {
	p, err := s.Struct.Ptr(3)
	return management.Event_List{List: p.List()}, err
}

func (s Env) HasMgmtEvents() bool {
	return s.Struct.HasPtr(3)
}

func (s Env) SetMgmtEvents(v management.Event_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewMgmtEvents sets the mgmtEvents field to a newly
// allocated management.Event_List, preferring placement in s's segment.
func (s Env) NewMgmtEvents(n int32) (management.Event_List, error) {
	l, err := management.NewEvent_List(s.Struct.Segment(), n)
	if err != nil {
		return management.Event_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Env_List is a list of Env.
type Env_List struct{ capnp.List }

// NewEnv creates a new list of Env.
func NewEnv_List(s *capnp.Segment, sz int32) (Env_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Env_List{l}, err
}

func (s Env_List) At(i int) Env { return Env{s.List.Struct(i)} }

func (s Env_List) Set(i int, v Env) error { return s.List.SetStruct(i, v.Struct) }

func (s Env_List) String() string {
	str, _ := text.MarshalList(0xb7fc866ef1127f7c, s.List)
	return str
}

// Env_Future is a wrapper for a Env promised by a client call.
type Env_Future struct{ *capnp.Future }

func (p Env_Future) Struct() (Env, error) {
	s, err := p.Future.Struct()
	return Env{s}, err
}

func (p Env_Future) Rest() *capnp.Future {
	return p.Future.Field(0, nil)
}

func (p Env_Future) TimeSeries() climate.TimeSeries {
	return climate.TimeSeries{Client: p.Future.Field(1, nil).Client()}
}

func (p Env_Future) SoilProfile() soil.Profile_Future {
	return soil.Profile_Future{Future: p.Future.Field(2, nil)}
}

type EnvInstance struct{ Client *capnp.Client }

// EnvInstance_TypeID is the unique identifier for the type EnvInstance.
const EnvInstance_TypeID = 0xa5feedafa5ec5c4a

func (c EnvInstance) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstance) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstance) AddRef() EnvInstance {
	return EnvInstance{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstance) Release() {
	c.Client.Release()
}

// A EnvInstance_Server is a EnvInstance with a local implementation.
type EnvInstance_Server interface {
	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstance_NewServer creates a new Server from an implementation of EnvInstance_Server.
func EnvInstance_NewServer(s EnvInstance_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstance_Methods(nil, s), s, c, policy)
}

// EnvInstance_ServerToClient creates a new Client from an implementation of EnvInstance_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstance_ServerToClient(s EnvInstance_Server, policy *server.Policy) EnvInstance {
	return EnvInstance{Client: capnp.NewClient(EnvInstance_NewServer(s, policy))}
}

// EnvInstance_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstance_Methods(methods []server.Method, s EnvInstance_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstance_run holds the state for a server call to EnvInstance.run.
// See server.Call for documentation.
type EnvInstance_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstance_run) Args() EnvInstance_run_Params {
	return EnvInstance_run_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstance_run) AllocResults() (EnvInstance_run_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{Struct: r}, err
}

type EnvInstance_run_Params struct{ capnp.Struct }

// EnvInstance_run_Params_TypeID is the unique identifier for the type EnvInstance_run_Params.
const EnvInstance_run_Params_TypeID = 0x811895634b6bd959

func NewEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func NewRootEnvInstance_run_Params(s *capnp.Segment) (EnvInstance_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Params{st}, err
}

func ReadRootEnvInstance_run_Params(msg *capnp.Message) (EnvInstance_run_Params, error) {
	root, err := msg.Root()
	return EnvInstance_run_Params{root.Struct()}, err
}

func (s EnvInstance_run_Params) String() string {
	str, _ := text.Marshal(0x811895634b6bd959, s.Struct)
	return str
}

func (s EnvInstance_run_Params) Env() (Env, error) {
	p, err := s.Struct.Ptr(0)
	return Env{Struct: p.Struct()}, err
}

func (s EnvInstance_run_Params) HasEnv() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Params) SetEnv(v Env) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEnv sets the env field to a newly
// allocated Env struct, preferring placement in s's segment.
func (s EnvInstance_run_Params) NewEnv() (Env, error) {
	ss, err := NewEnv(s.Struct.Segment())
	if err != nil {
		return Env{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// EnvInstance_run_Params_List is a list of EnvInstance_run_Params.
type EnvInstance_run_Params_List struct{ capnp.List }

// NewEnvInstance_run_Params creates a new list of EnvInstance_run_Params.
func NewEnvInstance_run_Params_List(s *capnp.Segment, sz int32) (EnvInstance_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Params_List{l}, err
}

func (s EnvInstance_run_Params_List) At(i int) EnvInstance_run_Params {
	return EnvInstance_run_Params{s.List.Struct(i)}
}

func (s EnvInstance_run_Params_List) Set(i int, v EnvInstance_run_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Params_List) String() string {
	str, _ := text.MarshalList(0x811895634b6bd959, s.List)
	return str
}

// EnvInstance_run_Params_Future is a wrapper for a EnvInstance_run_Params promised by a client call.
type EnvInstance_run_Params_Future struct{ *capnp.Future }

func (p EnvInstance_run_Params_Future) Struct() (EnvInstance_run_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Params{s}, err
}

func (p EnvInstance_run_Params_Future) Env() Env_Future {
	return Env_Future{Future: p.Future.Field(0, nil)}
}

type EnvInstance_run_Results struct{ capnp.Struct }

// EnvInstance_run_Results_TypeID is the unique identifier for the type EnvInstance_run_Results.
const EnvInstance_run_Results_TypeID = 0xa931ae5cae90ece0

func NewEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func NewRootEnvInstance_run_Results(s *capnp.Segment) (EnvInstance_run_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstance_run_Results{st}, err
}

func ReadRootEnvInstance_run_Results(msg *capnp.Message) (EnvInstance_run_Results, error) {
	root, err := msg.Root()
	return EnvInstance_run_Results{root.Struct()}, err
}

func (s EnvInstance_run_Results) String() string {
	str, _ := text.Marshal(0xa931ae5cae90ece0, s.Struct)
	return str
}

func (s EnvInstance_run_Results) Result() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s EnvInstance_run_Results) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstance_run_Results) SetResult(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// EnvInstance_run_Results_List is a list of EnvInstance_run_Results.
type EnvInstance_run_Results_List struct{ capnp.List }

// NewEnvInstance_run_Results creates a new list of EnvInstance_run_Results.
func NewEnvInstance_run_Results_List(s *capnp.Segment, sz int32) (EnvInstance_run_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstance_run_Results_List{l}, err
}

func (s EnvInstance_run_Results_List) At(i int) EnvInstance_run_Results {
	return EnvInstance_run_Results{s.List.Struct(i)}
}

func (s EnvInstance_run_Results_List) Set(i int, v EnvInstance_run_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstance_run_Results_List) String() string {
	str, _ := text.MarshalList(0xa931ae5cae90ece0, s.List)
	return str
}

// EnvInstance_run_Results_Future is a wrapper for a EnvInstance_run_Results promised by a client call.
type EnvInstance_run_Results_Future struct{ *capnp.Future }

func (p EnvInstance_run_Results_Future) Struct() (EnvInstance_run_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstance_run_Results{s}, err
}

func (p EnvInstance_run_Results_Future) Result() *capnp.Future {
	return p.Future.Field(0, nil)
}

type EnvInstanceProxy struct{ Client *capnp.Client }

// EnvInstanceProxy_TypeID is the unique identifier for the type EnvInstanceProxy.
const EnvInstanceProxy_TypeID = 0x87cbebfc1164a24a

func (c EnvInstanceProxy) RegisterEnvInstance(ctx context.Context, params func(EnvInstanceProxy_registerEnvInstance_Params) error) (EnvInstanceProxy_registerEnvInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstanceProxy_registerEnvInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstanceProxy_registerEnvInstance_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Run(ctx context.Context, params func(EnvInstance_run_Params) error) (EnvInstance_run_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(EnvInstance_run_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return EnvInstance_run_Results_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c EnvInstanceProxy) Stop(ctx context.Context, params func(common.Stopable_stop_Params) error) (common.Stopable_stop_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Stopable_stop_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.Stopable_stop_Results_Future{Future: ans.Future()}, release
}

func (c EnvInstanceProxy) AddRef() EnvInstanceProxy {
	return EnvInstanceProxy{
		Client: c.Client.AddRef(),
	}
}

func (c EnvInstanceProxy) Release() {
	c.Client.Release()
}

// A EnvInstanceProxy_Server is a EnvInstanceProxy with a local implementation.
type EnvInstanceProxy_Server interface {
	RegisterEnvInstance(context.Context, EnvInstanceProxy_registerEnvInstance) error

	Run(context.Context, EnvInstance_run) error

	Info(context.Context, common.Identifiable_info) error

	Stop(context.Context, common.Stopable_stop) error
}

// EnvInstanceProxy_NewServer creates a new Server from an implementation of EnvInstanceProxy_Server.
func EnvInstanceProxy_NewServer(s EnvInstanceProxy_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(EnvInstanceProxy_Methods(nil, s), s, c, policy)
}

// EnvInstanceProxy_ServerToClient creates a new Client from an implementation of EnvInstanceProxy_Server.
// The caller is responsible for calling Release on the returned Client.
func EnvInstanceProxy_ServerToClient(s EnvInstanceProxy_Server, policy *server.Policy) EnvInstanceProxy {
	return EnvInstanceProxy{Client: capnp.NewClient(EnvInstanceProxy_NewServer(s, policy))}
}

// EnvInstanceProxy_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func EnvInstanceProxy_Methods(methods []server.Method, s EnvInstanceProxy_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87cbebfc1164a24a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstanceProxy",
			MethodName:    "registerEnvInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterEnvInstance(ctx, EnvInstanceProxy_registerEnvInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa5feedafa5ec5c4a,
			MethodID:      0,
			InterfaceName: "model.capnp:EnvInstance",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, EnvInstance_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce7e4202f09e314a,
			MethodID:      0,
			InterfaceName: "common.capnp:Stopable",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, common.Stopable_stop{call})
		},
	})

	return methods
}

// EnvInstanceProxy_registerEnvInstance holds the state for a server call to EnvInstanceProxy.registerEnvInstance.
// See server.Call for documentation.
type EnvInstanceProxy_registerEnvInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c EnvInstanceProxy_registerEnvInstance) Args() EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c EnvInstanceProxy_registerEnvInstance) AllocResults() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{Struct: r}, err
}

type EnvInstanceProxy_registerEnvInstance_Params struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Params_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Params.
const EnvInstanceProxy_registerEnvInstance_Params_TypeID = 0xd10259a623f95bb4

func NewEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Params(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Params{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Params(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Params, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Params{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params) String() string {
	str, _ := text.Marshal(0xd10259a623f95bb4, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Params) Instance() EnvInstance {
	p, _ := s.Struct.Ptr(0)
	return EnvInstance{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Params) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Params) SetInstance(v EnvInstance) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Params_List is a list of EnvInstanceProxy_registerEnvInstance_Params.
type EnvInstanceProxy_registerEnvInstance_Params_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Params creates a new list of EnvInstanceProxy_registerEnvInstance_Params.
func NewEnvInstanceProxy_registerEnvInstance_Params_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Params_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) At(i int) EnvInstanceProxy_registerEnvInstance_Params {
	return EnvInstanceProxy_registerEnvInstance_Params{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Params_List) String() string {
	str, _ := text.MarshalList(0xd10259a623f95bb4, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Params_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Params promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Params_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Params, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Params{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Params_Future) Instance() EnvInstance {
	return EnvInstance{Client: p.Future.Field(0, nil).Client()}
}

type EnvInstanceProxy_registerEnvInstance_Results struct{ capnp.Struct }

// EnvInstanceProxy_registerEnvInstance_Results_TypeID is the unique identifier for the type EnvInstanceProxy_registerEnvInstance_Results.
const EnvInstanceProxy_registerEnvInstance_Results_TypeID = 0xdf50acfa56a9674e

func NewEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func NewRootEnvInstanceProxy_registerEnvInstance_Results(s *capnp.Segment) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return EnvInstanceProxy_registerEnvInstance_Results{st}, err
}

func ReadRootEnvInstanceProxy_registerEnvInstance_Results(msg *capnp.Message) (EnvInstanceProxy_registerEnvInstance_Results, error) {
	root, err := msg.Root()
	return EnvInstanceProxy_registerEnvInstance_Results{root.Struct()}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results) String() string {
	str, _ := text.Marshal(0xdf50acfa56a9674e, s.Struct)
	return str
}

func (s EnvInstanceProxy_registerEnvInstance_Results) Unregister() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s EnvInstanceProxy_registerEnvInstance_Results) HasUnregister() bool {
	return s.Struct.HasPtr(0)
}

func (s EnvInstanceProxy_registerEnvInstance_Results) SetUnregister(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// EnvInstanceProxy_registerEnvInstance_Results_List is a list of EnvInstanceProxy_registerEnvInstance_Results.
type EnvInstanceProxy_registerEnvInstance_Results_List struct{ capnp.List }

// NewEnvInstanceProxy_registerEnvInstance_Results creates a new list of EnvInstanceProxy_registerEnvInstance_Results.
func NewEnvInstanceProxy_registerEnvInstance_Results_List(s *capnp.Segment, sz int32) (EnvInstanceProxy_registerEnvInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return EnvInstanceProxy_registerEnvInstance_Results_List{l}, err
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) At(i int) EnvInstanceProxy_registerEnvInstance_Results {
	return EnvInstanceProxy_registerEnvInstance_Results{s.List.Struct(i)}
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) Set(i int, v EnvInstanceProxy_registerEnvInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s EnvInstanceProxy_registerEnvInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xdf50acfa56a9674e, s.List)
	return str
}

// EnvInstanceProxy_registerEnvInstance_Results_Future is a wrapper for a EnvInstanceProxy_registerEnvInstance_Results promised by a client call.
type EnvInstanceProxy_registerEnvInstance_Results_Future struct{ *capnp.Future }

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Struct() (EnvInstanceProxy_registerEnvInstance_Results, error) {
	s, err := p.Future.Struct()
	return EnvInstanceProxy_registerEnvInstance_Results{s}, err
}

func (p EnvInstanceProxy_registerEnvInstance_Results_Future) Unregister() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

type InstanceFactory struct{ Client *capnp.Client }

// InstanceFactory_TypeID is the unique identifier for the type InstanceFactory.
const InstanceFactory_TypeID = 0xce552eef738a45ea

func (c InstanceFactory) ModelInfo(ctx context.Context, params func(InstanceFactory_modelInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_modelInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstance(ctx context.Context, params func(InstanceFactory_newInstance_Params) error) (InstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstance_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) NewInstances(ctx context.Context, params func(InstanceFactory_newInstances_Params) error) (InstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(InstanceFactory_newInstances_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return InstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release
}
func (c InstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c InstanceFactory) AddRef() InstanceFactory {
	return InstanceFactory{
		Client: c.Client.AddRef(),
	}
}

func (c InstanceFactory) Release() {
	c.Client.Release()
}

// A InstanceFactory_Server is a InstanceFactory with a local implementation.
type InstanceFactory_Server interface {
	ModelInfo(context.Context, InstanceFactory_modelInfo) error

	NewInstance(context.Context, InstanceFactory_newInstance) error

	NewInstances(context.Context, InstanceFactory_newInstances) error

	Info(context.Context, common.Identifiable_info) error
}

// InstanceFactory_NewServer creates a new Server from an implementation of InstanceFactory_Server.
func InstanceFactory_NewServer(s InstanceFactory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(InstanceFactory_Methods(nil, s), s, c, policy)
}

// InstanceFactory_ServerToClient creates a new Client from an implementation of InstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func InstanceFactory_ServerToClient(s InstanceFactory_Server, policy *server.Policy) InstanceFactory {
	return InstanceFactory{Client: capnp.NewClient(InstanceFactory_NewServer(s, policy))}
}

// InstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func InstanceFactory_Methods(methods []server.Method, s InstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      0,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "modelInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelInfo(ctx, InstanceFactory_modelInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      1,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, InstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce552eef738a45ea,
			MethodID:      2,
			InterfaceName: "model.capnp:InstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, InstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// InstanceFactory_modelInfo holds the state for a server call to InstanceFactory.modelInfo.
// See server.Call for documentation.
type InstanceFactory_modelInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_modelInfo) Args() InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_modelInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// InstanceFactory_newInstance holds the state for a server call to InstanceFactory.newInstance.
// See server.Call for documentation.
type InstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstance) Args() InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstance) AllocResults() (InstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{Struct: r}, err
}

// InstanceFactory_newInstances holds the state for a server call to InstanceFactory.newInstances.
// See server.Call for documentation.
type InstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c InstanceFactory_newInstances) Args() InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c InstanceFactory_newInstances) AllocResults() (InstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{Struct: r}, err
}

type InstanceFactory_modelInfo_Params struct{ capnp.Struct }

// InstanceFactory_modelInfo_Params_TypeID is the unique identifier for the type InstanceFactory_modelInfo_Params.
const InstanceFactory_modelInfo_Params_TypeID = 0xbf49e08cc9412aaf

func NewInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func NewRootInstanceFactory_modelInfo_Params(s *capnp.Segment) (InstanceFactory_modelInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_modelInfo_Params{st}, err
}

func ReadRootInstanceFactory_modelInfo_Params(msg *capnp.Message) (InstanceFactory_modelInfo_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_modelInfo_Params{root.Struct()}, err
}

func (s InstanceFactory_modelInfo_Params) String() string {
	str, _ := text.Marshal(0xbf49e08cc9412aaf, s.Struct)
	return str
}

// InstanceFactory_modelInfo_Params_List is a list of InstanceFactory_modelInfo_Params.
type InstanceFactory_modelInfo_Params_List struct{ capnp.List }

// NewInstanceFactory_modelInfo_Params creates a new list of InstanceFactory_modelInfo_Params.
func NewInstanceFactory_modelInfo_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_modelInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_modelInfo_Params_List{l}, err
}

func (s InstanceFactory_modelInfo_Params_List) At(i int) InstanceFactory_modelInfo_Params {
	return InstanceFactory_modelInfo_Params{s.List.Struct(i)}
}

func (s InstanceFactory_modelInfo_Params_List) Set(i int, v InstanceFactory_modelInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_modelInfo_Params_List) String() string {
	str, _ := text.MarshalList(0xbf49e08cc9412aaf, s.List)
	return str
}

// InstanceFactory_modelInfo_Params_Future is a wrapper for a InstanceFactory_modelInfo_Params promised by a client call.
type InstanceFactory_modelInfo_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_modelInfo_Params_Future) Struct() (InstanceFactory_modelInfo_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_modelInfo_Params{s}, err
}

type InstanceFactory_newInstance_Params struct{ capnp.Struct }

// InstanceFactory_newInstance_Params_TypeID is the unique identifier for the type InstanceFactory_newInstance_Params.
const InstanceFactory_newInstance_Params_TypeID = 0x9ee4515395213845

func NewInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func NewRootInstanceFactory_newInstance_Params(s *capnp.Segment) (InstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return InstanceFactory_newInstance_Params{st}, err
}

func ReadRootInstanceFactory_newInstance_Params(msg *capnp.Message) (InstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x9ee4515395213845, s.Struct)
	return str
}

// InstanceFactory_newInstance_Params_List is a list of InstanceFactory_newInstance_Params.
type InstanceFactory_newInstance_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Params creates a new list of InstanceFactory_newInstance_Params.
func NewInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return InstanceFactory_newInstance_Params_List{l}, err
}

func (s InstanceFactory_newInstance_Params_List) At(i int) InstanceFactory_newInstance_Params {
	return InstanceFactory_newInstance_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Params_List) Set(i int, v InstanceFactory_newInstance_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Params_List) String() string {
	str, _ := text.MarshalList(0x9ee4515395213845, s.List)
	return str
}

// InstanceFactory_newInstance_Params_Future is a wrapper for a InstanceFactory_newInstance_Params promised by a client call.
type InstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Params_Future) Struct() (InstanceFactory_newInstance_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Params{s}, err
}

type InstanceFactory_newInstance_Results struct{ capnp.Struct }

// InstanceFactory_newInstance_Results_TypeID is the unique identifier for the type InstanceFactory_newInstance_Results.
const InstanceFactory_newInstance_Results_TypeID = 0xf013eda158070488

func NewInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func NewRootInstanceFactory_newInstance_Results(s *capnp.Segment) (InstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstance_Results{st}, err
}

func ReadRootInstanceFactory_newInstance_Results(msg *capnp.Message) (InstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstance_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf013eda158070488, s.Struct)
	return str
}

func (s InstanceFactory_newInstance_Results) Instance() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s InstanceFactory_newInstance_Results) HasInstance() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstance_Results) SetInstance(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// InstanceFactory_newInstance_Results_List is a list of InstanceFactory_newInstance_Results.
type InstanceFactory_newInstance_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstance_Results creates a new list of InstanceFactory_newInstance_Results.
func NewInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstance_Results_List{l}, err
}

func (s InstanceFactory_newInstance_Results_List) At(i int) InstanceFactory_newInstance_Results {
	return InstanceFactory_newInstance_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstance_Results_List) Set(i int, v InstanceFactory_newInstance_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstance_Results_List) String() string {
	str, _ := text.MarshalList(0xf013eda158070488, s.List)
	return str
}

// InstanceFactory_newInstance_Results_Future is a wrapper for a InstanceFactory_newInstance_Results promised by a client call.
type InstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstance_Results_Future) Struct() (InstanceFactory_newInstance_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstance_Results{s}, err
}

func (p InstanceFactory_newInstance_Results_Future) Instance() *capnp.Future {
	return p.Future.Field(0, nil)
}

type InstanceFactory_newInstances_Params struct{ capnp.Struct }

// InstanceFactory_newInstances_Params_TypeID is the unique identifier for the type InstanceFactory_newInstances_Params.
const InstanceFactory_newInstances_Params_TypeID = 0xd9fa9ece71d1db50

func NewInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func NewRootInstanceFactory_newInstances_Params(s *capnp.Segment) (InstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return InstanceFactory_newInstances_Params{st}, err
}

func ReadRootInstanceFactory_newInstances_Params(msg *capnp.Message) (InstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Params{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0xd9fa9ece71d1db50, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(s.Struct.Uint16(0))
}

func (s InstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	s.Struct.SetUint16(0, uint16(v))
}

// InstanceFactory_newInstances_Params_List is a list of InstanceFactory_newInstances_Params.
type InstanceFactory_newInstances_Params_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Params creates a new list of InstanceFactory_newInstances_Params.
func NewInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return InstanceFactory_newInstances_Params_List{l}, err
}

func (s InstanceFactory_newInstances_Params_List) At(i int) InstanceFactory_newInstances_Params {
	return InstanceFactory_newInstances_Params{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Params_List) Set(i int, v InstanceFactory_newInstances_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Params_List) String() string {
	str, _ := text.MarshalList(0xd9fa9ece71d1db50, s.List)
	return str
}

// InstanceFactory_newInstances_Params_Future is a wrapper for a InstanceFactory_newInstances_Params promised by a client call.
type InstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Params_Future) Struct() (InstanceFactory_newInstances_Params, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Params{s}, err
}

type InstanceFactory_newInstances_Results struct{ capnp.Struct }

// InstanceFactory_newInstances_Results_TypeID is the unique identifier for the type InstanceFactory_newInstances_Results.
const InstanceFactory_newInstances_Results_TypeID = 0xaf9a1cb72ba68156

func NewInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func NewRootInstanceFactory_newInstances_Results(s *capnp.Segment) (InstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return InstanceFactory_newInstances_Results{st}, err
}

func ReadRootInstanceFactory_newInstances_Results(msg *capnp.Message) (InstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return InstanceFactory_newInstances_Results{root.Struct()}, err
}

func (s InstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xaf9a1cb72ba68156, s.Struct)
	return str
}

func (s InstanceFactory_newInstances_Results) Instances() (common.ListEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.ListEntry_List{List: p.List()}, err
}

func (s InstanceFactory_newInstances_Results) HasInstances() bool {
	return s.Struct.HasPtr(0)
}

func (s InstanceFactory_newInstances_Results) SetInstances(v common.ListEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInstances sets the instances field to a newly
// allocated common.ListEntry_List, preferring placement in s's segment.
func (s InstanceFactory_newInstances_Results) NewInstances(n int32) (common.ListEntry_List, error) {
	l, err := common.NewListEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return common.ListEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// InstanceFactory_newInstances_Results_List is a list of InstanceFactory_newInstances_Results.
type InstanceFactory_newInstances_Results_List struct{ capnp.List }

// NewInstanceFactory_newInstances_Results creates a new list of InstanceFactory_newInstances_Results.
func NewInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (InstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return InstanceFactory_newInstances_Results_List{l}, err
}

func (s InstanceFactory_newInstances_Results_List) At(i int) InstanceFactory_newInstances_Results {
	return InstanceFactory_newInstances_Results{s.List.Struct(i)}
}

func (s InstanceFactory_newInstances_Results_List) Set(i int, v InstanceFactory_newInstances_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s InstanceFactory_newInstances_Results_List) String() string {
	str, _ := text.MarshalList(0xaf9a1cb72ba68156, s.List)
	return str
}

// InstanceFactory_newInstances_Results_Future is a wrapper for a InstanceFactory_newInstances_Results promised by a client call.
type InstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (p InstanceFactory_newInstances_Results_Future) Struct() (InstanceFactory_newInstances_Results, error) {
	s, err := p.Future.Struct()
	return InstanceFactory_newInstances_Results{s}, err
}

const schema_9273388a9624d430 = "x\xda\xacW]l\x13\xd9\x15>g\xae\xcd\xa4mv" +
	"=\xd7\xe3\xc44J\x1a\x91\xf5v\x1b\xaaD\xa4\xe9J" +
	"lT\x14;m\x16\x9cJ\xc5\xe3\x00J\xf8\xa9p\x92" +
	"!\x98z\xc6\xc13\x0eN\x85HA\x0a\x94\x08TD" +
	"E\x1f\x10M\x05\x12T\xa0BT\xd4\x96\x07\x94\"\xa2" +
	"\xfeA\xf8iZ\xf2\x10*~E\xd5\x0a\x88\x0a\x8fE" +
	"\x94\xa9\xee\xd83\x1e;N\x93J\xab<d|}\xe6" +
	"\xdc\xef~\xe7;\xdf\xb9^u\x7fY\x90kr\x1b\xb5" +
	"\x00\x9d:\xba\x97\x19\xdd\xb3\xdf\xfbv\xef\x89\xe5\xfb\x81" +
	".G\x007\xf2\x026\xff\xddS\x85\x80\xe2\x9c\xa7\x15" +
	"\xd0(\xbb\xfb\xf0\xd6\x1f\xd6\xd6\x8c\x00-Gc\xd5\xbd" +
	"\xc0OFWk\xc7\xc1\xcd\xf1\x00\xe2\x1a\xe1\x82\xd8." +
	"\xb0\xa7\x90\xb0\x07\xd0\xe88\xd3G\xdf\xbe\x98:\x04\xb4" +
	"\x9c\xe4c\x01\x04\x14'\x84\xe7\xe2\x0d3\xf4\xf7\xc2Z" +
	"\xb1\x86\xfaE\x85\xfa\x8d\x9a\x86?o\xef\xf9\xcd\xc1\x1f" +
	"\x95J\xae\xd0\x9b\xe2\x10eOi\xca\x92\xb7\xaf^q" +
	"\xa2Sz6\x06\xb4\x1a\x01\\\x0c\xe8\x13\xfa}\x04\x97" +
	"\xd1\xb1\xf5\xe5\xd9\xf1\xb9wgKl{\x9bN\x8a3" +
	"f\x92i\xbaV\\\xe1\xfdHl\xf2\xfa\x8d\x9d\x9f?" +
	"\xfd\xdd\x1f4\xfe\xf6\x1cH\xe5\xe8\xdc\x17Y`\x93w" +
	"T\xfc\xc4\xebg\x87\xf2\xb2}\x1f\xbf<vi\xeb\xa5" +
	"\xa6\xf3N\x86.z\xeb\x18C\xbf\xf62\x86\xea2\xe4" +
	"\xcb=\xbe\x9f^\xc8\x023\x934\xcfx\xa3,\xe0\x89" +
	"\x19\xb0i\xff\xb9\xaf^\xa9>9n\x07\x08\xd8L\xc5" +
	"Q\x16\xb0Bd\x01{\x87\xbd\xaf\xd5\x83o\xaf\x14\xd1" +
	"\xc0\xce(\x8e\x88\x07\xc4\xc3\"\x036\"\xfe\x03@<" +
	"\xea\xf3\x18\x7f\x19\x9b8\xa2\\m\x9e\x00J\xb9\xfca" +
	"\x00\xc5\x11\xdfe\xf1\xa8\x8f\x05\x1f\xf6\x0d\x03\x1a\xe3+" +
	"C7\x8e<\x0e_sp6\xe1\xdb\xc58\xfb\x9d~" +
	"\xf1\xe1\xdeg\x9f\xdcr\x82>\xefkc\x98~\xe9c" +
	"\x98\x9e\xb7\x8fj\xffj\xdcx\xa7\x04\xa9\xd3\xbe\xa7\xe2" +
	"\x03s\x97Y\xdf\x1f\xc5\xeb\x15~\xf1F\x85\xc7\xf8\xd5" +
	"\x96\x7f\x7fp\xae\x9b\x9b\x06Zc\x9f\xf2z\xc5$\xcb" +
	"8]\xc12F\xfe6\xbd\xfb\xce\xd8\x9bY\x90\xaa\xd1" +
	"B\xb3\xa6\xf2\x00\x0b\x08W\xb2\x80\xef\xf4\x9f\xdf\xf4\xe6" +
	"\x17\x91G\xce\x0c\xbb+o\xb2\x80\x113`\xcb\x07\xb5" +
	"3\xb3\xc3\x99G\x05\xa0+[L\xd0f\xc0\xdbu\xe1" +
	"od^\xdc}T\x04\x1a\xc5\x99\xca\xa7\xe2\x93J\x06" +
	"\xf9A\xe5!\xb1\xc1\xef\x070:\xae\x86\xbf>u\xa0" +
	"\xee\xa93[\x8d\x7f3\xcbV\xefg\xd9~\xe8\xe2\xbb" +
	"N\xcf\x89\xaf\x9cu\x0b\xfbM\xc0\x1b\xfd\xad`\x98\x7f" +
	"\xef\x1bJ\xb2ON4\xf6\xc6\xc8\x80:\xd0\xd2\xae\x0e" +
	"\x86UM\x8f\xa9\xbdrc*\xad\x06\"\xb1T\x8c(" +
	"\x9a\xe4\".\x00\x17\x02\xd0\xf7\xea\x00\xa42\x82\xd2\xb7" +
	"8\xe4eu\x10\x85|\xfd\x01\x82H\xb1Vrq\xe8" +
	"\\\xa4\xe8\x97\\\x88\x88\x11\x82\xe8E\xcc+\x1e\x00\x05" +
	"@\x1b\x022\x08]\xddQ\xd9\xa3\xa5\x13z\x04Q*" +
	"\xb3\xf7\xad\xaf\x02\x90\x02\x04\xa5 \x87\x14\xd1\xc7j@" +
	"\xd7\xb0\xc5\xd5\x04\xa5\x0d\x1c\x92\x8c\x86\xef\x83\xb9\xc7\x17" +
	"\x80c\x8fd\xa8x\xc5\xde\x89+:l\xc4\x93Jf" +
	"\x86\xd8\x8e.\xe2\x06\xb0\xd5\x80VQ)=\x03\x10\xf2" +
	"a(\x80\xf4c\xdeH\xc9\xfdqM\x97Sh\xe5\xe0" +
	"\xd5^\xd9:\xba\xed#&\xc6R\x8bAd\x84\xe4y" +
	"\xc8\xd3\xe6\xa0\x86\xe2GR\x19\xa3\x8d\xd1\x8d(\x09\x16" +
	"{V&\x00\xf4\xba\x0b\x17BeH\xddQ\xfa\xb9\x16" +
	"#*kzX\x1dH\x03\xea\xad\xeb\xd3\xfa@Z/" +
	"<|Ww$\x91\xd6\xa22c\x1a`\x01\xaeW9" +
	"\xb8n\xf8\x1a\x80\xf4\x95l\xe1If\x08\x85\xbc\xb7\x02" +
	"\xb22\xd6jzL\xb7\x19\x17\x9c\x9d]\xc0\xbd\x8bm" +
	"o\x11\xffi\xacWO\xa6\x86\x1aUy\x8f\xb5\x14h" +
	"e\xaaS\xb4\x05\x8b\x05\xf9:Y\xfe\x8f\x96\xcdQZ" +
	"\x07\x10*\xc7P5\xd2\x06\x9eO\xa5\xd5y\xcc\x16T" +
	"\xc5\xb9\x18D\xc6\xb71\xb3\xeeT\xf7\xd4\xf4\xf8e`" +
	"M\xd64\xf6\x8ak\xdbwg\xa9\xd4\x9a\x0a\xee\xd4c" +
	":\x80Y\xe1\xbc\xd5\xe1J\xcf\x86\xa1\x01\xd9b\x19\x91" +
	"\xd6\xaf\xcc\xb3l\x93\\\x95'\xd9\xa3\x0f\x0d\xc8\xe8\xb0" +
	"K@\xb7\x87\x00\x92\xc1\x05e]\xb2\x87Y\x8d\xf9\x84" +
	"^\xd0\xc4-\xb9&\xf6q\xd8\x9a25\x90\x93\x92\xa3" +
	"3\xbd\xc55\xfbf\"\xae\xc4t\xd9\x99\xbcS\xd6M" +
	"\x8fP\xb0 }[.}\x80\xc3\xe1\xbe\x98\x1e\xd3d" +
	"\xdd\x82L\x8d\x7f*\xea\xbb\xe0\xcf\x06\x7f^\xac\x0b\xf7" +
	"\"\xba\xd0\x02Y\xb5j\x8c\xdb\xfc^Q\x00\xa9\x9c\xa0" +
	"\xd4\xc5\xa1\x11\xb7\x14\x82\x0e\x1d~\xc9\x1d|\xf0\xe95" +
	"\x9c,\xb0'\xc7\xe2<{\xb2g\x07@\x01@\xcc\xb1" +
	"k\xeaO\xb0\x11\xc4X\x1d\xb7\x12\x94v:\xbaE\xde" +
	"\x0c \xf5\x11\x94\x068\xa4\x1c\xe7C\x0e\x80*=\x00" +
	"R\x82\xa0\x94\xe1\x90\x12\xe2C\x02@\xd3,R'(" +
	"\x1d\xe3\xd0\x93\x925\xdd\xc4\xe0\xb0O\xb3\x10z\\\x91" +
	";\xe5T\x1c\x88\xac\x15qH\x01\x0d-\x19ODR" +
	"\xc9\x1d\xc0\xc7\x132\x0aF\xfd\xa9\xd0\x8f\xcfN\xf6\x1b" +
	"\xb9\xd64\x94~Eo\x1f\x94U \xce\x0em\xfb\xd3" +
	"\xc9\xfe\xff\xccm;\x95\xabD\xc8\x85\x14\xa3Ny\xcf" +
	"\xd7um#S1# {\xa4\x8f\xebL\x08\x0d\xec" +
	"\x1fG?\xac\x02@Bk\xd8'\x17\xadh\x01\xe0\x95" +
	"\xb8\xca+\xb1\x0c\xd1\xfa\xf8\xd8`\x7f\xab\"\xf7\xc5c" +
	"\xea\xff\xf6\x02\xf3\xcb\xb0\xba#\x19\x88\xc4<\x05N\xb0" +
	"\x90\x0cme,\xa2\xf1y\x9eU\xe81N |2" +
	"e\xce\x83r\xd3g\xac\x9b\x08\xfe\xf5>y7\xb5o" +
	"\xea\x1e\x95\xa2\x00\xa1\x08\xdbh\x1b\x8f\xf9\xeb\x1dZS" +
	"\x97J=f@h;\xd2\xdd<r\xf6\xfd\x01\xad\xfb" +
	"\x14\x95w\x01\x84\xfa0\xa4#\x1d\xe1\x0d\xeb\xd4\x80I" +
	"K\xa4\xb6\x10\xb3\xeedX\xcd\x00\xceiS\x10\xb4\xe8" +
	"\x9b\x1e\xd6H\xff\xcf\xab\xa6\x8d9,\xd1\x14\xc9.\xc3" +
	"\xf6b\xd3\xd5l\x1a\x97\x15\xcfU6V\x1b\xadi\xe9" +
	"\xf8\"\xeb\x1a\x85\x05\xeb\xc8u\xf2vg'\x03 u" +
	"\xda\xd2g6*\xcd\xbeY\xba\xf7\x94\xc0{\x1c\x80\xed" +
	"$Ush\xa8i\xa5GN\xad\xdf\x81\xd6\x1b\xa8!" +
	"\x01\x0e\x89c\x93\xa5\x93S\xd2\xe86\xe7\xe8Y\xce\xa1" +
	"\x91V\xb3\xaf\x01\x91SH\x0d\xff\xebk\xd2mW\xfd" +
	"1\xcb\x0e\x0a\xe6A\xa9~\xc9\x8d\xd8\x85\xd2/\xe26" +
	"\x05M\xe3L\xcft\x99\xbdJ\xb0\xa6\xb1\xee\xbbh\xdd" +
	"\xd6iS\x1dp\xf4C\xd6/\xd6\xaf\x0e\xb4\xae\xb1\xf4" +
	"\x8b-\xc0\xd1\xf7\xcc\x91\x1d\xc4\xd6\xecl\x99/\xbf%" +
	"M$\x93>\xb2\xe8\xc4\x13\xf2?\xe0\x8a\xdc`19" +
	"\x94\xf4\x9b\x0e\x07\x81N\xf9\x16\x8f\x14/\xe0\x7f\x03\x00" +
	"\x00\xff\xff\xfd\x920\xee"

func init() {
	schemas.Register(schema_9273388a9624d430,
		0x811895634b6bd959,
		0x851d47c6ccdecf08,
		0x87cbebfc1164a24a,
		0x8f86b66260d02d1d,
		0x9ee4515395213845,
		0xa5feedafa5ec5c4a,
		0xa6be2e805ea10a68,
		0xa931ae5cae90ece0,
		0xaa9d146226037822,
		0xaf9a1cb72ba68156,
		0xb7fc866ef1127f7c,
		0xbd33bb6d8cbd9ed2,
		0xbf49e08cc9412aaf,
		0xcc39e47cdead74c4,
		0xce552eef738a45ea,
		0xd10259a623f95bb4,
		0xd9fa9ece71d1db50,
		0xdf50acfa56a9674e,
		0xdf787fd9d51f235b,
		0xdfcfeb783c4948fc,
		0xe22282cb3449bb4a,
		0xf013eda158070488)
}
