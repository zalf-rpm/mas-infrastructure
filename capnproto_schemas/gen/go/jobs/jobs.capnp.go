// Code generated by capnpc-go. DO NOT EDIT.

package jobs

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
)

type Job struct{ capnp.Struct }

// Job_TypeID is the unique identifier for the type Job.
const Job_TypeID = 0xa05b60b71ca38848

func NewJob(s *capnp.Segment) (Job, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Job{st}, err
}

func NewRootJob(s *capnp.Segment) (Job, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Job{st}, err
}

func ReadRootJob(msg *capnp.Message) (Job, error) {
	root, err := msg.Root()
	return Job{root.Struct()}, err
}

func (s Job) String() string {
	str, _ := text.Marshal(0xa05b60b71ca38848, s.Struct)
	return str
}

func (s Job) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Job) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Job) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Job) NoFurtherJobs() bool {
	return s.Struct.Bit(0)
}

func (s Job) SetNoFurtherJobs(v bool) {
	s.Struct.SetBit(0, v)
}

// Job_List is a list of Job.
type Job_List struct{ capnp.List }

// NewJob creates a new list of Job.
func NewJob_List(s *capnp.Segment, sz int32) (Job_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Job_List{l}, err
}

func (s Job_List) At(i int) Job { return Job{s.List.Struct(i)} }

func (s Job_List) Set(i int, v Job) error { return s.List.SetStruct(i, v.Struct) }

func (s Job_List) String() string {
	str, _ := text.MarshalList(0xa05b60b71ca38848, s.List)
	return str
}

// Job_Future is a wrapper for a Job promised by a client call.
type Job_Future struct{ *capnp.Future }

func (p Job_Future) Struct() (Job, error) {
	s, err := p.Future.Struct()
	return Job{s}, err
}

func (p Job_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xb8745454d013cbf0

func (c Service) NextJob(ctx context.Context, params func(Service_nextJob_Params) error) (Service_nextJob_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8745454d013cbf0,
			MethodID:      0,
			InterfaceName: "jobs.capnp:Service",
			MethodName:    "nextJob",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_nextJob_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_nextJob_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	NextJob(context.Context, Service_nextJob) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8745454d013cbf0,
			MethodID:      0,
			InterfaceName: "jobs.capnp:Service",
			MethodName:    "nextJob",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextJob(ctx, Service_nextJob{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_nextJob holds the state for a server call to Service.nextJob.
// See server.Call for documentation.
type Service_nextJob struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_nextJob) Args() Service_nextJob_Params {
	return Service_nextJob_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_nextJob) AllocResults() (Service_nextJob_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{Struct: r}, err
}

type Service_nextJob_Params struct{ capnp.Struct }

// Service_nextJob_Params_TypeID is the unique identifier for the type Service_nextJob_Params.
const Service_nextJob_Params_TypeID = 0xea3ba97e764a031c

func NewService_nextJob_Params(s *capnp.Segment) (Service_nextJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextJob_Params{st}, err
}

func NewRootService_nextJob_Params(s *capnp.Segment) (Service_nextJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextJob_Params{st}, err
}

func ReadRootService_nextJob_Params(msg *capnp.Message) (Service_nextJob_Params, error) {
	root, err := msg.Root()
	return Service_nextJob_Params{root.Struct()}, err
}

func (s Service_nextJob_Params) String() string {
	str, _ := text.Marshal(0xea3ba97e764a031c, s.Struct)
	return str
}

// Service_nextJob_Params_List is a list of Service_nextJob_Params.
type Service_nextJob_Params_List struct{ capnp.List }

// NewService_nextJob_Params creates a new list of Service_nextJob_Params.
func NewService_nextJob_Params_List(s *capnp.Segment, sz int32) (Service_nextJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Service_nextJob_Params_List{l}, err
}

func (s Service_nextJob_Params_List) At(i int) Service_nextJob_Params {
	return Service_nextJob_Params{s.List.Struct(i)}
}

func (s Service_nextJob_Params_List) Set(i int, v Service_nextJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextJob_Params_List) String() string {
	str, _ := text.MarshalList(0xea3ba97e764a031c, s.List)
	return str
}

// Service_nextJob_Params_Future is a wrapper for a Service_nextJob_Params promised by a client call.
type Service_nextJob_Params_Future struct{ *capnp.Future }

func (p Service_nextJob_Params_Future) Struct() (Service_nextJob_Params, error) {
	s, err := p.Future.Struct()
	return Service_nextJob_Params{s}, err
}

type Service_nextJob_Results struct{ capnp.Struct }

// Service_nextJob_Results_TypeID is the unique identifier for the type Service_nextJob_Results.
const Service_nextJob_Results_TypeID = 0xe067ec22521ebebb

func NewService_nextJob_Results(s *capnp.Segment) (Service_nextJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{st}, err
}

func NewRootService_nextJob_Results(s *capnp.Segment) (Service_nextJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{st}, err
}

func ReadRootService_nextJob_Results(msg *capnp.Message) (Service_nextJob_Results, error) {
	root, err := msg.Root()
	return Service_nextJob_Results{root.Struct()}, err
}

func (s Service_nextJob_Results) String() string {
	str, _ := text.Marshal(0xe067ec22521ebebb, s.Struct)
	return str
}

func (s Service_nextJob_Results) Job() (Job, error) {
	p, err := s.Struct.Ptr(0)
	return Job{Struct: p.Struct()}, err
}

func (s Service_nextJob_Results) HasJob() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_nextJob_Results) SetJob(v Job) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewJob sets the job field to a newly
// allocated Job struct, preferring placement in s's segment.
func (s Service_nextJob_Results) NewJob() (Job, error) {
	ss, err := NewJob(s.Struct.Segment())
	if err != nil {
		return Job{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Service_nextJob_Results_List is a list of Service_nextJob_Results.
type Service_nextJob_Results_List struct{ capnp.List }

// NewService_nextJob_Results creates a new list of Service_nextJob_Results.
func NewService_nextJob_Results_List(s *capnp.Segment, sz int32) (Service_nextJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_nextJob_Results_List{l}, err
}

func (s Service_nextJob_Results_List) At(i int) Service_nextJob_Results {
	return Service_nextJob_Results{s.List.Struct(i)}
}

func (s Service_nextJob_Results_List) Set(i int, v Service_nextJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextJob_Results_List) String() string {
	str, _ := text.MarshalList(0xe067ec22521ebebb, s.List)
	return str
}

// Service_nextJob_Results_Future is a wrapper for a Service_nextJob_Results promised by a client call.
type Service_nextJob_Results_Future struct{ *capnp.Future }

func (p Service_nextJob_Results_Future) Struct() (Service_nextJob_Results, error) {
	s, err := p.Future.Struct()
	return Service_nextJob_Results{s}, err
}

func (p Service_nextJob_Results_Future) Job() Job_Future {
	return Job_Future{Future: p.Future.Field(0, nil)}
}

const schema_e7e7e2edc72e660c = "x\xda|\x8f=k\x14Q\x18\x85\xcf\x99{\xc7\x19\x88" +
	"\x92\xbd{SIP\x08\x01Qt\x89\x84\x88\xc6\"1" +
	"\x85\x86\xa9\xf6\xc64b\xe3\xcc\xee\xf8\x11\xe3\xcc23" +
	"\x89\x1f\x85i\xfd\x0d\"\xb8\"\"[\x88`\xa3 \x08" +
	"\x16b\xb1,ha#\x16b\xb3\xa0.\xf8\x0f\xae\x8c" +
	"\xba\xbbV\xe9\xde\xe2\x9c\xe7=\xcf\xdcu.;\xc7\xdd" +
	"\x87>`\x9a\xee\x1e\xbbz\xef\xf1\xf4\xcbK\x17\xdb0" +
	"\x13\xa4\xdd{\xb9\xf6~\xf0\xad\xdf\x87K\xafB\xbd " +
	"\xef\xe8S\xd2\x03\xf4\x82\xbc\x09\xe8gr\xd2\xfe\xea\xea" +
	"\x0f\xeb\xeb\xc5+\xa8\x091\xce\x83\xfa\x91\xbc\xaf;\x7f" +
	"\xc2O\xe49\xdd\x93\x87\x00\xfb\xfa\xcd\x81\xb5\x99\x9fW" +
	"\xbeBi\xa2\x84\x02\xf3\xef\xe4~\x82\xba'\x97@;" +
	"-\x82\xed\xbb\x9d\xd3\xdf\xff\x06\xca\xf6\xfc@V\x89\x1f" +
	"v#\x8d\xf2Z#la)i-\x06iT'\x8d" +
	"/$ \x09\xa8\xc3G\x003+h\xe6\x1c\x92S$" +
	"\xa9\x8ee\x809*hN:\x9cl\x86E\xc8*9" +
	"\x16\x04X\x05m\x92\x9e\xdd\xca\x8a\xab1\x0efA\x1a" +
	"\xe5$\x1c\x12<#\xa9\xb8\xb2S\x0foo\xa6as" +
	"\xf4\x9dIk\xf1|\x9cm_\x13\x8d\xb8\\ \x85\x0b" +
	"\x8cVs\xe8\xa7\xd4\x0a\x1c\xe5z;I|\xab\x08\xd2" +
	"h\x99\xc6'\xed\xa7\xd5\x07\x17\xba\x1f\x9f\xbf\x00`\xe3" +
	"\xee\x89/\xed\xcfO\xdf\x96\xf7\x90.\x86\xf4F\\\xfb" +
	"\xd7\x9c]\x8b\xf3\xadMQ\xe4F\x8ed\xf7\xcd\x00\xc6" +
	"\x174S\x0e\xbd\x8d4b\xe5?+\xb2\x02\xeeJ\xac" +
	"\x87Yx\x83\xf9\xef\x00\x00\x00\xff\xff\xcb#\x8e6"

func init() {
	schemas.Register(schema_e7e7e2edc72e660c,
		0xa05b60b71ca38848,
		0xb8745454d013cbf0,
		0xe067ec22521ebebb,
		0xea3ba97e764a031c)
}
