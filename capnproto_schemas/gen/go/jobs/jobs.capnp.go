// Code generated by capnpc-go. DO NOT EDIT.

package jobs

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	geo "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/geo"
)

type Job struct{ capnp.Struct }

// Job_TypeID is the unique identifier for the type Job.
const Job_TypeID = 0xa05b60b71ca38848

func NewJob(s *capnp.Segment) (Job, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Job{st}, err
}

func NewRootJob(s *capnp.Segment) (Job, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Job{st}, err
}

func ReadRootJob(msg *capnp.Message) (Job, error) {
	root, err := msg.Root()
	return Job{root.Struct()}, err
}

func (s Job) String() string {
	str, _ := text.Marshal(0xa05b60b71ca38848, s.Struct)
	return str
}

func (s Job) LatLngCoords() (geo.LatLonCoord_List, error) {
	p, err := s.Struct.Ptr(0)
	return geo.LatLonCoord_List{List: p.List()}, err
}

func (s Job) HasLatLngCoords() bool {
	return s.Struct.HasPtr(0)
}

func (s Job) SetLatLngCoords(v geo.LatLonCoord_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLatLngCoords sets the latLngCoords field to a newly
// allocated geo.LatLonCoord_List, preferring placement in s's segment.
func (s Job) NewLatLngCoords(n int32) (geo.LatLonCoord_List, error) {
	l, err := geo.NewLatLonCoord_List(s.Struct.Segment(), n)
	if err != nil {
		return geo.LatLonCoord_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Job) NoFurtherJobs() bool {
	return s.Struct.Bit(0)
}

func (s Job) SetNoFurtherJobs(v bool) {
	s.Struct.SetBit(0, v)
}

// Job_List is a list of Job.
type Job_List struct{ capnp.List }

// NewJob creates a new list of Job.
func NewJob_List(s *capnp.Segment, sz int32) (Job_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Job_List{l}, err
}

func (s Job_List) At(i int) Job { return Job{s.List.Struct(i)} }

func (s Job_List) Set(i int, v Job) error { return s.List.SetStruct(i, v.Struct) }

func (s Job_List) String() string {
	str, _ := text.MarshalList(0xa05b60b71ca38848, s.List)
	return str
}

// Job_Future is a wrapper for a Job promised by a client call.
type Job_Future struct{ *capnp.Future }

func (p Job_Future) Struct() (Job, error) {
	s, err := p.Future.Struct()
	return Job{s}, err
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xb8745454d013cbf0

func (c Service) NextJob(ctx context.Context, params func(Service_nextJob_Params) error) (Service_nextJob_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8745454d013cbf0,
			MethodID:      0,
			InterfaceName: "jobs.capnp:Service",
			MethodName:    "nextJob",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_nextJob_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_nextJob_Results_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	NextJob(context.Context, Service_nextJob) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8745454d013cbf0,
			MethodID:      0,
			InterfaceName: "jobs.capnp:Service",
			MethodName:    "nextJob",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextJob(ctx, Service_nextJob{call})
		},
	})

	return methods
}

// Service_nextJob holds the state for a server call to Service.nextJob.
// See server.Call for documentation.
type Service_nextJob struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_nextJob) Args() Service_nextJob_Params {
	return Service_nextJob_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_nextJob) AllocResults() (Service_nextJob_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{Struct: r}, err
}

type Service_nextJob_Params struct{ capnp.Struct }

// Service_nextJob_Params_TypeID is the unique identifier for the type Service_nextJob_Params.
const Service_nextJob_Params_TypeID = 0xea3ba97e764a031c

func NewService_nextJob_Params(s *capnp.Segment) (Service_nextJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextJob_Params{st}, err
}

func NewRootService_nextJob_Params(s *capnp.Segment) (Service_nextJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextJob_Params{st}, err
}

func ReadRootService_nextJob_Params(msg *capnp.Message) (Service_nextJob_Params, error) {
	root, err := msg.Root()
	return Service_nextJob_Params{root.Struct()}, err
}

func (s Service_nextJob_Params) String() string {
	str, _ := text.Marshal(0xea3ba97e764a031c, s.Struct)
	return str
}

// Service_nextJob_Params_List is a list of Service_nextJob_Params.
type Service_nextJob_Params_List struct{ capnp.List }

// NewService_nextJob_Params creates a new list of Service_nextJob_Params.
func NewService_nextJob_Params_List(s *capnp.Segment, sz int32) (Service_nextJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Service_nextJob_Params_List{l}, err
}

func (s Service_nextJob_Params_List) At(i int) Service_nextJob_Params {
	return Service_nextJob_Params{s.List.Struct(i)}
}

func (s Service_nextJob_Params_List) Set(i int, v Service_nextJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextJob_Params_List) String() string {
	str, _ := text.MarshalList(0xea3ba97e764a031c, s.List)
	return str
}

// Service_nextJob_Params_Future is a wrapper for a Service_nextJob_Params promised by a client call.
type Service_nextJob_Params_Future struct{ *capnp.Future }

func (p Service_nextJob_Params_Future) Struct() (Service_nextJob_Params, error) {
	s, err := p.Future.Struct()
	return Service_nextJob_Params{s}, err
}

type Service_nextJob_Results struct{ capnp.Struct }

// Service_nextJob_Results_TypeID is the unique identifier for the type Service_nextJob_Results.
const Service_nextJob_Results_TypeID = 0xe067ec22521ebebb

func NewService_nextJob_Results(s *capnp.Segment) (Service_nextJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{st}, err
}

func NewRootService_nextJob_Results(s *capnp.Segment) (Service_nextJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{st}, err
}

func ReadRootService_nextJob_Results(msg *capnp.Message) (Service_nextJob_Results, error) {
	root, err := msg.Root()
	return Service_nextJob_Results{root.Struct()}, err
}

func (s Service_nextJob_Results) String() string {
	str, _ := text.Marshal(0xe067ec22521ebebb, s.Struct)
	return str
}

func (s Service_nextJob_Results) Job() (Job, error) {
	p, err := s.Struct.Ptr(0)
	return Job{Struct: p.Struct()}, err
}

func (s Service_nextJob_Results) HasJob() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_nextJob_Results) SetJob(v Job) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewJob sets the job field to a newly
// allocated Job struct, preferring placement in s's segment.
func (s Service_nextJob_Results) NewJob() (Job, error) {
	ss, err := NewJob(s.Struct.Segment())
	if err != nil {
		return Job{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Service_nextJob_Results_List is a list of Service_nextJob_Results.
type Service_nextJob_Results_List struct{ capnp.List }

// NewService_nextJob_Results creates a new list of Service_nextJob_Results.
func NewService_nextJob_Results_List(s *capnp.Segment, sz int32) (Service_nextJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_nextJob_Results_List{l}, err
}

func (s Service_nextJob_Results_List) At(i int) Service_nextJob_Results {
	return Service_nextJob_Results{s.List.Struct(i)}
}

func (s Service_nextJob_Results_List) Set(i int, v Service_nextJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextJob_Results_List) String() string {
	str, _ := text.MarshalList(0xe067ec22521ebebb, s.List)
	return str
}

// Service_nextJob_Results_Future is a wrapper for a Service_nextJob_Results promised by a client call.
type Service_nextJob_Results_Future struct{ *capnp.Future }

func (p Service_nextJob_Results_Future) Struct() (Service_nextJob_Results, error) {
	s, err := p.Future.Struct()
	return Service_nextJob_Results{s}, err
}

func (p Service_nextJob_Results_Future) Job() Job_Future {
	return Job_Future{Future: p.Future.Field(0, nil)}
}

const schema_e7e7e2edc72e660c = "x\xda|\x91\xbd\x8b\x13A\x00\xc5\xdf\x9b\xd95\x07\xe7" +
	"\xc7\xaes\x95\x1c\x0a\x87\xa06\xe1\xc4\xcaX$~\xa0" +
	"\xb2\xa4\xd8\x89\xe9\xb4p7\xae\xd1\x90\xec\xc4\xddM\x14" +
	"\x0b\xc5N+k\xad\x04\xab\xfc\x05\x0a\x82\xad\x85\x16\xd6" +
	"Vb\x13\x90\x08Z\x8a\xca\xc8\x92\xaf\xee\xba\xc7\xcc\x8f" +
	"\xdf\xbc\xc7x_\x1a\xe2\xb4{\xc2\x01\xf4\xae\xbb\xcf^" +
	"}\xfaz\xfb\xcd\xcd\xeb\xaf\xa07I\xbb\xffv\xf5\xc3" +
	"\x8fo\xd3)\\V\x00\xf5\x9b\x0f\xd5\xbfE\xba\x0f\xda" +
	"\x9f\x1f\xd5\xe7v\xbbx\x0b\x7fS\xaeYP\x0d\xc4K" +
	"5\x12%xO\\Q/\xcad\xdf\xbd?\xda\xda\x99" +
	"u\xbf\xc2W\xc4\\x\xe6\x898BP=\x13u\xd0" +
	"n\xcb`\xfchr\xee\xfb\x1cp\xca\xfb\x898L\xdc" +
	"\xb0=\x13\xe7\xd5N4D=\x1d\xd6\x02\x13\x87\xa4\xde" +
	"\x90\x0e\xe0\x10\xf0O\xf5\x00}RR_\x12$\xb7H" +
	"\xd2?\x9f\x01\xba!\xa9\x9b\x82\xb6\x1f\x15\xcd\xb4{\xd1" +
	"\xe0\x90\xc9n\xe5<\x08\x86\x92\xf4\xec\x9f\xe7\x9f\xce\xee" +
	"\xfe\xfd5\x03X\x1e\xda\xd4\\\x1ee\xc5\x9d\x04\xc7\xb2" +
	"\xc0\xc49\x09A\x82\xab\xe7\x99\x0ek\xd7\x92l|W" +
	"v\x92\xb2\x82#]`U\x9b\xcb\x81\xbe\x7f\x01\xc2w" +
	"+\x8f\xd3\xe4A\x11\x98\xb8\xc1\x90k\x89\\J:I" +
	"u\x01\x1co%\xf9\xa8/\x8b\\;\xabQ\x07v\x00" +
	"\xbd!\xa9\xb7\x04+=\x13\xd3[\x7f\x0dH\x0f{\x1b" +
	"\xc3(\x8b\x06\xcc\xff\x07\x00\x00\xff\xff\xb32\x83\xd7"

func init() {
	schemas.Register(schema_e7e7e2edc72e660c,
		0xa05b60b71ca38848,
		0xb8745454d013cbf0,
		0xe067ec22521ebebb,
		0xea3ba97e764a031c)
}
