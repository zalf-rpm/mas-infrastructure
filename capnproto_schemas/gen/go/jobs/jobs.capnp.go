// Code generated by capnpc-go. DO NOT EDIT.

package jobs

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
)

type Job struct{ capnp.Struct }

// Job_TypeID is the unique identifier for the type Job.
const Job_TypeID = 0xa05b60b71ca38848

func NewJob(s *capnp.Segment) (Job, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Job{st}, err
}

func NewRootJob(s *capnp.Segment) (Job, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Job{st}, err
}

func ReadRootJob(msg *capnp.Message) (Job, error) {
	root, err := msg.Root()
	return Job{root.Struct()}, err
}

func (s Job) String() string {
	str, _ := text.Marshal(0xa05b60b71ca38848, s.Struct)
	return str
}

func (s Job) Data() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Job) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Job) SetData(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

func (s Job) NoFurtherJobs() bool {
	return s.Struct.Bit(0)
}

func (s Job) SetNoFurtherJobs(v bool) {
	s.Struct.SetBit(0, v)
}

// Job_List is a list of Job.
type Job_List struct{ capnp.List }

// NewJob creates a new list of Job.
func NewJob_List(s *capnp.Segment, sz int32) (Job_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Job_List{l}, err
}

func (s Job_List) At(i int) Job { return Job{s.List.Struct(i)} }

func (s Job_List) Set(i int, v Job) error { return s.List.SetStruct(i, v.Struct) }

func (s Job_List) String() string {
	str, _ := text.MarshalList(0xa05b60b71ca38848, s.List)
	return str
}

// Job_Future is a wrapper for a Job promised by a client call.
type Job_Future struct{ *capnp.Future }

func (p Job_Future) Struct() (Job, error) {
	s, err := p.Future.Struct()
	return Job{s}, err
}

func (p Job_Future) Data() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0xb8745454d013cbf0

func (c Service) NextJob(ctx context.Context, params func(Service_nextJob_Params) error) (Service_nextJob_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8745454d013cbf0,
			MethodID:      0,
			InterfaceName: "jobs.capnp:Service",
			MethodName:    "nextJob",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Service_nextJob_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Service_nextJob_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	NextJob(context.Context, Service_nextJob) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8745454d013cbf0,
			MethodID:      0,
			InterfaceName: "jobs.capnp:Service",
			MethodName:    "nextJob",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NextJob(ctx, Service_nextJob{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Service_nextJob holds the state for a server call to Service.nextJob.
// See server.Call for documentation.
type Service_nextJob struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Service_nextJob) Args() Service_nextJob_Params {
	return Service_nextJob_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Service_nextJob) AllocResults() (Service_nextJob_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{Struct: r}, err
}

type Service_nextJob_Params struct{ capnp.Struct }

// Service_nextJob_Params_TypeID is the unique identifier for the type Service_nextJob_Params.
const Service_nextJob_Params_TypeID = 0xea3ba97e764a031c

func NewService_nextJob_Params(s *capnp.Segment) (Service_nextJob_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextJob_Params{st}, err
}

func NewRootService_nextJob_Params(s *capnp.Segment) (Service_nextJob_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Service_nextJob_Params{st}, err
}

func ReadRootService_nextJob_Params(msg *capnp.Message) (Service_nextJob_Params, error) {
	root, err := msg.Root()
	return Service_nextJob_Params{root.Struct()}, err
}

func (s Service_nextJob_Params) String() string {
	str, _ := text.Marshal(0xea3ba97e764a031c, s.Struct)
	return str
}

// Service_nextJob_Params_List is a list of Service_nextJob_Params.
type Service_nextJob_Params_List struct{ capnp.List }

// NewService_nextJob_Params creates a new list of Service_nextJob_Params.
func NewService_nextJob_Params_List(s *capnp.Segment, sz int32) (Service_nextJob_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Service_nextJob_Params_List{l}, err
}

func (s Service_nextJob_Params_List) At(i int) Service_nextJob_Params {
	return Service_nextJob_Params{s.List.Struct(i)}
}

func (s Service_nextJob_Params_List) Set(i int, v Service_nextJob_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextJob_Params_List) String() string {
	str, _ := text.MarshalList(0xea3ba97e764a031c, s.List)
	return str
}

// Service_nextJob_Params_Future is a wrapper for a Service_nextJob_Params promised by a client call.
type Service_nextJob_Params_Future struct{ *capnp.Future }

func (p Service_nextJob_Params_Future) Struct() (Service_nextJob_Params, error) {
	s, err := p.Future.Struct()
	return Service_nextJob_Params{s}, err
}

type Service_nextJob_Results struct{ capnp.Struct }

// Service_nextJob_Results_TypeID is the unique identifier for the type Service_nextJob_Results.
const Service_nextJob_Results_TypeID = 0xe067ec22521ebebb

func NewService_nextJob_Results(s *capnp.Segment) (Service_nextJob_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{st}, err
}

func NewRootService_nextJob_Results(s *capnp.Segment) (Service_nextJob_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Service_nextJob_Results{st}, err
}

func ReadRootService_nextJob_Results(msg *capnp.Message) (Service_nextJob_Results, error) {
	root, err := msg.Root()
	return Service_nextJob_Results{root.Struct()}, err
}

func (s Service_nextJob_Results) String() string {
	str, _ := text.Marshal(0xe067ec22521ebebb, s.Struct)
	return str
}

func (s Service_nextJob_Results) Job() (Job, error) {
	p, err := s.Struct.Ptr(0)
	return Job{Struct: p.Struct()}, err
}

func (s Service_nextJob_Results) HasJob() bool {
	return s.Struct.HasPtr(0)
}

func (s Service_nextJob_Results) SetJob(v Job) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewJob sets the job field to a newly
// allocated Job struct, preferring placement in s's segment.
func (s Service_nextJob_Results) NewJob() (Job, error) {
	ss, err := NewJob(s.Struct.Segment())
	if err != nil {
		return Job{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Service_nextJob_Results_List is a list of Service_nextJob_Results.
type Service_nextJob_Results_List struct{ capnp.List }

// NewService_nextJob_Results creates a new list of Service_nextJob_Results.
func NewService_nextJob_Results_List(s *capnp.Segment, sz int32) (Service_nextJob_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Service_nextJob_Results_List{l}, err
}

func (s Service_nextJob_Results_List) At(i int) Service_nextJob_Results {
	return Service_nextJob_Results{s.List.Struct(i)}
}

func (s Service_nextJob_Results_List) Set(i int, v Service_nextJob_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Service_nextJob_Results_List) String() string {
	str, _ := text.MarshalList(0xe067ec22521ebebb, s.List)
	return str
}

// Service_nextJob_Results_Future is a wrapper for a Service_nextJob_Results promised by a client call.
type Service_nextJob_Results_Future struct{ *capnp.Future }

func (p Service_nextJob_Results_Future) Struct() (Service_nextJob_Results, error) {
	s, err := p.Future.Struct()
	return Service_nextJob_Results{s}, err
}

func (p Service_nextJob_Results_Future) Job() Job_Future {
	return Job_Future{Future: p.Future.Field(0, nil)}
}

const schema_e7e7e2edc72e660c = "x\xda|\x8f\xbfk\x14A\x1c\xc5\xdf\xdb\x99u\x17\xa2" +
	"\xe4\xe6&\x8d\x12\x14B@\x14=\"\x01\x91X$\xa6" +
	"\xd0\xb0\xd5ML#6\xce^Fc\x88\xbb\xc7\xee\xe6" +
	"\xfcQ\x98\xd6\xbfA,\x02\x16b%\xd8(\x08\x82\x95" +
	"\xc5!\x98\"\x85b!6\x01Q\xd0FI5\xb2\xea" +
	"]\xac\xec\xbe\xc5{\x9f\xef\xfbL\xf58\x17\x9c\x0a\x7f" +
	"\xc6\x80Y\x09\xf7\xf9\x85{\x0f\xc7\x9f]\xb9\xbc\x093" +
	"B\xfa\xfdW[\xaf\xbf~\xda\xd9A\xc8\xa8Am\xe5" +
	"\x1d\xedd\x04h+o\x02\xfa\x9d\x1c\xf5\xdf\xfa\xfa\xed" +
	"\xd2R\xf5\x1cjD\xec\xe5A\xfdF\xde\xd7\xdb\xbf\xc3" +
	"[\xf2\x82\xde\x95G\x01\xff\xe2\xe5\xe1\xc5\x89/\xd7>" +
	"Bi\xa2\x86\x02\xd3\xdf\xe5!\x82zW\xce\x82~\\" +
	"$\xbd\xbb\x8f\xcf~\xfe\x13\xa8\xdb\xd3\x07\xc3&\xf1\xc3" +
	"\xaf\xe6i\xd9\xea\xd8.f\xb3\xeeL\x92\xa7m\xd2\xc4" +
	"B\x02\x92\x80:v\x1c0\x93\x82f* 9F\x92" +
	"\xead\x01\x98\x13\x82\xe6L\xc0\xd1e[Y6\xc9=" +
	"A\x80M\xd0g\xf9\xf9\xf5\xa2Zq8R$yZ" +
	"\x92\x08H\xf0\x9c\xa4\xe2\xfcF\xdb\xde^\xcb\xed\xf2\xf0" +
	";\xb3\xee\xccEW\xf4\xae\x8b\x8e\xab\x17H\x11\x02\xc3" +
	"\xd5\x1c\xf8)5\x8f@\x85\xd1F\xe6nUI\x9e\xce" +
	"\xd1\xc4\xa4\xdf^xp\xa9\xbf\xf5\xe4)\x00\xef\xfa\xa7" +
	"?l\xbe\x7f\xf4\xaa\xbe\x07t1\xa0w\\\xebos" +
	"r\xd1\x95\xebk\xa2*\x8d\x1c\xca\x1e\x98\x00L,h" +
	"\xc6\x02F\xaby\xca\xc6?Vd\x03\xfc/\xb1m\x0b" +
	"{\x83\xe5\xaf\x00\x00\x00\xff\xffXO\x8f\x8d"

func init() {
	schemas.Register(schema_e7e7e2edc72e660c,
		0xa05b60b71ca38848,
		0xb8745454d013cbf0,
		0xe067ec22521ebebb,
		0xea3ba97e764a031c)
}
