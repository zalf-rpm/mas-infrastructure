// Code generated by capnpc-go. DO NOT EDIT.

package registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
)

type Admin struct{ Client *capnp.Client }

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xf503f3237666574e

func (c Admin) AddCategory(ctx context.Context, params func(Admin_addCategory_Params) error) (Admin_addCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_addCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_addCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveCategory(ctx context.Context, params func(Admin_removeCategory_Params) error) (Admin_removeCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) MoveObjects(ctx context.Context, params func(Admin_moveObjects_Params) error) (Admin_moveObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_moveObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_moveObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveObjects(ctx context.Context, params func(Admin_removeObjects_Params) error) (Admin_removeObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Registry(ctx context.Context, params func(Admin_registry_Params) error) (Admin_registry_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_registry_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_registry_Results_Future{Future: ans.Future()}, release
}

func (c Admin) AddRef() Admin {
	return Admin{
		Client: c.Client.AddRef(),
	}
}

func (c Admin) Release() {
	c.Client.Release()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	AddCategory(context.Context, Admin_addCategory) error

	RemoveCategory(context.Context, Admin_removeCategory) error

	MoveObjects(context.Context, Admin_moveObjects) error

	RemoveObjects(context.Context, Admin_removeObjects) error

	Registry(context.Context, Admin_registry) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c, policy)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server, policy *server.Policy) Admin {
	return Admin{Client: capnp.NewClient(Admin_NewServer(s, policy))}
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddCategory(ctx, Admin_addCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveCategory(ctx, Admin_removeCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MoveObjects(ctx, Admin_moveObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveObjects(ctx, Admin_removeObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Admin_registry{call})
		},
	})

	return methods
}

// Admin_addCategory holds the state for a server call to Admin.addCategory.
// See server.Call for documentation.
type Admin_addCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_addCategory) Args() Admin_addCategory_Params {
	return Admin_addCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_addCategory) AllocResults() (Admin_addCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{Struct: r}, err
}

// Admin_removeCategory holds the state for a server call to Admin.removeCategory.
// See server.Call for documentation.
type Admin_removeCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeCategory) Args() Admin_removeCategory_Params {
	return Admin_removeCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeCategory) AllocResults() (Admin_removeCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{Struct: r}, err
}

// Admin_moveObjects holds the state for a server call to Admin.moveObjects.
// See server.Call for documentation.
type Admin_moveObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_moveObjects) Args() Admin_moveObjects_Params {
	return Admin_moveObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_moveObjects) AllocResults() (Admin_moveObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{Struct: r}, err
}

// Admin_removeObjects holds the state for a server call to Admin.removeObjects.
// See server.Call for documentation.
type Admin_removeObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeObjects) Args() Admin_removeObjects_Params {
	return Admin_removeObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeObjects) AllocResults() (Admin_removeObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{Struct: r}, err
}

// Admin_registry holds the state for a server call to Admin.registry.
// See server.Call for documentation.
type Admin_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_registry) Args() Admin_registry_Params {
	return Admin_registry_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_registry) AllocResults() (Admin_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{Struct: r}, err
}

type Admin_addCategory_Params struct{ capnp.Struct }

// Admin_addCategory_Params_TypeID is the unique identifier for the type Admin_addCategory_Params.
const Admin_addCategory_Params_TypeID = 0xdb16d4fbb18486f6

func NewAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func NewRootAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func ReadRootAdmin_addCategory_Params(msg *capnp.Message) (Admin_addCategory_Params, error) {
	root, err := msg.Root()
	return Admin_addCategory_Params{root.Struct()}, err
}

func (s Admin_addCategory_Params) String() string {
	str, _ := text.Marshal(0xdb16d4fbb18486f6, s.Struct)
	return str
}

func (s Admin_addCategory_Params) Category() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Admin_addCategory_Params) HasCategory() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_addCategory_Params) SetCategory(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCategory sets the category field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_addCategory_Params) NewCategory() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Admin_addCategory_Params) Upsert() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Params) SetUpsert(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Params_List is a list of Admin_addCategory_Params.
type Admin_addCategory_Params_List struct{ capnp.List }

// NewAdmin_addCategory_Params creates a new list of Admin_addCategory_Params.
func NewAdmin_addCategory_Params_List(s *capnp.Segment, sz int32) (Admin_addCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Admin_addCategory_Params_List{l}, err
}

func (s Admin_addCategory_Params_List) At(i int) Admin_addCategory_Params {
	return Admin_addCategory_Params{s.List.Struct(i)}
}

func (s Admin_addCategory_Params_List) Set(i int, v Admin_addCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xdb16d4fbb18486f6, s.List)
	return str
}

// Admin_addCategory_Params_Future is a wrapper for a Admin_addCategory_Params promised by a client call.
type Admin_addCategory_Params_Future struct{ *capnp.Future }

func (p Admin_addCategory_Params_Future) Struct() (Admin_addCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Params{s}, err
}

func (p Admin_addCategory_Params_Future) Category() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Admin_addCategory_Results struct{ capnp.Struct }

// Admin_addCategory_Results_TypeID is the unique identifier for the type Admin_addCategory_Results.
const Admin_addCategory_Results_TypeID = 0xbd3d832f7a7235b5

func NewAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func NewRootAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func ReadRootAdmin_addCategory_Results(msg *capnp.Message) (Admin_addCategory_Results, error) {
	root, err := msg.Root()
	return Admin_addCategory_Results{root.Struct()}, err
}

func (s Admin_addCategory_Results) String() string {
	str, _ := text.Marshal(0xbd3d832f7a7235b5, s.Struct)
	return str
}

func (s Admin_addCategory_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Results_List is a list of Admin_addCategory_Results.
type Admin_addCategory_Results_List struct{ capnp.List }

// NewAdmin_addCategory_Results creates a new list of Admin_addCategory_Results.
func NewAdmin_addCategory_Results_List(s *capnp.Segment, sz int32) (Admin_addCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Admin_addCategory_Results_List{l}, err
}

func (s Admin_addCategory_Results_List) At(i int) Admin_addCategory_Results {
	return Admin_addCategory_Results{s.List.Struct(i)}
}

func (s Admin_addCategory_Results_List) Set(i int, v Admin_addCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xbd3d832f7a7235b5, s.List)
	return str
}

// Admin_addCategory_Results_Future is a wrapper for a Admin_addCategory_Results promised by a client call.
type Admin_addCategory_Results_Future struct{ *capnp.Future }

func (p Admin_addCategory_Results_Future) Struct() (Admin_addCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Results{s}, err
}

type Admin_removeCategory_Params struct{ capnp.Struct }

// Admin_removeCategory_Params_TypeID is the unique identifier for the type Admin_removeCategory_Params.
const Admin_removeCategory_Params_TypeID = 0xd5be1b8e0180ded6

func NewAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func NewRootAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func ReadRootAdmin_removeCategory_Params(msg *capnp.Message) (Admin_removeCategory_Params, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Params{root.Struct()}, err
}

func (s Admin_removeCategory_Params) String() string {
	str, _ := text.Marshal(0xd5be1b8e0180ded6, s.Struct)
	return str
}

func (s Admin_removeCategory_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasMoveObjectsToCategoryId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetMoveObjectsToCategoryId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_removeCategory_Params_List is a list of Admin_removeCategory_Params.
type Admin_removeCategory_Params_List struct{ capnp.List }

// NewAdmin_removeCategory_Params creates a new list of Admin_removeCategory_Params.
func NewAdmin_removeCategory_Params_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_removeCategory_Params_List{l}, err
}

func (s Admin_removeCategory_Params_List) At(i int) Admin_removeCategory_Params {
	return Admin_removeCategory_Params{s.List.Struct(i)}
}

func (s Admin_removeCategory_Params_List) Set(i int, v Admin_removeCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xd5be1b8e0180ded6, s.List)
	return str
}

// Admin_removeCategory_Params_Future is a wrapper for a Admin_removeCategory_Params promised by a client call.
type Admin_removeCategory_Params_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Params_Future) Struct() (Admin_removeCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Params{s}, err
}

type Admin_removeCategory_Results struct{ capnp.Struct }

// Admin_removeCategory_Results_TypeID is the unique identifier for the type Admin_removeCategory_Results.
const Admin_removeCategory_Results_TypeID = 0xa9aca103106c8f05

func NewAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func NewRootAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func ReadRootAdmin_removeCategory_Results(msg *capnp.Message) (Admin_removeCategory_Results, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Results{root.Struct()}, err
}

func (s Admin_removeCategory_Results) String() string {
	str, _ := text.Marshal(0xa9aca103106c8f05, s.Struct)
	return str
}

func (s Admin_removeCategory_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeCategory_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeCategory_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeCategory_Results_List is a list of Admin_removeCategory_Results.
type Admin_removeCategory_Results_List struct{ capnp.List }

// NewAdmin_removeCategory_Results creates a new list of Admin_removeCategory_Results.
func NewAdmin_removeCategory_Results_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeCategory_Results_List{l}, err
}

func (s Admin_removeCategory_Results_List) At(i int) Admin_removeCategory_Results {
	return Admin_removeCategory_Results{s.List.Struct(i)}
}

func (s Admin_removeCategory_Results_List) Set(i int, v Admin_removeCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xa9aca103106c8f05, s.List)
	return str
}

// Admin_removeCategory_Results_Future is a wrapper for a Admin_removeCategory_Results promised by a client call.
type Admin_removeCategory_Results_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Results_Future) Struct() (Admin_removeCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Results{s}, err
}

type Admin_moveObjects_Params struct{ capnp.Struct }

// Admin_moveObjects_Params_TypeID is the unique identifier for the type Admin_moveObjects_Params.
const Admin_moveObjects_Params_TypeID = 0x8ebfd50c805adbc3

func NewAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func NewRootAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func ReadRootAdmin_moveObjects_Params(msg *capnp.Message) (Admin_moveObjects_Params, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Params{root.Struct()}, err
}

func (s Admin_moveObjects_Params) String() string {
	str, _ := text.Marshal(0x8ebfd50c805adbc3, s.Struct)
	return str
}

func (s Admin_moveObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Admin_moveObjects_Params) ToCatId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_moveObjects_Params) HasToCatId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_moveObjects_Params) ToCatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_moveObjects_Params) SetToCatId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_moveObjects_Params_List is a list of Admin_moveObjects_Params.
type Admin_moveObjects_Params_List struct{ capnp.List }

// NewAdmin_moveObjects_Params creates a new list of Admin_moveObjects_Params.
func NewAdmin_moveObjects_Params_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_moveObjects_Params_List{l}, err
}

func (s Admin_moveObjects_Params_List) At(i int) Admin_moveObjects_Params {
	return Admin_moveObjects_Params{s.List.Struct(i)}
}

func (s Admin_moveObjects_Params_List) Set(i int, v Admin_moveObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x8ebfd50c805adbc3, s.List)
	return str
}

// Admin_moveObjects_Params_Future is a wrapper for a Admin_moveObjects_Params promised by a client call.
type Admin_moveObjects_Params_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Params_Future) Struct() (Admin_moveObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Params{s}, err
}

type Admin_moveObjects_Results struct{ capnp.Struct }

// Admin_moveObjects_Results_TypeID is the unique identifier for the type Admin_moveObjects_Results.
const Admin_moveObjects_Results_TypeID = 0xd887d79a7ed3f45f

func NewAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func NewRootAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func ReadRootAdmin_moveObjects_Results(msg *capnp.Message) (Admin_moveObjects_Results, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Results{root.Struct()}, err
}

func (s Admin_moveObjects_Results) String() string {
	str, _ := text.Marshal(0xd887d79a7ed3f45f, s.Struct)
	return str
}

func (s Admin_moveObjects_Results) MovedObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Results) HasMovedObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Results) SetMovedObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMovedObjectIds sets the movedObjectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Results) NewMovedObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_moveObjects_Results_List is a list of Admin_moveObjects_Results.
type Admin_moveObjects_Results_List struct{ capnp.List }

// NewAdmin_moveObjects_Results creates a new list of Admin_moveObjects_Results.
func NewAdmin_moveObjects_Results_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_moveObjects_Results_List{l}, err
}

func (s Admin_moveObjects_Results_List) At(i int) Admin_moveObjects_Results {
	return Admin_moveObjects_Results{s.List.Struct(i)}
}

func (s Admin_moveObjects_Results_List) Set(i int, v Admin_moveObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xd887d79a7ed3f45f, s.List)
	return str
}

// Admin_moveObjects_Results_Future is a wrapper for a Admin_moveObjects_Results promised by a client call.
type Admin_moveObjects_Results_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Results_Future) Struct() (Admin_moveObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Results{s}, err
}

type Admin_removeObjects_Params struct{ capnp.Struct }

// Admin_removeObjects_Params_TypeID is the unique identifier for the type Admin_removeObjects_Params.
const Admin_removeObjects_Params_TypeID = 0x96a5b17eee7ee1a3

func NewAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func NewRootAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func ReadRootAdmin_removeObjects_Params(msg *capnp.Message) (Admin_removeObjects_Params, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Params{root.Struct()}, err
}

func (s Admin_removeObjects_Params) String() string {
	str, _ := text.Marshal(0x96a5b17eee7ee1a3, s.Struct)
	return str
}

func (s Admin_removeObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_removeObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_removeObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Params_List is a list of Admin_removeObjects_Params.
type Admin_removeObjects_Params_List struct{ capnp.List }

// NewAdmin_removeObjects_Params creates a new list of Admin_removeObjects_Params.
func NewAdmin_removeObjects_Params_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Params_List{l}, err
}

func (s Admin_removeObjects_Params_List) At(i int) Admin_removeObjects_Params {
	return Admin_removeObjects_Params{s.List.Struct(i)}
}

func (s Admin_removeObjects_Params_List) Set(i int, v Admin_removeObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x96a5b17eee7ee1a3, s.List)
	return str
}

// Admin_removeObjects_Params_Future is a wrapper for a Admin_removeObjects_Params promised by a client call.
type Admin_removeObjects_Params_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Params_Future) Struct() (Admin_removeObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Params{s}, err
}

type Admin_removeObjects_Results struct{ capnp.Struct }

// Admin_removeObjects_Results_TypeID is the unique identifier for the type Admin_removeObjects_Results.
const Admin_removeObjects_Results_TypeID = 0xa092f60656bb0db4

func NewAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func NewRootAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func ReadRootAdmin_removeObjects_Results(msg *capnp.Message) (Admin_removeObjects_Results, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Results{root.Struct()}, err
}

func (s Admin_removeObjects_Results) String() string {
	str, _ := text.Marshal(0xa092f60656bb0db4, s.Struct)
	return str
}

func (s Admin_removeObjects_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeObjects_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeObjects_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Results_List is a list of Admin_removeObjects_Results.
type Admin_removeObjects_Results_List struct{ capnp.List }

// NewAdmin_removeObjects_Results creates a new list of Admin_removeObjects_Results.
func NewAdmin_removeObjects_Results_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Results_List{l}, err
}

func (s Admin_removeObjects_Results_List) At(i int) Admin_removeObjects_Results {
	return Admin_removeObjects_Results{s.List.Struct(i)}
}

func (s Admin_removeObjects_Results_List) Set(i int, v Admin_removeObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xa092f60656bb0db4, s.List)
	return str
}

// Admin_removeObjects_Results_Future is a wrapper for a Admin_removeObjects_Results promised by a client call.
type Admin_removeObjects_Results_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Results_Future) Struct() (Admin_removeObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Results{s}, err
}

type Admin_registry_Params struct{ capnp.Struct }

// Admin_registry_Params_TypeID is the unique identifier for the type Admin_registry_Params.
const Admin_registry_Params_TypeID = 0xee2cf8cf148921b5

func NewAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func NewRootAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func ReadRootAdmin_registry_Params(msg *capnp.Message) (Admin_registry_Params, error) {
	root, err := msg.Root()
	return Admin_registry_Params{root.Struct()}, err
}

func (s Admin_registry_Params) String() string {
	str, _ := text.Marshal(0xee2cf8cf148921b5, s.Struct)
	return str
}

// Admin_registry_Params_List is a list of Admin_registry_Params.
type Admin_registry_Params_List struct{ capnp.List }

// NewAdmin_registry_Params creates a new list of Admin_registry_Params.
func NewAdmin_registry_Params_List(s *capnp.Segment, sz int32) (Admin_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_registry_Params_List{l}, err
}

func (s Admin_registry_Params_List) At(i int) Admin_registry_Params {
	return Admin_registry_Params{s.List.Struct(i)}
}

func (s Admin_registry_Params_List) Set(i int, v Admin_registry_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Params_List) String() string {
	str, _ := text.MarshalList(0xee2cf8cf148921b5, s.List)
	return str
}

// Admin_registry_Params_Future is a wrapper for a Admin_registry_Params promised by a client call.
type Admin_registry_Params_Future struct{ *capnp.Future }

func (p Admin_registry_Params_Future) Struct() (Admin_registry_Params, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Params{s}, err
}

type Admin_registry_Results struct{ capnp.Struct }

// Admin_registry_Results_TypeID is the unique identifier for the type Admin_registry_Results.
const Admin_registry_Results_TypeID = 0xfe62caefab7dfdad

func NewAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func NewRootAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func ReadRootAdmin_registry_Results(msg *capnp.Message) (Admin_registry_Results, error) {
	root, err := msg.Root()
	return Admin_registry_Results{root.Struct()}, err
}

func (s Admin_registry_Results) String() string {
	str, _ := text.Marshal(0xfe62caefab7dfdad, s.Struct)
	return str
}

func (s Admin_registry_Results) Registry() Registry {
	p, _ := s.Struct.Ptr(0)
	return Registry{Client: p.Interface().Client()}
}

func (s Admin_registry_Results) HasRegistry() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_registry_Results) SetRegistry(v Registry) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Admin_registry_Results_List is a list of Admin_registry_Results.
type Admin_registry_Results_List struct{ capnp.List }

// NewAdmin_registry_Results creates a new list of Admin_registry_Results.
func NewAdmin_registry_Results_List(s *capnp.Segment, sz int32) (Admin_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_registry_Results_List{l}, err
}

func (s Admin_registry_Results_List) At(i int) Admin_registry_Results {
	return Admin_registry_Results{s.List.Struct(i)}
}

func (s Admin_registry_Results_List) Set(i int, v Admin_registry_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Results_List) String() string {
	str, _ := text.MarshalList(0xfe62caefab7dfdad, s.List)
	return str
}

// Admin_registry_Results_Future is a wrapper for a Admin_registry_Results promised by a client call.
type Admin_registry_Results_Future struct{ *capnp.Future }

func (p Admin_registry_Results_Future) Struct() (Admin_registry_Results, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Results{s}, err
}

func (p Admin_registry_Results_Future) Registry() Registry {
	return Registry{Client: p.Future.Field(0, nil).Client()}
}

type Registry struct{ Client *capnp.Client }

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xca7b4bd1600633b8

func (c Registry) SupportedCategories(ctx context.Context, params func(Registry_supportedCategories_Params) error) (Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c Registry) CategoryInfo(ctx context.Context, params func(Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Registry) Entries(ctx context.Context, params func(Registry_entries_Params) error) (Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c Registry) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registry) AddRef() Registry {
	return Registry{
		Client: c.Client.AddRef(),
	}
}

func (c Registry) Release() {
	c.Client.Release()
}

// A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	SupportedCategories(context.Context, Registry_supportedCategories) error

	CategoryInfo(context.Context, Registry_categoryInfo) error

	Entries(context.Context, Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c, policy)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server, policy *server.Policy) Registry {
	return Registry{Client: capnp.NewClient(Registry_NewServer(s, policy))}
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registry_supportedCategories holds the state for a server call to Registry.supportedCategories.
// See server.Call for documentation.
type Registry_supportedCategories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_supportedCategories) Args() Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_supportedCategories) AllocResults() (Registry_supportedCategories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{Struct: r}, err
}

// Registry_categoryInfo holds the state for a server call to Registry.categoryInfo.
// See server.Call for documentation.
type Registry_categoryInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_categoryInfo) Args() Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_categoryInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// Registry_entries holds the state for a server call to Registry.entries.
// See server.Call for documentation.
type Registry_entries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_entries) Args() Registry_entries_Params {
	return Registry_entries_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_entries) AllocResults() (Registry_entries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{Struct: r}, err
}

type Registry_Entry struct{ capnp.Struct }

// Registry_Entry_TypeID is the unique identifier for the type Registry_Entry.
const Registry_Entry_TypeID = 0xc17987510cf7ac13

func NewRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func NewRootRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func ReadRootRegistry_Entry(msg *capnp.Message) (Registry_Entry, error) {
	root, err := msg.Root()
	return Registry_Entry{root.Struct()}, err
}

func (s Registry_Entry) String() string {
	str, _ := text.Marshal(0xc17987510cf7ac13, s.Struct)
	return str
}

func (s Registry_Entry) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_Entry) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_Entry) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Registry_Entry) Ref() common.Identifiable {
	p, _ := s.Struct.Ptr(1)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registry_Entry) HasRef() bool {
	return s.Struct.HasPtr(1)
}

func (s Registry_Entry) SetRef(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Registry_Entry) Name() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registry_Entry) HasName() bool {
	return s.Struct.HasPtr(2)
}

func (s Registry_Entry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetName(v string) error {
	return s.Struct.SetText(2, v)
}

// Registry_Entry_List is a list of Registry_Entry.
type Registry_Entry_List struct{ capnp.List }

// NewRegistry_Entry creates a new list of Registry_Entry.
func NewRegistry_Entry_List(s *capnp.Segment, sz int32) (Registry_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Registry_Entry_List{l}, err
}

func (s Registry_Entry_List) At(i int) Registry_Entry { return Registry_Entry{s.List.Struct(i)} }

func (s Registry_Entry_List) Set(i int, v Registry_Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Registry_Entry_List) String() string {
	str, _ := text.MarshalList(0xc17987510cf7ac13, s.List)
	return str
}

// Registry_Entry_Future is a wrapper for a Registry_Entry promised by a client call.
type Registry_Entry_Future struct{ *capnp.Future }

func (p Registry_Entry_Future) Struct() (Registry_Entry, error) {
	s, err := p.Future.Struct()
	return Registry_Entry{s}, err
}

func (p Registry_Entry_Future) Ref() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(1, nil).Client()}
}

type Registry_supportedCategories_Params struct{ capnp.Struct }

// Registry_supportedCategories_Params_TypeID is the unique identifier for the type Registry_supportedCategories_Params.
const Registry_supportedCategories_Params_TypeID = 0x9c49e6e65e34c29b

func NewRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func NewRootRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func ReadRootRegistry_supportedCategories_Params(msg *capnp.Message) (Registry_supportedCategories_Params, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Params{root.Struct()}, err
}

func (s Registry_supportedCategories_Params) String() string {
	str, _ := text.Marshal(0x9c49e6e65e34c29b, s.Struct)
	return str
}

// Registry_supportedCategories_Params_List is a list of Registry_supportedCategories_Params.
type Registry_supportedCategories_Params_List struct{ capnp.List }

// NewRegistry_supportedCategories_Params creates a new list of Registry_supportedCategories_Params.
func NewRegistry_supportedCategories_Params_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Registry_supportedCategories_Params_List{l}, err
}

func (s Registry_supportedCategories_Params_List) At(i int) Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Params_List) Set(i int, v Registry_supportedCategories_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Params_List) String() string {
	str, _ := text.MarshalList(0x9c49e6e65e34c29b, s.List)
	return str
}

// Registry_supportedCategories_Params_Future is a wrapper for a Registry_supportedCategories_Params promised by a client call.
type Registry_supportedCategories_Params_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Params_Future) Struct() (Registry_supportedCategories_Params, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Params{s}, err
}

type Registry_supportedCategories_Results struct{ capnp.Struct }

// Registry_supportedCategories_Results_TypeID is the unique identifier for the type Registry_supportedCategories_Results.
const Registry_supportedCategories_Results_TypeID = 0xb2bf60b5817330b0

func NewRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func NewRootRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func ReadRootRegistry_supportedCategories_Results(msg *capnp.Message) (Registry_supportedCategories_Results, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Results{root.Struct()}, err
}

func (s Registry_supportedCategories_Results) String() string {
	str, _ := text.Marshal(0xb2bf60b5817330b0, s.Struct)
	return str
}

func (s Registry_supportedCategories_Results) Cats() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Registry_supportedCategories_Results) HasCats() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_supportedCategories_Results) SetCats(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCats sets the cats field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Registry_supportedCategories_Results) NewCats(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_supportedCategories_Results_List is a list of Registry_supportedCategories_Results.
type Registry_supportedCategories_Results_List struct{ capnp.List }

// NewRegistry_supportedCategories_Results creates a new list of Registry_supportedCategories_Results.
func NewRegistry_supportedCategories_Results_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_supportedCategories_Results_List{l}, err
}

func (s Registry_supportedCategories_Results_List) At(i int) Registry_supportedCategories_Results {
	return Registry_supportedCategories_Results{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Results_List) Set(i int, v Registry_supportedCategories_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Results_List) String() string {
	str, _ := text.MarshalList(0xb2bf60b5817330b0, s.List)
	return str
}

// Registry_supportedCategories_Results_Future is a wrapper for a Registry_supportedCategories_Results promised by a client call.
type Registry_supportedCategories_Results_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Results_Future) Struct() (Registry_supportedCategories_Results, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Results{s}, err
}

type Registry_categoryInfo_Params struct{ capnp.Struct }

// Registry_categoryInfo_Params_TypeID is the unique identifier for the type Registry_categoryInfo_Params.
const Registry_categoryInfo_Params_TypeID = 0x891283e1b248bc9d

func NewRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func NewRootRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func ReadRootRegistry_categoryInfo_Params(msg *capnp.Message) (Registry_categoryInfo_Params, error) {
	root, err := msg.Root()
	return Registry_categoryInfo_Params{root.Struct()}, err
}

func (s Registry_categoryInfo_Params) String() string {
	str, _ := text.Marshal(0x891283e1b248bc9d, s.Struct)
	return str
}

func (s Registry_categoryInfo_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_categoryInfo_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_categoryInfo_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_categoryInfo_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_categoryInfo_Params_List is a list of Registry_categoryInfo_Params.
type Registry_categoryInfo_Params_List struct{ capnp.List }

// NewRegistry_categoryInfo_Params creates a new list of Registry_categoryInfo_Params.
func NewRegistry_categoryInfo_Params_List(s *capnp.Segment, sz int32) (Registry_categoryInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_categoryInfo_Params_List{l}, err
}

func (s Registry_categoryInfo_Params_List) At(i int) Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{s.List.Struct(i)}
}

func (s Registry_categoryInfo_Params_List) Set(i int, v Registry_categoryInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_categoryInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x891283e1b248bc9d, s.List)
	return str
}

// Registry_categoryInfo_Params_Future is a wrapper for a Registry_categoryInfo_Params promised by a client call.
type Registry_categoryInfo_Params_Future struct{ *capnp.Future }

func (p Registry_categoryInfo_Params_Future) Struct() (Registry_categoryInfo_Params, error) {
	s, err := p.Future.Struct()
	return Registry_categoryInfo_Params{s}, err
}

type Registry_entries_Params struct{ capnp.Struct }

// Registry_entries_Params_TypeID is the unique identifier for the type Registry_entries_Params.
const Registry_entries_Params_TypeID = 0x9ffc53716151c5fa

func NewRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func NewRootRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func ReadRootRegistry_entries_Params(msg *capnp.Message) (Registry_entries_Params, error) {
	root, err := msg.Root()
	return Registry_entries_Params{root.Struct()}, err
}

func (s Registry_entries_Params) String() string {
	str, _ := text.Marshal(0x9ffc53716151c5fa, s.Struct)
	return str
}

func (s Registry_entries_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_entries_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_entries_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_entries_Params_List is a list of Registry_entries_Params.
type Registry_entries_Params_List struct{ capnp.List }

// NewRegistry_entries_Params creates a new list of Registry_entries_Params.
func NewRegistry_entries_Params_List(s *capnp.Segment, sz int32) (Registry_entries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Params_List{l}, err
}

func (s Registry_entries_Params_List) At(i int) Registry_entries_Params {
	return Registry_entries_Params{s.List.Struct(i)}
}

func (s Registry_entries_Params_List) Set(i int, v Registry_entries_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Params_List) String() string {
	str, _ := text.MarshalList(0x9ffc53716151c5fa, s.List)
	return str
}

// Registry_entries_Params_Future is a wrapper for a Registry_entries_Params promised by a client call.
type Registry_entries_Params_Future struct{ *capnp.Future }

func (p Registry_entries_Params_Future) Struct() (Registry_entries_Params, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Params{s}, err
}

type Registry_entries_Results struct{ capnp.Struct }

// Registry_entries_Results_TypeID is the unique identifier for the type Registry_entries_Results.
const Registry_entries_Results_TypeID = 0xe4eaf56eb486064d

func NewRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func NewRootRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func ReadRootRegistry_entries_Results(msg *capnp.Message) (Registry_entries_Results, error) {
	root, err := msg.Root()
	return Registry_entries_Results{root.Struct()}, err
}

func (s Registry_entries_Results) String() string {
	str, _ := text.Marshal(0xe4eaf56eb486064d, s.Struct)
	return str
}

func (s Registry_entries_Results) Entries() (Registry_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Registry_Entry_List{List: p.List()}, err
}

func (s Registry_entries_Results) HasEntries() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Results) SetEntries(v Registry_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Registry_Entry_List, preferring placement in s's segment.
func (s Registry_entries_Results) NewEntries(n int32) (Registry_Entry_List, error) {
	l, err := NewRegistry_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Registry_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_entries_Results_List is a list of Registry_entries_Results.
type Registry_entries_Results_List struct{ capnp.List }

// NewRegistry_entries_Results creates a new list of Registry_entries_Results.
func NewRegistry_entries_Results_List(s *capnp.Segment, sz int32) (Registry_entries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Results_List{l}, err
}

func (s Registry_entries_Results_List) At(i int) Registry_entries_Results {
	return Registry_entries_Results{s.List.Struct(i)}
}

func (s Registry_entries_Results_List) Set(i int, v Registry_entries_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Results_List) String() string {
	str, _ := text.MarshalList(0xe4eaf56eb486064d, s.List)
	return str
}

// Registry_entries_Results_Future is a wrapper for a Registry_entries_Results promised by a client call.
type Registry_entries_Results_Future struct{ *capnp.Future }

func (p Registry_entries_Results_Future) Struct() (Registry_entries_Results, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Results{s}, err
}

type Registrar struct{ Client *capnp.Client }

// Registrar_TypeID is the unique identifier for the type Registrar.
const Registrar_TypeID = 0xabaef93c36f2d1ea

func (c Registrar) Register(ctx context.Context, params func(Registrar_register_Params) error) (Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_register_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registrar_register_Results_Future{Future: ans.Future()}, release
}

func (c Registrar) AddRef() Registrar {
	return Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c Registrar) Release() {
	c.Client.Release()
}

// A Registrar_Server is a Registrar with a local implementation.
type Registrar_Server interface {
	Register(context.Context, Registrar_register) error
}

// Registrar_NewServer creates a new Server from an implementation of Registrar_Server.
func Registrar_NewServer(s Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Methods(nil, s), s, c, policy)
}

// Registrar_ServerToClient creates a new Client from an implementation of Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ServerToClient(s Registrar_Server, policy *server.Policy) Registrar {
	return Registrar{Client: capnp.NewClient(Registrar_NewServer(s, policy))}
}

// Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Methods(methods []server.Method, s Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Registrar_register{call})
		},
	})

	return methods
}

// Registrar_register holds the state for a server call to Registrar.register.
// See server.Call for documentation.
type Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_register) Args() Registrar_register_Params {
	return Registrar_register_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registrar_register) AllocResults() (Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{Struct: r}, err
}

type Registrar_register_Params struct{ capnp.Struct }

// Registrar_register_Params_TypeID is the unique identifier for the type Registrar_register_Params.
const Registrar_register_Params_TypeID = 0x98ee0ca0962009bc

func NewRegistrar_register_Params(s *capnp.Segment) (Registrar_register_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registrar_register_Params{st}, err
}

func NewRootRegistrar_register_Params(s *capnp.Segment) (Registrar_register_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registrar_register_Params{st}, err
}

func ReadRootRegistrar_register_Params(msg *capnp.Message) (Registrar_register_Params, error) {
	root, err := msg.Root()
	return Registrar_register_Params{root.Struct()}, err
}

func (s Registrar_register_Params) String() string {
	str, _ := text.Marshal(0x98ee0ca0962009bc, s.Struct)
	return str
}

func (s Registrar_register_Params) Ref() common.Identifiable {
	p, _ := s.Struct.Ptr(0)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registrar_register_Params) HasRef() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_register_Params) SetRef(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Params) RegName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Registrar_register_Params) HasRegName() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_register_Params) RegNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Registrar_register_Params) SetRegName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Registrar_register_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registrar_register_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(2)
}

func (s Registrar_register_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registrar_register_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(2, v)
}

// Registrar_register_Params_List is a list of Registrar_register_Params.
type Registrar_register_Params_List struct{ capnp.List }

// NewRegistrar_register_Params creates a new list of Registrar_register_Params.
func NewRegistrar_register_Params_List(s *capnp.Segment, sz int32) (Registrar_register_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Registrar_register_Params_List{l}, err
}

func (s Registrar_register_Params_List) At(i int) Registrar_register_Params {
	return Registrar_register_Params{s.List.Struct(i)}
}

func (s Registrar_register_Params_List) Set(i int, v Registrar_register_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_register_Params_List) String() string {
	str, _ := text.MarshalList(0x98ee0ca0962009bc, s.List)
	return str
}

// Registrar_register_Params_Future is a wrapper for a Registrar_register_Params promised by a client call.
type Registrar_register_Params_Future struct{ *capnp.Future }

func (p Registrar_register_Params_Future) Struct() (Registrar_register_Params, error) {
	s, err := p.Future.Struct()
	return Registrar_register_Params{s}, err
}

func (p Registrar_register_Params_Future) Ref() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(0, nil).Client()}
}

type Registrar_register_Results struct{ capnp.Struct }

// Registrar_register_Results_TypeID is the unique identifier for the type Registrar_register_Results.
const Registrar_register_Results_TypeID = 0xb2a9b080f0c4013c

func NewRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func NewRootRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func ReadRootRegistrar_register_Results(msg *capnp.Message) (Registrar_register_Results, error) {
	root, err := msg.Root()
	return Registrar_register_Results{root.Struct()}, err
}

func (s Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xb2a9b080f0c4013c, s.Struct)
	return str
}

func (s Registrar_register_Results) Unreg() common.Callback {
	p, _ := s.Struct.Ptr(0)
	return common.Callback{Client: p.Interface().Client()}
}

func (s Registrar_register_Results) HasUnreg() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_register_Results) SetUnreg(v common.Callback) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Results) Rereg() (capnp.Ptr, error) {
	return s.Struct.Ptr(1)
}

func (s Registrar_register_Results) HasRereg() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_register_Results) SetRereg(v capnp.Ptr) error {
	return s.Struct.SetPtr(1, v)
}

// Registrar_register_Results_List is a list of Registrar_register_Results.
type Registrar_register_Results_List struct{ capnp.List }

// NewRegistrar_register_Results creates a new list of Registrar_register_Results.
func NewRegistrar_register_Results_List(s *capnp.Segment, sz int32) (Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Registrar_register_Results_List{l}, err
}

func (s Registrar_register_Results_List) At(i int) Registrar_register_Results {
	return Registrar_register_Results{s.List.Struct(i)}
}

func (s Registrar_register_Results_List) Set(i int, v Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xb2a9b080f0c4013c, s.List)
	return str
}

// Registrar_register_Results_Future is a wrapper for a Registrar_register_Results promised by a client call.
type Registrar_register_Results_Future struct{ *capnp.Future }

func (p Registrar_register_Results_Future) Struct() (Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return Registrar_register_Results{s}, err
}

func (p Registrar_register_Results_Future) Unreg() common.Callback {
	return common.Callback{Client: p.Future.Field(0, nil).Client()}
}

func (p Registrar_register_Results_Future) Rereg() *capnp.Future {
	return p.Future.Field(1, nil)
}

const schema_fe1be0c39c7e8269 = "x\xda\xacV]l\x14U\x14>gfvg\xdb." +
	"\xb4\x97)\x82!\xa6\xa0}\x00\x02\x95\x164J \xdd" +
	"-\x10\xba\x95B\xef\x82?\xf4A\x99\xeeN\x9b\x92\xee" +
	"n\x9d\x99\xc5,\x86\x16\xc4\x80\xbc \xf8@\x0cbD" +
	"\x8c\x0f\x15\x10h J\x04\x09\xa01B\x88!\x80\x1a" +
	"I\x8c$\x86D\x12Q\xd0\xa2\xf8\xc3\x98{g\xef\xec" +
	"\xb4\xddRLxkg\xbf{\xce\xf9\xce\xf9\xce\xcf\xac" +
	"\xb0\x12\x91j\x03\x1f\x95\x01\xd0\xd7\x02A\xe7\xedc\x8d" +
	"\xfdW6\x8e\xdb\x02d\"\x02\x04P\x05\x98}2\xd0" +
	"\x86\x80\xda\xb9@=\xa0s\xfar\xeb\xfa\xf0\xa5\x13[" +
	"\x81\x8cg\x00\x89\x01n\x04\x1a\x18\xe0v\xe0%@\xe7" +
	"\xbd+=\xd7{\x0e\xbd\xbf#\x0f\xe0\x16:\x83q\x06" +
	"\xc8\x06\x99\x85c%\x93w\xec\x0e_\x7f\x13\xc8\x83\x0c" +
	" \xab\x158\xbb/\xd8\xc4\x00G\x82\x07\x00\x9d\xb7N" +
	"\xcdy\xfe\xea\xd5\xd8.7\x06\x85\x19\xa0\xeaN\x04\xc5" +
	"\xf9\xebs\xaa\xbf\xb8\xfc\x9fw\xfc\xd1E\xd5\xb9\xeci" +
	"Le\xb6\x0f\x8f\xf9\xe4\x99\xe0\xad7v\xfb\x9d\xa7\xd4" +
	"V\x06\xc8q@\xe0\xf5\xae\x0a\xf9\xdd}}~\xc0~" +
	"\x95\xf3;\xca\x01\xd7\xce\xdf||\xde\xed\x0f\xf7\x02)" +
	"\x97\x9d\xceWzv\x9d\xfea\xd2\x1d\x00\xa8@\xedg" +
	"\xf5\x8cv[U\x01\xb4\x01u\xb1\x16\x0b\xa9Z,T" +
	"\xee\xcc\xc3\xcf~]\x7f\xb0\xaf?OGbt\xa2!" +
	"\xce\xb79\xc4\x12rp\x96\xb5\xe1\xc8\xaa\x13\xfd\xfe\xa0" +
	"\xfbB{\xb8\xcb\x10sy\xe41s\xed\xa3\x1b\xe7\x1f" +
	"\x07:\x1e\x05\xe1\x9fB<!\x03\x1c\xa0\xed\xfb#L" +
	"7\xe7N2\x0b\xce\xc7\xb3\x83\xab\xce?\xf5\xf2\x19\x96" +
	"9\x00m|\xc9MmJ\x09\xfb\xeb\xa1\x12\x96<\xef" +
	"\xe7\xc1\xf1\xa3v\xb4\xe4\x94v\xb2d\x02\x80\xf6e\xc9" +
	"\x17Zs\xe9\x04\x00\xe7\xeb\xef\xd7\xe3\xd6I\x9f^\xf2" +
	"\x17s~)OW\xac\x94\xc5\xfe\xc2\xef\x17zv~" +
	"\xb3\xf9[\x7f\xba\x0e\x95\xf2\xd0\x8e\x97\xb2\xd0nmz" +
	"\xf5\xd0\xdf\x17\x1f\xb8\x9c\x8f\xddE\xdc(u\xf5\xc0M" +
	"4\x077\x1dN\x0f\\\xfb\xd1O\x7fe\x19\x07\xe8e" +
	"\x9c\xfe\x94-\x95_\xfd9\xe3\xba\xeb\x83\xb3\xdf^6" +
	"\x9d\x95{\xe9\xb3\xedk\x1e\xf9M\x1e\x18\xc6%W\xf6" +
	"\x81\xb6\xa1\x8c!\xd7\x95-FmeX\x05p\xf6\xff" +
	"\xbbn\xef/g\xda\xee\xf8c\x8d\x86\xeb8\x99p=" +
	"lsL\xa3\xa3\xd3\xb2\xcd\x9cR\x93\xd0\xbb\xd3\xdds" +
	"\xe3\xf9\xffk\x12\xbamtd\xcc\\,\xdd\x9e\xa9n" +
	"\xd1MUOYT\x91\x15\x00\x05\x01\xc8\x98V\x00\x1a" +
	"\x96\x91N\x94\xd0\x11X\x90cI\x0c\x83\x84a\xc0a" +
	"\x96\xa3\xc9Tg\xba&\x95Yc,k[m$l" +
	"\x8bY\xd5S\x16\xd0\x90guZ\x1c\x80N\x95\x91." +
	"\x94\x90 V\xb2\xf4\x91h\x03\x00\x9d'#m\x94\xd0" +
	"\xc9\xf0\xb7\xb1$\xa0\x85c\x01[d\xe4\x0e\xc7\x02\xf6" +
	"\xda\x99\x05\xba=j\x00\xa61,\x04\x1cD,\x9e'" +
	"6\xf5\xae\xdeFJ\x9cn\xd6\xb8\xbf\x18\xa6\xe0\xc7\xcc" +
	"\x09\xeb\x8b\x1e\x06\xa0\x11\x19\xe9\x12\x1f\xc1\x18#\xb8P" +
	"F\xda\"!\x91\xa4J\x94\x00H3K\xf0\x12\x19\xe9" +
	"s\x12\xaa\xa6\xd1\x8e\xc4\xb9\xd4\xb8k\xe5\xd9\xf3\x07\xfa" +
	"\x01\x10\x09`\xafit,\xd5S\x86G\xf8\xaee\x08" +
	"\x0c-\xb0\x95\xed\xee\xce\x98\xb6\x91\\\xe0>\xeb4\xdc" +
	"t\xc8)\xcb{$\x0f}d\xa4m\x0e\xacw\xb9\xdd" +
	"\x07A\x0c\xaeG\xdc\xb0\xb2]\xb2=\xc8\xf0Z_A" +
	"\\tr\x19\xd4\xbb\x0fDU\x06'g\xec(\xde\xf2" +
	"\x8cs\xdc\x9d\xdau?\xddIC\xe5\x00\xd0\x82H\x15" +
	"9\x00\xe0My\x14\xf3\x91\x90&\x80h\x05F'#" +
	"\xa9U\x1d\xa1\x1c\x00 XE\x15\xc97z\xb9R\x8a" +
	"}\x8c`\x0bbTA\x82qg\xb9\x9d5\x93\xb9\xb8" +
	"\x01\xd8~/\x02\xe5\xd9\xb6\xd1\xf2w`\x1d\x00\xad\x96" +
	"\x91\xce\xf2\x09tf]\xbe-\xe7HX\x95M\x9bF" +
	"\x07\x12g\xc2\x8d\x13\xf4\x9c2m[^\x8dU\xa6\xc1" +
	"\xbe\x8fC_x\x008\xee\xffJ\xb0XI\xa6\x03\x1b" +
	"\x12H\xab%,O\xe8\x852T8\x17\xbe\x93\xef\x9c" +
	"\xed9{\xf1\xeeU\xd7\x93\xc9A%\xef\xb2YW\xfa" +
	"\x1c4\xe4\x1dTJ\xd8ke\x13\x09\xc3\xb2\x10AB" +
	"\x1c\xb9\xb2\xb9\x9a\xaaEi\xdb\xcc\xb1\xea\xfa\xfa\xbb\xd5" +
	"\xd7\xca\"}\xcd\xac\xe9\x1be\xa4+|\xfdM\xa7\x17" +
	"\xfa\xbbh\xbf\x14o\xfa\xf2\xb4\xbf\xe3G\x8a\x0d\xa8\x82" +
	"\xfe\x15\x89un\xb04\xccu(\x8e\x09\x14k\x98\xd0" +
	"= \x91f\x15\xd1;vP\xa4\x96DW\x83D\x9e" +
	"TQ\xf2N\x0d\x14\xfb\x8b\xccl\x00\x89LQ\x1dQ" +
	"I\x14\x89V;\x0d+\xe2#V\xce\xf6H\x04{\xf3" +
	"\x03$\x82<\xc2\x029\xb8\xb7\x86\xcd\x0f(\xbf`[" +
	"\x0b\xda\xf42^{\x0a\x80\xce\x91\x91FF\x1aFb" +
	"\xe8H\x09\xdbZ\x91\x11\xf6\xd9\xa4\xbf\xf7\xfdUTJ" +
	"\xfe\xf1\xe1\x0e\x8f\xb6\xd5P\xcf\xb7\xc8\xa8;d\xb8Z" +
	"\x8b\xac\xc8\xa6\x02_N\x17\x91\xd4\xce\x05\xa03d\xa4" +
	"O\xf8\xe9\x02\x0ci\x90\x0a\xc0\xfal\xb7e\x98\xf60" +
	"q+#\x0dz\xc1\xb1X\xb7TK^=\x0b\x1d\xe9" +
	"\x89nHG\xcaC\xca\xea~\xadn\xd1\xcb\x19C\x0f" +
	"\x86\x02V\xcep\xac\xb9*\xb9d\xc5M\x85\xe20$" +
	"\xdb\xdb@\"[\x98d\xc5\xc5\x86\xe2\x90%\xeb\xd6\x82" +
	"D\xb2L\xb2\xe24Gq\xb5\x91N\xf6NWQ\xf6" +
	"\xaer\x14\x172y\xdat\xdb@\xf1\x0e0\x14\x17\x14" +
	"\x896\xf16pDy@\xcd\x98\xb9\x88\xd8\x11\x0bt" +
	"\xa8w\xf3\x1e)\x88\x0b\xd4\x84my\x90emP\xc5" +
	"\x85\x13)d\x05\xf2\xf3{\xb44\xc5\x8d*^\x07\x7f" +
	"\x19\x9a|\x0b\xd7g\x0fI\xe1\xdeug\xc6\x7f\x01\x00" +
	"\x00\xff\xff\xb9\x0e\xa4\x8f"

func init() {
	schemas.Register(schema_fe1be0c39c7e8269,
		0x891283e1b248bc9d,
		0x8ebfd50c805adbc3,
		0x96a5b17eee7ee1a3,
		0x98ee0ca0962009bc,
		0x9c49e6e65e34c29b,
		0x9ffc53716151c5fa,
		0xa092f60656bb0db4,
		0xa9aca103106c8f05,
		0xabaef93c36f2d1ea,
		0xb2a9b080f0c4013c,
		0xb2bf60b5817330b0,
		0xbd3d832f7a7235b5,
		0xc17987510cf7ac13,
		0xca7b4bd1600633b8,
		0xd5be1b8e0180ded6,
		0xd887d79a7ed3f45f,
		0xdb16d4fbb18486f6,
		0xe4eaf56eb486064d,
		0xee2cf8cf148921b5,
		0xf503f3237666574e,
		0xfe62caefab7dfdad)
}
