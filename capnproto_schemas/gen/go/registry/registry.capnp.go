// Code generated by capnpc-go. DO NOT EDIT.

package registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/persistence"
)

type Admin struct{ Client *capnp.Client }

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xf503f3237666574e

func (c Admin) AddCategory(ctx context.Context, params func(Admin_addCategory_Params) error) (Admin_addCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_addCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_addCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveCategory(ctx context.Context, params func(Admin_removeCategory_Params) error) (Admin_removeCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) MoveObjects(ctx context.Context, params func(Admin_moveObjects_Params) error) (Admin_moveObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_moveObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_moveObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveObjects(ctx context.Context, params func(Admin_removeObjects_Params) error) (Admin_removeObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Registry(ctx context.Context, params func(Admin_registry_Params) error) (Admin_registry_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_registry_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_registry_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Admin) AddRef() Admin {
	return Admin{
		Client: c.Client.AddRef(),
	}
}

func (c Admin) Release() {
	c.Client.Release()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	AddCategory(context.Context, Admin_addCategory) error

	RemoveCategory(context.Context, Admin_removeCategory) error

	MoveObjects(context.Context, Admin_moveObjects) error

	RemoveObjects(context.Context, Admin_removeObjects) error

	Registry(context.Context, Admin_registry) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c, policy)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server, policy *server.Policy) Admin {
	return Admin{Client: capnp.NewClient(Admin_NewServer(s, policy))}
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddCategory(ctx, Admin_addCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveCategory(ctx, Admin_removeCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MoveObjects(ctx, Admin_moveObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveObjects(ctx, Admin_removeObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Admin_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_addCategory holds the state for a server call to Admin.addCategory.
// See server.Call for documentation.
type Admin_addCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_addCategory) Args() Admin_addCategory_Params {
	return Admin_addCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_addCategory) AllocResults() (Admin_addCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{Struct: r}, err
}

// Admin_removeCategory holds the state for a server call to Admin.removeCategory.
// See server.Call for documentation.
type Admin_removeCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeCategory) Args() Admin_removeCategory_Params {
	return Admin_removeCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeCategory) AllocResults() (Admin_removeCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{Struct: r}, err
}

// Admin_moveObjects holds the state for a server call to Admin.moveObjects.
// See server.Call for documentation.
type Admin_moveObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_moveObjects) Args() Admin_moveObjects_Params {
	return Admin_moveObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_moveObjects) AllocResults() (Admin_moveObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{Struct: r}, err
}

// Admin_removeObjects holds the state for a server call to Admin.removeObjects.
// See server.Call for documentation.
type Admin_removeObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeObjects) Args() Admin_removeObjects_Params {
	return Admin_removeObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeObjects) AllocResults() (Admin_removeObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{Struct: r}, err
}

// Admin_registry holds the state for a server call to Admin.registry.
// See server.Call for documentation.
type Admin_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_registry) Args() Admin_registry_Params {
	return Admin_registry_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_registry) AllocResults() (Admin_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{Struct: r}, err
}

type Admin_addCategory_Params struct{ capnp.Struct }

// Admin_addCategory_Params_TypeID is the unique identifier for the type Admin_addCategory_Params.
const Admin_addCategory_Params_TypeID = 0xdb16d4fbb18486f6

func NewAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func NewRootAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func ReadRootAdmin_addCategory_Params(msg *capnp.Message) (Admin_addCategory_Params, error) {
	root, err := msg.Root()
	return Admin_addCategory_Params{root.Struct()}, err
}

func (s Admin_addCategory_Params) String() string {
	str, _ := text.Marshal(0xdb16d4fbb18486f6, s.Struct)
	return str
}

func (s Admin_addCategory_Params) Category() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Admin_addCategory_Params) HasCategory() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_addCategory_Params) SetCategory(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCategory sets the category field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_addCategory_Params) NewCategory() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Admin_addCategory_Params) Upsert() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Params) SetUpsert(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Params_List is a list of Admin_addCategory_Params.
type Admin_addCategory_Params_List struct{ capnp.List }

// NewAdmin_addCategory_Params creates a new list of Admin_addCategory_Params.
func NewAdmin_addCategory_Params_List(s *capnp.Segment, sz int32) (Admin_addCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Admin_addCategory_Params_List{l}, err
}

func (s Admin_addCategory_Params_List) At(i int) Admin_addCategory_Params {
	return Admin_addCategory_Params{s.List.Struct(i)}
}

func (s Admin_addCategory_Params_List) Set(i int, v Admin_addCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xdb16d4fbb18486f6, s.List)
	return str
}

// Admin_addCategory_Params_Future is a wrapper for a Admin_addCategory_Params promised by a client call.
type Admin_addCategory_Params_Future struct{ *capnp.Future }

func (p Admin_addCategory_Params_Future) Struct() (Admin_addCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Params{s}, err
}

func (p Admin_addCategory_Params_Future) Category() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Admin_addCategory_Results struct{ capnp.Struct }

// Admin_addCategory_Results_TypeID is the unique identifier for the type Admin_addCategory_Results.
const Admin_addCategory_Results_TypeID = 0xbd3d832f7a7235b5

func NewAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func NewRootAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func ReadRootAdmin_addCategory_Results(msg *capnp.Message) (Admin_addCategory_Results, error) {
	root, err := msg.Root()
	return Admin_addCategory_Results{root.Struct()}, err
}

func (s Admin_addCategory_Results) String() string {
	str, _ := text.Marshal(0xbd3d832f7a7235b5, s.Struct)
	return str
}

func (s Admin_addCategory_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Results_List is a list of Admin_addCategory_Results.
type Admin_addCategory_Results_List struct{ capnp.List }

// NewAdmin_addCategory_Results creates a new list of Admin_addCategory_Results.
func NewAdmin_addCategory_Results_List(s *capnp.Segment, sz int32) (Admin_addCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Admin_addCategory_Results_List{l}, err
}

func (s Admin_addCategory_Results_List) At(i int) Admin_addCategory_Results {
	return Admin_addCategory_Results{s.List.Struct(i)}
}

func (s Admin_addCategory_Results_List) Set(i int, v Admin_addCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xbd3d832f7a7235b5, s.List)
	return str
}

// Admin_addCategory_Results_Future is a wrapper for a Admin_addCategory_Results promised by a client call.
type Admin_addCategory_Results_Future struct{ *capnp.Future }

func (p Admin_addCategory_Results_Future) Struct() (Admin_addCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Results{s}, err
}

type Admin_removeCategory_Params struct{ capnp.Struct }

// Admin_removeCategory_Params_TypeID is the unique identifier for the type Admin_removeCategory_Params.
const Admin_removeCategory_Params_TypeID = 0xd5be1b8e0180ded6

func NewAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func NewRootAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func ReadRootAdmin_removeCategory_Params(msg *capnp.Message) (Admin_removeCategory_Params, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Params{root.Struct()}, err
}

func (s Admin_removeCategory_Params) String() string {
	str, _ := text.Marshal(0xd5be1b8e0180ded6, s.Struct)
	return str
}

func (s Admin_removeCategory_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasMoveObjectsToCategoryId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetMoveObjectsToCategoryId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_removeCategory_Params_List is a list of Admin_removeCategory_Params.
type Admin_removeCategory_Params_List struct{ capnp.List }

// NewAdmin_removeCategory_Params creates a new list of Admin_removeCategory_Params.
func NewAdmin_removeCategory_Params_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_removeCategory_Params_List{l}, err
}

func (s Admin_removeCategory_Params_List) At(i int) Admin_removeCategory_Params {
	return Admin_removeCategory_Params{s.List.Struct(i)}
}

func (s Admin_removeCategory_Params_List) Set(i int, v Admin_removeCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xd5be1b8e0180ded6, s.List)
	return str
}

// Admin_removeCategory_Params_Future is a wrapper for a Admin_removeCategory_Params promised by a client call.
type Admin_removeCategory_Params_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Params_Future) Struct() (Admin_removeCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Params{s}, err
}

type Admin_removeCategory_Results struct{ capnp.Struct }

// Admin_removeCategory_Results_TypeID is the unique identifier for the type Admin_removeCategory_Results.
const Admin_removeCategory_Results_TypeID = 0xa9aca103106c8f05

func NewAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func NewRootAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func ReadRootAdmin_removeCategory_Results(msg *capnp.Message) (Admin_removeCategory_Results, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Results{root.Struct()}, err
}

func (s Admin_removeCategory_Results) String() string {
	str, _ := text.Marshal(0xa9aca103106c8f05, s.Struct)
	return str
}

func (s Admin_removeCategory_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeCategory_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeCategory_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeCategory_Results_List is a list of Admin_removeCategory_Results.
type Admin_removeCategory_Results_List struct{ capnp.List }

// NewAdmin_removeCategory_Results creates a new list of Admin_removeCategory_Results.
func NewAdmin_removeCategory_Results_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeCategory_Results_List{l}, err
}

func (s Admin_removeCategory_Results_List) At(i int) Admin_removeCategory_Results {
	return Admin_removeCategory_Results{s.List.Struct(i)}
}

func (s Admin_removeCategory_Results_List) Set(i int, v Admin_removeCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xa9aca103106c8f05, s.List)
	return str
}

// Admin_removeCategory_Results_Future is a wrapper for a Admin_removeCategory_Results promised by a client call.
type Admin_removeCategory_Results_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Results_Future) Struct() (Admin_removeCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Results{s}, err
}

type Admin_moveObjects_Params struct{ capnp.Struct }

// Admin_moveObjects_Params_TypeID is the unique identifier for the type Admin_moveObjects_Params.
const Admin_moveObjects_Params_TypeID = 0x8ebfd50c805adbc3

func NewAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func NewRootAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func ReadRootAdmin_moveObjects_Params(msg *capnp.Message) (Admin_moveObjects_Params, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Params{root.Struct()}, err
}

func (s Admin_moveObjects_Params) String() string {
	str, _ := text.Marshal(0x8ebfd50c805adbc3, s.Struct)
	return str
}

func (s Admin_moveObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Admin_moveObjects_Params) ToCatId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_moveObjects_Params) HasToCatId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_moveObjects_Params) ToCatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_moveObjects_Params) SetToCatId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_moveObjects_Params_List is a list of Admin_moveObjects_Params.
type Admin_moveObjects_Params_List struct{ capnp.List }

// NewAdmin_moveObjects_Params creates a new list of Admin_moveObjects_Params.
func NewAdmin_moveObjects_Params_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_moveObjects_Params_List{l}, err
}

func (s Admin_moveObjects_Params_List) At(i int) Admin_moveObjects_Params {
	return Admin_moveObjects_Params{s.List.Struct(i)}
}

func (s Admin_moveObjects_Params_List) Set(i int, v Admin_moveObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x8ebfd50c805adbc3, s.List)
	return str
}

// Admin_moveObjects_Params_Future is a wrapper for a Admin_moveObjects_Params promised by a client call.
type Admin_moveObjects_Params_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Params_Future) Struct() (Admin_moveObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Params{s}, err
}

type Admin_moveObjects_Results struct{ capnp.Struct }

// Admin_moveObjects_Results_TypeID is the unique identifier for the type Admin_moveObjects_Results.
const Admin_moveObjects_Results_TypeID = 0xd887d79a7ed3f45f

func NewAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func NewRootAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func ReadRootAdmin_moveObjects_Results(msg *capnp.Message) (Admin_moveObjects_Results, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Results{root.Struct()}, err
}

func (s Admin_moveObjects_Results) String() string {
	str, _ := text.Marshal(0xd887d79a7ed3f45f, s.Struct)
	return str
}

func (s Admin_moveObjects_Results) MovedObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Results) HasMovedObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Results) SetMovedObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMovedObjectIds sets the movedObjectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Results) NewMovedObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_moveObjects_Results_List is a list of Admin_moveObjects_Results.
type Admin_moveObjects_Results_List struct{ capnp.List }

// NewAdmin_moveObjects_Results creates a new list of Admin_moveObjects_Results.
func NewAdmin_moveObjects_Results_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_moveObjects_Results_List{l}, err
}

func (s Admin_moveObjects_Results_List) At(i int) Admin_moveObjects_Results {
	return Admin_moveObjects_Results{s.List.Struct(i)}
}

func (s Admin_moveObjects_Results_List) Set(i int, v Admin_moveObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xd887d79a7ed3f45f, s.List)
	return str
}

// Admin_moveObjects_Results_Future is a wrapper for a Admin_moveObjects_Results promised by a client call.
type Admin_moveObjects_Results_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Results_Future) Struct() (Admin_moveObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Results{s}, err
}

type Admin_removeObjects_Params struct{ capnp.Struct }

// Admin_removeObjects_Params_TypeID is the unique identifier for the type Admin_removeObjects_Params.
const Admin_removeObjects_Params_TypeID = 0x96a5b17eee7ee1a3

func NewAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func NewRootAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func ReadRootAdmin_removeObjects_Params(msg *capnp.Message) (Admin_removeObjects_Params, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Params{root.Struct()}, err
}

func (s Admin_removeObjects_Params) String() string {
	str, _ := text.Marshal(0x96a5b17eee7ee1a3, s.Struct)
	return str
}

func (s Admin_removeObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_removeObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_removeObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Params_List is a list of Admin_removeObjects_Params.
type Admin_removeObjects_Params_List struct{ capnp.List }

// NewAdmin_removeObjects_Params creates a new list of Admin_removeObjects_Params.
func NewAdmin_removeObjects_Params_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Params_List{l}, err
}

func (s Admin_removeObjects_Params_List) At(i int) Admin_removeObjects_Params {
	return Admin_removeObjects_Params{s.List.Struct(i)}
}

func (s Admin_removeObjects_Params_List) Set(i int, v Admin_removeObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x96a5b17eee7ee1a3, s.List)
	return str
}

// Admin_removeObjects_Params_Future is a wrapper for a Admin_removeObjects_Params promised by a client call.
type Admin_removeObjects_Params_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Params_Future) Struct() (Admin_removeObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Params{s}, err
}

type Admin_removeObjects_Results struct{ capnp.Struct }

// Admin_removeObjects_Results_TypeID is the unique identifier for the type Admin_removeObjects_Results.
const Admin_removeObjects_Results_TypeID = 0xa092f60656bb0db4

func NewAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func NewRootAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func ReadRootAdmin_removeObjects_Results(msg *capnp.Message) (Admin_removeObjects_Results, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Results{root.Struct()}, err
}

func (s Admin_removeObjects_Results) String() string {
	str, _ := text.Marshal(0xa092f60656bb0db4, s.Struct)
	return str
}

func (s Admin_removeObjects_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeObjects_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeObjects_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Results_List is a list of Admin_removeObjects_Results.
type Admin_removeObjects_Results_List struct{ capnp.List }

// NewAdmin_removeObjects_Results creates a new list of Admin_removeObjects_Results.
func NewAdmin_removeObjects_Results_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Results_List{l}, err
}

func (s Admin_removeObjects_Results_List) At(i int) Admin_removeObjects_Results {
	return Admin_removeObjects_Results{s.List.Struct(i)}
}

func (s Admin_removeObjects_Results_List) Set(i int, v Admin_removeObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xa092f60656bb0db4, s.List)
	return str
}

// Admin_removeObjects_Results_Future is a wrapper for a Admin_removeObjects_Results promised by a client call.
type Admin_removeObjects_Results_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Results_Future) Struct() (Admin_removeObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Results{s}, err
}

type Admin_registry_Params struct{ capnp.Struct }

// Admin_registry_Params_TypeID is the unique identifier for the type Admin_registry_Params.
const Admin_registry_Params_TypeID = 0xee2cf8cf148921b5

func NewAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func NewRootAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func ReadRootAdmin_registry_Params(msg *capnp.Message) (Admin_registry_Params, error) {
	root, err := msg.Root()
	return Admin_registry_Params{root.Struct()}, err
}

func (s Admin_registry_Params) String() string {
	str, _ := text.Marshal(0xee2cf8cf148921b5, s.Struct)
	return str
}

// Admin_registry_Params_List is a list of Admin_registry_Params.
type Admin_registry_Params_List struct{ capnp.List }

// NewAdmin_registry_Params creates a new list of Admin_registry_Params.
func NewAdmin_registry_Params_List(s *capnp.Segment, sz int32) (Admin_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_registry_Params_List{l}, err
}

func (s Admin_registry_Params_List) At(i int) Admin_registry_Params {
	return Admin_registry_Params{s.List.Struct(i)}
}

func (s Admin_registry_Params_List) Set(i int, v Admin_registry_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Params_List) String() string {
	str, _ := text.MarshalList(0xee2cf8cf148921b5, s.List)
	return str
}

// Admin_registry_Params_Future is a wrapper for a Admin_registry_Params promised by a client call.
type Admin_registry_Params_Future struct{ *capnp.Future }

func (p Admin_registry_Params_Future) Struct() (Admin_registry_Params, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Params{s}, err
}

type Admin_registry_Results struct{ capnp.Struct }

// Admin_registry_Results_TypeID is the unique identifier for the type Admin_registry_Results.
const Admin_registry_Results_TypeID = 0xfe62caefab7dfdad

func NewAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func NewRootAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func ReadRootAdmin_registry_Results(msg *capnp.Message) (Admin_registry_Results, error) {
	root, err := msg.Root()
	return Admin_registry_Results{root.Struct()}, err
}

func (s Admin_registry_Results) String() string {
	str, _ := text.Marshal(0xfe62caefab7dfdad, s.Struct)
	return str
}

func (s Admin_registry_Results) Registry() Registry {
	p, _ := s.Struct.Ptr(0)
	return Registry{Client: p.Interface().Client()}
}

func (s Admin_registry_Results) HasRegistry() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_registry_Results) SetRegistry(v Registry) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Admin_registry_Results_List is a list of Admin_registry_Results.
type Admin_registry_Results_List struct{ capnp.List }

// NewAdmin_registry_Results creates a new list of Admin_registry_Results.
func NewAdmin_registry_Results_List(s *capnp.Segment, sz int32) (Admin_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_registry_Results_List{l}, err
}

func (s Admin_registry_Results_List) At(i int) Admin_registry_Results {
	return Admin_registry_Results{s.List.Struct(i)}
}

func (s Admin_registry_Results_List) Set(i int, v Admin_registry_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Results_List) String() string {
	str, _ := text.MarshalList(0xfe62caefab7dfdad, s.List)
	return str
}

// Admin_registry_Results_Future is a wrapper for a Admin_registry_Results promised by a client call.
type Admin_registry_Results_Future struct{ *capnp.Future }

func (p Admin_registry_Results_Future) Struct() (Admin_registry_Results, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Results{s}, err
}

func (p Admin_registry_Results_Future) Registry() Registry {
	return Registry{Client: p.Future.Field(0, nil).Client()}
}

type Registry struct{ Client *capnp.Client }

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xca7b4bd1600633b8

func (c Registry) SupportedCategories(ctx context.Context, params func(Registry_supportedCategories_Params) error) (Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c Registry) CategoryInfo(ctx context.Context, params func(Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Registry) Entries(ctx context.Context, params func(Registry_entries_Params) error) (Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c Registry) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registry) AddRef() Registry {
	return Registry{
		Client: c.Client.AddRef(),
	}
}

func (c Registry) Release() {
	c.Client.Release()
}

// A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	SupportedCategories(context.Context, Registry_supportedCategories) error

	CategoryInfo(context.Context, Registry_categoryInfo) error

	Entries(context.Context, Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c, policy)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server, policy *server.Policy) Registry {
	return Registry{Client: capnp.NewClient(Registry_NewServer(s, policy))}
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registry_supportedCategories holds the state for a server call to Registry.supportedCategories.
// See server.Call for documentation.
type Registry_supportedCategories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_supportedCategories) Args() Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_supportedCategories) AllocResults() (Registry_supportedCategories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{Struct: r}, err
}

// Registry_categoryInfo holds the state for a server call to Registry.categoryInfo.
// See server.Call for documentation.
type Registry_categoryInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_categoryInfo) Args() Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_categoryInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// Registry_entries holds the state for a server call to Registry.entries.
// See server.Call for documentation.
type Registry_entries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_entries) Args() Registry_entries_Params {
	return Registry_entries_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_entries) AllocResults() (Registry_entries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{Struct: r}, err
}

type Registry_Entry struct{ capnp.Struct }

// Registry_Entry_TypeID is the unique identifier for the type Registry_Entry.
const Registry_Entry_TypeID = 0xc17987510cf7ac13

func NewRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func NewRootRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func ReadRootRegistry_Entry(msg *capnp.Message) (Registry_Entry, error) {
	root, err := msg.Root()
	return Registry_Entry{root.Struct()}, err
}

func (s Registry_Entry) String() string {
	str, _ := text.Marshal(0xc17987510cf7ac13, s.Struct)
	return str
}

func (s Registry_Entry) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_Entry) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_Entry) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Registry_Entry) Ref() common.Identifiable {
	p, _ := s.Struct.Ptr(1)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registry_Entry) HasRef() bool {
	return s.Struct.HasPtr(1)
}

func (s Registry_Entry) SetRef(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Registry_Entry) Name() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registry_Entry) HasName() bool {
	return s.Struct.HasPtr(2)
}

func (s Registry_Entry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetName(v string) error {
	return s.Struct.SetText(2, v)
}

// Registry_Entry_List is a list of Registry_Entry.
type Registry_Entry_List struct{ capnp.List }

// NewRegistry_Entry creates a new list of Registry_Entry.
func NewRegistry_Entry_List(s *capnp.Segment, sz int32) (Registry_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Registry_Entry_List{l}, err
}

func (s Registry_Entry_List) At(i int) Registry_Entry { return Registry_Entry{s.List.Struct(i)} }

func (s Registry_Entry_List) Set(i int, v Registry_Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Registry_Entry_List) String() string {
	str, _ := text.MarshalList(0xc17987510cf7ac13, s.List)
	return str
}

// Registry_Entry_Future is a wrapper for a Registry_Entry promised by a client call.
type Registry_Entry_Future struct{ *capnp.Future }

func (p Registry_Entry_Future) Struct() (Registry_Entry, error) {
	s, err := p.Future.Struct()
	return Registry_Entry{s}, err
}

func (p Registry_Entry_Future) Ref() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(1, nil).Client()}
}

type Registry_supportedCategories_Params struct{ capnp.Struct }

// Registry_supportedCategories_Params_TypeID is the unique identifier for the type Registry_supportedCategories_Params.
const Registry_supportedCategories_Params_TypeID = 0x9c49e6e65e34c29b

func NewRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func NewRootRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func ReadRootRegistry_supportedCategories_Params(msg *capnp.Message) (Registry_supportedCategories_Params, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Params{root.Struct()}, err
}

func (s Registry_supportedCategories_Params) String() string {
	str, _ := text.Marshal(0x9c49e6e65e34c29b, s.Struct)
	return str
}

// Registry_supportedCategories_Params_List is a list of Registry_supportedCategories_Params.
type Registry_supportedCategories_Params_List struct{ capnp.List }

// NewRegistry_supportedCategories_Params creates a new list of Registry_supportedCategories_Params.
func NewRegistry_supportedCategories_Params_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Registry_supportedCategories_Params_List{l}, err
}

func (s Registry_supportedCategories_Params_List) At(i int) Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Params_List) Set(i int, v Registry_supportedCategories_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Params_List) String() string {
	str, _ := text.MarshalList(0x9c49e6e65e34c29b, s.List)
	return str
}

// Registry_supportedCategories_Params_Future is a wrapper for a Registry_supportedCategories_Params promised by a client call.
type Registry_supportedCategories_Params_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Params_Future) Struct() (Registry_supportedCategories_Params, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Params{s}, err
}

type Registry_supportedCategories_Results struct{ capnp.Struct }

// Registry_supportedCategories_Results_TypeID is the unique identifier for the type Registry_supportedCategories_Results.
const Registry_supportedCategories_Results_TypeID = 0xb2bf60b5817330b0

func NewRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func NewRootRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func ReadRootRegistry_supportedCategories_Results(msg *capnp.Message) (Registry_supportedCategories_Results, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Results{root.Struct()}, err
}

func (s Registry_supportedCategories_Results) String() string {
	str, _ := text.Marshal(0xb2bf60b5817330b0, s.Struct)
	return str
}

func (s Registry_supportedCategories_Results) Cats() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Registry_supportedCategories_Results) HasCats() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_supportedCategories_Results) SetCats(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCats sets the cats field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Registry_supportedCategories_Results) NewCats(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_supportedCategories_Results_List is a list of Registry_supportedCategories_Results.
type Registry_supportedCategories_Results_List struct{ capnp.List }

// NewRegistry_supportedCategories_Results creates a new list of Registry_supportedCategories_Results.
func NewRegistry_supportedCategories_Results_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_supportedCategories_Results_List{l}, err
}

func (s Registry_supportedCategories_Results_List) At(i int) Registry_supportedCategories_Results {
	return Registry_supportedCategories_Results{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Results_List) Set(i int, v Registry_supportedCategories_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Results_List) String() string {
	str, _ := text.MarshalList(0xb2bf60b5817330b0, s.List)
	return str
}

// Registry_supportedCategories_Results_Future is a wrapper for a Registry_supportedCategories_Results promised by a client call.
type Registry_supportedCategories_Results_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Results_Future) Struct() (Registry_supportedCategories_Results, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Results{s}, err
}

type Registry_categoryInfo_Params struct{ capnp.Struct }

// Registry_categoryInfo_Params_TypeID is the unique identifier for the type Registry_categoryInfo_Params.
const Registry_categoryInfo_Params_TypeID = 0x891283e1b248bc9d

func NewRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func NewRootRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func ReadRootRegistry_categoryInfo_Params(msg *capnp.Message) (Registry_categoryInfo_Params, error) {
	root, err := msg.Root()
	return Registry_categoryInfo_Params{root.Struct()}, err
}

func (s Registry_categoryInfo_Params) String() string {
	str, _ := text.Marshal(0x891283e1b248bc9d, s.Struct)
	return str
}

func (s Registry_categoryInfo_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_categoryInfo_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_categoryInfo_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_categoryInfo_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_categoryInfo_Params_List is a list of Registry_categoryInfo_Params.
type Registry_categoryInfo_Params_List struct{ capnp.List }

// NewRegistry_categoryInfo_Params creates a new list of Registry_categoryInfo_Params.
func NewRegistry_categoryInfo_Params_List(s *capnp.Segment, sz int32) (Registry_categoryInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_categoryInfo_Params_List{l}, err
}

func (s Registry_categoryInfo_Params_List) At(i int) Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{s.List.Struct(i)}
}

func (s Registry_categoryInfo_Params_List) Set(i int, v Registry_categoryInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_categoryInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x891283e1b248bc9d, s.List)
	return str
}

// Registry_categoryInfo_Params_Future is a wrapper for a Registry_categoryInfo_Params promised by a client call.
type Registry_categoryInfo_Params_Future struct{ *capnp.Future }

func (p Registry_categoryInfo_Params_Future) Struct() (Registry_categoryInfo_Params, error) {
	s, err := p.Future.Struct()
	return Registry_categoryInfo_Params{s}, err
}

type Registry_entries_Params struct{ capnp.Struct }

// Registry_entries_Params_TypeID is the unique identifier for the type Registry_entries_Params.
const Registry_entries_Params_TypeID = 0x9ffc53716151c5fa

func NewRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func NewRootRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func ReadRootRegistry_entries_Params(msg *capnp.Message) (Registry_entries_Params, error) {
	root, err := msg.Root()
	return Registry_entries_Params{root.Struct()}, err
}

func (s Registry_entries_Params) String() string {
	str, _ := text.Marshal(0x9ffc53716151c5fa, s.Struct)
	return str
}

func (s Registry_entries_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_entries_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_entries_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_entries_Params_List is a list of Registry_entries_Params.
type Registry_entries_Params_List struct{ capnp.List }

// NewRegistry_entries_Params creates a new list of Registry_entries_Params.
func NewRegistry_entries_Params_List(s *capnp.Segment, sz int32) (Registry_entries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Params_List{l}, err
}

func (s Registry_entries_Params_List) At(i int) Registry_entries_Params {
	return Registry_entries_Params{s.List.Struct(i)}
}

func (s Registry_entries_Params_List) Set(i int, v Registry_entries_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Params_List) String() string {
	str, _ := text.MarshalList(0x9ffc53716151c5fa, s.List)
	return str
}

// Registry_entries_Params_Future is a wrapper for a Registry_entries_Params promised by a client call.
type Registry_entries_Params_Future struct{ *capnp.Future }

func (p Registry_entries_Params_Future) Struct() (Registry_entries_Params, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Params{s}, err
}

type Registry_entries_Results struct{ capnp.Struct }

// Registry_entries_Results_TypeID is the unique identifier for the type Registry_entries_Results.
const Registry_entries_Results_TypeID = 0xe4eaf56eb486064d

func NewRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func NewRootRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func ReadRootRegistry_entries_Results(msg *capnp.Message) (Registry_entries_Results, error) {
	root, err := msg.Root()
	return Registry_entries_Results{root.Struct()}, err
}

func (s Registry_entries_Results) String() string {
	str, _ := text.Marshal(0xe4eaf56eb486064d, s.Struct)
	return str
}

func (s Registry_entries_Results) Entries() (Registry_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Registry_Entry_List{List: p.List()}, err
}

func (s Registry_entries_Results) HasEntries() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Results) SetEntries(v Registry_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Registry_Entry_List, preferring placement in s's segment.
func (s Registry_entries_Results) NewEntries(n int32) (Registry_Entry_List, error) {
	l, err := NewRegistry_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Registry_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_entries_Results_List is a list of Registry_entries_Results.
type Registry_entries_Results_List struct{ capnp.List }

// NewRegistry_entries_Results creates a new list of Registry_entries_Results.
func NewRegistry_entries_Results_List(s *capnp.Segment, sz int32) (Registry_entries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Results_List{l}, err
}

func (s Registry_entries_Results_List) At(i int) Registry_entries_Results {
	return Registry_entries_Results{s.List.Struct(i)}
}

func (s Registry_entries_Results_List) Set(i int, v Registry_entries_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Results_List) String() string {
	str, _ := text.MarshalList(0xe4eaf56eb486064d, s.List)
	return str
}

// Registry_entries_Results_Future is a wrapper for a Registry_entries_Results promised by a client call.
type Registry_entries_Results_Future struct{ *capnp.Future }

func (p Registry_entries_Results_Future) Struct() (Registry_entries_Results, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Results{s}, err
}

type Registrar struct{ Client *capnp.Client }

// Registrar_TypeID is the unique identifier for the type Registrar.
const Registrar_TypeID = 0xabaef93c36f2d1ea

func (c Registrar) Register(ctx context.Context, params func(Registrar_RegParams) error) (Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_RegParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registrar_register_Results_Future{Future: ans.Future()}, release
}
func (c Registrar) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registrar) AddRef() Registrar {
	return Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c Registrar) Release() {
	c.Client.Release()
}

// A Registrar_Server is a Registrar with a local implementation.
type Registrar_Server interface {
	Register(context.Context, Registrar_register) error

	Info(context.Context, common.Identifiable_info) error
}

// Registrar_NewServer creates a new Server from an implementation of Registrar_Server.
func Registrar_NewServer(s Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Methods(nil, s), s, c, policy)
}

// Registrar_ServerToClient creates a new Client from an implementation of Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ServerToClient(s Registrar_Server, policy *server.Policy) Registrar {
	return Registrar{Client: capnp.NewClient(Registrar_NewServer(s, policy))}
}

// Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Methods(methods []server.Method, s Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Registrar_register{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registrar_register holds the state for a server call to Registrar.register.
// See server.Call for documentation.
type Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_register) Args() Registrar_RegParams {
	return Registrar_RegParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registrar_register) AllocResults() (Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{Struct: r}, err
}

type Registrar_CrossDomainRestore struct{ capnp.Struct }

// Registrar_CrossDomainRestore_TypeID is the unique identifier for the type Registrar_CrossDomainRestore.
const Registrar_CrossDomainRestore_TypeID = 0xaa1198dd7e71b20e

func NewRegistrar_CrossDomainRestore(s *capnp.Segment) (Registrar_CrossDomainRestore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_CrossDomainRestore{st}, err
}

func NewRootRegistrar_CrossDomainRestore(s *capnp.Segment) (Registrar_CrossDomainRestore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_CrossDomainRestore{st}, err
}

func ReadRootRegistrar_CrossDomainRestore(msg *capnp.Message) (Registrar_CrossDomainRestore, error) {
	root, err := msg.Root()
	return Registrar_CrossDomainRestore{root.Struct()}, err
}

func (s Registrar_CrossDomainRestore) String() string {
	str, _ := text.Marshal(0xaa1198dd7e71b20e, s.Struct)
	return str
}

func (s Registrar_CrossDomainRestore) VatId() (persistence.VatId, error) {
	p, err := s.Struct.Ptr(0)
	return persistence.VatId{Struct: p.Struct()}, err
}

func (s Registrar_CrossDomainRestore) HasVatId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_CrossDomainRestore) SetVatId(v persistence.VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVatId sets the vatId field to a newly
// allocated persistence.VatId struct, preferring placement in s's segment.
func (s Registrar_CrossDomainRestore) NewVatId() (persistence.VatId, error) {
	ss, err := persistence.NewVatId(s.Struct.Segment())
	if err != nil {
		return persistence.VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Registrar_CrossDomainRestore) Restorer() persistence.Restorer {
	p, _ := s.Struct.Ptr(1)
	return persistence.Restorer{Client: p.Interface().Client()}
}

func (s Registrar_CrossDomainRestore) HasRestorer() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_CrossDomainRestore) SetRestorer(v persistence.Restorer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Registrar_CrossDomainRestore_List is a list of Registrar_CrossDomainRestore.
type Registrar_CrossDomainRestore_List struct{ capnp.List }

// NewRegistrar_CrossDomainRestore creates a new list of Registrar_CrossDomainRestore.
func NewRegistrar_CrossDomainRestore_List(s *capnp.Segment, sz int32) (Registrar_CrossDomainRestore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Registrar_CrossDomainRestore_List{l}, err
}

func (s Registrar_CrossDomainRestore_List) At(i int) Registrar_CrossDomainRestore {
	return Registrar_CrossDomainRestore{s.List.Struct(i)}
}

func (s Registrar_CrossDomainRestore_List) Set(i int, v Registrar_CrossDomainRestore) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_CrossDomainRestore_List) String() string {
	str, _ := text.MarshalList(0xaa1198dd7e71b20e, s.List)
	return str
}

// Registrar_CrossDomainRestore_Future is a wrapper for a Registrar_CrossDomainRestore promised by a client call.
type Registrar_CrossDomainRestore_Future struct{ *capnp.Future }

func (p Registrar_CrossDomainRestore_Future) Struct() (Registrar_CrossDomainRestore, error) {
	s, err := p.Future.Struct()
	return Registrar_CrossDomainRestore{s}, err
}

func (p Registrar_CrossDomainRestore_Future) VatId() persistence.VatId_Future {
	return persistence.VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p Registrar_CrossDomainRestore_Future) Restorer() persistence.Restorer {
	return persistence.Restorer{Client: p.Future.Field(1, nil).Client()}
}

type Registrar_RegParams struct{ capnp.Struct }

// Registrar_RegParams_TypeID is the unique identifier for the type Registrar_RegParams.
const Registrar_RegParams_TypeID = 0xe5a84717ea75fb0d

func NewRegistrar_RegParams(s *capnp.Segment) (Registrar_RegParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Registrar_RegParams{st}, err
}

func NewRootRegistrar_RegParams(s *capnp.Segment) (Registrar_RegParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Registrar_RegParams{st}, err
}

func ReadRootRegistrar_RegParams(msg *capnp.Message) (Registrar_RegParams, error) {
	root, err := msg.Root()
	return Registrar_RegParams{root.Struct()}, err
}

func (s Registrar_RegParams) String() string {
	str, _ := text.Marshal(0xe5a84717ea75fb0d, s.Struct)
	return str
}

func (s Registrar_RegParams) Cap() common.Identifiable {
	p, _ := s.Struct.Ptr(0)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registrar_RegParams) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_RegParams) SetCap(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_RegParams) RegName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Registrar_RegParams) HasRegName() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_RegParams) RegNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Registrar_RegParams) SetRegName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Registrar_RegParams) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registrar_RegParams) HasCategoryId() bool {
	return s.Struct.HasPtr(2)
}

func (s Registrar_RegParams) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registrar_RegParams) SetCategoryId(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Registrar_RegParams) XDomain() (Registrar_CrossDomainRestore, error) {
	p, err := s.Struct.Ptr(3)
	return Registrar_CrossDomainRestore{Struct: p.Struct()}, err
}

func (s Registrar_RegParams) HasXDomain() bool {
	return s.Struct.HasPtr(3)
}

func (s Registrar_RegParams) SetXDomain(v Registrar_CrossDomainRestore) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewXDomain sets the xDomain field to a newly
// allocated Registrar_CrossDomainRestore struct, preferring placement in s's segment.
func (s Registrar_RegParams) NewXDomain() (Registrar_CrossDomainRestore, error) {
	ss, err := NewRegistrar_CrossDomainRestore(s.Struct.Segment())
	if err != nil {
		return Registrar_CrossDomainRestore{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// Registrar_RegParams_List is a list of Registrar_RegParams.
type Registrar_RegParams_List struct{ capnp.List }

// NewRegistrar_RegParams creates a new list of Registrar_RegParams.
func NewRegistrar_RegParams_List(s *capnp.Segment, sz int32) (Registrar_RegParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Registrar_RegParams_List{l}, err
}

func (s Registrar_RegParams_List) At(i int) Registrar_RegParams {
	return Registrar_RegParams{s.List.Struct(i)}
}

func (s Registrar_RegParams_List) Set(i int, v Registrar_RegParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_RegParams_List) String() string {
	str, _ := text.MarshalList(0xe5a84717ea75fb0d, s.List)
	return str
}

// Registrar_RegParams_Future is a wrapper for a Registrar_RegParams promised by a client call.
type Registrar_RegParams_Future struct{ *capnp.Future }

func (p Registrar_RegParams_Future) Struct() (Registrar_RegParams, error) {
	s, err := p.Future.Struct()
	return Registrar_RegParams{s}, err
}

func (p Registrar_RegParams_Future) Cap() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(0, nil).Client()}
}

func (p Registrar_RegParams_Future) XDomain() Registrar_CrossDomainRestore_Future {
	return Registrar_CrossDomainRestore_Future{Future: p.Future.Field(3, nil)}
}

type Registrar_register_Results struct{ capnp.Struct }

// Registrar_register_Results_TypeID is the unique identifier for the type Registrar_register_Results.
const Registrar_register_Results_TypeID = 0xb2a9b080f0c4013c

func NewRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func NewRootRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func ReadRootRegistrar_register_Results(msg *capnp.Message) (Registrar_register_Results, error) {
	root, err := msg.Root()
	return Registrar_register_Results{root.Struct()}, err
}

func (s Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xb2a9b080f0c4013c, s.Struct)
	return str
}

func (s Registrar_register_Results) Unreg() common.Action {
	p, _ := s.Struct.Ptr(0)
	return common.Action{Client: p.Interface().Client()}
}

func (s Registrar_register_Results) HasUnreg() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_register_Results) SetUnreg(v common.Action) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Results) ReregSR() (persistence.SturdyRef, error) {
	p, err := s.Struct.Ptr(1)
	return persistence.SturdyRef{Struct: p.Struct()}, err
}

func (s Registrar_register_Results) HasReregSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_register_Results) SetReregSR(v persistence.SturdyRef) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReregSR sets the reregSR field to a newly
// allocated persistence.SturdyRef struct, preferring placement in s's segment.
func (s Registrar_register_Results) NewReregSR() (persistence.SturdyRef, error) {
	ss, err := persistence.NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return persistence.SturdyRef{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Registrar_register_Results_List is a list of Registrar_register_Results.
type Registrar_register_Results_List struct{ capnp.List }

// NewRegistrar_register_Results creates a new list of Registrar_register_Results.
func NewRegistrar_register_Results_List(s *capnp.Segment, sz int32) (Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Registrar_register_Results_List{l}, err
}

func (s Registrar_register_Results_List) At(i int) Registrar_register_Results {
	return Registrar_register_Results{s.List.Struct(i)}
}

func (s Registrar_register_Results_List) Set(i int, v Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xb2a9b080f0c4013c, s.List)
	return str
}

// Registrar_register_Results_Future is a wrapper for a Registrar_register_Results promised by a client call.
type Registrar_register_Results_Future struct{ *capnp.Future }

func (p Registrar_register_Results_Future) Struct() (Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return Registrar_register_Results{s}, err
}

func (p Registrar_register_Results_Future) Unreg() common.Action {
	return common.Action{Client: p.Future.Field(0, nil).Client()}
}

func (p Registrar_register_Results_Future) ReregSR() persistence.SturdyRef_Future {
	return persistence.SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

const schema_fe1be0c39c7e8269 = "x\xda\xb4Wkl\x14\xd7\x15>g\xee\xae\xd7\xbb\xde" +
	"\xd7\xed\x9a\x02E\xc8\xa2u\xc5C\xe0\xf2r[\x90\x91" +
	"\xd76\x16\xb6[\x83\xefB\x1fX}0^\x0ff\x91" +
	"w\xd7\x9e\x99\xa5\x98\x0a\x1b\x0a\x85\xa2\x0a*\xfa\xa3j" +
	")\x88B\x15)<\x12\xb0\x05QPBP (\x01" +
	"\x14E\x168\x84 P\x1c%D\xe2\x07\x09$\x90\x07" +
	"\x09\x13\xdd;;\xb3\xe3\xf5\x03\"%\xff\x0cs\xee9" +
	"\xe7\xfb\xee\xf7\x9d{v\xf6]WT\x9a\xe3\xfe\x19\x05" +
	"`\xaf\xb9\x0b\x8c}/\xd6\xf5\x0dn\xf9\xde\x0e\xa0\x13" +
	"\x10\xc0\x8d\x1e\x80y\x9b\x0b[\x100\xb2\xb3\xb0\x12\xd0" +
	"8w\xbdy\x93\x7f\xe0\xcc.\xa0\xe3x\x80\xc4\x03z" +
	"\x0b\xaby\xc0\xa9\xc2?\x01\x1a\xff\x1f\xec\xbe\xd3\xdd\xfb" +
	"\xd4\xbf\xb2\x01\"\xc3to\x8c\x07\x94{y\x86\xff\x9e" +
	"\x9d\xff\x87[\xb7\xea\xf7\x9a%\\\xfc{\xc2\xbb\x07\xc1" +
	"e|q\x9e\xc9\x9d\xcb\xbf\xdc\xef,\xbe\xd2\xbb\x90\x1f" +
	"\x95\xc5\xd1\x13\x81\x17~]\xf0\xe0\x9f\xffs\xe6\xfe\xab" +
	"\xb7\x99\x07\xec\x16\x01\xee\x7f\xb4\x87\xc9\x81\xa3\x87\x9c\x01" +
	"\xe7\xbd\xa2\xfd~\x11\x10\xec\xeb\xec\xbe\xf1oz\x18\xe8" +
	"D4n\xf7\xdf\xfbi\xc5\xe7\xcf\x1e\xc9\xc2p\xfbZ" +
	"02\xd1\xe7\x01\x88\x8c\xf3q(\xf6w\x1a\"F\xe2" +
	"/\xdd{\xcf\xbd3\xe9\x11\x00F2\xbe\x8b\x91\xcd\xbe" +
	"\xa9\x00\x91\x03\xbe%\x91\xd7}\xe3\x01\x8c\x0a|\xe5\xa3" +
	"M\xc7\x0f\xf5\xf1\xcc\x161\xa7}\x02\xf7\x05\x91\xed\xf8" +
	"lm\xf3\xc9Ug\xfa\x9c\xe8~\\tP\x10S\xc4" +
	"{;Y\xaen\xf8\xc9\x96E\xa7\x81\x8dC\x8b\x19\xa5" +
	"\xa8\x81\x07t\x8a\x80\xc8\xd1O\xfdl{\xd7\xcb<\x83" +
	"\xf1\xfc\xbc\x82U\xfd\xbf\xf8\xf3Ep\x13\xde\xf1\xee\xa2" +
	"{\x91}E\xfc\xaf\xff\x14\x1d\x03\xc7\xe7\xfc\xde\xcb\xfd" +
	"g#\x8b\xfc\xe3\x01\"\xb5\xfeW#\x17\xf8_\xc6\x9b" +
	"77\xe1\xaeI/\x0d8/\xf5\x94_\xf0z\xde\xcf" +
	"{\xff\xe3'\x97\xbb\xf7\\\xdd\xfe\x96\x93\xd7Y\x01\xd1" +
	"\xda\x82\x00o\xed\xc1\xb6\xad\xbd\x0f\xaf|\xffz\xb6w" +
	"3\"\x19\x10\xba\xc8\x04x\x8a\xc6\x82m'R\xf7o" +
	"\xbf\xe7\x84?`\x06\xdc\x10)\x02\x0f3\xb7\xc7/y" +
	"\xfa\xfd\xbc\xab\x114\x04\x82?\xc0\xc8\xe4 \x8771" +
	"\xf8\x01\xe7j\xca\x8e\xe27>\x9by\xc7lH\xc4\xdc" +
	"\x0d\xce\xe0\"Z\xfa\x9b\xd5\xeb~\xf41\xb9?\x0c\xf8" +
	"\xb5\xe0\xe1\xc8 O1\xefFp\x09FN\x858\xf2" +
	"g\xbe\xdax\xe4\xc3\x8b-\x8f\x9c\xc0\x0e\x85\xe6\xf2\xae" +
	"zC\x95`@\xb9\xa1*m\x09MW\xbb\\eq" +
	"\xb9#\xd5\xb10\x96\xfdwY\\\xd6\x95\xb6\xb4\xdaU" +
	"\x9fZ\x9d.m\x92U\x8f\x9c\xd4\x98\x8b\xb8\x00\\\x08" +
	"@\x03\xcd\x00\xccO\x90M\x90\xd0\xb0b\x81\xd4\xb7\xa2" +
	"\x1f$\xf4\x03\x0e\xcb\\\xd5\x9aL\xa4\xca\x92\xe9u\xca" +
	"\xb2\x96\xb5J\\\xd7xV9\xa9\x01+\xb4\xb3N\x8f" +
	"\x01\xb0i\x04\xd9b\x09)b1g\x9bVU\x03\xb0" +
	"\x0a\x82\xacNB#-\xce\xd6\xb7\x02j\x18\x04l\"" +
	"(\x0a\x06\x01{\xf4t\x8d\xac?\xb6\x01U\x19\xd6\x02" +
	"\x0e\x01\x16\xcb\x02\x9b6f5;\xbb;\x9f8-\xd3" +
	"\xd1\x91Vu\xa5\xb5\xc6d%\xa1\x98eHR\xb3\x0f" +
	"\x91\xfcCJJ\x17\x81\x95&'\xdf\x02\xd1Cq\xc6" +
	"\x14-\xd3N\xf4!\x8978\x80\x9a\xd1\xad\xcb\xa0\xd2" +
	"<`\xa1\xa5\xc6@\xdd\xde\x95\x97\xfa\x8f\xf5\x01\xe0\x10" +
	"\xdc#U\xcb\"\xee\x12\xe5<\xed\xdfE\xb9,c\xb2" +
	"ZV\xa3\xa65mq:)'R1E\xd3=i" +
	"UiBt\x8ai.\x00+%\xc8f;\xc44\xab" +
	"\x01\x80\xcd$\xc8~.a\xc9:\xa1\x97\xb0\xb1\xb3\xff" +
	"\xef\x03\xfa\xef}\x83\xbchX\x14\xd5\xf4\xb4\xaa\xa8\x00" +
	"\x80\xd4\xa8(\xbb6u\xeb\x94\xe7\xf6\xf3\xaf\xd4\xd1\x92" +
	"\x94\xdf\x12\x00+D\xe7\x14\xf6\xeeq\xf8>\x103\xac" +
	"\x961\xdbs\x9a\xa8\x8a\x11S\xda\xc4\xa5\x83\x90\xa1\x1b" +
	"\xc0>\x83\xd6\xd4\xa5\xb4\x01$\xea\xf5dK\x8b\xc6\xa2" +
	"\xc8\\\x88\x0e\xbe`\x0c\xae\xacs\xa6\x0et\xd4\x1eK" +
	"Su\xd6\x88\xf3%,\xc9\xa4T\xa5\x0d\xa9\xb1\xbd6" +
	"u\xf5\xdc\xbbW\xf6e\x89\xe8Q\x15Ui[\x1e\xc3" +
	"\xb0\xd1xs\xcb\xe4\xa9k\x92\x7f\xcb\x11\xf8\x0d\xcc1" +
	"\x92Xfp.\x09\xb2R\x09Cq9'\x90\xb0q" +
	"\xf9m\xf2\xe8R\xf7\xa5+c\xebQnm\x1d\"\xc6" +
	"v]\x03p\x16\xa8\xce\x16(\x96\xb0G\xcb\xc4\xe3\x8a" +
	"\xa6!\x82\x848\xfa\x05w\x95\x95\xd4\xa6t\xb5\x8b\xab" +
	"\xccog\xaa\xe5\xfe\\L\x9059\xe8k\xfc!\x00" +
	"\xab#\xc8VHH%\xa9\x18%\x00\xca8\xa8_\x12" +
	"d\xbf\x1d\xc5\xc9\x1eUY\x9dg\x01\x0a\x18J\xc9I" +
	"e\x98\xd9\xf3{\x03\xa1\x86\xdc\x1b\x8as\xcdf\x99_" +
	"H\xcaZK\xd0z\xa7);\x08\x12m\xf4 \xda[" +
	"\x11Z\xd4\xd2\xaa\xb5 \xd1\x05\x1e\x94\xec\xa5\x05\xad\x07" +
	"\x8e+C\xa2S<\x86u\x93h\x11\xedI(Z\xd4" +
	"\x01,\xc4_\x8e(\xf6dG\xdb\x13\xe8u\xc4Q\x92" +
	"\x1d\x9dN\xc16\xe7\xb4i3>\xe7,\x00\x9bO\x90" +
	"EG\x1b\x93\xd68\x94\xe2\xba\xb6\"m\xe5\xe7\xb3\xfd" +
	"\xc9_\xac\x11\xa5\xe4\x1cl\xe6XkY\x0b\x95\xe2\xdd" +
	"\x18\xf5\xd5\x18]\xad#<\x8a\x0d9\xbc\x02.\"\x9d" +
	"\xb307\xc6rp\x01\xf2\x0c\x12\x06\xac\xccth\x8a" +
	"\xaa\x0f\x13\xb7k\xb4'\xc8\xc28\x92[J%\xfb>" +
	"s\x8e\xb4E\x97\xe7H2l\x0ceG\x1dIj\xdc" +
	"Ca;\xbf\xcc\xed\xf2;\x82l\x8d\xe3F\x15^t" +
	"\x15A\xd6\xee\xf0P\x82\xdf\xfd\x1a\x82L\x97\x90\x12R" +
	"\x8c\x04\x80v\xf2\xc8v\x82l\xbd\x84\x9e\xb8\xdc1\xdc" +
	"C=\xaa\xd2\xb6\xd4i\xa3\x91\x14\xd2\xb3\xde|M0" +
	"\x9c\x1b\xe1y\xf3\x8c\xe4)\xd5\xfc\xdf\xd2&9\xc4/" +
	"\xcd\x0eC+,\xc4\xe38\xd6b\xe1Bk\x8fDk" +
	"\x19\xa6\xbb[@\xa2;\xb8\x0b\xad-\x15\xad-\x9fn" +
	"\xdc\x00\x12\xcdp\x17Z?K\xd0\xdaTi\x82\x9f\x93" +
	"=H\xec_$h\xfd|\xa0\xbfRMg\xbb\xec=" +
	"\x12\xadE\x90V5\x08g\x1b\x96\xe2\xc0\x93V\xbb\xa2" +
	"\xd6\x83\\#C\xa5\xc9K4\xe7\x17\xf0\xc4u\xcd\x0e" +
	"Y\xd6\x02%\xc2\x0b\xd1\x1c+c\xbfF\xa3p\x16S" +
	"J\x84\xce\x9c2kp\xac:\x8e\xe4Hs\x0b\xbfy" +
	"\x9f_\x07\x00\x00\xff\xfff\xf8\xfb'"

func init() {
	schemas.Register(schema_fe1be0c39c7e8269,
		0x891283e1b248bc9d,
		0x8ebfd50c805adbc3,
		0x96a5b17eee7ee1a3,
		0x9c49e6e65e34c29b,
		0x9ffc53716151c5fa,
		0xa092f60656bb0db4,
		0xa9aca103106c8f05,
		0xaa1198dd7e71b20e,
		0xabaef93c36f2d1ea,
		0xb2a9b080f0c4013c,
		0xb2bf60b5817330b0,
		0xbd3d832f7a7235b5,
		0xc17987510cf7ac13,
		0xca7b4bd1600633b8,
		0xd5be1b8e0180ded6,
		0xd887d79a7ed3f45f,
		0xdb16d4fbb18486f6,
		0xe4eaf56eb486064d,
		0xe5a84717ea75fb0d,
		0xee2cf8cf148921b5,
		0xf503f3237666574e,
		0xfe62caefab7dfdad)
}
