// Code generated by capnpc-go. DO NOT EDIT.

package registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnp_schemas/gen/go/common"
)

type Admin struct{ Client *capnp.Client }

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xf503f3237666574e

func (c Admin) AddCategory(ctx context.Context, params func(Admin_addCategory_Params) error) (Admin_addCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_addCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_addCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveCategory(ctx context.Context, params func(Admin_removeCategory_Params) error) (Admin_removeCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) MoveObjects(ctx context.Context, params func(Admin_moveObjects_Params) error) (Admin_moveObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_moveObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_moveObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveObjects(ctx context.Context, params func(Admin_removeObjects_Params) error) (Admin_removeObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Registry(ctx context.Context, params func(Admin_registry_Params) error) (Admin_registry_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_registry_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_registry_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Admin) AddRef() Admin {
	return Admin{
		Client: c.Client.AddRef(),
	}
}

func (c Admin) Release() {
	c.Client.Release()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	AddCategory(context.Context, Admin_addCategory) error

	RemoveCategory(context.Context, Admin_removeCategory) error

	MoveObjects(context.Context, Admin_moveObjects) error

	RemoveObjects(context.Context, Admin_removeObjects) error

	Registry(context.Context, Admin_registry) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c, policy)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server, policy *server.Policy) Admin {
	return Admin{Client: capnp.NewClient(Admin_NewServer(s, policy))}
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddCategory(ctx, Admin_addCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveCategory(ctx, Admin_removeCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MoveObjects(ctx, Admin_moveObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveObjects(ctx, Admin_removeObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Admin_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_addCategory holds the state for a server call to Admin.addCategory.
// See server.Call for documentation.
type Admin_addCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_addCategory) Args() Admin_addCategory_Params {
	return Admin_addCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_addCategory) AllocResults() (Admin_addCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{Struct: r}, err
}

// Admin_removeCategory holds the state for a server call to Admin.removeCategory.
// See server.Call for documentation.
type Admin_removeCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeCategory) Args() Admin_removeCategory_Params {
	return Admin_removeCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeCategory) AllocResults() (Admin_removeCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{Struct: r}, err
}

// Admin_moveObjects holds the state for a server call to Admin.moveObjects.
// See server.Call for documentation.
type Admin_moveObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_moveObjects) Args() Admin_moveObjects_Params {
	return Admin_moveObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_moveObjects) AllocResults() (Admin_moveObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{Struct: r}, err
}

// Admin_removeObjects holds the state for a server call to Admin.removeObjects.
// See server.Call for documentation.
type Admin_removeObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeObjects) Args() Admin_removeObjects_Params {
	return Admin_removeObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeObjects) AllocResults() (Admin_removeObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{Struct: r}, err
}

// Admin_registry holds the state for a server call to Admin.registry.
// See server.Call for documentation.
type Admin_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_registry) Args() Admin_registry_Params {
	return Admin_registry_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_registry) AllocResults() (Admin_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{Struct: r}, err
}

type Admin_addCategory_Params struct{ capnp.Struct }

// Admin_addCategory_Params_TypeID is the unique identifier for the type Admin_addCategory_Params.
const Admin_addCategory_Params_TypeID = 0xdb16d4fbb18486f6

func NewAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func NewRootAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func ReadRootAdmin_addCategory_Params(msg *capnp.Message) (Admin_addCategory_Params, error) {
	root, err := msg.Root()
	return Admin_addCategory_Params{root.Struct()}, err
}

func (s Admin_addCategory_Params) String() string {
	str, _ := text.Marshal(0xdb16d4fbb18486f6, s.Struct)
	return str
}

func (s Admin_addCategory_Params) Category() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Admin_addCategory_Params) HasCategory() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_addCategory_Params) SetCategory(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCategory sets the category field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_addCategory_Params) NewCategory() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Admin_addCategory_Params) Upsert() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Params) SetUpsert(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Params_List is a list of Admin_addCategory_Params.
type Admin_addCategory_Params_List struct{ capnp.List }

// NewAdmin_addCategory_Params creates a new list of Admin_addCategory_Params.
func NewAdmin_addCategory_Params_List(s *capnp.Segment, sz int32) (Admin_addCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Admin_addCategory_Params_List{l}, err
}

func (s Admin_addCategory_Params_List) At(i int) Admin_addCategory_Params {
	return Admin_addCategory_Params{s.List.Struct(i)}
}

func (s Admin_addCategory_Params_List) Set(i int, v Admin_addCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xdb16d4fbb18486f6, s.List)
	return str
}

// Admin_addCategory_Params_Future is a wrapper for a Admin_addCategory_Params promised by a client call.
type Admin_addCategory_Params_Future struct{ *capnp.Future }

func (p Admin_addCategory_Params_Future) Struct() (Admin_addCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Params{s}, err
}

func (p Admin_addCategory_Params_Future) Category() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Admin_addCategory_Results struct{ capnp.Struct }

// Admin_addCategory_Results_TypeID is the unique identifier for the type Admin_addCategory_Results.
const Admin_addCategory_Results_TypeID = 0xbd3d832f7a7235b5

func NewAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func NewRootAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func ReadRootAdmin_addCategory_Results(msg *capnp.Message) (Admin_addCategory_Results, error) {
	root, err := msg.Root()
	return Admin_addCategory_Results{root.Struct()}, err
}

func (s Admin_addCategory_Results) String() string {
	str, _ := text.Marshal(0xbd3d832f7a7235b5, s.Struct)
	return str
}

func (s Admin_addCategory_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Results_List is a list of Admin_addCategory_Results.
type Admin_addCategory_Results_List struct{ capnp.List }

// NewAdmin_addCategory_Results creates a new list of Admin_addCategory_Results.
func NewAdmin_addCategory_Results_List(s *capnp.Segment, sz int32) (Admin_addCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Admin_addCategory_Results_List{l}, err
}

func (s Admin_addCategory_Results_List) At(i int) Admin_addCategory_Results {
	return Admin_addCategory_Results{s.List.Struct(i)}
}

func (s Admin_addCategory_Results_List) Set(i int, v Admin_addCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xbd3d832f7a7235b5, s.List)
	return str
}

// Admin_addCategory_Results_Future is a wrapper for a Admin_addCategory_Results promised by a client call.
type Admin_addCategory_Results_Future struct{ *capnp.Future }

func (p Admin_addCategory_Results_Future) Struct() (Admin_addCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Results{s}, err
}

type Admin_removeCategory_Params struct{ capnp.Struct }

// Admin_removeCategory_Params_TypeID is the unique identifier for the type Admin_removeCategory_Params.
const Admin_removeCategory_Params_TypeID = 0xd5be1b8e0180ded6

func NewAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func NewRootAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func ReadRootAdmin_removeCategory_Params(msg *capnp.Message) (Admin_removeCategory_Params, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Params{root.Struct()}, err
}

func (s Admin_removeCategory_Params) String() string {
	str, _ := text.Marshal(0xd5be1b8e0180ded6, s.Struct)
	return str
}

func (s Admin_removeCategory_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasMoveObjectsToCategoryId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetMoveObjectsToCategoryId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_removeCategory_Params_List is a list of Admin_removeCategory_Params.
type Admin_removeCategory_Params_List struct{ capnp.List }

// NewAdmin_removeCategory_Params creates a new list of Admin_removeCategory_Params.
func NewAdmin_removeCategory_Params_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_removeCategory_Params_List{l}, err
}

func (s Admin_removeCategory_Params_List) At(i int) Admin_removeCategory_Params {
	return Admin_removeCategory_Params{s.List.Struct(i)}
}

func (s Admin_removeCategory_Params_List) Set(i int, v Admin_removeCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xd5be1b8e0180ded6, s.List)
	return str
}

// Admin_removeCategory_Params_Future is a wrapper for a Admin_removeCategory_Params promised by a client call.
type Admin_removeCategory_Params_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Params_Future) Struct() (Admin_removeCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Params{s}, err
}

type Admin_removeCategory_Results struct{ capnp.Struct }

// Admin_removeCategory_Results_TypeID is the unique identifier for the type Admin_removeCategory_Results.
const Admin_removeCategory_Results_TypeID = 0xa9aca103106c8f05

func NewAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func NewRootAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func ReadRootAdmin_removeCategory_Results(msg *capnp.Message) (Admin_removeCategory_Results, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Results{root.Struct()}, err
}

func (s Admin_removeCategory_Results) String() string {
	str, _ := text.Marshal(0xa9aca103106c8f05, s.Struct)
	return str
}

func (s Admin_removeCategory_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeCategory_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeCategory_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeCategory_Results_List is a list of Admin_removeCategory_Results.
type Admin_removeCategory_Results_List struct{ capnp.List }

// NewAdmin_removeCategory_Results creates a new list of Admin_removeCategory_Results.
func NewAdmin_removeCategory_Results_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeCategory_Results_List{l}, err
}

func (s Admin_removeCategory_Results_List) At(i int) Admin_removeCategory_Results {
	return Admin_removeCategory_Results{s.List.Struct(i)}
}

func (s Admin_removeCategory_Results_List) Set(i int, v Admin_removeCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xa9aca103106c8f05, s.List)
	return str
}

// Admin_removeCategory_Results_Future is a wrapper for a Admin_removeCategory_Results promised by a client call.
type Admin_removeCategory_Results_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Results_Future) Struct() (Admin_removeCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Results{s}, err
}

type Admin_moveObjects_Params struct{ capnp.Struct }

// Admin_moveObjects_Params_TypeID is the unique identifier for the type Admin_moveObjects_Params.
const Admin_moveObjects_Params_TypeID = 0x8ebfd50c805adbc3

func NewAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func NewRootAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func ReadRootAdmin_moveObjects_Params(msg *capnp.Message) (Admin_moveObjects_Params, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Params{root.Struct()}, err
}

func (s Admin_moveObjects_Params) String() string {
	str, _ := text.Marshal(0x8ebfd50c805adbc3, s.Struct)
	return str
}

func (s Admin_moveObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Admin_moveObjects_Params) ToCatId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_moveObjects_Params) HasToCatId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_moveObjects_Params) ToCatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_moveObjects_Params) SetToCatId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_moveObjects_Params_List is a list of Admin_moveObjects_Params.
type Admin_moveObjects_Params_List struct{ capnp.List }

// NewAdmin_moveObjects_Params creates a new list of Admin_moveObjects_Params.
func NewAdmin_moveObjects_Params_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_moveObjects_Params_List{l}, err
}

func (s Admin_moveObjects_Params_List) At(i int) Admin_moveObjects_Params {
	return Admin_moveObjects_Params{s.List.Struct(i)}
}

func (s Admin_moveObjects_Params_List) Set(i int, v Admin_moveObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x8ebfd50c805adbc3, s.List)
	return str
}

// Admin_moveObjects_Params_Future is a wrapper for a Admin_moveObjects_Params promised by a client call.
type Admin_moveObjects_Params_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Params_Future) Struct() (Admin_moveObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Params{s}, err
}

type Admin_moveObjects_Results struct{ capnp.Struct }

// Admin_moveObjects_Results_TypeID is the unique identifier for the type Admin_moveObjects_Results.
const Admin_moveObjects_Results_TypeID = 0xd887d79a7ed3f45f

func NewAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func NewRootAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func ReadRootAdmin_moveObjects_Results(msg *capnp.Message) (Admin_moveObjects_Results, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Results{root.Struct()}, err
}

func (s Admin_moveObjects_Results) String() string {
	str, _ := text.Marshal(0xd887d79a7ed3f45f, s.Struct)
	return str
}

func (s Admin_moveObjects_Results) MovedObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Results) HasMovedObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Results) SetMovedObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMovedObjectIds sets the movedObjectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Results) NewMovedObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_moveObjects_Results_List is a list of Admin_moveObjects_Results.
type Admin_moveObjects_Results_List struct{ capnp.List }

// NewAdmin_moveObjects_Results creates a new list of Admin_moveObjects_Results.
func NewAdmin_moveObjects_Results_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_moveObjects_Results_List{l}, err
}

func (s Admin_moveObjects_Results_List) At(i int) Admin_moveObjects_Results {
	return Admin_moveObjects_Results{s.List.Struct(i)}
}

func (s Admin_moveObjects_Results_List) Set(i int, v Admin_moveObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xd887d79a7ed3f45f, s.List)
	return str
}

// Admin_moveObjects_Results_Future is a wrapper for a Admin_moveObjects_Results promised by a client call.
type Admin_moveObjects_Results_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Results_Future) Struct() (Admin_moveObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Results{s}, err
}

type Admin_removeObjects_Params struct{ capnp.Struct }

// Admin_removeObjects_Params_TypeID is the unique identifier for the type Admin_removeObjects_Params.
const Admin_removeObjects_Params_TypeID = 0x96a5b17eee7ee1a3

func NewAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func NewRootAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func ReadRootAdmin_removeObjects_Params(msg *capnp.Message) (Admin_removeObjects_Params, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Params{root.Struct()}, err
}

func (s Admin_removeObjects_Params) String() string {
	str, _ := text.Marshal(0x96a5b17eee7ee1a3, s.Struct)
	return str
}

func (s Admin_removeObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_removeObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_removeObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Params_List is a list of Admin_removeObjects_Params.
type Admin_removeObjects_Params_List struct{ capnp.List }

// NewAdmin_removeObjects_Params creates a new list of Admin_removeObjects_Params.
func NewAdmin_removeObjects_Params_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Params_List{l}, err
}

func (s Admin_removeObjects_Params_List) At(i int) Admin_removeObjects_Params {
	return Admin_removeObjects_Params{s.List.Struct(i)}
}

func (s Admin_removeObjects_Params_List) Set(i int, v Admin_removeObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x96a5b17eee7ee1a3, s.List)
	return str
}

// Admin_removeObjects_Params_Future is a wrapper for a Admin_removeObjects_Params promised by a client call.
type Admin_removeObjects_Params_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Params_Future) Struct() (Admin_removeObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Params{s}, err
}

type Admin_removeObjects_Results struct{ capnp.Struct }

// Admin_removeObjects_Results_TypeID is the unique identifier for the type Admin_removeObjects_Results.
const Admin_removeObjects_Results_TypeID = 0xa092f60656bb0db4

func NewAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func NewRootAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func ReadRootAdmin_removeObjects_Results(msg *capnp.Message) (Admin_removeObjects_Results, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Results{root.Struct()}, err
}

func (s Admin_removeObjects_Results) String() string {
	str, _ := text.Marshal(0xa092f60656bb0db4, s.Struct)
	return str
}

func (s Admin_removeObjects_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeObjects_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeObjects_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Results_List is a list of Admin_removeObjects_Results.
type Admin_removeObjects_Results_List struct{ capnp.List }

// NewAdmin_removeObjects_Results creates a new list of Admin_removeObjects_Results.
func NewAdmin_removeObjects_Results_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Results_List{l}, err
}

func (s Admin_removeObjects_Results_List) At(i int) Admin_removeObjects_Results {
	return Admin_removeObjects_Results{s.List.Struct(i)}
}

func (s Admin_removeObjects_Results_List) Set(i int, v Admin_removeObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xa092f60656bb0db4, s.List)
	return str
}

// Admin_removeObjects_Results_Future is a wrapper for a Admin_removeObjects_Results promised by a client call.
type Admin_removeObjects_Results_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Results_Future) Struct() (Admin_removeObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Results{s}, err
}

type Admin_registry_Params struct{ capnp.Struct }

// Admin_registry_Params_TypeID is the unique identifier for the type Admin_registry_Params.
const Admin_registry_Params_TypeID = 0xee2cf8cf148921b5

func NewAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func NewRootAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func ReadRootAdmin_registry_Params(msg *capnp.Message) (Admin_registry_Params, error) {
	root, err := msg.Root()
	return Admin_registry_Params{root.Struct()}, err
}

func (s Admin_registry_Params) String() string {
	str, _ := text.Marshal(0xee2cf8cf148921b5, s.Struct)
	return str
}

// Admin_registry_Params_List is a list of Admin_registry_Params.
type Admin_registry_Params_List struct{ capnp.List }

// NewAdmin_registry_Params creates a new list of Admin_registry_Params.
func NewAdmin_registry_Params_List(s *capnp.Segment, sz int32) (Admin_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_registry_Params_List{l}, err
}

func (s Admin_registry_Params_List) At(i int) Admin_registry_Params {
	return Admin_registry_Params{s.List.Struct(i)}
}

func (s Admin_registry_Params_List) Set(i int, v Admin_registry_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Params_List) String() string {
	str, _ := text.MarshalList(0xee2cf8cf148921b5, s.List)
	return str
}

// Admin_registry_Params_Future is a wrapper for a Admin_registry_Params promised by a client call.
type Admin_registry_Params_Future struct{ *capnp.Future }

func (p Admin_registry_Params_Future) Struct() (Admin_registry_Params, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Params{s}, err
}

type Admin_registry_Results struct{ capnp.Struct }

// Admin_registry_Results_TypeID is the unique identifier for the type Admin_registry_Results.
const Admin_registry_Results_TypeID = 0xfe62caefab7dfdad

func NewAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func NewRootAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func ReadRootAdmin_registry_Results(msg *capnp.Message) (Admin_registry_Results, error) {
	root, err := msg.Root()
	return Admin_registry_Results{root.Struct()}, err
}

func (s Admin_registry_Results) String() string {
	str, _ := text.Marshal(0xfe62caefab7dfdad, s.Struct)
	return str
}

func (s Admin_registry_Results) Registry() Registry {
	p, _ := s.Struct.Ptr(0)
	return Registry{Client: p.Interface().Client()}
}

func (s Admin_registry_Results) HasRegistry() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_registry_Results) SetRegistry(v Registry) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Admin_registry_Results_List is a list of Admin_registry_Results.
type Admin_registry_Results_List struct{ capnp.List }

// NewAdmin_registry_Results creates a new list of Admin_registry_Results.
func NewAdmin_registry_Results_List(s *capnp.Segment, sz int32) (Admin_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_registry_Results_List{l}, err
}

func (s Admin_registry_Results_List) At(i int) Admin_registry_Results {
	return Admin_registry_Results{s.List.Struct(i)}
}

func (s Admin_registry_Results_List) Set(i int, v Admin_registry_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Results_List) String() string {
	str, _ := text.MarshalList(0xfe62caefab7dfdad, s.List)
	return str
}

// Admin_registry_Results_Future is a wrapper for a Admin_registry_Results promised by a client call.
type Admin_registry_Results_Future struct{ *capnp.Future }

func (p Admin_registry_Results_Future) Struct() (Admin_registry_Results, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Results{s}, err
}

func (p Admin_registry_Results_Future) Registry() Registry {
	return Registry{Client: p.Future.Field(0, nil).Client()}
}

type Registry struct{ Client *capnp.Client }

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xca7b4bd1600633b8

func (c Registry) SupportedCategories(ctx context.Context, params func(Registry_supportedCategories_Params) error) (Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c Registry) CategoryInfo(ctx context.Context, params func(Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Registry) Entries(ctx context.Context, params func(Registry_entries_Params) error) (Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c Registry) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registry) AddRef() Registry {
	return Registry{
		Client: c.Client.AddRef(),
	}
}

func (c Registry) Release() {
	c.Client.Release()
}

// A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	SupportedCategories(context.Context, Registry_supportedCategories) error

	CategoryInfo(context.Context, Registry_categoryInfo) error

	Entries(context.Context, Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c, policy)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server, policy *server.Policy) Registry {
	return Registry{Client: capnp.NewClient(Registry_NewServer(s, policy))}
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registry_supportedCategories holds the state for a server call to Registry.supportedCategories.
// See server.Call for documentation.
type Registry_supportedCategories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_supportedCategories) Args() Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_supportedCategories) AllocResults() (Registry_supportedCategories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{Struct: r}, err
}

// Registry_categoryInfo holds the state for a server call to Registry.categoryInfo.
// See server.Call for documentation.
type Registry_categoryInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_categoryInfo) Args() Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_categoryInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// Registry_entries holds the state for a server call to Registry.entries.
// See server.Call for documentation.
type Registry_entries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_entries) Args() Registry_entries_Params {
	return Registry_entries_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_entries) AllocResults() (Registry_entries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{Struct: r}, err
}

type Registry_Entry struct{ capnp.Struct }

// Registry_Entry_TypeID is the unique identifier for the type Registry_Entry.
const Registry_Entry_TypeID = 0xc17987510cf7ac13

func NewRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func NewRootRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func ReadRootRegistry_Entry(msg *capnp.Message) (Registry_Entry, error) {
	root, err := msg.Root()
	return Registry_Entry{root.Struct()}, err
}

func (s Registry_Entry) String() string {
	str, _ := text.Marshal(0xc17987510cf7ac13, s.Struct)
	return str
}

func (s Registry_Entry) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_Entry) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_Entry) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Registry_Entry) Ref() common.Identifiable {
	p, _ := s.Struct.Ptr(1)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registry_Entry) HasRef() bool {
	return s.Struct.HasPtr(1)
}

func (s Registry_Entry) SetRef(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Registry_Entry) Name() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registry_Entry) HasName() bool {
	return s.Struct.HasPtr(2)
}

func (s Registry_Entry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetName(v string) error {
	return s.Struct.SetText(2, v)
}

// Registry_Entry_List is a list of Registry_Entry.
type Registry_Entry_List struct{ capnp.List }

// NewRegistry_Entry creates a new list of Registry_Entry.
func NewRegistry_Entry_List(s *capnp.Segment, sz int32) (Registry_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Registry_Entry_List{l}, err
}

func (s Registry_Entry_List) At(i int) Registry_Entry { return Registry_Entry{s.List.Struct(i)} }

func (s Registry_Entry_List) Set(i int, v Registry_Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Registry_Entry_List) String() string {
	str, _ := text.MarshalList(0xc17987510cf7ac13, s.List)
	return str
}

// Registry_Entry_Future is a wrapper for a Registry_Entry promised by a client call.
type Registry_Entry_Future struct{ *capnp.Future }

func (p Registry_Entry_Future) Struct() (Registry_Entry, error) {
	s, err := p.Future.Struct()
	return Registry_Entry{s}, err
}

func (p Registry_Entry_Future) Ref() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(1, nil).Client()}
}

type Registry_supportedCategories_Params struct{ capnp.Struct }

// Registry_supportedCategories_Params_TypeID is the unique identifier for the type Registry_supportedCategories_Params.
const Registry_supportedCategories_Params_TypeID = 0x9c49e6e65e34c29b

func NewRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func NewRootRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func ReadRootRegistry_supportedCategories_Params(msg *capnp.Message) (Registry_supportedCategories_Params, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Params{root.Struct()}, err
}

func (s Registry_supportedCategories_Params) String() string {
	str, _ := text.Marshal(0x9c49e6e65e34c29b, s.Struct)
	return str
}

// Registry_supportedCategories_Params_List is a list of Registry_supportedCategories_Params.
type Registry_supportedCategories_Params_List struct{ capnp.List }

// NewRegistry_supportedCategories_Params creates a new list of Registry_supportedCategories_Params.
func NewRegistry_supportedCategories_Params_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Registry_supportedCategories_Params_List{l}, err
}

func (s Registry_supportedCategories_Params_List) At(i int) Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Params_List) Set(i int, v Registry_supportedCategories_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Params_List) String() string {
	str, _ := text.MarshalList(0x9c49e6e65e34c29b, s.List)
	return str
}

// Registry_supportedCategories_Params_Future is a wrapper for a Registry_supportedCategories_Params promised by a client call.
type Registry_supportedCategories_Params_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Params_Future) Struct() (Registry_supportedCategories_Params, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Params{s}, err
}

type Registry_supportedCategories_Results struct{ capnp.Struct }

// Registry_supportedCategories_Results_TypeID is the unique identifier for the type Registry_supportedCategories_Results.
const Registry_supportedCategories_Results_TypeID = 0xb2bf60b5817330b0

func NewRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func NewRootRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func ReadRootRegistry_supportedCategories_Results(msg *capnp.Message) (Registry_supportedCategories_Results, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Results{root.Struct()}, err
}

func (s Registry_supportedCategories_Results) String() string {
	str, _ := text.Marshal(0xb2bf60b5817330b0, s.Struct)
	return str
}

func (s Registry_supportedCategories_Results) Cats() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Registry_supportedCategories_Results) HasCats() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_supportedCategories_Results) SetCats(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCats sets the cats field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Registry_supportedCategories_Results) NewCats(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_supportedCategories_Results_List is a list of Registry_supportedCategories_Results.
type Registry_supportedCategories_Results_List struct{ capnp.List }

// NewRegistry_supportedCategories_Results creates a new list of Registry_supportedCategories_Results.
func NewRegistry_supportedCategories_Results_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_supportedCategories_Results_List{l}, err
}

func (s Registry_supportedCategories_Results_List) At(i int) Registry_supportedCategories_Results {
	return Registry_supportedCategories_Results{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Results_List) Set(i int, v Registry_supportedCategories_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Results_List) String() string {
	str, _ := text.MarshalList(0xb2bf60b5817330b0, s.List)
	return str
}

// Registry_supportedCategories_Results_Future is a wrapper for a Registry_supportedCategories_Results promised by a client call.
type Registry_supportedCategories_Results_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Results_Future) Struct() (Registry_supportedCategories_Results, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Results{s}, err
}

type Registry_categoryInfo_Params struct{ capnp.Struct }

// Registry_categoryInfo_Params_TypeID is the unique identifier for the type Registry_categoryInfo_Params.
const Registry_categoryInfo_Params_TypeID = 0x891283e1b248bc9d

func NewRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func NewRootRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func ReadRootRegistry_categoryInfo_Params(msg *capnp.Message) (Registry_categoryInfo_Params, error) {
	root, err := msg.Root()
	return Registry_categoryInfo_Params{root.Struct()}, err
}

func (s Registry_categoryInfo_Params) String() string {
	str, _ := text.Marshal(0x891283e1b248bc9d, s.Struct)
	return str
}

func (s Registry_categoryInfo_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_categoryInfo_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_categoryInfo_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_categoryInfo_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_categoryInfo_Params_List is a list of Registry_categoryInfo_Params.
type Registry_categoryInfo_Params_List struct{ capnp.List }

// NewRegistry_categoryInfo_Params creates a new list of Registry_categoryInfo_Params.
func NewRegistry_categoryInfo_Params_List(s *capnp.Segment, sz int32) (Registry_categoryInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_categoryInfo_Params_List{l}, err
}

func (s Registry_categoryInfo_Params_List) At(i int) Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{s.List.Struct(i)}
}

func (s Registry_categoryInfo_Params_List) Set(i int, v Registry_categoryInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_categoryInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x891283e1b248bc9d, s.List)
	return str
}

// Registry_categoryInfo_Params_Future is a wrapper for a Registry_categoryInfo_Params promised by a client call.
type Registry_categoryInfo_Params_Future struct{ *capnp.Future }

func (p Registry_categoryInfo_Params_Future) Struct() (Registry_categoryInfo_Params, error) {
	s, err := p.Future.Struct()
	return Registry_categoryInfo_Params{s}, err
}

type Registry_entries_Params struct{ capnp.Struct }

// Registry_entries_Params_TypeID is the unique identifier for the type Registry_entries_Params.
const Registry_entries_Params_TypeID = 0x9ffc53716151c5fa

func NewRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func NewRootRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func ReadRootRegistry_entries_Params(msg *capnp.Message) (Registry_entries_Params, error) {
	root, err := msg.Root()
	return Registry_entries_Params{root.Struct()}, err
}

func (s Registry_entries_Params) String() string {
	str, _ := text.Marshal(0x9ffc53716151c5fa, s.Struct)
	return str
}

func (s Registry_entries_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_entries_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_entries_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_entries_Params_List is a list of Registry_entries_Params.
type Registry_entries_Params_List struct{ capnp.List }

// NewRegistry_entries_Params creates a new list of Registry_entries_Params.
func NewRegistry_entries_Params_List(s *capnp.Segment, sz int32) (Registry_entries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Params_List{l}, err
}

func (s Registry_entries_Params_List) At(i int) Registry_entries_Params {
	return Registry_entries_Params{s.List.Struct(i)}
}

func (s Registry_entries_Params_List) Set(i int, v Registry_entries_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Params_List) String() string {
	str, _ := text.MarshalList(0x9ffc53716151c5fa, s.List)
	return str
}

// Registry_entries_Params_Future is a wrapper for a Registry_entries_Params promised by a client call.
type Registry_entries_Params_Future struct{ *capnp.Future }

func (p Registry_entries_Params_Future) Struct() (Registry_entries_Params, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Params{s}, err
}

type Registry_entries_Results struct{ capnp.Struct }

// Registry_entries_Results_TypeID is the unique identifier for the type Registry_entries_Results.
const Registry_entries_Results_TypeID = 0xe4eaf56eb486064d

func NewRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func NewRootRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func ReadRootRegistry_entries_Results(msg *capnp.Message) (Registry_entries_Results, error) {
	root, err := msg.Root()
	return Registry_entries_Results{root.Struct()}, err
}

func (s Registry_entries_Results) String() string {
	str, _ := text.Marshal(0xe4eaf56eb486064d, s.Struct)
	return str
}

func (s Registry_entries_Results) Entries() (Registry_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Registry_Entry_List{List: p.List()}, err
}

func (s Registry_entries_Results) HasEntries() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Results) SetEntries(v Registry_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Registry_Entry_List, preferring placement in s's segment.
func (s Registry_entries_Results) NewEntries(n int32) (Registry_Entry_List, error) {
	l, err := NewRegistry_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Registry_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_entries_Results_List is a list of Registry_entries_Results.
type Registry_entries_Results_List struct{ capnp.List }

// NewRegistry_entries_Results creates a new list of Registry_entries_Results.
func NewRegistry_entries_Results_List(s *capnp.Segment, sz int32) (Registry_entries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Results_List{l}, err
}

func (s Registry_entries_Results_List) At(i int) Registry_entries_Results {
	return Registry_entries_Results{s.List.Struct(i)}
}

func (s Registry_entries_Results_List) Set(i int, v Registry_entries_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Results_List) String() string {
	str, _ := text.MarshalList(0xe4eaf56eb486064d, s.List)
	return str
}

// Registry_entries_Results_Future is a wrapper for a Registry_entries_Results promised by a client call.
type Registry_entries_Results_Future struct{ *capnp.Future }

func (p Registry_entries_Results_Future) Struct() (Registry_entries_Results, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Results{s}, err
}

type Registrar struct{ Client *capnp.Client }

// Registrar_TypeID is the unique identifier for the type Registrar.
const Registrar_TypeID = 0xabaef93c36f2d1ea

func (c Registrar) Register(ctx context.Context, params func(Registrar_register_Params) error) (Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_register_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registrar_register_Results_Future{Future: ans.Future()}, release
}
func (c Registrar) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registrar) AddRef() Registrar {
	return Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c Registrar) Release() {
	c.Client.Release()
}

// A Registrar_Server is a Registrar with a local implementation.
type Registrar_Server interface {
	Register(context.Context, Registrar_register) error

	Info(context.Context, common.Identifiable_info) error
}

// Registrar_NewServer creates a new Server from an implementation of Registrar_Server.
func Registrar_NewServer(s Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Methods(nil, s), s, c, policy)
}

// Registrar_ServerToClient creates a new Client from an implementation of Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ServerToClient(s Registrar_Server, policy *server.Policy) Registrar {
	return Registrar{Client: capnp.NewClient(Registrar_NewServer(s, policy))}
}

// Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Methods(methods []server.Method, s Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Registrar_register{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registrar_register holds the state for a server call to Registrar.register.
// See server.Call for documentation.
type Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_register) Args() Registrar_register_Params {
	return Registrar_register_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registrar_register) AllocResults() (Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{Struct: r}, err
}

type Registrar_register_Params struct{ capnp.Struct }

// Registrar_register_Params_TypeID is the unique identifier for the type Registrar_register_Params.
const Registrar_register_Params_TypeID = 0x98ee0ca0962009bc

func NewRegistrar_register_Params(s *capnp.Segment) (Registrar_register_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registrar_register_Params{st}, err
}

func NewRootRegistrar_register_Params(s *capnp.Segment) (Registrar_register_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registrar_register_Params{st}, err
}

func ReadRootRegistrar_register_Params(msg *capnp.Message) (Registrar_register_Params, error) {
	root, err := msg.Root()
	return Registrar_register_Params{root.Struct()}, err
}

func (s Registrar_register_Params) String() string {
	str, _ := text.Marshal(0x98ee0ca0962009bc, s.Struct)
	return str
}

func (s Registrar_register_Params) Cap() common.Identifiable {
	p, _ := s.Struct.Ptr(0)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registrar_register_Params) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_register_Params) SetCap(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Params) RegName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Registrar_register_Params) HasRegName() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_register_Params) RegNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Registrar_register_Params) SetRegName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Registrar_register_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registrar_register_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(2)
}

func (s Registrar_register_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registrar_register_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(2, v)
}

// Registrar_register_Params_List is a list of Registrar_register_Params.
type Registrar_register_Params_List struct{ capnp.List }

// NewRegistrar_register_Params creates a new list of Registrar_register_Params.
func NewRegistrar_register_Params_List(s *capnp.Segment, sz int32) (Registrar_register_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Registrar_register_Params_List{l}, err
}

func (s Registrar_register_Params_List) At(i int) Registrar_register_Params {
	return Registrar_register_Params{s.List.Struct(i)}
}

func (s Registrar_register_Params_List) Set(i int, v Registrar_register_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_register_Params_List) String() string {
	str, _ := text.MarshalList(0x98ee0ca0962009bc, s.List)
	return str
}

// Registrar_register_Params_Future is a wrapper for a Registrar_register_Params promised by a client call.
type Registrar_register_Params_Future struct{ *capnp.Future }

func (p Registrar_register_Params_Future) Struct() (Registrar_register_Params, error) {
	s, err := p.Future.Struct()
	return Registrar_register_Params{s}, err
}

func (p Registrar_register_Params_Future) Cap() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(0, nil).Client()}
}

type Registrar_register_Results struct{ capnp.Struct }

// Registrar_register_Results_TypeID is the unique identifier for the type Registrar_register_Results.
const Registrar_register_Results_TypeID = 0xb2a9b080f0c4013c

func NewRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func NewRootRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func ReadRootRegistrar_register_Results(msg *capnp.Message) (Registrar_register_Results, error) {
	root, err := msg.Root()
	return Registrar_register_Results{root.Struct()}, err
}

func (s Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xb2a9b080f0c4013c, s.Struct)
	return str
}

func (s Registrar_register_Results) Unreg() common.Action {
	p, _ := s.Struct.Ptr(0)
	return common.Action{Client: p.Interface().Client()}
}

func (s Registrar_register_Results) HasUnreg() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_register_Results) SetUnreg(v common.Action) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Results) ReregSR() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Registrar_register_Results) HasReregSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_register_Results) ReregSRBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Registrar_register_Results) SetReregSR(v string) error {
	return s.Struct.SetText(1, v)
}

// Registrar_register_Results_List is a list of Registrar_register_Results.
type Registrar_register_Results_List struct{ capnp.List }

// NewRegistrar_register_Results creates a new list of Registrar_register_Results.
func NewRegistrar_register_Results_List(s *capnp.Segment, sz int32) (Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Registrar_register_Results_List{l}, err
}

func (s Registrar_register_Results_List) At(i int) Registrar_register_Results {
	return Registrar_register_Results{s.List.Struct(i)}
}

func (s Registrar_register_Results_List) Set(i int, v Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xb2a9b080f0c4013c, s.List)
	return str
}

// Registrar_register_Results_Future is a wrapper for a Registrar_register_Results promised by a client call.
type Registrar_register_Results_Future struct{ *capnp.Future }

func (p Registrar_register_Results_Future) Struct() (Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return Registrar_register_Results{s}, err
}

func (p Registrar_register_Results_Future) Unreg() common.Action {
	return common.Action{Client: p.Future.Field(0, nil).Client()}
}

const schema_fe1be0c39c7e8269 = "x\xda\xacV_l\x14\xd5\x17>gf\xbb\xb3\xdb." +
	"\x94\xfb\x9b\xf2\x03BLEk\x02\x04+\x054B " +
	"\xbb-\x10\xdaJ\xa1w\xc1?4Q\x99\xee\x0e\xcd\x92" +
	"v\xb7\xcc\xccb\x16C\x8bb \xbc`4\x91\x10\xa4" +
	"\x110<TP\xa0\x81\xc4D\x90\x00\x1a\x03\x84\x98\x06" +
	"\x10\x91\xc4\x881<\xf0\x80\x8a\x82\xa2\xc2\x98{g\xef" +
	"\xec\xed\xf6\x0f\xc4\xf0\xb6\xed|\xf7\x9c\xf3}\xe7;\xf7" +
	"\x9e\xe9\xd5\x81\x98RS2n\x14\x00\xdd^\x12t{" +
	"\x8e\xd6\xf7]\xdd\xf8\xbf-@\xc6#@\x09j\x003" +
	"\xd7\x04[\x11P_\x1f\x8c\x02\xba\xa7\xae\xb4l\x88\\" +
	"<\xbe\x15\xc8X\x06P\x18`w\xb0\x8e\x01z\x83\xaf" +
	"\x01\xba\x1f^\xed\xba\xd1uh\xef\xb6<\x80G\x98\xa0" +
	"\xc5\x19\xe0\x09\x8dE8\x1a~t\xdb\xae\xc8\x8d\xed@" +
	"&0\x80\xca\x00+\xb4F\x060\xb5\x03\x80\xee\xfb'" +
	"g\xbdr\xedZ\xc3N\xaf\x86\x00\xfb\x8e\xa1\x1d\x08\x01" +
	"\xf7\xaf/\xa9\xb1f\xd9?\x1f\xc8\xd5\xfd\xaa\xcdaG" +
	"\xef\xf0\xd8\x87G}\xf6B\xf0\xf6\xbb\xbb\xe4\xe4\x8f\x84" +
	"Z\x18`J\x88\x01J\xden\x1f\xa3\xee\xde\xdf+\x03" +
	"^\x0eq~)\x0e\xb8\xde\x7f\xf3\x99\xb9w>\xd9\x07" +
	"\xa4\\uSov\xed<\xf5\xc3\xc4{\x00\xa8\xf7\x84" +
	"\xce\xe8\xbd!\x0d@\xdf\x1bZ\xa4\xf7\x87\xc6\x01\xb8s" +
	"\xf1\x8b_6\x1c\xec\xed\xcbS\xe1b\x9c\x08q\xae\xe7" +
	"BL\x8c\x83\xd3\xed7\x8e\xac<\xde'\x17<%\xbc" +
	"\x87\x01f\x87Y\xba#O[\xeb\x9e\xda8\xef\x18\xd0" +
	"\xb1(\xc8\xa6\xc2\\\x8c,\x07\xe8\xfb\xff\x88\xd0\xcd\xb9" +
	"\x13,\x82\xfb\xe9\xcc\xe0\xca\xfe\xe7^?\xe3\xa9\xa6\xbf" +
	"\x17\xbe\xa9\xef\x0e\xb3_=a&\x9c\xff\xb9\xb8\xf6\xd9" +
	"\xa5'\xf5\xda\xd2q\x00zC\xe9W\xfa9\xf6\xcb\xfd" +
	"\xe6\xfb\x0d\xb8u\xe2\xe7\x17\xe5F\x1e+\xe5R\x9d." +
	"e\xb5\xbf\xfa\xfb\xf9\xae\x1d\x976\x7f+KUS\xc6" +
	"K\x9bW\xc6J\xbb\xbd\xe9\xadC\x7f_\xf8\xff\x95|" +
	"\xedy\xb3\x94q/\xe4\xcaX\x88\xa6\xe0\xa6\xc3\xe9[" +
	"\xd7\x7f\x92\xe9_\xf6\x00Wy\x88#\x93\xb6T|\xfd" +
	"\xe7\xb4\x1b^\x0e\xce\x9eD\xa6\xb2V/yq\xd5\xda" +
	"\xc7\x7fSo\x0d\xe2r\xa7\xec#\x1d#\x0cy\xb7l" +
	"\x11\xea\x97#\x8c\xcc\xc7w\xd7\xef\xfb\xf9L\xeb=\xb9" +
	"\xd6\xd3\x91\x19,Q\x7f$\x0aG]\xcblK\xd9\x8e" +
	"\x95\x0bT'\x8c\xcet\xe7\x9cx\xfe\xef\xea\x84\xe1\x98" +
	"m\x19+\xd7\x90^\x95\xa9j6,\xcd\xe8\xb0i@" +
	"\x0d\x00\x04\x10\x80\x8cj\x01\xa0\x11\x15\xe9x\x05]\x81" +
	"\x05\xb5!\x89\x11P0\x028(rm\xb2#\x95\xae" +
	"\xee\xc8\xac5\x97\xb6\xae6\x13\x8e\xcd\xa2\x1a\x1d6\xd0" +
	"\x90\x1fuJ\x1c\x80NV\x91.P\x90 V0\xf9" +
	"Hm\x1d\x00\x9d\xab\"\xadW\xd0\xcd\xf0\xb3\x0dI@" +
	"\x1bG\x036\xab\xc8\x13\x8e\x06\xecv2\xf3\x0d\xe7\xbe" +
	"\x05X\xe6\xa0\x12p\x00\xb1x\x9e\xd8\xe4\x11\xb3\x0d'" +
	"\x9caU{_LK\xf0c\xe1D\xf4\x85\x8f\x01\xd0" +
	"\x98\x8at\xb1D\xb0\x81\x11\\\xa0\"mV\x90(J" +
	"\x05*\x00\xa4\x89\x09\xbcXE\xfa\x92\x82Z\xc2\xe8D" +
	"\xe2^\xac\xdf\xb9\xe2l\xff\x81>\x00D\x02\xd8m\x99" +
	"mK\x8c\x0e\xd3'<b\x1bJ\x8a\x1blg;;" +
	"3\x96c&\xe7{\xc7R\xa6'\x87\xdaa\xfb\x87\xd4" +
	"\xe2Cf\xda\xe1\xc0\xa8\xc7\xed!\x18b`?\xe2\xa6" +
	"\x9dmW\x9d\x01\x81\xd7I\x0d\xf1\xd0\xc9\xa5\x10\xf5\x0e" +
	"\x88\xae\x0c\x14g\xf4}\xb2\xe5\x19\xe7x:\xad\xfda" +
	"\xa6S\x8a\xed\x00\xd0\x8cH\x03j\x09\x80\x7f\xc3\xa3\xb8" +
	"\x1f\x09i\x04\x85\x845Wx\x06\x00bH\x03\x88R" +
	"\x02x\x10\xafq\xe1\x1c\xb4\xe5a\x9a\x01@\xabT\xa4" +
	"\xd3%\xaf=Y\x97\x9f\xb0Y\x0aVf\xd3\x96\xd9\x86" +
	"\xc4\xdd\xbc0}\xe9\xd4\x8f\x17z\x0a\xc6\xb2\xcc\xb6e" +
	"\xf1\xff\xe6\xa1\xa14\x9d\x0al\xca\x91V)X\x9e0" +
	"\x0a:\x8eq\xcf\x7f\xa7\xde;\xdbu\xf6\xc2\xc8m3" +
	"\x92\xc9\x01=kw\xd8XI\x09\xea\xf2\x09*\x14\xec" +
	"\xb6\xb3\x89\x84i\xdb\x88\xa0 \x0e\xdf\x9a\\u\xe5\xc2" +
	"\xb4c\xe5X{\xa4\x01m\x91fQ\x88\xd6\xc4\xa6\xb6" +
	"^E\xba\\\x1aP:\xb50\xa0C\x1a^\xb3\xccU" +
	"\x83\xa7\xb6<-\x8f\xecp\xb5\x01\xf7@\xe1\x8d\xc3\x19" +
	"^\xb14\xc2\x8d$6\x01\x14\xef(\xa1{@!M" +
	"\x1a\xa2\xbf\xa9\xa0\x90\x96\xd4\xae\x06\x85\xcc\xd6P\xf1\xf7" +
	"\x04\x14\x0f\x10\xf3\x83B&i\xae\xe8$\x0a\xa1\xb5\x94" +
	"i\xc7$b\xe5\xec!\x88aw\xfe\x06x\x00\x97\x0e" +
	"9q\xf9\x1bF\xb6iK\xc1\x91\xbe\xe25'\x01\xe8" +
	",\x15il\xb8\xdbD\xdc\x1aJ\xc2\xb1\x97gD|" +
	"vU?\xf8\x034\xa4\x95\xe4\xf9\xf7\xa6\xbfu5D" +
	"\xf93p\xdfG`\xb0[\x87x\xe3\x1a\x0b|9]" +
	"DR3\x07\x80NS\x91>+\xd3\x05(\x1a\x901" +
	"\x80\xd1l\xa7mZ\xce s\x07\x86\xbb\xa9\x05\xc7\xa1" +
	"\xa6\xa5J\xf1\xfbY\x98H\xdftE\x13\xa9\x16\xb5\xd5" +
	"\xfboU\xb3Q\xce\x18\xfa0\x14\xb0r\x86c\xc3U" +
	"\xc1-+\x96\"\x14\x9b\x1dy\xa7\x15\x14\xb2\x85YV" +
	"\xac\\(\xb6P\xb2~\x1d($\xcb,+\xf6j\x14" +
	"k\x17I\xb1s\x86\x86\xaa\xbfR\xa3Xo\xc9\xf3\x96" +
	"7\x06\x01\x7f\x83B\xb1\x02\x91\xdaF>\x06\xaeh\x0f" +
	"h\x19+\x17\x13\x97\xfc|\x03\xa2\x9e\xee\xb1\x82\xb9@" +
	"K8\xb6\x0fY\xda\x0a\x95\xdc8\xb1\x82*#_\xd8" +
	"\xc3h\x167+yS\xe4\x9e4J\xcf\xa7\x14\x1cI" +
	"a{\xf5.\x90\x7f\x03\x00\x00\xff\xff\x8f\x1e\x95\xf8"

func init() {
	schemas.Register(schema_fe1be0c39c7e8269,
		0x891283e1b248bc9d,
		0x8ebfd50c805adbc3,
		0x96a5b17eee7ee1a3,
		0x98ee0ca0962009bc,
		0x9c49e6e65e34c29b,
		0x9ffc53716151c5fa,
		0xa092f60656bb0db4,
		0xa9aca103106c8f05,
		0xabaef93c36f2d1ea,
		0xb2a9b080f0c4013c,
		0xb2bf60b5817330b0,
		0xbd3d832f7a7235b5,
		0xc17987510cf7ac13,
		0xca7b4bd1600633b8,
		0xd5be1b8e0180ded6,
		0xd887d79a7ed3f45f,
		0xdb16d4fbb18486f6,
		0xe4eaf56eb486064d,
		0xee2cf8cf148921b5,
		0xf503f3237666574e,
		0xfe62caefab7dfdad)
}
