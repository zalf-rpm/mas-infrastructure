// Code generated by capnpc-go. DO NOT EDIT.

package registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
)

type Admin struct{ Client *capnp.Client }

// Admin_TypeID is the unique identifier for the type Admin.
const Admin_TypeID = 0xf503f3237666574e

func (c Admin) AddCategory(ctx context.Context, params func(Admin_addCategory_Params) error) (Admin_addCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_addCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_addCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveCategory(ctx context.Context, params func(Admin_removeCategory_Params) error) (Admin_removeCategory_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeCategory_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeCategory_Results_Future{Future: ans.Future()}, release
}
func (c Admin) MoveObjects(ctx context.Context, params func(Admin_moveObjects_Params) error) (Admin_moveObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_moveObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_moveObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) RemoveObjects(ctx context.Context, params func(Admin_removeObjects_Params) error) (Admin_removeObjects_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_removeObjects_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_removeObjects_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Registry(ctx context.Context, params func(Admin_registry_Params) error) (Admin_registry_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Admin_registry_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Admin_registry_Results_Future{Future: ans.Future()}, release
}
func (c Admin) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Admin) AddRef() Admin {
	return Admin{
		Client: c.Client.AddRef(),
	}
}

func (c Admin) Release() {
	c.Client.Release()
}

// A Admin_Server is a Admin with a local implementation.
type Admin_Server interface {
	AddCategory(context.Context, Admin_addCategory) error

	RemoveCategory(context.Context, Admin_removeCategory) error

	MoveObjects(context.Context, Admin_moveObjects) error

	RemoveObjects(context.Context, Admin_removeObjects) error

	Registry(context.Context, Admin_registry) error

	Info(context.Context, common.Identifiable_info) error
}

// Admin_NewServer creates a new Server from an implementation of Admin_Server.
func Admin_NewServer(s Admin_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Admin_Methods(nil, s), s, c, policy)
}

// Admin_ServerToClient creates a new Client from an implementation of Admin_Server.
// The caller is responsible for calling Release on the returned Client.
func Admin_ServerToClient(s Admin_Server, policy *server.Policy) Admin {
	return Admin{Client: capnp.NewClient(Admin_NewServer(s, policy))}
}

// Admin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Admin_Methods(methods []server.Method, s Admin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      0,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "addCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddCategory(ctx, Admin_addCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      1,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeCategory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveCategory(ctx, Admin_removeCategory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      2,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "moveObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.MoveObjects(ctx, Admin_moveObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      3,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "removeObjects",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveObjects(ctx, Admin_removeObjects{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf503f3237666574e,
			MethodID:      4,
			InterfaceName: "registry.capnp:Admin",
			MethodName:    "registry",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Registry(ctx, Admin_registry{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Admin_addCategory holds the state for a server call to Admin.addCategory.
// See server.Call for documentation.
type Admin_addCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_addCategory) Args() Admin_addCategory_Params {
	return Admin_addCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_addCategory) AllocResults() (Admin_addCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{Struct: r}, err
}

// Admin_removeCategory holds the state for a server call to Admin.removeCategory.
// See server.Call for documentation.
type Admin_removeCategory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeCategory) Args() Admin_removeCategory_Params {
	return Admin_removeCategory_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeCategory) AllocResults() (Admin_removeCategory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{Struct: r}, err
}

// Admin_moveObjects holds the state for a server call to Admin.moveObjects.
// See server.Call for documentation.
type Admin_moveObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_moveObjects) Args() Admin_moveObjects_Params {
	return Admin_moveObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_moveObjects) AllocResults() (Admin_moveObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{Struct: r}, err
}

// Admin_removeObjects holds the state for a server call to Admin.removeObjects.
// See server.Call for documentation.
type Admin_removeObjects struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_removeObjects) Args() Admin_removeObjects_Params {
	return Admin_removeObjects_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_removeObjects) AllocResults() (Admin_removeObjects_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{Struct: r}, err
}

// Admin_registry holds the state for a server call to Admin.registry.
// See server.Call for documentation.
type Admin_registry struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Admin_registry) Args() Admin_registry_Params {
	return Admin_registry_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Admin_registry) AllocResults() (Admin_registry_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{Struct: r}, err
}

type Admin_addCategory_Params struct{ capnp.Struct }

// Admin_addCategory_Params_TypeID is the unique identifier for the type Admin_addCategory_Params.
const Admin_addCategory_Params_TypeID = 0xdb16d4fbb18486f6

func NewAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func NewRootAdmin_addCategory_Params(s *capnp.Segment) (Admin_addCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Admin_addCategory_Params{st}, err
}

func ReadRootAdmin_addCategory_Params(msg *capnp.Message) (Admin_addCategory_Params, error) {
	root, err := msg.Root()
	return Admin_addCategory_Params{root.Struct()}, err
}

func (s Admin_addCategory_Params) String() string {
	str, _ := text.Marshal(0xdb16d4fbb18486f6, s.Struct)
	return str
}

func (s Admin_addCategory_Params) Category() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Admin_addCategory_Params) HasCategory() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_addCategory_Params) SetCategory(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCategory sets the category field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Admin_addCategory_Params) NewCategory() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Admin_addCategory_Params) Upsert() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Params) SetUpsert(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Params_List is a list of Admin_addCategory_Params.
type Admin_addCategory_Params_List struct{ capnp.List }

// NewAdmin_addCategory_Params creates a new list of Admin_addCategory_Params.
func NewAdmin_addCategory_Params_List(s *capnp.Segment, sz int32) (Admin_addCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Admin_addCategory_Params_List{l}, err
}

func (s Admin_addCategory_Params_List) At(i int) Admin_addCategory_Params {
	return Admin_addCategory_Params{s.List.Struct(i)}
}

func (s Admin_addCategory_Params_List) Set(i int, v Admin_addCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xdb16d4fbb18486f6, s.List)
	return str
}

// Admin_addCategory_Params_Future is a wrapper for a Admin_addCategory_Params promised by a client call.
type Admin_addCategory_Params_Future struct{ *capnp.Future }

func (p Admin_addCategory_Params_Future) Struct() (Admin_addCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Params{s}, err
}

func (p Admin_addCategory_Params_Future) Category() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Admin_addCategory_Results struct{ capnp.Struct }

// Admin_addCategory_Results_TypeID is the unique identifier for the type Admin_addCategory_Results.
const Admin_addCategory_Results_TypeID = 0xbd3d832f7a7235b5

func NewAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func NewRootAdmin_addCategory_Results(s *capnp.Segment) (Admin_addCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Admin_addCategory_Results{st}, err
}

func ReadRootAdmin_addCategory_Results(msg *capnp.Message) (Admin_addCategory_Results, error) {
	root, err := msg.Root()
	return Admin_addCategory_Results{root.Struct()}, err
}

func (s Admin_addCategory_Results) String() string {
	str, _ := text.Marshal(0xbd3d832f7a7235b5, s.Struct)
	return str
}

func (s Admin_addCategory_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Admin_addCategory_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Admin_addCategory_Results_List is a list of Admin_addCategory_Results.
type Admin_addCategory_Results_List struct{ capnp.List }

// NewAdmin_addCategory_Results creates a new list of Admin_addCategory_Results.
func NewAdmin_addCategory_Results_List(s *capnp.Segment, sz int32) (Admin_addCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Admin_addCategory_Results_List{l}, err
}

func (s Admin_addCategory_Results_List) At(i int) Admin_addCategory_Results {
	return Admin_addCategory_Results{s.List.Struct(i)}
}

func (s Admin_addCategory_Results_List) Set(i int, v Admin_addCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_addCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xbd3d832f7a7235b5, s.List)
	return str
}

// Admin_addCategory_Results_Future is a wrapper for a Admin_addCategory_Results promised by a client call.
type Admin_addCategory_Results_Future struct{ *capnp.Future }

func (p Admin_addCategory_Results_Future) Struct() (Admin_addCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_addCategory_Results{s}, err
}

type Admin_removeCategory_Params struct{ capnp.Struct }

// Admin_removeCategory_Params_TypeID is the unique identifier for the type Admin_removeCategory_Params.
const Admin_removeCategory_Params_TypeID = 0xd5be1b8e0180ded6

func NewAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func NewRootAdmin_removeCategory_Params(s *capnp.Segment) (Admin_removeCategory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_removeCategory_Params{st}, err
}

func ReadRootAdmin_removeCategory_Params(msg *capnp.Message) (Admin_removeCategory_Params, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Params{root.Struct()}, err
}

func (s Admin_removeCategory_Params) String() string {
	str, _ := text.Marshal(0xd5be1b8e0180ded6, s.Struct)
	return str
}

func (s Admin_removeCategory_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_removeCategory_Params) HasMoveObjectsToCategoryId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_removeCategory_Params) MoveObjectsToCategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_removeCategory_Params) SetMoveObjectsToCategoryId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_removeCategory_Params_List is a list of Admin_removeCategory_Params.
type Admin_removeCategory_Params_List struct{ capnp.List }

// NewAdmin_removeCategory_Params creates a new list of Admin_removeCategory_Params.
func NewAdmin_removeCategory_Params_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_removeCategory_Params_List{l}, err
}

func (s Admin_removeCategory_Params_List) At(i int) Admin_removeCategory_Params {
	return Admin_removeCategory_Params{s.List.Struct(i)}
}

func (s Admin_removeCategory_Params_List) Set(i int, v Admin_removeCategory_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Params_List) String() string {
	str, _ := text.MarshalList(0xd5be1b8e0180ded6, s.List)
	return str
}

// Admin_removeCategory_Params_Future is a wrapper for a Admin_removeCategory_Params promised by a client call.
type Admin_removeCategory_Params_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Params_Future) Struct() (Admin_removeCategory_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Params{s}, err
}

type Admin_removeCategory_Results struct{ capnp.Struct }

// Admin_removeCategory_Results_TypeID is the unique identifier for the type Admin_removeCategory_Results.
const Admin_removeCategory_Results_TypeID = 0xa9aca103106c8f05

func NewAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func NewRootAdmin_removeCategory_Results(s *capnp.Segment) (Admin_removeCategory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeCategory_Results{st}, err
}

func ReadRootAdmin_removeCategory_Results(msg *capnp.Message) (Admin_removeCategory_Results, error) {
	root, err := msg.Root()
	return Admin_removeCategory_Results{root.Struct()}, err
}

func (s Admin_removeCategory_Results) String() string {
	str, _ := text.Marshal(0xa9aca103106c8f05, s.Struct)
	return str
}

func (s Admin_removeCategory_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeCategory_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeCategory_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeCategory_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeCategory_Results_List is a list of Admin_removeCategory_Results.
type Admin_removeCategory_Results_List struct{ capnp.List }

// NewAdmin_removeCategory_Results creates a new list of Admin_removeCategory_Results.
func NewAdmin_removeCategory_Results_List(s *capnp.Segment, sz int32) (Admin_removeCategory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeCategory_Results_List{l}, err
}

func (s Admin_removeCategory_Results_List) At(i int) Admin_removeCategory_Results {
	return Admin_removeCategory_Results{s.List.Struct(i)}
}

func (s Admin_removeCategory_Results_List) Set(i int, v Admin_removeCategory_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeCategory_Results_List) String() string {
	str, _ := text.MarshalList(0xa9aca103106c8f05, s.List)
	return str
}

// Admin_removeCategory_Results_Future is a wrapper for a Admin_removeCategory_Results promised by a client call.
type Admin_removeCategory_Results_Future struct{ *capnp.Future }

func (p Admin_removeCategory_Results_Future) Struct() (Admin_removeCategory_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeCategory_Results{s}, err
}

type Admin_moveObjects_Params struct{ capnp.Struct }

// Admin_moveObjects_Params_TypeID is the unique identifier for the type Admin_moveObjects_Params.
const Admin_moveObjects_Params_TypeID = 0x8ebfd50c805adbc3

func NewAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func NewRootAdmin_moveObjects_Params(s *capnp.Segment) (Admin_moveObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Admin_moveObjects_Params{st}, err
}

func ReadRootAdmin_moveObjects_Params(msg *capnp.Message) (Admin_moveObjects_Params, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Params{root.Struct()}, err
}

func (s Admin_moveObjects_Params) String() string {
	str, _ := text.Marshal(0x8ebfd50c805adbc3, s.Struct)
	return str
}

func (s Admin_moveObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Admin_moveObjects_Params) ToCatId() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Admin_moveObjects_Params) HasToCatId() bool {
	return s.Struct.HasPtr(1)
}

func (s Admin_moveObjects_Params) ToCatIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Admin_moveObjects_Params) SetToCatId(v string) error {
	return s.Struct.SetText(1, v)
}

// Admin_moveObjects_Params_List is a list of Admin_moveObjects_Params.
type Admin_moveObjects_Params_List struct{ capnp.List }

// NewAdmin_moveObjects_Params creates a new list of Admin_moveObjects_Params.
func NewAdmin_moveObjects_Params_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Admin_moveObjects_Params_List{l}, err
}

func (s Admin_moveObjects_Params_List) At(i int) Admin_moveObjects_Params {
	return Admin_moveObjects_Params{s.List.Struct(i)}
}

func (s Admin_moveObjects_Params_List) Set(i int, v Admin_moveObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x8ebfd50c805adbc3, s.List)
	return str
}

// Admin_moveObjects_Params_Future is a wrapper for a Admin_moveObjects_Params promised by a client call.
type Admin_moveObjects_Params_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Params_Future) Struct() (Admin_moveObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Params{s}, err
}

type Admin_moveObjects_Results struct{ capnp.Struct }

// Admin_moveObjects_Results_TypeID is the unique identifier for the type Admin_moveObjects_Results.
const Admin_moveObjects_Results_TypeID = 0xd887d79a7ed3f45f

func NewAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func NewRootAdmin_moveObjects_Results(s *capnp.Segment) (Admin_moveObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_moveObjects_Results{st}, err
}

func ReadRootAdmin_moveObjects_Results(msg *capnp.Message) (Admin_moveObjects_Results, error) {
	root, err := msg.Root()
	return Admin_moveObjects_Results{root.Struct()}, err
}

func (s Admin_moveObjects_Results) String() string {
	str, _ := text.Marshal(0xd887d79a7ed3f45f, s.Struct)
	return str
}

func (s Admin_moveObjects_Results) MovedObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_moveObjects_Results) HasMovedObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_moveObjects_Results) SetMovedObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewMovedObjectIds sets the movedObjectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_moveObjects_Results) NewMovedObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_moveObjects_Results_List is a list of Admin_moveObjects_Results.
type Admin_moveObjects_Results_List struct{ capnp.List }

// NewAdmin_moveObjects_Results creates a new list of Admin_moveObjects_Results.
func NewAdmin_moveObjects_Results_List(s *capnp.Segment, sz int32) (Admin_moveObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_moveObjects_Results_List{l}, err
}

func (s Admin_moveObjects_Results_List) At(i int) Admin_moveObjects_Results {
	return Admin_moveObjects_Results{s.List.Struct(i)}
}

func (s Admin_moveObjects_Results_List) Set(i int, v Admin_moveObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_moveObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xd887d79a7ed3f45f, s.List)
	return str
}

// Admin_moveObjects_Results_Future is a wrapper for a Admin_moveObjects_Results promised by a client call.
type Admin_moveObjects_Results_Future struct{ *capnp.Future }

func (p Admin_moveObjects_Results_Future) Struct() (Admin_moveObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_moveObjects_Results{s}, err
}

type Admin_removeObjects_Params struct{ capnp.Struct }

// Admin_removeObjects_Params_TypeID is the unique identifier for the type Admin_removeObjects_Params.
const Admin_removeObjects_Params_TypeID = 0x96a5b17eee7ee1a3

func NewAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func NewRootAdmin_removeObjects_Params(s *capnp.Segment) (Admin_removeObjects_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Params{st}, err
}

func ReadRootAdmin_removeObjects_Params(msg *capnp.Message) (Admin_removeObjects_Params, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Params{root.Struct()}, err
}

func (s Admin_removeObjects_Params) String() string {
	str, _ := text.Marshal(0x96a5b17eee7ee1a3, s.Struct)
	return str
}

func (s Admin_removeObjects_Params) ObjectIds() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Admin_removeObjects_Params) HasObjectIds() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Params) SetObjectIds(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewObjectIds sets the objectIds field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Admin_removeObjects_Params) NewObjectIds(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Params_List is a list of Admin_removeObjects_Params.
type Admin_removeObjects_Params_List struct{ capnp.List }

// NewAdmin_removeObjects_Params creates a new list of Admin_removeObjects_Params.
func NewAdmin_removeObjects_Params_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Params_List{l}, err
}

func (s Admin_removeObjects_Params_List) At(i int) Admin_removeObjects_Params {
	return Admin_removeObjects_Params{s.List.Struct(i)}
}

func (s Admin_removeObjects_Params_List) Set(i int, v Admin_removeObjects_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Params_List) String() string {
	str, _ := text.MarshalList(0x96a5b17eee7ee1a3, s.List)
	return str
}

// Admin_removeObjects_Params_Future is a wrapper for a Admin_removeObjects_Params promised by a client call.
type Admin_removeObjects_Params_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Params_Future) Struct() (Admin_removeObjects_Params, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Params{s}, err
}

type Admin_removeObjects_Results struct{ capnp.Struct }

// Admin_removeObjects_Results_TypeID is the unique identifier for the type Admin_removeObjects_Results.
const Admin_removeObjects_Results_TypeID = 0xa092f60656bb0db4

func NewAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func NewRootAdmin_removeObjects_Results(s *capnp.Segment) (Admin_removeObjects_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_removeObjects_Results{st}, err
}

func ReadRootAdmin_removeObjects_Results(msg *capnp.Message) (Admin_removeObjects_Results, error) {
	root, err := msg.Root()
	return Admin_removeObjects_Results{root.Struct()}, err
}

func (s Admin_removeObjects_Results) String() string {
	str, _ := text.Marshal(0xa092f60656bb0db4, s.Struct)
	return str
}

func (s Admin_removeObjects_Results) RemovedObjects() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.PointerList{List: p.List()}, err
}

func (s Admin_removeObjects_Results) HasRemovedObjects() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_removeObjects_Results) SetRemovedObjects(v capnp.PointerList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRemovedObjects sets the removedObjects field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s Admin_removeObjects_Results) NewRemovedObjects(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Admin_removeObjects_Results_List is a list of Admin_removeObjects_Results.
type Admin_removeObjects_Results_List struct{ capnp.List }

// NewAdmin_removeObjects_Results creates a new list of Admin_removeObjects_Results.
func NewAdmin_removeObjects_Results_List(s *capnp.Segment, sz int32) (Admin_removeObjects_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_removeObjects_Results_List{l}, err
}

func (s Admin_removeObjects_Results_List) At(i int) Admin_removeObjects_Results {
	return Admin_removeObjects_Results{s.List.Struct(i)}
}

func (s Admin_removeObjects_Results_List) Set(i int, v Admin_removeObjects_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_removeObjects_Results_List) String() string {
	str, _ := text.MarshalList(0xa092f60656bb0db4, s.List)
	return str
}

// Admin_removeObjects_Results_Future is a wrapper for a Admin_removeObjects_Results promised by a client call.
type Admin_removeObjects_Results_Future struct{ *capnp.Future }

func (p Admin_removeObjects_Results_Future) Struct() (Admin_removeObjects_Results, error) {
	s, err := p.Future.Struct()
	return Admin_removeObjects_Results{s}, err
}

type Admin_registry_Params struct{ capnp.Struct }

// Admin_registry_Params_TypeID is the unique identifier for the type Admin_registry_Params.
const Admin_registry_Params_TypeID = 0xee2cf8cf148921b5

func NewAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func NewRootAdmin_registry_Params(s *capnp.Segment) (Admin_registry_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Admin_registry_Params{st}, err
}

func ReadRootAdmin_registry_Params(msg *capnp.Message) (Admin_registry_Params, error) {
	root, err := msg.Root()
	return Admin_registry_Params{root.Struct()}, err
}

func (s Admin_registry_Params) String() string {
	str, _ := text.Marshal(0xee2cf8cf148921b5, s.Struct)
	return str
}

// Admin_registry_Params_List is a list of Admin_registry_Params.
type Admin_registry_Params_List struct{ capnp.List }

// NewAdmin_registry_Params creates a new list of Admin_registry_Params.
func NewAdmin_registry_Params_List(s *capnp.Segment, sz int32) (Admin_registry_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Admin_registry_Params_List{l}, err
}

func (s Admin_registry_Params_List) At(i int) Admin_registry_Params {
	return Admin_registry_Params{s.List.Struct(i)}
}

func (s Admin_registry_Params_List) Set(i int, v Admin_registry_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Params_List) String() string {
	str, _ := text.MarshalList(0xee2cf8cf148921b5, s.List)
	return str
}

// Admin_registry_Params_Future is a wrapper for a Admin_registry_Params promised by a client call.
type Admin_registry_Params_Future struct{ *capnp.Future }

func (p Admin_registry_Params_Future) Struct() (Admin_registry_Params, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Params{s}, err
}

type Admin_registry_Results struct{ capnp.Struct }

// Admin_registry_Results_TypeID is the unique identifier for the type Admin_registry_Results.
const Admin_registry_Results_TypeID = 0xfe62caefab7dfdad

func NewAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func NewRootAdmin_registry_Results(s *capnp.Segment) (Admin_registry_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Admin_registry_Results{st}, err
}

func ReadRootAdmin_registry_Results(msg *capnp.Message) (Admin_registry_Results, error) {
	root, err := msg.Root()
	return Admin_registry_Results{root.Struct()}, err
}

func (s Admin_registry_Results) String() string {
	str, _ := text.Marshal(0xfe62caefab7dfdad, s.Struct)
	return str
}

func (s Admin_registry_Results) Registry() Registry {
	p, _ := s.Struct.Ptr(0)
	return Registry{Client: p.Interface().Client()}
}

func (s Admin_registry_Results) HasRegistry() bool {
	return s.Struct.HasPtr(0)
}

func (s Admin_registry_Results) SetRegistry(v Registry) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Admin_registry_Results_List is a list of Admin_registry_Results.
type Admin_registry_Results_List struct{ capnp.List }

// NewAdmin_registry_Results creates a new list of Admin_registry_Results.
func NewAdmin_registry_Results_List(s *capnp.Segment, sz int32) (Admin_registry_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Admin_registry_Results_List{l}, err
}

func (s Admin_registry_Results_List) At(i int) Admin_registry_Results {
	return Admin_registry_Results{s.List.Struct(i)}
}

func (s Admin_registry_Results_List) Set(i int, v Admin_registry_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Admin_registry_Results_List) String() string {
	str, _ := text.MarshalList(0xfe62caefab7dfdad, s.List)
	return str
}

// Admin_registry_Results_Future is a wrapper for a Admin_registry_Results promised by a client call.
type Admin_registry_Results_Future struct{ *capnp.Future }

func (p Admin_registry_Results_Future) Struct() (Admin_registry_Results, error) {
	s, err := p.Future.Struct()
	return Admin_registry_Results{s}, err
}

func (p Admin_registry_Results_Future) Registry() Registry {
	return Registry{Client: p.Future.Field(0, nil).Client()}
}

type Registry struct{ Client *capnp.Client }

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xca7b4bd1600633b8

func (c Registry) SupportedCategories(ctx context.Context, params func(Registry_supportedCategories_Params) error) (Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c Registry) CategoryInfo(ctx context.Context, params func(Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Registry) Entries(ctx context.Context, params func(Registry_entries_Params) error) (Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c Registry) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registry) AddRef() Registry {
	return Registry{
		Client: c.Client.AddRef(),
	}
}

func (c Registry) Release() {
	c.Client.Release()
}

// A Registry_Server is a Registry with a local implementation.
type Registry_Server interface {
	SupportedCategories(context.Context, Registry_supportedCategories) error

	CategoryInfo(context.Context, Registry_categoryInfo) error

	Entries(context.Context, Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Registry_NewServer creates a new Server from an implementation of Registry_Server.
func Registry_NewServer(s Registry_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registry_Methods(nil, s), s, c, policy)
}

// Registry_ServerToClient creates a new Client from an implementation of Registry_Server.
// The caller is responsible for calling Release on the returned Client.
func Registry_ServerToClient(s Registry_Server, policy *server.Policy) Registry {
	return Registry{Client: capnp.NewClient(Registry_NewServer(s, policy))}
}

// Registry_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registry_Methods(methods []server.Method, s Registry_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registry_supportedCategories holds the state for a server call to Registry.supportedCategories.
// See server.Call for documentation.
type Registry_supportedCategories struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_supportedCategories) Args() Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_supportedCategories) AllocResults() (Registry_supportedCategories_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{Struct: r}, err
}

// Registry_categoryInfo holds the state for a server call to Registry.categoryInfo.
// See server.Call for documentation.
type Registry_categoryInfo struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_categoryInfo) Args() Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_categoryInfo) AllocResults() (common.IdInformation, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return common.IdInformation{Struct: r}, err
}

// Registry_entries holds the state for a server call to Registry.entries.
// See server.Call for documentation.
type Registry_entries struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registry_entries) Args() Registry_entries_Params {
	return Registry_entries_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registry_entries) AllocResults() (Registry_entries_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{Struct: r}, err
}

type Registry_Entry struct{ capnp.Struct }

// Registry_Entry_TypeID is the unique identifier for the type Registry_Entry.
const Registry_Entry_TypeID = 0xc17987510cf7ac13

func NewRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func NewRootRegistry_Entry(s *capnp.Segment) (Registry_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Registry_Entry{st}, err
}

func ReadRootRegistry_Entry(msg *capnp.Message) (Registry_Entry, error) {
	root, err := msg.Root()
	return Registry_Entry{root.Struct()}, err
}

func (s Registry_Entry) String() string {
	str, _ := text.Marshal(0xc17987510cf7ac13, s.Struct)
	return str
}

func (s Registry_Entry) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_Entry) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_Entry) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Registry_Entry) Ref() common.Identifiable {
	p, _ := s.Struct.Ptr(1)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registry_Entry) HasRef() bool {
	return s.Struct.HasPtr(1)
}

func (s Registry_Entry) SetRef(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

func (s Registry_Entry) Name() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registry_Entry) HasName() bool {
	return s.Struct.HasPtr(2)
}

func (s Registry_Entry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registry_Entry) SetName(v string) error {
	return s.Struct.SetText(2, v)
}

// Registry_Entry_List is a list of Registry_Entry.
type Registry_Entry_List struct{ capnp.List }

// NewRegistry_Entry creates a new list of Registry_Entry.
func NewRegistry_Entry_List(s *capnp.Segment, sz int32) (Registry_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Registry_Entry_List{l}, err
}

func (s Registry_Entry_List) At(i int) Registry_Entry { return Registry_Entry{s.List.Struct(i)} }

func (s Registry_Entry_List) Set(i int, v Registry_Entry) error { return s.List.SetStruct(i, v.Struct) }

func (s Registry_Entry_List) String() string {
	str, _ := text.MarshalList(0xc17987510cf7ac13, s.List)
	return str
}

// Registry_Entry_Future is a wrapper for a Registry_Entry promised by a client call.
type Registry_Entry_Future struct{ *capnp.Future }

func (p Registry_Entry_Future) Struct() (Registry_Entry, error) {
	s, err := p.Future.Struct()
	return Registry_Entry{s}, err
}

func (p Registry_Entry_Future) Ref() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(1, nil).Client()}
}

type Registry_supportedCategories_Params struct{ capnp.Struct }

// Registry_supportedCategories_Params_TypeID is the unique identifier for the type Registry_supportedCategories_Params.
const Registry_supportedCategories_Params_TypeID = 0x9c49e6e65e34c29b

func NewRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func NewRootRegistry_supportedCategories_Params(s *capnp.Segment) (Registry_supportedCategories_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registry_supportedCategories_Params{st}, err
}

func ReadRootRegistry_supportedCategories_Params(msg *capnp.Message) (Registry_supportedCategories_Params, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Params{root.Struct()}, err
}

func (s Registry_supportedCategories_Params) String() string {
	str, _ := text.Marshal(0x9c49e6e65e34c29b, s.Struct)
	return str
}

// Registry_supportedCategories_Params_List is a list of Registry_supportedCategories_Params.
type Registry_supportedCategories_Params_List struct{ capnp.List }

// NewRegistry_supportedCategories_Params creates a new list of Registry_supportedCategories_Params.
func NewRegistry_supportedCategories_Params_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Registry_supportedCategories_Params_List{l}, err
}

func (s Registry_supportedCategories_Params_List) At(i int) Registry_supportedCategories_Params {
	return Registry_supportedCategories_Params{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Params_List) Set(i int, v Registry_supportedCategories_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Params_List) String() string {
	str, _ := text.MarshalList(0x9c49e6e65e34c29b, s.List)
	return str
}

// Registry_supportedCategories_Params_Future is a wrapper for a Registry_supportedCategories_Params promised by a client call.
type Registry_supportedCategories_Params_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Params_Future) Struct() (Registry_supportedCategories_Params, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Params{s}, err
}

type Registry_supportedCategories_Results struct{ capnp.Struct }

// Registry_supportedCategories_Results_TypeID is the unique identifier for the type Registry_supportedCategories_Results.
const Registry_supportedCategories_Results_TypeID = 0xb2bf60b5817330b0

func NewRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func NewRootRegistry_supportedCategories_Results(s *capnp.Segment) (Registry_supportedCategories_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_supportedCategories_Results{st}, err
}

func ReadRootRegistry_supportedCategories_Results(msg *capnp.Message) (Registry_supportedCategories_Results, error) {
	root, err := msg.Root()
	return Registry_supportedCategories_Results{root.Struct()}, err
}

func (s Registry_supportedCategories_Results) String() string {
	str, _ := text.Marshal(0xb2bf60b5817330b0, s.Struct)
	return str
}

func (s Registry_supportedCategories_Results) Cats() (common.IdInformation_List, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation_List{List: p.List()}, err
}

func (s Registry_supportedCategories_Results) HasCats() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_supportedCategories_Results) SetCats(v common.IdInformation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCats sets the cats field to a newly
// allocated common.IdInformation_List, preferring placement in s's segment.
func (s Registry_supportedCategories_Results) NewCats(n int32) (common.IdInformation_List, error) {
	l, err := common.NewIdInformation_List(s.Struct.Segment(), n)
	if err != nil {
		return common.IdInformation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_supportedCategories_Results_List is a list of Registry_supportedCategories_Results.
type Registry_supportedCategories_Results_List struct{ capnp.List }

// NewRegistry_supportedCategories_Results creates a new list of Registry_supportedCategories_Results.
func NewRegistry_supportedCategories_Results_List(s *capnp.Segment, sz int32) (Registry_supportedCategories_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_supportedCategories_Results_List{l}, err
}

func (s Registry_supportedCategories_Results_List) At(i int) Registry_supportedCategories_Results {
	return Registry_supportedCategories_Results{s.List.Struct(i)}
}

func (s Registry_supportedCategories_Results_List) Set(i int, v Registry_supportedCategories_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_supportedCategories_Results_List) String() string {
	str, _ := text.MarshalList(0xb2bf60b5817330b0, s.List)
	return str
}

// Registry_supportedCategories_Results_Future is a wrapper for a Registry_supportedCategories_Results promised by a client call.
type Registry_supportedCategories_Results_Future struct{ *capnp.Future }

func (p Registry_supportedCategories_Results_Future) Struct() (Registry_supportedCategories_Results, error) {
	s, err := p.Future.Struct()
	return Registry_supportedCategories_Results{s}, err
}

type Registry_categoryInfo_Params struct{ capnp.Struct }

// Registry_categoryInfo_Params_TypeID is the unique identifier for the type Registry_categoryInfo_Params.
const Registry_categoryInfo_Params_TypeID = 0x891283e1b248bc9d

func NewRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func NewRootRegistry_categoryInfo_Params(s *capnp.Segment) (Registry_categoryInfo_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_categoryInfo_Params{st}, err
}

func ReadRootRegistry_categoryInfo_Params(msg *capnp.Message) (Registry_categoryInfo_Params, error) {
	root, err := msg.Root()
	return Registry_categoryInfo_Params{root.Struct()}, err
}

func (s Registry_categoryInfo_Params) String() string {
	str, _ := text.Marshal(0x891283e1b248bc9d, s.Struct)
	return str
}

func (s Registry_categoryInfo_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_categoryInfo_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_categoryInfo_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_categoryInfo_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_categoryInfo_Params_List is a list of Registry_categoryInfo_Params.
type Registry_categoryInfo_Params_List struct{ capnp.List }

// NewRegistry_categoryInfo_Params creates a new list of Registry_categoryInfo_Params.
func NewRegistry_categoryInfo_Params_List(s *capnp.Segment, sz int32) (Registry_categoryInfo_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_categoryInfo_Params_List{l}, err
}

func (s Registry_categoryInfo_Params_List) At(i int) Registry_categoryInfo_Params {
	return Registry_categoryInfo_Params{s.List.Struct(i)}
}

func (s Registry_categoryInfo_Params_List) Set(i int, v Registry_categoryInfo_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_categoryInfo_Params_List) String() string {
	str, _ := text.MarshalList(0x891283e1b248bc9d, s.List)
	return str
}

// Registry_categoryInfo_Params_Future is a wrapper for a Registry_categoryInfo_Params promised by a client call.
type Registry_categoryInfo_Params_Future struct{ *capnp.Future }

func (p Registry_categoryInfo_Params_Future) Struct() (Registry_categoryInfo_Params, error) {
	s, err := p.Future.Struct()
	return Registry_categoryInfo_Params{s}, err
}

type Registry_entries_Params struct{ capnp.Struct }

// Registry_entries_Params_TypeID is the unique identifier for the type Registry_entries_Params.
const Registry_entries_Params_TypeID = 0x9ffc53716151c5fa

func NewRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func NewRootRegistry_entries_Params(s *capnp.Segment) (Registry_entries_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Params{st}, err
}

func ReadRootRegistry_entries_Params(msg *capnp.Message) (Registry_entries_Params, error) {
	root, err := msg.Root()
	return Registry_entries_Params{root.Struct()}, err
}

func (s Registry_entries_Params) String() string {
	str, _ := text.Marshal(0x9ffc53716151c5fa, s.Struct)
	return str
}

func (s Registry_entries_Params) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Registry_entries_Params) HasCategoryId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Params) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Registry_entries_Params) SetCategoryId(v string) error {
	return s.Struct.SetText(0, v)
}

// Registry_entries_Params_List is a list of Registry_entries_Params.
type Registry_entries_Params_List struct{ capnp.List }

// NewRegistry_entries_Params creates a new list of Registry_entries_Params.
func NewRegistry_entries_Params_List(s *capnp.Segment, sz int32) (Registry_entries_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Params_List{l}, err
}

func (s Registry_entries_Params_List) At(i int) Registry_entries_Params {
	return Registry_entries_Params{s.List.Struct(i)}
}

func (s Registry_entries_Params_List) Set(i int, v Registry_entries_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Params_List) String() string {
	str, _ := text.MarshalList(0x9ffc53716151c5fa, s.List)
	return str
}

// Registry_entries_Params_Future is a wrapper for a Registry_entries_Params promised by a client call.
type Registry_entries_Params_Future struct{ *capnp.Future }

func (p Registry_entries_Params_Future) Struct() (Registry_entries_Params, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Params{s}, err
}

type Registry_entries_Results struct{ capnp.Struct }

// Registry_entries_Results_TypeID is the unique identifier for the type Registry_entries_Results.
const Registry_entries_Results_TypeID = 0xe4eaf56eb486064d

func NewRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func NewRootRegistry_entries_Results(s *capnp.Segment) (Registry_entries_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry_entries_Results{st}, err
}

func ReadRootRegistry_entries_Results(msg *capnp.Message) (Registry_entries_Results, error) {
	root, err := msg.Root()
	return Registry_entries_Results{root.Struct()}, err
}

func (s Registry_entries_Results) String() string {
	str, _ := text.Marshal(0xe4eaf56eb486064d, s.Struct)
	return str
}

func (s Registry_entries_Results) Entries() (Registry_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Registry_Entry_List{List: p.List()}, err
}

func (s Registry_entries_Results) HasEntries() bool {
	return s.Struct.HasPtr(0)
}

func (s Registry_entries_Results) SetEntries(v Registry_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Registry_Entry_List, preferring placement in s's segment.
func (s Registry_entries_Results) NewEntries(n int32) (Registry_Entry_List, error) {
	l, err := NewRegistry_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Registry_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Registry_entries_Results_List is a list of Registry_entries_Results.
type Registry_entries_Results_List struct{ capnp.List }

// NewRegistry_entries_Results creates a new list of Registry_entries_Results.
func NewRegistry_entries_Results_List(s *capnp.Segment, sz int32) (Registry_entries_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Registry_entries_Results_List{l}, err
}

func (s Registry_entries_Results_List) At(i int) Registry_entries_Results {
	return Registry_entries_Results{s.List.Struct(i)}
}

func (s Registry_entries_Results_List) Set(i int, v Registry_entries_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registry_entries_Results_List) String() string {
	str, _ := text.MarshalList(0xe4eaf56eb486064d, s.List)
	return str
}

// Registry_entries_Results_Future is a wrapper for a Registry_entries_Results promised by a client call.
type Registry_entries_Results_Future struct{ *capnp.Future }

func (p Registry_entries_Results_Future) Struct() (Registry_entries_Results, error) {
	s, err := p.Future.Struct()
	return Registry_entries_Results{s}, err
}

type Registrar struct{ Client *capnp.Client }

// Registrar_TypeID is the unique identifier for the type Registrar.
const Registrar_TypeID = 0xabaef93c36f2d1ea

func (c Registrar) Register(ctx context.Context, params func(Registrar_RegParams) error) (Registrar_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 4}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_RegParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registrar_register_Results_Future{Future: ans.Future()}, release
}
func (c Registrar) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Registrar) AddRef() Registrar {
	return Registrar{
		Client: c.Client.AddRef(),
	}
}

func (c Registrar) Release() {
	c.Client.Release()
}

// A Registrar_Server is a Registrar with a local implementation.
type Registrar_Server interface {
	Register(context.Context, Registrar_register) error

	Info(context.Context, common.Identifiable_info) error
}

// Registrar_NewServer creates a new Server from an implementation of Registrar_Server.
func Registrar_NewServer(s Registrar_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Methods(nil, s), s, c, policy)
}

// Registrar_ServerToClient creates a new Client from an implementation of Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_ServerToClient(s Registrar_Server, policy *server.Policy) Registrar {
	return Registrar{Client: capnp.NewClient(Registrar_NewServer(s, policy))}
}

// Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Methods(methods []server.Method, s Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xabaef93c36f2d1ea,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Registrar_register{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Registrar_register holds the state for a server call to Registrar.register.
// See server.Call for documentation.
type Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_register) Args() Registrar_RegParams {
	return Registrar_RegParams{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registrar_register) AllocResults() (Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{Struct: r}, err
}

type Registrar_CrossDomainRestore struct{ capnp.Struct }

// Registrar_CrossDomainRestore_TypeID is the unique identifier for the type Registrar_CrossDomainRestore.
const Registrar_CrossDomainRestore_TypeID = 0xaa1198dd7e71b20e

func NewRegistrar_CrossDomainRestore(s *capnp.Segment) (Registrar_CrossDomainRestore, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_CrossDomainRestore{st}, err
}

func NewRootRegistrar_CrossDomainRestore(s *capnp.Segment) (Registrar_CrossDomainRestore, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_CrossDomainRestore{st}, err
}

func ReadRootRegistrar_CrossDomainRestore(msg *capnp.Message) (Registrar_CrossDomainRestore, error) {
	root, err := msg.Root()
	return Registrar_CrossDomainRestore{root.Struct()}, err
}

func (s Registrar_CrossDomainRestore) String() string {
	str, _ := text.Marshal(0xaa1198dd7e71b20e, s.Struct)
	return str
}

func (s Registrar_CrossDomainRestore) VatId() (persistence.VatId, error) {
	p, err := s.Struct.Ptr(0)
	return persistence.VatId{Struct: p.Struct()}, err
}

func (s Registrar_CrossDomainRestore) HasVatId() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_CrossDomainRestore) SetVatId(v persistence.VatId) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewVatId sets the vatId field to a newly
// allocated persistence.VatId struct, preferring placement in s's segment.
func (s Registrar_CrossDomainRestore) NewVatId() (persistence.VatId, error) {
	ss, err := persistence.NewVatId(s.Struct.Segment())
	if err != nil {
		return persistence.VatId{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Registrar_CrossDomainRestore) Restorer() persistence.Restorer {
	p, _ := s.Struct.Ptr(1)
	return persistence.Restorer{Client: p.Interface().Client()}
}

func (s Registrar_CrossDomainRestore) HasRestorer() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_CrossDomainRestore) SetRestorer(v persistence.Restorer) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(1, in.ToPtr())
}

// Registrar_CrossDomainRestore_List is a list of Registrar_CrossDomainRestore.
type Registrar_CrossDomainRestore_List struct{ capnp.List }

// NewRegistrar_CrossDomainRestore creates a new list of Registrar_CrossDomainRestore.
func NewRegistrar_CrossDomainRestore_List(s *capnp.Segment, sz int32) (Registrar_CrossDomainRestore_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Registrar_CrossDomainRestore_List{l}, err
}

func (s Registrar_CrossDomainRestore_List) At(i int) Registrar_CrossDomainRestore {
	return Registrar_CrossDomainRestore{s.List.Struct(i)}
}

func (s Registrar_CrossDomainRestore_List) Set(i int, v Registrar_CrossDomainRestore) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_CrossDomainRestore_List) String() string {
	str, _ := text.MarshalList(0xaa1198dd7e71b20e, s.List)
	return str
}

// Registrar_CrossDomainRestore_Future is a wrapper for a Registrar_CrossDomainRestore promised by a client call.
type Registrar_CrossDomainRestore_Future struct{ *capnp.Future }

func (p Registrar_CrossDomainRestore_Future) Struct() (Registrar_CrossDomainRestore, error) {
	s, err := p.Future.Struct()
	return Registrar_CrossDomainRestore{s}, err
}

func (p Registrar_CrossDomainRestore_Future) VatId() persistence.VatId_Future {
	return persistence.VatId_Future{Future: p.Future.Field(0, nil)}
}

func (p Registrar_CrossDomainRestore_Future) Restorer() persistence.Restorer {
	return persistence.Restorer{Client: p.Future.Field(1, nil).Client()}
}

type Registrar_RegParams struct{ capnp.Struct }

// Registrar_RegParams_TypeID is the unique identifier for the type Registrar_RegParams.
const Registrar_RegParams_TypeID = 0xe5a84717ea75fb0d

func NewRegistrar_RegParams(s *capnp.Segment) (Registrar_RegParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Registrar_RegParams{st}, err
}

func NewRootRegistrar_RegParams(s *capnp.Segment) (Registrar_RegParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Registrar_RegParams{st}, err
}

func ReadRootRegistrar_RegParams(msg *capnp.Message) (Registrar_RegParams, error) {
	root, err := msg.Root()
	return Registrar_RegParams{root.Struct()}, err
}

func (s Registrar_RegParams) String() string {
	str, _ := text.Marshal(0xe5a84717ea75fb0d, s.Struct)
	return str
}

func (s Registrar_RegParams) Cap() common.Identifiable {
	p, _ := s.Struct.Ptr(0)
	return common.Identifiable{Client: p.Interface().Client()}
}

func (s Registrar_RegParams) HasCap() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_RegParams) SetCap(v common.Identifiable) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_RegParams) RegName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s Registrar_RegParams) HasRegName() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_RegParams) RegNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s Registrar_RegParams) SetRegName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s Registrar_RegParams) CategoryId() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Registrar_RegParams) HasCategoryId() bool {
	return s.Struct.HasPtr(2)
}

func (s Registrar_RegParams) CategoryIdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Registrar_RegParams) SetCategoryId(v string) error {
	return s.Struct.SetText(2, v)
}

func (s Registrar_RegParams) XDomain() (Registrar_CrossDomainRestore, error) {
	p, err := s.Struct.Ptr(3)
	return Registrar_CrossDomainRestore{Struct: p.Struct()}, err
}

func (s Registrar_RegParams) HasXDomain() bool {
	return s.Struct.HasPtr(3)
}

func (s Registrar_RegParams) SetXDomain(v Registrar_CrossDomainRestore) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewXDomain sets the xDomain field to a newly
// allocated Registrar_CrossDomainRestore struct, preferring placement in s's segment.
func (s Registrar_RegParams) NewXDomain() (Registrar_CrossDomainRestore, error) {
	ss, err := NewRegistrar_CrossDomainRestore(s.Struct.Segment())
	if err != nil {
		return Registrar_CrossDomainRestore{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// Registrar_RegParams_List is a list of Registrar_RegParams.
type Registrar_RegParams_List struct{ capnp.List }

// NewRegistrar_RegParams creates a new list of Registrar_RegParams.
func NewRegistrar_RegParams_List(s *capnp.Segment, sz int32) (Registrar_RegParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Registrar_RegParams_List{l}, err
}

func (s Registrar_RegParams_List) At(i int) Registrar_RegParams {
	return Registrar_RegParams{s.List.Struct(i)}
}

func (s Registrar_RegParams_List) Set(i int, v Registrar_RegParams) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_RegParams_List) String() string {
	str, _ := text.MarshalList(0xe5a84717ea75fb0d, s.List)
	return str
}

// Registrar_RegParams_Future is a wrapper for a Registrar_RegParams promised by a client call.
type Registrar_RegParams_Future struct{ *capnp.Future }

func (p Registrar_RegParams_Future) Struct() (Registrar_RegParams, error) {
	s, err := p.Future.Struct()
	return Registrar_RegParams{s}, err
}

func (p Registrar_RegParams_Future) Cap() common.Identifiable {
	return common.Identifiable{Client: p.Future.Field(0, nil).Client()}
}

func (p Registrar_RegParams_Future) XDomain() Registrar_CrossDomainRestore_Future {
	return Registrar_CrossDomainRestore_Future{Future: p.Future.Field(3, nil)}
}

type Registrar_Unregister struct{ Client *capnp.Client }

// Registrar_Unregister_TypeID is the unique identifier for the type Registrar_Unregister.
const Registrar_Unregister_TypeID = 0xc7597e4462528489

func (c Registrar_Unregister) Unregister(ctx context.Context, params func(Registrar_Unregister_unregister_Params) error) (Registrar_Unregister_unregister_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc7597e4462528489,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar.Unregister",
			MethodName:    "unregister",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Registrar_Unregister_unregister_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Registrar_Unregister_unregister_Results_Future{Future: ans.Future()}, release
}

func (c Registrar_Unregister) AddRef() Registrar_Unregister {
	return Registrar_Unregister{
		Client: c.Client.AddRef(),
	}
}

func (c Registrar_Unregister) Release() {
	c.Client.Release()
}

// A Registrar_Unregister_Server is a Registrar_Unregister with a local implementation.
type Registrar_Unregister_Server interface {
	Unregister(context.Context, Registrar_Unregister_unregister) error
}

// Registrar_Unregister_NewServer creates a new Server from an implementation of Registrar_Unregister_Server.
func Registrar_Unregister_NewServer(s Registrar_Unregister_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Registrar_Unregister_Methods(nil, s), s, c, policy)
}

// Registrar_Unregister_ServerToClient creates a new Client from an implementation of Registrar_Unregister_Server.
// The caller is responsible for calling Release on the returned Client.
func Registrar_Unregister_ServerToClient(s Registrar_Unregister_Server, policy *server.Policy) Registrar_Unregister {
	return Registrar_Unregister{Client: capnp.NewClient(Registrar_Unregister_NewServer(s, policy))}
}

// Registrar_Unregister_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Registrar_Unregister_Methods(methods []server.Method, s Registrar_Unregister_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc7597e4462528489,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registrar.Unregister",
			MethodName:    "unregister",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unregister(ctx, Registrar_Unregister_unregister{call})
		},
	})

	return methods
}

// Registrar_Unregister_unregister holds the state for a server call to Registrar_Unregister.unregister.
// See server.Call for documentation.
type Registrar_Unregister_unregister struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Registrar_Unregister_unregister) Args() Registrar_Unregister_unregister_Params {
	return Registrar_Unregister_unregister_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Registrar_Unregister_unregister) AllocResults() (Registrar_Unregister_unregister_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_Unregister_unregister_Results{Struct: r}, err
}

type Registrar_Unregister_unregister_Params struct{ capnp.Struct }

// Registrar_Unregister_unregister_Params_TypeID is the unique identifier for the type Registrar_Unregister_unregister_Params.
const Registrar_Unregister_unregister_Params_TypeID = 0xd023a1df5e372a7e

func NewRegistrar_Unregister_unregister_Params(s *capnp.Segment) (Registrar_Unregister_unregister_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_Unregister_unregister_Params{st}, err
}

func NewRootRegistrar_Unregister_unregister_Params(s *capnp.Segment) (Registrar_Unregister_unregister_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Registrar_Unregister_unregister_Params{st}, err
}

func ReadRootRegistrar_Unregister_unregister_Params(msg *capnp.Message) (Registrar_Unregister_unregister_Params, error) {
	root, err := msg.Root()
	return Registrar_Unregister_unregister_Params{root.Struct()}, err
}

func (s Registrar_Unregister_unregister_Params) String() string {
	str, _ := text.Marshal(0xd023a1df5e372a7e, s.Struct)
	return str
}

// Registrar_Unregister_unregister_Params_List is a list of Registrar_Unregister_unregister_Params.
type Registrar_Unregister_unregister_Params_List struct{ capnp.List }

// NewRegistrar_Unregister_unregister_Params creates a new list of Registrar_Unregister_unregister_Params.
func NewRegistrar_Unregister_unregister_Params_List(s *capnp.Segment, sz int32) (Registrar_Unregister_unregister_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Registrar_Unregister_unregister_Params_List{l}, err
}

func (s Registrar_Unregister_unregister_Params_List) At(i int) Registrar_Unregister_unregister_Params {
	return Registrar_Unregister_unregister_Params{s.List.Struct(i)}
}

func (s Registrar_Unregister_unregister_Params_List) Set(i int, v Registrar_Unregister_unregister_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_Unregister_unregister_Params_List) String() string {
	str, _ := text.MarshalList(0xd023a1df5e372a7e, s.List)
	return str
}

// Registrar_Unregister_unregister_Params_Future is a wrapper for a Registrar_Unregister_unregister_Params promised by a client call.
type Registrar_Unregister_unregister_Params_Future struct{ *capnp.Future }

func (p Registrar_Unregister_unregister_Params_Future) Struct() (Registrar_Unregister_unregister_Params, error) {
	s, err := p.Future.Struct()
	return Registrar_Unregister_unregister_Params{s}, err
}

type Registrar_Unregister_unregister_Results struct{ capnp.Struct }

// Registrar_Unregister_unregister_Results_TypeID is the unique identifier for the type Registrar_Unregister_unregister_Results.
const Registrar_Unregister_unregister_Results_TypeID = 0xa19166b9981b0854

func NewRegistrar_Unregister_unregister_Results(s *capnp.Segment) (Registrar_Unregister_unregister_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_Unregister_unregister_Results{st}, err
}

func NewRootRegistrar_Unregister_unregister_Results(s *capnp.Segment) (Registrar_Unregister_unregister_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Registrar_Unregister_unregister_Results{st}, err
}

func ReadRootRegistrar_Unregister_unregister_Results(msg *capnp.Message) (Registrar_Unregister_unregister_Results, error) {
	root, err := msg.Root()
	return Registrar_Unregister_unregister_Results{root.Struct()}, err
}

func (s Registrar_Unregister_unregister_Results) String() string {
	str, _ := text.Marshal(0xa19166b9981b0854, s.Struct)
	return str
}

func (s Registrar_Unregister_unregister_Results) Success() bool {
	return s.Struct.Bit(0)
}

func (s Registrar_Unregister_unregister_Results) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// Registrar_Unregister_unregister_Results_List is a list of Registrar_Unregister_unregister_Results.
type Registrar_Unregister_unregister_Results_List struct{ capnp.List }

// NewRegistrar_Unregister_unregister_Results creates a new list of Registrar_Unregister_unregister_Results.
func NewRegistrar_Unregister_unregister_Results_List(s *capnp.Segment, sz int32) (Registrar_Unregister_unregister_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Registrar_Unregister_unregister_Results_List{l}, err
}

func (s Registrar_Unregister_unregister_Results_List) At(i int) Registrar_Unregister_unregister_Results {
	return Registrar_Unregister_unregister_Results{s.List.Struct(i)}
}

func (s Registrar_Unregister_unregister_Results_List) Set(i int, v Registrar_Unregister_unregister_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_Unregister_unregister_Results_List) String() string {
	str, _ := text.MarshalList(0xa19166b9981b0854, s.List)
	return str
}

// Registrar_Unregister_unregister_Results_Future is a wrapper for a Registrar_Unregister_unregister_Results promised by a client call.
type Registrar_Unregister_unregister_Results_Future struct{ *capnp.Future }

func (p Registrar_Unregister_unregister_Results_Future) Struct() (Registrar_Unregister_unregister_Results, error) {
	s, err := p.Future.Struct()
	return Registrar_Unregister_unregister_Results{s}, err
}

type Registrar_register_Results struct{ capnp.Struct }

// Registrar_register_Results_TypeID is the unique identifier for the type Registrar_register_Results.
const Registrar_register_Results_TypeID = 0xb2a9b080f0c4013c

func NewRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func NewRootRegistrar_register_Results(s *capnp.Segment) (Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Registrar_register_Results{st}, err
}

func ReadRootRegistrar_register_Results(msg *capnp.Message) (Registrar_register_Results, error) {
	root, err := msg.Root()
	return Registrar_register_Results{root.Struct()}, err
}

func (s Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xb2a9b080f0c4013c, s.Struct)
	return str
}

func (s Registrar_register_Results) Unreg() Registrar_Unregister {
	p, _ := s.Struct.Ptr(0)
	return Registrar_Unregister{Client: p.Interface().Client()}
}

func (s Registrar_register_Results) HasUnreg() bool {
	return s.Struct.HasPtr(0)
}

func (s Registrar_register_Results) SetUnreg(v Registrar_Unregister) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Registrar_register_Results) ReregSR() (persistence.SturdyRef, error) {
	p, err := s.Struct.Ptr(1)
	return persistence.SturdyRef{Struct: p.Struct()}, err
}

func (s Registrar_register_Results) HasReregSR() bool {
	return s.Struct.HasPtr(1)
}

func (s Registrar_register_Results) SetReregSR(v persistence.SturdyRef) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewReregSR sets the reregSR field to a newly
// allocated persistence.SturdyRef struct, preferring placement in s's segment.
func (s Registrar_register_Results) NewReregSR() (persistence.SturdyRef, error) {
	ss, err := persistence.NewSturdyRef(s.Struct.Segment())
	if err != nil {
		return persistence.SturdyRef{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Registrar_register_Results_List is a list of Registrar_register_Results.
type Registrar_register_Results_List struct{ capnp.List }

// NewRegistrar_register_Results creates a new list of Registrar_register_Results.
func NewRegistrar_register_Results_List(s *capnp.Segment, sz int32) (Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Registrar_register_Results_List{l}, err
}

func (s Registrar_register_Results_List) At(i int) Registrar_register_Results {
	return Registrar_register_Results{s.List.Struct(i)}
}

func (s Registrar_register_Results_List) Set(i int, v Registrar_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Registrar_register_Results_List) String() string {
	str, _ := text.MarshalList(0xb2a9b080f0c4013c, s.List)
	return str
}

// Registrar_register_Results_Future is a wrapper for a Registrar_register_Results promised by a client call.
type Registrar_register_Results_Future struct{ *capnp.Future }

func (p Registrar_register_Results_Future) Struct() (Registrar_register_Results, error) {
	s, err := p.Future.Struct()
	return Registrar_register_Results{s}, err
}

func (p Registrar_register_Results_Future) Unreg() Registrar_Unregister {
	return Registrar_Unregister{Client: p.Future.Field(0, nil).Client()}
}

func (p Registrar_register_Results_Future) ReregSR() persistence.SturdyRef_Future {
	return persistence.SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

const schema_fe1be0c39c7e8269 = "x\xda\xacWml[W\x19~\xdf{\xec\\\xdb\xb1" +
	"c\x1fnBW*\x14e\xb3\xb4\xadZ\xb2~\x8d\xb1" +
	"*\xc8N\x93)\x1f\x905\xc7k\x81Fl\xf4\xda\xb9" +
	"I]\xc5vr\xefuY\x8a\xea\x14\xdanD\x88\xa1" +
	"\"\x81\xa6R42\x14\x89\xec\x83-\xd1\x86\xf8\xd8\x98" +
	"\xd61Mj\x7f@\xb4\x05\x18\xd3\x06\x91\xe8\x10\xfdQ" +
	"hK\x0b\xa5\xb4w:\xf7\xfa~\xc4\x8e\xd3V\xea?" +
	"'\xf79\xef9\xcfs\x9e\xf7\xe3l\xf0\xfb\x93\xc2F" +
	"\xff\xbd1\x00\xf6\xaa\xbf\xce\xf8\xd1\xab=\xf3K\x87>" +
	"1\x05\xf46\x04\xf0\xa3\x08\xb0\xf9\xaa\x98F@)\x18" +
	"H\x00\x1ao\xbe?x0\xbc\xf8\xfa\x93@\x9b8@" +
	"\xe0\x80\xd6\xc06\x0e\xb8/\xf05@\xe3'K\xa5\xb3" +
	"\xa5\xb9\x99\x1f\x94\x01f\x84\x99@\x8a\x03\xe6\xcc\x08?" +
	"<\xb1\xe5\xd1\x8f>\xea=nm\xe1\xe3\xdfO\x07\x8e" +
	"!\xf8\x8c\xff\xbd\xc5\xe4\xf1\x87\xff\xff\xb4w\xf3\xc5\xc0" +
	"V\xbe\xf4\x03s\xe9\xcb\x91_\x7f\xb1\xee\xd2\xf7~\xec" +
	"\x8d\x8d\xc1A\x0e\x88\x049`G`\xddS\xbf\x1c>" +
	":\x0d,\x8ev\xf0\x8e\xe0\xaf8\x80\x99\x00\xffwG" +
	"cd\xfa\xf9Yo\x84\xf1\xa0\xc9\xef\x80\x09h\x98\x1f" +
	"/}\xf0\x14}\x16\xe8Z4\xce,\x9c\xffL\xfb\xe5" +
	"\x9f=W\xe69\x17L\xa3\xf4VP\x04\x90\xde\x08r" +
	"\xae\xcew\x1a%F\xf6\x9b\xa5\xe3o\xfeu\xdd5\x00" +
	"\x94ZB'\xa5\xd6\xd0\xfd\x00\xd2#\xa1ni*\xb4" +
	"\x06\xc0h\xc7\xdf\xfe\xeb\xe0K\xb3\xf3<\xb2\xad\xdcD" +
	"\xc8\x14\xe6H\x88G{i\x83\xf6\x8dWv\xbf>\xef" +
	"\xa5\xbf\x14z\x86\x03\xce\x85\xf8\xd9^\xb9O\xdd\x7f\xef" +
	"\xa1\xcf\xbd\x06\xac\xc9a\xd7R\xdf\xc7\x01\xad\xf5\x1c " +
	"=\xff\x9f0{b\xe2\x0d\x1e\xc1\xf8\xc5\xe6\xba\xdd\x0b" +
	"\x9f\xff\xfaI\xf0\x13~\xe2\xfe\xfa\xf3\xd2\xaez\xfek" +
	"g\xfd\x8b\x80\xc6\xd4\xe1T\xba\xab\xb4\xebm\xa0k\x89" +
	"K\x04p\xf3\xb9\xfa\xdbQ\xc20G^\xad\xef\x96\xee" +
	"\xe6\xbf\xdc`\x95Li\xf8\x84\xb46\xbc\x06@j\x09" +
	"\xbf-\xcd\xf0_Fi\xfd\xfd\x8f\xfee\xfa\x8e\xdf\x03" +
	"\x8d\xdb\xc7\xfc~x\x9e\xdf\xf0\x1f><\x88O\xae\xfb" +
	"\xcd\xa2\xd7=G\xc2\xe6\x05\x1e\x0ds\x0d\xbe\xfa\xefw" +
	"J\xc7\xfe\xf8\xc4\x9f\xbc\xf7s9lR\xf4G8\xc5" +
	"K\x8f\x1f\x9e\xbb\xf2\xee'\xdf/k`!\x1e\x88\x98" +
	"\x06\xec\x88\xf0\x10\xfdu\x8f\xbf\x9c\xbfx\xe6o^\x19" +
	"\xa7-\xc0\xac\x19\"r\xa5xfM\xf7OOW\\" +
	"\xb1y\xce\xf7\"\x9fB\xe9\x1f\x11N\xfet\xe4\xef\\" +
	"\xf3\x96\xa9\xc6\xdf\xfd\xf7\x9e\xb3\xd6\x81L\xcck\x0d\xeb" +
	"9\x97\x87\xbe4\xbc\xef\x8e\x0b\xe4b\x95$3\x0d\xcf" +
	"J/4p\xe4lC7JG\xa2\\\x93\x17\xae\x1e" +
	"x\xee\x9f'\xd3\xd7\xbc\xc4\x8a\xd1M\xa6\xf1\xa2\x09\xb8" +
	"`\xa8\xcaHV\xd3\xd5\x09_[F\x1e\xcb\x8fmM" +
	"\x95\xffn\xcb\xc8\xba2RP'z\xf3\xc3\x85\xf8\x80" +
	"\xac\x8arNc>\xe2\x03\xf0!\x00\x8d\x0c\x02\xb00" +
	"Av\x9b\x80\x86\x8d\x05\xd2;\x84a\x100\x0cX\x15" +
	"\xb9c(\x97\xcd\xb7\xe5\x0a\xfb\x94\xed\xe9\xbdJF\xd7" +
	"xT9\xa7\x01\x0b8Q\xefN\x01\xb0\xbb\x08\xb2." +
	"\x01)b#\xd7\x9avl\x03`\xed\x04Y\x8f\x80F" +
	"\xc1\\\xdb;\x04\xa8a\x03\xe0\x00As\xc3\x06\xc0I" +
	"\xbd\xd0)\xeb\xd7=\x80\xaaT\x1d\x01\x97\x11K\x95\x89" +
	"\xdd\xb5\xeanNt\x7f\xa5pZql\xac\xa0\xea\xca" +
	"P\xa7\xa5JV\xb1\xb6!9\xcdYD*\x17)y" +
	"\xdd\x04&,Mn\x81\xd0\xcby\xa6\x14\xad8J\xf4" +
	"e\x81\xf7{\x88Z\xe8\xa1\xed\x90\xb0\x16\xd8l\xa9\xb1" +
	"\xd8s|\xd7\xa9\x85\x17\xe7\x01p5\xde\xb2\xda\xb63" +
	"o}S\xd4\xb6\xa2\xf33\x9eJ\xf0\xad\x97\xef\xcc/" +
	"4@\x905\x0a8\xa9\x153\x19E\xd3\x10A@\xbc" +
	"\x0e\x9b\xb2\xa2\x13&\x1dq\xf4V\xd2\xf1U\xd1\xe9T" +
	"\x0b\x9a\xd6U\xc8\xc9\xd9|J\xd1t\xb1\xa0*\x03\x88" +
	"^\xb3n\x02`q\x82l\x83\xc7\xac\xad}\x00\xec\x1e" +
	"\x82\xec\xb3\x026\xef3\xfd\x183\xbe\xb3\xf0\xedE\xfd" +
	"\x91\xd0\x12\xdf4fn\xaa\xe9\x05UQ\x01\x00\xa9\xd1" +
	"\xde\xf6\xde\x9d\x87[~\xfe4\xffJ=G\x12*\x8f" +
	"\xc4\x09\xa2\xb7W\xd0c\x9e\xaa\xd2\x94\xf2\x14\xd7\xa6A" +
	"\xc3>?\x96\x09\x14\x88\xaa\x18)e\xc4t\x18\xa0f" +
	"\xd8\xf7\x05DQ\x99\x8f\xf8\x01\x9chhw\x0dJ\xfb" +
	"@\xa0A\xd1\xb0\xef\x13\x00\x92\xc8|\x88\x1e%a\x15" +
	"\x15]\x1f\x986@\xed\xba\x02n+\x97\x80-\x026" +
	"\x9b>B\xea\x12\xb3$\x9aT\x15U\x19y8\x851" +
	"\xa3\xff\xc3C\x9f\xbesO\xee[\xae\xb47\x91\x96+" +
	"\xd9h}\xd9\x9bq\x01\xa3\x19\xd9\xb5N\xccx\xe7\xcf" +
	"\xe4\xda\xa9\xd2\xa9wkY\xc7r\xaa<4\xb4\xcc\xa6" +
	"\xa3\xba\x06p\xb3\xe6\x17*O\xdf\xfc`^W'\xb8" +
	"\xff\xc2N\xa4\x07ye\xe8\"\xc8\x06<\xf2\xf5\xdf\x0e" +
	"\xc0z\x08\xb2\x1d\x02RAhD\x01\x802N\xea\x0b" +
	"\x04\xd9\x97k\xd4\x10QU\x86+\x92\x83\x02F\xf3r" +
	"N\xa9*3\xa4V\xe2\x8b\xba\xa2\xf2\x13ZV\xb2\xbb" +
	"1\xda\xc3\x11\xa5\x83\x96\x95\x8a\x1e\xdf%q\x00k\xd3" +
	"\x06\xd3h\xeex\x81\x9b,\x1dX\xd8\xdc\xc2\x1e\xe9\xd0" +
	"\x1ea({\x06\x04\xda/\":\x13%\xda\xb7F;" +
	"\xf6\x82@\x1f\x10Qp\x06>\xb4{67\x9d@[" +
	"D\xc36\x09\xdaw(f\x15-\xe9\xd1,\xca\xdba" +
	"\x12'\xcb\xf5z\x95T\xb8\xd1\xfa8\xd0lV\xfc\x1b" +
	"\xab{\xe5>\xe2\xcd\xa1A7]\x1c\x13l<\x01\xc0" +
	"\xb6\x10d\xc9Z=\xc3\xee\x0dBF\xd7v\x14\xec\xf8" +
	"\xbc\xd1\xddx\xfb^\xd1\xdd\xde*l\xd5\xe0\xf4^H" +
	"\x98M\xb4f\x0b\xad\x9d@+L\x08}._\x93." +
	"\"\xdd\xb8\xd5\xad\xb9.]\x80\x8a\x9c\x8d\x01&\x8ac" +
	"\x9a\xa2\xea5\x9bMU?\xb69\xae\x94\xc0q\xc1\xf1" +
	"\x81[$\x1c\xb3V\x14\x89\xea\xac)\x97b\x92\xd3x" +
	"\xd2\xc4\x9c\xf82\xcf\xe0\xaf\x10d{<7\xaa\xf0M" +
	"w\x13d\xa3\x9e\xb4\xce\xf2\xbb\xdfC\x90\xe9\x02RB" +
	"\x1a\x91\x00\xd0q\x8e\x1c%\xc8\x1e\x13P\xcc\xc8c\xd5" +
	"i=\xa9*#\x0fy3{%\x87L>f\xb5>" +
	"\x8c\xb9\xfd\xa6\xa2\xc4\x92\x0a\xa7Z\xff\x8d\x0f\xc8\xd1e" +
	"\x86F\x1b\x16\xe58\xce\xb5\xd1\xcc^{\xa4F\xfb}" +
	"A\x8f\xa6A\xa0S<{\xed\x81\x1d\xed\x87\x13=\xb0" +
	"\x1f\x04Z\xe4\xd9k?\x05\xd1\x1e\xdai\x96\xaf\x93E" +
	"$\xce+\x10\xed'\x1b\xdd\xa9Z\x15\xc1\xe7\x8c\xd4h" +
	"\xcf\xc4\xb4\xa3\xcf\xac\x08\x86\xed8\x10\x0b\xeaD\xd2\x9e" +
	"\x1e:eHX\xba$\xdd|\x011\xa3k\x0ed{" +
	"\x1a\x9a\xcd\\H\xba\xaa\xac\xde kh\x96R\x9a\xab" +
	"\x86\xa4>\xcf\xdc\xe7\x09\x8e\xd4}\x15Y\xf7\xf9q\x00" +
	"\x00\x00\xff\xff\x81cn\x8f"

func init() {
	schemas.Register(schema_fe1be0c39c7e8269,
		0x891283e1b248bc9d,
		0x8ebfd50c805adbc3,
		0x96a5b17eee7ee1a3,
		0x9c49e6e65e34c29b,
		0x9ffc53716151c5fa,
		0xa092f60656bb0db4,
		0xa19166b9981b0854,
		0xa9aca103106c8f05,
		0xaa1198dd7e71b20e,
		0xabaef93c36f2d1ea,
		0xb2a9b080f0c4013c,
		0xb2bf60b5817330b0,
		0xbd3d832f7a7235b5,
		0xc17987510cf7ac13,
		0xc7597e4462528489,
		0xca7b4bd1600633b8,
		0xd023a1df5e372a7e,
		0xd5be1b8e0180ded6,
		0xd887d79a7ed3f45f,
		0xdb16d4fbb18486f6,
		0xe4eaf56eb486064d,
		0xe5a84717ea75fb0d,
		0xee2cf8cf148921b5,
		0xf503f3237666574e,
		0xfe62caefab7dfdad)
}
