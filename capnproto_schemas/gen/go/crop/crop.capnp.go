// Code generated by capnpc-go. DO NOT EDIT.

package crop

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	registry "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/registry"
)

type Crop capnp.Client

// Crop_TypeID is the unique identifier for the type Crop.
const Crop_TypeID = 0xe88d97a324bf5c84

func (c Crop) Parameters(ctx context.Context, params func(Crop_parameters_Params) error) (Crop_parameters_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_parameters_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crop_parameters_Results_Future{Future: ans.Future()}, release

}

func (c Crop) Cultivar(ctx context.Context, params func(Crop_cultivar_Params) error) (Crop_cultivar_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_cultivar_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crop_cultivar_Results_Future{Future: ans.Future()}, release

}

func (c Crop) Species(ctx context.Context, params func(Crop_species_Params) error) (Crop_species_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      2,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "species",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_species_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crop_species_Results_Future{Future: ans.Future()}, release

}

func (c Crop) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Crop) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Crop) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Crop) String() string {
	return "Crop(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Crop) AddRef() Crop {
	return Crop(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Crop) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Crop) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Crop) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Crop) DecodeFromPtr(p capnp.Ptr) Crop {
	return Crop(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Crop) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Crop) IsSame(other Crop) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Crop) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Crop) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Crop_Server is a Crop with a local implementation.
type Crop_Server interface {
	Parameters(context.Context, Crop_parameters) error

	Cultivar(context.Context, Crop_cultivar) error

	Species(context.Context, Crop_species) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Crop_NewServer creates a new Server from an implementation of Crop_Server.
func Crop_NewServer(s Crop_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Crop_Methods(nil, s), s, c)
}

// Crop_ServerToClient creates a new Client from an implementation of Crop_Server.
// The caller is responsible for calling Release on the returned Client.
func Crop_ServerToClient(s Crop_Server) Crop {
	return Crop(capnp.NewClient(Crop_NewServer(s)))
}

// Crop_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Crop_Methods(methods []server.Method, s Crop_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Parameters(ctx, Crop_parameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cultivar(ctx, Crop_cultivar{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      2,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "species",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Species(ctx, Crop_species{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Crop_parameters holds the state for a server call to Crop.parameters.
// See server.Call for documentation.
type Crop_parameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_parameters) Args() Crop_parameters_Params {
	return Crop_parameters_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crop_parameters) AllocResults() (Crop_parameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results(r), err
}

// Crop_cultivar holds the state for a server call to Crop.cultivar.
// See server.Call for documentation.
type Crop_cultivar struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_cultivar) Args() Crop_cultivar_Params {
	return Crop_cultivar_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crop_cultivar) AllocResults() (Crop_cultivar_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results(r), err
}

// Crop_species holds the state for a server call to Crop.species.
// See server.Call for documentation.
type Crop_species struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_species) Args() Crop_species_Params {
	return Crop_species_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crop_species) AllocResults() (Crop_species_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results(r), err
}

// Crop_List is a list of Crop.
type Crop_List = capnp.CapList[Crop]

// NewCrop_List creates a new list of Crop.
func NewCrop_List(s *capnp.Segment, sz int32) (Crop_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Crop](l), err
}

type Crop_parameters_Params capnp.Struct

// Crop_parameters_Params_TypeID is the unique identifier for the type Crop_parameters_Params.
const Crop_parameters_Params_TypeID = 0xc86e010e743c8e5b

func NewCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params(st), err
}

func NewRootCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params(st), err
}

func ReadRootCrop_parameters_Params(msg *capnp.Message) (Crop_parameters_Params, error) {
	root, err := msg.Root()
	return Crop_parameters_Params(root.Struct()), err
}

func (s Crop_parameters_Params) String() string {
	str, _ := text.Marshal(0xc86e010e743c8e5b, capnp.Struct(s))
	return str
}

func (s Crop_parameters_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_parameters_Params) DecodeFromPtr(p capnp.Ptr) Crop_parameters_Params {
	return Crop_parameters_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_parameters_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_parameters_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_parameters_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_parameters_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crop_parameters_Params_List is a list of Crop_parameters_Params.
type Crop_parameters_Params_List = capnp.StructList[Crop_parameters_Params]

// NewCrop_parameters_Params creates a new list of Crop_parameters_Params.
func NewCrop_parameters_Params_List(s *capnp.Segment, sz int32) (Crop_parameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crop_parameters_Params](l), err
}

// Crop_parameters_Params_Future is a wrapper for a Crop_parameters_Params promised by a client call.
type Crop_parameters_Params_Future struct{ *capnp.Future }

func (f Crop_parameters_Params_Future) Struct() (Crop_parameters_Params, error) {
	p, err := f.Future.Ptr()
	return Crop_parameters_Params(p.Struct()), err
}

type Crop_parameters_Results capnp.Struct

// Crop_parameters_Results_TypeID is the unique identifier for the type Crop_parameters_Results.
const Crop_parameters_Results_TypeID = 0xe4fafc722d515486

func NewCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results(st), err
}

func NewRootCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results(st), err
}

func ReadRootCrop_parameters_Results(msg *capnp.Message) (Crop_parameters_Results, error) {
	root, err := msg.Root()
	return Crop_parameters_Results(root.Struct()), err
}

func (s Crop_parameters_Results) String() string {
	str, _ := text.Marshal(0xe4fafc722d515486, capnp.Struct(s))
	return str
}

func (s Crop_parameters_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_parameters_Results) DecodeFromPtr(p capnp.Ptr) Crop_parameters_Results {
	return Crop_parameters_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_parameters_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_parameters_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_parameters_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_parameters_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crop_parameters_Results) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Crop_parameters_Results) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crop_parameters_Results) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Crop_parameters_Results_List is a list of Crop_parameters_Results.
type Crop_parameters_Results_List = capnp.StructList[Crop_parameters_Results]

// NewCrop_parameters_Results creates a new list of Crop_parameters_Results.
func NewCrop_parameters_Results_List(s *capnp.Segment, sz int32) (Crop_parameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crop_parameters_Results](l), err
}

// Crop_parameters_Results_Future is a wrapper for a Crop_parameters_Results promised by a client call.
type Crop_parameters_Results_Future struct{ *capnp.Future }

func (f Crop_parameters_Results_Future) Struct() (Crop_parameters_Results, error) {
	p, err := f.Future.Ptr()
	return Crop_parameters_Results(p.Struct()), err
}
func (p Crop_parameters_Results_Future) Params() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Crop_cultivar_Params capnp.Struct

// Crop_cultivar_Params_TypeID is the unique identifier for the type Crop_cultivar_Params.
const Crop_cultivar_Params_TypeID = 0xf26ef117dfb4517a

func NewCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params(st), err
}

func NewRootCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params(st), err
}

func ReadRootCrop_cultivar_Params(msg *capnp.Message) (Crop_cultivar_Params, error) {
	root, err := msg.Root()
	return Crop_cultivar_Params(root.Struct()), err
}

func (s Crop_cultivar_Params) String() string {
	str, _ := text.Marshal(0xf26ef117dfb4517a, capnp.Struct(s))
	return str
}

func (s Crop_cultivar_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_cultivar_Params) DecodeFromPtr(p capnp.Ptr) Crop_cultivar_Params {
	return Crop_cultivar_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_cultivar_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_cultivar_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_cultivar_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_cultivar_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crop_cultivar_Params_List is a list of Crop_cultivar_Params.
type Crop_cultivar_Params_List = capnp.StructList[Crop_cultivar_Params]

// NewCrop_cultivar_Params creates a new list of Crop_cultivar_Params.
func NewCrop_cultivar_Params_List(s *capnp.Segment, sz int32) (Crop_cultivar_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crop_cultivar_Params](l), err
}

// Crop_cultivar_Params_Future is a wrapper for a Crop_cultivar_Params promised by a client call.
type Crop_cultivar_Params_Future struct{ *capnp.Future }

func (f Crop_cultivar_Params_Future) Struct() (Crop_cultivar_Params, error) {
	p, err := f.Future.Ptr()
	return Crop_cultivar_Params(p.Struct()), err
}

type Crop_cultivar_Results capnp.Struct

// Crop_cultivar_Results_TypeID is the unique identifier for the type Crop_cultivar_Results.
const Crop_cultivar_Results_TypeID = 0xbf3704bba52494ba

func NewCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results(st), err
}

func NewRootCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results(st), err
}

func ReadRootCrop_cultivar_Results(msg *capnp.Message) (Crop_cultivar_Results, error) {
	root, err := msg.Root()
	return Crop_cultivar_Results(root.Struct()), err
}

func (s Crop_cultivar_Results) String() string {
	str, _ := text.Marshal(0xbf3704bba52494ba, capnp.Struct(s))
	return str
}

func (s Crop_cultivar_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_cultivar_Results) DecodeFromPtr(p capnp.Ptr) Crop_cultivar_Results {
	return Crop_cultivar_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_cultivar_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_cultivar_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_cultivar_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_cultivar_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crop_cultivar_Results) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Crop_cultivar_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crop_cultivar_Results) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Crop_cultivar_Results) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Crop_cultivar_Results_List is a list of Crop_cultivar_Results.
type Crop_cultivar_Results_List = capnp.StructList[Crop_cultivar_Results]

// NewCrop_cultivar_Results creates a new list of Crop_cultivar_Results.
func NewCrop_cultivar_Results_List(s *capnp.Segment, sz int32) (Crop_cultivar_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crop_cultivar_Results](l), err
}

// Crop_cultivar_Results_Future is a wrapper for a Crop_cultivar_Results promised by a client call.
type Crop_cultivar_Results_Future struct{ *capnp.Future }

func (f Crop_cultivar_Results_Future) Struct() (Crop_cultivar_Results, error) {
	p, err := f.Future.Ptr()
	return Crop_cultivar_Results(p.Struct()), err
}
func (p Crop_cultivar_Results_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Crop_species_Params capnp.Struct

// Crop_species_Params_TypeID is the unique identifier for the type Crop_species_Params.
const Crop_species_Params_TypeID = 0xf4dd1c322a3130b4

func NewCrop_species_Params(s *capnp.Segment) (Crop_species_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_species_Params(st), err
}

func NewRootCrop_species_Params(s *capnp.Segment) (Crop_species_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_species_Params(st), err
}

func ReadRootCrop_species_Params(msg *capnp.Message) (Crop_species_Params, error) {
	root, err := msg.Root()
	return Crop_species_Params(root.Struct()), err
}

func (s Crop_species_Params) String() string {
	str, _ := text.Marshal(0xf4dd1c322a3130b4, capnp.Struct(s))
	return str
}

func (s Crop_species_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_species_Params) DecodeFromPtr(p capnp.Ptr) Crop_species_Params {
	return Crop_species_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_species_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_species_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_species_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_species_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crop_species_Params_List is a list of Crop_species_Params.
type Crop_species_Params_List = capnp.StructList[Crop_species_Params]

// NewCrop_species_Params creates a new list of Crop_species_Params.
func NewCrop_species_Params_List(s *capnp.Segment, sz int32) (Crop_species_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crop_species_Params](l), err
}

// Crop_species_Params_Future is a wrapper for a Crop_species_Params promised by a client call.
type Crop_species_Params_Future struct{ *capnp.Future }

func (f Crop_species_Params_Future) Struct() (Crop_species_Params, error) {
	p, err := f.Future.Ptr()
	return Crop_species_Params(p.Struct()), err
}

type Crop_species_Results capnp.Struct

// Crop_species_Results_TypeID is the unique identifier for the type Crop_species_Results.
const Crop_species_Results_TypeID = 0xb4aa895eeede6448

func NewCrop_species_Results(s *capnp.Segment) (Crop_species_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results(st), err
}

func NewRootCrop_species_Results(s *capnp.Segment) (Crop_species_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results(st), err
}

func ReadRootCrop_species_Results(msg *capnp.Message) (Crop_species_Results, error) {
	root, err := msg.Root()
	return Crop_species_Results(root.Struct()), err
}

func (s Crop_species_Results) String() string {
	str, _ := text.Marshal(0xb4aa895eeede6448, capnp.Struct(s))
	return str
}

func (s Crop_species_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_species_Results) DecodeFromPtr(p capnp.Ptr) Crop_species_Results {
	return Crop_species_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_species_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_species_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_species_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_species_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crop_species_Results) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Crop_species_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crop_species_Results) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Crop_species_Results) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Crop_species_Results_List is a list of Crop_species_Results.
type Crop_species_Results_List = capnp.StructList[Crop_species_Results]

// NewCrop_species_Results creates a new list of Crop_species_Results.
func NewCrop_species_Results_List(s *capnp.Segment, sz int32) (Crop_species_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crop_species_Results](l), err
}

// Crop_species_Results_Future is a wrapper for a Crop_species_Results promised by a client call.
type Crop_species_Results_Future struct{ *capnp.Future }

func (f Crop_species_Results_Future) Struct() (Crop_species_Results, error) {
	p, err := f.Future.Ptr()
	return Crop_species_Results(p.Struct()), err
}
func (p Crop_species_Results_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Service capnp.Client

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0x8ddcc2b6c0386bc4

func (c Service) SupportedCategories(ctx context.Context, params func(registry.Registry_supportedCategories_Params) error) (registry.Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_supportedCategories_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return registry.Registry_supportedCategories_Results_Future{Future: ans.Future()}, release

}

func (c Service) CategoryInfo(ctx context.Context, params func(registry.Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_categoryInfo_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) Entries(ctx context.Context, params func(registry.Registry_entries_Params) error) (registry.Registry_entries_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_entries_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return registry.Registry_entries_Results_Future{Future: ans.Future()}, release

}

func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Service) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Service) String() string {
	return "Service(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Service) AddRef() Service {
	return Service(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Service) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Service) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Service) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Service) DecodeFromPtr(p capnp.Ptr) Service {
	return Service(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Service) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Service) IsSame(other Service) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Service) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Service) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	SupportedCategories(context.Context, registry.Registry_supportedCategories) error

	CategoryInfo(context.Context, registry.Registry_categoryInfo) error

	Entries(context.Context, registry.Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server) Service {
	return Service(capnp.NewClient(Service_NewServer(s)))
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, registry.Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, registry.Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, registry.Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Service_List is a list of Service.
type Service_List = capnp.CapList[Service]

// NewService_List creates a new list of Service.
func NewService_List(s *capnp.Segment, sz int32) (Service_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Service](l), err
}

const schema_f98a24e1969df972 = "x\xda\xa4\x92Mh\x13A\x14\xc7\xffof3[\xb4" +
	"\xd1lV)\x8a\xde\x02bAi-~\x05K\x82E" +
	"h\x14!\xa3^\xfc\xc4\x10W\x08\xb6\xe9\xb2\x93\xf4\xa0" +
	"\xa0 *(\xd4S\xab(\x0a\x82\x88\xe0E\x90 \xa2" +
	"\x87\xa8\x08\x8a9\x15\xf5R\xaa\"x\xf0$T\xbc\xb4" +
	"\x88#\xbb\xedn\x17\x03^\xbc\x0d\xbc\xdf{\xff\xc7\xfb" +
	"M\xcf*\x967z\x93\xcdN09\x9e\x10\xfa\xd5\xa9" +
	"m\xcf\x1f\xbf\x9c\x1e\x83\xb5\x94ko\xf6\xf6\xb5/\x99" +
	"+\xb3\x00\xd9\xbb\xc4M{\xaf0\x01\xbb L\xbb " +
	"\xba\x00=x\xe2\xd3\xf7c\x97\x1f4`\xa5\x08H\x90" +
	"\x09\xf4m\x17\x8c@v\xbf\xc8\x81\xf4\xd3\xf1\xcc\xbdg" +
	"\xc6\xd6f\x1c8*\x96\xf8\x80\x13\x00\x87\xaf\xee\xa8-" +
	"\xa3\xea\x9by\xc0\xf0\xeb\x17E\x9a`\xe8K\x07\xe4\x06" +
	"\xef\xd7\xdc\xd7x\xeb\xb0X\xed\xb7\xd6\x83\xd6\x0bG\x9a" +
	"\x99\xbb\xd7\xc7\xbe\xb5m:!\xce\xdb7\x82M'\xc4" +
	"k{\xa5\xb9\x0e\xd0\xa7e\xe3s\xd7L\xf5G,'" +
	"i2?\xa7\xd1\xd3\xdb\xbdi\xcd\xc7\x9f\x8b\x15{F" +
	"\xccAc@\x97\xbd\x11wc\xb9\xe4R\xd5\xcd\xeew" +
	"\xbc\xd1\x0a/;E\xa2\"OH\x83H?\xe9\x13\xc7" +
	"'\xf7\x9cy\x0b By\xd5\xcd\x0e\xf8o\xe5:\xe5" +
	"\x8a\xa32\xfb\x1cU\x1f\xaa)H\x83\x1b\x80A\x80\x95" +
	"\xec\x06d\x07'\xb9\x82\xd1\xf2J\xf5\xe4\x08\xa5\xf4\xbb" +
	")\xfe\xbbu\xb6\xf5\x1e J\x81\xda\xe7\x95\xebC\xb5" +
	"\xcah\xc9\x8b\x06\xfe\xf7D\xb7\xe4\x95\x86\x9d\x9a\xe3\xa9" +
	"L\xd1\x7f\x92\xfa'\x13\xe4\xf2\x9a\x8a\xc7f\x17cs" +
	"\x01\xaa(\x0dF\xe9X\x1c-\x8cB\x91Hv\xf2\x04" +
	"\xb1\xc89\x85\x8a-y\x08\xcc*\x98D\x91'\x0a\x7f" +
	"\x8e\xd5\xbf\x1b\xcc\xdal\x02\x91)\x0a\xbf\x9d\xb5~'" +
	"\x98\xb5\xd6\xd4\xe1\x9a\xe0\x9e\xca\x93\x0eo\x05 O\xe7" +
	"\x16L\xe4Iv\x10\xe9\x0f\x83\xb7\x0e\xb6&\x1f>\xf2" +
	"\xa59\xad-\xd3w\xa6\xee\xbf\x88\x0b\x14m\x07\x0f\x8e" +
	"\xa3\x10\x02\x7f\x0b\xce\xcd\xd7\xff\x04\x00\x00\xff\xff\xe3\xf5" +
	"\xfc\xa9"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f98a24e1969df972,
		Nodes: []uint64{
			0x8ddcc2b6c0386bc4,
			0xb4aa895eeede6448,
			0xbf3704bba52494ba,
			0xc86e010e743c8e5b,
			0xe4fafc722d515486,
			0xe88d97a324bf5c84,
			0xf26ef117dfb4517a,
			0xf4dd1c322a3130b4,
		},
		Compressed: true,
	})
}
