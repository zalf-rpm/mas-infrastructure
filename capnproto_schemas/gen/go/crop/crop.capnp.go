// Code generated by capnpc-go. DO NOT EDIT.

package crop

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	persistence "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/persistence"
	registry "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/registry"
)

type Crop struct{ Client *capnp.Client }

// Crop_TypeID is the unique identifier for the type Crop.
const Crop_TypeID = 0xe88d97a324bf5c84

func (c Crop) Parameters(ctx context.Context, params func(Crop_parameters_Params) error) (Crop_parameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_parameters_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Crop_parameters_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Cultivar(ctx context.Context, params func(Crop_cultivar_Params) error) (Crop_cultivar_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_cultivar_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Crop_cultivar_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Species(ctx context.Context, params func(Crop_species_Params) error) (Crop_species_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      2,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "species",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_species_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Crop_species_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Crop) Save(ctx context.Context, params func(persistence.Persistent_SaveParams) error) (persistence.Persistent_SaveResults_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(persistence.Persistent_SaveParams{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return persistence.Persistent_SaveResults_Future{Future: ans.Future()}, release
}

func (c Crop) AddRef() Crop {
	return Crop{
		Client: c.Client.AddRef(),
	}
}

func (c Crop) Release() {
	c.Client.Release()
}

// A Crop_Server is a Crop with a local implementation.
type Crop_Server interface {
	Parameters(context.Context, Crop_parameters) error

	Cultivar(context.Context, Crop_cultivar) error

	Species(context.Context, Crop_species) error

	Info(context.Context, common.Identifiable_info) error

	Save(context.Context, persistence.Persistent_save) error
}

// Crop_NewServer creates a new Server from an implementation of Crop_Server.
func Crop_NewServer(s Crop_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Crop_Methods(nil, s), s, c, policy)
}

// Crop_ServerToClient creates a new Client from an implementation of Crop_Server.
// The caller is responsible for calling Release on the returned Client.
func Crop_ServerToClient(s Crop_Server, policy *server.Policy) Crop {
	return Crop{Client: capnp.NewClient(Crop_NewServer(s, policy))}
}

// Crop_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Crop_Methods(methods []server.Method, s Crop_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Parameters(ctx, Crop_parameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cultivar(ctx, Crop_cultivar{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      2,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "species",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Species(ctx, Crop_species{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, persistence.Persistent_save{call})
		},
	})

	return methods
}

// Crop_parameters holds the state for a server call to Crop.parameters.
// See server.Call for documentation.
type Crop_parameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_parameters) Args() Crop_parameters_Params {
	return Crop_parameters_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Crop_parameters) AllocResults() (Crop_parameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results{Struct: r}, err
}

// Crop_cultivar holds the state for a server call to Crop.cultivar.
// See server.Call for documentation.
type Crop_cultivar struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_cultivar) Args() Crop_cultivar_Params {
	return Crop_cultivar_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Crop_cultivar) AllocResults() (Crop_cultivar_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results{Struct: r}, err
}

// Crop_species holds the state for a server call to Crop.species.
// See server.Call for documentation.
type Crop_species struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_species) Args() Crop_species_Params {
	return Crop_species_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Crop_species) AllocResults() (Crop_species_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results{Struct: r}, err
}

type Crop_parameters_Params struct{ capnp.Struct }

// Crop_parameters_Params_TypeID is the unique identifier for the type Crop_parameters_Params.
const Crop_parameters_Params_TypeID = 0xc86e010e743c8e5b

func NewCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params{st}, err
}

func NewRootCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params{st}, err
}

func ReadRootCrop_parameters_Params(msg *capnp.Message) (Crop_parameters_Params, error) {
	root, err := msg.Root()
	return Crop_parameters_Params{root.Struct()}, err
}

func (s Crop_parameters_Params) String() string {
	str, _ := text.Marshal(0xc86e010e743c8e5b, s.Struct)
	return str
}

// Crop_parameters_Params_List is a list of Crop_parameters_Params.
type Crop_parameters_Params_List struct{ capnp.List }

// NewCrop_parameters_Params creates a new list of Crop_parameters_Params.
func NewCrop_parameters_Params_List(s *capnp.Segment, sz int32) (Crop_parameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Crop_parameters_Params_List{l}, err
}

func (s Crop_parameters_Params_List) At(i int) Crop_parameters_Params {
	return Crop_parameters_Params{s.List.Struct(i)}
}

func (s Crop_parameters_Params_List) Set(i int, v Crop_parameters_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_parameters_Params_List) String() string {
	str, _ := text.MarshalList(0xc86e010e743c8e5b, s.List)
	return str
}

// Crop_parameters_Params_Future is a wrapper for a Crop_parameters_Params promised by a client call.
type Crop_parameters_Params_Future struct{ *capnp.Future }

func (p Crop_parameters_Params_Future) Struct() (Crop_parameters_Params, error) {
	s, err := p.Future.Struct()
	return Crop_parameters_Params{s}, err
}

type Crop_parameters_Results struct{ capnp.Struct }

// Crop_parameters_Results_TypeID is the unique identifier for the type Crop_parameters_Results.
const Crop_parameters_Results_TypeID = 0xe4fafc722d515486

func NewCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results{st}, err
}

func NewRootCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results{st}, err
}

func ReadRootCrop_parameters_Results(msg *capnp.Message) (Crop_parameters_Results, error) {
	root, err := msg.Root()
	return Crop_parameters_Results{root.Struct()}, err
}

func (s Crop_parameters_Results) String() string {
	str, _ := text.Marshal(0xe4fafc722d515486, s.Struct)
	return str
}

func (s Crop_parameters_Results) Params() (capnp.Ptr, error) {
	return s.Struct.Ptr(0)
}

func (s Crop_parameters_Results) HasParams() bool {
	return s.Struct.HasPtr(0)
}

func (s Crop_parameters_Results) SetParams(v capnp.Ptr) error {
	return s.Struct.SetPtr(0, v)
}

// Crop_parameters_Results_List is a list of Crop_parameters_Results.
type Crop_parameters_Results_List struct{ capnp.List }

// NewCrop_parameters_Results creates a new list of Crop_parameters_Results.
func NewCrop_parameters_Results_List(s *capnp.Segment, sz int32) (Crop_parameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Crop_parameters_Results_List{l}, err
}

func (s Crop_parameters_Results_List) At(i int) Crop_parameters_Results {
	return Crop_parameters_Results{s.List.Struct(i)}
}

func (s Crop_parameters_Results_List) Set(i int, v Crop_parameters_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_parameters_Results_List) String() string {
	str, _ := text.MarshalList(0xe4fafc722d515486, s.List)
	return str
}

// Crop_parameters_Results_Future is a wrapper for a Crop_parameters_Results promised by a client call.
type Crop_parameters_Results_Future struct{ *capnp.Future }

func (p Crop_parameters_Results_Future) Struct() (Crop_parameters_Results, error) {
	s, err := p.Future.Struct()
	return Crop_parameters_Results{s}, err
}

func (p Crop_parameters_Results_Future) Params() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Crop_cultivar_Params struct{ capnp.Struct }

// Crop_cultivar_Params_TypeID is the unique identifier for the type Crop_cultivar_Params.
const Crop_cultivar_Params_TypeID = 0xf26ef117dfb4517a

func NewCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params{st}, err
}

func NewRootCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params{st}, err
}

func ReadRootCrop_cultivar_Params(msg *capnp.Message) (Crop_cultivar_Params, error) {
	root, err := msg.Root()
	return Crop_cultivar_Params{root.Struct()}, err
}

func (s Crop_cultivar_Params) String() string {
	str, _ := text.Marshal(0xf26ef117dfb4517a, s.Struct)
	return str
}

// Crop_cultivar_Params_List is a list of Crop_cultivar_Params.
type Crop_cultivar_Params_List struct{ capnp.List }

// NewCrop_cultivar_Params creates a new list of Crop_cultivar_Params.
func NewCrop_cultivar_Params_List(s *capnp.Segment, sz int32) (Crop_cultivar_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Crop_cultivar_Params_List{l}, err
}

func (s Crop_cultivar_Params_List) At(i int) Crop_cultivar_Params {
	return Crop_cultivar_Params{s.List.Struct(i)}
}

func (s Crop_cultivar_Params_List) Set(i int, v Crop_cultivar_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_cultivar_Params_List) String() string {
	str, _ := text.MarshalList(0xf26ef117dfb4517a, s.List)
	return str
}

// Crop_cultivar_Params_Future is a wrapper for a Crop_cultivar_Params promised by a client call.
type Crop_cultivar_Params_Future struct{ *capnp.Future }

func (p Crop_cultivar_Params_Future) Struct() (Crop_cultivar_Params, error) {
	s, err := p.Future.Struct()
	return Crop_cultivar_Params{s}, err
}

type Crop_cultivar_Results struct{ capnp.Struct }

// Crop_cultivar_Results_TypeID is the unique identifier for the type Crop_cultivar_Results.
const Crop_cultivar_Results_TypeID = 0xbf3704bba52494ba

func NewCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results{st}, err
}

func NewRootCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results{st}, err
}

func ReadRootCrop_cultivar_Results(msg *capnp.Message) (Crop_cultivar_Results, error) {
	root, err := msg.Root()
	return Crop_cultivar_Results{root.Struct()}, err
}

func (s Crop_cultivar_Results) String() string {
	str, _ := text.Marshal(0xbf3704bba52494ba, s.Struct)
	return str
}

func (s Crop_cultivar_Results) Info() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Crop_cultivar_Results) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s Crop_cultivar_Results) SetInfo(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Crop_cultivar_Results) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Crop_cultivar_Results_List is a list of Crop_cultivar_Results.
type Crop_cultivar_Results_List struct{ capnp.List }

// NewCrop_cultivar_Results creates a new list of Crop_cultivar_Results.
func NewCrop_cultivar_Results_List(s *capnp.Segment, sz int32) (Crop_cultivar_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Crop_cultivar_Results_List{l}, err
}

func (s Crop_cultivar_Results_List) At(i int) Crop_cultivar_Results {
	return Crop_cultivar_Results{s.List.Struct(i)}
}

func (s Crop_cultivar_Results_List) Set(i int, v Crop_cultivar_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_cultivar_Results_List) String() string {
	str, _ := text.MarshalList(0xbf3704bba52494ba, s.List)
	return str
}

// Crop_cultivar_Results_Future is a wrapper for a Crop_cultivar_Results promised by a client call.
type Crop_cultivar_Results_Future struct{ *capnp.Future }

func (p Crop_cultivar_Results_Future) Struct() (Crop_cultivar_Results, error) {
	s, err := p.Future.Struct()
	return Crop_cultivar_Results{s}, err
}

func (p Crop_cultivar_Results_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Crop_species_Params struct{ capnp.Struct }

// Crop_species_Params_TypeID is the unique identifier for the type Crop_species_Params.
const Crop_species_Params_TypeID = 0xf4dd1c322a3130b4

func NewCrop_species_Params(s *capnp.Segment) (Crop_species_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_species_Params{st}, err
}

func NewRootCrop_species_Params(s *capnp.Segment) (Crop_species_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_species_Params{st}, err
}

func ReadRootCrop_species_Params(msg *capnp.Message) (Crop_species_Params, error) {
	root, err := msg.Root()
	return Crop_species_Params{root.Struct()}, err
}

func (s Crop_species_Params) String() string {
	str, _ := text.Marshal(0xf4dd1c322a3130b4, s.Struct)
	return str
}

// Crop_species_Params_List is a list of Crop_species_Params.
type Crop_species_Params_List struct{ capnp.List }

// NewCrop_species_Params creates a new list of Crop_species_Params.
func NewCrop_species_Params_List(s *capnp.Segment, sz int32) (Crop_species_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Crop_species_Params_List{l}, err
}

func (s Crop_species_Params_List) At(i int) Crop_species_Params {
	return Crop_species_Params{s.List.Struct(i)}
}

func (s Crop_species_Params_List) Set(i int, v Crop_species_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_species_Params_List) String() string {
	str, _ := text.MarshalList(0xf4dd1c322a3130b4, s.List)
	return str
}

// Crop_species_Params_Future is a wrapper for a Crop_species_Params promised by a client call.
type Crop_species_Params_Future struct{ *capnp.Future }

func (p Crop_species_Params_Future) Struct() (Crop_species_Params, error) {
	s, err := p.Future.Struct()
	return Crop_species_Params{s}, err
}

type Crop_species_Results struct{ capnp.Struct }

// Crop_species_Results_TypeID is the unique identifier for the type Crop_species_Results.
const Crop_species_Results_TypeID = 0xb4aa895eeede6448

func NewCrop_species_Results(s *capnp.Segment) (Crop_species_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results{st}, err
}

func NewRootCrop_species_Results(s *capnp.Segment) (Crop_species_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results{st}, err
}

func ReadRootCrop_species_Results(msg *capnp.Message) (Crop_species_Results, error) {
	root, err := msg.Root()
	return Crop_species_Results{root.Struct()}, err
}

func (s Crop_species_Results) String() string {
	str, _ := text.Marshal(0xb4aa895eeede6448, s.Struct)
	return str
}

func (s Crop_species_Results) Info() (common.IdInformation, error) {
	p, err := s.Struct.Ptr(0)
	return common.IdInformation{Struct: p.Struct()}, err
}

func (s Crop_species_Results) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s Crop_species_Results) SetInfo(v common.IdInformation) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Crop_species_Results) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(s.Struct.Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Crop_species_Results_List is a list of Crop_species_Results.
type Crop_species_Results_List struct{ capnp.List }

// NewCrop_species_Results creates a new list of Crop_species_Results.
func NewCrop_species_Results_List(s *capnp.Segment, sz int32) (Crop_species_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Crop_species_Results_List{l}, err
}

func (s Crop_species_Results_List) At(i int) Crop_species_Results {
	return Crop_species_Results{s.List.Struct(i)}
}

func (s Crop_species_Results_List) Set(i int, v Crop_species_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Crop_species_Results_List) String() string {
	str, _ := text.MarshalList(0xb4aa895eeede6448, s.List)
	return str
}

// Crop_species_Results_Future is a wrapper for a Crop_species_Results promised by a client call.
type Crop_species_Results_Future struct{ *capnp.Future }

func (p Crop_species_Results_Future) Struct() (Crop_species_Results, error) {
	s, err := p.Future.Struct()
	return Crop_species_Results{s}, err
}

func (p Crop_species_Results_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Service struct{ Client *capnp.Client }

// Service_TypeID is the unique identifier for the type Service.
const Service_TypeID = 0x8ddcc2b6c0386bc4

func (c Service) SupportedCategories(ctx context.Context, params func(registry.Registry_supportedCategories_Params) error) (registry.Registry_supportedCategories_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_supportedCategories_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_supportedCategories_Results_Future{Future: ans.Future()}, release
}
func (c Service) CategoryInfo(ctx context.Context, params func(registry.Registry_categoryInfo_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_categoryInfo_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}
func (c Service) Entries(ctx context.Context, params func(registry.Registry_entries_Params) error) (registry.Registry_entries_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(registry.Registry_entries_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return registry.Registry_entries_Results_Future{Future: ans.Future()}, release
}
func (c Service) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

func (c Service) AddRef() Service {
	return Service{
		Client: c.Client.AddRef(),
	}
}

func (c Service) Release() {
	c.Client.Release()
}

// A Service_Server is a Service with a local implementation.
type Service_Server interface {
	SupportedCategories(context.Context, registry.Registry_supportedCategories) error

	CategoryInfo(context.Context, registry.Registry_categoryInfo) error

	Entries(context.Context, registry.Registry_entries) error

	Info(context.Context, common.Identifiable_info) error
}

// Service_NewServer creates a new Server from an implementation of Service_Server.
func Service_NewServer(s Service_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Service_Methods(nil, s), s, c, policy)
}

// Service_ServerToClient creates a new Client from an implementation of Service_Server.
// The caller is responsible for calling Release on the returned Client.
func Service_ServerToClient(s Service_Server, policy *server.Policy) Service {
	return Service{Client: capnp.NewClient(Service_NewServer(s, policy))}
}

// Service_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Service_Methods(methods []server.Method, s Service_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      0,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "supportedCategories",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SupportedCategories(ctx, registry.Registry_supportedCategories{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      1,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "categoryInfo",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CategoryInfo(ctx, registry.Registry_categoryInfo{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xca7b4bd1600633b8,
			MethodID:      2,
			InterfaceName: "registry.capnp:Registry",
			MethodName:    "entries",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Entries(ctx, registry.Registry_entries{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

const schema_f98a24e1969df972 = "x\xda\xa4\x92Mh\x13A\x14\xc7\xffof3[\xb4" +
	"\xd5lV\x09\x88\xde\x02bAi-~\x05K\x82E" +
	"h\x14!\xa3^\xfc\xc4\x10W\x08\xb6\xe9\xb2\x93\xf4\xa0" +
	"\xa0 *(\xd4S\xab(\x0a\x82\x88\xe0E\x90 \xa2" +
	"\x87\xa8\x08\x8a9\x15\xf5R\xaa\"x\xf0$T\xbc\xb4" +
	"\x88#\xbb\xedn\x17\x03^z\x1bx\xbf\xf7\xfe\x8f\xf7" +
	"\x9b\x9e4\xcb\xb3\xdeD\xb3\x13\x90\xe3\x09\xa1_\x9f\xde" +
	"\xfe\xe2\xc9\xab\xe91X\xcb\xb9\xf6f\xef\\\xff\x9a\xb9" +
	":\x0b\x90\xbd[\xdc\xb2\xf7\x09\x13\xb0\x0b\xc2\xb4\x0b\"" +
	"\x0d\xe8\xc1\x93\x9f\x7f\x1c\xbf\xf2\xb0\x01+I@\x82L" +
	"\xa0o\x87`\x04\xb2\xfbE\x0e\xa4\x9f\x8dg\xee?7" +
	"\xb65\xe3\xc01\xb1\xcc\x07\x9c\x008rmgm\x05" +
	"U\xdf\xce\x03\x86_\xbf$R\x04C_>(7z" +
	"\xbf\xe7\xbe\xc5[\x87\xc5\x1a\xbf\xb5\x1e\xb4^<\xda\xcc" +
	"\xdc\xbb1\xf6\xbdm\xd3\x09q\xc1\xbe\x19l:!\xde" +
	"\xd8\xab\xcd\xf5\x80>#\x1b_\xd23\xd5\x9f\xb1\x9c." +
	"\x93\xf99\x8d\x9e\xde\xee\xcdk?\xfdZ\xac\xd83b" +
	"\x0e\x1a\x03\xba\xec\x8d\xb8\x9b\xca%\x97\xaan\xf6\x80\xe3" +
	"\x8dVx\xd9)\x12\x15yB\x1aD\xfai\x9f81" +
	"\xb9\xf7\xec;\x00\x11\xca\xabnv\xc0\x7f+\xd7)W" +
	"\x1c\x95\xd9\xef\xa8\xfaPMA\x1a\xdc\x00\x0c\x02\xac\xae" +
	"n@vp\x92\xab\x18\xad\xacTO\x8dPR\xbf\x9f" +
	"\xe2\x7fZ\xe7Z\x1f\x00\xa2$\xa8}^\xb9>T\xab" +
	"\x8c\x96\xbch\xe0\x92'\xba%\xaf4\xec\xd4\x1cOe" +
	"\x8a\xfe\x93\xd4\x7f\x99 \x97\xd7T<6\xbb\x18\x9b\x0b" +
	"PE)0J\xc5\xe2ha\x14\x8aD\xb2\x93'\x88" +
	"E\xce)Tl\xc9\xc3`V\xc1$\x8a<Q\xf8s" +
	"\xac\xfe=`\xd6\x16\x13\x88LQ\xf8\xed\xac\x0d\xbb\xc0" +
	"\xacu\xa6\x0e\xd7\x04\xf7T\x9etx+\x00y:\xbf" +
	"`\"O\xb2\x83H\x7f\x1c\xbc}\xa85\xf9\xe8\xb1/" +
	"\xcdim\x9d\xbe;\xf5\xe0e\\\xa0h;xp\x1c" +
	"\x85\x10\xf8Wpn\xbe\xfe7\x00\x00\xff\xff\xb6S\xfc" +
	"\x9b"

func init() {
	schemas.Register(schema_f98a24e1969df972,
		0x8ddcc2b6c0386bc4,
		0xb4aa895eeede6448,
		0xbf3704bba52494ba,
		0xc86e010e743c8e5b,
		0xe4fafc722d515486,
		0xe88d97a324bf5c84,
		0xf26ef117dfb4517a,
		0xf4dd1c322a3130b4)
}
