// Code generated by capnpc-go. DO NOT EDIT.

package crop

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	fmt "fmt"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
)

type Cultivar uint16

// Cultivar_TypeID is the unique identifier for the type Cultivar.
const Cultivar_TypeID = 0xdd81b0520864e2b4

// Values of Cultivar.
const (
	Cultivar_alfalfaClovergrassLeyMix Cultivar = 0
	Cultivar_alfalfa                  Cultivar = 1
	Cultivar_bacharia                 Cultivar = 2
	Cultivar_barleySpring             Cultivar = 3
	Cultivar_barleyWinter             Cultivar = 4
	Cultivar_cloverGrassLey           Cultivar = 5
	Cultivar_cottonBrMid              Cultivar = 6
	Cultivar_cottonLong               Cultivar = 7
	Cultivar_cottonMid                Cultivar = 8
	Cultivar_cottonShort              Cultivar = 9
	Cultivar_einkorn                  Cultivar = 10
	Cultivar_emmer                    Cultivar = 11
	Cultivar_fieldPea24               Cultivar = 12
	Cultivar_fieldPea26               Cultivar = 13
	Cultivar_grapevine                Cultivar = 14
	Cultivar_maizeGrain               Cultivar = 15
	Cultivar_maizeSilage              Cultivar = 16
	Cultivar_mustard                  Cultivar = 17
	Cultivar_oatCompound              Cultivar = 18
	Cultivar_oilRadish                Cultivar = 19
	Cultivar_phacelia                 Cultivar = 20
	Cultivar_potatoModeratelyEarly    Cultivar = 21
	Cultivar_rapeWinter               Cultivar = 22
	Cultivar_ryeGrass                 Cultivar = 23
	Cultivar_ryeSilageWinter          Cultivar = 24
	Cultivar_ryeSpring                Cultivar = 25
	Cultivar_ryeWinter                Cultivar = 26
	Cultivar_sorghum                  Cultivar = 27
	Cultivar_soybean0                 Cultivar = 28
	Cultivar_soybean00                Cultivar = 29
	Cultivar_soybean000               Cultivar = 30
	Cultivar_soybean0000              Cultivar = 31
	Cultivar_soybeanI                 Cultivar = 32
	Cultivar_soybeanII                Cultivar = 33
	Cultivar_soybeanIII               Cultivar = 34
	Cultivar_soybeanIV                Cultivar = 35
	Cultivar_soybeanV                 Cultivar = 36
	Cultivar_soybeanVI                Cultivar = 37
	Cultivar_soybeanVII               Cultivar = 38
	Cultivar_soybeanVIII              Cultivar = 39
	Cultivar_soybeanIX                Cultivar = 40
	Cultivar_soybeanX                 Cultivar = 41
	Cultivar_soybeanXI                Cultivar = 42
	Cultivar_soybeanXII               Cultivar = 43
	Cultivar_sudanGrass               Cultivar = 44
	Cultivar_sugarBeet                Cultivar = 45
	Cultivar_sugarcaneTransplant      Cultivar = 46
	Cultivar_sugarcaneRatoon          Cultivar = 47
	Cultivar_tomatoField              Cultivar = 48
	Cultivar_triticaleSpring          Cultivar = 49
	Cultivar_triticaleWinter          Cultivar = 50
	Cultivar_wheatDurum               Cultivar = 51
	Cultivar_wheatSpring              Cultivar = 52
	Cultivar_wheatWinter              Cultivar = 53
)

// String returns the enum's constant name.
func (c Cultivar) String() string {
	switch c {
	case Cultivar_alfalfaClovergrassLeyMix:
		return "alfalfaClovergrassLeyMix"
	case Cultivar_alfalfa:
		return "alfalfa"
	case Cultivar_bacharia:
		return "bacharia"
	case Cultivar_barleySpring:
		return "barleySpring"
	case Cultivar_barleyWinter:
		return "barleyWinter"
	case Cultivar_cloverGrassLey:
		return "cloverGrassLey"
	case Cultivar_cottonBrMid:
		return "cottonBrMid"
	case Cultivar_cottonLong:
		return "cottonLong"
	case Cultivar_cottonMid:
		return "cottonMid"
	case Cultivar_cottonShort:
		return "cottonShort"
	case Cultivar_einkorn:
		return "einkorn"
	case Cultivar_emmer:
		return "emmer"
	case Cultivar_fieldPea24:
		return "fieldPea24"
	case Cultivar_fieldPea26:
		return "fieldPea26"
	case Cultivar_grapevine:
		return "grapevine"
	case Cultivar_maizeGrain:
		return "maizeGrain"
	case Cultivar_maizeSilage:
		return "maizeSilage"
	case Cultivar_mustard:
		return "mustard"
	case Cultivar_oatCompound:
		return "oatCompound"
	case Cultivar_oilRadish:
		return "oilRadish"
	case Cultivar_phacelia:
		return "phacelia"
	case Cultivar_potatoModeratelyEarly:
		return "potatoModeratelyEarly"
	case Cultivar_rapeWinter:
		return "rapeWinter"
	case Cultivar_ryeGrass:
		return "ryeGrass"
	case Cultivar_ryeSilageWinter:
		return "ryeSilageWinter"
	case Cultivar_ryeSpring:
		return "ryeSpring"
	case Cultivar_ryeWinter:
		return "ryeWinter"
	case Cultivar_sorghum:
		return "sorghum"
	case Cultivar_soybean0:
		return "soybean0"
	case Cultivar_soybean00:
		return "soybean00"
	case Cultivar_soybean000:
		return "soybean000"
	case Cultivar_soybean0000:
		return "soybean0000"
	case Cultivar_soybeanI:
		return "soybeanI"
	case Cultivar_soybeanII:
		return "soybeanII"
	case Cultivar_soybeanIII:
		return "soybeanIII"
	case Cultivar_soybeanIV:
		return "soybeanIV"
	case Cultivar_soybeanV:
		return "soybeanV"
	case Cultivar_soybeanVI:
		return "soybeanVI"
	case Cultivar_soybeanVII:
		return "soybeanVII"
	case Cultivar_soybeanVIII:
		return "soybeanVIII"
	case Cultivar_soybeanIX:
		return "soybeanIX"
	case Cultivar_soybeanX:
		return "soybeanX"
	case Cultivar_soybeanXI:
		return "soybeanXI"
	case Cultivar_soybeanXII:
		return "soybeanXII"
	case Cultivar_sudanGrass:
		return "sudanGrass"
	case Cultivar_sugarBeet:
		return "sugarBeet"
	case Cultivar_sugarcaneTransplant:
		return "sugarcaneTransplant"
	case Cultivar_sugarcaneRatoon:
		return "sugarcaneRatoon"
	case Cultivar_tomatoField:
		return "tomatoField"
	case Cultivar_triticaleSpring:
		return "triticaleSpring"
	case Cultivar_triticaleWinter:
		return "triticaleWinter"
	case Cultivar_wheatDurum:
		return "wheatDurum"
	case Cultivar_wheatSpring:
		return "wheatSpring"
	case Cultivar_wheatWinter:
		return "wheatWinter"

	default:
		return ""
	}
}

// CultivarFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CultivarFromString(c string) Cultivar {
	switch c {
	case "alfalfaClovergrassLeyMix":
		return Cultivar_alfalfaClovergrassLeyMix
	case "alfalfa":
		return Cultivar_alfalfa
	case "bacharia":
		return Cultivar_bacharia
	case "barleySpring":
		return Cultivar_barleySpring
	case "barleyWinter":
		return Cultivar_barleyWinter
	case "cloverGrassLey":
		return Cultivar_cloverGrassLey
	case "cottonBrMid":
		return Cultivar_cottonBrMid
	case "cottonLong":
		return Cultivar_cottonLong
	case "cottonMid":
		return Cultivar_cottonMid
	case "cottonShort":
		return Cultivar_cottonShort
	case "einkorn":
		return Cultivar_einkorn
	case "emmer":
		return Cultivar_emmer
	case "fieldPea24":
		return Cultivar_fieldPea24
	case "fieldPea26":
		return Cultivar_fieldPea26
	case "grapevine":
		return Cultivar_grapevine
	case "maizeGrain":
		return Cultivar_maizeGrain
	case "maizeSilage":
		return Cultivar_maizeSilage
	case "mustard":
		return Cultivar_mustard
	case "oatCompound":
		return Cultivar_oatCompound
	case "oilRadish":
		return Cultivar_oilRadish
	case "phacelia":
		return Cultivar_phacelia
	case "potatoModeratelyEarly":
		return Cultivar_potatoModeratelyEarly
	case "rapeWinter":
		return Cultivar_rapeWinter
	case "ryeGrass":
		return Cultivar_ryeGrass
	case "ryeSilageWinter":
		return Cultivar_ryeSilageWinter
	case "ryeSpring":
		return Cultivar_ryeSpring
	case "ryeWinter":
		return Cultivar_ryeWinter
	case "sorghum":
		return Cultivar_sorghum
	case "soybean0":
		return Cultivar_soybean0
	case "soybean00":
		return Cultivar_soybean00
	case "soybean000":
		return Cultivar_soybean000
	case "soybean0000":
		return Cultivar_soybean0000
	case "soybeanI":
		return Cultivar_soybeanI
	case "soybeanII":
		return Cultivar_soybeanII
	case "soybeanIII":
		return Cultivar_soybeanIII
	case "soybeanIV":
		return Cultivar_soybeanIV
	case "soybeanV":
		return Cultivar_soybeanV
	case "soybeanVI":
		return Cultivar_soybeanVI
	case "soybeanVII":
		return Cultivar_soybeanVII
	case "soybeanVIII":
		return Cultivar_soybeanVIII
	case "soybeanIX":
		return Cultivar_soybeanIX
	case "soybeanX":
		return Cultivar_soybeanX
	case "soybeanXI":
		return Cultivar_soybeanXI
	case "soybeanXII":
		return Cultivar_soybeanXII
	case "sudanGrass":
		return Cultivar_sudanGrass
	case "sugarBeet":
		return Cultivar_sugarBeet
	case "sugarcaneTransplant":
		return Cultivar_sugarcaneTransplant
	case "sugarcaneRatoon":
		return Cultivar_sugarcaneRatoon
	case "tomatoField":
		return Cultivar_tomatoField
	case "triticaleSpring":
		return Cultivar_triticaleSpring
	case "triticaleWinter":
		return Cultivar_triticaleWinter
	case "wheatDurum":
		return Cultivar_wheatDurum
	case "wheatSpring":
		return Cultivar_wheatSpring
	case "wheatWinter":
		return Cultivar_wheatWinter

	default:
		return 0
	}
}

type Cultivar_List = capnp.EnumList[Cultivar]

func NewCultivar_List(s *capnp.Segment, sz int32) (Cultivar_List, error) {
	return capnp.NewEnumList[Cultivar](s, sz)
}

type Crop capnp.Client

// Crop_TypeID is the unique identifier for the type Crop.
const Crop_TypeID = 0xe88d97a324bf5c84

func (c Crop) Parameters(ctx context.Context, params func(Crop_parameters_Params) error) (Crop_parameters_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_parameters_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crop_parameters_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Cultivar(ctx context.Context, params func(Crop_cultivar_Params) error) (Crop_cultivar_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_cultivar_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crop_cultivar_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Species(ctx context.Context, params func(Crop_species_Params) error) (Crop_species_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      2,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "species",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Crop_species_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Crop_species_Results_Future{Future: ans.Future()}, release
}
func (c Crop) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}
	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Crop) String() string {
	return fmt.Sprintf("%T(%v)", c, capnp.Client(c))
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Crop) AddRef() Crop {
	return Crop(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Crop) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Crop) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Crop) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Crop) DecodeFromPtr(p capnp.Ptr) Crop {
	return Crop(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Crop) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Crop) IsSame(other Crop) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Crop) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Crop) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
} // A Crop_Server is a Crop with a local implementation.
type Crop_Server interface {
	Parameters(context.Context, Crop_parameters) error

	Cultivar(context.Context, Crop_cultivar) error

	Species(context.Context, Crop_species) error

	Info(context.Context, common.Identifiable_info) error
}

// Crop_NewServer creates a new Server from an implementation of Crop_Server.
func Crop_NewServer(s Crop_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Crop_Methods(nil, s), s, c)
}

// Crop_ServerToClient creates a new Client from an implementation of Crop_Server.
// The caller is responsible for calling Release on the returned Client.
func Crop_ServerToClient(s Crop_Server) Crop {
	return Crop(capnp.NewClient(Crop_NewServer(s)))
}

// Crop_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Crop_Methods(methods []server.Method, s Crop_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      0,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "parameters",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Parameters(ctx, Crop_parameters{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      1,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "cultivar",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Cultivar(ctx, Crop_cultivar{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe88d97a324bf5c84,
			MethodID:      2,
			InterfaceName: "crop.capnp:Crop",
			MethodName:    "species",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Species(ctx, Crop_species{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Crop_parameters holds the state for a server call to Crop.parameters.
// See server.Call for documentation.
type Crop_parameters struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_parameters) Args() Crop_parameters_Params {
	return Crop_parameters_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crop_parameters) AllocResults() (Crop_parameters_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results(r), err
}

// Crop_cultivar holds the state for a server call to Crop.cultivar.
// See server.Call for documentation.
type Crop_cultivar struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_cultivar) Args() Crop_cultivar_Params {
	return Crop_cultivar_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crop_cultivar) AllocResults() (Crop_cultivar_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results(r), err
}

// Crop_species holds the state for a server call to Crop.species.
// See server.Call for documentation.
type Crop_species struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Crop_species) Args() Crop_species_Params {
	return Crop_species_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Crop_species) AllocResults() (Crop_species_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results(r), err
}

// Crop_List is a list of Crop.
type Crop_List = capnp.CapList[Crop]

// NewCrop creates a new list of Crop.
func NewCrop_List(s *capnp.Segment, sz int32) (Crop_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Crop](l), err
}

type Crop_parameters_Params capnp.Struct

// Crop_parameters_Params_TypeID is the unique identifier for the type Crop_parameters_Params.
const Crop_parameters_Params_TypeID = 0xc86e010e743c8e5b

func NewCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params(st), err
}

func NewRootCrop_parameters_Params(s *capnp.Segment) (Crop_parameters_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_parameters_Params(st), err
}

func ReadRootCrop_parameters_Params(msg *capnp.Message) (Crop_parameters_Params, error) {
	root, err := msg.Root()
	return Crop_parameters_Params(root.Struct()), err
}

func (s Crop_parameters_Params) String() string {
	str, _ := text.Marshal(0xc86e010e743c8e5b, capnp.Struct(s))
	return str
}

func (s Crop_parameters_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_parameters_Params) DecodeFromPtr(p capnp.Ptr) Crop_parameters_Params {
	return Crop_parameters_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_parameters_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_parameters_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_parameters_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_parameters_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crop_parameters_Params_List is a list of Crop_parameters_Params.
type Crop_parameters_Params_List = capnp.StructList[Crop_parameters_Params]

// NewCrop_parameters_Params creates a new list of Crop_parameters_Params.
func NewCrop_parameters_Params_List(s *capnp.Segment, sz int32) (Crop_parameters_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crop_parameters_Params](l), err
}

// Crop_parameters_Params_Future is a wrapper for a Crop_parameters_Params promised by a client call.
type Crop_parameters_Params_Future struct{ *capnp.Future }

func (f Crop_parameters_Params_Future) Struct() (Crop_parameters_Params, error) {
	p, err := f.Future.Ptr()
	return Crop_parameters_Params(p.Struct()), err
}

type Crop_parameters_Results capnp.Struct

// Crop_parameters_Results_TypeID is the unique identifier for the type Crop_parameters_Results.
const Crop_parameters_Results_TypeID = 0xe4fafc722d515486

func NewCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results(st), err
}

func NewRootCrop_parameters_Results(s *capnp.Segment) (Crop_parameters_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_parameters_Results(st), err
}

func ReadRootCrop_parameters_Results(msg *capnp.Message) (Crop_parameters_Results, error) {
	root, err := msg.Root()
	return Crop_parameters_Results(root.Struct()), err
}

func (s Crop_parameters_Results) String() string {
	str, _ := text.Marshal(0xe4fafc722d515486, capnp.Struct(s))
	return str
}

func (s Crop_parameters_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_parameters_Results) DecodeFromPtr(p capnp.Ptr) Crop_parameters_Results {
	return Crop_parameters_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_parameters_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_parameters_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_parameters_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_parameters_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crop_parameters_Results) Params() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Crop_parameters_Results) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crop_parameters_Results) SetParams(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Crop_parameters_Results_List is a list of Crop_parameters_Results.
type Crop_parameters_Results_List = capnp.StructList[Crop_parameters_Results]

// NewCrop_parameters_Results creates a new list of Crop_parameters_Results.
func NewCrop_parameters_Results_List(s *capnp.Segment, sz int32) (Crop_parameters_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crop_parameters_Results](l), err
}

// Crop_parameters_Results_Future is a wrapper for a Crop_parameters_Results promised by a client call.
type Crop_parameters_Results_Future struct{ *capnp.Future }

func (f Crop_parameters_Results_Future) Struct() (Crop_parameters_Results, error) {
	p, err := f.Future.Ptr()
	return Crop_parameters_Results(p.Struct()), err
}
func (p Crop_parameters_Results_Future) Params() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Crop_cultivar_Params capnp.Struct

// Crop_cultivar_Params_TypeID is the unique identifier for the type Crop_cultivar_Params.
const Crop_cultivar_Params_TypeID = 0xf26ef117dfb4517a

func NewCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params(st), err
}

func NewRootCrop_cultivar_Params(s *capnp.Segment) (Crop_cultivar_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_cultivar_Params(st), err
}

func ReadRootCrop_cultivar_Params(msg *capnp.Message) (Crop_cultivar_Params, error) {
	root, err := msg.Root()
	return Crop_cultivar_Params(root.Struct()), err
}

func (s Crop_cultivar_Params) String() string {
	str, _ := text.Marshal(0xf26ef117dfb4517a, capnp.Struct(s))
	return str
}

func (s Crop_cultivar_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_cultivar_Params) DecodeFromPtr(p capnp.Ptr) Crop_cultivar_Params {
	return Crop_cultivar_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_cultivar_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_cultivar_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_cultivar_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_cultivar_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crop_cultivar_Params_List is a list of Crop_cultivar_Params.
type Crop_cultivar_Params_List = capnp.StructList[Crop_cultivar_Params]

// NewCrop_cultivar_Params creates a new list of Crop_cultivar_Params.
func NewCrop_cultivar_Params_List(s *capnp.Segment, sz int32) (Crop_cultivar_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crop_cultivar_Params](l), err
}

// Crop_cultivar_Params_Future is a wrapper for a Crop_cultivar_Params promised by a client call.
type Crop_cultivar_Params_Future struct{ *capnp.Future }

func (f Crop_cultivar_Params_Future) Struct() (Crop_cultivar_Params, error) {
	p, err := f.Future.Ptr()
	return Crop_cultivar_Params(p.Struct()), err
}

type Crop_cultivar_Results capnp.Struct

// Crop_cultivar_Results_TypeID is the unique identifier for the type Crop_cultivar_Results.
const Crop_cultivar_Results_TypeID = 0xbf3704bba52494ba

func NewCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results(st), err
}

func NewRootCrop_cultivar_Results(s *capnp.Segment) (Crop_cultivar_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_cultivar_Results(st), err
}

func ReadRootCrop_cultivar_Results(msg *capnp.Message) (Crop_cultivar_Results, error) {
	root, err := msg.Root()
	return Crop_cultivar_Results(root.Struct()), err
}

func (s Crop_cultivar_Results) String() string {
	str, _ := text.Marshal(0xbf3704bba52494ba, capnp.Struct(s))
	return str
}

func (s Crop_cultivar_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_cultivar_Results) DecodeFromPtr(p capnp.Ptr) Crop_cultivar_Results {
	return Crop_cultivar_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_cultivar_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_cultivar_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_cultivar_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_cultivar_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crop_cultivar_Results) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Crop_cultivar_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crop_cultivar_Results) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Crop_cultivar_Results) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Crop_cultivar_Results_List is a list of Crop_cultivar_Results.
type Crop_cultivar_Results_List = capnp.StructList[Crop_cultivar_Results]

// NewCrop_cultivar_Results creates a new list of Crop_cultivar_Results.
func NewCrop_cultivar_Results_List(s *capnp.Segment, sz int32) (Crop_cultivar_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crop_cultivar_Results](l), err
}

// Crop_cultivar_Results_Future is a wrapper for a Crop_cultivar_Results promised by a client call.
type Crop_cultivar_Results_Future struct{ *capnp.Future }

func (f Crop_cultivar_Results_Future) Struct() (Crop_cultivar_Results, error) {
	p, err := f.Future.Ptr()
	return Crop_cultivar_Results(p.Struct()), err
}
func (p Crop_cultivar_Results_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

type Crop_species_Params capnp.Struct

// Crop_species_Params_TypeID is the unique identifier for the type Crop_species_Params.
const Crop_species_Params_TypeID = 0xf4dd1c322a3130b4

func NewCrop_species_Params(s *capnp.Segment) (Crop_species_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_species_Params(st), err
}

func NewRootCrop_species_Params(s *capnp.Segment) (Crop_species_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Crop_species_Params(st), err
}

func ReadRootCrop_species_Params(msg *capnp.Message) (Crop_species_Params, error) {
	root, err := msg.Root()
	return Crop_species_Params(root.Struct()), err
}

func (s Crop_species_Params) String() string {
	str, _ := text.Marshal(0xf4dd1c322a3130b4, capnp.Struct(s))
	return str
}

func (s Crop_species_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_species_Params) DecodeFromPtr(p capnp.Ptr) Crop_species_Params {
	return Crop_species_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_species_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_species_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_species_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_species_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Crop_species_Params_List is a list of Crop_species_Params.
type Crop_species_Params_List = capnp.StructList[Crop_species_Params]

// NewCrop_species_Params creates a new list of Crop_species_Params.
func NewCrop_species_Params_List(s *capnp.Segment, sz int32) (Crop_species_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Crop_species_Params](l), err
}

// Crop_species_Params_Future is a wrapper for a Crop_species_Params promised by a client call.
type Crop_species_Params_Future struct{ *capnp.Future }

func (f Crop_species_Params_Future) Struct() (Crop_species_Params, error) {
	p, err := f.Future.Ptr()
	return Crop_species_Params(p.Struct()), err
}

type Crop_species_Results capnp.Struct

// Crop_species_Results_TypeID is the unique identifier for the type Crop_species_Results.
const Crop_species_Results_TypeID = 0xb4aa895eeede6448

func NewCrop_species_Results(s *capnp.Segment) (Crop_species_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results(st), err
}

func NewRootCrop_species_Results(s *capnp.Segment) (Crop_species_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Crop_species_Results(st), err
}

func ReadRootCrop_species_Results(msg *capnp.Message) (Crop_species_Results, error) {
	root, err := msg.Root()
	return Crop_species_Results(root.Struct()), err
}

func (s Crop_species_Results) String() string {
	str, _ := text.Marshal(0xb4aa895eeede6448, capnp.Struct(s))
	return str
}

func (s Crop_species_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Crop_species_Results) DecodeFromPtr(p capnp.Ptr) Crop_species_Results {
	return Crop_species_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Crop_species_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Crop_species_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Crop_species_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Crop_species_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Crop_species_Results) Info() (common.IdInformation, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return common.IdInformation(p.Struct()), err
}

func (s Crop_species_Results) HasInfo() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Crop_species_Results) SetInfo(v common.IdInformation) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewInfo sets the info field to a newly
// allocated common.IdInformation struct, preferring placement in s's segment.
func (s Crop_species_Results) NewInfo() (common.IdInformation, error) {
	ss, err := common.NewIdInformation(capnp.Struct(s).Segment())
	if err != nil {
		return common.IdInformation{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Crop_species_Results_List is a list of Crop_species_Results.
type Crop_species_Results_List = capnp.StructList[Crop_species_Results]

// NewCrop_species_Results creates a new list of Crop_species_Results.
func NewCrop_species_Results_List(s *capnp.Segment, sz int32) (Crop_species_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Crop_species_Results](l), err
}

// Crop_species_Results_Future is a wrapper for a Crop_species_Results promised by a client call.
type Crop_species_Results_Future struct{ *capnp.Future }

func (f Crop_species_Results_Future) Struct() (Crop_species_Results, error) {
	p, err := f.Future.Ptr()
	return Crop_species_Results(p.Struct()), err
}
func (p Crop_species_Results_Future) Info() common.IdInformation_Future {
	return common.IdInformation_Future{Future: p.Future.Field(0, nil)}
}

const schema_f98a24e1969df972 = "x\xda\xa4U]lTE\x14>g\xeen\x87\xffv" +
	"{\xc0\x0a\x82\x88\xb6*hq[@\x02\x91\xb4\x16\x11" +
	"\x96\xd0\xa4\xdbb)\xf8\x93Lw\x87\xed\xe8\xdd{\xaf" +
	"s\xefV\x97\x04\x1b\x88\x9ah\xa2OF_\xf4\x05\xe3" +
	"\x83&F%\xf8\xa0\xc6\x10\x1e\x8c?\x84\x07\xa2$j" +
	"R\x0dF\x13y\xd0\x04\xa3\x0f%\xea\x98\x99\xed\xb6\x17" +
	"I|1i2\xe7;\xdf\xf7\x9d3\x9d\xbd9'?" +
	"\xc4\xfa3=K\xb7\xb6\x00+\xee\xc9\xb6\x98=\xe5\xef" +
	"~}\xe4\xb9\xb7NA\xae\x0d\x01\xb2\xc8\x016\xa1\xc7" +
	"\x10\x90\xb2^\x1f\xa0\xf9\xf0\xa5\xce7>\xcal=\x9d" +
	"\x16ty\x8b\xac\xa0\xdb\x09\x1e|\xf1\x9ed\x19\x06\x9f" +
	"5\x04\x19\xcb\x0fz\xed\x08\x19s\xea\x87\xf2\x82\xe1w" +
	"\x8fMCn13z\xe6\xb5\x97/v>?\x03\x80" +
	"\xb4\xc5;A;<\xab\xdc\xe6ud\x01\xcd\xb3\xfb\x8b" +
	"\xdd\xfa\xcf+?\xa6\x9b\x14\xf9*\xdb\xe4 \xb7M\x9e" +
	"~\xe8t\xe7\xeb\xaf\xbc\xf03\xe4\x16{W\x95\xaa\xf3" +
	"\xe3t\x94s\x00\xaa\xf3Oi\x86w\x00\x98#\xc5S" +
	"\xdfw\\\x0e~K\xdd\xe8\x12g\xeeF\xf9\x9e\x0d\xbd" +
	"\xab\xa7\x7f\x9fg\xe8\x1c\xbf\x02\xda\x94t\x18m,\x89" +
	"\xc8\x0b\xa2\xed;m\x1cG\xb2\xa4d\xdc9,\xe3\x9a" +
	"\x9f\xc4P\xccx\x19\x80\x0c\x02\xe4\x96n\x00(.\xf0" +
	"\xb0\xb8\x9ca\xab\x0a\x0e\x87\xd8f\xbe\xfc\xd6\xfb\xfb\xec" +
	"Sg\xbf\x02@l\x03\xbc\xb6^\xa9\xe6'jR\xe8" +
	"\xb9\x82\xff\xbbb$\xb4\xa8\xcaD\xea\xb8s\xc8\x86\x18" +
	"\xcfi\xd0jlC>)\xf4\x10b\xf1kd\x00t" +
	"\x8c}a\xab\xd13l\x00\x00\x19\x1de{\x01\xd0\xa3" +
	":{\x14\x003Tsg\x96\x1egG\x00\xb0\x85\xaa" +
	"l\x1c\x009)v\x08\x00\x17\x90d\xc3\x00\xb8\x90\x84" +
	"\xcb/\xa2\x87]\x9d\xc5\xf4\x00\xeb\x05\xc0%4\xe8t" +
	"K\xa9\xe0\xcee\xb4\xcb\xe9[\xe9^\x87\xdbh\x87\xf3" +
	"\xe5h\x9b\xf3\xb5S\x8f\xc3D\xddN\xb7\x9c\xd6\xbb\xfb" +
	"\xac\xa0.v\x12\x00\xaf\xa3.\xe7\xeb\xa0u.\x7f=" +
	"\xada\xc7\x01p%\xadt\xfaU\xb4\xc2\x9d7P\xce" +
	"\xd5[M\x0b\x9dn\x0de]\xfeFB\xe7_K\x7f" +
	"\xa1\xeds\x13\xcd\xa0\xe5\xd7\xd1\x1fh\xf9\x9b\xe92Z" +
	"\xfe\x16\xfa\xc5\xe1N\xba\xe4\xf8.\xfa\xc9\xe1[\xe9\xa2" +
	"\xe3o\xa3i\xe7\xbf\x9d\xbeq\xf9\xf5t\xc1\xe96\xd0" +
	"y\x87\xef\xa0sNw'}\xee\xcen\xfa\xc4\xe57" +
	"\xd2\x19<\x01\x80w\xd1\x19\xb4\xf7\xce\xd3\xc7\xaeN\x0f" +
	"}\xe0p/\xbd\xef\xceM\xf4\x9e\xf3m\xa6\xb7\x1d\xbf" +
	"\x85\xde\xb4\xa7\x11\xfea\xfb\xb7\x93\xf9\xe1\xa4\xd4\x15-" +
	"\xe2x\x9f\xac\x0f\xaa'\x01\xa6f93.J\x13B" +
	"+\x01\x00f\\h_\xd6G\"h\xd5*\xa8\xcc\xc2" +
	"\x03\x0aZ\x83DjSrUvk\xe8k\xd41\xa5" +
	"0I\xc2`@\x03\x1fT\xe5Y\xb4/\x04/\xa8\xcc" +
	"\x82A\x05\xd8$F&\x80\x87:\x99\x92*x,\xd4" +
	"\xc1ZY\xadJm\x0e+\xe9\x97\x87\xa4\x00\xafws" +
	"\x1a\xdcm*ZDrR\x05\x80\xd2T\x85:\"w" +
	"k\x01\x9e\x0a\x1a`D\xf9\xc0EENUkq\"" +
	"t\xd9\x84\"\xd9\x19V\xa3\x10x-(\x9bP\xf9\xc3" +
	"\xa2\xacb\xc0\x09\x13M\x88\x92\xf4\x1b\xff`\x14&\"" +
	"\x09\x07C,K-\x12\xe9\xd7\xd7\xee\x12\xda\xaf\x1b\xdb" +
	"\xeb\x80\x0a\x12\xf0\xa46\xban{\xc5\xb15\xe8\xbam" +
	"%*\xcc\xd1R\x83MDZ\x05X\xb1\x9cK\x02\xea" +
	"\xa98\xd4\x95\x89Z\xd5\xc4a}\\\x8a o\xbds" +
	"1\xe6\xe7c/\x9f\x02<?\x8f\x0a)K\x01\xb00" +
	"\x1f{\x85\x14\xc0\xd1f<\x9a2\x8c\xa6\x0c\xa3i\xc3" +
	"(\xf0\xc2U\xf6\xb1f<\x96\xb2\x8f\xa5\xecc\x0d{" +
	"\xad,\x02\xf7\xe2ql\xe2ZE\xe8\x01)\x01\x93F" +
	"\\\x12\x01\xca\xfdZ\x04q\xe4s\x11\xccg\x99\x1c\x16" +
	"I\x18\x06\x90\x84U\x91\x84\xf7+.\xfd\xb2I\xb4J" +
	"TI\xf8\x99\xc6\xd3U\xa0\x99h>\xea\x13\x13R$" +
	"\xf7\xd5\xb4W\xab\x1a\x17\x8fD\x1a\xb8\xfd\x04\x1d:\xa0" +
	"\x02\xe0\xee\x0b\xfc\x8f\x01\xe6\x86\xa2\x97\xc4\xe9\x99\xb8}" +
	"~&\xf69i\x8c\xed\xc0\xb0=5\x0bq\xb6\x14\xd8" +
	"\x19\xb7\xc4\xcb\"\x9b\xdbF\xd8\\)\xb9\xe2!`\xb9" +
	"\x02G\x9c\xdb\x0b\xd8\xdci\xb9\x1d{\x81\xe5\xb6p\x80" +
	"\xb9\xcd\x80\xcd\x85\x98[?\x00,\xb7\x86\x9b\xe65\xc1" +
	"\xd3q?\x9a\xe6 \x07\x80~\x9c\x9a]\x13\xfdX\xcc" +
	" \x9a\x0b{^=x\xf6\xfc;'\xed\xaf\xd3\xbcc" +
	"\xcb5\x1b\xc0M\xeb\x18\x9a\x82\x7fo\x9c\xbe\x06\xffO" +
	"\x00\x00\x00\xff\xff\xd8T=w"

func init() {
	schemas.Register(schema_f98a24e1969df972,
		0xb4aa895eeede6448,
		0xbf3704bba52494ba,
		0xc86e010e743c8e5b,
		0xdd81b0520864e2b4,
		0xe4fafc722d515486,
		0xe88d97a324bf5c84,
		0xf26ef117dfb4517a,
		0xf4dd1c322a3130b4)
}
