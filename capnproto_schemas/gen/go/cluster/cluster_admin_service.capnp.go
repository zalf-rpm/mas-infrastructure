// Code generated by capnpc-go. DO NOT EDIT.

package cluster

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
)

type Cluster capnp.Struct

// Cluster_TypeID is the unique identifier for the type Cluster.
const Cluster_TypeID = 0xf7485d56d6f20e7d

func NewCluster(s *capnp.Segment) (Cluster, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster(st), err
}

func NewRootCluster(s *capnp.Segment) (Cluster, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster(st), err
}

func ReadRootCluster(msg *capnp.Message) (Cluster, error) {
	root, err := msg.Root()
	return Cluster(root.Struct()), err
}

func (s Cluster) String() string {
	str, _ := text.Marshal(0xf7485d56d6f20e7d, capnp.Struct(s))
	return str
}

func (s Cluster) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster) DecodeFromPtr(p capnp.Ptr) Cluster {
	return Cluster(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_List is a list of Cluster.
type Cluster_List = capnp.StructList[Cluster]

// NewCluster creates a new list of Cluster.
func NewCluster_List(s *capnp.Segment, sz int32) (Cluster_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster](l), err
}

// Cluster_Future is a wrapper for a Cluster promised by a client call.
type Cluster_Future struct{ *capnp.Future }

func (f Cluster_Future) Struct() (Cluster, error) {
	p, err := f.Future.Ptr()
	return Cluster(p.Struct()), err
}

type Cluster_Unregister capnp.Client

// Cluster_Unregister_TypeID is the unique identifier for the type Cluster_Unregister.
const Cluster_Unregister_TypeID = 0xe8b1f7a192651bbe

func (c Cluster_Unregister) Unregister(ctx context.Context, params func(Cluster_Unregister_unregister_Params) error) (Cluster_Unregister_unregister_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe8b1f7a192651bbe,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Unregister",
			MethodName:    "unregister",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Unregister_unregister_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_Unregister_unregister_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_Unregister) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cluster_Unregister) String() string {
	return "Cluster_Unregister(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cluster_Unregister) AddRef() Cluster_Unregister {
	return Cluster_Unregister(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cluster_Unregister) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cluster_Unregister) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cluster_Unregister) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cluster_Unregister) DecodeFromPtr(p capnp.Ptr) Cluster_Unregister {
	return Cluster_Unregister(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cluster_Unregister) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cluster_Unregister) IsSame(other Cluster_Unregister) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cluster_Unregister) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cluster_Unregister) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cluster_Unregister_Server is a Cluster_Unregister with a local implementation.
type Cluster_Unregister_Server interface {
	Unregister(context.Context, Cluster_Unregister_unregister) error
}

// Cluster_Unregister_NewServer creates a new Server from an implementation of Cluster_Unregister_Server.
func Cluster_Unregister_NewServer(s Cluster_Unregister_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Unregister_Methods(nil, s), s, c)
}

// Cluster_Unregister_ServerToClient creates a new Client from an implementation of Cluster_Unregister_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_Unregister_ServerToClient(s Cluster_Unregister_Server) Cluster_Unregister {
	return Cluster_Unregister(capnp.NewClient(Cluster_Unregister_NewServer(s)))
}

// Cluster_Unregister_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Unregister_Methods(methods []server.Method, s Cluster_Unregister_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe8b1f7a192651bbe,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Unregister",
			MethodName:    "unregister",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Unregister(ctx, Cluster_Unregister_unregister{call})
		},
	})

	return methods
}

// Cluster_Unregister_unregister holds the state for a server call to Cluster_Unregister.unregister.
// See server.Call for documentation.
type Cluster_Unregister_unregister struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Unregister_unregister) Args() Cluster_Unregister_unregister_Params {
	return Cluster_Unregister_unregister_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_Unregister_unregister) AllocResults() (Cluster_Unregister_unregister_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Unregister_unregister_Results(r), err
}

// Cluster_Unregister_List is a list of Cluster_Unregister.
type Cluster_Unregister_List = capnp.CapList[Cluster_Unregister]

// NewCluster_Unregister_List creates a new list of Cluster_Unregister.
func NewCluster_Unregister_List(s *capnp.Segment, sz int32) (Cluster_Unregister_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cluster_Unregister](l), err
}

type Cluster_Unregister_unregister_Params capnp.Struct

// Cluster_Unregister_unregister_Params_TypeID is the unique identifier for the type Cluster_Unregister_unregister_Params.
const Cluster_Unregister_unregister_Params_TypeID = 0xe1b78932a9f7aea3

func NewCluster_Unregister_unregister_Params(s *capnp.Segment) (Cluster_Unregister_unregister_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Unregister_unregister_Params(st), err
}

func NewRootCluster_Unregister_unregister_Params(s *capnp.Segment) (Cluster_Unregister_unregister_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Unregister_unregister_Params(st), err
}

func ReadRootCluster_Unregister_unregister_Params(msg *capnp.Message) (Cluster_Unregister_unregister_Params, error) {
	root, err := msg.Root()
	return Cluster_Unregister_unregister_Params(root.Struct()), err
}

func (s Cluster_Unregister_unregister_Params) String() string {
	str, _ := text.Marshal(0xe1b78932a9f7aea3, capnp.Struct(s))
	return str
}

func (s Cluster_Unregister_unregister_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Unregister_unregister_Params) DecodeFromPtr(p capnp.Ptr) Cluster_Unregister_unregister_Params {
	return Cluster_Unregister_unregister_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Unregister_unregister_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Unregister_unregister_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Unregister_unregister_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Unregister_unregister_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_Unregister_unregister_Params_List is a list of Cluster_Unregister_unregister_Params.
type Cluster_Unregister_unregister_Params_List = capnp.StructList[Cluster_Unregister_unregister_Params]

// NewCluster_Unregister_unregister_Params creates a new list of Cluster_Unregister_unregister_Params.
func NewCluster_Unregister_unregister_Params_List(s *capnp.Segment, sz int32) (Cluster_Unregister_unregister_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Unregister_unregister_Params](l), err
}

// Cluster_Unregister_unregister_Params_Future is a wrapper for a Cluster_Unregister_unregister_Params promised by a client call.
type Cluster_Unregister_unregister_Params_Future struct{ *capnp.Future }

func (f Cluster_Unregister_unregister_Params_Future) Struct() (Cluster_Unregister_unregister_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_Unregister_unregister_Params(p.Struct()), err
}

type Cluster_Unregister_unregister_Results capnp.Struct

// Cluster_Unregister_unregister_Results_TypeID is the unique identifier for the type Cluster_Unregister_unregister_Results.
const Cluster_Unregister_unregister_Results_TypeID = 0xbba96ef3714f338f

func NewCluster_Unregister_unregister_Results(s *capnp.Segment) (Cluster_Unregister_unregister_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Unregister_unregister_Results(st), err
}

func NewRootCluster_Unregister_unregister_Results(s *capnp.Segment) (Cluster_Unregister_unregister_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Unregister_unregister_Results(st), err
}

func ReadRootCluster_Unregister_unregister_Results(msg *capnp.Message) (Cluster_Unregister_unregister_Results, error) {
	root, err := msg.Root()
	return Cluster_Unregister_unregister_Results(root.Struct()), err
}

func (s Cluster_Unregister_unregister_Results) String() string {
	str, _ := text.Marshal(0xbba96ef3714f338f, capnp.Struct(s))
	return str
}

func (s Cluster_Unregister_unregister_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Unregister_unregister_Results) DecodeFromPtr(p capnp.Ptr) Cluster_Unregister_unregister_Results {
	return Cluster_Unregister_unregister_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Unregister_unregister_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Unregister_unregister_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Unregister_unregister_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Unregister_unregister_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Unregister_unregister_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Cluster_Unregister_unregister_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Cluster_Unregister_unregister_Results_List is a list of Cluster_Unregister_unregister_Results.
type Cluster_Unregister_unregister_Results_List = capnp.StructList[Cluster_Unregister_unregister_Results]

// NewCluster_Unregister_unregister_Results creates a new list of Cluster_Unregister_unregister_Results.
func NewCluster_Unregister_unregister_Results_List(s *capnp.Segment, sz int32) (Cluster_Unregister_unregister_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Unregister_unregister_Results](l), err
}

// Cluster_Unregister_unregister_Results_Future is a wrapper for a Cluster_Unregister_unregister_Results promised by a client call.
type Cluster_Unregister_unregister_Results_Future struct{ *capnp.Future }

func (f Cluster_Unregister_unregister_Results_Future) Struct() (Cluster_Unregister_unregister_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_Unregister_unregister_Results(p.Struct()), err
}

type Cluster_AdminMaster capnp.Client

// Cluster_AdminMaster_TypeID is the unique identifier for the type Cluster_AdminMaster.
const Cluster_AdminMaster_TypeID = 0xbf24278c65f633ce

func (c Cluster_AdminMaster) RegisterModelInstanceFactory(ctx context.Context, params func(Cluster_AdminMaster_registerModelInstanceFactory_Params) error) (Cluster_AdminMaster_registerModelInstanceFactory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf24278c65f633ce,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.AdminMaster",
			MethodName:    "registerModelInstanceFactory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_AdminMaster_registerModelInstanceFactory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_AdminMaster_registerModelInstanceFactory_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_AdminMaster) AvailableModels(ctx context.Context, params func(Cluster_AdminMaster_availableModels_Params) error) (Cluster_AdminMaster_availableModels_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbf24278c65f633ce,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.AdminMaster",
			MethodName:    "availableModels",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_AdminMaster_availableModels_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_AdminMaster_availableModels_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_AdminMaster) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Cluster_AdminMaster) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cluster_AdminMaster) String() string {
	return "Cluster_AdminMaster(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cluster_AdminMaster) AddRef() Cluster_AdminMaster {
	return Cluster_AdminMaster(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cluster_AdminMaster) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cluster_AdminMaster) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cluster_AdminMaster) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cluster_AdminMaster) DecodeFromPtr(p capnp.Ptr) Cluster_AdminMaster {
	return Cluster_AdminMaster(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cluster_AdminMaster) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cluster_AdminMaster) IsSame(other Cluster_AdminMaster) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cluster_AdminMaster) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cluster_AdminMaster) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cluster_AdminMaster_Server is a Cluster_AdminMaster with a local implementation.
type Cluster_AdminMaster_Server interface {
	RegisterModelInstanceFactory(context.Context, Cluster_AdminMaster_registerModelInstanceFactory) error

	AvailableModels(context.Context, Cluster_AdminMaster_availableModels) error

	Info(context.Context, common.Identifiable_info) error
}

// Cluster_AdminMaster_NewServer creates a new Server from an implementation of Cluster_AdminMaster_Server.
func Cluster_AdminMaster_NewServer(s Cluster_AdminMaster_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_AdminMaster_Methods(nil, s), s, c)
}

// Cluster_AdminMaster_ServerToClient creates a new Client from an implementation of Cluster_AdminMaster_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_AdminMaster_ServerToClient(s Cluster_AdminMaster_Server) Cluster_AdminMaster {
	return Cluster_AdminMaster(capnp.NewClient(Cluster_AdminMaster_NewServer(s)))
}

// Cluster_AdminMaster_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_AdminMaster_Methods(methods []server.Method, s Cluster_AdminMaster_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf24278c65f633ce,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.AdminMaster",
			MethodName:    "registerModelInstanceFactory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterModelInstanceFactory(ctx, Cluster_AdminMaster_registerModelInstanceFactory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbf24278c65f633ce,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.AdminMaster",
			MethodName:    "availableModels",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AvailableModels(ctx, Cluster_AdminMaster_availableModels{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Cluster_AdminMaster_registerModelInstanceFactory holds the state for a server call to Cluster_AdminMaster.registerModelInstanceFactory.
// See server.Call for documentation.
type Cluster_AdminMaster_registerModelInstanceFactory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_AdminMaster_registerModelInstanceFactory) Args() Cluster_AdminMaster_registerModelInstanceFactory_Params {
	return Cluster_AdminMaster_registerModelInstanceFactory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_AdminMaster_registerModelInstanceFactory) AllocResults() (Cluster_AdminMaster_registerModelInstanceFactory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_AdminMaster_registerModelInstanceFactory_Results(r), err
}

// Cluster_AdminMaster_availableModels holds the state for a server call to Cluster_AdminMaster.availableModels.
// See server.Call for documentation.
type Cluster_AdminMaster_availableModels struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_AdminMaster_availableModels) Args() Cluster_AdminMaster_availableModels_Params {
	return Cluster_AdminMaster_availableModels_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_AdminMaster_availableModels) AllocResults() (Cluster_AdminMaster_availableModels_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_AdminMaster_availableModels_Results(r), err
}

// Cluster_AdminMaster_List is a list of Cluster_AdminMaster.
type Cluster_AdminMaster_List = capnp.CapList[Cluster_AdminMaster]

// NewCluster_AdminMaster_List creates a new list of Cluster_AdminMaster.
func NewCluster_AdminMaster_List(s *capnp.Segment, sz int32) (Cluster_AdminMaster_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cluster_AdminMaster](l), err
}

type Cluster_AdminMaster_registerModelInstanceFactory_Params capnp.Struct

// Cluster_AdminMaster_registerModelInstanceFactory_Params_TypeID is the unique identifier for the type Cluster_AdminMaster_registerModelInstanceFactory_Params.
const Cluster_AdminMaster_registerModelInstanceFactory_Params_TypeID = 0x943b54ee6f4de610

func NewCluster_AdminMaster_registerModelInstanceFactory_Params(s *capnp.Segment) (Cluster_AdminMaster_registerModelInstanceFactory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_AdminMaster_registerModelInstanceFactory_Params(st), err
}

func NewRootCluster_AdminMaster_registerModelInstanceFactory_Params(s *capnp.Segment) (Cluster_AdminMaster_registerModelInstanceFactory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_AdminMaster_registerModelInstanceFactory_Params(st), err
}

func ReadRootCluster_AdminMaster_registerModelInstanceFactory_Params(msg *capnp.Message) (Cluster_AdminMaster_registerModelInstanceFactory_Params, error) {
	root, err := msg.Root()
	return Cluster_AdminMaster_registerModelInstanceFactory_Params(root.Struct()), err
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) String() string {
	str, _ := text.Marshal(0x943b54ee6f4de610, capnp.Struct(s))
	return str
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_AdminMaster_registerModelInstanceFactory_Params) DecodeFromPtr(p capnp.Ptr) Cluster_AdminMaster_registerModelInstanceFactory_Params {
	return Cluster_AdminMaster_registerModelInstanceFactory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) AModelId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) HasAModelId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) AModelIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) SetAModelId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) AFactory() Cluster_ModelInstanceFactory {
	p, _ := capnp.Struct(s).Ptr(1)
	return Cluster_ModelInstanceFactory(p.Interface().Client())
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) HasAFactory() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Params) SetAFactory(v Cluster_ModelInstanceFactory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Cluster_AdminMaster_registerModelInstanceFactory_Params_List is a list of Cluster_AdminMaster_registerModelInstanceFactory_Params.
type Cluster_AdminMaster_registerModelInstanceFactory_Params_List = capnp.StructList[Cluster_AdminMaster_registerModelInstanceFactory_Params]

// NewCluster_AdminMaster_registerModelInstanceFactory_Params creates a new list of Cluster_AdminMaster_registerModelInstanceFactory_Params.
func NewCluster_AdminMaster_registerModelInstanceFactory_Params_List(s *capnp.Segment, sz int32) (Cluster_AdminMaster_registerModelInstanceFactory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Cluster_AdminMaster_registerModelInstanceFactory_Params](l), err
}

// Cluster_AdminMaster_registerModelInstanceFactory_Params_Future is a wrapper for a Cluster_AdminMaster_registerModelInstanceFactory_Params promised by a client call.
type Cluster_AdminMaster_registerModelInstanceFactory_Params_Future struct{ *capnp.Future }

func (f Cluster_AdminMaster_registerModelInstanceFactory_Params_Future) Struct() (Cluster_AdminMaster_registerModelInstanceFactory_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_AdminMaster_registerModelInstanceFactory_Params(p.Struct()), err
}
func (p Cluster_AdminMaster_registerModelInstanceFactory_Params_Future) AFactory() Cluster_ModelInstanceFactory {
	return Cluster_ModelInstanceFactory(p.Future.Field(1, nil).Client())
}

type Cluster_AdminMaster_registerModelInstanceFactory_Results capnp.Struct

// Cluster_AdminMaster_registerModelInstanceFactory_Results_TypeID is the unique identifier for the type Cluster_AdminMaster_registerModelInstanceFactory_Results.
const Cluster_AdminMaster_registerModelInstanceFactory_Results_TypeID = 0xe7434f81e2b1e3de

func NewCluster_AdminMaster_registerModelInstanceFactory_Results(s *capnp.Segment) (Cluster_AdminMaster_registerModelInstanceFactory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_AdminMaster_registerModelInstanceFactory_Results(st), err
}

func NewRootCluster_AdminMaster_registerModelInstanceFactory_Results(s *capnp.Segment) (Cluster_AdminMaster_registerModelInstanceFactory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_AdminMaster_registerModelInstanceFactory_Results(st), err
}

func ReadRootCluster_AdminMaster_registerModelInstanceFactory_Results(msg *capnp.Message) (Cluster_AdminMaster_registerModelInstanceFactory_Results, error) {
	root, err := msg.Root()
	return Cluster_AdminMaster_registerModelInstanceFactory_Results(root.Struct()), err
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) String() string {
	str, _ := text.Marshal(0xe7434f81e2b1e3de, capnp.Struct(s))
	return str
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_AdminMaster_registerModelInstanceFactory_Results) DecodeFromPtr(p capnp.Ptr) Cluster_AdminMaster_registerModelInstanceFactory_Results {
	return Cluster_AdminMaster_registerModelInstanceFactory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) Unregister() Cluster_Unregister {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_Unregister(p.Interface().Client())
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) HasUnregister() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_AdminMaster_registerModelInstanceFactory_Results) SetUnregister(v Cluster_Unregister) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_AdminMaster_registerModelInstanceFactory_Results_List is a list of Cluster_AdminMaster_registerModelInstanceFactory_Results.
type Cluster_AdminMaster_registerModelInstanceFactory_Results_List = capnp.StructList[Cluster_AdminMaster_registerModelInstanceFactory_Results]

// NewCluster_AdminMaster_registerModelInstanceFactory_Results creates a new list of Cluster_AdminMaster_registerModelInstanceFactory_Results.
func NewCluster_AdminMaster_registerModelInstanceFactory_Results_List(s *capnp.Segment, sz int32) (Cluster_AdminMaster_registerModelInstanceFactory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_AdminMaster_registerModelInstanceFactory_Results](l), err
}

// Cluster_AdminMaster_registerModelInstanceFactory_Results_Future is a wrapper for a Cluster_AdminMaster_registerModelInstanceFactory_Results promised by a client call.
type Cluster_AdminMaster_registerModelInstanceFactory_Results_Future struct{ *capnp.Future }

func (f Cluster_AdminMaster_registerModelInstanceFactory_Results_Future) Struct() (Cluster_AdminMaster_registerModelInstanceFactory_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_AdminMaster_registerModelInstanceFactory_Results(p.Struct()), err
}
func (p Cluster_AdminMaster_registerModelInstanceFactory_Results_Future) Unregister() Cluster_Unregister {
	return Cluster_Unregister(p.Future.Field(0, nil).Client())
}

type Cluster_AdminMaster_availableModels_Params capnp.Struct

// Cluster_AdminMaster_availableModels_Params_TypeID is the unique identifier for the type Cluster_AdminMaster_availableModels_Params.
const Cluster_AdminMaster_availableModels_Params_TypeID = 0xa0669b656ba6cc8e

func NewCluster_AdminMaster_availableModels_Params(s *capnp.Segment) (Cluster_AdminMaster_availableModels_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_AdminMaster_availableModels_Params(st), err
}

func NewRootCluster_AdminMaster_availableModels_Params(s *capnp.Segment) (Cluster_AdminMaster_availableModels_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_AdminMaster_availableModels_Params(st), err
}

func ReadRootCluster_AdminMaster_availableModels_Params(msg *capnp.Message) (Cluster_AdminMaster_availableModels_Params, error) {
	root, err := msg.Root()
	return Cluster_AdminMaster_availableModels_Params(root.Struct()), err
}

func (s Cluster_AdminMaster_availableModels_Params) String() string {
	str, _ := text.Marshal(0xa0669b656ba6cc8e, capnp.Struct(s))
	return str
}

func (s Cluster_AdminMaster_availableModels_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_AdminMaster_availableModels_Params) DecodeFromPtr(p capnp.Ptr) Cluster_AdminMaster_availableModels_Params {
	return Cluster_AdminMaster_availableModels_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_AdminMaster_availableModels_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_AdminMaster_availableModels_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_AdminMaster_availableModels_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_AdminMaster_availableModels_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_AdminMaster_availableModels_Params_List is a list of Cluster_AdminMaster_availableModels_Params.
type Cluster_AdminMaster_availableModels_Params_List = capnp.StructList[Cluster_AdminMaster_availableModels_Params]

// NewCluster_AdminMaster_availableModels_Params creates a new list of Cluster_AdminMaster_availableModels_Params.
func NewCluster_AdminMaster_availableModels_Params_List(s *capnp.Segment, sz int32) (Cluster_AdminMaster_availableModels_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_AdminMaster_availableModels_Params](l), err
}

// Cluster_AdminMaster_availableModels_Params_Future is a wrapper for a Cluster_AdminMaster_availableModels_Params promised by a client call.
type Cluster_AdminMaster_availableModels_Params_Future struct{ *capnp.Future }

func (f Cluster_AdminMaster_availableModels_Params_Future) Struct() (Cluster_AdminMaster_availableModels_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_AdminMaster_availableModels_Params(p.Struct()), err
}

type Cluster_AdminMaster_availableModels_Results capnp.Struct

// Cluster_AdminMaster_availableModels_Results_TypeID is the unique identifier for the type Cluster_AdminMaster_availableModels_Results.
const Cluster_AdminMaster_availableModels_Results_TypeID = 0xd4bece01a7c4008f

func NewCluster_AdminMaster_availableModels_Results(s *capnp.Segment) (Cluster_AdminMaster_availableModels_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_AdminMaster_availableModels_Results(st), err
}

func NewRootCluster_AdminMaster_availableModels_Results(s *capnp.Segment) (Cluster_AdminMaster_availableModels_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_AdminMaster_availableModels_Results(st), err
}

func ReadRootCluster_AdminMaster_availableModels_Results(msg *capnp.Message) (Cluster_AdminMaster_availableModels_Results, error) {
	root, err := msg.Root()
	return Cluster_AdminMaster_availableModels_Results(root.Struct()), err
}

func (s Cluster_AdminMaster_availableModels_Results) String() string {
	str, _ := text.Marshal(0xd4bece01a7c4008f, capnp.Struct(s))
	return str
}

func (s Cluster_AdminMaster_availableModels_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_AdminMaster_availableModels_Results) DecodeFromPtr(p capnp.Ptr) Cluster_AdminMaster_availableModels_Results {
	return Cluster_AdminMaster_availableModels_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_AdminMaster_availableModels_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_AdminMaster_availableModels_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_AdminMaster_availableModels_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_AdminMaster_availableModels_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_AdminMaster_availableModels_Results) Factories() (Cluster_ModelInstanceFactory_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Cluster_ModelInstanceFactory_List(p.List()), err
}

func (s Cluster_AdminMaster_availableModels_Results) HasFactories() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_AdminMaster_availableModels_Results) SetFactories(v Cluster_ModelInstanceFactory_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFactories sets the factories field to a newly
// allocated Cluster_ModelInstanceFactory_List, preferring placement in s's segment.
func (s Cluster_AdminMaster_availableModels_Results) NewFactories(n int32) (Cluster_ModelInstanceFactory_List, error) {
	l, err := NewCluster_ModelInstanceFactory_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Cluster_ModelInstanceFactory_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Cluster_AdminMaster_availableModels_Results_List is a list of Cluster_AdminMaster_availableModels_Results.
type Cluster_AdminMaster_availableModels_Results_List = capnp.StructList[Cluster_AdminMaster_availableModels_Results]

// NewCluster_AdminMaster_availableModels_Results creates a new list of Cluster_AdminMaster_availableModels_Results.
func NewCluster_AdminMaster_availableModels_Results_List(s *capnp.Segment, sz int32) (Cluster_AdminMaster_availableModels_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_AdminMaster_availableModels_Results](l), err
}

// Cluster_AdminMaster_availableModels_Results_Future is a wrapper for a Cluster_AdminMaster_availableModels_Results promised by a client call.
type Cluster_AdminMaster_availableModels_Results_Future struct{ *capnp.Future }

func (f Cluster_AdminMaster_availableModels_Results_Future) Struct() (Cluster_AdminMaster_availableModels_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_AdminMaster_availableModels_Results(p.Struct()), err
}

type Cluster_UserMaster capnp.Client

// Cluster_UserMaster_TypeID is the unique identifier for the type Cluster_UserMaster.
const Cluster_UserMaster_TypeID = 0xec42c6df28354b60

func (c Cluster_UserMaster) AvailableModels(ctx context.Context, params func(Cluster_UserMaster_availableModels_Params) error) (Cluster_UserMaster_availableModels_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xec42c6df28354b60,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.UserMaster",
			MethodName:    "availableModels",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_UserMaster_availableModels_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_UserMaster_availableModels_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_UserMaster) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Cluster_UserMaster) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cluster_UserMaster) String() string {
	return "Cluster_UserMaster(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cluster_UserMaster) AddRef() Cluster_UserMaster {
	return Cluster_UserMaster(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cluster_UserMaster) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cluster_UserMaster) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cluster_UserMaster) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cluster_UserMaster) DecodeFromPtr(p capnp.Ptr) Cluster_UserMaster {
	return Cluster_UserMaster(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cluster_UserMaster) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cluster_UserMaster) IsSame(other Cluster_UserMaster) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cluster_UserMaster) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cluster_UserMaster) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cluster_UserMaster_Server is a Cluster_UserMaster with a local implementation.
type Cluster_UserMaster_Server interface {
	AvailableModels(context.Context, Cluster_UserMaster_availableModels) error

	Info(context.Context, common.Identifiable_info) error
}

// Cluster_UserMaster_NewServer creates a new Server from an implementation of Cluster_UserMaster_Server.
func Cluster_UserMaster_NewServer(s Cluster_UserMaster_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_UserMaster_Methods(nil, s), s, c)
}

// Cluster_UserMaster_ServerToClient creates a new Client from an implementation of Cluster_UserMaster_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_UserMaster_ServerToClient(s Cluster_UserMaster_Server) Cluster_UserMaster {
	return Cluster_UserMaster(capnp.NewClient(Cluster_UserMaster_NewServer(s)))
}

// Cluster_UserMaster_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_UserMaster_Methods(methods []server.Method, s Cluster_UserMaster_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xec42c6df28354b60,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.UserMaster",
			MethodName:    "availableModels",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AvailableModels(ctx, Cluster_UserMaster_availableModels{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Cluster_UserMaster_availableModels holds the state for a server call to Cluster_UserMaster.availableModels.
// See server.Call for documentation.
type Cluster_UserMaster_availableModels struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_UserMaster_availableModels) Args() Cluster_UserMaster_availableModels_Params {
	return Cluster_UserMaster_availableModels_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_UserMaster_availableModels) AllocResults() (Cluster_UserMaster_availableModels_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_UserMaster_availableModels_Results(r), err
}

// Cluster_UserMaster_List is a list of Cluster_UserMaster.
type Cluster_UserMaster_List = capnp.CapList[Cluster_UserMaster]

// NewCluster_UserMaster_List creates a new list of Cluster_UserMaster.
func NewCluster_UserMaster_List(s *capnp.Segment, sz int32) (Cluster_UserMaster_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cluster_UserMaster](l), err
}

type Cluster_UserMaster_availableModels_Params capnp.Struct

// Cluster_UserMaster_availableModels_Params_TypeID is the unique identifier for the type Cluster_UserMaster_availableModels_Params.
const Cluster_UserMaster_availableModels_Params_TypeID = 0x9a80efc085eae065

func NewCluster_UserMaster_availableModels_Params(s *capnp.Segment) (Cluster_UserMaster_availableModels_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_UserMaster_availableModels_Params(st), err
}

func NewRootCluster_UserMaster_availableModels_Params(s *capnp.Segment) (Cluster_UserMaster_availableModels_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_UserMaster_availableModels_Params(st), err
}

func ReadRootCluster_UserMaster_availableModels_Params(msg *capnp.Message) (Cluster_UserMaster_availableModels_Params, error) {
	root, err := msg.Root()
	return Cluster_UserMaster_availableModels_Params(root.Struct()), err
}

func (s Cluster_UserMaster_availableModels_Params) String() string {
	str, _ := text.Marshal(0x9a80efc085eae065, capnp.Struct(s))
	return str
}

func (s Cluster_UserMaster_availableModels_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_UserMaster_availableModels_Params) DecodeFromPtr(p capnp.Ptr) Cluster_UserMaster_availableModels_Params {
	return Cluster_UserMaster_availableModels_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_UserMaster_availableModels_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_UserMaster_availableModels_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_UserMaster_availableModels_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_UserMaster_availableModels_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_UserMaster_availableModels_Params_List is a list of Cluster_UserMaster_availableModels_Params.
type Cluster_UserMaster_availableModels_Params_List = capnp.StructList[Cluster_UserMaster_availableModels_Params]

// NewCluster_UserMaster_availableModels_Params creates a new list of Cluster_UserMaster_availableModels_Params.
func NewCluster_UserMaster_availableModels_Params_List(s *capnp.Segment, sz int32) (Cluster_UserMaster_availableModels_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_UserMaster_availableModels_Params](l), err
}

// Cluster_UserMaster_availableModels_Params_Future is a wrapper for a Cluster_UserMaster_availableModels_Params promised by a client call.
type Cluster_UserMaster_availableModels_Params_Future struct{ *capnp.Future }

func (f Cluster_UserMaster_availableModels_Params_Future) Struct() (Cluster_UserMaster_availableModels_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_UserMaster_availableModels_Params(p.Struct()), err
}

type Cluster_UserMaster_availableModels_Results capnp.Struct

// Cluster_UserMaster_availableModels_Results_TypeID is the unique identifier for the type Cluster_UserMaster_availableModels_Results.
const Cluster_UserMaster_availableModels_Results_TypeID = 0xb147e4fbf7081bda

func NewCluster_UserMaster_availableModels_Results(s *capnp.Segment) (Cluster_UserMaster_availableModels_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_UserMaster_availableModels_Results(st), err
}

func NewRootCluster_UserMaster_availableModels_Results(s *capnp.Segment) (Cluster_UserMaster_availableModels_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_UserMaster_availableModels_Results(st), err
}

func ReadRootCluster_UserMaster_availableModels_Results(msg *capnp.Message) (Cluster_UserMaster_availableModels_Results, error) {
	root, err := msg.Root()
	return Cluster_UserMaster_availableModels_Results(root.Struct()), err
}

func (s Cluster_UserMaster_availableModels_Results) String() string {
	str, _ := text.Marshal(0xb147e4fbf7081bda, capnp.Struct(s))
	return str
}

func (s Cluster_UserMaster_availableModels_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_UserMaster_availableModels_Results) DecodeFromPtr(p capnp.Ptr) Cluster_UserMaster_availableModels_Results {
	return Cluster_UserMaster_availableModels_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_UserMaster_availableModels_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_UserMaster_availableModels_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_UserMaster_availableModels_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_UserMaster_availableModels_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_UserMaster_availableModels_Results) Factories() (Cluster_ModelInstanceFactory_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Cluster_ModelInstanceFactory_List(p.List()), err
}

func (s Cluster_UserMaster_availableModels_Results) HasFactories() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_UserMaster_availableModels_Results) SetFactories(v Cluster_ModelInstanceFactory_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFactories sets the factories field to a newly
// allocated Cluster_ModelInstanceFactory_List, preferring placement in s's segment.
func (s Cluster_UserMaster_availableModels_Results) NewFactories(n int32) (Cluster_ModelInstanceFactory_List, error) {
	l, err := NewCluster_ModelInstanceFactory_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Cluster_ModelInstanceFactory_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Cluster_UserMaster_availableModels_Results_List is a list of Cluster_UserMaster_availableModels_Results.
type Cluster_UserMaster_availableModels_Results_List = capnp.StructList[Cluster_UserMaster_availableModels_Results]

// NewCluster_UserMaster_availableModels_Results creates a new list of Cluster_UserMaster_availableModels_Results.
func NewCluster_UserMaster_availableModels_Results_List(s *capnp.Segment, sz int32) (Cluster_UserMaster_availableModels_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_UserMaster_availableModels_Results](l), err
}

// Cluster_UserMaster_availableModels_Results_Future is a wrapper for a Cluster_UserMaster_availableModels_Results promised by a client call.
type Cluster_UserMaster_availableModels_Results_Future struct{ *capnp.Future }

func (f Cluster_UserMaster_availableModels_Results_Future) Struct() (Cluster_UserMaster_availableModels_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_UserMaster_availableModels_Results(p.Struct()), err
}

type Cluster_Runtime capnp.Client

// Cluster_Runtime_TypeID is the unique identifier for the type Cluster_Runtime.
const Cluster_Runtime_TypeID = 0xf849848fea5c4776

func (c Cluster_Runtime) RegisterModelInstanceFactory(ctx context.Context, params func(Cluster_Runtime_registerModelInstanceFactory_Params) error) (Cluster_Runtime_registerModelInstanceFactory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "registerModelInstanceFactory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Runtime_registerModelInstanceFactory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_Runtime_registerModelInstanceFactory_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_Runtime) AvailableModels(ctx context.Context, params func(Cluster_Runtime_availableModels_Params) error) (Cluster_Runtime_availableModels_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "availableModels",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Runtime_availableModels_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_Runtime_availableModels_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_Runtime) NumberOfCores(ctx context.Context, params func(Cluster_Runtime_numberOfCores_Params) error) (Cluster_Runtime_numberOfCores_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      2,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "numberOfCores",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Runtime_numberOfCores_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_Runtime_numberOfCores_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_Runtime) FreeNumberOfCores(ctx context.Context, params func(Cluster_Runtime_freeNumberOfCores_Params) error) (Cluster_Runtime_freeNumberOfCores_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      3,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "freeNumberOfCores",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Runtime_freeNumberOfCores_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_Runtime_freeNumberOfCores_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_Runtime) ReserveNumberOfCores(ctx context.Context, params func(Cluster_Runtime_reserveNumberOfCores_Params) error) (Cluster_Runtime_reserveNumberOfCores_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      4,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "reserveNumberOfCores",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_Runtime_reserveNumberOfCores_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_Runtime_reserveNumberOfCores_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_Runtime) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Cluster_Runtime) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cluster_Runtime) String() string {
	return "Cluster_Runtime(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cluster_Runtime) AddRef() Cluster_Runtime {
	return Cluster_Runtime(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cluster_Runtime) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cluster_Runtime) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cluster_Runtime) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cluster_Runtime) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime {
	return Cluster_Runtime(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cluster_Runtime) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cluster_Runtime) IsSame(other Cluster_Runtime) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cluster_Runtime) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cluster_Runtime) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cluster_Runtime_Server is a Cluster_Runtime with a local implementation.
type Cluster_Runtime_Server interface {
	RegisterModelInstanceFactory(context.Context, Cluster_Runtime_registerModelInstanceFactory) error

	AvailableModels(context.Context, Cluster_Runtime_availableModels) error

	NumberOfCores(context.Context, Cluster_Runtime_numberOfCores) error

	FreeNumberOfCores(context.Context, Cluster_Runtime_freeNumberOfCores) error

	ReserveNumberOfCores(context.Context, Cluster_Runtime_reserveNumberOfCores) error

	Info(context.Context, common.Identifiable_info) error
}

// Cluster_Runtime_NewServer creates a new Server from an implementation of Cluster_Runtime_Server.
func Cluster_Runtime_NewServer(s Cluster_Runtime_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_Runtime_Methods(nil, s), s, c)
}

// Cluster_Runtime_ServerToClient creates a new Client from an implementation of Cluster_Runtime_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_Runtime_ServerToClient(s Cluster_Runtime_Server) Cluster_Runtime {
	return Cluster_Runtime(capnp.NewClient(Cluster_Runtime_NewServer(s)))
}

// Cluster_Runtime_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_Runtime_Methods(methods []server.Method, s Cluster_Runtime_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "registerModelInstanceFactory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterModelInstanceFactory(ctx, Cluster_Runtime_registerModelInstanceFactory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "availableModels",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AvailableModels(ctx, Cluster_Runtime_availableModels{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      2,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "numberOfCores",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NumberOfCores(ctx, Cluster_Runtime_numberOfCores{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      3,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "freeNumberOfCores",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FreeNumberOfCores(ctx, Cluster_Runtime_freeNumberOfCores{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf849848fea5c4776,
			MethodID:      4,
			InterfaceName: "cluster_admin_service.capnp:Cluster.Runtime",
			MethodName:    "reserveNumberOfCores",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReserveNumberOfCores(ctx, Cluster_Runtime_reserveNumberOfCores{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Cluster_Runtime_registerModelInstanceFactory holds the state for a server call to Cluster_Runtime.registerModelInstanceFactory.
// See server.Call for documentation.
type Cluster_Runtime_registerModelInstanceFactory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Runtime_registerModelInstanceFactory) Args() Cluster_Runtime_registerModelInstanceFactory_Params {
	return Cluster_Runtime_registerModelInstanceFactory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_Runtime_registerModelInstanceFactory) AllocResults() (Cluster_Runtime_registerModelInstanceFactory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Runtime_registerModelInstanceFactory_Results(r), err
}

// Cluster_Runtime_availableModels holds the state for a server call to Cluster_Runtime.availableModels.
// See server.Call for documentation.
type Cluster_Runtime_availableModels struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Runtime_availableModels) Args() Cluster_Runtime_availableModels_Params {
	return Cluster_Runtime_availableModels_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_Runtime_availableModels) AllocResults() (Cluster_Runtime_availableModels_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Runtime_availableModels_Results(r), err
}

// Cluster_Runtime_numberOfCores holds the state for a server call to Cluster_Runtime.numberOfCores.
// See server.Call for documentation.
type Cluster_Runtime_numberOfCores struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Runtime_numberOfCores) Args() Cluster_Runtime_numberOfCores_Params {
	return Cluster_Runtime_numberOfCores_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_Runtime_numberOfCores) AllocResults() (Cluster_Runtime_numberOfCores_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_numberOfCores_Results(r), err
}

// Cluster_Runtime_freeNumberOfCores holds the state for a server call to Cluster_Runtime.freeNumberOfCores.
// See server.Call for documentation.
type Cluster_Runtime_freeNumberOfCores struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Runtime_freeNumberOfCores) Args() Cluster_Runtime_freeNumberOfCores_Params {
	return Cluster_Runtime_freeNumberOfCores_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_Runtime_freeNumberOfCores) AllocResults() (Cluster_Runtime_freeNumberOfCores_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_freeNumberOfCores_Results(r), err
}

// Cluster_Runtime_reserveNumberOfCores holds the state for a server call to Cluster_Runtime.reserveNumberOfCores.
// See server.Call for documentation.
type Cluster_Runtime_reserveNumberOfCores struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_Runtime_reserveNumberOfCores) Args() Cluster_Runtime_reserveNumberOfCores_Params {
	return Cluster_Runtime_reserveNumberOfCores_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_Runtime_reserveNumberOfCores) AllocResults() (Cluster_Runtime_reserveNumberOfCores_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_reserveNumberOfCores_Results(r), err
}

// Cluster_Runtime_List is a list of Cluster_Runtime.
type Cluster_Runtime_List = capnp.CapList[Cluster_Runtime]

// NewCluster_Runtime_List creates a new list of Cluster_Runtime.
func NewCluster_Runtime_List(s *capnp.Segment, sz int32) (Cluster_Runtime_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cluster_Runtime](l), err
}

type Cluster_Runtime_registerModelInstanceFactory_Params capnp.Struct

// Cluster_Runtime_registerModelInstanceFactory_Params_TypeID is the unique identifier for the type Cluster_Runtime_registerModelInstanceFactory_Params.
const Cluster_Runtime_registerModelInstanceFactory_Params_TypeID = 0xc3668a8f7946ce88

func NewCluster_Runtime_registerModelInstanceFactory_Params(s *capnp.Segment) (Cluster_Runtime_registerModelInstanceFactory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_Runtime_registerModelInstanceFactory_Params(st), err
}

func NewRootCluster_Runtime_registerModelInstanceFactory_Params(s *capnp.Segment) (Cluster_Runtime_registerModelInstanceFactory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_Runtime_registerModelInstanceFactory_Params(st), err
}

func ReadRootCluster_Runtime_registerModelInstanceFactory_Params(msg *capnp.Message) (Cluster_Runtime_registerModelInstanceFactory_Params, error) {
	root, err := msg.Root()
	return Cluster_Runtime_registerModelInstanceFactory_Params(root.Struct()), err
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) String() string {
	str, _ := text.Marshal(0xc3668a8f7946ce88, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_registerModelInstanceFactory_Params) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_registerModelInstanceFactory_Params {
	return Cluster_Runtime_registerModelInstanceFactory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_registerModelInstanceFactory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_registerModelInstanceFactory_Params) AModelId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) HasAModelId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) AModelIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) SetAModelId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) AFactory() Cluster_ModelInstanceFactory {
	p, _ := capnp.Struct(s).Ptr(1)
	return Cluster_ModelInstanceFactory(p.Interface().Client())
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) HasAFactory() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Cluster_Runtime_registerModelInstanceFactory_Params) SetAFactory(v Cluster_ModelInstanceFactory) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(1, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(1, in.ToPtr())
}

// Cluster_Runtime_registerModelInstanceFactory_Params_List is a list of Cluster_Runtime_registerModelInstanceFactory_Params.
type Cluster_Runtime_registerModelInstanceFactory_Params_List = capnp.StructList[Cluster_Runtime_registerModelInstanceFactory_Params]

// NewCluster_Runtime_registerModelInstanceFactory_Params creates a new list of Cluster_Runtime_registerModelInstanceFactory_Params.
func NewCluster_Runtime_registerModelInstanceFactory_Params_List(s *capnp.Segment, sz int32) (Cluster_Runtime_registerModelInstanceFactory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Cluster_Runtime_registerModelInstanceFactory_Params](l), err
}

// Cluster_Runtime_registerModelInstanceFactory_Params_Future is a wrapper for a Cluster_Runtime_registerModelInstanceFactory_Params promised by a client call.
type Cluster_Runtime_registerModelInstanceFactory_Params_Future struct{ *capnp.Future }

func (f Cluster_Runtime_registerModelInstanceFactory_Params_Future) Struct() (Cluster_Runtime_registerModelInstanceFactory_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_registerModelInstanceFactory_Params(p.Struct()), err
}
func (p Cluster_Runtime_registerModelInstanceFactory_Params_Future) AFactory() Cluster_ModelInstanceFactory {
	return Cluster_ModelInstanceFactory(p.Future.Field(1, nil).Client())
}

type Cluster_Runtime_registerModelInstanceFactory_Results capnp.Struct

// Cluster_Runtime_registerModelInstanceFactory_Results_TypeID is the unique identifier for the type Cluster_Runtime_registerModelInstanceFactory_Results.
const Cluster_Runtime_registerModelInstanceFactory_Results_TypeID = 0xa8dfab7b88664bd4

func NewCluster_Runtime_registerModelInstanceFactory_Results(s *capnp.Segment) (Cluster_Runtime_registerModelInstanceFactory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Runtime_registerModelInstanceFactory_Results(st), err
}

func NewRootCluster_Runtime_registerModelInstanceFactory_Results(s *capnp.Segment) (Cluster_Runtime_registerModelInstanceFactory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Runtime_registerModelInstanceFactory_Results(st), err
}

func ReadRootCluster_Runtime_registerModelInstanceFactory_Results(msg *capnp.Message) (Cluster_Runtime_registerModelInstanceFactory_Results, error) {
	root, err := msg.Root()
	return Cluster_Runtime_registerModelInstanceFactory_Results(root.Struct()), err
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) String() string {
	str, _ := text.Marshal(0xa8dfab7b88664bd4, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_registerModelInstanceFactory_Results) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_registerModelInstanceFactory_Results {
	return Cluster_Runtime_registerModelInstanceFactory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_registerModelInstanceFactory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_registerModelInstanceFactory_Results) Unregister() Cluster_Unregister {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_Unregister(p.Interface().Client())
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) HasUnregister() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_Runtime_registerModelInstanceFactory_Results) SetUnregister(v Cluster_Unregister) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_Runtime_registerModelInstanceFactory_Results_List is a list of Cluster_Runtime_registerModelInstanceFactory_Results.
type Cluster_Runtime_registerModelInstanceFactory_Results_List = capnp.StructList[Cluster_Runtime_registerModelInstanceFactory_Results]

// NewCluster_Runtime_registerModelInstanceFactory_Results creates a new list of Cluster_Runtime_registerModelInstanceFactory_Results.
func NewCluster_Runtime_registerModelInstanceFactory_Results_List(s *capnp.Segment, sz int32) (Cluster_Runtime_registerModelInstanceFactory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_Runtime_registerModelInstanceFactory_Results](l), err
}

// Cluster_Runtime_registerModelInstanceFactory_Results_Future is a wrapper for a Cluster_Runtime_registerModelInstanceFactory_Results promised by a client call.
type Cluster_Runtime_registerModelInstanceFactory_Results_Future struct{ *capnp.Future }

func (f Cluster_Runtime_registerModelInstanceFactory_Results_Future) Struct() (Cluster_Runtime_registerModelInstanceFactory_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_registerModelInstanceFactory_Results(p.Struct()), err
}
func (p Cluster_Runtime_registerModelInstanceFactory_Results_Future) Unregister() Cluster_Unregister {
	return Cluster_Unregister(p.Future.Field(0, nil).Client())
}

type Cluster_Runtime_availableModels_Params capnp.Struct

// Cluster_Runtime_availableModels_Params_TypeID is the unique identifier for the type Cluster_Runtime_availableModels_Params.
const Cluster_Runtime_availableModels_Params_TypeID = 0xfe35aabe121add1a

func NewCluster_Runtime_availableModels_Params(s *capnp.Segment) (Cluster_Runtime_availableModels_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Runtime_availableModels_Params(st), err
}

func NewRootCluster_Runtime_availableModels_Params(s *capnp.Segment) (Cluster_Runtime_availableModels_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Runtime_availableModels_Params(st), err
}

func ReadRootCluster_Runtime_availableModels_Params(msg *capnp.Message) (Cluster_Runtime_availableModels_Params, error) {
	root, err := msg.Root()
	return Cluster_Runtime_availableModels_Params(root.Struct()), err
}

func (s Cluster_Runtime_availableModels_Params) String() string {
	str, _ := text.Marshal(0xfe35aabe121add1a, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_availableModels_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_availableModels_Params) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_availableModels_Params {
	return Cluster_Runtime_availableModels_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_availableModels_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_availableModels_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_availableModels_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_availableModels_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_Runtime_availableModels_Params_List is a list of Cluster_Runtime_availableModels_Params.
type Cluster_Runtime_availableModels_Params_List = capnp.StructList[Cluster_Runtime_availableModels_Params]

// NewCluster_Runtime_availableModels_Params creates a new list of Cluster_Runtime_availableModels_Params.
func NewCluster_Runtime_availableModels_Params_List(s *capnp.Segment, sz int32) (Cluster_Runtime_availableModels_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Runtime_availableModels_Params](l), err
}

// Cluster_Runtime_availableModels_Params_Future is a wrapper for a Cluster_Runtime_availableModels_Params promised by a client call.
type Cluster_Runtime_availableModels_Params_Future struct{ *capnp.Future }

func (f Cluster_Runtime_availableModels_Params_Future) Struct() (Cluster_Runtime_availableModels_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_availableModels_Params(p.Struct()), err
}

type Cluster_Runtime_availableModels_Results capnp.Struct

// Cluster_Runtime_availableModels_Results_TypeID is the unique identifier for the type Cluster_Runtime_availableModels_Results.
const Cluster_Runtime_availableModels_Results_TypeID = 0x93bdb3f5b6eecd29

func NewCluster_Runtime_availableModels_Results(s *capnp.Segment) (Cluster_Runtime_availableModels_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Runtime_availableModels_Results(st), err
}

func NewRootCluster_Runtime_availableModels_Results(s *capnp.Segment) (Cluster_Runtime_availableModels_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_Runtime_availableModels_Results(st), err
}

func ReadRootCluster_Runtime_availableModels_Results(msg *capnp.Message) (Cluster_Runtime_availableModels_Results, error) {
	root, err := msg.Root()
	return Cluster_Runtime_availableModels_Results(root.Struct()), err
}

func (s Cluster_Runtime_availableModels_Results) String() string {
	str, _ := text.Marshal(0x93bdb3f5b6eecd29, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_availableModels_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_availableModels_Results) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_availableModels_Results {
	return Cluster_Runtime_availableModels_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_availableModels_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_availableModels_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_availableModels_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_availableModels_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_availableModels_Results) Factories() (Cluster_ModelInstanceFactory_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Cluster_ModelInstanceFactory_List(p.List()), err
}

func (s Cluster_Runtime_availableModels_Results) HasFactories() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_Runtime_availableModels_Results) SetFactories(v Cluster_ModelInstanceFactory_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFactories sets the factories field to a newly
// allocated Cluster_ModelInstanceFactory_List, preferring placement in s's segment.
func (s Cluster_Runtime_availableModels_Results) NewFactories(n int32) (Cluster_ModelInstanceFactory_List, error) {
	l, err := NewCluster_ModelInstanceFactory_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Cluster_ModelInstanceFactory_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Cluster_Runtime_availableModels_Results_List is a list of Cluster_Runtime_availableModels_Results.
type Cluster_Runtime_availableModels_Results_List = capnp.StructList[Cluster_Runtime_availableModels_Results]

// NewCluster_Runtime_availableModels_Results creates a new list of Cluster_Runtime_availableModels_Results.
func NewCluster_Runtime_availableModels_Results_List(s *capnp.Segment, sz int32) (Cluster_Runtime_availableModels_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_Runtime_availableModels_Results](l), err
}

// Cluster_Runtime_availableModels_Results_Future is a wrapper for a Cluster_Runtime_availableModels_Results promised by a client call.
type Cluster_Runtime_availableModels_Results_Future struct{ *capnp.Future }

func (f Cluster_Runtime_availableModels_Results_Future) Struct() (Cluster_Runtime_availableModels_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_availableModels_Results(p.Struct()), err
}

type Cluster_Runtime_numberOfCores_Params capnp.Struct

// Cluster_Runtime_numberOfCores_Params_TypeID is the unique identifier for the type Cluster_Runtime_numberOfCores_Params.
const Cluster_Runtime_numberOfCores_Params_TypeID = 0x9b3d2c0c5054766c

func NewCluster_Runtime_numberOfCores_Params(s *capnp.Segment) (Cluster_Runtime_numberOfCores_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Runtime_numberOfCores_Params(st), err
}

func NewRootCluster_Runtime_numberOfCores_Params(s *capnp.Segment) (Cluster_Runtime_numberOfCores_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Runtime_numberOfCores_Params(st), err
}

func ReadRootCluster_Runtime_numberOfCores_Params(msg *capnp.Message) (Cluster_Runtime_numberOfCores_Params, error) {
	root, err := msg.Root()
	return Cluster_Runtime_numberOfCores_Params(root.Struct()), err
}

func (s Cluster_Runtime_numberOfCores_Params) String() string {
	str, _ := text.Marshal(0x9b3d2c0c5054766c, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_numberOfCores_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_numberOfCores_Params) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_numberOfCores_Params {
	return Cluster_Runtime_numberOfCores_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_numberOfCores_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_numberOfCores_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_numberOfCores_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_numberOfCores_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_Runtime_numberOfCores_Params_List is a list of Cluster_Runtime_numberOfCores_Params.
type Cluster_Runtime_numberOfCores_Params_List = capnp.StructList[Cluster_Runtime_numberOfCores_Params]

// NewCluster_Runtime_numberOfCores_Params creates a new list of Cluster_Runtime_numberOfCores_Params.
func NewCluster_Runtime_numberOfCores_Params_List(s *capnp.Segment, sz int32) (Cluster_Runtime_numberOfCores_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Runtime_numberOfCores_Params](l), err
}

// Cluster_Runtime_numberOfCores_Params_Future is a wrapper for a Cluster_Runtime_numberOfCores_Params promised by a client call.
type Cluster_Runtime_numberOfCores_Params_Future struct{ *capnp.Future }

func (f Cluster_Runtime_numberOfCores_Params_Future) Struct() (Cluster_Runtime_numberOfCores_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_numberOfCores_Params(p.Struct()), err
}

type Cluster_Runtime_numberOfCores_Results capnp.Struct

// Cluster_Runtime_numberOfCores_Results_TypeID is the unique identifier for the type Cluster_Runtime_numberOfCores_Results.
const Cluster_Runtime_numberOfCores_Results_TypeID = 0xe6b2589f9a250d7f

func NewCluster_Runtime_numberOfCores_Results(s *capnp.Segment) (Cluster_Runtime_numberOfCores_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_numberOfCores_Results(st), err
}

func NewRootCluster_Runtime_numberOfCores_Results(s *capnp.Segment) (Cluster_Runtime_numberOfCores_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_numberOfCores_Results(st), err
}

func ReadRootCluster_Runtime_numberOfCores_Results(msg *capnp.Message) (Cluster_Runtime_numberOfCores_Results, error) {
	root, err := msg.Root()
	return Cluster_Runtime_numberOfCores_Results(root.Struct()), err
}

func (s Cluster_Runtime_numberOfCores_Results) String() string {
	str, _ := text.Marshal(0xe6b2589f9a250d7f, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_numberOfCores_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_numberOfCores_Results) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_numberOfCores_Results {
	return Cluster_Runtime_numberOfCores_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_numberOfCores_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_numberOfCores_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_numberOfCores_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_numberOfCores_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_numberOfCores_Results) Cores() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_Runtime_numberOfCores_Results) SetCores(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Cluster_Runtime_numberOfCores_Results_List is a list of Cluster_Runtime_numberOfCores_Results.
type Cluster_Runtime_numberOfCores_Results_List = capnp.StructList[Cluster_Runtime_numberOfCores_Results]

// NewCluster_Runtime_numberOfCores_Results creates a new list of Cluster_Runtime_numberOfCores_Results.
func NewCluster_Runtime_numberOfCores_Results_List(s *capnp.Segment, sz int32) (Cluster_Runtime_numberOfCores_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Runtime_numberOfCores_Results](l), err
}

// Cluster_Runtime_numberOfCores_Results_Future is a wrapper for a Cluster_Runtime_numberOfCores_Results promised by a client call.
type Cluster_Runtime_numberOfCores_Results_Future struct{ *capnp.Future }

func (f Cluster_Runtime_numberOfCores_Results_Future) Struct() (Cluster_Runtime_numberOfCores_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_numberOfCores_Results(p.Struct()), err
}

type Cluster_Runtime_freeNumberOfCores_Params capnp.Struct

// Cluster_Runtime_freeNumberOfCores_Params_TypeID is the unique identifier for the type Cluster_Runtime_freeNumberOfCores_Params.
const Cluster_Runtime_freeNumberOfCores_Params_TypeID = 0xc224b7ff6089b64e

func NewCluster_Runtime_freeNumberOfCores_Params(s *capnp.Segment) (Cluster_Runtime_freeNumberOfCores_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Runtime_freeNumberOfCores_Params(st), err
}

func NewRootCluster_Runtime_freeNumberOfCores_Params(s *capnp.Segment) (Cluster_Runtime_freeNumberOfCores_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_Runtime_freeNumberOfCores_Params(st), err
}

func ReadRootCluster_Runtime_freeNumberOfCores_Params(msg *capnp.Message) (Cluster_Runtime_freeNumberOfCores_Params, error) {
	root, err := msg.Root()
	return Cluster_Runtime_freeNumberOfCores_Params(root.Struct()), err
}

func (s Cluster_Runtime_freeNumberOfCores_Params) String() string {
	str, _ := text.Marshal(0xc224b7ff6089b64e, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_freeNumberOfCores_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_freeNumberOfCores_Params) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_freeNumberOfCores_Params {
	return Cluster_Runtime_freeNumberOfCores_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_freeNumberOfCores_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_freeNumberOfCores_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_freeNumberOfCores_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_freeNumberOfCores_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_Runtime_freeNumberOfCores_Params_List is a list of Cluster_Runtime_freeNumberOfCores_Params.
type Cluster_Runtime_freeNumberOfCores_Params_List = capnp.StructList[Cluster_Runtime_freeNumberOfCores_Params]

// NewCluster_Runtime_freeNumberOfCores_Params creates a new list of Cluster_Runtime_freeNumberOfCores_Params.
func NewCluster_Runtime_freeNumberOfCores_Params_List(s *capnp.Segment, sz int32) (Cluster_Runtime_freeNumberOfCores_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Runtime_freeNumberOfCores_Params](l), err
}

// Cluster_Runtime_freeNumberOfCores_Params_Future is a wrapper for a Cluster_Runtime_freeNumberOfCores_Params promised by a client call.
type Cluster_Runtime_freeNumberOfCores_Params_Future struct{ *capnp.Future }

func (f Cluster_Runtime_freeNumberOfCores_Params_Future) Struct() (Cluster_Runtime_freeNumberOfCores_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_freeNumberOfCores_Params(p.Struct()), err
}

type Cluster_Runtime_freeNumberOfCores_Results capnp.Struct

// Cluster_Runtime_freeNumberOfCores_Results_TypeID is the unique identifier for the type Cluster_Runtime_freeNumberOfCores_Results.
const Cluster_Runtime_freeNumberOfCores_Results_TypeID = 0xf004ae32302172c6

func NewCluster_Runtime_freeNumberOfCores_Results(s *capnp.Segment) (Cluster_Runtime_freeNumberOfCores_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_freeNumberOfCores_Results(st), err
}

func NewRootCluster_Runtime_freeNumberOfCores_Results(s *capnp.Segment) (Cluster_Runtime_freeNumberOfCores_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_freeNumberOfCores_Results(st), err
}

func ReadRootCluster_Runtime_freeNumberOfCores_Results(msg *capnp.Message) (Cluster_Runtime_freeNumberOfCores_Results, error) {
	root, err := msg.Root()
	return Cluster_Runtime_freeNumberOfCores_Results(root.Struct()), err
}

func (s Cluster_Runtime_freeNumberOfCores_Results) String() string {
	str, _ := text.Marshal(0xf004ae32302172c6, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_freeNumberOfCores_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_freeNumberOfCores_Results) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_freeNumberOfCores_Results {
	return Cluster_Runtime_freeNumberOfCores_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_freeNumberOfCores_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_freeNumberOfCores_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_freeNumberOfCores_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_freeNumberOfCores_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_freeNumberOfCores_Results) Cores() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_Runtime_freeNumberOfCores_Results) SetCores(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Cluster_Runtime_freeNumberOfCores_Results_List is a list of Cluster_Runtime_freeNumberOfCores_Results.
type Cluster_Runtime_freeNumberOfCores_Results_List = capnp.StructList[Cluster_Runtime_freeNumberOfCores_Results]

// NewCluster_Runtime_freeNumberOfCores_Results creates a new list of Cluster_Runtime_freeNumberOfCores_Results.
func NewCluster_Runtime_freeNumberOfCores_Results_List(s *capnp.Segment, sz int32) (Cluster_Runtime_freeNumberOfCores_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Runtime_freeNumberOfCores_Results](l), err
}

// Cluster_Runtime_freeNumberOfCores_Results_Future is a wrapper for a Cluster_Runtime_freeNumberOfCores_Results promised by a client call.
type Cluster_Runtime_freeNumberOfCores_Results_Future struct{ *capnp.Future }

func (f Cluster_Runtime_freeNumberOfCores_Results_Future) Struct() (Cluster_Runtime_freeNumberOfCores_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_freeNumberOfCores_Results(p.Struct()), err
}

type Cluster_Runtime_reserveNumberOfCores_Params capnp.Struct

// Cluster_Runtime_reserveNumberOfCores_Params_TypeID is the unique identifier for the type Cluster_Runtime_reserveNumberOfCores_Params.
const Cluster_Runtime_reserveNumberOfCores_Params_TypeID = 0xb4d00b302a119de9

func NewCluster_Runtime_reserveNumberOfCores_Params(s *capnp.Segment) (Cluster_Runtime_reserveNumberOfCores_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_Runtime_reserveNumberOfCores_Params(st), err
}

func NewRootCluster_Runtime_reserveNumberOfCores_Params(s *capnp.Segment) (Cluster_Runtime_reserveNumberOfCores_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Cluster_Runtime_reserveNumberOfCores_Params(st), err
}

func ReadRootCluster_Runtime_reserveNumberOfCores_Params(msg *capnp.Message) (Cluster_Runtime_reserveNumberOfCores_Params, error) {
	root, err := msg.Root()
	return Cluster_Runtime_reserveNumberOfCores_Params(root.Struct()), err
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) String() string {
	str, _ := text.Marshal(0xb4d00b302a119de9, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_reserveNumberOfCores_Params) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_reserveNumberOfCores_Params {
	return Cluster_Runtime_reserveNumberOfCores_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_reserveNumberOfCores_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_reserveNumberOfCores_Params) ReserveCores() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) SetReserveCores(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) AModelId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) HasAModelId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) AModelIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_Runtime_reserveNumberOfCores_Params) SetAModelId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Cluster_Runtime_reserveNumberOfCores_Params_List is a list of Cluster_Runtime_reserveNumberOfCores_Params.
type Cluster_Runtime_reserveNumberOfCores_Params_List = capnp.StructList[Cluster_Runtime_reserveNumberOfCores_Params]

// NewCluster_Runtime_reserveNumberOfCores_Params creates a new list of Cluster_Runtime_reserveNumberOfCores_Params.
func NewCluster_Runtime_reserveNumberOfCores_Params_List(s *capnp.Segment, sz int32) (Cluster_Runtime_reserveNumberOfCores_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_Runtime_reserveNumberOfCores_Params](l), err
}

// Cluster_Runtime_reserveNumberOfCores_Params_Future is a wrapper for a Cluster_Runtime_reserveNumberOfCores_Params promised by a client call.
type Cluster_Runtime_reserveNumberOfCores_Params_Future struct{ *capnp.Future }

func (f Cluster_Runtime_reserveNumberOfCores_Params_Future) Struct() (Cluster_Runtime_reserveNumberOfCores_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_reserveNumberOfCores_Params(p.Struct()), err
}

type Cluster_Runtime_reserveNumberOfCores_Results capnp.Struct

// Cluster_Runtime_reserveNumberOfCores_Results_TypeID is the unique identifier for the type Cluster_Runtime_reserveNumberOfCores_Results.
const Cluster_Runtime_reserveNumberOfCores_Results_TypeID = 0xbcd8dd8cea624cbb

func NewCluster_Runtime_reserveNumberOfCores_Results(s *capnp.Segment) (Cluster_Runtime_reserveNumberOfCores_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_reserveNumberOfCores_Results(st), err
}

func NewRootCluster_Runtime_reserveNumberOfCores_Results(s *capnp.Segment) (Cluster_Runtime_reserveNumberOfCores_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_Runtime_reserveNumberOfCores_Results(st), err
}

func ReadRootCluster_Runtime_reserveNumberOfCores_Results(msg *capnp.Message) (Cluster_Runtime_reserveNumberOfCores_Results, error) {
	root, err := msg.Root()
	return Cluster_Runtime_reserveNumberOfCores_Results(root.Struct()), err
}

func (s Cluster_Runtime_reserveNumberOfCores_Results) String() string {
	str, _ := text.Marshal(0xbcd8dd8cea624cbb, capnp.Struct(s))
	return str
}

func (s Cluster_Runtime_reserveNumberOfCores_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_Runtime_reserveNumberOfCores_Results) DecodeFromPtr(p capnp.Ptr) Cluster_Runtime_reserveNumberOfCores_Results {
	return Cluster_Runtime_reserveNumberOfCores_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_Runtime_reserveNumberOfCores_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_Runtime_reserveNumberOfCores_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_Runtime_reserveNumberOfCores_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_Runtime_reserveNumberOfCores_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_Runtime_reserveNumberOfCores_Results) ReservedCores() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_Runtime_reserveNumberOfCores_Results) SetReservedCores(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Cluster_Runtime_reserveNumberOfCores_Results_List is a list of Cluster_Runtime_reserveNumberOfCores_Results.
type Cluster_Runtime_reserveNumberOfCores_Results_List = capnp.StructList[Cluster_Runtime_reserveNumberOfCores_Results]

// NewCluster_Runtime_reserveNumberOfCores_Results creates a new list of Cluster_Runtime_reserveNumberOfCores_Results.
func NewCluster_Runtime_reserveNumberOfCores_Results_List(s *capnp.Segment, sz int32) (Cluster_Runtime_reserveNumberOfCores_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_Runtime_reserveNumberOfCores_Results](l), err
}

// Cluster_Runtime_reserveNumberOfCores_Results_Future is a wrapper for a Cluster_Runtime_reserveNumberOfCores_Results promised by a client call.
type Cluster_Runtime_reserveNumberOfCores_Results_Future struct{ *capnp.Future }

func (f Cluster_Runtime_reserveNumberOfCores_Results_Future) Struct() (Cluster_Runtime_reserveNumberOfCores_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_Runtime_reserveNumberOfCores_Results(p.Struct()), err
}

type Cluster_ZmqPipelineAddresses capnp.Struct

// Cluster_ZmqPipelineAddresses_TypeID is the unique identifier for the type Cluster_ZmqPipelineAddresses.
const Cluster_ZmqPipelineAddresses_TypeID = 0xc9034ba2becc2a64

func NewCluster_ZmqPipelineAddresses(s *capnp.Segment) (Cluster_ZmqPipelineAddresses, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_ZmqPipelineAddresses(st), err
}

func NewRootCluster_ZmqPipelineAddresses(s *capnp.Segment) (Cluster_ZmqPipelineAddresses, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_ZmqPipelineAddresses(st), err
}

func ReadRootCluster_ZmqPipelineAddresses(msg *capnp.Message) (Cluster_ZmqPipelineAddresses, error) {
	root, err := msg.Root()
	return Cluster_ZmqPipelineAddresses(root.Struct()), err
}

func (s Cluster_ZmqPipelineAddresses) String() string {
	str, _ := text.Marshal(0xc9034ba2becc2a64, capnp.Struct(s))
	return str
}

func (s Cluster_ZmqPipelineAddresses) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ZmqPipelineAddresses) DecodeFromPtr(p capnp.Ptr) Cluster_ZmqPipelineAddresses {
	return Cluster_ZmqPipelineAddresses(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ZmqPipelineAddresses) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ZmqPipelineAddresses) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ZmqPipelineAddresses) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ZmqPipelineAddresses) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ZmqPipelineAddresses) Input() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cluster_ZmqPipelineAddresses) HasInput() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ZmqPipelineAddresses) InputBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_ZmqPipelineAddresses) SetInput(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Cluster_ZmqPipelineAddresses) Output() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Cluster_ZmqPipelineAddresses) HasOutput() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Cluster_ZmqPipelineAddresses) OutputBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Cluster_ZmqPipelineAddresses) SetOutput(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Cluster_ZmqPipelineAddresses_List is a list of Cluster_ZmqPipelineAddresses.
type Cluster_ZmqPipelineAddresses_List = capnp.StructList[Cluster_ZmqPipelineAddresses]

// NewCluster_ZmqPipelineAddresses creates a new list of Cluster_ZmqPipelineAddresses.
func NewCluster_ZmqPipelineAddresses_List(s *capnp.Segment, sz int32) (Cluster_ZmqPipelineAddresses_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Cluster_ZmqPipelineAddresses](l), err
}

// Cluster_ZmqPipelineAddresses_Future is a wrapper for a Cluster_ZmqPipelineAddresses promised by a client call.
type Cluster_ZmqPipelineAddresses_Future struct{ *capnp.Future }

func (f Cluster_ZmqPipelineAddresses_Future) Struct() (Cluster_ZmqPipelineAddresses, error) {
	p, err := f.Future.Ptr()
	return Cluster_ZmqPipelineAddresses(p.Struct()), err
}

type Cluster_ValueHolder capnp.Client

// Cluster_ValueHolder_TypeID is the unique identifier for the type Cluster_ValueHolder.
const Cluster_ValueHolder_TypeID = 0xd6acf080dcf2b4c8

func (c Cluster_ValueHolder) Value(ctx context.Context, params func(Cluster_ValueHolder_value_Params) error) (Cluster_ValueHolder_value_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd6acf080dcf2b4c8,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ValueHolder",
			MethodName:    "value",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ValueHolder_value_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ValueHolder_value_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ValueHolder) ReleaseValue(ctx context.Context, params func(Cluster_ValueHolder_releaseValue_Params) error) (Cluster_ValueHolder_releaseValue_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd6acf080dcf2b4c8,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ValueHolder",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ValueHolder_releaseValue_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ValueHolder_releaseValue_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ValueHolder) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cluster_ValueHolder) String() string {
	return "Cluster_ValueHolder(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cluster_ValueHolder) AddRef() Cluster_ValueHolder {
	return Cluster_ValueHolder(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cluster_ValueHolder) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cluster_ValueHolder) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cluster_ValueHolder) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cluster_ValueHolder) DecodeFromPtr(p capnp.Ptr) Cluster_ValueHolder {
	return Cluster_ValueHolder(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cluster_ValueHolder) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cluster_ValueHolder) IsSame(other Cluster_ValueHolder) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cluster_ValueHolder) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cluster_ValueHolder) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cluster_ValueHolder_Server is a Cluster_ValueHolder with a local implementation.
type Cluster_ValueHolder_Server interface {
	Value(context.Context, Cluster_ValueHolder_value) error

	ReleaseValue(context.Context, Cluster_ValueHolder_releaseValue) error
}

// Cluster_ValueHolder_NewServer creates a new Server from an implementation of Cluster_ValueHolder_Server.
func Cluster_ValueHolder_NewServer(s Cluster_ValueHolder_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_ValueHolder_Methods(nil, s), s, c)
}

// Cluster_ValueHolder_ServerToClient creates a new Client from an implementation of Cluster_ValueHolder_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_ValueHolder_ServerToClient(s Cluster_ValueHolder_Server) Cluster_ValueHolder {
	return Cluster_ValueHolder(capnp.NewClient(Cluster_ValueHolder_NewServer(s)))
}

// Cluster_ValueHolder_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_ValueHolder_Methods(methods []server.Method, s Cluster_ValueHolder_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd6acf080dcf2b4c8,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ValueHolder",
			MethodName:    "value",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Value(ctx, Cluster_ValueHolder_value{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd6acf080dcf2b4c8,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ValueHolder",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseValue(ctx, Cluster_ValueHolder_releaseValue{call})
		},
	})

	return methods
}

// Cluster_ValueHolder_value holds the state for a server call to Cluster_ValueHolder.value.
// See server.Call for documentation.
type Cluster_ValueHolder_value struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ValueHolder_value) Args() Cluster_ValueHolder_value_Params {
	return Cluster_ValueHolder_value_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ValueHolder_value) AllocResults() (Cluster_ValueHolder_value_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ValueHolder_value_Results(r), err
}

// Cluster_ValueHolder_releaseValue holds the state for a server call to Cluster_ValueHolder.releaseValue.
// See server.Call for documentation.
type Cluster_ValueHolder_releaseValue struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ValueHolder_releaseValue) Args() Cluster_ValueHolder_releaseValue_Params {
	return Cluster_ValueHolder_releaseValue_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ValueHolder_releaseValue) AllocResults() (Cluster_ValueHolder_releaseValue_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_releaseValue_Results(r), err
}

// Cluster_ValueHolder_List is a list of Cluster_ValueHolder.
type Cluster_ValueHolder_List = capnp.CapList[Cluster_ValueHolder]

// NewCluster_ValueHolder_List creates a new list of Cluster_ValueHolder.
func NewCluster_ValueHolder_List(s *capnp.Segment, sz int32) (Cluster_ValueHolder_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cluster_ValueHolder](l), err
}

type Cluster_ValueHolder_value_Params capnp.Struct

// Cluster_ValueHolder_value_Params_TypeID is the unique identifier for the type Cluster_ValueHolder_value_Params.
const Cluster_ValueHolder_value_Params_TypeID = 0x8ba6569cca01e84f

func NewCluster_ValueHolder_value_Params(s *capnp.Segment) (Cluster_ValueHolder_value_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_value_Params(st), err
}

func NewRootCluster_ValueHolder_value_Params(s *capnp.Segment) (Cluster_ValueHolder_value_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_value_Params(st), err
}

func ReadRootCluster_ValueHolder_value_Params(msg *capnp.Message) (Cluster_ValueHolder_value_Params, error) {
	root, err := msg.Root()
	return Cluster_ValueHolder_value_Params(root.Struct()), err
}

func (s Cluster_ValueHolder_value_Params) String() string {
	str, _ := text.Marshal(0x8ba6569cca01e84f, capnp.Struct(s))
	return str
}

func (s Cluster_ValueHolder_value_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ValueHolder_value_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ValueHolder_value_Params {
	return Cluster_ValueHolder_value_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ValueHolder_value_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ValueHolder_value_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ValueHolder_value_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ValueHolder_value_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_ValueHolder_value_Params_List is a list of Cluster_ValueHolder_value_Params.
type Cluster_ValueHolder_value_Params_List = capnp.StructList[Cluster_ValueHolder_value_Params]

// NewCluster_ValueHolder_value_Params creates a new list of Cluster_ValueHolder_value_Params.
func NewCluster_ValueHolder_value_Params_List(s *capnp.Segment, sz int32) (Cluster_ValueHolder_value_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ValueHolder_value_Params](l), err
}

// Cluster_ValueHolder_value_Params_Future is a wrapper for a Cluster_ValueHolder_value_Params promised by a client call.
type Cluster_ValueHolder_value_Params_Future struct{ *capnp.Future }

func (f Cluster_ValueHolder_value_Params_Future) Struct() (Cluster_ValueHolder_value_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ValueHolder_value_Params(p.Struct()), err
}

type Cluster_ValueHolder_value_Results capnp.Struct

// Cluster_ValueHolder_value_Results_TypeID is the unique identifier for the type Cluster_ValueHolder_value_Results.
const Cluster_ValueHolder_value_Results_TypeID = 0x815e89f778f1da6c

func NewCluster_ValueHolder_value_Results(s *capnp.Segment) (Cluster_ValueHolder_value_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ValueHolder_value_Results(st), err
}

func NewRootCluster_ValueHolder_value_Results(s *capnp.Segment) (Cluster_ValueHolder_value_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ValueHolder_value_Results(st), err
}

func ReadRootCluster_ValueHolder_value_Results(msg *capnp.Message) (Cluster_ValueHolder_value_Results, error) {
	root, err := msg.Root()
	return Cluster_ValueHolder_value_Results(root.Struct()), err
}

func (s Cluster_ValueHolder_value_Results) String() string {
	str, _ := text.Marshal(0x815e89f778f1da6c, capnp.Struct(s))
	return str
}

func (s Cluster_ValueHolder_value_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ValueHolder_value_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ValueHolder_value_Results {
	return Cluster_ValueHolder_value_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ValueHolder_value_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ValueHolder_value_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ValueHolder_value_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ValueHolder_value_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ValueHolder_value_Results) Val() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Cluster_ValueHolder_value_Results) HasVal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ValueHolder_value_Results) SetVal(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Cluster_ValueHolder_value_Results_List is a list of Cluster_ValueHolder_value_Results.
type Cluster_ValueHolder_value_Results_List = capnp.StructList[Cluster_ValueHolder_value_Results]

// NewCluster_ValueHolder_value_Results creates a new list of Cluster_ValueHolder_value_Results.
func NewCluster_ValueHolder_value_Results_List(s *capnp.Segment, sz int32) (Cluster_ValueHolder_value_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ValueHolder_value_Results](l), err
}

// Cluster_ValueHolder_value_Results_Future is a wrapper for a Cluster_ValueHolder_value_Results promised by a client call.
type Cluster_ValueHolder_value_Results_Future struct{ *capnp.Future }

func (f Cluster_ValueHolder_value_Results_Future) Struct() (Cluster_ValueHolder_value_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ValueHolder_value_Results(p.Struct()), err
}
func (p Cluster_ValueHolder_value_Results_Future) Val() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Cluster_ValueHolder_releaseValue_Params capnp.Struct

// Cluster_ValueHolder_releaseValue_Params_TypeID is the unique identifier for the type Cluster_ValueHolder_releaseValue_Params.
const Cluster_ValueHolder_releaseValue_Params_TypeID = 0xa967c8b00a278896

func NewCluster_ValueHolder_releaseValue_Params(s *capnp.Segment) (Cluster_ValueHolder_releaseValue_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_releaseValue_Params(st), err
}

func NewRootCluster_ValueHolder_releaseValue_Params(s *capnp.Segment) (Cluster_ValueHolder_releaseValue_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_releaseValue_Params(st), err
}

func ReadRootCluster_ValueHolder_releaseValue_Params(msg *capnp.Message) (Cluster_ValueHolder_releaseValue_Params, error) {
	root, err := msg.Root()
	return Cluster_ValueHolder_releaseValue_Params(root.Struct()), err
}

func (s Cluster_ValueHolder_releaseValue_Params) String() string {
	str, _ := text.Marshal(0xa967c8b00a278896, capnp.Struct(s))
	return str
}

func (s Cluster_ValueHolder_releaseValue_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ValueHolder_releaseValue_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ValueHolder_releaseValue_Params {
	return Cluster_ValueHolder_releaseValue_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ValueHolder_releaseValue_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ValueHolder_releaseValue_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ValueHolder_releaseValue_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ValueHolder_releaseValue_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_ValueHolder_releaseValue_Params_List is a list of Cluster_ValueHolder_releaseValue_Params.
type Cluster_ValueHolder_releaseValue_Params_List = capnp.StructList[Cluster_ValueHolder_releaseValue_Params]

// NewCluster_ValueHolder_releaseValue_Params creates a new list of Cluster_ValueHolder_releaseValue_Params.
func NewCluster_ValueHolder_releaseValue_Params_List(s *capnp.Segment, sz int32) (Cluster_ValueHolder_releaseValue_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ValueHolder_releaseValue_Params](l), err
}

// Cluster_ValueHolder_releaseValue_Params_Future is a wrapper for a Cluster_ValueHolder_releaseValue_Params promised by a client call.
type Cluster_ValueHolder_releaseValue_Params_Future struct{ *capnp.Future }

func (f Cluster_ValueHolder_releaseValue_Params_Future) Struct() (Cluster_ValueHolder_releaseValue_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ValueHolder_releaseValue_Params(p.Struct()), err
}

type Cluster_ValueHolder_releaseValue_Results capnp.Struct

// Cluster_ValueHolder_releaseValue_Results_TypeID is the unique identifier for the type Cluster_ValueHolder_releaseValue_Results.
const Cluster_ValueHolder_releaseValue_Results_TypeID = 0xddbd9a18593be0c5

func NewCluster_ValueHolder_releaseValue_Results(s *capnp.Segment) (Cluster_ValueHolder_releaseValue_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_releaseValue_Results(st), err
}

func NewRootCluster_ValueHolder_releaseValue_Results(s *capnp.Segment) (Cluster_ValueHolder_releaseValue_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ValueHolder_releaseValue_Results(st), err
}

func ReadRootCluster_ValueHolder_releaseValue_Results(msg *capnp.Message) (Cluster_ValueHolder_releaseValue_Results, error) {
	root, err := msg.Root()
	return Cluster_ValueHolder_releaseValue_Results(root.Struct()), err
}

func (s Cluster_ValueHolder_releaseValue_Results) String() string {
	str, _ := text.Marshal(0xddbd9a18593be0c5, capnp.Struct(s))
	return str
}

func (s Cluster_ValueHolder_releaseValue_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ValueHolder_releaseValue_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ValueHolder_releaseValue_Results {
	return Cluster_ValueHolder_releaseValue_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ValueHolder_releaseValue_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ValueHolder_releaseValue_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ValueHolder_releaseValue_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ValueHolder_releaseValue_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_ValueHolder_releaseValue_Results_List is a list of Cluster_ValueHolder_releaseValue_Results.
type Cluster_ValueHolder_releaseValue_Results_List = capnp.StructList[Cluster_ValueHolder_releaseValue_Results]

// NewCluster_ValueHolder_releaseValue_Results creates a new list of Cluster_ValueHolder_releaseValue_Results.
func NewCluster_ValueHolder_releaseValue_Results_List(s *capnp.Segment, sz int32) (Cluster_ValueHolder_releaseValue_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ValueHolder_releaseValue_Results](l), err
}

// Cluster_ValueHolder_releaseValue_Results_Future is a wrapper for a Cluster_ValueHolder_releaseValue_Results promised by a client call.
type Cluster_ValueHolder_releaseValue_Results_Future struct{ *capnp.Future }

func (f Cluster_ValueHolder_releaseValue_Results_Future) Struct() (Cluster_ValueHolder_releaseValue_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ValueHolder_releaseValue_Results(p.Struct()), err
}

type Cluster_ModelInstanceFactory capnp.Client

// Cluster_ModelInstanceFactory_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory.
const Cluster_ModelInstanceFactory_TypeID = 0xfd9959998f9f0ebe

func (c Cluster_ModelInstanceFactory) NewInstance(ctx context.Context, params func(Cluster_ModelInstanceFactory_newInstance_Params) error) (Cluster_ModelInstanceFactory_newInstance_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ModelInstanceFactory_newInstance_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_newInstance_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) NewInstances(ctx context.Context, params func(Cluster_ModelInstanceFactory_newInstances_Params) error) (Cluster_ModelInstanceFactory_newInstances_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newInstances",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ModelInstanceFactory_newInstances_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_newInstances_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) NewCloudViaZmqPipelineProxies(ctx context.Context, params func(Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) error) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      2,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newCloudViaZmqPipelineProxies",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(s))
		}
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) NewCloudViaProxy(ctx context.Context, params func(Cluster_ModelInstanceFactory_newCloudViaProxy_Params) error) (Cluster_ModelInstanceFactory_newCloudViaProxy_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      3,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newCloudViaProxy",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ModelInstanceFactory_newCloudViaProxy_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) ModelId(ctx context.Context, params func(Cluster_ModelInstanceFactory_modelId_Params) error) (Cluster_ModelInstanceFactory_modelId_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      4,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "modelId",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ModelInstanceFactory_modelId_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_modelId_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) RegisterModelInstance(ctx context.Context, params func(Cluster_ModelInstanceFactory_registerModelInstance_Params) error) (Cluster_ModelInstanceFactory_registerModelInstance_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      5,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "registerModelInstance",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error {
			return params(Cluster_ModelInstanceFactory_registerModelInstance_Params(s))
		}
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_registerModelInstance_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) RestoreSturdyRef(ctx context.Context, params func(Cluster_ModelInstanceFactory_restoreSturdyRef_Params) error) (Cluster_ModelInstanceFactory_restoreSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      6,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "restoreSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Cluster_ModelInstanceFactory_restoreSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c Cluster_ModelInstanceFactory) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Cluster_ModelInstanceFactory) String() string {
	return "Cluster_ModelInstanceFactory(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Cluster_ModelInstanceFactory) AddRef() Cluster_ModelInstanceFactory {
	return Cluster_ModelInstanceFactory(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Cluster_ModelInstanceFactory) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Cluster_ModelInstanceFactory) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Cluster_ModelInstanceFactory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory {
	return Cluster_ModelInstanceFactory(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Cluster_ModelInstanceFactory) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Cluster_ModelInstanceFactory) IsSame(other Cluster_ModelInstanceFactory) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Cluster_ModelInstanceFactory) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Cluster_ModelInstanceFactory) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Cluster_ModelInstanceFactory_Server is a Cluster_ModelInstanceFactory with a local implementation.
type Cluster_ModelInstanceFactory_Server interface {
	NewInstance(context.Context, Cluster_ModelInstanceFactory_newInstance) error

	NewInstances(context.Context, Cluster_ModelInstanceFactory_newInstances) error

	NewCloudViaZmqPipelineProxies(context.Context, Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies) error

	NewCloudViaProxy(context.Context, Cluster_ModelInstanceFactory_newCloudViaProxy) error

	ModelId(context.Context, Cluster_ModelInstanceFactory_modelId) error

	RegisterModelInstance(context.Context, Cluster_ModelInstanceFactory_registerModelInstance) error

	RestoreSturdyRef(context.Context, Cluster_ModelInstanceFactory_restoreSturdyRef) error

	Info(context.Context, common.Identifiable_info) error
}

// Cluster_ModelInstanceFactory_NewServer creates a new Server from an implementation of Cluster_ModelInstanceFactory_Server.
func Cluster_ModelInstanceFactory_NewServer(s Cluster_ModelInstanceFactory_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Cluster_ModelInstanceFactory_Methods(nil, s), s, c)
}

// Cluster_ModelInstanceFactory_ServerToClient creates a new Client from an implementation of Cluster_ModelInstanceFactory_Server.
// The caller is responsible for calling Release on the returned Client.
func Cluster_ModelInstanceFactory_ServerToClient(s Cluster_ModelInstanceFactory_Server) Cluster_ModelInstanceFactory {
	return Cluster_ModelInstanceFactory(capnp.NewClient(Cluster_ModelInstanceFactory_NewServer(s)))
}

// Cluster_ModelInstanceFactory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Cluster_ModelInstanceFactory_Methods(methods []server.Method, s Cluster_ModelInstanceFactory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 8)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      0,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstance(ctx, Cluster_ModelInstanceFactory_newInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      1,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newInstances",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewInstances(ctx, Cluster_ModelInstanceFactory_newInstances{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      2,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newCloudViaZmqPipelineProxies",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewCloudViaZmqPipelineProxies(ctx, Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      3,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "newCloudViaProxy",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewCloudViaProxy(ctx, Cluster_ModelInstanceFactory_newCloudViaProxy{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      4,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "modelId",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ModelId(ctx, Cluster_ModelInstanceFactory_modelId{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      5,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "registerModelInstance",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RegisterModelInstance(ctx, Cluster_ModelInstanceFactory_registerModelInstance{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xfd9959998f9f0ebe,
			MethodID:      6,
			InterfaceName: "cluster_admin_service.capnp:Cluster.ModelInstanceFactory",
			MethodName:    "restoreSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RestoreSturdyRef(ctx, Cluster_ModelInstanceFactory_restoreSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	return methods
}

// Cluster_ModelInstanceFactory_newInstance holds the state for a server call to Cluster_ModelInstanceFactory.newInstance.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_newInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_newInstance) Args() Cluster_ModelInstanceFactory_newInstance_Params {
	return Cluster_ModelInstanceFactory_newInstance_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_newInstance) AllocResults() (Cluster_ModelInstanceFactory_newInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newInstance_Results(r), err
}

// Cluster_ModelInstanceFactory_newInstances holds the state for a server call to Cluster_ModelInstanceFactory.newInstances.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_newInstances struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_newInstances) Args() Cluster_ModelInstanceFactory_newInstances_Params {
	return Cluster_ModelInstanceFactory_newInstances_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_newInstances) AllocResults() (Cluster_ModelInstanceFactory_newInstances_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newInstances_Results(r), err
}

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies holds the state for a server call to Cluster_ModelInstanceFactory.newCloudViaZmqPipelineProxies.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies) Args() Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params {
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies) AllocResults() (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(r), err
}

// Cluster_ModelInstanceFactory_newCloudViaProxy holds the state for a server call to Cluster_ModelInstanceFactory.newCloudViaProxy.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_newCloudViaProxy struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_newCloudViaProxy) Args() Cluster_ModelInstanceFactory_newCloudViaProxy_Params {
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_newCloudViaProxy) AllocResults() (Cluster_ModelInstanceFactory_newCloudViaProxy_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results(r), err
}

// Cluster_ModelInstanceFactory_modelId holds the state for a server call to Cluster_ModelInstanceFactory.modelId.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_modelId struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_modelId) Args() Cluster_ModelInstanceFactory_modelId_Params {
	return Cluster_ModelInstanceFactory_modelId_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_modelId) AllocResults() (Cluster_ModelInstanceFactory_modelId_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_modelId_Results(r), err
}

// Cluster_ModelInstanceFactory_registerModelInstance holds the state for a server call to Cluster_ModelInstanceFactory.registerModelInstance.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_registerModelInstance struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_registerModelInstance) Args() Cluster_ModelInstanceFactory_registerModelInstance_Params {
	return Cluster_ModelInstanceFactory_registerModelInstance_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_registerModelInstance) AllocResults() (Cluster_ModelInstanceFactory_registerModelInstance_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_registerModelInstance_Results(r), err
}

// Cluster_ModelInstanceFactory_restoreSturdyRef holds the state for a server call to Cluster_ModelInstanceFactory.restoreSturdyRef.
// See server.Call for documentation.
type Cluster_ModelInstanceFactory_restoreSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Cluster_ModelInstanceFactory_restoreSturdyRef) Args() Cluster_ModelInstanceFactory_restoreSturdyRef_Params {
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Cluster_ModelInstanceFactory_restoreSturdyRef) AllocResults() (Cluster_ModelInstanceFactory_restoreSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results(r), err
}

// Cluster_ModelInstanceFactory_List is a list of Cluster_ModelInstanceFactory.
type Cluster_ModelInstanceFactory_List = capnp.CapList[Cluster_ModelInstanceFactory]

// NewCluster_ModelInstanceFactory_List creates a new list of Cluster_ModelInstanceFactory.
func NewCluster_ModelInstanceFactory_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Cluster_ModelInstanceFactory](l), err
}

type Cluster_ModelInstanceFactory_newInstance_Params capnp.Struct

// Cluster_ModelInstanceFactory_newInstance_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newInstance_Params.
const Cluster_ModelInstanceFactory_newInstance_Params_TypeID = 0x8bf81264d2f11274

func NewCluster_ModelInstanceFactory_newInstance_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newInstance_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_newInstance_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newInstance_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_newInstance_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_newInstance_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newInstance_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newInstance_Params) String() string {
	str, _ := text.Marshal(0x8bf81264d2f11274, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newInstance_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newInstance_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newInstance_Params {
	return Cluster_ModelInstanceFactory_newInstance_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newInstance_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newInstance_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newInstance_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newInstance_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_ModelInstanceFactory_newInstance_Params_List is a list of Cluster_ModelInstanceFactory_newInstance_Params.
type Cluster_ModelInstanceFactory_newInstance_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_newInstance_Params]

// NewCluster_ModelInstanceFactory_newInstance_Params creates a new list of Cluster_ModelInstanceFactory_newInstance_Params.
func NewCluster_ModelInstanceFactory_newInstance_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newInstance_Params](l), err
}

// Cluster_ModelInstanceFactory_newInstance_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_newInstance_Params promised by a client call.
type Cluster_ModelInstanceFactory_newInstance_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newInstance_Params_Future) Struct() (Cluster_ModelInstanceFactory_newInstance_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newInstance_Params(p.Struct()), err
}

type Cluster_ModelInstanceFactory_newInstance_Results capnp.Struct

// Cluster_ModelInstanceFactory_newInstance_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newInstance_Results.
const Cluster_ModelInstanceFactory_newInstance_Results_TypeID = 0xf468b1dc515f841c

func NewCluster_ModelInstanceFactory_newInstance_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newInstance_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_newInstance_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newInstance_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_newInstance_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_newInstance_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newInstance_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) String() string {
	str, _ := text.Marshal(0xf468b1dc515f841c, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newInstance_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newInstance_Results {
	return Cluster_ModelInstanceFactory_newInstance_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newInstance_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newInstance_Results) Instance() Cluster_ValueHolder {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_ValueHolder(p.Interface().Client())
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) HasInstance() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_newInstance_Results) SetInstance(v Cluster_ValueHolder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_ModelInstanceFactory_newInstance_Results_List is a list of Cluster_ModelInstanceFactory_newInstance_Results.
type Cluster_ModelInstanceFactory_newInstance_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_newInstance_Results]

// NewCluster_ModelInstanceFactory_newInstance_Results creates a new list of Cluster_ModelInstanceFactory_newInstance_Results.
func NewCluster_ModelInstanceFactory_newInstance_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newInstance_Results](l), err
}

// Cluster_ModelInstanceFactory_newInstance_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_newInstance_Results promised by a client call.
type Cluster_ModelInstanceFactory_newInstance_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newInstance_Results_Future) Struct() (Cluster_ModelInstanceFactory_newInstance_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newInstance_Results(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_newInstance_Results_Future) Instance() Cluster_ValueHolder {
	return Cluster_ValueHolder(p.Future.Field(0, nil).Client())
}

type Cluster_ModelInstanceFactory_newInstances_Params capnp.Struct

// Cluster_ModelInstanceFactory_newInstances_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newInstances_Params.
const Cluster_ModelInstanceFactory_newInstances_Params_TypeID = 0x985d83a2e2d7e204

func NewCluster_ModelInstanceFactory_newInstances_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newInstances_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_newInstances_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstances_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newInstances_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_newInstances_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_newInstances_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newInstances_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newInstances_Params) String() string {
	str, _ := text.Marshal(0x985d83a2e2d7e204, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newInstances_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newInstances_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newInstances_Params {
	return Cluster_ModelInstanceFactory_newInstances_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newInstances_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newInstances_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newInstances_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newInstances_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newInstances_Params) NumberOfInstances() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_ModelInstanceFactory_newInstances_Params) SetNumberOfInstances(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Cluster_ModelInstanceFactory_newInstances_Params_List is a list of Cluster_ModelInstanceFactory_newInstances_Params.
type Cluster_ModelInstanceFactory_newInstances_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_newInstances_Params]

// NewCluster_ModelInstanceFactory_newInstances_Params creates a new list of Cluster_ModelInstanceFactory_newInstances_Params.
func NewCluster_ModelInstanceFactory_newInstances_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newInstances_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newInstances_Params](l), err
}

// Cluster_ModelInstanceFactory_newInstances_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_newInstances_Params promised by a client call.
type Cluster_ModelInstanceFactory_newInstances_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newInstances_Params_Future) Struct() (Cluster_ModelInstanceFactory_newInstances_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newInstances_Params(p.Struct()), err
}

type Cluster_ModelInstanceFactory_newInstances_Results capnp.Struct

// Cluster_ModelInstanceFactory_newInstances_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newInstances_Results.
const Cluster_ModelInstanceFactory_newInstances_Results_TypeID = 0xbcacf6dde70da193

func NewCluster_ModelInstanceFactory_newInstances_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newInstances_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_newInstances_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newInstances_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newInstances_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_newInstances_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_newInstances_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newInstances_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) String() string {
	str, _ := text.Marshal(0xbcacf6dde70da193, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newInstances_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newInstances_Results {
	return Cluster_ModelInstanceFactory_newInstances_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newInstances_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newInstances_Results) Instances() Cluster_ValueHolder {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_ValueHolder(p.Interface().Client())
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) HasInstances() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_newInstances_Results) SetInstances(v Cluster_ValueHolder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_ModelInstanceFactory_newInstances_Results_List is a list of Cluster_ModelInstanceFactory_newInstances_Results.
type Cluster_ModelInstanceFactory_newInstances_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_newInstances_Results]

// NewCluster_ModelInstanceFactory_newInstances_Results creates a new list of Cluster_ModelInstanceFactory_newInstances_Results.
func NewCluster_ModelInstanceFactory_newInstances_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newInstances_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newInstances_Results](l), err
}

// Cluster_ModelInstanceFactory_newInstances_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_newInstances_Results promised by a client call.
type Cluster_ModelInstanceFactory_newInstances_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newInstances_Results_Future) Struct() (Cluster_ModelInstanceFactory_newInstances_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newInstances_Results(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_newInstances_Results_Future) Instances() Cluster_ValueHolder {
	return Cluster_ValueHolder(p.Future.Field(0, nil).Client())
}

type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params capnp.Struct

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params.
const Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_TypeID = 0x8b5d8251cf57c316

func NewCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) String() string {
	str, _ := text.Marshal(0x8b5d8251cf57c316, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params {
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) NumberOfInstances() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params) SetNumberOfInstances(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_List is a list of Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params.
type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params]

// NewCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params creates a new list of Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params.
func NewCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params](l), err
}

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params promised by a client call.
type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params_Future) Struct() (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Params(p.Struct()), err
}

type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results capnp.Struct

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results.
const Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_TypeID = 0xa81053c61d4d995c

func NewCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) String() string {
	str, _ := text.Marshal(0xa81053c61d4d995c, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results {
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) ProxyAddresses() Cluster_ValueHolder {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_ValueHolder(p.Interface().Client())
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) HasProxyAddresses() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results) SetProxyAddresses(v Cluster_ValueHolder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_List is a list of Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results.
type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results]

// NewCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results creates a new list of Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results.
func NewCluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results](l), err
}

// Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results promised by a client call.
type Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_Future) Struct() (Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_newCloudViaZmqPipelineProxies_Results_Future) ProxyAddresses() Cluster_ValueHolder {
	return Cluster_ValueHolder(p.Future.Field(0, nil).Client())
}

type Cluster_ModelInstanceFactory_newCloudViaProxy_Params capnp.Struct

// Cluster_ModelInstanceFactory_newCloudViaProxy_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newCloudViaProxy_Params.
const Cluster_ModelInstanceFactory_newCloudViaProxy_Params_TypeID = 0xfea4c3f998b67621

func NewCluster_ModelInstanceFactory_newCloudViaProxy_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaProxy_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_newCloudViaProxy_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaProxy_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_newCloudViaProxy_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_newCloudViaProxy_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) String() string {
	str, _ := text.Marshal(0xfea4c3f998b67621, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newCloudViaProxy_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newCloudViaProxy_Params {
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) NumberOfInstances() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Params) SetNumberOfInstances(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Cluster_ModelInstanceFactory_newCloudViaProxy_Params_List is a list of Cluster_ModelInstanceFactory_newCloudViaProxy_Params.
type Cluster_ModelInstanceFactory_newCloudViaProxy_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaProxy_Params]

// NewCluster_ModelInstanceFactory_newCloudViaProxy_Params creates a new list of Cluster_ModelInstanceFactory_newCloudViaProxy_Params.
func NewCluster_ModelInstanceFactory_newCloudViaProxy_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newCloudViaProxy_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaProxy_Params](l), err
}

// Cluster_ModelInstanceFactory_newCloudViaProxy_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_newCloudViaProxy_Params promised by a client call.
type Cluster_ModelInstanceFactory_newCloudViaProxy_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newCloudViaProxy_Params_Future) Struct() (Cluster_ModelInstanceFactory_newCloudViaProxy_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Params(p.Struct()), err
}

type Cluster_ModelInstanceFactory_newCloudViaProxy_Results capnp.Struct

// Cluster_ModelInstanceFactory_newCloudViaProxy_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_newCloudViaProxy_Results.
const Cluster_ModelInstanceFactory_newCloudViaProxy_Results_TypeID = 0xbaf979a1f5673019

func NewCluster_ModelInstanceFactory_newCloudViaProxy_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaProxy_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_newCloudViaProxy_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_newCloudViaProxy_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_newCloudViaProxy_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_newCloudViaProxy_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) String() string {
	str, _ := text.Marshal(0xbaf979a1f5673019, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_newCloudViaProxy_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_newCloudViaProxy_Results {
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) Proxy() Cluster_ValueHolder {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_ValueHolder(p.Interface().Client())
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) HasProxy() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_newCloudViaProxy_Results) SetProxy(v Cluster_ValueHolder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_ModelInstanceFactory_newCloudViaProxy_Results_List is a list of Cluster_ModelInstanceFactory_newCloudViaProxy_Results.
type Cluster_ModelInstanceFactory_newCloudViaProxy_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaProxy_Results]

// NewCluster_ModelInstanceFactory_newCloudViaProxy_Results creates a new list of Cluster_ModelInstanceFactory_newCloudViaProxy_Results.
func NewCluster_ModelInstanceFactory_newCloudViaProxy_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_newCloudViaProxy_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_newCloudViaProxy_Results](l), err
}

// Cluster_ModelInstanceFactory_newCloudViaProxy_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_newCloudViaProxy_Results promised by a client call.
type Cluster_ModelInstanceFactory_newCloudViaProxy_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_newCloudViaProxy_Results_Future) Struct() (Cluster_ModelInstanceFactory_newCloudViaProxy_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_newCloudViaProxy_Results(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_newCloudViaProxy_Results_Future) Proxy() Cluster_ValueHolder {
	return Cluster_ValueHolder(p.Future.Field(0, nil).Client())
}

type Cluster_ModelInstanceFactory_modelId_Params capnp.Struct

// Cluster_ModelInstanceFactory_modelId_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_modelId_Params.
const Cluster_ModelInstanceFactory_modelId_Params_TypeID = 0xe4b6ea2bfbc474d8

func NewCluster_ModelInstanceFactory_modelId_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_modelId_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ModelInstanceFactory_modelId_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_modelId_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_modelId_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Cluster_ModelInstanceFactory_modelId_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_modelId_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_modelId_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_modelId_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_modelId_Params) String() string {
	str, _ := text.Marshal(0xe4b6ea2bfbc474d8, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_modelId_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_modelId_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_modelId_Params {
	return Cluster_ModelInstanceFactory_modelId_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_modelId_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_modelId_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_modelId_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_modelId_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Cluster_ModelInstanceFactory_modelId_Params_List is a list of Cluster_ModelInstanceFactory_modelId_Params.
type Cluster_ModelInstanceFactory_modelId_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_modelId_Params]

// NewCluster_ModelInstanceFactory_modelId_Params creates a new list of Cluster_ModelInstanceFactory_modelId_Params.
func NewCluster_ModelInstanceFactory_modelId_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_modelId_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_modelId_Params](l), err
}

// Cluster_ModelInstanceFactory_modelId_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_modelId_Params promised by a client call.
type Cluster_ModelInstanceFactory_modelId_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_modelId_Params_Future) Struct() (Cluster_ModelInstanceFactory_modelId_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_modelId_Params(p.Struct()), err
}

type Cluster_ModelInstanceFactory_modelId_Results capnp.Struct

// Cluster_ModelInstanceFactory_modelId_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_modelId_Results.
const Cluster_ModelInstanceFactory_modelId_Results_TypeID = 0xe3cf5a40e703e6da

func NewCluster_ModelInstanceFactory_modelId_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_modelId_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_modelId_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_modelId_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_modelId_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_modelId_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_modelId_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_modelId_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_modelId_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_modelId_Results) String() string {
	str, _ := text.Marshal(0xe3cf5a40e703e6da, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_modelId_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_modelId_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_modelId_Results {
	return Cluster_ModelInstanceFactory_modelId_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_modelId_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_modelId_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_modelId_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_modelId_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_modelId_Results) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cluster_ModelInstanceFactory_modelId_Results) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_modelId_Results) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_ModelInstanceFactory_modelId_Results) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Cluster_ModelInstanceFactory_modelId_Results_List is a list of Cluster_ModelInstanceFactory_modelId_Results.
type Cluster_ModelInstanceFactory_modelId_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_modelId_Results]

// NewCluster_ModelInstanceFactory_modelId_Results creates a new list of Cluster_ModelInstanceFactory_modelId_Results.
func NewCluster_ModelInstanceFactory_modelId_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_modelId_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_modelId_Results](l), err
}

// Cluster_ModelInstanceFactory_modelId_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_modelId_Results promised by a client call.
type Cluster_ModelInstanceFactory_modelId_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_modelId_Results_Future) Struct() (Cluster_ModelInstanceFactory_modelId_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_modelId_Results(p.Struct()), err
}

type Cluster_ModelInstanceFactory_registerModelInstance_Params capnp.Struct

// Cluster_ModelInstanceFactory_registerModelInstance_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_registerModelInstance_Params.
const Cluster_ModelInstanceFactory_registerModelInstance_Params_TypeID = 0xbea41d4487c101c4

func NewCluster_ModelInstanceFactory_registerModelInstance_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_registerModelInstance_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_ModelInstanceFactory_registerModelInstance_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_registerModelInstance_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_registerModelInstance_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Cluster_ModelInstanceFactory_registerModelInstance_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_registerModelInstance_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_registerModelInstance_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_registerModelInstance_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) String() string {
	str, _ := text.Marshal(0xbea41d4487c101c4, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_registerModelInstance_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_registerModelInstance_Params {
	return Cluster_ModelInstanceFactory_registerModelInstance_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) Instance() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) HasInstance() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) SetInstance(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}
func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) RegistrationToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) HasRegistrationToken() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) RegistrationTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Params) SetRegistrationToken(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Cluster_ModelInstanceFactory_registerModelInstance_Params_List is a list of Cluster_ModelInstanceFactory_registerModelInstance_Params.
type Cluster_ModelInstanceFactory_registerModelInstance_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_registerModelInstance_Params]

// NewCluster_ModelInstanceFactory_registerModelInstance_Params creates a new list of Cluster_ModelInstanceFactory_registerModelInstance_Params.
func NewCluster_ModelInstanceFactory_registerModelInstance_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_registerModelInstance_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_registerModelInstance_Params](l), err
}

// Cluster_ModelInstanceFactory_registerModelInstance_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_registerModelInstance_Params promised by a client call.
type Cluster_ModelInstanceFactory_registerModelInstance_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_registerModelInstance_Params_Future) Struct() (Cluster_ModelInstanceFactory_registerModelInstance_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_registerModelInstance_Params(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_registerModelInstance_Params_Future) Instance() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type Cluster_ModelInstanceFactory_registerModelInstance_Results capnp.Struct

// Cluster_ModelInstanceFactory_registerModelInstance_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_registerModelInstance_Results.
const Cluster_ModelInstanceFactory_registerModelInstance_Results_TypeID = 0xca8fb2a4c16e5f08

func NewCluster_ModelInstanceFactory_registerModelInstance_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_registerModelInstance_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_registerModelInstance_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_registerModelInstance_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_registerModelInstance_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_registerModelInstance_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_registerModelInstance_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_registerModelInstance_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_registerModelInstance_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) String() string {
	str, _ := text.Marshal(0xca8fb2a4c16e5f08, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_registerModelInstance_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_registerModelInstance_Results {
	return Cluster_ModelInstanceFactory_registerModelInstance_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) Unregister() Cluster_Unregister {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_Unregister(p.Interface().Client())
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) HasUnregister() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_registerModelInstance_Results) SetUnregister(v Cluster_Unregister) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_ModelInstanceFactory_registerModelInstance_Results_List is a list of Cluster_ModelInstanceFactory_registerModelInstance_Results.
type Cluster_ModelInstanceFactory_registerModelInstance_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_registerModelInstance_Results]

// NewCluster_ModelInstanceFactory_registerModelInstance_Results creates a new list of Cluster_ModelInstanceFactory_registerModelInstance_Results.
func NewCluster_ModelInstanceFactory_registerModelInstance_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_registerModelInstance_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_registerModelInstance_Results](l), err
}

// Cluster_ModelInstanceFactory_registerModelInstance_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_registerModelInstance_Results promised by a client call.
type Cluster_ModelInstanceFactory_registerModelInstance_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_registerModelInstance_Results_Future) Struct() (Cluster_ModelInstanceFactory_registerModelInstance_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_registerModelInstance_Results(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_registerModelInstance_Results_Future) Unregister() Cluster_Unregister {
	return Cluster_Unregister(p.Future.Field(0, nil).Client())
}

type Cluster_ModelInstanceFactory_restoreSturdyRef_Params capnp.Struct

// Cluster_ModelInstanceFactory_restoreSturdyRef_Params_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_restoreSturdyRef_Params.
const Cluster_ModelInstanceFactory_restoreSturdyRef_Params_TypeID = 0xd88a3f78cce2bc7d

func NewCluster_ModelInstanceFactory_restoreSturdyRef_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_restoreSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Params(st), err
}

func NewRootCluster_ModelInstanceFactory_restoreSturdyRef_Params(s *capnp.Segment) (Cluster_ModelInstanceFactory_restoreSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Params(st), err
}

func ReadRootCluster_ModelInstanceFactory_restoreSturdyRef_Params(msg *capnp.Message) (Cluster_ModelInstanceFactory_restoreSturdyRef_Params, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Params(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xd88a3f78cce2bc7d, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_restoreSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_restoreSturdyRef_Params {
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) SturdyRef() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) SturdyRefBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Params) SetSturdyRef(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Cluster_ModelInstanceFactory_restoreSturdyRef_Params_List is a list of Cluster_ModelInstanceFactory_restoreSturdyRef_Params.
type Cluster_ModelInstanceFactory_restoreSturdyRef_Params_List = capnp.StructList[Cluster_ModelInstanceFactory_restoreSturdyRef_Params]

// NewCluster_ModelInstanceFactory_restoreSturdyRef_Params creates a new list of Cluster_ModelInstanceFactory_restoreSturdyRef_Params.
func NewCluster_ModelInstanceFactory_restoreSturdyRef_Params_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_restoreSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_restoreSturdyRef_Params](l), err
}

// Cluster_ModelInstanceFactory_restoreSturdyRef_Params_Future is a wrapper for a Cluster_ModelInstanceFactory_restoreSturdyRef_Params promised by a client call.
type Cluster_ModelInstanceFactory_restoreSturdyRef_Params_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_restoreSturdyRef_Params_Future) Struct() (Cluster_ModelInstanceFactory_restoreSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Params(p.Struct()), err
}

type Cluster_ModelInstanceFactory_restoreSturdyRef_Results capnp.Struct

// Cluster_ModelInstanceFactory_restoreSturdyRef_Results_TypeID is the unique identifier for the type Cluster_ModelInstanceFactory_restoreSturdyRef_Results.
const Cluster_ModelInstanceFactory_restoreSturdyRef_Results_TypeID = 0xe5cdfbf0462c5cfd

func NewCluster_ModelInstanceFactory_restoreSturdyRef_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_restoreSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results(st), err
}

func NewRootCluster_ModelInstanceFactory_restoreSturdyRef_Results(s *capnp.Segment) (Cluster_ModelInstanceFactory_restoreSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results(st), err
}

func ReadRootCluster_ModelInstanceFactory_restoreSturdyRef_Results(msg *capnp.Message) (Cluster_ModelInstanceFactory_restoreSturdyRef_Results, error) {
	root, err := msg.Root()
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results(root.Struct()), err
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xe5cdfbf0462c5cfd, capnp.Struct(s))
	return str
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Cluster_ModelInstanceFactory_restoreSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) Cluster_ModelInstanceFactory_restoreSturdyRef_Results {
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) Cap() Cluster_ValueHolder {
	p, _ := capnp.Struct(s).Ptr(0)
	return Cluster_ValueHolder(p.Interface().Client())
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Cluster_ModelInstanceFactory_restoreSturdyRef_Results) SetCap(v Cluster_ValueHolder) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Cluster_ModelInstanceFactory_restoreSturdyRef_Results_List is a list of Cluster_ModelInstanceFactory_restoreSturdyRef_Results.
type Cluster_ModelInstanceFactory_restoreSturdyRef_Results_List = capnp.StructList[Cluster_ModelInstanceFactory_restoreSturdyRef_Results]

// NewCluster_ModelInstanceFactory_restoreSturdyRef_Results creates a new list of Cluster_ModelInstanceFactory_restoreSturdyRef_Results.
func NewCluster_ModelInstanceFactory_restoreSturdyRef_Results_List(s *capnp.Segment, sz int32) (Cluster_ModelInstanceFactory_restoreSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Cluster_ModelInstanceFactory_restoreSturdyRef_Results](l), err
}

// Cluster_ModelInstanceFactory_restoreSturdyRef_Results_Future is a wrapper for a Cluster_ModelInstanceFactory_restoreSturdyRef_Results promised by a client call.
type Cluster_ModelInstanceFactory_restoreSturdyRef_Results_Future struct{ *capnp.Future }

func (f Cluster_ModelInstanceFactory_restoreSturdyRef_Results_Future) Struct() (Cluster_ModelInstanceFactory_restoreSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return Cluster_ModelInstanceFactory_restoreSturdyRef_Results(p.Struct()), err
}
func (p Cluster_ModelInstanceFactory_restoreSturdyRef_Results_Future) Cap() Cluster_ValueHolder {
	return Cluster_ValueHolder(p.Future.Field(0, nil).Client())
}

const schema_f3c1b27d6da9d0fa = "x\xda\xbcY}pT\xd5\x15?\xe7\xed\x86\x97l>" +
	"v\xef.TA\x98\x8cN\x1c?\x0a1\x9b\xc8\x1f\xa0" +
	"N\xb2I\xcbg#y\x11\xa8dH\xe1%\xfbB\x17" +
	"7\xbb\xc9{\xbb\x81\xd0a\x90T\x86/m\x06\xac\x1d" +
	"A\x19\x0b\xa5\xd6P\xb5%U\x1c\x14\xd2\"H\x85\x02" +
	"JG-eH\x15\x14\xb0\x99V\x09\x16\x11\x18|\x9d" +
	"\xfb\xde\xbb/7\xd9M\xd8$\xb4\xff\xed\xbe{\xee9" +
	"\xe7\x9e\xf3\xbb\xe7\x9c{N\xc1L\xb1\xc4\xe9\xcf\xfe\xd2" +
	"\x0b\x82t*m\x84\x1e>\xd9\xbd\xf4\xf2\xda\x1f\xad\x04" +
	"R\x80\x00i(z\xb0\xa8:\xe3\"\x02\xfa\x1a3\x8a" +
	"\x01\xf5\xef\xec\xff\xe1{RK\xf5z\x90&!\x028" +
	"E\x80\xa2\x0d\x19\x17\x05@\xdf\xeb\x06\xc1\xac\xcf\xf1\xf0" +
	"\xf3s_\\orpR\x06\x9d\x19]\x08N=\xe6" +
	"\xed\xfek\xd0\xfb\xcdz \x93\xd8\xce\xe3\x195\x028" +
	"\xf5{\x8e~\xb1\xeb\xd2\x1f\xf6>\x0dd\xbc)\x15\xa0" +
	"\xe8h\xc6\x1d\x94\xe9Y\x83\xa9\xe7\\y\xf4\x8b\xd9\x0f" +
	"\xfc\xdcRK\xa0\x04\xa3]\xdb(\xc1$\xd7\x12@\xdd" +
	"y\xe6og\xb6\xfd\xb4\xfaY^\xad-\xae\xc5\x94`" +
	"\xb7\x8brP>\xe9Z\xf5\xa7/\x1f\xdf\x0c\xe4>\xb6" +
	"~\xdaUH\x85\x87\x9bfWd\x8d\x7f\xe89S\xb8" +
	"\xb1\xf2w\x97\x8b\xae\xfc\xec\xc8\x8b\x8f)\xcf\xd5\xfd\x92" +
	"\x1d\x85*\xec\x9aLW\xe6o*\x1fw\xf0\x11\xcfK" +
	"\xe6QL\x85\x0f\xb9\xaeRq\xff6\xc4}0\xb3n" +
	"\xcdO~\xfb\xf1K\xfc\x89\x02\x99\xeb(\x81\x9cI\x09" +
	"~\xb1\xe6.\xd7\xef\xdf]\xd4\xc6\x99iU\xe6Uj" +
	"\xa6\x93\xb7\xa5_\xbe\xf6\xd9\xd4\x9d\xa6\xa6\xe6\xd6\xe6\xcc" +
	"\xc9t\xeb\x06c\xeb?\xb7\x90{\x0b2\xdf\x7f\x0d\xa4" +
	"\xf1hS\xbc\x93YJ):3\xa95F\x17,\xba" +
	"\xb4\xb5\xf9\xca\x9b\xbcz\x81\xac\x8d\x86\xf4,\xca\xa2\xb5" +
	"hV\xe3W\x91\xb6\xb7@\xba\xcf6\xd7\xca,/%" +
	"\xd8d\x10<\xbd5\xfb|\xe7\xd7/\xef\xe19\xec\xce" +
	"R)\xc1\x87\x06\xc1[?\xa8\xe9z\xb2\xf3\xc4\x1eK" +
	"\x09\x83\xc3\xa4\xec\x19\x94`N6%8\x80\xfbV\x7f" +
	"o\xdc\xf6\x0e\x8b\x83\xe1\xb2\xe6\xecvCD6U\xf2" +
	"X\xd1\xd7\xca\x93w\xe5\xfd\x11H\x9eC_\x9es\xf1" +
	"\xa3\xb9\xd5\xd3.\x03`QZN\x0b\xfaF\xe7\x88\x00" +
	"\xbeQ9\xab}\xf1\x9c[\x00\xf4\x87w\xad]\xa8\xbf" +
	"\x91\xf76\xe7%%\xe7^\xea\x8b5\xc7\xa64\xb7\xae" +
	"\xab\xdbo\x99\xda\x10T\x9d\xd3B\x055\xe7PA\xc1" +
	"{\x8ftl\x9b\xe98\x04$\x0f{\x04\x99\x84\x9d9" +
	"\x87\xd1w\xc5\x90u\xc9 N_\x10\xd9\xb7\xbd\xbd\xf5" +
	"0\x7fp\xc9\xfd&\xe5\xd6\xe8.\x06\xbc\xdez\xe07" +
	"x\xac\xe3\x03v?\x00\x8a\x9eq\x1b\xa6\x7f\x85.\xeb" +
	"\xef\xbev\xf1\xd4\xe3\x17^\xfe\xa8\xcf\xa9\xc0\x83E\xa7" +
	"\xdd-\xe8\xbb\xe4\xa6\xb2\xba\xdd\xab}\xbb=\xa2o\xb7" +
	"\xc7\xad/\xdfs\xe6\xc8\xd2\xe2u'x\x89\xafx\x0c" +
	"\xa8\x1c\xf5P\x96\xef|\xf2\xc0\xbc[7\xef\xed\xe4\xa0" +
	"\xd2\xed\x11\xe8\xd1\x7f\xf5\xea\xe5\xb6\xc2\xb5o\x9c\xe6@" +
	"}\xd6c@\xf7\xe49\xc7\xf9\x92\xaa\xf7>\xe5\x99v" +
	"z\x0c\xf7\\1\x98\x9e\x88\x1d\xb8\xf6\xdd\xae]\x9fq" +
	"\x97q4)\xa5[\xaf\xcf\x1f?\xe5\xc2\xb5\xa3g\xf9" +
	"\xad\x84\x18\xe0\xf1\x13\xbauE\xf6\x9d\x9b_x\xb4\xfd" +
	"\x1c\xefz\x89\x18\xe0\x09\x19\x04\xff\xf8t\xe7\x99\x95\xb3" +
	"\xca\xce\x03g\xa4\xb5d\x07%h3\x08:nS6" +
	"n\xbd\xbc\xf3\xf3\x04\xd7\x1f%\xcb\xd0w\x9aP\x13u" +
	"\x92\xa9\xbe\x0c\xaf\x08\xa0/\x9c9\xf1\xee\x8f\x0f\x96\xfe" +
	"+\x81\xba\x9bR\xa7Q\x1a\x1fz\xa7\xfa&x)P" +
	"\x0e\xaa\xb7\x17\x14\xbe\xea\xbc\xc0k7\xce[H\x85O" +
	"\xf4R\xe1c\x9fX \x9d\xda\xf9\xe3\xff\xf0\xe7\x9b\xe3" +
	"5BE\xa3A`\x8b cQ\xbf\xfa~[\xfd\xf2" +
	"\xf6}_\x99\x8c\x9e\xf1\xde\x81\xbe_{\x97\x80Co" +
	"\x9a:\xbf\xab\xf5\x89\xe9\xdf$hu\xc9[\x83\xbe\x0c" +
	"\x1f%O\xf3ME_\xb7\x8f\xaa\xd5\x91\xf3B\xeb\xa6" +
	"y\x9b\xae'\x90\x9f\xf6\x1dF\xdfu\x83\xfc\x8a\xef\xcf" +
	"\xe8{h\x14%\x1f\xd39\xc6\xdb\xb1c\xe2\xb7\x1c\xdc" +
	"'\x8c\x1aC\xdds{\xd3\xaeg\xaf\xec\xdf\xfe-\x1f" +
	"\xe9\xee\x1ce\xc0\xe5\xfb\xa3\x8aa\x99^\x1b\x8ek1" +
	"E]0B\x0e\xd6\x87\"\x0b4Em\x0a\xd5*\xf9" +
	"\xb5rC\xa4ar\x99\xb9\x98?W\x0e\xc7\x95i\xd1" +
	"pPQ\xf3\x9b\xe8\xef\xbcJ%W\x8b\x87c\x9a\xe4" +
	"t8\x01\x9c\x08@\xb2\xef\x00\x90\xd2\x1d(\x8d\x14P" +
	"l\x92\xc3\xe8E\x0e\xe0\x00\xe8\x05\xb4\xc5\xb9\x06\x12W" +
	"\x1e\x0d*\xe1\xe9\x11-&Gj\x95)rm,\xaa" +
	"6\xe7G\x94%e\xe1h<87$W\xd57V" +
	"\x84\x1a\x94p(\xa2T\xa8\xd1\xa5!E\xcb\xab\xc8\x95" +
	"U\xb9\xbe\x97:\x1b\x01$\x8f\x03\xa5\xb1\x02\xea\x91x" +
	"}\x8d\xa2\xce\xaaC\xc6\x155t\x80\x80\x0eN\xa5A" +
	"Z\xa0BvS\x89\xf6\xf6\xf4\xa1\x9c\x88}\xca\xab\x90" +
	"U\x91\xe7&\x0e\xc4\xad2\x1e\x89\x85\xea\x95|\xb9I" +
	"\x0e\x85\xe5\x9a\xb0b\xb0\xd7\xf2*\x15-.\xf6qJ" +
	"%\x80\x94\xe5@\xe9n\x01\xf5:CpH\x01\xd40" +
	"\x07\xb0\xc2\x81Hz\xa0\x06H?\xda\x1ad\x0c\xa4A" +
	"\x80\xae\x95\xcb\xc6oUY\x14\xa2?\x92\x9d\x91\x9dK" +
	"J\xb75\xbag\x06\x80t\xb7\x03\xa5\xfb\x05$\x88#" +
	"),\x89\x9f~,p\xa0\xf4\xa0\x80\xbalr\x0aR" +
	"\xccd\x81\x80Y\x80\xbal1\xa4\xdfz\xebL8\x9d" +
	"\x87\xe5\x03\x8d\xb9t8 \x1a\xd0os4E\xb5\x8c" +
	"\xd6\xd7u\x16~\x07\xe7\x7f\xa6PYT5\xb4\xa7\x1c" +
	"\x00R\xe3\xc1{\xb0\xaf2\xc5\x15\xbd\x95\xb9\xd9\x97\xb5" +
	"\xb2XI\x08\x1e\xcb,\x9cN\x13PoP\xa3K\x9b" +
	"\x03\xc1 \x14\xab\x8a\xa6)\x1a\x12>\x8e\x94 \xc1\\" +
	"\xc9)\xf4\x0a.\x04o\x91\x9c\x88h\x80\xda\xd3\x93\xc4" +
	"\xfb\x00$#\x15\xb3\x0e\x08\xe8JSu\x00^\xf9*" +
	"K\xf9[\x05\xd4\xe3\x11s?8\x14\x95B\x95%\xaf" +
	">\x9a\xa4\x1cmT%\xac\xc8\x9a\x92\xe0\x94\xa1\"-" +
	"\x99\xf1\x87\x1c$\xd2S\xb3']W\x1eN\x86V>" +
	"0,\xee\x09\x0cI\xe3\x82\xc5\xa7\x0c\xdc\x94\x83}\xf5" +
	"\x92\x85\x8b\x94\xfc}#\xe4R\xb82\x87c/{\x15" +
	"\xf6d\xba\\\x03\xac\xbd\x10\xda\xdb\xd1\x03\xfb)\xc2\xc0" +
	"\x96\x1f\xb7\x7f&\x15Y\xda#r\x85\x16\xaf\xadU4" +
	"\x0d\x11\x04\xc4\x9b\x17\xfe\x92\xe5t\x86\x8cG\x05\xd4C" +
	"\x16%E\xc6 o\xa4\x0d\xa4\xfe\xac4t %\xbd" +
	"\x90*w!\xad]A\xc8-\xeb\x85\x9b\xa1c$i" +
	"\x80\xb0K\x90\x81R\x1d\"\xf1\xd3\x94r\xbf\x03\xa5\x12" +
	"\xde\xa4\xb4<r:\x00\x8d\"\xc9\xe4\xaf\xca\x18\x0bE" +
	"#\xb3\xa3\x8f)\x18\xb1\x90\x0d\x04]\\\x84OK1" +
	"\xc2C\x05\xa2\x94\xeeH\x03\xb0\xdf\xc6\xc8\xcan\xe2\xef" +
	"\x02\x81\xf8ED\xfb\x05\x8b\xad`=[\xeel\x01\x81" +
	"\x8c\x13uvb\xa1\xaf=\xdc\xd4 %\xa8\xb3(\x83" +
	"V\x98\x81\x12\xa4\xde\xd7?\x9c\xf6\xfc\xbc\xbf\x1c\xff]" +
	";\xa4\x9a\x97\x98\xaf\xebT%!b\xf4.\xb8\x86\x1f" +
	"\xcb\x93\xc4\xa0\xffaq2`\xc4\xe7\xb2d \x184" +
	"\xd3\x1eXn\xb3\x95\xa3a'\xcf\x81R\x01\xa7\xdc\x84" +
	"\xc9=\x1a\xe7\x86\"\x0d\xf1\x18S\xab8\x1a\x8fq\x7f" +
	"o:\xde\x93%\x92!$\xc2\xf4\xa1V)\xec\xe2\xdf" +
	"\x94D\x96\x96b:\xe6n\x12k]!\xeb\x82\x11\x7f" +
	"!@`<\x06\x1eDRN\xef\x13\xeb\xda {\x93" +
	"\x93@)\x09\xe4\x06\x82\x18\x88!Y%\xe6\x1a/\x89" +
	"\x84\xd8i\xf85\xd9\xc7\x12\\aU\x03\x92\x13\x05\xbd" +
	"\xfb\xa9\xfbn\xf1.\xdc\xfd6P\xca\xc0H4\xe3\xc3" +
	"b\xdd\xa2\x99\x0bn\xca\xbe\x1f^\xfd\x08\xa8@\x0c8" +
	"\x91\xa0\x17g\x0f\x0b0Z,\xaa*\x8f\xc4\xe2j\xb0" +
	"\xb9R\xa9\xb3k\xd3d\xbe\xa2X\xd1,J\xc0\xba\x04" +
	"\xbc\xba\x07[)1`0\x06\x83O\xc0\x09\xa5\xf4\xe0" +
	"3k\xbd\x19&\x92\xa7\xa71=\xc9\xdc\x11\x0a&\x9c" +
	"\xd8;di\x96\xe2\xa9\x9c<5\xc7%+E\xf8w" +
	"~\xad\xdc0\xd4\xda'\xf9+\xe6F\xe5V\xed\xe0s" +
	"x\xca\x8f\xd5JEs\xdf\x84\x88\xe6\xbc\x11\xe0\x8aM" +
	"\x1dh(q\x1a\xa1\x84u\xe6\x90uZ\x09\xa9\x02\x81" +
	"d\x88\xbdD\x1a\xb73E)\x9a\xa2\x16\x9bG\xee\x91" +
	"\xc2\x9a\xda\xc8z\xc6\x84\xb4\x98R\xfe\x0f\xd9;Yq" +
	"yc\xbf\x0e\xaf\xa9\x92\xcc\x9f38\x7f\xf2\xd5W\xff" +
	" v\xf4\xa7\x83\x18STi,\xf2\x0dJ\x7f\x15\xd7" +
	"\xa8\xf6\xd7p\xcdH\x7f\x15\xd7\x03\xf4\x97rm\xe6\x09" +
	";\xb86\xb0\xbf\x86\xeb\xfd\xf9w\xe8s8\xff\xeb\x0c" +
	"\xc8@%\xeb\xec\x8dG\x97VX\x86\xd7Y\x1d\x81\xac" +
	"\x90p\xd3JBga\x12\xc4\xa0\xa2\xea\xccp\xd8\xab" +
	"\x8aK\x0dYT\x90\x18\xaaW(\xacF\x1a\xb0b\x1d" +
	"udS\x0c\xb2\x81V\x94\x1bh\x06d\x8dId3" +
	"\x1b\xb2\x8aBn\xb9\x88\x82=IA\xd6!&\x8d*" +
	"\x08$$\xa2\xc3\xee\xdf#\xeb\xcf\x92\xea\x8d \x90y" +
	"\":\xed\x81\x06\xb2\xa1\x02)\xdf\x01\x02\x99>\xb4*" +
	"\xd5\xee\xeaX\xcf\x83\x12\xd4\x19x\x91\xa1\x17\xe9W\xf6" +
	"\xf8@\x06k\xb7I\xde\xefE\x191X\xec\x9a\xf5\xde" +
	"XG\x1a\x0a\xf6\xf4\x0bY\xff\x99\x1c\xaf\x01\x81\x1c\xa2" +
	"\xc6a\xd3+dc\x17\xb2w1\x08\xe4uj\x1c6" +
	"pC6s\"m\x17A m\"\xa6\xd9\xbd`d" +
	"\x03\x1f\xb2e\x1d\x08d\x13u\x14k\xf0#\x1b\x05\x90" +
	"\xa7JA +E\x00{6\x83l\xdaA\xe2\xed " +
	"\x90F\x11G\xd8\xe3\x08ds\x00\xa2P\x9e\xb2\xa8\xb3" +
	"\x8b\x08b\xa4V\xa1vf\xff\xdd\xf4\xb1i~0^" +
	"\xdaB\xdf&Q\xae\xd1%\xe2(\x90=\xc6\x8d\x12\xc8" +
	"\xcau%h\xfb\x1b\x995s\x0ds\x9a\xce2\xf2\x18" +
	"\xb2D\x06\xc3\x0ei\x09\x1d;Y\x95\x1d\xa9>GR" +
	"k5$\xab\x92Rl@\xfe7\x00\x00\xff\xff\x94v" +
	"\xa3\xc0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_f3c1b27d6da9d0fa,
		Nodes: []uint64{
			0x815e89f778f1da6c,
			0x8b5d8251cf57c316,
			0x8ba6569cca01e84f,
			0x8bf81264d2f11274,
			0x93bdb3f5b6eecd29,
			0x943b54ee6f4de610,
			0x985d83a2e2d7e204,
			0x9a80efc085eae065,
			0x9b3d2c0c5054766c,
			0xa0669b656ba6cc8e,
			0xa81053c61d4d995c,
			0xa8dfab7b88664bd4,
			0xa967c8b00a278896,
			0xb147e4fbf7081bda,
			0xb4d00b302a119de9,
			0xbaf979a1f5673019,
			0xbba96ef3714f338f,
			0xbcacf6dde70da193,
			0xbcd8dd8cea624cbb,
			0xbea41d4487c101c4,
			0xbf24278c65f633ce,
			0xc224b7ff6089b64e,
			0xc3668a8f7946ce88,
			0xc9034ba2becc2a64,
			0xca8fb2a4c16e5f08,
			0xd4bece01a7c4008f,
			0xd6acf080dcf2b4c8,
			0xd88a3f78cce2bc7d,
			0xddbd9a18593be0c5,
			0xe1b78932a9f7aea3,
			0xe3cf5a40e703e6da,
			0xe4b6ea2bfbc474d8,
			0xe5cdfbf0462c5cfd,
			0xe6b2589f9a250d7f,
			0xe7434f81e2b1e3de,
			0xe8b1f7a192651bbe,
			0xec42c6df28354b60,
			0xf004ae32302172c6,
			0xf468b1dc515f841c,
			0xf7485d56d6f20e7d,
			0xf849848fea5c4776,
			0xfd9959998f9f0ebe,
			0xfe35aabe121add1a,
			0xfea4c3f998b67621,
		},
		Compressed: true,
	})
}
