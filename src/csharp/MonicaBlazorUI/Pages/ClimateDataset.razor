@page "/climate/dataset"

@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using Climate = Mas.Schema.Climate
@using Geo = Mas.Schema.Geocoord

@implements IDisposable

<MudGrid>
    <MudItem xs="12" Class=@(HideSturdyRefConnector ? "d-none" : "")>
        <ConnectToSturdyRef Label="Persistent capability to climate dataset (capnp://host:port/token)"
                            CapabilityChanged=@CapabilityChanged
                            TCapnpInterface=Climate.IDataset>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="2" Class=@(HideGeoPosPicker ? "d-none" : "")>
        <MudText Typo=Typo.h5>Pick Geolocation - picked: @($"({Math.Round(LatLng.Item1, 2)}N/{Math.Round(LatLng.Item2, 2)}E)")</MudText>
    </MudItem>
    <MudItem xs="12" Class=@(HideGeoPosPicker ? "d-none" : "")>
        <GeoposPicker LatLng=@LatLng
                      LatLngChanged=@(async latLng => { LatLng = latLng; await SetClosestTimeSeries(); })
                      Width="100%" Height="400px"
                      CenterLatLng=@LatLng>
        </GeoposPicker>
    </MudItem>
    <MudItem xs="12">
        <ClimateTimeSeries TimeSeriesCap=@timeSeries HideSturdyRefConnector=@true></ClimateTimeSeries>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Climate.IDataset DatasetCap { get; set; }

    private bool datasetCapUpdated = false;

    [Parameter]
    public EventCallback<Climate.IDataset> DatasetCapChanged { get; set; }

    [Parameter]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    [Parameter]
    public bool HideGeoPosPicker { get; set; } = false;

    [Parameter]
    public (double, double) LatLng { get; set; } = (52.52, 14.11);

    private Climate.ITimeSeries timeSeries;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        datasetCapUpdated = parameters.GetValueOrDefault<Climate.IDataset>("DatasetCap", null) != DatasetCap;
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (datasetCapUpdated) await SetClosestTimeSeries();
    }

    private async Task CapabilityChanged(Climate.IDataset dataset)
    {
        if (dataset == null) return;

        if (DatasetCap != dataset) DatasetCap?.Dispose();
        DatasetCap = dataset;

        await SetClosestTimeSeries();
    }

    private async Task SetClosestTimeSeries()
    {
        if (DatasetCap == null) return;

        var ts = await DatasetCap.ClosestTimeSeriesAt(new Geo.LatLonCoord { Lat = LatLng.Item1, Lon = LatLng.Item2 });

        if (timeSeries != ts) timeSeries?.Dispose();
        timeSeries = ts;

        if (TimeSeriesCapChanged.HasDelegate) _ = TimeSeriesCapChanged.InvokeAsync(timeSeries);
    }

    void IDisposable.Dispose()
    {
        DatasetCap?.Dispose();
        timeSeries?.Dispose();
    }
}
