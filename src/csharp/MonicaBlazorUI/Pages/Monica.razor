@page "/"
@page "/monica"

@namespace Mas.Infrastructure.BlazorComponents

@using ExtType = Mas.Schema.Model.Monica.Event.ExternalType
@using MoMgmt = Mas.Schema.Model.Monica
@using Mgmt = Mas.Schema.Management
@using Crop = Mas.Schema.Crop
@using Reg = Mas.Schema.Registry
@using Model = Mas.Schema.Model
@using Common = Mas.Schema.Common 
@using Climate = Mas.Schema.Climate 
@using Soil = Mas.Schema.Soil 
@using System.Linq

@inject IJSRuntime JsRuntime
@*@inject MonicaBlazorUI.Services.RunMonica RunMonica*@
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager


<MudExpansionPanels MultiExpansion="@true">
    <MudExpansionPanel @bind-Expanded=@_panelOpened["Connections"]
                       Class=@(HideSturdyRefConnectors ? "d-none" : "")>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Check" class="mr-3" Color="@Color.Success"></MudIcon>
                <MudText><strong>Service Connections</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                    <ConnectToSturdyRef Label="Persistent capability to MONICA instance"
                                        CapabilityChanged="@MonicaCapabilityChanged"
                                        TCapnpInterface="Model.IEnvInstance<Common.StructuredText, Common.StructuredText>"
                                        @bind-SturdyRef="MonicaSturdyRef"
                                        ConnectOnInit="@TryConnectOnInit">

                    </ConnectToSturdyRef>
                </MudItem>
                <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                    <ConnectToSturdyRef Label="Persistent capability to AlterTimeSeries service"
                                        CapabilityChanged="@TimeSeriesFactoryCapabilityChanged"
                                        TCapnpInterface="@Climate.IAlterTimeSeriesWrapperFactory"
                                        @bind-SturdyRef="TimeSeriesFactorySturdyRef"
                                        ConnectOnInit="@TryConnectOnInit">
                    </ConnectToSturdyRef>
                </MudItem>
                <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                    <ConnectToSturdyRef Label="Persistent capability to fertilizer service"
                                        CapabilityChanged="@(cap => {
                                                                if (FertilizerServiceCap != cap) FertilizerServiceCap?.Dispose();
                                                                FertilizerServiceCap = cap;
                                                            })"
                                        TCapnpInterface="@Mgmt.IFertilizerService"
                                        @bind-SturdyRef="FertilizerServiceSturdyRef"
                                        ConnectOnInit="@TryConnectOnInit">
                    </ConnectToSturdyRef>
                </MudItem>
                <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                    <ConnectToSturdyRef Label="Persistent capability to MONICA crop service"
                                        TCapnpInterface="@Crop.IService"
                                        CapabilityChanged="@(cap => {
                                                                if (CropServiceCap != cap) CropServiceCap?.Dispose();
                                                                CropServiceCap = cap;
                                                            })"
                                        @bind-SturdyRef="CropServiceSturdyRef"
                                        ConnectOnInit="@TryConnectOnInit">
                    </ConnectToSturdyRef>
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["BaseFiles"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Check" class="mr-3" Color="@Color.Success"></MudIcon>
                <MudText>Base <strong>sim/crop/site.json</strong> for default soildata, output configuration and crop rotation.</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudExpansionPanels MultiExpansion="@true">
                <MudExpansionPanel Text="sim.json" @bind-Expanded=@_baseFilePanelOpened["sim"]>
                    <MudTextField T="@string" Variant="@Variant.Outlined" @bind-Text="_simJsonTxt" Lines="15" />
                </MudExpansionPanel>
                <MudExpansionPanel Text="crop.json" @bind-Expanded=@_baseFilePanelOpened["crop"]>
                    <MudTextField T="@string" Variant="@Variant.Outlined" @bind-Text="_cropJsonTxt" Lines="15" />
                </MudExpansionPanel>
                <MudExpansionPanel Text="site.json" @bind-Expanded=@_baseFilePanelOpened["site"]>
                    <MudTextField T="@string" Variant="@Variant.Outlined" @bind-Text="_siteJsonTxt" Lines="15" />
                </MudExpansionPanel>
                <!--
                <MudExpansionPanel Text="Base sim/crop/site.json" @bind-Expanded=@baseFilePanelOpened["sim"]>
                    <MudTextField T=@string Label="sim.json" Variant=@Variant.Outlined @bind-Text=simJsonTxt Lines=10 />
                </MudExpansionPanel>
                    -->
            </MudExpansionPanels>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["Location"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Check" class="mr-3" Color="@Color.Success"></MudIcon>
                <MudText><strong>Data location</strong>@($" ({Math.Round(LatLng.Item1, 2)}N/{Math.Round(LatLng.Item2, 2)}E)")</MudText>
            </div>
        </TitleContent>
        <ChildContent>
           <GeoposPicker @bind-LatLng="LatLng"
                         Width="50%" Height="400px"
                         CenterLatLng="@LatLng"/>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["ClimateService"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@(TimeSeriesCap == null ? Icons.Material.Filled.WarningAmber : Icons.Material.Filled.Check)"
                         class="mr-3"
                         Color="@(TimeSeriesCap == null ? Color.Error : Color.Success)">
                </MudIcon>
                <MudText>Choose <strong>climate data</strong> (a time series).</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudTabs Elevation="1" Rounded="@true">
                <MudTabPanel Text="Climate Service">
                    <CascadingValue Value="@false" Name="ChartPanelOpened">
                        <CascadingValue Value="@(new EventCallback<Climate.ITimeSeries>(this, (Func<Climate.ITimeSeries, Task>)(TimeSeriesCapabilityChanged)))" Name="TimeSeriesCapChanged">
                            <CascadingValue Value="@false" Name="HideGeoPosPicker">
                                <CascadingValue Value="@LatLng" Name="LatLng">
                                    <ClimateService/>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </MudTabPanel>
                <MudTabPanel Text="Single Climate Dataset">
                    <CascadingValue Value="@false" Name="ChartPanelOpened">
                        <CascadingValue Value="@(new EventCallback<Climate.ITimeSeries>(this, (Func<Climate.ITimeSeries, Task>)(TimeSeriesCapabilityChanged)))" Name="TimeSeriesCapChanged">
                            <CascadingValue Value="@false" Name="HideGeoPosPicker">
                                <CascadingValue Value="@LatLng" Name="LatLng">
                                    <ClimateDataset/>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </MudTabPanel>
                <MudTabPanel Text="Single Timeseries">
                    <CascadingValue Value="@false" Name="ChartPanelOpened">
                        <CascadingValue Value="@(new EventCallback<Climate.ITimeSeries>(this, (Func<Climate.ITimeSeries, Task>)(TimeSeriesCapabilityChanged)))" Name="TimeSeriesCapChanged">
                            <ClimateTimeSeries/>
                        </CascadingValue>
                    </CascadingValue>
                </MudTabPanel>
            </MudTabs>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel Disabled="true" @bind-Expanded=@_panelOpened["UpdateTimeSeries"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@(OverwriteTimeSeriesData ? Icons.Material.Filled.Check : Icons.Material.Filled.QuestionMark)"
                    class="mr-3" Color="@(OverwriteTimeSeriesData ? Color.Success : Color.Default)"/>
                <MudText><strong>@(OverwriteTimeSeriesData ? "Timeseries has been altered." : "Timeseries has not been altered.")</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch Value="@OverwriteTimeSeriesData"
                            T="@bool"
                            ValueChanged="@(async b => {
                                                    OverwriteTimeSeriesData = b;
                                                    if (AlterTimeSeriesWrapperCap == null) await WrapTimeSeries();
                                                    else if(!b) TimeSeriesCap = PlainTimeSeriesCap;
                                                })"
                            Disabled="@(TimeSeriesFactoryCap == null)"
                            Color="@Color.Primary"
                            Label="Alter timeseries" />
                </MudItem>
                <MudItem xs="12" Class=@(OverwriteTimeSeriesData ? "" : "d-none")>
                    <AlterTimeSeries AlterTimeSeriesWrapperCap="@(AlterTimeSeriesWrapperCap == null ? null : Capnp.Rpc.Proxy.Share(AlterTimeSeriesWrapperCap))" />
                </MudItem>
                @if (false)
                {
                    <MudItem xs="12">
                        @code {
                            private Dictionary<string, IEnumerable<float>> _name2Data = new();
                            private IEnumerable<DateTime> _dates = new List<DateTime>();
                        }
                        <Highchart Data=@_name2Data Dates=@_dates></Highchart>
                    </MudItem>
                }
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["SoilProfile"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@(OverwriteSoilProfile ? Icons.Material.Filled.Check : Icons.Material.Filled.QuestionMark)"
                    class="mr-3" Color="@(OverwriteSoilProfile ? Color.Success : Color.Default)"/>
                <MudText><strong>@(OverwriteSoilProfile ? "Using changed soil profile below." : "Using default soil profile.")</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch @bind-Value="OverwriteSoilProfile" Color="@Color.Primary" Label="Change" />
                </MudItem>
                @if (OverwriteSoilProfile)
                {
                    <MudItem xs="12">
                        <SoilService LatLng="@LatLng"
                                     @bind-SelectedLayers="_profileLayers"
                                     HideGeoPosPicker="@true"/>
                    </MudItem>
                }
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["CropRotation"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@(OverwriteCropRotation ? Icons.Material.Filled.Check : Icons.Material.Filled.QuestionMark)"
                    class="mr-3" Color="@(OverwriteCropRotation ? Color.Success : Color.Default)"/>
                <MudText><strong>@(OverwriteCropRotation ? "Using changed crop rotation below." : "Using default crop rotation.")</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch @bind-Value="OverwriteCropRotation" Color="@Color.Primary" Label="Change" />
                </MudItem>
                @if (OverwriteCropRotation)
                {
                    <MudItem xs="12">
                        <EditCropRotation CropRotation="@_cropRotation"
                                        FertilizerServiceCap="@(FertilizerServiceCap == null ? null : Capnp.Rpc.Proxy.Share(FertilizerServiceCap))"
                                        CropServiceCap="@(CropServiceCap == null ? null : Capnp.Rpc.Proxy.Share(CropServiceCap))"/>
                    </MudItem>
                }
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["OutputConfig"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@(OverwriteOutputConfig ? Icons.Material.Filled.Check : Icons.Material.Filled.QuestionMark)"
                    class="mr-3" Color="@(OverwriteOutputConfig ? Color.Success : Color.Default)"/>
                <MudText><strong>@(OverwriteOutputConfig ? "Using output configuration below." : "Using default output configuration.")</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12">
                    <MudSwitch @bind-Value="@OverwriteOutputConfig"
                            Color="@Color.Primary"
                            Label="Change" />
                </MudItem>
            </MudGrid>
            @if (OverwriteOutputConfig)
            {
                <MudItem xs="12">
                    <EditOutputConfig Events="@_events"/>
                </MudItem>
            }
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-Expanded=@_panelOpened["Results"]>
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Start" 
                    class="mr-3" Color="@(MonicaInstanceCap == null || TimeSeriesCap == null ? Color.Error : Color.Success)"/>
                <MudText><strong>MONICA results</strong></MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="2">
                    <MudButton Variant="@Variant.Filled" Class="run-main" 
                                OnClick="@RunMonicaModel"
                                Disabled="@(MonicaInstanceCap == null || TimeSeriesCap == null)"
                                Color="@(MonicaInstanceCap == null || TimeSeriesCap == null ? Color.Error : Color.Success)">
                        Run MONICA
                    </MudButton>
                </MudItem>
                <MudItem xs="10">
                    <MudChipSet
                        T="@string"
                        SelectedValuesChanged=@(cs => {
                                                        _selectedResultSection = cs?.FirstOrDefault() ?? "";
                                                        _monicaResultsChanged = true;
                                                    })
                                Mandatory="@true"
                                Filter="@true">
                        @foreach (var (s, i) in _section2Oid2Data.Keys.Select((s, i) => (s, i)))
                        {
                            <MudChip @ref=_defaultSelectedSectionChips[i]
                                Text="@s"
                                Value="@s"
                                Default=@(s == _selectedResultSection)>
                            </MudChip>
                        }
                    </MudChipSet>
                </MudItem>
                <MudItem xs="12">
                    <Highchart Title="MONICA results"
                            XAxisTitle="Date"
                            Data="@(_section2Oid2Data.GetValueOrDefault(_selectedResultSection, new Dictionary<string, IEnumerable<float>>()))"
                            Dates="@(_section2Dates.GetValueOrDefault(_selectedResultSection, new List<DateTime>()))"
                            DataChanged="@_monicaResultsChanged"
                            ChartRerendered="@(() => _monicaResultsChanged = false)"
                            YAxisConfigs="@_yAxisConfigs"
                            CurveName2Config="@_curveName2Config">
                    </Highchart>
                </MudItem>
                <!--<MudItem xs="12">
                                <MudCard>
                                    <MudCardContent>
                                        <MudText>@monicaResult</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>-->
                @if(_monicaErrorMessage != null && _monicaErrorMessage.Any())
                {
                    <MudItem xs="12">
                        <MudAlert style="white-space: pre-wrap;" Severity="Severity.Error">@_monicaErrorMessage</MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code
{
    [Parameter]
    public Mgmt.IFertilizerService? FertilizerServiceCap { get; set; }

    [Parameter]
    public string FertilizerServiceSturdyRef { get; set; } = "";//"capnp://login01.cluster.zalf.de:9998";

    [Parameter]
    public EventCallback<Mgmt.IFertilizerService> FertilizerServiceCapChanged { get; set; }

    [Parameter]
    public Crop.IService? CropServiceCap { get; set; }

    [Parameter]
    public string CropServiceSturdyRef { get; set; } = "";

    [Parameter]
    public EventCallback<Crop.IService> CropServiceCapChanged { get; set; }

    private Dictionary<string, bool> _panelOpened = new()
    {
        { "Connections", false },
        { "BaseFiles", false },
        { "Location", false },
        { "UpdateTimeSeries", false },
        { "ClimateService", false },
        { "SoilProfile", false },
        { "CropRotation", false },
        { "OutputConfig", false },
        { "Results", true }
    };

    private Dictionary<string, bool> _baseFilePanelOpened = new()
    {
        { "sim", false },
        { "crop", false },
        { "site", false },
        { "climate", false }
    };

    private bool OverwriteSoilProfile { get; set; } = false;
    private bool OverwriteTimeSeriesData { get; set; } = false;
    private bool OverwriteCropRotation { get; set; } = false;
    private bool OverwriteOutputConfig { get; set; } = false;

    private List<Highchart.AxisConfig> _yAxisConfigs =
    [
        new Highchart.AxisConfig { Id = "def", Title = "other values" },
        new Highchart.AxisConfig { Id = "yields", Title = "Yield [kg/ha]", Opposite = true }
    ];

    private Dictionary<string, Highchart.CurveConfig> _curveName2Config = new()
    {
        { "Yield", new Highchart.CurveConfig { DisplayAxisId = "yields", IsVisible = true } }
    };
}
