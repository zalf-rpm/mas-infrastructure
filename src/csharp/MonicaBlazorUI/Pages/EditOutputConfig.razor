@namespace Mas.Infrastructure.BlazorComponents

@using Mas.Infrastructure.Common
@using Mgmt = Mas.Schema.Model.Monica
@using System.Linq
@using MoMgmt = Mas.Schema.Model.Monica
@using Common = Mas.Infrastructure.Common

@implements IDisposable

<MudTabs @ref="_outputConfigTabs" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="new">
        <MudGrid>
            <MudItem xs="2" Class="d-flex flex-row py-2 px-1">
                <MudSelect T="(string, bool)"
                           Class=@(_showEventSelect ? "" : "d-none")
                           Value=@(("-", false))
                           ValueChanged=@(p => { if (p.Item1 != "-") { Events.Add((p.Item1, new List<OId>() { new OId() }, p.Item2)); StateHasChanged(); } })
                           Label="New Event">
                    <MudSelectItem Value=@(("-", false))>-</MudSelectItem>
                    @foreach (var eventScAndTimeAgg in _eventShortcuts)
                    {
                        <MudSelectItem Value=@eventScAndTimeAgg>@eventScAndTimeAgg.Item1</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField T="@string"
                              Class=@(_showEventSelect ? "d-none" : "")
                              ValueChanged=@(v => { Events.Add((v, new List<OId>() { new OId() }, true)); StateHasChanged(); })
                              Label="New Event"
                              Variant="Variant.Outlined"/>
                <MudFab Color="@Color.Secondary"
                        StartIcon="@(_showEventSelect ? Icons.Material.Filled.Edit : Icons.Material.Filled.Close)"
                        OnClick="@(() => _showEventSelect = !_showEventSelect)"/>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    @foreach (var (i, (eventShortcut, oids, item3)) in Events.Select((p, i) => (i, p)))
    {
        var allowTimeAgg = item3 || !IsDailyEvent(eventShortcut);
        <MudTabPanel Text="@eventShortcut">
            <MudSimpleTable>
                <thead>
                <tr>
                    <th>Output</th>
                    <th>Label</th>
                    <th>(From) Layer / Organ</th>
                    <th>To Layer</th>
                    <th>Layer aggregation</th>
                    <th>Time aggregation</th>
                    <th style="width:20%">Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var (k, oid) in oids.Select((oid, k) => (k, oid)))
                {
                    <tr>
                        <td>
                            <MudSelect T=@OId
                                       HelperText=@(string.IsNullOrEmpty(oid.Unit) ? oid.Desc : $"{oid.Desc} [{@oid.Unit}]")
                                       Value=@oid
                                       ValueChanged=@(o => { oid.Name = o.Name; oid.Desc = o.Desc; oid.Unit = o.Unit; oid.From = o.From; oid.To = o.To; oid.LayerAgg = o.LayerAgg; oid.TimeAgg = o.TimeAgg; oid.Organ = o.Organ; StateHasChanged(); })
                                       Label="Output">
                                @foreach (var o in _availableOIds)
                                {
                                    <MudSelectItem Value=@o/>
                                }
                            </MudSelect>
                        </td>
                        <td>
                            <MudTextField @bind-Value="@oid.DisplayName" Label="Label"/>
                        </td>
                        @if (oid.From.HasValue)
                        {
                            <td>
                                <MudSelect @bind-Value=oid.From
                                           Label="From"
                                           Error=@(oid.To != null && oid.From > oid.To)
                                           ErrorText="From > To">
                                    @for (int? i = 1; i <= 20; i++)
                                    {
                                        <MudSelectItem Value=@i/>
                                    }
                                </MudSelect>
                            </td>
                            <td>
                                <MudSelect @bind-Value=oid.To
                                           Label="To"
                                           Error=@(oid.To != null && oid.To < oid.From)
                                           ErrorText="To < From">
                                    <MudSelectItem Value=@((int?)null)>-</MudSelectItem>
                                    @for (int? i = 1; i <= 20; i++)
                                    {
                                        <MudSelectItem Value=@i/>
                                    }
                                </MudSelect>
                            </td>
                            <td>
                                <MudSelect Label="Aggregation"
                                           Disabled=@(!oid.To.HasValue)
                                           T="Agg?"
                                           @bind-Value=oid.LayerAgg>
                                    @foreach (Agg? agg in Enum.GetValues(typeof(Agg)))
                                    {
                                        <MudSelectItem Value=@agg/>
                                    }
                                </MudSelect>
                            </td>
                        }
                        else if (oid.Organ.HasValue)
                        {
                            <td>
                                <MudSelect @bind-Value=oid.Organ
                                           T="MoMgmt.PlantOrgan?"
                                           Label="Organ">
                                    @foreach (MoMgmt.PlantOrgan? o in Enum.GetValues(typeof(MoMgmt.PlantOrgan)))
                                    {
                                        <MudSelectItem Value="@o">@Common.Helper.Capitalize(o?.ToString()?.Replace("strukt", "struct") ?? "")</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                            <td></td>
                            <td></td>
                        }
                        else
                        {
                            <td></td>
                            <td></td>
                            <td></td>
                        }
                        <td>
                            @if (oid.TimeAgg.HasValue || allowTimeAgg)
                            {
                                <MudSelect Label="Aggregation"
                                           T="Agg?"
                                           @bind-Value=oid.TimeAgg>
                                    @foreach (Agg? agg in Enum.GetValues(typeof(Agg)))
                                    {
                                        <MudSelectItem Value=@agg/>
                                    }
                                </MudSelect>
                            }
                        </td>
                        <td>
                            <MudFab StartIcon=@Icons.Material.Filled.ArrowUpward
                                    Size=@Size.Small
                                    Disabled=@(k == 0)
                                    OnClick=@(() => { oids.Remove(oid); oids.Insert(Math.Max(0, k - 1), oid); StateHasChanged(); })/>
                            <MudFab StartIcon=@Icons.Material.Filled.ArrowDownward
                                    Size=@Size.Small
                                    Disabled=@(k == oids.Count() - 1)
                                    OnClick=@(() => { oids.Remove(oid); oids.Insert(Math.Min(k + 1, oids.Count()), oid); StateHasChanged(); })/>
                            <MudFab StartIcon=@Icons.Material.Filled.Add
                                    Size=@Size.Small
                                    Color=@Color.Success
                                    OnClick=@(() => { oids.Insert(Math.Min(k + 1, oids.Count()), new OId()); StateHasChanged(); })/>
                            <MudFab StartIcon=@Icons.Material.Filled.Delete
                                    Disabled=@(oids.Count() < 2)
                                    Size=@Size.Small
                                    Color=@Color.Error
                                    OnClick=@(() => { oids.Remove(oid); StateHasChanged(); })/>
                        </td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudTabPanel>
    }

</MudTabs>


@code {
    [Parameter]
    public List<(string, List<OId>, bool)> Events { get; set; } = [];

    #region init
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitialized EditOutputConfig");
        _availableOIds.Sort();
    }
    #endregion init

    MudTabs? _outputConfigTabs;
    bool _showEventSelect = true;

    public enum Agg
    {
        AVG,
        MEDIAN,
        SUM,
        MIN,
        MAX,
        FIRST,
        LAST,
        NONE
    }

    public class OId : IComparable<OId>
    {
        public static OId Out(string name)
        {
            return new OId { Name = name };
        }

        public static OId Out(string name, string desc, string unit = "")
        {
            return new OId { Name = name, Desc = desc, Unit = unit };
        }

        public static OId Out(string name, string desc, Mgmt.PlantOrgan o, string unit = "")
        {
            return new OId { Name = name, Desc = desc, Unit = unit, Organ = o };
        }

        public static OId Out(string name, string desc, int layer, string unit = "")
        {
            return new OId { Name = name, Desc = desc, Unit = unit, From = layer };
        }

        public static OId OutL(string name, int from, int? to = null, Agg agg = Agg.NONE)
        {
            return new OId { Name = name, From = from, To = to, LayerAgg = agg };
        }

        public static OId OutT(string name, Agg agg = Agg.AVG)
        {
            return new OId { Name = name, TimeAgg = agg };
        }

        public static OId OutLT(string name, int from, int? to = null, Agg layerAgg = Agg.NONE, Agg timeAgg = Agg.AVG)
        {
            return new OId { Name = name, From = from, To = to, LayerAgg = layerAgg, TimeAgg = timeAgg };
        }

        /*
        public override string ToString()
        {
            if (From.HasValue && To.HasValue && LayerAgg.HasValue && TimeAgg.HasValue)
                return $"[{Name},[{From},{To},{LayerAgg}],{TimeAgg}]";
            else if (From.HasValue && To.HasValue && LayerAgg.HasValue)
                return $"[{Name},[{From},{To},{LayerAgg}]]";
            else if (TimeAgg.HasValue)
                return $"[{Name},{TimeAgg}]";
            return Name;
        }
        */

        public int CompareTo(OId? other)
        {
            // A null value means that this object is greater.
            if (other == null) return 1;
            if (Name != null) return Name.CompareTo(other.Name);
            return 0;
        }

        public override string ToString() => Name ?? "";

        public string Name { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string Desc { get; set; } = "";
        public string Unit { get; set; } = "";
        public int? From { get; set; }
        public int? To { get; set; }
        public Agg? LayerAgg { get; set; }
        public Agg? TimeAgg { get; set; }
        public Mgmt.PlantOrgan? Organ { get; set; }
    }

    private OId _editOId = OId.Out("");

    private List<(string, bool)> _eventShortcuts =
    [
        ("daily", false),
        ("crop", true),
        ("monthly", true),
        ("yearly", true),
        ("run", true),
        ("Sowing", false),
        ("AutomaticSowing", false),
        ("Harvest", false),
        ("AutomaticHarvest", false),
        ("Cutting", false),
        ("emergence", false),
        ("anthesis", false),
        ("maturity", false),
        ("Stage-1", false),
        ("Stage-2", false),
        ("Stage-3", false),
        ("Stage-4", false),
        ("Stage-5", false),
        ("Stage-6", false),
        ("Stage-7", false)
    ];

    static bool IsDailyEvent(string eventShortcut)
    {
        return eventShortcut == "daily" || eventShortcut.Contains("at");
    }

    private readonly List<OId> _availableOIds =
    [
        OId.Out("Count", "output 1 for counting things"),
        OId.Out("CM-count", "output the order number of the current cultivation method"),
        OId.Out("Date", "output current date"),
        OId.Out("days-since-start", "output number of days since simulation start"),
        OId.Out("DOY", "output current day of year"),
        OId.Out("Month", "output current Month"),
        OId.Out("Year", "output current Year"),
        OId.Out("Crop", "crop name"),
        OId.Out("TraDef", "TranspirationDeficit", ""),
        OId.Out("Tra", "ActualTranspiration", "mm"),
        OId.Out("NDef", "CropNRedux, indicates N availability: 1 no stress, 0 no N available", ""),
        OId.Out("HeatRed", "HeatStressRedux", ""),
        OId.Out("FrostRed", "FrostStressRedux", ""),
        OId.Out("OxRed", "OxygenDeficit", ""),
        OId.Out("Stage", "DevelopmentalStage", ""),
        OId.Out("TempSum", "CurrentTemperatureSum", "°Cd"),
        OId.Out("VernF", "VernalisationFactor", ""),
        OId.Out("DaylF", "DaylengthFactor", ""),
        OId.Out("IncRoot", "OrganGrowthIncrement root", "kg/ha"),
        OId.Out("IncLeaf", "OrganGrowthIncrement leaf", "kg/ha"),
        OId.Out("IncShoot", "OrganGrowthIncrement shoot", "kg/ha"),
        OId.Out("IncFruit", "OrganGrowthIncrement fruit", "kg/ha"),
        OId.Out("RelDev", "RelativeTotalDevelopment", ""),
        OId.Out("LT50", "LT50", "°C"),
        OId.Out("AbBiom", "AbovegroundBiomass", "kg/ha"),
        OId.Out("OrgBiom", "OrganBiomass", Mgmt.PlantOrgan.leaf, "kg-DM/ha"),
        OId.Out("OrgGreenBiom", "OrganGreenBiomass", Mgmt.PlantOrgan.leaf, "kg-DM/ha"),
        OId.Out("Yield", "get_PrimaryCropYield", "kg-DM/ha"),
        OId.Out("SumYield", "get_AccumulatedPrimaryCropYield", "kg-DM/ha"),
        OId.Out("sumExportedCutBiomass", "return sum(across cuts) of exported cut biomass for current crop", "kg-DM/ha"),
        OId.Out("exportedCutBiomass", "return exported cut biomass for current crop and cut", "kg-DM/ha"),
        OId.Out("sumResidueCutBiomass", "return sum(across cuts) of residue cut biomass for current crop", "kg-DM/ha"),
        OId.Out("residueCutBiomass", "return residue cut biomass for current crop and cut", "kg-DM/ha"),
        OId.Out("optCarbonExportedResidues", "return exported part of the residues according to optimal carbon balance", "kg-DM/ha"),
        OId.Out("optCarbonReturnedResidues", "return returned to soil part of the residues according to optimal carbon balance", "kg-DM/ha"),
        OId.Out("humusBalanceCarryOver", "return humus balance carry over according to optimal carbon balance", "Heq-NRW/ha"),
        OId.Out("SecondaryYield", "SecondaryCropYield", "kg-DM/ha"),
        OId.Out("GroPhot", "GrossPhotosynthesisHaRate", "kg-CH2O/ha"),
        OId.Out("NetPhot", "NetPhotosynthesis", "kg-CH2O/ha"),
        OId.Out("MaintR", "MaintenanceRespirationAS", "kg-CH2O/ha"),
        OId.Out("GrowthR", "GrowthRespirationAS", "kg-CH2O/ha"),
        OId.Out("StomRes", "StomataResistance", "s/m"),
        OId.Out("Height", "CropHeight", "m"),
        OId.Out("LAI", "LeafAreaIndex", "m2/m2"),
        OId.Out("RootDep", "RootingDepth", "Layer#"),
        OId.Out("EffRootDep", "Effective RootingDepth", "m"),
        OId.Out("TotBiomN", "TotalBiomassNContent", "kg-N/ha"),
        OId.Out("AbBiomN", "AbovegroundBiomassNContent", "kg-N/ha"),
        OId.Out("SumNUp", "SumTotalNUptake", "kg-N/ha"),
        OId.Out("ActNup", "ActNUptake", "kg-N/ha"),
        OId.Out("PotNup", "PotNUptake", "kg-N/ha"),
        OId.Out("NFixed", "NFixed", "kg-N/ha"),
        OId.Out("Target", "TargetNConcentration", "kg-N/ha"),
        OId.Out("CritN", "CriticalNConcentration", "kg-N/ha"),
        OId.Out("AbBiomNc", "AbovegroundBiomassNConcentration", "kg-N/ha"),
        OId.Out("Nstress", "NitrogenStressIndex", ""),
        OId.Out("YieldNc", "PrimaryYieldNConcentration", "kg-N/ha"),
        OId.Out("YieldN", "PrimaryYieldNContent", "kg-N/ha"),
        OId.Out("Protein", "RawProteinConcentration", "kg/kg"),
        OId.Out("NPP", "NPP", "kg-C/ha"),
        OId.Out("NPP-Organs", "organ specific NPP", Mgmt.PlantOrgan.leaf, "kg-C/ha"),
        OId.Out("GPP", "GPP", "kg-C/ha"),
        OId.Out("Ra", "autotrophic respiration", "kg-C/ha"),
        OId.Out("Ra-Organs", "organ specific autotrophic respiration", Mgmt.PlantOrgan.leaf, "kg-C/ha"),
        OId.Out("Mois", "Soil moisture content", 1, "m3/m3"),
        OId.Out("ActNupLayer", "ActNUptakefromLayer", 1, "kg-N/ha"),
        OId.Out("Irrig", "Irrigation", "mm"),
        OId.Out("Infilt", "Infiltration", "mm"),
        OId.Out("Surface", "Surface water storage", "mm"),
        OId.Out("RunOff", "Surface water runoff", "mm"),
        OId.Out("SnowD", "Snow depth", "mm"),
        OId.Out("FrostD", "Frost front depth in soil", "m"),
        OId.Out("ThawD", "Thaw front depth in soil", "m"),
        OId.Out("PASW", "Plant Available Soil Water", 1, "m3/m3"),
        OId.Out("SurfTemp", "Surface temperature", "°C"),
        OId.Out("STemp", "Soil temperature", 1, "°C"),
        OId.Out("Act_Ev", "Actual evaporation", "mm"),
        OId.Out("Pot_ET", "Potential evapotranspiration", "mm"),
        OId.Out("Act_ET", "Actual evapotranspiration", "mm"),
        OId.Out("Act_ET2", "ActualEvaporation + Transpiration", "mm"),
        OId.Out("ET0", "ET0", "mm"),
        OId.Out("Kc", "Kc", ""),
        OId.Out("AtmCO2", "Atmospheric CO2 concentration", "ppm"),
        OId.Out("AtmO3", "Atmospheric O3 concentration", "ppb"),
        OId.Out("Groundw", "Groundwater level", "m"),
        OId.Out("Recharge", "Groundwater recharge", "mm"),
        OId.Out("NLeach", "N leaching", "kg-N/ha"),
        OId.Out("NO3", "Soil NO3 content", 1, "kg-N/m3"),
        OId.Out("Carb", "Soil Carbamid content", 1, "kg-N/m3"),
        OId.Out("NH4", "Soil NH4 content", 1, "kg-N/m3"),
        OId.Out("NO2", "NO2", "kg-N/m3"),
        OId.Out("SOC", "Soil organic carbon content", 1, "kg-C/kg"),
        OId.Out("SOC-X-Y", "SOC*SoilBulkDensity*LayerThickness*1000", 1, "g-C/m2"),
        OId.Out("AOMf", "AOM_FastSum", 1, "kg-C/m3"),
        OId.Out("AOMs", "AOM_SlowSum", 1, "kg-C/m3"),
        OId.Out("SMBf", "SMB_Fast", 1, "kg-C/m3"),
        OId.Out("SMBs", "SMB_Slow", 1, "kg-C/m3"),
        OId.Out("SOMf", "SOM_Fast", 1, "kg-C/m3"),
        OId.Out("SOMs", "SOM_Slow", 1, "kg-C/m3"),
        OId.Out("CBal", "get_CBalance", 1, "kg-C/m3"),
        OId.Out("Nmin", "NetNMineralisationRate", 1, "kg-N/ha"),
        OId.Out("NetNmin", "NetNminRate for the layers defined in the parameter MaxMineralizationDepth(general/soil-organic.json)", "kg-N/ha"),
        OId.Out("Denit", "Amount of N resulting from denitrification", "kg-N/ha"),
        OId.Out("actnitrate", "N production rate resulting from nitrification(N2O STICS module)", "kg-N/m3"),
        OId.Out("N2O", "Total N2O produced(Monica's original approach)", "kg-N/ha"),
        OId.Out("N2Onit", "N2O produced through nitrification (N2O STICS module)", "kg-N/ha"),
        OId.Out("N2Odenit", "N2O produced through denitrification(N2O STICS module)", "kg-N/ha"),
        OId.Out("SoilpH", "SoilpH", ""),
        OId.Out("NEP", "NEP", "kg-C/ha"),
        OId.Out("NEE", "NEE", "kg-C/ha"),
        OId.Out("Rh", "Rh", "kg-C/ha"),
        OId.Out("Tmin", "Daily minimum temperature", "°C"),
        OId.Out("Tavg", "Daily average temperature", "°C"),
        OId.Out("Tmax", "Daily maximum temperature", "°C"),
        OId.Out("Precip", "Daily precipitation", "mm"),
        OId.Out("Wind", "Daily average windspeed", "m/s"),
        OId.Out("Globrad", "Daily global radiation", "MJ/m2"),
        OId.Out("Relhumid", "Daily relative humidity", "%"),
        OId.Out("Sunhours", "If available? Daily number of sunshine hours", "h"),
        OId.Out("BedGrad", "PercentageSoilCoverage", ""),
        OId.Out("N", "Nitrate", 1, "kg-N/m3"),
        OId.Out("Co", "Co", 1, "kg-C/m3"),
        OId.Out("NH3", "NH3_Volatilised", "kg-N/ha"),
        OId.Out("NFert", "dailySumFertiliser", "kg-N/ha"),
        OId.Out("SumNFert", "sum of N fertilizer applied during cropping period", "kg-N/ha"),
        OId.Out("NOrgFert", "dailySumOrgFertiliser", "kg-N/ha"),
        OId.Out("SumNOrgFert", "sum of N of organic fertilizer applied during cropping period", "kg-N/ha"),
        OId.Out("WaterContent", "soil water content", "%nFC"),
        OId.Out("AWC", "available water capacity", "m3/m3"),
        OId.Out("CapillaryRise", "Capillary rise", 1, "mm"),
        OId.Out("PercolationRate", "percolation rate", 1, "mm"),
        OId.Out("SMB-CO2-ER", "SMB_CO2EvolutionRate", 1, ""),
        OId.Out("Evapotranspiration", "", "mm"),
        OId.Out("Evaporation", "", "mm"),
        OId.Out("ETa/ETc", "actual evapotranspiration / potential evapotranspiration", ""),
        OId.Out("Transpiration", "", "mm"),
        OId.Out("GrainN", "FruitBiomassNContent", "kg/ha"),
        OId.Out("Fc", "Field capacity", 1, "m3/m3"),
        OId.Out("Pwp", "Permanent wilting point", 1, "m3/m3"),
        OId.Out("Sat", "saturation", 1, "m3/m3"),
        OId.Out("Nresid", "Nitrogen content in crop residues", "kg-N/ha"),
        OId.Out("Sand", "Soil sand content", "kg/kg"),
        OId.Out("Clay", "Soil clay content", "kg/kg"),
        OId.Out("Silt", "Soil silt content", "kg/kg"),
        OId.Out("Stone", "Soil stone content", "kg/kg"),
        OId.Out("pH", "Soil pH content", ""),
        OId.Out("rootDensity", "Root density at layer", 1, ""),
        OId.Out("rootingZone", "Layer into which roots reach", "Layer#"),
        OId.Out("actammoxrate", "actAmmoniaOxidationRate", "kgN/m3/d"),
        OId.Out("actnitrate", "actNitrificationRate", "kgN/m3/d"),
        OId.Out("actdenitrate", "actDenitrificationRate", "kgN/m3/d"),
        OId.Out("O3-short-damage", "short term ozone induced reduction of Ac", ""),
        OId.Out("O3-long-damage", "long term ozone induced senescence", ""),
        OId.Out("O3-WS-gs-reduction", "water stress impact on stomatal conductance", ""),
        OId.Out("O3-total-uptake", "total O3 uptake", "?"),
        OId.Out("NO3conv", "Convection", ""),
        OId.Out("NO3disp", "Dispersion", ""),
        OId.Out("noOfAOMPools", "number of AOM pools in existence currently", "#")
    ];

    void IDisposable.Dispose()
    {
        //Console.WriteLine("Disposing EditCropRotation.IFertilizerService cap: " + FertilizerServiceCap);
        //FertilizerServiceCap?.Dispose();
        //Console.WriteLine("Disposing EditCropRotation.ICropServiceCap cap: " + CropServiceCap);
        //CropServiceCap?.Dispose();
    }

}