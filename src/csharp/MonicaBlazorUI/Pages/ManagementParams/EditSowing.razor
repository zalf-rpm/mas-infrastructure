@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using Mgmt = Mas.Schema.Model.Monica
@using Reg = Mas.Schema.Registry
@using Crop = Mas.Schema.Crop
@using Common = Mas.Schema.Common
@using Mas.Infrastructure.Common

@implements IDisposable

<MudCard>
    <MudCardContent>
        @code 
        {
            private async void OnEntryChanged(Reg.Registry.Entry e)
            { 
                Params.Crop = Capnp.Rpc.Proxy.Share(((Common.Identifiable_Proxy)e.Ref).Cast<Crop.ICrop>(false)); 
                //var id = (await Params.Crop.Cultivar()).Id;
                currentEntry = e;
                StateHasChanged();
            }
        }
        <MudSelect Value=currentEntry
                    ValueChanged=@OnEntryChanged
                    T=@Reg.Registry.Entry 
                    Label="Crop-Service Cultivar"
                    ToStringFunc=@(e => $"{Helper.Capitalize(e.CategoryId)}/{Helper.Capitalize(e.Name)}")>
            @foreach (var entry in allCultivarEntries)
                {
                <MudSelectItem Value=@entry>
                    @($"{Helper.Capitalize(entry.CategoryId)}/{Helper.Capitalize(entry.Name)}")
                </MudSelectItem>
                }
        </MudSelect>
        <MudTextField @bind-Value=Params.PlantDensity
                  Label="Plant density"
                  HelperText="> 0 overwrites plant density from species parameters"
                  Adornment="Adornment.End"
                  AdornmentText="plants m-2" />
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public Mgmt.Params.Sowing Params { get; set; } = new();

    private Reg.Registry.Entry currentEntry = new();

    [Parameter]
    public Crop.IService? CropServiceCap { get; set; }

    private bool cropServiceCapUpdated = false;

    private IEnumerable<Reg.Registry.Entry> allCultivarEntries = new List<Reg.Registry.Entry>();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        cropServiceCapUpdated = parameters.GetValueOrDefault<Reg.IRegistry?>("CropServiceCap", null) != CropServiceCap;
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (cropServiceCapUpdated) await LoadCultivars();
    }

    private async Task LoadCultivars()
    {
        if (CropServiceCap == null) return;

        var entries = await CropServiceCap.Entries(null);
        if (entries != null) allCultivarEntries = entries.OrderBy(e => $"{e.CategoryId}/{e.Name}");
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("Disposing EditSowing.CropRegistryCap cap: " + CropServiceCap);
        CropServiceCap?.Dispose();
    }
}