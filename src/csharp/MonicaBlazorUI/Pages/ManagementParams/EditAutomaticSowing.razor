@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using Mgmt = Mas.Schema.Model.Monica
@using Reg = Mas.Schema.Registry
@using Crop = Mas.Schema.Crop

@implements IDisposable

@code {
    Func<float?, string?> valid = val => val < 0 || val > 100 ? "[0 - 100]" : null;
}
<MudCard>
    <MudCardContent>
        <MudSelect @bind-Value=Params.Sowing.Crop Label="Crop-Service Cultivar">
            @foreach (var entry in allCultivarEntries)
                {
                <MudSelectItem Value=@entry.Ref>@entry.Name</MudSelectItem>
                }
        </MudSelect>
        <!--
        <MudTextField @bind-Value=Params.Sowing.PlantDensity
                      Label="Plant density"
                      HelperText="> 0 overwrites plant density from species parameters"
                      Adornment="Adornment.End"
                      AdornmentText="plants m-2" />
        -->
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value=Params.MinTempThreshold
                              Label="MinTempThreshold"
                              Adornment="Adornment.End"
                              AdornmentText="°C" />
                <MudTextField @bind-Value=Params.DaysInTempWindow
                              Label="DaysInTempWindow"
                              Adornment="Adornment.End"
                              AdornmentText="d" />
                <MudTextField @bind-Value=Params.MinPercentASW
                              Label="min % ASW"
                              Adornment="Adornment.End"
                              AdornmentText="%"
                              Validation=@valid />
                <MudTextField @bind-Value=Params.MaxPercentASW
                              Label="max % ASW"
                              Adornment="Adornment.End"
                              AdornmentText="%"
                              Validation=@valid />
                <MudTextField @bind-Value=Params.Max3dayPrecipSum
                              Label="max 3-day precip sum"
                              Adornment="Adornment.End"
                              AdornmentText="mm" />
                <MudTextField @bind-Value=Params.MaxCurrentDayPrecipSum
                              Label="max current day precip sum"
                              Adornment="Adornment.End"
                              AdornmentText="mm" />
                <MudTextField @bind-Value=Params.TempSumAboveBaseTemp
                              Label="temp sum > base temp"
                              Adornment="Adornment.End"
                              AdornmentText="°C" />
                <MudTextField @bind-Value=Params.BaseTemp
                              Label="base temp"
                              Adornment="Adornment.End"
                              AdornmentText="°C" />
                <MudSwitch T=@bool
                           Color=@Color.Primary
                           ValueChanged=@(b => {
                                                if (b && Params.TheAvgSoilTemp == null)
                                                    Params.TheAvgSoilTemp = new();
                                                else if (!b && Params.TheAvgSoilTemp != null)
                                                    Params.TheAvgSoilTemp = null;
                                            })
                           Label="Check for soil temperature?" />
                @if (Params.TheAvgSoilTemp != null)
                {
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value=Params.TheAvgSoilTemp.SoilDepthForAveraging
                                          Label="Soil depth for averaging"
                                          Adornment="Adornment.End"
                                          AdornmentText="m" />
                            <MudTextField @bind-Value=Params.TheAvgSoilTemp.DaysInSoilTempWindow
                                          Label="Days in soil temp windows"
                                          Adornment="Adornment.End"
                                          AdornmentText="d" />
                            <MudTextField @bind-Value=Params.TheAvgSoilTemp.SowingIfAboveAvgSoilTemp
                                          Label="Sowing if above avg soil temp"
                                          Adornment="Adornment.End"
                                          AdornmentText="°C" />
                        </MudCardContent>
                    </MudCard>
                }
            </MudCardContent>
        </MudCard>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public Mgmt.Params.AutomaticSowing Params { get; set; } = new() { Sowing = new() };

    [Parameter]
    public Crop.IService? CropServiceCap { get; set; }

    private bool cropServiceCapUpdated = false;

    private IEnumerable<Reg.Registry.Entry> allCultivarEntries = new List<Reg.Registry.Entry>();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        cropServiceCapUpdated = parameters.GetValueOrDefault<Reg.IRegistry?>("CropServiceCap", null) != CropServiceCap;
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (cropServiceCapUpdated) await LoadCultivars();
    }

    private async Task LoadCultivars()
    {
        if (CropServiceCap == null) return;

        var entries = await CropServiceCap.Entries(null);
        allCultivarEntries = entries.OrderBy(e => $"{e.CategoryId}/{e.Name}");
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("Disposing EditAutomaticSowing.CropRegistryCap cap: " + CropServiceCap);
        CropServiceCap?.Dispose();
    }
}