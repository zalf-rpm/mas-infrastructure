@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using Mas.Infrastructure.Common
@using MoMgmt = Mas.Schema.Model.Monica
@using Mgmt = Mas.Schema.Management
@using Reg = Mas.Schema.Registry

@implements IDisposable

@code {
    Func<float?, string?> valid = val => val < 0 || val > 100 ? "[0 - 100]" : null;
}
<MudCard>
    <MudCardContent>
        <MudSelect T="Mgmt.IFertilizer"
                   ValueChanged=@(async fertCap => {
                   if (fertCap != null)
                   {
                   var info = await fertCap.Info();
                   if (info != null)
                   {
                   FertilizerId = info.Id;
                   FertilizerName = info.Name;
                   }
                   Nutrients = await fertCap.Nutrients();
                   var of = (await fertCap.Parameters()) as MoMgmt.Params.OrganicFertilization;
                   if (of != null) Params = of;
                   StateHasChanged();
                   }
                   })
                   Label="Load fertilizer parameters">
            @foreach (var (name, fertCap) in name2Entry)
            {
                <MudSelectItem Value="@fertCap">@name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value=Params.Amount
                      Label="Amount"
                      Adornment="Adornment.End"
                      AdornmentText="kg" />
        <MudCheckBox @bind-Value=@Params.Incorporation Label="Incorporation" />
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value=Params.Params.Id Label="Id" />
                <MudTextField @bind-Value=Params.Params.Name Label="Name" />
                <MudTextField @bind-Value=Params.Params.Params.AomDryMatterContent
                              Label="aomDryMatterContent"
                              Adornment="Adornment.End"
                              AdornmentText="kg-DM/kg-FM" />
                <MudTextField @bind-Value=Params.Params.Params.AomNH4Content
                              Label="aomNH4Content"
                              Adornment="Adornment.End"
                              AdornmentText="kg-N/kg-DM" />
                <MudTextField @bind-Value=Params.Params.Params.AomNO3Content
                              Label="aomNO3Content"
                              Adornment="Adornment.End"
                              AdornmentText="kg-N/kg-DM" />
                <MudTextField @bind-Value=Params.Params.Params.AomCarbamidContent
                              Label="aomCarbamidContent"
                              Adornment="Adornment.End"
                              AdornmentText="kg-N/kg-DM" />
                <MudTextField @bind-Value=Params.Params.Params.AomSlowDecCoeffStandard
                              Label="aomSlowDecCoeffStandard"
                              Adornment="Adornment.End"
                              AdornmentText="1/d" />
                <MudTextField @bind-Value=Params.Params.Params.AomFastDecCoeffStandard
                              Label="aomFastDecCoeffStandard"
                              Adornment="Adornment.End"
                              AdornmentText="1/d" />
                <MudTextField @bind-Value=Params.Params.Params.PartAOMToAOMSlow
                              Label="partAOMToAOMSlow"
                              Adornment="Adornment.End"
                              AdornmentText="kg/kg" />
                <MudTextField @bind-Value=Params.Params.Params.PartAOMToAOMFast
                              Label="partAOMToAOMFast"
                              Adornment="Adornment.End"
                              AdornmentText="kg/kg" />
                <MudTextField @bind-Value=Params.Params.Params.CnRatioAOMSlow
                              Label="cnRatioAOMSlow"
                              Adornment="Adornment.End"
                              AdornmentText="kg/kg" />
                <MudTextField @bind-Value=Params.Params.Params.CnRatioAOMFast
                              Label="cnRatioAOMFast"
                              Adornment="Adornment.End"
                              AdornmentText="" />
                <MudTextField @bind-Value=Params.Params.Params.PartAOMSlowToSMBSlow
                              Label="partAOMSlowToSMBSlow"
                              Adornment="Adornment.End"
                              AdornmentText="kg/kg" />
                <MudTextField @bind-Value=Params.Params.Params.PartAOMSlowToSMBFast
                              Label="partAOMSlowToSMBFast"
                              Adornment="Adornment.End"
                              AdornmentText="kg/kg" />
                <MudTextField @bind-Value=Params.Params.Params.NConcentration
                              Label="nConcentration"
                              Adornment="Adornment.End"
                              AdornmentText="" />
            </MudCardContent>
        </MudCard>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public MoMgmt.Params.OrganicFertilization Params { get; set; } = new();

    [Parameter]
    public IReadOnlyList<Mgmt.Nutrient> Nutrients { get; set; } = new List<Mgmt.Nutrient>();

    private SortedDictionary<string, Mgmt.IFertilizer> name2Entry = new();

    [Parameter]
    public string? FertilizerId { get; set; }

    [Parameter]
    public string? FertilizerName { get; set; }

    [Parameter]
    public Reg.IRegistry? FertilizerRegistryCap { get; set; }

    private string categoryId = "organic";

    async void LoadFertilizers()
    {
        if (FertilizerRegistryCap != null)
        {
            var entries = await FertilizerRegistryCap.Entries(categoryId) ?? new List<Reg.Registry.Entry>();
            foreach (var entry in entries)
            {
                if (entry.Ref is Mgmt.IFertilizer fert) name2Entry.Add(entry.Name, fert);
            }
            if (name2Entry.Count > 0)
            {
                var (name, fertCap) = name2Entry.First();
                if (fertCap != null)
                {
                    var info = await fertCap.Info();
                    if (info != null)
                    {
                        FertilizerId = info.Id;
                        FertilizerName = info.Name;
                    }
                }

            }
        }
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("EditOrganicFertilizer: Disposing Registry.IRegistry cap: " + FertilizerRegistryCap);
        FertilizerRegistryCap?.Dispose();
    }
}