@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using Mas.Infrastructure.Common
@using MoMgmt = Mas.Schema.Model.Monica
@using Mgmt = Mas.Schema.Management
@using Reg = Mas.Schema.Registry

@implements IDisposable

@code {
    Func<float?, string?> valid = val => val < 0 || val > 100 ? "[0 - 100]" : null;
}
<MudCard>
    <MudCardContent>
        <MudSelect T="Mgmt.IFertilizer"
                   ValueChanged=@(async fertCap => {
                   if (fertCap != null)
                   {
                   var info = await fertCap.Info();
                   if (info != null)
                   {
                   FertilizerId = info.Id;
                   FertilizerName = info.Name;
                   }
                   Nutrients = await fertCap.Nutrients();
                   var mf = (await fertCap.Parameters()) as MoMgmt.Params.MineralFertilization;
                   if(mf != null) Params = mf;
                   StateHasChanged();
                   }
                   })
                   Label="Load fertilizer parameters">
            @foreach (var (name, fertCap) in name2Entry)
            {
                <MudSelectItem Value="@fertCap">@name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value=Params.Amount
                      Label="Amount"
                      Adornment="Adornment.End"
                      AdornmentText="kg" />
        <MudCard>
            <MudCardContent>
                <MudTextField @bind-Value=Params.Partition.Id Label="Id" />
                <MudTextField @bind-Value=Params.Partition.Name Label="Name" />
                <MudTextField @bind-Value=Params.Partition.Carbamid
                              Label="Carbamid"
                              Adornment="Adornment.End"
                              AdornmentText="%"
                              Validation=@valid />
                <MudTextField @bind-Value=Params.Partition.Nh4
                              Label="NH4"
                              Adornment="Adornment.End"
                              AdornmentText="%"
                              Validation=@valid />
                <MudTextField @bind-Value=Params.Partition.No3
                              Label="NO3"
                              Adornment="Adornment.End"
                              AdornmentText="%"
                              Validation=@valid />
            </MudCardContent>
        </MudCard>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public MoMgmt.Params.MineralFertilization Params { get; set; } = new();

    [Parameter]
    public IReadOnlyList<Mgmt.Nutrient> Nutrients { get; set; } = new List<Mgmt.Nutrient>();

    private SortedDictionary<string, Mgmt.IFertilizer> name2Entry = new();

    [Parameter]
    public string? FertilizerId { get; set; }

    [Parameter]
    public string? FertilizerName { get; set; }

    //[Parameter]
    //public double Amount { get; set; } = 0;

    [Parameter]
    //public Mgmt.IFertilizerService FertilizerServiceCap { get; set; }
    public Reg.IRegistry? FertilizerRegistryCap { get; set; }

    private string categoryId = "mineral";

    async void LoadFertilizers()
    {
        if(FertilizerRegistryCap != null) 
        {
            var entries = await FertilizerRegistryCap.Entries(categoryId) ?? new List<Reg.Registry.Entry>();
            foreach(var entry in entries)
            {
                if(entry.Ref is Mgmt.IFertilizer fert) name2Entry.Add(entry.Name, fert);
            }
            if(name2Entry.Count > 0)
            {
                var (name, fertCap) = name2Entry.First();
                if(fertCap != null)
                {
                    var info = await fertCap.Info();
                    if(info != null){
                        FertilizerId = info.Id;
                        FertilizerName = info.Name;
                    }    
                }
                
            }
        }
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("EditMineralFertilizer: Disposing Registry.IRegistry cap: " + FertilizerRegistryCap);
        FertilizerRegistryCap?.Dispose();
    }
}