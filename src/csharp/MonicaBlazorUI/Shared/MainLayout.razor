@inherits LayoutComponentBase

@using Mas.Infrastructure.BlazorComponents

@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudThemeProvider Theme="currentTheme" />
<MudDialogProvider/>
<MudPopoverProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5">MONICA Web-Interfaces</MudText>
        <MudSpacer />
        <MudIconButton Icon=@Icons.Material.Filled.SettingsRemote Color=@Color.Inherit OnClick=@ShowSturdyRefDialog />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader Class="logo-container">
            <img src="/images/no-fdsmas-logo.png" asp-append-version="true" />
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="mt-4 px-4" MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task ShowSturdyRefDialog()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        DialogService.Show<LocallyStoredSturdyRefsDialog>("Sturdy reference bookmarks", options);
    }

    protected override void OnInitialized()
    {
        currentTheme = defaultTheme;
    }

    void DarkMode()
    {
        if (currentTheme == defaultTheme)
        {
            currentTheme = darkTheme;
        }
        else
        {
            currentTheme = defaultTheme;
        }
    }

    MudTheme currentTheme = new MudTheme();
    MudTheme defaultTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            Black = "#272c34",
            Primary = "#4da950",
            Secondary = "#357537",
            AppbarBackground = "#4da950"
        }
    };

    // The dark theme is just placed here for later use if needed
    MudTheme darkTheme = new MudTheme()
    {
        PaletteDark = new PaletteDark()
        {
            Black = "#27272f",
            Background = "#32333d",
            BackgroundGray = "#27272f",
            Surface = "#373740",
            DrawerBackground = "#27272f",
            DrawerText = "rgba(255,255,255, 0.50)",
            DrawerIcon = "rgba(255,255,255, 0.50)",
            AppbarBackground = "#27272f",
            AppbarText = "rgba(255,255,255, 0.70)",
            TextPrimary = "rgba(255,255,255, 0.70)",
            TextSecondary = "rgba(255,255,255, 0.50)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)",
            Secondary = "#4da950"
        }
    };

    /*
    UserSetting _userSetting = new UserSetting();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localUserSettings = await localStorage.GetItemAsync<UserSetting>(StaticFields.UserSettingsLocalStorageKey);

            if (localUserSettings != null)
            {
                _userSetting = localUserSettings;
            }

            StateHasChanged();
        }
    }

    async Task LogoutAsync()
    {
        _userSetting.GithubLoggedIn = false;
        _userSetting = new UserSetting();
        await localStorage.SetItemAsync<UserSetting>(StaticFields.UserSettingsLocalStorageKey, _userSetting);
        StateHasChanged();
    }
    */
}