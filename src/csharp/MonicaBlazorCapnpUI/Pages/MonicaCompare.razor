@page "/monica-compare"

@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor

@implements IDisposable

<MudExpansionPanels MultiExpansion=@true>
    @for (int k = 0; k < noOfMonicas; k++)
    {
        var i = k;
        <MudExpansionPanel @bind-IsExpanded=@(panelOpened[$"monica{i}"]) Text=@($"MONICA {i+1}")>
            <MudGrid>
                <MudItem xs="2">
                    <MudSelect T=@string
                               @bind-Value=selectedSection[i]
                               Label="Event">
                        @foreach (var s in Monica2Section2Oid2Data[i].Keys)
                        {
                            <MudSelectItem Value=@s />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="2">
                    <MudSelect T=@string
                               Value=@selectedCurve[i]
                               ValueChanged=@(v =>
                                              {
                                                  selectedCurve[i] = v;
                                                  monicaDataChanged = true;
                                                  StateHasChanged();
                                              })
                               Label="Curve">
                        @foreach (var curve in Monica2Section2Oid2Data[i].GetValueOrDefault(selectedSection[i], new()).Keys)
                        {
                            <MudSelectItem Value=@curve />
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <Monica ResultChanged=@(p => {
                        Monica2Section2Dates[i] = p.Item1;
                        Monica2Section2Oid2Data[i] = p.Item2;
                        monicaDataChanged=true;
                        StateHasChanged();
                        })
                            TryConnectOnInit=@true
                            HideSturdyRefConnectors=@true>
                    </Monica>
                </MudItem>
            </MudGrid>
        </MudExpansionPanel>
    }
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["compare"] Text="Compare MONICA 1 & 2">
        <MudGrid>
            <!--
            <MudItem xs="2">
                <MudSelect T=@string
                           @bind-Value=selectedSection[i]
                           Label="Event">
                    @foreach (var s in Monica2Section2Oid2Data[i].Keys)
                        {
                    <MudSelectItem Value=@s />
                        }
                </MudSelect>
            </MudItem>
            <MudItem xs="2">
                <MudSelect T=@string
                           @bind-Value=selectedCurve[i]
                           Label="Curve">
                    @foreach (var curve in Monica2Section2Oid2Data[i].GetValueOrDefault(selectedSection[i], new()).Keys)
                    {
                    <MudSelectItem Value=@curve />
                    }
                </MudSelect>
            </MudItem>
            -->
            <MudItem xs="12">
                @code {
                    private List<Highchart.AxisConfig> yAxisConfigs = Enumerable.Range(0, noOfMonicas).Select(i =>
                    new Highchart.AxisConfig { Id = i.ToString(), Title = $"MONICA {i+1}", Opposite = i % 2 != 0 }).ToList();
                }
                <Highchart Title=@compareTitle()
                           XAxisTitle="Date"
                           Data=@OId2Data
                           Dates=@Dates
                           DataChanged=@monicaDataChanged
                           YAxisConfigs=@yAxisConfigs
                           AllCurvesVisible=@true
                           ChartRerendered=@(() => monicaDataChanged = false)></Highchart>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private static readonly int noOfMonicas = 2;

    private string compareTitle()
    {
        var sb = new System.Text.StringBuilder("Compare MONICA results ");
        for (int i = 1; i <= noOfMonicas; i++)
        {
            if (selectedSection.ContainsKey(i) && selectedCurve.ContainsKey(i))
            {
                sb.Append($"{selectedSection[i]}/{selectedCurve[i]}");
                if (i < noOfMonicas) sb.Append(" vs ");
            }
        }

        return sb.ToString();
    }

    private bool monicaDataChanged = false;

    Dictionary<int, Dictionary<String, Dictionary<String, IEnumerable<float>>>> Monica2Section2Oid2Data = new();
    Dictionary<int, Dictionary<String, IEnumerable<DateTime>>> Monica2Section2Dates = new();

    Dictionary<String, IEnumerable<float>> OId2Data
    {
        get
        {
            var d = new Dictionary<String, IEnumerable<float>>();
            for (int i = 0; i < selectedSection.Count; i++)
            {
                var ss = selectedSection[i];
                var sc = selectedCurve[i];
                d[$"M{i+1}-{ss}-{sc}_@{i % noOfMonicas}"] = Monica2Section2Oid2Data[i].GetValueOrDefault(ss, new()).GetValueOrDefault(sc, new List<float>());
            }

            return d;
        }
    }

    IEnumerable<DateTime> Dates
    {
        get
        {
            IEnumerable<DateTime> ds = new List<DateTime>();
            for (int i = 0; i < selectedSection.Count; i++)
            {
                var ss = selectedSection[i];
                ds = Monica2Section2Dates[i].GetValueOrDefault(ss, ds);
            }

            return ds;
        }
    }

    Dictionary<int, string> selectedSection = new();
    Dictionary<int, string> selectedCurve = new();

    private Dictionary<string, bool> panelOpened = new() { { "compare", true } };

    protected override async Task OnInitializedAsync()
    {
        for (int i = 0; i < noOfMonicas; i++)
        {
            Monica2Section2Oid2Data[i] = new();
            Monica2Section2Dates[i] = new();
            selectedSection[i] = "";
            selectedCurve[i] = "";
            panelOpened[$"monica{i}"] = false;
        }
    }

    void IDisposable.Dispose()
    {
    }
}
