@page "/simplified/monica"

@using MudBlazor

@using Newtonsoft.Json.Linq

@using Mas.Rpc
@using Mas.Infrastructure.BlazorComponents

@inject IJSRuntime JSRuntime
@inject Services.RunMonica runMonica
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@implements IDisposable

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to MONICA instance (capnp://host:port/token)"
                            CapabilityChanged=@CapabilityChanged
                            TCapnpInterface="Model.IEnvInstance<Common.StructuredText, Common.StructuredText>"
                            @bind-SturdyRef=monicaSturdyRef>

        </ConnectToSturdyRef>
    </MudItem>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                            CapabilityChanged=@TimeSeriesCapabilityChanged
                            TCapnpInterface=@Climate.ITimeSeries
                            @bind-SturdyRef=timeSeriesSturdyRef>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <GeoposPicker @bind-LatLng=LatLng
                      Width="50%" Height="400px"
                      CenterLatLng=@LatLng>
        </GeoposPicker>
    </MudItem>
    <MudItem xs="12">
        <SoilService LatLng=@LatLng ProfileLayers=@profileLayers HideGeoPosPicker=@true></SoilService>
    </MudItem>
    <MudItem xs="12" Class="d-flex flex-row py-2 px-1">
        <MudButton Variant=@Variant.Filled Color=@Color.Primary OnClick=@RunMonica>Run MONICA</MudButton>
        <MudChipSet SelectedChipsChanged=@(cs => selectedResultSection = cs.Select(c => c.Text).FirstOrDefault())
                    Mandatory=@true
                    Filter=@true>
            @foreach (var (s, i) in Section2Oid2Data.Keys.Select((s, i) => (s, i)))
            {
                <MudChip @ref=defaultSelectedSectionChips[i] Text=@s Default=@(s == selectedResultSection)></MudChip>
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="12">
        <Highchart Data=@(Section2Oid2Data.GetValueOrDefault(selectedResultSection, new Dictionary<string, IEnumerable<float>>()))
                   Dates=@(Section2Dates.GetValueOrDefault(selectedResultSection, new List<DateTime>()))></Highchart>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudText>@monicaResult</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudAlert Severity="Severity.Error">@monicaErrorMessage</MudAlert>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Model.IEnvInstance<Common.StructuredText, Common.StructuredText> MonicaInstanceCap { get; set; }
    private String monicaSturdyRef { get; set; } = "capnp://login01.cluster.zalf.de:12003";

    [Parameter]
    public EventCallback<Model.IEnvInstance<Common.StructuredText, Common.StructuredText>> MonicaInstanceCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    [Parameter]
    public Climate.ITimeSeries TimeSeriesCap { get; set; }
    private String timeSeriesSturdyRef { get; set; } = "capnp://login01.cluster.zalf.de:11002";

    [Parameter]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    private List<Soil.Layer> profileLayers = new List<Soil.Layer>();

    [Parameter]
    public (double, double) LatLng { get; set; } = (51.0, 10.0);

    private String monicaResult;
    private String monicaErrorMessage;

    private Dictionary<String, Dictionary<String, IEnumerable<float>>> Section2Oid2Data =
        new Dictionary<String, Dictionary<String, IEnumerable<float>>>();

    private MudChip[] defaultSelectedSectionChips = new MudChip[1];

    private Dictionary<String, IEnumerable<DateTime>> Section2Dates =
    new Dictionary<String, IEnumerable<DateTime>>();

    private String selectedResultSection = "";

    private async Task CapabilityChanged(Model.IEnvInstance<Common.StructuredText, Common.StructuredText> monicaInstance)
    {
        if (monicaInstance == null) return;

        if (MonicaInstanceCap != monicaInstance) MonicaInstanceCap?.Dispose();
        MonicaInstanceCap = monicaInstance;

        //await RunMonica();
    }

    private async Task TimeSeriesCapabilityChanged(Climate.ITimeSeries timeSeries)
    {
        if (timeSeries == null) return;

        if (TimeSeriesCap != timeSeries) TimeSeriesCap?.Dispose();
        TimeSeriesCap = timeSeries;

        //await RunMonica();
    }

    private async Task MarkDefaultChipsAfterLoad(MudChip[] chips, int loadAfterMilliSeconds, Action<MudChip[]> action = null)
    {
        await Task.Delay(loadAfterMilliSeconds);

        if (chips.All(c => c == null))
        {
            _ = MarkDefaultChipsAfterLoad(chips, loadAfterMilliSeconds, action);
            return;
        }

        var selected = new List<MudChip>();
        foreach (var c in chips)
        {
            c.IsSelected = c.Default;
            if (c.IsSelected) selected.Add(c);
        }
        if (action != null) action(selected.ToArray());
        StateHasChanged();
    }

    private async Task RunMonica()
    {
        if (MonicaInstanceCap == null || TimeSeriesCap == null || !profileLayers.Any()) return;

        var files = new List<String> {
            "Data-Full/sim-min.json", "Data-Full/crop-min.json", "Data-Full/site-min.json", "Data-Full/climate-min.csv"
        };
        var envj = await runMonica.RunMonicaAsync(files, new Core.Share.UserSetting(), Core.Share.Enums.MonicaParametersBasePathTypeEnum.LocalServer);

        var menv = new Model.Env<Common.StructuredText>()
        {
            TimeSeries = Capnp.Rpc.Proxy.Share(TimeSeriesCap),
            SoilProfile = new Soil.Profile() { Layers = profileLayers },
            Rest = new Common.StructuredText()
            {
                Structure = new Common.StructuredText.structure { which = Common.StructuredText.structure.WHICH.Json },
                Value = envj.ToString()
            }
        };

        Section2Oid2Data.Clear();
        Section2Dates.Clear();

        try
        {
            var res = await MonicaInstanceCap.Run(menv);
            var resj = JObject.Parse(res.Value);
            var data = resj["data"]; //list
            foreach (var section in data.Select(s => s.Value<JObject>()))
            {
                var oids = section["outputIds"].Select(oid =>
                oid["displayName"].Value<String>().Length == 0
                ? oid["name"].Value<String>()
                : oid["displayName"].Value<String>());

                var sectionName = section["origSpec"].Value<String>().Trim(new char[] { '\"' });
                Section2Oid2Data[sectionName] = new Dictionary<String, IEnumerable<float>>();

                var results = section["results"];
                foreach (var (name, result) in oids.Zip(results))
                {
                    var type = result.First?.Type;
                    switch (type ?? JTokenType.None)
                    {
                        case JTokenType.Integer:
                        case JTokenType.Float: Section2Oid2Data[sectionName][name] = result.Select(v => v.Value<float>()); break;

                        case JTokenType.String:
                            try
                            {
                                var date = result.First?.Value<DateTime>();
                                if (!date.HasValue) continue;
                            }
                            catch (System.FormatException) { continue; }
                            goto case JTokenType.Date;
                        case JTokenType.Date: Section2Dates[sectionName] = result.Select(v => v.Value<DateTime>()); break;
                    }
                }
            }
            var error = resj["error"];

            //workaround to mark the default selected chip
            defaultSelectedSectionChips = new MudChip[Section2Oid2Data.Count()];

            selectedResultSection = Section2Oid2Data.ContainsKey("daily") ? "daily" : Section2Oid2Data.FirstOrDefault().Key;

        }
        catch (Capnp.Rpc.RpcException e)
        {
            monicaErrorMessage = e.ToString();
        }

        _ = MarkDefaultChipsAfterLoad(defaultSelectedSectionChips, 300);
    }

    void IDisposable.Dispose()
    {
        MonicaInstanceCap?.Dispose();
        TimeSeriesCap?.Dispose();
    }
}
