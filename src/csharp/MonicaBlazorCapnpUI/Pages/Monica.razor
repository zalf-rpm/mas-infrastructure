@page "/simplified/monica"

@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using Newtonsoft.Json.Linq
@using Mas.Rpc
@using Mas.Infrastructure.BlazorComponents
@using Microsoft.AspNetCore.WebUtilities

@inject IJSRuntime JSRuntime
@inject MonicaBlazorCapnpUI.Services.RunMonica RunMonica
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudExpansionPanels MultiExpansion=@true>
    @code {
        private Dictionary<string, bool> panelOpened = new()
        {
            { "Connections", false },
            { "BaseFiles", false },
            { "Location", false },
            { "UpdateTimeSeries", false },
            { "ClimateService", false },
            { "SoilProfile", false },
            { "CropRotation", false },
            { "OutputConfig", false },
            { "Results", true }
        };
    }
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["Connections"]
                       Class=@(HideSturdyRefConnectors ? "d-none" : "")
                       Text="Connections">
        <MudGrid>
            <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                <ConnectToSturdyRef Label="Persistent capability to MONICA instance (capnp://host:port/token)"
                                    CapabilityChanged=@MonicaCapabilityChanged
                                    TCapnpInterface="Model.IEnvInstance<Common.StructuredText, Common.StructuredText>"
                                    @bind-SturdyRef=MonicaSturdyRef
                                    ConnectOnInit=@TryConnectOnInit>

                </ConnectToSturdyRef>
            </MudItem>
            <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                                    CapabilityChanged=@TimeSeriesCapabilityChanged
                                    TCapnpInterface=@Climate.ITimeSeries
                                    @bind-SturdyRef=TimeSeriesSturdyRef
                                    ConnectOnInit=@TryConnectOnInit>
                </ConnectToSturdyRef>
            </MudItem>
            <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                                    CapabilityChanged=@TimeSeriesFactoryCapabilityChanged
                                    TCapnpInterface=@Climate.IAlterTimeSeriesWrapperFactory
                                    @bind-SturdyRef=TimeSeriesFactorySturdyRef
                                    ConnectOnInit=@TryConnectOnInit>
                </ConnectToSturdyRef>
            </MudItem>
            <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                                    CapabilityChanged=@SoilServiceCapabilityChanged
                                    TCapnpInterface=@Soil.IService
                                    @bind-SturdyRef=SoilServiceSturdyRef
                                    ConnectOnInit=@TryConnectOnInit>
                </ConnectToSturdyRef>
            </MudItem>
            <MudItem Class=@(HideSturdyRefConnectors ? "d-none" : "") xs="12">
                <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                                    CapabilityChanged=@ClimateServiceCapabilityChanged
                                    TCapnpInterface=@Climate.IService
                                    @bind-SturdyRef=ClimateServiceSturdyRef
                                    ConnectOnInit=@TryConnectOnInit>
                </ConnectToSturdyRef>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Base sim/crop/site.json" @bind-IsExpanded=@panelOpened["BaseFiles"]>
        <MudExpansionPanels MultiExpansion=@true>
            @code {
                private Dictionary<string, bool> baseFilePanelOpened = new()
                {
            { "sim", false },
            { "crop", false },
            { "site", false },
            { "climate", false }
        };
            }
            <MudExpansionPanel Text="sim.json" @bind-IsExpanded=@baseFilePanelOpened["sim"]>
                <MudTextField T=@string Variant=@Variant.Outlined @bind-Text=simJsonTxt Lines=15 />
            </MudExpansionPanel>
            <MudExpansionPanel Text="crop.json" @bind-IsExpanded=@baseFilePanelOpened["crop"]>
                <MudTextField T=@string Variant=@Variant.Outlined @bind-Text=cropJsonTxt Lines=15 />
            </MudExpansionPanel>
            <MudExpansionPanel Text="site.json" @bind-IsExpanded=@baseFilePanelOpened["site"]>
                <MudTextField T=@string Variant=@Variant.Outlined @bind-Text=siteJsonTxt Lines=15 />
            </MudExpansionPanel>
            <!--
            <MudExpansionPanel Text="Base sim/crop/site.json" @bind-IsExpanded=@baseFilePanelOpened["sim"]>
                <MudTextField T=@string Label="sim.json" Variant=@Variant.Outlined @bind-Text=simJsonTxt Lines=10 />
            </MudExpansionPanel>
                -->
        </MudExpansionPanels>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["Location"]
                       Text=@($"Data location ({Math.Round(LatLng.Item1, 2)}N/{Math.Round(LatLng.Item2, 2)}E)")>
        <GeoposPicker @bind-LatLng=LatLng
                      Width="50%" Height="400px"
                      CenterLatLng=@LatLng
                      Zoom=6>
        </GeoposPicker>
    </MudExpansionPanel>
    <MudExpansionPanel Class=@(true ? "d-none" : "")
                       @bind-IsExpanded=@panelOpened["ClimateService"] 
                       Text="Choose climate data from service">
        <ClimateService ClimateServiceCap=@ClimateServiceCap
                        HideSturdyRefConnector=@true
                        HideGeoPosPicker=@true
                        LatLng=@LatLng
                        TimeSeriesCapChanged=@TimeSeriesCapabilityChanged>
        </ClimateService>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["UpdateTimeSeries"] Text="Climate data">
        @code {
            private List<Climate.Element> allClimateElements = new()
            {
            Climate.Element.tmin,
            Climate.Element.tavg,
            Climate.Element.tmax,
            Climate.Element.precip,
            Climate.Element.globrad,
            Climate.Element.wind,
            Climate.Element.sunhours,
            Climate.Element.cloudamount,
            Climate.Element.relhumid,
            Climate.Element.airpress,
            Climate.Element.vaporpress,
            Climate.Element.co2,
            Climate.Element.o3,
            Climate.Element.et0,
            Climate.Element.dewpointTemp
        };

            private Dictionary<Climate.AlterTimeSeriesWrapper.AlterType, string> allAlterTypes = new()
            {
            { Climate.AlterTimeSeriesWrapper.AlterType.add, "Add (+)" },
            { Climate.AlterTimeSeriesWrapper.AlterType.mul, "Mul (*)" }
        };

            private List<Climate.AlterTimeSeriesWrapper.Altered> alteredElements = new();

            private Climate.AlterTimeSeriesWrapper.Altered newAltered = new();
        }
        <MudGrid>
            <MudItem xs="2">
                <MudButton Class=@(AlterTimeSeriesWrapperCap == null ? "" : "d-none")
                           Variant=@Variant.Filled
                           OnClick=@WrapTimeSeries
                           Disabled=@(TimeSeriesCap == null || TimeSeriesFactoryCap == null)>
                    Update climate data
                </MudButton>
            </MudItem>
            <MudItem xs="12" Class=@(AlterTimeSeriesWrapperCap == null ? "d-none" : "")>
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="2">
                                <MudSelect T=@Climate.Element
                                           @bind-Value=newAltered.Element
                                           Label="New Element">
                                    @foreach (var elem in allClimateElements)
                                    {
                                        <MudSelectItem Value=@elem />
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <MudSelect T=@Climate.AlterTimeSeriesWrapper.AlterType
                                           @bind-Value=newAltered.Type
                                           Label="Operation">
                                    @foreach (var (type, label) in allAlterTypes)
                                    {
                                        <MudSelectItem Value=@type><MudText Typo=@Typo.body1>@label</MudText></MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="2">
                                <MudTextField @bind-Value=newAltered.Value Label="Value" />
                            </MudItem>
                            <MudItem xs="2">
                                <MudFab Color=@Color.Secondary
                                        Icon=@Icons.Material.Filled.Add
                                        Label="Add"
                                        OnClick=@(async () => {
                                              AlterTimeSeriesWrapperCap?.Alter(newAltered, false);
                                              alteredElements = (await AlterTimeSeriesWrapperCap?.AlteredElements()).ToList();
                                              StateHasChanged();
                                          }) />
                            </MudItem>
                            <MudItem xs="4"></MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12">
                <MudCard Elevation="3">
                    <MudCardContent>
                        <MudGrid>
                            @foreach (var altered in alteredElements)
                            {
                                <MudItem xs="2">
                                    <MudSelect T=@Climate.Element
                                               @bind-Value=altered.Element
                                               Label="Altered Element">
                                        @foreach (var elem in allClimateElements)
                                        {
                                            <MudSelectItem Value=@elem />
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudSelect T=@Climate.AlterTimeSeriesWrapper.AlterType
                                               @bind-Value=altered.Type
                                               Label="Operation">
                                        @foreach (var (type, label) in allAlterTypes)
                                        {
                                            <MudSelectItem Value=@type><MudText Typo=@Typo.body1>@label</MudText></MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="2">
                                    <MudTextField @bind-Value=altered.Value Label="Value" />
                                </MudItem>
                                <MudItem xs="2">
                                    <MudFab Color=@Color.Secondary
                                            Icon=@Icons.Material.Filled.Save
                                            Label="Update"
                                            OnClick=@(async () => {await AlterTimeSeriesWrapperCap?.Alter(altered, false);}) />
                                </MudItem>
                                <MudItem xs="2">
                                    <MudFab Color=@Color.Secondary
                                            Icon=@Icons.Material.Filled.Delete
                                            Label="Delete"
                                            OnClick=@(async () => {
                                                  AlterTimeSeriesWrapperCap?.Remove(altered.Element);
                                                  var aes = await AlterTimeSeriesWrapperCap?.AlteredElements();
                                                  alteredElements = aes.ToList();
                                                  StateHasChanged();
                                              }) />
                                </MudItem>
                                <MudItem xs="2"></MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" Class=@(true ? "d-none" : "")>
                @code {
                    private Dictionary<String, IEnumerable<float>> Name2Data = new();
                    private IEnumerable<DateTime> Dates = new List<DateTime>();
                }
                <Highchart Data=@Name2Data Dates=@Dates></Highchart>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["SoilProfile"] Text="Soil profile">
        <SoilService @ref=@soilServiceRef
                     LatLng=@LatLng
                     HideSturdyRefConnector=@true
                     SoilServiceCap=@SoilServiceCap
                     @bind-ProfileLayers=profileLayers
                     HideGeoPosPicker=@true>
        </SoilService>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["CropRotation"] Text="Crop rotation">

    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["OutputConfig"] Text="Output configuration">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            @code
            {
                bool showEventSelect = true;

                bool isDailyEvent(string eventShortcut)
                {
                    return eventShortcut == "daily" || eventShortcut.Contains("at");
                }
            }
            @for (int i = 0; i < events.Count; i++)
            {
                var k = i;
                var p = events[i];
                var eventShortcut = p.Item1;
                var oids = p.Item2;
                <MudTabPanel Text="@eventShortcut">
                    <MudGrid>
                        <MudItem xs="2" Class="d-flex flex-row py-2 px-1">
                            <MudSelect T=@string
                                       Class=@(showEventSelect ? "" : "d-none")
                                       Value=p.Item1
                                       ValueChanged=@(v => { events[k] = (v, oids); StateHasChanged(); })
                                       Label="Event">
                                @foreach (var eventSc in eventShortcuts)
                                {
                                    <MudSelectItem Value=@eventSc />
                                }
                            </MudSelect>
                            <MudTextField T=@string
                                          Class=@(showEventSelect ? "d-none" : "")
                                          Value=p.Item1
                                          ValueChanged=@(v => { events[k] = (v, oids); StateHasChanged(); })
                                          Label="Event"
                                          Variant="Variant.Outlined" />
                            <MudFab Color=@Color.Secondary
                                    Icon=@(showEventSelect ? Icons.Material.Filled.Edit : Icons.Material.Filled.Close)
                                    OnClick=@(() => showEventSelect = !showEventSelect) />
                        </MudItem>
                        <MudItem xs="10">
                            <MudChipSet AllClosable=@true OnClose=@(c => oids.Remove(c.Tag as OId))>
                                @foreach (var oid in oids)
                                {
                                    <MudChip Tag=@oid Text=@oid.ToString() OnClick=@(() => editOId = oid) />
                                }
                            </MudChipSet>
                        </MudItem>
                        <MudItem xs="2">
                            <MudField DisableUnderLine=@true>
                                <MudButton Color=@Color.Primary
                                           Variant=@Variant.Filled
                                           OnClick=@(() => { oids.Add(editOId); editOId = OId.Out(""); })
                                           Disabled=@(editOId.From > editOId.To)>
                                    Add/Change
                                </MudButton>
                            </MudField>
                        </MudItem>
                        <MudItem xs="2">
                            <MudField Label="Output Name" DisableUnderLine=@true>
                                <MudTextField @bind-Value=editOId.Name Variant=@Variant.Outlined></MudTextField>
                            </MudField>
                        </MudItem>
                        <MudItem xs="4">
                            <MudField Label="Layers" DisableUnderLine=@true>
                                <MudGrid>
                                    <MudItem xs="3">
                                        <MudSelect @bind-Value=editOId.From
                                                   Label="From"
                                                   Error=@(editOId.From > editOId.To)
                                                   ErrorText="From > To">
                                            @for (int? i = 1; i <= 20; i++)
                                                {
                                                <MudSelectItem Value=@i />
                                                }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudSelect @bind-Value=editOId.To
                                                   Label="From"
                                                   Error=@(editOId.To < editOId.From)
                                                   ErrorText="To < From">
                                            @for (int? i = 1; i <= 20; i++)
                                                {
                                                <MudSelectItem Value=@i />
                                                }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="3">
                                        <MudSelect Label="Aggregation"
                                                   @bind-Value=editOId.LayerAgg>
                                            @foreach (Agg? agg in Enum.GetValues(typeof(Agg)))
                                                {
                                                <MudSelectItem Value=@agg />
                                                }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="3" Class=@(isDailyEvent(eventShortcut) ? "d-none" : "")>
                                        <MudSelect Label="Aggregation"
                                                   @bind-Value=editOId.TimeAgg>
                                            @foreach (Agg? agg in Enum.GetValues(typeof(Agg)))
                                                {
                                                <MudSelectItem Value=@agg />
                                                }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>
                            </MudField>
                        </MudItem>
                    </MudGrid>
                </MudTabPanel>
            }
            <MudTabPanel Text="new">
                <MudGrid>
                    <MudItem xs="2" Class="d-flex flex-row py-2 px-1">
                        <MudSelect T=@string
                                   Class=@(showEventSelect ? "" : "d-none")
                                   ValueChanged=@(v => { events.Add((v, new List<OId>())); StateHasChanged(); })
                                   Label="New Event">
                            @foreach (var eventSc in eventShortcuts)
                            {
                                <MudSelectItem Value=@eventSc />
                            }
                        </MudSelect>
                        <MudTextField T=@string
                                      Class=@(showEventSelect ? "d-none" : "")
                                      ValueChanged=@(v => { events.Add((v, new List<OId>())); StateHasChanged(); })
                                      Label="New Event"
                                      Variant="Variant.Outlined" />
                        <MudFab Color=@Color.Secondary
                                Icon=@(showEventSelect ? Icons.Material.Filled.Edit : Icons.Material.Filled.Close)
                                OnClick=@(() => showEventSelect = !showEventSelect) />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded=@panelOpened["Results"] Text="MONICA results">
        <MudGrid>
            <MudItem xs="2">
                <MudButton Variant=@Variant.Filled Class="run-main" OnClick=@RunMonicaModel>Run MONICA</MudButton>
            </MudItem>
            <MudItem xs="10">
                <MudChipSet SelectedChipsChanged=@(cs => {
                                                       selectedResultSection = cs.Select(c => c.Text).FirstOrDefault();
                                                       MonicaResultsChanged = true;
                                                   })
                            Mandatory=@true
                            Filter=@true>
                    @foreach (var (s, i) in Section2Oid2Data.Keys.Select((s, i) => (s, i)))
                    {
                        <MudChip @ref=defaultSelectedSectionChips[i] Text=@s Default=@(s == selectedResultSection)></MudChip>
                    }
                </MudChipSet>
            </MudItem>
            <MudItem xs="12">
                @code {
                    private List<Highchart.AxisConfig> yAxisConfigs = new()
                    {
                        new Highchart.AxisConfig { Id = "def", Title = "other values" },
                        new Highchart.AxisConfig { Id = "yields", Title = "Yield [kg/ha]", Opposite = true }
                    };
                    private Dictionary<string, Highchart.CurveConfig> curveName2Config = new()
                    {
                        { "Yield", new Highchart.CurveConfig { DisplayAxisId = "yields", IsVisible = true } }
                    };
                }
                <Highchart Title="MONICA results"
                           XAxisTitle="Date"
                           Data=@(Section2Oid2Data.GetValueOrDefault(selectedResultSection, new Dictionary<string, IEnumerable<float>>()))
                           Dates=@(Section2Dates.GetValueOrDefault(selectedResultSection, new List<DateTime>()))
                           DataChanged=@MonicaResultsChanged
                           ChartRerendered=@(() => MonicaResultsChanged = false)
                           YAxisConfigs=@yAxisConfigs
                           CurveName2Config=@curveName2Config>
                </Highchart>
            </MudItem>
            <!--<MudItem xs="12">
                            <MudCard>
                                <MudCardContent>
                                    <MudText>@monicaResult</MudText>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
            -->
            <MudItem xs="12">
                <MudAlert Severity="Severity.Error">@monicaErrorMessage</MudAlert>
            </MudItem>
        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>
