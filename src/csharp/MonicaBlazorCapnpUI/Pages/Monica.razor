@page "/simplified/monica"

@using MudBlazor

@using Newtonsoft.Json.Linq

@using Mas.Rpc
@using Mas.Infrastructure.BlazorComponents

@inject IJSRuntime JSRuntime
@inject Services.RunMonica runMonica
@inject ISnackbar Snackbar

@implements IDisposable

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to MONICA instance (capnp://host:port/token)"
                            CapabilityChanged=@CapabilityChanged
                            TCapnpInterface="Model.IEnvInstance<Common.StructuredText, Common.StructuredText>"
                            @bind-SturdyRef=monicaSturdyRef>

        </ConnectToSturdyRef>
    </MudItem>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                            CapabilityChanged=@TimeSeriesCapabilityChanged
                            TCapnpInterface=@Climate.ITimeSeries
                            @bind-SturdyRef=timeSeriesSturdyRef>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <ConnectToSturdyRef Label="Persistent capability to soil service (capnp://host:port/token)"
                            CapabilityChanged=@SoilServiceCapabilityChanged
                            TCapnpInterface=@Soil.IService
                            @bind-SturdyRef=@soilServiceSturdyRef>
        </ConnectToSturdyRef>
        <GeoposPicker @bind-LatLng=LatLng
                      Width="50%" Height="400px"
                      CenterLatLng=@LatLng>
        </GeoposPicker>
    </MudItem>
    <MudItem xs="12" Class="d-flex flex-row py-2 px-1">
        <MudButton Variant=@Variant.Filled Color=@Color.Primary OnClick=@GetSoilProfiles>Get soil profiles</MudButton>
        <MudSelect T=@Soil.PropertyName
                   Label="Available soil properties"
                   HelperText="Pick all needed soil properties"
                   MultiSelection=@true
                   @bind-Text=@displayedChosenPropertyNames
                   @bind-SelectedValues=@chosenSoilPropertyNames>
            @foreach (var p in availableSoilProps)
            {
                <MudSelectItem T=@Soil.PropertyName Value=@p>@p.ToString()</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <MudTable T=@L
                  Items=@profileLayers
                  Hover=@true
                  Filter="new Func<L,bool>(FilterFunc)"
                  CommitEditTooltip="Commit Edit"
                  OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Layers</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="layerSearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <!--<ColGroup>
                <col style="width:50px;" />
                <col style="width:80px;" />
                <col style="width:50%;" />
                <col />
                <col />
                <col style="width:50px;" />
            </ColGroup>-->
            <HeaderContent>
                <MudTh>Size</MudTh>
                @foreach (var propName in chosenSoilPropertyNames)
                {
                    <MudTh>@propName</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Size">@context.Layer.Size.ToString()</MudTd>
                @foreach (var propName in chosenSoilPropertyNames)
                {
                    <MudTd DataLabel=@propName.ToString()>
                        @context.Props[propName.ToString()]
                        @*(GetSoilPropertyValue(context.Properties.Where(p => p.Name == propName).FirstOrDefault()))*@
                    </MudTd>
                }
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Size">@context.Layer.Size.ToString()</MudTd>
                @foreach (var propName in chosenSoilPropertyNames)
                {
                    <MudTd DataLabel=@propName.ToString()>
                        <MudTextField @bind-Value=@context.Props[propName.ToString()] Required />
                    </MudTd>
                }
            </RowEditingTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="12">
        <MudTreeView T="string" Style="width: 500px;">
            @foreach (var l in profileLayers)
            {
                <MudTreeViewItem Value=@l.Layer.Size.ToString()>
                    @foreach (var p in l.Props)
                    {
                        <MudTreeViewItem Value=@($"{p.Key}: {p.Value}") />
                    }
                </MudTreeViewItem>
            }
        </MudTreeView>
    </MudItem>
    <MudItem xs="12">
        <MudButton Variant=@Variant.Filled Color=@Color.Primary OnClick=@RunMonica>Run MONICA</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudSelect Label="Select result section" @bind-Value=@selectedResultSection>
            @foreach (var p in Section2Oid2Data)
            {
                <MudSelectItem Value=@p.Key>@p.Key</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
    <MudItem xs="12">
        <Highchart Data=@(Section2Oid2Data.GetValueOrDefault(selectedResultSection, new Dictionary<string, IEnumerable<float>>()))
                   Dates=@(Section2Dates.GetValueOrDefault(selectedResultSection, new List<DateTime>()))></Highchart>
    </MudItem>
    <!--
    <MudItem xs="12">
        <MudExpansionPanels MultiExpansion="true">
            @foreach (var p in Section2Oid2Data)
            {
                <MudExpansionPanel Text=@p.Key>
                    <Highchart Data=@p.Value></Highchart>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudItem>
    -->
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudText>@monicaResult</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudAlert Severity="Severity.Error">@monicaErrorMessage</MudAlert>
    </MudItem>
</MudGrid>

@code {
        [Parameter]
        public Model.IEnvInstance<Common.StructuredText, Common.StructuredText> MonicaInstanceCap { get; set; }
    private String monicaSturdyRef = "capnp://localhost:6666";
    private bool componentIsMonicaInstanceCapOwner = false;

    [Parameter]
    public EventCallback<Model.IEnvInstance<Common.StructuredText, Common.StructuredText>> MonicaInstanceCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    [Parameter]
    public Climate.ITimeSeries TimeSeriesCap { get; set; }
    private String timeSeriesSturdyRef = "capnp://localhost:11002";
    private bool componentIsTimeSeriesCapOwner = false;

    [Parameter]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    [Parameter]
    public Soil.IService SoilServiceCap { get; set; }
    private String soilServiceSturdyRef = "capnp://login01.cluster.zalf.de:10000";
    private bool componentIsSoilServiceCapOwner = false;
    private Soil.Profile profile;
    //private List<Soil.Layer> profileLayers = new List<Soil.Layer>();
    private List<L> profileLayers = new List<L>();
    private IEnumerable<Soil.PropertyName> availableSoilProps = new List<Soil.PropertyName>();
    private HashSet<Soil.PropertyName> chosenSoilPropertyNames = new HashSet<Soil.PropertyName>();
    private String displayedChosenPropertyNames = "";

    struct L
    {
        public Soil.Layer Layer { get; set; }
        public Dictionary<String, String> Props { get; set; }
    }

    [Parameter]
    public EventCallback<Soil.IService> SoilServiceCapChanged { get; set; }

    [Parameter]
    public (double, double) LatLng { get; set; } = (51.0, 10.0);

    private String monicaResult;
    private String monicaErrorMessage;

    private Dictionary<String, Dictionary<String, IEnumerable<float>>> Section2Oid2Data =
        new Dictionary<String, Dictionary<String, IEnumerable<float>>>();

    private Dictionary<String, IEnumerable<DateTime>> Section2Dates =
        new Dictionary<String, IEnumerable<DateTime>>();

    private String selectedResultSection = "";

    private async Task CapabilityChanged(Model.IEnvInstance<Common.StructuredText, Common.StructuredText> monicaInstance)
    {
        if (monicaInstance == null) return;

        if (MonicaInstanceCap != monicaInstance && componentIsMonicaInstanceCapOwner) MonicaInstanceCap?.Dispose();
        MonicaInstanceCap = monicaInstance;
        componentIsMonicaInstanceCapOwner = true;

        //await RunMonica();
    }

    private async Task TimeSeriesCapabilityChanged(Climate.ITimeSeries timeSeries)
    {
        if (timeSeries == null) return;

        if (TimeSeriesCap != timeSeries && componentIsMonicaInstanceCapOwner) TimeSeriesCap?.Dispose();
        TimeSeriesCap = timeSeries;
        componentIsTimeSeriesCapOwner = true;

        //await RunMonica();
    }

    private async Task SoilServiceCapabilityChanged(Soil.IService service)
    {
        if (service == null) return;

        if (SoilServiceCap != service && componentIsSoilServiceCapOwner) SoilServiceCap?.Dispose();
        SoilServiceCap = service;
        componentIsSoilServiceCapOwner = true;

        await GetAllAvailableSoilProperties();
        //await GetSoilProfiles();
    }

    private async Task GetAllAvailableSoilProperties()
    {
        var allProps = await SoilServiceCap.GetAllAvailableParameters(false);
        availableSoilProps = allProps.Item1.Concat(allProps.Item2);
    }

    private string GetSoilPropertyValue(Soil.Layer.Property p)
    {
        switch (p.which)
        {
            case Soil.Layer.Property.WHICH.BValue: return p.BValue?.ToString();// (p.BValue ?? false) ? "true" : "false";
            case Soil.Layer.Property.WHICH.F32Value: return p.F32Value?.ToString();
            case Soil.Layer.Property.WHICH.Type: return p.Type;
            case Soil.Layer.Property.WHICH.undefined:
            default: return "";
        }
    }

    private async Task GetSoilProfiles()
    {
        if (SoilServiceCap == null) return;

        var profiles = await SoilServiceCap.ProfilesAt(new Geo.LatLonCoord { Lat = LatLng.Item1, Lon = LatLng.Item2 },
            new Soil.Query
            {
                Mandatory = chosenSoilPropertyNames.ToArray(),
                OnlyRawData = false
            }
        );
        if (profiles.Count > 0)
        {
            profile = profiles[0];
            profileLayers.Clear();
            foreach (var l in profile.Layers)
            {
                var x = l.Properties.
                    Select(p => (p.Name.ToString(), GetSoilPropertyValue(p))).
                    ToDictionary(p => p.Item1, p => p.Item2);
                profileLayers.Add(new L() { Layer = l, Props = x });
            }
        }
    }

    private String layerSearchString = "";
    private bool FilterFunc(L layer)
    {
        /*
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Sign.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
            return true;
        */
        return true;
    }

    private async Task RunMonica()
    {
        if (MonicaInstanceCap == null || TimeSeriesCap == null) return;

        var files = new List<String> {
            "Data-Full/sim-min.json", "Data-Full/crop-min.json", "Data-Full/site-min.json", "Data-Full/climate-min.csv"
        };
        var envj = await runMonica.RunMonicaAsync(files, new Core.Share.UserSetting(), Core.Share.Enums.MonicaParametersBasePathTypeEnum.LocalServer);

        var h = await TimeSeriesCap.Header();

        var menv = new Model.Env<Common.StructuredText>()
        {
            TimeSeries = Capnp.Rpc.Proxy.Share(TimeSeriesCap),
            Rest = new Common.StructuredText()
            {
                Structure = new Common.StructuredText.structure { which = Common.StructuredText.structure.WHICH.Json },
                Value = envj.ToString()
            }
        };

        Section2Oid2Data.Clear();
        Section2Dates.Clear();

        try
        {
            var res = await MonicaInstanceCap.Run(menv);
            var resj = JObject.Parse(res.Value);
            var data = resj["data"]; //list
            foreach (var section in data.Select(s => s.Value<JObject>()))
            {
                var oids = section["outputIds"].Select(oid =>
                oid["displayName"].Value<String>().Length == 0
                ? oid["name"].Value<String>()
                : oid["displayName"].Value<String>());

                var sectionName = section["origSpec"].Value<String>().Trim(new char[] { '\"' });
                Section2Oid2Data[sectionName] = new Dictionary<String, IEnumerable<float>>();

                var results = section["results"];
                foreach (var (name, result) in oids.Zip(results))
                {
                    var type = result.First?.Type;
                    switch (type ?? JTokenType.None)
                    {
                        case JTokenType.Integer:
                        case JTokenType.Float: Section2Oid2Data[sectionName][name] = result.Select(v => v.Value<float>()); break;

                        case JTokenType.String:
                            try
                            {
                                var date = result.First?.Value<DateTime>();
                                if (!date.HasValue) continue;
                            }
                            catch (System.FormatException) { continue; }
                            goto case JTokenType.Date;
                        case JTokenType.Date: Section2Dates[sectionName] = result.Select(v => v.Value<DateTime>()); break;
                    }
                }
            }
            var error = resj["error"];

            selectedResultSection = Section2Oid2Data.ContainsKey("daily") ? "daily" : Section2Oid2Data.FirstOrDefault().Key;

        }
        catch (Capnp.Rpc.RpcException e)
        {
            monicaErrorMessage = e.ToString();
        }
    }


    void IDisposable.Dispose()
    {
        if (componentIsMonicaInstanceCapOwner) MonicaInstanceCap?.Dispose();
        if (componentIsTimeSeriesCapOwner) TimeSeriesCap?.Dispose();
    }
}
