@page "/simplified/monica"

@using MudBlazor

@using Newtonsoft.Json.Linq

@using Mas.Rpc
@using Mas.Infrastructure.BlazorComponents

@inject IJSRuntime JSRuntime
@inject Services.RunMonica runMonica
@inject ISnackbar Snackbar

@implements IDisposable

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to MONICA instance (capnp://host:port/token)"
                            CapabilityChanged=@CapabilityChanged
                            TCapnpInterface="Model.IEnvInstance<Common.StructuredText, Common.StructuredText>"
                            @bind-SturdyRef=monicaSturdyRef>

        </ConnectToSturdyRef>
    </MudItem>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to climate time series (capnp://host:port/token)"
                            CapabilityChanged=@TimeSeriesCapabilityChanged
                            TCapnpInterface=@Climate.ITimeSeries
                            @bind-SturdyRef=timeSeriesSturdyRef>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <ConnectToSturdyRef Label="Persistent capability to soil service (capnp://host:port/token)"
                            CapabilityChanged=@SoilServiceCapabilityChanged
                            TCapnpInterface=@Soil.IService
                            @bind-SturdyRef=@soilServiceSturdyRef>
        </ConnectToSturdyRef>
        <GeoposPicker @bind-LatLng=LatLng
                      Width="50%" Height="400px"
                      CenterLatLng=@LatLng>
        </GeoposPicker>
    </MudItem>
    <MudItem xs="12" Class="d-flex flex-row py-2 px-1">
        <MudButton Class="px-5" Variant=@Variant.Filled Color=@Color.Primary OnClick=@GetSoilProfiles>Get soil profiles with ...</MudButton>
        <MudChipSet SelectedChipsChanged=@(cs => chosenSoilPropertyNames = cs.Select(c => (Soil.PropertyName)c.Tag))
                    MultiSelection=@true
                    Filter=@true>
            @foreach (var (p, i) in availableSoilProps.Select((p, i) => (p, i)))
            {
                var pn = p.ToString();
                <MudChip @ref=defaultSelectedSoilPropertyNameChips[i]
                         Tag=@p
                         Text=@pn
                         Default=@defaultSelectedSoilProps.Contains(pn)>
                </MudChip>
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="12">
        <MudTable T=@Soil.Layer
                  Items=@profileLayers
                  Hover=@true
                  CommitEditTooltip="Commit Edit"
                  OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))">
            <HeaderContent>
                <MudTh>Size</MudTh>
                @foreach (var propName in chosenSoilPropertyNames)
                {
                    <MudTh>@propName.ToString()</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Size">@context.Size.ToString()</MudTd>
                @foreach (var propName in chosenSoilPropertyNames)
                {
            <MudTd DataLabel=@propName.ToString()>
                @((from p in context.Properties 
                   where p.Name == propName 
                   select GetSoilPropertyValue(p)).FirstOrDefault())
            </MudTd>
                }
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Size">@context.Size.ToString()</MudTd>
                @foreach (var propName in chosenSoilPropertyNames)
                {
                    var props = context.Properties.Where(p => p.Name == propName);
                    if (props.Any())
                    {
                        var prop = props.First();
                        Func<float?, string> valid = val => null;
                        <MudTd DataLabel=@prop.Name.ToString()>
                            @switch (prop.Name)
                            {
                                case Soil.PropertyName.sand:
                                case Soil.PropertyName.clay:
                                case Soil.PropertyName.silt:
                                    valid = val => val < 0.0 || val > 1.0 ? "Range (0.0 - 1.0)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="fraction" />
                                    break;
                                case Soil.PropertyName.fieldCapacity:
                                case Soil.PropertyName.permanentWiltingPoint:
                                case Soil.PropertyName.saturation:
                                case Soil.PropertyName.sceleton:
                                    valid = val => val < 0.0 || val > 1.0 ? "Range (0.0 - 1.0)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="vol-fraction" />
                                    break;
                                case Soil.PropertyName.organicCarbon:
                                case Soil.PropertyName.organicMatter:
                                    valid = val => val < 0.0 || val > 1.0 ? "Range (0.0 - 1.0)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="mass%" />
                                    break;
                                case Soil.PropertyName.ammonium:
                                    valid = val => val < 0.0 || val > 1000 ? "Range (0.0 - 1000)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="kg NH4-N m-3" />
                                    break;
                                case Soil.PropertyName.nitrate:
                                    valid = val => val < 0.0 || val > 1000 ? "Range (0.0 - 1000)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="kg NO3-N m-3" />
                                    break;
                                case Soil.PropertyName.bulkDensity:
                                case Soil.PropertyName.rawDensity:
                                    valid = val => val < 0.0 || val > 2500.0 ? "Range (600 - 2500)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="kg m-3" />
                                    break;
                                case Soil.PropertyName.pH:
                                    valid = val => val < 0 || val > 14 ? "Range (0 - 14)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="" />
                                    break;
                                case Soil.PropertyName.soilMoisture:
                                    valid = val => val < 0.0 || val > 1.0 ? "Range (0 - 1)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="fraction" />
                                    break;
                                case Soil.PropertyName.cnRatio:
                                    valid = val => val < 0.0 || val > 1.0 ? "Range (0 - 1)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="" />
                                    break;
                                case Soil.PropertyName.soilWaterConductivityCoefficient:
                                    valid = val => val < 0.0 ? "Range (0 - ?)" : null;
                                    <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                  Adornment="Adornment.End" AdornmentText="" />
                                    break;
                                case Soil.PropertyName.inGroundwater:
                                case Soil.PropertyName.impenetrable:
                                    <MudSwitch @bind-Checked=prop.BValue Label=@prop.BValue?.ToString() />
                                    break;
                                default:
                                    <MudTextField T=@String
                                                  Value=@GetSoilPropertyValue(prop)
                                                  ValueChanged=@(v => SetSoilPropertyValue(prop, v))
                                                  Required />
                                    break;
                            }
                        </MudTd>

                    }
                    else
                    {
                        <MudTd DataLabel=@propName.ToString()></MudTd>
                    }
                }
            </RowEditingTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="12" Class="d-flex flex-row py-2 px-1">
        <MudButton Variant=@Variant.Filled Color=@Color.Primary OnClick=@RunMonica>Run MONICA</MudButton>
        <MudChipSet SelectedChipsChanged=@(cs => selectedResultSection = cs.Select(c => c.Text).FirstOrDefault())
                    Mandatory=@true
                    Filter=@true>
            @foreach (var (s, i) in Section2Oid2Data.Keys.Select((s, i) => (s, i)))
            {
                <MudChip @ref=defaultSelectedSectionChips[i] Text=@s Default=@(s == selectedResultSection)></MudChip>
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="12">
        <Highchart Data=@(Section2Oid2Data.GetValueOrDefault(selectedResultSection, new Dictionary<string, IEnumerable<float>>()))
                   Dates=@(Section2Dates.GetValueOrDefault(selectedResultSection, new List<DateTime>()))></Highchart>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudText>@monicaResult</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudAlert Severity="Severity.Error">@monicaErrorMessage</MudAlert>
    </MudItem>
</MudGrid>

@code {
                        [Parameter]
                        public Model.IEnvInstance<Common.StructuredText, Common.StructuredText> MonicaInstanceCap { get; set; }
    private String monicaSturdyRef = "capnp://localhost:6666";
                private bool componentIsMonicaInstanceCapOwner = false;

                [Parameter]
                public EventCallback<Model.IEnvInstance<Common.StructuredText, Common.StructuredText>> MonicaInstanceCapChanged { get; set; }

                [Parameter]
                public bool HideSturdyRefConnector { get; set; } = false;

                [Parameter]
                public Climate.ITimeSeries TimeSeriesCap { get; set; }
                private String timeSeriesSturdyRef = "capnp://localhost:11002";
                private bool componentIsTimeSeriesCapOwner = false;

                [Parameter]
                public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

                [Parameter]
                public Soil.IService SoilServiceCap { get; set; }
                private String soilServiceSturdyRef = "capnp://login01.cluster.zalf.de:10000";
                private bool componentIsSoilServiceCapOwner = false;
                private Soil.Profile profile;
                private List<Soil.Layer> profileLayers = new List<Soil.Layer>();
                private IEnumerable<Soil.PropertyName> availableSoilProps = new List<Soil.PropertyName>();
                private IEnumerable<Soil.PropertyName> chosenSoilPropertyNames = new List<Soil.PropertyName>();
                private MudChip[] defaultSelectedSoilPropertyNameChips = new MudChip[0];
                private HashSet<String> defaultSelectedSoilProps = new HashSet<String>() { "sand", "clay", "soilType", "bulkDensity", "organicCarbon" };
                private MudChipSet chosenSoilPropertyNamesChipset;

                [Parameter]
                public EventCallback<Soil.IService> SoilServiceCapChanged { get; set; }

                [Parameter]
                public (double, double) LatLng { get; set; } = (51.0, 10.0);

                private String monicaResult;
                private String monicaErrorMessage;

                private Dictionary<String, Dictionary<String, IEnumerable<float>>> Section2Oid2Data =
                    new Dictionary<String, Dictionary<String, IEnumerable<float>>>();

                private MudChip[] defaultSelectedSectionChips = new MudChip[1];

                private Dictionary<String, IEnumerable<DateTime>> Section2Dates =
                new Dictionary<String, IEnumerable<DateTime>>();

                private String selectedResultSection = "";

                private async Task CapabilityChanged(Model.IEnvInstance<Common.StructuredText, Common.StructuredText> monicaInstance)
                {
                    if (monicaInstance == null) return;

                    if (MonicaInstanceCap != monicaInstance && componentIsMonicaInstanceCapOwner) MonicaInstanceCap?.Dispose();
                    MonicaInstanceCap = monicaInstance;
                    componentIsMonicaInstanceCapOwner = true;

                    //await RunMonica();
                }

                private async Task TimeSeriesCapabilityChanged(Climate.ITimeSeries timeSeries)
                {
                    if (timeSeries == null) return;

                    if (TimeSeriesCap != timeSeries && componentIsMonicaInstanceCapOwner) TimeSeriesCap?.Dispose();
                    TimeSeriesCap = timeSeries;
                    componentIsTimeSeriesCapOwner = true;

                    //await RunMonica();
                }

                private async Task SoilServiceCapabilityChanged(Soil.IService service)
                {
                    if (service == null) return;

                    if (SoilServiceCap != service && componentIsSoilServiceCapOwner) SoilServiceCap?.Dispose();
                    SoilServiceCap = service;
                    componentIsSoilServiceCapOwner = true;

                    await GetAllAvailableSoilProperties();
                    //await GetSoilProfiles();
                }

                private async Task GetAllAvailableSoilProperties()
                {
                    var allProps = await SoilServiceCap.GetAllAvailableParameters(false);
                    availableSoilProps = allProps.Item1.Concat(allProps.Item2);
                    defaultSelectedSoilPropertyNameChips = new MudChip[availableSoilProps.Count()];

                    //workaround to mark the default chips selected even when ChipSet has been rendered once already
                    MarkDefaultChipsAfterLoad(defaultSelectedSoilPropertyNameChips, 300,
                        cs => { chosenSoilPropertyNames = cs.Select(c => (Soil.PropertyName)c.Tag); });
                }

                private async Task MarkDefaultChipsAfterLoad(MudChip[] chips, int loadAfterMilliSeconds, Action<MudChip[]> action = null)
                {
                    await Task.Delay(loadAfterMilliSeconds);
                    var selected = new List<MudChip>();
                    foreach (var c in chips)
                    {
                        c.IsSelected = c.Default;
                        if (c.IsSelected) selected.Add(c);
                    }
                    if (action != null) action(selected.ToArray());
                    StateHasChanged();
                }

                private string GetSoilPropertyValue(Soil.Layer.Property p)
                {
                    switch (p.which)
                    {
                        case Soil.Layer.Property.WHICH.BValue: return p.BValue?.ToString();// (p.BValue ?? false) ? "true" : "false";
                        case Soil.Layer.Property.WHICH.F32Value: return p.F32Value?.ToString();
                        case Soil.Layer.Property.WHICH.Type: return p.Type;
                        case Soil.Layer.Property.WHICH.undefined:
                        default: return "";
                    }
    }

    private void SetSoilPropertyValue(Soil.Layer.Property p, string value)
    {
        switch (p.which)
        {
            case Soil.Layer.Property.WHICH.BValue: p.BValue = bool.Parse(value); break;
            case Soil.Layer.Property.WHICH.F32Value: p.F32Value = float.Parse(value); break;
            //case Soil.Layer.Property.WHICH.Type: p.Type;
            case Soil.Layer.Property.WHICH.undefined:
            default: return;
        }
    }

    private async Task GetSoilProfiles()
    {
        if (SoilServiceCap == null) return;

        var profiles = await SoilServiceCap.ProfilesAt(new Geo.LatLonCoord { Lat = LatLng.Item1, Lon = LatLng.Item2 },
            new Soil.Query
            {
                Mandatory = chosenSoilPropertyNames.ToArray(),
                OnlyRawData = false
            }
        );
        if (profiles.Count > 0)
        {
            profile = profiles[0];
            profileLayers.Clear();
            foreach (var l in profile.Layers)
            {
                profileLayers.Add(l);
                //var x = l.Properties.
                //    Select(p => (p.Name.ToString(), GetSoilPropertyValue(p))).
                //    ToDictionary(p => p.Item1, p => p.Item2);
                //profileLayers.Add(new L() { Layer = l, Props = x });
            }
        }
    }

    private async Task RunMonica()
    {
        if (MonicaInstanceCap == null || TimeSeriesCap == null) return;

        var files = new List<String> {
            "Data-Full/sim-min.json", "Data-Full/crop-min.json", "Data-Full/site-min.json", "Data-Full/climate-min.csv"
        };
        var envj = await runMonica.RunMonicaAsync(files, new Core.Share.UserSetting(), Core.Share.Enums.MonicaParametersBasePathTypeEnum.LocalServer);

        var h = await TimeSeriesCap.Header();

        var menv = new Model.Env<Common.StructuredText>()
        {
            TimeSeries = Capnp.Rpc.Proxy.Share(TimeSeriesCap),
            Rest = new Common.StructuredText()
            {
                Structure = new Common.StructuredText.structure { which = Common.StructuredText.structure.WHICH.Json },
                Value = envj.ToString()
            }
        };

        Section2Oid2Data.Clear();
        Section2Dates.Clear();

        try
        {
            var res = await MonicaInstanceCap.Run(menv);
            var resj = JObject.Parse(res.Value);
            var data = resj["data"]; //list
            foreach (var section in data.Select(s => s.Value<JObject>()))
            {
                var oids = section["outputIds"].Select(oid =>
                oid["displayName"].Value<String>().Length == 0
                ? oid["name"].Value<String>()
                : oid["displayName"].Value<String>());

                var sectionName = section["origSpec"].Value<String>().Trim(new char[] { '\"' });
                Section2Oid2Data[sectionName] = new Dictionary<String, IEnumerable<float>>();

                var results = section["results"];
                foreach (var (name, result) in oids.Zip(results))
                {
                    var type = result.First?.Type;
                    switch (type ?? JTokenType.None)
                    {
                        case JTokenType.Integer:
                        case JTokenType.Float: Section2Oid2Data[sectionName][name] = result.Select(v => v.Value<float>()); break;

                        case JTokenType.String:
                            try
                            {
                                var date = result.First?.Value<DateTime>();
                                if (!date.HasValue) continue;
                            }
                            catch (System.FormatException) { continue; }
                            goto case JTokenType.Date;
                        case JTokenType.Date: Section2Dates[sectionName] = result.Select(v => v.Value<DateTime>()); break;
                    }
                }
            }
            var error = resj["error"];

            //workaround to mark the default selected chip
            defaultSelectedSectionChips = new MudChip[Section2Oid2Data.Count()];

            selectedResultSection = Section2Oid2Data.ContainsKey("daily") ? "daily" : Section2Oid2Data.FirstOrDefault().Key;

        }
        catch (Capnp.Rpc.RpcException e)
        {
            monicaErrorMessage = e.ToString();
        }

        MarkDefaultChipsAfterLoad(defaultSelectedSectionChips, 300);
    }


    void IDisposable.Dispose()
    {
        if (componentIsMonicaInstanceCapOwner) MonicaInstanceCap?.Dispose();
        if (componentIsTimeSeriesCapOwner) TimeSeriesCap?.Dispose();
    }
}
