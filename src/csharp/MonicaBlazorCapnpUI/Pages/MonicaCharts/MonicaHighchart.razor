@* Usings *@
@using MonicaBlazorZmqUI.Components
@using Core.MonicaData
@using System.Text

@* Injects *@


<!--<h3> Monica Chart </h3>-->

<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>
        <Chase Center="true"></Chase>
    </LoadingTemplate>
    <ContentTemplate>
        <Highchart Json="@chartjson">
        </Highchart>
    </ContentTemplate>
</SpinLoader>


@code{

    bool isLoading = true;
    string chartjson;

    [Parameter]
    public MonicaSerie XAxis { get; set; } = null;

    [Parameter]
    public EventCallback<MonicaSerie> XAxisChanged { get; set; }

    [Parameter]
    public List<MonicaSerie> Series { get; set; } = null;

    [Parameter]
    public EventCallback<List<MonicaSerie>> SeriesChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitialChartAsync();
        isLoading = false;
    }

    private async Task InitialChartAsync()
    {
        if (XAxis != null)
        {
            string chartTypeName = "area";  //line, area
            string chartTitleName = "Result Chart";
            string chartOrigSpec = XAxis.SerieTitle;

            //string xAxsis = "";
            
            StringBuilder xAxsis = new StringBuilder("");

            for (int i = 0; i < XAxis.Values.Count; i++)
            {
               // xAxsis += "'" + XAxis.Values[i] + "' , ";
                xAxsis.Append("'" + XAxis.Values[i] + "' , ");
            }


            bool isFirstSerie = true;
            StringBuilder series = new StringBuilder("[");

            foreach (var serie in Series)
            {
                series.Append("{ name: '" + serie.SerieTitle + "', data: [");

                for (int i = 0; i < serie.Values.Count; i++)
                {
                    series.Append(serie.Values[i] + " , ");
                }

                // Only enable the first serie & let the user enable the rest if wants
                //series += "], visible: false },";
                series.Append("]");
                if (isFirstSerie)
                {
                    series.Append(" },");
                    isFirstSerie = false;
                }
                else
                {
                    series.Append(", visible: false },");
                }

            }
            series.Append("]");

            chartjson = @" {
chart: {
zoomType: 'x',
height: 600,
type: '" + chartTypeName + @"',

},
colors: [
'#063c75',
'#1c8c44',
'#881452',
'#280137',
'#63a194',
'#2c3539',
'#428bca',
'#d9534f',
'#96ceb4',
'#80699B',
'#3D96AE',
'#DB843D',
'#92A8CD',
'#A47D7C',
'#B5CA92'],
loading: {
hideDuration: 1000,
showDuration: 1000
},
title: {
text: '" + chartTitleName + @"'
},

subtitle: {
text: '" + chartOrigSpec + @"'
},

yAxis: {
title: {
text: ' '
},
maxZoom: 2
},


xAxis: [{
title: {
  text: ' '
},
categories: [" + xAxsis + @"],
},
{
title: {
  text: ' '
},
categories: [' '],
}],

legend: {
layout: 'vertical',
align: 'right',
verticalAlign: 'middle'
},

plotOptions: {
area: {
fillColor: {
linearGradient: {
x1: 0,
y1: 0,
x2: 0,
y2: 0.6
},
stops: [
    [0, Highcharts.getOptions().colors[0]],
    [1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]
]
},
marker: {
radius: 2
},
lineWidth: 1,
states: {
hover: {
lineWidth: 1
}
},
threshold: null
}
},

series:" + series + @",

responsive: {
rules: [{
condition: {
maxWidth: 500
},
chartOptions: {
legend: {
layout: 'horizontal',
align: 'center',
verticalAlign: 'bottom'
}
}
}]
},
navigation: {
buttonOptions: {
align: 'right'
}
},
exporting: {
sourceWidth: 1600,
scale: 1,
buttons: {
            contextButton: {
                menuItems: ['downloadJPEG', 'downloadPNG', 'downloadSVG', 'separator', 'printChart']
            }
        }
},


}";
        }
    }

}
