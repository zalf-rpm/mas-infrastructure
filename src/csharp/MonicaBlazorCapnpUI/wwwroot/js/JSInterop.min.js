"use strict";

function loadHighchart2(n, t) {
    loadScript("https://code.highcharts.com/highcharts.js").then(function () {
        waitForGlobal("Highcharts", function () {highcharts.js
            var i = looseJsonParse(t);
            Highcharts.chart(n, i);
            SetLanguage()
        })
    }, function () { })
}

function loadHighchart(n, t) {
    loadScript("https://code.highcharts.com/highcharts.js").then(function () {
        loadScript("https://code.highcharts.com/modules/data.js").then(function () {
            loadScript("https://code.highcharts.com/modules/exporting.js").then(function () { // 1. for export option
            waitForGlobal("Highcharts", function () {
                var i = looseJsonParse(t);
                Highcharts.chart(n, i);
                SetLanguage()
            })   //ToDO (later implement): to get csv document.getElementById('preview').innerHTML = chart.getCSV();
        }, function () { }) // 1. for export option
        }, function () { })
    }, function () { })
}

function looseJsonParse(n) {
    return Function('"use strict";return (' + n + ")")()
}

function loadStockchart(n, t) {
    loadScript("https://code.highcharts.com/stock/highstock.js").then(function () {
        loadScript("https://code.highcharts.com/stock/modules/data.js").then(function () {
            waitForGlobal("Highcharts", function () {
                var i = looseJsonParse(t);
                Highcharts.stockChart(n, i);
                SetLanguage()
            })
        }, function () { })
    }, function () { })
}

function SetLanguage() {
    Highcharts.setOptions({
        lang: {
            contextButtonTitle: "Chart context menu",
            decimalPoint: ",",
            downloadJPEG: "Download JPEG image",
            downloadPDF: "Download PDF document",
            downloadPNG: "Download PNG image",
            downloadSVG: "Download SVG vector image",
            drillUpText: "Back to {series.name}",
            invalidDate: "",
            loading: "Loading...",
            months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            noData: "No data to display",
            numericSymbols: ["k", "M", "G", "T", "P", "E"],
            printChart: "Print chart",
            resetZoom: "Reset zoom",
            resetZoomTitle: "Reset zoom level 1:1",
            shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            thousandsSep: " ",
            weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            rangeSelectorZoom: "Zoom",
            rangeSelectorFrom: "Från",
            rangeSelectorTo: "Till"
        }
    })
}

function loadScript(n) {
    return new Promise(function (t, i) {
        for (var e, u, o = !1, f = document.getElementsByTagName("script"), r = 0; r < f.length; ++r) f[r].getAttribute("src") != null && f[r].getAttribute("src") == n && (o = !0, t());
        if (!o)
            for (e = [n], r = 0; r < e.length; r++) u = document.createElement("script"), u.src = e[r], u.type = "text/javascript", u.onload = t, u.onerror = i, u.async = !1, u.charset = "utf-8", document.getElementsByTagName("head")[0].appendChild(u)
    })
}
window.loadHighchart = loadHighchart;
window.loadStockchart = loadStockchart;
var waitForGlobal = function waitForGlobal(n, t) {
    window[n] ? t() : setTimeout(function () {
        waitForGlobal(n, t)
    }, 100)
};

window.clipboardCopy = {
    copyText: function (text) {
        navigator.clipboard.writeText(text).then(function () {
            alert("Link copied to clipboard!");
        })
            .catch(function (error) {
                alert(error);
            });
    }
};