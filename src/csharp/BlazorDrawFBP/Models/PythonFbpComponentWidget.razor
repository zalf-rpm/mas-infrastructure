@using Blazor.Diagrams.Components.Renderers;
@using BlazorDrawFBP.Models;
@using BlazorDrawFBP.Renderers
@using System.Text

<div>
    <MudCard>
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">Py</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudTextField @bind-Value="Node.UserName" Label="User ID" Variant="Variant.Outlined"/>
                @* <MudText Typo="Typo.body1">@Node.Id</MudText> *@
                <MudText Typo="Typo.body2">@Node.ShortDescription</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
            </CardHeaderActions>
        </MudCardHeader>
        @* <MudCardMedia Image="images/pilars.jpg" Height="250" /> *@
        <MudCardContent>
            <MudTextField T="string" @bind-Value="Node.PathToPythonFile" Label="Path to .py file" Variant="Variant.Outlined"/>
            <MudTextField T="string" @bind-Value="Node.CmdParamString" Lines="5" Label="Script Parameters" Variant="Variant.Outlined"/>
            @* <MudTable Items="@Node.CmdParameters" Dense="@true" Hover="@true" ReadOnly="@false" *@
            @*           CommitEditTooltip="Commit Change" *@
            @*           OnCommitEditClick="@(() => Console.WriteLine("bla"))" *@
            @*           IsEditRowSwitchingBlocked="@false" *@
            @*           ApplyButtonPosition="@TableApplyButtonPosition.End" *@
            @*           EditButtonPosition="@TableEditButtonPosition.End" EditTrigger="@TableEditTrigger.RowClick"> *@
            @*     <ToolBarContent> *@
            @*         <MudIconButton @onclick="Node.AddEmptyCmdParam" Icon="@Icons.Material.Filled.Add" Color="Color.Default"/> *@
            @*     </ToolBarContent> *@
            @*     <ColGroup> *@
            @*         <col style="width:50%;"/> *@
            @*         <col style="width:50%;"/> *@
            @*     </ColGroup> *@
            @*     <HeaderContent> *@
            @*         <MudTh>Key</MudTh> *@
            @*         <MudTh>Value</MudTh> *@
            @*     </HeaderContent> *@
            @*     <RowTemplate> *@
            @*         <MudTd DataLabel="Name">@context.Name</MudTd> *@
            @*         <MudTd DataLabel="Value">@context.Value</MudTd> *@
            @*     </RowTemplate> *@
            @*     <RowEditingTemplate> *@
            @*         <MudTd DataLabel="Name"> *@
            @*             <MudTextField @bind-Value="@context.Name" Required/> *@
            @*         </MudTd> *@
            @*         <MudTd DataLabel="Value"> *@
            @*             <MudTextField @bind-Value="@context.Value" Required/> *@
            @*         </MudTd> *@
            @*     </RowEditingTemplate> *@
            @* </MudTable> *@
        </MudCardContent>
    </MudCard>
    
    @foreach (var port in Node.Ports)
    {
        var portCount = GetPortCount(port.Alignment);
        var offsets = port.Alignment switch
        {
            PortAlignment.Left => _leftRightOffsetsMap[portCount + GetPortCount(PortAlignment.TopLeft)],
            PortAlignment.Right => _leftRightOffsetsMap[portCount + GetPortCount(PortAlignment.BottomRight)],
            PortAlignment.Top => _topBottomOffsets,
            PortAlignment.Bottom => _topBottomOffsets,
            _ => new List<int>()
        };
        if (port.Alignment is PortAlignment.Right or PortAlignment.Bottom)
        {
            offsets = new List<int>(offsets);
            offsets.Reverse();
        };
        
        if (port is CapnpFbpPortModel capnpPort)
        {
            var style = capnpPort.Alignment switch
            {
                PortAlignment.Left => $"top: {50 + offsets[capnpPort.OrderNo]}%;",
                PortAlignment.Top => $"left: {50 + offsets[capnpPort.OrderNo - 11]}%;",
                PortAlignment.Right => $"top: {50 + offsets[capnpPort.OrderNo]}%;",
                PortAlignment.Bottom => $"left: {50 + offsets[capnpPort.OrderNo - 11]}%;",
                _ => ""
            };
            Console.WriteLine(capnpPort.ThePortType.ToString() + " OrderNo: " + capnpPort.OrderNo + " -> " + style);
            <CapnpFbpPortRenderer @key="port" Port="capnpPort" Style="@style">
                @($"{capnpPort.ThePortType.ToString().ToUpper()[0]} {capnpPort.Name}") 
            </CapnpFbpPortRenderer>
        }
    }
</div>

@code {
    [Parameter] public PythonFbpComponentModel Node { get; set; } = null!;
    
    private readonly Dictionary<int, List<int>> _leftRightOffsetsMap = new ()
    {
        {1, new List<int> {0}},
        {2, new List<int> {10, -10}},
        {3, new List<int> {20, 0, -20}},
        {4, new List<int> {30, 10, -10, -30}},
        {5, new List<int> {30, 15, 0, -15, -30}},
        {6, new List<int> {35, 21, 7, -7, -21, -35}},
        {7, new List<int> {45, 30, 15, 0, -15, -30, -45}},
        {8, new List<int> {42, 30, 18, 6, -6, -18, -30, -42}},
        {9, new List<int> {36, 27, 18, 9, 0, -9, -18, -27, -36}},
        {10, new List<int> {-45, -35, -25, -15, -5, 5, 15, 25, 35, 45}},
        {11, new List<int> {50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50}},
    };
    private readonly List<int> _topBottomOffsets = new () {-40, -30, -20, -10, 0, 10, 20, 30, 40};

    private readonly Dictionary<PortAlignment, int> _portCounts = new();

    private int GetPortCount(PortAlignment alignment)
    {
        return Node.Ports.Where(p => {
            if (p is CapnpFbpPortModel m) return m.Alignment == alignment;
            return false;
        }).Count();
    }
    
    private int GetPortCountCached(PortAlignment alignment)
    {
        if (_portCounts.TryGetValue(alignment, out var count)) return count;
        var newCount = Node.Ports.Where(p => {
            if (p is CapnpFbpPortModel m) return m.Alignment == alignment;
            return false;
        }).Count();
        _portCounts.Add(alignment, newCount);
        return newCount;
    }
}