@using Blazor.Diagrams.Components.Renderers;
@using BlazorDrawFBP.Models;
@using BlazorDrawFBP.Renderers
@using System.Text
@using System.Diagnostics.Metrics
@using _Imports = MudBlazor._Imports

<div>
    <MudCard Style="@MinHeight">
        <MudCardHeader>
            @*<CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary"
                           >@InterpreterShortcut(Node.PathToInterpreter)</MudAvatar>
            </CardHeaderAvatar>*@
            <CardHeaderContent>
                <MudTextField Class="d-inline-flex pr-4"
                              @bind-Value="Node.ProcessName"
                              Label="Process name"
                              Variant="Variant.Outlined"/>
                <MudToggleIconButton Style="position: absolute; right: -5px; top: -5px;"
                                     @bind-Toggled="@ParallelOn"
                                     Icon="@Icons.Material.Filled.PlaylistAddCircle" 
                                     Color="@Color.Primary" 
                                     Title="Parallel On"
                                     ToggledIcon="@Icons.Material.Filled.LooksOne" 
                                     ToggledColor="@Color.Secondary" 
                                     ToggledTitle="Parallel Off"/>
                <MudToggleIconButton Style="position: absolute; right: -5px; top: 25px;"
                                     @bind-Toggled="@ProcessStarted"
                                     Icon="@Icons.Material.Filled.PlayCircle" 
                                     Color="@Color.Primary" 
                                     Title="Start process"
                                     ToggledIcon="@Icons.Material.Filled.StopCircle" 
                                     ToggledColor="@Color.Secondary" 
                                     ToggledTitle="Stop process"/>
                @if (ParallelOn)
                {
                    <MudNumericField Class="d-inline-flex pr-6" Style="width: 80px;" 
                                     @bind-Value="Node.InParallelCount"
                                     Label="#Procs"
                                     Variant="Variant.Outlined"
                                     Min="1" Max="10000"/>
                }
                @if (!Node.Editable && Node.ShortDescription.Length > 0)
                {
                    <MudField Label="Description"
                              Variant="Variant.Outlined">
                        <MudText Typo="Typo.body2">@Node.ShortDescription</MudText>
                    </MudField>
                }
            </CardHeaderContent>
            @*<CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                               Color="Color.Default"
                               OnClick="() => Node.Editable = !Node.Editable"/>
            </CardHeaderActions>*@
        </MudCardHeader>
        @* <MudCardMedia Image="images/pilars.jpg" Height="250" /> *@
        @if (Node.Editable || Node.CmdParamString.Length > 0)
        {
            <MudCardContent>
                @if (!Node.Editable && Node.CmdParamString.Length > 0)
                {
                    <MudField Label="CMD arguments"
                              Variant="Variant.Outlined">
                        <MudText Typo="Typo.body2">@Node.ShortDescription</MudText>
                    </MudField>
                }
                @if (Node.Editable)
                {
                    <MudTextField T="string"
                                  @bind-Value="Node.CmdParamString"
                                  Lines="2"
                                  Label="CMD arguments (Key=Value)"
                                  Variant="Variant.Outlined"/>
                    <MudField Label="Component data"
                              Variant="Variant.Outlined">
                        <MudTextField @bind-Value="Node.ComponentId"
                                      Label="Component ID"
                                      Variant="Variant.Outlined"/>
                        <MudTextField @bind-Value="Node.ShortDescription"
                                      Label="Description"
                                      Variant="Variant.Outlined"/>
                        <MudTextField T="string"
                                      @bind-Value="Node.PathToInterpreter"
                                      Label="Path to interpreter"
                                      Variant="Variant.Outlined"/>
                        <MudTextField T="string"
                                      @bind-Value="Node.PathToFile"
                                      Label="Path to .py file"
                                      Variant="Variant.Outlined"/>
                    </MudField>
                }
            </MudCardContent>
        }
    </MudCard>

    @foreach (var port in Node.Ports)
    {
        if (port is not CapnpFbpPortModel capnpPort) continue;

        /*var orderNo = Node.Ports.Where(p =>
        {
            if (p is CapnpFbpPortModel cp) return cp.ThePortType == capnpPort.ThePortType;
            return false;
        }).TakeWhile(p => p != port).Count();
        */
        
        var portCount = Node.Ports.Where(p =>
        {
            if (p is CapnpFbpPortModel cp) return cp.ThePortType == capnpPort.ThePortType;
            return false;
        }).Count();

        var offsets = capnpPort.Alignment switch
        {
            PortAlignment.Left => _leftRightOffsetsMap[Math.Min(portCount, 11)],
            PortAlignment.Right => _leftRightOffsetsMap[Math.Min(portCount, 11)],
            PortAlignment.Top => _topBottomOffsets,
            PortAlignment.Bottom => _topBottomOffsets,
            _ => new List<int>()
        };
        if (capnpPort.Alignment is PortAlignment.Right or PortAlignment.Bottom)
        {
            offsets = new List<int>(offsets);
            offsets.Reverse();
        }

        var capnpPortOffset = capnpPort.Alignment switch
        {
            PortAlignment.Left => offsets[capnpPort.OrderNo],
            PortAlignment.Top => offsets[capnpPort.OrderNo - 11],
            PortAlignment.Right => offsets[capnpPort.OrderNo],
            PortAlignment.Bottom => offsets[capnpPort.OrderNo - 11],
            _ => 0
        };

        var style = capnpPort.Alignment switch
        {
            PortAlignment.Left => $"top: {50 + capnpPortOffset}%;",
            PortAlignment.Top => $"left: {50 + capnpPortOffset}%;",
            PortAlignment.Right => $"top: {50 + capnpPortOffset}%;",
            PortAlignment.Bottom => $"left: {50 + capnpPortOffset}%;",
            _ => ""
        };
        
        // Console.WriteLine(capnpPort.ThePortType.ToString() + " OrderNo: " + capnpPort.OrderNo + " -> " + style);
        <CapnpFbpPortRenderer @key="port" Port="capnpPort" Style="@style">
            @($"{capnpPort.ThePortType.ToString().ToUpper()[0]} {capnpPort.Name}")
        </CapnpFbpPortRenderer>
    }
</div>

@code {
    [Parameter] public CapnpFbpComponentModel Node { get; set; } = null!;
    
    private string MinHeight =>
        $@"min-height: {Math.Max(100, Math.Max(
            Node.Ports.Count(p =>
            {
                if (p is CapnpFbpPortModel cp) return cp.ThePortType == CapnpFbpPortModel.PortType.In;
                return false;
            }) * 2 * 20, 
            Node.Ports.Count(p =>
            {
                if (p is CapnpFbpPortModel cp) return cp.ThePortType == CapnpFbpPortModel.PortType.Out;
                return false;
            }) * 2 * 20 
        ))}px";

    private bool ParallelOn
    {
        get => Node.InParallelCount > 1;
        set => Node.InParallelCount = value ? 2 : 1;
    }

    private System.Diagnostics.Process _process = new();
    
    private bool _processStarted = false;
    private bool ProcessStarted
    {
        get => _processStarted;
        set
        {
            _processStarted = value;
            if (_processStarted)
            {
                _process.EnableRaisingEvents = false;
                _process.StartInfo.CreateNoWindow = false;
                if (string.IsNullOrEmpty(Node.PathToInterpreter)) _process.StartInfo.FileName = Node.PathToFile;
                else
                {
                    _process.StartInfo.FileName =  Node.PathToInterpreter;
                    _process.StartInfo.ArgumentList.Add(Node.PathToFile);
                }
                foreach (var arg in Node.CmdParamString.Split("\n"))
                {
                    _process.StartInfo.ArgumentList.Add(arg);
                }
                _process.Start();
                Console.WriteLine("process started");
                    
                //Node.PortCallbackRegistarSR
                //Node.StartProcess();
            }
            else
            {
                _process.Kill();
                Console.WriteLine("process stopped");
                //Node.StopProcess();
            }
        }
    }
    
    private readonly Dictionary<int, List<int>> _leftRightOffsetsMap = new()
    {
        { 1, new List<int> { 0 } },
        { 2, new List<int> { 30, -30 } },
        { 3, new List<int> { 30, 0, -30 } },
        { 4, new List<int> { 30, 10, -10, -30 } },
        { 5, new List<int> { 30, 15, 0, -15, -30 } },
        { 6, new List<int> { 30, 15, 0, -15, -30, -45 } },
        { 7, new List<int> { 30, 20, 10, 0, -10, -20, -30 } },
        { 8, new List<int> { 35, 25, 15, 5, -5, -15, -25, -35 } },
        { 9, new List<int> { 40, 30, 20, 10, 0, -10, -20, -30, -40 } },
        { 10, new List<int> { -45, -35, -25, -15, -5, 5, 15, 25, 35, 45 } },
        { 11, new List<int> { 50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50 } },
    };

    private readonly List<int> _topBottomOffsets = new() { -40, -30, -20, -10, 0, 10, 20, 30, 40 };

    private readonly Dictionary<PortAlignment, int> _portCounts = new();

    static string InterpreterShortcut(string path)
    {
        if (path == null) return "Exe";
        if (path.Contains("python")) return "Py";
        if (path.Contains("python3")) return "Py3";
        if (path.Contains("node")) return "Js";
        return "";
    }


}