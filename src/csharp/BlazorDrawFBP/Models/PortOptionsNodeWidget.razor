@using Blazor.Diagrams.Components.Renderers;
@using BlazorDrawFBP.Models;

<div>
    <MudFab Style="position: absolute; right: -20px; top: -20px; overflow: visible; transform: scale(0.5);"
            OnClick="RemoveWidget"
            Color="Color.Error"
            Size="Size.Small"
            StartIcon="@Icons.Material.Filled.Close"/>
    <MudFab OnClick="IncreasePortOrderNo"
            Color="Color.Primary"
            Size="Size.Small"
            StartIcon="@IncreasePortOrderNoArrowIcon"/>
    <MudFab OnClick="DecreasePortOrderNo"
            Color="Color.Primary"
            Size="Size.Small"
            StartIcon="@DecreasePortOrderNoArrowIcon"/>
    <MudFab Class="ml-10" OnClick="RemovePort"
            Color="Color.Warning"
            Size="Size.Small"
            StartIcon="@Icons.Material.Filled.Delete"/>
    <MudTextField Required
                  T="@string"
                  @bind-Value="@Node.PortModel.Name"
                  AutoFocus="@false"
                  Label="@Node.Label"
                  Variant="@Variant.Outlined"
                  OnBlur="@OnBlur"
                  OnKeyUp="@OnKeyUp"/>
</div>

@code {
    [Parameter] public PortOptionsNode Node { get; set; } = null!;

    bool _alreadyRemoved = false;

    private string IncreasePortOrderNoArrowIcon => Node.PortModel.ThePortType switch
    {
        CapnpFbpPortModel.PortType.In => Node.PortModel.OrderNo switch
        {
            >= 10 => Icons.Material.Filled.ArrowCircleRight,
            _ => Icons.Material.Filled.ArrowCircleUp
        },
        CapnpFbpPortModel.PortType.Out => Node.PortModel.OrderNo switch
        {
            >= 10 => Icons.Material.Filled.ArrowCircleLeft,
            _ => Icons.Material.Filled.ArrowCircleDown,
        },
        _ => throw new ArgumentOutOfRangeException()
    };

    private string DecreasePortOrderNoArrowIcon => Node.PortModel.ThePortType switch
    {
        CapnpFbpPortModel.PortType.In => Node.PortModel.OrderNo switch
        {
            <= 10 => Icons.Material.Filled.ArrowCircleDown,
            > 10 => Icons.Material.Filled.ArrowCircleLeft,
        },
        CapnpFbpPortModel.PortType.Out => Node.PortModel.OrderNo switch
        {
            <= 10 => Icons.Material.Filled.ArrowCircleUp,
            > 10 => Icons.Material.Filled.ArrowCircleRight,
        },
        _ => throw new ArgumentOutOfRangeException()
    };

    // public const string ArrowCircleDown = "<g><rect fill=\"none\" height=\"24\" width=\"24\"/><path d=\"M12,4c4.41,0,8,3.59,8,8s-3.59,8-8,8s-8-3.59-8-8S7.59,4,12,4 M12,2C6.48,2,2,6.48,2,12c0,5.52,4.48,10,10,10 c5.52,0,10-4.48,10-10C22,6.48,17.52,2,12,2L12,2z M13,12l0-4h-2l0,4H8l4,4l4-4H13z\"/></g>";
    // public const string ArrowCircleLeft = "<g><rect fill=\"none\" height=\"24\" width=\"24\"/></g><g><path d=\"M2,12c0,5.52,4.48,10,10,10s10-4.48,10-10c0-5.52-4.48-10-10-10C6.48,2,2,6.48,2,12z M12,11l4,0v2l-4,0l0,3l-4-4l4-4L12,11 z\"/></g>";
    // public const string ArrowCircleRight = "<g><rect fill=\"none\" height=\"24\" width=\"24\"/></g><g><path d=\"M22,12c0-5.52-4.48-10-10-10S2,6.48,2,12c0,5.52,4.48,10,10,10S22,17.52,22,12z M12,13l-4,0v-2l4,0V8l4,4l-4,4V13z\"/></g>";
    // public const string ArrowCircleUp = "<g><rect fill=\"none\" height=\"24\" width=\"24\"/><path d=\"M12,20c-4.41,0-8-3.59-8-8s3.59-8,8-8s8,3.59,8,8S16.41,20,12,20 M12,22c5.52,0,10-4.48,10-10c0-5.52-4.48-10-10-10 C6.48,2,2,6.48,2,12C2,17.52,6.48,22,12,22L12,22z M11,12l0,4h2l0-4h3l-4-4l-4,4H11z\"/></g>";
    
    protected void RemovePort()
    {
        if (Node.NodeModel is null) return;

        var currentOrderNo = Node.PortModel.OrderNo;

        Node.NodeModel.RemovePort(Node.PortModel);
        Node.Container.Links.Remove(Node.PortModel.Links.ToArray());

        // update order numbers of all other ports
        var upperPorts = Node.NodeModel.Ports.Where(
            p => p is CapnpFbpPortModel cp && cp.OrderNo > currentOrderNo
                                           && cp.ThePortType == Node.PortModel.ThePortType);
        foreach (var port in upperPorts)
        {
            if (port is CapnpFbpPortModel cp) cp.OrderNo--;
        }

        foreach (var port in Node.NodeModel.Ports) port.Refresh();

        Node.NodeModel.RefreshAll();
        Node.Container.Nodes.Remove(Node);
        StateHasChanged();
    }

    protected void IncreasePortOrderNo()
    {
        var currentOrderNo = Node.PortModel.OrderNo;

        // find port with orderNo = currentOrderNo + 1
        if (Node.NodeModel?.Ports.FirstOrDefault(
                p => p is CapnpFbpPortModel cp && cp.OrderNo == currentOrderNo + 1
                                               && cp.ThePortType == Node.PortModel.ThePortType)
            is not CapnpFbpPortModel nextPort) return;

        // swap orderNo
        nextPort.OrderNo = currentOrderNo;
        nextPort.Refresh();
        Node.PortModel.OrderNo = currentOrderNo + 1;
        Node.PortModel.Refresh();

        Node.NodeModel?.RefreshAll();
        StateHasChanged();
    }

    protected void DecreasePortOrderNo()
    {
        var currentOrderNo = Node.PortModel.OrderNo;
        if (currentOrderNo == 0) return;

        // find port with orderNo = currentOrderNo + 1
        if (Node.NodeModel?.Ports.FirstOrDefault(
                p => p is CapnpFbpPortModel cp && cp.OrderNo == currentOrderNo - 1
                                               && cp.ThePortType == Node.PortModel.ThePortType)
            is not CapnpFbpPortModel prevPort) return;

        // swap orderNo
        prevPort.OrderNo = currentOrderNo;
        prevPort.Refresh();
        Node.PortModel.OrderNo = currentOrderNo - 1;
        Node.PortModel.Refresh();

        Node.NodeModel?.RefreshAll();
        StateHasChanged();
    }

    void RemoveWidget()
    {
        Node.Container.Nodes.Remove(Node);
    }

    void OnBlur(FocusEventArgs e)
    {
        // Console.WriteLine("OnBlur");
        if (_alreadyRemoved) return;
        Node.PortModel.Refresh();
        Node.Container.Nodes.Remove(Node);
    }

    void OnKeyUp(KeyboardEventArgs e)
    {
        // Console.WriteLine("OnKeyUp Enter pressed");
        if (e.Key != "Enter") return;
        Node.Container.Nodes.Remove(Node);
        _alreadyRemoved = true;
    }

}