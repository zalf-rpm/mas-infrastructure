@page "/"
@page "/editor"
@namespace BlazorDrawFBP.Pages

@using Blazor.Diagrams.Components.Widgets
@using BlazorDrawFBP.Models
@using Newtonsoft.Json.Linq
@using MudBlazor
@using System.Timers

@inject IJSRuntime JsRuntime

<div>
    <MudGrid>
        <MudItem xs="2">
            <MudPaper Height="90vh" Class="overflow-scroll">
                <MudExpansionPanels MultiExpansion="true">
                    <MudExpansionPanel Text="Actions" IsInitiallyExpanded="true">
                        <MudStack Spacing="1">
                            @* <MudButton StartIcon="@Icons.Material.Filled.Delete" *@
                            @*            Variant="@Variant.Filled" *@
                            @*            Color="@Color.Warning" *@
                            @*            FullWidth="true" *@
                            @*            @onclick="RemoveNode"> *@
                            @*     Remove Node *@
                            @* </MudButton> *@
                            <MudFileUpload T="IBrowserFile" 
                                           FilesChanged="LoadDiagram"
                                           Style="margin-top:0;">
                                <ButtonTemplate>
                                    <MudButton StartIcon="@Icons.Material.Filled.Upload"
                                               Variant="@Variant.Filled"
                                               HtmlTag="label"
                                               Color="@Color.Primary"
                                               FullWidth="true"
                                               for="@context.Id">
                                        Load Diagram
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                            <MudButton StartIcon="@Icons.Material.Filled.Download"
                                       Variant="@Variant.Filled"
                                       Color="@Color.Primary"
                                       FullWidth="true"
                                       @onclick="SaveDiagram">
                                Save Diagram
                            </MudButton>
                            <MudButton StartIcon="@(ClearButtonDisabled ? Icons.Material.Filled.Delete : Icons.Material.Filled.DeleteForever)"
                                       Variant="@Variant.Filled"
                                       Color="@(ClearButtonDisabled ? Color.Warning : Color.Error)"
                                       FullWidth="true"
                                       OnClick="ClearButtonClicked">
                                @(ClearButtonDisabled ? "Clear Diagram" : "Clear Diagram")
                            </MudButton>
                            @* <MudButton StartIcon="@Icons.Material.Filled.Download" *@
                            @*            Variant="@Variant.Filled" *@
                            @*            Color="@Color.Primary" *@
                            @*            FullWidth="true" *@
                            @*            @onclick="CreatePythonFlow"> *@
                            @*     Create Flow *@
                            @* </MudButton> *@
                        </MudStack>
                    </MudExpansionPanel>
                    <MudSwitch @bind-Value="@InteractiveMode" 
                               Label="Interactive" 
                               Color="Color.Success"
                               Style="padding-left: 10px"/>
                    <MudTextField @bind-Value="@_query" 
                                  Label="Search component ..." 
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Cancel"
                                  OnAdornmentClick="() => { _query = null; }"/>
                    @foreach (var (cat, value) in _components)
                    {
                        <MudExpansionPanel Text="@cat" 
                                           IsExpanded="@(!string.IsNullOrWhiteSpace(_query) 
                                                         || _expandedPanels.GetValueOrDefault(cat, false))" 
                                           IsInitiallyExpanded="@(cat == "generic")"
                                           IsExpandedChanged="b => { if (string.IsNullOrWhiteSpace(_query)) _expandedPanels[cat] = b; }">
                            <MudStack Spacing="1">
                                @foreach (var component in value as JArray ?? new JArray())
                                {
                                    if (component is not JObject obj) continue;
        
                                    var componentId = obj["id"]?.Type switch
                                    {
                                        JTokenType.Null => "empty",
                                        _ => obj["id"]?.ToString()
                                    };
                                    var nodeType = obj["type"]?.ToString();
                                    if (nodeType == null) continue;
                                    
                                    var desc = obj["description"]?.ToString() ?? "";

                                    if (!string.IsNullOrWhiteSpace(_query) && 
                                        componentId?.Contains(_query, StringComparison.OrdinalIgnoreCase) == false &&
                                        desc.Contains(_query, StringComparison.OrdinalIgnoreCase) == false)
                                    {
                                        continue;
                                    }
                                    <MudCard>
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudText>@componentId</MudText>
                                                <MudText Typo="Typo.body1" >(@cat)</MudText>
                                                <MudText Typo="Typo.body2">@desc</MudText>
                                            </CardHeaderContent>
                                            <CardHeaderActions>
                                                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default"/>
                                            </CardHeaderActions>
                                        </MudCardHeader>
                                        @* <MudCardMedia Image="/img/DefaultNodeWidget.png" Height="100"/> *@
                                        <MudCardContent>
                                            <MudTooltip Text="@componentId">
                                                <MudImage Src="/img/DefaultNodeWidget.png"
                                                          Alt="Capnp node"
                                                          Class="rounded-lg"
                                                          draggable="@true"
                                                          @ondragstart="() => OnNodeDragStart(obj)"/>
                                            </MudTooltip>
                                        </MudCardContent>
                                    </MudCard>
                                }
                            </MudStack>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudPaper>
        </MudItem>
        <MudItem xs="10">
            <MudPaper Outlined="true" class="diagram-container" ondragover="event.preventDefault();" @ondrop="OnNodeDrop">
                <CascadingValue Value="Diagram" IsFixed="true">
                    <DiagramCanvas>
                        <Widgets>
                            <NavigatorWidget Width="200"
                                             Height="120"
                                             Class="border border-black bg-white absolute"
                                             Style="bottom: 15px; right: 15px;"/>
                        </Widgets>
                    </DiagramCanvas>
                </CascadingValue>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    private Timer ClearButtonTimer { get; set; }
    private bool ClearButtonDisabled { get; set; } = true;
    private Editor _editor;
    private string _query;
    private Dictionary<string, bool> _expandedPanels = new() { {"generic", true} };
    private bool _interactiveMode = false;
    private bool InteractiveMode { 
        get => _interactiveMode; 
        set { 
            _interactiveMode = value; 
            InteractiveModeChanged?.Invoke(value); 
        }
    }
    public event Action<bool> InteractiveModeChanged;
    
    private void ClearButtonClicked()
    {
        if (ClearButtonDisabled)
        {
            if (ClearButtonTimer == null)
            {
                //Console.WriteLine("Creating new timer");
                _editor = this;
                ClearButtonTimer = new Timer(2000) { AutoReset = false };
                ClearButtonTimer.Elapsed += ClearButtonTimerElapsed;
            }
            ClearButtonTimer.Start();
            ClearButtonDisabled = false;
        }
        else
        {
            ClearDiagram();
            ClearButtonDisabled = true;
        }
    }

    private void ClearButtonTimerElapsed(object sender, ElapsedEventArgs e)
    {
        //Console.WriteLine("Timer elapsed");
        ClearButtonDisabled = true;
        _editor?.InvokeAsync(StateHasChanged);
    }
}