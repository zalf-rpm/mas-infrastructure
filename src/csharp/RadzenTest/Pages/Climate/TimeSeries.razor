@page "/climate/timeseries"

@using System.Text;
@using Capnp.Rpc
@using Mas.Infrastructure.Common
@using Mas.Rpc

@inject IJSRuntime JSRuntime;

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Enter capability to climate timeseries (capnp://host:port/token)" 
                            CapabilityChanged=@CapabilityChanged 
                            TCapnpInterface=Climate.ITimeSeries>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudButton Variant=Variant.Filled Color=Color.Primary OnClick=@LoadTimeSeriesData Class="px-10">Load some data</MudButton>
            <MudButton Disabled=@(csvString.Length == 0) Variant=Variant.Filled Color=Color.Primary OnClick=@SaveTimeSeries Class="px-10">Save data</MudButton>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex flex-row py-2 px-1">
            <MudDateRangePicker Label="Date range" Editable=@true DateRangeChanged=@DateRangeChanged DateRange=@range />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => range = originalDateRange)" Class="px-10">Restore original date range</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem>
        <MudTable Items=@data Hover=@true Dense=@true Filter=@(new Func<Element,bool>(DataFilterFunc))>
            <ToolBarContent>
                <MudText Typo=Typo.h6>Timeseries Data</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value=searchString Placeholder="Search" Adornment=Adornment.Start AdornmentIcon=@Icons.Material.Filled.Search IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Date</MudTh>
                @foreach (var h in headings)
                {
                    <MudTh>@h</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                @foreach (var (val, i) in headings.Select((Value, Index) => (Value, Index)))
                {
                    <MudTd DataLabel=@val>@context.Data[i]</MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Climate.ITimeSeries TimeSeriesCap { get; set; }
    private bool timeSeriesCapUpdated = false;

    private bool componentIsTimeSeriesCapOwner = false;

    [Parameter]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    private DateTime start, end;
    //private DateTime? origStart, origEnd;
    private DateRange range;
    private DateRange originalDateRange;

    private struct Element
    {
        public DateTime Date;
        public IReadOnlyList<float> Data;
    }
    private String csvString = "";

    private IList<String> headings = new List<String>();
    private IEnumerable<Element> data = new List<Element>();
    private String searchString;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        timeSeriesCapUpdated = parameters.DidParameterChange("TimeSeriesCap", TimeSeriesCap);
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (timeSeriesCapUpdated) await TimeSeriesUpdated();
    }

    private async Task CapabilityChanged(Climate.ITimeSeries ts)
    {
        if (ts == null) return;

        if (TimeSeriesCap != ts && componentIsTimeSeriesCapOwner) TimeSeriesCap?.Dispose();
        TimeSeriesCap = ts;
        componentIsTimeSeriesCapOwner = true;

        await TimeSeriesUpdated();
    }

    private async Task TimeSeriesUpdated()
    {
        if (TimeSeriesCap == null) return;

        var (s, e) = await TimeSeriesCap.Range();
        var h = await TimeSeriesCap.Header();

        //var (s, e) = se.Result;
        start = CommonDate2DateTime(s);
        end = CommonDate2DateTime(e);
        range = new DateRange(start, end);

        headings = h.Select(h => h.ToString()).ToList();
    }

    private DateTime CommonDate2DateTime(Common.Date d)
    {
        return new DateTime(d.Year, d.Month, d.Day);
    }

    private Common.Date DateTime2CommonDate(DateTime d)
    {
        return new Common.Date { Year = (short)d.Year, Month = (byte)d.Month, Day = (byte)d.Day };
    }

    private async Task DateRangeChanged(DateRange r)
    {
        if (r == null) return;
        if (originalDateRange == null && range != null) originalDateRange = range;
        range = r;

        start = r.Start ?? start;
        end = r.End ?? end;

        var s = DateTime2CommonDate(start);
        var e = DateTime2CommonDate(end);

        var sts = await TimeSeriesCap.Subrange(s, e);
        if (TimeSeriesCap != sts) TimeSeriesCap.Dispose();
        TimeSeriesCap = sts;
    }

    private async Task LoadTimeSeriesData()
    {
        if (TimeSeriesCap == null) return;

        var ds = await TimeSeriesCap.Data();
        data = ds.Select((d, i) => new Element { Date = start.AddDays(i), Data = d });

        //create csv file
        var sb = new StringBuilder();
        sb.Append("iso-date,");
        sb.Append(headings.Aggregate((a, e) => a + "," + e.ToString()));
        sb.Append("\n");

        var ci = new System.Globalization.CultureInfo("en-US");
        foreach (var el in data)
        {
            sb.Append(el.Date.ToString("yyyy-MM-dd"));
            sb.Append(",");
            sb.Append(el.Data.Select(e => e.ToString(ci)).Aggregate((a, e) => a + "," + e));
            sb.Append("\n");
        }

        csvString = sb.ToString();
    }

    private bool DataFilterFunc(Element elem)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (elem.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }

    private async Task SaveTimeSeries()
    {
        await JSRuntime.InvokeVoidAsync("saveAsBase64", "data.csv", Convert.ToBase64String(Encoding.UTF8.GetBytes(csvString)));
    }

    public void Dispose()
    {
        if (componentIsTimeSeriesCapOwner) TimeSeriesCap?.Dispose();
    }
}
