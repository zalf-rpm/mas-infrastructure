@page "/climate/service"

@using System.Text;
@using Capnp.Rpc
@using Mas.Infrastructure.Common
@using Mas.Rpc

@inject IJSRuntime JSRuntime;

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Enter capability to climate service (capnp://host:port/token)" CapabilityChanged=@CapabilityChanged TCapnpInterface=Climate.IService></ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudSelect T=Climate.IDataset @bind-Value=selectedDataset Label="Datasets" Strict=@true Variant=Variant.Outlined>
                    @foreach (var p in meta2data)
                    {
                        <MudSelectItem T=Climate.IDataset Value=@p.Value>@p.Key</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <Dataset DatasetCap=@selectedDataset HideSturdyRefConnector=@true></Dataset>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Climate.IService ClimateServiceCap { get; set; }

    private bool componentIsClimateServiceCapOwner = false;

    [Parameter]
    public EventCallback<Climate.IService> ClimateServiceCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    private Dictionary<String, Climate.IDataset> meta2data = new Dictionary<string, Climate.IDataset>();
    private Climate.IDataset selectedDataset;

    private async Task CapabilityChanged(Climate.IService service)
    {
        if (service == null) return;

        if (ClimateServiceCap != service && componentIsClimateServiceCapOwner) ClimateServiceCap?.Dispose();
        ClimateServiceCap = service;
        componentIsClimateServiceCapOwner = true;

        var datasets = await ClimateServiceCap.GetAvailableDatasets();
        foreach (var ds in datasets)
        {
            var r = await ds.Meta.Info.ForAll();
            meta2data[r.Select(p => p.Snd.Name).Aggregate((acc, name) => acc + "|" + name)] = Proxy.Share(ds.Data);
        }
    }

    public void Dispose()
    {
        if (componentIsClimateServiceCapOwner) ClimateServiceCap?.Dispose();
        foreach (var ds in meta2data.Values) ds?.Dispose();
    }
}
