@using Capnp.Rpc
@using Mas.Infrastructure.Common
@inject Mas.Infrastructure.Common.ConnectionManager ConMan
@typeparam TCapnpInterface

<MudCard>
    <MudCardContent>
        <MudTextField @bind-Value="sturdyRef" Label="Enter persistent capability (capnp://host:port/token)" Variant="Variant.Outlined"></MudTextField>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" EndIcon="@buttonEndIcon" Color="@buttonColor" OnClick="Connect">@buttonLabel</MudButton>
    </MudCardActions>
</MudCard>
<!--
<MudGrid>
    <MudItem xs="6">

    </MudItem>
    <MudItem xs="6">
        <MudButton Variant="Variant.Filled" EndIcon="@buttonEndIcon" Color="@buttonColor" OnClick="Connect">@buttonLabel</MudButton>
    </MudItem>
</MudGrid>
    -->

@code {
    private String sturdyRef = "capnp://localhost:64317";

    private String buttonEndIcon = Icons.Material.Filled.CastConnected;
    private Color buttonColor = Color.Primary;
    private String buttonLabel = "Connect";

    [Parameter]
    public TCapnpInterface Capability { get; set; }

    [Parameter]
    public EventCallback<TCapnpInterface> CapabilityChanged { get; set; }

    private async Task Connect()
    {
        try
        {
            buttonLabel = "Connecting ...";
            Capability = await ConMan.Connect<TCapnpInterface>(sturdyRef);
            buttonEndIcon = Icons.Material.Filled.CastConnected;
            buttonColor = Color.Success;
            buttonLabel = "Connected";
        }
        catch (Capnp.Rpc.RpcException e)
        {
            buttonEndIcon = Icons.Material.Filled.Error;
            buttonColor = Color.Error;
            buttonLabel = "Connect failed";
        }

        await CapabilityChanged.InvokeAsync(Capability);
    }

    private void ClearButton()
    {
        buttonEndIcon = Icons.Material.Filled.CastConnected;
        buttonColor = Color.Primary;
        buttonLabel = "Connect";
    }
}
