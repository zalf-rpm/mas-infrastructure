@page "/climate"

@using System.Text;
@using Capnp.Rpc
@using Mas.Infrastructure.Common
@using Mas.Rpc

@inject IJSRuntime JSRuntime;
@*@inject IDialogService Dialog*@

<MudGrid>
    <MudItem xs="12">
        <ConnectToSturdyRef CapabilityChanged="ClimateServiceChanged" TCapnpInterface="Climate.IService"></ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Pick Geolocation - picked: @(latLng.ToString())</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <GeoposPicker @bind-LatLng="latLng"
                              Width="100%" Height="400px"
                              CenterLatLng="@((51.0, 10.0))"></GeoposPicker>
                <!--<MudButton OnClick="@(() => geoPosPickerVisible = true)" Variant="Variant.Filled" Color="Color.Primary">Pick geolocation</MudButton>-->
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudCardContent>
                <MudSelect T="Climate.IDataset" ValueChanged="@DatasetChanged" Label="Datasets" Strict="true" Variant="Variant.Outlined">
                    @foreach (var p in meta2data)
                    {
                        <MudSelectItem T="Climate.IDataset" Value="@p.Value">@p.Key</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudCard>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadTimeSeries" Class="px-10">Load some data</MudButton>
            <MudButton Disabled="@(csvString.Length == 0)" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveTimeSeries" Class="px-10">Save data</MudButton>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudDateRangePicker Label="Date range" Editable="true" DateRangeChanged="DateRangeChanged" DateRange="@range" />
        <!--<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => range = originalDateRange)" Class="px-10">Restore original date range</MudButton>-->
    </MudItem>
    <MudItem>
        <MudTable Items="@data" Hover="true" Dense="true" Filter="new Func<Element,bool>(DataFilterFunc)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Timeseries Data at @latLng</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Date</MudTh>
                @foreach (var h in headings)
                {
                    <MudTh>@h</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                @foreach (var (val, i) in headings.Select((Value, Index) => (Value, Index)))
                {
                    <MudTd DataLabel="@val">@context.Data[i]</MudTd>
                }
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudGrid>

<!--
<MudDialog @bind-IsVisible="geoPosPickerVisible" >
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />Pick geolocation
        </MudText>
    </TitleContent>
    <DialogContent>
        <GeoposPicker @bind-LatLng="latLng"
                      Width="100%" Height="400px"
                      CenterLatLng="@((51.0, 10.0))"></GeoposPicker>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(()=>geoPosPickerVisible = false)" Class="px-10">Close</MudButton>
    </DialogActions>
</MudDialog>
-->


@code {
    private String Result;
    private IList<String> Params;
    private Climate.IService climateService;

    //private bool geoPosPickerVisible = false;
    private (double, double) latLng;
    //private void OpenDialog() => geoPosPickerVisible = true;

    private Dictionary<String, Climate.IDataset> meta2data = new Dictionary<string, Climate.IDataset>();
    private Climate.IDataset selectedDataset;

    private Climate.ITimeSeries timeSeries;
    private DateTime start, end;
    private DateRange range;
    private DateRange originalDateRange;

    private struct Element
    {
        public DateTime Date;
        public IReadOnlyList<float> Data;
    }
    private String csvString = "";

    private IList<String> headings = new List<String>();
    private IEnumerable<Element> data = new List<Element>();
    private String searchString;

    private async Task ClimateServiceChanged(Climate.IService service)
    {
        if (service == null) return;

        if (climateService != service) climateService?.Dispose();
        climateService = service;

        var datasets = await climateService.GetAvailableDatasets();
        foreach (var ds in datasets)
        {
            var r = await ds.Meta.Info.ForAll();
            meta2data[r.Select(p => p.Snd.Name).Aggregate((acc, name) => acc + "|" + name)] = Proxy.Share(ds.Data);
        }
    }

    private async Task DatasetChanged(Climate.IDataset dataset)
    {
        if (dataset == null) return;
        selectedDataset = dataset;

        var ts = await selectedDataset.ClosestTimeSeriesAt(new Geo.Coord
        {
            Latlon = new Geo.LatLonCoord { Lat = latLng.Item1, Lon = latLng.Item2 }
        });//.Eager();

        var (s, e) = await ts.Range();
        var h = await ts.Header();

        //var (s, e) = se.Result;
        start = CommonDate2DateTime(s);
        end = CommonDate2DateTime(e);
        range = new DateRange(start, end);

        headings = h.Select(h => h.ToString()).ToList();

        if (timeSeries != ts) timeSeries?.Dispose();
        timeSeries = ts;
    }

    private DateTime CommonDate2DateTime(Common.Date d)
    {
        return new DateTime(d.Year, d.Month, d.Day);
    }

    private Common.Date DateTime2CommonDate(DateTime d)
    {
        return new Common.Date { Year = (short)d.Year, Month = (byte)d.Month, Day = (byte)d.Day };
    }

    private async Task DateRangeChanged(DateRange range)
    {
        if (range == null) return;
        if (originalDateRange == null) originalDateRange = range;

        if (range == originalDateRange) return;

        start = range.Start ?? start;
        end = range.End ?? end;

        //var sts = await timeSeries.Subrange(DateTime2CommonDate(start), DateTime2CommonDate(end));
        //if (timeSeries != sts) timeSeries.Dispose();
        //timeSeries = sts;
    }

    private async Task LoadTimeSeries()
    {
        //if (selectedDataset == null) return;

        //var timeSeries = await selectedDataset.ClosestTimeSeriesAt(new Geo.Coord
        //{
        //Latlon = new Geo.LatLonCoord { Lat = latLng.Item1, Lon = latLng.Item2 }
        //});

        //var se = await timeSeries.Range();
        //var start = new DateTime(se.Item1.Year, se.Item1.Month, se.Item1.Day);

        //var h = await timeSeries.Header();
        //headings = h.Select(h => h.ToString()).ToList();

        var ds = await timeSeries.Data();
        data = ds.Select((d, i) => new Element { Date = start.AddDays(i), Data = d });

        //create csv file
        var sb = new StringBuilder();
        sb.Append("iso-date,");
        sb.Append(headings.Aggregate((a, e) => a + "," + e.ToString()));
        sb.Append("\n");

        var ci = new System.Globalization.CultureInfo("en-US");
        foreach (var el in data)
        {
            sb.Append(el.Date.ToString("yyyy-MM-dd"));
            sb.Append(",");
            sb.Append(el.Data.Select(e => e.ToString(ci)).Aggregate((a, e) => a + "," + e));
            sb.Append("\n");
        }

        csvString = sb.ToString();
    }

    private bool DataFilterFunc(Element elem)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (elem.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }

    private async Task SaveTimeSeries()
    {
        await JSRuntime.InvokeVoidAsync("saveAsBase64", "data.csv", Convert.ToBase64String(Encoding.UTF8.GetBytes(csvString)));
    }

    public void Dispose()
    {
        foreach (var ds in meta2data.Values) ds?.Dispose();
        timeSeries?.Dispose();
    }
}
