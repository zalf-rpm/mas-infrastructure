@page "/capnp"

@using Capnp.Rpc
@using Mas.Rpc

<h1>Hello, Cap'n Proto!</h1>

Welcome to the Cap'n Proto test site.

<p>
    Simulation:
    <select @onchange="UpdateScenariosOnSimulationChanged">
        @foreach (var sim in Simulations)
        {
            <option value=@sim.Key>@sim.Value.Item2.Name</option>
        }
    </select>
</p>
<p>
    Scenario:
    <select @onchange="UpdateRealizationsOnScenarioChanged">
        @foreach (var scen in Scenarios)
        {
            <option value=@scen.Key>@scen.Value.Item2.Name</option>
        }
    </select>
</p>
<p>
    Realization:
    <select @onchange="UpdateTimeseriesOnRealizationChanged">
        @foreach (var real in Realizations)
        {
        <option value=@real.Key>@real.Value.Item2.Name</option>
        }
    </select>
</p>
<p>
    TimeSeries:
    <select @onchange="UpdateTimeseriesCSVOnTimeseriesChanged">
        @foreach (var ts in Timeseries)
        {
            <option value=@ts.Key>@(ts.Value.Item2.Item1.ToString("yyyy-MM-dd") 
                + "-" + ts.Value.Item2.Item2.ToString("yyyy-MM-dd"))</option>
        }
    </select>
</p>

<p>
    <textarea style="width:100%" readonly="readonly">@CsvTimeseries</textarea>

</p>

<ul>
    @foreach (var name in ElemNames)
    {
        <li>@name</li>
    }
</ul>

@code {
    private Capnp.Rpc.TcpRpcClient ClimateDataServiceClient;

    private Dictionary<string, Tuple<ClimateData.ISimulation, Common.IdInformation>> Simulations = new Dictionary<string, Tuple<ClimateData.ISimulation, Common.IdInformation>>();
    private Dictionary<string, Tuple<ClimateData.IScenario, Common.IdInformation>> Scenarios = new Dictionary<string, Tuple<ClimateData.IScenario, Common.IdInformation>>();
    private Dictionary<string, Tuple<ClimateData.IRealization, Common.IdInformation>> Realizations = new Dictionary<string, Tuple<ClimateData.IRealization, Common.IdInformation>>();
    private Dictionary<int, Tuple<ClimateData.ITimeSeries, Tuple<DateTime, DateTime>>> Timeseries = new Dictionary<int, Tuple<ClimateData.ITimeSeries, Tuple<DateTime, DateTime>>>();

    private Capnp.Rpc.TcpRpcClient CsvTimeSeriesClient;
    private List<string> ElemNames = new List<string>();

    private String CsvTimeseries = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        /*
        if (CsvTimeSeriesClient == null)
        {
            CsvTimeSeriesClient = new TcpRpcClient("localhost", 11000);
            await Task.WhenAll(CsvTimeSeriesClient.WhenConnected);
        }
        */
        if (ClimateDataServiceClient == null)
        {
            ClimateDataServiceClient = new TcpRpcClient("login01.cluster.zalf.de", 11001);
            await Task.WhenAll(ClimateDataServiceClient.WhenConnected);
        }

        /*
        if (ElemNames.Count == 0 && CsvTimeSeriesClient.State == ConnectionState.Active)
        {
            var csvTimeSeries = CsvTimeSeriesClient.GetMain<ClimateData.ITimeSeries>();
            var header = await csvTimeSeries.Header();
            foreach (var elem in header)
            {
                ElemNames.Add(elem.ToString());
                Console.WriteLine(elem);
            }
        }
        */

        if (Simulations.Count == 0  && ClimateDataServiceClient.State == ConnectionState.Active)
        {
            var service = ClimateDataServiceClient.GetMain<Mas.Rpc.ClimateData.IService>();
            await UpdateSimulations(service);
        }
        //forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }


    private async Task UpdateSimulations(ClimateData.IService service)
    {
        Console.WriteLine("UpdateSimulations");
        Simulations.Clear();

        var sims = await service.GetAvailableSimulations();
        foreach (var sim in sims)
        {
            var simInfo = await sim.Info();
            Simulations.Add(simInfo.Id, new Tuple<ClimateData.ISimulation, Common.IdInformation>(sim, simInfo));
        }
        if(sims.Count > 0) await UpdateScenarios(sims[0]);
    }

    private async Task UpdateScenariosOnSimulationChanged(ChangeEventArgs arg)
    {
        Console.WriteLine("UpdateScenariosOnSimulationChanged");
        await UpdateScenarios(Simulations[arg.Value.ToString()].Item1);
    }

    private async Task UpdateScenarios(ClimateData.ISimulation sim)
    {
        Console.WriteLine("UpdateScenarios");
        Scenarios.Clear();

        var scens = await sim.Scenarios();
        foreach (var scen in scens)
        {
            var scenInfo = await scen.Info();
            Scenarios.Add(scenInfo.Id, new Tuple<ClimateData.IScenario, Common.IdInformation>(scen, scenInfo));
        }

        if(scens.Count > 0) await UpdateRealizations(scens[0]);
    }

    private async Task UpdateRealizationsOnScenarioChanged(ChangeEventArgs arg)
    {
        Console.WriteLine("UpdateRealizationsOnScenarioChanged");
        await UpdateRealizations(Scenarios[arg.Value.ToString()].Item1);
    }

    private async Task UpdateRealizations(ClimateData.IScenario scen)
    {
        Console.WriteLine("UpdateRealizations");
        Realizations.Clear();

        var reals = await scen.Realizations();
        foreach (var real in reals)
        {
            var realInfo = await real.Info();
            Realizations.Add(realInfo.Id, new Tuple<ClimateData.IRealization, Common.IdInformation>(real, realInfo));
        }

        if (reals.Count > 0) await UpdateTimeseries(reals[0]);
    }

    private async Task UpdateTimeseriesOnRealizationChanged(ChangeEventArgs arg)
    {
        Console.WriteLine("UpdateTimeseriesOnRealizationChanged");
        await UpdateTimeseries(Realizations[arg.Value.ToString()].Item1);
    }

    private async Task UpdateTimeseries(ClimateData.IRealization real)
    {
        Console.WriteLine("UpdateTimeseries");
        Timeseries.Clear();
        CsvTimeseries = "";

        var coord = new Geo.Coord();
        coord.Latlon = new Geo.LatLonCoord();
        coord.Latlon.Lat = 46.51412;
        coord.Latlon.Lon = 12.81895;
        var tss = await real.ClosestTimeSeriesAt(coord);
        var firstStart = DateTime.Today;
        var firstEnd = firstStart;
        foreach (var it in tss.Select((x, i) => new { timeseries = x, Index = i }))
        {
            var range = await it.timeseries.Range();
            var s = range.Item1;
            var e = range.Item2;
            var start = new DateTime(s.Year, s.Month, s.Day);
            var end = new DateTime(e.Year, e.Month, e.Day);
            if(it.Index == 0)
            {
                firstStart = start;
                firstEnd = end;
            }
            Timeseries.Add(it.Index, Tuple.Create(it.timeseries, Tuple.Create(start, end)));
        }

        if (tss.Count > 0) await UpdateTimeseriesCSV(tss[0], firstStart, firstEnd);
    }

    private async Task UpdateTimeseriesCSVOnTimeseriesChanged(ChangeEventArgs arg)
    {
        Console.WriteLine("UpdateTimeseriesCSVOnTimeseriesChanged");
        var id = Int32.Parse(arg.Value.ToString());
        var range = Timeseries[id].Item2;
        await UpdateTimeseriesCSV(Timeseries[id].Item1, range.Item1, range.Item2);
    }

    private async Task UpdateTimeseriesCSV(ClimateData.ITimeSeries ts, DateTime from, DateTime to)
    {
        Console.WriteLine("UpdateTimeseriesCSV");
        var csv = "iso-date";
        var header = await ts.Header();
        foreach(var elem in header)
        {
            csv += ", " + elem.ToString();
        }
        csv += "\n";

        var data = await ts.Data();
        var currentDate = from;
        foreach(var daysData in data)
        {
            csv += currentDate.ToString("yyyy-MM-dd");
            foreach(var elem in daysData)
            {
                csv += ", " + elem.ToString();
            }
            csv += "\n";
            currentDate = currentDate.AddDays(1);
        }

        CsvTimeseries = csv;
    }

}