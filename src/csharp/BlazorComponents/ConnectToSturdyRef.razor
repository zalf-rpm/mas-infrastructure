@using Capnp.Rpc
@using MudBlazor

@namespace Mas.Infrastructure.BlazorComponents

@inject Mas.Infrastructure.Common.ConnectionManager ConMan

@typeparam TCapnpInterface

@implements IDisposable

<MudPaper Class="d-flex flex-row py-2 px-1">
    <MudButton Class="pa-2 mx-2" Variant=Variant.Filled EndIcon=@buttonEndIcon Color=@buttonColor OnClick=@Connect>@buttonLabel</MudButton>
    <MudTextField Class="pa-2 mx-2" @bind-Value=SturdyRef Label=@Label Variant=Variant.Outlined></MudTextField>
    <MudButton Class="pa-2 mx-2" Variant=Variant.Outlined Color=@Color.Primary OnClick=@RetrieveSturdyRef>Retrieve</MudButton>
</MudPaper>

@code {
    [Parameter]
    public String SturdyRef { get; set; }

    [Parameter]
    public EventCallback<String> SturdyRefChanged { get; set; }

    private String buttonEndIcon = Icons.Material.Filled.CastConnected;
    private Color buttonColor = Color.Primary;
    private String buttonLabel = "Connect";

    [Parameter]
    public TCapnpInterface Capability
    {
        get;
        set;
    }

    [Parameter]
    public EventCallback<TCapnpInterface> CapabilityChanged
    {
        get;
        set;
    }

    [Parameter]
    public String Label { get; set; } = "Persistent capability (capnp://host:port/token)";

    [Parameter]
    public EventCallback<RpcException> RpcExceptionThrown { get; set; }

    private async Task Connect()
    {
        try
        {
            buttonLabel = "Connecting ...";

            var cap = await ConMan.Connect<TCapnpInterface>(SturdyRef);
            if (Capability != cap) Capability?.Dispose();
            Capability = cap;

            buttonEndIcon = Icons.Material.Filled.CastConnected;
            buttonColor = Color.Success;
            buttonLabel = "Connected";

            await CapabilityChanged.InvokeAsync(Capnp.Rpc.Proxy.Share(Capability));
        }
        catch (RpcException e)
        {
            Console.WriteLine(e.ToString());

            buttonEndIcon = Icons.Material.Filled.Error;
            buttonColor = Color.Error;
            buttonLabel = "Connect failed";

            await RpcExceptionThrown.InvokeAsync(e);
        }
    }

    private void ClearButton()
    {
        buttonEndIcon = Icons.Material.Filled.CastConnected;
        buttonColor = Color.Primary;
        buttonLabel = "Connect";
    }

    private async Task RetrieveSturdyRef()
    {
        try
        {
            if (Capability is Proxy p)
            {
                SturdyRef = (await p.Cast<Capnp.IPersistent<String, String>>(false)?.Save(null))?.SturdyRef;
                await SturdyRefChanged.InvokeAsync(SturdyRef);
            }
        }
        catch (Capnp.Rpc.RpcException e)
        {
            Console.WriteLine(e.ToString());
            await CapabilityChanged.InvokeAsync(Capability);
        }
    }

    void IDisposable.Dispose()
    {
        Capability?.Dispose();
    }
}
