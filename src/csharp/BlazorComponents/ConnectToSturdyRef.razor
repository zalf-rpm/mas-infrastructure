@namespace Mas.Infrastructure.BlazorComponents

@using Capnp.Rpc
@using System.Threading
@using System.Reflection
@using MudBlazor

@inject Common.ConnectionManager ConMan
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IDialogService DialogService

@typeparam TCapnpInterface

@implements IDisposable

<MudPaper Class="d-flex flex-row py-2 px-1 align-content-center">
    <MudSelect Class="pa-2 mx-2"
               T="@StoredSRData"
               Value="@_selectedBookmark"
               ValueChanged="@SelectedBookmarkChanged"
               Label="@Label"
               Variant="@Variant.Outlined"
               AnchorOrigin="@Origin.TopCenter">
        @foreach (var b in Bookmarks)
        {
            <MudSelectItem Value=@b>
                <MudElement Class="d-flex">
                    <MudIcon Icon=@(b.AutoConnect ? Icons.Material.Filled.CastConnected : Icons.Material.Filled.Cast) />
                    <MudText Class="ml-8" Typo=@Typo.body1>@($"{b.PetName}")</MudText>
                </MudElement>
            </MudSelectItem>
        }
    </MudSelect>
    <MudFab Class="pa-2 mt-2 ml-2 mr-6"
               Variant="Variant.Filled"
               StartIcon="@_connectIcon"
               Color="@(SturdyRef == null || !SturdyRef.Any() ? Color.Default : _connectColor)"
               Disabled="@(SturdyRef == null || !SturdyRef.Any())"
               OnClick="@Connect"/>
    <MudFab Class="pa-2 mt-2 mx-2"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Edit"
               Color="@Color.Default"
               Disabled="@(_selectedBookmark == null)"
               OnClick="@(async () => await OpenAddSturdyRefDialog(_selectedBookmark))"/>
    <MudFab Class="pa-2 mt-2 mx-2"
               Variant="Variant.Filled"
               StartIcon="@Icons.Material.Filled.Add"
               Color="@Color.Default"
               OnClick="@(async () => await OpenAddSturdyRefDialog())"/>
</MudPaper>

@*
<MudPaper Class="d-flex flex-row py-2 px-1">
    <MudButton xs="2" Class="pa-2 mx-2"
               Variant=Variant.Filled
               StartIcon=@Icons.Material.Filled.Add
               Color=@Color.Primary
               OnClick=@(async () => await OpenAddSturdyRefDialog())>
        Add new
    </MudButton>
    <MudSelect xs="6" Class="pa-2 mx-2"
               T=@StoredSRData
               Value=@selectedBookmark
               ValueChanged=@SelectedBookmarkChanged
               Label=@Label
               Variant=@Variant.Outlined
               OffsetY=@true>
        @foreach (var b in bookmarks)
        {
            <MudSelectItem Value=@b>
                <MudElement Class="d-flex">
                    <MudIcon Icon=@(b.AutoConnect ? Icons.Material.Filled.CastConnected : Icons.Material.Filled.Cast) />
                    <MudText Class="ml-8" Typo=@Typo.body1>@($"{b.PetName}")</MudText>
                </MudElement>
            </MudSelectItem>
        }
    </MudSelect>
    <MudButton xs="2" Class="pa-2 mx-2"
               Variant=Variant.Filled
               StartIcon=@Icons.Material.Filled.Edit
               Color=@Color.Primary
               Disabled=@(selectedBookmark == null)
               OnClick=@(async () => await OpenAddSturdyRefDialog(selectedBookmark))>
        Edit
    </MudButton>
    <MudButton xs="2" Class="pa-2 mx-2"
               Variant=Variant.Filled
               StartIcon=@buttonIcon
               Color=@buttonColor
               OnClick=@Connect>
        @buttonLabel
    </MudButton>
</MudPaper>
*@

@code {
    [Parameter]
    public string? SturdyRef { get; set; }

    private void SturdyRefValueChanged(string sr)
    {
        SturdyRef = sr;
        if (SturdyRefChanged.HasDelegate) _ = SturdyRefChanged.InvokeAsync(sr);
        ClearButton();
    }

    [Parameter]
    public bool ConnectOnInit { get; set; } = false;

    [Parameter]
    public EventCallback<string> SturdyRefChanged { get; set; }

    private string _connectIcon = Icons.Material.Filled.Cast;
    private Color _connectColor = Color.Default;
    private string _connectLabel = "Connect";

    private bool _showSturdyRefEdit = false;

    [Parameter]
    public TCapnpInterface? Capability { get; set; }

    [Parameter]
    public EventCallback<TCapnpInterface> CapabilityChanged { get; set; }

    [Parameter]
    public string Label { get; set; } = "Persistent capability";

    [Parameter]
    public string HelperText { get; set; } = "capnp://vatId@host:port/srToken";

    [Parameter]
    public EventCallback<RpcException> RpcExceptionThrown { get; set; }

    private async Task Connect()
    {
        try
        {
            _connectLabel = "Connecting ...";

            Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">: ThreadId: " + Thread.CurrentThread.ManagedThreadId);
            var cap = await ConMan.Connect<TCapnpInterface>(SturdyRef);
            if (Capability != cap) Capability?.Dispose();
            Capability = cap;

            //Console.WriteLine("ConnectToSturdyRef: current TaskSchedulerId: " + TaskScheduler.Current.Id);
            //var (mps, ops) = await (cap as Soil.IService)?.GetAllAvailableParameters(false);

            if (Capability == null)
            {
                _connectIcon = Icons.Material.Filled.Cast;
                _connectColor = Color.Error;
                _connectLabel = "Connect failed";
                Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">: failed");
            } 
            else 
            {
                _connectIcon = Icons.Material.Filled.CastConnected;
                _connectColor = Color.Success;
                _connectLabel = "Connected";
                Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">: succeeded");

                if (CapabilityChanged.HasDelegate) _ = CapabilityChanged.InvokeAsync(Proxy.Share(Capability));
            }
        }
        catch (RpcException e)
        {
            Console.WriteLine(e.ToString());

            _connectIcon = Icons.Material.Filled.Cast;
            _connectColor = Color.Error;
            _connectLabel = "Connect failed";

            if (RpcExceptionThrown.HasDelegate) _ = RpcExceptionThrown.InvokeAsync(e);
        }
    }

    public async Task Reconnect()
    {
        ClearButton();
        await Connect();
    }

    private void ClearButton()
    {
        _connectIcon = Icons.Material.Filled.Cast;
        _connectColor = Color.Default;
        _connectLabel = "Connect";
    }

    private async Task RetrieveSturdyRef()
    {
        try
        {
            if (Capability is Proxy p)
            {
                var persistent = p.Cast<Mas.Schema.Persistence.IPersistent>(false);
                var sr = (await persistent.Save(null))?.SturdyRef;
                SturdyRef = Common.Restorer.SturdyRefStr(sr);

                if (SturdyRefChanged.HasDelegate) _ = SturdyRefChanged.InvokeAsync(SturdyRef);
            }
        }
        catch (RpcException e)
        {
            Console.WriteLine(e.ToString());
        }
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized SR<" + typeof(TCapnpInterface) + ">: " + SturdyRef);
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("Disposing<" + typeof(TCapnpInterface) + "> " + SturdyRef + " cap: " + Capability);
        Capability?.Dispose();
    }

    private List<StoredSRData> _allBookmarks = [];
    private List<StoredSRData> Bookmarks => _allBookmarks.Where(b => b.InterfaceId == typeof(TCapnpInterface).GetCustomAttribute<Capnp.TypeIdAttribute>(false)?.Id).ToList();
    private StoredSRData? _selectedBookmark;

    private async Task SelectedBookmarkChanged(StoredSRData b, bool allowAutoConnect)
    {
        _selectedBookmark = b;
        SturdyRefValueChanged(b.SturdyRef);
        if (allowAutoConnect && b.AutoConnect) await Connect();
        StateHasChanged();
    }

    private async Task SelectedBookmarkChanged(StoredSRData? b)
    {
        if (b == null) return;
        await SelectedBookmarkChanged(b, true);
    }

    private List<StoredSRData> _hardcodedDefaultSturdyRefs = [
        /*
        new StoredSRData
        {
            InterfaceId = 0xfe7d08d4352b0c5f,
            PetName = "DWD CMIP5 EURO-CORDEX ReKLiEs-De",
            SturdyRef = "capnp://login01.cluster.zalf.de:9998",
            AutoConnect = true,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xfe7d08d4352b0c5f,
            PetName = "DWD Germany",
            SturdyRef = "capnp://login01.cluster.zalf.de:9999",
            AutoConnect = true,
            DefaultSelect = false
        },
        new StoredSRData
        {
            InterfaceId = 0xa7769f40fe6e6de8,
            PetName = "Hohenfinow2 Test CSV",
            SturdyRef = "capnp://login01.cluster.zalf.de:11002",
            AutoConnect = true,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xa09aa71427dc64e1,
            PetName = "BÜK200",
            SturdyRef = "capnp://login01.cluster.zalf.de:10001",
            AutoConnect = true,
            DefaultSelect = false
        },
        new StoredSRData
        {
            InterfaceId = 0xa09aa71427dc64e1,
            PetName = "BÜK1000",
            SturdyRef = "capnp://login01.cluster.zalf.de:10000",
            AutoConnect = true,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xa5feedafa5ec5c4a,
            PetName = "a MONICA instance",
            SturdyRef = "capnp://login01.cluster.zalf.de:12003",
            AutoConnect = true,
            DefaultSelect = false
        },
        new StoredSRData
        {
            InterfaceId = 0xa5feedafa5ec5c4a,
            PetName = "a proxy with 5 MONICA instances",
            SturdyRef = "capnp://login01.cluster.zalf.de:12002",
            AutoConnect = true,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xe1f480ef979784b2,
            PetName = "Alter time series wrapper",
            SturdyRef = "capnp://login01.cluster.zalf.de:11006",
            AutoConnect = true,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xa418c26cc59929d9,
            PetName = "Time series factory from CSV data",
            SturdyRef = "capnp://login01.cluster.zalf.de:11005",
            AutoConnect = false,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xbbb7aeae0d097e05,
            PetName = "Fertilizer service",
            SturdyRef = "capnp://login01.cluster.zalf.de:13001",
            AutoConnect = true,
            DefaultSelect = true
        },
        new StoredSRData
        {
            InterfaceId = 0xca7b4bd1600633b8,
            PetName = "Crop registry",
            SturdyRef = "capnp://login01.cluster.zalf.de:14001",
            AutoConnect = true,
            DefaultSelect = true
        }
        */
    ];

    protected override async Task OnInitializedAsync()
    {
        if (ConnectOnInit && SturdyRef is { Length: > 0 }) await Connect();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">::OnAfterRenderAsync");

        if (firstRender)
        {
            Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">: first render");

            //just temporary to have some sturdy refs available in the users browser
            if (!await LocalStorage.ContainKeyAsync("sturdy-ref-store"))
            {
                await StoredSRData.SaveAllData(LocalStorage, _hardcodedDefaultSturdyRefs);
            }

            if (await LocalStorage.ContainKeyAsync("sturdy-ref-store"))
            {
                _allBookmarks = await StoredSRData.GetAllData(LocalStorage);
                _allBookmarks.Sort();
                //try to select the first found default connect and auto connect field, so the user can start right away
                var sbms = Bookmarks.Where(b => b is { AutoConnect: true, DefaultSelect: true });
                var sbmsArray = sbms.ToArray();
                var sb = sbmsArray.Any() ? sbmsArray.First() : null;
                //if there was no one with default select, then just take the first auto-connect one
                if (sb == null)
                {
                    sbms = Bookmarks.Where(b => b.AutoConnect);
                    sbmsArray = sbms.ToArray();
                    sb = sbmsArray.Any() ? sbmsArray.First() : null;
                }
                else
                {
                    foreach (var ssrd in sbmsArray)
                    {
                        Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">: ssrd: " + ssrd);
                    }
                }
                Console.WriteLine("ConnectToSturdyRef<" + typeof(TCapnpInterface) + ">: sb: " + sb);
                if (sb != null) await SelectedBookmarkChanged(sb, ConnectOnInit);
                StateHasChanged();
            }

        }
    }

    private async Task OpenAddSturdyRefDialog(StoredSRData? editData = null)
    {
        var parameters = new DialogParameters();
        parameters.Add("InterfaceId", typeof(TCapnpInterface).GetCustomAttribute<Capnp.TypeIdAttribute>(false)?.Id);
        parameters.Add("EditData", editData);
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
        var res = await DialogService.Show<NewSturdyRefDialog>("Add sturdy reference", parameters, options).Result;
        if (res is { Data: StoredSRData nb } && editData == null)
        {
            if (nb.SturdyRef.Length == 0) return;
            _allBookmarks = await StoredSRData.SaveNew(LocalStorage, nb);
            _allBookmarks.Sort();
            await SelectedBookmarkChanged(nb);
        }
        else if (editData != null)
        {
            //if the user possibly updated the default select field, un-default select all others with same interface
            if (editData.DefaultSelect)
            {
                foreach (var b in Bookmarks)
                {
                    if (b != editData) b.DefaultSelect = false;
                }
            }
            await StoredSRData.SaveAllData(LocalStorage, _allBookmarks);
            SturdyRef = editData.SturdyRef;
        }
    }

}
