@namespace Mas.Infrastructure.BlazorComponents

@using System.Text;
@using Climate = Mas.Schema.Climate
@using Common = Mas.Schema.Common
@using MudBlazor

@inject IJSRuntime JsRuntime

@implements IDisposable

@*CapabilityChanged=@CapabilityChanged*@
<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to climate timeseries" 
                            @bind-Capability="@TimeSeriesCap"
                            TCapnpInterface="Climate.ITimeSeries"
                            ConnectOnInit="true"/>
    </MudItem>
    <MudItem xs="2" Class="d-flex justify-center">
        <MudDatePicker MinDate="@_originalStart" MaxDate="@_originalEnd" FirstDayOfWeek="@DayOfWeek.Monday" Label="Start"
            Editable="@true" Mask=@(new DateMask("0000-00-00")) DateFormat="yyyy-MM-dd" @bind-Date="@Start" />
    </MudItem>
    <MudItem xs="2" Class="d-flex justify-center">
        <MudDatePicker MinDate="@_originalStart" MaxDate="@_originalEnd" FirstDayOfWeek="@DayOfWeek.Monday" Label="End"
            Editable="@true" Mask=@(new DateMask("0000-00-00")) DateFormat="yyyy-MM-dd" @bind-Date="@End" />
    </MudItem>
    <MudItem xs="4" Class="d-flex flex-row py-2 px-1">
        <!--@bind-SelectedValues="@SelectedClimateElements"-->
        <MudChipSet SelectionMode="SelectionMode.MultiSelection"
                    @bind-SelectedValues="@SelectedClimateElements"
                    CheckMark="true"
                    Variant="Variant.Filled"
                    T="Climate.Element">
            @foreach (var (e, i) in (_availableClimateElements ?? new List<Climate.Element>()).OrderBy(e =>
                          e.ToString()).Select((e, i) => (e, i)))
            {
                var en = e.ToString();
                <MudChip T="Climate.Element"
                         Size=@Size.Large
                         Color=@Color.Default
                         SelectedColor=@Color.Success
                         Value=@e
                         Text=@en
                         Default=@DefaultSelectedClimateElements.Contains(en)>
                </MudChip>
            }
        </MudChipSet>
    </MudItem>
    <MudItem xs="4" Class="d-flex align-stretch justify-end gap-4">
        <MudSwitch @bind-Value="AutoLoad" Label="Auto load" Color="Color.Success" />
        <MudButton Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@LoadTimeSeriesData">Load data</MudButton>
        <MudButton Disabled="@(!headings.Any())" Variant="Variant.Filled" Color="@Color.Primary" OnClick="@SaveTimeSeries">
            Save data
        </MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudExpansionPanels MultiExpansion="@true">
            @code {
                private Dictionary<string, bool> panelOpened = new() { { "table", false }, { "text", false } };
                
                [CascadingParameter(Name = "ChartPanelOpened")]
                public bool ChartPanelOpened { get; set; } = true;
            }
            <MudExpansionPanel @bind-IsExpanded="@ChartPanelOpened" Text="Chart">
                @code {
                    private List<Highchart.AxisConfig> yAxisConfigs = new()
                {
                new Highchart.AxisConfig { Id = "def", Title = "Wind [m/s], Globrad [MJ/m2], Relhumid [%]" },
                new Highchart.AxisConfig { Id = "temps", Title = "Temp [°C]" },
                new Highchart.AxisConfig { Id = "precip", Title = "Precipitation [mm]", Opposite = true },
                };

                    private Dictionary<string, Highchart.CurveConfig> curveName2Config = new()
                {
                { "tmin", new Highchart.CurveConfig { DisplayAxisId = "temps" } },
                { "tavg", new Highchart.CurveConfig { DisplayAxisId = "temps", IsVisible = true } },
                { "tmax", new Highchart.CurveConfig { DisplayAxisId = "temps" } },
                { "precip", new Highchart.CurveConfig { DisplayAxisId = "precip", IsVisible = true } },
                { "globrad", new Highchart.CurveConfig { DisplayAxisId = "def" } },
                { "wind", new Highchart.CurveConfig { DisplayAxisId = "def" } },
                { "relhumid", new Highchart.CurveConfig { DisplayAxisId = "def" } }
                };
                }
                <Highchart Title="Climate Curves" XAxisTitle="Date" YAxisConfigs="@yAxisConfigs"
                    CurveName2Config="@curveName2Config" Data="@_name2Data" Dates="@_dates" DataChanged="@_dataChanged"
                    ChartRerendered="@(() => _dataChanged = false)"></Highchart>
            </MudExpansionPanel>
            <MudExpansionPanel @bind-IsExpanded=@panelOpened["table"] Text="Table">
                <MudTable T="@Element" Items="@data" Hover="@true" Dense="@true" Filter="@(new
                    Func<Element,bool>(DataFilterFunc))">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Timeseries Data</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                        </MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Date</MudTh>
                        @foreach (var h in headings)
                        {
                            <MudTh>@h</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                        @foreach (var (val, i) in headings.Select((Value, Index) => (Value, Index)))
                        {
                            var k = i;
                            <MudTd DataLabel=@val>@context.Data.ElementAtOrDefault(k)</MudTd>
                        }
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                        @foreach (var (val, i) in headings.Select((Value, Index) => (Value, Index)))
                        {
                            var k = i;
                            <MudTd DataLabel=@val>
                                <MudTextField T=@float @bind-Value=context.Data[k] Required />
                            </MudTd>
                        }
                    </RowEditingTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Text" IsExpanded=@panelOpened["text"] ExpandedChanged=@(b => {
                panelOpened["text"] = b; CreateCsvString(); })>
                <MudTextField T="string" ReadOnly="@true" FullWidth="@true" Variant="@Variant.Outlined" Text="@_csvString"
                    Lines="30" />
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudItem>
</MudGrid>

@code {


    [Parameter]
    public bool AutoLoad { get; set; } = false;

    private Climate.ITimeSeries? _originalTimeSeriesCap;

    private bool _settingSubTimeSeries = false;

    private Climate.ITimeSeries? _timeSeriesCap;
    [Parameter]
    public Climate.ITimeSeries? TimeSeriesCap { 
        get => _timeSeriesCap;
        set
        {
            if (_timeSeriesCap == value) return;
            if(value is null or Capnp.Rpc.Proxy {IsDisposed: true }) return;
            Console.WriteLine("TimeSeriesCap.Setter");
            _timeSeriesCap?.Dispose(); //free old cap
            _timeSeriesCap = value;    //assign new cap
            //if not setting sub time-series, save unrestricted cap and before that free old unrestricted cap
            if (!_settingSubTimeSeries)
            {
                _originalTimeSeriesCap?.Dispose();
                _originalTimeSeriesCap = Capnp.Rpc.Proxy.Share(_timeSeriesCap!); //save unrestricted cap
            } 
            // notify listeners
            if (TimeSeriesCapChanged.HasDelegate) _ = TimeSeriesCapChanged.InvokeAsync(Capnp.Rpc.Proxy.Share(_timeSeriesCap!));
            // do whatever needs to be done after an update
            _ = TimeSeriesUpdated(_settingSubTimeSeries);
            // turn of subseries mode
            _settingSubTimeSeries = false;
        } 
    }

    [CascadingParameter(Name = "TimeSeriesCapChanged")]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    private DateTime? _start;
    private DateTime? _originalStart;
    [Parameter]
    public DateTime? Start
    {
        get => _start;
        set { _start = value; _ = updateSubTimeSeries(); }
    }

    private DateTime? _end;
    private DateTime? _originalEnd;
    [Parameter]
    public DateTime? End
    {
        get => _end;
        set { _end = value; _ = updateSubTimeSeries(); }
    }

    private struct Element
    {
        public DateTime Date;
        public List<float> Data;
    }
    private string _csvString = "";

    [Parameter]
    public HashSet<string> DefaultSelectedClimateElements { get; set; } =
        ["tmin", "tavg", "tmax", "precip", "globrad", "wind", "relhumid"];

    private IEnumerable<Climate.Element>? _availableClimateElements;

    private IReadOnlyCollection<Climate.Element>? _selectedClimateElements;

    public IReadOnlyCollection<Climate.Element> SelectedClimateElements
    {
        get => _selectedClimateElements ?? (_availableClimateElements ?? new List<Climate.Element>()).ToList();
        set { _selectedClimateElements = value; _ = updateSubTimeSeries(); }
    }

    private IEnumerable<string> headings { get => SelectedClimateElements.Select(e => e.ToString()); }
    private List<Element> data = [];
    private string? searchString;

    private Dictionary<string, IEnumerable<float>> _name2Data = new();
    private IEnumerable<DateTime> _dates = new List<DateTime>();
    private bool _dataChanged = false;

    private async Task updateSubTimeSeries()
    {
        Console.WriteLine("updateSubTimeSeries");
        if (_originalTimeSeriesCap == null) return;

        var subTs = _originalTimeSeriesCap;
        if (_start.HasValue && _end.HasValue && (_start != _originalStart || _end != _originalEnd))
        {
            subTs = await _originalTimeSeriesCap.Subrange(
                DateTime2CommonDate(_start.GetValueOrDefault()),
                DateTime2CommonDate(_end.GetValueOrDefault())
            );
        }
        if (_availableClimateElements != null
        && SelectedClimateElements.Any() && !SelectedClimateElements.SequenceEqual(_availableClimateElements))
        {
            subTs = await subTs.Subheader(SelectedClimateElements.ToList());
        }

        if (subTs != _originalTimeSeriesCap)
        {
            //dispose the current time series cap, unless it's the initial one
            //if (TimeSeriesCap != originalTimeSeriesCap) TimeSeriesCap?.Dispose();
            _settingSubTimeSeries = true;
            TimeSeriesCap = subTs;
            //if (TimeSeriesCapChanged.HasDelegate) _ = TimeSeriesCapChanged.InvokeAsync(subTS);
            //if (AutoLoad) await LoadTimeSeriesData();
        }
    }

    #region init
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitialized ClimateTimeSeries");
    }
    #endregion
    
    private async Task TimeSeriesUpdated(bool settingSubTimeseries = false)
    {
        Console.WriteLine("TimeSeriesUpdated");
        if (TimeSeriesCap == null) return;

        var (s, e) = await TimeSeriesCap.Range();
        if (_originalStart == null || !settingSubTimeseries) _originalStart = CommonDate2DateTime(s);
        _start = settingSubTimeseries ? CommonDate2DateTime(s) : _originalStart;
        if (_originalEnd == null || !settingSubTimeseries) _originalEnd = CommonDate2DateTime(e);
        _end = settingSubTimeseries ? CommonDate2DateTime(e) : _originalEnd;
        
        var h = await TimeSeriesCap.Header();
        _availableClimateElements ??= h;

        if (AutoLoad) await LoadTimeSeriesData();
        StateHasChanged();
    }

    private DateTime CommonDate2DateTime(Common.Date d)
    {
        return new DateTime(d.Year, d.Month, d.Day);
    }

    private Common.Date DateTime2CommonDate(DateTime d)
    {
        return new Common.Date { Year = (short)d.Year, Month = (byte)d.Month, Day = (byte)d.Day };
    }


    private async Task LoadTimeSeriesData()
    {
        if (TimeSeriesCap == null || !_start.HasValue || !_end.HasValue || !SelectedClimateElements.Any()) return;

        Console.WriteLine("Loading data...");

        var s = _start.GetValueOrDefault();

        var ds = await TimeSeriesCap.Data();
        data = ds.Select((d, i) => new Element { Date = s.AddDays(i), Data = d.ToList() }).ToList();

        _dates = data.Select((_, i) => s.AddDays(i));
        _name2Data.Clear();
        foreach (var (header, i) in headings.Select((h, i) => (h, i))) _name2Data[header] = data.Select(e => e.Data[i]);

        _dataChanged = true;
        StateHasChanged();

        if (panelOpened["text"]) CreateCsvString();
    }

    private void CreateCsvString()
    {
        //create csv file
        var sb = new StringBuilder();
        sb.Append("iso-date,");
        sb.Append(headings.Aggregate((a, e) => a + "," + e.ToString()));
        sb.Append("\n");

        var ci = new System.Globalization.CultureInfo("en-US");
        foreach (var el in data)
        {
            sb.Append(el.Date.ToString("yyyy-MM-dd"));
            sb.Append(",");
            sb.Append(el.Data.Select(e => e.ToString(ci)).Aggregate((a, e) => a + "," + e));
            sb.Append("\n");
        }

        _csvString = sb.ToString();
    }

    private bool DataFilterFunc(Element elem)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (elem.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        // return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        // return true;
        return false;
    }

    private async Task SaveTimeSeries()
    {
        CreateCsvString();
        await JsRuntime.InvokeVoidAsync("saveAsBase64", "data.csv", Convert.ToBase64String(Encoding.UTF8.GetBytes(_csvString)));
    }

    void IDisposable.Dispose()
    {
        TimeSeriesCap?.Dispose();
        _originalTimeSeriesCap?.Dispose();

        @* //dispose the current time series cap if it's not the same as the initial one
        if (originalTimeSeriesCap != TimeSeriesCap)
        {
            TimeSeriesCap?.Dispose();

            //free the original cap if we are the owner
            if (componentIsTimeSeriesCapOwner) originalTimeSeriesCap?.Dispose();
        } *@
    }

}
