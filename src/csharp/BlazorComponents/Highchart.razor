@namespace Mas.Infrastructure.BlazorComponents

@using System.Text;
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json
@using System.Text.Json
@using Allegiance.Blazor.Highcharts.Core.Charts
@using Allegiance.Blazor.Highcharts.Core.Constants
@using Allegiance.Blazor.Highcharts.Core.Options
@using Allegiance.Blazor.Highcharts.Core.Services.Interfaces

@inject IJSRuntime JsRuntime
@inject IChartService ChartService

@implements IDisposable

<div id="@_chartId"></div>

@code {
    [Parameter]
    public Dictionary<string, IEnumerable<float>>? Data { get; set; }

    [Parameter]
    public IEnumerable<DateTime>? Dates { get; set; }

    [Parameter]
    public string Type { get; set; } = ChartType.Line;

    [Parameter]
    public bool DataChanged { get; set; } = false;

    [Parameter]
    public EventCallback ChartRerendered { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? XAxisTitle { get; set; }

    public class AxisConfig
    {
        public string? Title { get; set; }
        public string? Id { get; set; }
        public bool Opposite { get; set; } = false;
    }
    [Parameter]
    public List<AxisConfig> YAxisConfigs { get; set; } = [];

    [Parameter]
    public bool AllCurvesVisible { get; set; } = false;

    private Dictionary<string, int> _axisIdToCurveNo = new();

    public class CurveConfig
    {
        public bool IsVisible { get; set; } = false;
        public string? DisplayAxisId { get; set; }
    }
    [Parameter]
    public Dictionary<string, CurveConfig> CurveName2Config { get; set; } = new();

    private string _chartId = Guid.NewGuid().ToString();
    private bool _chartRenderedOnce = false;

    private ChartObject? _lineGraph;

    protected override void OnInitialized()
    {
        _lineGraph = new ChartObject()
        {
            Chart = new Chart(ChartType.Line, false),
            Legend = new Legend(true, Layout.Vertical, Align.Right, VerticalAlign.Middle),
            //PlotOptions = new PlotOptions(new PlotOptionsSeries(new Label(false), 2010)),
            Responsive = new Responsive(new Rule(new Condition(500),
            new ChartOptions(new Legend(true, Layout.Vertical, Align.Right, VerticalAlign.Middle)))),
            Series = [],
            //Subtitle = new Title("MONICA Result Data"),
            //Title = new Title(Title),
            //YAxis = new YAxis(new Title(YAxisTitle)),
            XAxis = new XAxis
            {
                Accessibility = new Accessibility("Date / days"),
                Type = "datetime",
                Labels = new Labels()// { Rotation = 0 },
            }
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Data == null) return;

        if (DataChanged && _lineGraph != null)
        {
            _lineGraph.Series = [];

            var noDates = Dates == null || !Dates.Any();
            var milliDates = noDates ? null : Dates?.Select(d => new DateTimeOffset(new DateTime(d.Year, d.Month, d.Day, 0, 0, 0, DateTimeKind.Utc)).ToUnixTimeMilliseconds()).ToArray();
            _lineGraph.Title = new Title(Title ?? "no-name");
            _lineGraph.XAxis.Type = noDates ? "linear" : "datetime";
            _lineGraph.XAxis.Title = new Title(XAxisTitle ?? "no-name");

            foreach (var ((curveName, value), i) in Data.Select((p, i) => (p, i)))
            {
                var ds = noDates
                    ? value.Select(v => (object)v).ToList()
                    : value.Zip(milliDates!).Select(z => new List<object>() { z.Second, z.First }).ToList<object>();

                var isVisible = AllCurvesVisible || CurveName2Config.GetValueOrDefault(curveName,
                    new CurveConfig { IsVisible = i == 0 && !CurveName2Config.Any() }).IsVisible;
                _lineGraph.Series.Add(new SeriesElement()
                {
                    Name = curveName,
                    Data = ds,
                    Visible = isVisible
                });
            }

            if (_chartRenderedOnce)
            {
                await ChartService.RenderChart(_chartId, UpdateJsonGraphOptions(_lineGraph.Generate()));
                if (ChartRerendered.HasDelegate) _ = ChartRerendered.InvokeAsync(false);
            }
        }
    }

    private string UpdateJsonGraphOptions(string options)
    {
        var jOptions = JObject.Parse(options);
        if(jOptions["tooltip"] is JObject tt) tt["xDateFormat"] = "%Y-%m-%d";

        if (YAxisConfigs.Any()) jOptions["yAxis"] = new JArray();
        foreach (var (i, conf) in YAxisConfigs.Select((conf, i) => (i, conf)))
        {
            var yAxis = new JObject {
                { "title", new JObject { { "text", conf.Title } , { "style", new JObject() } } },
                { "opposite", conf.Opposite },
                { "labels", new JObject { { "rotation", 0 } } }
            };
            _axisIdToCurveNo[conf.Id ?? i.ToString()] = i;
            jOptions.Value<JArray>("yAxis")?.Add(yAxis);
        }

        jOptions.Value<JObject>("xAxis")?.Value<JObject>("labels")?.Add("rotation", 0);

        var curves = jOptions["series"];
        if (curves == null) return jOptions.ToString();
        foreach (var c in curves)
        {
            if (c is not JObject curve) continue;
            var name = curve.Value<string>("name");
            if (name == null) continue;
            var index = name.LastIndexOf("_@", StringComparison.Ordinal);
            //Console.WriteLine("name: " + name + " index: " + index);
            if (index > 0)
            {
                var curveNo = int.Parse(name[(index + 2)..]);
                curve["yAxis"] = curveNo;
                curve["name"] = name[..index];
            }
            else if (CurveName2Config.TryGetValue(name, out var conf))
            {
                if (conf.DisplayAxisId != null) curve["yAxis"] = _axisIdToCurveNo.GetValueOrDefault(conf.DisplayAxisId, 0);
            }
        }
        return jOptions.ToString();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!firstRender || _lineGraph == null) return;
        ChartService.RenderChart(_chartId, UpdateJsonGraphOptions(_lineGraph.Generate()));
        JsRuntime.InvokeVoidAsync("prettyPrint");
        _chartRenderedOnce = true;
    }

    public void Dispose()
    {
        _lineGraph?.DisposeChart(JsRuntime, _chartId);
    }
}
