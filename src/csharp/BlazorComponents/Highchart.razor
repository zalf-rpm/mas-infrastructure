@using System.Text;
@using Allegiance.Blazor.Highcharts.Services
@using Allegiance.Blazor.Highcharts.Charts
@using Allegiance.Blazor.Highcharts.Constants
@using Allegiance.Blazor.Highcharts.Options
@using Microsoft.JSInterop

@namespace Mas.Infrastructure.BlazorComponents

@inject IJSRuntime jsRuntime
@inject IChartService chartService

@implements IDisposable

<div id=@chartId></div>

@code {

    [Parameter]
    public Dictionary<String, IEnumerable<float>> Data { get; set; }

    private string chartId = Guid.NewGuid().ToString();
    private bool chartRenderedOnce = false;

    private ChartObject lineGraph = new ChartObject()
    {
        Legend = new Legend(true, Layout.Vertical, Align.Right, VerticalAlign.Middle),
        PlotOptions = new PlotOptions(new PlotOptionsSeries(new Label(false), 2010)),
        Responsive = new Responsive(new Rule(new Condition(500),
        new Allegiance.Blazor.Highcharts.Options.ChartOptions(
                new Legend(true, Layout.Vertical, Align.Right, VerticalAlign.Middle)))),
        Series = new List<SeriesElement>(),
        Subtitle = new Title("MONICA Result Data"),
        Title = new Title("run xyz"),
        YAxis = new YAxis(new Title("y axis title here")),
        XAxis = new XAxis(new Accessibility("x axis title here"))
    };

    protected override async Task OnParametersSetAsync()
    {
        if (Data == null) return;

        lineGraph.Series = new List<SeriesElement>();

        foreach (var p in Data)
        {
            lineGraph.Series.Add(new SeriesElement(p.Key, p.Value.Select(v => (object)v).ToList()));
        }

        if (chartRenderedOnce) await chartService.RenderChart(chartId, lineGraph.Generate());
    }
     
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            chartService.RenderChart(chartId, lineGraph.Generate());
            //jsRuntime.InvokeVoidAsync("prettyPrint");
            chartRenderedOnce = true;
        }
    }

    public void Dispose()
    {
        lineGraph.DisposeChart(jsRuntime, chartId);
    }
}
