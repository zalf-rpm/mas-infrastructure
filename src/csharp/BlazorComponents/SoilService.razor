@namespace Mas.Infrastructure.BlazorComponents

@using MudBlazor
@using System.Threading
@using Soil = Mas.Schema.Soil
@using Geo = Mas.Schema.Geo

@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@implements IDisposable

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to soil service"
                            CapabilityChanged="@SoilServiceCapabilityChanged"
                            TCapnpInterface="@Soil.IService"
                            @bind-SturdyRef="@soilServiceSturdyRef"
                            @ref="sturdyRefConnector">
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem Class=@(HideGeoPosPicker ? "d-none" : "") xs="12">
        <GeoposPicker @bind-LatLng="LatLng"
                      Width="50%" Height="400px"
                      CenterLatLng="@LatLng">
        </GeoposPicker>
    </MudItem>
    <MudItem xs="2" Class="d-flex align-stretch">
        <MudStack Class="justify-center">
            <MudSwitch @bind-Value="@AutoLoad" Label="Auto load" Color="Color.Success" />
            <MudButton Variant="@Variant.Filled"
                   Color="@Color.Primary"
                   OnClick="@GetSoilProfiles">
                Load soil profile<br>@@ @(Math.Round(LatLng.Item1, 2))N/@(Math.Round(LatLng.Item2, 2))E 
            </MudButton>
        </MudStack>
    </MudItem>
    <MudItem xs="5" >
        <MudText Typo="@Typo.subtitle1">Mandatory</MudText>
        <MudPaper Class="d-flex flex-row">
            <MudChipSet @bind-SelectedValues="@SelectedMandatorySoilProperties" SelectionMode="@SelectionMode.MultiSelection" CheckMark="true">
                @foreach (var (e, i) in (availableMandatorySoilProps ?? new List<Soil.PropertyName>()).OrderBy(e =>
                    e.ToString()).Select((e, i) => (e, i)))
                {
                    var en = e.ToString();
                    <MudChip Size=@Size.Large Color=@Color.Default SelectedColor=@Color.Success Value=@e Text=@en
                        Default=@DefaultSelectedSoilProperties.Contains(en)>
                    </MudChip>
                }
            </MudChipSet>
        </MudPaper>
    </MudItem>
    <MudItem xs="5">
        <MudText Typo="@Typo.subtitle1">Optional</MudText>
        <MudPaper Class="d-flex flex-row">
            <MudChipSet @bind-SelectedValues="@SelectedOptionalSoilProperties" SelectionMode="SelectionMode.MultiSelection" CheckMark="true">
                @foreach (var (e, i) in (availableOptionalSoilProps ?? new List<Soil.PropertyName>()).OrderBy(e =>
                    e.ToString()).Select((e, i) => (e, i)))
                {
                    var en = e.ToString();
                    <MudChip Size=@Size.Large Color=@Color.Default SelectedColor=@Color.Success Value="@e" Text="@en"
                        Default=@DefaultSelectedSoilProperties.Contains(en)>
                    </MudChip>
                }
            </MudChipSet>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudTabs Elevation="1" Rounded="@true" @bind-ActivatePanelIndex="@SelectedProfileIndex">
            @foreach(var (k, (profileId, profile, ProfileLayers)) in Profiles.Select((layer, k) => (k, layer)))
            {
                <MudTabPanel Text=@($"Profile {k+1} ({Math.Round(profile.PercentageOfArea, 0)}%)")
                    Tooltip=@($"Profile ID: {profileId}")
                    Icon=@Icons.Material.Filled.Layers>
                    <MudSimpleTable>
                        <thead>
                            <tr>
                                <th>Size [m]</th>
                                @foreach (var propName in selectedMandatorySoilProperties.Concat(selectedOptionalSoilProperties).OrderBy(p => p.ToString()))
                                {
                                    <th>
                                        @propName.ToString()
                                        @switch (propName)
                                        {
                                            case Soil.PropertyName.sand:
                                            case Soil.PropertyName.clay:
                                            case Soil.PropertyName.silt:
                                            case Soil.PropertyName.soilMoisture:
                                                <MudText>[%]</MudText>;
                                                break;
                                            case Soil.PropertyName.fieldCapacity:
                                            case Soil.PropertyName.permanentWiltingPoint:
                                            case Soil.PropertyName.saturation:
                                            case Soil.PropertyName.sceleton:
                                                <MudText>[vol%]</MudText>
                                                break;
                                            case Soil.PropertyName.organicCarbon:
                                            case Soil.PropertyName.organicMatter:
                                                <MudText>[mass%]</MudText>
                                                break;
                                            case Soil.PropertyName.ammonium:
                                                <MudText>[kg NH4-N m-3]</MudText>
                                                break;
                                            case Soil.PropertyName.nitrate:
                                                <MudText>[kg NO3-N m-3]</MudText>
                                                break;
                                            case Soil.PropertyName.bulkDensity:
                                            case Soil.PropertyName.rawDensity:
                                                <MudText>[kg m-3]</MudText>
                                                break;
                                            default:
                                                <MudText>&nbsp;</MudText>
                                                break;
                                        }
                                    </th>
                                }
                                <th style="width:20%">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var (i, layer) in ProfileLayers.Select((layer, i) => (i, layer)))
                            {
                                <tr>
                                    <td>
                                        <MudTextField @bind-Value=layer.Size
                                                    Validation=@((Func<float?, string?>) (val => val < 0 || val > 2 ? "[0 - 2m]" : null))
                                                    Required
                                                    Adornment="Adornment.End"
                                                    AdornmentText="m" />
                                    </td>
                                    @foreach (var propName in selectedMandatorySoilProperties.Concat(selectedOptionalSoilProperties).OrderBy(p => p.ToString()))
                                    {
                                        var props = layer.Properties.Where(p => p.Name == propName);
                                        if (props.Any())
                                        {
                                            var prop = props.First();
                                            Func<float?, string?> valid = val => null;
                                            <td>
                                                @if(prop.which == Soil.Layer.Property.WHICH.Unset)
                                                {
                                                    <MudText>-</MudText>
                                                }
                                                else
                                                {
                                                    switch (prop.Name)
                                                    {
                                                        case Soil.PropertyName.sand:
                                                        case Soil.PropertyName.clay:
                                                        case Soil.PropertyName.silt:
                                                            valid = val => val < 0 || val > 100 ? "[0 - 100]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="%" />
                                                            break;
                                                        case Soil.PropertyName.fieldCapacity:
                                                        case Soil.PropertyName.permanentWiltingPoint:
                                                        case Soil.PropertyName.saturation:
                                                        case Soil.PropertyName.sceleton:
                                                            valid = val => val < 0 || val > 100 ? "[0 - 100]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="vol%" />
                                                            break;
                                                        case Soil.PropertyName.organicCarbon:
                                                        case Soil.PropertyName.organicMatter:
                                                            valid = val => val < 0.0 || val > 100.0 ? "[0 - 100]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="mass%" />
                                                            break;
                                                        case Soil.PropertyName.ammonium:
                                                            valid = val => val < 0.0 || val > 1000 ? "[0 - 1000]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="kg NH4-N m-3" />
                                                            break;
                                                        case Soil.PropertyName.nitrate:
                                                            valid = val => val < 0.0 || val > 1000 ? "[0 - 1000]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="kg NO3-N m-3" />
                                                            break;
                                                        case Soil.PropertyName.bulkDensity:
                                                        case Soil.PropertyName.rawDensity:
                                                            valid = val => val < 0.0 || val > 2500.0 ? "[0 - 2500]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="kg m-3" />
                                                            break;
                                                        case Soil.PropertyName.pH:
                                                            valid = val => val < 0 || val > 14 ? "[0 - 14]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="" />
                                                            break;
                                                        case Soil.PropertyName.soilMoisture:
                                                            valid = val => val < 0 || val > 100 ? "[0 - 100]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="%" />
                                                            break;
                                                        case Soil.PropertyName.cnRatio:
                                                            valid = val => val < 0.0 || val > 1.0 ? "[0 - 1]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="" />
                                                            break;
                                                        case Soil.PropertyName.soilWaterConductivityCoefficient:
                                                            valid = val => val < 0.0 ? "[0 - ?]" : null;
                                                            <MudTextField @bind-Value=prop.F32Value Validation=@valid Required
                                                                        Adornment="Adornment.End" AdornmentText="" />
                                                            break;
                                                        case Soil.PropertyName.inGroundwater:
                                                        case Soil.PropertyName.impenetrable:
                                                            <MudSwitch @bind-Value=prop.BValue Label=@prop.BValue?.ToString() />
                                                            break;
                                                        case Soil.PropertyName.soilType:
                                                            <MudButton @onclick="@(e => OpenKA5SoilTypeDialog(prop))"
                                                                    Variant=@Variant.Outlined>
                                                                @prop.Type
                                                            </MudButton>
                                                            break;
                                                        default:
                                                            <MudTextField T=@String
                                                                        Value=@GetSoilPropertyValue(prop)
                                                                        ValueChanged=@(v => SetSoilPropertyValue(prop, v))
                                                                        Required />
                                                            break;
                                                    }
                                                }
                                            </td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }
                                    <td>
                                        <MudFab StartIcon=@Icons.Material.Filled.ArrowUpward
                                                Size=@Size.Small
                                                Disabled=@(i == 0)
                                                OnClick=@(() => {
                                                        ProfileLayers.Remove(layer);
                                                        ProfileLayers.Insert(Math.Max(0, i - 1), layer);
                                                        StateHasChanged();
                                                        }) />
                                        <MudFab StartIcon=@Icons.Material.Filled.ArrowDownward
                                                Size=@Size.Small
                                                Disabled=@(i == ProfileLayers.Count() - 1)
                                                OnClick=@(() => {
                                                        ProfileLayers.Remove(layer);
                                                        ProfileLayers.Insert(Math.Min(i + 1, ProfileLayers.Count()), layer);
                                                        StateHasChanged();
                                                        }) />
                                        <MudFab StartIcon=@Icons.Material.Filled.Add
                                                Size=@Size.Small
                                                Color=@Color.Success
                                                OnClick=@(() => {
                                                            ProfileLayers.Insert(Math.Min(i + 1, ProfileLayers.Count()), new Soil.Layer() { 
                                                                Properties = layer.Properties.Select(p => new Soil.Layer.Property() { 
                                                                    Name = p.Name, 
                                                                    which = p.which 
                                                                }).ToList(), 
                                                                Size = 0 
                                                            });
                                                            StateHasChanged();
                                                        }) />
                                        <MudFab StartIcon=@Icons.Material.Filled.Delete
                                                Disabled=@(ProfileLayers.Count() < 2)
                                                Size=@Size.Small
                                                Color=@Color.Error
                                                OnClick=@(() => { ProfileLayers.Remove(layer); StateHasChanged(); }) />
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </MudTabPanel>
            }
        </MudTabs>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public bool AutoLoad { get; set; } = false;

    [Parameter]
    public Soil.IService? SoilServiceCap { get; set; }

    private bool soilServiceCapUpdated = false;

    [Parameter]
    public EventCallback<Soil.IService> SoilServiceCapChanged { get; set; }

    private String soilServiceSturdyRef = "";

    [Parameter]
    public List<Soil.Layer> SelectedLayers { get; set; } = new();
    [Parameter]
    public EventCallback<List<Soil.Layer>> SelectedLayersChanged { get; set; }

    private int selectedProfileIndex = 0;
    private int SelectedProfileIndex { 
        get => selectedProfileIndex;
        set {
            selectedProfileIndex = value;
            if (Profiles.Count > value) SelectedLayers = Profiles[value].Item3;
        }
    }

    [Parameter]
    public List<(string, Soil.ProfileData, List<Soil.Layer>)> Profiles { get; set; } = new();
    [Parameter]
    public EventCallback<List<(string, Soil.ProfileData, List<Soil.Layer>)>> ProfilesChanged { get; set; }

    #region mandatory soil properties
    private IEnumerable<Soil.PropertyName>? availableMandatorySoilProps;
    private IReadOnlyCollection<object>? selectedMandatorySoilPropertiesAsObject;
    public IReadOnlyCollection<object> SelectedMandatorySoilProperties
    {
        get => selectedMandatorySoilPropertiesAsObject ?? (availableMandatorySoilProps 
                                                           ?? new List<Soil.PropertyName>()).Select(
                                                               e => e as object).ToList();
        set { 
            selectedMandatorySoilPropertiesAsObject = value; 
            if (AutoLoad) _ = GetSoilProfiles();
        }
    }
    private IEnumerable<Soil.PropertyName> selectedMandatorySoilProperties
    {
        get => SelectedMandatorySoilProperties.Select(e => (Soil.PropertyName)e);
    }
    #endregion

    #region optional soil properties
    private IEnumerable<Soil.PropertyName>? availableOptionalSoilProps;
    private IReadOnlyCollection<object>? selectedOptionalSoilPropertiesAsObject;
    public IReadOnlyCollection<object> SelectedOptionalSoilProperties
    {
        get => selectedOptionalSoilPropertiesAsObject 
               ?? (availableOptionalSoilProps ?? new List<Soil.PropertyName>()) as IReadOnlyCollection<object>;
        set { 
            selectedOptionalSoilPropertiesAsObject = value; 
            if (AutoLoad) _ = GetSoilProfiles();
        }
    }
    private IEnumerable<Soil.PropertyName> selectedOptionalSoilProperties
    {
        get => SelectedOptionalSoilProperties.Select(e => (Soil.PropertyName)e);
    }    
    #endregion

    [Parameter]
    public bool AllowLocalSoilPropertiesEditing { get; set; } = true;

    [Parameter]
    public HashSet<String> DefaultSelectedSoilProperties { get; set; } = new HashSet<String>() { "sand", "clay", "soilType", "bulkDensity", "organicCarbon" };

    private ConnectToSturdyRef<Soil.IService>? sturdyRefConnector;
    //private ConnectToSturdyRefL<Soil.IService> sturdyRefConnectorL;

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    (double, double) latLng = (52.52, 14.11);
    [Parameter]
    public (double, double) LatLng { 
        get => latLng; 
        set {
            latLng = value;
            if (AutoLoad) _ = GetSoilProfiles();
        } 
    }

    [Parameter]
    public bool HideGeoPosPicker { get; set; } = false;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        soilServiceCapUpdated = parameters.GetValueOrDefault<Soil.IService?>("SoilServiceCap", null) != SoilServiceCap;
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (soilServiceCapUpdated)
        {
            await GetAllAvailableSoilProperties();
        }
    }

    private async Task SoilServiceCapabilityChanged(Soil.IService? service)
    {
        if (service == null) return;

        if (SoilServiceCap != service) SoilServiceCap?.Dispose();
        SoilServiceCap = service;

        if (SoilServiceCapChanged.HasDelegate) _ = SoilServiceCapChanged.InvokeAsync(Capnp.Rpc.Proxy.Share(SoilServiceCap));

        Console.WriteLine("SoilService.SoilServiceCapabilityChanged: ThreadId: " + Thread.CurrentThread.ManagedThreadId);

        await GetAllAvailableSoilProperties();
        
        //_ = Task.Delay(200).ContinueWith(_ => GetAllAvailableSoilProperties());
        //_ = InvokeAsync(GetAllAvailableSoilProperties);
    }

    public async Task GetAllAvailableSoilProperties()
    {
        if (SoilServiceCap == null) return;

        Console.WriteLine("SoilService.GetAllAvailableSoilProperties: ThreadId: " + Thread.CurrentThread.ManagedThreadId);

        try
        {
            Console.WriteLine("before GetAllAvailableParameters");
            var (mps, ops) = await SoilServiceCap.GetAllAvailableParameters(false);
            Console.WriteLine("after GetAllAvailableParameters");
            availableMandatorySoilProps = mps;
            availableOptionalSoilProps = ops;
            StateHasChanged();

            if (AutoLoad) _ = GetSoilProfiles();
        }
        catch (Capnp.Rpc.RpcException e)
        {
            Console.WriteLine(e.Message);
            //await sturdyRefConnector?.Reconnect();
        }
    }

    private string GetSoilPropertyValue(Soil.Layer.Property p)
    {
        switch (p.which)
        {
            case Soil.Layer.Property.WHICH.BValue: return (p.BValue ?? false) ? "true" : "false";
            case Soil.Layer.Property.WHICH.F32Value: return p.F32Value?.ToString() ?? "0";
            case Soil.Layer.Property.WHICH.Type: return p.Type;
            case Soil.Layer.Property.WHICH.undefined:
            default: return "";
        }
    }

    private void SetSoilPropertyValue(Soil.Layer.Property p, string value)
    {
        switch (p.which)
        {
            case Soil.Layer.Property.WHICH.BValue: p.BValue = bool.Parse(value); break;
            case Soil.Layer.Property.WHICH.F32Value: p.F32Value = float.Parse(value); break;
            //case Soil.Layer.Property.WHICH.Type: p.Type;
            case Soil.Layer.Property.WHICH.undefined:
            default: return;
        }
    }

    private async Task GetSoilProfiles()
    {
        if (SoilServiceCap == null) return;

        try
        {
            var profiles = await SoilServiceCap.ClosestProfilesAt(
                new Geo.LatLonCoord { Lat = LatLng.Item1, Lon = LatLng.Item2 },
                new Soil.Query
                {
                    Mandatory = selectedMandatorySoilProperties.ToArray(),
                    Optional = selectedOptionalSoilProperties.ToArray(),
                    OnlyRawData = false
                }
            );

            if (profiles?.Count > 0)
            {
                Profiles.Clear();
                foreach(var profile in profiles)
                {
                    var pd = await profile.Data();
                    var info = await profile.Info();
                    if (pd == null) continue;
                    List<Soil.Layer> layers = pd.Layers.ToList();
                    Profiles.Add((info.Id, pd, layers));
                }
                
                if (ProfilesChanged.HasDelegate) _ = ProfilesChanged.InvokeAsync(Profiles);
                StateHasChanged();
            }
        }
        catch (Capnp.Rpc.RpcException e)
        {
            Console.WriteLine(e.Message);
            //await sturdyRefConnector?.Reconnect();
        }
    }

    private async void OpenKA5SoilTypeDialog(Soil.Layer.Property prop)
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraLarge, FullWidth = true };
        var res = await DialogService.Show<KA5SoilTypeTriangleDialog>
            ("Select soil type", options).Result;
        if (res.Data is KA5SoilTypeTriangleDialog.Result r) prop.Type = r.SoilTextureName;
        StateHasChanged();
        if (ProfilesChanged.HasDelegate) _ = ProfilesChanged.InvokeAsync(Profiles);
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized SoilService SR: " + soilServiceSturdyRef);
    }

    void IDisposable.Dispose()
    {
        Console.WriteLine("Disposing SoilService SR: " + soilServiceSturdyRef + " cap: " + SoilServiceCap);
        SoilServiceCap?.Dispose();
    }
}
