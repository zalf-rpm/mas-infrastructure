@namespace Mas.Infrastructure.BlazorComponents

@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<GoogleMap @ref=map
           Id="map1"
           Options=@mapOptions
           Height=@Height
           OnAfterInit=@OnAfterInitAsync>
</GoogleMap>

@code {

    [Parameter]
    public String Width { get; set; }

    [Parameter]
    public String Height { get; set; }

    [Parameter]
    public (double, double) CenterLatLng { get; set; } = (0.0, 0.0);

    [Parameter]
    public (double, double) LatLng { get; set; } = (0.0, 0.0);

    [Parameter]
    public EventCallback<(double, double)> LatLngChanged { get; set; }

    [Parameter]
    public int Zoom { get; set; } = 6;

    private GoogleMap map;
    private MapOptions mapOptions;
    private Marker currentMarker;

    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
        {
            Zoom = Zoom,
            Center = new LatLngLiteral()
            {
                Lat = CenterLatLng.Item1,
                Lng = CenterLatLng.Item2
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterInitAsync()
    {
        //Debug.WriteLine("Start OnAfterRenderAsync");

        await map.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
        await SetMarker(CenterLatLng.Item1, CenterLatLng.Item2);

        //await map1.InteropObject.AddListener("bounds_changed", OnBoundsChanged);

        //await map1.InteropObject.AddListener("center_changed", OnCenterChanged);

        //await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));

        //await map1.InteropObject.AddListener("dblclick", OnDoubleClick);

        //await map1.InteropObject.AddListener("drag", OnDrag);

        //await map1.InteropObject.AddListener("dragend", OnDragEnd);

        //await map1.InteropObject.AddListener("dragstart", OnDragStart);

        //await map1.InteropObject.AddListener("heading_changed", OnHeadingChanged);

        //await map1.InteropObject.AddListener("idle", OnIdle);

        //await map1.InteropObject.AddListener("maptypeid_changed", OnMapTypeIdChanged);

        //await map1.InteropObject.AddListener<MouseEvent>("mousemove", OnMouseMove);
        //await map1.InteropObject.AddListener<MouseEvent>("mousedown", OnMouseMove);

        //await map1.InteropObject.AddListener("mouseout", OnMouseOut);

        //await map1.InteropObject.AddListener("mouseover", OnMouseOver);

        //await map1.InteropObject.AddListener("projection_changed", OnProjectionChanged);

        //await map1.InteropObject.AddListener("rightclick", OnRightClick);

        //await map1.InteropObject.AddListener("tilesloaded", OnTilesLoaded);

        //await map1.InteropObject.AddListener("tilt_changed", OnTiltChanged);

        //await map1.InteropObject.AddListener("zoom_changed", OnZoomChanged);

    }

    private async Task SetMarker(double lat, double lng)
    {
        currentMarker?.SetMap(null);
        currentMarker = await Marker.CreateAsync(map.JsRuntime, new MarkerOptions()
        {
            Position = new LatLngLiteral(lng, lat),
            Map = map.InteropObject,
            //Label = $"Test",
            //Animation = Animation.Bounce
            //Icon = new Icon()
            //{
            //    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            //}
            //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
        });
    }

    private async Task OnClick(MouseEvent e)
    {
        LatLng = (e.LatLng.Lat, e.LatLng.Lng);
        if (LatLngChanged.HasDelegate) _ = LatLngChanged.InvokeAsync(LatLng);
        await SetMarker(LatLng.Item1, LatLng.Item2);
    }
}