@namespace Mas.Infrastructure.BlazorComponents

@using System.Diagnostics
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

@inject IJSRuntime JsRuntime

<GoogleMap @ref="_map"
           Options="@_mapOptions"
           Height="@Height"
           OnAfterInit="@OnAfterInitAsync">
</GoogleMap>

@code {
    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public string Height { get; set; } = "100%";

    [Parameter]
    public (double, double) CenterLatLng { get; set; } = (0.0, 0.0);

    [Parameter]
    public (double, double) LatLng { get; set; } = (0.0, 0.0);

    [Parameter]
    public EventCallback<(double, double)> LatLngChanged { get; set; }

    [Parameter]
    public int Zoom { get; set; } = 6;


    //[Inject]
    //public IBlazorGoogleMapsKeyService? KeyService { get; set; }

    private GoogleMap? _map;
    private MapOptions? _mapOptions;
    private Marker? _currentMarker;

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions()
        {
            Zoom = Zoom,
            Center = new LatLngLiteral()
            {
                Lat = CenterLatLng.Item1,
                Lng = CenterLatLng.Item2
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterInitAsync()
    {
        //Debug.WriteLine("Start OnAfterRenderAsync");

        if(_map != null) await _map.InteropObject.AddListener<MouseEvent>("click", async e => await OnClick(e));
        await SetMarker(CenterLatLng.Item1, CenterLatLng.Item2);

        //await map1.InteropObject.AddListener("bounds_changed", OnBoundsChanged);

        //await map1.InteropObject.AddListener("center_changed", OnCenterChanged);

        //await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));

        //await map1.InteropObject.AddListener("dblclick", OnDoubleClick);

        //await map1.InteropObject.AddListener("drag", OnDrag);

        //await map1.InteropObject.AddListener("dragend", OnDragEnd);

        //await map1.InteropObject.AddListener("dragstart", OnDragStart);

        //await map1.InteropObject.AddListener("heading_changed", OnHeadingChanged);

        //await map1.InteropObject.AddListener("idle", OnIdle);

        //await map1.InteropObject.AddListener("maptypeid_changed", OnMapTypeIdChanged);

        //await map1.InteropObject.AddListener<MouseEvent>("mousemove", OnMouseMove);
        //await map1.InteropObject.AddListener<MouseEvent>("mousedown", OnMouseMove);

        //await map1.InteropObject.AddListener("mouseout", OnMouseOut);

        //await map1.InteropObject.AddListener("mouseover", OnMouseOver);

        //await map1.InteropObject.AddListener("projection_changed", OnProjectionChanged);

        //await map1.InteropObject.AddListener("rightclick", OnRightClick);

        //await map1.InteropObject.AddListener("tilesloaded", OnTilesLoaded);

        //await map1.InteropObject.AddListener("tilt_changed", OnTiltChanged);

        //await map1.InteropObject.AddListener("zoom_changed", OnZoomChanged);

    }

    private async Task SetMarker(double lat, double lng)
    {
        //Console.WriteLine($"GeoposPicker::SetMarker: lat: {lat} lon: {lng}");
        if (_currentMarker != null) await _currentMarker.SetPosition(new LatLngLiteral(lng, lat));
        else
        {
            //_currentMarker?.SetMap(null);
            //Console.WriteLine("GeoposPicker::SetMarker: _map?.InteropObject ...");
            _currentMarker = await Marker.CreateAsync(JsRuntime, new MarkerOptions()
            {
                Position = new LatLngLiteral(lng, lat),
                Map = _map?.InteropObject,
                //Label = $"Test",
                //Animation = Animation.Bounce
                //Icon = new Icon()
                //{
                //    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                //}
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            });
        }
    }

    private async Task OnClick(GoogleMapsComponents.Maps.MouseEvent e)
    {
        LatLng = (e.LatLng.Lat, e.LatLng.Lng);
        if (LatLngChanged.HasDelegate) _ = LatLngChanged.InvokeAsync(LatLng);
        await SetMarker(LatLng.Item1, LatLng.Item2);
    }
}