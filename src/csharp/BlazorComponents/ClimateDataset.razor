@namespace Mas.Infrastructure.BlazorComponents

@using Climate = Mas.Schema.Climate
@using Geo = Mas.Schema.Geo
@using MudBlazor

@implements IDisposable

@*CapabilityChanged=@CapabilityChanged*@
<MudGrid>
    <MudItem xs="12" Class=@(HideSturdyRefConnector ? "d-none" : "")>
        <ConnectToSturdyRef Label="Persistent capability to climate dataset"
                            @bind-Capability=@DatasetCap
                            TCapnpInterface=Climate.IDataset/>
    </MudItem>
    <MudItem xs="2" Class=@(HideGeoPosPicker ? "d-none" : "")>
        <MudText Typo=Typo.h5>Pick Geolocation - picked: @($"({Math.Round(LatLng.Item1, 2)}N/{Math.Round(LatLng.Item2, 2)}E)")</MudText>
    </MudItem>
    <MudItem xs="12" Class=@(HideGeoPosPicker ? "d-none" : "")>
        <GeoposPicker LatLng=@LatLng
                      LatLngChanged=@(async latLng => { LatLng = latLng; await SetClosestTimeSeries(); })
                      Width="100%" Height="400px"
                      CenterLatLng=@LatLng/>
    </MudItem>
    <MudItem xs="12">
        <ClimateTimeSeries TimeSeriesCap=@TimeSeriesCap HideSturdyRefConnector=@true/>
    </MudItem>
</MudGrid>

@code {
    private bool datasetCapUpdated = false;

    private Climate.IDataset? datasetCap;
    [Parameter]
    public Climate.IDataset? DatasetCap { 
        get => datasetCap;
        set { 
            if (datasetCap != value) 
            {
                Console.WriteLine("DatasetCap.Setter");
                datasetCap?.Dispose();
                datasetCap = value; 
                if (DatasetCapChanged.HasDelegate) _ = DatasetCapChanged.InvokeAsync(Capnp.Rpc.Proxy.Share(DatasetCap));
                _= SetClosestTimeSeries();
            }
        }
    }
    [Parameter]
    public EventCallback<Climate.IDataset> DatasetCapChanged { get; set; }

    [CascadingParameter(Name = "TimeSeriesCapChanged")]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    [CascadingParameter(Name = "HideGeoPosPicker")]
    public bool HideGeoPosPicker { get; set; } = false;

    [CascadingParameter(Name = "LatLng")]
    public (double, double) LatLng { get; set; } = (52.52, 14.11);

    private Climate.ITimeSeries? timeSeries;

    private Climate.ITimeSeries? TimeSeriesCap; 
    
    @* public override async Task SetParametersAsync(ParameterView parameters)
    {
        datasetCapUpdated = parameters.GetValueOrDefault<Climate.IDataset?>("DatasetCap", null) != DatasetCap;
        await base.SetParametersAsync(parameters);
    } *@

    @* protected override async Task OnParametersSetAsync()
    {
        if (datasetCapUpdated) await SetClosestTimeSeries();
    } *@

    private async Task CapabilityChanged(Climate.IDataset dataset)
    {
        if (dataset == null) return;

        if (DatasetCap != dataset) DatasetCap?.Dispose();
        DatasetCap = dataset;
        if (DatasetCapChanged.HasDelegate) _ = DatasetCapChanged.InvokeAsync(DatasetCap);

        await SetClosestTimeSeries();
    }

    private async Task SetClosestTimeSeries()
    {
        Console.WriteLine("SetClosestTimeSeries");
        if (DatasetCap == null) return;

        var ts = await DatasetCap.ClosestTimeSeriesAt(new Geo.LatLonCoord { Lat = LatLng.Item1, Lon = LatLng.Item2 });

        if (timeSeries != ts) timeSeries?.Dispose();
        timeSeries = ts;
        TimeSeriesCap = Capnp.Rpc.Proxy.Share(timeSeries); 

        if (TimeSeriesCapChanged.HasDelegate) _ = TimeSeriesCapChanged.InvokeAsync(Capnp.Rpc.Proxy.Share(timeSeries));

        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        DatasetCap?.Dispose();
        timeSeries?.Dispose();
    }
}
