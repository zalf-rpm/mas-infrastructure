@page "/climate/timeseries"

@using System.Text;
@using Capnp.Rpc
@using Mas.Infrastructure.Common
@using Mas.Rpc

@inject IJSRuntime jsRuntime

@implements IDisposable

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to climate timeseries (capnp://host:port/token)"
                            CapabilityChanged=@CapabilityChanged
                            TCapnpInterface=Climate.ITimeSeries>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem Class="d-flex flex-row py-2 px-1" xs="12">
        <MudDateRangePicker Class="pa-2 mx-2" Label="Date range" Editable=@true DateRangeChanged=@DateRangeChanged DateRange=@range />
        <MudButton Class="pa-2 mx-2" Variant=Variant.Filled Color=Color.Primary OnClick=@LoadTimeSeriesData>Load data</MudButton>
        <MudButton Class="pa-2 mx-2" Disabled=@(csvString.Length == 0) Variant=Variant.Filled Color=Color.Primary OnClick=@SaveTimeSeries>Save data</MudButton>
        <MudButton Class="pa-2 mx-2" Variant=Variant.Filled Color=Color.Primary OnClick=@RestoreInitialTimeSeriesCap>Restore initial time series</MudButton>
    </MudItem>
    <MudItem xs="12">
        <MudTabs Elevation="2" Rounded=@true ApplyEffectsToContainer=@true>
            <MudTabPanel Text="Table">
                <MudTable Items=@data Hover=@true Dense=@true Filter=@(new Func<Element,bool>(DataFilterFunc))>
                    <ToolBarContent>
                        <MudText Typo=Typo.h6>Timeseries Data</MudText>
                        <MudToolBarSpacer />
                        <MudTextField @bind-Value=searchString Placeholder="Search" Adornment=Adornment.Start AdornmentIcon=@Icons.Material.Filled.Search IconSize=Size.Medium Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Date</MudTh>
                        @foreach (var h in headings)
                        {
                            <MudTh>@h</MudTh>
                        }
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                        @foreach (var (val, i) in headings.Select((Value, Index) => (Value, Index)))
                        {
                            <MudTd DataLabel=@val>@context.Data[i]</MudTd>
                        }
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Graph">
                <MudChart ChartType=@MudBlazor.ChartType.Line ChartSeries=@Series XAxisLabels=@XAxisLabels Width="650" Height="350"></MudChart>
            </MudTabPanel>
            <MudTabPanel Text="Highcharts">
                <Highchart></Highchart>
            </MudTabPanel>
        </MudTabs>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Climate.ITimeSeries TimeSeriesCap { get; set; }
    private Climate.ITimeSeries originalTimeSeriesCap;
    private bool timeSeriesCapUpdated = false;

    private bool componentIsTimeSeriesCapOwner = false;

    [Parameter]
    public EventCallback<Climate.ITimeSeries> TimeSeriesCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    private DateTime start, end;
    private DateRange range;

    private struct Element
    {
        public DateTime Date;
        public IReadOnlyList<float> Data;
    }
    private String csvString = "";

    private IList<String> headings = new List<String>();
    private IEnumerable<Element> data = new List<Element>();
    private String searchString;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        timeSeriesCapUpdated = parameters.GetValueOrDefault<Climate.ITimeSeries>("TimeSeriesCap", null) == TimeSeriesCap;
        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (timeSeriesCapUpdated)
        {
            originalTimeSeriesCap = TimeSeriesCap; //save unrestricted cap
            await TimeSeriesUpdated();
        }
    }

    private async Task CapabilityChanged(Climate.ITimeSeries ts)
    {
        if (ts == null) return;

        if (TimeSeriesCap != ts && componentIsTimeSeriesCapOwner) TimeSeriesCap?.Dispose(); //free old cap
        TimeSeriesCap = ts;
        originalTimeSeriesCap = TimeSeriesCap; //save unrestricted cap
        componentIsTimeSeriesCapOwner = true;

        await TimeSeriesUpdated();
    }

    private async Task RestoreInitialTimeSeriesCap()
    {
        if (originalTimeSeriesCap == null) return;
        if (originalTimeSeriesCap != TimeSeriesCap) TimeSeriesCap?.Dispose();
        TimeSeriesCap = originalTimeSeriesCap;
        await TimeSeriesUpdated();
    }

    private async Task TimeSeriesUpdated()
    {
        if (TimeSeriesCap == null) return;

        var (s, e) = await TimeSeriesCap.Range();
        var h = await TimeSeriesCap.Header();

        //var (s, e) = se.Result;
        start = CommonDate2DateTime(s);
        end = CommonDate2DateTime(e);
        range = new DateRange(start, end);

        headings = h.Select(h => h.ToString()).ToList();
    }

    private DateTime CommonDate2DateTime(Common.Date d)
    {
        return new DateTime(d.Year, d.Month, d.Day);
    }

    private Common.Date DateTime2CommonDate(DateTime d)
    {
        return new Common.Date { Year = (short)d.Year, Month = (byte)d.Month, Day = (byte)d.Day };
    }

    private async Task DateRangeChanged(DateRange r)
    {
        if (r == null) return;
        range = r;

        start = r.Start ?? start;
        end = r.End ?? end;

        var sts = await TimeSeriesCap.Subrange(DateTime2CommonDate(start), DateTime2CommonDate(end));
        //dispose the current time series cap, unless it's the initial one
        if (TimeSeriesCap != originalTimeSeriesCap) TimeSeriesCap?.Dispose();
        TimeSeriesCap = sts;
    }

    private async Task LoadTimeSeriesData()
    {
        if (TimeSeriesCap == null) return;

        var ds = await TimeSeriesCap.Data();
        data = ds.Select((d, i) => new Element { Date = start.AddDays(i), Data = d });

        /*
        var chartData = new Tuple<String, double[]>[7];
        foreach (var (d, i) in ds.Select((d, i) => (d, i)))
        {
            var vals = new double[]
            foreach (var (n, k) in headings.Select((n, k) => (n, k)))
            {
                chartData[k] = (n, .Item1 = n;
                chartData, i] = d[k];
            }
        }

        Series = new List<ChartSeries>();
        foreach (var (n, k) in headings.Select((n, k) => (n, k)))
        {
            Series.Add(new ChartSeries { Name = n, Data = chartData[k] });
        }



        {
            new ChartSeries() { Name = "Serie 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Serie 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
        */


        //create csv file
        var sb = new StringBuilder();
        sb.Append("iso-date,");
        sb.Append(headings.Aggregate((a, e) => a + "," + e.ToString()));
        sb.Append("\n");

        var ci = new System.Globalization.CultureInfo("en-US");
        foreach (var el in data)
        {
            sb.Append(el.Date.ToString("yyyy-MM-dd"));
            sb.Append(",");
            sb.Append(el.Data.Select(e => e.ToString(ci)).Aggregate((a, e) => a + "," + e));
            sb.Append("\n");
        }

        csvString = sb.ToString();
    }

    public List<ChartSeries> Series = new List<ChartSeries>()
{
        new ChartSeries() { Name = "Serie 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70 } },
        new ChartSeries() { Name = "Serie 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };

    private bool DataFilterFunc(Element elem)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (elem.Date.ToShortDateString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;
        //if ($"{element.Number} {element.Position} {element.Molar}".Contains(searchString))
        //    return true;
        return false;
    }

    private async Task SaveTimeSeries()
    {
        await jsRuntime.InvokeVoidAsync("saveAsBase64", "data.csv", Convert.ToBase64String(Encoding.UTF8.GetBytes(csvString)));
    }

    public void Dispose()
    {
        //dispose the current time series cap if it's not the same as the initial one
        if (originalTimeSeriesCap != TimeSeriesCap)
        {
            TimeSeriesCap?.Dispose();

            //free the original cap if we are the owner
            if (componentIsTimeSeriesCapOwner) originalTimeSeriesCap?.Dispose();
        }
    }

}
