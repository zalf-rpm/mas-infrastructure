@page "/climate/service"

@using System.Text;

@using MudBlazor

@using Mas.Rpc
@using Mas.Infrastructure.BlazorComponents 

@inject IJSRuntime JSRuntime;

@implements IDisposable

<MudGrid>
    <MudItem Class=@(HideSturdyRefConnector ? "d-none" : "") xs="12">
        <ConnectToSturdyRef Label="Persistent capability to climate service (capnp://host:port/token)"
                            CapabilityChanged=@CapabilityChanged
                            TCapnpInterface=Climate.IService>
        </ConnectToSturdyRef>
    </MudItem>
    <MudItem xs="12">
        <MudTable T="ValueTuple<IEnumerable<Common.IdInformation>, Climate.IDataset>"
                  FixedHeader=@true
                  Height=@(metaAndData.Count() == 0 ? "" : "400px")
                  Items=@metaAndData
                  Hover=@true
                  Dense=@true
                  Filter=@(new Func<(IEnumerable<Common.IdInformation>, Climate.IDataset), bool>(DataFilterFunc))
                  SelectedItemChanged=@(t => selectedDataset = t.Item2)>
            <ToolBarContent>
                <MudText Typo=Typo.h6>Datasets</MudText>
                <MudToolBarSpacer />
                <MudTextField @bind-Value=searchString Placeholder="Search" Adornment=Adornment.Start AdornmentIcon=@Icons.Material.Filled.Search IconSize=Size.Medium Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                @foreach (var h in metaHeadings)
                {
                    <MudTh>@h</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                @foreach (var (m, i) in context.Item1.Select((m, i) => (m, i)))
                {
                    <MudTd DataLabel=@metaHeadings[i]>@m.Name</MudTd>
                }
            </RowTemplate>
        </MudTable>
    </MudItem>
    <MudItem xs="12">
        <ClimateDataset DatasetCap=@selectedDataset HideSturdyRefConnector=@true></ClimateDataset>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public Climate.IService ClimateServiceCap { get; set; }

    private bool componentIsClimateServiceCapOwner = false;

    [Parameter]
    public EventCallback<Climate.IService> ClimateServiceCapChanged { get; set; }

    [Parameter]
    public bool HideSturdyRefConnector { get; set; } = false;

    private String searchString = "";

    //private Dictionary<String, Climate.IDataset> meta2data = new Dictionary<string, Climate.IDataset>();
    private String[] metaHeadings = new String[0];
    private IEnumerable<(IEnumerable<Common.IdInformation>, Climate.IDataset)> metaAndData = new List<(IEnumerable<Common.IdInformation>, Climate.IDataset)>();
    private Climate.IDataset selectedDataset;

    public String EntryToString(Climate.Metadata.Entry entry)
    {
        switch (entry.which)
        {
            case Climate.Metadata.Entry.WHICH.Co2: return "CO2";
            case Climate.Metadata.Entry.WHICH.Description: return "Description";
            case Climate.Metadata.Entry.WHICH.Start: return "Start";
            case Climate.Metadata.Entry.WHICH.End: return "End";
            case Climate.Metadata.Entry.WHICH.EnsMem: return "EnsembleMember";
            case Climate.Metadata.Entry.WHICH.Gcm: return "GCM";
            case Climate.Metadata.Entry.WHICH.Rcm: return "RCM";
            case Climate.Metadata.Entry.WHICH.Rcp: return "RCP";
            case Climate.Metadata.Entry.WHICH.Ssp: return "SSP";
            case Climate.Metadata.Entry.WHICH.Version: return "Version";
            case Climate.Metadata.Entry.WHICH.Historical: return "Historical";
            case Climate.Metadata.Entry.WHICH.Picontrol: return "PiControl";
        }
        return "undef";
    }

    private async Task CapabilityChanged(Climate.IService service)
    {
        if (service == null) return;

        if (ClimateServiceCap != service && componentIsClimateServiceCapOwner) ClimateServiceCap?.Dispose();
        ClimateServiceCap = service;
        componentIsClimateServiceCapOwner = true;

        //dispose existing datasets
        foreach (var (_, ds) in metaAndData) ds?.Dispose();

        var metaAndDataL = new List<(IEnumerable<Common.IdInformation>, Climate.IDataset)>();

        var datasets = await ClimateServiceCap.GetAvailableDatasets();
        foreach (var ds in datasets)
        {
            var r = await ds.Meta.Info.ForAll();
            metaHeadings = r.Select(p => EntryToString(p.Fst)).ToArray();
            var e = r.Select(p => p.Snd);
            metaAndDataL.Add((r.Select(p => p.Snd), ds.Data));
        }
        metaAndData = metaAndDataL;
    }


    void IDisposable.Dispose()
    {
        if (componentIsClimateServiceCapOwner) ClimateServiceCap?.Dispose();
        foreach (var (_, ds) in metaAndData) ds?.Dispose();
    }

    private bool DataFilterFunc(ValueTuple<IEnumerable<Common.IdInformation>, Climate.IDataset> elem)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        foreach (var m in elem.Item1)
        {
            if (m.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        return false;
    }
}
