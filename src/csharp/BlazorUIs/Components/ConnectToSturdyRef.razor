@namespace BlazorUIs.Components
@using Capnp.Rpc
@inject Mas.Infrastructure.Common.ConnectionManager ConMan
@typeparam TCapnpInterface

<MudPaper Class="d-flex flex-row py-2 px-1">
    <MudButton Class="pa-2 mx-2" Variant=Variant.Filled EndIcon=@buttonEndIcon Color=@buttonColor OnClick=@Connect>@buttonLabel</MudButton>
    <MudTextField Class="pa-2 mx-2" @bind-Value=SturdyRef Label=@Label Variant=Variant.Outlined></MudTextField>
    <MudButton Class="pa-2 mx-2" Variant=Variant.Outlined Color=@Color.Primary OnClick=@RetrieveSturdyRef>Retrieve</MudButton>
</MudPaper>

@code {
    [Parameter]
    public String SturdyRef { get; set; }

    [Parameter]
    public EventCallback<String> SturdyRefChanged { get; set; }

    private String buttonEndIcon = Icons.Material.Filled.CastConnected;
    private Color buttonColor = Color.Primary;
    private String buttonLabel = "Connect";

    [Parameter]
    public TCapnpInterface Capability { get; set; }

    [Parameter]
    public EventCallback<TCapnpInterface> CapabilityChanged { get; set; }

    [Parameter]
    public String Label { get; set; } = "Persistent capability (capnp://host:port/token)";

    private async Task Connect()
    {
        try
        {
            buttonLabel = "Connecting ...";
            Capability = await ConMan.Connect<TCapnpInterface>(SturdyRef);
            buttonEndIcon = Icons.Material.Filled.CastConnected;
            buttonColor = Color.Success;
            buttonLabel = "Connected";
        }
        catch (Capnp.Rpc.RpcException)
        {
            buttonEndIcon = Icons.Material.Filled.Error;
            buttonColor = Color.Error;
            buttonLabel = "Connect failed";
        }

        await CapabilityChanged.InvokeAsync(Capability);
    }

    private void ClearButton()
    {
        buttonEndIcon = Icons.Material.Filled.CastConnected;
        buttonColor = Color.Primary;
        buttonLabel = "Connect";
    }

    private async Task RetrieveSturdyRef()
    {
        try
        {
            if (Capability is Proxy p) SturdyRef = (await p.Cast<Capnp.IPersistent<String, String>>(false)?.Save(null))?.SturdyRef;
        }
        catch (Capnp.Rpc.RpcException)
        {
        }

        await SturdyRefChanged.InvokeAsync(SturdyRef);
    }
}
