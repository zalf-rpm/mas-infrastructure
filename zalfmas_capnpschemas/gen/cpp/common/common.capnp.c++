// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: common.capnp

#include "common.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<64> b_d4cb7ecbfe03dad3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    211, 218,   3, 254, 203, 126, 203, 212,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 218,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100,  73,
    110, 102, 111, 114, 109,  97, 116, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
     88,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 101, 115,  99, 114, 105, 112, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d4cb7ecbfe03dad3 = b_d4cb7ecbfe03dad3.words;
#if !CAPNP_LITE
static const uint16_t m_d4cb7ecbfe03dad3[] = {2, 0, 1};
static const uint16_t i_d4cb7ecbfe03dad3[] = {0, 1, 2};
const ::capnp::_::RawSchema s_d4cb7ecbfe03dad3 = {
  0xd4cb7ecbfe03dad3, b_d4cb7ecbfe03dad3.words, 64, nullptr, m_d4cb7ecbfe03dad3,
  0, 3, i_d4cb7ecbfe03dad3, nullptr, nullptr, { &s_d4cb7ecbfe03dad3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<29> b_b2afd1cb599c48d5 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    213,  72, 156,  89, 203, 209, 175, 178,
     13,   0,   0,   0,   3,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 210,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  71,   0,   0,   0,
     69,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    177, 222,  73,  30, 207, 161, 138, 157,
    211, 218,   3, 254, 203, 126, 203, 212,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    105, 110, 102, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b2afd1cb599c48d5 = b_b2afd1cb599c48d5.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b2afd1cb599c48d5[] = {
  &s_9d8aa1cf1e49deb1,
  &s_d4cb7ecbfe03dad3,
};
static const uint16_t m_b2afd1cb599c48d5[] = {0};
const ::capnp::_::RawSchema s_b2afd1cb599c48d5 = {
  0xb2afd1cb599c48d5, b_b2afd1cb599c48d5.words, 29, d_b2afd1cb599c48d5, m_b2afd1cb599c48d5,
  2, 1, nullptr, nullptr, nullptr, { &s_b2afd1cb599c48d5, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<17> b_9d8aa1cf1e49deb1 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    177, 222,  73,  30, 207, 161, 138, 157,
     26,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  73, 100, 101,
    110, 116, 105, 102, 105,  97,  98, 108,
    101,  46, 105, 110, 102, 111,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_9d8aa1cf1e49deb1 = b_9d8aa1cf1e49deb1.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_9d8aa1cf1e49deb1 = {
  0x9d8aa1cf1e49deb1, b_9d8aa1cf1e49deb1.words, 17, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_9d8aa1cf1e49deb1, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_ed6c098b67cad454 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     84, 212, 202, 103, 139,   9, 108, 237,
     13,   0,   0,   0,   1,   0,   1,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 114,
    117,  99, 116, 117, 114, 101, 100,  84,
    101, 120, 116,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    204,  98, 194, 177,  82, 245, 203, 232,
     45,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116, 114, 117,  99, 116, 117, 114,
    101,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ed6c098b67cad454 = b_ed6c098b67cad454.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ed6c098b67cad454[] = {
  &s_e8cbf552b1c262cc,
};
static const uint16_t m_ed6c098b67cad454[] = {1, 0};
static const uint16_t i_ed6c098b67cad454[] = {0, 1};
const ::capnp::_::RawSchema s_ed6c098b67cad454 = {
  0xed6c098b67cad454, b_ed6c098b67cad454.words, 42, d_ed6c098b67cad454, m_ed6c098b67cad454,
  1, 2, i_ed6c098b67cad454, nullptr, nullptr, { &s_ed6c098b67cad454, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<63> b_e8cbf552b1c262cc = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    204,  98, 194, 177,  82, 245, 203, 232,
     28,   0,   0,   0,   1,   0,   1,   0,
     84, 212, 202, 103, 139,   9, 108, 237,
      1,   0,   7,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  83, 116, 114,
    117,  99, 116, 117, 114, 101, 100,  84,
    101, 120, 116,  46, 115, 116, 114, 117,
     99, 116, 117, 114, 101,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     68,   0,   0,   0,   3,   0,   1,   0,
     80,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     77,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
    110, 111, 110, 101,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    106, 115, 111, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    120, 109, 108,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e8cbf552b1c262cc = b_e8cbf552b1c262cc.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_e8cbf552b1c262cc[] = {
  &s_ed6c098b67cad454,
};
static const uint16_t m_e8cbf552b1c262cc[] = {1, 0, 2};
static const uint16_t i_e8cbf552b1c262cc[] = {0, 1, 2};
const ::capnp::_::RawSchema s_e8cbf552b1c262cc = {
  0xe8cbf552b1c262cc, b_e8cbf552b1c262cc.words, 63, d_e8cbf552b1c262cc, m_e8cbf552b1c262cc,
  1, 3, i_e8cbf552b1c262cc, nullptr, nullptr, { &s_e8cbf552b1c262cc, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<52> b_b9d4864725174733 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
     13,   0,   0,   0,   1,   0,   0,   0,
    201, 138, 168, 117, 167, 201, 241, 153,
      2,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   0,   0,
     21,   0,   0,   0, 146,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    141,   0,   0,   0,  23,   0,   0,   0,
     99, 111, 109, 109, 111, 110,  46,  99,
     97, 112, 110, 112,  58,  80,  97, 105,
    114,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    102, 115, 116,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 110, 100,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   1,   0,   0,   0,   0,   0,
     51,  71,  23,  37,  71, 134, 212, 185,
      0,   0,   0,   0,   0,   0,   0,   0,
     18,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   1,   0,
      5,   0,   0,   0,  18,   0,   0,   0,
      5,   0,   0,   0,  18,   0,   0,   0,
     70,   0,   0,   0,   0,   0,   0,   0,
     83,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b9d4864725174733 = b_b9d4864725174733.words;
#if !CAPNP_LITE
static const uint16_t m_b9d4864725174733[] = {0, 1};
static const uint16_t i_b9d4864725174733[] = {0, 1};
const ::capnp::_::RawSchema s_b9d4864725174733 = {
  0xb9d4864725174733, b_b9d4864725174733.words, 52, nullptr, m_b9d4864725174733,
  0, 2, i_b9d4864725174733, nullptr, nullptr, { &s_b9d4864725174733, nullptr, nullptr, 0, 0, nullptr }, true
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================

namespace mas {
namespace schema {
namespace common {

// IdInformation
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t IdInformation::_capnpPrivate::dataWordSize;
constexpr uint16_t IdInformation::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind IdInformation::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* IdInformation::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation>
Identifiable::Client::infoRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation>(
      0xb2afd1cb599c48d5ull, 0, sizeHint, {true});
}
::kj::Promise<void> Identifiable::Server::info(InfoContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "common.capnp:Identifiable", "info",
      0xb2afd1cb599c48d5ull, 0);
}
::capnp::Capability::Server::DispatchCallResult Identifiable::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb2afd1cb599c48d5ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("common.capnp:Identifiable", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult Identifiable::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        info(::capnp::Capability::Server::internalGetTypedContext<
             ::mas::schema::common::Identifiable::InfoParams,  ::mas::schema::common::IdInformation>(context)),
        false,
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "common.capnp:Identifiable",
          0xb2afd1cb599c48d5ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Identifiable
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Identifiable::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identifiable::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Identifiable::InfoParams
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Identifiable::InfoParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Identifiable::InfoParams::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Identifiable::InfoParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Identifiable::InfoParams::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StructuredText
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StructuredText::_capnpPrivate::dataWordSize;
constexpr uint16_t StructuredText::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StructuredText::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StructuredText::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// StructuredText::Structure
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t StructuredText::Structure::_capnpPrivate::dataWordSize;
constexpr uint16_t StructuredText::Structure::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind StructuredText::Structure::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StructuredText::Structure::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE


}  // namespace
}  // namespace
}  // namespace

