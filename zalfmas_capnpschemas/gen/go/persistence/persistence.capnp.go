// Code generated by capnpc-go. DO NOT EDIT.

package persistence

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	common "github.com/zalf-rpm/mas-infrastructure/capnproto_schemas/gen/go/common"
	strconv "strconv"
)

type VatId capnp.Struct

// VatId_TypeID is the unique identifier for the type VatId.
const VatId_TypeID = 0xe10a5d74d58bd18d

func NewVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId(st), err
}

func NewRootVatId(s *capnp.Segment) (VatId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0})
	return VatId(st), err
}

func ReadRootVatId(msg *capnp.Message) (VatId, error) {
	root, err := msg.Root()
	return VatId(root.Struct()), err
}

func (s VatId) String() string {
	str, _ := text.Marshal(0xe10a5d74d58bd18d, capnp.Struct(s))
	return str
}

func (s VatId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VatId) DecodeFromPtr(p capnp.Ptr) VatId {
	return VatId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VatId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VatId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VatId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VatId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VatId) PublicKey0() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s VatId) SetPublicKey0(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s VatId) PublicKey1() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s VatId) SetPublicKey1(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s VatId) PublicKey2() uint64 {
	return capnp.Struct(s).Uint64(16)
}

func (s VatId) SetPublicKey2(v uint64) {
	capnp.Struct(s).SetUint64(16, v)
}

func (s VatId) PublicKey3() uint64 {
	return capnp.Struct(s).Uint64(24)
}

func (s VatId) SetPublicKey3(v uint64) {
	capnp.Struct(s).SetUint64(24, v)
}

// VatId_List is a list of VatId.
type VatId_List = capnp.StructList[VatId]

// NewVatId creates a new list of VatId.
func NewVatId_List(s *capnp.Segment, sz int32) (VatId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 32, PointerCount: 0}, sz)
	return capnp.StructList[VatId](l), err
}

// VatId_Future is a wrapper for a VatId promised by a client call.
type VatId_Future struct{ *capnp.Future }

func (f VatId_Future) Struct() (VatId, error) {
	p, err := f.Future.Ptr()
	return VatId(p.Struct()), err
}

type Address capnp.Struct
type Address_ip6 Address
type Address_Which uint16

const (
	Address_Which_ip6  Address_Which = 0
	Address_Which_host Address_Which = 1
)

func (w Address_Which) String() string {
	const s = "ip6host"
	switch w {
	case Address_Which_ip6:
		return s[0:3]
	case Address_Which_host:
		return s[3:7]

	}
	return "Address_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Address_TypeID is the unique identifier for the type Address.
const Address_TypeID = 0xfb47810671a05b0d

func NewAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address(st), err
}

func NewRootAddress(s *capnp.Segment) (Address, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Address(st), err
}

func ReadRootAddress(msg *capnp.Message) (Address, error) {
	root, err := msg.Root()
	return Address(root.Struct()), err
}

func (s Address) String() string {
	str, _ := text.Marshal(0xfb47810671a05b0d, capnp.Struct(s))
	return str
}

func (s Address) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Address) DecodeFromPtr(p capnp.Ptr) Address {
	return Address(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Address) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s Address) Which() Address_Which {
	return Address_Which(capnp.Struct(s).Uint16(18))
}
func (s Address) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Address) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Address) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Address) Ip6() Address_ip6 { return Address_ip6(s) }

func (s Address) SetIp6() {
	capnp.Struct(s).SetUint16(18, 0)
}

func (s Address_ip6) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Address_ip6) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Address_ip6) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Address_ip6) Lower64() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Address_ip6) SetLower64(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Address_ip6) Upper64() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s Address_ip6) SetUpper64(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

func (s Address) Host() (string, error) {
	if capnp.Struct(s).Uint16(18) != 1 {
		panic("Which() != host")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Address) HasHost() bool {
	if capnp.Struct(s).Uint16(18) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s Address) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Address) SetHost(v string) error {
	capnp.Struct(s).SetUint16(18, 1)
	return capnp.Struct(s).SetText(0, v)
}

func (s Address) Port() uint16 {
	return capnp.Struct(s).Uint16(16)
}

func (s Address) SetPort(v uint16) {
	capnp.Struct(s).SetUint16(16, v)
}

// Address_List is a list of Address.
type Address_List = capnp.StructList[Address]

// NewAddress creates a new list of Address.
func NewAddress_List(s *capnp.Segment, sz int32) (Address_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return capnp.StructList[Address](l), err
}

// Address_Future is a wrapper for a Address promised by a client call.
type Address_Future struct{ *capnp.Future }

func (f Address_Future) Struct() (Address, error) {
	p, err := f.Future.Ptr()
	return Address(p.Struct()), err
}
func (p Address_Future) Ip6() Address_ip6_Future { return Address_ip6_Future{p.Future} }

// Address_ip6_Future is a wrapper for a Address_ip6 promised by a client call.
type Address_ip6_Future struct{ *capnp.Future }

func (f Address_ip6_Future) Struct() (Address_ip6, error) {
	p, err := f.Future.Ptr()
	return Address_ip6(p.Struct()), err
}

type VatPath capnp.Struct

// VatPath_TypeID is the unique identifier for the type VatPath.
const VatPath_TypeID = 0xd9eccdf2dbc48087

func NewVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath(st), err
}

func NewRootVatPath(s *capnp.Segment) (VatPath, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return VatPath(st), err
}

func ReadRootVatPath(msg *capnp.Message) (VatPath, error) {
	root, err := msg.Root()
	return VatPath(root.Struct()), err
}

func (s VatPath) String() string {
	str, _ := text.Marshal(0xd9eccdf2dbc48087, capnp.Struct(s))
	return str
}

func (s VatPath) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (VatPath) DecodeFromPtr(p capnp.Ptr) VatPath {
	return VatPath(capnp.Struct{}.DecodeFromPtr(p))
}

func (s VatPath) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s VatPath) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s VatPath) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s VatPath) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s VatPath) Id() (VatId, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return VatId(p.Struct()), err
}

func (s VatPath) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s VatPath) SetId(v VatId) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewId sets the id field to a newly
// allocated VatId struct, preferring placement in s's segment.
func (s VatPath) NewId() (VatId, error) {
	ss, err := NewVatId(capnp.Struct(s).Segment())
	if err != nil {
		return VatId{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s VatPath) Address() (Address, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Address(p.Struct()), err
}

func (s VatPath) HasAddress() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s VatPath) SetAddress(v Address) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewAddress sets the address field to a newly
// allocated Address struct, preferring placement in s's segment.
func (s VatPath) NewAddress() (Address, error) {
	ss, err := NewAddress(capnp.Struct(s).Segment())
	if err != nil {
		return Address{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// VatPath_List is a list of VatPath.
type VatPath_List = capnp.StructList[VatPath]

// NewVatPath creates a new list of VatPath.
func NewVatPath_List(s *capnp.Segment, sz int32) (VatPath_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[VatPath](l), err
}

// VatPath_Future is a wrapper for a VatPath promised by a client call.
type VatPath_Future struct{ *capnp.Future }

func (f VatPath_Future) Struct() (VatPath, error) {
	p, err := f.Future.Ptr()
	return VatPath(p.Struct()), err
}
func (p VatPath_Future) Id() VatId_Future {
	return VatId_Future{Future: p.Future.Field(0, nil)}
}
func (p VatPath_Future) Address() Address_Future {
	return Address_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef capnp.Struct

// SturdyRef_TypeID is the unique identifier for the type SturdyRef.
const SturdyRef_TypeID = 0x886d68271d83de4d

func NewSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef(st), err
}

func NewRootSturdyRef(s *capnp.Segment) (SturdyRef, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return SturdyRef(st), err
}

func ReadRootSturdyRef(msg *capnp.Message) (SturdyRef, error) {
	root, err := msg.Root()
	return SturdyRef(root.Struct()), err
}

func (s SturdyRef) String() string {
	str, _ := text.Marshal(0x886d68271d83de4d, capnp.Struct(s))
	return str
}

func (s SturdyRef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRef) DecodeFromPtr(p capnp.Ptr) SturdyRef {
	return SturdyRef(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRef) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRef) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRef) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRef) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRef) Vat() (VatPath, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return VatPath(p.Struct()), err
}

func (s SturdyRef) HasVat() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRef) SetVat(v VatPath) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewVat sets the vat field to a newly
// allocated VatPath struct, preferring placement in s's segment.
func (s SturdyRef) NewVat() (VatPath, error) {
	ss, err := NewVatPath(capnp.Struct(s).Segment())
	if err != nil {
		return VatPath{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s SturdyRef) LocalRef() (SturdyRef_Token, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SturdyRef_Token(p.Struct()), err
}

func (s SturdyRef) HasLocalRef() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRef) SetLocalRef(v SturdyRef_Token) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewLocalRef sets the localRef field to a newly
// allocated SturdyRef_Token struct, preferring placement in s's segment.
func (s SturdyRef) NewLocalRef() (SturdyRef_Token, error) {
	ss, err := NewSturdyRef_Token(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef_Token{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SturdyRef_List is a list of SturdyRef.
type SturdyRef_List = capnp.StructList[SturdyRef]

// NewSturdyRef creates a new list of SturdyRef.
func NewSturdyRef_List(s *capnp.Segment, sz int32) (SturdyRef_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[SturdyRef](l), err
}

// SturdyRef_Future is a wrapper for a SturdyRef promised by a client call.
type SturdyRef_Future struct{ *capnp.Future }

func (f SturdyRef_Future) Struct() (SturdyRef, error) {
	p, err := f.Future.Ptr()
	return SturdyRef(p.Struct()), err
}
func (p SturdyRef_Future) Vat() VatPath_Future {
	return VatPath_Future{Future: p.Future.Field(0, nil)}
}
func (p SturdyRef_Future) LocalRef() SturdyRef_Token_Future {
	return SturdyRef_Token_Future{Future: p.Future.Field(1, nil)}
}

type SturdyRef_Owner capnp.Struct

// SturdyRef_Owner_TypeID is the unique identifier for the type SturdyRef_Owner.
const SturdyRef_Owner_TypeID = 0xfdd799ed60c87723

func NewSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner(st), err
}

func NewRootSturdyRef_Owner(s *capnp.Segment) (SturdyRef_Owner, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SturdyRef_Owner(st), err
}

func ReadRootSturdyRef_Owner(msg *capnp.Message) (SturdyRef_Owner, error) {
	root, err := msg.Root()
	return SturdyRef_Owner(root.Struct()), err
}

func (s SturdyRef_Owner) String() string {
	str, _ := text.Marshal(0xfdd799ed60c87723, capnp.Struct(s))
	return str
}

func (s SturdyRef_Owner) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRef_Owner) DecodeFromPtr(p capnp.Ptr) SturdyRef_Owner {
	return SturdyRef_Owner(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRef_Owner) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRef_Owner) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRef_Owner) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRef_Owner) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRef_Owner) Guid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Owner) HasGuid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRef_Owner) GuidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Owner) SetGuid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SturdyRef_Owner_List is a list of SturdyRef_Owner.
type SturdyRef_Owner_List = capnp.StructList[SturdyRef_Owner]

// NewSturdyRef_Owner creates a new list of SturdyRef_Owner.
func NewSturdyRef_Owner_List(s *capnp.Segment, sz int32) (SturdyRef_Owner_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SturdyRef_Owner](l), err
}

// SturdyRef_Owner_Future is a wrapper for a SturdyRef_Owner promised by a client call.
type SturdyRef_Owner_Future struct{ *capnp.Future }

func (f SturdyRef_Owner_Future) Struct() (SturdyRef_Owner, error) {
	p, err := f.Future.Ptr()
	return SturdyRef_Owner(p.Struct()), err
}

type SturdyRef_Token capnp.Struct
type SturdyRef_Token_Which uint16

const (
	SturdyRef_Token_Which_text SturdyRef_Token_Which = 0
	SturdyRef_Token_Which_data SturdyRef_Token_Which = 1
)

func (w SturdyRef_Token_Which) String() string {
	const s = "textdata"
	switch w {
	case SturdyRef_Token_Which_text:
		return s[0:4]
	case SturdyRef_Token_Which_data:
		return s[4:8]

	}
	return "SturdyRef_Token_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SturdyRef_Token_TypeID is the unique identifier for the type SturdyRef_Token.
const SturdyRef_Token_TypeID = 0xfa412bb47f11b488

func NewSturdyRef_Token(s *capnp.Segment) (SturdyRef_Token, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef_Token(st), err
}

func NewRootSturdyRef_Token(s *capnp.Segment) (SturdyRef_Token, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SturdyRef_Token(st), err
}

func ReadRootSturdyRef_Token(msg *capnp.Message) (SturdyRef_Token, error) {
	root, err := msg.Root()
	return SturdyRef_Token(root.Struct()), err
}

func (s SturdyRef_Token) String() string {
	str, _ := text.Marshal(0xfa412bb47f11b488, capnp.Struct(s))
	return str
}

func (s SturdyRef_Token) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRef_Token) DecodeFromPtr(p capnp.Ptr) SturdyRef_Token {
	return SturdyRef_Token(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRef_Token) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}

func (s SturdyRef_Token) Which() SturdyRef_Token_Which {
	return SturdyRef_Token_Which(capnp.Struct(s).Uint16(0))
}
func (s SturdyRef_Token) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRef_Token) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRef_Token) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRef_Token) Text() (string, error) {
	if capnp.Struct(s).Uint16(0) != 0 {
		panic("Which() != text")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRef_Token) HasText() bool {
	if capnp.Struct(s).Uint16(0) != 0 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRef_Token) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRef_Token) SetText(v string) error {
	capnp.Struct(s).SetUint16(0, 0)
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRef_Token) Data() ([]byte, error) {
	if capnp.Struct(s).Uint16(0) != 1 {
		panic("Which() != data")
	}
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s SturdyRef_Token) HasData() bool {
	if capnp.Struct(s).Uint16(0) != 1 {
		return false
	}
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRef_Token) SetData(v []byte) error {
	capnp.Struct(s).SetUint16(0, 1)
	return capnp.Struct(s).SetData(0, v)
}

// SturdyRef_Token_List is a list of SturdyRef_Token.
type SturdyRef_Token_List = capnp.StructList[SturdyRef_Token]

// NewSturdyRef_Token creates a new list of SturdyRef_Token.
func NewSturdyRef_Token_List(s *capnp.Segment, sz int32) (SturdyRef_Token_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SturdyRef_Token](l), err
}

// SturdyRef_Token_Future is a wrapper for a SturdyRef_Token promised by a client call.
type SturdyRef_Token_Future struct{ *capnp.Future }

func (f SturdyRef_Token_Future) Struct() (SturdyRef_Token, error) {
	p, err := f.Future.Ptr()
	return SturdyRef_Token(p.Struct()), err
}

type Persistent capnp.Client

// Persistent_TypeID is the unique identifier for the type Persistent.
const Persistent_TypeID = 0xc1a7daa0dc36cb65

func (c Persistent) Save(ctx context.Context, params func(Persistent_SaveParams) error) (Persistent_SaveResults_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_SaveParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Persistent_SaveResults_Future{Future: ans.Future()}, release

}

func (c Persistent) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Persistent) String() string {
	return "Persistent(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Persistent) AddRef() Persistent {
	return Persistent(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Persistent) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Persistent) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Persistent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Persistent) DecodeFromPtr(p capnp.Ptr) Persistent {
	return Persistent(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Persistent) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Persistent) IsSame(other Persistent) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Persistent) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Persistent) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Persistent_Server is a Persistent with a local implementation.
type Persistent_Server interface {
	Save(context.Context, Persistent_save) error
}

// Persistent_NewServer creates a new Server from an implementation of Persistent_Server.
func Persistent_NewServer(s Persistent_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_Methods(nil, s), s, c)
}

// Persistent_ServerToClient creates a new Client from an implementation of Persistent_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ServerToClient(s Persistent_Server) Persistent {
	return Persistent(capnp.NewClient(Persistent_NewServer(s)))
}

// Persistent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_Methods(methods []server.Method, s Persistent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc1a7daa0dc36cb65,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent",
			MethodName:    "save",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Save(ctx, Persistent_save{call})
		},
	})

	return methods
}

// Persistent_save holds the state for a server call to Persistent.save.
// See server.Call for documentation.
type Persistent_save struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_save) Args() Persistent_SaveParams {
	return Persistent_SaveParams(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Persistent_save) AllocResults() (Persistent_SaveResults, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults(r), err
}

// Persistent_List is a list of Persistent.
type Persistent_List = capnp.CapList[Persistent]

// NewPersistent creates a new list of Persistent.
func NewPersistent_List(s *capnp.Segment, sz int32) (Persistent_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Persistent](l), err
}

type Persistent_SaveParams capnp.Struct

// Persistent_SaveParams_TypeID is the unique identifier for the type Persistent_SaveParams.
const Persistent_SaveParams_TypeID = 0xd5e0aac4225e0343

func NewPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams(st), err
}

func NewRootPersistent_SaveParams(s *capnp.Segment) (Persistent_SaveParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Persistent_SaveParams(st), err
}

func ReadRootPersistent_SaveParams(msg *capnp.Message) (Persistent_SaveParams, error) {
	root, err := msg.Root()
	return Persistent_SaveParams(root.Struct()), err
}

func (s Persistent_SaveParams) String() string {
	str, _ := text.Marshal(0xd5e0aac4225e0343, capnp.Struct(s))
	return str
}

func (s Persistent_SaveParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Persistent_SaveParams) DecodeFromPtr(p capnp.Ptr) Persistent_SaveParams {
	return Persistent_SaveParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Persistent_SaveParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Persistent_SaveParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Persistent_SaveParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Persistent_SaveParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Persistent_SaveParams) SealFor() (SturdyRef_Owner, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRef_Owner(p.Struct()), err
}

func (s Persistent_SaveParams) HasSealFor() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Persistent_SaveParams) SetSealFor(v SturdyRef_Owner) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSealFor sets the sealFor field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Persistent_SaveParams) NewSealFor() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Persistent_SaveParams_List is a list of Persistent_SaveParams.
type Persistent_SaveParams_List = capnp.StructList[Persistent_SaveParams]

// NewPersistent_SaveParams creates a new list of Persistent_SaveParams.
func NewPersistent_SaveParams_List(s *capnp.Segment, sz int32) (Persistent_SaveParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Persistent_SaveParams](l), err
}

// Persistent_SaveParams_Future is a wrapper for a Persistent_SaveParams promised by a client call.
type Persistent_SaveParams_Future struct{ *capnp.Future }

func (f Persistent_SaveParams_Future) Struct() (Persistent_SaveParams, error) {
	p, err := f.Future.Ptr()
	return Persistent_SaveParams(p.Struct()), err
}
func (p Persistent_SaveParams_Future) SealFor() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(0, nil)}
}

type Persistent_SaveResults capnp.Struct

// Persistent_SaveResults_TypeID is the unique identifier for the type Persistent_SaveResults.
const Persistent_SaveResults_TypeID = 0xdc5bd1ef982cec13

func NewPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults(st), err
}

func NewRootPersistent_SaveResults(s *capnp.Segment) (Persistent_SaveResults, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Persistent_SaveResults(st), err
}

func ReadRootPersistent_SaveResults(msg *capnp.Message) (Persistent_SaveResults, error) {
	root, err := msg.Root()
	return Persistent_SaveResults(root.Struct()), err
}

func (s Persistent_SaveResults) String() string {
	str, _ := text.Marshal(0xdc5bd1ef982cec13, capnp.Struct(s))
	return str
}

func (s Persistent_SaveResults) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Persistent_SaveResults) DecodeFromPtr(p capnp.Ptr) Persistent_SaveResults {
	return Persistent_SaveResults(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Persistent_SaveResults) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Persistent_SaveResults) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Persistent_SaveResults) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Persistent_SaveResults) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Persistent_SaveResults) SturdyRef() (SturdyRef, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRef(p.Struct()), err
}

func (s Persistent_SaveResults) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Persistent_SaveResults) SetSturdyRef(v SturdyRef) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyRef sets the sturdyRef field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewSturdyRef() (SturdyRef, error) {
	ss, err := NewSturdyRef(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Persistent_SaveResults) UnsaveSR() (SturdyRef, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SturdyRef(p.Struct()), err
}

func (s Persistent_SaveResults) HasUnsaveSR() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Persistent_SaveResults) SetUnsaveSR(v SturdyRef) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewUnsaveSR sets the unsaveSR field to a newly
// allocated SturdyRef struct, preferring placement in s's segment.
func (s Persistent_SaveResults) NewUnsaveSR() (SturdyRef, error) {
	ss, err := NewSturdyRef(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Persistent_SaveResults_List is a list of Persistent_SaveResults.
type Persistent_SaveResults_List = capnp.StructList[Persistent_SaveResults]

// NewPersistent_SaveResults creates a new list of Persistent_SaveResults.
func NewPersistent_SaveResults_List(s *capnp.Segment, sz int32) (Persistent_SaveResults_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Persistent_SaveResults](l), err
}

// Persistent_SaveResults_Future is a wrapper for a Persistent_SaveResults promised by a client call.
type Persistent_SaveResults_Future struct{ *capnp.Future }

func (f Persistent_SaveResults_Future) Struct() (Persistent_SaveResults, error) {
	p, err := f.Future.Ptr()
	return Persistent_SaveResults(p.Struct()), err
}
func (p Persistent_SaveResults_Future) SturdyRef() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(0, nil)}
}
func (p Persistent_SaveResults_Future) UnsaveSR() SturdyRef_Future {
	return SturdyRef_Future{Future: p.Future.Field(1, nil)}
}

type Persistent_ReleaseSturdyRef capnp.Client

// Persistent_ReleaseSturdyRef_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef.
const Persistent_ReleaseSturdyRef_TypeID = 0x8f700f81169f2e52

func (c Persistent_ReleaseSturdyRef) ReleaseSR(ctx context.Context, params func(Persistent_ReleaseSturdyRef_releaseSR_Params) error) (Persistent_ReleaseSturdyRef_releaseSR_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Persistent_ReleaseSturdyRef_releaseSR_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Persistent_ReleaseSturdyRef_releaseSR_Results_Future{Future: ans.Future()}, release

}

func (c Persistent_ReleaseSturdyRef) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Persistent_ReleaseSturdyRef) String() string {
	return "Persistent_ReleaseSturdyRef(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Persistent_ReleaseSturdyRef) AddRef() Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Persistent_ReleaseSturdyRef) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Persistent_ReleaseSturdyRef) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Persistent_ReleaseSturdyRef) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Persistent_ReleaseSturdyRef) DecodeFromPtr(p capnp.Ptr) Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Persistent_ReleaseSturdyRef) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Persistent_ReleaseSturdyRef) IsSame(other Persistent_ReleaseSturdyRef) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Persistent_ReleaseSturdyRef) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Persistent_ReleaseSturdyRef) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Persistent_ReleaseSturdyRef_Server is a Persistent_ReleaseSturdyRef with a local implementation.
type Persistent_ReleaseSturdyRef_Server interface {
	ReleaseSR(context.Context, Persistent_ReleaseSturdyRef_releaseSR) error
}

// Persistent_ReleaseSturdyRef_NewServer creates a new Server from an implementation of Persistent_ReleaseSturdyRef_Server.
func Persistent_ReleaseSturdyRef_NewServer(s Persistent_ReleaseSturdyRef_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Persistent_ReleaseSturdyRef_Methods(nil, s), s, c)
}

// Persistent_ReleaseSturdyRef_ServerToClient creates a new Client from an implementation of Persistent_ReleaseSturdyRef_Server.
// The caller is responsible for calling Release on the returned Client.
func Persistent_ReleaseSturdyRef_ServerToClient(s Persistent_ReleaseSturdyRef_Server) Persistent_ReleaseSturdyRef {
	return Persistent_ReleaseSturdyRef(capnp.NewClient(Persistent_ReleaseSturdyRef_NewServer(s)))
}

// Persistent_ReleaseSturdyRef_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Persistent_ReleaseSturdyRef_Methods(methods []server.Method, s Persistent_ReleaseSturdyRef_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x8f700f81169f2e52,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Persistent.ReleaseSturdyRef",
			MethodName:    "release",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ReleaseSR(ctx, Persistent_ReleaseSturdyRef_releaseSR{call})
		},
	})

	return methods
}

// Persistent_ReleaseSturdyRef_releaseSR holds the state for a server call to Persistent_ReleaseSturdyRef.releaseSR.
// See server.Call for documentation.
type Persistent_ReleaseSturdyRef_releaseSR struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Persistent_ReleaseSturdyRef_releaseSR) Args() Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Persistent_ReleaseSturdyRef_releaseSR) AllocResults() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results(r), err
}

// Persistent_ReleaseSturdyRef_List is a list of Persistent_ReleaseSturdyRef.
type Persistent_ReleaseSturdyRef_List = capnp.CapList[Persistent_ReleaseSturdyRef]

// NewPersistent_ReleaseSturdyRef creates a new list of Persistent_ReleaseSturdyRef.
func NewPersistent_ReleaseSturdyRef_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Persistent_ReleaseSturdyRef](l), err
}

type Persistent_ReleaseSturdyRef_releaseSR_Params capnp.Struct

// Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Params.
const Persistent_ReleaseSturdyRef_releaseSR_Params_TypeID = 0xa4db8c20d9807c15

func NewPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params(st), err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Params(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Params(st), err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Params(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Params(root.Struct()), err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) String() string {
	str, _ := text.Marshal(0xa4db8c20d9807c15, capnp.Struct(s))
	return str
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Persistent_ReleaseSturdyRef_releaseSR_Params) DecodeFromPtr(p capnp.Ptr) Persistent_ReleaseSturdyRef_releaseSR_Params {
	return Persistent_ReleaseSturdyRef_releaseSR_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Persistent_ReleaseSturdyRef_releaseSR_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Params.
type Persistent_ReleaseSturdyRef_releaseSR_Params_List = capnp.StructList[Persistent_ReleaseSturdyRef_releaseSR_Params]

// NewPersistent_ReleaseSturdyRef_releaseSR_Params creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Params.
func NewPersistent_ReleaseSturdyRef_releaseSR_Params_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Persistent_ReleaseSturdyRef_releaseSR_Params](l), err
}

// Persistent_ReleaseSturdyRef_releaseSR_Params_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Params promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Params_Future struct{ *capnp.Future }

func (f Persistent_ReleaseSturdyRef_releaseSR_Params_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Params, error) {
	p, err := f.Future.Ptr()
	return Persistent_ReleaseSturdyRef_releaseSR_Params(p.Struct()), err
}

type Persistent_ReleaseSturdyRef_releaseSR_Results capnp.Struct

// Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID is the unique identifier for the type Persistent_ReleaseSturdyRef_releaseSR_Results.
const Persistent_ReleaseSturdyRef_releaseSR_Results_TypeID = 0x932d6ee32410e853

func NewPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results(st), err
}

func NewRootPersistent_ReleaseSturdyRef_releaseSR_Results(s *capnp.Segment) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Persistent_ReleaseSturdyRef_releaseSR_Results(st), err
}

func ReadRootPersistent_ReleaseSturdyRef_releaseSR_Results(msg *capnp.Message) (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	root, err := msg.Root()
	return Persistent_ReleaseSturdyRef_releaseSR_Results(root.Struct()), err
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) String() string {
	str, _ := text.Marshal(0x932d6ee32410e853, capnp.Struct(s))
	return str
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Persistent_ReleaseSturdyRef_releaseSR_Results) DecodeFromPtr(p capnp.Ptr) Persistent_ReleaseSturdyRef_releaseSR_Results {
	return Persistent_ReleaseSturdyRef_releaseSR_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Persistent_ReleaseSturdyRef_releaseSR_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Persistent_ReleaseSturdyRef_releaseSR_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Persistent_ReleaseSturdyRef_releaseSR_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_List is a list of Persistent_ReleaseSturdyRef_releaseSR_Results.
type Persistent_ReleaseSturdyRef_releaseSR_Results_List = capnp.StructList[Persistent_ReleaseSturdyRef_releaseSR_Results]

// NewPersistent_ReleaseSturdyRef_releaseSR_Results creates a new list of Persistent_ReleaseSturdyRef_releaseSR_Results.
func NewPersistent_ReleaseSturdyRef_releaseSR_Results_List(s *capnp.Segment, sz int32) (Persistent_ReleaseSturdyRef_releaseSR_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[Persistent_ReleaseSturdyRef_releaseSR_Results](l), err
}

// Persistent_ReleaseSturdyRef_releaseSR_Results_Future is a wrapper for a Persistent_ReleaseSturdyRef_releaseSR_Results promised by a client call.
type Persistent_ReleaseSturdyRef_releaseSR_Results_Future struct{ *capnp.Future }

func (f Persistent_ReleaseSturdyRef_releaseSR_Results_Future) Struct() (Persistent_ReleaseSturdyRef_releaseSR_Results, error) {
	p, err := f.Future.Ptr()
	return Persistent_ReleaseSturdyRef_releaseSR_Results(p.Struct()), err
}

type Restorer capnp.Client

// Restorer_TypeID is the unique identifier for the type Restorer.
const Restorer_TypeID = 0x9fb6218427d92e3c

func (c Restorer) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release

}

func (c Restorer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Restorer) String() string {
	return "Restorer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Restorer) AddRef() Restorer {
	return Restorer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Restorer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Restorer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Restorer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Restorer) DecodeFromPtr(p capnp.Ptr) Restorer {
	return Restorer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Restorer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Restorer) IsSame(other Restorer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Restorer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Restorer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Restorer_Server is a Restorer with a local implementation.
type Restorer_Server interface {
	Restore(context.Context, Restorer_restore) error
}

// Restorer_NewServer creates a new Server from an implementation of Restorer_Server.
func Restorer_NewServer(s Restorer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Restorer_Methods(nil, s), s, c)
}

// Restorer_ServerToClient creates a new Client from an implementation of Restorer_Server.
// The caller is responsible for calling Release on the returned Client.
func Restorer_ServerToClient(s Restorer_Server) Restorer {
	return Restorer(capnp.NewClient(Restorer_NewServer(s)))
}

// Restorer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Restorer_Methods(methods []server.Method, s Restorer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// Restorer_restore holds the state for a server call to Restorer.restore.
// See server.Call for documentation.
type Restorer_restore struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Restorer_restore) Args() Restorer_RestoreParams {
	return Restorer_RestoreParams(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Restorer_restore) AllocResults() (Restorer_restore_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results(r), err
}

// Restorer_List is a list of Restorer.
type Restorer_List = capnp.CapList[Restorer]

// NewRestorer creates a new list of Restorer.
func NewRestorer_List(s *capnp.Segment, sz int32) (Restorer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Restorer](l), err
}

type Restorer_RestoreParams capnp.Struct

// Restorer_RestoreParams_TypeID is the unique identifier for the type Restorer_RestoreParams.
const Restorer_RestoreParams_TypeID = 0xc541e5764a37d73a

func NewRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams(st), err
}

func NewRootRestorer_RestoreParams(s *capnp.Segment) (Restorer_RestoreParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Restorer_RestoreParams(st), err
}

func ReadRootRestorer_RestoreParams(msg *capnp.Message) (Restorer_RestoreParams, error) {
	root, err := msg.Root()
	return Restorer_RestoreParams(root.Struct()), err
}

func (s Restorer_RestoreParams) String() string {
	str, _ := text.Marshal(0xc541e5764a37d73a, capnp.Struct(s))
	return str
}

func (s Restorer_RestoreParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Restorer_RestoreParams) DecodeFromPtr(p capnp.Ptr) Restorer_RestoreParams {
	return Restorer_RestoreParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Restorer_RestoreParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Restorer_RestoreParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Restorer_RestoreParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Restorer_RestoreParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Restorer_RestoreParams) LocalRef() (SturdyRef_Token, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRef_Token(p.Struct()), err
}

func (s Restorer_RestoreParams) HasLocalRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Restorer_RestoreParams) SetLocalRef(v SturdyRef_Token) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewLocalRef sets the localRef field to a newly
// allocated SturdyRef_Token struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewLocalRef() (SturdyRef_Token, error) {
	ss, err := NewSturdyRef_Token(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef_Token{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Restorer_RestoreParams) SealedBy() (SturdyRef_Owner, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return SturdyRef_Owner(p.Struct()), err
}

func (s Restorer_RestoreParams) HasSealedBy() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Restorer_RestoreParams) SetSealedBy(v SturdyRef_Owner) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewSealedBy sets the sealedBy field to a newly
// allocated SturdyRef_Owner struct, preferring placement in s's segment.
func (s Restorer_RestoreParams) NewSealedBy() (SturdyRef_Owner, error) {
	ss, err := NewSturdyRef_Owner(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRef_Owner{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Restorer_RestoreParams_List is a list of Restorer_RestoreParams.
type Restorer_RestoreParams_List = capnp.StructList[Restorer_RestoreParams]

// NewRestorer_RestoreParams creates a new list of Restorer_RestoreParams.
func NewRestorer_RestoreParams_List(s *capnp.Segment, sz int32) (Restorer_RestoreParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Restorer_RestoreParams](l), err
}

// Restorer_RestoreParams_Future is a wrapper for a Restorer_RestoreParams promised by a client call.
type Restorer_RestoreParams_Future struct{ *capnp.Future }

func (f Restorer_RestoreParams_Future) Struct() (Restorer_RestoreParams, error) {
	p, err := f.Future.Ptr()
	return Restorer_RestoreParams(p.Struct()), err
}
func (p Restorer_RestoreParams_Future) LocalRef() SturdyRef_Token_Future {
	return SturdyRef_Token_Future{Future: p.Future.Field(0, nil)}
}
func (p Restorer_RestoreParams_Future) SealedBy() SturdyRef_Owner_Future {
	return SturdyRef_Owner_Future{Future: p.Future.Field(1, nil)}
}

type Restorer_restore_Results capnp.Struct

// Restorer_restore_Results_TypeID is the unique identifier for the type Restorer_restore_Results.
const Restorer_restore_Results_TypeID = 0xda966d1d252e4d25

func NewRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results(st), err
}

func NewRootRestorer_restore_Results(s *capnp.Segment) (Restorer_restore_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Restorer_restore_Results(st), err
}

func ReadRootRestorer_restore_Results(msg *capnp.Message) (Restorer_restore_Results, error) {
	root, err := msg.Root()
	return Restorer_restore_Results(root.Struct()), err
}

func (s Restorer_restore_Results) String() string {
	str, _ := text.Marshal(0xda966d1d252e4d25, capnp.Struct(s))
	return str
}

func (s Restorer_restore_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Restorer_restore_Results) DecodeFromPtr(p capnp.Ptr) Restorer_restore_Results {
	return Restorer_restore_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Restorer_restore_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Restorer_restore_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Restorer_restore_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Restorer_restore_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Restorer_restore_Results) Cap() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s Restorer_restore_Results) HasCap() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Restorer_restore_Results) SetCap(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// Restorer_restore_Results_List is a list of Restorer_restore_Results.
type Restorer_restore_Results_List = capnp.StructList[Restorer_restore_Results]

// NewRestorer_restore_Results creates a new list of Restorer_restore_Results.
func NewRestorer_restore_Results_List(s *capnp.Segment, sz int32) (Restorer_restore_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Restorer_restore_Results](l), err
}

// Restorer_restore_Results_Future is a wrapper for a Restorer_restore_Results promised by a client call.
type Restorer_restore_Results_Future struct{ *capnp.Future }

func (f Restorer_restore_Results_Future) Struct() (Restorer_restore_Results, error) {
	p, err := f.Future.Ptr()
	return Restorer_restore_Results(p.Struct()), err
}
func (p Restorer_restore_Results_Future) Cap() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type HostPortResolver capnp.Client

// HostPortResolver_TypeID is the unique identifier for the type HostPortResolver.
const HostPortResolver_TypeID = 0xaa8d91fab6d01d9f

func (c HostPortResolver) ResolveIdent(ctx context.Context, params func(HostPortResolver_ResolveIdent_Params) error) (HostPortResolver_ResolveIdent_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_ResolveIdent_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return HostPortResolver_ResolveIdent_Results_Future{Future: ans.Future()}, release

}

func (c HostPortResolver) Info(ctx context.Context, params func(common.Identifiable_info_Params) error) (common.IdInformation_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(common.Identifiable_info_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return common.IdInformation_Future{Future: ans.Future()}, release

}

func (c HostPortResolver) Restore(ctx context.Context, params func(Restorer_RestoreParams) error) (Restorer_restore_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Restorer_RestoreParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Restorer_restore_Results_Future{Future: ans.Future()}, release

}

func (c HostPortResolver) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c HostPortResolver) String() string {
	return "HostPortResolver(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c HostPortResolver) AddRef() HostPortResolver {
	return HostPortResolver(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c HostPortResolver) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c HostPortResolver) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c HostPortResolver) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (HostPortResolver) DecodeFromPtr(p capnp.Ptr) HostPortResolver {
	return HostPortResolver(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c HostPortResolver) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c HostPortResolver) IsSame(other HostPortResolver) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c HostPortResolver) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c HostPortResolver) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A HostPortResolver_Server is a HostPortResolver with a local implementation.
type HostPortResolver_Server interface {
	ResolveIdent(context.Context, HostPortResolver_ResolveIdent) error

	Info(context.Context, common.Identifiable_info) error

	Restore(context.Context, Restorer_restore) error
}

// HostPortResolver_NewServer creates a new Server from an implementation of HostPortResolver_Server.
func HostPortResolver_NewServer(s HostPortResolver_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Methods(nil, s), s, c)
}

// HostPortResolver_ServerToClient creates a new Client from an implementation of HostPortResolver_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_ServerToClient(s HostPortResolver_Server) HostPortResolver {
	return HostPortResolver(capnp.NewClient(HostPortResolver_NewServer(s)))
}

// HostPortResolver_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Methods(methods []server.Method, s HostPortResolver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa8d91fab6d01d9f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver",
			MethodName:    "resolve",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ResolveIdent(ctx, HostPortResolver_ResolveIdent{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb2afd1cb599c48d5,
			MethodID:      0,
			InterfaceName: "common.capnp:Identifiable",
			MethodName:    "info",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Info(ctx, common.Identifiable_info{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9fb6218427d92e3c,
			MethodID:      0,
			InterfaceName: "persistence.capnp:Restorer",
			MethodName:    "restore",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Restore(ctx, Restorer_restore{call})
		},
	})

	return methods
}

// HostPortResolver_ResolveIdent holds the state for a server call to HostPortResolver.ResolveIdent.
// See server.Call for documentation.
type HostPortResolver_ResolveIdent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_ResolveIdent) Args() HostPortResolver_ResolveIdent_Params {
	return HostPortResolver_ResolveIdent_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c HostPortResolver_ResolveIdent) AllocResults() (HostPortResolver_ResolveIdent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Results(r), err
}

// HostPortResolver_List is a list of HostPortResolver.
type HostPortResolver_List = capnp.CapList[HostPortResolver]

// NewHostPortResolver creates a new list of HostPortResolver.
func NewHostPortResolver_List(s *capnp.Segment, sz int32) (HostPortResolver_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[HostPortResolver](l), err
}

type HostPortResolver_Registrar capnp.Client

// HostPortResolver_Registrar_TypeID is the unique identifier for the type HostPortResolver_Registrar.
const HostPortResolver_Registrar_TypeID = 0xb0caf775704690b2

func (c HostPortResolver_Registrar) Register(ctx context.Context, params func(HostPortResolver_Registrar_RegisterParams) error) (HostPortResolver_Registrar_register_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_RegisterParams(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return HostPortResolver_Registrar_register_Results_Future{Future: ans.Future()}, release

}

func (c HostPortResolver_Registrar) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c HostPortResolver_Registrar) String() string {
	return "HostPortResolver_Registrar(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c HostPortResolver_Registrar) AddRef() HostPortResolver_Registrar {
	return HostPortResolver_Registrar(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c HostPortResolver_Registrar) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c HostPortResolver_Registrar) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c HostPortResolver_Registrar) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (HostPortResolver_Registrar) DecodeFromPtr(p capnp.Ptr) HostPortResolver_Registrar {
	return HostPortResolver_Registrar(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c HostPortResolver_Registrar) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c HostPortResolver_Registrar) IsSame(other HostPortResolver_Registrar) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c HostPortResolver_Registrar) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c HostPortResolver_Registrar) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A HostPortResolver_Registrar_Server is a HostPortResolver_Registrar with a local implementation.
type HostPortResolver_Registrar_Server interface {
	Register(context.Context, HostPortResolver_Registrar_register) error
}

// HostPortResolver_Registrar_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Server.
func HostPortResolver_Registrar_NewServer(s HostPortResolver_Registrar_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Methods(nil, s), s, c)
}

// HostPortResolver_Registrar_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_ServerToClient(s HostPortResolver_Registrar_Server) HostPortResolver_Registrar {
	return HostPortResolver_Registrar(capnp.NewClient(HostPortResolver_Registrar_NewServer(s)))
}

// HostPortResolver_Registrar_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Methods(methods []server.Method, s HostPortResolver_Registrar_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb0caf775704690b2,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, HostPortResolver_Registrar_register{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_register holds the state for a server call to HostPortResolver_Registrar.register.
// See server.Call for documentation.
type HostPortResolver_Registrar_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_register) Args() HostPortResolver_Registrar_RegisterParams {
	return HostPortResolver_Registrar_RegisterParams(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_register) AllocResults() (HostPortResolver_Registrar_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results(r), err
}

// HostPortResolver_Registrar_List is a list of HostPortResolver_Registrar.
type HostPortResolver_Registrar_List = capnp.CapList[HostPortResolver_Registrar]

// NewHostPortResolver_Registrar creates a new list of HostPortResolver_Registrar.
func NewHostPortResolver_Registrar_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[HostPortResolver_Registrar](l), err
}

type HostPortResolver_Registrar_Heartbeat capnp.Client

// HostPortResolver_Registrar_Heartbeat_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat.
const HostPortResolver_Registrar_Heartbeat_TypeID = 0x87de92d2d68df26f

func (c HostPortResolver_Registrar_Heartbeat) Beat(ctx context.Context, params func(HostPortResolver_Registrar_Heartbeat_beat_Params) error) (HostPortResolver_Registrar_Heartbeat_beat_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x87de92d2d68df26f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar.Heartbeat",
			MethodName:    "beat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(HostPortResolver_Registrar_Heartbeat_beat_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return HostPortResolver_Registrar_Heartbeat_beat_Results_Future{Future: ans.Future()}, release

}

func (c HostPortResolver_Registrar_Heartbeat) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c HostPortResolver_Registrar_Heartbeat) String() string {
	return "HostPortResolver_Registrar_Heartbeat(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c HostPortResolver_Registrar_Heartbeat) AddRef() HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c HostPortResolver_Registrar_Heartbeat) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c HostPortResolver_Registrar_Heartbeat) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c HostPortResolver_Registrar_Heartbeat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (HostPortResolver_Registrar_Heartbeat) DecodeFromPtr(p capnp.Ptr) HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c HostPortResolver_Registrar_Heartbeat) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c HostPortResolver_Registrar_Heartbeat) IsSame(other HostPortResolver_Registrar_Heartbeat) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c HostPortResolver_Registrar_Heartbeat) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c HostPortResolver_Registrar_Heartbeat) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A HostPortResolver_Registrar_Heartbeat_Server is a HostPortResolver_Registrar_Heartbeat with a local implementation.
type HostPortResolver_Registrar_Heartbeat_Server interface {
	Beat(context.Context, HostPortResolver_Registrar_Heartbeat_beat) error
}

// HostPortResolver_Registrar_Heartbeat_NewServer creates a new Server from an implementation of HostPortResolver_Registrar_Heartbeat_Server.
func HostPortResolver_Registrar_Heartbeat_NewServer(s HostPortResolver_Registrar_Heartbeat_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(HostPortResolver_Registrar_Heartbeat_Methods(nil, s), s, c)
}

// HostPortResolver_Registrar_Heartbeat_ServerToClient creates a new Client from an implementation of HostPortResolver_Registrar_Heartbeat_Server.
// The caller is responsible for calling Release on the returned Client.
func HostPortResolver_Registrar_Heartbeat_ServerToClient(s HostPortResolver_Registrar_Heartbeat_Server) HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat(capnp.NewClient(HostPortResolver_Registrar_Heartbeat_NewServer(s)))
}

// HostPortResolver_Registrar_Heartbeat_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func HostPortResolver_Registrar_Heartbeat_Methods(methods []server.Method, s HostPortResolver_Registrar_Heartbeat_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x87de92d2d68df26f,
			MethodID:      0,
			InterfaceName: "persistence.capnp:HostPortResolver.Registrar.Heartbeat",
			MethodName:    "beat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Beat(ctx, HostPortResolver_Registrar_Heartbeat_beat{call})
		},
	})

	return methods
}

// HostPortResolver_Registrar_Heartbeat_beat holds the state for a server call to HostPortResolver_Registrar_Heartbeat.beat.
// See server.Call for documentation.
type HostPortResolver_Registrar_Heartbeat_beat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c HostPortResolver_Registrar_Heartbeat_beat) Args() HostPortResolver_Registrar_Heartbeat_beat_Params {
	return HostPortResolver_Registrar_Heartbeat_beat_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c HostPortResolver_Registrar_Heartbeat_beat) AllocResults() (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results(r), err
}

// HostPortResolver_Registrar_Heartbeat_List is a list of HostPortResolver_Registrar_Heartbeat.
type HostPortResolver_Registrar_Heartbeat_List = capnp.CapList[HostPortResolver_Registrar_Heartbeat]

// NewHostPortResolver_Registrar_Heartbeat creates a new list of HostPortResolver_Registrar_Heartbeat.
func NewHostPortResolver_Registrar_Heartbeat_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[HostPortResolver_Registrar_Heartbeat](l), err
}

type HostPortResolver_Registrar_Heartbeat_beat_Params capnp.Struct

// HostPortResolver_Registrar_Heartbeat_beat_Params_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat_beat_Params.
const HostPortResolver_Registrar_Heartbeat_beat_Params_TypeID = 0xebff70497e0ba555

func NewHostPortResolver_Registrar_Heartbeat_beat_Params(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Params(st), err
}

func NewRootHostPortResolver_Registrar_Heartbeat_beat_Params(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Params(st), err
}

func ReadRootHostPortResolver_Registrar_Heartbeat_beat_Params(msg *capnp.Message) (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_Heartbeat_beat_Params(root.Struct()), err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) String() string {
	str, _ := text.Marshal(0xebff70497e0ba555, capnp.Struct(s))
	return str
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HostPortResolver_Registrar_Heartbeat_beat_Params) DecodeFromPtr(p capnp.Ptr) HostPortResolver_Registrar_Heartbeat_beat_Params {
	return HostPortResolver_Registrar_Heartbeat_beat_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HostPortResolver_Registrar_Heartbeat_beat_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// HostPortResolver_Registrar_Heartbeat_beat_Params_List is a list of HostPortResolver_Registrar_Heartbeat_beat_Params.
type HostPortResolver_Registrar_Heartbeat_beat_Params_List = capnp.StructList[HostPortResolver_Registrar_Heartbeat_beat_Params]

// NewHostPortResolver_Registrar_Heartbeat_beat_Params creates a new list of HostPortResolver_Registrar_Heartbeat_beat_Params.
func NewHostPortResolver_Registrar_Heartbeat_beat_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_beat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[HostPortResolver_Registrar_Heartbeat_beat_Params](l), err
}

// HostPortResolver_Registrar_Heartbeat_beat_Params_Future is a wrapper for a HostPortResolver_Registrar_Heartbeat_beat_Params promised by a client call.
type HostPortResolver_Registrar_Heartbeat_beat_Params_Future struct{ *capnp.Future }

func (f HostPortResolver_Registrar_Heartbeat_beat_Params_Future) Struct() (HostPortResolver_Registrar_Heartbeat_beat_Params, error) {
	p, err := f.Future.Ptr()
	return HostPortResolver_Registrar_Heartbeat_beat_Params(p.Struct()), err
}

type HostPortResolver_Registrar_Heartbeat_beat_Results capnp.Struct

// HostPortResolver_Registrar_Heartbeat_beat_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_Heartbeat_beat_Results.
const HostPortResolver_Registrar_Heartbeat_beat_Results_TypeID = 0x9510c22fa544a65e

func NewHostPortResolver_Registrar_Heartbeat_beat_Results(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results(st), err
}

func NewRootHostPortResolver_Registrar_Heartbeat_beat_Results(s *capnp.Segment) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return HostPortResolver_Registrar_Heartbeat_beat_Results(st), err
}

func ReadRootHostPortResolver_Registrar_Heartbeat_beat_Results(msg *capnp.Message) (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_Heartbeat_beat_Results(root.Struct()), err
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) String() string {
	str, _ := text.Marshal(0x9510c22fa544a65e, capnp.Struct(s))
	return str
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HostPortResolver_Registrar_Heartbeat_beat_Results) DecodeFromPtr(p capnp.Ptr) HostPortResolver_Registrar_Heartbeat_beat_Results {
	return HostPortResolver_Registrar_Heartbeat_beat_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HostPortResolver_Registrar_Heartbeat_beat_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HostPortResolver_Registrar_Heartbeat_beat_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// HostPortResolver_Registrar_Heartbeat_beat_Results_List is a list of HostPortResolver_Registrar_Heartbeat_beat_Results.
type HostPortResolver_Registrar_Heartbeat_beat_Results_List = capnp.StructList[HostPortResolver_Registrar_Heartbeat_beat_Results]

// NewHostPortResolver_Registrar_Heartbeat_beat_Results creates a new list of HostPortResolver_Registrar_Heartbeat_beat_Results.
func NewHostPortResolver_Registrar_Heartbeat_beat_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_Heartbeat_beat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[HostPortResolver_Registrar_Heartbeat_beat_Results](l), err
}

// HostPortResolver_Registrar_Heartbeat_beat_Results_Future is a wrapper for a HostPortResolver_Registrar_Heartbeat_beat_Results promised by a client call.
type HostPortResolver_Registrar_Heartbeat_beat_Results_Future struct{ *capnp.Future }

func (f HostPortResolver_Registrar_Heartbeat_beat_Results_Future) Struct() (HostPortResolver_Registrar_Heartbeat_beat_Results, error) {
	p, err := f.Future.Ptr()
	return HostPortResolver_Registrar_Heartbeat_beat_Results(p.Struct()), err
}

type HostPortResolver_Registrar_RegisterParams capnp.Struct

// HostPortResolver_Registrar_RegisterParams_TypeID is the unique identifier for the type HostPortResolver_Registrar_RegisterParams.
const HostPortResolver_Registrar_RegisterParams_TypeID = 0xbf018f62ff460d0f

func NewHostPortResolver_Registrar_RegisterParams(s *capnp.Segment) (HostPortResolver_Registrar_RegisterParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_RegisterParams(st), err
}

func NewRootHostPortResolver_Registrar_RegisterParams(s *capnp.Segment) (HostPortResolver_Registrar_RegisterParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return HostPortResolver_Registrar_RegisterParams(st), err
}

func ReadRootHostPortResolver_Registrar_RegisterParams(msg *capnp.Message) (HostPortResolver_Registrar_RegisterParams, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_RegisterParams(root.Struct()), err
}

func (s HostPortResolver_Registrar_RegisterParams) String() string {
	str, _ := text.Marshal(0xbf018f62ff460d0f, capnp.Struct(s))
	return str
}

func (s HostPortResolver_Registrar_RegisterParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HostPortResolver_Registrar_RegisterParams) DecodeFromPtr(p capnp.Ptr) HostPortResolver_Registrar_RegisterParams {
	return HostPortResolver_Registrar_RegisterParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HostPortResolver_Registrar_RegisterParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HostPortResolver_Registrar_RegisterParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HostPortResolver_Registrar_RegisterParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HostPortResolver_Registrar_RegisterParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HostPortResolver_Registrar_RegisterParams) Base64VatId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasBase64VatId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HostPortResolver_Registrar_RegisterParams) Base64VatIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetBase64VatId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasHost() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s HostPortResolver_Registrar_RegisterParams) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetHost(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Port() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HostPortResolver_Registrar_RegisterParams) SetPort(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

func (s HostPortResolver_Registrar_RegisterParams) Alias() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s HostPortResolver_Registrar_RegisterParams) HasAlias() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s HostPortResolver_Registrar_RegisterParams) AliasBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s HostPortResolver_Registrar_RegisterParams) SetAlias(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// HostPortResolver_Registrar_RegisterParams_List is a list of HostPortResolver_Registrar_RegisterParams.
type HostPortResolver_Registrar_RegisterParams_List = capnp.StructList[HostPortResolver_Registrar_RegisterParams]

// NewHostPortResolver_Registrar_RegisterParams creates a new list of HostPortResolver_Registrar_RegisterParams.
func NewHostPortResolver_Registrar_RegisterParams_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_RegisterParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[HostPortResolver_Registrar_RegisterParams](l), err
}

// HostPortResolver_Registrar_RegisterParams_Future is a wrapper for a HostPortResolver_Registrar_RegisterParams promised by a client call.
type HostPortResolver_Registrar_RegisterParams_Future struct{ *capnp.Future }

func (f HostPortResolver_Registrar_RegisterParams_Future) Struct() (HostPortResolver_Registrar_RegisterParams, error) {
	p, err := f.Future.Ptr()
	return HostPortResolver_Registrar_RegisterParams(p.Struct()), err
}

type HostPortResolver_Registrar_register_Results capnp.Struct

// HostPortResolver_Registrar_register_Results_TypeID is the unique identifier for the type HostPortResolver_Registrar_register_Results.
const HostPortResolver_Registrar_register_Results_TypeID = 0xfafc816633f98bb9

func NewHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results(st), err
}

func NewRootHostPortResolver_Registrar_register_Results(s *capnp.Segment) (HostPortResolver_Registrar_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_Registrar_register_Results(st), err
}

func ReadRootHostPortResolver_Registrar_register_Results(msg *capnp.Message) (HostPortResolver_Registrar_register_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_Registrar_register_Results(root.Struct()), err
}

func (s HostPortResolver_Registrar_register_Results) String() string {
	str, _ := text.Marshal(0xfafc816633f98bb9, capnp.Struct(s))
	return str
}

func (s HostPortResolver_Registrar_register_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HostPortResolver_Registrar_register_Results) DecodeFromPtr(p capnp.Ptr) HostPortResolver_Registrar_register_Results {
	return HostPortResolver_Registrar_register_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HostPortResolver_Registrar_register_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HostPortResolver_Registrar_register_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HostPortResolver_Registrar_register_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HostPortResolver_Registrar_register_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HostPortResolver_Registrar_register_Results) Heartbeat() HostPortResolver_Registrar_Heartbeat {
	p, _ := capnp.Struct(s).Ptr(0)
	return HostPortResolver_Registrar_Heartbeat(p.Interface().Client())
}

func (s HostPortResolver_Registrar_register_Results) HasHeartbeat() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HostPortResolver_Registrar_register_Results) SetHeartbeat(v HostPortResolver_Registrar_Heartbeat) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s HostPortResolver_Registrar_register_Results) SecsHeartbeatInterval() uint32 {
	return capnp.Struct(s).Uint32(0)
}

func (s HostPortResolver_Registrar_register_Results) SetSecsHeartbeatInterval(v uint32) {
	capnp.Struct(s).SetUint32(0, v)
}

// HostPortResolver_Registrar_register_Results_List is a list of HostPortResolver_Registrar_register_Results.
type HostPortResolver_Registrar_register_Results_List = capnp.StructList[HostPortResolver_Registrar_register_Results]

// NewHostPortResolver_Registrar_register_Results creates a new list of HostPortResolver_Registrar_register_Results.
func NewHostPortResolver_Registrar_register_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_Registrar_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HostPortResolver_Registrar_register_Results](l), err
}

// HostPortResolver_Registrar_register_Results_Future is a wrapper for a HostPortResolver_Registrar_register_Results promised by a client call.
type HostPortResolver_Registrar_register_Results_Future struct{ *capnp.Future }

func (f HostPortResolver_Registrar_register_Results_Future) Struct() (HostPortResolver_Registrar_register_Results, error) {
	p, err := f.Future.Ptr()
	return HostPortResolver_Registrar_register_Results(p.Struct()), err
}
func (p HostPortResolver_Registrar_register_Results_Future) Heartbeat() HostPortResolver_Registrar_Heartbeat {
	return HostPortResolver_Registrar_Heartbeat(p.Future.Field(0, nil).Client())
}

type HostPortResolver_ResolveIdent_Params capnp.Struct

// HostPortResolver_ResolveIdent_Params_TypeID is the unique identifier for the type HostPortResolver_ResolveIdent_Params.
const HostPortResolver_ResolveIdent_Params_TypeID = 0xe6f8966f0f2cbb33

func NewHostPortResolver_ResolveIdent_Params(s *capnp.Segment) (HostPortResolver_ResolveIdent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Params(st), err
}

func NewRootHostPortResolver_ResolveIdent_Params(s *capnp.Segment) (HostPortResolver_ResolveIdent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Params(st), err
}

func ReadRootHostPortResolver_ResolveIdent_Params(msg *capnp.Message) (HostPortResolver_ResolveIdent_Params, error) {
	root, err := msg.Root()
	return HostPortResolver_ResolveIdent_Params(root.Struct()), err
}

func (s HostPortResolver_ResolveIdent_Params) String() string {
	str, _ := text.Marshal(0xe6f8966f0f2cbb33, capnp.Struct(s))
	return str
}

func (s HostPortResolver_ResolveIdent_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HostPortResolver_ResolveIdent_Params) DecodeFromPtr(p capnp.Ptr) HostPortResolver_ResolveIdent_Params {
	return HostPortResolver_ResolveIdent_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HostPortResolver_ResolveIdent_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HostPortResolver_ResolveIdent_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HostPortResolver_ResolveIdent_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HostPortResolver_ResolveIdent_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HostPortResolver_ResolveIdent_Params) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_ResolveIdent_Params) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HostPortResolver_ResolveIdent_Params) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_ResolveIdent_Params) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// HostPortResolver_ResolveIdent_Params_List is a list of HostPortResolver_ResolveIdent_Params.
type HostPortResolver_ResolveIdent_Params_List = capnp.StructList[HostPortResolver_ResolveIdent_Params]

// NewHostPortResolver_ResolveIdent_Params creates a new list of HostPortResolver_ResolveIdent_Params.
func NewHostPortResolver_ResolveIdent_Params_List(s *capnp.Segment, sz int32) (HostPortResolver_ResolveIdent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[HostPortResolver_ResolveIdent_Params](l), err
}

// HostPortResolver_ResolveIdent_Params_Future is a wrapper for a HostPortResolver_ResolveIdent_Params promised by a client call.
type HostPortResolver_ResolveIdent_Params_Future struct{ *capnp.Future }

func (f HostPortResolver_ResolveIdent_Params_Future) Struct() (HostPortResolver_ResolveIdent_Params, error) {
	p, err := f.Future.Ptr()
	return HostPortResolver_ResolveIdent_Params(p.Struct()), err
}

type HostPortResolver_ResolveIdent_Results capnp.Struct

// HostPortResolver_ResolveIdent_Results_TypeID is the unique identifier for the type HostPortResolver_ResolveIdent_Results.
const HostPortResolver_ResolveIdent_Results_TypeID = 0xfc185f518d220b8c

func NewHostPortResolver_ResolveIdent_Results(s *capnp.Segment) (HostPortResolver_ResolveIdent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Results(st), err
}

func NewRootHostPortResolver_ResolveIdent_Results(s *capnp.Segment) (HostPortResolver_ResolveIdent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return HostPortResolver_ResolveIdent_Results(st), err
}

func ReadRootHostPortResolver_ResolveIdent_Results(msg *capnp.Message) (HostPortResolver_ResolveIdent_Results, error) {
	root, err := msg.Root()
	return HostPortResolver_ResolveIdent_Results(root.Struct()), err
}

func (s HostPortResolver_ResolveIdent_Results) String() string {
	str, _ := text.Marshal(0xfc185f518d220b8c, capnp.Struct(s))
	return str
}

func (s HostPortResolver_ResolveIdent_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (HostPortResolver_ResolveIdent_Results) DecodeFromPtr(p capnp.Ptr) HostPortResolver_ResolveIdent_Results {
	return HostPortResolver_ResolveIdent_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s HostPortResolver_ResolveIdent_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s HostPortResolver_ResolveIdent_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s HostPortResolver_ResolveIdent_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s HostPortResolver_ResolveIdent_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s HostPortResolver_ResolveIdent_Results) Host() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s HostPortResolver_ResolveIdent_Results) HasHost() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s HostPortResolver_ResolveIdent_Results) HostBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s HostPortResolver_ResolveIdent_Results) SetHost(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s HostPortResolver_ResolveIdent_Results) Port() uint16 {
	return capnp.Struct(s).Uint16(0)
}

func (s HostPortResolver_ResolveIdent_Results) SetPort(v uint16) {
	capnp.Struct(s).SetUint16(0, v)
}

// HostPortResolver_ResolveIdent_Results_List is a list of HostPortResolver_ResolveIdent_Results.
type HostPortResolver_ResolveIdent_Results_List = capnp.StructList[HostPortResolver_ResolveIdent_Results]

// NewHostPortResolver_ResolveIdent_Results creates a new list of HostPortResolver_ResolveIdent_Results.
func NewHostPortResolver_ResolveIdent_Results_List(s *capnp.Segment, sz int32) (HostPortResolver_ResolveIdent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[HostPortResolver_ResolveIdent_Results](l), err
}

// HostPortResolver_ResolveIdent_Results_Future is a wrapper for a HostPortResolver_ResolveIdent_Results promised by a client call.
type HostPortResolver_ResolveIdent_Results_Future struct{ *capnp.Future }

func (f HostPortResolver_ResolveIdent_Results_Future) Struct() (HostPortResolver_ResolveIdent_Results, error) {
	p, err := f.Future.Ptr()
	return HostPortResolver_ResolveIdent_Results(p.Struct()), err
}

const schema_855efed3475f6b26 = "x\xda\x9cW\x7fl[W\x15>\xe7\xbdg?;\xb1" +
	"k_\xdf\x94\xd1\xb0\xc8\x90\xa6t\x0d\x8d\xd7\xd4]\x0a" +
	"\xd3\xaa6\x816MP\x85\xafC'\xd1\xa9]_\xec" +
	"\x9b\xc6\x9b\x7f\xf5\xbd\xe7\xb4\x99&\xb2\x8a\xa1\x8dmQ" +
	"\xd7\xa1M\x0c\x81\xbaI\x14\xb4I\xd3\xa6j\x9aTP" +
	"\x85Z\x0d\x09\x98&\x91\xa22\xb5\x9b&\x18\xe2\x87\xc6" +
	"\x10\xa2\xff\x00e\xec\xa1\xfb\xfc\x9e\xef\x8b\xe7\xa6\xed\xfe" +
	"\xa9\xea{\xcf;\xe7\xdc\xef|\xe7;'\x9b^\xd1v" +
	"h\xc3\xf1C1P\xd8\x93\xa1\xb0S\xbb\xb2\xf8\xbb\x0b" +
	"O\xbd\xfb\x08\x90!\xd59\xfd\xe4\xaez\xe3_\xbf~" +
	"\x05\x00\xb3k\xc2?E:\x1c\xd6\x01\xe8Px\x9c\xee" +
	"\x15\xffs\xf6\xbc\xfb\xad\xbe\xf5\xb3\x95G\x81\xa4\xd0\xf9" +
	"\xfc\xfd\xf7\x8e\xff\xf6\xa3\x03\xdf\x86\x90\"\xac\xb6\x85\xdf" +
	"\xa3\x13\xe1\xf5\x00t\x7f\xf8\x08\xa0\x93\xcf\x9c\xfc\xd4\xb1" +
	"D\xfd8\x90>\xd5\xe1o\x8c\xbc\xf3\xdc\xe5\x9f\x9c\x13" +
	"\x9e\xcf\x86M\xa4K\xae\xe77\xc3\xe3\xb4O\x17\x9eK" +
	"\x8f}\xe76m\xff\xe9\xe3\xc0zQu\xe2\xf7<w" +
	"8|l\xfc\xbf\xb0\x1au\x04\xa0!\xfd\x0a \x8d\xea" +
	"\xc2\xef\xd4_\x93\x03\x7f\xac\x0e}\x17X\x06\x11@\xd3" +
	"\x01\xb2\\\xbf\x82\x80t^\xdf\x0e\xe8\x1c\xf8\xf1WN" +
	"\xdd~>\xf94\x90\xad\xfe\xfd\xb3z\xbf\x02\x9asW" +
	"\xe6\xd2\xfa\x87?\xf7\xdaI )U\xa6\x0fHO\xe8" +
	"\x97\xe9\x0f\xf5[\x00\xe8\x0b\xfa8]r3Z\xfd\xe0" +
	"C\x97>\xfb\xc4\xdb?\x02\x92\xf1\xdd\x9c\xd1\xdfG\xd0" +
	"\x9c\x93}\xbfy\xed\xea\x89\xc5\x17\xdb\xddd_\xd2{" +
	"\x91\x9eu\xfd\xfcJ\x1f\xa7k\"\xeb\x01$\xa8d\xad" +
	"*?\x05\xcc\x92\xc8}H\xd7\x09\x1b:\x1a\x19\xa7\x95" +
	"\x88\x88\x9a\x88\xefr\xa6\x8f\xe3\xcf\x81\x0d!\xcaoC" +
	"\xaa\x88\xbf7\xf2\x1e\xd2\xc3\xc2\x8eV\"\x7f\x01\x94\xb0" +
	"\xb6?hg\xf4}\xca\xa2[\x01\xe8\xb1\xe88}!" +
	"*\\\xdf\xf9\xd6\xd6\xc9\xb9?\x8d\xfe\x02\xc8gPB" +
	"\xe1\x16/{\":\x89\xf4\x940\xa3\xcfG\x05\xca_" +
	"V\x0f\xf4\xbf\xfe\xe2\xef/\x02\xe9\x0b\x84\x09\xa10\x0e" +
	"u\x8d!]\xdd%\x8cI\x97@\xfc\x91\x87^\x7f\xfb" +
	"\xca\x9b\x1f\\\xeaD\x8b\xe1\xae\x0bt\x9bk\xfb\xa5." +
	"\xe1x\xdd\x9e\xcc\xba\xbe\xca3\x97E\x16\xe09|\xba" +
	"k\x9f(\xdf\xf3\xae3\xfa\xc1\xc6\xef\xfdc\xe9\x9ew" +
	"\xda\"\xbbi\x9e\xeb\x9aDz\xd1\xf5\xb6\xe4z[\\" +
	"z\xfc\xa2\xbd\xbf\xeb\x0f\xc0R\xa8\xc9\xd0\xa2Z\xf4\x8e" +
	"\xee\xf3t[\xb7\x1b\xb9[\x80\x95\xfd\xd9\xc6D\xed\x99" +
	"\x7f\xff\x19\xc8\xdaV\xe4\xbe\xd8S\"\xf2PLD\xde" +
	"{\xaa\xfb\x9b\x13u\xe7o\x01\xe2\xec\x89\xf5\x0a\xe2<" +
	"\xfa*Yx\xf5\x0b\xa3W\x81\xdd\x8a(\xbb`'\xea" +
	"\x0a@vg,\x85toLDb1\x91\xd5\x99\xc7" +
	"\xff\x93\x9d9\xf6\xe1U\xb7\x88~\xa8\x97b.G\xcf" +
	"\xb9\x16-\x82\xb3\x14\x06*'\x1cb\x94n\x88_\xa0" +
	"w\xc4]\xf4\xe2/\x03:Ot\xf7/\xb2{?\xfd" +
	"!\xb0\xb5\x01\x7f\xf1\xef\x0b\x7fg\xe3\xc2\xdf\xda#\xbf" +
	"<\xf8\xf7g\xdf\xfa\x1f\x90[\x03\xf95\x0d\xd7\xacJ" +
	"!\xdd\xb0J\xb8[\xb7j;<\xe0\xd4\xb9i\x95," +
	"\x9b\x87\xaa\x05\x9e)\x18\xf5j\xfd\xce\xdd5\xcb\xce\xd5" +
	"L;\xcf\xadZy\x8e\x9b\x99<?T\xb2l\xd30" +
	"3\xbb\xb9\xb1\xdd\xb4\xa7\xb9a\xe7\x10\x99\xa6\x86\x00Z" +
	"H\xa1\xdfk\x84\x0c\x82BBzB\xd8\xed\xc0\x1cb" +
	"+\x8a\"\xa3L\xd9\x0d\xb38\xaf\xe7\xf9\x0c\x8b`0" +
	"\xe9\xe8f\x091\x09mN\x7f\xedH\x95\x9b\xe9\xaf\xd7" +
	"\xee\xe7U\x16Q5\x00\x0d\x01\xc8\x86~\x006\xa0\"" +
	"\xdb\xa4 A\xec\x11X\x90\xa1I\x00\xb6QE\xf6E" +
	"\x05\xf59\xc3\xc6\xa4\xa4# &\x01\x9dr\xad`\x94" +
	"\xf3|\x06\x000)\x03y\xb7~\x9e\x9a\xcc3\xe7\x1d" +
	"U\xedL\x9e\x97\xb9aq\x91y\xba8\x9f\xe73\x12" +
	"\x04_ \xd0W$B\xc6\x08I\x03\x92!}\xc1l" +
	"~\xc74T\x9c\x7f.\xde~K\xea\xe0\x99\xf3\xc04" +
	"\x05G{\x10c\x00\x04\xf3\x8eg3\x05\x98\x07\xb8&" +
	"h\xa3\xc5\xa2\xc9\xad\xb4\x95)\xd5G\x82`\x8cu\x02" +
	"C\x1c\xde\xa6\"\xdb\xa2\xe0B\xb9v\x84\x9b#[0" +
	"\x0a\x0aF\x01\x17\x1a\xf5z\xf0w+V\xf8z\x0fw" +
	"\xdf\x9d\xf1\xb2\x1d\xc8\xf3\xb4\xd5(\xdb\x16\xd3Z\xb9\xc4" +
	"E\xd8\x88\x8a\xacG\xc1\x05\xabQ(p\xcbB\x04\x05" +
	"1\x10F\xbfQ\xb65\xc9\x96\x11\xff\x0c\xe4\xb9\xd5\xd0" +
	"\xcb\xb6\xd5\x09\x98<\xb7\xec\x9a\xa9r\x93i\x88\x01u" +
	"C\xd3i^\xf1\x1c\xa4\x0d\xd3\xa8X^\xc1|\x13\xf4" +
	"5\x88\x901\x97\xb5\x0bf\xd3~y\x0dn\x12\x97\x9c" +
	"\x91\x10\xb1Z\x9f\xab\xd7z\xaf\x9f\xb1\x1c\x0c\x98w|" +
	"\x04\x00M/[_\xae\xd0\xef\xfe\xe5\xf4r\x91[\x81" +
	"^\xf79\x1e\xba\x13\x90(\xf2\xaa-\x18\xe6v\xdd\xc5" +
	"\xdd?\xf8\xc6\x1bK/\x9f\x06\x009\x05\x00:\xf5A" +
	"\xe7:%D\xa1\\Wry\x88\xe6\xe5\xe4\"\xd1\x07" +
	"\x1c\xbf\x8c\x80\xb6\xf74n\xc2\xf6\\\xb0\x1a\xbe=\xfa" +
	"jI\xc8$($\xaa;\xa6\xffA{W\x84o\x88" +
	"B~\xbc\x9ca\xeaF\xc5\x12\x0d\x9blQ\xd5\x98\x06" +
	"`\x07Ud\xe5@\xdb\x94\x06\x01XQEVW\x10" +
	"\x95\x1eT\x00HE\x9c\xcd\xaa\xc8l\x05\x89\xaa\xf4\xa0" +
	"\x0a@\x0eo\x06`e\x15\xd9Q\x05\x9di\xc3\xe2#" +
	"[\xee6@\xb7'\x8a\x18\x03\x05c\x80\x89\xd9\x9ae" +
	"\xb7~\xd4k\xa6\x8d:(\xa8\x03\xa6\x8dr\xc9\xb0\xfc" +
	"\xabN\x84n\xb2,!h\xc6b\x18\x9c\xc1d_`" +
	",\x92\xe9\xc0nE\x1es\xa6\x8c9.\x90\x05\xb5b" +
	"\xb9?D\xd3\x80\xdb5>Y\xd1g+\x80\x87\xbe\xef" +
	"\x1b}\xbf-\x05\xb7\x8c\xb9\xb6F\xd0\xda{\xce\x85\xbb" +
	"\xd9anE\x01\x04\xc8\x01m\x9a\x942\xd4\x02yX" +
	"\x1cnR\x91\xdd\xa5\\O\x92-n\x94yql\xbe" +
	"y\xdb\x1a\x137$\xd8>\x1a\x15\x0b\x9aR\xddY\xa4" +
	"\xb8Q\xdeU3W\xf0\x1e\xa8\xcb\xdd\x86\x9d3l\x9c" +
	"m{d\xefu\x04X-\x151)7\x94\xa6\xff\x05" +
	"\xc3\x95s\x0b\x93r\x07\xb8\xf6\xbbZp{\x02\xe5\xea" +
	"aY].\xbe\xfd\xf2]z\xc1\xa8cJS\x011" +
	"uCH\xb9\xfe\xec\x8f\x170\x7f\xbd\x02Z\x1e\xa3\x00" +
	"g0)7\x0e\xef)\x8d\xaa`\xd1T\xbeY\xc0\xf6" +
	"\xdb\xce\x10O\x14\xa1\xadU\xf7uj\xd5}\x81\xb6T" +
	"\xbc^=,\x0e\xeb*\xb2\x07E\xaf\xaa\xcd^\x9d\x17" +
	"\x87GUd\x0f+\xe8\xd4\x1b\xd3\xe5R\xe1\xab\x1c\xd4" +
	"\xf9Mr\x00\xca\xc3\xe1N\x87\x9b;\x1df?6?" +
	"WZ\xa3<\x9d\x1ep\x19\x89\xcb\xca\xd6+\xcb&\x98" +
	"\xd2\xae\x0b\x9fh\\\x8a0j\xe7\x19$\x07\x96X\xab" +
	"\xb0\xea\x15<\xe68\xcd\x8a\x0fJ6\xc7\xf1#\xc7\xa3" +
	"\xf3\xa0\xe4A\xc2\xe6G\xa5\xb2\x15\x0d\xdb\xc08(\x18" +
	"\x87\x9b\xd5g_\xde\xe5&\xd1\x99x-\xde\x9d\x06`" +
	"[Td;\x14tf\xe5`A\"\x07\x10 \x12W" +
	"8\x0a\x96\x80\x04]L&\xaav\x9a\x9bsF\x19#" +
	"\xa0`\x04VX\xaf\xd0\x1d\x131\x17\x0fD\xf9\xd7(" +
	"\xd9\xd9\x0f\x0aQ\"M\x9e\x05\xe1h\x82$\x886<" +
	"\x18\xd8@K\xf5\x91e\xaa\xbfl\x1e\xdc\x14eZ\xad" +
	"\x1e@'P\xa4\x96\xe2\x04Kt\xcd\xe1\xb32#\xc4" +
	"\xba\x8df\x9b\\\x0eJ~&\x0e5$C\xff\x1f\x00" +
	"\x00\xff\xffW\x0a\x9a\x93"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_855efed3475f6b26,
		Nodes: []uint64{
			0x87de92d2d68df26f,
			0x886d68271d83de4d,
			0x8f700f81169f2e52,
			0x8fb25d0428898a69,
			0x932d6ee32410e853,
			0x9510c22fa544a65e,
			0x9fb6218427d92e3c,
			0xa4db8c20d9807c15,
			0xaa8d91fab6d01d9f,
			0xb0caf775704690b2,
			0xbf018f62ff460d0f,
			0xc1a7daa0dc36cb65,
			0xc541e5764a37d73a,
			0xd5e0aac4225e0343,
			0xd9eccdf2dbc48087,
			0xda966d1d252e4d25,
			0xdc5bd1ef982cec13,
			0xe10a5d74d58bd18d,
			0xe6f8966f0f2cbb33,
			0xebff70497e0ba555,
			0xfa412bb47f11b488,
			0xfafc816633f98bb9,
			0xfb47810671a05b0d,
			0xfc185f518d220b8c,
			0xfdd799ed60c87723,
		},
		Compressed: true,
	})
}
