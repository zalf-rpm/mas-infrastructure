// Code generated by capnpc-go. DO NOT EDIT.

package monica

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	math "math"
)

type SoilCharacteristicData capnp.Struct

// SoilCharacteristicData_TypeID is the unique identifier for the type SoilCharacteristicData.
const SoilCharacteristicData_TypeID = 0xfc682227304e2281

func NewSoilCharacteristicData(s *capnp.Segment) (SoilCharacteristicData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicData(st), err
}

func NewRootSoilCharacteristicData(s *capnp.Segment) (SoilCharacteristicData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicData(st), err
}

func ReadRootSoilCharacteristicData(msg *capnp.Message) (SoilCharacteristicData, error) {
	root, err := msg.Root()
	return SoilCharacteristicData(root.Struct()), err
}

func (s SoilCharacteristicData) String() string {
	str, _ := text.Marshal(0xfc682227304e2281, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicData) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicData) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicData {
	return SoilCharacteristicData(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicData) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicData) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicData) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicData) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicData) List() (SoilCharacteristicData_Data_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilCharacteristicData_Data_List(p.List()), err
}

func (s SoilCharacteristicData) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicData) SetList(v SoilCharacteristicData_Data_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated SoilCharacteristicData_Data_List, preferring placement in s's segment.
func (s SoilCharacteristicData) NewList(n int32) (SoilCharacteristicData_Data_List, error) {
	l, err := NewSoilCharacteristicData_Data_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilCharacteristicData_Data_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SoilCharacteristicData_List is a list of SoilCharacteristicData.
type SoilCharacteristicData_List = capnp.StructList[SoilCharacteristicData]

// NewSoilCharacteristicData creates a new list of SoilCharacteristicData.
func NewSoilCharacteristicData_List(s *capnp.Segment, sz int32) (SoilCharacteristicData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicData](l), err
}

// SoilCharacteristicData_Future is a wrapper for a SoilCharacteristicData promised by a client call.
type SoilCharacteristicData_Future struct{ *capnp.Future }

func (f SoilCharacteristicData_Future) Struct() (SoilCharacteristicData, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicData(p.Struct()), err
}

type SoilCharacteristicData_Data capnp.Struct

// SoilCharacteristicData_Data_TypeID is the unique identifier for the type SoilCharacteristicData_Data.
const SoilCharacteristicData_Data_TypeID = 0xeafaab57e025db63

func NewSoilCharacteristicData_Data(s *capnp.Segment) (SoilCharacteristicData_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicData_Data(st), err
}

func NewRootSoilCharacteristicData_Data(s *capnp.Segment) (SoilCharacteristicData_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicData_Data(st), err
}

func ReadRootSoilCharacteristicData_Data(msg *capnp.Message) (SoilCharacteristicData_Data, error) {
	root, err := msg.Root()
	return SoilCharacteristicData_Data(root.Struct()), err
}

func (s SoilCharacteristicData_Data) String() string {
	str, _ := text.Marshal(0xeafaab57e025db63, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicData_Data) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicData_Data) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicData_Data {
	return SoilCharacteristicData_Data(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicData_Data) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicData_Data) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicData_Data) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicData_Data) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicData_Data) SoilType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilCharacteristicData_Data) HasSoilType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicData_Data) SoilTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilCharacteristicData_Data) SetSoilType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilCharacteristicData_Data) SoilRawDensity() int16 {
	return int16(capnp.Struct(s).Uint16(0))
}

func (s SoilCharacteristicData_Data) SetSoilRawDensity(v int16) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s SoilCharacteristicData_Data) AirCapacity() uint8 {
	return capnp.Struct(s).Uint8(2)
}

func (s SoilCharacteristicData_Data) SetAirCapacity(v uint8) {
	capnp.Struct(s).SetUint8(2, v)
}

func (s SoilCharacteristicData_Data) FieldCapacity() uint8 {
	return capnp.Struct(s).Uint8(3)
}

func (s SoilCharacteristicData_Data) SetFieldCapacity(v uint8) {
	capnp.Struct(s).SetUint8(3, v)
}

func (s SoilCharacteristicData_Data) NFieldCapacity() uint8 {
	return capnp.Struct(s).Uint8(4)
}

func (s SoilCharacteristicData_Data) SetNFieldCapacity(v uint8) {
	capnp.Struct(s).SetUint8(4, v)
}

// SoilCharacteristicData_Data_List is a list of SoilCharacteristicData_Data.
type SoilCharacteristicData_Data_List = capnp.StructList[SoilCharacteristicData_Data]

// NewSoilCharacteristicData_Data creates a new list of SoilCharacteristicData_Data.
func NewSoilCharacteristicData_Data_List(s *capnp.Segment, sz int32) (SoilCharacteristicData_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicData_Data](l), err
}

// SoilCharacteristicData_Data_Future is a wrapper for a SoilCharacteristicData_Data promised by a client call.
type SoilCharacteristicData_Data_Future struct{ *capnp.Future }

func (f SoilCharacteristicData_Data_Future) Struct() (SoilCharacteristicData_Data, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicData_Data(p.Struct()), err
}

type SoilCharacteristicModifier capnp.Struct

// SoilCharacteristicModifier_TypeID is the unique identifier for the type SoilCharacteristicModifier.
const SoilCharacteristicModifier_TypeID = 0xe4eb0a9bb0e5bb53

func NewSoilCharacteristicModifier(s *capnp.Segment) (SoilCharacteristicModifier, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicModifier(st), err
}

func NewRootSoilCharacteristicModifier(s *capnp.Segment) (SoilCharacteristicModifier, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SoilCharacteristicModifier(st), err
}

func ReadRootSoilCharacteristicModifier(msg *capnp.Message) (SoilCharacteristicModifier, error) {
	root, err := msg.Root()
	return SoilCharacteristicModifier(root.Struct()), err
}

func (s SoilCharacteristicModifier) String() string {
	str, _ := text.Marshal(0xe4eb0a9bb0e5bb53, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicModifier) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicModifier) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicModifier {
	return SoilCharacteristicModifier(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicModifier) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicModifier) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicModifier) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicModifier) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicModifier) List() (SoilCharacteristicModifier_Data_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SoilCharacteristicModifier_Data_List(p.List()), err
}

func (s SoilCharacteristicModifier) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicModifier) SetList(v SoilCharacteristicModifier_Data_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated SoilCharacteristicModifier_Data_List, preferring placement in s's segment.
func (s SoilCharacteristicModifier) NewList(n int32) (SoilCharacteristicModifier_Data_List, error) {
	l, err := NewSoilCharacteristicModifier_Data_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SoilCharacteristicModifier_Data_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SoilCharacteristicModifier_List is a list of SoilCharacteristicModifier.
type SoilCharacteristicModifier_List = capnp.StructList[SoilCharacteristicModifier]

// NewSoilCharacteristicModifier creates a new list of SoilCharacteristicModifier.
func NewSoilCharacteristicModifier_List(s *capnp.Segment, sz int32) (SoilCharacteristicModifier_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicModifier](l), err
}

// SoilCharacteristicModifier_Future is a wrapper for a SoilCharacteristicModifier promised by a client call.
type SoilCharacteristicModifier_Future struct{ *capnp.Future }

func (f SoilCharacteristicModifier_Future) Struct() (SoilCharacteristicModifier, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicModifier(p.Struct()), err
}

type SoilCharacteristicModifier_Data capnp.Struct

// SoilCharacteristicModifier_Data_TypeID is the unique identifier for the type SoilCharacteristicModifier_Data.
const SoilCharacteristicModifier_Data_TypeID = 0xa968a46ccde8b1b4

func NewSoilCharacteristicModifier_Data(s *capnp.Segment) (SoilCharacteristicModifier_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicModifier_Data(st), err
}

func NewRootSoilCharacteristicModifier_Data(s *capnp.Segment) (SoilCharacteristicModifier_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SoilCharacteristicModifier_Data(st), err
}

func ReadRootSoilCharacteristicModifier_Data(msg *capnp.Message) (SoilCharacteristicModifier_Data, error) {
	root, err := msg.Root()
	return SoilCharacteristicModifier_Data(root.Struct()), err
}

func (s SoilCharacteristicModifier_Data) String() string {
	str, _ := text.Marshal(0xa968a46ccde8b1b4, capnp.Struct(s))
	return str
}

func (s SoilCharacteristicModifier_Data) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SoilCharacteristicModifier_Data) DecodeFromPtr(p capnp.Ptr) SoilCharacteristicModifier_Data {
	return SoilCharacteristicModifier_Data(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SoilCharacteristicModifier_Data) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SoilCharacteristicModifier_Data) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SoilCharacteristicModifier_Data) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SoilCharacteristicModifier_Data) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SoilCharacteristicModifier_Data) SoilType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SoilCharacteristicModifier_Data) HasSoilType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SoilCharacteristicModifier_Data) SoilTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SoilCharacteristicModifier_Data) SetSoilType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SoilCharacteristicModifier_Data) OrganicMatter() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(0))
}

func (s SoilCharacteristicModifier_Data) SetOrganicMatter(v float32) {
	capnp.Struct(s).SetUint32(0, math.Float32bits(v))
}

func (s SoilCharacteristicModifier_Data) AirCapacity() int8 {
	return int8(capnp.Struct(s).Uint8(4))
}

func (s SoilCharacteristicModifier_Data) SetAirCapacity(v int8) {
	capnp.Struct(s).SetUint8(4, uint8(v))
}

func (s SoilCharacteristicModifier_Data) FieldCapacity() int8 {
	return int8(capnp.Struct(s).Uint8(5))
}

func (s SoilCharacteristicModifier_Data) SetFieldCapacity(v int8) {
	capnp.Struct(s).SetUint8(5, uint8(v))
}

func (s SoilCharacteristicModifier_Data) NFieldCapacity() int8 {
	return int8(capnp.Struct(s).Uint8(6))
}

func (s SoilCharacteristicModifier_Data) SetNFieldCapacity(v int8) {
	capnp.Struct(s).SetUint8(6, uint8(v))
}

// SoilCharacteristicModifier_Data_List is a list of SoilCharacteristicModifier_Data.
type SoilCharacteristicModifier_Data_List = capnp.StructList[SoilCharacteristicModifier_Data]

// NewSoilCharacteristicModifier_Data creates a new list of SoilCharacteristicModifier_Data.
func NewSoilCharacteristicModifier_Data_List(s *capnp.Segment, sz int32) (SoilCharacteristicModifier_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SoilCharacteristicModifier_Data](l), err
}

// SoilCharacteristicModifier_Data_Future is a wrapper for a SoilCharacteristicModifier_Data promised by a client call.
type SoilCharacteristicModifier_Data_Future struct{ *capnp.Future }

func (f SoilCharacteristicModifier_Data_Future) Struct() (SoilCharacteristicModifier_Data, error) {
	p, err := f.Future.Ptr()
	return SoilCharacteristicModifier_Data(p.Struct()), err
}

type CapillaryRiseRate capnp.Struct

// CapillaryRiseRate_TypeID is the unique identifier for the type CapillaryRiseRate.
const CapillaryRiseRate_TypeID = 0x9b169bc96bb3d24b

func NewCapillaryRiseRate(s *capnp.Segment) (CapillaryRiseRate, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapillaryRiseRate(st), err
}

func NewRootCapillaryRiseRate(s *capnp.Segment) (CapillaryRiseRate, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return CapillaryRiseRate(st), err
}

func ReadRootCapillaryRiseRate(msg *capnp.Message) (CapillaryRiseRate, error) {
	root, err := msg.Root()
	return CapillaryRiseRate(root.Struct()), err
}

func (s CapillaryRiseRate) String() string {
	str, _ := text.Marshal(0x9b169bc96bb3d24b, capnp.Struct(s))
	return str
}

func (s CapillaryRiseRate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapillaryRiseRate) DecodeFromPtr(p capnp.Ptr) CapillaryRiseRate {
	return CapillaryRiseRate(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapillaryRiseRate) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapillaryRiseRate) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapillaryRiseRate) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapillaryRiseRate) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapillaryRiseRate) List() (CapillaryRiseRate_Data_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return CapillaryRiseRate_Data_List(p.List()), err
}

func (s CapillaryRiseRate) HasList() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapillaryRiseRate) SetList(v CapillaryRiseRate_Data_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewList sets the list field to a newly
// allocated CapillaryRiseRate_Data_List, preferring placement in s's segment.
func (s CapillaryRiseRate) NewList(n int32) (CapillaryRiseRate_Data_List, error) {
	l, err := NewCapillaryRiseRate_Data_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return CapillaryRiseRate_Data_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// CapillaryRiseRate_List is a list of CapillaryRiseRate.
type CapillaryRiseRate_List = capnp.StructList[CapillaryRiseRate]

// NewCapillaryRiseRate creates a new list of CapillaryRiseRate.
func NewCapillaryRiseRate_List(s *capnp.Segment, sz int32) (CapillaryRiseRate_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[CapillaryRiseRate](l), err
}

// CapillaryRiseRate_Future is a wrapper for a CapillaryRiseRate promised by a client call.
type CapillaryRiseRate_Future struct{ *capnp.Future }

func (f CapillaryRiseRate_Future) Struct() (CapillaryRiseRate, error) {
	p, err := f.Future.Ptr()
	return CapillaryRiseRate(p.Struct()), err
}

type CapillaryRiseRate_Data capnp.Struct

// CapillaryRiseRate_Data_TypeID is the unique identifier for the type CapillaryRiseRate_Data.
const CapillaryRiseRate_Data_TypeID = 0xb78a89c58fad885d

func NewCapillaryRiseRate_Data(s *capnp.Segment) (CapillaryRiseRate_Data, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapillaryRiseRate_Data(st), err
}

func NewRootCapillaryRiseRate_Data(s *capnp.Segment) (CapillaryRiseRate_Data, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CapillaryRiseRate_Data(st), err
}

func ReadRootCapillaryRiseRate_Data(msg *capnp.Message) (CapillaryRiseRate_Data, error) {
	root, err := msg.Root()
	return CapillaryRiseRate_Data(root.Struct()), err
}

func (s CapillaryRiseRate_Data) String() string {
	str, _ := text.Marshal(0xb78a89c58fad885d, capnp.Struct(s))
	return str
}

func (s CapillaryRiseRate_Data) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (CapillaryRiseRate_Data) DecodeFromPtr(p capnp.Ptr) CapillaryRiseRate_Data {
	return CapillaryRiseRate_Data(capnp.Struct{}.DecodeFromPtr(p))
}

func (s CapillaryRiseRate_Data) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s CapillaryRiseRate_Data) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s CapillaryRiseRate_Data) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s CapillaryRiseRate_Data) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s CapillaryRiseRate_Data) SoilType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s CapillaryRiseRate_Data) HasSoilType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s CapillaryRiseRate_Data) SoilTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s CapillaryRiseRate_Data) SetSoilType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s CapillaryRiseRate_Data) Distance() uint8 {
	return capnp.Struct(s).Uint8(0)
}

func (s CapillaryRiseRate_Data) SetDistance(v uint8) {
	capnp.Struct(s).SetUint8(0, v)
}

func (s CapillaryRiseRate_Data) Rate() float32 {
	return math.Float32frombits(capnp.Struct(s).Uint32(4))
}

func (s CapillaryRiseRate_Data) SetRate(v float32) {
	capnp.Struct(s).SetUint32(4, math.Float32bits(v))
}

// CapillaryRiseRate_Data_List is a list of CapillaryRiseRate_Data.
type CapillaryRiseRate_Data_List = capnp.StructList[CapillaryRiseRate_Data]

// NewCapillaryRiseRate_Data creates a new list of CapillaryRiseRate_Data.
func NewCapillaryRiseRate_Data_List(s *capnp.Segment, sz int32) (CapillaryRiseRate_Data_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[CapillaryRiseRate_Data](l), err
}

// CapillaryRiseRate_Data_Future is a wrapper for a CapillaryRiseRate_Data promised by a client call.
type CapillaryRiseRate_Data_Future struct{ *capnp.Future }

func (f CapillaryRiseRate_Data_Future) Struct() (CapillaryRiseRate_Data, error) {
	p, err := f.Future.Ptr()
	return CapillaryRiseRate_Data(p.Struct()), err
}

const schema_f83caca0747996ab = "x\xda\x9c\x94\xcdk\x14I\x18\xc6\xdf\xa7\xaaf\xb2\x84" +
	"d\xb3M\x0f\xbb\xeci \xec\x12\xc8!\x1f\x08\x82A" +
	"\x18aF\xc1\x8f\xc8Tb\xd0\x83A\xca\x9e\x8e)\xec" +
	"\xcc4=\x0d2A\x0f\x82\x81\x18\x0czPQb " +
	"\x07\x05C\x145\x0a\x1e<{\xc8\xc1K\xf0\xa4\x17\x05" +
	"\x05?\xfe\x01\x0dBKe\x92\xce\xc8L0\xc9\xadx" +
	"\xea\xadz\xdfz\x9e_w\xcfk\xec\x13\xbd\xad\x1d\x82" +
	"\x98\xecI$\xa3\xc3\xcbO\xcf.\xcd\xfc=CV\x1a" +
	"\xd1\xc2\xcdJ8\xf7`\xef7J\xa0\x89h\xd7wL" +
	"\xc1\xb6\xd8?D\xf6\xbf,C\x88\x9e=\xf9\xf4\xca\xbb" +
	";:O\xb2\x0f\x88\x06_||<\xd3\xfc\xf5\xc3Z" +
	"\xf5A\xb6\x02\xdbef\xa9X\x1a\x84hx\xf2\xe1\xd5" +
	"\x97\x97\xa7\x9e\x93\xec\x056:U\xcb'\xf8\"\xecY" +
	"\xdeDd\xdf\xe6\x8f\xa8\xe6\xba\x06\x93\xec\x11\xcb\xb0\x87" +
	"\x84\x99dX\x98I\x9c\xb7\xff\xbf;\xbe\xb0\xf2\x85\xe4" +
	"n \xba\xd8~\xb4\xa7\xa3}\xf4\xc7Z\xf5\xb4x\x03" +
	"{^\x98\xe5=\xb1:I\\\xd0\xe0\xee\xa5\xc4\"\xec" +
	"\xf7\x09s\xf7\xe7D\x86\xb2\xd1X\xa9\xe0z\xddc\xa5" +
	"DQ;\xaa\xbb\\\xd2\xde)_\x05j\xac\xdc\xe5(" +
	"\xbf\xe8\xf7e\x95\xaf=O\x05\x95\x01]v\x07T\xe8" +
	"\x12I\x81\x9a\xe7Z\xe8l\xcb\xa9PI\xc1\x05\x91\x00" +
	"\x91\xd5\xdaI$\xff\xe0\x90\xff1\xb4y\xba\x1c\xe2O" +
	"B\x9e\x03\x7fm\x1c#\x181n\x9f\xdc\xa4\xfd`I" +
	"{\xd9Q\x15('t\x03]\x0e\xb5\xd3_*\xe8\x11" +
	"\xedf\x82.\xd35\x0f\xc8T\xdc\xf8\xc2!\"y\x9e" +
	"CN2\x00)\x18m\" \x92\x978\xe45\x06\x8b" +
	"\x89\x14\x18\x915}\x9aH^\xe1\x90\xb7\x18,\x9eH" +
	"\x81\x13Y7L\xe5u\x0e9\xc7`\x89d\x0a\x82\xc8" +
	"\x9a\x1d'\x92w8\xe4}\x86\xc8\xccw\xac\xe2\xbbD" +
	"\x84\x16bh!D\xa5\xe0\x8c*j\xa7\x9f\xd2*\x0c" +
	"\xdd\x00\xcd\xc4\xd0L\x88\x94\x0e\xb2\xcaW\x0e5\xe9\xb0" +
	"\x02F\x0c\x8c\x10\x8dh\xd7+d\x95Oi\xe5\xd4\xea" +
	"\xc5\x03\xd5\x0d\xca\xf8\xbfnl;\x9ft\xecKK\xec" +
	"\xcb~\xe3K\x8eC\xe67|\xe97\xda\x11\x0ey\xc2" +
	"\xf8\x82\xaa/C&\xb9<\x87<\xb9\xc9k\x0b\xba\x1c" +
	"\xaa\xa2\xb3\xaa%\x89!Ih\x0bT\xe8\xc6\xcf\xdeq" +
	"\xa0\x08V\xb9\x8a\xbf\xba\xedq\x15\x1f\xdb1W\xa6W" +
	"WN\xf1-15^\xcb\x14k\xc4\x14o\xc4\x94\xd8" +
	"\"SF\x1bP\xe7r\x94q\x8beC\x03'\x06^" +
	"\x07\xd5Z\x00uP\xad\xebuP\xado\xfc\x0e\xaa:" +
	"w\xd2N5\x0a\xd4\xfc\x8c\xb6\x17P|\xac\x1a\xd0\xcf" +
	"\x00\x00\x00\xff\xff5K\x82i"
