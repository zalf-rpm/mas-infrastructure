// Code generated by capnpc-go. DO NOT EDIT.

package test

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type A capnp.Client

// A_TypeID is the unique identifier for the type A.
const A_TypeID = 0xba9eff6fb3abc84f

func (c A) Method(ctx context.Context, params func(A_method_Params) error) (A_method_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xba9eff6fb3abc84f,
			MethodID:      0,
			InterfaceName: "a.capnp:A",
			MethodName:    "method",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(A_method_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return A_method_Results_Future{Future: ans.Future()}, release

}

func (c A) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c A) String() string {
	return "A(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c A) AddRef() A {
	return A(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c A) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c A) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c A) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (A) DecodeFromPtr(p capnp.Ptr) A {
	return A(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c A) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c A) IsSame(other A) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c A) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c A) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A A_Server is a A with a local implementation.
type A_Server interface {
	Method(context.Context, A_method) error
}

// A_NewServer creates a new Server from an implementation of A_Server.
func A_NewServer(s A_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(A_Methods(nil, s), s, c)
}

// A_ServerToClient creates a new Client from an implementation of A_Server.
// The caller is responsible for calling Release on the returned Client.
func A_ServerToClient(s A_Server) A {
	return A(capnp.NewClient(A_NewServer(s)))
}

// A_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func A_Methods(methods []server.Method, s A_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xba9eff6fb3abc84f,
			MethodID:      0,
			InterfaceName: "a.capnp:A",
			MethodName:    "method",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Method(ctx, A_method{call})
		},
	})

	return methods
}

// A_method holds the state for a server call to A.method.
// See server.Call for documentation.
type A_method struct {
	*server.Call
}

// Args returns the call's arguments.
func (c A_method) Args() A_method_Params {
	return A_method_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c A_method) AllocResults() (A_method_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A_method_Results(r), err
}

// A_List is a list of A.
type A_List = capnp.CapList[A]

// NewA creates a new list of A.
func NewA_List(s *capnp.Segment, sz int32) (A_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[A](l), err
}

type A_method_Params capnp.Struct

// A_method_Params_TypeID is the unique identifier for the type A_method_Params.
const A_method_Params_TypeID = 0xc506e9c0e16825f7

func NewA_method_Params(s *capnp.Segment) (A_method_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A_method_Params(st), err
}

func NewRootA_method_Params(s *capnp.Segment) (A_method_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A_method_Params(st), err
}

func ReadRootA_method_Params(msg *capnp.Message) (A_method_Params, error) {
	root, err := msg.Root()
	return A_method_Params(root.Struct()), err
}

func (s A_method_Params) String() string {
	str, _ := text.Marshal(0xc506e9c0e16825f7, capnp.Struct(s))
	return str
}

func (s A_method_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (A_method_Params) DecodeFromPtr(p capnp.Ptr) A_method_Params {
	return A_method_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s A_method_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s A_method_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s A_method_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s A_method_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s A_method_Params) Param() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s A_method_Params) HasParam() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s A_method_Params) ParamBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s A_method_Params) SetParam(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// A_method_Params_List is a list of A_method_Params.
type A_method_Params_List = capnp.StructList[A_method_Params]

// NewA_method_Params creates a new list of A_method_Params.
func NewA_method_Params_List(s *capnp.Segment, sz int32) (A_method_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[A_method_Params](l), err
}

// A_method_Params_Future is a wrapper for a A_method_Params promised by a client call.
type A_method_Params_Future struct{ *capnp.Future }

func (f A_method_Params_Future) Struct() (A_method_Params, error) {
	p, err := f.Future.Ptr()
	return A_method_Params(p.Struct()), err
}

type A_method_Results capnp.Struct

// A_method_Results_TypeID is the unique identifier for the type A_method_Results.
const A_method_Results_TypeID = 0x9e2108f9306a75ef

func NewA_method_Results(s *capnp.Segment) (A_method_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A_method_Results(st), err
}

func NewRootA_method_Results(s *capnp.Segment) (A_method_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return A_method_Results(st), err
}

func ReadRootA_method_Results(msg *capnp.Message) (A_method_Results, error) {
	root, err := msg.Root()
	return A_method_Results(root.Struct()), err
}

func (s A_method_Results) String() string {
	str, _ := text.Marshal(0x9e2108f9306a75ef, capnp.Struct(s))
	return str
}

func (s A_method_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (A_method_Results) DecodeFromPtr(p capnp.Ptr) A_method_Results {
	return A_method_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s A_method_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s A_method_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s A_method_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s A_method_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s A_method_Results) Res() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s A_method_Results) HasRes() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s A_method_Results) ResBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s A_method_Results) SetRes(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// A_method_Results_List is a list of A_method_Results.
type A_method_Results_List = capnp.StructList[A_method_Results]

// NewA_method_Results creates a new list of A_method_Results.
func NewA_method_Results_List(s *capnp.Segment, sz int32) (A_method_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[A_method_Results](l), err
}

// A_method_Results_Future is a wrapper for a A_method_Results promised by a client call.
type A_method_Results_Future struct{ *capnp.Future }

func (f A_method_Results_Future) Struct() (A_method_Results, error) {
	p, err := f.Future.Ptr()
	return A_method_Results(p.Struct()), err
}

const schema_c4b468a2826bb79b = "x\xda\x128\xe0\xc0b\xc8\xab\xce\xc2\xc0\x14h\xc0\xca" +
	"\xf6\xff}i\x96\xc1O\x0e\xc5y\x0c\x82\\\x8c\x0c\x0c" +
	"\xac\x8c\xec\x0c\x0c\xc2?\x19O10\x0a\xffe\xb4g" +
	"`\xfc\xef\x7fb\xf5\xe6\xfc\xff\xf3v1\x08r0\xff" +
	"\x9f\xbd=\xbbiQ\xc6\x96#\x0c\x0c\x8c\xc2\xb2LA" +
	"\xc2\x8aL \xe5\xb2L\xee\xc2\xae \xd6\xff\xef\xaa\x19" +
	"\x0f\x0f\xbcd;\x8al\x98.\xd3!\x06Fa]&" +
	"{\x86\x94\xff\x89z\xc9\x89\x05y\x05VL\x8ez\xb9" +
	"\xa9%\x19\xf9)*A\xa9\xc5\xa59%\xc5\x0c\x0c\x81" +
	",\xcc,\x0c\x0c,\x8c\x0c\x0c\x82\xbcJ\x0c\x0c\x81\x1c" +
	"\xcc\x8c\x81\"L\x8c\xecE\xa9\xc5\x8c<\x0cL\x8c<" +
	"\x0c\x8cp\xed\x0c\x8c\x8e\x01\x8c\x8c\x81,\xcc\xacHv" +
	"2\xc2|\"(h\xc5\xc0$\xc8\xcan\x0f\xb1\xc2\x81" +
	"1\x80\x91\x11\x8b\xcd\x01\x89E\x89\xb9\xc5(\xf6\x1a!" +
	"\xec\x95/\x00I\xc3l\x06\x04\x00\x00\xff\xff)\xb1K" +
	"\xb5"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_c4b468a2826bb79b,
		Nodes: []uint64{
			0x9e2108f9306a75ef,
			0xba9eff6fb3abc84f,
			0xc506e9c0e16825f7,
		},
		Compressed: true,
	})
}
