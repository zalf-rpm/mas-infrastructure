// Code generated by capnpc-go. DO NOT EDIT.

package fbp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Input struct{ Client *capnp.Client }

// Input_TypeID is the unique identifier for the type Input.
const Input_TypeID = 0x9f6bf783c59ae53f

func (c Input) Input(ctx context.Context, params func(Input_input_Params) error) (Input_input_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9f6bf783c59ae53f,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Input",
			MethodName:    "input",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Input_input_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Input_input_Results_Future{Future: ans.Future()}, release
}

func (c Input) AddRef() Input {
	return Input{
		Client: c.Client.AddRef(),
	}
}

func (c Input) Release() {
	c.Client.Release()
}

// A Input_Server is a Input with a local implementation.
type Input_Server interface {
	Input(context.Context, Input_input) error
}

// Input_NewServer creates a new Server from an implementation of Input_Server.
func Input_NewServer(s Input_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Input_Methods(nil, s), s, c, policy)
}

// Input_ServerToClient creates a new Client from an implementation of Input_Server.
// The caller is responsible for calling Release on the returned Client.
func Input_ServerToClient(s Input_Server, policy *server.Policy) Input {
	return Input{Client: capnp.NewClient(Input_NewServer(s, policy))}
}

// Input_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Input_Methods(methods []server.Method, s Input_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f6bf783c59ae53f,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Input",
			MethodName:    "input",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Input(ctx, Input_input{call})
		},
	})

	return methods
}

// Input_input holds the state for a server call to Input.input.
// See server.Call for documentation.
type Input_input struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Input_input) Args() Input_input_Params {
	return Input_input_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Input_input) AllocResults() (Input_input_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Input_input_Results{Struct: r}, err
}

type Input_input_Params struct{ capnp.Struct }

// Input_input_Params_TypeID is the unique identifier for the type Input_input_Params.
const Input_input_Params_TypeID = 0xdf66370e686c9b09

func NewInput_input_Params(s *capnp.Segment) (Input_input_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Input_input_Params{st}, err
}

func NewRootInput_input_Params(s *capnp.Segment) (Input_input_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Input_input_Params{st}, err
}

func ReadRootInput_input_Params(msg *capnp.Message) (Input_input_Params, error) {
	root, err := msg.Root()
	return Input_input_Params{root.Struct()}, err
}

func (s Input_input_Params) String() string {
	str, _ := text.Marshal(0xdf66370e686c9b09, s.Struct)
	return str
}

func (s Input_input_Params) Data() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Input_input_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Input_input_Params) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Input_input_Params) SetData(v string) error {
	return s.Struct.SetText(0, v)
}

// Input_input_Params_List is a list of Input_input_Params.
type Input_input_Params_List struct{ capnp.List }

// NewInput_input_Params creates a new list of Input_input_Params.
func NewInput_input_Params_List(s *capnp.Segment, sz int32) (Input_input_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Input_input_Params_List{l}, err
}

func (s Input_input_Params_List) At(i int) Input_input_Params {
	return Input_input_Params{s.List.Struct(i)}
}

func (s Input_input_Params_List) Set(i int, v Input_input_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Input_input_Params_List) String() string {
	str, _ := text.MarshalList(0xdf66370e686c9b09, s.List)
	return str
}

// Input_input_Params_Future is a wrapper for a Input_input_Params promised by a client call.
type Input_input_Params_Future struct{ *capnp.Future }

func (p Input_input_Params_Future) Struct() (Input_input_Params, error) {
	s, err := p.Future.Struct()
	return Input_input_Params{s}, err
}

type Input_input_Results struct{ capnp.Struct }

// Input_input_Results_TypeID is the unique identifier for the type Input_input_Results.
const Input_input_Results_TypeID = 0x9d2556ab64354282

func NewInput_input_Results(s *capnp.Segment) (Input_input_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Input_input_Results{st}, err
}

func NewRootInput_input_Results(s *capnp.Segment) (Input_input_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Input_input_Results{st}, err
}

func ReadRootInput_input_Results(msg *capnp.Message) (Input_input_Results, error) {
	root, err := msg.Root()
	return Input_input_Results{root.Struct()}, err
}

func (s Input_input_Results) String() string {
	str, _ := text.Marshal(0x9d2556ab64354282, s.Struct)
	return str
}

// Input_input_Results_List is a list of Input_input_Results.
type Input_input_Results_List struct{ capnp.List }

// NewInput_input_Results creates a new list of Input_input_Results.
func NewInput_input_Results_List(s *capnp.Segment, sz int32) (Input_input_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Input_input_Results_List{l}, err
}

func (s Input_input_Results_List) At(i int) Input_input_Results {
	return Input_input_Results{s.List.Struct(i)}
}

func (s Input_input_Results_List) Set(i int, v Input_input_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Input_input_Results_List) String() string {
	str, _ := text.MarshalList(0x9d2556ab64354282, s.List)
	return str
}

// Input_input_Results_Future is a wrapper for a Input_input_Results promised by a client call.
type Input_input_Results_Future struct{ *capnp.Future }

func (p Input_input_Results_Future) Struct() (Input_input_Results, error) {
	s, err := p.Future.Struct()
	return Input_input_Results{s}, err
}

type Output struct{ Client *capnp.Client }

// Output_TypeID is the unique identifier for the type Output.
const Output_TypeID = 0xf92ba4cc25099ed7

func (c Output) Output(ctx context.Context, params func(Output_output_Params) error) (Output_output_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf92ba4cc25099ed7,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Output",
			MethodName:    "output",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Output_output_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Output_output_Results_Future{Future: ans.Future()}, release
}

func (c Output) AddRef() Output {
	return Output{
		Client: c.Client.AddRef(),
	}
}

func (c Output) Release() {
	c.Client.Release()
}

// A Output_Server is a Output with a local implementation.
type Output_Server interface {
	Output(context.Context, Output_output) error
}

// Output_NewServer creates a new Server from an implementation of Output_Server.
func Output_NewServer(s Output_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Output_Methods(nil, s), s, c, policy)
}

// Output_ServerToClient creates a new Client from an implementation of Output_Server.
// The caller is responsible for calling Release on the returned Client.
func Output_ServerToClient(s Output_Server, policy *server.Policy) Output {
	return Output{Client: capnp.NewClient(Output_NewServer(s, policy))}
}

// Output_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Output_Methods(methods []server.Method, s Output_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf92ba4cc25099ed7,
			MethodID:      0,
			InterfaceName: "fbp.capnp:Output",
			MethodName:    "output",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Output(ctx, Output_output{call})
		},
	})

	return methods
}

// Output_output holds the state for a server call to Output.output.
// See server.Call for documentation.
type Output_output struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Output_output) Args() Output_output_Params {
	return Output_output_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Output_output) AllocResults() (Output_output_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Output_output_Results{Struct: r}, err
}

type Output_output_Params struct{ capnp.Struct }

// Output_output_Params_TypeID is the unique identifier for the type Output_output_Params.
const Output_output_Params_TypeID = 0xc041f7b2c1f05e54

func NewOutput_output_Params(s *capnp.Segment) (Output_output_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Output_output_Params{st}, err
}

func NewRootOutput_output_Params(s *capnp.Segment) (Output_output_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Output_output_Params{st}, err
}

func ReadRootOutput_output_Params(msg *capnp.Message) (Output_output_Params, error) {
	root, err := msg.Root()
	return Output_output_Params{root.Struct()}, err
}

func (s Output_output_Params) String() string {
	str, _ := text.Marshal(0xc041f7b2c1f05e54, s.Struct)
	return str
}

func (s Output_output_Params) Data() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Output_output_Params) HasData() bool {
	return s.Struct.HasPtr(0)
}

func (s Output_output_Params) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Output_output_Params) SetData(v string) error {
	return s.Struct.SetText(0, v)
}

// Output_output_Params_List is a list of Output_output_Params.
type Output_output_Params_List struct{ capnp.List }

// NewOutput_output_Params creates a new list of Output_output_Params.
func NewOutput_output_Params_List(s *capnp.Segment, sz int32) (Output_output_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Output_output_Params_List{l}, err
}

func (s Output_output_Params_List) At(i int) Output_output_Params {
	return Output_output_Params{s.List.Struct(i)}
}

func (s Output_output_Params_List) Set(i int, v Output_output_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Output_output_Params_List) String() string {
	str, _ := text.MarshalList(0xc041f7b2c1f05e54, s.List)
	return str
}

// Output_output_Params_Future is a wrapper for a Output_output_Params promised by a client call.
type Output_output_Params_Future struct{ *capnp.Future }

func (p Output_output_Params_Future) Struct() (Output_output_Params, error) {
	s, err := p.Future.Struct()
	return Output_output_Params{s}, err
}

type Output_output_Results struct{ capnp.Struct }

// Output_output_Results_TypeID is the unique identifier for the type Output_output_Results.
const Output_output_Results_TypeID = 0xb1ffe14d66f53639

func NewOutput_output_Results(s *capnp.Segment) (Output_output_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Output_output_Results{st}, err
}

func NewRootOutput_output_Results(s *capnp.Segment) (Output_output_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Output_output_Results{st}, err
}

func ReadRootOutput_output_Results(msg *capnp.Message) (Output_output_Results, error) {
	root, err := msg.Root()
	return Output_output_Results{root.Struct()}, err
}

func (s Output_output_Results) String() string {
	str, _ := text.Marshal(0xb1ffe14d66f53639, s.Struct)
	return str
}

// Output_output_Results_List is a list of Output_output_Results.
type Output_output_Results_List struct{ capnp.List }

// NewOutput_output_Results creates a new list of Output_output_Results.
func NewOutput_output_Results_List(s *capnp.Segment, sz int32) (Output_output_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Output_output_Results_List{l}, err
}

func (s Output_output_Results_List) At(i int) Output_output_Results {
	return Output_output_Results{s.List.Struct(i)}
}

func (s Output_output_Results_List) Set(i int, v Output_output_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Output_output_Results_List) String() string {
	str, _ := text.MarshalList(0xb1ffe14d66f53639, s.List)
	return str
}

// Output_output_Results_Future is a wrapper for a Output_output_Results promised by a client call.
type Output_output_Results_Future struct{ *capnp.Future }

func (p Output_output_Results_Future) Struct() (Output_output_Results, error) {
	s, err := p.Future.Struct()
	return Output_output_Results{s}, err
}

const schema_bf602c4868dbb22f = "x\xda\x12\xb8\xee\xc0d\xc8\xaa\xce\xc2\xc0\x10h\xc0\xca" +
	"\xf6\xbf\xc9\xc94eu\x98\xea\\\x06A\x01F\x06\x06" +
	"\x16v\x06\x06\xe1\x9f\x8c\x9f\x18X\xfe\xdb?\x9du\xb4" +
	"\xf9{\xf6|\x06A.\xe6\xff\xfa\x9bngx\xe8$" +
	"\xecg``\x14\xbe\xcb\xd8$\xfc\x90\x11\xa4\xf0.\xa3" +
	"\xbb0+\x13;\x03\xc3\x7fK\xb3\xafi\xbe\x0f\xffo" +
	"d\x10\x14\x84\x9ab\xfc\x96\x91\x89\x91\x81\xe5\x7fH\xdc" +
	"\x87\x83\x9b\xbe;\x1e\x80\xc8\xb0\x82\xf5]d\xfc\xc5\xc0" +
	"(|\x95\xd1\x9e\x81\xf1?\xe7\xec\x9c\x0c>\xf3\xb4\xfb" +
	"\x10\xfb!\xf2_\x19_10\x0a\xff\x04\xcb_\x9f\xc7" +
	"\xa9zf\x89\xf6O\x0cgH2u\x09+\x82,\x17" +
	"\x96er\x17vebgp\xfa\x9f\x96T\xa0\x97\x9c" +
	"X\x90\xc7T`\xe5\x99WPZ\xa2\x97\x09\"U\x82" +
	"R\xe5\x8bKsJ\x8a\xe1\xf2\x8cPy\x86\x00F\xc6" +
	"@\x16fV\x06\x06\xb8;\x18a\x01\"(h\xc4\xc0" +
	"$\xc8\xca.\x0f6\xc3\x811\x80\x91\x11\xae\x9f\xad\xc0" +
	"\xca\xbf\xb4\x04dA>\x98R\x09J\x05[\xc0\x00S" +
	"\x80.o\x1f\x90X\x94\x98[\x1c\xc8\xc2\xcc\xc2\xc0\xc0" +
	"\xc2\xc8\xc0 \xc8\xab\xc5\xc0\x10\xc8\xc1\xcc\x18(\xc2\xc4" +
	"\xc8\x9f\x92X\x92\xc8\xc8\xc3\xc0\xc4\xc8\xc3\xc0\x88\xcb\x13" +
	"\x01\x89\xfc$\x1b\xc1\x08s\x07\x03\x92Oa1\xc2\x08" +
	"\x8b4AA+\xb0O\xed!\x8e\x05{\x15\x10\x00\x00" +
	"\xff\xffC\x84\x9b\x01"

func init() {
	schemas.Register(schema_bf602c4868dbb22f,
		0x9d2556ab64354282,
		0x9f6bf783c59ae53f,
		0xb1ffe14d66f53639,
		0xc041f7b2c1f05e54,
		0xdf66370e686c9b09,
		0xf92ba4cc25099ed7)
}
